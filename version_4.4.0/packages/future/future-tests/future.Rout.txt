
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:39:23.894] plan(): Setting new future strategy stack:
[17:39:23.894] List of future strategies:
[17:39:23.894] 1. sequential:
[17:39:23.894]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:23.894]    - tweaked: FALSE
[17:39:23.894]    - call: future::plan("sequential")
[17:39:23.905] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[17:39:23.919] getGlobalsAndPackages() ...
[17:39:23.919] Searching for globals...
[17:39:23.923] - globals found: [1] ‘{’
[17:39:23.923] Searching for globals ... DONE
[17:39:23.923] Resolving globals: FALSE
[17:39:23.923] 
[17:39:23.923] 
[17:39:23.924] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[17:39:23.924] resolved() for ‘Future’ ...
[17:39:23.924] - state: ‘created’
[17:39:23.924] - run: TRUE
[17:39:23.925] - run() ...
[17:39:23.925] run() for ‘Future’ ...
[17:39:23.925] - state: ‘created’
[17:39:23.925] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:23.925] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:23.926] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:23.926]   - Field: ‘label’
[17:39:23.926]   - Field: ‘local’
[17:39:23.926]   - Field: ‘owner’
[17:39:23.926]   - Field: ‘envir’
[17:39:23.926]   - Field: ‘packages’
[17:39:23.926]   - Field: ‘gc’
[17:39:23.926]   - Field: ‘conditions’
[17:39:23.926]   - Field: ‘expr’
[17:39:23.926]   - Field: ‘uuid’
[17:39:23.926]   - Field: ‘seed’
[17:39:23.927]   - Field: ‘version’
[17:39:23.927]   - Field: ‘result’
[17:39:23.927]   - Field: ‘asynchronous’
[17:39:23.927]   - Field: ‘calls’
[17:39:23.927]   - Field: ‘globals’
[17:39:23.927]   - Field: ‘stdout’
[17:39:23.927]   - Field: ‘earlySignal’
[17:39:23.927]   - Field: ‘lazy’
[17:39:23.927]   - Field: ‘state’
[17:39:23.927] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:23.928] - Launch lazy future ...
[17:39:23.928] Packages needed by the future expression (n = 0): <none>
[17:39:23.928] Packages needed by future strategies (n = 0): <none>
[17:39:23.929] {
[17:39:23.929]     {
[17:39:23.929]         {
[17:39:23.929]             ...future.startTime <- base::Sys.time()
[17:39:23.929]             {
[17:39:23.929]                 {
[17:39:23.929]                   {
[17:39:23.929]                     base::local({
[17:39:23.929]                       has_future <- base::requireNamespace("future", 
[17:39:23.929]                         quietly = TRUE)
[17:39:23.929]                       if (has_future) {
[17:39:23.929]                         ns <- base::getNamespace("future")
[17:39:23.929]                         version <- ns[[".package"]][["version"]]
[17:39:23.929]                         if (is.null(version)) 
[17:39:23.929]                           version <- utils::packageVersion("future")
[17:39:23.929]                       }
[17:39:23.929]                       else {
[17:39:23.929]                         version <- NULL
[17:39:23.929]                       }
[17:39:23.929]                       if (!has_future || version < "1.8.0") {
[17:39:23.929]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:23.929]                           "", base::R.version$version.string), 
[17:39:23.929]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:23.929]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:23.929]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:23.929]                             "release", "version")], collapse = " "), 
[17:39:23.929]                           hostname = base::Sys.info()[["nodename"]])
[17:39:23.929]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:23.929]                           info)
[17:39:23.929]                         info <- base::paste(info, collapse = "; ")
[17:39:23.929]                         if (!has_future) {
[17:39:23.929]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:23.929]                             info)
[17:39:23.929]                         }
[17:39:23.929]                         else {
[17:39:23.929]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:23.929]                             info, version)
[17:39:23.929]                         }
[17:39:23.929]                         base::stop(msg)
[17:39:23.929]                       }
[17:39:23.929]                     })
[17:39:23.929]                   }
[17:39:23.929]                   ...future.strategy.old <- future::plan("list")
[17:39:23.929]                   options(future.plan = NULL)
[17:39:23.929]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:23.929]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:23.929]                 }
[17:39:23.929]                 ...future.workdir <- getwd()
[17:39:23.929]             }
[17:39:23.929]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:23.929]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:23.929]         }
[17:39:23.929]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:23.929]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:23.929]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:23.929]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:23.929]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:23.929]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:23.929]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:23.929]             base::names(...future.oldOptions))
[17:39:23.929]     }
[17:39:23.929]     if (FALSE) {
[17:39:23.929]     }
[17:39:23.929]     else {
[17:39:23.929]         if (TRUE) {
[17:39:23.929]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:23.929]                 open = "w")
[17:39:23.929]         }
[17:39:23.929]         else {
[17:39:23.929]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:23.929]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:23.929]         }
[17:39:23.929]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:23.929]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:23.929]             base::sink(type = "output", split = FALSE)
[17:39:23.929]             base::close(...future.stdout)
[17:39:23.929]         }, add = TRUE)
[17:39:23.929]     }
[17:39:23.929]     ...future.frame <- base::sys.nframe()
[17:39:23.929]     ...future.conditions <- base::list()
[17:39:23.929]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:23.929]     if (FALSE) {
[17:39:23.929]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:23.929]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:23.929]     }
[17:39:23.929]     ...future.result <- base::tryCatch({
[17:39:23.929]         base::withCallingHandlers({
[17:39:23.929]             ...future.value <- base::withVisible(base::local({
[17:39:23.929]                 42L
[17:39:23.929]             }))
[17:39:23.929]             future::FutureResult(value = ...future.value$value, 
[17:39:23.929]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:23.929]                   ...future.rng), globalenv = if (FALSE) 
[17:39:23.929]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:23.929]                     ...future.globalenv.names))
[17:39:23.929]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:23.929]         }, condition = base::local({
[17:39:23.929]             c <- base::c
[17:39:23.929]             inherits <- base::inherits
[17:39:23.929]             invokeRestart <- base::invokeRestart
[17:39:23.929]             length <- base::length
[17:39:23.929]             list <- base::list
[17:39:23.929]             seq.int <- base::seq.int
[17:39:23.929]             signalCondition <- base::signalCondition
[17:39:23.929]             sys.calls <- base::sys.calls
[17:39:23.929]             `[[` <- base::`[[`
[17:39:23.929]             `+` <- base::`+`
[17:39:23.929]             `<<-` <- base::`<<-`
[17:39:23.929]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:23.929]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:23.929]                   3L)]
[17:39:23.929]             }
[17:39:23.929]             function(cond) {
[17:39:23.929]                 is_error <- inherits(cond, "error")
[17:39:23.929]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:23.929]                   NULL)
[17:39:23.929]                 if (is_error) {
[17:39:23.929]                   sessionInformation <- function() {
[17:39:23.929]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:23.929]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:23.929]                       search = base::search(), system = base::Sys.info())
[17:39:23.929]                   }
[17:39:23.929]                   ...future.conditions[[length(...future.conditions) + 
[17:39:23.929]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:23.929]                     cond$call), session = sessionInformation(), 
[17:39:23.929]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:23.929]                   signalCondition(cond)
[17:39:23.929]                 }
[17:39:23.929]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:23.929]                 "immediateCondition"))) {
[17:39:23.929]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:23.929]                   ...future.conditions[[length(...future.conditions) + 
[17:39:23.929]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:23.929]                   if (TRUE && !signal) {
[17:39:23.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:23.929]                     {
[17:39:23.929]                       inherits <- base::inherits
[17:39:23.929]                       invokeRestart <- base::invokeRestart
[17:39:23.929]                       is.null <- base::is.null
[17:39:23.929]                       muffled <- FALSE
[17:39:23.929]                       if (inherits(cond, "message")) {
[17:39:23.929]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:23.929]                         if (muffled) 
[17:39:23.929]                           invokeRestart("muffleMessage")
[17:39:23.929]                       }
[17:39:23.929]                       else if (inherits(cond, "warning")) {
[17:39:23.929]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:23.929]                         if (muffled) 
[17:39:23.929]                           invokeRestart("muffleWarning")
[17:39:23.929]                       }
[17:39:23.929]                       else if (inherits(cond, "condition")) {
[17:39:23.929]                         if (!is.null(pattern)) {
[17:39:23.929]                           computeRestarts <- base::computeRestarts
[17:39:23.929]                           grepl <- base::grepl
[17:39:23.929]                           restarts <- computeRestarts(cond)
[17:39:23.929]                           for (restart in restarts) {
[17:39:23.929]                             name <- restart$name
[17:39:23.929]                             if (is.null(name)) 
[17:39:23.929]                               next
[17:39:23.929]                             if (!grepl(pattern, name)) 
[17:39:23.929]                               next
[17:39:23.929]                             invokeRestart(restart)
[17:39:23.929]                             muffled <- TRUE
[17:39:23.929]                             break
[17:39:23.929]                           }
[17:39:23.929]                         }
[17:39:23.929]                       }
[17:39:23.929]                       invisible(muffled)
[17:39:23.929]                     }
[17:39:23.929]                     muffleCondition(cond, pattern = "^muffle")
[17:39:23.929]                   }
[17:39:23.929]                 }
[17:39:23.929]                 else {
[17:39:23.929]                   if (TRUE) {
[17:39:23.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:23.929]                     {
[17:39:23.929]                       inherits <- base::inherits
[17:39:23.929]                       invokeRestart <- base::invokeRestart
[17:39:23.929]                       is.null <- base::is.null
[17:39:23.929]                       muffled <- FALSE
[17:39:23.929]                       if (inherits(cond, "message")) {
[17:39:23.929]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:23.929]                         if (muffled) 
[17:39:23.929]                           invokeRestart("muffleMessage")
[17:39:23.929]                       }
[17:39:23.929]                       else if (inherits(cond, "warning")) {
[17:39:23.929]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:23.929]                         if (muffled) 
[17:39:23.929]                           invokeRestart("muffleWarning")
[17:39:23.929]                       }
[17:39:23.929]                       else if (inherits(cond, "condition")) {
[17:39:23.929]                         if (!is.null(pattern)) {
[17:39:23.929]                           computeRestarts <- base::computeRestarts
[17:39:23.929]                           grepl <- base::grepl
[17:39:23.929]                           restarts <- computeRestarts(cond)
[17:39:23.929]                           for (restart in restarts) {
[17:39:23.929]                             name <- restart$name
[17:39:23.929]                             if (is.null(name)) 
[17:39:23.929]                               next
[17:39:23.929]                             if (!grepl(pattern, name)) 
[17:39:23.929]                               next
[17:39:23.929]                             invokeRestart(restart)
[17:39:23.929]                             muffled <- TRUE
[17:39:23.929]                             break
[17:39:23.929]                           }
[17:39:23.929]                         }
[17:39:23.929]                       }
[17:39:23.929]                       invisible(muffled)
[17:39:23.929]                     }
[17:39:23.929]                     muffleCondition(cond, pattern = "^muffle")
[17:39:23.929]                   }
[17:39:23.929]                 }
[17:39:23.929]             }
[17:39:23.929]         }))
[17:39:23.929]     }, error = function(ex) {
[17:39:23.929]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:23.929]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:23.929]                 ...future.rng), started = ...future.startTime, 
[17:39:23.929]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:23.929]             version = "1.8"), class = "FutureResult")
[17:39:23.929]     }, finally = {
[17:39:23.929]         if (!identical(...future.workdir, getwd())) 
[17:39:23.929]             setwd(...future.workdir)
[17:39:23.929]         {
[17:39:23.929]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:23.929]                 ...future.oldOptions$nwarnings <- NULL
[17:39:23.929]             }
[17:39:23.929]             base::options(...future.oldOptions)
[17:39:23.929]             if (.Platform$OS.type == "windows") {
[17:39:23.929]                 old_names <- names(...future.oldEnvVars)
[17:39:23.929]                 envs <- base::Sys.getenv()
[17:39:23.929]                 names <- names(envs)
[17:39:23.929]                 common <- intersect(names, old_names)
[17:39:23.929]                 added <- setdiff(names, old_names)
[17:39:23.929]                 removed <- setdiff(old_names, names)
[17:39:23.929]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:23.929]                   envs[common]]
[17:39:23.929]                 NAMES <- toupper(changed)
[17:39:23.929]                 args <- list()
[17:39:23.929]                 for (kk in seq_along(NAMES)) {
[17:39:23.929]                   name <- changed[[kk]]
[17:39:23.929]                   NAME <- NAMES[[kk]]
[17:39:23.929]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:23.929]                     next
[17:39:23.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:23.929]                 }
[17:39:23.929]                 NAMES <- toupper(added)
[17:39:23.929]                 for (kk in seq_along(NAMES)) {
[17:39:23.929]                   name <- added[[kk]]
[17:39:23.929]                   NAME <- NAMES[[kk]]
[17:39:23.929]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:23.929]                     next
[17:39:23.929]                   args[[name]] <- ""
[17:39:23.929]                 }
[17:39:23.929]                 NAMES <- toupper(removed)
[17:39:23.929]                 for (kk in seq_along(NAMES)) {
[17:39:23.929]                   name <- removed[[kk]]
[17:39:23.929]                   NAME <- NAMES[[kk]]
[17:39:23.929]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:23.929]                     next
[17:39:23.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:23.929]                 }
[17:39:23.929]                 if (length(args) > 0) 
[17:39:23.929]                   base::do.call(base::Sys.setenv, args = args)
[17:39:23.929]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:23.929]             }
[17:39:23.929]             else {
[17:39:23.929]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:23.929]             }
[17:39:23.929]             {
[17:39:23.929]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:23.929]                   0L) {
[17:39:23.929]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:23.929]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:23.929]                   base::options(opts)
[17:39:23.929]                 }
[17:39:23.929]                 {
[17:39:23.929]                   {
[17:39:23.929]                     NULL
[17:39:23.929]                     RNGkind("Mersenne-Twister")
[17:39:23.929]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:23.929]                       inherits = FALSE)
[17:39:23.929]                   }
[17:39:23.929]                   options(future.plan = NULL)
[17:39:23.929]                   if (is.na(NA_character_)) 
[17:39:23.929]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:23.929]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:23.929]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:23.929]                     .init = FALSE)
[17:39:23.929]                 }
[17:39:23.929]             }
[17:39:23.929]         }
[17:39:23.929]     })
[17:39:23.929]     if (TRUE) {
[17:39:23.929]         base::sink(type = "output", split = FALSE)
[17:39:23.929]         if (TRUE) {
[17:39:23.929]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:23.929]         }
[17:39:23.929]         else {
[17:39:23.929]             ...future.result["stdout"] <- base::list(NULL)
[17:39:23.929]         }
[17:39:23.929]         base::close(...future.stdout)
[17:39:23.929]         ...future.stdout <- NULL
[17:39:23.929]     }
[17:39:23.929]     ...future.result$conditions <- ...future.conditions
[17:39:23.929]     ...future.result$finished <- base::Sys.time()
[17:39:23.929]     ...future.result
[17:39:23.929] }
[17:39:23.931] plan(): Setting new future strategy stack:
[17:39:23.931] List of future strategies:
[17:39:23.931] 1. sequential:
[17:39:23.931]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:23.931]    - tweaked: FALSE
[17:39:23.931]    - call: NULL
[17:39:23.932] plan(): nbrOfWorkers() = 1
[17:39:23.933] plan(): Setting new future strategy stack:
[17:39:23.933] List of future strategies:
[17:39:23.933] 1. sequential:
[17:39:23.933]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:23.933]    - tweaked: FALSE
[17:39:23.933]    - call: future::plan("sequential")
[17:39:23.933] plan(): nbrOfWorkers() = 1
[17:39:23.934] SequentialFuture started (and completed)
[17:39:23.934] - Launch lazy future ... done
[17:39:23.934] run() for ‘SequentialFuture’ ... done
[17:39:23.934] - run() ... done
[17:39:23.934] - resolved() ...
[17:39:23.934] resolved() for ‘SequentialFuture’ ...
[17:39:23.935] - state: ‘finished’
[17:39:23.935] - run: TRUE
[17:39:23.935] - result: ‘FutureResult’
[17:39:23.935] resolved() for ‘SequentialFuture’ ... done
[17:39:23.935] - resolved: TRUE
[17:39:23.935] - resolved() ... done
[17:39:23.935] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[17:39:23.936] getGlobalsAndPackages() ...
[17:39:23.936] Searching for globals...
[17:39:23.936] 
[17:39:23.936] Searching for globals ... DONE
[17:39:23.936] - globals: [0] <none>
[17:39:23.936] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 31bfa6e6-f1e5-fa3d-4ee7-3adb36bd4b2d
Class: ‘Future’, ‘environment’
> y <- value(f)
[17:39:23.937] run() for ‘Future’ ...
[17:39:23.937] - state: ‘created’
[17:39:23.938] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:23.938] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:23.938] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:23.938]   - Field: ‘label’
[17:39:23.938]   - Field: ‘local’
[17:39:23.938]   - Field: ‘owner’
[17:39:23.938]   - Field: ‘envir’
[17:39:23.938]   - Field: ‘packages’
[17:39:23.938]   - Field: ‘gc’
[17:39:23.939]   - Field: ‘conditions’
[17:39:23.939]   - Field: ‘expr’
[17:39:23.939]   - Field: ‘uuid’
[17:39:23.939]   - Field: ‘seed’
[17:39:23.939]   - Field: ‘version’
[17:39:23.939]   - Field: ‘result’
[17:39:23.939]   - Field: ‘asynchronous’
[17:39:23.939]   - Field: ‘calls’
[17:39:23.939]   - Field: ‘globals’
[17:39:23.939]   - Field: ‘stdout’
[17:39:23.939]   - Field: ‘earlySignal’
[17:39:23.940]   - Field: ‘lazy’
[17:39:23.940]   - Field: ‘state’
[17:39:23.940] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:23.940] - Launch lazy future ...
[17:39:23.940] Packages needed by the future expression (n = 0): <none>
[17:39:23.940] Packages needed by future strategies (n = 0): <none>
[17:39:23.941] {
[17:39:23.941]     {
[17:39:23.941]         {
[17:39:23.941]             ...future.startTime <- base::Sys.time()
[17:39:23.941]             {
[17:39:23.941]                 {
[17:39:23.941]                   {
[17:39:23.941]                     base::local({
[17:39:23.941]                       has_future <- base::requireNamespace("future", 
[17:39:23.941]                         quietly = TRUE)
[17:39:23.941]                       if (has_future) {
[17:39:23.941]                         ns <- base::getNamespace("future")
[17:39:23.941]                         version <- ns[[".package"]][["version"]]
[17:39:23.941]                         if (is.null(version)) 
[17:39:23.941]                           version <- utils::packageVersion("future")
[17:39:23.941]                       }
[17:39:23.941]                       else {
[17:39:23.941]                         version <- NULL
[17:39:23.941]                       }
[17:39:23.941]                       if (!has_future || version < "1.8.0") {
[17:39:23.941]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:23.941]                           "", base::R.version$version.string), 
[17:39:23.941]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:23.941]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:23.941]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:23.941]                             "release", "version")], collapse = " "), 
[17:39:23.941]                           hostname = base::Sys.info()[["nodename"]])
[17:39:23.941]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:23.941]                           info)
[17:39:23.941]                         info <- base::paste(info, collapse = "; ")
[17:39:23.941]                         if (!has_future) {
[17:39:23.941]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:23.941]                             info)
[17:39:23.941]                         }
[17:39:23.941]                         else {
[17:39:23.941]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:23.941]                             info, version)
[17:39:23.941]                         }
[17:39:23.941]                         base::stop(msg)
[17:39:23.941]                       }
[17:39:23.941]                     })
[17:39:23.941]                   }
[17:39:23.941]                   ...future.strategy.old <- future::plan("list")
[17:39:23.941]                   options(future.plan = NULL)
[17:39:23.941]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:23.941]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:23.941]                 }
[17:39:23.941]                 ...future.workdir <- getwd()
[17:39:23.941]             }
[17:39:23.941]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:23.941]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:23.941]         }
[17:39:23.941]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:23.941]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:23.941]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:23.941]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:23.941]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:23.941]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:23.941]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:23.941]             base::names(...future.oldOptions))
[17:39:23.941]     }
[17:39:23.941]     if (FALSE) {
[17:39:23.941]     }
[17:39:23.941]     else {
[17:39:23.941]         if (TRUE) {
[17:39:23.941]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:23.941]                 open = "w")
[17:39:23.941]         }
[17:39:23.941]         else {
[17:39:23.941]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:23.941]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:23.941]         }
[17:39:23.941]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:23.941]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:23.941]             base::sink(type = "output", split = FALSE)
[17:39:23.941]             base::close(...future.stdout)
[17:39:23.941]         }, add = TRUE)
[17:39:23.941]     }
[17:39:23.941]     ...future.frame <- base::sys.nframe()
[17:39:23.941]     ...future.conditions <- base::list()
[17:39:23.941]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:23.941]     if (FALSE) {
[17:39:23.941]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:23.941]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:23.941]     }
[17:39:23.941]     ...future.result <- base::tryCatch({
[17:39:23.941]         base::withCallingHandlers({
[17:39:23.941]             ...future.value <- base::withVisible(base::local(42L))
[17:39:23.941]             future::FutureResult(value = ...future.value$value, 
[17:39:23.941]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:23.941]                   ...future.rng), globalenv = if (FALSE) 
[17:39:23.941]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:23.941]                     ...future.globalenv.names))
[17:39:23.941]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:23.941]         }, condition = base::local({
[17:39:23.941]             c <- base::c
[17:39:23.941]             inherits <- base::inherits
[17:39:23.941]             invokeRestart <- base::invokeRestart
[17:39:23.941]             length <- base::length
[17:39:23.941]             list <- base::list
[17:39:23.941]             seq.int <- base::seq.int
[17:39:23.941]             signalCondition <- base::signalCondition
[17:39:23.941]             sys.calls <- base::sys.calls
[17:39:23.941]             `[[` <- base::`[[`
[17:39:23.941]             `+` <- base::`+`
[17:39:23.941]             `<<-` <- base::`<<-`
[17:39:23.941]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:23.941]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:23.941]                   3L)]
[17:39:23.941]             }
[17:39:23.941]             function(cond) {
[17:39:23.941]                 is_error <- inherits(cond, "error")
[17:39:23.941]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:23.941]                   NULL)
[17:39:23.941]                 if (is_error) {
[17:39:23.941]                   sessionInformation <- function() {
[17:39:23.941]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:23.941]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:23.941]                       search = base::search(), system = base::Sys.info())
[17:39:23.941]                   }
[17:39:23.941]                   ...future.conditions[[length(...future.conditions) + 
[17:39:23.941]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:23.941]                     cond$call), session = sessionInformation(), 
[17:39:23.941]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:23.941]                   signalCondition(cond)
[17:39:23.941]                 }
[17:39:23.941]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:23.941]                 "immediateCondition"))) {
[17:39:23.941]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:23.941]                   ...future.conditions[[length(...future.conditions) + 
[17:39:23.941]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:23.941]                   if (TRUE && !signal) {
[17:39:23.941]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:23.941]                     {
[17:39:23.941]                       inherits <- base::inherits
[17:39:23.941]                       invokeRestart <- base::invokeRestart
[17:39:23.941]                       is.null <- base::is.null
[17:39:23.941]                       muffled <- FALSE
[17:39:23.941]                       if (inherits(cond, "message")) {
[17:39:23.941]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:23.941]                         if (muffled) 
[17:39:23.941]                           invokeRestart("muffleMessage")
[17:39:23.941]                       }
[17:39:23.941]                       else if (inherits(cond, "warning")) {
[17:39:23.941]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:23.941]                         if (muffled) 
[17:39:23.941]                           invokeRestart("muffleWarning")
[17:39:23.941]                       }
[17:39:23.941]                       else if (inherits(cond, "condition")) {
[17:39:23.941]                         if (!is.null(pattern)) {
[17:39:23.941]                           computeRestarts <- base::computeRestarts
[17:39:23.941]                           grepl <- base::grepl
[17:39:23.941]                           restarts <- computeRestarts(cond)
[17:39:23.941]                           for (restart in restarts) {
[17:39:23.941]                             name <- restart$name
[17:39:23.941]                             if (is.null(name)) 
[17:39:23.941]                               next
[17:39:23.941]                             if (!grepl(pattern, name)) 
[17:39:23.941]                               next
[17:39:23.941]                             invokeRestart(restart)
[17:39:23.941]                             muffled <- TRUE
[17:39:23.941]                             break
[17:39:23.941]                           }
[17:39:23.941]                         }
[17:39:23.941]                       }
[17:39:23.941]                       invisible(muffled)
[17:39:23.941]                     }
[17:39:23.941]                     muffleCondition(cond, pattern = "^muffle")
[17:39:23.941]                   }
[17:39:23.941]                 }
[17:39:23.941]                 else {
[17:39:23.941]                   if (TRUE) {
[17:39:23.941]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:23.941]                     {
[17:39:23.941]                       inherits <- base::inherits
[17:39:23.941]                       invokeRestart <- base::invokeRestart
[17:39:23.941]                       is.null <- base::is.null
[17:39:23.941]                       muffled <- FALSE
[17:39:23.941]                       if (inherits(cond, "message")) {
[17:39:23.941]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:23.941]                         if (muffled) 
[17:39:23.941]                           invokeRestart("muffleMessage")
[17:39:23.941]                       }
[17:39:23.941]                       else if (inherits(cond, "warning")) {
[17:39:23.941]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:23.941]                         if (muffled) 
[17:39:23.941]                           invokeRestart("muffleWarning")
[17:39:23.941]                       }
[17:39:23.941]                       else if (inherits(cond, "condition")) {
[17:39:23.941]                         if (!is.null(pattern)) {
[17:39:23.941]                           computeRestarts <- base::computeRestarts
[17:39:23.941]                           grepl <- base::grepl
[17:39:23.941]                           restarts <- computeRestarts(cond)
[17:39:23.941]                           for (restart in restarts) {
[17:39:23.941]                             name <- restart$name
[17:39:23.941]                             if (is.null(name)) 
[17:39:23.941]                               next
[17:39:23.941]                             if (!grepl(pattern, name)) 
[17:39:23.941]                               next
[17:39:23.941]                             invokeRestart(restart)
[17:39:23.941]                             muffled <- TRUE
[17:39:23.941]                             break
[17:39:23.941]                           }
[17:39:23.941]                         }
[17:39:23.941]                       }
[17:39:23.941]                       invisible(muffled)
[17:39:23.941]                     }
[17:39:23.941]                     muffleCondition(cond, pattern = "^muffle")
[17:39:23.941]                   }
[17:39:23.941]                 }
[17:39:23.941]             }
[17:39:23.941]         }))
[17:39:23.941]     }, error = function(ex) {
[17:39:23.941]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:23.941]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:23.941]                 ...future.rng), started = ...future.startTime, 
[17:39:23.941]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:23.941]             version = "1.8"), class = "FutureResult")
[17:39:23.941]     }, finally = {
[17:39:23.941]         if (!identical(...future.workdir, getwd())) 
[17:39:23.941]             setwd(...future.workdir)
[17:39:23.941]         {
[17:39:23.941]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:23.941]                 ...future.oldOptions$nwarnings <- NULL
[17:39:23.941]             }
[17:39:23.941]             base::options(...future.oldOptions)
[17:39:23.941]             if (.Platform$OS.type == "windows") {
[17:39:23.941]                 old_names <- names(...future.oldEnvVars)
[17:39:23.941]                 envs <- base::Sys.getenv()
[17:39:23.941]                 names <- names(envs)
[17:39:23.941]                 common <- intersect(names, old_names)
[17:39:23.941]                 added <- setdiff(names, old_names)
[17:39:23.941]                 removed <- setdiff(old_names, names)
[17:39:23.941]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:23.941]                   envs[common]]
[17:39:23.941]                 NAMES <- toupper(changed)
[17:39:23.941]                 args <- list()
[17:39:23.941]                 for (kk in seq_along(NAMES)) {
[17:39:23.941]                   name <- changed[[kk]]
[17:39:23.941]                   NAME <- NAMES[[kk]]
[17:39:23.941]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:23.941]                     next
[17:39:23.941]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:23.941]                 }
[17:39:23.941]                 NAMES <- toupper(added)
[17:39:23.941]                 for (kk in seq_along(NAMES)) {
[17:39:23.941]                   name <- added[[kk]]
[17:39:23.941]                   NAME <- NAMES[[kk]]
[17:39:23.941]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:23.941]                     next
[17:39:23.941]                   args[[name]] <- ""
[17:39:23.941]                 }
[17:39:23.941]                 NAMES <- toupper(removed)
[17:39:23.941]                 for (kk in seq_along(NAMES)) {
[17:39:23.941]                   name <- removed[[kk]]
[17:39:23.941]                   NAME <- NAMES[[kk]]
[17:39:23.941]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:23.941]                     next
[17:39:23.941]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:23.941]                 }
[17:39:23.941]                 if (length(args) > 0) 
[17:39:23.941]                   base::do.call(base::Sys.setenv, args = args)
[17:39:23.941]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:23.941]             }
[17:39:23.941]             else {
[17:39:23.941]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:23.941]             }
[17:39:23.941]             {
[17:39:23.941]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:23.941]                   0L) {
[17:39:23.941]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:23.941]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:23.941]                   base::options(opts)
[17:39:23.941]                 }
[17:39:23.941]                 {
[17:39:23.941]                   {
[17:39:23.941]                     NULL
[17:39:23.941]                     RNGkind("Mersenne-Twister")
[17:39:23.941]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:23.941]                       inherits = FALSE)
[17:39:23.941]                   }
[17:39:23.941]                   options(future.plan = NULL)
[17:39:23.941]                   if (is.na(NA_character_)) 
[17:39:23.941]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:23.941]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:23.941]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:23.941]                     .init = FALSE)
[17:39:23.941]                 }
[17:39:23.941]             }
[17:39:23.941]         }
[17:39:23.941]     })
[17:39:23.941]     if (TRUE) {
[17:39:23.941]         base::sink(type = "output", split = FALSE)
[17:39:23.941]         if (TRUE) {
[17:39:23.941]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:23.941]         }
[17:39:23.941]         else {
[17:39:23.941]             ...future.result["stdout"] <- base::list(NULL)
[17:39:23.941]         }
[17:39:23.941]         base::close(...future.stdout)
[17:39:23.941]         ...future.stdout <- NULL
[17:39:23.941]     }
[17:39:23.941]     ...future.result$conditions <- ...future.conditions
[17:39:23.941]     ...future.result$finished <- base::Sys.time()
[17:39:23.941]     ...future.result
[17:39:23.941] }
[17:39:23.942] plan(): Setting new future strategy stack:
[17:39:23.942] List of future strategies:
[17:39:23.942] 1. sequential:
[17:39:23.942]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:23.942]    - tweaked: FALSE
[17:39:23.942]    - call: NULL
[17:39:23.943] plan(): nbrOfWorkers() = 1
[17:39:23.943] plan(): Setting new future strategy stack:
[17:39:23.944] List of future strategies:
[17:39:23.944] 1. sequential:
[17:39:23.944]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:23.944]    - tweaked: FALSE
[17:39:23.944]    - call: future::plan("sequential")
[17:39:23.944] plan(): nbrOfWorkers() = 1
[17:39:23.944] SequentialFuture started (and completed)
[17:39:23.944] - Launch lazy future ... done
[17:39:23.944] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[17:39:23.945] getGlobalsAndPackages() ...
[17:39:23.945] Searching for globals...
[17:39:23.946] - globals found: [1] ‘{’
[17:39:23.946] Searching for globals ... DONE
[17:39:23.946] Resolving globals: FALSE
[17:39:23.946] 
[17:39:23.946] 
[17:39:23.946] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[17:39:23.946] resolved() for ‘Future’ ...
[17:39:23.947] - state: ‘created’
[17:39:23.947] - run: TRUE
[17:39:23.947] - run() ...
[17:39:23.947] run() for ‘Future’ ...
[17:39:23.947] - state: ‘created’
[17:39:23.947] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:23.947] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:23.947] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:23.947]   - Field: ‘label’
[17:39:23.948]   - Field: ‘local’
[17:39:23.948]   - Field: ‘owner’
[17:39:23.948]   - Field: ‘envir’
[17:39:23.948]   - Field: ‘packages’
[17:39:23.948]   - Field: ‘gc’
[17:39:23.948]   - Field: ‘conditions’
[17:39:23.948]   - Field: ‘expr’
[17:39:23.948]   - Field: ‘uuid’
[17:39:23.948]   - Field: ‘seed’
[17:39:23.948]   - Field: ‘version’
[17:39:23.949]   - Field: ‘result’
[17:39:23.949]   - Field: ‘asynchronous’
[17:39:23.949]   - Field: ‘calls’
[17:39:23.949]   - Field: ‘globals’
[17:39:23.949]   - Field: ‘stdout’
[17:39:23.949]   - Field: ‘earlySignal’
[17:39:23.949]   - Field: ‘lazy’
[17:39:23.949]   - Field: ‘state’
[17:39:23.949] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:23.949] - Launch lazy future ...
[17:39:23.950] Packages needed by the future expression (n = 0): <none>
[17:39:23.950] Packages needed by future strategies (n = 0): <none>
[17:39:23.950] {
[17:39:23.950]     {
[17:39:23.950]         {
[17:39:23.950]             ...future.startTime <- base::Sys.time()
[17:39:23.950]             {
[17:39:23.950]                 {
[17:39:23.950]                   {
[17:39:23.950]                     base::local({
[17:39:23.950]                       has_future <- base::requireNamespace("future", 
[17:39:23.950]                         quietly = TRUE)
[17:39:23.950]                       if (has_future) {
[17:39:23.950]                         ns <- base::getNamespace("future")
[17:39:23.950]                         version <- ns[[".package"]][["version"]]
[17:39:23.950]                         if (is.null(version)) 
[17:39:23.950]                           version <- utils::packageVersion("future")
[17:39:23.950]                       }
[17:39:23.950]                       else {
[17:39:23.950]                         version <- NULL
[17:39:23.950]                       }
[17:39:23.950]                       if (!has_future || version < "1.8.0") {
[17:39:23.950]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:23.950]                           "", base::R.version$version.string), 
[17:39:23.950]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:23.950]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:23.950]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:23.950]                             "release", "version")], collapse = " "), 
[17:39:23.950]                           hostname = base::Sys.info()[["nodename"]])
[17:39:23.950]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:23.950]                           info)
[17:39:23.950]                         info <- base::paste(info, collapse = "; ")
[17:39:23.950]                         if (!has_future) {
[17:39:23.950]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:23.950]                             info)
[17:39:23.950]                         }
[17:39:23.950]                         else {
[17:39:23.950]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:23.950]                             info, version)
[17:39:23.950]                         }
[17:39:23.950]                         base::stop(msg)
[17:39:23.950]                       }
[17:39:23.950]                     })
[17:39:23.950]                   }
[17:39:23.950]                   ...future.strategy.old <- future::plan("list")
[17:39:23.950]                   options(future.plan = NULL)
[17:39:23.950]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:23.950]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:23.950]                 }
[17:39:23.950]                 ...future.workdir <- getwd()
[17:39:23.950]             }
[17:39:23.950]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:23.950]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:23.950]         }
[17:39:23.950]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:23.950]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:23.950]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:23.950]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:23.950]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:23.950]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:23.950]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:23.950]             base::names(...future.oldOptions))
[17:39:23.950]     }
[17:39:23.950]     if (FALSE) {
[17:39:23.950]     }
[17:39:23.950]     else {
[17:39:23.950]         if (TRUE) {
[17:39:23.950]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:23.950]                 open = "w")
[17:39:23.950]         }
[17:39:23.950]         else {
[17:39:23.950]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:23.950]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:23.950]         }
[17:39:23.950]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:23.950]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:23.950]             base::sink(type = "output", split = FALSE)
[17:39:23.950]             base::close(...future.stdout)
[17:39:23.950]         }, add = TRUE)
[17:39:23.950]     }
[17:39:23.950]     ...future.frame <- base::sys.nframe()
[17:39:23.950]     ...future.conditions <- base::list()
[17:39:23.950]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:23.950]     if (FALSE) {
[17:39:23.950]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:23.950]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:23.950]     }
[17:39:23.950]     ...future.result <- base::tryCatch({
[17:39:23.950]         base::withCallingHandlers({
[17:39:23.950]             ...future.value <- base::withVisible(base::local({
[17:39:23.950]                 42L
[17:39:23.950]             }))
[17:39:23.950]             future::FutureResult(value = ...future.value$value, 
[17:39:23.950]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:23.950]                   ...future.rng), globalenv = if (FALSE) 
[17:39:23.950]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:23.950]                     ...future.globalenv.names))
[17:39:23.950]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:23.950]         }, condition = base::local({
[17:39:23.950]             c <- base::c
[17:39:23.950]             inherits <- base::inherits
[17:39:23.950]             invokeRestart <- base::invokeRestart
[17:39:23.950]             length <- base::length
[17:39:23.950]             list <- base::list
[17:39:23.950]             seq.int <- base::seq.int
[17:39:23.950]             signalCondition <- base::signalCondition
[17:39:23.950]             sys.calls <- base::sys.calls
[17:39:23.950]             `[[` <- base::`[[`
[17:39:23.950]             `+` <- base::`+`
[17:39:23.950]             `<<-` <- base::`<<-`
[17:39:23.950]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:23.950]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:23.950]                   3L)]
[17:39:23.950]             }
[17:39:23.950]             function(cond) {
[17:39:23.950]                 is_error <- inherits(cond, "error")
[17:39:23.950]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:23.950]                   NULL)
[17:39:23.950]                 if (is_error) {
[17:39:23.950]                   sessionInformation <- function() {
[17:39:23.950]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:23.950]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:23.950]                       search = base::search(), system = base::Sys.info())
[17:39:23.950]                   }
[17:39:23.950]                   ...future.conditions[[length(...future.conditions) + 
[17:39:23.950]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:23.950]                     cond$call), session = sessionInformation(), 
[17:39:23.950]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:23.950]                   signalCondition(cond)
[17:39:23.950]                 }
[17:39:23.950]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:23.950]                 "immediateCondition"))) {
[17:39:23.950]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:23.950]                   ...future.conditions[[length(...future.conditions) + 
[17:39:23.950]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:23.950]                   if (TRUE && !signal) {
[17:39:23.950]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:23.950]                     {
[17:39:23.950]                       inherits <- base::inherits
[17:39:23.950]                       invokeRestart <- base::invokeRestart
[17:39:23.950]                       is.null <- base::is.null
[17:39:23.950]                       muffled <- FALSE
[17:39:23.950]                       if (inherits(cond, "message")) {
[17:39:23.950]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:23.950]                         if (muffled) 
[17:39:23.950]                           invokeRestart("muffleMessage")
[17:39:23.950]                       }
[17:39:23.950]                       else if (inherits(cond, "warning")) {
[17:39:23.950]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:23.950]                         if (muffled) 
[17:39:23.950]                           invokeRestart("muffleWarning")
[17:39:23.950]                       }
[17:39:23.950]                       else if (inherits(cond, "condition")) {
[17:39:23.950]                         if (!is.null(pattern)) {
[17:39:23.950]                           computeRestarts <- base::computeRestarts
[17:39:23.950]                           grepl <- base::grepl
[17:39:23.950]                           restarts <- computeRestarts(cond)
[17:39:23.950]                           for (restart in restarts) {
[17:39:23.950]                             name <- restart$name
[17:39:23.950]                             if (is.null(name)) 
[17:39:23.950]                               next
[17:39:23.950]                             if (!grepl(pattern, name)) 
[17:39:23.950]                               next
[17:39:23.950]                             invokeRestart(restart)
[17:39:23.950]                             muffled <- TRUE
[17:39:23.950]                             break
[17:39:23.950]                           }
[17:39:23.950]                         }
[17:39:23.950]                       }
[17:39:23.950]                       invisible(muffled)
[17:39:23.950]                     }
[17:39:23.950]                     muffleCondition(cond, pattern = "^muffle")
[17:39:23.950]                   }
[17:39:23.950]                 }
[17:39:23.950]                 else {
[17:39:23.950]                   if (TRUE) {
[17:39:23.950]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:23.950]                     {
[17:39:23.950]                       inherits <- base::inherits
[17:39:23.950]                       invokeRestart <- base::invokeRestart
[17:39:23.950]                       is.null <- base::is.null
[17:39:23.950]                       muffled <- FALSE
[17:39:23.950]                       if (inherits(cond, "message")) {
[17:39:23.950]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:23.950]                         if (muffled) 
[17:39:23.950]                           invokeRestart("muffleMessage")
[17:39:23.950]                       }
[17:39:23.950]                       else if (inherits(cond, "warning")) {
[17:39:23.950]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:23.950]                         if (muffled) 
[17:39:23.950]                           invokeRestart("muffleWarning")
[17:39:23.950]                       }
[17:39:23.950]                       else if (inherits(cond, "condition")) {
[17:39:23.950]                         if (!is.null(pattern)) {
[17:39:23.950]                           computeRestarts <- base::computeRestarts
[17:39:23.950]                           grepl <- base::grepl
[17:39:23.950]                           restarts <- computeRestarts(cond)
[17:39:23.950]                           for (restart in restarts) {
[17:39:23.950]                             name <- restart$name
[17:39:23.950]                             if (is.null(name)) 
[17:39:23.950]                               next
[17:39:23.950]                             if (!grepl(pattern, name)) 
[17:39:23.950]                               next
[17:39:23.950]                             invokeRestart(restart)
[17:39:23.950]                             muffled <- TRUE
[17:39:23.950]                             break
[17:39:23.950]                           }
[17:39:23.950]                         }
[17:39:23.950]                       }
[17:39:23.950]                       invisible(muffled)
[17:39:23.950]                     }
[17:39:23.950]                     muffleCondition(cond, pattern = "^muffle")
[17:39:23.950]                   }
[17:39:23.950]                 }
[17:39:23.950]             }
[17:39:23.950]         }))
[17:39:23.950]     }, error = function(ex) {
[17:39:23.950]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:23.950]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:23.950]                 ...future.rng), started = ...future.startTime, 
[17:39:23.950]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:23.950]             version = "1.8"), class = "FutureResult")
[17:39:23.950]     }, finally = {
[17:39:23.950]         if (!identical(...future.workdir, getwd())) 
[17:39:23.950]             setwd(...future.workdir)
[17:39:23.950]         {
[17:39:23.950]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:23.950]                 ...future.oldOptions$nwarnings <- NULL
[17:39:23.950]             }
[17:39:23.950]             base::options(...future.oldOptions)
[17:39:23.950]             if (.Platform$OS.type == "windows") {
[17:39:23.950]                 old_names <- names(...future.oldEnvVars)
[17:39:23.950]                 envs <- base::Sys.getenv()
[17:39:23.950]                 names <- names(envs)
[17:39:23.950]                 common <- intersect(names, old_names)
[17:39:23.950]                 added <- setdiff(names, old_names)
[17:39:23.950]                 removed <- setdiff(old_names, names)
[17:39:23.950]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:23.950]                   envs[common]]
[17:39:23.950]                 NAMES <- toupper(changed)
[17:39:23.950]                 args <- list()
[17:39:23.950]                 for (kk in seq_along(NAMES)) {
[17:39:23.950]                   name <- changed[[kk]]
[17:39:23.950]                   NAME <- NAMES[[kk]]
[17:39:23.950]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:23.950]                     next
[17:39:23.950]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:23.950]                 }
[17:39:23.950]                 NAMES <- toupper(added)
[17:39:23.950]                 for (kk in seq_along(NAMES)) {
[17:39:23.950]                   name <- added[[kk]]
[17:39:23.950]                   NAME <- NAMES[[kk]]
[17:39:23.950]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:23.950]                     next
[17:39:23.950]                   args[[name]] <- ""
[17:39:23.950]                 }
[17:39:23.950]                 NAMES <- toupper(removed)
[17:39:23.950]                 for (kk in seq_along(NAMES)) {
[17:39:23.950]                   name <- removed[[kk]]
[17:39:23.950]                   NAME <- NAMES[[kk]]
[17:39:23.950]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:23.950]                     next
[17:39:23.950]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:23.950]                 }
[17:39:23.950]                 if (length(args) > 0) 
[17:39:23.950]                   base::do.call(base::Sys.setenv, args = args)
[17:39:23.950]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:23.950]             }
[17:39:23.950]             else {
[17:39:23.950]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:23.950]             }
[17:39:23.950]             {
[17:39:23.950]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:23.950]                   0L) {
[17:39:23.950]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:23.950]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:23.950]                   base::options(opts)
[17:39:23.950]                 }
[17:39:23.950]                 {
[17:39:23.950]                   {
[17:39:23.950]                     NULL
[17:39:23.950]                     RNGkind("Mersenne-Twister")
[17:39:23.950]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:23.950]                       inherits = FALSE)
[17:39:23.950]                   }
[17:39:23.950]                   options(future.plan = NULL)
[17:39:23.950]                   if (is.na(NA_character_)) 
[17:39:23.950]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:23.950]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:23.950]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:23.950]                     .init = FALSE)
[17:39:23.950]                 }
[17:39:23.950]             }
[17:39:23.950]         }
[17:39:23.950]     })
[17:39:23.950]     if (TRUE) {
[17:39:23.950]         base::sink(type = "output", split = FALSE)
[17:39:23.950]         if (TRUE) {
[17:39:23.950]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:23.950]         }
[17:39:23.950]         else {
[17:39:23.950]             ...future.result["stdout"] <- base::list(NULL)
[17:39:23.950]         }
[17:39:23.950]         base::close(...future.stdout)
[17:39:23.950]         ...future.stdout <- NULL
[17:39:23.950]     }
[17:39:23.950]     ...future.result$conditions <- ...future.conditions
[17:39:23.950]     ...future.result$finished <- base::Sys.time()
[17:39:23.950]     ...future.result
[17:39:23.950] }
[17:39:23.952] plan(): Setting new future strategy stack:
[17:39:23.952] List of future strategies:
[17:39:23.952] 1. sequential:
[17:39:23.952]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:23.952]    - tweaked: FALSE
[17:39:23.952]    - call: NULL
[17:39:23.952] plan(): nbrOfWorkers() = 1
[17:39:23.953] plan(): Setting new future strategy stack:
[17:39:23.953] List of future strategies:
[17:39:23.953] 1. sequential:
[17:39:23.953]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:23.953]    - tweaked: FALSE
[17:39:23.953]    - call: future::plan("sequential")
[17:39:23.953] plan(): nbrOfWorkers() = 1
[17:39:23.954] SequentialFuture started (and completed)
[17:39:23.954] - Launch lazy future ... done
[17:39:23.954] run() for ‘SequentialFuture’ ... done
[17:39:23.954] - run() ... done
[17:39:23.954] - resolved() ...
[17:39:23.954] resolved() for ‘SequentialFuture’ ...
[17:39:23.954] - state: ‘finished’
[17:39:23.954] - run: TRUE
[17:39:23.954] - result: ‘FutureResult’
[17:39:23.955] resolved() for ‘SequentialFuture’ ... done
[17:39:23.955] - resolved: TRUE
[17:39:23.955] - resolved() ... done
[17:39:23.955] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[17:39:23.955] getGlobalsAndPackages() ...
[17:39:23.955] Searching for globals...
[17:39:23.956] 
[17:39:23.956] Searching for globals ... DONE
[17:39:23.956] - globals: [0] <none>
[17:39:23.956] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 31bfa6e6-f1e5-fa3d-4ee7-3adb36bd4b2d
Class: ‘Future’, ‘environment’
> y <- value(f)
[17:39:23.956] run() for ‘Future’ ...
[17:39:23.957] - state: ‘created’
[17:39:23.957] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:23.957] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:23.957] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:23.957]   - Field: ‘label’
[17:39:23.957]   - Field: ‘local’
[17:39:23.957]   - Field: ‘owner’
[17:39:23.957]   - Field: ‘envir’
[17:39:23.960]   - Field: ‘packages’
[17:39:23.960]   - Field: ‘gc’
[17:39:23.960]   - Field: ‘conditions’
[17:39:23.961]   - Field: ‘expr’
[17:39:23.961]   - Field: ‘uuid’
[17:39:23.961]   - Field: ‘seed’
[17:39:23.961]   - Field: ‘version’
[17:39:23.961]   - Field: ‘result’
[17:39:23.961]   - Field: ‘asynchronous’
[17:39:23.961]   - Field: ‘calls’
[17:39:23.961]   - Field: ‘globals’
[17:39:23.961]   - Field: ‘stdout’
[17:39:23.961]   - Field: ‘earlySignal’
[17:39:23.961]   - Field: ‘lazy’
[17:39:23.961]   - Field: ‘state’
[17:39:23.962] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:23.962] - Launch lazy future ...
[17:39:23.962] Packages needed by the future expression (n = 0): <none>
[17:39:23.962] Packages needed by future strategies (n = 0): <none>
[17:39:23.962] {
[17:39:23.962]     {
[17:39:23.962]         {
[17:39:23.962]             ...future.startTime <- base::Sys.time()
[17:39:23.962]             {
[17:39:23.962]                 {
[17:39:23.962]                   {
[17:39:23.962]                     base::local({
[17:39:23.962]                       has_future <- base::requireNamespace("future", 
[17:39:23.962]                         quietly = TRUE)
[17:39:23.962]                       if (has_future) {
[17:39:23.962]                         ns <- base::getNamespace("future")
[17:39:23.962]                         version <- ns[[".package"]][["version"]]
[17:39:23.962]                         if (is.null(version)) 
[17:39:23.962]                           version <- utils::packageVersion("future")
[17:39:23.962]                       }
[17:39:23.962]                       else {
[17:39:23.962]                         version <- NULL
[17:39:23.962]                       }
[17:39:23.962]                       if (!has_future || version < "1.8.0") {
[17:39:23.962]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:23.962]                           "", base::R.version$version.string), 
[17:39:23.962]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:23.962]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:23.962]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:23.962]                             "release", "version")], collapse = " "), 
[17:39:23.962]                           hostname = base::Sys.info()[["nodename"]])
[17:39:23.962]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:23.962]                           info)
[17:39:23.962]                         info <- base::paste(info, collapse = "; ")
[17:39:23.962]                         if (!has_future) {
[17:39:23.962]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:23.962]                             info)
[17:39:23.962]                         }
[17:39:23.962]                         else {
[17:39:23.962]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:23.962]                             info, version)
[17:39:23.962]                         }
[17:39:23.962]                         base::stop(msg)
[17:39:23.962]                       }
[17:39:23.962]                     })
[17:39:23.962]                   }
[17:39:23.962]                   ...future.strategy.old <- future::plan("list")
[17:39:23.962]                   options(future.plan = NULL)
[17:39:23.962]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:23.962]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:23.962]                 }
[17:39:23.962]                 ...future.workdir <- getwd()
[17:39:23.962]             }
[17:39:23.962]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:23.962]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:23.962]         }
[17:39:23.962]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:23.962]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:23.962]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:23.962]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:23.962]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:23.962]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:23.962]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:23.962]             base::names(...future.oldOptions))
[17:39:23.962]     }
[17:39:23.962]     if (FALSE) {
[17:39:23.962]     }
[17:39:23.962]     else {
[17:39:23.962]         if (TRUE) {
[17:39:23.962]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:23.962]                 open = "w")
[17:39:23.962]         }
[17:39:23.962]         else {
[17:39:23.962]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:23.962]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:23.962]         }
[17:39:23.962]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:23.962]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:23.962]             base::sink(type = "output", split = FALSE)
[17:39:23.962]             base::close(...future.stdout)
[17:39:23.962]         }, add = TRUE)
[17:39:23.962]     }
[17:39:23.962]     ...future.frame <- base::sys.nframe()
[17:39:23.962]     ...future.conditions <- base::list()
[17:39:23.962]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:23.962]     if (FALSE) {
[17:39:23.962]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:23.962]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:23.962]     }
[17:39:23.962]     ...future.result <- base::tryCatch({
[17:39:23.962]         base::withCallingHandlers({
[17:39:23.962]             ...future.value <- base::withVisible(base::local(42L))
[17:39:23.962]             future::FutureResult(value = ...future.value$value, 
[17:39:23.962]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:23.962]                   ...future.rng), globalenv = if (FALSE) 
[17:39:23.962]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:23.962]                     ...future.globalenv.names))
[17:39:23.962]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:23.962]         }, condition = base::local({
[17:39:23.962]             c <- base::c
[17:39:23.962]             inherits <- base::inherits
[17:39:23.962]             invokeRestart <- base::invokeRestart
[17:39:23.962]             length <- base::length
[17:39:23.962]             list <- base::list
[17:39:23.962]             seq.int <- base::seq.int
[17:39:23.962]             signalCondition <- base::signalCondition
[17:39:23.962]             sys.calls <- base::sys.calls
[17:39:23.962]             `[[` <- base::`[[`
[17:39:23.962]             `+` <- base::`+`
[17:39:23.962]             `<<-` <- base::`<<-`
[17:39:23.962]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:23.962]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:23.962]                   3L)]
[17:39:23.962]             }
[17:39:23.962]             function(cond) {
[17:39:23.962]                 is_error <- inherits(cond, "error")
[17:39:23.962]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:23.962]                   NULL)
[17:39:23.962]                 if (is_error) {
[17:39:23.962]                   sessionInformation <- function() {
[17:39:23.962]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:23.962]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:23.962]                       search = base::search(), system = base::Sys.info())
[17:39:23.962]                   }
[17:39:23.962]                   ...future.conditions[[length(...future.conditions) + 
[17:39:23.962]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:23.962]                     cond$call), session = sessionInformation(), 
[17:39:23.962]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:23.962]                   signalCondition(cond)
[17:39:23.962]                 }
[17:39:23.962]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:23.962]                 "immediateCondition"))) {
[17:39:23.962]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:23.962]                   ...future.conditions[[length(...future.conditions) + 
[17:39:23.962]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:23.962]                   if (TRUE && !signal) {
[17:39:23.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:23.962]                     {
[17:39:23.962]                       inherits <- base::inherits
[17:39:23.962]                       invokeRestart <- base::invokeRestart
[17:39:23.962]                       is.null <- base::is.null
[17:39:23.962]                       muffled <- FALSE
[17:39:23.962]                       if (inherits(cond, "message")) {
[17:39:23.962]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:23.962]                         if (muffled) 
[17:39:23.962]                           invokeRestart("muffleMessage")
[17:39:23.962]                       }
[17:39:23.962]                       else if (inherits(cond, "warning")) {
[17:39:23.962]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:23.962]                         if (muffled) 
[17:39:23.962]                           invokeRestart("muffleWarning")
[17:39:23.962]                       }
[17:39:23.962]                       else if (inherits(cond, "condition")) {
[17:39:23.962]                         if (!is.null(pattern)) {
[17:39:23.962]                           computeRestarts <- base::computeRestarts
[17:39:23.962]                           grepl <- base::grepl
[17:39:23.962]                           restarts <- computeRestarts(cond)
[17:39:23.962]                           for (restart in restarts) {
[17:39:23.962]                             name <- restart$name
[17:39:23.962]                             if (is.null(name)) 
[17:39:23.962]                               next
[17:39:23.962]                             if (!grepl(pattern, name)) 
[17:39:23.962]                               next
[17:39:23.962]                             invokeRestart(restart)
[17:39:23.962]                             muffled <- TRUE
[17:39:23.962]                             break
[17:39:23.962]                           }
[17:39:23.962]                         }
[17:39:23.962]                       }
[17:39:23.962]                       invisible(muffled)
[17:39:23.962]                     }
[17:39:23.962]                     muffleCondition(cond, pattern = "^muffle")
[17:39:23.962]                   }
[17:39:23.962]                 }
[17:39:23.962]                 else {
[17:39:23.962]                   if (TRUE) {
[17:39:23.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:23.962]                     {
[17:39:23.962]                       inherits <- base::inherits
[17:39:23.962]                       invokeRestart <- base::invokeRestart
[17:39:23.962]                       is.null <- base::is.null
[17:39:23.962]                       muffled <- FALSE
[17:39:23.962]                       if (inherits(cond, "message")) {
[17:39:23.962]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:23.962]                         if (muffled) 
[17:39:23.962]                           invokeRestart("muffleMessage")
[17:39:23.962]                       }
[17:39:23.962]                       else if (inherits(cond, "warning")) {
[17:39:23.962]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:23.962]                         if (muffled) 
[17:39:23.962]                           invokeRestart("muffleWarning")
[17:39:23.962]                       }
[17:39:23.962]                       else if (inherits(cond, "condition")) {
[17:39:23.962]                         if (!is.null(pattern)) {
[17:39:23.962]                           computeRestarts <- base::computeRestarts
[17:39:23.962]                           grepl <- base::grepl
[17:39:23.962]                           restarts <- computeRestarts(cond)
[17:39:23.962]                           for (restart in restarts) {
[17:39:23.962]                             name <- restart$name
[17:39:23.962]                             if (is.null(name)) 
[17:39:23.962]                               next
[17:39:23.962]                             if (!grepl(pattern, name)) 
[17:39:23.962]                               next
[17:39:23.962]                             invokeRestart(restart)
[17:39:23.962]                             muffled <- TRUE
[17:39:23.962]                             break
[17:39:23.962]                           }
[17:39:23.962]                         }
[17:39:23.962]                       }
[17:39:23.962]                       invisible(muffled)
[17:39:23.962]                     }
[17:39:23.962]                     muffleCondition(cond, pattern = "^muffle")
[17:39:23.962]                   }
[17:39:23.962]                 }
[17:39:23.962]             }
[17:39:23.962]         }))
[17:39:23.962]     }, error = function(ex) {
[17:39:23.962]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:23.962]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:23.962]                 ...future.rng), started = ...future.startTime, 
[17:39:23.962]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:23.962]             version = "1.8"), class = "FutureResult")
[17:39:23.962]     }, finally = {
[17:39:23.962]         if (!identical(...future.workdir, getwd())) 
[17:39:23.962]             setwd(...future.workdir)
[17:39:23.962]         {
[17:39:23.962]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:23.962]                 ...future.oldOptions$nwarnings <- NULL
[17:39:23.962]             }
[17:39:23.962]             base::options(...future.oldOptions)
[17:39:23.962]             if (.Platform$OS.type == "windows") {
[17:39:23.962]                 old_names <- names(...future.oldEnvVars)
[17:39:23.962]                 envs <- base::Sys.getenv()
[17:39:23.962]                 names <- names(envs)
[17:39:23.962]                 common <- intersect(names, old_names)
[17:39:23.962]                 added <- setdiff(names, old_names)
[17:39:23.962]                 removed <- setdiff(old_names, names)
[17:39:23.962]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:23.962]                   envs[common]]
[17:39:23.962]                 NAMES <- toupper(changed)
[17:39:23.962]                 args <- list()
[17:39:23.962]                 for (kk in seq_along(NAMES)) {
[17:39:23.962]                   name <- changed[[kk]]
[17:39:23.962]                   NAME <- NAMES[[kk]]
[17:39:23.962]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:23.962]                     next
[17:39:23.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:23.962]                 }
[17:39:23.962]                 NAMES <- toupper(added)
[17:39:23.962]                 for (kk in seq_along(NAMES)) {
[17:39:23.962]                   name <- added[[kk]]
[17:39:23.962]                   NAME <- NAMES[[kk]]
[17:39:23.962]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:23.962]                     next
[17:39:23.962]                   args[[name]] <- ""
[17:39:23.962]                 }
[17:39:23.962]                 NAMES <- toupper(removed)
[17:39:23.962]                 for (kk in seq_along(NAMES)) {
[17:39:23.962]                   name <- removed[[kk]]
[17:39:23.962]                   NAME <- NAMES[[kk]]
[17:39:23.962]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:23.962]                     next
[17:39:23.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:23.962]                 }
[17:39:23.962]                 if (length(args) > 0) 
[17:39:23.962]                   base::do.call(base::Sys.setenv, args = args)
[17:39:23.962]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:23.962]             }
[17:39:23.962]             else {
[17:39:23.962]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:23.962]             }
[17:39:23.962]             {
[17:39:23.962]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:23.962]                   0L) {
[17:39:23.962]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:23.962]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:23.962]                   base::options(opts)
[17:39:23.962]                 }
[17:39:23.962]                 {
[17:39:23.962]                   {
[17:39:23.962]                     NULL
[17:39:23.962]                     RNGkind("Mersenne-Twister")
[17:39:23.962]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:23.962]                       inherits = FALSE)
[17:39:23.962]                   }
[17:39:23.962]                   options(future.plan = NULL)
[17:39:23.962]                   if (is.na(NA_character_)) 
[17:39:23.962]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:23.962]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:23.962]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:23.962]                     .init = FALSE)
[17:39:23.962]                 }
[17:39:23.962]             }
[17:39:23.962]         }
[17:39:23.962]     })
[17:39:23.962]     if (TRUE) {
[17:39:23.962]         base::sink(type = "output", split = FALSE)
[17:39:23.962]         if (TRUE) {
[17:39:23.962]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:23.962]         }
[17:39:23.962]         else {
[17:39:23.962]             ...future.result["stdout"] <- base::list(NULL)
[17:39:23.962]         }
[17:39:23.962]         base::close(...future.stdout)
[17:39:23.962]         ...future.stdout <- NULL
[17:39:23.962]     }
[17:39:23.962]     ...future.result$conditions <- ...future.conditions
[17:39:23.962]     ...future.result$finished <- base::Sys.time()
[17:39:23.962]     ...future.result
[17:39:23.962] }
[17:39:23.964] plan(): Setting new future strategy stack:
[17:39:23.964] List of future strategies:
[17:39:23.964] 1. sequential:
[17:39:23.964]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:23.964]    - tweaked: FALSE
[17:39:23.964]    - call: NULL
[17:39:23.965] plan(): nbrOfWorkers() = 1
[17:39:23.965] plan(): Setting new future strategy stack:
[17:39:23.965] List of future strategies:
[17:39:23.965] 1. sequential:
[17:39:23.965]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:23.965]    - tweaked: FALSE
[17:39:23.965]    - call: future::plan("sequential")
[17:39:23.966] plan(): nbrOfWorkers() = 1
[17:39:23.966] SequentialFuture started (and completed)
[17:39:23.966] - Launch lazy future ... done
[17:39:23.966] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[17:39:23.967] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[17:39:23.967] plan(): Setting new future strategy stack:
[17:39:23.968] List of future strategies:
[17:39:23.968] 1. FutureStrategy:
[17:39:23.968]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:23.968]    - tweaked: FALSE
[17:39:23.968]    - call: future::plan(oplan)
[17:39:23.979] plan(): nbrOfWorkers() = 1
> 
