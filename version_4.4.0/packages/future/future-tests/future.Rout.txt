
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:31:02.342] plan(): Setting new future strategy stack:
[09:31:02.342] List of future strategies:
[09:31:02.342] 1. sequential:
[09:31:02.342]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.342]    - tweaked: FALSE
[09:31:02.342]    - call: future::plan("sequential")
[09:31:02.353] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[09:31:02.365] getGlobalsAndPackages() ...
[09:31:02.366] Searching for globals...
[09:31:02.368] - globals found: [1] ‘{’
[09:31:02.369] Searching for globals ... DONE
[09:31:02.369] Resolving globals: FALSE
[09:31:02.369] 
[09:31:02.369] 
[09:31:02.369] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[09:31:02.370] resolved() for ‘Future’ ...
[09:31:02.370] - state: ‘created’
[09:31:02.370] - run: TRUE
[09:31:02.370] - run() ...
[09:31:02.370] run() for ‘Future’ ...
[09:31:02.371] - state: ‘created’
[09:31:02.371] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:02.371] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:02.371] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:02.371]   - Field: ‘label’
[09:31:02.371]   - Field: ‘local’
[09:31:02.371]   - Field: ‘owner’
[09:31:02.371]   - Field: ‘envir’
[09:31:02.372]   - Field: ‘packages’
[09:31:02.372]   - Field: ‘gc’
[09:31:02.372]   - Field: ‘conditions’
[09:31:02.372]   - Field: ‘expr’
[09:31:02.372]   - Field: ‘uuid’
[09:31:02.372]   - Field: ‘seed’
[09:31:02.372]   - Field: ‘version’
[09:31:02.372]   - Field: ‘result’
[09:31:02.372]   - Field: ‘asynchronous’
[09:31:02.372]   - Field: ‘calls’
[09:31:02.372]   - Field: ‘globals’
[09:31:02.373]   - Field: ‘stdout’
[09:31:02.373]   - Field: ‘earlySignal’
[09:31:02.373]   - Field: ‘lazy’
[09:31:02.373]   - Field: ‘state’
[09:31:02.373] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:02.373] - Launch lazy future ...
[09:31:02.374] Packages needed by the future expression (n = 0): <none>
[09:31:02.374] Packages needed by future strategies (n = 0): <none>
[09:31:02.374] {
[09:31:02.374]     {
[09:31:02.374]         {
[09:31:02.374]             ...future.startTime <- base::Sys.time()
[09:31:02.374]             {
[09:31:02.374]                 {
[09:31:02.374]                   {
[09:31:02.374]                     base::local({
[09:31:02.374]                       has_future <- base::requireNamespace("future", 
[09:31:02.374]                         quietly = TRUE)
[09:31:02.374]                       if (has_future) {
[09:31:02.374]                         ns <- base::getNamespace("future")
[09:31:02.374]                         version <- ns[[".package"]][["version"]]
[09:31:02.374]                         if (is.null(version)) 
[09:31:02.374]                           version <- utils::packageVersion("future")
[09:31:02.374]                       }
[09:31:02.374]                       else {
[09:31:02.374]                         version <- NULL
[09:31:02.374]                       }
[09:31:02.374]                       if (!has_future || version < "1.8.0") {
[09:31:02.374]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:02.374]                           "", base::R.version$version.string), 
[09:31:02.374]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:02.374]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:02.374]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:02.374]                             "release", "version")], collapse = " "), 
[09:31:02.374]                           hostname = base::Sys.info()[["nodename"]])
[09:31:02.374]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:02.374]                           info)
[09:31:02.374]                         info <- base::paste(info, collapse = "; ")
[09:31:02.374]                         if (!has_future) {
[09:31:02.374]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:02.374]                             info)
[09:31:02.374]                         }
[09:31:02.374]                         else {
[09:31:02.374]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:02.374]                             info, version)
[09:31:02.374]                         }
[09:31:02.374]                         base::stop(msg)
[09:31:02.374]                       }
[09:31:02.374]                     })
[09:31:02.374]                   }
[09:31:02.374]                   ...future.strategy.old <- future::plan("list")
[09:31:02.374]                   options(future.plan = NULL)
[09:31:02.374]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.374]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:02.374]                 }
[09:31:02.374]                 ...future.workdir <- getwd()
[09:31:02.374]             }
[09:31:02.374]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:02.374]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:02.374]         }
[09:31:02.374]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:02.374]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:02.374]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:02.374]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:02.374]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:02.374]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:02.374]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:02.374]             base::names(...future.oldOptions))
[09:31:02.374]     }
[09:31:02.374]     if (FALSE) {
[09:31:02.374]     }
[09:31:02.374]     else {
[09:31:02.374]         if (TRUE) {
[09:31:02.374]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:02.374]                 open = "w")
[09:31:02.374]         }
[09:31:02.374]         else {
[09:31:02.374]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:02.374]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:02.374]         }
[09:31:02.374]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:02.374]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:02.374]             base::sink(type = "output", split = FALSE)
[09:31:02.374]             base::close(...future.stdout)
[09:31:02.374]         }, add = TRUE)
[09:31:02.374]     }
[09:31:02.374]     ...future.frame <- base::sys.nframe()
[09:31:02.374]     ...future.conditions <- base::list()
[09:31:02.374]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:02.374]     if (FALSE) {
[09:31:02.374]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:02.374]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:02.374]     }
[09:31:02.374]     ...future.result <- base::tryCatch({
[09:31:02.374]         base::withCallingHandlers({
[09:31:02.374]             ...future.value <- base::withVisible(base::local({
[09:31:02.374]                 42L
[09:31:02.374]             }))
[09:31:02.374]             future::FutureResult(value = ...future.value$value, 
[09:31:02.374]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.374]                   ...future.rng), globalenv = if (FALSE) 
[09:31:02.374]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:02.374]                     ...future.globalenv.names))
[09:31:02.374]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:02.374]         }, condition = base::local({
[09:31:02.374]             c <- base::c
[09:31:02.374]             inherits <- base::inherits
[09:31:02.374]             invokeRestart <- base::invokeRestart
[09:31:02.374]             length <- base::length
[09:31:02.374]             list <- base::list
[09:31:02.374]             seq.int <- base::seq.int
[09:31:02.374]             signalCondition <- base::signalCondition
[09:31:02.374]             sys.calls <- base::sys.calls
[09:31:02.374]             `[[` <- base::`[[`
[09:31:02.374]             `+` <- base::`+`
[09:31:02.374]             `<<-` <- base::`<<-`
[09:31:02.374]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:02.374]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:02.374]                   3L)]
[09:31:02.374]             }
[09:31:02.374]             function(cond) {
[09:31:02.374]                 is_error <- inherits(cond, "error")
[09:31:02.374]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:02.374]                   NULL)
[09:31:02.374]                 if (is_error) {
[09:31:02.374]                   sessionInformation <- function() {
[09:31:02.374]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:02.374]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:02.374]                       search = base::search(), system = base::Sys.info())
[09:31:02.374]                   }
[09:31:02.374]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.374]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:02.374]                     cond$call), session = sessionInformation(), 
[09:31:02.374]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:02.374]                   signalCondition(cond)
[09:31:02.374]                 }
[09:31:02.374]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:02.374]                 "immediateCondition"))) {
[09:31:02.374]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:02.374]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.374]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:02.374]                   if (TRUE && !signal) {
[09:31:02.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.374]                     {
[09:31:02.374]                       inherits <- base::inherits
[09:31:02.374]                       invokeRestart <- base::invokeRestart
[09:31:02.374]                       is.null <- base::is.null
[09:31:02.374]                       muffled <- FALSE
[09:31:02.374]                       if (inherits(cond, "message")) {
[09:31:02.374]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.374]                         if (muffled) 
[09:31:02.374]                           invokeRestart("muffleMessage")
[09:31:02.374]                       }
[09:31:02.374]                       else if (inherits(cond, "warning")) {
[09:31:02.374]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.374]                         if (muffled) 
[09:31:02.374]                           invokeRestart("muffleWarning")
[09:31:02.374]                       }
[09:31:02.374]                       else if (inherits(cond, "condition")) {
[09:31:02.374]                         if (!is.null(pattern)) {
[09:31:02.374]                           computeRestarts <- base::computeRestarts
[09:31:02.374]                           grepl <- base::grepl
[09:31:02.374]                           restarts <- computeRestarts(cond)
[09:31:02.374]                           for (restart in restarts) {
[09:31:02.374]                             name <- restart$name
[09:31:02.374]                             if (is.null(name)) 
[09:31:02.374]                               next
[09:31:02.374]                             if (!grepl(pattern, name)) 
[09:31:02.374]                               next
[09:31:02.374]                             invokeRestart(restart)
[09:31:02.374]                             muffled <- TRUE
[09:31:02.374]                             break
[09:31:02.374]                           }
[09:31:02.374]                         }
[09:31:02.374]                       }
[09:31:02.374]                       invisible(muffled)
[09:31:02.374]                     }
[09:31:02.374]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.374]                   }
[09:31:02.374]                 }
[09:31:02.374]                 else {
[09:31:02.374]                   if (TRUE) {
[09:31:02.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.374]                     {
[09:31:02.374]                       inherits <- base::inherits
[09:31:02.374]                       invokeRestart <- base::invokeRestart
[09:31:02.374]                       is.null <- base::is.null
[09:31:02.374]                       muffled <- FALSE
[09:31:02.374]                       if (inherits(cond, "message")) {
[09:31:02.374]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.374]                         if (muffled) 
[09:31:02.374]                           invokeRestart("muffleMessage")
[09:31:02.374]                       }
[09:31:02.374]                       else if (inherits(cond, "warning")) {
[09:31:02.374]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.374]                         if (muffled) 
[09:31:02.374]                           invokeRestart("muffleWarning")
[09:31:02.374]                       }
[09:31:02.374]                       else if (inherits(cond, "condition")) {
[09:31:02.374]                         if (!is.null(pattern)) {
[09:31:02.374]                           computeRestarts <- base::computeRestarts
[09:31:02.374]                           grepl <- base::grepl
[09:31:02.374]                           restarts <- computeRestarts(cond)
[09:31:02.374]                           for (restart in restarts) {
[09:31:02.374]                             name <- restart$name
[09:31:02.374]                             if (is.null(name)) 
[09:31:02.374]                               next
[09:31:02.374]                             if (!grepl(pattern, name)) 
[09:31:02.374]                               next
[09:31:02.374]                             invokeRestart(restart)
[09:31:02.374]                             muffled <- TRUE
[09:31:02.374]                             break
[09:31:02.374]                           }
[09:31:02.374]                         }
[09:31:02.374]                       }
[09:31:02.374]                       invisible(muffled)
[09:31:02.374]                     }
[09:31:02.374]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.374]                   }
[09:31:02.374]                 }
[09:31:02.374]             }
[09:31:02.374]         }))
[09:31:02.374]     }, error = function(ex) {
[09:31:02.374]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:02.374]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.374]                 ...future.rng), started = ...future.startTime, 
[09:31:02.374]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:02.374]             version = "1.8"), class = "FutureResult")
[09:31:02.374]     }, finally = {
[09:31:02.374]         if (!identical(...future.workdir, getwd())) 
[09:31:02.374]             setwd(...future.workdir)
[09:31:02.374]         {
[09:31:02.374]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:02.374]                 ...future.oldOptions$nwarnings <- NULL
[09:31:02.374]             }
[09:31:02.374]             base::options(...future.oldOptions)
[09:31:02.374]             if (.Platform$OS.type == "windows") {
[09:31:02.374]                 old_names <- names(...future.oldEnvVars)
[09:31:02.374]                 envs <- base::Sys.getenv()
[09:31:02.374]                 names <- names(envs)
[09:31:02.374]                 common <- intersect(names, old_names)
[09:31:02.374]                 added <- setdiff(names, old_names)
[09:31:02.374]                 removed <- setdiff(old_names, names)
[09:31:02.374]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:02.374]                   envs[common]]
[09:31:02.374]                 NAMES <- toupper(changed)
[09:31:02.374]                 args <- list()
[09:31:02.374]                 for (kk in seq_along(NAMES)) {
[09:31:02.374]                   name <- changed[[kk]]
[09:31:02.374]                   NAME <- NAMES[[kk]]
[09:31:02.374]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.374]                     next
[09:31:02.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.374]                 }
[09:31:02.374]                 NAMES <- toupper(added)
[09:31:02.374]                 for (kk in seq_along(NAMES)) {
[09:31:02.374]                   name <- added[[kk]]
[09:31:02.374]                   NAME <- NAMES[[kk]]
[09:31:02.374]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.374]                     next
[09:31:02.374]                   args[[name]] <- ""
[09:31:02.374]                 }
[09:31:02.374]                 NAMES <- toupper(removed)
[09:31:02.374]                 for (kk in seq_along(NAMES)) {
[09:31:02.374]                   name <- removed[[kk]]
[09:31:02.374]                   NAME <- NAMES[[kk]]
[09:31:02.374]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.374]                     next
[09:31:02.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.374]                 }
[09:31:02.374]                 if (length(args) > 0) 
[09:31:02.374]                   base::do.call(base::Sys.setenv, args = args)
[09:31:02.374]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:02.374]             }
[09:31:02.374]             else {
[09:31:02.374]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:02.374]             }
[09:31:02.374]             {
[09:31:02.374]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:02.374]                   0L) {
[09:31:02.374]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:02.374]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:02.374]                   base::options(opts)
[09:31:02.374]                 }
[09:31:02.374]                 {
[09:31:02.374]                   {
[09:31:02.374]                     NULL
[09:31:02.374]                     RNGkind("Mersenne-Twister")
[09:31:02.374]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:02.374]                       inherits = FALSE)
[09:31:02.374]                   }
[09:31:02.374]                   options(future.plan = NULL)
[09:31:02.374]                   if (is.na(NA_character_)) 
[09:31:02.374]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.374]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:02.374]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:02.374]                     .init = FALSE)
[09:31:02.374]                 }
[09:31:02.374]             }
[09:31:02.374]         }
[09:31:02.374]     })
[09:31:02.374]     if (TRUE) {
[09:31:02.374]         base::sink(type = "output", split = FALSE)
[09:31:02.374]         if (TRUE) {
[09:31:02.374]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:02.374]         }
[09:31:02.374]         else {
[09:31:02.374]             ...future.result["stdout"] <- base::list(NULL)
[09:31:02.374]         }
[09:31:02.374]         base::close(...future.stdout)
[09:31:02.374]         ...future.stdout <- NULL
[09:31:02.374]     }
[09:31:02.374]     ...future.result$conditions <- ...future.conditions
[09:31:02.374]     ...future.result$finished <- base::Sys.time()
[09:31:02.374]     ...future.result
[09:31:02.374] }
[09:31:02.376] plan(): Setting new future strategy stack:
[09:31:02.376] List of future strategies:
[09:31:02.376] 1. sequential:
[09:31:02.376]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.376]    - tweaked: FALSE
[09:31:02.376]    - call: NULL
[09:31:02.377] plan(): nbrOfWorkers() = 1
[09:31:02.378] plan(): Setting new future strategy stack:
[09:31:02.378] List of future strategies:
[09:31:02.378] 1. sequential:
[09:31:02.378]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.378]    - tweaked: FALSE
[09:31:02.378]    - call: future::plan("sequential")
[09:31:02.379] plan(): nbrOfWorkers() = 1
[09:31:02.379] SequentialFuture started (and completed)
[09:31:02.379] - Launch lazy future ... done
[09:31:02.379] run() for ‘SequentialFuture’ ... done
[09:31:02.379] - run() ... done
[09:31:02.379] - resolved() ...
[09:31:02.379] resolved() for ‘SequentialFuture’ ...
[09:31:02.380] - state: ‘finished’
[09:31:02.380] - run: TRUE
[09:31:02.380] - result: ‘FutureResult’
[09:31:02.380] resolved() for ‘SequentialFuture’ ... done
[09:31:02.380] - resolved: TRUE
[09:31:02.380] - resolved() ... done
[09:31:02.380] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[09:31:02.381] getGlobalsAndPackages() ...
[09:31:02.381] Searching for globals...
[09:31:02.381] 
[09:31:02.381] Searching for globals ... DONE
[09:31:02.381] - globals: [0] <none>
[09:31:02.381] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 09825ef3-a055-c7a0-86f6-5e54643ba28b
Class: ‘Future’, ‘environment’
> y <- value(f)
[09:31:02.382] run() for ‘Future’ ...
[09:31:02.382] - state: ‘created’
[09:31:02.382] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:02.383] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:02.383] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:02.383]   - Field: ‘label’
[09:31:02.383]   - Field: ‘local’
[09:31:02.383]   - Field: ‘owner’
[09:31:02.383]   - Field: ‘envir’
[09:31:02.383]   - Field: ‘packages’
[09:31:02.383]   - Field: ‘gc’
[09:31:02.383]   - Field: ‘conditions’
[09:31:02.383]   - Field: ‘expr’
[09:31:02.384]   - Field: ‘uuid’
[09:31:02.384]   - Field: ‘seed’
[09:31:02.384]   - Field: ‘version’
[09:31:02.384]   - Field: ‘result’
[09:31:02.384]   - Field: ‘asynchronous’
[09:31:02.384]   - Field: ‘calls’
[09:31:02.384]   - Field: ‘globals’
[09:31:02.384]   - Field: ‘stdout’
[09:31:02.384]   - Field: ‘earlySignal’
[09:31:02.384]   - Field: ‘lazy’
[09:31:02.385]   - Field: ‘state’
[09:31:02.385] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:02.385] - Launch lazy future ...
[09:31:02.385] Packages needed by the future expression (n = 0): <none>
[09:31:02.385] Packages needed by future strategies (n = 0): <none>
[09:31:02.385] {
[09:31:02.385]     {
[09:31:02.385]         {
[09:31:02.385]             ...future.startTime <- base::Sys.time()
[09:31:02.385]             {
[09:31:02.385]                 {
[09:31:02.385]                   {
[09:31:02.385]                     base::local({
[09:31:02.385]                       has_future <- base::requireNamespace("future", 
[09:31:02.385]                         quietly = TRUE)
[09:31:02.385]                       if (has_future) {
[09:31:02.385]                         ns <- base::getNamespace("future")
[09:31:02.385]                         version <- ns[[".package"]][["version"]]
[09:31:02.385]                         if (is.null(version)) 
[09:31:02.385]                           version <- utils::packageVersion("future")
[09:31:02.385]                       }
[09:31:02.385]                       else {
[09:31:02.385]                         version <- NULL
[09:31:02.385]                       }
[09:31:02.385]                       if (!has_future || version < "1.8.0") {
[09:31:02.385]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:02.385]                           "", base::R.version$version.string), 
[09:31:02.385]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:02.385]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:02.385]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:02.385]                             "release", "version")], collapse = " "), 
[09:31:02.385]                           hostname = base::Sys.info()[["nodename"]])
[09:31:02.385]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:02.385]                           info)
[09:31:02.385]                         info <- base::paste(info, collapse = "; ")
[09:31:02.385]                         if (!has_future) {
[09:31:02.385]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:02.385]                             info)
[09:31:02.385]                         }
[09:31:02.385]                         else {
[09:31:02.385]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:02.385]                             info, version)
[09:31:02.385]                         }
[09:31:02.385]                         base::stop(msg)
[09:31:02.385]                       }
[09:31:02.385]                     })
[09:31:02.385]                   }
[09:31:02.385]                   ...future.strategy.old <- future::plan("list")
[09:31:02.385]                   options(future.plan = NULL)
[09:31:02.385]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.385]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:02.385]                 }
[09:31:02.385]                 ...future.workdir <- getwd()
[09:31:02.385]             }
[09:31:02.385]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:02.385]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:02.385]         }
[09:31:02.385]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:02.385]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:02.385]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:02.385]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:02.385]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:02.385]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:02.385]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:02.385]             base::names(...future.oldOptions))
[09:31:02.385]     }
[09:31:02.385]     if (FALSE) {
[09:31:02.385]     }
[09:31:02.385]     else {
[09:31:02.385]         if (TRUE) {
[09:31:02.385]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:02.385]                 open = "w")
[09:31:02.385]         }
[09:31:02.385]         else {
[09:31:02.385]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:02.385]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:02.385]         }
[09:31:02.385]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:02.385]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:02.385]             base::sink(type = "output", split = FALSE)
[09:31:02.385]             base::close(...future.stdout)
[09:31:02.385]         }, add = TRUE)
[09:31:02.385]     }
[09:31:02.385]     ...future.frame <- base::sys.nframe()
[09:31:02.385]     ...future.conditions <- base::list()
[09:31:02.385]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:02.385]     if (FALSE) {
[09:31:02.385]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:02.385]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:02.385]     }
[09:31:02.385]     ...future.result <- base::tryCatch({
[09:31:02.385]         base::withCallingHandlers({
[09:31:02.385]             ...future.value <- base::withVisible(base::local(42L))
[09:31:02.385]             future::FutureResult(value = ...future.value$value, 
[09:31:02.385]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.385]                   ...future.rng), globalenv = if (FALSE) 
[09:31:02.385]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:02.385]                     ...future.globalenv.names))
[09:31:02.385]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:02.385]         }, condition = base::local({
[09:31:02.385]             c <- base::c
[09:31:02.385]             inherits <- base::inherits
[09:31:02.385]             invokeRestart <- base::invokeRestart
[09:31:02.385]             length <- base::length
[09:31:02.385]             list <- base::list
[09:31:02.385]             seq.int <- base::seq.int
[09:31:02.385]             signalCondition <- base::signalCondition
[09:31:02.385]             sys.calls <- base::sys.calls
[09:31:02.385]             `[[` <- base::`[[`
[09:31:02.385]             `+` <- base::`+`
[09:31:02.385]             `<<-` <- base::`<<-`
[09:31:02.385]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:02.385]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:02.385]                   3L)]
[09:31:02.385]             }
[09:31:02.385]             function(cond) {
[09:31:02.385]                 is_error <- inherits(cond, "error")
[09:31:02.385]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:02.385]                   NULL)
[09:31:02.385]                 if (is_error) {
[09:31:02.385]                   sessionInformation <- function() {
[09:31:02.385]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:02.385]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:02.385]                       search = base::search(), system = base::Sys.info())
[09:31:02.385]                   }
[09:31:02.385]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.385]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:02.385]                     cond$call), session = sessionInformation(), 
[09:31:02.385]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:02.385]                   signalCondition(cond)
[09:31:02.385]                 }
[09:31:02.385]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:02.385]                 "immediateCondition"))) {
[09:31:02.385]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:02.385]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.385]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:02.385]                   if (TRUE && !signal) {
[09:31:02.385]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.385]                     {
[09:31:02.385]                       inherits <- base::inherits
[09:31:02.385]                       invokeRestart <- base::invokeRestart
[09:31:02.385]                       is.null <- base::is.null
[09:31:02.385]                       muffled <- FALSE
[09:31:02.385]                       if (inherits(cond, "message")) {
[09:31:02.385]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.385]                         if (muffled) 
[09:31:02.385]                           invokeRestart("muffleMessage")
[09:31:02.385]                       }
[09:31:02.385]                       else if (inherits(cond, "warning")) {
[09:31:02.385]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.385]                         if (muffled) 
[09:31:02.385]                           invokeRestart("muffleWarning")
[09:31:02.385]                       }
[09:31:02.385]                       else if (inherits(cond, "condition")) {
[09:31:02.385]                         if (!is.null(pattern)) {
[09:31:02.385]                           computeRestarts <- base::computeRestarts
[09:31:02.385]                           grepl <- base::grepl
[09:31:02.385]                           restarts <- computeRestarts(cond)
[09:31:02.385]                           for (restart in restarts) {
[09:31:02.385]                             name <- restart$name
[09:31:02.385]                             if (is.null(name)) 
[09:31:02.385]                               next
[09:31:02.385]                             if (!grepl(pattern, name)) 
[09:31:02.385]                               next
[09:31:02.385]                             invokeRestart(restart)
[09:31:02.385]                             muffled <- TRUE
[09:31:02.385]                             break
[09:31:02.385]                           }
[09:31:02.385]                         }
[09:31:02.385]                       }
[09:31:02.385]                       invisible(muffled)
[09:31:02.385]                     }
[09:31:02.385]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.385]                   }
[09:31:02.385]                 }
[09:31:02.385]                 else {
[09:31:02.385]                   if (TRUE) {
[09:31:02.385]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.385]                     {
[09:31:02.385]                       inherits <- base::inherits
[09:31:02.385]                       invokeRestart <- base::invokeRestart
[09:31:02.385]                       is.null <- base::is.null
[09:31:02.385]                       muffled <- FALSE
[09:31:02.385]                       if (inherits(cond, "message")) {
[09:31:02.385]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.385]                         if (muffled) 
[09:31:02.385]                           invokeRestart("muffleMessage")
[09:31:02.385]                       }
[09:31:02.385]                       else if (inherits(cond, "warning")) {
[09:31:02.385]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.385]                         if (muffled) 
[09:31:02.385]                           invokeRestart("muffleWarning")
[09:31:02.385]                       }
[09:31:02.385]                       else if (inherits(cond, "condition")) {
[09:31:02.385]                         if (!is.null(pattern)) {
[09:31:02.385]                           computeRestarts <- base::computeRestarts
[09:31:02.385]                           grepl <- base::grepl
[09:31:02.385]                           restarts <- computeRestarts(cond)
[09:31:02.385]                           for (restart in restarts) {
[09:31:02.385]                             name <- restart$name
[09:31:02.385]                             if (is.null(name)) 
[09:31:02.385]                               next
[09:31:02.385]                             if (!grepl(pattern, name)) 
[09:31:02.385]                               next
[09:31:02.385]                             invokeRestart(restart)
[09:31:02.385]                             muffled <- TRUE
[09:31:02.385]                             break
[09:31:02.385]                           }
[09:31:02.385]                         }
[09:31:02.385]                       }
[09:31:02.385]                       invisible(muffled)
[09:31:02.385]                     }
[09:31:02.385]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.385]                   }
[09:31:02.385]                 }
[09:31:02.385]             }
[09:31:02.385]         }))
[09:31:02.385]     }, error = function(ex) {
[09:31:02.385]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:02.385]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.385]                 ...future.rng), started = ...future.startTime, 
[09:31:02.385]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:02.385]             version = "1.8"), class = "FutureResult")
[09:31:02.385]     }, finally = {
[09:31:02.385]         if (!identical(...future.workdir, getwd())) 
[09:31:02.385]             setwd(...future.workdir)
[09:31:02.385]         {
[09:31:02.385]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:02.385]                 ...future.oldOptions$nwarnings <- NULL
[09:31:02.385]             }
[09:31:02.385]             base::options(...future.oldOptions)
[09:31:02.385]             if (.Platform$OS.type == "windows") {
[09:31:02.385]                 old_names <- names(...future.oldEnvVars)
[09:31:02.385]                 envs <- base::Sys.getenv()
[09:31:02.385]                 names <- names(envs)
[09:31:02.385]                 common <- intersect(names, old_names)
[09:31:02.385]                 added <- setdiff(names, old_names)
[09:31:02.385]                 removed <- setdiff(old_names, names)
[09:31:02.385]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:02.385]                   envs[common]]
[09:31:02.385]                 NAMES <- toupper(changed)
[09:31:02.385]                 args <- list()
[09:31:02.385]                 for (kk in seq_along(NAMES)) {
[09:31:02.385]                   name <- changed[[kk]]
[09:31:02.385]                   NAME <- NAMES[[kk]]
[09:31:02.385]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.385]                     next
[09:31:02.385]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.385]                 }
[09:31:02.385]                 NAMES <- toupper(added)
[09:31:02.385]                 for (kk in seq_along(NAMES)) {
[09:31:02.385]                   name <- added[[kk]]
[09:31:02.385]                   NAME <- NAMES[[kk]]
[09:31:02.385]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.385]                     next
[09:31:02.385]                   args[[name]] <- ""
[09:31:02.385]                 }
[09:31:02.385]                 NAMES <- toupper(removed)
[09:31:02.385]                 for (kk in seq_along(NAMES)) {
[09:31:02.385]                   name <- removed[[kk]]
[09:31:02.385]                   NAME <- NAMES[[kk]]
[09:31:02.385]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.385]                     next
[09:31:02.385]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.385]                 }
[09:31:02.385]                 if (length(args) > 0) 
[09:31:02.385]                   base::do.call(base::Sys.setenv, args = args)
[09:31:02.385]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:02.385]             }
[09:31:02.385]             else {
[09:31:02.385]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:02.385]             }
[09:31:02.385]             {
[09:31:02.385]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:02.385]                   0L) {
[09:31:02.385]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:02.385]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:02.385]                   base::options(opts)
[09:31:02.385]                 }
[09:31:02.385]                 {
[09:31:02.385]                   {
[09:31:02.385]                     NULL
[09:31:02.385]                     RNGkind("Mersenne-Twister")
[09:31:02.385]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:02.385]                       inherits = FALSE)
[09:31:02.385]                   }
[09:31:02.385]                   options(future.plan = NULL)
[09:31:02.385]                   if (is.na(NA_character_)) 
[09:31:02.385]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.385]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:02.385]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:02.385]                     .init = FALSE)
[09:31:02.385]                 }
[09:31:02.385]             }
[09:31:02.385]         }
[09:31:02.385]     })
[09:31:02.385]     if (TRUE) {
[09:31:02.385]         base::sink(type = "output", split = FALSE)
[09:31:02.385]         if (TRUE) {
[09:31:02.385]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:02.385]         }
[09:31:02.385]         else {
[09:31:02.385]             ...future.result["stdout"] <- base::list(NULL)
[09:31:02.385]         }
[09:31:02.385]         base::close(...future.stdout)
[09:31:02.385]         ...future.stdout <- NULL
[09:31:02.385]     }
[09:31:02.385]     ...future.result$conditions <- ...future.conditions
[09:31:02.385]     ...future.result$finished <- base::Sys.time()
[09:31:02.385]     ...future.result
[09:31:02.385] }
[09:31:02.387] plan(): Setting new future strategy stack:
[09:31:02.387] List of future strategies:
[09:31:02.387] 1. sequential:
[09:31:02.387]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.387]    - tweaked: FALSE
[09:31:02.387]    - call: NULL
[09:31:02.387] plan(): nbrOfWorkers() = 1
[09:31:02.388] plan(): Setting new future strategy stack:
[09:31:02.388] List of future strategies:
[09:31:02.388] 1. sequential:
[09:31:02.388]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.388]    - tweaked: FALSE
[09:31:02.388]    - call: future::plan("sequential")
[09:31:02.389] plan(): nbrOfWorkers() = 1
[09:31:02.389] SequentialFuture started (and completed)
[09:31:02.389] - Launch lazy future ... done
[09:31:02.389] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[09:31:02.390] getGlobalsAndPackages() ...
[09:31:02.390] Searching for globals...
[09:31:02.390] - globals found: [1] ‘{’
[09:31:02.390] Searching for globals ... DONE
[09:31:02.390] Resolving globals: FALSE
[09:31:02.391] 
[09:31:02.391] 
[09:31:02.391] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[09:31:02.391] resolved() for ‘Future’ ...
[09:31:02.391] - state: ‘created’
[09:31:02.391] - run: TRUE
[09:31:02.391] - run() ...
[09:31:02.391] run() for ‘Future’ ...
[09:31:02.392] - state: ‘created’
[09:31:02.392] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:02.392] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:02.392] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:02.392]   - Field: ‘label’
[09:31:02.392]   - Field: ‘local’
[09:31:02.392]   - Field: ‘owner’
[09:31:02.392]   - Field: ‘envir’
[09:31:02.392]   - Field: ‘packages’
[09:31:02.393]   - Field: ‘gc’
[09:31:02.393]   - Field: ‘conditions’
[09:31:02.393]   - Field: ‘expr’
[09:31:02.393]   - Field: ‘uuid’
[09:31:02.393]   - Field: ‘seed’
[09:31:02.393]   - Field: ‘version’
[09:31:02.393]   - Field: ‘result’
[09:31:02.393]   - Field: ‘asynchronous’
[09:31:02.393]   - Field: ‘calls’
[09:31:02.393]   - Field: ‘globals’
[09:31:02.393]   - Field: ‘stdout’
[09:31:02.394]   - Field: ‘earlySignal’
[09:31:02.394]   - Field: ‘lazy’
[09:31:02.394]   - Field: ‘state’
[09:31:02.394] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:02.394] - Launch lazy future ...
[09:31:02.394] Packages needed by the future expression (n = 0): <none>
[09:31:02.394] Packages needed by future strategies (n = 0): <none>
[09:31:02.394] {
[09:31:02.394]     {
[09:31:02.394]         {
[09:31:02.394]             ...future.startTime <- base::Sys.time()
[09:31:02.394]             {
[09:31:02.394]                 {
[09:31:02.394]                   {
[09:31:02.394]                     base::local({
[09:31:02.394]                       has_future <- base::requireNamespace("future", 
[09:31:02.394]                         quietly = TRUE)
[09:31:02.394]                       if (has_future) {
[09:31:02.394]                         ns <- base::getNamespace("future")
[09:31:02.394]                         version <- ns[[".package"]][["version"]]
[09:31:02.394]                         if (is.null(version)) 
[09:31:02.394]                           version <- utils::packageVersion("future")
[09:31:02.394]                       }
[09:31:02.394]                       else {
[09:31:02.394]                         version <- NULL
[09:31:02.394]                       }
[09:31:02.394]                       if (!has_future || version < "1.8.0") {
[09:31:02.394]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:02.394]                           "", base::R.version$version.string), 
[09:31:02.394]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:02.394]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:02.394]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:02.394]                             "release", "version")], collapse = " "), 
[09:31:02.394]                           hostname = base::Sys.info()[["nodename"]])
[09:31:02.394]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:02.394]                           info)
[09:31:02.394]                         info <- base::paste(info, collapse = "; ")
[09:31:02.394]                         if (!has_future) {
[09:31:02.394]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:02.394]                             info)
[09:31:02.394]                         }
[09:31:02.394]                         else {
[09:31:02.394]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:02.394]                             info, version)
[09:31:02.394]                         }
[09:31:02.394]                         base::stop(msg)
[09:31:02.394]                       }
[09:31:02.394]                     })
[09:31:02.394]                   }
[09:31:02.394]                   ...future.strategy.old <- future::plan("list")
[09:31:02.394]                   options(future.plan = NULL)
[09:31:02.394]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.394]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:02.394]                 }
[09:31:02.394]                 ...future.workdir <- getwd()
[09:31:02.394]             }
[09:31:02.394]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:02.394]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:02.394]         }
[09:31:02.394]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:02.394]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:02.394]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:02.394]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:02.394]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:02.394]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:02.394]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:02.394]             base::names(...future.oldOptions))
[09:31:02.394]     }
[09:31:02.394]     if (FALSE) {
[09:31:02.394]     }
[09:31:02.394]     else {
[09:31:02.394]         if (TRUE) {
[09:31:02.394]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:02.394]                 open = "w")
[09:31:02.394]         }
[09:31:02.394]         else {
[09:31:02.394]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:02.394]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:02.394]         }
[09:31:02.394]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:02.394]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:02.394]             base::sink(type = "output", split = FALSE)
[09:31:02.394]             base::close(...future.stdout)
[09:31:02.394]         }, add = TRUE)
[09:31:02.394]     }
[09:31:02.394]     ...future.frame <- base::sys.nframe()
[09:31:02.394]     ...future.conditions <- base::list()
[09:31:02.394]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:02.394]     if (FALSE) {
[09:31:02.394]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:02.394]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:02.394]     }
[09:31:02.394]     ...future.result <- base::tryCatch({
[09:31:02.394]         base::withCallingHandlers({
[09:31:02.394]             ...future.value <- base::withVisible(base::local({
[09:31:02.394]                 42L
[09:31:02.394]             }))
[09:31:02.394]             future::FutureResult(value = ...future.value$value, 
[09:31:02.394]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.394]                   ...future.rng), globalenv = if (FALSE) 
[09:31:02.394]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:02.394]                     ...future.globalenv.names))
[09:31:02.394]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:02.394]         }, condition = base::local({
[09:31:02.394]             c <- base::c
[09:31:02.394]             inherits <- base::inherits
[09:31:02.394]             invokeRestart <- base::invokeRestart
[09:31:02.394]             length <- base::length
[09:31:02.394]             list <- base::list
[09:31:02.394]             seq.int <- base::seq.int
[09:31:02.394]             signalCondition <- base::signalCondition
[09:31:02.394]             sys.calls <- base::sys.calls
[09:31:02.394]             `[[` <- base::`[[`
[09:31:02.394]             `+` <- base::`+`
[09:31:02.394]             `<<-` <- base::`<<-`
[09:31:02.394]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:02.394]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:02.394]                   3L)]
[09:31:02.394]             }
[09:31:02.394]             function(cond) {
[09:31:02.394]                 is_error <- inherits(cond, "error")
[09:31:02.394]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:02.394]                   NULL)
[09:31:02.394]                 if (is_error) {
[09:31:02.394]                   sessionInformation <- function() {
[09:31:02.394]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:02.394]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:02.394]                       search = base::search(), system = base::Sys.info())
[09:31:02.394]                   }
[09:31:02.394]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.394]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:02.394]                     cond$call), session = sessionInformation(), 
[09:31:02.394]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:02.394]                   signalCondition(cond)
[09:31:02.394]                 }
[09:31:02.394]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:02.394]                 "immediateCondition"))) {
[09:31:02.394]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:02.394]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.394]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:02.394]                   if (TRUE && !signal) {
[09:31:02.394]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.394]                     {
[09:31:02.394]                       inherits <- base::inherits
[09:31:02.394]                       invokeRestart <- base::invokeRestart
[09:31:02.394]                       is.null <- base::is.null
[09:31:02.394]                       muffled <- FALSE
[09:31:02.394]                       if (inherits(cond, "message")) {
[09:31:02.394]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.394]                         if (muffled) 
[09:31:02.394]                           invokeRestart("muffleMessage")
[09:31:02.394]                       }
[09:31:02.394]                       else if (inherits(cond, "warning")) {
[09:31:02.394]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.394]                         if (muffled) 
[09:31:02.394]                           invokeRestart("muffleWarning")
[09:31:02.394]                       }
[09:31:02.394]                       else if (inherits(cond, "condition")) {
[09:31:02.394]                         if (!is.null(pattern)) {
[09:31:02.394]                           computeRestarts <- base::computeRestarts
[09:31:02.394]                           grepl <- base::grepl
[09:31:02.394]                           restarts <- computeRestarts(cond)
[09:31:02.394]                           for (restart in restarts) {
[09:31:02.394]                             name <- restart$name
[09:31:02.394]                             if (is.null(name)) 
[09:31:02.394]                               next
[09:31:02.394]                             if (!grepl(pattern, name)) 
[09:31:02.394]                               next
[09:31:02.394]                             invokeRestart(restart)
[09:31:02.394]                             muffled <- TRUE
[09:31:02.394]                             break
[09:31:02.394]                           }
[09:31:02.394]                         }
[09:31:02.394]                       }
[09:31:02.394]                       invisible(muffled)
[09:31:02.394]                     }
[09:31:02.394]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.394]                   }
[09:31:02.394]                 }
[09:31:02.394]                 else {
[09:31:02.394]                   if (TRUE) {
[09:31:02.394]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.394]                     {
[09:31:02.394]                       inherits <- base::inherits
[09:31:02.394]                       invokeRestart <- base::invokeRestart
[09:31:02.394]                       is.null <- base::is.null
[09:31:02.394]                       muffled <- FALSE
[09:31:02.394]                       if (inherits(cond, "message")) {
[09:31:02.394]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.394]                         if (muffled) 
[09:31:02.394]                           invokeRestart("muffleMessage")
[09:31:02.394]                       }
[09:31:02.394]                       else if (inherits(cond, "warning")) {
[09:31:02.394]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.394]                         if (muffled) 
[09:31:02.394]                           invokeRestart("muffleWarning")
[09:31:02.394]                       }
[09:31:02.394]                       else if (inherits(cond, "condition")) {
[09:31:02.394]                         if (!is.null(pattern)) {
[09:31:02.394]                           computeRestarts <- base::computeRestarts
[09:31:02.394]                           grepl <- base::grepl
[09:31:02.394]                           restarts <- computeRestarts(cond)
[09:31:02.394]                           for (restart in restarts) {
[09:31:02.394]                             name <- restart$name
[09:31:02.394]                             if (is.null(name)) 
[09:31:02.394]                               next
[09:31:02.394]                             if (!grepl(pattern, name)) 
[09:31:02.394]                               next
[09:31:02.394]                             invokeRestart(restart)
[09:31:02.394]                             muffled <- TRUE
[09:31:02.394]                             break
[09:31:02.394]                           }
[09:31:02.394]                         }
[09:31:02.394]                       }
[09:31:02.394]                       invisible(muffled)
[09:31:02.394]                     }
[09:31:02.394]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.394]                   }
[09:31:02.394]                 }
[09:31:02.394]             }
[09:31:02.394]         }))
[09:31:02.394]     }, error = function(ex) {
[09:31:02.394]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:02.394]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.394]                 ...future.rng), started = ...future.startTime, 
[09:31:02.394]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:02.394]             version = "1.8"), class = "FutureResult")
[09:31:02.394]     }, finally = {
[09:31:02.394]         if (!identical(...future.workdir, getwd())) 
[09:31:02.394]             setwd(...future.workdir)
[09:31:02.394]         {
[09:31:02.394]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:02.394]                 ...future.oldOptions$nwarnings <- NULL
[09:31:02.394]             }
[09:31:02.394]             base::options(...future.oldOptions)
[09:31:02.394]             if (.Platform$OS.type == "windows") {
[09:31:02.394]                 old_names <- names(...future.oldEnvVars)
[09:31:02.394]                 envs <- base::Sys.getenv()
[09:31:02.394]                 names <- names(envs)
[09:31:02.394]                 common <- intersect(names, old_names)
[09:31:02.394]                 added <- setdiff(names, old_names)
[09:31:02.394]                 removed <- setdiff(old_names, names)
[09:31:02.394]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:02.394]                   envs[common]]
[09:31:02.394]                 NAMES <- toupper(changed)
[09:31:02.394]                 args <- list()
[09:31:02.394]                 for (kk in seq_along(NAMES)) {
[09:31:02.394]                   name <- changed[[kk]]
[09:31:02.394]                   NAME <- NAMES[[kk]]
[09:31:02.394]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.394]                     next
[09:31:02.394]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.394]                 }
[09:31:02.394]                 NAMES <- toupper(added)
[09:31:02.394]                 for (kk in seq_along(NAMES)) {
[09:31:02.394]                   name <- added[[kk]]
[09:31:02.394]                   NAME <- NAMES[[kk]]
[09:31:02.394]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.394]                     next
[09:31:02.394]                   args[[name]] <- ""
[09:31:02.394]                 }
[09:31:02.394]                 NAMES <- toupper(removed)
[09:31:02.394]                 for (kk in seq_along(NAMES)) {
[09:31:02.394]                   name <- removed[[kk]]
[09:31:02.394]                   NAME <- NAMES[[kk]]
[09:31:02.394]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.394]                     next
[09:31:02.394]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.394]                 }
[09:31:02.394]                 if (length(args) > 0) 
[09:31:02.394]                   base::do.call(base::Sys.setenv, args = args)
[09:31:02.394]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:02.394]             }
[09:31:02.394]             else {
[09:31:02.394]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:02.394]             }
[09:31:02.394]             {
[09:31:02.394]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:02.394]                   0L) {
[09:31:02.394]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:02.394]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:02.394]                   base::options(opts)
[09:31:02.394]                 }
[09:31:02.394]                 {
[09:31:02.394]                   {
[09:31:02.394]                     NULL
[09:31:02.394]                     RNGkind("Mersenne-Twister")
[09:31:02.394]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:02.394]                       inherits = FALSE)
[09:31:02.394]                   }
[09:31:02.394]                   options(future.plan = NULL)
[09:31:02.394]                   if (is.na(NA_character_)) 
[09:31:02.394]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.394]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:02.394]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:02.394]                     .init = FALSE)
[09:31:02.394]                 }
[09:31:02.394]             }
[09:31:02.394]         }
[09:31:02.394]     })
[09:31:02.394]     if (TRUE) {
[09:31:02.394]         base::sink(type = "output", split = FALSE)
[09:31:02.394]         if (TRUE) {
[09:31:02.394]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:02.394]         }
[09:31:02.394]         else {
[09:31:02.394]             ...future.result["stdout"] <- base::list(NULL)
[09:31:02.394]         }
[09:31:02.394]         base::close(...future.stdout)
[09:31:02.394]         ...future.stdout <- NULL
[09:31:02.394]     }
[09:31:02.394]     ...future.result$conditions <- ...future.conditions
[09:31:02.394]     ...future.result$finished <- base::Sys.time()
[09:31:02.394]     ...future.result
[09:31:02.394] }
[09:31:02.396] plan(): Setting new future strategy stack:
[09:31:02.396] List of future strategies:
[09:31:02.396] 1. sequential:
[09:31:02.396]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.396]    - tweaked: FALSE
[09:31:02.396]    - call: NULL
[09:31:02.397] plan(): nbrOfWorkers() = 1
[09:31:02.397] plan(): Setting new future strategy stack:
[09:31:02.397] List of future strategies:
[09:31:02.397] 1. sequential:
[09:31:02.397]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.397]    - tweaked: FALSE
[09:31:02.397]    - call: future::plan("sequential")
[09:31:02.398] plan(): nbrOfWorkers() = 1
[09:31:02.398] SequentialFuture started (and completed)
[09:31:02.398] - Launch lazy future ... done
[09:31:02.398] run() for ‘SequentialFuture’ ... done
[09:31:02.398] - run() ... done
[09:31:02.398] - resolved() ...
[09:31:02.399] resolved() for ‘SequentialFuture’ ...
[09:31:02.399] - state: ‘finished’
[09:31:02.399] - run: TRUE
[09:31:02.399] - result: ‘FutureResult’
[09:31:02.399] resolved() for ‘SequentialFuture’ ... done
[09:31:02.399] - resolved: TRUE
[09:31:02.399] - resolved() ... done
[09:31:02.399] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[09:31:02.399] getGlobalsAndPackages() ...
[09:31:02.400] Searching for globals...
[09:31:02.400] 
[09:31:02.400] Searching for globals ... DONE
[09:31:02.400] - globals: [0] <none>
[09:31:02.400] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 09825ef3-a055-c7a0-86f6-5e54643ba28b
Class: ‘Future’, ‘environment’
> y <- value(f)
[09:31:02.401] run() for ‘Future’ ...
[09:31:02.401] - state: ‘created’
[09:31:02.401] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:02.401] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:02.401] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:02.401]   - Field: ‘label’
[09:31:02.401]   - Field: ‘local’
[09:31:02.401]   - Field: ‘owner’
[09:31:02.402]   - Field: ‘envir’
[09:31:02.404]   - Field: ‘packages’
[09:31:02.404]   - Field: ‘gc’
[09:31:02.404]   - Field: ‘conditions’
[09:31:02.404]   - Field: ‘expr’
[09:31:02.404]   - Field: ‘uuid’
[09:31:02.404]   - Field: ‘seed’
[09:31:02.404]   - Field: ‘version’
[09:31:02.405]   - Field: ‘result’
[09:31:02.405]   - Field: ‘asynchronous’
[09:31:02.405]   - Field: ‘calls’
[09:31:02.405]   - Field: ‘globals’
[09:31:02.405]   - Field: ‘stdout’
[09:31:02.405]   - Field: ‘earlySignal’
[09:31:02.405]   - Field: ‘lazy’
[09:31:02.405]   - Field: ‘state’
[09:31:02.405] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:02.405] - Launch lazy future ...
[09:31:02.406] Packages needed by the future expression (n = 0): <none>
[09:31:02.406] Packages needed by future strategies (n = 0): <none>
[09:31:02.406] {
[09:31:02.406]     {
[09:31:02.406]         {
[09:31:02.406]             ...future.startTime <- base::Sys.time()
[09:31:02.406]             {
[09:31:02.406]                 {
[09:31:02.406]                   {
[09:31:02.406]                     base::local({
[09:31:02.406]                       has_future <- base::requireNamespace("future", 
[09:31:02.406]                         quietly = TRUE)
[09:31:02.406]                       if (has_future) {
[09:31:02.406]                         ns <- base::getNamespace("future")
[09:31:02.406]                         version <- ns[[".package"]][["version"]]
[09:31:02.406]                         if (is.null(version)) 
[09:31:02.406]                           version <- utils::packageVersion("future")
[09:31:02.406]                       }
[09:31:02.406]                       else {
[09:31:02.406]                         version <- NULL
[09:31:02.406]                       }
[09:31:02.406]                       if (!has_future || version < "1.8.0") {
[09:31:02.406]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:02.406]                           "", base::R.version$version.string), 
[09:31:02.406]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:02.406]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:02.406]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:02.406]                             "release", "version")], collapse = " "), 
[09:31:02.406]                           hostname = base::Sys.info()[["nodename"]])
[09:31:02.406]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:02.406]                           info)
[09:31:02.406]                         info <- base::paste(info, collapse = "; ")
[09:31:02.406]                         if (!has_future) {
[09:31:02.406]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:02.406]                             info)
[09:31:02.406]                         }
[09:31:02.406]                         else {
[09:31:02.406]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:02.406]                             info, version)
[09:31:02.406]                         }
[09:31:02.406]                         base::stop(msg)
[09:31:02.406]                       }
[09:31:02.406]                     })
[09:31:02.406]                   }
[09:31:02.406]                   ...future.strategy.old <- future::plan("list")
[09:31:02.406]                   options(future.plan = NULL)
[09:31:02.406]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.406]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:02.406]                 }
[09:31:02.406]                 ...future.workdir <- getwd()
[09:31:02.406]             }
[09:31:02.406]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:02.406]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:02.406]         }
[09:31:02.406]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:02.406]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:02.406]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:02.406]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:02.406]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:02.406]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:02.406]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:02.406]             base::names(...future.oldOptions))
[09:31:02.406]     }
[09:31:02.406]     if (FALSE) {
[09:31:02.406]     }
[09:31:02.406]     else {
[09:31:02.406]         if (TRUE) {
[09:31:02.406]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:02.406]                 open = "w")
[09:31:02.406]         }
[09:31:02.406]         else {
[09:31:02.406]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:02.406]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:02.406]         }
[09:31:02.406]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:02.406]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:02.406]             base::sink(type = "output", split = FALSE)
[09:31:02.406]             base::close(...future.stdout)
[09:31:02.406]         }, add = TRUE)
[09:31:02.406]     }
[09:31:02.406]     ...future.frame <- base::sys.nframe()
[09:31:02.406]     ...future.conditions <- base::list()
[09:31:02.406]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:02.406]     if (FALSE) {
[09:31:02.406]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:02.406]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:02.406]     }
[09:31:02.406]     ...future.result <- base::tryCatch({
[09:31:02.406]         base::withCallingHandlers({
[09:31:02.406]             ...future.value <- base::withVisible(base::local(42L))
[09:31:02.406]             future::FutureResult(value = ...future.value$value, 
[09:31:02.406]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.406]                   ...future.rng), globalenv = if (FALSE) 
[09:31:02.406]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:02.406]                     ...future.globalenv.names))
[09:31:02.406]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:02.406]         }, condition = base::local({
[09:31:02.406]             c <- base::c
[09:31:02.406]             inherits <- base::inherits
[09:31:02.406]             invokeRestart <- base::invokeRestart
[09:31:02.406]             length <- base::length
[09:31:02.406]             list <- base::list
[09:31:02.406]             seq.int <- base::seq.int
[09:31:02.406]             signalCondition <- base::signalCondition
[09:31:02.406]             sys.calls <- base::sys.calls
[09:31:02.406]             `[[` <- base::`[[`
[09:31:02.406]             `+` <- base::`+`
[09:31:02.406]             `<<-` <- base::`<<-`
[09:31:02.406]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:02.406]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:02.406]                   3L)]
[09:31:02.406]             }
[09:31:02.406]             function(cond) {
[09:31:02.406]                 is_error <- inherits(cond, "error")
[09:31:02.406]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:02.406]                   NULL)
[09:31:02.406]                 if (is_error) {
[09:31:02.406]                   sessionInformation <- function() {
[09:31:02.406]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:02.406]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:02.406]                       search = base::search(), system = base::Sys.info())
[09:31:02.406]                   }
[09:31:02.406]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.406]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:02.406]                     cond$call), session = sessionInformation(), 
[09:31:02.406]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:02.406]                   signalCondition(cond)
[09:31:02.406]                 }
[09:31:02.406]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:02.406]                 "immediateCondition"))) {
[09:31:02.406]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:02.406]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.406]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:02.406]                   if (TRUE && !signal) {
[09:31:02.406]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.406]                     {
[09:31:02.406]                       inherits <- base::inherits
[09:31:02.406]                       invokeRestart <- base::invokeRestart
[09:31:02.406]                       is.null <- base::is.null
[09:31:02.406]                       muffled <- FALSE
[09:31:02.406]                       if (inherits(cond, "message")) {
[09:31:02.406]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.406]                         if (muffled) 
[09:31:02.406]                           invokeRestart("muffleMessage")
[09:31:02.406]                       }
[09:31:02.406]                       else if (inherits(cond, "warning")) {
[09:31:02.406]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.406]                         if (muffled) 
[09:31:02.406]                           invokeRestart("muffleWarning")
[09:31:02.406]                       }
[09:31:02.406]                       else if (inherits(cond, "condition")) {
[09:31:02.406]                         if (!is.null(pattern)) {
[09:31:02.406]                           computeRestarts <- base::computeRestarts
[09:31:02.406]                           grepl <- base::grepl
[09:31:02.406]                           restarts <- computeRestarts(cond)
[09:31:02.406]                           for (restart in restarts) {
[09:31:02.406]                             name <- restart$name
[09:31:02.406]                             if (is.null(name)) 
[09:31:02.406]                               next
[09:31:02.406]                             if (!grepl(pattern, name)) 
[09:31:02.406]                               next
[09:31:02.406]                             invokeRestart(restart)
[09:31:02.406]                             muffled <- TRUE
[09:31:02.406]                             break
[09:31:02.406]                           }
[09:31:02.406]                         }
[09:31:02.406]                       }
[09:31:02.406]                       invisible(muffled)
[09:31:02.406]                     }
[09:31:02.406]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.406]                   }
[09:31:02.406]                 }
[09:31:02.406]                 else {
[09:31:02.406]                   if (TRUE) {
[09:31:02.406]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.406]                     {
[09:31:02.406]                       inherits <- base::inherits
[09:31:02.406]                       invokeRestart <- base::invokeRestart
[09:31:02.406]                       is.null <- base::is.null
[09:31:02.406]                       muffled <- FALSE
[09:31:02.406]                       if (inherits(cond, "message")) {
[09:31:02.406]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.406]                         if (muffled) 
[09:31:02.406]                           invokeRestart("muffleMessage")
[09:31:02.406]                       }
[09:31:02.406]                       else if (inherits(cond, "warning")) {
[09:31:02.406]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.406]                         if (muffled) 
[09:31:02.406]                           invokeRestart("muffleWarning")
[09:31:02.406]                       }
[09:31:02.406]                       else if (inherits(cond, "condition")) {
[09:31:02.406]                         if (!is.null(pattern)) {
[09:31:02.406]                           computeRestarts <- base::computeRestarts
[09:31:02.406]                           grepl <- base::grepl
[09:31:02.406]                           restarts <- computeRestarts(cond)
[09:31:02.406]                           for (restart in restarts) {
[09:31:02.406]                             name <- restart$name
[09:31:02.406]                             if (is.null(name)) 
[09:31:02.406]                               next
[09:31:02.406]                             if (!grepl(pattern, name)) 
[09:31:02.406]                               next
[09:31:02.406]                             invokeRestart(restart)
[09:31:02.406]                             muffled <- TRUE
[09:31:02.406]                             break
[09:31:02.406]                           }
[09:31:02.406]                         }
[09:31:02.406]                       }
[09:31:02.406]                       invisible(muffled)
[09:31:02.406]                     }
[09:31:02.406]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.406]                   }
[09:31:02.406]                 }
[09:31:02.406]             }
[09:31:02.406]         }))
[09:31:02.406]     }, error = function(ex) {
[09:31:02.406]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:02.406]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.406]                 ...future.rng), started = ...future.startTime, 
[09:31:02.406]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:02.406]             version = "1.8"), class = "FutureResult")
[09:31:02.406]     }, finally = {
[09:31:02.406]         if (!identical(...future.workdir, getwd())) 
[09:31:02.406]             setwd(...future.workdir)
[09:31:02.406]         {
[09:31:02.406]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:02.406]                 ...future.oldOptions$nwarnings <- NULL
[09:31:02.406]             }
[09:31:02.406]             base::options(...future.oldOptions)
[09:31:02.406]             if (.Platform$OS.type == "windows") {
[09:31:02.406]                 old_names <- names(...future.oldEnvVars)
[09:31:02.406]                 envs <- base::Sys.getenv()
[09:31:02.406]                 names <- names(envs)
[09:31:02.406]                 common <- intersect(names, old_names)
[09:31:02.406]                 added <- setdiff(names, old_names)
[09:31:02.406]                 removed <- setdiff(old_names, names)
[09:31:02.406]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:02.406]                   envs[common]]
[09:31:02.406]                 NAMES <- toupper(changed)
[09:31:02.406]                 args <- list()
[09:31:02.406]                 for (kk in seq_along(NAMES)) {
[09:31:02.406]                   name <- changed[[kk]]
[09:31:02.406]                   NAME <- NAMES[[kk]]
[09:31:02.406]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.406]                     next
[09:31:02.406]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.406]                 }
[09:31:02.406]                 NAMES <- toupper(added)
[09:31:02.406]                 for (kk in seq_along(NAMES)) {
[09:31:02.406]                   name <- added[[kk]]
[09:31:02.406]                   NAME <- NAMES[[kk]]
[09:31:02.406]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.406]                     next
[09:31:02.406]                   args[[name]] <- ""
[09:31:02.406]                 }
[09:31:02.406]                 NAMES <- toupper(removed)
[09:31:02.406]                 for (kk in seq_along(NAMES)) {
[09:31:02.406]                   name <- removed[[kk]]
[09:31:02.406]                   NAME <- NAMES[[kk]]
[09:31:02.406]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.406]                     next
[09:31:02.406]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.406]                 }
[09:31:02.406]                 if (length(args) > 0) 
[09:31:02.406]                   base::do.call(base::Sys.setenv, args = args)
[09:31:02.406]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:02.406]             }
[09:31:02.406]             else {
[09:31:02.406]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:02.406]             }
[09:31:02.406]             {
[09:31:02.406]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:02.406]                   0L) {
[09:31:02.406]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:02.406]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:02.406]                   base::options(opts)
[09:31:02.406]                 }
[09:31:02.406]                 {
[09:31:02.406]                   {
[09:31:02.406]                     NULL
[09:31:02.406]                     RNGkind("Mersenne-Twister")
[09:31:02.406]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:02.406]                       inherits = FALSE)
[09:31:02.406]                   }
[09:31:02.406]                   options(future.plan = NULL)
[09:31:02.406]                   if (is.na(NA_character_)) 
[09:31:02.406]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.406]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:02.406]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:02.406]                     .init = FALSE)
[09:31:02.406]                 }
[09:31:02.406]             }
[09:31:02.406]         }
[09:31:02.406]     })
[09:31:02.406]     if (TRUE) {
[09:31:02.406]         base::sink(type = "output", split = FALSE)
[09:31:02.406]         if (TRUE) {
[09:31:02.406]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:02.406]         }
[09:31:02.406]         else {
[09:31:02.406]             ...future.result["stdout"] <- base::list(NULL)
[09:31:02.406]         }
[09:31:02.406]         base::close(...future.stdout)
[09:31:02.406]         ...future.stdout <- NULL
[09:31:02.406]     }
[09:31:02.406]     ...future.result$conditions <- ...future.conditions
[09:31:02.406]     ...future.result$finished <- base::Sys.time()
[09:31:02.406]     ...future.result
[09:31:02.406] }
[09:31:02.408] plan(): Setting new future strategy stack:
[09:31:02.408] List of future strategies:
[09:31:02.408] 1. sequential:
[09:31:02.408]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.408]    - tweaked: FALSE
[09:31:02.408]    - call: NULL
[09:31:02.408] plan(): nbrOfWorkers() = 1
[09:31:02.409] plan(): Setting new future strategy stack:
[09:31:02.409] List of future strategies:
[09:31:02.409] 1. sequential:
[09:31:02.409]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.409]    - tweaked: FALSE
[09:31:02.409]    - call: future::plan("sequential")
[09:31:02.409] plan(): nbrOfWorkers() = 1
[09:31:02.410] SequentialFuture started (and completed)
[09:31:02.410] - Launch lazy future ... done
[09:31:02.410] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[09:31:02.410] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[09:31:02.411] plan(): Setting new future strategy stack:
[09:31:02.411] List of future strategies:
[09:31:02.411] 1. FutureStrategy:
[09:31:02.411]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.411]    - tweaked: FALSE
[09:31:02.411]    - call: future::plan(oplan)
[09:31:02.422] plan(): nbrOfWorkers() = 1
> 
