
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:33:03.813] plan(): Setting new future strategy stack:
[09:33:03.814] List of future strategies:
[09:33:03.814] 1. sequential:
[09:33:03.814]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.814]    - tweaked: FALSE
[09:33:03.814]    - call: future::plan("sequential")
[09:33:03.824] plan(): nbrOfWorkers() = 1
> 
> message("*** Standard output ...")
*** Standard output ...
> 
> truth_rows <- utils::capture.output({
+   print(1:50)
+   str(1:50)
+   cat(letters, sep = "-")
+   cat(1:6, collapse = "\n")
+   write.table(datasets::iris[1:10,], sep = "\t")
+ })
> truth <- paste0(paste(truth_rows, collapse = "\n"), "\n")
> print(truth)
[1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\na-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 \n\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\"\n\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\"\n\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\"\n\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\"\n\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\"\n\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\"\n\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\"\n\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\"\n\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\"\n\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\"\n\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\"\n"
> 
> for (cores in seq_len(min(2L, availCores))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("%s ...", strategy))
+     plan(strategy)
+ 
+     for (stdout in c(TRUE, FALSE, NA)) {
+       message(sprintf("- stdout = %s", stdout))
+ 
+       f <- future({
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       }, stdout = stdout)
+       r <- result(f)
+       str(r)
+       stopifnot(value(f) == 42L)
+       if (is.na(stdout)) {
+         stopifnot(is.null(r$stdout) || r$stdout == "")
+       } else if (stdout) {
+         print(r)
+         stopifnot(identical(r$stdout, truth))
+       } else {
+         stopifnot(is.null(r$stdout))
+       }
+ 
+       v %<-% {
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       } %stdout% stdout
+       out <- utils::capture.output(y <- v)
+       stopifnot(y == 42L)
+       if (is.na(stdout)) {
+         ## Single-core multisession => sequential
+         if (cores > 1L || strategy != "multisession") {
+           stopifnot(out == "")
+         }
+       } else if (stdout) {
+         print(out)
+         stopifnot(identical(out, truth_rows))
+       } else {
+         stopifnot(out == "")
+       }
+ 
+       message("- stdout = structure(TRUE, drop = TRUE)")
+       f <- future(print(42), stdout = structure(TRUE, drop = TRUE))
+       r <- result(f)
+       stopifnot(inherits(r$stdout, "character"))
+       v <- value(f)
+       r <- result(f)
+       stopifnot(is.null(r$stdout))
+     } ## for (stdout ...)
+ 
+     message(sprintf("%s ... done", strategy))
+   } ## for (strategy ...)
+ 
+   message(sprintf("Testing with %d cores ... done", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
sequential ...
[09:33:03.870] plan(): Setting new future strategy stack:
[09:33:03.870] List of future strategies:
[09:33:03.870] 1. sequential:
[09:33:03.870]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.870]    - tweaked: FALSE
[09:33:03.870]    - call: plan(strategy)
[09:33:03.881] plan(): nbrOfWorkers() = 1
- stdout = TRUE
[09:33:03.882] getGlobalsAndPackages() ...
[09:33:03.882] Searching for globals...
[09:33:03.891] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:03.891] Searching for globals ... DONE
[09:33:03.891] Resolving globals: FALSE
[09:33:03.892] 
[09:33:03.892] - packages: [1] ‘utils’
[09:33:03.893] getGlobalsAndPackages() ... DONE
[09:33:03.893] run() for ‘Future’ ...
[09:33:03.893] - state: ‘created’
[09:33:03.894] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:33:03.894] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:33:03.894] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:33:03.894]   - Field: ‘label’
[09:33:03.894]   - Field: ‘local’
[09:33:03.894]   - Field: ‘owner’
[09:33:03.894]   - Field: ‘envir’
[09:33:03.894]   - Field: ‘packages’
[09:33:03.894]   - Field: ‘gc’
[09:33:03.895]   - Field: ‘conditions’
[09:33:03.895]   - Field: ‘expr’
[09:33:03.895]   - Field: ‘uuid’
[09:33:03.895]   - Field: ‘seed’
[09:33:03.895]   - Field: ‘version’
[09:33:03.895]   - Field: ‘result’
[09:33:03.895]   - Field: ‘asynchronous’
[09:33:03.895]   - Field: ‘calls’
[09:33:03.895]   - Field: ‘globals’
[09:33:03.895]   - Field: ‘stdout’
[09:33:03.895]   - Field: ‘earlySignal’
[09:33:03.895]   - Field: ‘lazy’
[09:33:03.896]   - Field: ‘state’
[09:33:03.896] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:33:03.896] - Launch lazy future ...
[09:33:03.896] Packages needed by the future expression (n = 1): ‘utils’
[09:33:03.897] Packages needed by future strategies (n = 0): <none>
[09:33:03.897] {
[09:33:03.897]     {
[09:33:03.897]         {
[09:33:03.897]             ...future.startTime <- base::Sys.time()
[09:33:03.897]             {
[09:33:03.897]                 {
[09:33:03.897]                   {
[09:33:03.897]                     {
[09:33:03.897]                       base::local({
[09:33:03.897]                         has_future <- base::requireNamespace("future", 
[09:33:03.897]                           quietly = TRUE)
[09:33:03.897]                         if (has_future) {
[09:33:03.897]                           ns <- base::getNamespace("future")
[09:33:03.897]                           version <- ns[[".package"]][["version"]]
[09:33:03.897]                           if (is.null(version)) 
[09:33:03.897]                             version <- utils::packageVersion("future")
[09:33:03.897]                         }
[09:33:03.897]                         else {
[09:33:03.897]                           version <- NULL
[09:33:03.897]                         }
[09:33:03.897]                         if (!has_future || version < "1.8.0") {
[09:33:03.897]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:03.897]                             "", base::R.version$version.string), 
[09:33:03.897]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:03.897]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:03.897]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:03.897]                               "release", "version")], collapse = " "), 
[09:33:03.897]                             hostname = base::Sys.info()[["nodename"]])
[09:33:03.897]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:03.897]                             info)
[09:33:03.897]                           info <- base::paste(info, collapse = "; ")
[09:33:03.897]                           if (!has_future) {
[09:33:03.897]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:03.897]                               info)
[09:33:03.897]                           }
[09:33:03.897]                           else {
[09:33:03.897]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:03.897]                               info, version)
[09:33:03.897]                           }
[09:33:03.897]                           base::stop(msg)
[09:33:03.897]                         }
[09:33:03.897]                       })
[09:33:03.897]                     }
[09:33:03.897]                     base::local({
[09:33:03.897]                       for (pkg in "utils") {
[09:33:03.897]                         base::loadNamespace(pkg)
[09:33:03.897]                         base::library(pkg, character.only = TRUE)
[09:33:03.897]                       }
[09:33:03.897]                     })
[09:33:03.897]                   }
[09:33:03.897]                   ...future.strategy.old <- future::plan("list")
[09:33:03.897]                   options(future.plan = NULL)
[09:33:03.897]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.897]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:03.897]                 }
[09:33:03.897]                 ...future.workdir <- getwd()
[09:33:03.897]             }
[09:33:03.897]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:03.897]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:03.897]         }
[09:33:03.897]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:03.897]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:03.897]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:03.897]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:03.897]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:03.897]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:03.897]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:03.897]             base::names(...future.oldOptions))
[09:33:03.897]     }
[09:33:03.897]     if (FALSE) {
[09:33:03.897]     }
[09:33:03.897]     else {
[09:33:03.897]         if (TRUE) {
[09:33:03.897]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:03.897]                 open = "w")
[09:33:03.897]         }
[09:33:03.897]         else {
[09:33:03.897]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:03.897]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:03.897]         }
[09:33:03.897]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:03.897]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:03.897]             base::sink(type = "output", split = FALSE)
[09:33:03.897]             base::close(...future.stdout)
[09:33:03.897]         }, add = TRUE)
[09:33:03.897]     }
[09:33:03.897]     ...future.frame <- base::sys.nframe()
[09:33:03.897]     ...future.conditions <- base::list()
[09:33:03.897]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:03.897]     if (FALSE) {
[09:33:03.897]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:03.897]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:03.897]     }
[09:33:03.897]     ...future.result <- base::tryCatch({
[09:33:03.897]         base::withCallingHandlers({
[09:33:03.897]             ...future.value <- base::withVisible(base::local({
[09:33:03.897]                 print(1:50)
[09:33:03.897]                 str(1:50)
[09:33:03.897]                 cat(letters, sep = "-")
[09:33:03.897]                 cat(1:6, collapse = "\n")
[09:33:03.897]                 write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:03.897]                 42L
[09:33:03.897]             }))
[09:33:03.897]             future::FutureResult(value = ...future.value$value, 
[09:33:03.897]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.897]                   ...future.rng), globalenv = if (FALSE) 
[09:33:03.897]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:03.897]                     ...future.globalenv.names))
[09:33:03.897]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:03.897]         }, condition = base::local({
[09:33:03.897]             c <- base::c
[09:33:03.897]             inherits <- base::inherits
[09:33:03.897]             invokeRestart <- base::invokeRestart
[09:33:03.897]             length <- base::length
[09:33:03.897]             list <- base::list
[09:33:03.897]             seq.int <- base::seq.int
[09:33:03.897]             signalCondition <- base::signalCondition
[09:33:03.897]             sys.calls <- base::sys.calls
[09:33:03.897]             `[[` <- base::`[[`
[09:33:03.897]             `+` <- base::`+`
[09:33:03.897]             `<<-` <- base::`<<-`
[09:33:03.897]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:03.897]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:03.897]                   3L)]
[09:33:03.897]             }
[09:33:03.897]             function(cond) {
[09:33:03.897]                 is_error <- inherits(cond, "error")
[09:33:03.897]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:03.897]                   NULL)
[09:33:03.897]                 if (is_error) {
[09:33:03.897]                   sessionInformation <- function() {
[09:33:03.897]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:03.897]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:03.897]                       search = base::search(), system = base::Sys.info())
[09:33:03.897]                   }
[09:33:03.897]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.897]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:03.897]                     cond$call), session = sessionInformation(), 
[09:33:03.897]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:03.897]                   signalCondition(cond)
[09:33:03.897]                 }
[09:33:03.897]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:03.897]                 "immediateCondition"))) {
[09:33:03.897]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:03.897]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.897]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:03.897]                   if (TRUE && !signal) {
[09:33:03.897]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.897]                     {
[09:33:03.897]                       inherits <- base::inherits
[09:33:03.897]                       invokeRestart <- base::invokeRestart
[09:33:03.897]                       is.null <- base::is.null
[09:33:03.897]                       muffled <- FALSE
[09:33:03.897]                       if (inherits(cond, "message")) {
[09:33:03.897]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.897]                         if (muffled) 
[09:33:03.897]                           invokeRestart("muffleMessage")
[09:33:03.897]                       }
[09:33:03.897]                       else if (inherits(cond, "warning")) {
[09:33:03.897]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.897]                         if (muffled) 
[09:33:03.897]                           invokeRestart("muffleWarning")
[09:33:03.897]                       }
[09:33:03.897]                       else if (inherits(cond, "condition")) {
[09:33:03.897]                         if (!is.null(pattern)) {
[09:33:03.897]                           computeRestarts <- base::computeRestarts
[09:33:03.897]                           grepl <- base::grepl
[09:33:03.897]                           restarts <- computeRestarts(cond)
[09:33:03.897]                           for (restart in restarts) {
[09:33:03.897]                             name <- restart$name
[09:33:03.897]                             if (is.null(name)) 
[09:33:03.897]                               next
[09:33:03.897]                             if (!grepl(pattern, name)) 
[09:33:03.897]                               next
[09:33:03.897]                             invokeRestart(restart)
[09:33:03.897]                             muffled <- TRUE
[09:33:03.897]                             break
[09:33:03.897]                           }
[09:33:03.897]                         }
[09:33:03.897]                       }
[09:33:03.897]                       invisible(muffled)
[09:33:03.897]                     }
[09:33:03.897]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.897]                   }
[09:33:03.897]                 }
[09:33:03.897]                 else {
[09:33:03.897]                   if (TRUE) {
[09:33:03.897]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.897]                     {
[09:33:03.897]                       inherits <- base::inherits
[09:33:03.897]                       invokeRestart <- base::invokeRestart
[09:33:03.897]                       is.null <- base::is.null
[09:33:03.897]                       muffled <- FALSE
[09:33:03.897]                       if (inherits(cond, "message")) {
[09:33:03.897]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.897]                         if (muffled) 
[09:33:03.897]                           invokeRestart("muffleMessage")
[09:33:03.897]                       }
[09:33:03.897]                       else if (inherits(cond, "warning")) {
[09:33:03.897]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.897]                         if (muffled) 
[09:33:03.897]                           invokeRestart("muffleWarning")
[09:33:03.897]                       }
[09:33:03.897]                       else if (inherits(cond, "condition")) {
[09:33:03.897]                         if (!is.null(pattern)) {
[09:33:03.897]                           computeRestarts <- base::computeRestarts
[09:33:03.897]                           grepl <- base::grepl
[09:33:03.897]                           restarts <- computeRestarts(cond)
[09:33:03.897]                           for (restart in restarts) {
[09:33:03.897]                             name <- restart$name
[09:33:03.897]                             if (is.null(name)) 
[09:33:03.897]                               next
[09:33:03.897]                             if (!grepl(pattern, name)) 
[09:33:03.897]                               next
[09:33:03.897]                             invokeRestart(restart)
[09:33:03.897]                             muffled <- TRUE
[09:33:03.897]                             break
[09:33:03.897]                           }
[09:33:03.897]                         }
[09:33:03.897]                       }
[09:33:03.897]                       invisible(muffled)
[09:33:03.897]                     }
[09:33:03.897]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.897]                   }
[09:33:03.897]                 }
[09:33:03.897]             }
[09:33:03.897]         }))
[09:33:03.897]     }, error = function(ex) {
[09:33:03.897]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:03.897]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.897]                 ...future.rng), started = ...future.startTime, 
[09:33:03.897]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:03.897]             version = "1.8"), class = "FutureResult")
[09:33:03.897]     }, finally = {
[09:33:03.897]         if (!identical(...future.workdir, getwd())) 
[09:33:03.897]             setwd(...future.workdir)
[09:33:03.897]         {
[09:33:03.897]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:03.897]                 ...future.oldOptions$nwarnings <- NULL
[09:33:03.897]             }
[09:33:03.897]             base::options(...future.oldOptions)
[09:33:03.897]             if (.Platform$OS.type == "windows") {
[09:33:03.897]                 old_names <- names(...future.oldEnvVars)
[09:33:03.897]                 envs <- base::Sys.getenv()
[09:33:03.897]                 names <- names(envs)
[09:33:03.897]                 common <- intersect(names, old_names)
[09:33:03.897]                 added <- setdiff(names, old_names)
[09:33:03.897]                 removed <- setdiff(old_names, names)
[09:33:03.897]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:03.897]                   envs[common]]
[09:33:03.897]                 NAMES <- toupper(changed)
[09:33:03.897]                 args <- list()
[09:33:03.897]                 for (kk in seq_along(NAMES)) {
[09:33:03.897]                   name <- changed[[kk]]
[09:33:03.897]                   NAME <- NAMES[[kk]]
[09:33:03.897]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.897]                     next
[09:33:03.897]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.897]                 }
[09:33:03.897]                 NAMES <- toupper(added)
[09:33:03.897]                 for (kk in seq_along(NAMES)) {
[09:33:03.897]                   name <- added[[kk]]
[09:33:03.897]                   NAME <- NAMES[[kk]]
[09:33:03.897]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.897]                     next
[09:33:03.897]                   args[[name]] <- ""
[09:33:03.897]                 }
[09:33:03.897]                 NAMES <- toupper(removed)
[09:33:03.897]                 for (kk in seq_along(NAMES)) {
[09:33:03.897]                   name <- removed[[kk]]
[09:33:03.897]                   NAME <- NAMES[[kk]]
[09:33:03.897]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.897]                     next
[09:33:03.897]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.897]                 }
[09:33:03.897]                 if (length(args) > 0) 
[09:33:03.897]                   base::do.call(base::Sys.setenv, args = args)
[09:33:03.897]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:03.897]             }
[09:33:03.897]             else {
[09:33:03.897]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:03.897]             }
[09:33:03.897]             {
[09:33:03.897]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:03.897]                   0L) {
[09:33:03.897]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:03.897]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:03.897]                   base::options(opts)
[09:33:03.897]                 }
[09:33:03.897]                 {
[09:33:03.897]                   {
[09:33:03.897]                     NULL
[09:33:03.897]                     RNGkind("Mersenne-Twister")
[09:33:03.897]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:33:03.897]                       inherits = FALSE)
[09:33:03.897]                   }
[09:33:03.897]                   options(future.plan = NULL)
[09:33:03.897]                   if (is.na(NA_character_)) 
[09:33:03.897]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.897]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:03.897]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:03.897]                     .init = FALSE)
[09:33:03.897]                 }
[09:33:03.897]             }
[09:33:03.897]         }
[09:33:03.897]     })
[09:33:03.897]     if (TRUE) {
[09:33:03.897]         base::sink(type = "output", split = FALSE)
[09:33:03.897]         if (TRUE) {
[09:33:03.897]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:03.897]         }
[09:33:03.897]         else {
[09:33:03.897]             ...future.result["stdout"] <- base::list(NULL)
[09:33:03.897]         }
[09:33:03.897]         base::close(...future.stdout)
[09:33:03.897]         ...future.stdout <- NULL
[09:33:03.897]     }
[09:33:03.897]     ...future.result$conditions <- ...future.conditions
[09:33:03.897]     ...future.result$finished <- base::Sys.time()
[09:33:03.897]     ...future.result
[09:33:03.897] }
[09:33:03.899] plan(): Setting new future strategy stack:
[09:33:03.899] List of future strategies:
[09:33:03.899] 1. sequential:
[09:33:03.899]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.899]    - tweaked: FALSE
[09:33:03.899]    - call: NULL
[09:33:03.900] plan(): nbrOfWorkers() = 1
[09:33:03.901] plan(): Setting new future strategy stack:
[09:33:03.902] List of future strategies:
[09:33:03.902] 1. sequential:
[09:33:03.902]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.902]    - tweaked: FALSE
[09:33:03.902]    - call: plan(strategy)
[09:33:03.902] plan(): nbrOfWorkers() = 1
[09:33:03.902] SequentialFuture started (and completed)
[09:33:03.903] - Launch lazy future ... done
[09:33:03.903] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 09:33:03"
 $ finished    : POSIXct[1:1], format: "2024-12-19 09:33:03"
 $ session_uuid: chr "88298579-8cba-59c7-c5c1-51599ab08e19"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "8f1daa72e372"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "8f1daa72e372" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 50427
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 09:33:03"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.003125191 secs (started 2024-12-19 09:33:03.899472)
version: 1.8
[09:33:03.912] getGlobalsAndPackages() ...
[09:33:03.912] Searching for globals...
[09:33:03.915] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:03.915] Searching for globals ... DONE
[09:33:03.915] Resolving globals: FALSE
[09:33:03.915] 
[09:33:03.915] - packages: [1] ‘utils’
[09:33:03.915] getGlobalsAndPackages() ... DONE
[09:33:03.916] run() for ‘Future’ ...
[09:33:03.916] - state: ‘created’
[09:33:03.916] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:33:03.916] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:33:03.916] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:33:03.916]   - Field: ‘label’
[09:33:03.916]   - Field: ‘local’
[09:33:03.917]   - Field: ‘owner’
[09:33:03.917]   - Field: ‘envir’
[09:33:03.917]   - Field: ‘packages’
[09:33:03.917]   - Field: ‘gc’
[09:33:03.917]   - Field: ‘conditions’
[09:33:03.917]   - Field: ‘expr’
[09:33:03.917]   - Field: ‘uuid’
[09:33:03.917]   - Field: ‘seed’
[09:33:03.917]   - Field: ‘version’
[09:33:03.917]   - Field: ‘result’
[09:33:03.917]   - Field: ‘asynchronous’
[09:33:03.917]   - Field: ‘calls’
[09:33:03.918]   - Field: ‘globals’
[09:33:03.918]   - Field: ‘stdout’
[09:33:03.918]   - Field: ‘earlySignal’
[09:33:03.918]   - Field: ‘lazy’
[09:33:03.918]   - Field: ‘state’
[09:33:03.918] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:33:03.918] - Launch lazy future ...
[09:33:03.918] Packages needed by the future expression (n = 1): ‘utils’
[09:33:03.920] Packages needed by future strategies (n = 0): <none>
[09:33:03.920] {
[09:33:03.920]     {
[09:33:03.920]         {
[09:33:03.920]             ...future.startTime <- base::Sys.time()
[09:33:03.920]             {
[09:33:03.920]                 {
[09:33:03.920]                   {
[09:33:03.920]                     {
[09:33:03.920]                       base::local({
[09:33:03.920]                         has_future <- base::requireNamespace("future", 
[09:33:03.920]                           quietly = TRUE)
[09:33:03.920]                         if (has_future) {
[09:33:03.920]                           ns <- base::getNamespace("future")
[09:33:03.920]                           version <- ns[[".package"]][["version"]]
[09:33:03.920]                           if (is.null(version)) 
[09:33:03.920]                             version <- utils::packageVersion("future")
[09:33:03.920]                         }
[09:33:03.920]                         else {
[09:33:03.920]                           version <- NULL
[09:33:03.920]                         }
[09:33:03.920]                         if (!has_future || version < "1.8.0") {
[09:33:03.920]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:03.920]                             "", base::R.version$version.string), 
[09:33:03.920]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:03.920]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:03.920]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:03.920]                               "release", "version")], collapse = " "), 
[09:33:03.920]                             hostname = base::Sys.info()[["nodename"]])
[09:33:03.920]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:03.920]                             info)
[09:33:03.920]                           info <- base::paste(info, collapse = "; ")
[09:33:03.920]                           if (!has_future) {
[09:33:03.920]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:03.920]                               info)
[09:33:03.920]                           }
[09:33:03.920]                           else {
[09:33:03.920]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:03.920]                               info, version)
[09:33:03.920]                           }
[09:33:03.920]                           base::stop(msg)
[09:33:03.920]                         }
[09:33:03.920]                       })
[09:33:03.920]                     }
[09:33:03.920]                     base::local({
[09:33:03.920]                       for (pkg in "utils") {
[09:33:03.920]                         base::loadNamespace(pkg)
[09:33:03.920]                         base::library(pkg, character.only = TRUE)
[09:33:03.920]                       }
[09:33:03.920]                     })
[09:33:03.920]                   }
[09:33:03.920]                   ...future.strategy.old <- future::plan("list")
[09:33:03.920]                   options(future.plan = NULL)
[09:33:03.920]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.920]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:03.920]                 }
[09:33:03.920]                 ...future.workdir <- getwd()
[09:33:03.920]             }
[09:33:03.920]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:03.920]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:03.920]         }
[09:33:03.920]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:03.920]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:03.920]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:03.920]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:03.920]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:03.920]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:03.920]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:03.920]             base::names(...future.oldOptions))
[09:33:03.920]     }
[09:33:03.920]     if (FALSE) {
[09:33:03.920]     }
[09:33:03.920]     else {
[09:33:03.920]         if (TRUE) {
[09:33:03.920]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:03.920]                 open = "w")
[09:33:03.920]         }
[09:33:03.920]         else {
[09:33:03.920]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:03.920]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:03.920]         }
[09:33:03.920]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:03.920]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:03.920]             base::sink(type = "output", split = FALSE)
[09:33:03.920]             base::close(...future.stdout)
[09:33:03.920]         }, add = TRUE)
[09:33:03.920]     }
[09:33:03.920]     ...future.frame <- base::sys.nframe()
[09:33:03.920]     ...future.conditions <- base::list()
[09:33:03.920]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:03.920]     if (FALSE) {
[09:33:03.920]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:03.920]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:03.920]     }
[09:33:03.920]     ...future.result <- base::tryCatch({
[09:33:03.920]         base::withCallingHandlers({
[09:33:03.920]             ...future.value <- base::withVisible(base::local({
[09:33:03.920]                 print(1:50)
[09:33:03.920]                 str(1:50)
[09:33:03.920]                 cat(letters, sep = "-")
[09:33:03.920]                 cat(1:6, collapse = "\n")
[09:33:03.920]                 write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:03.920]                 42L
[09:33:03.920]             }))
[09:33:03.920]             future::FutureResult(value = ...future.value$value, 
[09:33:03.920]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.920]                   ...future.rng), globalenv = if (FALSE) 
[09:33:03.920]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:03.920]                     ...future.globalenv.names))
[09:33:03.920]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:03.920]         }, condition = base::local({
[09:33:03.920]             c <- base::c
[09:33:03.920]             inherits <- base::inherits
[09:33:03.920]             invokeRestart <- base::invokeRestart
[09:33:03.920]             length <- base::length
[09:33:03.920]             list <- base::list
[09:33:03.920]             seq.int <- base::seq.int
[09:33:03.920]             signalCondition <- base::signalCondition
[09:33:03.920]             sys.calls <- base::sys.calls
[09:33:03.920]             `[[` <- base::`[[`
[09:33:03.920]             `+` <- base::`+`
[09:33:03.920]             `<<-` <- base::`<<-`
[09:33:03.920]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:03.920]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:03.920]                   3L)]
[09:33:03.920]             }
[09:33:03.920]             function(cond) {
[09:33:03.920]                 is_error <- inherits(cond, "error")
[09:33:03.920]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:03.920]                   NULL)
[09:33:03.920]                 if (is_error) {
[09:33:03.920]                   sessionInformation <- function() {
[09:33:03.920]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:03.920]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:03.920]                       search = base::search(), system = base::Sys.info())
[09:33:03.920]                   }
[09:33:03.920]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.920]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:03.920]                     cond$call), session = sessionInformation(), 
[09:33:03.920]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:03.920]                   signalCondition(cond)
[09:33:03.920]                 }
[09:33:03.920]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:03.920]                 "immediateCondition"))) {
[09:33:03.920]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:03.920]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.920]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:03.920]                   if (TRUE && !signal) {
[09:33:03.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.920]                     {
[09:33:03.920]                       inherits <- base::inherits
[09:33:03.920]                       invokeRestart <- base::invokeRestart
[09:33:03.920]                       is.null <- base::is.null
[09:33:03.920]                       muffled <- FALSE
[09:33:03.920]                       if (inherits(cond, "message")) {
[09:33:03.920]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.920]                         if (muffled) 
[09:33:03.920]                           invokeRestart("muffleMessage")
[09:33:03.920]                       }
[09:33:03.920]                       else if (inherits(cond, "warning")) {
[09:33:03.920]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.920]                         if (muffled) 
[09:33:03.920]                           invokeRestart("muffleWarning")
[09:33:03.920]                       }
[09:33:03.920]                       else if (inherits(cond, "condition")) {
[09:33:03.920]                         if (!is.null(pattern)) {
[09:33:03.920]                           computeRestarts <- base::computeRestarts
[09:33:03.920]                           grepl <- base::grepl
[09:33:03.920]                           restarts <- computeRestarts(cond)
[09:33:03.920]                           for (restart in restarts) {
[09:33:03.920]                             name <- restart$name
[09:33:03.920]                             if (is.null(name)) 
[09:33:03.920]                               next
[09:33:03.920]                             if (!grepl(pattern, name)) 
[09:33:03.920]                               next
[09:33:03.920]                             invokeRestart(restart)
[09:33:03.920]                             muffled <- TRUE
[09:33:03.920]                             break
[09:33:03.920]                           }
[09:33:03.920]                         }
[09:33:03.920]                       }
[09:33:03.920]                       invisible(muffled)
[09:33:03.920]                     }
[09:33:03.920]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.920]                   }
[09:33:03.920]                 }
[09:33:03.920]                 else {
[09:33:03.920]                   if (TRUE) {
[09:33:03.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.920]                     {
[09:33:03.920]                       inherits <- base::inherits
[09:33:03.920]                       invokeRestart <- base::invokeRestart
[09:33:03.920]                       is.null <- base::is.null
[09:33:03.920]                       muffled <- FALSE
[09:33:03.920]                       if (inherits(cond, "message")) {
[09:33:03.920]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.920]                         if (muffled) 
[09:33:03.920]                           invokeRestart("muffleMessage")
[09:33:03.920]                       }
[09:33:03.920]                       else if (inherits(cond, "warning")) {
[09:33:03.920]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.920]                         if (muffled) 
[09:33:03.920]                           invokeRestart("muffleWarning")
[09:33:03.920]                       }
[09:33:03.920]                       else if (inherits(cond, "condition")) {
[09:33:03.920]                         if (!is.null(pattern)) {
[09:33:03.920]                           computeRestarts <- base::computeRestarts
[09:33:03.920]                           grepl <- base::grepl
[09:33:03.920]                           restarts <- computeRestarts(cond)
[09:33:03.920]                           for (restart in restarts) {
[09:33:03.920]                             name <- restart$name
[09:33:03.920]                             if (is.null(name)) 
[09:33:03.920]                               next
[09:33:03.920]                             if (!grepl(pattern, name)) 
[09:33:03.920]                               next
[09:33:03.920]                             invokeRestart(restart)
[09:33:03.920]                             muffled <- TRUE
[09:33:03.920]                             break
[09:33:03.920]                           }
[09:33:03.920]                         }
[09:33:03.920]                       }
[09:33:03.920]                       invisible(muffled)
[09:33:03.920]                     }
[09:33:03.920]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.920]                   }
[09:33:03.920]                 }
[09:33:03.920]             }
[09:33:03.920]         }))
[09:33:03.920]     }, error = function(ex) {
[09:33:03.920]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:03.920]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.920]                 ...future.rng), started = ...future.startTime, 
[09:33:03.920]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:03.920]             version = "1.8"), class = "FutureResult")
[09:33:03.920]     }, finally = {
[09:33:03.920]         if (!identical(...future.workdir, getwd())) 
[09:33:03.920]             setwd(...future.workdir)
[09:33:03.920]         {
[09:33:03.920]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:03.920]                 ...future.oldOptions$nwarnings <- NULL
[09:33:03.920]             }
[09:33:03.920]             base::options(...future.oldOptions)
[09:33:03.920]             if (.Platform$OS.type == "windows") {
[09:33:03.920]                 old_names <- names(...future.oldEnvVars)
[09:33:03.920]                 envs <- base::Sys.getenv()
[09:33:03.920]                 names <- names(envs)
[09:33:03.920]                 common <- intersect(names, old_names)
[09:33:03.920]                 added <- setdiff(names, old_names)
[09:33:03.920]                 removed <- setdiff(old_names, names)
[09:33:03.920]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:03.920]                   envs[common]]
[09:33:03.920]                 NAMES <- toupper(changed)
[09:33:03.920]                 args <- list()
[09:33:03.920]                 for (kk in seq_along(NAMES)) {
[09:33:03.920]                   name <- changed[[kk]]
[09:33:03.920]                   NAME <- NAMES[[kk]]
[09:33:03.920]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.920]                     next
[09:33:03.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.920]                 }
[09:33:03.920]                 NAMES <- toupper(added)
[09:33:03.920]                 for (kk in seq_along(NAMES)) {
[09:33:03.920]                   name <- added[[kk]]
[09:33:03.920]                   NAME <- NAMES[[kk]]
[09:33:03.920]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.920]                     next
[09:33:03.920]                   args[[name]] <- ""
[09:33:03.920]                 }
[09:33:03.920]                 NAMES <- toupper(removed)
[09:33:03.920]                 for (kk in seq_along(NAMES)) {
[09:33:03.920]                   name <- removed[[kk]]
[09:33:03.920]                   NAME <- NAMES[[kk]]
[09:33:03.920]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.920]                     next
[09:33:03.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.920]                 }
[09:33:03.920]                 if (length(args) > 0) 
[09:33:03.920]                   base::do.call(base::Sys.setenv, args = args)
[09:33:03.920]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:03.920]             }
[09:33:03.920]             else {
[09:33:03.920]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:03.920]             }
[09:33:03.920]             {
[09:33:03.920]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:03.920]                   0L) {
[09:33:03.920]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:03.920]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:03.920]                   base::options(opts)
[09:33:03.920]                 }
[09:33:03.920]                 {
[09:33:03.920]                   {
[09:33:03.920]                     NULL
[09:33:03.920]                     RNGkind("Mersenne-Twister")
[09:33:03.920]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:33:03.920]                       inherits = FALSE)
[09:33:03.920]                   }
[09:33:03.920]                   options(future.plan = NULL)
[09:33:03.920]                   if (is.na(NA_character_)) 
[09:33:03.920]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.920]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:03.920]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:03.920]                     .init = FALSE)
[09:33:03.920]                 }
[09:33:03.920]             }
[09:33:03.920]         }
[09:33:03.920]     })
[09:33:03.920]     if (TRUE) {
[09:33:03.920]         base::sink(type = "output", split = FALSE)
[09:33:03.920]         if (TRUE) {
[09:33:03.920]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:03.920]         }
[09:33:03.920]         else {
[09:33:03.920]             ...future.result["stdout"] <- base::list(NULL)
[09:33:03.920]         }
[09:33:03.920]         base::close(...future.stdout)
[09:33:03.920]         ...future.stdout <- NULL
[09:33:03.920]     }
[09:33:03.920]     ...future.result$conditions <- ...future.conditions
[09:33:03.920]     ...future.result$finished <- base::Sys.time()
[09:33:03.920]     ...future.result
[09:33:03.920] }
[09:33:03.922] plan(): Setting new future strategy stack:
[09:33:03.922] List of future strategies:
[09:33:03.922] 1. sequential:
[09:33:03.922]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.922]    - tweaked: FALSE
[09:33:03.922]    - call: NULL
[09:33:03.922] plan(): nbrOfWorkers() = 1
[09:33:03.924] plan(): Setting new future strategy stack:
[09:33:03.924] List of future strategies:
[09:33:03.924] 1. sequential:
[09:33:03.924]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.924]    - tweaked: FALSE
[09:33:03.924]    - call: plan(strategy)
[09:33:03.924] plan(): nbrOfWorkers() = 1
[09:33:03.924] SequentialFuture started (and completed)
[09:33:03.925] - Launch lazy future ... done
[09:33:03.925] run() for ‘SequentialFuture’ ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[09:33:03.925] getGlobalsAndPackages() ...
[09:33:03.925] Searching for globals...
[09:33:03.926] - globals found: [1] ‘print’
[09:33:03.926] Searching for globals ... DONE
[09:33:03.926] Resolving globals: FALSE
[09:33:03.926] 
[09:33:03.926] 
[09:33:03.926] getGlobalsAndPackages() ... DONE
[09:33:03.926] run() for ‘Future’ ...
[09:33:03.927] - state: ‘created’
[09:33:03.927] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:33:03.927] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:33:03.927] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:33:03.927]   - Field: ‘label’
[09:33:03.927]   - Field: ‘local’
[09:33:03.927]   - Field: ‘owner’
[09:33:03.927]   - Field: ‘envir’
[09:33:03.927]   - Field: ‘packages’
[09:33:03.927]   - Field: ‘gc’
[09:33:03.928]   - Field: ‘conditions’
[09:33:03.928]   - Field: ‘expr’
[09:33:03.928]   - Field: ‘uuid’
[09:33:03.928]   - Field: ‘seed’
[09:33:03.928]   - Field: ‘version’
[09:33:03.928]   - Field: ‘result’
[09:33:03.928]   - Field: ‘asynchronous’
[09:33:03.928]   - Field: ‘calls’
[09:33:03.928]   - Field: ‘globals’
[09:33:03.928]   - Field: ‘stdout’
[09:33:03.928]   - Field: ‘earlySignal’
[09:33:03.929]   - Field: ‘lazy’
[09:33:03.929]   - Field: ‘state’
[09:33:03.929] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:33:03.929] - Launch lazy future ...
[09:33:03.929] Packages needed by the future expression (n = 0): <none>
[09:33:03.929] Packages needed by future strategies (n = 0): <none>
[09:33:03.929] {
[09:33:03.929]     {
[09:33:03.929]         {
[09:33:03.929]             ...future.startTime <- base::Sys.time()
[09:33:03.929]             {
[09:33:03.929]                 {
[09:33:03.929]                   {
[09:33:03.929]                     base::local({
[09:33:03.929]                       has_future <- base::requireNamespace("future", 
[09:33:03.929]                         quietly = TRUE)
[09:33:03.929]                       if (has_future) {
[09:33:03.929]                         ns <- base::getNamespace("future")
[09:33:03.929]                         version <- ns[[".package"]][["version"]]
[09:33:03.929]                         if (is.null(version)) 
[09:33:03.929]                           version <- utils::packageVersion("future")
[09:33:03.929]                       }
[09:33:03.929]                       else {
[09:33:03.929]                         version <- NULL
[09:33:03.929]                       }
[09:33:03.929]                       if (!has_future || version < "1.8.0") {
[09:33:03.929]                         info <- base::c(r_version = base::gsub("R version ", 
[09:33:03.929]                           "", base::R.version$version.string), 
[09:33:03.929]                           platform = base::sprintf("%s (%s-bit)", 
[09:33:03.929]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:03.929]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:03.929]                             "release", "version")], collapse = " "), 
[09:33:03.929]                           hostname = base::Sys.info()[["nodename"]])
[09:33:03.929]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:33:03.929]                           info)
[09:33:03.929]                         info <- base::paste(info, collapse = "; ")
[09:33:03.929]                         if (!has_future) {
[09:33:03.929]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:03.929]                             info)
[09:33:03.929]                         }
[09:33:03.929]                         else {
[09:33:03.929]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:03.929]                             info, version)
[09:33:03.929]                         }
[09:33:03.929]                         base::stop(msg)
[09:33:03.929]                       }
[09:33:03.929]                     })
[09:33:03.929]                   }
[09:33:03.929]                   ...future.strategy.old <- future::plan("list")
[09:33:03.929]                   options(future.plan = NULL)
[09:33:03.929]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.929]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:03.929]                 }
[09:33:03.929]                 ...future.workdir <- getwd()
[09:33:03.929]             }
[09:33:03.929]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:03.929]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:03.929]         }
[09:33:03.929]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:03.929]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:03.929]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:03.929]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:03.929]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:03.929]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:03.929]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:03.929]             base::names(...future.oldOptions))
[09:33:03.929]     }
[09:33:03.929]     if (FALSE) {
[09:33:03.929]     }
[09:33:03.929]     else {
[09:33:03.929]         if (TRUE) {
[09:33:03.929]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:03.929]                 open = "w")
[09:33:03.929]         }
[09:33:03.929]         else {
[09:33:03.929]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:03.929]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:03.929]         }
[09:33:03.929]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:03.929]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:03.929]             base::sink(type = "output", split = FALSE)
[09:33:03.929]             base::close(...future.stdout)
[09:33:03.929]         }, add = TRUE)
[09:33:03.929]     }
[09:33:03.929]     ...future.frame <- base::sys.nframe()
[09:33:03.929]     ...future.conditions <- base::list()
[09:33:03.929]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:03.929]     if (FALSE) {
[09:33:03.929]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:03.929]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:03.929]     }
[09:33:03.929]     ...future.result <- base::tryCatch({
[09:33:03.929]         base::withCallingHandlers({
[09:33:03.929]             ...future.value <- base::withVisible(base::local(print(42)))
[09:33:03.929]             future::FutureResult(value = ...future.value$value, 
[09:33:03.929]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.929]                   ...future.rng), globalenv = if (FALSE) 
[09:33:03.929]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:03.929]                     ...future.globalenv.names))
[09:33:03.929]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:03.929]         }, condition = base::local({
[09:33:03.929]             c <- base::c
[09:33:03.929]             inherits <- base::inherits
[09:33:03.929]             invokeRestart <- base::invokeRestart
[09:33:03.929]             length <- base::length
[09:33:03.929]             list <- base::list
[09:33:03.929]             seq.int <- base::seq.int
[09:33:03.929]             signalCondition <- base::signalCondition
[09:33:03.929]             sys.calls <- base::sys.calls
[09:33:03.929]             `[[` <- base::`[[`
[09:33:03.929]             `+` <- base::`+`
[09:33:03.929]             `<<-` <- base::`<<-`
[09:33:03.929]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:03.929]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:03.929]                   3L)]
[09:33:03.929]             }
[09:33:03.929]             function(cond) {
[09:33:03.929]                 is_error <- inherits(cond, "error")
[09:33:03.929]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:03.929]                   NULL)
[09:33:03.929]                 if (is_error) {
[09:33:03.929]                   sessionInformation <- function() {
[09:33:03.929]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:03.929]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:03.929]                       search = base::search(), system = base::Sys.info())
[09:33:03.929]                   }
[09:33:03.929]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.929]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:03.929]                     cond$call), session = sessionInformation(), 
[09:33:03.929]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:03.929]                   signalCondition(cond)
[09:33:03.929]                 }
[09:33:03.929]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:03.929]                 "immediateCondition"))) {
[09:33:03.929]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:03.929]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.929]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:03.929]                   if (TRUE && !signal) {
[09:33:03.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.929]                     {
[09:33:03.929]                       inherits <- base::inherits
[09:33:03.929]                       invokeRestart <- base::invokeRestart
[09:33:03.929]                       is.null <- base::is.null
[09:33:03.929]                       muffled <- FALSE
[09:33:03.929]                       if (inherits(cond, "message")) {
[09:33:03.929]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.929]                         if (muffled) 
[09:33:03.929]                           invokeRestart("muffleMessage")
[09:33:03.929]                       }
[09:33:03.929]                       else if (inherits(cond, "warning")) {
[09:33:03.929]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.929]                         if (muffled) 
[09:33:03.929]                           invokeRestart("muffleWarning")
[09:33:03.929]                       }
[09:33:03.929]                       else if (inherits(cond, "condition")) {
[09:33:03.929]                         if (!is.null(pattern)) {
[09:33:03.929]                           computeRestarts <- base::computeRestarts
[09:33:03.929]                           grepl <- base::grepl
[09:33:03.929]                           restarts <- computeRestarts(cond)
[09:33:03.929]                           for (restart in restarts) {
[09:33:03.929]                             name <- restart$name
[09:33:03.929]                             if (is.null(name)) 
[09:33:03.929]                               next
[09:33:03.929]                             if (!grepl(pattern, name)) 
[09:33:03.929]                               next
[09:33:03.929]                             invokeRestart(restart)
[09:33:03.929]                             muffled <- TRUE
[09:33:03.929]                             break
[09:33:03.929]                           }
[09:33:03.929]                         }
[09:33:03.929]                       }
[09:33:03.929]                       invisible(muffled)
[09:33:03.929]                     }
[09:33:03.929]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.929]                   }
[09:33:03.929]                 }
[09:33:03.929]                 else {
[09:33:03.929]                   if (TRUE) {
[09:33:03.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.929]                     {
[09:33:03.929]                       inherits <- base::inherits
[09:33:03.929]                       invokeRestart <- base::invokeRestart
[09:33:03.929]                       is.null <- base::is.null
[09:33:03.929]                       muffled <- FALSE
[09:33:03.929]                       if (inherits(cond, "message")) {
[09:33:03.929]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.929]                         if (muffled) 
[09:33:03.929]                           invokeRestart("muffleMessage")
[09:33:03.929]                       }
[09:33:03.929]                       else if (inherits(cond, "warning")) {
[09:33:03.929]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.929]                         if (muffled) 
[09:33:03.929]                           invokeRestart("muffleWarning")
[09:33:03.929]                       }
[09:33:03.929]                       else if (inherits(cond, "condition")) {
[09:33:03.929]                         if (!is.null(pattern)) {
[09:33:03.929]                           computeRestarts <- base::computeRestarts
[09:33:03.929]                           grepl <- base::grepl
[09:33:03.929]                           restarts <- computeRestarts(cond)
[09:33:03.929]                           for (restart in restarts) {
[09:33:03.929]                             name <- restart$name
[09:33:03.929]                             if (is.null(name)) 
[09:33:03.929]                               next
[09:33:03.929]                             if (!grepl(pattern, name)) 
[09:33:03.929]                               next
[09:33:03.929]                             invokeRestart(restart)
[09:33:03.929]                             muffled <- TRUE
[09:33:03.929]                             break
[09:33:03.929]                           }
[09:33:03.929]                         }
[09:33:03.929]                       }
[09:33:03.929]                       invisible(muffled)
[09:33:03.929]                     }
[09:33:03.929]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.929]                   }
[09:33:03.929]                 }
[09:33:03.929]             }
[09:33:03.929]         }))
[09:33:03.929]     }, error = function(ex) {
[09:33:03.929]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:03.929]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.929]                 ...future.rng), started = ...future.startTime, 
[09:33:03.929]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:03.929]             version = "1.8"), class = "FutureResult")
[09:33:03.929]     }, finally = {
[09:33:03.929]         if (!identical(...future.workdir, getwd())) 
[09:33:03.929]             setwd(...future.workdir)
[09:33:03.929]         {
[09:33:03.929]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:03.929]                 ...future.oldOptions$nwarnings <- NULL
[09:33:03.929]             }
[09:33:03.929]             base::options(...future.oldOptions)
[09:33:03.929]             if (.Platform$OS.type == "windows") {
[09:33:03.929]                 old_names <- names(...future.oldEnvVars)
[09:33:03.929]                 envs <- base::Sys.getenv()
[09:33:03.929]                 names <- names(envs)
[09:33:03.929]                 common <- intersect(names, old_names)
[09:33:03.929]                 added <- setdiff(names, old_names)
[09:33:03.929]                 removed <- setdiff(old_names, names)
[09:33:03.929]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:03.929]                   envs[common]]
[09:33:03.929]                 NAMES <- toupper(changed)
[09:33:03.929]                 args <- list()
[09:33:03.929]                 for (kk in seq_along(NAMES)) {
[09:33:03.929]                   name <- changed[[kk]]
[09:33:03.929]                   NAME <- NAMES[[kk]]
[09:33:03.929]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.929]                     next
[09:33:03.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.929]                 }
[09:33:03.929]                 NAMES <- toupper(added)
[09:33:03.929]                 for (kk in seq_along(NAMES)) {
[09:33:03.929]                   name <- added[[kk]]
[09:33:03.929]                   NAME <- NAMES[[kk]]
[09:33:03.929]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.929]                     next
[09:33:03.929]                   args[[name]] <- ""
[09:33:03.929]                 }
[09:33:03.929]                 NAMES <- toupper(removed)
[09:33:03.929]                 for (kk in seq_along(NAMES)) {
[09:33:03.929]                   name <- removed[[kk]]
[09:33:03.929]                   NAME <- NAMES[[kk]]
[09:33:03.929]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.929]                     next
[09:33:03.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.929]                 }
[09:33:03.929]                 if (length(args) > 0) 
[09:33:03.929]                   base::do.call(base::Sys.setenv, args = args)
[09:33:03.929]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:03.929]             }
[09:33:03.929]             else {
[09:33:03.929]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:03.929]             }
[09:33:03.929]             {
[09:33:03.929]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:03.929]                   0L) {
[09:33:03.929]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:03.929]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:03.929]                   base::options(opts)
[09:33:03.929]                 }
[09:33:03.929]                 {
[09:33:03.929]                   {
[09:33:03.929]                     NULL
[09:33:03.929]                     RNGkind("Mersenne-Twister")
[09:33:03.929]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:33:03.929]                       inherits = FALSE)
[09:33:03.929]                   }
[09:33:03.929]                   options(future.plan = NULL)
[09:33:03.929]                   if (is.na(NA_character_)) 
[09:33:03.929]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.929]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:03.929]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:03.929]                     .init = FALSE)
[09:33:03.929]                 }
[09:33:03.929]             }
[09:33:03.929]         }
[09:33:03.929]     })
[09:33:03.929]     if (TRUE) {
[09:33:03.929]         base::sink(type = "output", split = FALSE)
[09:33:03.929]         if (TRUE) {
[09:33:03.929]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:03.929]         }
[09:33:03.929]         else {
[09:33:03.929]             ...future.result["stdout"] <- base::list(NULL)
[09:33:03.929]         }
[09:33:03.929]         base::close(...future.stdout)
[09:33:03.929]         ...future.stdout <- NULL
[09:33:03.929]     }
[09:33:03.929]     ...future.result$conditions <- ...future.conditions
[09:33:03.929]     ...future.result$finished <- base::Sys.time()
[09:33:03.929]     ...future.result
[09:33:03.929] }
[09:33:03.931] plan(): Setting new future strategy stack:
[09:33:03.931] List of future strategies:
[09:33:03.931] 1. sequential:
[09:33:03.931]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.931]    - tweaked: FALSE
[09:33:03.931]    - call: NULL
[09:33:03.932] plan(): nbrOfWorkers() = 1
[09:33:03.932] plan(): Setting new future strategy stack:
[09:33:03.932] List of future strategies:
[09:33:03.932] 1. sequential:
[09:33:03.932]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.932]    - tweaked: FALSE
[09:33:03.932]    - call: plan(strategy)
[09:33:03.933] plan(): nbrOfWorkers() = 1
[09:33:03.933] SequentialFuture started (and completed)
[09:33:03.933] - Launch lazy future ... done
[09:33:03.933] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = FALSE
[09:33:03.933] getGlobalsAndPackages() ...
[09:33:03.933] Searching for globals...
[09:33:03.936] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:03.936] Searching for globals ... DONE
[09:33:03.936] Resolving globals: FALSE
[09:33:03.937] 
[09:33:03.937] - packages: [1] ‘utils’
[09:33:03.937] getGlobalsAndPackages() ... DONE
[09:33:03.937] run() for ‘Future’ ...
[09:33:03.937] - state: ‘created’
[09:33:03.937] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:33:03.937] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:33:03.938] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:33:03.938]   - Field: ‘label’
[09:33:03.938]   - Field: ‘local’
[09:33:03.938]   - Field: ‘owner’
[09:33:03.938]   - Field: ‘envir’
[09:33:03.938]   - Field: ‘packages’
[09:33:03.938]   - Field: ‘gc’
[09:33:03.938]   - Field: ‘conditions’
[09:33:03.938]   - Field: ‘expr’
[09:33:03.938]   - Field: ‘uuid’
[09:33:03.938]   - Field: ‘seed’
[09:33:03.939]   - Field: ‘version’
[09:33:03.939]   - Field: ‘result’
[09:33:03.939]   - Field: ‘asynchronous’
[09:33:03.939]   - Field: ‘calls’
[09:33:03.939]   - Field: ‘globals’
[09:33:03.939]   - Field: ‘stdout’
[09:33:03.939]   - Field: ‘earlySignal’
[09:33:03.939]   - Field: ‘lazy’
[09:33:03.939]   - Field: ‘state’
[09:33:03.939] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:33:03.939] - Launch lazy future ...
[09:33:03.940] Packages needed by the future expression (n = 1): ‘utils’
[09:33:03.940] Packages needed by future strategies (n = 0): <none>
[09:33:03.940] {
[09:33:03.940]     {
[09:33:03.940]         {
[09:33:03.940]             ...future.startTime <- base::Sys.time()
[09:33:03.940]             {
[09:33:03.940]                 {
[09:33:03.940]                   {
[09:33:03.940]                     {
[09:33:03.940]                       base::local({
[09:33:03.940]                         has_future <- base::requireNamespace("future", 
[09:33:03.940]                           quietly = TRUE)
[09:33:03.940]                         if (has_future) {
[09:33:03.940]                           ns <- base::getNamespace("future")
[09:33:03.940]                           version <- ns[[".package"]][["version"]]
[09:33:03.940]                           if (is.null(version)) 
[09:33:03.940]                             version <- utils::packageVersion("future")
[09:33:03.940]                         }
[09:33:03.940]                         else {
[09:33:03.940]                           version <- NULL
[09:33:03.940]                         }
[09:33:03.940]                         if (!has_future || version < "1.8.0") {
[09:33:03.940]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:03.940]                             "", base::R.version$version.string), 
[09:33:03.940]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:03.940]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:03.940]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:03.940]                               "release", "version")], collapse = " "), 
[09:33:03.940]                             hostname = base::Sys.info()[["nodename"]])
[09:33:03.940]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:03.940]                             info)
[09:33:03.940]                           info <- base::paste(info, collapse = "; ")
[09:33:03.940]                           if (!has_future) {
[09:33:03.940]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:03.940]                               info)
[09:33:03.940]                           }
[09:33:03.940]                           else {
[09:33:03.940]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:03.940]                               info, version)
[09:33:03.940]                           }
[09:33:03.940]                           base::stop(msg)
[09:33:03.940]                         }
[09:33:03.940]                       })
[09:33:03.940]                     }
[09:33:03.940]                     base::local({
[09:33:03.940]                       for (pkg in "utils") {
[09:33:03.940]                         base::loadNamespace(pkg)
[09:33:03.940]                         base::library(pkg, character.only = TRUE)
[09:33:03.940]                       }
[09:33:03.940]                     })
[09:33:03.940]                   }
[09:33:03.940]                   ...future.strategy.old <- future::plan("list")
[09:33:03.940]                   options(future.plan = NULL)
[09:33:03.940]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.940]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:03.940]                 }
[09:33:03.940]                 ...future.workdir <- getwd()
[09:33:03.940]             }
[09:33:03.940]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:03.940]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:03.940]         }
[09:33:03.940]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:03.940]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:03.940]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:03.940]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:03.940]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:03.940]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:03.940]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:03.940]             base::names(...future.oldOptions))
[09:33:03.940]     }
[09:33:03.940]     if (FALSE) {
[09:33:03.940]     }
[09:33:03.940]     else {
[09:33:03.940]         if (FALSE) {
[09:33:03.940]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:03.940]                 open = "w")
[09:33:03.940]         }
[09:33:03.940]         else {
[09:33:03.940]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:03.940]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:03.940]         }
[09:33:03.940]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:03.940]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:03.940]             base::sink(type = "output", split = FALSE)
[09:33:03.940]             base::close(...future.stdout)
[09:33:03.940]         }, add = TRUE)
[09:33:03.940]     }
[09:33:03.940]     ...future.frame <- base::sys.nframe()
[09:33:03.940]     ...future.conditions <- base::list()
[09:33:03.940]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:03.940]     if (FALSE) {
[09:33:03.940]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:03.940]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:03.940]     }
[09:33:03.940]     ...future.result <- base::tryCatch({
[09:33:03.940]         base::withCallingHandlers({
[09:33:03.940]             ...future.value <- base::withVisible(base::local({
[09:33:03.940]                 print(1:50)
[09:33:03.940]                 str(1:50)
[09:33:03.940]                 cat(letters, sep = "-")
[09:33:03.940]                 cat(1:6, collapse = "\n")
[09:33:03.940]                 write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:03.940]                 42L
[09:33:03.940]             }))
[09:33:03.940]             future::FutureResult(value = ...future.value$value, 
[09:33:03.940]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.940]                   ...future.rng), globalenv = if (FALSE) 
[09:33:03.940]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:03.940]                     ...future.globalenv.names))
[09:33:03.940]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:03.940]         }, condition = base::local({
[09:33:03.940]             c <- base::c
[09:33:03.940]             inherits <- base::inherits
[09:33:03.940]             invokeRestart <- base::invokeRestart
[09:33:03.940]             length <- base::length
[09:33:03.940]             list <- base::list
[09:33:03.940]             seq.int <- base::seq.int
[09:33:03.940]             signalCondition <- base::signalCondition
[09:33:03.940]             sys.calls <- base::sys.calls
[09:33:03.940]             `[[` <- base::`[[`
[09:33:03.940]             `+` <- base::`+`
[09:33:03.940]             `<<-` <- base::`<<-`
[09:33:03.940]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:03.940]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:03.940]                   3L)]
[09:33:03.940]             }
[09:33:03.940]             function(cond) {
[09:33:03.940]                 is_error <- inherits(cond, "error")
[09:33:03.940]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:03.940]                   NULL)
[09:33:03.940]                 if (is_error) {
[09:33:03.940]                   sessionInformation <- function() {
[09:33:03.940]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:03.940]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:03.940]                       search = base::search(), system = base::Sys.info())
[09:33:03.940]                   }
[09:33:03.940]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.940]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:03.940]                     cond$call), session = sessionInformation(), 
[09:33:03.940]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:03.940]                   signalCondition(cond)
[09:33:03.940]                 }
[09:33:03.940]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:03.940]                 "immediateCondition"))) {
[09:33:03.940]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:03.940]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.940]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:03.940]                   if (TRUE && !signal) {
[09:33:03.940]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.940]                     {
[09:33:03.940]                       inherits <- base::inherits
[09:33:03.940]                       invokeRestart <- base::invokeRestart
[09:33:03.940]                       is.null <- base::is.null
[09:33:03.940]                       muffled <- FALSE
[09:33:03.940]                       if (inherits(cond, "message")) {
[09:33:03.940]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.940]                         if (muffled) 
[09:33:03.940]                           invokeRestart("muffleMessage")
[09:33:03.940]                       }
[09:33:03.940]                       else if (inherits(cond, "warning")) {
[09:33:03.940]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.940]                         if (muffled) 
[09:33:03.940]                           invokeRestart("muffleWarning")
[09:33:03.940]                       }
[09:33:03.940]                       else if (inherits(cond, "condition")) {
[09:33:03.940]                         if (!is.null(pattern)) {
[09:33:03.940]                           computeRestarts <- base::computeRestarts
[09:33:03.940]                           grepl <- base::grepl
[09:33:03.940]                           restarts <- computeRestarts(cond)
[09:33:03.940]                           for (restart in restarts) {
[09:33:03.940]                             name <- restart$name
[09:33:03.940]                             if (is.null(name)) 
[09:33:03.940]                               next
[09:33:03.940]                             if (!grepl(pattern, name)) 
[09:33:03.940]                               next
[09:33:03.940]                             invokeRestart(restart)
[09:33:03.940]                             muffled <- TRUE
[09:33:03.940]                             break
[09:33:03.940]                           }
[09:33:03.940]                         }
[09:33:03.940]                       }
[09:33:03.940]                       invisible(muffled)
[09:33:03.940]                     }
[09:33:03.940]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.940]                   }
[09:33:03.940]                 }
[09:33:03.940]                 else {
[09:33:03.940]                   if (TRUE) {
[09:33:03.940]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.940]                     {
[09:33:03.940]                       inherits <- base::inherits
[09:33:03.940]                       invokeRestart <- base::invokeRestart
[09:33:03.940]                       is.null <- base::is.null
[09:33:03.940]                       muffled <- FALSE
[09:33:03.940]                       if (inherits(cond, "message")) {
[09:33:03.940]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.940]                         if (muffled) 
[09:33:03.940]                           invokeRestart("muffleMessage")
[09:33:03.940]                       }
[09:33:03.940]                       else if (inherits(cond, "warning")) {
[09:33:03.940]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.940]                         if (muffled) 
[09:33:03.940]                           invokeRestart("muffleWarning")
[09:33:03.940]                       }
[09:33:03.940]                       else if (inherits(cond, "condition")) {
[09:33:03.940]                         if (!is.null(pattern)) {
[09:33:03.940]                           computeRestarts <- base::computeRestarts
[09:33:03.940]                           grepl <- base::grepl
[09:33:03.940]                           restarts <- computeRestarts(cond)
[09:33:03.940]                           for (restart in restarts) {
[09:33:03.940]                             name <- restart$name
[09:33:03.940]                             if (is.null(name)) 
[09:33:03.940]                               next
[09:33:03.940]                             if (!grepl(pattern, name)) 
[09:33:03.940]                               next
[09:33:03.940]                             invokeRestart(restart)
[09:33:03.940]                             muffled <- TRUE
[09:33:03.940]                             break
[09:33:03.940]                           }
[09:33:03.940]                         }
[09:33:03.940]                       }
[09:33:03.940]                       invisible(muffled)
[09:33:03.940]                     }
[09:33:03.940]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.940]                   }
[09:33:03.940]                 }
[09:33:03.940]             }
[09:33:03.940]         }))
[09:33:03.940]     }, error = function(ex) {
[09:33:03.940]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:03.940]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.940]                 ...future.rng), started = ...future.startTime, 
[09:33:03.940]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:03.940]             version = "1.8"), class = "FutureResult")
[09:33:03.940]     }, finally = {
[09:33:03.940]         if (!identical(...future.workdir, getwd())) 
[09:33:03.940]             setwd(...future.workdir)
[09:33:03.940]         {
[09:33:03.940]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:03.940]                 ...future.oldOptions$nwarnings <- NULL
[09:33:03.940]             }
[09:33:03.940]             base::options(...future.oldOptions)
[09:33:03.940]             if (.Platform$OS.type == "windows") {
[09:33:03.940]                 old_names <- names(...future.oldEnvVars)
[09:33:03.940]                 envs <- base::Sys.getenv()
[09:33:03.940]                 names <- names(envs)
[09:33:03.940]                 common <- intersect(names, old_names)
[09:33:03.940]                 added <- setdiff(names, old_names)
[09:33:03.940]                 removed <- setdiff(old_names, names)
[09:33:03.940]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:03.940]                   envs[common]]
[09:33:03.940]                 NAMES <- toupper(changed)
[09:33:03.940]                 args <- list()
[09:33:03.940]                 for (kk in seq_along(NAMES)) {
[09:33:03.940]                   name <- changed[[kk]]
[09:33:03.940]                   NAME <- NAMES[[kk]]
[09:33:03.940]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.940]                     next
[09:33:03.940]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.940]                 }
[09:33:03.940]                 NAMES <- toupper(added)
[09:33:03.940]                 for (kk in seq_along(NAMES)) {
[09:33:03.940]                   name <- added[[kk]]
[09:33:03.940]                   NAME <- NAMES[[kk]]
[09:33:03.940]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.940]                     next
[09:33:03.940]                   args[[name]] <- ""
[09:33:03.940]                 }
[09:33:03.940]                 NAMES <- toupper(removed)
[09:33:03.940]                 for (kk in seq_along(NAMES)) {
[09:33:03.940]                   name <- removed[[kk]]
[09:33:03.940]                   NAME <- NAMES[[kk]]
[09:33:03.940]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.940]                     next
[09:33:03.940]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.940]                 }
[09:33:03.940]                 if (length(args) > 0) 
[09:33:03.940]                   base::do.call(base::Sys.setenv, args = args)
[09:33:03.940]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:03.940]             }
[09:33:03.940]             else {
[09:33:03.940]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:03.940]             }
[09:33:03.940]             {
[09:33:03.940]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:03.940]                   0L) {
[09:33:03.940]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:03.940]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:03.940]                   base::options(opts)
[09:33:03.940]                 }
[09:33:03.940]                 {
[09:33:03.940]                   {
[09:33:03.940]                     NULL
[09:33:03.940]                     RNGkind("Mersenne-Twister")
[09:33:03.940]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:33:03.940]                       inherits = FALSE)
[09:33:03.940]                   }
[09:33:03.940]                   options(future.plan = NULL)
[09:33:03.940]                   if (is.na(NA_character_)) 
[09:33:03.940]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.940]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:03.940]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:03.940]                     .init = FALSE)
[09:33:03.940]                 }
[09:33:03.940]             }
[09:33:03.940]         }
[09:33:03.940]     })
[09:33:03.940]     if (TRUE) {
[09:33:03.940]         base::sink(type = "output", split = FALSE)
[09:33:03.940]         if (FALSE) {
[09:33:03.940]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:03.940]         }
[09:33:03.940]         else {
[09:33:03.940]             ...future.result["stdout"] <- base::list(NULL)
[09:33:03.940]         }
[09:33:03.940]         base::close(...future.stdout)
[09:33:03.940]         ...future.stdout <- NULL
[09:33:03.940]     }
[09:33:03.940]     ...future.result$conditions <- ...future.conditions
[09:33:03.940]     ...future.result$finished <- base::Sys.time()
[09:33:03.940]     ...future.result
[09:33:03.940] }
[09:33:03.942] plan(): Setting new future strategy stack:
[09:33:03.942] List of future strategies:
[09:33:03.942] 1. sequential:
[09:33:03.942]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.942]    - tweaked: FALSE
[09:33:03.942]    - call: NULL
[09:33:03.942] plan(): nbrOfWorkers() = 1
[09:33:03.944] plan(): Setting new future strategy stack:
[09:33:03.944] List of future strategies:
[09:33:03.944] 1. sequential:
[09:33:03.944]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.944]    - tweaked: FALSE
[09:33:03.944]    - call: plan(strategy)
[09:33:03.944] plan(): nbrOfWorkers() = 1
[09:33:03.944] SequentialFuture started (and completed)
[09:33:03.944] - Launch lazy future ... done
[09:33:03.945] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 09:33:03"
 $ finished    : POSIXct[1:1], format: "2024-12-19 09:33:03"
 $ session_uuid: chr "88298579-8cba-59c7-c5c1-51599ab08e19"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "8f1daa72e372"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "8f1daa72e372" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 50427
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 09:33:03"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[09:33:03.953] getGlobalsAndPackages() ...
[09:33:03.953] Searching for globals...
[09:33:03.955] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:03.955] Searching for globals ... DONE
[09:33:03.955] Resolving globals: FALSE
[09:33:03.956] 
[09:33:03.956] - packages: [1] ‘utils’
[09:33:03.956] getGlobalsAndPackages() ... DONE
[09:33:03.956] run() for ‘Future’ ...
[09:33:03.956] - state: ‘created’
[09:33:03.957] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:33:03.957] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:33:03.957] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:33:03.957]   - Field: ‘label’
[09:33:03.957]   - Field: ‘local’
[09:33:03.957]   - Field: ‘owner’
[09:33:03.957]   - Field: ‘envir’
[09:33:03.957]   - Field: ‘packages’
[09:33:03.957]   - Field: ‘gc’
[09:33:03.958]   - Field: ‘conditions’
[09:33:03.958]   - Field: ‘expr’
[09:33:03.958]   - Field: ‘uuid’
[09:33:03.958]   - Field: ‘seed’
[09:33:03.958]   - Field: ‘version’
[09:33:03.958]   - Field: ‘result’
[09:33:03.958]   - Field: ‘asynchronous’
[09:33:03.958]   - Field: ‘calls’
[09:33:03.958]   - Field: ‘globals’
[09:33:03.958]   - Field: ‘stdout’
[09:33:03.958]   - Field: ‘earlySignal’
[09:33:03.958]   - Field: ‘lazy’
[09:33:03.959]   - Field: ‘state’
[09:33:03.959] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:33:03.959] - Launch lazy future ...
[09:33:03.959] Packages needed by the future expression (n = 1): ‘utils’
[09:33:03.959] Packages needed by future strategies (n = 0): <none>
[09:33:03.959] {
[09:33:03.959]     {
[09:33:03.959]         {
[09:33:03.959]             ...future.startTime <- base::Sys.time()
[09:33:03.959]             {
[09:33:03.959]                 {
[09:33:03.959]                   {
[09:33:03.959]                     {
[09:33:03.959]                       base::local({
[09:33:03.959]                         has_future <- base::requireNamespace("future", 
[09:33:03.959]                           quietly = TRUE)
[09:33:03.959]                         if (has_future) {
[09:33:03.959]                           ns <- base::getNamespace("future")
[09:33:03.959]                           version <- ns[[".package"]][["version"]]
[09:33:03.959]                           if (is.null(version)) 
[09:33:03.959]                             version <- utils::packageVersion("future")
[09:33:03.959]                         }
[09:33:03.959]                         else {
[09:33:03.959]                           version <- NULL
[09:33:03.959]                         }
[09:33:03.959]                         if (!has_future || version < "1.8.0") {
[09:33:03.959]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:03.959]                             "", base::R.version$version.string), 
[09:33:03.959]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:03.959]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:03.959]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:03.959]                               "release", "version")], collapse = " "), 
[09:33:03.959]                             hostname = base::Sys.info()[["nodename"]])
[09:33:03.959]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:03.959]                             info)
[09:33:03.959]                           info <- base::paste(info, collapse = "; ")
[09:33:03.959]                           if (!has_future) {
[09:33:03.959]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:03.959]                               info)
[09:33:03.959]                           }
[09:33:03.959]                           else {
[09:33:03.959]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:03.959]                               info, version)
[09:33:03.959]                           }
[09:33:03.959]                           base::stop(msg)
[09:33:03.959]                         }
[09:33:03.959]                       })
[09:33:03.959]                     }
[09:33:03.959]                     base::local({
[09:33:03.959]                       for (pkg in "utils") {
[09:33:03.959]                         base::loadNamespace(pkg)
[09:33:03.959]                         base::library(pkg, character.only = TRUE)
[09:33:03.959]                       }
[09:33:03.959]                     })
[09:33:03.959]                   }
[09:33:03.959]                   ...future.strategy.old <- future::plan("list")
[09:33:03.959]                   options(future.plan = NULL)
[09:33:03.959]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.959]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:03.959]                 }
[09:33:03.959]                 ...future.workdir <- getwd()
[09:33:03.959]             }
[09:33:03.959]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:03.959]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:03.959]         }
[09:33:03.959]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:03.959]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:03.959]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:03.959]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:03.959]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:03.959]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:03.959]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:03.959]             base::names(...future.oldOptions))
[09:33:03.959]     }
[09:33:03.959]     if (FALSE) {
[09:33:03.959]     }
[09:33:03.959]     else {
[09:33:03.959]         if (FALSE) {
[09:33:03.959]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:03.959]                 open = "w")
[09:33:03.959]         }
[09:33:03.959]         else {
[09:33:03.959]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:03.959]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:03.959]         }
[09:33:03.959]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:03.959]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:03.959]             base::sink(type = "output", split = FALSE)
[09:33:03.959]             base::close(...future.stdout)
[09:33:03.959]         }, add = TRUE)
[09:33:03.959]     }
[09:33:03.959]     ...future.frame <- base::sys.nframe()
[09:33:03.959]     ...future.conditions <- base::list()
[09:33:03.959]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:03.959]     if (FALSE) {
[09:33:03.959]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:03.959]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:03.959]     }
[09:33:03.959]     ...future.result <- base::tryCatch({
[09:33:03.959]         base::withCallingHandlers({
[09:33:03.959]             ...future.value <- base::withVisible(base::local({
[09:33:03.959]                 print(1:50)
[09:33:03.959]                 str(1:50)
[09:33:03.959]                 cat(letters, sep = "-")
[09:33:03.959]                 cat(1:6, collapse = "\n")
[09:33:03.959]                 write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:03.959]                 42L
[09:33:03.959]             }))
[09:33:03.959]             future::FutureResult(value = ...future.value$value, 
[09:33:03.959]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.959]                   ...future.rng), globalenv = if (FALSE) 
[09:33:03.959]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:03.959]                     ...future.globalenv.names))
[09:33:03.959]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:03.959]         }, condition = base::local({
[09:33:03.959]             c <- base::c
[09:33:03.959]             inherits <- base::inherits
[09:33:03.959]             invokeRestart <- base::invokeRestart
[09:33:03.959]             length <- base::length
[09:33:03.959]             list <- base::list
[09:33:03.959]             seq.int <- base::seq.int
[09:33:03.959]             signalCondition <- base::signalCondition
[09:33:03.959]             sys.calls <- base::sys.calls
[09:33:03.959]             `[[` <- base::`[[`
[09:33:03.959]             `+` <- base::`+`
[09:33:03.959]             `<<-` <- base::`<<-`
[09:33:03.959]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:03.959]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:03.959]                   3L)]
[09:33:03.959]             }
[09:33:03.959]             function(cond) {
[09:33:03.959]                 is_error <- inherits(cond, "error")
[09:33:03.959]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:03.959]                   NULL)
[09:33:03.959]                 if (is_error) {
[09:33:03.959]                   sessionInformation <- function() {
[09:33:03.959]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:03.959]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:03.959]                       search = base::search(), system = base::Sys.info())
[09:33:03.959]                   }
[09:33:03.959]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.959]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:03.959]                     cond$call), session = sessionInformation(), 
[09:33:03.959]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:03.959]                   signalCondition(cond)
[09:33:03.959]                 }
[09:33:03.959]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:03.959]                 "immediateCondition"))) {
[09:33:03.959]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:03.959]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.959]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:03.959]                   if (TRUE && !signal) {
[09:33:03.959]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.959]                     {
[09:33:03.959]                       inherits <- base::inherits
[09:33:03.959]                       invokeRestart <- base::invokeRestart
[09:33:03.959]                       is.null <- base::is.null
[09:33:03.959]                       muffled <- FALSE
[09:33:03.959]                       if (inherits(cond, "message")) {
[09:33:03.959]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.959]                         if (muffled) 
[09:33:03.959]                           invokeRestart("muffleMessage")
[09:33:03.959]                       }
[09:33:03.959]                       else if (inherits(cond, "warning")) {
[09:33:03.959]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.959]                         if (muffled) 
[09:33:03.959]                           invokeRestart("muffleWarning")
[09:33:03.959]                       }
[09:33:03.959]                       else if (inherits(cond, "condition")) {
[09:33:03.959]                         if (!is.null(pattern)) {
[09:33:03.959]                           computeRestarts <- base::computeRestarts
[09:33:03.959]                           grepl <- base::grepl
[09:33:03.959]                           restarts <- computeRestarts(cond)
[09:33:03.959]                           for (restart in restarts) {
[09:33:03.959]                             name <- restart$name
[09:33:03.959]                             if (is.null(name)) 
[09:33:03.959]                               next
[09:33:03.959]                             if (!grepl(pattern, name)) 
[09:33:03.959]                               next
[09:33:03.959]                             invokeRestart(restart)
[09:33:03.959]                             muffled <- TRUE
[09:33:03.959]                             break
[09:33:03.959]                           }
[09:33:03.959]                         }
[09:33:03.959]                       }
[09:33:03.959]                       invisible(muffled)
[09:33:03.959]                     }
[09:33:03.959]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.959]                   }
[09:33:03.959]                 }
[09:33:03.959]                 else {
[09:33:03.959]                   if (TRUE) {
[09:33:03.959]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.959]                     {
[09:33:03.959]                       inherits <- base::inherits
[09:33:03.959]                       invokeRestart <- base::invokeRestart
[09:33:03.959]                       is.null <- base::is.null
[09:33:03.959]                       muffled <- FALSE
[09:33:03.959]                       if (inherits(cond, "message")) {
[09:33:03.959]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.959]                         if (muffled) 
[09:33:03.959]                           invokeRestart("muffleMessage")
[09:33:03.959]                       }
[09:33:03.959]                       else if (inherits(cond, "warning")) {
[09:33:03.959]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.959]                         if (muffled) 
[09:33:03.959]                           invokeRestart("muffleWarning")
[09:33:03.959]                       }
[09:33:03.959]                       else if (inherits(cond, "condition")) {
[09:33:03.959]                         if (!is.null(pattern)) {
[09:33:03.959]                           computeRestarts <- base::computeRestarts
[09:33:03.959]                           grepl <- base::grepl
[09:33:03.959]                           restarts <- computeRestarts(cond)
[09:33:03.959]                           for (restart in restarts) {
[09:33:03.959]                             name <- restart$name
[09:33:03.959]                             if (is.null(name)) 
[09:33:03.959]                               next
[09:33:03.959]                             if (!grepl(pattern, name)) 
[09:33:03.959]                               next
[09:33:03.959]                             invokeRestart(restart)
[09:33:03.959]                             muffled <- TRUE
[09:33:03.959]                             break
[09:33:03.959]                           }
[09:33:03.959]                         }
[09:33:03.959]                       }
[09:33:03.959]                       invisible(muffled)
[09:33:03.959]                     }
[09:33:03.959]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.959]                   }
[09:33:03.959]                 }
[09:33:03.959]             }
[09:33:03.959]         }))
[09:33:03.959]     }, error = function(ex) {
[09:33:03.959]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:03.959]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.959]                 ...future.rng), started = ...future.startTime, 
[09:33:03.959]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:03.959]             version = "1.8"), class = "FutureResult")
[09:33:03.959]     }, finally = {
[09:33:03.959]         if (!identical(...future.workdir, getwd())) 
[09:33:03.959]             setwd(...future.workdir)
[09:33:03.959]         {
[09:33:03.959]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:03.959]                 ...future.oldOptions$nwarnings <- NULL
[09:33:03.959]             }
[09:33:03.959]             base::options(...future.oldOptions)
[09:33:03.959]             if (.Platform$OS.type == "windows") {
[09:33:03.959]                 old_names <- names(...future.oldEnvVars)
[09:33:03.959]                 envs <- base::Sys.getenv()
[09:33:03.959]                 names <- names(envs)
[09:33:03.959]                 common <- intersect(names, old_names)
[09:33:03.959]                 added <- setdiff(names, old_names)
[09:33:03.959]                 removed <- setdiff(old_names, names)
[09:33:03.959]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:03.959]                   envs[common]]
[09:33:03.959]                 NAMES <- toupper(changed)
[09:33:03.959]                 args <- list()
[09:33:03.959]                 for (kk in seq_along(NAMES)) {
[09:33:03.959]                   name <- changed[[kk]]
[09:33:03.959]                   NAME <- NAMES[[kk]]
[09:33:03.959]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.959]                     next
[09:33:03.959]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.959]                 }
[09:33:03.959]                 NAMES <- toupper(added)
[09:33:03.959]                 for (kk in seq_along(NAMES)) {
[09:33:03.959]                   name <- added[[kk]]
[09:33:03.959]                   NAME <- NAMES[[kk]]
[09:33:03.959]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.959]                     next
[09:33:03.959]                   args[[name]] <- ""
[09:33:03.959]                 }
[09:33:03.959]                 NAMES <- toupper(removed)
[09:33:03.959]                 for (kk in seq_along(NAMES)) {
[09:33:03.959]                   name <- removed[[kk]]
[09:33:03.959]                   NAME <- NAMES[[kk]]
[09:33:03.959]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.959]                     next
[09:33:03.959]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.959]                 }
[09:33:03.959]                 if (length(args) > 0) 
[09:33:03.959]                   base::do.call(base::Sys.setenv, args = args)
[09:33:03.959]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:03.959]             }
[09:33:03.959]             else {
[09:33:03.959]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:03.959]             }
[09:33:03.959]             {
[09:33:03.959]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:03.959]                   0L) {
[09:33:03.959]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:03.959]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:03.959]                   base::options(opts)
[09:33:03.959]                 }
[09:33:03.959]                 {
[09:33:03.959]                   {
[09:33:03.959]                     NULL
[09:33:03.959]                     RNGkind("Mersenne-Twister")
[09:33:03.959]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:33:03.959]                       inherits = FALSE)
[09:33:03.959]                   }
[09:33:03.959]                   options(future.plan = NULL)
[09:33:03.959]                   if (is.na(NA_character_)) 
[09:33:03.959]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.959]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:03.959]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:03.959]                     .init = FALSE)
[09:33:03.959]                 }
[09:33:03.959]             }
[09:33:03.959]         }
[09:33:03.959]     })
[09:33:03.959]     if (TRUE) {
[09:33:03.959]         base::sink(type = "output", split = FALSE)
[09:33:03.959]         if (FALSE) {
[09:33:03.959]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:03.959]         }
[09:33:03.959]         else {
[09:33:03.959]             ...future.result["stdout"] <- base::list(NULL)
[09:33:03.959]         }
[09:33:03.959]         base::close(...future.stdout)
[09:33:03.959]         ...future.stdout <- NULL
[09:33:03.959]     }
[09:33:03.959]     ...future.result$conditions <- ...future.conditions
[09:33:03.959]     ...future.result$finished <- base::Sys.time()
[09:33:03.959]     ...future.result
[09:33:03.959] }
[09:33:03.961] plan(): Setting new future strategy stack:
[09:33:03.961] List of future strategies:
[09:33:03.961] 1. sequential:
[09:33:03.961]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.961]    - tweaked: FALSE
[09:33:03.961]    - call: NULL
[09:33:03.962] plan(): nbrOfWorkers() = 1
[09:33:03.963] plan(): Setting new future strategy stack:
[09:33:03.963] List of future strategies:
[09:33:03.963] 1. sequential:
[09:33:03.963]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.963]    - tweaked: FALSE
[09:33:03.963]    - call: plan(strategy)
[09:33:03.963] plan(): nbrOfWorkers() = 1
[09:33:03.964] SequentialFuture started (and completed)
[09:33:03.964] - Launch lazy future ... done
[09:33:03.964] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[09:33:03.964] getGlobalsAndPackages() ...
[09:33:03.964] Searching for globals...
[09:33:03.965] - globals found: [1] ‘print’
[09:33:03.965] Searching for globals ... DONE
[09:33:03.965] Resolving globals: FALSE
[09:33:03.965] 
[09:33:03.965] 
[09:33:03.965] getGlobalsAndPackages() ... DONE
[09:33:03.965] run() for ‘Future’ ...
[09:33:03.966] - state: ‘created’
[09:33:03.966] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:33:03.966] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:33:03.966] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:33:03.966]   - Field: ‘label’
[09:33:03.966]   - Field: ‘local’
[09:33:03.966]   - Field: ‘owner’
[09:33:03.966]   - Field: ‘envir’
[09:33:03.966]   - Field: ‘packages’
[09:33:03.967]   - Field: ‘gc’
[09:33:03.967]   - Field: ‘conditions’
[09:33:03.967]   - Field: ‘expr’
[09:33:03.967]   - Field: ‘uuid’
[09:33:03.967]   - Field: ‘seed’
[09:33:03.967]   - Field: ‘version’
[09:33:03.967]   - Field: ‘result’
[09:33:03.967]   - Field: ‘asynchronous’
[09:33:03.967]   - Field: ‘calls’
[09:33:03.967]   - Field: ‘globals’
[09:33:03.967]   - Field: ‘stdout’
[09:33:03.967]   - Field: ‘earlySignal’
[09:33:03.968]   - Field: ‘lazy’
[09:33:03.968]   - Field: ‘state’
[09:33:03.968] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:33:03.968] - Launch lazy future ...
[09:33:03.968] Packages needed by the future expression (n = 0): <none>
[09:33:03.968] Packages needed by future strategies (n = 0): <none>
[09:33:03.968] {
[09:33:03.968]     {
[09:33:03.968]         {
[09:33:03.968]             ...future.startTime <- base::Sys.time()
[09:33:03.968]             {
[09:33:03.968]                 {
[09:33:03.968]                   {
[09:33:03.968]                     base::local({
[09:33:03.968]                       has_future <- base::requireNamespace("future", 
[09:33:03.968]                         quietly = TRUE)
[09:33:03.968]                       if (has_future) {
[09:33:03.968]                         ns <- base::getNamespace("future")
[09:33:03.968]                         version <- ns[[".package"]][["version"]]
[09:33:03.968]                         if (is.null(version)) 
[09:33:03.968]                           version <- utils::packageVersion("future")
[09:33:03.968]                       }
[09:33:03.968]                       else {
[09:33:03.968]                         version <- NULL
[09:33:03.968]                       }
[09:33:03.968]                       if (!has_future || version < "1.8.0") {
[09:33:03.968]                         info <- base::c(r_version = base::gsub("R version ", 
[09:33:03.968]                           "", base::R.version$version.string), 
[09:33:03.968]                           platform = base::sprintf("%s (%s-bit)", 
[09:33:03.968]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:03.968]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:03.968]                             "release", "version")], collapse = " "), 
[09:33:03.968]                           hostname = base::Sys.info()[["nodename"]])
[09:33:03.968]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:33:03.968]                           info)
[09:33:03.968]                         info <- base::paste(info, collapse = "; ")
[09:33:03.968]                         if (!has_future) {
[09:33:03.968]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:03.968]                             info)
[09:33:03.968]                         }
[09:33:03.968]                         else {
[09:33:03.968]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:03.968]                             info, version)
[09:33:03.968]                         }
[09:33:03.968]                         base::stop(msg)
[09:33:03.968]                       }
[09:33:03.968]                     })
[09:33:03.968]                   }
[09:33:03.968]                   ...future.strategy.old <- future::plan("list")
[09:33:03.968]                   options(future.plan = NULL)
[09:33:03.968]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.968]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:03.968]                 }
[09:33:03.968]                 ...future.workdir <- getwd()
[09:33:03.968]             }
[09:33:03.968]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:03.968]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:03.968]         }
[09:33:03.968]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:03.968]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:03.968]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:03.968]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:03.968]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:03.968]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:03.968]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:03.968]             base::names(...future.oldOptions))
[09:33:03.968]     }
[09:33:03.968]     if (FALSE) {
[09:33:03.968]     }
[09:33:03.968]     else {
[09:33:03.968]         if (TRUE) {
[09:33:03.968]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:03.968]                 open = "w")
[09:33:03.968]         }
[09:33:03.968]         else {
[09:33:03.968]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:03.968]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:03.968]         }
[09:33:03.968]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:03.968]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:03.968]             base::sink(type = "output", split = FALSE)
[09:33:03.968]             base::close(...future.stdout)
[09:33:03.968]         }, add = TRUE)
[09:33:03.968]     }
[09:33:03.968]     ...future.frame <- base::sys.nframe()
[09:33:03.968]     ...future.conditions <- base::list()
[09:33:03.968]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:03.968]     if (FALSE) {
[09:33:03.968]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:03.968]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:03.968]     }
[09:33:03.968]     ...future.result <- base::tryCatch({
[09:33:03.968]         base::withCallingHandlers({
[09:33:03.968]             ...future.value <- base::withVisible(base::local(print(42)))
[09:33:03.968]             future::FutureResult(value = ...future.value$value, 
[09:33:03.968]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.968]                   ...future.rng), globalenv = if (FALSE) 
[09:33:03.968]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:03.968]                     ...future.globalenv.names))
[09:33:03.968]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:03.968]         }, condition = base::local({
[09:33:03.968]             c <- base::c
[09:33:03.968]             inherits <- base::inherits
[09:33:03.968]             invokeRestart <- base::invokeRestart
[09:33:03.968]             length <- base::length
[09:33:03.968]             list <- base::list
[09:33:03.968]             seq.int <- base::seq.int
[09:33:03.968]             signalCondition <- base::signalCondition
[09:33:03.968]             sys.calls <- base::sys.calls
[09:33:03.968]             `[[` <- base::`[[`
[09:33:03.968]             `+` <- base::`+`
[09:33:03.968]             `<<-` <- base::`<<-`
[09:33:03.968]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:03.968]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:03.968]                   3L)]
[09:33:03.968]             }
[09:33:03.968]             function(cond) {
[09:33:03.968]                 is_error <- inherits(cond, "error")
[09:33:03.968]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:03.968]                   NULL)
[09:33:03.968]                 if (is_error) {
[09:33:03.968]                   sessionInformation <- function() {
[09:33:03.968]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:03.968]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:03.968]                       search = base::search(), system = base::Sys.info())
[09:33:03.968]                   }
[09:33:03.968]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.968]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:03.968]                     cond$call), session = sessionInformation(), 
[09:33:03.968]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:03.968]                   signalCondition(cond)
[09:33:03.968]                 }
[09:33:03.968]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:03.968]                 "immediateCondition"))) {
[09:33:03.968]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:03.968]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.968]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:03.968]                   if (TRUE && !signal) {
[09:33:03.968]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.968]                     {
[09:33:03.968]                       inherits <- base::inherits
[09:33:03.968]                       invokeRestart <- base::invokeRestart
[09:33:03.968]                       is.null <- base::is.null
[09:33:03.968]                       muffled <- FALSE
[09:33:03.968]                       if (inherits(cond, "message")) {
[09:33:03.968]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.968]                         if (muffled) 
[09:33:03.968]                           invokeRestart("muffleMessage")
[09:33:03.968]                       }
[09:33:03.968]                       else if (inherits(cond, "warning")) {
[09:33:03.968]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.968]                         if (muffled) 
[09:33:03.968]                           invokeRestart("muffleWarning")
[09:33:03.968]                       }
[09:33:03.968]                       else if (inherits(cond, "condition")) {
[09:33:03.968]                         if (!is.null(pattern)) {
[09:33:03.968]                           computeRestarts <- base::computeRestarts
[09:33:03.968]                           grepl <- base::grepl
[09:33:03.968]                           restarts <- computeRestarts(cond)
[09:33:03.968]                           for (restart in restarts) {
[09:33:03.968]                             name <- restart$name
[09:33:03.968]                             if (is.null(name)) 
[09:33:03.968]                               next
[09:33:03.968]                             if (!grepl(pattern, name)) 
[09:33:03.968]                               next
[09:33:03.968]                             invokeRestart(restart)
[09:33:03.968]                             muffled <- TRUE
[09:33:03.968]                             break
[09:33:03.968]                           }
[09:33:03.968]                         }
[09:33:03.968]                       }
[09:33:03.968]                       invisible(muffled)
[09:33:03.968]                     }
[09:33:03.968]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.968]                   }
[09:33:03.968]                 }
[09:33:03.968]                 else {
[09:33:03.968]                   if (TRUE) {
[09:33:03.968]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.968]                     {
[09:33:03.968]                       inherits <- base::inherits
[09:33:03.968]                       invokeRestart <- base::invokeRestart
[09:33:03.968]                       is.null <- base::is.null
[09:33:03.968]                       muffled <- FALSE
[09:33:03.968]                       if (inherits(cond, "message")) {
[09:33:03.968]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.968]                         if (muffled) 
[09:33:03.968]                           invokeRestart("muffleMessage")
[09:33:03.968]                       }
[09:33:03.968]                       else if (inherits(cond, "warning")) {
[09:33:03.968]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.968]                         if (muffled) 
[09:33:03.968]                           invokeRestart("muffleWarning")
[09:33:03.968]                       }
[09:33:03.968]                       else if (inherits(cond, "condition")) {
[09:33:03.968]                         if (!is.null(pattern)) {
[09:33:03.968]                           computeRestarts <- base::computeRestarts
[09:33:03.968]                           grepl <- base::grepl
[09:33:03.968]                           restarts <- computeRestarts(cond)
[09:33:03.968]                           for (restart in restarts) {
[09:33:03.968]                             name <- restart$name
[09:33:03.968]                             if (is.null(name)) 
[09:33:03.968]                               next
[09:33:03.968]                             if (!grepl(pattern, name)) 
[09:33:03.968]                               next
[09:33:03.968]                             invokeRestart(restart)
[09:33:03.968]                             muffled <- TRUE
[09:33:03.968]                             break
[09:33:03.968]                           }
[09:33:03.968]                         }
[09:33:03.968]                       }
[09:33:03.968]                       invisible(muffled)
[09:33:03.968]                     }
[09:33:03.968]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.968]                   }
[09:33:03.968]                 }
[09:33:03.968]             }
[09:33:03.968]         }))
[09:33:03.968]     }, error = function(ex) {
[09:33:03.968]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:03.968]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.968]                 ...future.rng), started = ...future.startTime, 
[09:33:03.968]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:03.968]             version = "1.8"), class = "FutureResult")
[09:33:03.968]     }, finally = {
[09:33:03.968]         if (!identical(...future.workdir, getwd())) 
[09:33:03.968]             setwd(...future.workdir)
[09:33:03.968]         {
[09:33:03.968]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:03.968]                 ...future.oldOptions$nwarnings <- NULL
[09:33:03.968]             }
[09:33:03.968]             base::options(...future.oldOptions)
[09:33:03.968]             if (.Platform$OS.type == "windows") {
[09:33:03.968]                 old_names <- names(...future.oldEnvVars)
[09:33:03.968]                 envs <- base::Sys.getenv()
[09:33:03.968]                 names <- names(envs)
[09:33:03.968]                 common <- intersect(names, old_names)
[09:33:03.968]                 added <- setdiff(names, old_names)
[09:33:03.968]                 removed <- setdiff(old_names, names)
[09:33:03.968]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:03.968]                   envs[common]]
[09:33:03.968]                 NAMES <- toupper(changed)
[09:33:03.968]                 args <- list()
[09:33:03.968]                 for (kk in seq_along(NAMES)) {
[09:33:03.968]                   name <- changed[[kk]]
[09:33:03.968]                   NAME <- NAMES[[kk]]
[09:33:03.968]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.968]                     next
[09:33:03.968]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.968]                 }
[09:33:03.968]                 NAMES <- toupper(added)
[09:33:03.968]                 for (kk in seq_along(NAMES)) {
[09:33:03.968]                   name <- added[[kk]]
[09:33:03.968]                   NAME <- NAMES[[kk]]
[09:33:03.968]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.968]                     next
[09:33:03.968]                   args[[name]] <- ""
[09:33:03.968]                 }
[09:33:03.968]                 NAMES <- toupper(removed)
[09:33:03.968]                 for (kk in seq_along(NAMES)) {
[09:33:03.968]                   name <- removed[[kk]]
[09:33:03.968]                   NAME <- NAMES[[kk]]
[09:33:03.968]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.968]                     next
[09:33:03.968]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.968]                 }
[09:33:03.968]                 if (length(args) > 0) 
[09:33:03.968]                   base::do.call(base::Sys.setenv, args = args)
[09:33:03.968]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:03.968]             }
[09:33:03.968]             else {
[09:33:03.968]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:03.968]             }
[09:33:03.968]             {
[09:33:03.968]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:03.968]                   0L) {
[09:33:03.968]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:03.968]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:03.968]                   base::options(opts)
[09:33:03.968]                 }
[09:33:03.968]                 {
[09:33:03.968]                   {
[09:33:03.968]                     NULL
[09:33:03.968]                     RNGkind("Mersenne-Twister")
[09:33:03.968]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:33:03.968]                       inherits = FALSE)
[09:33:03.968]                   }
[09:33:03.968]                   options(future.plan = NULL)
[09:33:03.968]                   if (is.na(NA_character_)) 
[09:33:03.968]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.968]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:03.968]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:03.968]                     .init = FALSE)
[09:33:03.968]                 }
[09:33:03.968]             }
[09:33:03.968]         }
[09:33:03.968]     })
[09:33:03.968]     if (TRUE) {
[09:33:03.968]         base::sink(type = "output", split = FALSE)
[09:33:03.968]         if (TRUE) {
[09:33:03.968]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:03.968]         }
[09:33:03.968]         else {
[09:33:03.968]             ...future.result["stdout"] <- base::list(NULL)
[09:33:03.968]         }
[09:33:03.968]         base::close(...future.stdout)
[09:33:03.968]         ...future.stdout <- NULL
[09:33:03.968]     }
[09:33:03.968]     ...future.result$conditions <- ...future.conditions
[09:33:03.968]     ...future.result$finished <- base::Sys.time()
[09:33:03.968]     ...future.result
[09:33:03.968] }
[09:33:03.970] plan(): Setting new future strategy stack:
[09:33:03.970] List of future strategies:
[09:33:03.970] 1. sequential:
[09:33:03.970]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.970]    - tweaked: FALSE
[09:33:03.970]    - call: NULL
[09:33:03.971] plan(): nbrOfWorkers() = 1
[09:33:03.971] plan(): Setting new future strategy stack:
[09:33:03.971] List of future strategies:
[09:33:03.971] 1. sequential:
[09:33:03.971]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.971]    - tweaked: FALSE
[09:33:03.971]    - call: plan(strategy)
[09:33:03.972] plan(): nbrOfWorkers() = 1
[09:33:03.972] SequentialFuture started (and completed)
[09:33:03.972] - Launch lazy future ... done
[09:33:03.972] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = NA
[09:33:03.972] getGlobalsAndPackages() ...
[09:33:03.972] Searching for globals...
[09:33:03.976] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:03.976] Searching for globals ... DONE
[09:33:03.976] Resolving globals: FALSE
[09:33:03.976] 
[09:33:03.977] - packages: [1] ‘utils’
[09:33:03.977] getGlobalsAndPackages() ... DONE
[09:33:03.977] run() for ‘Future’ ...
[09:33:03.977] - state: ‘created’
[09:33:03.977] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:33:03.977] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:33:03.977] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:33:03.978]   - Field: ‘label’
[09:33:03.978]   - Field: ‘local’
[09:33:03.978]   - Field: ‘owner’
[09:33:03.978]   - Field: ‘envir’
[09:33:03.978]   - Field: ‘packages’
[09:33:03.978]   - Field: ‘gc’
[09:33:03.978]   - Field: ‘conditions’
[09:33:03.978]   - Field: ‘expr’
[09:33:03.978]   - Field: ‘uuid’
[09:33:03.978]   - Field: ‘seed’
[09:33:03.978]   - Field: ‘version’
[09:33:03.979]   - Field: ‘result’
[09:33:03.979]   - Field: ‘asynchronous’
[09:33:03.979]   - Field: ‘calls’
[09:33:03.979]   - Field: ‘globals’
[09:33:03.979]   - Field: ‘stdout’
[09:33:03.979]   - Field: ‘earlySignal’
[09:33:03.979]   - Field: ‘lazy’
[09:33:03.979]   - Field: ‘state’
[09:33:03.979] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:33:03.979] - Launch lazy future ...
[09:33:03.979] Packages needed by the future expression (n = 1): ‘utils’
[09:33:03.980] Packages needed by future strategies (n = 0): <none>
[09:33:03.980] {
[09:33:03.980]     {
[09:33:03.980]         {
[09:33:03.980]             ...future.startTime <- base::Sys.time()
[09:33:03.980]             {
[09:33:03.980]                 {
[09:33:03.980]                   {
[09:33:03.980]                     {
[09:33:03.980]                       base::local({
[09:33:03.980]                         has_future <- base::requireNamespace("future", 
[09:33:03.980]                           quietly = TRUE)
[09:33:03.980]                         if (has_future) {
[09:33:03.980]                           ns <- base::getNamespace("future")
[09:33:03.980]                           version <- ns[[".package"]][["version"]]
[09:33:03.980]                           if (is.null(version)) 
[09:33:03.980]                             version <- utils::packageVersion("future")
[09:33:03.980]                         }
[09:33:03.980]                         else {
[09:33:03.980]                           version <- NULL
[09:33:03.980]                         }
[09:33:03.980]                         if (!has_future || version < "1.8.0") {
[09:33:03.980]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:03.980]                             "", base::R.version$version.string), 
[09:33:03.980]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:03.980]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:03.980]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:03.980]                               "release", "version")], collapse = " "), 
[09:33:03.980]                             hostname = base::Sys.info()[["nodename"]])
[09:33:03.980]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:03.980]                             info)
[09:33:03.980]                           info <- base::paste(info, collapse = "; ")
[09:33:03.980]                           if (!has_future) {
[09:33:03.980]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:03.980]                               info)
[09:33:03.980]                           }
[09:33:03.980]                           else {
[09:33:03.980]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:03.980]                               info, version)
[09:33:03.980]                           }
[09:33:03.980]                           base::stop(msg)
[09:33:03.980]                         }
[09:33:03.980]                       })
[09:33:03.980]                     }
[09:33:03.980]                     base::local({
[09:33:03.980]                       for (pkg in "utils") {
[09:33:03.980]                         base::loadNamespace(pkg)
[09:33:03.980]                         base::library(pkg, character.only = TRUE)
[09:33:03.980]                       }
[09:33:03.980]                     })
[09:33:03.980]                   }
[09:33:03.980]                   ...future.strategy.old <- future::plan("list")
[09:33:03.980]                   options(future.plan = NULL)
[09:33:03.980]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.980]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:03.980]                 }
[09:33:03.980]                 ...future.workdir <- getwd()
[09:33:03.980]             }
[09:33:03.980]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:03.980]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:03.980]         }
[09:33:03.980]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:03.980]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:03.980]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:03.980]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:03.980]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:03.980]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:03.980]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:03.980]             base::names(...future.oldOptions))
[09:33:03.980]     }
[09:33:03.980]     if (TRUE) {
[09:33:03.980]     }
[09:33:03.980]     else {
[09:33:03.980]         if (NA) {
[09:33:03.980]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:03.980]                 open = "w")
[09:33:03.980]         }
[09:33:03.980]         else {
[09:33:03.980]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:03.980]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:03.980]         }
[09:33:03.980]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:03.980]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:03.980]             base::sink(type = "output", split = FALSE)
[09:33:03.980]             base::close(...future.stdout)
[09:33:03.980]         }, add = TRUE)
[09:33:03.980]     }
[09:33:03.980]     ...future.frame <- base::sys.nframe()
[09:33:03.980]     ...future.conditions <- base::list()
[09:33:03.980]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:03.980]     if (FALSE) {
[09:33:03.980]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:03.980]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:03.980]     }
[09:33:03.980]     ...future.result <- base::tryCatch({
[09:33:03.980]         base::withCallingHandlers({
[09:33:03.980]             ...future.value <- base::withVisible(base::local({
[09:33:03.980]                 print(1:50)
[09:33:03.980]                 str(1:50)
[09:33:03.980]                 cat(letters, sep = "-")
[09:33:03.980]                 cat(1:6, collapse = "\n")
[09:33:03.980]                 write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:03.980]                 42L
[09:33:03.980]             }))
[09:33:03.980]             future::FutureResult(value = ...future.value$value, 
[09:33:03.980]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.980]                   ...future.rng), globalenv = if (FALSE) 
[09:33:03.980]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:03.980]                     ...future.globalenv.names))
[09:33:03.980]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:03.980]         }, condition = base::local({
[09:33:03.980]             c <- base::c
[09:33:03.980]             inherits <- base::inherits
[09:33:03.980]             invokeRestart <- base::invokeRestart
[09:33:03.980]             length <- base::length
[09:33:03.980]             list <- base::list
[09:33:03.980]             seq.int <- base::seq.int
[09:33:03.980]             signalCondition <- base::signalCondition
[09:33:03.980]             sys.calls <- base::sys.calls
[09:33:03.980]             `[[` <- base::`[[`
[09:33:03.980]             `+` <- base::`+`
[09:33:03.980]             `<<-` <- base::`<<-`
[09:33:03.980]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:03.980]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:03.980]                   3L)]
[09:33:03.980]             }
[09:33:03.980]             function(cond) {
[09:33:03.980]                 is_error <- inherits(cond, "error")
[09:33:03.980]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:03.980]                   NULL)
[09:33:03.980]                 if (is_error) {
[09:33:03.980]                   sessionInformation <- function() {
[09:33:03.980]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:03.980]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:03.980]                       search = base::search(), system = base::Sys.info())
[09:33:03.980]                   }
[09:33:03.980]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.980]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:03.980]                     cond$call), session = sessionInformation(), 
[09:33:03.980]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:03.980]                   signalCondition(cond)
[09:33:03.980]                 }
[09:33:03.980]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:03.980]                 "immediateCondition"))) {
[09:33:03.980]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:03.980]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.980]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:03.980]                   if (TRUE && !signal) {
[09:33:03.980]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.980]                     {
[09:33:03.980]                       inherits <- base::inherits
[09:33:03.980]                       invokeRestart <- base::invokeRestart
[09:33:03.980]                       is.null <- base::is.null
[09:33:03.980]                       muffled <- FALSE
[09:33:03.980]                       if (inherits(cond, "message")) {
[09:33:03.980]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.980]                         if (muffled) 
[09:33:03.980]                           invokeRestart("muffleMessage")
[09:33:03.980]                       }
[09:33:03.980]                       else if (inherits(cond, "warning")) {
[09:33:03.980]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.980]                         if (muffled) 
[09:33:03.980]                           invokeRestart("muffleWarning")
[09:33:03.980]                       }
[09:33:03.980]                       else if (inherits(cond, "condition")) {
[09:33:03.980]                         if (!is.null(pattern)) {
[09:33:03.980]                           computeRestarts <- base::computeRestarts
[09:33:03.980]                           grepl <- base::grepl
[09:33:03.980]                           restarts <- computeRestarts(cond)
[09:33:03.980]                           for (restart in restarts) {
[09:33:03.980]                             name <- restart$name
[09:33:03.980]                             if (is.null(name)) 
[09:33:03.980]                               next
[09:33:03.980]                             if (!grepl(pattern, name)) 
[09:33:03.980]                               next
[09:33:03.980]                             invokeRestart(restart)
[09:33:03.980]                             muffled <- TRUE
[09:33:03.980]                             break
[09:33:03.980]                           }
[09:33:03.980]                         }
[09:33:03.980]                       }
[09:33:03.980]                       invisible(muffled)
[09:33:03.980]                     }
[09:33:03.980]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.980]                   }
[09:33:03.980]                 }
[09:33:03.980]                 else {
[09:33:03.980]                   if (TRUE) {
[09:33:03.980]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.980]                     {
[09:33:03.980]                       inherits <- base::inherits
[09:33:03.980]                       invokeRestart <- base::invokeRestart
[09:33:03.980]                       is.null <- base::is.null
[09:33:03.980]                       muffled <- FALSE
[09:33:03.980]                       if (inherits(cond, "message")) {
[09:33:03.980]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.980]                         if (muffled) 
[09:33:03.980]                           invokeRestart("muffleMessage")
[09:33:03.980]                       }
[09:33:03.980]                       else if (inherits(cond, "warning")) {
[09:33:03.980]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.980]                         if (muffled) 
[09:33:03.980]                           invokeRestart("muffleWarning")
[09:33:03.980]                       }
[09:33:03.980]                       else if (inherits(cond, "condition")) {
[09:33:03.980]                         if (!is.null(pattern)) {
[09:33:03.980]                           computeRestarts <- base::computeRestarts
[09:33:03.980]                           grepl <- base::grepl
[09:33:03.980]                           restarts <- computeRestarts(cond)
[09:33:03.980]                           for (restart in restarts) {
[09:33:03.980]                             name <- restart$name
[09:33:03.980]                             if (is.null(name)) 
[09:33:03.980]                               next
[09:33:03.980]                             if (!grepl(pattern, name)) 
[09:33:03.980]                               next
[09:33:03.980]                             invokeRestart(restart)
[09:33:03.980]                             muffled <- TRUE
[09:33:03.980]                             break
[09:33:03.980]                           }
[09:33:03.980]                         }
[09:33:03.980]                       }
[09:33:03.980]                       invisible(muffled)
[09:33:03.980]                     }
[09:33:03.980]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.980]                   }
[09:33:03.980]                 }
[09:33:03.980]             }
[09:33:03.980]         }))
[09:33:03.980]     }, error = function(ex) {
[09:33:03.980]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:03.980]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.980]                 ...future.rng), started = ...future.startTime, 
[09:33:03.980]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:03.980]             version = "1.8"), class = "FutureResult")
[09:33:03.980]     }, finally = {
[09:33:03.980]         if (!identical(...future.workdir, getwd())) 
[09:33:03.980]             setwd(...future.workdir)
[09:33:03.980]         {
[09:33:03.980]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:03.980]                 ...future.oldOptions$nwarnings <- NULL
[09:33:03.980]             }
[09:33:03.980]             base::options(...future.oldOptions)
[09:33:03.980]             if (.Platform$OS.type == "windows") {
[09:33:03.980]                 old_names <- names(...future.oldEnvVars)
[09:33:03.980]                 envs <- base::Sys.getenv()
[09:33:03.980]                 names <- names(envs)
[09:33:03.980]                 common <- intersect(names, old_names)
[09:33:03.980]                 added <- setdiff(names, old_names)
[09:33:03.980]                 removed <- setdiff(old_names, names)
[09:33:03.980]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:03.980]                   envs[common]]
[09:33:03.980]                 NAMES <- toupper(changed)
[09:33:03.980]                 args <- list()
[09:33:03.980]                 for (kk in seq_along(NAMES)) {
[09:33:03.980]                   name <- changed[[kk]]
[09:33:03.980]                   NAME <- NAMES[[kk]]
[09:33:03.980]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.980]                     next
[09:33:03.980]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.980]                 }
[09:33:03.980]                 NAMES <- toupper(added)
[09:33:03.980]                 for (kk in seq_along(NAMES)) {
[09:33:03.980]                   name <- added[[kk]]
[09:33:03.980]                   NAME <- NAMES[[kk]]
[09:33:03.980]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.980]                     next
[09:33:03.980]                   args[[name]] <- ""
[09:33:03.980]                 }
[09:33:03.980]                 NAMES <- toupper(removed)
[09:33:03.980]                 for (kk in seq_along(NAMES)) {
[09:33:03.980]                   name <- removed[[kk]]
[09:33:03.980]                   NAME <- NAMES[[kk]]
[09:33:03.980]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.980]                     next
[09:33:03.980]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.980]                 }
[09:33:03.980]                 if (length(args) > 0) 
[09:33:03.980]                   base::do.call(base::Sys.setenv, args = args)
[09:33:03.980]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:03.980]             }
[09:33:03.980]             else {
[09:33:03.980]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:03.980]             }
[09:33:03.980]             {
[09:33:03.980]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:03.980]                   0L) {
[09:33:03.980]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:03.980]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:03.980]                   base::options(opts)
[09:33:03.980]                 }
[09:33:03.980]                 {
[09:33:03.980]                   {
[09:33:03.980]                     NULL
[09:33:03.980]                     RNGkind("Mersenne-Twister")
[09:33:03.980]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:33:03.980]                       inherits = FALSE)
[09:33:03.980]                   }
[09:33:03.980]                   options(future.plan = NULL)
[09:33:03.980]                   if (is.na(NA_character_)) 
[09:33:03.980]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.980]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:03.980]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:03.980]                     .init = FALSE)
[09:33:03.980]                 }
[09:33:03.980]             }
[09:33:03.980]         }
[09:33:03.980]     })
[09:33:03.980]     if (FALSE) {
[09:33:03.980]         base::sink(type = "output", split = FALSE)
[09:33:03.980]         if (NA) {
[09:33:03.980]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:03.980]         }
[09:33:03.980]         else {
[09:33:03.980]             ...future.result["stdout"] <- base::list(NULL)
[09:33:03.980]         }
[09:33:03.980]         base::close(...future.stdout)
[09:33:03.980]         ...future.stdout <- NULL
[09:33:03.980]     }
[09:33:03.980]     ...future.result$conditions <- ...future.conditions
[09:33:03.980]     ...future.result$finished <- base::Sys.time()
[09:33:03.980]     ...future.result
[09:33:03.980] }
[09:33:03.982] plan(): Setting new future strategy stack:
[09:33:03.982] List of future strategies:
[09:33:03.982] 1. sequential:
[09:33:03.982]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.982]    - tweaked: FALSE
[09:33:03.982]    - call: NULL
[09:33:03.982] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[09:33:03.984] plan(): Setting new future strategy stack:
[09:33:03.984] List of future strategies:
[09:33:03.984] 1. sequential:
[09:33:03.984]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.984]    - tweaked: FALSE
[09:33:03.984]    - call: plan(strategy)
[09:33:03.984] plan(): nbrOfWorkers() = 1
[09:33:03.984] SequentialFuture started (and completed)
[09:33:03.984] - Launch lazy future ... done
[09:33:03.985] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 09:33:03"
 $ finished    : POSIXct[1:1], format: "2024-12-19 09:33:03"
 $ session_uuid: chr "88298579-8cba-59c7-c5c1-51599ab08e19"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "8f1daa72e372"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "8f1daa72e372" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 50427
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 09:33:03"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[09:33:03.992] getGlobalsAndPackages() ...
[09:33:03.992] Searching for globals...
[09:33:03.994] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:03.995] Searching for globals ... DONE
[09:33:03.995] Resolving globals: FALSE
[09:33:03.995] 
[09:33:03.995] - packages: [1] ‘utils’
[09:33:03.995] getGlobalsAndPackages() ... DONE
[09:33:03.995] run() for ‘Future’ ...
[09:33:03.996] - state: ‘created’
[09:33:03.996] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:33:03.996] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:33:03.996] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:33:03.996]   - Field: ‘label’
[09:33:03.996]   - Field: ‘local’
[09:33:03.996]   - Field: ‘owner’
[09:33:03.996]   - Field: ‘envir’
[09:33:03.997]   - Field: ‘packages’
[09:33:03.997]   - Field: ‘gc’
[09:33:03.997]   - Field: ‘conditions’
[09:33:03.997]   - Field: ‘expr’
[09:33:03.997]   - Field: ‘uuid’
[09:33:03.997]   - Field: ‘seed’
[09:33:03.997]   - Field: ‘version’
[09:33:03.997]   - Field: ‘result’
[09:33:03.997]   - Field: ‘asynchronous’
[09:33:03.997]   - Field: ‘calls’
[09:33:03.997]   - Field: ‘globals’
[09:33:03.997]   - Field: ‘stdout’
[09:33:03.998]   - Field: ‘earlySignal’
[09:33:03.998]   - Field: ‘lazy’
[09:33:03.998]   - Field: ‘state’
[09:33:03.999] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:33:03.999] - Launch lazy future ...
[09:33:03.999] Packages needed by the future expression (n = 1): ‘utils’
[09:33:03.999] Packages needed by future strategies (n = 0): <none>
[09:33:03.999] {
[09:33:03.999]     {
[09:33:03.999]         {
[09:33:03.999]             ...future.startTime <- base::Sys.time()
[09:33:03.999]             {
[09:33:03.999]                 {
[09:33:03.999]                   {
[09:33:03.999]                     {
[09:33:03.999]                       base::local({
[09:33:03.999]                         has_future <- base::requireNamespace("future", 
[09:33:03.999]                           quietly = TRUE)
[09:33:03.999]                         if (has_future) {
[09:33:03.999]                           ns <- base::getNamespace("future")
[09:33:03.999]                           version <- ns[[".package"]][["version"]]
[09:33:03.999]                           if (is.null(version)) 
[09:33:03.999]                             version <- utils::packageVersion("future")
[09:33:03.999]                         }
[09:33:03.999]                         else {
[09:33:03.999]                           version <- NULL
[09:33:03.999]                         }
[09:33:03.999]                         if (!has_future || version < "1.8.0") {
[09:33:03.999]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:03.999]                             "", base::R.version$version.string), 
[09:33:03.999]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:03.999]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:03.999]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:03.999]                               "release", "version")], collapse = " "), 
[09:33:03.999]                             hostname = base::Sys.info()[["nodename"]])
[09:33:03.999]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:03.999]                             info)
[09:33:03.999]                           info <- base::paste(info, collapse = "; ")
[09:33:03.999]                           if (!has_future) {
[09:33:03.999]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:03.999]                               info)
[09:33:03.999]                           }
[09:33:03.999]                           else {
[09:33:03.999]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:03.999]                               info, version)
[09:33:03.999]                           }
[09:33:03.999]                           base::stop(msg)
[09:33:03.999]                         }
[09:33:03.999]                       })
[09:33:03.999]                     }
[09:33:03.999]                     base::local({
[09:33:03.999]                       for (pkg in "utils") {
[09:33:03.999]                         base::loadNamespace(pkg)
[09:33:03.999]                         base::library(pkg, character.only = TRUE)
[09:33:03.999]                       }
[09:33:03.999]                     })
[09:33:03.999]                   }
[09:33:03.999]                   ...future.strategy.old <- future::plan("list")
[09:33:03.999]                   options(future.plan = NULL)
[09:33:03.999]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.999]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:03.999]                 }
[09:33:03.999]                 ...future.workdir <- getwd()
[09:33:03.999]             }
[09:33:03.999]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:03.999]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:03.999]         }
[09:33:03.999]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:03.999]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:03.999]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:03.999]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:03.999]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:03.999]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:03.999]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:03.999]             base::names(...future.oldOptions))
[09:33:03.999]     }
[09:33:03.999]     if (TRUE) {
[09:33:03.999]     }
[09:33:03.999]     else {
[09:33:03.999]         if (NA) {
[09:33:03.999]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:03.999]                 open = "w")
[09:33:03.999]         }
[09:33:03.999]         else {
[09:33:03.999]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:03.999]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:03.999]         }
[09:33:03.999]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:03.999]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:03.999]             base::sink(type = "output", split = FALSE)
[09:33:03.999]             base::close(...future.stdout)
[09:33:03.999]         }, add = TRUE)
[09:33:03.999]     }
[09:33:03.999]     ...future.frame <- base::sys.nframe()
[09:33:03.999]     ...future.conditions <- base::list()
[09:33:03.999]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:03.999]     if (FALSE) {
[09:33:03.999]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:03.999]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:03.999]     }
[09:33:03.999]     ...future.result <- base::tryCatch({
[09:33:03.999]         base::withCallingHandlers({
[09:33:03.999]             ...future.value <- base::withVisible(base::local({
[09:33:03.999]                 print(1:50)
[09:33:03.999]                 str(1:50)
[09:33:03.999]                 cat(letters, sep = "-")
[09:33:03.999]                 cat(1:6, collapse = "\n")
[09:33:03.999]                 write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:03.999]                 42L
[09:33:03.999]             }))
[09:33:03.999]             future::FutureResult(value = ...future.value$value, 
[09:33:03.999]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.999]                   ...future.rng), globalenv = if (FALSE) 
[09:33:03.999]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:03.999]                     ...future.globalenv.names))
[09:33:03.999]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:03.999]         }, condition = base::local({
[09:33:03.999]             c <- base::c
[09:33:03.999]             inherits <- base::inherits
[09:33:03.999]             invokeRestart <- base::invokeRestart
[09:33:03.999]             length <- base::length
[09:33:03.999]             list <- base::list
[09:33:03.999]             seq.int <- base::seq.int
[09:33:03.999]             signalCondition <- base::signalCondition
[09:33:03.999]             sys.calls <- base::sys.calls
[09:33:03.999]             `[[` <- base::`[[`
[09:33:03.999]             `+` <- base::`+`
[09:33:03.999]             `<<-` <- base::`<<-`
[09:33:03.999]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:03.999]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:03.999]                   3L)]
[09:33:03.999]             }
[09:33:03.999]             function(cond) {
[09:33:03.999]                 is_error <- inherits(cond, "error")
[09:33:03.999]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:03.999]                   NULL)
[09:33:03.999]                 if (is_error) {
[09:33:03.999]                   sessionInformation <- function() {
[09:33:03.999]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:03.999]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:03.999]                       search = base::search(), system = base::Sys.info())
[09:33:03.999]                   }
[09:33:03.999]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.999]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:03.999]                     cond$call), session = sessionInformation(), 
[09:33:03.999]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:03.999]                   signalCondition(cond)
[09:33:03.999]                 }
[09:33:03.999]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:03.999]                 "immediateCondition"))) {
[09:33:03.999]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:03.999]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.999]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:03.999]                   if (TRUE && !signal) {
[09:33:03.999]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.999]                     {
[09:33:03.999]                       inherits <- base::inherits
[09:33:03.999]                       invokeRestart <- base::invokeRestart
[09:33:03.999]                       is.null <- base::is.null
[09:33:03.999]                       muffled <- FALSE
[09:33:03.999]                       if (inherits(cond, "message")) {
[09:33:03.999]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.999]                         if (muffled) 
[09:33:03.999]                           invokeRestart("muffleMessage")
[09:33:03.999]                       }
[09:33:03.999]                       else if (inherits(cond, "warning")) {
[09:33:03.999]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.999]                         if (muffled) 
[09:33:03.999]                           invokeRestart("muffleWarning")
[09:33:03.999]                       }
[09:33:03.999]                       else if (inherits(cond, "condition")) {
[09:33:03.999]                         if (!is.null(pattern)) {
[09:33:03.999]                           computeRestarts <- base::computeRestarts
[09:33:03.999]                           grepl <- base::grepl
[09:33:03.999]                           restarts <- computeRestarts(cond)
[09:33:03.999]                           for (restart in restarts) {
[09:33:03.999]                             name <- restart$name
[09:33:03.999]                             if (is.null(name)) 
[09:33:03.999]                               next
[09:33:03.999]                             if (!grepl(pattern, name)) 
[09:33:03.999]                               next
[09:33:03.999]                             invokeRestart(restart)
[09:33:03.999]                             muffled <- TRUE
[09:33:03.999]                             break
[09:33:03.999]                           }
[09:33:03.999]                         }
[09:33:03.999]                       }
[09:33:03.999]                       invisible(muffled)
[09:33:03.999]                     }
[09:33:03.999]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.999]                   }
[09:33:03.999]                 }
[09:33:03.999]                 else {
[09:33:03.999]                   if (TRUE) {
[09:33:03.999]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.999]                     {
[09:33:03.999]                       inherits <- base::inherits
[09:33:03.999]                       invokeRestart <- base::invokeRestart
[09:33:03.999]                       is.null <- base::is.null
[09:33:03.999]                       muffled <- FALSE
[09:33:03.999]                       if (inherits(cond, "message")) {
[09:33:03.999]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.999]                         if (muffled) 
[09:33:03.999]                           invokeRestart("muffleMessage")
[09:33:03.999]                       }
[09:33:03.999]                       else if (inherits(cond, "warning")) {
[09:33:03.999]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.999]                         if (muffled) 
[09:33:03.999]                           invokeRestart("muffleWarning")
[09:33:03.999]                       }
[09:33:03.999]                       else if (inherits(cond, "condition")) {
[09:33:03.999]                         if (!is.null(pattern)) {
[09:33:03.999]                           computeRestarts <- base::computeRestarts
[09:33:03.999]                           grepl <- base::grepl
[09:33:03.999]                           restarts <- computeRestarts(cond)
[09:33:03.999]                           for (restart in restarts) {
[09:33:03.999]                             name <- restart$name
[09:33:03.999]                             if (is.null(name)) 
[09:33:03.999]                               next
[09:33:03.999]                             if (!grepl(pattern, name)) 
[09:33:03.999]                               next
[09:33:03.999]                             invokeRestart(restart)
[09:33:03.999]                             muffled <- TRUE
[09:33:03.999]                             break
[09:33:03.999]                           }
[09:33:03.999]                         }
[09:33:03.999]                       }
[09:33:03.999]                       invisible(muffled)
[09:33:03.999]                     }
[09:33:03.999]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.999]                   }
[09:33:03.999]                 }
[09:33:03.999]             }
[09:33:03.999]         }))
[09:33:03.999]     }, error = function(ex) {
[09:33:03.999]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:03.999]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.999]                 ...future.rng), started = ...future.startTime, 
[09:33:03.999]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:03.999]             version = "1.8"), class = "FutureResult")
[09:33:03.999]     }, finally = {
[09:33:03.999]         if (!identical(...future.workdir, getwd())) 
[09:33:03.999]             setwd(...future.workdir)
[09:33:03.999]         {
[09:33:03.999]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:03.999]                 ...future.oldOptions$nwarnings <- NULL
[09:33:03.999]             }
[09:33:03.999]             base::options(...future.oldOptions)
[09:33:03.999]             if (.Platform$OS.type == "windows") {
[09:33:03.999]                 old_names <- names(...future.oldEnvVars)
[09:33:03.999]                 envs <- base::Sys.getenv()
[09:33:03.999]                 names <- names(envs)
[09:33:03.999]                 common <- intersect(names, old_names)
[09:33:03.999]                 added <- setdiff(names, old_names)
[09:33:03.999]                 removed <- setdiff(old_names, names)
[09:33:03.999]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:03.999]                   envs[common]]
[09:33:03.999]                 NAMES <- toupper(changed)
[09:33:03.999]                 args <- list()
[09:33:03.999]                 for (kk in seq_along(NAMES)) {
[09:33:03.999]                   name <- changed[[kk]]
[09:33:03.999]                   NAME <- NAMES[[kk]]
[09:33:03.999]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.999]                     next
[09:33:03.999]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.999]                 }
[09:33:03.999]                 NAMES <- toupper(added)
[09:33:03.999]                 for (kk in seq_along(NAMES)) {
[09:33:03.999]                   name <- added[[kk]]
[09:33:03.999]                   NAME <- NAMES[[kk]]
[09:33:03.999]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.999]                     next
[09:33:03.999]                   args[[name]] <- ""
[09:33:03.999]                 }
[09:33:03.999]                 NAMES <- toupper(removed)
[09:33:03.999]                 for (kk in seq_along(NAMES)) {
[09:33:03.999]                   name <- removed[[kk]]
[09:33:03.999]                   NAME <- NAMES[[kk]]
[09:33:03.999]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.999]                     next
[09:33:03.999]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.999]                 }
[09:33:03.999]                 if (length(args) > 0) 
[09:33:03.999]                   base::do.call(base::Sys.setenv, args = args)
[09:33:03.999]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:03.999]             }
[09:33:03.999]             else {
[09:33:03.999]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:03.999]             }
[09:33:03.999]             {
[09:33:03.999]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:03.999]                   0L) {
[09:33:03.999]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:03.999]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:03.999]                   base::options(opts)
[09:33:03.999]                 }
[09:33:03.999]                 {
[09:33:03.999]                   {
[09:33:03.999]                     NULL
[09:33:03.999]                     RNGkind("Mersenne-Twister")
[09:33:03.999]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:33:03.999]                       inherits = FALSE)
[09:33:03.999]                   }
[09:33:03.999]                   options(future.plan = NULL)
[09:33:03.999]                   if (is.na(NA_character_)) 
[09:33:03.999]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.999]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:03.999]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:03.999]                     .init = FALSE)
[09:33:03.999]                 }
[09:33:03.999]             }
[09:33:03.999]         }
[09:33:03.999]     })
[09:33:03.999]     if (FALSE) {
[09:33:03.999]         base::sink(type = "output", split = FALSE)
[09:33:03.999]         if (NA) {
[09:33:03.999]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:03.999]         }
[09:33:03.999]         else {
[09:33:03.999]             ...future.result["stdout"] <- base::list(NULL)
[09:33:03.999]         }
[09:33:03.999]         base::close(...future.stdout)
[09:33:03.999]         ...future.stdout <- NULL
[09:33:03.999]     }
[09:33:03.999]     ...future.result$conditions <- ...future.conditions
[09:33:03.999]     ...future.result$finished <- base::Sys.time()
[09:33:03.999]     ...future.result
[09:33:03.999] }
[09:33:04.001] plan(): Setting new future strategy stack:
[09:33:04.001] List of future strategies:
[09:33:04.001] 1. sequential:
[09:33:04.001]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.001]    - tweaked: FALSE
[09:33:04.001]    - call: NULL
[09:33:04.002] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[09:33:04.003] plan(): Setting new future strategy stack:
[09:33:04.003] List of future strategies:
[09:33:04.003] 1. sequential:
[09:33:04.003]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.003]    - tweaked: FALSE
[09:33:04.003]    - call: plan(strategy)
[09:33:04.004] plan(): nbrOfWorkers() = 1
[09:33:04.004] SequentialFuture started (and completed)
[09:33:04.004] - Launch lazy future ... done
[09:33:04.004] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[09:33:04.004] getGlobalsAndPackages() ...
[09:33:04.004] Searching for globals...
[09:33:04.005] - globals found: [1] ‘print’
[09:33:04.005] Searching for globals ... DONE
[09:33:04.005] Resolving globals: FALSE
[09:33:04.005] 
[09:33:04.005] 
[09:33:04.005] getGlobalsAndPackages() ... DONE
[09:33:04.006] run() for ‘Future’ ...
[09:33:04.006] - state: ‘created’
[09:33:04.006] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:33:04.006] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:33:04.006] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:33:04.006]   - Field: ‘label’
[09:33:04.006]   - Field: ‘local’
[09:33:04.006]   - Field: ‘owner’
[09:33:04.007]   - Field: ‘envir’
[09:33:04.007]   - Field: ‘packages’
[09:33:04.007]   - Field: ‘gc’
[09:33:04.007]   - Field: ‘conditions’
[09:33:04.007]   - Field: ‘expr’
[09:33:04.007]   - Field: ‘uuid’
[09:33:04.007]   - Field: ‘seed’
[09:33:04.007]   - Field: ‘version’
[09:33:04.007]   - Field: ‘result’
[09:33:04.007]   - Field: ‘asynchronous’
[09:33:04.007]   - Field: ‘calls’
[09:33:04.007]   - Field: ‘globals’
[09:33:04.008]   - Field: ‘stdout’
[09:33:04.008]   - Field: ‘earlySignal’
[09:33:04.008]   - Field: ‘lazy’
[09:33:04.008]   - Field: ‘state’
[09:33:04.008] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:33:04.008] - Launch lazy future ...
[09:33:04.008] Packages needed by the future expression (n = 0): <none>
[09:33:04.008] Packages needed by future strategies (n = 0): <none>
[09:33:04.009] {
[09:33:04.009]     {
[09:33:04.009]         {
[09:33:04.009]             ...future.startTime <- base::Sys.time()
[09:33:04.009]             {
[09:33:04.009]                 {
[09:33:04.009]                   {
[09:33:04.009]                     base::local({
[09:33:04.009]                       has_future <- base::requireNamespace("future", 
[09:33:04.009]                         quietly = TRUE)
[09:33:04.009]                       if (has_future) {
[09:33:04.009]                         ns <- base::getNamespace("future")
[09:33:04.009]                         version <- ns[[".package"]][["version"]]
[09:33:04.009]                         if (is.null(version)) 
[09:33:04.009]                           version <- utils::packageVersion("future")
[09:33:04.009]                       }
[09:33:04.009]                       else {
[09:33:04.009]                         version <- NULL
[09:33:04.009]                       }
[09:33:04.009]                       if (!has_future || version < "1.8.0") {
[09:33:04.009]                         info <- base::c(r_version = base::gsub("R version ", 
[09:33:04.009]                           "", base::R.version$version.string), 
[09:33:04.009]                           platform = base::sprintf("%s (%s-bit)", 
[09:33:04.009]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:04.009]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:04.009]                             "release", "version")], collapse = " "), 
[09:33:04.009]                           hostname = base::Sys.info()[["nodename"]])
[09:33:04.009]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:33:04.009]                           info)
[09:33:04.009]                         info <- base::paste(info, collapse = "; ")
[09:33:04.009]                         if (!has_future) {
[09:33:04.009]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:04.009]                             info)
[09:33:04.009]                         }
[09:33:04.009]                         else {
[09:33:04.009]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:04.009]                             info, version)
[09:33:04.009]                         }
[09:33:04.009]                         base::stop(msg)
[09:33:04.009]                       }
[09:33:04.009]                     })
[09:33:04.009]                   }
[09:33:04.009]                   ...future.strategy.old <- future::plan("list")
[09:33:04.009]                   options(future.plan = NULL)
[09:33:04.009]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.009]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:04.009]                 }
[09:33:04.009]                 ...future.workdir <- getwd()
[09:33:04.009]             }
[09:33:04.009]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:04.009]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:04.009]         }
[09:33:04.009]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:04.009]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:04.009]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:04.009]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:04.009]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:04.009]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:04.009]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:04.009]             base::names(...future.oldOptions))
[09:33:04.009]     }
[09:33:04.009]     if (FALSE) {
[09:33:04.009]     }
[09:33:04.009]     else {
[09:33:04.009]         if (TRUE) {
[09:33:04.009]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:04.009]                 open = "w")
[09:33:04.009]         }
[09:33:04.009]         else {
[09:33:04.009]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:04.009]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:04.009]         }
[09:33:04.009]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:04.009]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:04.009]             base::sink(type = "output", split = FALSE)
[09:33:04.009]             base::close(...future.stdout)
[09:33:04.009]         }, add = TRUE)
[09:33:04.009]     }
[09:33:04.009]     ...future.frame <- base::sys.nframe()
[09:33:04.009]     ...future.conditions <- base::list()
[09:33:04.009]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:04.009]     if (FALSE) {
[09:33:04.009]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:04.009]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:04.009]     }
[09:33:04.009]     ...future.result <- base::tryCatch({
[09:33:04.009]         base::withCallingHandlers({
[09:33:04.009]             ...future.value <- base::withVisible(base::local(print(42)))
[09:33:04.009]             future::FutureResult(value = ...future.value$value, 
[09:33:04.009]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.009]                   ...future.rng), globalenv = if (FALSE) 
[09:33:04.009]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:04.009]                     ...future.globalenv.names))
[09:33:04.009]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:04.009]         }, condition = base::local({
[09:33:04.009]             c <- base::c
[09:33:04.009]             inherits <- base::inherits
[09:33:04.009]             invokeRestart <- base::invokeRestart
[09:33:04.009]             length <- base::length
[09:33:04.009]             list <- base::list
[09:33:04.009]             seq.int <- base::seq.int
[09:33:04.009]             signalCondition <- base::signalCondition
[09:33:04.009]             sys.calls <- base::sys.calls
[09:33:04.009]             `[[` <- base::`[[`
[09:33:04.009]             `+` <- base::`+`
[09:33:04.009]             `<<-` <- base::`<<-`
[09:33:04.009]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:04.009]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:04.009]                   3L)]
[09:33:04.009]             }
[09:33:04.009]             function(cond) {
[09:33:04.009]                 is_error <- inherits(cond, "error")
[09:33:04.009]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:04.009]                   NULL)
[09:33:04.009]                 if (is_error) {
[09:33:04.009]                   sessionInformation <- function() {
[09:33:04.009]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:04.009]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:04.009]                       search = base::search(), system = base::Sys.info())
[09:33:04.009]                   }
[09:33:04.009]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.009]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:04.009]                     cond$call), session = sessionInformation(), 
[09:33:04.009]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:04.009]                   signalCondition(cond)
[09:33:04.009]                 }
[09:33:04.009]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:04.009]                 "immediateCondition"))) {
[09:33:04.009]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:04.009]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.009]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:04.009]                   if (TRUE && !signal) {
[09:33:04.009]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.009]                     {
[09:33:04.009]                       inherits <- base::inherits
[09:33:04.009]                       invokeRestart <- base::invokeRestart
[09:33:04.009]                       is.null <- base::is.null
[09:33:04.009]                       muffled <- FALSE
[09:33:04.009]                       if (inherits(cond, "message")) {
[09:33:04.009]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.009]                         if (muffled) 
[09:33:04.009]                           invokeRestart("muffleMessage")
[09:33:04.009]                       }
[09:33:04.009]                       else if (inherits(cond, "warning")) {
[09:33:04.009]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.009]                         if (muffled) 
[09:33:04.009]                           invokeRestart("muffleWarning")
[09:33:04.009]                       }
[09:33:04.009]                       else if (inherits(cond, "condition")) {
[09:33:04.009]                         if (!is.null(pattern)) {
[09:33:04.009]                           computeRestarts <- base::computeRestarts
[09:33:04.009]                           grepl <- base::grepl
[09:33:04.009]                           restarts <- computeRestarts(cond)
[09:33:04.009]                           for (restart in restarts) {
[09:33:04.009]                             name <- restart$name
[09:33:04.009]                             if (is.null(name)) 
[09:33:04.009]                               next
[09:33:04.009]                             if (!grepl(pattern, name)) 
[09:33:04.009]                               next
[09:33:04.009]                             invokeRestart(restart)
[09:33:04.009]                             muffled <- TRUE
[09:33:04.009]                             break
[09:33:04.009]                           }
[09:33:04.009]                         }
[09:33:04.009]                       }
[09:33:04.009]                       invisible(muffled)
[09:33:04.009]                     }
[09:33:04.009]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.009]                   }
[09:33:04.009]                 }
[09:33:04.009]                 else {
[09:33:04.009]                   if (TRUE) {
[09:33:04.009]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.009]                     {
[09:33:04.009]                       inherits <- base::inherits
[09:33:04.009]                       invokeRestart <- base::invokeRestart
[09:33:04.009]                       is.null <- base::is.null
[09:33:04.009]                       muffled <- FALSE
[09:33:04.009]                       if (inherits(cond, "message")) {
[09:33:04.009]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.009]                         if (muffled) 
[09:33:04.009]                           invokeRestart("muffleMessage")
[09:33:04.009]                       }
[09:33:04.009]                       else if (inherits(cond, "warning")) {
[09:33:04.009]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.009]                         if (muffled) 
[09:33:04.009]                           invokeRestart("muffleWarning")
[09:33:04.009]                       }
[09:33:04.009]                       else if (inherits(cond, "condition")) {
[09:33:04.009]                         if (!is.null(pattern)) {
[09:33:04.009]                           computeRestarts <- base::computeRestarts
[09:33:04.009]                           grepl <- base::grepl
[09:33:04.009]                           restarts <- computeRestarts(cond)
[09:33:04.009]                           for (restart in restarts) {
[09:33:04.009]                             name <- restart$name
[09:33:04.009]                             if (is.null(name)) 
[09:33:04.009]                               next
[09:33:04.009]                             if (!grepl(pattern, name)) 
[09:33:04.009]                               next
[09:33:04.009]                             invokeRestart(restart)
[09:33:04.009]                             muffled <- TRUE
[09:33:04.009]                             break
[09:33:04.009]                           }
[09:33:04.009]                         }
[09:33:04.009]                       }
[09:33:04.009]                       invisible(muffled)
[09:33:04.009]                     }
[09:33:04.009]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.009]                   }
[09:33:04.009]                 }
[09:33:04.009]             }
[09:33:04.009]         }))
[09:33:04.009]     }, error = function(ex) {
[09:33:04.009]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:04.009]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.009]                 ...future.rng), started = ...future.startTime, 
[09:33:04.009]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:04.009]             version = "1.8"), class = "FutureResult")
[09:33:04.009]     }, finally = {
[09:33:04.009]         if (!identical(...future.workdir, getwd())) 
[09:33:04.009]             setwd(...future.workdir)
[09:33:04.009]         {
[09:33:04.009]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:04.009]                 ...future.oldOptions$nwarnings <- NULL
[09:33:04.009]             }
[09:33:04.009]             base::options(...future.oldOptions)
[09:33:04.009]             if (.Platform$OS.type == "windows") {
[09:33:04.009]                 old_names <- names(...future.oldEnvVars)
[09:33:04.009]                 envs <- base::Sys.getenv()
[09:33:04.009]                 names <- names(envs)
[09:33:04.009]                 common <- intersect(names, old_names)
[09:33:04.009]                 added <- setdiff(names, old_names)
[09:33:04.009]                 removed <- setdiff(old_names, names)
[09:33:04.009]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:04.009]                   envs[common]]
[09:33:04.009]                 NAMES <- toupper(changed)
[09:33:04.009]                 args <- list()
[09:33:04.009]                 for (kk in seq_along(NAMES)) {
[09:33:04.009]                   name <- changed[[kk]]
[09:33:04.009]                   NAME <- NAMES[[kk]]
[09:33:04.009]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.009]                     next
[09:33:04.009]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.009]                 }
[09:33:04.009]                 NAMES <- toupper(added)
[09:33:04.009]                 for (kk in seq_along(NAMES)) {
[09:33:04.009]                   name <- added[[kk]]
[09:33:04.009]                   NAME <- NAMES[[kk]]
[09:33:04.009]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.009]                     next
[09:33:04.009]                   args[[name]] <- ""
[09:33:04.009]                 }
[09:33:04.009]                 NAMES <- toupper(removed)
[09:33:04.009]                 for (kk in seq_along(NAMES)) {
[09:33:04.009]                   name <- removed[[kk]]
[09:33:04.009]                   NAME <- NAMES[[kk]]
[09:33:04.009]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.009]                     next
[09:33:04.009]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.009]                 }
[09:33:04.009]                 if (length(args) > 0) 
[09:33:04.009]                   base::do.call(base::Sys.setenv, args = args)
[09:33:04.009]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:04.009]             }
[09:33:04.009]             else {
[09:33:04.009]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:04.009]             }
[09:33:04.009]             {
[09:33:04.009]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:04.009]                   0L) {
[09:33:04.009]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:04.009]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:04.009]                   base::options(opts)
[09:33:04.009]                 }
[09:33:04.009]                 {
[09:33:04.009]                   {
[09:33:04.009]                     NULL
[09:33:04.009]                     RNGkind("Mersenne-Twister")
[09:33:04.009]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:33:04.009]                       inherits = FALSE)
[09:33:04.009]                   }
[09:33:04.009]                   options(future.plan = NULL)
[09:33:04.009]                   if (is.na(NA_character_)) 
[09:33:04.009]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.009]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:04.009]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:04.009]                     .init = FALSE)
[09:33:04.009]                 }
[09:33:04.009]             }
[09:33:04.009]         }
[09:33:04.009]     })
[09:33:04.009]     if (TRUE) {
[09:33:04.009]         base::sink(type = "output", split = FALSE)
[09:33:04.009]         if (TRUE) {
[09:33:04.009]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:04.009]         }
[09:33:04.009]         else {
[09:33:04.009]             ...future.result["stdout"] <- base::list(NULL)
[09:33:04.009]         }
[09:33:04.009]         base::close(...future.stdout)
[09:33:04.009]         ...future.stdout <- NULL
[09:33:04.009]     }
[09:33:04.009]     ...future.result$conditions <- ...future.conditions
[09:33:04.009]     ...future.result$finished <- base::Sys.time()
[09:33:04.009]     ...future.result
[09:33:04.009] }
[09:33:04.010] plan(): Setting new future strategy stack:
[09:33:04.010] List of future strategies:
[09:33:04.010] 1. sequential:
[09:33:04.010]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.010]    - tweaked: FALSE
[09:33:04.010]    - call: NULL
[09:33:04.011] plan(): nbrOfWorkers() = 1
[09:33:04.011] plan(): Setting new future strategy stack:
[09:33:04.011] List of future strategies:
[09:33:04.011] 1. sequential:
[09:33:04.011]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.011]    - tweaked: FALSE
[09:33:04.011]    - call: plan(strategy)
[09:33:04.012] plan(): nbrOfWorkers() = 1
[09:33:04.012] SequentialFuture started (and completed)
[09:33:04.012] - Launch lazy future ... done
[09:33:04.012] run() for ‘SequentialFuture’ ... done
[1] 42
sequential ... done
Testing with 1 cores ... done
Testing with 2 cores ...
multicore ...
[09:33:04.017] plan(): Setting new future strategy stack:
[09:33:04.017] List of future strategies:
[09:33:04.017] 1. multicore:
[09:33:04.017]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:33:04.017]    - tweaked: FALSE
[09:33:04.017]    - call: plan(strategy)
[09:33:04.021] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[09:33:04.021] getGlobalsAndPackages() ...
[09:33:04.021] Searching for globals...
[09:33:04.024] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:04.024] Searching for globals ... DONE
[09:33:04.024] Resolving globals: FALSE
[09:33:04.024] 
[09:33:04.025] - packages: [1] ‘utils’
[09:33:04.025] getGlobalsAndPackages() ... DONE
[09:33:04.025] run() for ‘Future’ ...
[09:33:04.025] - state: ‘created’
[09:33:04.025] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:33:04.029] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:04.030] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:33:04.030]   - Field: ‘label’
[09:33:04.030]   - Field: ‘local’
[09:33:04.030]   - Field: ‘owner’
[09:33:04.030]   - Field: ‘envir’
[09:33:04.030]   - Field: ‘workers’
[09:33:04.030]   - Field: ‘packages’
[09:33:04.030]   - Field: ‘gc’
[09:33:04.030]   - Field: ‘job’
[09:33:04.030]   - Field: ‘conditions’
[09:33:04.030]   - Field: ‘expr’
[09:33:04.031]   - Field: ‘uuid’
[09:33:04.031]   - Field: ‘seed’
[09:33:04.031]   - Field: ‘version’
[09:33:04.031]   - Field: ‘result’
[09:33:04.031]   - Field: ‘asynchronous’
[09:33:04.031]   - Field: ‘calls’
[09:33:04.031]   - Field: ‘globals’
[09:33:04.031]   - Field: ‘stdout’
[09:33:04.031]   - Field: ‘earlySignal’
[09:33:04.031]   - Field: ‘lazy’
[09:33:04.031]   - Field: ‘state’
[09:33:04.031] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:33:04.032] - Launch lazy future ...
[09:33:04.032] Packages needed by the future expression (n = 1): ‘utils’
[09:33:04.033] Packages needed by future strategies (n = 0): <none>
[09:33:04.033] {
[09:33:04.033]     {
[09:33:04.033]         {
[09:33:04.033]             ...future.startTime <- base::Sys.time()
[09:33:04.033]             {
[09:33:04.033]                 {
[09:33:04.033]                   {
[09:33:04.033]                     {
[09:33:04.033]                       {
[09:33:04.033]                         base::local({
[09:33:04.033]                           has_future <- base::requireNamespace("future", 
[09:33:04.033]                             quietly = TRUE)
[09:33:04.033]                           if (has_future) {
[09:33:04.033]                             ns <- base::getNamespace("future")
[09:33:04.033]                             version <- ns[[".package"]][["version"]]
[09:33:04.033]                             if (is.null(version)) 
[09:33:04.033]                               version <- utils::packageVersion("future")
[09:33:04.033]                           }
[09:33:04.033]                           else {
[09:33:04.033]                             version <- NULL
[09:33:04.033]                           }
[09:33:04.033]                           if (!has_future || version < "1.8.0") {
[09:33:04.033]                             info <- base::c(r_version = base::gsub("R version ", 
[09:33:04.033]                               "", base::R.version$version.string), 
[09:33:04.033]                               platform = base::sprintf("%s (%s-bit)", 
[09:33:04.033]                                 base::R.version$platform, 8 * 
[09:33:04.033]                                   base::.Machine$sizeof.pointer), 
[09:33:04.033]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:04.033]                                 "release", "version")], collapse = " "), 
[09:33:04.033]                               hostname = base::Sys.info()[["nodename"]])
[09:33:04.033]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:33:04.033]                               info)
[09:33:04.033]                             info <- base::paste(info, collapse = "; ")
[09:33:04.033]                             if (!has_future) {
[09:33:04.033]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:04.033]                                 info)
[09:33:04.033]                             }
[09:33:04.033]                             else {
[09:33:04.033]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:04.033]                                 info, version)
[09:33:04.033]                             }
[09:33:04.033]                             base::stop(msg)
[09:33:04.033]                           }
[09:33:04.033]                         })
[09:33:04.033]                       }
[09:33:04.033]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:04.033]                       base::options(mc.cores = 1L)
[09:33:04.033]                     }
[09:33:04.033]                     base::local({
[09:33:04.033]                       for (pkg in "utils") {
[09:33:04.033]                         base::loadNamespace(pkg)
[09:33:04.033]                         base::library(pkg, character.only = TRUE)
[09:33:04.033]                       }
[09:33:04.033]                     })
[09:33:04.033]                   }
[09:33:04.033]                   ...future.strategy.old <- future::plan("list")
[09:33:04.033]                   options(future.plan = NULL)
[09:33:04.033]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.033]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:04.033]                 }
[09:33:04.033]                 ...future.workdir <- getwd()
[09:33:04.033]             }
[09:33:04.033]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:04.033]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:04.033]         }
[09:33:04.033]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:04.033]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:04.033]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:04.033]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:04.033]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:04.033]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:04.033]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:04.033]             base::names(...future.oldOptions))
[09:33:04.033]     }
[09:33:04.033]     if (FALSE) {
[09:33:04.033]     }
[09:33:04.033]     else {
[09:33:04.033]         if (TRUE) {
[09:33:04.033]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:04.033]                 open = "w")
[09:33:04.033]         }
[09:33:04.033]         else {
[09:33:04.033]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:04.033]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:04.033]         }
[09:33:04.033]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:04.033]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:04.033]             base::sink(type = "output", split = FALSE)
[09:33:04.033]             base::close(...future.stdout)
[09:33:04.033]         }, add = TRUE)
[09:33:04.033]     }
[09:33:04.033]     ...future.frame <- base::sys.nframe()
[09:33:04.033]     ...future.conditions <- base::list()
[09:33:04.033]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:04.033]     if (FALSE) {
[09:33:04.033]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:04.033]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:04.033]     }
[09:33:04.033]     ...future.result <- base::tryCatch({
[09:33:04.033]         base::withCallingHandlers({
[09:33:04.033]             ...future.value <- base::withVisible(base::local({
[09:33:04.033]                 withCallingHandlers({
[09:33:04.033]                   {
[09:33:04.033]                     print(1:50)
[09:33:04.033]                     str(1:50)
[09:33:04.033]                     cat(letters, sep = "-")
[09:33:04.033]                     cat(1:6, collapse = "\n")
[09:33:04.033]                     write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:04.033]                     42L
[09:33:04.033]                   }
[09:33:04.033]                 }, immediateCondition = function(cond) {
[09:33:04.033]                   save_rds <- function (object, pathname, ...) 
[09:33:04.033]                   {
[09:33:04.033]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:33:04.033]                     if (file_test("-f", pathname_tmp)) {
[09:33:04.033]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.033]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:33:04.033]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.033]                         fi_tmp[["mtime"]])
[09:33:04.033]                     }
[09:33:04.033]                     tryCatch({
[09:33:04.033]                       saveRDS(object, file = pathname_tmp, ...)
[09:33:04.033]                     }, error = function(ex) {
[09:33:04.033]                       msg <- conditionMessage(ex)
[09:33:04.033]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.033]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:33:04.033]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.033]                         fi_tmp[["mtime"]], msg)
[09:33:04.033]                       ex$message <- msg
[09:33:04.033]                       stop(ex)
[09:33:04.033]                     })
[09:33:04.033]                     stopifnot(file_test("-f", pathname_tmp))
[09:33:04.033]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:33:04.033]                     if (!res || file_test("-f", pathname_tmp)) {
[09:33:04.033]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.033]                       fi <- file.info(pathname)
[09:33:04.033]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:33:04.033]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.033]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:33:04.033]                         fi[["size"]], fi[["mtime"]])
[09:33:04.033]                       stop(msg)
[09:33:04.033]                     }
[09:33:04.033]                     invisible(pathname)
[09:33:04.033]                   }
[09:33:04.033]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:33:04.033]                     rootPath = tempdir()) 
[09:33:04.033]                   {
[09:33:04.033]                     obj <- list(time = Sys.time(), condition = cond)
[09:33:04.033]                     file <- tempfile(pattern = class(cond)[1], 
[09:33:04.033]                       tmpdir = path, fileext = ".rds")
[09:33:04.033]                     save_rds(obj, file)
[09:33:04.033]                   }
[09:33:04.033]                   saveImmediateCondition(cond, path = "/tmp/RtmpSN39z6/.future/immediateConditions")
[09:33:04.033]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.033]                   {
[09:33:04.033]                     inherits <- base::inherits
[09:33:04.033]                     invokeRestart <- base::invokeRestart
[09:33:04.033]                     is.null <- base::is.null
[09:33:04.033]                     muffled <- FALSE
[09:33:04.033]                     if (inherits(cond, "message")) {
[09:33:04.033]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:04.033]                       if (muffled) 
[09:33:04.033]                         invokeRestart("muffleMessage")
[09:33:04.033]                     }
[09:33:04.033]                     else if (inherits(cond, "warning")) {
[09:33:04.033]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:04.033]                       if (muffled) 
[09:33:04.033]                         invokeRestart("muffleWarning")
[09:33:04.033]                     }
[09:33:04.033]                     else if (inherits(cond, "condition")) {
[09:33:04.033]                       if (!is.null(pattern)) {
[09:33:04.033]                         computeRestarts <- base::computeRestarts
[09:33:04.033]                         grepl <- base::grepl
[09:33:04.033]                         restarts <- computeRestarts(cond)
[09:33:04.033]                         for (restart in restarts) {
[09:33:04.033]                           name <- restart$name
[09:33:04.033]                           if (is.null(name)) 
[09:33:04.033]                             next
[09:33:04.033]                           if (!grepl(pattern, name)) 
[09:33:04.033]                             next
[09:33:04.033]                           invokeRestart(restart)
[09:33:04.033]                           muffled <- TRUE
[09:33:04.033]                           break
[09:33:04.033]                         }
[09:33:04.033]                       }
[09:33:04.033]                     }
[09:33:04.033]                     invisible(muffled)
[09:33:04.033]                   }
[09:33:04.033]                   muffleCondition(cond)
[09:33:04.033]                 })
[09:33:04.033]             }))
[09:33:04.033]             future::FutureResult(value = ...future.value$value, 
[09:33:04.033]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.033]                   ...future.rng), globalenv = if (FALSE) 
[09:33:04.033]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:04.033]                     ...future.globalenv.names))
[09:33:04.033]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:04.033]         }, condition = base::local({
[09:33:04.033]             c <- base::c
[09:33:04.033]             inherits <- base::inherits
[09:33:04.033]             invokeRestart <- base::invokeRestart
[09:33:04.033]             length <- base::length
[09:33:04.033]             list <- base::list
[09:33:04.033]             seq.int <- base::seq.int
[09:33:04.033]             signalCondition <- base::signalCondition
[09:33:04.033]             sys.calls <- base::sys.calls
[09:33:04.033]             `[[` <- base::`[[`
[09:33:04.033]             `+` <- base::`+`
[09:33:04.033]             `<<-` <- base::`<<-`
[09:33:04.033]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:04.033]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:04.033]                   3L)]
[09:33:04.033]             }
[09:33:04.033]             function(cond) {
[09:33:04.033]                 is_error <- inherits(cond, "error")
[09:33:04.033]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:04.033]                   NULL)
[09:33:04.033]                 if (is_error) {
[09:33:04.033]                   sessionInformation <- function() {
[09:33:04.033]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:04.033]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:04.033]                       search = base::search(), system = base::Sys.info())
[09:33:04.033]                   }
[09:33:04.033]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.033]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:04.033]                     cond$call), session = sessionInformation(), 
[09:33:04.033]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:04.033]                   signalCondition(cond)
[09:33:04.033]                 }
[09:33:04.033]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:04.033]                 "immediateCondition"))) {
[09:33:04.033]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:04.033]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.033]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:04.033]                   if (TRUE && !signal) {
[09:33:04.033]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.033]                     {
[09:33:04.033]                       inherits <- base::inherits
[09:33:04.033]                       invokeRestart <- base::invokeRestart
[09:33:04.033]                       is.null <- base::is.null
[09:33:04.033]                       muffled <- FALSE
[09:33:04.033]                       if (inherits(cond, "message")) {
[09:33:04.033]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.033]                         if (muffled) 
[09:33:04.033]                           invokeRestart("muffleMessage")
[09:33:04.033]                       }
[09:33:04.033]                       else if (inherits(cond, "warning")) {
[09:33:04.033]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.033]                         if (muffled) 
[09:33:04.033]                           invokeRestart("muffleWarning")
[09:33:04.033]                       }
[09:33:04.033]                       else if (inherits(cond, "condition")) {
[09:33:04.033]                         if (!is.null(pattern)) {
[09:33:04.033]                           computeRestarts <- base::computeRestarts
[09:33:04.033]                           grepl <- base::grepl
[09:33:04.033]                           restarts <- computeRestarts(cond)
[09:33:04.033]                           for (restart in restarts) {
[09:33:04.033]                             name <- restart$name
[09:33:04.033]                             if (is.null(name)) 
[09:33:04.033]                               next
[09:33:04.033]                             if (!grepl(pattern, name)) 
[09:33:04.033]                               next
[09:33:04.033]                             invokeRestart(restart)
[09:33:04.033]                             muffled <- TRUE
[09:33:04.033]                             break
[09:33:04.033]                           }
[09:33:04.033]                         }
[09:33:04.033]                       }
[09:33:04.033]                       invisible(muffled)
[09:33:04.033]                     }
[09:33:04.033]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.033]                   }
[09:33:04.033]                 }
[09:33:04.033]                 else {
[09:33:04.033]                   if (TRUE) {
[09:33:04.033]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.033]                     {
[09:33:04.033]                       inherits <- base::inherits
[09:33:04.033]                       invokeRestart <- base::invokeRestart
[09:33:04.033]                       is.null <- base::is.null
[09:33:04.033]                       muffled <- FALSE
[09:33:04.033]                       if (inherits(cond, "message")) {
[09:33:04.033]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.033]                         if (muffled) 
[09:33:04.033]                           invokeRestart("muffleMessage")
[09:33:04.033]                       }
[09:33:04.033]                       else if (inherits(cond, "warning")) {
[09:33:04.033]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.033]                         if (muffled) 
[09:33:04.033]                           invokeRestart("muffleWarning")
[09:33:04.033]                       }
[09:33:04.033]                       else if (inherits(cond, "condition")) {
[09:33:04.033]                         if (!is.null(pattern)) {
[09:33:04.033]                           computeRestarts <- base::computeRestarts
[09:33:04.033]                           grepl <- base::grepl
[09:33:04.033]                           restarts <- computeRestarts(cond)
[09:33:04.033]                           for (restart in restarts) {
[09:33:04.033]                             name <- restart$name
[09:33:04.033]                             if (is.null(name)) 
[09:33:04.033]                               next
[09:33:04.033]                             if (!grepl(pattern, name)) 
[09:33:04.033]                               next
[09:33:04.033]                             invokeRestart(restart)
[09:33:04.033]                             muffled <- TRUE
[09:33:04.033]                             break
[09:33:04.033]                           }
[09:33:04.033]                         }
[09:33:04.033]                       }
[09:33:04.033]                       invisible(muffled)
[09:33:04.033]                     }
[09:33:04.033]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.033]                   }
[09:33:04.033]                 }
[09:33:04.033]             }
[09:33:04.033]         }))
[09:33:04.033]     }, error = function(ex) {
[09:33:04.033]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:04.033]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.033]                 ...future.rng), started = ...future.startTime, 
[09:33:04.033]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:04.033]             version = "1.8"), class = "FutureResult")
[09:33:04.033]     }, finally = {
[09:33:04.033]         if (!identical(...future.workdir, getwd())) 
[09:33:04.033]             setwd(...future.workdir)
[09:33:04.033]         {
[09:33:04.033]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:04.033]                 ...future.oldOptions$nwarnings <- NULL
[09:33:04.033]             }
[09:33:04.033]             base::options(...future.oldOptions)
[09:33:04.033]             if (.Platform$OS.type == "windows") {
[09:33:04.033]                 old_names <- names(...future.oldEnvVars)
[09:33:04.033]                 envs <- base::Sys.getenv()
[09:33:04.033]                 names <- names(envs)
[09:33:04.033]                 common <- intersect(names, old_names)
[09:33:04.033]                 added <- setdiff(names, old_names)
[09:33:04.033]                 removed <- setdiff(old_names, names)
[09:33:04.033]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:04.033]                   envs[common]]
[09:33:04.033]                 NAMES <- toupper(changed)
[09:33:04.033]                 args <- list()
[09:33:04.033]                 for (kk in seq_along(NAMES)) {
[09:33:04.033]                   name <- changed[[kk]]
[09:33:04.033]                   NAME <- NAMES[[kk]]
[09:33:04.033]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.033]                     next
[09:33:04.033]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.033]                 }
[09:33:04.033]                 NAMES <- toupper(added)
[09:33:04.033]                 for (kk in seq_along(NAMES)) {
[09:33:04.033]                   name <- added[[kk]]
[09:33:04.033]                   NAME <- NAMES[[kk]]
[09:33:04.033]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.033]                     next
[09:33:04.033]                   args[[name]] <- ""
[09:33:04.033]                 }
[09:33:04.033]                 NAMES <- toupper(removed)
[09:33:04.033]                 for (kk in seq_along(NAMES)) {
[09:33:04.033]                   name <- removed[[kk]]
[09:33:04.033]                   NAME <- NAMES[[kk]]
[09:33:04.033]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.033]                     next
[09:33:04.033]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.033]                 }
[09:33:04.033]                 if (length(args) > 0) 
[09:33:04.033]                   base::do.call(base::Sys.setenv, args = args)
[09:33:04.033]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:04.033]             }
[09:33:04.033]             else {
[09:33:04.033]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:04.033]             }
[09:33:04.033]             {
[09:33:04.033]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:04.033]                   0L) {
[09:33:04.033]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:04.033]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:04.033]                   base::options(opts)
[09:33:04.033]                 }
[09:33:04.033]                 {
[09:33:04.033]                   {
[09:33:04.033]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:04.033]                     NULL
[09:33:04.033]                   }
[09:33:04.033]                   options(future.plan = NULL)
[09:33:04.033]                   if (is.na(NA_character_)) 
[09:33:04.033]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.033]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:04.033]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:04.033]                     .init = FALSE)
[09:33:04.033]                 }
[09:33:04.033]             }
[09:33:04.033]         }
[09:33:04.033]     })
[09:33:04.033]     if (TRUE) {
[09:33:04.033]         base::sink(type = "output", split = FALSE)
[09:33:04.033]         if (TRUE) {
[09:33:04.033]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:04.033]         }
[09:33:04.033]         else {
[09:33:04.033]             ...future.result["stdout"] <- base::list(NULL)
[09:33:04.033]         }
[09:33:04.033]         base::close(...future.stdout)
[09:33:04.033]         ...future.stdout <- NULL
[09:33:04.033]     }
[09:33:04.033]     ...future.result$conditions <- ...future.conditions
[09:33:04.033]     ...future.result$finished <- base::Sys.time()
[09:33:04.033]     ...future.result
[09:33:04.033] }
[09:33:04.035] requestCore(): workers = 2
[09:33:04.038] MulticoreFuture started
[09:33:04.039] - Launch lazy future ... done
[09:33:04.039] run() for ‘MulticoreFuture’ ... done
[09:33:04.039] plan(): Setting new future strategy stack:
[09:33:04.040] result() for MulticoreFuture ...
[09:33:04.039] List of future strategies:
[09:33:04.039] 1. sequential:
[09:33:04.039]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.039]    - tweaked: FALSE
[09:33:04.039]    - call: NULL
[09:33:04.041] plan(): nbrOfWorkers() = 1
[09:33:04.044] plan(): Setting new future strategy stack:
[09:33:04.044] List of future strategies:
[09:33:04.044] 1. multicore:
[09:33:04.044]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:33:04.044]    - tweaked: FALSE
[09:33:04.044]    - call: plan(strategy)
[09:33:04.049] plan(): nbrOfWorkers() = 2
[09:33:04.053] result() for MulticoreFuture ...
[09:33:04.053] result() for MulticoreFuture ... done
[09:33:04.053] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 09:33:04"
 $ finished    : POSIXct[1:1], format: "2024-12-19 09:33:04"
 $ session_uuid: chr "ca90dcd8-9111-4eb4-bc6e-d6f65585dcc6"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "8f1daa72e372"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "8f1daa72e372" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 50451
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 09:33:04"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[09:33:04.062] result() for MulticoreFuture ...
[09:33:04.062] result() for MulticoreFuture ... done
[09:33:04.062] result() for MulticoreFuture ...
[09:33:04.062] result() for MulticoreFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.01061678 secs (started 2024-12-19 09:33:04.038699)
version: 1.8
[09:33:04.063] getGlobalsAndPackages() ...
[09:33:04.063] Searching for globals...
[09:33:04.067] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:04.067] Searching for globals ... DONE
[09:33:04.067] Resolving globals: FALSE
[09:33:04.067] 
[09:33:04.068] - packages: [1] ‘utils’
[09:33:04.068] getGlobalsAndPackages() ... DONE
[09:33:04.068] run() for ‘Future’ ...
[09:33:04.068] - state: ‘created’
[09:33:04.068] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:33:04.072] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:04.072] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:33:04.072]   - Field: ‘label’
[09:33:04.072]   - Field: ‘local’
[09:33:04.073]   - Field: ‘owner’
[09:33:04.073]   - Field: ‘envir’
[09:33:04.073]   - Field: ‘workers’
[09:33:04.073]   - Field: ‘packages’
[09:33:04.073]   - Field: ‘gc’
[09:33:04.075]   - Field: ‘job’
[09:33:04.075]   - Field: ‘conditions’
[09:33:04.075]   - Field: ‘expr’
[09:33:04.075]   - Field: ‘uuid’
[09:33:04.076]   - Field: ‘seed’
[09:33:04.076]   - Field: ‘version’
[09:33:04.076]   - Field: ‘result’
[09:33:04.076]   - Field: ‘asynchronous’
[09:33:04.076]   - Field: ‘calls’
[09:33:04.076]   - Field: ‘globals’
[09:33:04.076]   - Field: ‘stdout’
[09:33:04.077]   - Field: ‘earlySignal’
[09:33:04.077]   - Field: ‘lazy’
[09:33:04.077]   - Field: ‘state’
[09:33:04.077] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:33:04.077] - Launch lazy future ...
[09:33:04.077] Packages needed by the future expression (n = 1): ‘utils’
[09:33:04.077] Packages needed by future strategies (n = 0): <none>
[09:33:04.078] {
[09:33:04.078]     {
[09:33:04.078]         {
[09:33:04.078]             ...future.startTime <- base::Sys.time()
[09:33:04.078]             {
[09:33:04.078]                 {
[09:33:04.078]                   {
[09:33:04.078]                     {
[09:33:04.078]                       {
[09:33:04.078]                         base::local({
[09:33:04.078]                           has_future <- base::requireNamespace("future", 
[09:33:04.078]                             quietly = TRUE)
[09:33:04.078]                           if (has_future) {
[09:33:04.078]                             ns <- base::getNamespace("future")
[09:33:04.078]                             version <- ns[[".package"]][["version"]]
[09:33:04.078]                             if (is.null(version)) 
[09:33:04.078]                               version <- utils::packageVersion("future")
[09:33:04.078]                           }
[09:33:04.078]                           else {
[09:33:04.078]                             version <- NULL
[09:33:04.078]                           }
[09:33:04.078]                           if (!has_future || version < "1.8.0") {
[09:33:04.078]                             info <- base::c(r_version = base::gsub("R version ", 
[09:33:04.078]                               "", base::R.version$version.string), 
[09:33:04.078]                               platform = base::sprintf("%s (%s-bit)", 
[09:33:04.078]                                 base::R.version$platform, 8 * 
[09:33:04.078]                                   base::.Machine$sizeof.pointer), 
[09:33:04.078]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:04.078]                                 "release", "version")], collapse = " "), 
[09:33:04.078]                               hostname = base::Sys.info()[["nodename"]])
[09:33:04.078]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:33:04.078]                               info)
[09:33:04.078]                             info <- base::paste(info, collapse = "; ")
[09:33:04.078]                             if (!has_future) {
[09:33:04.078]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:04.078]                                 info)
[09:33:04.078]                             }
[09:33:04.078]                             else {
[09:33:04.078]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:04.078]                                 info, version)
[09:33:04.078]                             }
[09:33:04.078]                             base::stop(msg)
[09:33:04.078]                           }
[09:33:04.078]                         })
[09:33:04.078]                       }
[09:33:04.078]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:04.078]                       base::options(mc.cores = 1L)
[09:33:04.078]                     }
[09:33:04.078]                     base::local({
[09:33:04.078]                       for (pkg in "utils") {
[09:33:04.078]                         base::loadNamespace(pkg)
[09:33:04.078]                         base::library(pkg, character.only = TRUE)
[09:33:04.078]                       }
[09:33:04.078]                     })
[09:33:04.078]                   }
[09:33:04.078]                   ...future.strategy.old <- future::plan("list")
[09:33:04.078]                   options(future.plan = NULL)
[09:33:04.078]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.078]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:04.078]                 }
[09:33:04.078]                 ...future.workdir <- getwd()
[09:33:04.078]             }
[09:33:04.078]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:04.078]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:04.078]         }
[09:33:04.078]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:04.078]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:04.078]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:04.078]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:04.078]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:04.078]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:04.078]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:04.078]             base::names(...future.oldOptions))
[09:33:04.078]     }
[09:33:04.078]     if (FALSE) {
[09:33:04.078]     }
[09:33:04.078]     else {
[09:33:04.078]         if (TRUE) {
[09:33:04.078]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:04.078]                 open = "w")
[09:33:04.078]         }
[09:33:04.078]         else {
[09:33:04.078]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:04.078]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:04.078]         }
[09:33:04.078]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:04.078]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:04.078]             base::sink(type = "output", split = FALSE)
[09:33:04.078]             base::close(...future.stdout)
[09:33:04.078]         }, add = TRUE)
[09:33:04.078]     }
[09:33:04.078]     ...future.frame <- base::sys.nframe()
[09:33:04.078]     ...future.conditions <- base::list()
[09:33:04.078]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:04.078]     if (FALSE) {
[09:33:04.078]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:04.078]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:04.078]     }
[09:33:04.078]     ...future.result <- base::tryCatch({
[09:33:04.078]         base::withCallingHandlers({
[09:33:04.078]             ...future.value <- base::withVisible(base::local({
[09:33:04.078]                 withCallingHandlers({
[09:33:04.078]                   {
[09:33:04.078]                     print(1:50)
[09:33:04.078]                     str(1:50)
[09:33:04.078]                     cat(letters, sep = "-")
[09:33:04.078]                     cat(1:6, collapse = "\n")
[09:33:04.078]                     write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:04.078]                     42L
[09:33:04.078]                   }
[09:33:04.078]                 }, immediateCondition = function(cond) {
[09:33:04.078]                   save_rds <- function (object, pathname, ...) 
[09:33:04.078]                   {
[09:33:04.078]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:33:04.078]                     if (file_test("-f", pathname_tmp)) {
[09:33:04.078]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.078]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:33:04.078]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.078]                         fi_tmp[["mtime"]])
[09:33:04.078]                     }
[09:33:04.078]                     tryCatch({
[09:33:04.078]                       saveRDS(object, file = pathname_tmp, ...)
[09:33:04.078]                     }, error = function(ex) {
[09:33:04.078]                       msg <- conditionMessage(ex)
[09:33:04.078]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.078]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:33:04.078]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.078]                         fi_tmp[["mtime"]], msg)
[09:33:04.078]                       ex$message <- msg
[09:33:04.078]                       stop(ex)
[09:33:04.078]                     })
[09:33:04.078]                     stopifnot(file_test("-f", pathname_tmp))
[09:33:04.078]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:33:04.078]                     if (!res || file_test("-f", pathname_tmp)) {
[09:33:04.078]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.078]                       fi <- file.info(pathname)
[09:33:04.078]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:33:04.078]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.078]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:33:04.078]                         fi[["size"]], fi[["mtime"]])
[09:33:04.078]                       stop(msg)
[09:33:04.078]                     }
[09:33:04.078]                     invisible(pathname)
[09:33:04.078]                   }
[09:33:04.078]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:33:04.078]                     rootPath = tempdir()) 
[09:33:04.078]                   {
[09:33:04.078]                     obj <- list(time = Sys.time(), condition = cond)
[09:33:04.078]                     file <- tempfile(pattern = class(cond)[1], 
[09:33:04.078]                       tmpdir = path, fileext = ".rds")
[09:33:04.078]                     save_rds(obj, file)
[09:33:04.078]                   }
[09:33:04.078]                   saveImmediateCondition(cond, path = "/tmp/RtmpSN39z6/.future/immediateConditions")
[09:33:04.078]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.078]                   {
[09:33:04.078]                     inherits <- base::inherits
[09:33:04.078]                     invokeRestart <- base::invokeRestart
[09:33:04.078]                     is.null <- base::is.null
[09:33:04.078]                     muffled <- FALSE
[09:33:04.078]                     if (inherits(cond, "message")) {
[09:33:04.078]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:04.078]                       if (muffled) 
[09:33:04.078]                         invokeRestart("muffleMessage")
[09:33:04.078]                     }
[09:33:04.078]                     else if (inherits(cond, "warning")) {
[09:33:04.078]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:04.078]                       if (muffled) 
[09:33:04.078]                         invokeRestart("muffleWarning")
[09:33:04.078]                     }
[09:33:04.078]                     else if (inherits(cond, "condition")) {
[09:33:04.078]                       if (!is.null(pattern)) {
[09:33:04.078]                         computeRestarts <- base::computeRestarts
[09:33:04.078]                         grepl <- base::grepl
[09:33:04.078]                         restarts <- computeRestarts(cond)
[09:33:04.078]                         for (restart in restarts) {
[09:33:04.078]                           name <- restart$name
[09:33:04.078]                           if (is.null(name)) 
[09:33:04.078]                             next
[09:33:04.078]                           if (!grepl(pattern, name)) 
[09:33:04.078]                             next
[09:33:04.078]                           invokeRestart(restart)
[09:33:04.078]                           muffled <- TRUE
[09:33:04.078]                           break
[09:33:04.078]                         }
[09:33:04.078]                       }
[09:33:04.078]                     }
[09:33:04.078]                     invisible(muffled)
[09:33:04.078]                   }
[09:33:04.078]                   muffleCondition(cond)
[09:33:04.078]                 })
[09:33:04.078]             }))
[09:33:04.078]             future::FutureResult(value = ...future.value$value, 
[09:33:04.078]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.078]                   ...future.rng), globalenv = if (FALSE) 
[09:33:04.078]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:04.078]                     ...future.globalenv.names))
[09:33:04.078]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:04.078]         }, condition = base::local({
[09:33:04.078]             c <- base::c
[09:33:04.078]             inherits <- base::inherits
[09:33:04.078]             invokeRestart <- base::invokeRestart
[09:33:04.078]             length <- base::length
[09:33:04.078]             list <- base::list
[09:33:04.078]             seq.int <- base::seq.int
[09:33:04.078]             signalCondition <- base::signalCondition
[09:33:04.078]             sys.calls <- base::sys.calls
[09:33:04.078]             `[[` <- base::`[[`
[09:33:04.078]             `+` <- base::`+`
[09:33:04.078]             `<<-` <- base::`<<-`
[09:33:04.078]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:04.078]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:04.078]                   3L)]
[09:33:04.078]             }
[09:33:04.078]             function(cond) {
[09:33:04.078]                 is_error <- inherits(cond, "error")
[09:33:04.078]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:04.078]                   NULL)
[09:33:04.078]                 if (is_error) {
[09:33:04.078]                   sessionInformation <- function() {
[09:33:04.078]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:04.078]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:04.078]                       search = base::search(), system = base::Sys.info())
[09:33:04.078]                   }
[09:33:04.078]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.078]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:04.078]                     cond$call), session = sessionInformation(), 
[09:33:04.078]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:04.078]                   signalCondition(cond)
[09:33:04.078]                 }
[09:33:04.078]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:04.078]                 "immediateCondition"))) {
[09:33:04.078]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:04.078]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.078]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:04.078]                   if (TRUE && !signal) {
[09:33:04.078]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.078]                     {
[09:33:04.078]                       inherits <- base::inherits
[09:33:04.078]                       invokeRestart <- base::invokeRestart
[09:33:04.078]                       is.null <- base::is.null
[09:33:04.078]                       muffled <- FALSE
[09:33:04.078]                       if (inherits(cond, "message")) {
[09:33:04.078]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.078]                         if (muffled) 
[09:33:04.078]                           invokeRestart("muffleMessage")
[09:33:04.078]                       }
[09:33:04.078]                       else if (inherits(cond, "warning")) {
[09:33:04.078]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.078]                         if (muffled) 
[09:33:04.078]                           invokeRestart("muffleWarning")
[09:33:04.078]                       }
[09:33:04.078]                       else if (inherits(cond, "condition")) {
[09:33:04.078]                         if (!is.null(pattern)) {
[09:33:04.078]                           computeRestarts <- base::computeRestarts
[09:33:04.078]                           grepl <- base::grepl
[09:33:04.078]                           restarts <- computeRestarts(cond)
[09:33:04.078]                           for (restart in restarts) {
[09:33:04.078]                             name <- restart$name
[09:33:04.078]                             if (is.null(name)) 
[09:33:04.078]                               next
[09:33:04.078]                             if (!grepl(pattern, name)) 
[09:33:04.078]                               next
[09:33:04.078]                             invokeRestart(restart)
[09:33:04.078]                             muffled <- TRUE
[09:33:04.078]                             break
[09:33:04.078]                           }
[09:33:04.078]                         }
[09:33:04.078]                       }
[09:33:04.078]                       invisible(muffled)
[09:33:04.078]                     }
[09:33:04.078]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.078]                   }
[09:33:04.078]                 }
[09:33:04.078]                 else {
[09:33:04.078]                   if (TRUE) {
[09:33:04.078]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.078]                     {
[09:33:04.078]                       inherits <- base::inherits
[09:33:04.078]                       invokeRestart <- base::invokeRestart
[09:33:04.078]                       is.null <- base::is.null
[09:33:04.078]                       muffled <- FALSE
[09:33:04.078]                       if (inherits(cond, "message")) {
[09:33:04.078]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.078]                         if (muffled) 
[09:33:04.078]                           invokeRestart("muffleMessage")
[09:33:04.078]                       }
[09:33:04.078]                       else if (inherits(cond, "warning")) {
[09:33:04.078]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.078]                         if (muffled) 
[09:33:04.078]                           invokeRestart("muffleWarning")
[09:33:04.078]                       }
[09:33:04.078]                       else if (inherits(cond, "condition")) {
[09:33:04.078]                         if (!is.null(pattern)) {
[09:33:04.078]                           computeRestarts <- base::computeRestarts
[09:33:04.078]                           grepl <- base::grepl
[09:33:04.078]                           restarts <- computeRestarts(cond)
[09:33:04.078]                           for (restart in restarts) {
[09:33:04.078]                             name <- restart$name
[09:33:04.078]                             if (is.null(name)) 
[09:33:04.078]                               next
[09:33:04.078]                             if (!grepl(pattern, name)) 
[09:33:04.078]                               next
[09:33:04.078]                             invokeRestart(restart)
[09:33:04.078]                             muffled <- TRUE
[09:33:04.078]                             break
[09:33:04.078]                           }
[09:33:04.078]                         }
[09:33:04.078]                       }
[09:33:04.078]                       invisible(muffled)
[09:33:04.078]                     }
[09:33:04.078]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.078]                   }
[09:33:04.078]                 }
[09:33:04.078]             }
[09:33:04.078]         }))
[09:33:04.078]     }, error = function(ex) {
[09:33:04.078]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:04.078]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.078]                 ...future.rng), started = ...future.startTime, 
[09:33:04.078]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:04.078]             version = "1.8"), class = "FutureResult")
[09:33:04.078]     }, finally = {
[09:33:04.078]         if (!identical(...future.workdir, getwd())) 
[09:33:04.078]             setwd(...future.workdir)
[09:33:04.078]         {
[09:33:04.078]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:04.078]                 ...future.oldOptions$nwarnings <- NULL
[09:33:04.078]             }
[09:33:04.078]             base::options(...future.oldOptions)
[09:33:04.078]             if (.Platform$OS.type == "windows") {
[09:33:04.078]                 old_names <- names(...future.oldEnvVars)
[09:33:04.078]                 envs <- base::Sys.getenv()
[09:33:04.078]                 names <- names(envs)
[09:33:04.078]                 common <- intersect(names, old_names)
[09:33:04.078]                 added <- setdiff(names, old_names)
[09:33:04.078]                 removed <- setdiff(old_names, names)
[09:33:04.078]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:04.078]                   envs[common]]
[09:33:04.078]                 NAMES <- toupper(changed)
[09:33:04.078]                 args <- list()
[09:33:04.078]                 for (kk in seq_along(NAMES)) {
[09:33:04.078]                   name <- changed[[kk]]
[09:33:04.078]                   NAME <- NAMES[[kk]]
[09:33:04.078]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.078]                     next
[09:33:04.078]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.078]                 }
[09:33:04.078]                 NAMES <- toupper(added)
[09:33:04.078]                 for (kk in seq_along(NAMES)) {
[09:33:04.078]                   name <- added[[kk]]
[09:33:04.078]                   NAME <- NAMES[[kk]]
[09:33:04.078]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.078]                     next
[09:33:04.078]                   args[[name]] <- ""
[09:33:04.078]                 }
[09:33:04.078]                 NAMES <- toupper(removed)
[09:33:04.078]                 for (kk in seq_along(NAMES)) {
[09:33:04.078]                   name <- removed[[kk]]
[09:33:04.078]                   NAME <- NAMES[[kk]]
[09:33:04.078]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.078]                     next
[09:33:04.078]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.078]                 }
[09:33:04.078]                 if (length(args) > 0) 
[09:33:04.078]                   base::do.call(base::Sys.setenv, args = args)
[09:33:04.078]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:04.078]             }
[09:33:04.078]             else {
[09:33:04.078]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:04.078]             }
[09:33:04.078]             {
[09:33:04.078]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:04.078]                   0L) {
[09:33:04.078]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:04.078]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:04.078]                   base::options(opts)
[09:33:04.078]                 }
[09:33:04.078]                 {
[09:33:04.078]                   {
[09:33:04.078]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:04.078]                     NULL
[09:33:04.078]                   }
[09:33:04.078]                   options(future.plan = NULL)
[09:33:04.078]                   if (is.na(NA_character_)) 
[09:33:04.078]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.078]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:04.078]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:04.078]                     .init = FALSE)
[09:33:04.078]                 }
[09:33:04.078]             }
[09:33:04.078]         }
[09:33:04.078]     })
[09:33:04.078]     if (TRUE) {
[09:33:04.078]         base::sink(type = "output", split = FALSE)
[09:33:04.078]         if (TRUE) {
[09:33:04.078]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:04.078]         }
[09:33:04.078]         else {
[09:33:04.078]             ...future.result["stdout"] <- base::list(NULL)
[09:33:04.078]         }
[09:33:04.078]         base::close(...future.stdout)
[09:33:04.078]         ...future.stdout <- NULL
[09:33:04.078]     }
[09:33:04.078]     ...future.result$conditions <- ...future.conditions
[09:33:04.078]     ...future.result$finished <- base::Sys.time()
[09:33:04.078]     ...future.result
[09:33:04.078] }
[09:33:04.080] requestCore(): workers = 2
[09:33:04.082] MulticoreFuture started
[09:33:04.082] - Launch lazy future ... done
[09:33:04.083] run() for ‘MulticoreFuture’ ... done
[09:33:04.083] result() for MulticoreFuture ...
[09:33:04.083] plan(): Setting new future strategy stack:
[09:33:04.084] List of future strategies:
[09:33:04.084] 1. sequential:
[09:33:04.084]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.084]    - tweaked: FALSE
[09:33:04.084]    - call: NULL
[09:33:04.085] plan(): nbrOfWorkers() = 1
[09:33:04.088] plan(): Setting new future strategy stack:
[09:33:04.088] List of future strategies:
[09:33:04.088] 1. multicore:
[09:33:04.088]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:33:04.088]    - tweaked: FALSE
[09:33:04.088]    - call: plan(strategy)
[09:33:04.093] plan(): nbrOfWorkers() = 2
[09:33:04.094] result() for MulticoreFuture ...
[09:33:04.094] result() for MulticoreFuture ... done
[09:33:04.094] result() for MulticoreFuture ... done
[09:33:04.095] result() for MulticoreFuture ...
[09:33:04.095] result() for MulticoreFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[09:33:04.095] getGlobalsAndPackages() ...
[09:33:04.096] Searching for globals...
[09:33:04.096] - globals found: [1] ‘print’
[09:33:04.097] Searching for globals ... DONE
[09:33:04.097] Resolving globals: FALSE
[09:33:04.097] 
[09:33:04.097] 
[09:33:04.097] getGlobalsAndPackages() ... DONE
[09:33:04.098] run() for ‘Future’ ...
[09:33:04.098] - state: ‘created’
[09:33:04.098] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:33:04.102] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:04.102] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:33:04.102]   - Field: ‘label’
[09:33:04.103]   - Field: ‘local’
[09:33:04.103]   - Field: ‘owner’
[09:33:04.103]   - Field: ‘envir’
[09:33:04.103]   - Field: ‘workers’
[09:33:04.103]   - Field: ‘packages’
[09:33:04.103]   - Field: ‘gc’
[09:33:04.103]   - Field: ‘job’
[09:33:04.103]   - Field: ‘conditions’
[09:33:04.103]   - Field: ‘expr’
[09:33:04.104]   - Field: ‘uuid’
[09:33:04.104]   - Field: ‘seed’
[09:33:04.104]   - Field: ‘version’
[09:33:04.104]   - Field: ‘result’
[09:33:04.104]   - Field: ‘asynchronous’
[09:33:04.104]   - Field: ‘calls’
[09:33:04.104]   - Field: ‘globals’
[09:33:04.104]   - Field: ‘stdout’
[09:33:04.105]   - Field: ‘earlySignal’
[09:33:04.105]   - Field: ‘lazy’
[09:33:04.105]   - Field: ‘state’
[09:33:04.105] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:33:04.105] - Launch lazy future ...
[09:33:04.105] Packages needed by the future expression (n = 0): <none>
[09:33:04.105] Packages needed by future strategies (n = 0): <none>
[09:33:04.106] {
[09:33:04.106]     {
[09:33:04.106]         {
[09:33:04.106]             ...future.startTime <- base::Sys.time()
[09:33:04.106]             {
[09:33:04.106]                 {
[09:33:04.106]                   {
[09:33:04.106]                     {
[09:33:04.106]                       base::local({
[09:33:04.106]                         has_future <- base::requireNamespace("future", 
[09:33:04.106]                           quietly = TRUE)
[09:33:04.106]                         if (has_future) {
[09:33:04.106]                           ns <- base::getNamespace("future")
[09:33:04.106]                           version <- ns[[".package"]][["version"]]
[09:33:04.106]                           if (is.null(version)) 
[09:33:04.106]                             version <- utils::packageVersion("future")
[09:33:04.106]                         }
[09:33:04.106]                         else {
[09:33:04.106]                           version <- NULL
[09:33:04.106]                         }
[09:33:04.106]                         if (!has_future || version < "1.8.0") {
[09:33:04.106]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:04.106]                             "", base::R.version$version.string), 
[09:33:04.106]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:04.106]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:04.106]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:04.106]                               "release", "version")], collapse = " "), 
[09:33:04.106]                             hostname = base::Sys.info()[["nodename"]])
[09:33:04.106]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:04.106]                             info)
[09:33:04.106]                           info <- base::paste(info, collapse = "; ")
[09:33:04.106]                           if (!has_future) {
[09:33:04.106]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:04.106]                               info)
[09:33:04.106]                           }
[09:33:04.106]                           else {
[09:33:04.106]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:04.106]                               info, version)
[09:33:04.106]                           }
[09:33:04.106]                           base::stop(msg)
[09:33:04.106]                         }
[09:33:04.106]                       })
[09:33:04.106]                     }
[09:33:04.106]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:04.106]                     base::options(mc.cores = 1L)
[09:33:04.106]                   }
[09:33:04.106]                   ...future.strategy.old <- future::plan("list")
[09:33:04.106]                   options(future.plan = NULL)
[09:33:04.106]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.106]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:04.106]                 }
[09:33:04.106]                 ...future.workdir <- getwd()
[09:33:04.106]             }
[09:33:04.106]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:04.106]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:04.106]         }
[09:33:04.106]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:04.106]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:04.106]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:04.106]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:04.106]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:04.106]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:04.106]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:04.106]             base::names(...future.oldOptions))
[09:33:04.106]     }
[09:33:04.106]     if (FALSE) {
[09:33:04.106]     }
[09:33:04.106]     else {
[09:33:04.106]         if (TRUE) {
[09:33:04.106]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:04.106]                 open = "w")
[09:33:04.106]         }
[09:33:04.106]         else {
[09:33:04.106]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:04.106]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:04.106]         }
[09:33:04.106]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:04.106]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:04.106]             base::sink(type = "output", split = FALSE)
[09:33:04.106]             base::close(...future.stdout)
[09:33:04.106]         }, add = TRUE)
[09:33:04.106]     }
[09:33:04.106]     ...future.frame <- base::sys.nframe()
[09:33:04.106]     ...future.conditions <- base::list()
[09:33:04.106]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:04.106]     if (FALSE) {
[09:33:04.106]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:04.106]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:04.106]     }
[09:33:04.106]     ...future.result <- base::tryCatch({
[09:33:04.106]         base::withCallingHandlers({
[09:33:04.106]             ...future.value <- base::withVisible(base::local({
[09:33:04.106]                 withCallingHandlers({
[09:33:04.106]                   print(42)
[09:33:04.106]                 }, immediateCondition = function(cond) {
[09:33:04.106]                   save_rds <- function (object, pathname, ...) 
[09:33:04.106]                   {
[09:33:04.106]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:33:04.106]                     if (file_test("-f", pathname_tmp)) {
[09:33:04.106]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.106]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:33:04.106]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.106]                         fi_tmp[["mtime"]])
[09:33:04.106]                     }
[09:33:04.106]                     tryCatch({
[09:33:04.106]                       saveRDS(object, file = pathname_tmp, ...)
[09:33:04.106]                     }, error = function(ex) {
[09:33:04.106]                       msg <- conditionMessage(ex)
[09:33:04.106]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.106]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:33:04.106]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.106]                         fi_tmp[["mtime"]], msg)
[09:33:04.106]                       ex$message <- msg
[09:33:04.106]                       stop(ex)
[09:33:04.106]                     })
[09:33:04.106]                     stopifnot(file_test("-f", pathname_tmp))
[09:33:04.106]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:33:04.106]                     if (!res || file_test("-f", pathname_tmp)) {
[09:33:04.106]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.106]                       fi <- file.info(pathname)
[09:33:04.106]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:33:04.106]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.106]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:33:04.106]                         fi[["size"]], fi[["mtime"]])
[09:33:04.106]                       stop(msg)
[09:33:04.106]                     }
[09:33:04.106]                     invisible(pathname)
[09:33:04.106]                   }
[09:33:04.106]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:33:04.106]                     rootPath = tempdir()) 
[09:33:04.106]                   {
[09:33:04.106]                     obj <- list(time = Sys.time(), condition = cond)
[09:33:04.106]                     file <- tempfile(pattern = class(cond)[1], 
[09:33:04.106]                       tmpdir = path, fileext = ".rds")
[09:33:04.106]                     save_rds(obj, file)
[09:33:04.106]                   }
[09:33:04.106]                   saveImmediateCondition(cond, path = "/tmp/RtmpSN39z6/.future/immediateConditions")
[09:33:04.106]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.106]                   {
[09:33:04.106]                     inherits <- base::inherits
[09:33:04.106]                     invokeRestart <- base::invokeRestart
[09:33:04.106]                     is.null <- base::is.null
[09:33:04.106]                     muffled <- FALSE
[09:33:04.106]                     if (inherits(cond, "message")) {
[09:33:04.106]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:04.106]                       if (muffled) 
[09:33:04.106]                         invokeRestart("muffleMessage")
[09:33:04.106]                     }
[09:33:04.106]                     else if (inherits(cond, "warning")) {
[09:33:04.106]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:04.106]                       if (muffled) 
[09:33:04.106]                         invokeRestart("muffleWarning")
[09:33:04.106]                     }
[09:33:04.106]                     else if (inherits(cond, "condition")) {
[09:33:04.106]                       if (!is.null(pattern)) {
[09:33:04.106]                         computeRestarts <- base::computeRestarts
[09:33:04.106]                         grepl <- base::grepl
[09:33:04.106]                         restarts <- computeRestarts(cond)
[09:33:04.106]                         for (restart in restarts) {
[09:33:04.106]                           name <- restart$name
[09:33:04.106]                           if (is.null(name)) 
[09:33:04.106]                             next
[09:33:04.106]                           if (!grepl(pattern, name)) 
[09:33:04.106]                             next
[09:33:04.106]                           invokeRestart(restart)
[09:33:04.106]                           muffled <- TRUE
[09:33:04.106]                           break
[09:33:04.106]                         }
[09:33:04.106]                       }
[09:33:04.106]                     }
[09:33:04.106]                     invisible(muffled)
[09:33:04.106]                   }
[09:33:04.106]                   muffleCondition(cond)
[09:33:04.106]                 })
[09:33:04.106]             }))
[09:33:04.106]             future::FutureResult(value = ...future.value$value, 
[09:33:04.106]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.106]                   ...future.rng), globalenv = if (FALSE) 
[09:33:04.106]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:04.106]                     ...future.globalenv.names))
[09:33:04.106]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:04.106]         }, condition = base::local({
[09:33:04.106]             c <- base::c
[09:33:04.106]             inherits <- base::inherits
[09:33:04.106]             invokeRestart <- base::invokeRestart
[09:33:04.106]             length <- base::length
[09:33:04.106]             list <- base::list
[09:33:04.106]             seq.int <- base::seq.int
[09:33:04.106]             signalCondition <- base::signalCondition
[09:33:04.106]             sys.calls <- base::sys.calls
[09:33:04.106]             `[[` <- base::`[[`
[09:33:04.106]             `+` <- base::`+`
[09:33:04.106]             `<<-` <- base::`<<-`
[09:33:04.106]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:04.106]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:04.106]                   3L)]
[09:33:04.106]             }
[09:33:04.106]             function(cond) {
[09:33:04.106]                 is_error <- inherits(cond, "error")
[09:33:04.106]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:04.106]                   NULL)
[09:33:04.106]                 if (is_error) {
[09:33:04.106]                   sessionInformation <- function() {
[09:33:04.106]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:04.106]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:04.106]                       search = base::search(), system = base::Sys.info())
[09:33:04.106]                   }
[09:33:04.106]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.106]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:04.106]                     cond$call), session = sessionInformation(), 
[09:33:04.106]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:04.106]                   signalCondition(cond)
[09:33:04.106]                 }
[09:33:04.106]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:04.106]                 "immediateCondition"))) {
[09:33:04.106]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:04.106]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.106]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:04.106]                   if (TRUE && !signal) {
[09:33:04.106]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.106]                     {
[09:33:04.106]                       inherits <- base::inherits
[09:33:04.106]                       invokeRestart <- base::invokeRestart
[09:33:04.106]                       is.null <- base::is.null
[09:33:04.106]                       muffled <- FALSE
[09:33:04.106]                       if (inherits(cond, "message")) {
[09:33:04.106]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.106]                         if (muffled) 
[09:33:04.106]                           invokeRestart("muffleMessage")
[09:33:04.106]                       }
[09:33:04.106]                       else if (inherits(cond, "warning")) {
[09:33:04.106]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.106]                         if (muffled) 
[09:33:04.106]                           invokeRestart("muffleWarning")
[09:33:04.106]                       }
[09:33:04.106]                       else if (inherits(cond, "condition")) {
[09:33:04.106]                         if (!is.null(pattern)) {
[09:33:04.106]                           computeRestarts <- base::computeRestarts
[09:33:04.106]                           grepl <- base::grepl
[09:33:04.106]                           restarts <- computeRestarts(cond)
[09:33:04.106]                           for (restart in restarts) {
[09:33:04.106]                             name <- restart$name
[09:33:04.106]                             if (is.null(name)) 
[09:33:04.106]                               next
[09:33:04.106]                             if (!grepl(pattern, name)) 
[09:33:04.106]                               next
[09:33:04.106]                             invokeRestart(restart)
[09:33:04.106]                             muffled <- TRUE
[09:33:04.106]                             break
[09:33:04.106]                           }
[09:33:04.106]                         }
[09:33:04.106]                       }
[09:33:04.106]                       invisible(muffled)
[09:33:04.106]                     }
[09:33:04.106]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.106]                   }
[09:33:04.106]                 }
[09:33:04.106]                 else {
[09:33:04.106]                   if (TRUE) {
[09:33:04.106]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.106]                     {
[09:33:04.106]                       inherits <- base::inherits
[09:33:04.106]                       invokeRestart <- base::invokeRestart
[09:33:04.106]                       is.null <- base::is.null
[09:33:04.106]                       muffled <- FALSE
[09:33:04.106]                       if (inherits(cond, "message")) {
[09:33:04.106]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.106]                         if (muffled) 
[09:33:04.106]                           invokeRestart("muffleMessage")
[09:33:04.106]                       }
[09:33:04.106]                       else if (inherits(cond, "warning")) {
[09:33:04.106]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.106]                         if (muffled) 
[09:33:04.106]                           invokeRestart("muffleWarning")
[09:33:04.106]                       }
[09:33:04.106]                       else if (inherits(cond, "condition")) {
[09:33:04.106]                         if (!is.null(pattern)) {
[09:33:04.106]                           computeRestarts <- base::computeRestarts
[09:33:04.106]                           grepl <- base::grepl
[09:33:04.106]                           restarts <- computeRestarts(cond)
[09:33:04.106]                           for (restart in restarts) {
[09:33:04.106]                             name <- restart$name
[09:33:04.106]                             if (is.null(name)) 
[09:33:04.106]                               next
[09:33:04.106]                             if (!grepl(pattern, name)) 
[09:33:04.106]                               next
[09:33:04.106]                             invokeRestart(restart)
[09:33:04.106]                             muffled <- TRUE
[09:33:04.106]                             break
[09:33:04.106]                           }
[09:33:04.106]                         }
[09:33:04.106]                       }
[09:33:04.106]                       invisible(muffled)
[09:33:04.106]                     }
[09:33:04.106]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.106]                   }
[09:33:04.106]                 }
[09:33:04.106]             }
[09:33:04.106]         }))
[09:33:04.106]     }, error = function(ex) {
[09:33:04.106]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:04.106]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.106]                 ...future.rng), started = ...future.startTime, 
[09:33:04.106]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:04.106]             version = "1.8"), class = "FutureResult")
[09:33:04.106]     }, finally = {
[09:33:04.106]         if (!identical(...future.workdir, getwd())) 
[09:33:04.106]             setwd(...future.workdir)
[09:33:04.106]         {
[09:33:04.106]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:04.106]                 ...future.oldOptions$nwarnings <- NULL
[09:33:04.106]             }
[09:33:04.106]             base::options(...future.oldOptions)
[09:33:04.106]             if (.Platform$OS.type == "windows") {
[09:33:04.106]                 old_names <- names(...future.oldEnvVars)
[09:33:04.106]                 envs <- base::Sys.getenv()
[09:33:04.106]                 names <- names(envs)
[09:33:04.106]                 common <- intersect(names, old_names)
[09:33:04.106]                 added <- setdiff(names, old_names)
[09:33:04.106]                 removed <- setdiff(old_names, names)
[09:33:04.106]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:04.106]                   envs[common]]
[09:33:04.106]                 NAMES <- toupper(changed)
[09:33:04.106]                 args <- list()
[09:33:04.106]                 for (kk in seq_along(NAMES)) {
[09:33:04.106]                   name <- changed[[kk]]
[09:33:04.106]                   NAME <- NAMES[[kk]]
[09:33:04.106]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.106]                     next
[09:33:04.106]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.106]                 }
[09:33:04.106]                 NAMES <- toupper(added)
[09:33:04.106]                 for (kk in seq_along(NAMES)) {
[09:33:04.106]                   name <- added[[kk]]
[09:33:04.106]                   NAME <- NAMES[[kk]]
[09:33:04.106]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.106]                     next
[09:33:04.106]                   args[[name]] <- ""
[09:33:04.106]                 }
[09:33:04.106]                 NAMES <- toupper(removed)
[09:33:04.106]                 for (kk in seq_along(NAMES)) {
[09:33:04.106]                   name <- removed[[kk]]
[09:33:04.106]                   NAME <- NAMES[[kk]]
[09:33:04.106]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.106]                     next
[09:33:04.106]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.106]                 }
[09:33:04.106]                 if (length(args) > 0) 
[09:33:04.106]                   base::do.call(base::Sys.setenv, args = args)
[09:33:04.106]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:04.106]             }
[09:33:04.106]             else {
[09:33:04.106]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:04.106]             }
[09:33:04.106]             {
[09:33:04.106]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:04.106]                   0L) {
[09:33:04.106]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:04.106]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:04.106]                   base::options(opts)
[09:33:04.106]                 }
[09:33:04.106]                 {
[09:33:04.106]                   {
[09:33:04.106]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:04.106]                     NULL
[09:33:04.106]                   }
[09:33:04.106]                   options(future.plan = NULL)
[09:33:04.106]                   if (is.na(NA_character_)) 
[09:33:04.106]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.106]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:04.106]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:04.106]                     .init = FALSE)
[09:33:04.106]                 }
[09:33:04.106]             }
[09:33:04.106]         }
[09:33:04.106]     })
[09:33:04.106]     if (TRUE) {
[09:33:04.106]         base::sink(type = "output", split = FALSE)
[09:33:04.106]         if (TRUE) {
[09:33:04.106]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:04.106]         }
[09:33:04.106]         else {
[09:33:04.106]             ...future.result["stdout"] <- base::list(NULL)
[09:33:04.106]         }
[09:33:04.106]         base::close(...future.stdout)
[09:33:04.106]         ...future.stdout <- NULL
[09:33:04.106]     }
[09:33:04.106]     ...future.result$conditions <- ...future.conditions
[09:33:04.106]     ...future.result$finished <- base::Sys.time()
[09:33:04.106]     ...future.result
[09:33:04.106] }
[09:33:04.109] requestCore(): workers = 2
[09:33:04.111] MulticoreFuture started
[09:33:04.111] - Launch lazy future ... done
[09:33:04.111] run() for ‘MulticoreFuture’ ... done
[09:33:04.111] result() for MulticoreFuture ...
[09:33:04.112] plan(): Setting new future strategy stack:
[09:33:04.112] List of future strategies:
[09:33:04.112] 1. sequential:
[09:33:04.112]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.112]    - tweaked: FALSE
[09:33:04.112]    - call: NULL
[09:33:04.113] plan(): nbrOfWorkers() = 1
[09:33:04.115] plan(): Setting new future strategy stack:
[09:33:04.115] List of future strategies:
[09:33:04.115] 1. multicore:
[09:33:04.115]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:33:04.115]    - tweaked: FALSE
[09:33:04.115]    - call: plan(strategy)
[09:33:04.120] plan(): nbrOfWorkers() = 2
[09:33:04.121] result() for MulticoreFuture ...
[09:33:04.121] result() for MulticoreFuture ... done
[09:33:04.121] result() for MulticoreFuture ... done
[09:33:04.121] result() for MulticoreFuture ...
[09:33:04.121] result() for MulticoreFuture ... done
[09:33:04.121] result() for MulticoreFuture ...
[09:33:04.121] result() for MulticoreFuture ... done
[1] 42
[09:33:04.122] result() for MulticoreFuture ...
[09:33:04.122] result() for MulticoreFuture ... done
- stdout = FALSE
[09:33:04.122] getGlobalsAndPackages() ...
[09:33:04.122] Searching for globals...
[09:33:04.126] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:04.126] Searching for globals ... DONE
[09:33:04.126] Resolving globals: FALSE
[09:33:04.127] 
[09:33:04.127] - packages: [1] ‘utils’
[09:33:04.127] getGlobalsAndPackages() ... DONE
[09:33:04.127] run() for ‘Future’ ...
[09:33:04.128] - state: ‘created’
[09:33:04.128] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:33:04.132] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:04.132] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:33:04.132]   - Field: ‘label’
[09:33:04.132]   - Field: ‘local’
[09:33:04.132]   - Field: ‘owner’
[09:33:04.132]   - Field: ‘envir’
[09:33:04.132]   - Field: ‘workers’
[09:33:04.132]   - Field: ‘packages’
[09:33:04.133]   - Field: ‘gc’
[09:33:04.133]   - Field: ‘job’
[09:33:04.133]   - Field: ‘conditions’
[09:33:04.133]   - Field: ‘expr’
[09:33:04.133]   - Field: ‘uuid’
[09:33:04.133]   - Field: ‘seed’
[09:33:04.133]   - Field: ‘version’
[09:33:04.133]   - Field: ‘result’
[09:33:04.133]   - Field: ‘asynchronous’
[09:33:04.133]   - Field: ‘calls’
[09:33:04.134]   - Field: ‘globals’
[09:33:04.134]   - Field: ‘stdout’
[09:33:04.134]   - Field: ‘earlySignal’
[09:33:04.134]   - Field: ‘lazy’
[09:33:04.134]   - Field: ‘state’
[09:33:04.134] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:33:04.134] - Launch lazy future ...
[09:33:04.135] Packages needed by the future expression (n = 1): ‘utils’
[09:33:04.135] Packages needed by future strategies (n = 0): <none>
[09:33:04.135] {
[09:33:04.135]     {
[09:33:04.135]         {
[09:33:04.135]             ...future.startTime <- base::Sys.time()
[09:33:04.135]             {
[09:33:04.135]                 {
[09:33:04.135]                   {
[09:33:04.135]                     {
[09:33:04.135]                       {
[09:33:04.135]                         base::local({
[09:33:04.135]                           has_future <- base::requireNamespace("future", 
[09:33:04.135]                             quietly = TRUE)
[09:33:04.135]                           if (has_future) {
[09:33:04.135]                             ns <- base::getNamespace("future")
[09:33:04.135]                             version <- ns[[".package"]][["version"]]
[09:33:04.135]                             if (is.null(version)) 
[09:33:04.135]                               version <- utils::packageVersion("future")
[09:33:04.135]                           }
[09:33:04.135]                           else {
[09:33:04.135]                             version <- NULL
[09:33:04.135]                           }
[09:33:04.135]                           if (!has_future || version < "1.8.0") {
[09:33:04.135]                             info <- base::c(r_version = base::gsub("R version ", 
[09:33:04.135]                               "", base::R.version$version.string), 
[09:33:04.135]                               platform = base::sprintf("%s (%s-bit)", 
[09:33:04.135]                                 base::R.version$platform, 8 * 
[09:33:04.135]                                   base::.Machine$sizeof.pointer), 
[09:33:04.135]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:04.135]                                 "release", "version")], collapse = " "), 
[09:33:04.135]                               hostname = base::Sys.info()[["nodename"]])
[09:33:04.135]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:33:04.135]                               info)
[09:33:04.135]                             info <- base::paste(info, collapse = "; ")
[09:33:04.135]                             if (!has_future) {
[09:33:04.135]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:04.135]                                 info)
[09:33:04.135]                             }
[09:33:04.135]                             else {
[09:33:04.135]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:04.135]                                 info, version)
[09:33:04.135]                             }
[09:33:04.135]                             base::stop(msg)
[09:33:04.135]                           }
[09:33:04.135]                         })
[09:33:04.135]                       }
[09:33:04.135]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:04.135]                       base::options(mc.cores = 1L)
[09:33:04.135]                     }
[09:33:04.135]                     base::local({
[09:33:04.135]                       for (pkg in "utils") {
[09:33:04.135]                         base::loadNamespace(pkg)
[09:33:04.135]                         base::library(pkg, character.only = TRUE)
[09:33:04.135]                       }
[09:33:04.135]                     })
[09:33:04.135]                   }
[09:33:04.135]                   ...future.strategy.old <- future::plan("list")
[09:33:04.135]                   options(future.plan = NULL)
[09:33:04.135]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.135]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:04.135]                 }
[09:33:04.135]                 ...future.workdir <- getwd()
[09:33:04.135]             }
[09:33:04.135]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:04.135]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:04.135]         }
[09:33:04.135]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:04.135]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:04.135]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:04.135]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:04.135]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:04.135]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:04.135]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:04.135]             base::names(...future.oldOptions))
[09:33:04.135]     }
[09:33:04.135]     if (FALSE) {
[09:33:04.135]     }
[09:33:04.135]     else {
[09:33:04.135]         if (FALSE) {
[09:33:04.135]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:04.135]                 open = "w")
[09:33:04.135]         }
[09:33:04.135]         else {
[09:33:04.135]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:04.135]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:04.135]         }
[09:33:04.135]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:04.135]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:04.135]             base::sink(type = "output", split = FALSE)
[09:33:04.135]             base::close(...future.stdout)
[09:33:04.135]         }, add = TRUE)
[09:33:04.135]     }
[09:33:04.135]     ...future.frame <- base::sys.nframe()
[09:33:04.135]     ...future.conditions <- base::list()
[09:33:04.135]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:04.135]     if (FALSE) {
[09:33:04.135]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:04.135]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:04.135]     }
[09:33:04.135]     ...future.result <- base::tryCatch({
[09:33:04.135]         base::withCallingHandlers({
[09:33:04.135]             ...future.value <- base::withVisible(base::local({
[09:33:04.135]                 withCallingHandlers({
[09:33:04.135]                   {
[09:33:04.135]                     print(1:50)
[09:33:04.135]                     str(1:50)
[09:33:04.135]                     cat(letters, sep = "-")
[09:33:04.135]                     cat(1:6, collapse = "\n")
[09:33:04.135]                     write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:04.135]                     42L
[09:33:04.135]                   }
[09:33:04.135]                 }, immediateCondition = function(cond) {
[09:33:04.135]                   save_rds <- function (object, pathname, ...) 
[09:33:04.135]                   {
[09:33:04.135]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:33:04.135]                     if (file_test("-f", pathname_tmp)) {
[09:33:04.135]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.135]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:33:04.135]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.135]                         fi_tmp[["mtime"]])
[09:33:04.135]                     }
[09:33:04.135]                     tryCatch({
[09:33:04.135]                       saveRDS(object, file = pathname_tmp, ...)
[09:33:04.135]                     }, error = function(ex) {
[09:33:04.135]                       msg <- conditionMessage(ex)
[09:33:04.135]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.135]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:33:04.135]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.135]                         fi_tmp[["mtime"]], msg)
[09:33:04.135]                       ex$message <- msg
[09:33:04.135]                       stop(ex)
[09:33:04.135]                     })
[09:33:04.135]                     stopifnot(file_test("-f", pathname_tmp))
[09:33:04.135]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:33:04.135]                     if (!res || file_test("-f", pathname_tmp)) {
[09:33:04.135]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.135]                       fi <- file.info(pathname)
[09:33:04.135]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:33:04.135]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.135]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:33:04.135]                         fi[["size"]], fi[["mtime"]])
[09:33:04.135]                       stop(msg)
[09:33:04.135]                     }
[09:33:04.135]                     invisible(pathname)
[09:33:04.135]                   }
[09:33:04.135]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:33:04.135]                     rootPath = tempdir()) 
[09:33:04.135]                   {
[09:33:04.135]                     obj <- list(time = Sys.time(), condition = cond)
[09:33:04.135]                     file <- tempfile(pattern = class(cond)[1], 
[09:33:04.135]                       tmpdir = path, fileext = ".rds")
[09:33:04.135]                     save_rds(obj, file)
[09:33:04.135]                   }
[09:33:04.135]                   saveImmediateCondition(cond, path = "/tmp/RtmpSN39z6/.future/immediateConditions")
[09:33:04.135]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.135]                   {
[09:33:04.135]                     inherits <- base::inherits
[09:33:04.135]                     invokeRestart <- base::invokeRestart
[09:33:04.135]                     is.null <- base::is.null
[09:33:04.135]                     muffled <- FALSE
[09:33:04.135]                     if (inherits(cond, "message")) {
[09:33:04.135]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:04.135]                       if (muffled) 
[09:33:04.135]                         invokeRestart("muffleMessage")
[09:33:04.135]                     }
[09:33:04.135]                     else if (inherits(cond, "warning")) {
[09:33:04.135]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:04.135]                       if (muffled) 
[09:33:04.135]                         invokeRestart("muffleWarning")
[09:33:04.135]                     }
[09:33:04.135]                     else if (inherits(cond, "condition")) {
[09:33:04.135]                       if (!is.null(pattern)) {
[09:33:04.135]                         computeRestarts <- base::computeRestarts
[09:33:04.135]                         grepl <- base::grepl
[09:33:04.135]                         restarts <- computeRestarts(cond)
[09:33:04.135]                         for (restart in restarts) {
[09:33:04.135]                           name <- restart$name
[09:33:04.135]                           if (is.null(name)) 
[09:33:04.135]                             next
[09:33:04.135]                           if (!grepl(pattern, name)) 
[09:33:04.135]                             next
[09:33:04.135]                           invokeRestart(restart)
[09:33:04.135]                           muffled <- TRUE
[09:33:04.135]                           break
[09:33:04.135]                         }
[09:33:04.135]                       }
[09:33:04.135]                     }
[09:33:04.135]                     invisible(muffled)
[09:33:04.135]                   }
[09:33:04.135]                   muffleCondition(cond)
[09:33:04.135]                 })
[09:33:04.135]             }))
[09:33:04.135]             future::FutureResult(value = ...future.value$value, 
[09:33:04.135]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.135]                   ...future.rng), globalenv = if (FALSE) 
[09:33:04.135]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:04.135]                     ...future.globalenv.names))
[09:33:04.135]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:04.135]         }, condition = base::local({
[09:33:04.135]             c <- base::c
[09:33:04.135]             inherits <- base::inherits
[09:33:04.135]             invokeRestart <- base::invokeRestart
[09:33:04.135]             length <- base::length
[09:33:04.135]             list <- base::list
[09:33:04.135]             seq.int <- base::seq.int
[09:33:04.135]             signalCondition <- base::signalCondition
[09:33:04.135]             sys.calls <- base::sys.calls
[09:33:04.135]             `[[` <- base::`[[`
[09:33:04.135]             `+` <- base::`+`
[09:33:04.135]             `<<-` <- base::`<<-`
[09:33:04.135]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:04.135]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:04.135]                   3L)]
[09:33:04.135]             }
[09:33:04.135]             function(cond) {
[09:33:04.135]                 is_error <- inherits(cond, "error")
[09:33:04.135]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:04.135]                   NULL)
[09:33:04.135]                 if (is_error) {
[09:33:04.135]                   sessionInformation <- function() {
[09:33:04.135]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:04.135]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:04.135]                       search = base::search(), system = base::Sys.info())
[09:33:04.135]                   }
[09:33:04.135]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.135]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:04.135]                     cond$call), session = sessionInformation(), 
[09:33:04.135]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:04.135]                   signalCondition(cond)
[09:33:04.135]                 }
[09:33:04.135]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:04.135]                 "immediateCondition"))) {
[09:33:04.135]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:04.135]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.135]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:04.135]                   if (TRUE && !signal) {
[09:33:04.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.135]                     {
[09:33:04.135]                       inherits <- base::inherits
[09:33:04.135]                       invokeRestart <- base::invokeRestart
[09:33:04.135]                       is.null <- base::is.null
[09:33:04.135]                       muffled <- FALSE
[09:33:04.135]                       if (inherits(cond, "message")) {
[09:33:04.135]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.135]                         if (muffled) 
[09:33:04.135]                           invokeRestart("muffleMessage")
[09:33:04.135]                       }
[09:33:04.135]                       else if (inherits(cond, "warning")) {
[09:33:04.135]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.135]                         if (muffled) 
[09:33:04.135]                           invokeRestart("muffleWarning")
[09:33:04.135]                       }
[09:33:04.135]                       else if (inherits(cond, "condition")) {
[09:33:04.135]                         if (!is.null(pattern)) {
[09:33:04.135]                           computeRestarts <- base::computeRestarts
[09:33:04.135]                           grepl <- base::grepl
[09:33:04.135]                           restarts <- computeRestarts(cond)
[09:33:04.135]                           for (restart in restarts) {
[09:33:04.135]                             name <- restart$name
[09:33:04.135]                             if (is.null(name)) 
[09:33:04.135]                               next
[09:33:04.135]                             if (!grepl(pattern, name)) 
[09:33:04.135]                               next
[09:33:04.135]                             invokeRestart(restart)
[09:33:04.135]                             muffled <- TRUE
[09:33:04.135]                             break
[09:33:04.135]                           }
[09:33:04.135]                         }
[09:33:04.135]                       }
[09:33:04.135]                       invisible(muffled)
[09:33:04.135]                     }
[09:33:04.135]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.135]                   }
[09:33:04.135]                 }
[09:33:04.135]                 else {
[09:33:04.135]                   if (TRUE) {
[09:33:04.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.135]                     {
[09:33:04.135]                       inherits <- base::inherits
[09:33:04.135]                       invokeRestart <- base::invokeRestart
[09:33:04.135]                       is.null <- base::is.null
[09:33:04.135]                       muffled <- FALSE
[09:33:04.135]                       if (inherits(cond, "message")) {
[09:33:04.135]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.135]                         if (muffled) 
[09:33:04.135]                           invokeRestart("muffleMessage")
[09:33:04.135]                       }
[09:33:04.135]                       else if (inherits(cond, "warning")) {
[09:33:04.135]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.135]                         if (muffled) 
[09:33:04.135]                           invokeRestart("muffleWarning")
[09:33:04.135]                       }
[09:33:04.135]                       else if (inherits(cond, "condition")) {
[09:33:04.135]                         if (!is.null(pattern)) {
[09:33:04.135]                           computeRestarts <- base::computeRestarts
[09:33:04.135]                           grepl <- base::grepl
[09:33:04.135]                           restarts <- computeRestarts(cond)
[09:33:04.135]                           for (restart in restarts) {
[09:33:04.135]                             name <- restart$name
[09:33:04.135]                             if (is.null(name)) 
[09:33:04.135]                               next
[09:33:04.135]                             if (!grepl(pattern, name)) 
[09:33:04.135]                               next
[09:33:04.135]                             invokeRestart(restart)
[09:33:04.135]                             muffled <- TRUE
[09:33:04.135]                             break
[09:33:04.135]                           }
[09:33:04.135]                         }
[09:33:04.135]                       }
[09:33:04.135]                       invisible(muffled)
[09:33:04.135]                     }
[09:33:04.135]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.135]                   }
[09:33:04.135]                 }
[09:33:04.135]             }
[09:33:04.135]         }))
[09:33:04.135]     }, error = function(ex) {
[09:33:04.135]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:04.135]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.135]                 ...future.rng), started = ...future.startTime, 
[09:33:04.135]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:04.135]             version = "1.8"), class = "FutureResult")
[09:33:04.135]     }, finally = {
[09:33:04.135]         if (!identical(...future.workdir, getwd())) 
[09:33:04.135]             setwd(...future.workdir)
[09:33:04.135]         {
[09:33:04.135]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:04.135]                 ...future.oldOptions$nwarnings <- NULL
[09:33:04.135]             }
[09:33:04.135]             base::options(...future.oldOptions)
[09:33:04.135]             if (.Platform$OS.type == "windows") {
[09:33:04.135]                 old_names <- names(...future.oldEnvVars)
[09:33:04.135]                 envs <- base::Sys.getenv()
[09:33:04.135]                 names <- names(envs)
[09:33:04.135]                 common <- intersect(names, old_names)
[09:33:04.135]                 added <- setdiff(names, old_names)
[09:33:04.135]                 removed <- setdiff(old_names, names)
[09:33:04.135]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:04.135]                   envs[common]]
[09:33:04.135]                 NAMES <- toupper(changed)
[09:33:04.135]                 args <- list()
[09:33:04.135]                 for (kk in seq_along(NAMES)) {
[09:33:04.135]                   name <- changed[[kk]]
[09:33:04.135]                   NAME <- NAMES[[kk]]
[09:33:04.135]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.135]                     next
[09:33:04.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.135]                 }
[09:33:04.135]                 NAMES <- toupper(added)
[09:33:04.135]                 for (kk in seq_along(NAMES)) {
[09:33:04.135]                   name <- added[[kk]]
[09:33:04.135]                   NAME <- NAMES[[kk]]
[09:33:04.135]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.135]                     next
[09:33:04.135]                   args[[name]] <- ""
[09:33:04.135]                 }
[09:33:04.135]                 NAMES <- toupper(removed)
[09:33:04.135]                 for (kk in seq_along(NAMES)) {
[09:33:04.135]                   name <- removed[[kk]]
[09:33:04.135]                   NAME <- NAMES[[kk]]
[09:33:04.135]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.135]                     next
[09:33:04.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.135]                 }
[09:33:04.135]                 if (length(args) > 0) 
[09:33:04.135]                   base::do.call(base::Sys.setenv, args = args)
[09:33:04.135]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:04.135]             }
[09:33:04.135]             else {
[09:33:04.135]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:04.135]             }
[09:33:04.135]             {
[09:33:04.135]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:04.135]                   0L) {
[09:33:04.135]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:04.135]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:04.135]                   base::options(opts)
[09:33:04.135]                 }
[09:33:04.135]                 {
[09:33:04.135]                   {
[09:33:04.135]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:04.135]                     NULL
[09:33:04.135]                   }
[09:33:04.135]                   options(future.plan = NULL)
[09:33:04.135]                   if (is.na(NA_character_)) 
[09:33:04.135]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.135]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:04.135]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:04.135]                     .init = FALSE)
[09:33:04.135]                 }
[09:33:04.135]             }
[09:33:04.135]         }
[09:33:04.135]     })
[09:33:04.135]     if (TRUE) {
[09:33:04.135]         base::sink(type = "output", split = FALSE)
[09:33:04.135]         if (FALSE) {
[09:33:04.135]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:04.135]         }
[09:33:04.135]         else {
[09:33:04.135]             ...future.result["stdout"] <- base::list(NULL)
[09:33:04.135]         }
[09:33:04.135]         base::close(...future.stdout)
[09:33:04.135]         ...future.stdout <- NULL
[09:33:04.135]     }
[09:33:04.135]     ...future.result$conditions <- ...future.conditions
[09:33:04.135]     ...future.result$finished <- base::Sys.time()
[09:33:04.135]     ...future.result
[09:33:04.135] }
[09:33:04.138] requestCore(): workers = 2
[09:33:04.140] MulticoreFuture started
[09:33:04.140] - Launch lazy future ... done
[09:33:04.140] run() for ‘MulticoreFuture’ ... done
[09:33:04.141] result() for MulticoreFuture ...
[09:33:04.141] plan(): Setting new future strategy stack:
[09:33:04.141] List of future strategies:
[09:33:04.141] 1. sequential:
[09:33:04.141]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.141]    - tweaked: FALSE
[09:33:04.141]    - call: NULL
[09:33:04.142] plan(): nbrOfWorkers() = 1
[09:33:04.150] plan(): Setting new future strategy stack:
[09:33:04.151] List of future strategies:
[09:33:04.151] 1. multicore:
[09:33:04.151]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:33:04.151]    - tweaked: FALSE
[09:33:04.151]    - call: plan(strategy)
[09:33:04.155] plan(): nbrOfWorkers() = 2
[09:33:04.156] result() for MulticoreFuture ...
[09:33:04.156] result() for MulticoreFuture ... done
[09:33:04.157] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 09:33:04"
 $ finished    : POSIXct[1:1], format: "2024-12-19 09:33:04"
 $ session_uuid: chr "67d99965-5ba9-f325-d27c-798bca928c7d"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "8f1daa72e372"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "8f1daa72e372" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 50466
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 09:33:04"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[09:33:04.169] result() for MulticoreFuture ...
[09:33:04.169] result() for MulticoreFuture ... done
[09:33:04.169] result() for MulticoreFuture ...
[09:33:04.169] result() for MulticoreFuture ... done
[09:33:04.170] getGlobalsAndPackages() ...
[09:33:04.170] Searching for globals...
[09:33:04.173] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:04.173] Searching for globals ... DONE
[09:33:04.174] Resolving globals: FALSE
[09:33:04.174] 
[09:33:04.174] - packages: [1] ‘utils’
[09:33:04.174] getGlobalsAndPackages() ... DONE
[09:33:04.175] run() for ‘Future’ ...
[09:33:04.175] - state: ‘created’
[09:33:04.175] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:33:04.179] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:04.179] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:33:04.179]   - Field: ‘label’
[09:33:04.179]   - Field: ‘local’
[09:33:04.179]   - Field: ‘owner’
[09:33:04.179]   - Field: ‘envir’
[09:33:04.179]   - Field: ‘workers’
[09:33:04.180]   - Field: ‘packages’
[09:33:04.180]   - Field: ‘gc’
[09:33:04.180]   - Field: ‘job’
[09:33:04.180]   - Field: ‘conditions’
[09:33:04.180]   - Field: ‘expr’
[09:33:04.180]   - Field: ‘uuid’
[09:33:04.180]   - Field: ‘seed’
[09:33:04.180]   - Field: ‘version’
[09:33:04.180]   - Field: ‘result’
[09:33:04.181]   - Field: ‘asynchronous’
[09:33:04.181]   - Field: ‘calls’
[09:33:04.181]   - Field: ‘globals’
[09:33:04.181]   - Field: ‘stdout’
[09:33:04.181]   - Field: ‘earlySignal’
[09:33:04.181]   - Field: ‘lazy’
[09:33:04.181]   - Field: ‘state’
[09:33:04.181] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:33:04.181] - Launch lazy future ...
[09:33:04.182] Packages needed by the future expression (n = 1): ‘utils’
[09:33:04.182] Packages needed by future strategies (n = 0): <none>
[09:33:04.182] {
[09:33:04.182]     {
[09:33:04.182]         {
[09:33:04.182]             ...future.startTime <- base::Sys.time()
[09:33:04.182]             {
[09:33:04.182]                 {
[09:33:04.182]                   {
[09:33:04.182]                     {
[09:33:04.182]                       {
[09:33:04.182]                         base::local({
[09:33:04.182]                           has_future <- base::requireNamespace("future", 
[09:33:04.182]                             quietly = TRUE)
[09:33:04.182]                           if (has_future) {
[09:33:04.182]                             ns <- base::getNamespace("future")
[09:33:04.182]                             version <- ns[[".package"]][["version"]]
[09:33:04.182]                             if (is.null(version)) 
[09:33:04.182]                               version <- utils::packageVersion("future")
[09:33:04.182]                           }
[09:33:04.182]                           else {
[09:33:04.182]                             version <- NULL
[09:33:04.182]                           }
[09:33:04.182]                           if (!has_future || version < "1.8.0") {
[09:33:04.182]                             info <- base::c(r_version = base::gsub("R version ", 
[09:33:04.182]                               "", base::R.version$version.string), 
[09:33:04.182]                               platform = base::sprintf("%s (%s-bit)", 
[09:33:04.182]                                 base::R.version$platform, 8 * 
[09:33:04.182]                                   base::.Machine$sizeof.pointer), 
[09:33:04.182]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:04.182]                                 "release", "version")], collapse = " "), 
[09:33:04.182]                               hostname = base::Sys.info()[["nodename"]])
[09:33:04.182]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:33:04.182]                               info)
[09:33:04.182]                             info <- base::paste(info, collapse = "; ")
[09:33:04.182]                             if (!has_future) {
[09:33:04.182]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:04.182]                                 info)
[09:33:04.182]                             }
[09:33:04.182]                             else {
[09:33:04.182]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:04.182]                                 info, version)
[09:33:04.182]                             }
[09:33:04.182]                             base::stop(msg)
[09:33:04.182]                           }
[09:33:04.182]                         })
[09:33:04.182]                       }
[09:33:04.182]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:04.182]                       base::options(mc.cores = 1L)
[09:33:04.182]                     }
[09:33:04.182]                     base::local({
[09:33:04.182]                       for (pkg in "utils") {
[09:33:04.182]                         base::loadNamespace(pkg)
[09:33:04.182]                         base::library(pkg, character.only = TRUE)
[09:33:04.182]                       }
[09:33:04.182]                     })
[09:33:04.182]                   }
[09:33:04.182]                   ...future.strategy.old <- future::plan("list")
[09:33:04.182]                   options(future.plan = NULL)
[09:33:04.182]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.182]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:04.182]                 }
[09:33:04.182]                 ...future.workdir <- getwd()
[09:33:04.182]             }
[09:33:04.182]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:04.182]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:04.182]         }
[09:33:04.182]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:04.182]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:04.182]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:04.182]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:04.182]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:04.182]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:04.182]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:04.182]             base::names(...future.oldOptions))
[09:33:04.182]     }
[09:33:04.182]     if (FALSE) {
[09:33:04.182]     }
[09:33:04.182]     else {
[09:33:04.182]         if (FALSE) {
[09:33:04.182]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:04.182]                 open = "w")
[09:33:04.182]         }
[09:33:04.182]         else {
[09:33:04.182]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:04.182]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:04.182]         }
[09:33:04.182]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:04.182]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:04.182]             base::sink(type = "output", split = FALSE)
[09:33:04.182]             base::close(...future.stdout)
[09:33:04.182]         }, add = TRUE)
[09:33:04.182]     }
[09:33:04.182]     ...future.frame <- base::sys.nframe()
[09:33:04.182]     ...future.conditions <- base::list()
[09:33:04.182]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:04.182]     if (FALSE) {
[09:33:04.182]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:04.182]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:04.182]     }
[09:33:04.182]     ...future.result <- base::tryCatch({
[09:33:04.182]         base::withCallingHandlers({
[09:33:04.182]             ...future.value <- base::withVisible(base::local({
[09:33:04.182]                 withCallingHandlers({
[09:33:04.182]                   {
[09:33:04.182]                     print(1:50)
[09:33:04.182]                     str(1:50)
[09:33:04.182]                     cat(letters, sep = "-")
[09:33:04.182]                     cat(1:6, collapse = "\n")
[09:33:04.182]                     write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:04.182]                     42L
[09:33:04.182]                   }
[09:33:04.182]                 }, immediateCondition = function(cond) {
[09:33:04.182]                   save_rds <- function (object, pathname, ...) 
[09:33:04.182]                   {
[09:33:04.182]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:33:04.182]                     if (file_test("-f", pathname_tmp)) {
[09:33:04.182]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.182]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:33:04.182]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.182]                         fi_tmp[["mtime"]])
[09:33:04.182]                     }
[09:33:04.182]                     tryCatch({
[09:33:04.182]                       saveRDS(object, file = pathname_tmp, ...)
[09:33:04.182]                     }, error = function(ex) {
[09:33:04.182]                       msg <- conditionMessage(ex)
[09:33:04.182]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.182]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:33:04.182]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.182]                         fi_tmp[["mtime"]], msg)
[09:33:04.182]                       ex$message <- msg
[09:33:04.182]                       stop(ex)
[09:33:04.182]                     })
[09:33:04.182]                     stopifnot(file_test("-f", pathname_tmp))
[09:33:04.182]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:33:04.182]                     if (!res || file_test("-f", pathname_tmp)) {
[09:33:04.182]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.182]                       fi <- file.info(pathname)
[09:33:04.182]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:33:04.182]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.182]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:33:04.182]                         fi[["size"]], fi[["mtime"]])
[09:33:04.182]                       stop(msg)
[09:33:04.182]                     }
[09:33:04.182]                     invisible(pathname)
[09:33:04.182]                   }
[09:33:04.182]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:33:04.182]                     rootPath = tempdir()) 
[09:33:04.182]                   {
[09:33:04.182]                     obj <- list(time = Sys.time(), condition = cond)
[09:33:04.182]                     file <- tempfile(pattern = class(cond)[1], 
[09:33:04.182]                       tmpdir = path, fileext = ".rds")
[09:33:04.182]                     save_rds(obj, file)
[09:33:04.182]                   }
[09:33:04.182]                   saveImmediateCondition(cond, path = "/tmp/RtmpSN39z6/.future/immediateConditions")
[09:33:04.182]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.182]                   {
[09:33:04.182]                     inherits <- base::inherits
[09:33:04.182]                     invokeRestart <- base::invokeRestart
[09:33:04.182]                     is.null <- base::is.null
[09:33:04.182]                     muffled <- FALSE
[09:33:04.182]                     if (inherits(cond, "message")) {
[09:33:04.182]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:04.182]                       if (muffled) 
[09:33:04.182]                         invokeRestart("muffleMessage")
[09:33:04.182]                     }
[09:33:04.182]                     else if (inherits(cond, "warning")) {
[09:33:04.182]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:04.182]                       if (muffled) 
[09:33:04.182]                         invokeRestart("muffleWarning")
[09:33:04.182]                     }
[09:33:04.182]                     else if (inherits(cond, "condition")) {
[09:33:04.182]                       if (!is.null(pattern)) {
[09:33:04.182]                         computeRestarts <- base::computeRestarts
[09:33:04.182]                         grepl <- base::grepl
[09:33:04.182]                         restarts <- computeRestarts(cond)
[09:33:04.182]                         for (restart in restarts) {
[09:33:04.182]                           name <- restart$name
[09:33:04.182]                           if (is.null(name)) 
[09:33:04.182]                             next
[09:33:04.182]                           if (!grepl(pattern, name)) 
[09:33:04.182]                             next
[09:33:04.182]                           invokeRestart(restart)
[09:33:04.182]                           muffled <- TRUE
[09:33:04.182]                           break
[09:33:04.182]                         }
[09:33:04.182]                       }
[09:33:04.182]                     }
[09:33:04.182]                     invisible(muffled)
[09:33:04.182]                   }
[09:33:04.182]                   muffleCondition(cond)
[09:33:04.182]                 })
[09:33:04.182]             }))
[09:33:04.182]             future::FutureResult(value = ...future.value$value, 
[09:33:04.182]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.182]                   ...future.rng), globalenv = if (FALSE) 
[09:33:04.182]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:04.182]                     ...future.globalenv.names))
[09:33:04.182]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:04.182]         }, condition = base::local({
[09:33:04.182]             c <- base::c
[09:33:04.182]             inherits <- base::inherits
[09:33:04.182]             invokeRestart <- base::invokeRestart
[09:33:04.182]             length <- base::length
[09:33:04.182]             list <- base::list
[09:33:04.182]             seq.int <- base::seq.int
[09:33:04.182]             signalCondition <- base::signalCondition
[09:33:04.182]             sys.calls <- base::sys.calls
[09:33:04.182]             `[[` <- base::`[[`
[09:33:04.182]             `+` <- base::`+`
[09:33:04.182]             `<<-` <- base::`<<-`
[09:33:04.182]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:04.182]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:04.182]                   3L)]
[09:33:04.182]             }
[09:33:04.182]             function(cond) {
[09:33:04.182]                 is_error <- inherits(cond, "error")
[09:33:04.182]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:04.182]                   NULL)
[09:33:04.182]                 if (is_error) {
[09:33:04.182]                   sessionInformation <- function() {
[09:33:04.182]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:04.182]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:04.182]                       search = base::search(), system = base::Sys.info())
[09:33:04.182]                   }
[09:33:04.182]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.182]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:04.182]                     cond$call), session = sessionInformation(), 
[09:33:04.182]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:04.182]                   signalCondition(cond)
[09:33:04.182]                 }
[09:33:04.182]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:04.182]                 "immediateCondition"))) {
[09:33:04.182]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:04.182]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.182]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:04.182]                   if (TRUE && !signal) {
[09:33:04.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.182]                     {
[09:33:04.182]                       inherits <- base::inherits
[09:33:04.182]                       invokeRestart <- base::invokeRestart
[09:33:04.182]                       is.null <- base::is.null
[09:33:04.182]                       muffled <- FALSE
[09:33:04.182]                       if (inherits(cond, "message")) {
[09:33:04.182]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.182]                         if (muffled) 
[09:33:04.182]                           invokeRestart("muffleMessage")
[09:33:04.182]                       }
[09:33:04.182]                       else if (inherits(cond, "warning")) {
[09:33:04.182]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.182]                         if (muffled) 
[09:33:04.182]                           invokeRestart("muffleWarning")
[09:33:04.182]                       }
[09:33:04.182]                       else if (inherits(cond, "condition")) {
[09:33:04.182]                         if (!is.null(pattern)) {
[09:33:04.182]                           computeRestarts <- base::computeRestarts
[09:33:04.182]                           grepl <- base::grepl
[09:33:04.182]                           restarts <- computeRestarts(cond)
[09:33:04.182]                           for (restart in restarts) {
[09:33:04.182]                             name <- restart$name
[09:33:04.182]                             if (is.null(name)) 
[09:33:04.182]                               next
[09:33:04.182]                             if (!grepl(pattern, name)) 
[09:33:04.182]                               next
[09:33:04.182]                             invokeRestart(restart)
[09:33:04.182]                             muffled <- TRUE
[09:33:04.182]                             break
[09:33:04.182]                           }
[09:33:04.182]                         }
[09:33:04.182]                       }
[09:33:04.182]                       invisible(muffled)
[09:33:04.182]                     }
[09:33:04.182]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.182]                   }
[09:33:04.182]                 }
[09:33:04.182]                 else {
[09:33:04.182]                   if (TRUE) {
[09:33:04.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.182]                     {
[09:33:04.182]                       inherits <- base::inherits
[09:33:04.182]                       invokeRestart <- base::invokeRestart
[09:33:04.182]                       is.null <- base::is.null
[09:33:04.182]                       muffled <- FALSE
[09:33:04.182]                       if (inherits(cond, "message")) {
[09:33:04.182]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.182]                         if (muffled) 
[09:33:04.182]                           invokeRestart("muffleMessage")
[09:33:04.182]                       }
[09:33:04.182]                       else if (inherits(cond, "warning")) {
[09:33:04.182]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.182]                         if (muffled) 
[09:33:04.182]                           invokeRestart("muffleWarning")
[09:33:04.182]                       }
[09:33:04.182]                       else if (inherits(cond, "condition")) {
[09:33:04.182]                         if (!is.null(pattern)) {
[09:33:04.182]                           computeRestarts <- base::computeRestarts
[09:33:04.182]                           grepl <- base::grepl
[09:33:04.182]                           restarts <- computeRestarts(cond)
[09:33:04.182]                           for (restart in restarts) {
[09:33:04.182]                             name <- restart$name
[09:33:04.182]                             if (is.null(name)) 
[09:33:04.182]                               next
[09:33:04.182]                             if (!grepl(pattern, name)) 
[09:33:04.182]                               next
[09:33:04.182]                             invokeRestart(restart)
[09:33:04.182]                             muffled <- TRUE
[09:33:04.182]                             break
[09:33:04.182]                           }
[09:33:04.182]                         }
[09:33:04.182]                       }
[09:33:04.182]                       invisible(muffled)
[09:33:04.182]                     }
[09:33:04.182]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.182]                   }
[09:33:04.182]                 }
[09:33:04.182]             }
[09:33:04.182]         }))
[09:33:04.182]     }, error = function(ex) {
[09:33:04.182]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:04.182]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.182]                 ...future.rng), started = ...future.startTime, 
[09:33:04.182]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:04.182]             version = "1.8"), class = "FutureResult")
[09:33:04.182]     }, finally = {
[09:33:04.182]         if (!identical(...future.workdir, getwd())) 
[09:33:04.182]             setwd(...future.workdir)
[09:33:04.182]         {
[09:33:04.182]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:04.182]                 ...future.oldOptions$nwarnings <- NULL
[09:33:04.182]             }
[09:33:04.182]             base::options(...future.oldOptions)
[09:33:04.182]             if (.Platform$OS.type == "windows") {
[09:33:04.182]                 old_names <- names(...future.oldEnvVars)
[09:33:04.182]                 envs <- base::Sys.getenv()
[09:33:04.182]                 names <- names(envs)
[09:33:04.182]                 common <- intersect(names, old_names)
[09:33:04.182]                 added <- setdiff(names, old_names)
[09:33:04.182]                 removed <- setdiff(old_names, names)
[09:33:04.182]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:04.182]                   envs[common]]
[09:33:04.182]                 NAMES <- toupper(changed)
[09:33:04.182]                 args <- list()
[09:33:04.182]                 for (kk in seq_along(NAMES)) {
[09:33:04.182]                   name <- changed[[kk]]
[09:33:04.182]                   NAME <- NAMES[[kk]]
[09:33:04.182]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.182]                     next
[09:33:04.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.182]                 }
[09:33:04.182]                 NAMES <- toupper(added)
[09:33:04.182]                 for (kk in seq_along(NAMES)) {
[09:33:04.182]                   name <- added[[kk]]
[09:33:04.182]                   NAME <- NAMES[[kk]]
[09:33:04.182]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.182]                     next
[09:33:04.182]                   args[[name]] <- ""
[09:33:04.182]                 }
[09:33:04.182]                 NAMES <- toupper(removed)
[09:33:04.182]                 for (kk in seq_along(NAMES)) {
[09:33:04.182]                   name <- removed[[kk]]
[09:33:04.182]                   NAME <- NAMES[[kk]]
[09:33:04.182]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.182]                     next
[09:33:04.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.182]                 }
[09:33:04.182]                 if (length(args) > 0) 
[09:33:04.182]                   base::do.call(base::Sys.setenv, args = args)
[09:33:04.182]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:04.182]             }
[09:33:04.182]             else {
[09:33:04.182]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:04.182]             }
[09:33:04.182]             {
[09:33:04.182]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:04.182]                   0L) {
[09:33:04.182]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:04.182]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:04.182]                   base::options(opts)
[09:33:04.182]                 }
[09:33:04.182]                 {
[09:33:04.182]                   {
[09:33:04.182]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:04.182]                     NULL
[09:33:04.182]                   }
[09:33:04.182]                   options(future.plan = NULL)
[09:33:04.182]                   if (is.na(NA_character_)) 
[09:33:04.182]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.182]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:04.182]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:04.182]                     .init = FALSE)
[09:33:04.182]                 }
[09:33:04.182]             }
[09:33:04.182]         }
[09:33:04.182]     })
[09:33:04.182]     if (TRUE) {
[09:33:04.182]         base::sink(type = "output", split = FALSE)
[09:33:04.182]         if (FALSE) {
[09:33:04.182]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:04.182]         }
[09:33:04.182]         else {
[09:33:04.182]             ...future.result["stdout"] <- base::list(NULL)
[09:33:04.182]         }
[09:33:04.182]         base::close(...future.stdout)
[09:33:04.182]         ...future.stdout <- NULL
[09:33:04.182]     }
[09:33:04.182]     ...future.result$conditions <- ...future.conditions
[09:33:04.182]     ...future.result$finished <- base::Sys.time()
[09:33:04.182]     ...future.result
[09:33:04.182] }
[09:33:04.185] requestCore(): workers = 2
[09:33:04.186] MulticoreFuture started
[09:33:04.187] - Launch lazy future ... done
[09:33:04.187] run() for ‘MulticoreFuture’ ... done
[09:33:04.188] result() for MulticoreFuture ...
[09:33:04.188] plan(): Setting new future strategy stack:
[09:33:04.188] List of future strategies:
[09:33:04.188] 1. sequential:
[09:33:04.188]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.188]    - tweaked: FALSE
[09:33:04.188]    - call: NULL
[09:33:04.189] plan(): nbrOfWorkers() = 1
[09:33:04.192] plan(): Setting new future strategy stack:
[09:33:04.192] List of future strategies:
[09:33:04.192] 1. multicore:
[09:33:04.192]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:33:04.192]    - tweaked: FALSE
[09:33:04.192]    - call: plan(strategy)
[09:33:04.197] plan(): nbrOfWorkers() = 2
[09:33:04.198] result() for MulticoreFuture ...
[09:33:04.198] result() for MulticoreFuture ... done
[09:33:04.198] result() for MulticoreFuture ... done
[09:33:04.198] result() for MulticoreFuture ...
[09:33:04.198] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[09:33:04.199] getGlobalsAndPackages() ...
[09:33:04.199] Searching for globals...
[09:33:04.200] - globals found: [1] ‘print’
[09:33:04.200] Searching for globals ... DONE
[09:33:04.200] Resolving globals: FALSE
[09:33:04.200] 
[09:33:04.200] 
[09:33:04.201] getGlobalsAndPackages() ... DONE
[09:33:04.201] run() for ‘Future’ ...
[09:33:04.201] - state: ‘created’
[09:33:04.201] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:33:04.205] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:04.205] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:33:04.205]   - Field: ‘label’
[09:33:04.205]   - Field: ‘local’
[09:33:04.206]   - Field: ‘owner’
[09:33:04.206]   - Field: ‘envir’
[09:33:04.206]   - Field: ‘workers’
[09:33:04.206]   - Field: ‘packages’
[09:33:04.206]   - Field: ‘gc’
[09:33:04.206]   - Field: ‘job’
[09:33:04.206]   - Field: ‘conditions’
[09:33:04.206]   - Field: ‘expr’
[09:33:04.206]   - Field: ‘uuid’
[09:33:04.207]   - Field: ‘seed’
[09:33:04.207]   - Field: ‘version’
[09:33:04.207]   - Field: ‘result’
[09:33:04.207]   - Field: ‘asynchronous’
[09:33:04.207]   - Field: ‘calls’
[09:33:04.209]   - Field: ‘globals’
[09:33:04.209]   - Field: ‘stdout’
[09:33:04.209]   - Field: ‘earlySignal’
[09:33:04.209]   - Field: ‘lazy’
[09:33:04.209]   - Field: ‘state’
[09:33:04.210] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:33:04.210] - Launch lazy future ...
[09:33:04.210] Packages needed by the future expression (n = 0): <none>
[09:33:04.210] Packages needed by future strategies (n = 0): <none>
[09:33:04.211] {
[09:33:04.211]     {
[09:33:04.211]         {
[09:33:04.211]             ...future.startTime <- base::Sys.time()
[09:33:04.211]             {
[09:33:04.211]                 {
[09:33:04.211]                   {
[09:33:04.211]                     {
[09:33:04.211]                       base::local({
[09:33:04.211]                         has_future <- base::requireNamespace("future", 
[09:33:04.211]                           quietly = TRUE)
[09:33:04.211]                         if (has_future) {
[09:33:04.211]                           ns <- base::getNamespace("future")
[09:33:04.211]                           version <- ns[[".package"]][["version"]]
[09:33:04.211]                           if (is.null(version)) 
[09:33:04.211]                             version <- utils::packageVersion("future")
[09:33:04.211]                         }
[09:33:04.211]                         else {
[09:33:04.211]                           version <- NULL
[09:33:04.211]                         }
[09:33:04.211]                         if (!has_future || version < "1.8.0") {
[09:33:04.211]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:04.211]                             "", base::R.version$version.string), 
[09:33:04.211]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:04.211]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:04.211]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:04.211]                               "release", "version")], collapse = " "), 
[09:33:04.211]                             hostname = base::Sys.info()[["nodename"]])
[09:33:04.211]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:04.211]                             info)
[09:33:04.211]                           info <- base::paste(info, collapse = "; ")
[09:33:04.211]                           if (!has_future) {
[09:33:04.211]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:04.211]                               info)
[09:33:04.211]                           }
[09:33:04.211]                           else {
[09:33:04.211]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:04.211]                               info, version)
[09:33:04.211]                           }
[09:33:04.211]                           base::stop(msg)
[09:33:04.211]                         }
[09:33:04.211]                       })
[09:33:04.211]                     }
[09:33:04.211]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:04.211]                     base::options(mc.cores = 1L)
[09:33:04.211]                   }
[09:33:04.211]                   ...future.strategy.old <- future::plan("list")
[09:33:04.211]                   options(future.plan = NULL)
[09:33:04.211]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.211]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:04.211]                 }
[09:33:04.211]                 ...future.workdir <- getwd()
[09:33:04.211]             }
[09:33:04.211]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:04.211]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:04.211]         }
[09:33:04.211]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:04.211]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:04.211]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:04.211]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:04.211]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:04.211]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:04.211]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:04.211]             base::names(...future.oldOptions))
[09:33:04.211]     }
[09:33:04.211]     if (FALSE) {
[09:33:04.211]     }
[09:33:04.211]     else {
[09:33:04.211]         if (TRUE) {
[09:33:04.211]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:04.211]                 open = "w")
[09:33:04.211]         }
[09:33:04.211]         else {
[09:33:04.211]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:04.211]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:04.211]         }
[09:33:04.211]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:04.211]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:04.211]             base::sink(type = "output", split = FALSE)
[09:33:04.211]             base::close(...future.stdout)
[09:33:04.211]         }, add = TRUE)
[09:33:04.211]     }
[09:33:04.211]     ...future.frame <- base::sys.nframe()
[09:33:04.211]     ...future.conditions <- base::list()
[09:33:04.211]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:04.211]     if (FALSE) {
[09:33:04.211]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:04.211]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:04.211]     }
[09:33:04.211]     ...future.result <- base::tryCatch({
[09:33:04.211]         base::withCallingHandlers({
[09:33:04.211]             ...future.value <- base::withVisible(base::local({
[09:33:04.211]                 withCallingHandlers({
[09:33:04.211]                   print(42)
[09:33:04.211]                 }, immediateCondition = function(cond) {
[09:33:04.211]                   save_rds <- function (object, pathname, ...) 
[09:33:04.211]                   {
[09:33:04.211]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:33:04.211]                     if (file_test("-f", pathname_tmp)) {
[09:33:04.211]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.211]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:33:04.211]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.211]                         fi_tmp[["mtime"]])
[09:33:04.211]                     }
[09:33:04.211]                     tryCatch({
[09:33:04.211]                       saveRDS(object, file = pathname_tmp, ...)
[09:33:04.211]                     }, error = function(ex) {
[09:33:04.211]                       msg <- conditionMessage(ex)
[09:33:04.211]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.211]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:33:04.211]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.211]                         fi_tmp[["mtime"]], msg)
[09:33:04.211]                       ex$message <- msg
[09:33:04.211]                       stop(ex)
[09:33:04.211]                     })
[09:33:04.211]                     stopifnot(file_test("-f", pathname_tmp))
[09:33:04.211]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:33:04.211]                     if (!res || file_test("-f", pathname_tmp)) {
[09:33:04.211]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.211]                       fi <- file.info(pathname)
[09:33:04.211]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:33:04.211]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.211]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:33:04.211]                         fi[["size"]], fi[["mtime"]])
[09:33:04.211]                       stop(msg)
[09:33:04.211]                     }
[09:33:04.211]                     invisible(pathname)
[09:33:04.211]                   }
[09:33:04.211]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:33:04.211]                     rootPath = tempdir()) 
[09:33:04.211]                   {
[09:33:04.211]                     obj <- list(time = Sys.time(), condition = cond)
[09:33:04.211]                     file <- tempfile(pattern = class(cond)[1], 
[09:33:04.211]                       tmpdir = path, fileext = ".rds")
[09:33:04.211]                     save_rds(obj, file)
[09:33:04.211]                   }
[09:33:04.211]                   saveImmediateCondition(cond, path = "/tmp/RtmpSN39z6/.future/immediateConditions")
[09:33:04.211]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.211]                   {
[09:33:04.211]                     inherits <- base::inherits
[09:33:04.211]                     invokeRestart <- base::invokeRestart
[09:33:04.211]                     is.null <- base::is.null
[09:33:04.211]                     muffled <- FALSE
[09:33:04.211]                     if (inherits(cond, "message")) {
[09:33:04.211]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:04.211]                       if (muffled) 
[09:33:04.211]                         invokeRestart("muffleMessage")
[09:33:04.211]                     }
[09:33:04.211]                     else if (inherits(cond, "warning")) {
[09:33:04.211]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:04.211]                       if (muffled) 
[09:33:04.211]                         invokeRestart("muffleWarning")
[09:33:04.211]                     }
[09:33:04.211]                     else if (inherits(cond, "condition")) {
[09:33:04.211]                       if (!is.null(pattern)) {
[09:33:04.211]                         computeRestarts <- base::computeRestarts
[09:33:04.211]                         grepl <- base::grepl
[09:33:04.211]                         restarts <- computeRestarts(cond)
[09:33:04.211]                         for (restart in restarts) {
[09:33:04.211]                           name <- restart$name
[09:33:04.211]                           if (is.null(name)) 
[09:33:04.211]                             next
[09:33:04.211]                           if (!grepl(pattern, name)) 
[09:33:04.211]                             next
[09:33:04.211]                           invokeRestart(restart)
[09:33:04.211]                           muffled <- TRUE
[09:33:04.211]                           break
[09:33:04.211]                         }
[09:33:04.211]                       }
[09:33:04.211]                     }
[09:33:04.211]                     invisible(muffled)
[09:33:04.211]                   }
[09:33:04.211]                   muffleCondition(cond)
[09:33:04.211]                 })
[09:33:04.211]             }))
[09:33:04.211]             future::FutureResult(value = ...future.value$value, 
[09:33:04.211]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.211]                   ...future.rng), globalenv = if (FALSE) 
[09:33:04.211]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:04.211]                     ...future.globalenv.names))
[09:33:04.211]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:04.211]         }, condition = base::local({
[09:33:04.211]             c <- base::c
[09:33:04.211]             inherits <- base::inherits
[09:33:04.211]             invokeRestart <- base::invokeRestart
[09:33:04.211]             length <- base::length
[09:33:04.211]             list <- base::list
[09:33:04.211]             seq.int <- base::seq.int
[09:33:04.211]             signalCondition <- base::signalCondition
[09:33:04.211]             sys.calls <- base::sys.calls
[09:33:04.211]             `[[` <- base::`[[`
[09:33:04.211]             `+` <- base::`+`
[09:33:04.211]             `<<-` <- base::`<<-`
[09:33:04.211]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:04.211]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:04.211]                   3L)]
[09:33:04.211]             }
[09:33:04.211]             function(cond) {
[09:33:04.211]                 is_error <- inherits(cond, "error")
[09:33:04.211]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:04.211]                   NULL)
[09:33:04.211]                 if (is_error) {
[09:33:04.211]                   sessionInformation <- function() {
[09:33:04.211]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:04.211]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:04.211]                       search = base::search(), system = base::Sys.info())
[09:33:04.211]                   }
[09:33:04.211]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.211]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:04.211]                     cond$call), session = sessionInformation(), 
[09:33:04.211]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:04.211]                   signalCondition(cond)
[09:33:04.211]                 }
[09:33:04.211]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:04.211]                 "immediateCondition"))) {
[09:33:04.211]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:04.211]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.211]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:04.211]                   if (TRUE && !signal) {
[09:33:04.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.211]                     {
[09:33:04.211]                       inherits <- base::inherits
[09:33:04.211]                       invokeRestart <- base::invokeRestart
[09:33:04.211]                       is.null <- base::is.null
[09:33:04.211]                       muffled <- FALSE
[09:33:04.211]                       if (inherits(cond, "message")) {
[09:33:04.211]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.211]                         if (muffled) 
[09:33:04.211]                           invokeRestart("muffleMessage")
[09:33:04.211]                       }
[09:33:04.211]                       else if (inherits(cond, "warning")) {
[09:33:04.211]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.211]                         if (muffled) 
[09:33:04.211]                           invokeRestart("muffleWarning")
[09:33:04.211]                       }
[09:33:04.211]                       else if (inherits(cond, "condition")) {
[09:33:04.211]                         if (!is.null(pattern)) {
[09:33:04.211]                           computeRestarts <- base::computeRestarts
[09:33:04.211]                           grepl <- base::grepl
[09:33:04.211]                           restarts <- computeRestarts(cond)
[09:33:04.211]                           for (restart in restarts) {
[09:33:04.211]                             name <- restart$name
[09:33:04.211]                             if (is.null(name)) 
[09:33:04.211]                               next
[09:33:04.211]                             if (!grepl(pattern, name)) 
[09:33:04.211]                               next
[09:33:04.211]                             invokeRestart(restart)
[09:33:04.211]                             muffled <- TRUE
[09:33:04.211]                             break
[09:33:04.211]                           }
[09:33:04.211]                         }
[09:33:04.211]                       }
[09:33:04.211]                       invisible(muffled)
[09:33:04.211]                     }
[09:33:04.211]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.211]                   }
[09:33:04.211]                 }
[09:33:04.211]                 else {
[09:33:04.211]                   if (TRUE) {
[09:33:04.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.211]                     {
[09:33:04.211]                       inherits <- base::inherits
[09:33:04.211]                       invokeRestart <- base::invokeRestart
[09:33:04.211]                       is.null <- base::is.null
[09:33:04.211]                       muffled <- FALSE
[09:33:04.211]                       if (inherits(cond, "message")) {
[09:33:04.211]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.211]                         if (muffled) 
[09:33:04.211]                           invokeRestart("muffleMessage")
[09:33:04.211]                       }
[09:33:04.211]                       else if (inherits(cond, "warning")) {
[09:33:04.211]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.211]                         if (muffled) 
[09:33:04.211]                           invokeRestart("muffleWarning")
[09:33:04.211]                       }
[09:33:04.211]                       else if (inherits(cond, "condition")) {
[09:33:04.211]                         if (!is.null(pattern)) {
[09:33:04.211]                           computeRestarts <- base::computeRestarts
[09:33:04.211]                           grepl <- base::grepl
[09:33:04.211]                           restarts <- computeRestarts(cond)
[09:33:04.211]                           for (restart in restarts) {
[09:33:04.211]                             name <- restart$name
[09:33:04.211]                             if (is.null(name)) 
[09:33:04.211]                               next
[09:33:04.211]                             if (!grepl(pattern, name)) 
[09:33:04.211]                               next
[09:33:04.211]                             invokeRestart(restart)
[09:33:04.211]                             muffled <- TRUE
[09:33:04.211]                             break
[09:33:04.211]                           }
[09:33:04.211]                         }
[09:33:04.211]                       }
[09:33:04.211]                       invisible(muffled)
[09:33:04.211]                     }
[09:33:04.211]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.211]                   }
[09:33:04.211]                 }
[09:33:04.211]             }
[09:33:04.211]         }))
[09:33:04.211]     }, error = function(ex) {
[09:33:04.211]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:04.211]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.211]                 ...future.rng), started = ...future.startTime, 
[09:33:04.211]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:04.211]             version = "1.8"), class = "FutureResult")
[09:33:04.211]     }, finally = {
[09:33:04.211]         if (!identical(...future.workdir, getwd())) 
[09:33:04.211]             setwd(...future.workdir)
[09:33:04.211]         {
[09:33:04.211]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:04.211]                 ...future.oldOptions$nwarnings <- NULL
[09:33:04.211]             }
[09:33:04.211]             base::options(...future.oldOptions)
[09:33:04.211]             if (.Platform$OS.type == "windows") {
[09:33:04.211]                 old_names <- names(...future.oldEnvVars)
[09:33:04.211]                 envs <- base::Sys.getenv()
[09:33:04.211]                 names <- names(envs)
[09:33:04.211]                 common <- intersect(names, old_names)
[09:33:04.211]                 added <- setdiff(names, old_names)
[09:33:04.211]                 removed <- setdiff(old_names, names)
[09:33:04.211]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:04.211]                   envs[common]]
[09:33:04.211]                 NAMES <- toupper(changed)
[09:33:04.211]                 args <- list()
[09:33:04.211]                 for (kk in seq_along(NAMES)) {
[09:33:04.211]                   name <- changed[[kk]]
[09:33:04.211]                   NAME <- NAMES[[kk]]
[09:33:04.211]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.211]                     next
[09:33:04.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.211]                 }
[09:33:04.211]                 NAMES <- toupper(added)
[09:33:04.211]                 for (kk in seq_along(NAMES)) {
[09:33:04.211]                   name <- added[[kk]]
[09:33:04.211]                   NAME <- NAMES[[kk]]
[09:33:04.211]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.211]                     next
[09:33:04.211]                   args[[name]] <- ""
[09:33:04.211]                 }
[09:33:04.211]                 NAMES <- toupper(removed)
[09:33:04.211]                 for (kk in seq_along(NAMES)) {
[09:33:04.211]                   name <- removed[[kk]]
[09:33:04.211]                   NAME <- NAMES[[kk]]
[09:33:04.211]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.211]                     next
[09:33:04.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.211]                 }
[09:33:04.211]                 if (length(args) > 0) 
[09:33:04.211]                   base::do.call(base::Sys.setenv, args = args)
[09:33:04.211]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:04.211]             }
[09:33:04.211]             else {
[09:33:04.211]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:04.211]             }
[09:33:04.211]             {
[09:33:04.211]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:04.211]                   0L) {
[09:33:04.211]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:04.211]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:04.211]                   base::options(opts)
[09:33:04.211]                 }
[09:33:04.211]                 {
[09:33:04.211]                   {
[09:33:04.211]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:04.211]                     NULL
[09:33:04.211]                   }
[09:33:04.211]                   options(future.plan = NULL)
[09:33:04.211]                   if (is.na(NA_character_)) 
[09:33:04.211]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.211]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:04.211]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:04.211]                     .init = FALSE)
[09:33:04.211]                 }
[09:33:04.211]             }
[09:33:04.211]         }
[09:33:04.211]     })
[09:33:04.211]     if (TRUE) {
[09:33:04.211]         base::sink(type = "output", split = FALSE)
[09:33:04.211]         if (TRUE) {
[09:33:04.211]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:04.211]         }
[09:33:04.211]         else {
[09:33:04.211]             ...future.result["stdout"] <- base::list(NULL)
[09:33:04.211]         }
[09:33:04.211]         base::close(...future.stdout)
[09:33:04.211]         ...future.stdout <- NULL
[09:33:04.211]     }
[09:33:04.211]     ...future.result$conditions <- ...future.conditions
[09:33:04.211]     ...future.result$finished <- base::Sys.time()
[09:33:04.211]     ...future.result
[09:33:04.211] }
[09:33:04.213] requestCore(): workers = 2
[09:33:04.215] MulticoreFuture started
[09:33:04.215] - Launch lazy future ... done
[09:33:04.215] run() for ‘MulticoreFuture’ ... done
[09:33:04.216] result() for MulticoreFuture ...
[09:33:04.216] plan(): Setting new future strategy stack:
[09:33:04.216] List of future strategies:
[09:33:04.216] 1. sequential:
[09:33:04.216]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.216]    - tweaked: FALSE
[09:33:04.216]    - call: NULL
[09:33:04.218] plan(): nbrOfWorkers() = 1
[09:33:04.220] plan(): Setting new future strategy stack:
[09:33:04.221] List of future strategies:
[09:33:04.221] 1. multicore:
[09:33:04.221]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:33:04.221]    - tweaked: FALSE
[09:33:04.221]    - call: plan(strategy)
[09:33:04.226] plan(): nbrOfWorkers() = 2
[09:33:04.227] result() for MulticoreFuture ...
[09:33:04.227] result() for MulticoreFuture ... done
[09:33:04.227] result() for MulticoreFuture ... done
[09:33:04.228] result() for MulticoreFuture ...
[09:33:04.228] result() for MulticoreFuture ... done
[09:33:04.228] result() for MulticoreFuture ...
[09:33:04.228] result() for MulticoreFuture ... done
[1] 42
[09:33:04.228] result() for MulticoreFuture ...
[09:33:04.229] result() for MulticoreFuture ... done
- stdout = NA
[09:33:04.229] getGlobalsAndPackages() ...
[09:33:04.229] Searching for globals...
[09:33:04.233] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:04.233] Searching for globals ... DONE
[09:33:04.233] Resolving globals: FALSE
[09:33:04.234] 
[09:33:04.234] - packages: [1] ‘utils’
[09:33:04.234] getGlobalsAndPackages() ... DONE
[09:33:04.234] run() for ‘Future’ ...
[09:33:04.235] - state: ‘created’
[09:33:04.235] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:33:04.239] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:04.239] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:33:04.239]   - Field: ‘label’
[09:33:04.239]   - Field: ‘local’
[09:33:04.239]   - Field: ‘owner’
[09:33:04.239]   - Field: ‘envir’
[09:33:04.239]   - Field: ‘workers’
[09:33:04.240]   - Field: ‘packages’
[09:33:04.240]   - Field: ‘gc’
[09:33:04.240]   - Field: ‘job’
[09:33:04.240]   - Field: ‘conditions’
[09:33:04.240]   - Field: ‘expr’
[09:33:04.240]   - Field: ‘uuid’
[09:33:04.240]   - Field: ‘seed’
[09:33:04.240]   - Field: ‘version’
[09:33:04.240]   - Field: ‘result’
[09:33:04.241]   - Field: ‘asynchronous’
[09:33:04.241]   - Field: ‘calls’
[09:33:04.241]   - Field: ‘globals’
[09:33:04.241]   - Field: ‘stdout’
[09:33:04.241]   - Field: ‘earlySignal’
[09:33:04.241]   - Field: ‘lazy’
[09:33:04.241]   - Field: ‘state’
[09:33:04.241] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:33:04.241] - Launch lazy future ...
[09:33:04.242] Packages needed by the future expression (n = 1): ‘utils’
[09:33:04.242] Packages needed by future strategies (n = 0): <none>
[09:33:04.242] {
[09:33:04.242]     {
[09:33:04.242]         {
[09:33:04.242]             ...future.startTime <- base::Sys.time()
[09:33:04.242]             {
[09:33:04.242]                 {
[09:33:04.242]                   {
[09:33:04.242]                     {
[09:33:04.242]                       {
[09:33:04.242]                         base::local({
[09:33:04.242]                           has_future <- base::requireNamespace("future", 
[09:33:04.242]                             quietly = TRUE)
[09:33:04.242]                           if (has_future) {
[09:33:04.242]                             ns <- base::getNamespace("future")
[09:33:04.242]                             version <- ns[[".package"]][["version"]]
[09:33:04.242]                             if (is.null(version)) 
[09:33:04.242]                               version <- utils::packageVersion("future")
[09:33:04.242]                           }
[09:33:04.242]                           else {
[09:33:04.242]                             version <- NULL
[09:33:04.242]                           }
[09:33:04.242]                           if (!has_future || version < "1.8.0") {
[09:33:04.242]                             info <- base::c(r_version = base::gsub("R version ", 
[09:33:04.242]                               "", base::R.version$version.string), 
[09:33:04.242]                               platform = base::sprintf("%s (%s-bit)", 
[09:33:04.242]                                 base::R.version$platform, 8 * 
[09:33:04.242]                                   base::.Machine$sizeof.pointer), 
[09:33:04.242]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:04.242]                                 "release", "version")], collapse = " "), 
[09:33:04.242]                               hostname = base::Sys.info()[["nodename"]])
[09:33:04.242]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:33:04.242]                               info)
[09:33:04.242]                             info <- base::paste(info, collapse = "; ")
[09:33:04.242]                             if (!has_future) {
[09:33:04.242]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:04.242]                                 info)
[09:33:04.242]                             }
[09:33:04.242]                             else {
[09:33:04.242]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:04.242]                                 info, version)
[09:33:04.242]                             }
[09:33:04.242]                             base::stop(msg)
[09:33:04.242]                           }
[09:33:04.242]                         })
[09:33:04.242]                       }
[09:33:04.242]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:04.242]                       base::options(mc.cores = 1L)
[09:33:04.242]                     }
[09:33:04.242]                     base::local({
[09:33:04.242]                       for (pkg in "utils") {
[09:33:04.242]                         base::loadNamespace(pkg)
[09:33:04.242]                         base::library(pkg, character.only = TRUE)
[09:33:04.242]                       }
[09:33:04.242]                     })
[09:33:04.242]                   }
[09:33:04.242]                   ...future.strategy.old <- future::plan("list")
[09:33:04.242]                   options(future.plan = NULL)
[09:33:04.242]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.242]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:04.242]                 }
[09:33:04.242]                 ...future.workdir <- getwd()
[09:33:04.242]             }
[09:33:04.242]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:04.242]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:04.242]         }
[09:33:04.242]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:04.242]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:04.242]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:04.242]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:04.242]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:04.242]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:04.242]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:04.242]             base::names(...future.oldOptions))
[09:33:04.242]     }
[09:33:04.242]     if (TRUE) {
[09:33:04.242]     }
[09:33:04.242]     else {
[09:33:04.242]         if (NA) {
[09:33:04.242]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:04.242]                 open = "w")
[09:33:04.242]         }
[09:33:04.242]         else {
[09:33:04.242]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:04.242]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:04.242]         }
[09:33:04.242]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:04.242]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:04.242]             base::sink(type = "output", split = FALSE)
[09:33:04.242]             base::close(...future.stdout)
[09:33:04.242]         }, add = TRUE)
[09:33:04.242]     }
[09:33:04.242]     ...future.frame <- base::sys.nframe()
[09:33:04.242]     ...future.conditions <- base::list()
[09:33:04.242]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:04.242]     if (FALSE) {
[09:33:04.242]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:04.242]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:04.242]     }
[09:33:04.242]     ...future.result <- base::tryCatch({
[09:33:04.242]         base::withCallingHandlers({
[09:33:04.242]             ...future.value <- base::withVisible(base::local({
[09:33:04.242]                 withCallingHandlers({
[09:33:04.242]                   {
[09:33:04.242]                     print(1:50)
[09:33:04.242]                     str(1:50)
[09:33:04.242]                     cat(letters, sep = "-")
[09:33:04.242]                     cat(1:6, collapse = "\n")
[09:33:04.242]                     write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:04.242]                     42L
[09:33:04.242]                   }
[09:33:04.242]                 }, immediateCondition = function(cond) {
[09:33:04.242]                   save_rds <- function (object, pathname, ...) 
[09:33:04.242]                   {
[09:33:04.242]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:33:04.242]                     if (file_test("-f", pathname_tmp)) {
[09:33:04.242]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.242]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:33:04.242]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.242]                         fi_tmp[["mtime"]])
[09:33:04.242]                     }
[09:33:04.242]                     tryCatch({
[09:33:04.242]                       saveRDS(object, file = pathname_tmp, ...)
[09:33:04.242]                     }, error = function(ex) {
[09:33:04.242]                       msg <- conditionMessage(ex)
[09:33:04.242]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.242]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:33:04.242]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.242]                         fi_tmp[["mtime"]], msg)
[09:33:04.242]                       ex$message <- msg
[09:33:04.242]                       stop(ex)
[09:33:04.242]                     })
[09:33:04.242]                     stopifnot(file_test("-f", pathname_tmp))
[09:33:04.242]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:33:04.242]                     if (!res || file_test("-f", pathname_tmp)) {
[09:33:04.242]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.242]                       fi <- file.info(pathname)
[09:33:04.242]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:33:04.242]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.242]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:33:04.242]                         fi[["size"]], fi[["mtime"]])
[09:33:04.242]                       stop(msg)
[09:33:04.242]                     }
[09:33:04.242]                     invisible(pathname)
[09:33:04.242]                   }
[09:33:04.242]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:33:04.242]                     rootPath = tempdir()) 
[09:33:04.242]                   {
[09:33:04.242]                     obj <- list(time = Sys.time(), condition = cond)
[09:33:04.242]                     file <- tempfile(pattern = class(cond)[1], 
[09:33:04.242]                       tmpdir = path, fileext = ".rds")
[09:33:04.242]                     save_rds(obj, file)
[09:33:04.242]                   }
[09:33:04.242]                   saveImmediateCondition(cond, path = "/tmp/RtmpSN39z6/.future/immediateConditions")
[09:33:04.242]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.242]                   {
[09:33:04.242]                     inherits <- base::inherits
[09:33:04.242]                     invokeRestart <- base::invokeRestart
[09:33:04.242]                     is.null <- base::is.null
[09:33:04.242]                     muffled <- FALSE
[09:33:04.242]                     if (inherits(cond, "message")) {
[09:33:04.242]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:04.242]                       if (muffled) 
[09:33:04.242]                         invokeRestart("muffleMessage")
[09:33:04.242]                     }
[09:33:04.242]                     else if (inherits(cond, "warning")) {
[09:33:04.242]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:04.242]                       if (muffled) 
[09:33:04.242]                         invokeRestart("muffleWarning")
[09:33:04.242]                     }
[09:33:04.242]                     else if (inherits(cond, "condition")) {
[09:33:04.242]                       if (!is.null(pattern)) {
[09:33:04.242]                         computeRestarts <- base::computeRestarts
[09:33:04.242]                         grepl <- base::grepl
[09:33:04.242]                         restarts <- computeRestarts(cond)
[09:33:04.242]                         for (restart in restarts) {
[09:33:04.242]                           name <- restart$name
[09:33:04.242]                           if (is.null(name)) 
[09:33:04.242]                             next
[09:33:04.242]                           if (!grepl(pattern, name)) 
[09:33:04.242]                             next
[09:33:04.242]                           invokeRestart(restart)
[09:33:04.242]                           muffled <- TRUE
[09:33:04.242]                           break
[09:33:04.242]                         }
[09:33:04.242]                       }
[09:33:04.242]                     }
[09:33:04.242]                     invisible(muffled)
[09:33:04.242]                   }
[09:33:04.242]                   muffleCondition(cond)
[09:33:04.242]                 })
[09:33:04.242]             }))
[09:33:04.242]             future::FutureResult(value = ...future.value$value, 
[09:33:04.242]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.242]                   ...future.rng), globalenv = if (FALSE) 
[09:33:04.242]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:04.242]                     ...future.globalenv.names))
[09:33:04.242]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:04.242]         }, condition = base::local({
[09:33:04.242]             c <- base::c
[09:33:04.242]             inherits <- base::inherits
[09:33:04.242]             invokeRestart <- base::invokeRestart
[09:33:04.242]             length <- base::length
[09:33:04.242]             list <- base::list
[09:33:04.242]             seq.int <- base::seq.int
[09:33:04.242]             signalCondition <- base::signalCondition
[09:33:04.242]             sys.calls <- base::sys.calls
[09:33:04.242]             `[[` <- base::`[[`
[09:33:04.242]             `+` <- base::`+`
[09:33:04.242]             `<<-` <- base::`<<-`
[09:33:04.242]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:04.242]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:04.242]                   3L)]
[09:33:04.242]             }
[09:33:04.242]             function(cond) {
[09:33:04.242]                 is_error <- inherits(cond, "error")
[09:33:04.242]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:04.242]                   NULL)
[09:33:04.242]                 if (is_error) {
[09:33:04.242]                   sessionInformation <- function() {
[09:33:04.242]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:04.242]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:04.242]                       search = base::search(), system = base::Sys.info())
[09:33:04.242]                   }
[09:33:04.242]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.242]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:04.242]                     cond$call), session = sessionInformation(), 
[09:33:04.242]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:04.242]                   signalCondition(cond)
[09:33:04.242]                 }
[09:33:04.242]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:04.242]                 "immediateCondition"))) {
[09:33:04.242]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:04.242]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.242]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:04.242]                   if (TRUE && !signal) {
[09:33:04.242]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.242]                     {
[09:33:04.242]                       inherits <- base::inherits
[09:33:04.242]                       invokeRestart <- base::invokeRestart
[09:33:04.242]                       is.null <- base::is.null
[09:33:04.242]                       muffled <- FALSE
[09:33:04.242]                       if (inherits(cond, "message")) {
[09:33:04.242]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.242]                         if (muffled) 
[09:33:04.242]                           invokeRestart("muffleMessage")
[09:33:04.242]                       }
[09:33:04.242]                       else if (inherits(cond, "warning")) {
[09:33:04.242]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.242]                         if (muffled) 
[09:33:04.242]                           invokeRestart("muffleWarning")
[09:33:04.242]                       }
[09:33:04.242]                       else if (inherits(cond, "condition")) {
[09:33:04.242]                         if (!is.null(pattern)) {
[09:33:04.242]                           computeRestarts <- base::computeRestarts
[09:33:04.242]                           grepl <- base::grepl
[09:33:04.242]                           restarts <- computeRestarts(cond)
[09:33:04.242]                           for (restart in restarts) {
[09:33:04.242]                             name <- restart$name
[09:33:04.242]                             if (is.null(name)) 
[09:33:04.242]                               next
[09:33:04.242]                             if (!grepl(pattern, name)) 
[09:33:04.242]                               next
[09:33:04.242]                             invokeRestart(restart)
[09:33:04.242]                             muffled <- TRUE
[09:33:04.242]                             break
[09:33:04.242]                           }
[09:33:04.242]                         }
[09:33:04.242]                       }
[09:33:04.242]                       invisible(muffled)
[09:33:04.242]                     }
[09:33:04.242]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.242]                   }
[09:33:04.242]                 }
[09:33:04.242]                 else {
[09:33:04.242]                   if (TRUE) {
[09:33:04.242]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.242]                     {
[09:33:04.242]                       inherits <- base::inherits
[09:33:04.242]                       invokeRestart <- base::invokeRestart
[09:33:04.242]                       is.null <- base::is.null
[09:33:04.242]                       muffled <- FALSE
[09:33:04.242]                       if (inherits(cond, "message")) {
[09:33:04.242]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.242]                         if (muffled) 
[09:33:04.242]                           invokeRestart("muffleMessage")
[09:33:04.242]                       }
[09:33:04.242]                       else if (inherits(cond, "warning")) {
[09:33:04.242]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.242]                         if (muffled) 
[09:33:04.242]                           invokeRestart("muffleWarning")
[09:33:04.242]                       }
[09:33:04.242]                       else if (inherits(cond, "condition")) {
[09:33:04.242]                         if (!is.null(pattern)) {
[09:33:04.242]                           computeRestarts <- base::computeRestarts
[09:33:04.242]                           grepl <- base::grepl
[09:33:04.242]                           restarts <- computeRestarts(cond)
[09:33:04.242]                           for (restart in restarts) {
[09:33:04.242]                             name <- restart$name
[09:33:04.242]                             if (is.null(name)) 
[09:33:04.242]                               next
[09:33:04.242]                             if (!grepl(pattern, name)) 
[09:33:04.242]                               next
[09:33:04.242]                             invokeRestart(restart)
[09:33:04.242]                             muffled <- TRUE
[09:33:04.242]                             break
[09:33:04.242]                           }
[09:33:04.242]                         }
[09:33:04.242]                       }
[09:33:04.242]                       invisible(muffled)
[09:33:04.242]                     }
[09:33:04.242]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.242]                   }
[09:33:04.242]                 }
[09:33:04.242]             }
[09:33:04.242]         }))
[09:33:04.242]     }, error = function(ex) {
[09:33:04.242]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:04.242]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.242]                 ...future.rng), started = ...future.startTime, 
[09:33:04.242]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:04.242]             version = "1.8"), class = "FutureResult")
[09:33:04.242]     }, finally = {
[09:33:04.242]         if (!identical(...future.workdir, getwd())) 
[09:33:04.242]             setwd(...future.workdir)
[09:33:04.242]         {
[09:33:04.242]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:04.242]                 ...future.oldOptions$nwarnings <- NULL
[09:33:04.242]             }
[09:33:04.242]             base::options(...future.oldOptions)
[09:33:04.242]             if (.Platform$OS.type == "windows") {
[09:33:04.242]                 old_names <- names(...future.oldEnvVars)
[09:33:04.242]                 envs <- base::Sys.getenv()
[09:33:04.242]                 names <- names(envs)
[09:33:04.242]                 common <- intersect(names, old_names)
[09:33:04.242]                 added <- setdiff(names, old_names)
[09:33:04.242]                 removed <- setdiff(old_names, names)
[09:33:04.242]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:04.242]                   envs[common]]
[09:33:04.242]                 NAMES <- toupper(changed)
[09:33:04.242]                 args <- list()
[09:33:04.242]                 for (kk in seq_along(NAMES)) {
[09:33:04.242]                   name <- changed[[kk]]
[09:33:04.242]                   NAME <- NAMES[[kk]]
[09:33:04.242]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.242]                     next
[09:33:04.242]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.242]                 }
[09:33:04.242]                 NAMES <- toupper(added)
[09:33:04.242]                 for (kk in seq_along(NAMES)) {
[09:33:04.242]                   name <- added[[kk]]
[09:33:04.242]                   NAME <- NAMES[[kk]]
[09:33:04.242]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.242]                     next
[09:33:04.242]                   args[[name]] <- ""
[09:33:04.242]                 }
[09:33:04.242]                 NAMES <- toupper(removed)
[09:33:04.242]                 for (kk in seq_along(NAMES)) {
[09:33:04.242]                   name <- removed[[kk]]
[09:33:04.242]                   NAME <- NAMES[[kk]]
[09:33:04.242]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.242]                     next
[09:33:04.242]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.242]                 }
[09:33:04.242]                 if (length(args) > 0) 
[09:33:04.242]                   base::do.call(base::Sys.setenv, args = args)
[09:33:04.242]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:04.242]             }
[09:33:04.242]             else {
[09:33:04.242]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:04.242]             }
[09:33:04.242]             {
[09:33:04.242]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:04.242]                   0L) {
[09:33:04.242]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:04.242]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:04.242]                   base::options(opts)
[09:33:04.242]                 }
[09:33:04.242]                 {
[09:33:04.242]                   {
[09:33:04.242]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:04.242]                     NULL
[09:33:04.242]                   }
[09:33:04.242]                   options(future.plan = NULL)
[09:33:04.242]                   if (is.na(NA_character_)) 
[09:33:04.242]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.242]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:04.242]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:04.242]                     .init = FALSE)
[09:33:04.242]                 }
[09:33:04.242]             }
[09:33:04.242]         }
[09:33:04.242]     })
[09:33:04.242]     if (FALSE) {
[09:33:04.242]         base::sink(type = "output", split = FALSE)
[09:33:04.242]         if (NA) {
[09:33:04.242]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:04.242]         }
[09:33:04.242]         else {
[09:33:04.242]             ...future.result["stdout"] <- base::list(NULL)
[09:33:04.242]         }
[09:33:04.242]         base::close(...future.stdout)
[09:33:04.242]         ...future.stdout <- NULL
[09:33:04.242]     }
[09:33:04.242]     ...future.result$conditions <- ...future.conditions
[09:33:04.242]     ...future.result$finished <- base::Sys.time()
[09:33:04.242]     ...future.result
[09:33:04.242] }
[09:33:04.245] requestCore(): workers = 2
[09:33:04.247] MulticoreFuture started
[09:33:04.247] - Launch lazy future ... done
[09:33:04.247] run() for ‘MulticoreFuture’ ... done
[09:33:04.247] result() for MulticoreFuture ...
[09:33:04.248] plan(): Setting new future strategy stack:
[09:33:04.248] List of future strategies:
[09:33:04.248] 1. sequential:
[09:33:04.248]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.248]    - tweaked: FALSE
[09:33:04.248]    - call: NULL
[09:33:04.249] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[09:33:04.253] plan(): Setting new future strategy stack:
[09:33:04.253] List of future strategies:
[09:33:04.253] 1. multicore:
[09:33:04.253]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:33:04.253]    - tweaked: FALSE
[09:33:04.253]    - call: plan(strategy)
[09:33:04.257] plan(): nbrOfWorkers() = 2
[09:33:04.258] result() for MulticoreFuture ...
[09:33:04.258] result() for MulticoreFuture ... done
[09:33:04.259] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 09:33:04"
 $ finished    : POSIXct[1:1], format: "2024-12-19 09:33:04"
 $ session_uuid: chr "979ccaeb-04a7-04c7-3edb-7b88dabf77c8"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "8f1daa72e372"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "8f1daa72e372" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 50481
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 09:33:04"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[09:33:04.268] result() for MulticoreFuture ...
[09:33:04.268] result() for MulticoreFuture ... done
[09:33:04.268] result() for MulticoreFuture ...
[09:33:04.268] result() for MulticoreFuture ... done
[09:33:04.269] getGlobalsAndPackages() ...
[09:33:04.269] Searching for globals...
[09:33:04.275] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:04.275] Searching for globals ... DONE
[09:33:04.275] Resolving globals: FALSE
[09:33:04.276] 
[09:33:04.276] - packages: [1] ‘utils’
[09:33:04.276] getGlobalsAndPackages() ... DONE
[09:33:04.276] run() for ‘Future’ ...
[09:33:04.276] - state: ‘created’
[09:33:04.277] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:33:04.280] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:04.281] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:33:04.281]   - Field: ‘label’
[09:33:04.281]   - Field: ‘local’
[09:33:04.281]   - Field: ‘owner’
[09:33:04.281]   - Field: ‘envir’
[09:33:04.281]   - Field: ‘workers’
[09:33:04.281]   - Field: ‘packages’
[09:33:04.281]   - Field: ‘gc’
[09:33:04.281]   - Field: ‘job’
[09:33:04.282]   - Field: ‘conditions’
[09:33:04.282]   - Field: ‘expr’
[09:33:04.282]   - Field: ‘uuid’
[09:33:04.282]   - Field: ‘seed’
[09:33:04.282]   - Field: ‘version’
[09:33:04.282]   - Field: ‘result’
[09:33:04.282]   - Field: ‘asynchronous’
[09:33:04.282]   - Field: ‘calls’
[09:33:04.282]   - Field: ‘globals’
[09:33:04.282]   - Field: ‘stdout’
[09:33:04.283]   - Field: ‘earlySignal’
[09:33:04.283]   - Field: ‘lazy’
[09:33:04.283]   - Field: ‘state’
[09:33:04.283] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:33:04.283] - Launch lazy future ...
[09:33:04.283] Packages needed by the future expression (n = 1): ‘utils’
[09:33:04.283] Packages needed by future strategies (n = 0): <none>
[09:33:04.284] {
[09:33:04.284]     {
[09:33:04.284]         {
[09:33:04.284]             ...future.startTime <- base::Sys.time()
[09:33:04.284]             {
[09:33:04.284]                 {
[09:33:04.284]                   {
[09:33:04.284]                     {
[09:33:04.284]                       {
[09:33:04.284]                         base::local({
[09:33:04.284]                           has_future <- base::requireNamespace("future", 
[09:33:04.284]                             quietly = TRUE)
[09:33:04.284]                           if (has_future) {
[09:33:04.284]                             ns <- base::getNamespace("future")
[09:33:04.284]                             version <- ns[[".package"]][["version"]]
[09:33:04.284]                             if (is.null(version)) 
[09:33:04.284]                               version <- utils::packageVersion("future")
[09:33:04.284]                           }
[09:33:04.284]                           else {
[09:33:04.284]                             version <- NULL
[09:33:04.284]                           }
[09:33:04.284]                           if (!has_future || version < "1.8.0") {
[09:33:04.284]                             info <- base::c(r_version = base::gsub("R version ", 
[09:33:04.284]                               "", base::R.version$version.string), 
[09:33:04.284]                               platform = base::sprintf("%s (%s-bit)", 
[09:33:04.284]                                 base::R.version$platform, 8 * 
[09:33:04.284]                                   base::.Machine$sizeof.pointer), 
[09:33:04.284]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:04.284]                                 "release", "version")], collapse = " "), 
[09:33:04.284]                               hostname = base::Sys.info()[["nodename"]])
[09:33:04.284]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:33:04.284]                               info)
[09:33:04.284]                             info <- base::paste(info, collapse = "; ")
[09:33:04.284]                             if (!has_future) {
[09:33:04.284]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:04.284]                                 info)
[09:33:04.284]                             }
[09:33:04.284]                             else {
[09:33:04.284]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:04.284]                                 info, version)
[09:33:04.284]                             }
[09:33:04.284]                             base::stop(msg)
[09:33:04.284]                           }
[09:33:04.284]                         })
[09:33:04.284]                       }
[09:33:04.284]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:04.284]                       base::options(mc.cores = 1L)
[09:33:04.284]                     }
[09:33:04.284]                     base::local({
[09:33:04.284]                       for (pkg in "utils") {
[09:33:04.284]                         base::loadNamespace(pkg)
[09:33:04.284]                         base::library(pkg, character.only = TRUE)
[09:33:04.284]                       }
[09:33:04.284]                     })
[09:33:04.284]                   }
[09:33:04.284]                   ...future.strategy.old <- future::plan("list")
[09:33:04.284]                   options(future.plan = NULL)
[09:33:04.284]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.284]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:04.284]                 }
[09:33:04.284]                 ...future.workdir <- getwd()
[09:33:04.284]             }
[09:33:04.284]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:04.284]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:04.284]         }
[09:33:04.284]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:04.284]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:04.284]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:04.284]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:04.284]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:04.284]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:04.284]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:04.284]             base::names(...future.oldOptions))
[09:33:04.284]     }
[09:33:04.284]     if (TRUE) {
[09:33:04.284]     }
[09:33:04.284]     else {
[09:33:04.284]         if (NA) {
[09:33:04.284]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:04.284]                 open = "w")
[09:33:04.284]         }
[09:33:04.284]         else {
[09:33:04.284]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:04.284]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:04.284]         }
[09:33:04.284]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:04.284]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:04.284]             base::sink(type = "output", split = FALSE)
[09:33:04.284]             base::close(...future.stdout)
[09:33:04.284]         }, add = TRUE)
[09:33:04.284]     }
[09:33:04.284]     ...future.frame <- base::sys.nframe()
[09:33:04.284]     ...future.conditions <- base::list()
[09:33:04.284]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:04.284]     if (FALSE) {
[09:33:04.284]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:04.284]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:04.284]     }
[09:33:04.284]     ...future.result <- base::tryCatch({
[09:33:04.284]         base::withCallingHandlers({
[09:33:04.284]             ...future.value <- base::withVisible(base::local({
[09:33:04.284]                 withCallingHandlers({
[09:33:04.284]                   {
[09:33:04.284]                     print(1:50)
[09:33:04.284]                     str(1:50)
[09:33:04.284]                     cat(letters, sep = "-")
[09:33:04.284]                     cat(1:6, collapse = "\n")
[09:33:04.284]                     write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:04.284]                     42L
[09:33:04.284]                   }
[09:33:04.284]                 }, immediateCondition = function(cond) {
[09:33:04.284]                   save_rds <- function (object, pathname, ...) 
[09:33:04.284]                   {
[09:33:04.284]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:33:04.284]                     if (file_test("-f", pathname_tmp)) {
[09:33:04.284]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.284]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:33:04.284]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.284]                         fi_tmp[["mtime"]])
[09:33:04.284]                     }
[09:33:04.284]                     tryCatch({
[09:33:04.284]                       saveRDS(object, file = pathname_tmp, ...)
[09:33:04.284]                     }, error = function(ex) {
[09:33:04.284]                       msg <- conditionMessage(ex)
[09:33:04.284]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.284]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:33:04.284]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.284]                         fi_tmp[["mtime"]], msg)
[09:33:04.284]                       ex$message <- msg
[09:33:04.284]                       stop(ex)
[09:33:04.284]                     })
[09:33:04.284]                     stopifnot(file_test("-f", pathname_tmp))
[09:33:04.284]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:33:04.284]                     if (!res || file_test("-f", pathname_tmp)) {
[09:33:04.284]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.284]                       fi <- file.info(pathname)
[09:33:04.284]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:33:04.284]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.284]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:33:04.284]                         fi[["size"]], fi[["mtime"]])
[09:33:04.284]                       stop(msg)
[09:33:04.284]                     }
[09:33:04.284]                     invisible(pathname)
[09:33:04.284]                   }
[09:33:04.284]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:33:04.284]                     rootPath = tempdir()) 
[09:33:04.284]                   {
[09:33:04.284]                     obj <- list(time = Sys.time(), condition = cond)
[09:33:04.284]                     file <- tempfile(pattern = class(cond)[1], 
[09:33:04.284]                       tmpdir = path, fileext = ".rds")
[09:33:04.284]                     save_rds(obj, file)
[09:33:04.284]                   }
[09:33:04.284]                   saveImmediateCondition(cond, path = "/tmp/RtmpSN39z6/.future/immediateConditions")
[09:33:04.284]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.284]                   {
[09:33:04.284]                     inherits <- base::inherits
[09:33:04.284]                     invokeRestart <- base::invokeRestart
[09:33:04.284]                     is.null <- base::is.null
[09:33:04.284]                     muffled <- FALSE
[09:33:04.284]                     if (inherits(cond, "message")) {
[09:33:04.284]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:04.284]                       if (muffled) 
[09:33:04.284]                         invokeRestart("muffleMessage")
[09:33:04.284]                     }
[09:33:04.284]                     else if (inherits(cond, "warning")) {
[09:33:04.284]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:04.284]                       if (muffled) 
[09:33:04.284]                         invokeRestart("muffleWarning")
[09:33:04.284]                     }
[09:33:04.284]                     else if (inherits(cond, "condition")) {
[09:33:04.284]                       if (!is.null(pattern)) {
[09:33:04.284]                         computeRestarts <- base::computeRestarts
[09:33:04.284]                         grepl <- base::grepl
[09:33:04.284]                         restarts <- computeRestarts(cond)
[09:33:04.284]                         for (restart in restarts) {
[09:33:04.284]                           name <- restart$name
[09:33:04.284]                           if (is.null(name)) 
[09:33:04.284]                             next
[09:33:04.284]                           if (!grepl(pattern, name)) 
[09:33:04.284]                             next
[09:33:04.284]                           invokeRestart(restart)
[09:33:04.284]                           muffled <- TRUE
[09:33:04.284]                           break
[09:33:04.284]                         }
[09:33:04.284]                       }
[09:33:04.284]                     }
[09:33:04.284]                     invisible(muffled)
[09:33:04.284]                   }
[09:33:04.284]                   muffleCondition(cond)
[09:33:04.284]                 })
[09:33:04.284]             }))
[09:33:04.284]             future::FutureResult(value = ...future.value$value, 
[09:33:04.284]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.284]                   ...future.rng), globalenv = if (FALSE) 
[09:33:04.284]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:04.284]                     ...future.globalenv.names))
[09:33:04.284]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:04.284]         }, condition = base::local({
[09:33:04.284]             c <- base::c
[09:33:04.284]             inherits <- base::inherits
[09:33:04.284]             invokeRestart <- base::invokeRestart
[09:33:04.284]             length <- base::length
[09:33:04.284]             list <- base::list
[09:33:04.284]             seq.int <- base::seq.int
[09:33:04.284]             signalCondition <- base::signalCondition
[09:33:04.284]             sys.calls <- base::sys.calls
[09:33:04.284]             `[[` <- base::`[[`
[09:33:04.284]             `+` <- base::`+`
[09:33:04.284]             `<<-` <- base::`<<-`
[09:33:04.284]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:04.284]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:04.284]                   3L)]
[09:33:04.284]             }
[09:33:04.284]             function(cond) {
[09:33:04.284]                 is_error <- inherits(cond, "error")
[09:33:04.284]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:04.284]                   NULL)
[09:33:04.284]                 if (is_error) {
[09:33:04.284]                   sessionInformation <- function() {
[09:33:04.284]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:04.284]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:04.284]                       search = base::search(), system = base::Sys.info())
[09:33:04.284]                   }
[09:33:04.284]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.284]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:04.284]                     cond$call), session = sessionInformation(), 
[09:33:04.284]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:04.284]                   signalCondition(cond)
[09:33:04.284]                 }
[09:33:04.284]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:04.284]                 "immediateCondition"))) {
[09:33:04.284]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:04.284]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.284]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:04.284]                   if (TRUE && !signal) {
[09:33:04.284]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.284]                     {
[09:33:04.284]                       inherits <- base::inherits
[09:33:04.284]                       invokeRestart <- base::invokeRestart
[09:33:04.284]                       is.null <- base::is.null
[09:33:04.284]                       muffled <- FALSE
[09:33:04.284]                       if (inherits(cond, "message")) {
[09:33:04.284]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.284]                         if (muffled) 
[09:33:04.284]                           invokeRestart("muffleMessage")
[09:33:04.284]                       }
[09:33:04.284]                       else if (inherits(cond, "warning")) {
[09:33:04.284]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.284]                         if (muffled) 
[09:33:04.284]                           invokeRestart("muffleWarning")
[09:33:04.284]                       }
[09:33:04.284]                       else if (inherits(cond, "condition")) {
[09:33:04.284]                         if (!is.null(pattern)) {
[09:33:04.284]                           computeRestarts <- base::computeRestarts
[09:33:04.284]                           grepl <- base::grepl
[09:33:04.284]                           restarts <- computeRestarts(cond)
[09:33:04.284]                           for (restart in restarts) {
[09:33:04.284]                             name <- restart$name
[09:33:04.284]                             if (is.null(name)) 
[09:33:04.284]                               next
[09:33:04.284]                             if (!grepl(pattern, name)) 
[09:33:04.284]                               next
[09:33:04.284]                             invokeRestart(restart)
[09:33:04.284]                             muffled <- TRUE
[09:33:04.284]                             break
[09:33:04.284]                           }
[09:33:04.284]                         }
[09:33:04.284]                       }
[09:33:04.284]                       invisible(muffled)
[09:33:04.284]                     }
[09:33:04.284]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.284]                   }
[09:33:04.284]                 }
[09:33:04.284]                 else {
[09:33:04.284]                   if (TRUE) {
[09:33:04.284]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.284]                     {
[09:33:04.284]                       inherits <- base::inherits
[09:33:04.284]                       invokeRestart <- base::invokeRestart
[09:33:04.284]                       is.null <- base::is.null
[09:33:04.284]                       muffled <- FALSE
[09:33:04.284]                       if (inherits(cond, "message")) {
[09:33:04.284]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.284]                         if (muffled) 
[09:33:04.284]                           invokeRestart("muffleMessage")
[09:33:04.284]                       }
[09:33:04.284]                       else if (inherits(cond, "warning")) {
[09:33:04.284]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.284]                         if (muffled) 
[09:33:04.284]                           invokeRestart("muffleWarning")
[09:33:04.284]                       }
[09:33:04.284]                       else if (inherits(cond, "condition")) {
[09:33:04.284]                         if (!is.null(pattern)) {
[09:33:04.284]                           computeRestarts <- base::computeRestarts
[09:33:04.284]                           grepl <- base::grepl
[09:33:04.284]                           restarts <- computeRestarts(cond)
[09:33:04.284]                           for (restart in restarts) {
[09:33:04.284]                             name <- restart$name
[09:33:04.284]                             if (is.null(name)) 
[09:33:04.284]                               next
[09:33:04.284]                             if (!grepl(pattern, name)) 
[09:33:04.284]                               next
[09:33:04.284]                             invokeRestart(restart)
[09:33:04.284]                             muffled <- TRUE
[09:33:04.284]                             break
[09:33:04.284]                           }
[09:33:04.284]                         }
[09:33:04.284]                       }
[09:33:04.284]                       invisible(muffled)
[09:33:04.284]                     }
[09:33:04.284]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.284]                   }
[09:33:04.284]                 }
[09:33:04.284]             }
[09:33:04.284]         }))
[09:33:04.284]     }, error = function(ex) {
[09:33:04.284]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:04.284]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.284]                 ...future.rng), started = ...future.startTime, 
[09:33:04.284]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:04.284]             version = "1.8"), class = "FutureResult")
[09:33:04.284]     }, finally = {
[09:33:04.284]         if (!identical(...future.workdir, getwd())) 
[09:33:04.284]             setwd(...future.workdir)
[09:33:04.284]         {
[09:33:04.284]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:04.284]                 ...future.oldOptions$nwarnings <- NULL
[09:33:04.284]             }
[09:33:04.284]             base::options(...future.oldOptions)
[09:33:04.284]             if (.Platform$OS.type == "windows") {
[09:33:04.284]                 old_names <- names(...future.oldEnvVars)
[09:33:04.284]                 envs <- base::Sys.getenv()
[09:33:04.284]                 names <- names(envs)
[09:33:04.284]                 common <- intersect(names, old_names)
[09:33:04.284]                 added <- setdiff(names, old_names)
[09:33:04.284]                 removed <- setdiff(old_names, names)
[09:33:04.284]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:04.284]                   envs[common]]
[09:33:04.284]                 NAMES <- toupper(changed)
[09:33:04.284]                 args <- list()
[09:33:04.284]                 for (kk in seq_along(NAMES)) {
[09:33:04.284]                   name <- changed[[kk]]
[09:33:04.284]                   NAME <- NAMES[[kk]]
[09:33:04.284]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.284]                     next
[09:33:04.284]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.284]                 }
[09:33:04.284]                 NAMES <- toupper(added)
[09:33:04.284]                 for (kk in seq_along(NAMES)) {
[09:33:04.284]                   name <- added[[kk]]
[09:33:04.284]                   NAME <- NAMES[[kk]]
[09:33:04.284]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.284]                     next
[09:33:04.284]                   args[[name]] <- ""
[09:33:04.284]                 }
[09:33:04.284]                 NAMES <- toupper(removed)
[09:33:04.284]                 for (kk in seq_along(NAMES)) {
[09:33:04.284]                   name <- removed[[kk]]
[09:33:04.284]                   NAME <- NAMES[[kk]]
[09:33:04.284]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.284]                     next
[09:33:04.284]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.284]                 }
[09:33:04.284]                 if (length(args) > 0) 
[09:33:04.284]                   base::do.call(base::Sys.setenv, args = args)
[09:33:04.284]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:04.284]             }
[09:33:04.284]             else {
[09:33:04.284]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:04.284]             }
[09:33:04.284]             {
[09:33:04.284]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:04.284]                   0L) {
[09:33:04.284]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:04.284]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:04.284]                   base::options(opts)
[09:33:04.284]                 }
[09:33:04.284]                 {
[09:33:04.284]                   {
[09:33:04.284]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:04.284]                     NULL
[09:33:04.284]                   }
[09:33:04.284]                   options(future.plan = NULL)
[09:33:04.284]                   if (is.na(NA_character_)) 
[09:33:04.284]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.284]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:04.284]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:04.284]                     .init = FALSE)
[09:33:04.284]                 }
[09:33:04.284]             }
[09:33:04.284]         }
[09:33:04.284]     })
[09:33:04.284]     if (FALSE) {
[09:33:04.284]         base::sink(type = "output", split = FALSE)
[09:33:04.284]         if (NA) {
[09:33:04.284]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:04.284]         }
[09:33:04.284]         else {
[09:33:04.284]             ...future.result["stdout"] <- base::list(NULL)
[09:33:04.284]         }
[09:33:04.284]         base::close(...future.stdout)
[09:33:04.284]         ...future.stdout <- NULL
[09:33:04.284]     }
[09:33:04.284]     ...future.result$conditions <- ...future.conditions
[09:33:04.284]     ...future.result$finished <- base::Sys.time()
[09:33:04.284]     ...future.result
[09:33:04.284] }
[09:33:04.286] requestCore(): workers = 2
[09:33:04.288] MulticoreFuture started
[09:33:04.288] - Launch lazy future ... done
[09:33:04.288] run() for ‘MulticoreFuture’ ... done
[09:33:04.289] result() for MulticoreFuture ...
[09:33:04.289] plan(): Setting new future strategy stack:
[09:33:04.290] List of future strategies:
[09:33:04.290] 1. sequential:
[09:33:04.290]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.290]    - tweaked: FALSE
[09:33:04.290]    - call: NULL
[09:33:04.291] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[09:33:04.294] plan(): Setting new future strategy stack:
[09:33:04.294] List of future strategies:
[09:33:04.294] 1. multicore:
[09:33:04.294]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:33:04.294]    - tweaked: FALSE
[09:33:04.294]    - call: plan(strategy)
[09:33:04.299] plan(): nbrOfWorkers() = 2
[09:33:04.300] result() for MulticoreFuture ...
[09:33:04.300] result() for MulticoreFuture ... done
[09:33:04.300] result() for MulticoreFuture ... done
[09:33:04.300] result() for MulticoreFuture ...
[09:33:04.300] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[09:33:04.301] getGlobalsAndPackages() ...
[09:33:04.301] Searching for globals...
[09:33:04.301] - globals found: [1] ‘print’
[09:33:04.302] Searching for globals ... DONE
[09:33:04.302] Resolving globals: FALSE
[09:33:04.302] 
[09:33:04.302] 
[09:33:04.302] getGlobalsAndPackages() ... DONE
[09:33:04.303] run() for ‘Future’ ...
[09:33:04.303] - state: ‘created’
[09:33:04.303] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:33:04.307] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:04.307] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:33:04.307]   - Field: ‘label’
[09:33:04.307]   - Field: ‘local’
[09:33:04.307]   - Field: ‘owner’
[09:33:04.308]   - Field: ‘envir’
[09:33:04.308]   - Field: ‘workers’
[09:33:04.308]   - Field: ‘packages’
[09:33:04.308]   - Field: ‘gc’
[09:33:04.308]   - Field: ‘job’
[09:33:04.308]   - Field: ‘conditions’
[09:33:04.308]   - Field: ‘expr’
[09:33:04.308]   - Field: ‘uuid’
[09:33:04.309]   - Field: ‘seed’
[09:33:04.309]   - Field: ‘version’
[09:33:04.309]   - Field: ‘result’
[09:33:04.309]   - Field: ‘asynchronous’
[09:33:04.309]   - Field: ‘calls’
[09:33:04.309]   - Field: ‘globals’
[09:33:04.309]   - Field: ‘stdout’
[09:33:04.309]   - Field: ‘earlySignal’
[09:33:04.309]   - Field: ‘lazy’
[09:33:04.309]   - Field: ‘state’
[09:33:04.310] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:33:04.310] - Launch lazy future ...
[09:33:04.310] Packages needed by the future expression (n = 0): <none>
[09:33:04.310] Packages needed by future strategies (n = 0): <none>
[09:33:04.311] {
[09:33:04.311]     {
[09:33:04.311]         {
[09:33:04.311]             ...future.startTime <- base::Sys.time()
[09:33:04.311]             {
[09:33:04.311]                 {
[09:33:04.311]                   {
[09:33:04.311]                     {
[09:33:04.311]                       base::local({
[09:33:04.311]                         has_future <- base::requireNamespace("future", 
[09:33:04.311]                           quietly = TRUE)
[09:33:04.311]                         if (has_future) {
[09:33:04.311]                           ns <- base::getNamespace("future")
[09:33:04.311]                           version <- ns[[".package"]][["version"]]
[09:33:04.311]                           if (is.null(version)) 
[09:33:04.311]                             version <- utils::packageVersion("future")
[09:33:04.311]                         }
[09:33:04.311]                         else {
[09:33:04.311]                           version <- NULL
[09:33:04.311]                         }
[09:33:04.311]                         if (!has_future || version < "1.8.0") {
[09:33:04.311]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:04.311]                             "", base::R.version$version.string), 
[09:33:04.311]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:04.311]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:04.311]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:04.311]                               "release", "version")], collapse = " "), 
[09:33:04.311]                             hostname = base::Sys.info()[["nodename"]])
[09:33:04.311]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:04.311]                             info)
[09:33:04.311]                           info <- base::paste(info, collapse = "; ")
[09:33:04.311]                           if (!has_future) {
[09:33:04.311]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:04.311]                               info)
[09:33:04.311]                           }
[09:33:04.311]                           else {
[09:33:04.311]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:04.311]                               info, version)
[09:33:04.311]                           }
[09:33:04.311]                           base::stop(msg)
[09:33:04.311]                         }
[09:33:04.311]                       })
[09:33:04.311]                     }
[09:33:04.311]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:04.311]                     base::options(mc.cores = 1L)
[09:33:04.311]                   }
[09:33:04.311]                   ...future.strategy.old <- future::plan("list")
[09:33:04.311]                   options(future.plan = NULL)
[09:33:04.311]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.311]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:04.311]                 }
[09:33:04.311]                 ...future.workdir <- getwd()
[09:33:04.311]             }
[09:33:04.311]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:04.311]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:04.311]         }
[09:33:04.311]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:04.311]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:04.311]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:04.311]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:04.311]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:04.311]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:04.311]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:04.311]             base::names(...future.oldOptions))
[09:33:04.311]     }
[09:33:04.311]     if (FALSE) {
[09:33:04.311]     }
[09:33:04.311]     else {
[09:33:04.311]         if (TRUE) {
[09:33:04.311]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:04.311]                 open = "w")
[09:33:04.311]         }
[09:33:04.311]         else {
[09:33:04.311]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:04.311]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:04.311]         }
[09:33:04.311]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:04.311]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:04.311]             base::sink(type = "output", split = FALSE)
[09:33:04.311]             base::close(...future.stdout)
[09:33:04.311]         }, add = TRUE)
[09:33:04.311]     }
[09:33:04.311]     ...future.frame <- base::sys.nframe()
[09:33:04.311]     ...future.conditions <- base::list()
[09:33:04.311]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:04.311]     if (FALSE) {
[09:33:04.311]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:04.311]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:04.311]     }
[09:33:04.311]     ...future.result <- base::tryCatch({
[09:33:04.311]         base::withCallingHandlers({
[09:33:04.311]             ...future.value <- base::withVisible(base::local({
[09:33:04.311]                 withCallingHandlers({
[09:33:04.311]                   print(42)
[09:33:04.311]                 }, immediateCondition = function(cond) {
[09:33:04.311]                   save_rds <- function (object, pathname, ...) 
[09:33:04.311]                   {
[09:33:04.311]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:33:04.311]                     if (file_test("-f", pathname_tmp)) {
[09:33:04.311]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.311]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:33:04.311]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.311]                         fi_tmp[["mtime"]])
[09:33:04.311]                     }
[09:33:04.311]                     tryCatch({
[09:33:04.311]                       saveRDS(object, file = pathname_tmp, ...)
[09:33:04.311]                     }, error = function(ex) {
[09:33:04.311]                       msg <- conditionMessage(ex)
[09:33:04.311]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.311]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:33:04.311]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.311]                         fi_tmp[["mtime"]], msg)
[09:33:04.311]                       ex$message <- msg
[09:33:04.311]                       stop(ex)
[09:33:04.311]                     })
[09:33:04.311]                     stopifnot(file_test("-f", pathname_tmp))
[09:33:04.311]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:33:04.311]                     if (!res || file_test("-f", pathname_tmp)) {
[09:33:04.311]                       fi_tmp <- file.info(pathname_tmp)
[09:33:04.311]                       fi <- file.info(pathname)
[09:33:04.311]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:33:04.311]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:33:04.311]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:33:04.311]                         fi[["size"]], fi[["mtime"]])
[09:33:04.311]                       stop(msg)
[09:33:04.311]                     }
[09:33:04.311]                     invisible(pathname)
[09:33:04.311]                   }
[09:33:04.311]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:33:04.311]                     rootPath = tempdir()) 
[09:33:04.311]                   {
[09:33:04.311]                     obj <- list(time = Sys.time(), condition = cond)
[09:33:04.311]                     file <- tempfile(pattern = class(cond)[1], 
[09:33:04.311]                       tmpdir = path, fileext = ".rds")
[09:33:04.311]                     save_rds(obj, file)
[09:33:04.311]                   }
[09:33:04.311]                   saveImmediateCondition(cond, path = "/tmp/RtmpSN39z6/.future/immediateConditions")
[09:33:04.311]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.311]                   {
[09:33:04.311]                     inherits <- base::inherits
[09:33:04.311]                     invokeRestart <- base::invokeRestart
[09:33:04.311]                     is.null <- base::is.null
[09:33:04.311]                     muffled <- FALSE
[09:33:04.311]                     if (inherits(cond, "message")) {
[09:33:04.311]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:04.311]                       if (muffled) 
[09:33:04.311]                         invokeRestart("muffleMessage")
[09:33:04.311]                     }
[09:33:04.311]                     else if (inherits(cond, "warning")) {
[09:33:04.311]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:04.311]                       if (muffled) 
[09:33:04.311]                         invokeRestart("muffleWarning")
[09:33:04.311]                     }
[09:33:04.311]                     else if (inherits(cond, "condition")) {
[09:33:04.311]                       if (!is.null(pattern)) {
[09:33:04.311]                         computeRestarts <- base::computeRestarts
[09:33:04.311]                         grepl <- base::grepl
[09:33:04.311]                         restarts <- computeRestarts(cond)
[09:33:04.311]                         for (restart in restarts) {
[09:33:04.311]                           name <- restart$name
[09:33:04.311]                           if (is.null(name)) 
[09:33:04.311]                             next
[09:33:04.311]                           if (!grepl(pattern, name)) 
[09:33:04.311]                             next
[09:33:04.311]                           invokeRestart(restart)
[09:33:04.311]                           muffled <- TRUE
[09:33:04.311]                           break
[09:33:04.311]                         }
[09:33:04.311]                       }
[09:33:04.311]                     }
[09:33:04.311]                     invisible(muffled)
[09:33:04.311]                   }
[09:33:04.311]                   muffleCondition(cond)
[09:33:04.311]                 })
[09:33:04.311]             }))
[09:33:04.311]             future::FutureResult(value = ...future.value$value, 
[09:33:04.311]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.311]                   ...future.rng), globalenv = if (FALSE) 
[09:33:04.311]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:04.311]                     ...future.globalenv.names))
[09:33:04.311]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:04.311]         }, condition = base::local({
[09:33:04.311]             c <- base::c
[09:33:04.311]             inherits <- base::inherits
[09:33:04.311]             invokeRestart <- base::invokeRestart
[09:33:04.311]             length <- base::length
[09:33:04.311]             list <- base::list
[09:33:04.311]             seq.int <- base::seq.int
[09:33:04.311]             signalCondition <- base::signalCondition
[09:33:04.311]             sys.calls <- base::sys.calls
[09:33:04.311]             `[[` <- base::`[[`
[09:33:04.311]             `+` <- base::`+`
[09:33:04.311]             `<<-` <- base::`<<-`
[09:33:04.311]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:04.311]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:04.311]                   3L)]
[09:33:04.311]             }
[09:33:04.311]             function(cond) {
[09:33:04.311]                 is_error <- inherits(cond, "error")
[09:33:04.311]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:04.311]                   NULL)
[09:33:04.311]                 if (is_error) {
[09:33:04.311]                   sessionInformation <- function() {
[09:33:04.311]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:04.311]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:04.311]                       search = base::search(), system = base::Sys.info())
[09:33:04.311]                   }
[09:33:04.311]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.311]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:04.311]                     cond$call), session = sessionInformation(), 
[09:33:04.311]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:04.311]                   signalCondition(cond)
[09:33:04.311]                 }
[09:33:04.311]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:04.311]                 "immediateCondition"))) {
[09:33:04.311]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:04.311]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.311]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:04.311]                   if (TRUE && !signal) {
[09:33:04.311]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.311]                     {
[09:33:04.311]                       inherits <- base::inherits
[09:33:04.311]                       invokeRestart <- base::invokeRestart
[09:33:04.311]                       is.null <- base::is.null
[09:33:04.311]                       muffled <- FALSE
[09:33:04.311]                       if (inherits(cond, "message")) {
[09:33:04.311]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.311]                         if (muffled) 
[09:33:04.311]                           invokeRestart("muffleMessage")
[09:33:04.311]                       }
[09:33:04.311]                       else if (inherits(cond, "warning")) {
[09:33:04.311]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.311]                         if (muffled) 
[09:33:04.311]                           invokeRestart("muffleWarning")
[09:33:04.311]                       }
[09:33:04.311]                       else if (inherits(cond, "condition")) {
[09:33:04.311]                         if (!is.null(pattern)) {
[09:33:04.311]                           computeRestarts <- base::computeRestarts
[09:33:04.311]                           grepl <- base::grepl
[09:33:04.311]                           restarts <- computeRestarts(cond)
[09:33:04.311]                           for (restart in restarts) {
[09:33:04.311]                             name <- restart$name
[09:33:04.311]                             if (is.null(name)) 
[09:33:04.311]                               next
[09:33:04.311]                             if (!grepl(pattern, name)) 
[09:33:04.311]                               next
[09:33:04.311]                             invokeRestart(restart)
[09:33:04.311]                             muffled <- TRUE
[09:33:04.311]                             break
[09:33:04.311]                           }
[09:33:04.311]                         }
[09:33:04.311]                       }
[09:33:04.311]                       invisible(muffled)
[09:33:04.311]                     }
[09:33:04.311]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.311]                   }
[09:33:04.311]                 }
[09:33:04.311]                 else {
[09:33:04.311]                   if (TRUE) {
[09:33:04.311]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.311]                     {
[09:33:04.311]                       inherits <- base::inherits
[09:33:04.311]                       invokeRestart <- base::invokeRestart
[09:33:04.311]                       is.null <- base::is.null
[09:33:04.311]                       muffled <- FALSE
[09:33:04.311]                       if (inherits(cond, "message")) {
[09:33:04.311]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.311]                         if (muffled) 
[09:33:04.311]                           invokeRestart("muffleMessage")
[09:33:04.311]                       }
[09:33:04.311]                       else if (inherits(cond, "warning")) {
[09:33:04.311]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.311]                         if (muffled) 
[09:33:04.311]                           invokeRestart("muffleWarning")
[09:33:04.311]                       }
[09:33:04.311]                       else if (inherits(cond, "condition")) {
[09:33:04.311]                         if (!is.null(pattern)) {
[09:33:04.311]                           computeRestarts <- base::computeRestarts
[09:33:04.311]                           grepl <- base::grepl
[09:33:04.311]                           restarts <- computeRestarts(cond)
[09:33:04.311]                           for (restart in restarts) {
[09:33:04.311]                             name <- restart$name
[09:33:04.311]                             if (is.null(name)) 
[09:33:04.311]                               next
[09:33:04.311]                             if (!grepl(pattern, name)) 
[09:33:04.311]                               next
[09:33:04.311]                             invokeRestart(restart)
[09:33:04.311]                             muffled <- TRUE
[09:33:04.311]                             break
[09:33:04.311]                           }
[09:33:04.311]                         }
[09:33:04.311]                       }
[09:33:04.311]                       invisible(muffled)
[09:33:04.311]                     }
[09:33:04.311]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.311]                   }
[09:33:04.311]                 }
[09:33:04.311]             }
[09:33:04.311]         }))
[09:33:04.311]     }, error = function(ex) {
[09:33:04.311]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:04.311]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.311]                 ...future.rng), started = ...future.startTime, 
[09:33:04.311]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:04.311]             version = "1.8"), class = "FutureResult")
[09:33:04.311]     }, finally = {
[09:33:04.311]         if (!identical(...future.workdir, getwd())) 
[09:33:04.311]             setwd(...future.workdir)
[09:33:04.311]         {
[09:33:04.311]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:04.311]                 ...future.oldOptions$nwarnings <- NULL
[09:33:04.311]             }
[09:33:04.311]             base::options(...future.oldOptions)
[09:33:04.311]             if (.Platform$OS.type == "windows") {
[09:33:04.311]                 old_names <- names(...future.oldEnvVars)
[09:33:04.311]                 envs <- base::Sys.getenv()
[09:33:04.311]                 names <- names(envs)
[09:33:04.311]                 common <- intersect(names, old_names)
[09:33:04.311]                 added <- setdiff(names, old_names)
[09:33:04.311]                 removed <- setdiff(old_names, names)
[09:33:04.311]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:04.311]                   envs[common]]
[09:33:04.311]                 NAMES <- toupper(changed)
[09:33:04.311]                 args <- list()
[09:33:04.311]                 for (kk in seq_along(NAMES)) {
[09:33:04.311]                   name <- changed[[kk]]
[09:33:04.311]                   NAME <- NAMES[[kk]]
[09:33:04.311]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.311]                     next
[09:33:04.311]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.311]                 }
[09:33:04.311]                 NAMES <- toupper(added)
[09:33:04.311]                 for (kk in seq_along(NAMES)) {
[09:33:04.311]                   name <- added[[kk]]
[09:33:04.311]                   NAME <- NAMES[[kk]]
[09:33:04.311]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.311]                     next
[09:33:04.311]                   args[[name]] <- ""
[09:33:04.311]                 }
[09:33:04.311]                 NAMES <- toupper(removed)
[09:33:04.311]                 for (kk in seq_along(NAMES)) {
[09:33:04.311]                   name <- removed[[kk]]
[09:33:04.311]                   NAME <- NAMES[[kk]]
[09:33:04.311]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.311]                     next
[09:33:04.311]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.311]                 }
[09:33:04.311]                 if (length(args) > 0) 
[09:33:04.311]                   base::do.call(base::Sys.setenv, args = args)
[09:33:04.311]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:04.311]             }
[09:33:04.311]             else {
[09:33:04.311]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:04.311]             }
[09:33:04.311]             {
[09:33:04.311]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:04.311]                   0L) {
[09:33:04.311]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:04.311]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:04.311]                   base::options(opts)
[09:33:04.311]                 }
[09:33:04.311]                 {
[09:33:04.311]                   {
[09:33:04.311]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:04.311]                     NULL
[09:33:04.311]                   }
[09:33:04.311]                   options(future.plan = NULL)
[09:33:04.311]                   if (is.na(NA_character_)) 
[09:33:04.311]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.311]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:04.311]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:04.311]                     .init = FALSE)
[09:33:04.311]                 }
[09:33:04.311]             }
[09:33:04.311]         }
[09:33:04.311]     })
[09:33:04.311]     if (TRUE) {
[09:33:04.311]         base::sink(type = "output", split = FALSE)
[09:33:04.311]         if (TRUE) {
[09:33:04.311]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:04.311]         }
[09:33:04.311]         else {
[09:33:04.311]             ...future.result["stdout"] <- base::list(NULL)
[09:33:04.311]         }
[09:33:04.311]         base::close(...future.stdout)
[09:33:04.311]         ...future.stdout <- NULL
[09:33:04.311]     }
[09:33:04.311]     ...future.result$conditions <- ...future.conditions
[09:33:04.311]     ...future.result$finished <- base::Sys.time()
[09:33:04.311]     ...future.result
[09:33:04.311] }
[09:33:04.313] requestCore(): workers = 2
[09:33:04.315] MulticoreFuture started
[09:33:04.315] - Launch lazy future ... done
[09:33:04.315] run() for ‘MulticoreFuture’ ... done
[09:33:04.316] result() for MulticoreFuture ...
[09:33:04.316] plan(): Setting new future strategy stack:
[09:33:04.316] List of future strategies:
[09:33:04.316] 1. sequential:
[09:33:04.316]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:04.316]    - tweaked: FALSE
[09:33:04.316]    - call: NULL
[09:33:04.317] plan(): nbrOfWorkers() = 1
[09:33:04.319] plan(): Setting new future strategy stack:
[09:33:04.319] List of future strategies:
[09:33:04.319] 1. multicore:
[09:33:04.319]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:33:04.319]    - tweaked: FALSE
[09:33:04.319]    - call: plan(strategy)
[09:33:04.324] plan(): nbrOfWorkers() = 2
[09:33:04.325] result() for MulticoreFuture ...
[09:33:04.325] result() for MulticoreFuture ... done
[09:33:04.325] result() for MulticoreFuture ... done
[09:33:04.325] result() for MulticoreFuture ...
[09:33:04.325] result() for MulticoreFuture ... done
[09:33:04.325] result() for MulticoreFuture ...
[09:33:04.325] result() for MulticoreFuture ... done
[1] 42
[09:33:04.326] result() for MulticoreFuture ...
[09:33:04.326] result() for MulticoreFuture ... done
multicore ... done
multisession ...
[09:33:04.326] plan(): Setting new future strategy stack:
[09:33:04.326] List of future strategies:
[09:33:04.326] 1. multisession:
[09:33:04.326]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:04.326]    - tweaked: FALSE
[09:33:04.326]    - call: plan(strategy)
[09:33:04.327] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:33:04.327] multisession:
[09:33:04.327] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:04.327] - tweaked: FALSE
[09:33:04.327] - call: plan(strategy)
[09:33:04.334] getGlobalsAndPackages() ...
[09:33:04.334] Not searching for globals
[09:33:04.334] - globals: [0] <none>
[09:33:04.334] getGlobalsAndPackages() ... DONE
[09:33:04.335] [local output] makeClusterPSOCK() ...
[09:33:04.378] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:33:04.380] [local output] Base port: 11964
[09:33:04.380] [local output] Getting setup options for 2 cluster nodes ...
[09:33:04.380] [local output]  - Node 1 of 2 ...
[09:33:04.380] [local output] localMachine=TRUE => revtunnel=FALSE

[09:33:04.381] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpSN39z6/worker.rank=1.parallelly.parent=50427.c4fb23e2c11e.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpSN39z6/worker.rank=1.parallelly.parent=50427.c4fb23e2c11e.pid")'’
[09:33:04.565] - Possible to infer worker's PID: TRUE
[09:33:04.566] [local output] Rscript port: 11964

[09:33:04.566] [local output]  - Node 2 of 2 ...
[09:33:04.566] [local output] localMachine=TRUE => revtunnel=FALSE

[09:33:04.567] [local output] Rscript port: 11964

[09:33:04.567] [local output] Getting setup options for 2 cluster nodes ... done
[09:33:04.567] [local output]  - Parallel setup requested for some PSOCK nodes
[09:33:04.568] [local output] Setting up PSOCK nodes in parallel
[09:33:04.568] List of 36
[09:33:04.568]  $ worker          : chr "localhost"
[09:33:04.568]   ..- attr(*, "localhost")= logi TRUE
[09:33:04.568]  $ master          : chr "localhost"
[09:33:04.568]  $ port            : int 11964
[09:33:04.568]  $ connectTimeout  : num 120
[09:33:04.568]  $ timeout         : num 2592000
[09:33:04.568]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:33:04.568]  $ homogeneous     : logi TRUE
[09:33:04.568]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:33:04.568]  $ rscript_envs    : NULL
[09:33:04.568]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:33:04.568]  $ rscript_startup : NULL
[09:33:04.568]  $ rscript_sh      : chr "sh"
[09:33:04.568]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:33:04.568]  $ methods         : logi TRUE
[09:33:04.568]  $ socketOptions   : chr "no-delay"
[09:33:04.568]  $ useXDR          : logi FALSE
[09:33:04.568]  $ outfile         : chr "/dev/null"
[09:33:04.568]  $ renice          : int NA
[09:33:04.568]  $ rshcmd          : NULL
[09:33:04.568]  $ user            : chr(0) 
[09:33:04.568]  $ revtunnel       : logi FALSE
[09:33:04.568]  $ rshlogfile      : NULL
[09:33:04.568]  $ rshopts         : chr(0) 
[09:33:04.568]  $ rank            : int 1
[09:33:04.568]  $ manual          : logi FALSE
[09:33:04.568]  $ dryrun          : logi FALSE
[09:33:04.568]  $ quiet           : logi FALSE
[09:33:04.568]  $ setup_strategy  : chr "parallel"
[09:33:04.568]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:33:04.568]  $ pidfile         : chr "/tmp/RtmpSN39z6/worker.rank=1.parallelly.parent=50427.c4fb23e2c11e.pid"
[09:33:04.568]  $ rshcmd_label    : NULL
[09:33:04.568]  $ rsh_call        : NULL
[09:33:04.568]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:33:04.568]  $ localMachine    : logi TRUE
[09:33:04.568]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:33:04.568]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:33:04.568]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:33:04.568]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:33:04.568]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:33:04.568]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:33:04.568]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:33:04.568]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:33:04.568]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:33:04.568]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:33:04.568]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:33:04.568]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:33:04.568]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:33:04.568]  $ arguments       :List of 28
[09:33:04.568]   ..$ worker          : chr "localhost"
[09:33:04.568]   ..$ master          : NULL
[09:33:04.568]   ..$ port            : int 11964
[09:33:04.568]   ..$ connectTimeout  : num 120
[09:33:04.568]   ..$ timeout         : num 2592000
[09:33:04.568]   ..$ rscript         : NULL
[09:33:04.568]   ..$ homogeneous     : NULL
[09:33:04.568]   ..$ rscript_args    : NULL
[09:33:04.568]   ..$ rscript_envs    : NULL
[09:33:04.568]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:33:04.568]   ..$ rscript_startup : NULL
[09:33:04.568]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:33:04.568]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:33:04.568]   ..$ methods         : logi TRUE
[09:33:04.568]   ..$ socketOptions   : chr "no-delay"
[09:33:04.568]   ..$ useXDR          : logi FALSE
[09:33:04.568]   ..$ outfile         : chr "/dev/null"
[09:33:04.568]   ..$ renice          : int NA
[09:33:04.568]   ..$ rshcmd          : NULL
[09:33:04.568]   ..$ user            : NULL
[09:33:04.568]   ..$ revtunnel       : logi NA
[09:33:04.568]   ..$ rshlogfile      : NULL
[09:33:04.568]   ..$ rshopts         : NULL
[09:33:04.568]   ..$ rank            : int 1
[09:33:04.568]   ..$ manual          : logi FALSE
[09:33:04.568]   ..$ dryrun          : logi FALSE
[09:33:04.568]   ..$ quiet           : logi FALSE
[09:33:04.568]   ..$ setup_strategy  : chr "parallel"
[09:33:04.568]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:33:04.584] [local output] System call to launch all workers:
[09:33:04.584] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpSN39z6/worker.rank=1.parallelly.parent=50427.c4fb23e2c11e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11964 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:33:04.584] [local output] Starting PSOCK main server
[09:33:04.590] [local output] Workers launched
[09:33:04.590] [local output] Waiting for workers to connect back
[09:33:04.590]  - [local output] 0 workers out of 2 ready
[09:33:04.831]  - [local output] 0 workers out of 2 ready
[09:33:04.831]  - [local output] 1 workers out of 2 ready
[09:33:04.832]  - [local output] 2 workers out of 2 ready
[09:33:04.832] [local output] Launching of workers completed
[09:33:04.832] [local output] Collecting session information from workers
[09:33:04.833] [local output]  - Worker #1 of 2
[09:33:04.833] [local output]  - Worker #2 of 2
[09:33:04.833] [local output] makeClusterPSOCK() ... done
[09:33:04.846] Packages needed by the future expression (n = 0): <none>
[09:33:04.847] Packages needed by future strategies (n = 0): <none>
[09:33:04.847] {
[09:33:04.847]     {
[09:33:04.847]         {
[09:33:04.847]             ...future.startTime <- base::Sys.time()
[09:33:04.847]             {
[09:33:04.847]                 {
[09:33:04.847]                   {
[09:33:04.847]                     {
[09:33:04.847]                       base::local({
[09:33:04.847]                         has_future <- base::requireNamespace("future", 
[09:33:04.847]                           quietly = TRUE)
[09:33:04.847]                         if (has_future) {
[09:33:04.847]                           ns <- base::getNamespace("future")
[09:33:04.847]                           version <- ns[[".package"]][["version"]]
[09:33:04.847]                           if (is.null(version)) 
[09:33:04.847]                             version <- utils::packageVersion("future")
[09:33:04.847]                         }
[09:33:04.847]                         else {
[09:33:04.847]                           version <- NULL
[09:33:04.847]                         }
[09:33:04.847]                         if (!has_future || version < "1.8.0") {
[09:33:04.847]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:04.847]                             "", base::R.version$version.string), 
[09:33:04.847]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:04.847]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:04.847]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:04.847]                               "release", "version")], collapse = " "), 
[09:33:04.847]                             hostname = base::Sys.info()[["nodename"]])
[09:33:04.847]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:04.847]                             info)
[09:33:04.847]                           info <- base::paste(info, collapse = "; ")
[09:33:04.847]                           if (!has_future) {
[09:33:04.847]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:04.847]                               info)
[09:33:04.847]                           }
[09:33:04.847]                           else {
[09:33:04.847]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:04.847]                               info, version)
[09:33:04.847]                           }
[09:33:04.847]                           base::stop(msg)
[09:33:04.847]                         }
[09:33:04.847]                       })
[09:33:04.847]                     }
[09:33:04.847]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:04.847]                     base::options(mc.cores = 1L)
[09:33:04.847]                   }
[09:33:04.847]                   ...future.strategy.old <- future::plan("list")
[09:33:04.847]                   options(future.plan = NULL)
[09:33:04.847]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.847]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:04.847]                 }
[09:33:04.847]                 ...future.workdir <- getwd()
[09:33:04.847]             }
[09:33:04.847]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:04.847]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:04.847]         }
[09:33:04.847]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:04.847]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:04.847]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:04.847]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:04.847]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:04.847]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:04.847]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:04.847]             base::names(...future.oldOptions))
[09:33:04.847]     }
[09:33:04.847]     if (FALSE) {
[09:33:04.847]     }
[09:33:04.847]     else {
[09:33:04.847]         if (TRUE) {
[09:33:04.847]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:04.847]                 open = "w")
[09:33:04.847]         }
[09:33:04.847]         else {
[09:33:04.847]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:04.847]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:04.847]         }
[09:33:04.847]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:04.847]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:04.847]             base::sink(type = "output", split = FALSE)
[09:33:04.847]             base::close(...future.stdout)
[09:33:04.847]         }, add = TRUE)
[09:33:04.847]     }
[09:33:04.847]     ...future.frame <- base::sys.nframe()
[09:33:04.847]     ...future.conditions <- base::list()
[09:33:04.847]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:04.847]     if (FALSE) {
[09:33:04.847]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:04.847]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:04.847]     }
[09:33:04.847]     ...future.result <- base::tryCatch({
[09:33:04.847]         base::withCallingHandlers({
[09:33:04.847]             ...future.value <- base::withVisible(base::local({
[09:33:04.847]                 ...future.makeSendCondition <- base::local({
[09:33:04.847]                   sendCondition <- NULL
[09:33:04.847]                   function(frame = 1L) {
[09:33:04.847]                     if (is.function(sendCondition)) 
[09:33:04.847]                       return(sendCondition)
[09:33:04.847]                     ns <- getNamespace("parallel")
[09:33:04.847]                     if (exists("sendData", mode = "function", 
[09:33:04.847]                       envir = ns)) {
[09:33:04.847]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:04.847]                         envir = ns)
[09:33:04.847]                       envir <- sys.frame(frame)
[09:33:04.847]                       master <- NULL
[09:33:04.847]                       while (!identical(envir, .GlobalEnv) && 
[09:33:04.847]                         !identical(envir, emptyenv())) {
[09:33:04.847]                         if (exists("master", mode = "list", envir = envir, 
[09:33:04.847]                           inherits = FALSE)) {
[09:33:04.847]                           master <- get("master", mode = "list", 
[09:33:04.847]                             envir = envir, inherits = FALSE)
[09:33:04.847]                           if (inherits(master, c("SOCKnode", 
[09:33:04.847]                             "SOCK0node"))) {
[09:33:04.847]                             sendCondition <<- function(cond) {
[09:33:04.847]                               data <- list(type = "VALUE", value = cond, 
[09:33:04.847]                                 success = TRUE)
[09:33:04.847]                               parallel_sendData(master, data)
[09:33:04.847]                             }
[09:33:04.847]                             return(sendCondition)
[09:33:04.847]                           }
[09:33:04.847]                         }
[09:33:04.847]                         frame <- frame + 1L
[09:33:04.847]                         envir <- sys.frame(frame)
[09:33:04.847]                       }
[09:33:04.847]                     }
[09:33:04.847]                     sendCondition <<- function(cond) NULL
[09:33:04.847]                   }
[09:33:04.847]                 })
[09:33:04.847]                 withCallingHandlers({
[09:33:04.847]                   NA
[09:33:04.847]                 }, immediateCondition = function(cond) {
[09:33:04.847]                   sendCondition <- ...future.makeSendCondition()
[09:33:04.847]                   sendCondition(cond)
[09:33:04.847]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.847]                   {
[09:33:04.847]                     inherits <- base::inherits
[09:33:04.847]                     invokeRestart <- base::invokeRestart
[09:33:04.847]                     is.null <- base::is.null
[09:33:04.847]                     muffled <- FALSE
[09:33:04.847]                     if (inherits(cond, "message")) {
[09:33:04.847]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:04.847]                       if (muffled) 
[09:33:04.847]                         invokeRestart("muffleMessage")
[09:33:04.847]                     }
[09:33:04.847]                     else if (inherits(cond, "warning")) {
[09:33:04.847]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:04.847]                       if (muffled) 
[09:33:04.847]                         invokeRestart("muffleWarning")
[09:33:04.847]                     }
[09:33:04.847]                     else if (inherits(cond, "condition")) {
[09:33:04.847]                       if (!is.null(pattern)) {
[09:33:04.847]                         computeRestarts <- base::computeRestarts
[09:33:04.847]                         grepl <- base::grepl
[09:33:04.847]                         restarts <- computeRestarts(cond)
[09:33:04.847]                         for (restart in restarts) {
[09:33:04.847]                           name <- restart$name
[09:33:04.847]                           if (is.null(name)) 
[09:33:04.847]                             next
[09:33:04.847]                           if (!grepl(pattern, name)) 
[09:33:04.847]                             next
[09:33:04.847]                           invokeRestart(restart)
[09:33:04.847]                           muffled <- TRUE
[09:33:04.847]                           break
[09:33:04.847]                         }
[09:33:04.847]                       }
[09:33:04.847]                     }
[09:33:04.847]                     invisible(muffled)
[09:33:04.847]                   }
[09:33:04.847]                   muffleCondition(cond)
[09:33:04.847]                 })
[09:33:04.847]             }))
[09:33:04.847]             future::FutureResult(value = ...future.value$value, 
[09:33:04.847]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.847]                   ...future.rng), globalenv = if (FALSE) 
[09:33:04.847]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:04.847]                     ...future.globalenv.names))
[09:33:04.847]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:04.847]         }, condition = base::local({
[09:33:04.847]             c <- base::c
[09:33:04.847]             inherits <- base::inherits
[09:33:04.847]             invokeRestart <- base::invokeRestart
[09:33:04.847]             length <- base::length
[09:33:04.847]             list <- base::list
[09:33:04.847]             seq.int <- base::seq.int
[09:33:04.847]             signalCondition <- base::signalCondition
[09:33:04.847]             sys.calls <- base::sys.calls
[09:33:04.847]             `[[` <- base::`[[`
[09:33:04.847]             `+` <- base::`+`
[09:33:04.847]             `<<-` <- base::`<<-`
[09:33:04.847]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:04.847]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:04.847]                   3L)]
[09:33:04.847]             }
[09:33:04.847]             function(cond) {
[09:33:04.847]                 is_error <- inherits(cond, "error")
[09:33:04.847]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:04.847]                   NULL)
[09:33:04.847]                 if (is_error) {
[09:33:04.847]                   sessionInformation <- function() {
[09:33:04.847]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:04.847]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:04.847]                       search = base::search(), system = base::Sys.info())
[09:33:04.847]                   }
[09:33:04.847]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.847]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:04.847]                     cond$call), session = sessionInformation(), 
[09:33:04.847]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:04.847]                   signalCondition(cond)
[09:33:04.847]                 }
[09:33:04.847]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:04.847]                 "immediateCondition"))) {
[09:33:04.847]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:04.847]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.847]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:04.847]                   if (TRUE && !signal) {
[09:33:04.847]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.847]                     {
[09:33:04.847]                       inherits <- base::inherits
[09:33:04.847]                       invokeRestart <- base::invokeRestart
[09:33:04.847]                       is.null <- base::is.null
[09:33:04.847]                       muffled <- FALSE
[09:33:04.847]                       if (inherits(cond, "message")) {
[09:33:04.847]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.847]                         if (muffled) 
[09:33:04.847]                           invokeRestart("muffleMessage")
[09:33:04.847]                       }
[09:33:04.847]                       else if (inherits(cond, "warning")) {
[09:33:04.847]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.847]                         if (muffled) 
[09:33:04.847]                           invokeRestart("muffleWarning")
[09:33:04.847]                       }
[09:33:04.847]                       else if (inherits(cond, "condition")) {
[09:33:04.847]                         if (!is.null(pattern)) {
[09:33:04.847]                           computeRestarts <- base::computeRestarts
[09:33:04.847]                           grepl <- base::grepl
[09:33:04.847]                           restarts <- computeRestarts(cond)
[09:33:04.847]                           for (restart in restarts) {
[09:33:04.847]                             name <- restart$name
[09:33:04.847]                             if (is.null(name)) 
[09:33:04.847]                               next
[09:33:04.847]                             if (!grepl(pattern, name)) 
[09:33:04.847]                               next
[09:33:04.847]                             invokeRestart(restart)
[09:33:04.847]                             muffled <- TRUE
[09:33:04.847]                             break
[09:33:04.847]                           }
[09:33:04.847]                         }
[09:33:04.847]                       }
[09:33:04.847]                       invisible(muffled)
[09:33:04.847]                     }
[09:33:04.847]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.847]                   }
[09:33:04.847]                 }
[09:33:04.847]                 else {
[09:33:04.847]                   if (TRUE) {
[09:33:04.847]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.847]                     {
[09:33:04.847]                       inherits <- base::inherits
[09:33:04.847]                       invokeRestart <- base::invokeRestart
[09:33:04.847]                       is.null <- base::is.null
[09:33:04.847]                       muffled <- FALSE
[09:33:04.847]                       if (inherits(cond, "message")) {
[09:33:04.847]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.847]                         if (muffled) 
[09:33:04.847]                           invokeRestart("muffleMessage")
[09:33:04.847]                       }
[09:33:04.847]                       else if (inherits(cond, "warning")) {
[09:33:04.847]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.847]                         if (muffled) 
[09:33:04.847]                           invokeRestart("muffleWarning")
[09:33:04.847]                       }
[09:33:04.847]                       else if (inherits(cond, "condition")) {
[09:33:04.847]                         if (!is.null(pattern)) {
[09:33:04.847]                           computeRestarts <- base::computeRestarts
[09:33:04.847]                           grepl <- base::grepl
[09:33:04.847]                           restarts <- computeRestarts(cond)
[09:33:04.847]                           for (restart in restarts) {
[09:33:04.847]                             name <- restart$name
[09:33:04.847]                             if (is.null(name)) 
[09:33:04.847]                               next
[09:33:04.847]                             if (!grepl(pattern, name)) 
[09:33:04.847]                               next
[09:33:04.847]                             invokeRestart(restart)
[09:33:04.847]                             muffled <- TRUE
[09:33:04.847]                             break
[09:33:04.847]                           }
[09:33:04.847]                         }
[09:33:04.847]                       }
[09:33:04.847]                       invisible(muffled)
[09:33:04.847]                     }
[09:33:04.847]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.847]                   }
[09:33:04.847]                 }
[09:33:04.847]             }
[09:33:04.847]         }))
[09:33:04.847]     }, error = function(ex) {
[09:33:04.847]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:04.847]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.847]                 ...future.rng), started = ...future.startTime, 
[09:33:04.847]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:04.847]             version = "1.8"), class = "FutureResult")
[09:33:04.847]     }, finally = {
[09:33:04.847]         if (!identical(...future.workdir, getwd())) 
[09:33:04.847]             setwd(...future.workdir)
[09:33:04.847]         {
[09:33:04.847]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:04.847]                 ...future.oldOptions$nwarnings <- NULL
[09:33:04.847]             }
[09:33:04.847]             base::options(...future.oldOptions)
[09:33:04.847]             if (.Platform$OS.type == "windows") {
[09:33:04.847]                 old_names <- names(...future.oldEnvVars)
[09:33:04.847]                 envs <- base::Sys.getenv()
[09:33:04.847]                 names <- names(envs)
[09:33:04.847]                 common <- intersect(names, old_names)
[09:33:04.847]                 added <- setdiff(names, old_names)
[09:33:04.847]                 removed <- setdiff(old_names, names)
[09:33:04.847]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:04.847]                   envs[common]]
[09:33:04.847]                 NAMES <- toupper(changed)
[09:33:04.847]                 args <- list()
[09:33:04.847]                 for (kk in seq_along(NAMES)) {
[09:33:04.847]                   name <- changed[[kk]]
[09:33:04.847]                   NAME <- NAMES[[kk]]
[09:33:04.847]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.847]                     next
[09:33:04.847]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.847]                 }
[09:33:04.847]                 NAMES <- toupper(added)
[09:33:04.847]                 for (kk in seq_along(NAMES)) {
[09:33:04.847]                   name <- added[[kk]]
[09:33:04.847]                   NAME <- NAMES[[kk]]
[09:33:04.847]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.847]                     next
[09:33:04.847]                   args[[name]] <- ""
[09:33:04.847]                 }
[09:33:04.847]                 NAMES <- toupper(removed)
[09:33:04.847]                 for (kk in seq_along(NAMES)) {
[09:33:04.847]                   name <- removed[[kk]]
[09:33:04.847]                   NAME <- NAMES[[kk]]
[09:33:04.847]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.847]                     next
[09:33:04.847]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.847]                 }
[09:33:04.847]                 if (length(args) > 0) 
[09:33:04.847]                   base::do.call(base::Sys.setenv, args = args)
[09:33:04.847]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:04.847]             }
[09:33:04.847]             else {
[09:33:04.847]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:04.847]             }
[09:33:04.847]             {
[09:33:04.847]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:04.847]                   0L) {
[09:33:04.847]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:04.847]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:04.847]                   base::options(opts)
[09:33:04.847]                 }
[09:33:04.847]                 {
[09:33:04.847]                   {
[09:33:04.847]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:04.847]                     NULL
[09:33:04.847]                   }
[09:33:04.847]                   options(future.plan = NULL)
[09:33:04.847]                   if (is.na(NA_character_)) 
[09:33:04.847]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.847]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:04.847]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:04.847]                     .init = FALSE)
[09:33:04.847]                 }
[09:33:04.847]             }
[09:33:04.847]         }
[09:33:04.847]     })
[09:33:04.847]     if (TRUE) {
[09:33:04.847]         base::sink(type = "output", split = FALSE)
[09:33:04.847]         if (TRUE) {
[09:33:04.847]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:04.847]         }
[09:33:04.847]         else {
[09:33:04.847]             ...future.result["stdout"] <- base::list(NULL)
[09:33:04.847]         }
[09:33:04.847]         base::close(...future.stdout)
[09:33:04.847]         ...future.stdout <- NULL
[09:33:04.847]     }
[09:33:04.847]     ...future.result$conditions <- ...future.conditions
[09:33:04.847]     ...future.result$finished <- base::Sys.time()
[09:33:04.847]     ...future.result
[09:33:04.847] }
[09:33:04.898] MultisessionFuture started
[09:33:04.898] result() for ClusterFuture ...
[09:33:04.898] receiveMessageFromWorker() for ClusterFuture ...
[09:33:04.898] - Validating connection of MultisessionFuture
[09:33:04.929] - received message: FutureResult
[09:33:04.929] - Received FutureResult
[09:33:04.929] - Erased future from FutureRegistry
[09:33:04.930] result() for ClusterFuture ...
[09:33:04.930] - result already collected: FutureResult
[09:33:04.930] result() for ClusterFuture ... done
[09:33:04.930] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:04.930] result() for ClusterFuture ... done
[09:33:04.930] result() for ClusterFuture ...
[09:33:04.930] - result already collected: FutureResult
[09:33:04.930] result() for ClusterFuture ... done
[09:33:04.931] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:33:04.934] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[09:33:04.935] getGlobalsAndPackages() ...
[09:33:04.935] Searching for globals...
[09:33:04.938] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:04.939] Searching for globals ... DONE
[09:33:04.939] Resolving globals: FALSE
[09:33:04.939] 
[09:33:04.939] - packages: [1] ‘utils’
[09:33:04.940] getGlobalsAndPackages() ... DONE
[09:33:04.940] run() for ‘Future’ ...
[09:33:04.940] - state: ‘created’
[09:33:04.940] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:33:04.954] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:04.954] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:33:04.955]   - Field: ‘node’
[09:33:04.955]   - Field: ‘label’
[09:33:04.955]   - Field: ‘local’
[09:33:04.955]   - Field: ‘owner’
[09:33:04.955]   - Field: ‘envir’
[09:33:04.955]   - Field: ‘workers’
[09:33:04.955]   - Field: ‘packages’
[09:33:04.955]   - Field: ‘gc’
[09:33:04.955]   - Field: ‘conditions’
[09:33:04.955]   - Field: ‘persistent’
[09:33:04.956]   - Field: ‘expr’
[09:33:04.956]   - Field: ‘uuid’
[09:33:04.956]   - Field: ‘seed’
[09:33:04.956]   - Field: ‘version’
[09:33:04.956]   - Field: ‘result’
[09:33:04.956]   - Field: ‘asynchronous’
[09:33:04.956]   - Field: ‘calls’
[09:33:04.956]   - Field: ‘globals’
[09:33:04.957]   - Field: ‘stdout’
[09:33:04.957]   - Field: ‘earlySignal’
[09:33:04.957]   - Field: ‘lazy’
[09:33:04.957]   - Field: ‘state’
[09:33:04.957] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:33:04.957] - Launch lazy future ...
[09:33:04.957] Packages needed by the future expression (n = 1): ‘utils’
[09:33:04.958] Packages needed by future strategies (n = 0): <none>
[09:33:04.958] {
[09:33:04.958]     {
[09:33:04.958]         {
[09:33:04.958]             ...future.startTime <- base::Sys.time()
[09:33:04.958]             {
[09:33:04.958]                 {
[09:33:04.958]                   {
[09:33:04.958]                     {
[09:33:04.958]                       {
[09:33:04.958]                         base::local({
[09:33:04.958]                           has_future <- base::requireNamespace("future", 
[09:33:04.958]                             quietly = TRUE)
[09:33:04.958]                           if (has_future) {
[09:33:04.958]                             ns <- base::getNamespace("future")
[09:33:04.958]                             version <- ns[[".package"]][["version"]]
[09:33:04.958]                             if (is.null(version)) 
[09:33:04.958]                               version <- utils::packageVersion("future")
[09:33:04.958]                           }
[09:33:04.958]                           else {
[09:33:04.958]                             version <- NULL
[09:33:04.958]                           }
[09:33:04.958]                           if (!has_future || version < "1.8.0") {
[09:33:04.958]                             info <- base::c(r_version = base::gsub("R version ", 
[09:33:04.958]                               "", base::R.version$version.string), 
[09:33:04.958]                               platform = base::sprintf("%s (%s-bit)", 
[09:33:04.958]                                 base::R.version$platform, 8 * 
[09:33:04.958]                                   base::.Machine$sizeof.pointer), 
[09:33:04.958]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:04.958]                                 "release", "version")], collapse = " "), 
[09:33:04.958]                               hostname = base::Sys.info()[["nodename"]])
[09:33:04.958]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:33:04.958]                               info)
[09:33:04.958]                             info <- base::paste(info, collapse = "; ")
[09:33:04.958]                             if (!has_future) {
[09:33:04.958]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:04.958]                                 info)
[09:33:04.958]                             }
[09:33:04.958]                             else {
[09:33:04.958]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:04.958]                                 info, version)
[09:33:04.958]                             }
[09:33:04.958]                             base::stop(msg)
[09:33:04.958]                           }
[09:33:04.958]                         })
[09:33:04.958]                       }
[09:33:04.958]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:04.958]                       base::options(mc.cores = 1L)
[09:33:04.958]                     }
[09:33:04.958]                     base::local({
[09:33:04.958]                       for (pkg in "utils") {
[09:33:04.958]                         base::loadNamespace(pkg)
[09:33:04.958]                         base::library(pkg, character.only = TRUE)
[09:33:04.958]                       }
[09:33:04.958]                     })
[09:33:04.958]                   }
[09:33:04.958]                   ...future.strategy.old <- future::plan("list")
[09:33:04.958]                   options(future.plan = NULL)
[09:33:04.958]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.958]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:04.958]                 }
[09:33:04.958]                 ...future.workdir <- getwd()
[09:33:04.958]             }
[09:33:04.958]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:04.958]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:04.958]         }
[09:33:04.958]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:04.958]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:04.958]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:04.958]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:04.958]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:04.958]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:04.958]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:04.958]             base::names(...future.oldOptions))
[09:33:04.958]     }
[09:33:04.958]     if (FALSE) {
[09:33:04.958]     }
[09:33:04.958]     else {
[09:33:04.958]         if (TRUE) {
[09:33:04.958]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:04.958]                 open = "w")
[09:33:04.958]         }
[09:33:04.958]         else {
[09:33:04.958]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:04.958]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:04.958]         }
[09:33:04.958]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:04.958]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:04.958]             base::sink(type = "output", split = FALSE)
[09:33:04.958]             base::close(...future.stdout)
[09:33:04.958]         }, add = TRUE)
[09:33:04.958]     }
[09:33:04.958]     ...future.frame <- base::sys.nframe()
[09:33:04.958]     ...future.conditions <- base::list()
[09:33:04.958]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:04.958]     if (FALSE) {
[09:33:04.958]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:04.958]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:04.958]     }
[09:33:04.958]     ...future.result <- base::tryCatch({
[09:33:04.958]         base::withCallingHandlers({
[09:33:04.958]             ...future.value <- base::withVisible(base::local({
[09:33:04.958]                 ...future.makeSendCondition <- base::local({
[09:33:04.958]                   sendCondition <- NULL
[09:33:04.958]                   function(frame = 1L) {
[09:33:04.958]                     if (is.function(sendCondition)) 
[09:33:04.958]                       return(sendCondition)
[09:33:04.958]                     ns <- getNamespace("parallel")
[09:33:04.958]                     if (exists("sendData", mode = "function", 
[09:33:04.958]                       envir = ns)) {
[09:33:04.958]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:04.958]                         envir = ns)
[09:33:04.958]                       envir <- sys.frame(frame)
[09:33:04.958]                       master <- NULL
[09:33:04.958]                       while (!identical(envir, .GlobalEnv) && 
[09:33:04.958]                         !identical(envir, emptyenv())) {
[09:33:04.958]                         if (exists("master", mode = "list", envir = envir, 
[09:33:04.958]                           inherits = FALSE)) {
[09:33:04.958]                           master <- get("master", mode = "list", 
[09:33:04.958]                             envir = envir, inherits = FALSE)
[09:33:04.958]                           if (inherits(master, c("SOCKnode", 
[09:33:04.958]                             "SOCK0node"))) {
[09:33:04.958]                             sendCondition <<- function(cond) {
[09:33:04.958]                               data <- list(type = "VALUE", value = cond, 
[09:33:04.958]                                 success = TRUE)
[09:33:04.958]                               parallel_sendData(master, data)
[09:33:04.958]                             }
[09:33:04.958]                             return(sendCondition)
[09:33:04.958]                           }
[09:33:04.958]                         }
[09:33:04.958]                         frame <- frame + 1L
[09:33:04.958]                         envir <- sys.frame(frame)
[09:33:04.958]                       }
[09:33:04.958]                     }
[09:33:04.958]                     sendCondition <<- function(cond) NULL
[09:33:04.958]                   }
[09:33:04.958]                 })
[09:33:04.958]                 withCallingHandlers({
[09:33:04.958]                   {
[09:33:04.958]                     print(1:50)
[09:33:04.958]                     str(1:50)
[09:33:04.958]                     cat(letters, sep = "-")
[09:33:04.958]                     cat(1:6, collapse = "\n")
[09:33:04.958]                     write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:04.958]                     42L
[09:33:04.958]                   }
[09:33:04.958]                 }, immediateCondition = function(cond) {
[09:33:04.958]                   sendCondition <- ...future.makeSendCondition()
[09:33:04.958]                   sendCondition(cond)
[09:33:04.958]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.958]                   {
[09:33:04.958]                     inherits <- base::inherits
[09:33:04.958]                     invokeRestart <- base::invokeRestart
[09:33:04.958]                     is.null <- base::is.null
[09:33:04.958]                     muffled <- FALSE
[09:33:04.958]                     if (inherits(cond, "message")) {
[09:33:04.958]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:04.958]                       if (muffled) 
[09:33:04.958]                         invokeRestart("muffleMessage")
[09:33:04.958]                     }
[09:33:04.958]                     else if (inherits(cond, "warning")) {
[09:33:04.958]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:04.958]                       if (muffled) 
[09:33:04.958]                         invokeRestart("muffleWarning")
[09:33:04.958]                     }
[09:33:04.958]                     else if (inherits(cond, "condition")) {
[09:33:04.958]                       if (!is.null(pattern)) {
[09:33:04.958]                         computeRestarts <- base::computeRestarts
[09:33:04.958]                         grepl <- base::grepl
[09:33:04.958]                         restarts <- computeRestarts(cond)
[09:33:04.958]                         for (restart in restarts) {
[09:33:04.958]                           name <- restart$name
[09:33:04.958]                           if (is.null(name)) 
[09:33:04.958]                             next
[09:33:04.958]                           if (!grepl(pattern, name)) 
[09:33:04.958]                             next
[09:33:04.958]                           invokeRestart(restart)
[09:33:04.958]                           muffled <- TRUE
[09:33:04.958]                           break
[09:33:04.958]                         }
[09:33:04.958]                       }
[09:33:04.958]                     }
[09:33:04.958]                     invisible(muffled)
[09:33:04.958]                   }
[09:33:04.958]                   muffleCondition(cond)
[09:33:04.958]                 })
[09:33:04.958]             }))
[09:33:04.958]             future::FutureResult(value = ...future.value$value, 
[09:33:04.958]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.958]                   ...future.rng), globalenv = if (FALSE) 
[09:33:04.958]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:04.958]                     ...future.globalenv.names))
[09:33:04.958]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:04.958]         }, condition = base::local({
[09:33:04.958]             c <- base::c
[09:33:04.958]             inherits <- base::inherits
[09:33:04.958]             invokeRestart <- base::invokeRestart
[09:33:04.958]             length <- base::length
[09:33:04.958]             list <- base::list
[09:33:04.958]             seq.int <- base::seq.int
[09:33:04.958]             signalCondition <- base::signalCondition
[09:33:04.958]             sys.calls <- base::sys.calls
[09:33:04.958]             `[[` <- base::`[[`
[09:33:04.958]             `+` <- base::`+`
[09:33:04.958]             `<<-` <- base::`<<-`
[09:33:04.958]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:04.958]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:04.958]                   3L)]
[09:33:04.958]             }
[09:33:04.958]             function(cond) {
[09:33:04.958]                 is_error <- inherits(cond, "error")
[09:33:04.958]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:04.958]                   NULL)
[09:33:04.958]                 if (is_error) {
[09:33:04.958]                   sessionInformation <- function() {
[09:33:04.958]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:04.958]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:04.958]                       search = base::search(), system = base::Sys.info())
[09:33:04.958]                   }
[09:33:04.958]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.958]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:04.958]                     cond$call), session = sessionInformation(), 
[09:33:04.958]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:04.958]                   signalCondition(cond)
[09:33:04.958]                 }
[09:33:04.958]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:04.958]                 "immediateCondition"))) {
[09:33:04.958]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:04.958]                   ...future.conditions[[length(...future.conditions) + 
[09:33:04.958]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:04.958]                   if (TRUE && !signal) {
[09:33:04.958]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.958]                     {
[09:33:04.958]                       inherits <- base::inherits
[09:33:04.958]                       invokeRestart <- base::invokeRestart
[09:33:04.958]                       is.null <- base::is.null
[09:33:04.958]                       muffled <- FALSE
[09:33:04.958]                       if (inherits(cond, "message")) {
[09:33:04.958]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.958]                         if (muffled) 
[09:33:04.958]                           invokeRestart("muffleMessage")
[09:33:04.958]                       }
[09:33:04.958]                       else if (inherits(cond, "warning")) {
[09:33:04.958]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.958]                         if (muffled) 
[09:33:04.958]                           invokeRestart("muffleWarning")
[09:33:04.958]                       }
[09:33:04.958]                       else if (inherits(cond, "condition")) {
[09:33:04.958]                         if (!is.null(pattern)) {
[09:33:04.958]                           computeRestarts <- base::computeRestarts
[09:33:04.958]                           grepl <- base::grepl
[09:33:04.958]                           restarts <- computeRestarts(cond)
[09:33:04.958]                           for (restart in restarts) {
[09:33:04.958]                             name <- restart$name
[09:33:04.958]                             if (is.null(name)) 
[09:33:04.958]                               next
[09:33:04.958]                             if (!grepl(pattern, name)) 
[09:33:04.958]                               next
[09:33:04.958]                             invokeRestart(restart)
[09:33:04.958]                             muffled <- TRUE
[09:33:04.958]                             break
[09:33:04.958]                           }
[09:33:04.958]                         }
[09:33:04.958]                       }
[09:33:04.958]                       invisible(muffled)
[09:33:04.958]                     }
[09:33:04.958]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.958]                   }
[09:33:04.958]                 }
[09:33:04.958]                 else {
[09:33:04.958]                   if (TRUE) {
[09:33:04.958]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:04.958]                     {
[09:33:04.958]                       inherits <- base::inherits
[09:33:04.958]                       invokeRestart <- base::invokeRestart
[09:33:04.958]                       is.null <- base::is.null
[09:33:04.958]                       muffled <- FALSE
[09:33:04.958]                       if (inherits(cond, "message")) {
[09:33:04.958]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:04.958]                         if (muffled) 
[09:33:04.958]                           invokeRestart("muffleMessage")
[09:33:04.958]                       }
[09:33:04.958]                       else if (inherits(cond, "warning")) {
[09:33:04.958]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:04.958]                         if (muffled) 
[09:33:04.958]                           invokeRestart("muffleWarning")
[09:33:04.958]                       }
[09:33:04.958]                       else if (inherits(cond, "condition")) {
[09:33:04.958]                         if (!is.null(pattern)) {
[09:33:04.958]                           computeRestarts <- base::computeRestarts
[09:33:04.958]                           grepl <- base::grepl
[09:33:04.958]                           restarts <- computeRestarts(cond)
[09:33:04.958]                           for (restart in restarts) {
[09:33:04.958]                             name <- restart$name
[09:33:04.958]                             if (is.null(name)) 
[09:33:04.958]                               next
[09:33:04.958]                             if (!grepl(pattern, name)) 
[09:33:04.958]                               next
[09:33:04.958]                             invokeRestart(restart)
[09:33:04.958]                             muffled <- TRUE
[09:33:04.958]                             break
[09:33:04.958]                           }
[09:33:04.958]                         }
[09:33:04.958]                       }
[09:33:04.958]                       invisible(muffled)
[09:33:04.958]                     }
[09:33:04.958]                     muffleCondition(cond, pattern = "^muffle")
[09:33:04.958]                   }
[09:33:04.958]                 }
[09:33:04.958]             }
[09:33:04.958]         }))
[09:33:04.958]     }, error = function(ex) {
[09:33:04.958]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:04.958]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:04.958]                 ...future.rng), started = ...future.startTime, 
[09:33:04.958]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:04.958]             version = "1.8"), class = "FutureResult")
[09:33:04.958]     }, finally = {
[09:33:04.958]         if (!identical(...future.workdir, getwd())) 
[09:33:04.958]             setwd(...future.workdir)
[09:33:04.958]         {
[09:33:04.958]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:04.958]                 ...future.oldOptions$nwarnings <- NULL
[09:33:04.958]             }
[09:33:04.958]             base::options(...future.oldOptions)
[09:33:04.958]             if (.Platform$OS.type == "windows") {
[09:33:04.958]                 old_names <- names(...future.oldEnvVars)
[09:33:04.958]                 envs <- base::Sys.getenv()
[09:33:04.958]                 names <- names(envs)
[09:33:04.958]                 common <- intersect(names, old_names)
[09:33:04.958]                 added <- setdiff(names, old_names)
[09:33:04.958]                 removed <- setdiff(old_names, names)
[09:33:04.958]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:04.958]                   envs[common]]
[09:33:04.958]                 NAMES <- toupper(changed)
[09:33:04.958]                 args <- list()
[09:33:04.958]                 for (kk in seq_along(NAMES)) {
[09:33:04.958]                   name <- changed[[kk]]
[09:33:04.958]                   NAME <- NAMES[[kk]]
[09:33:04.958]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.958]                     next
[09:33:04.958]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.958]                 }
[09:33:04.958]                 NAMES <- toupper(added)
[09:33:04.958]                 for (kk in seq_along(NAMES)) {
[09:33:04.958]                   name <- added[[kk]]
[09:33:04.958]                   NAME <- NAMES[[kk]]
[09:33:04.958]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.958]                     next
[09:33:04.958]                   args[[name]] <- ""
[09:33:04.958]                 }
[09:33:04.958]                 NAMES <- toupper(removed)
[09:33:04.958]                 for (kk in seq_along(NAMES)) {
[09:33:04.958]                   name <- removed[[kk]]
[09:33:04.958]                   NAME <- NAMES[[kk]]
[09:33:04.958]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:04.958]                     next
[09:33:04.958]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:04.958]                 }
[09:33:04.958]                 if (length(args) > 0) 
[09:33:04.958]                   base::do.call(base::Sys.setenv, args = args)
[09:33:04.958]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:04.958]             }
[09:33:04.958]             else {
[09:33:04.958]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:04.958]             }
[09:33:04.958]             {
[09:33:04.958]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:04.958]                   0L) {
[09:33:04.958]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:04.958]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:04.958]                   base::options(opts)
[09:33:04.958]                 }
[09:33:04.958]                 {
[09:33:04.958]                   {
[09:33:04.958]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:04.958]                     NULL
[09:33:04.958]                   }
[09:33:04.958]                   options(future.plan = NULL)
[09:33:04.958]                   if (is.na(NA_character_)) 
[09:33:04.958]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:04.958]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:04.958]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:04.958]                     .init = FALSE)
[09:33:04.958]                 }
[09:33:04.958]             }
[09:33:04.958]         }
[09:33:04.958]     })
[09:33:04.958]     if (TRUE) {
[09:33:04.958]         base::sink(type = "output", split = FALSE)
[09:33:04.958]         if (TRUE) {
[09:33:04.958]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:04.958]         }
[09:33:04.958]         else {
[09:33:04.958]             ...future.result["stdout"] <- base::list(NULL)
[09:33:04.958]         }
[09:33:04.958]         base::close(...future.stdout)
[09:33:04.958]         ...future.stdout <- NULL
[09:33:04.958]     }
[09:33:04.958]     ...future.result$conditions <- ...future.conditions
[09:33:04.958]     ...future.result$finished <- base::Sys.time()
[09:33:04.958]     ...future.result
[09:33:04.958] }
[09:33:04.961] MultisessionFuture started
[09:33:04.962] - Launch lazy future ... done
[09:33:04.962] run() for ‘MultisessionFuture’ ... done
[09:33:04.962] result() for ClusterFuture ...
[09:33:04.962] receiveMessageFromWorker() for ClusterFuture ...
[09:33:04.962] - Validating connection of MultisessionFuture
[09:33:04.970] - received message: FutureResult
[09:33:04.970] - Received FutureResult
[09:33:04.970] - Erased future from FutureRegistry
[09:33:04.970] result() for ClusterFuture ...
[09:33:04.970] - result already collected: FutureResult
[09:33:04.970] result() for ClusterFuture ... done
[09:33:04.971] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:04.971] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 09:33:04"
 $ finished    : POSIXct[1:1], format: "2024-12-19 09:33:04"
 $ session_uuid: chr "27110799-bfcd-a9e1-d348-f52d70de2812"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "8f1daa72e372"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "8f1daa72e372" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 50530
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 09:33:04"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[09:33:04.980] result() for ClusterFuture ...
[09:33:04.980] - result already collected: FutureResult
[09:33:04.980] result() for ClusterFuture ... done
[09:33:04.980] result() for ClusterFuture ...
[09:33:04.980] - result already collected: FutureResult
[09:33:04.981] result() for ClusterFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.007728577 secs (started 2024-12-19 09:33:04.96233)
version: 1.8
[09:33:04.981] getGlobalsAndPackages() ...
[09:33:04.981] Searching for globals...
[09:33:04.985] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:04.985] Searching for globals ... DONE
[09:33:04.985] Resolving globals: FALSE
[09:33:04.986] 
[09:33:04.986] - packages: [1] ‘utils’
[09:33:04.986] getGlobalsAndPackages() ... DONE
[09:33:04.986] run() for ‘Future’ ...
[09:33:04.987] - state: ‘created’
[09:33:04.987] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:33:05.001] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:05.001] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:33:05.001]   - Field: ‘node’
[09:33:05.001]   - Field: ‘label’
[09:33:05.001]   - Field: ‘local’
[09:33:05.001]   - Field: ‘owner’
[09:33:05.002]   - Field: ‘envir’
[09:33:05.002]   - Field: ‘workers’
[09:33:05.002]   - Field: ‘packages’
[09:33:05.002]   - Field: ‘gc’
[09:33:05.002]   - Field: ‘conditions’
[09:33:05.002]   - Field: ‘persistent’
[09:33:05.002]   - Field: ‘expr’
[09:33:05.002]   - Field: ‘uuid’
[09:33:05.002]   - Field: ‘seed’
[09:33:05.002]   - Field: ‘version’
[09:33:05.003]   - Field: ‘result’
[09:33:05.003]   - Field: ‘asynchronous’
[09:33:05.003]   - Field: ‘calls’
[09:33:05.003]   - Field: ‘globals’
[09:33:05.003]   - Field: ‘stdout’
[09:33:05.003]   - Field: ‘earlySignal’
[09:33:05.003]   - Field: ‘lazy’
[09:33:05.003]   - Field: ‘state’
[09:33:05.003] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:33:05.004] - Launch lazy future ...
[09:33:05.004] Packages needed by the future expression (n = 1): ‘utils’
[09:33:05.004] Packages needed by future strategies (n = 0): <none>
[09:33:05.005] {
[09:33:05.005]     {
[09:33:05.005]         {
[09:33:05.005]             ...future.startTime <- base::Sys.time()
[09:33:05.005]             {
[09:33:05.005]                 {
[09:33:05.005]                   {
[09:33:05.005]                     {
[09:33:05.005]                       {
[09:33:05.005]                         base::local({
[09:33:05.005]                           has_future <- base::requireNamespace("future", 
[09:33:05.005]                             quietly = TRUE)
[09:33:05.005]                           if (has_future) {
[09:33:05.005]                             ns <- base::getNamespace("future")
[09:33:05.005]                             version <- ns[[".package"]][["version"]]
[09:33:05.005]                             if (is.null(version)) 
[09:33:05.005]                               version <- utils::packageVersion("future")
[09:33:05.005]                           }
[09:33:05.005]                           else {
[09:33:05.005]                             version <- NULL
[09:33:05.005]                           }
[09:33:05.005]                           if (!has_future || version < "1.8.0") {
[09:33:05.005]                             info <- base::c(r_version = base::gsub("R version ", 
[09:33:05.005]                               "", base::R.version$version.string), 
[09:33:05.005]                               platform = base::sprintf("%s (%s-bit)", 
[09:33:05.005]                                 base::R.version$platform, 8 * 
[09:33:05.005]                                   base::.Machine$sizeof.pointer), 
[09:33:05.005]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:05.005]                                 "release", "version")], collapse = " "), 
[09:33:05.005]                               hostname = base::Sys.info()[["nodename"]])
[09:33:05.005]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:33:05.005]                               info)
[09:33:05.005]                             info <- base::paste(info, collapse = "; ")
[09:33:05.005]                             if (!has_future) {
[09:33:05.005]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:05.005]                                 info)
[09:33:05.005]                             }
[09:33:05.005]                             else {
[09:33:05.005]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:05.005]                                 info, version)
[09:33:05.005]                             }
[09:33:05.005]                             base::stop(msg)
[09:33:05.005]                           }
[09:33:05.005]                         })
[09:33:05.005]                       }
[09:33:05.005]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:05.005]                       base::options(mc.cores = 1L)
[09:33:05.005]                     }
[09:33:05.005]                     base::local({
[09:33:05.005]                       for (pkg in "utils") {
[09:33:05.005]                         base::loadNamespace(pkg)
[09:33:05.005]                         base::library(pkg, character.only = TRUE)
[09:33:05.005]                       }
[09:33:05.005]                     })
[09:33:05.005]                   }
[09:33:05.005]                   ...future.strategy.old <- future::plan("list")
[09:33:05.005]                   options(future.plan = NULL)
[09:33:05.005]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.005]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:05.005]                 }
[09:33:05.005]                 ...future.workdir <- getwd()
[09:33:05.005]             }
[09:33:05.005]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:05.005]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:05.005]         }
[09:33:05.005]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:05.005]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:05.005]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:05.005]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:05.005]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:05.005]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:05.005]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:05.005]             base::names(...future.oldOptions))
[09:33:05.005]     }
[09:33:05.005]     if (FALSE) {
[09:33:05.005]     }
[09:33:05.005]     else {
[09:33:05.005]         if (TRUE) {
[09:33:05.005]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:05.005]                 open = "w")
[09:33:05.005]         }
[09:33:05.005]         else {
[09:33:05.005]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:05.005]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:05.005]         }
[09:33:05.005]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:05.005]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:05.005]             base::sink(type = "output", split = FALSE)
[09:33:05.005]             base::close(...future.stdout)
[09:33:05.005]         }, add = TRUE)
[09:33:05.005]     }
[09:33:05.005]     ...future.frame <- base::sys.nframe()
[09:33:05.005]     ...future.conditions <- base::list()
[09:33:05.005]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:05.005]     if (FALSE) {
[09:33:05.005]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:05.005]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:05.005]     }
[09:33:05.005]     ...future.result <- base::tryCatch({
[09:33:05.005]         base::withCallingHandlers({
[09:33:05.005]             ...future.value <- base::withVisible(base::local({
[09:33:05.005]                 ...future.makeSendCondition <- base::local({
[09:33:05.005]                   sendCondition <- NULL
[09:33:05.005]                   function(frame = 1L) {
[09:33:05.005]                     if (is.function(sendCondition)) 
[09:33:05.005]                       return(sendCondition)
[09:33:05.005]                     ns <- getNamespace("parallel")
[09:33:05.005]                     if (exists("sendData", mode = "function", 
[09:33:05.005]                       envir = ns)) {
[09:33:05.005]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:05.005]                         envir = ns)
[09:33:05.005]                       envir <- sys.frame(frame)
[09:33:05.005]                       master <- NULL
[09:33:05.005]                       while (!identical(envir, .GlobalEnv) && 
[09:33:05.005]                         !identical(envir, emptyenv())) {
[09:33:05.005]                         if (exists("master", mode = "list", envir = envir, 
[09:33:05.005]                           inherits = FALSE)) {
[09:33:05.005]                           master <- get("master", mode = "list", 
[09:33:05.005]                             envir = envir, inherits = FALSE)
[09:33:05.005]                           if (inherits(master, c("SOCKnode", 
[09:33:05.005]                             "SOCK0node"))) {
[09:33:05.005]                             sendCondition <<- function(cond) {
[09:33:05.005]                               data <- list(type = "VALUE", value = cond, 
[09:33:05.005]                                 success = TRUE)
[09:33:05.005]                               parallel_sendData(master, data)
[09:33:05.005]                             }
[09:33:05.005]                             return(sendCondition)
[09:33:05.005]                           }
[09:33:05.005]                         }
[09:33:05.005]                         frame <- frame + 1L
[09:33:05.005]                         envir <- sys.frame(frame)
[09:33:05.005]                       }
[09:33:05.005]                     }
[09:33:05.005]                     sendCondition <<- function(cond) NULL
[09:33:05.005]                   }
[09:33:05.005]                 })
[09:33:05.005]                 withCallingHandlers({
[09:33:05.005]                   {
[09:33:05.005]                     print(1:50)
[09:33:05.005]                     str(1:50)
[09:33:05.005]                     cat(letters, sep = "-")
[09:33:05.005]                     cat(1:6, collapse = "\n")
[09:33:05.005]                     write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:05.005]                     42L
[09:33:05.005]                   }
[09:33:05.005]                 }, immediateCondition = function(cond) {
[09:33:05.005]                   sendCondition <- ...future.makeSendCondition()
[09:33:05.005]                   sendCondition(cond)
[09:33:05.005]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.005]                   {
[09:33:05.005]                     inherits <- base::inherits
[09:33:05.005]                     invokeRestart <- base::invokeRestart
[09:33:05.005]                     is.null <- base::is.null
[09:33:05.005]                     muffled <- FALSE
[09:33:05.005]                     if (inherits(cond, "message")) {
[09:33:05.005]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:05.005]                       if (muffled) 
[09:33:05.005]                         invokeRestart("muffleMessage")
[09:33:05.005]                     }
[09:33:05.005]                     else if (inherits(cond, "warning")) {
[09:33:05.005]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:05.005]                       if (muffled) 
[09:33:05.005]                         invokeRestart("muffleWarning")
[09:33:05.005]                     }
[09:33:05.005]                     else if (inherits(cond, "condition")) {
[09:33:05.005]                       if (!is.null(pattern)) {
[09:33:05.005]                         computeRestarts <- base::computeRestarts
[09:33:05.005]                         grepl <- base::grepl
[09:33:05.005]                         restarts <- computeRestarts(cond)
[09:33:05.005]                         for (restart in restarts) {
[09:33:05.005]                           name <- restart$name
[09:33:05.005]                           if (is.null(name)) 
[09:33:05.005]                             next
[09:33:05.005]                           if (!grepl(pattern, name)) 
[09:33:05.005]                             next
[09:33:05.005]                           invokeRestart(restart)
[09:33:05.005]                           muffled <- TRUE
[09:33:05.005]                           break
[09:33:05.005]                         }
[09:33:05.005]                       }
[09:33:05.005]                     }
[09:33:05.005]                     invisible(muffled)
[09:33:05.005]                   }
[09:33:05.005]                   muffleCondition(cond)
[09:33:05.005]                 })
[09:33:05.005]             }))
[09:33:05.005]             future::FutureResult(value = ...future.value$value, 
[09:33:05.005]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.005]                   ...future.rng), globalenv = if (FALSE) 
[09:33:05.005]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:05.005]                     ...future.globalenv.names))
[09:33:05.005]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:05.005]         }, condition = base::local({
[09:33:05.005]             c <- base::c
[09:33:05.005]             inherits <- base::inherits
[09:33:05.005]             invokeRestart <- base::invokeRestart
[09:33:05.005]             length <- base::length
[09:33:05.005]             list <- base::list
[09:33:05.005]             seq.int <- base::seq.int
[09:33:05.005]             signalCondition <- base::signalCondition
[09:33:05.005]             sys.calls <- base::sys.calls
[09:33:05.005]             `[[` <- base::`[[`
[09:33:05.005]             `+` <- base::`+`
[09:33:05.005]             `<<-` <- base::`<<-`
[09:33:05.005]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:05.005]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:05.005]                   3L)]
[09:33:05.005]             }
[09:33:05.005]             function(cond) {
[09:33:05.005]                 is_error <- inherits(cond, "error")
[09:33:05.005]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:05.005]                   NULL)
[09:33:05.005]                 if (is_error) {
[09:33:05.005]                   sessionInformation <- function() {
[09:33:05.005]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:05.005]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:05.005]                       search = base::search(), system = base::Sys.info())
[09:33:05.005]                   }
[09:33:05.005]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.005]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:05.005]                     cond$call), session = sessionInformation(), 
[09:33:05.005]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:05.005]                   signalCondition(cond)
[09:33:05.005]                 }
[09:33:05.005]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:05.005]                 "immediateCondition"))) {
[09:33:05.005]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:05.005]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.005]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:05.005]                   if (TRUE && !signal) {
[09:33:05.005]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.005]                     {
[09:33:05.005]                       inherits <- base::inherits
[09:33:05.005]                       invokeRestart <- base::invokeRestart
[09:33:05.005]                       is.null <- base::is.null
[09:33:05.005]                       muffled <- FALSE
[09:33:05.005]                       if (inherits(cond, "message")) {
[09:33:05.005]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.005]                         if (muffled) 
[09:33:05.005]                           invokeRestart("muffleMessage")
[09:33:05.005]                       }
[09:33:05.005]                       else if (inherits(cond, "warning")) {
[09:33:05.005]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.005]                         if (muffled) 
[09:33:05.005]                           invokeRestart("muffleWarning")
[09:33:05.005]                       }
[09:33:05.005]                       else if (inherits(cond, "condition")) {
[09:33:05.005]                         if (!is.null(pattern)) {
[09:33:05.005]                           computeRestarts <- base::computeRestarts
[09:33:05.005]                           grepl <- base::grepl
[09:33:05.005]                           restarts <- computeRestarts(cond)
[09:33:05.005]                           for (restart in restarts) {
[09:33:05.005]                             name <- restart$name
[09:33:05.005]                             if (is.null(name)) 
[09:33:05.005]                               next
[09:33:05.005]                             if (!grepl(pattern, name)) 
[09:33:05.005]                               next
[09:33:05.005]                             invokeRestart(restart)
[09:33:05.005]                             muffled <- TRUE
[09:33:05.005]                             break
[09:33:05.005]                           }
[09:33:05.005]                         }
[09:33:05.005]                       }
[09:33:05.005]                       invisible(muffled)
[09:33:05.005]                     }
[09:33:05.005]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.005]                   }
[09:33:05.005]                 }
[09:33:05.005]                 else {
[09:33:05.005]                   if (TRUE) {
[09:33:05.005]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.005]                     {
[09:33:05.005]                       inherits <- base::inherits
[09:33:05.005]                       invokeRestart <- base::invokeRestart
[09:33:05.005]                       is.null <- base::is.null
[09:33:05.005]                       muffled <- FALSE
[09:33:05.005]                       if (inherits(cond, "message")) {
[09:33:05.005]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.005]                         if (muffled) 
[09:33:05.005]                           invokeRestart("muffleMessage")
[09:33:05.005]                       }
[09:33:05.005]                       else if (inherits(cond, "warning")) {
[09:33:05.005]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.005]                         if (muffled) 
[09:33:05.005]                           invokeRestart("muffleWarning")
[09:33:05.005]                       }
[09:33:05.005]                       else if (inherits(cond, "condition")) {
[09:33:05.005]                         if (!is.null(pattern)) {
[09:33:05.005]                           computeRestarts <- base::computeRestarts
[09:33:05.005]                           grepl <- base::grepl
[09:33:05.005]                           restarts <- computeRestarts(cond)
[09:33:05.005]                           for (restart in restarts) {
[09:33:05.005]                             name <- restart$name
[09:33:05.005]                             if (is.null(name)) 
[09:33:05.005]                               next
[09:33:05.005]                             if (!grepl(pattern, name)) 
[09:33:05.005]                               next
[09:33:05.005]                             invokeRestart(restart)
[09:33:05.005]                             muffled <- TRUE
[09:33:05.005]                             break
[09:33:05.005]                           }
[09:33:05.005]                         }
[09:33:05.005]                       }
[09:33:05.005]                       invisible(muffled)
[09:33:05.005]                     }
[09:33:05.005]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.005]                   }
[09:33:05.005]                 }
[09:33:05.005]             }
[09:33:05.005]         }))
[09:33:05.005]     }, error = function(ex) {
[09:33:05.005]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:05.005]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.005]                 ...future.rng), started = ...future.startTime, 
[09:33:05.005]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:05.005]             version = "1.8"), class = "FutureResult")
[09:33:05.005]     }, finally = {
[09:33:05.005]         if (!identical(...future.workdir, getwd())) 
[09:33:05.005]             setwd(...future.workdir)
[09:33:05.005]         {
[09:33:05.005]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:05.005]                 ...future.oldOptions$nwarnings <- NULL
[09:33:05.005]             }
[09:33:05.005]             base::options(...future.oldOptions)
[09:33:05.005]             if (.Platform$OS.type == "windows") {
[09:33:05.005]                 old_names <- names(...future.oldEnvVars)
[09:33:05.005]                 envs <- base::Sys.getenv()
[09:33:05.005]                 names <- names(envs)
[09:33:05.005]                 common <- intersect(names, old_names)
[09:33:05.005]                 added <- setdiff(names, old_names)
[09:33:05.005]                 removed <- setdiff(old_names, names)
[09:33:05.005]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:05.005]                   envs[common]]
[09:33:05.005]                 NAMES <- toupper(changed)
[09:33:05.005]                 args <- list()
[09:33:05.005]                 for (kk in seq_along(NAMES)) {
[09:33:05.005]                   name <- changed[[kk]]
[09:33:05.005]                   NAME <- NAMES[[kk]]
[09:33:05.005]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.005]                     next
[09:33:05.005]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.005]                 }
[09:33:05.005]                 NAMES <- toupper(added)
[09:33:05.005]                 for (kk in seq_along(NAMES)) {
[09:33:05.005]                   name <- added[[kk]]
[09:33:05.005]                   NAME <- NAMES[[kk]]
[09:33:05.005]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.005]                     next
[09:33:05.005]                   args[[name]] <- ""
[09:33:05.005]                 }
[09:33:05.005]                 NAMES <- toupper(removed)
[09:33:05.005]                 for (kk in seq_along(NAMES)) {
[09:33:05.005]                   name <- removed[[kk]]
[09:33:05.005]                   NAME <- NAMES[[kk]]
[09:33:05.005]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.005]                     next
[09:33:05.005]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.005]                 }
[09:33:05.005]                 if (length(args) > 0) 
[09:33:05.005]                   base::do.call(base::Sys.setenv, args = args)
[09:33:05.005]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:05.005]             }
[09:33:05.005]             else {
[09:33:05.005]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:05.005]             }
[09:33:05.005]             {
[09:33:05.005]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:05.005]                   0L) {
[09:33:05.005]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:05.005]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:05.005]                   base::options(opts)
[09:33:05.005]                 }
[09:33:05.005]                 {
[09:33:05.005]                   {
[09:33:05.005]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:05.005]                     NULL
[09:33:05.005]                   }
[09:33:05.005]                   options(future.plan = NULL)
[09:33:05.005]                   if (is.na(NA_character_)) 
[09:33:05.005]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.005]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:05.005]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:05.005]                     .init = FALSE)
[09:33:05.005]                 }
[09:33:05.005]             }
[09:33:05.005]         }
[09:33:05.005]     })
[09:33:05.005]     if (TRUE) {
[09:33:05.005]         base::sink(type = "output", split = FALSE)
[09:33:05.005]         if (TRUE) {
[09:33:05.005]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:05.005]         }
[09:33:05.005]         else {
[09:33:05.005]             ...future.result["stdout"] <- base::list(NULL)
[09:33:05.005]         }
[09:33:05.005]         base::close(...future.stdout)
[09:33:05.005]         ...future.stdout <- NULL
[09:33:05.005]     }
[09:33:05.005]     ...future.result$conditions <- ...future.conditions
[09:33:05.005]     ...future.result$finished <- base::Sys.time()
[09:33:05.005]     ...future.result
[09:33:05.005] }
[09:33:05.008] MultisessionFuture started
[09:33:05.008] - Launch lazy future ... done
[09:33:05.008] run() for ‘MultisessionFuture’ ... done
[09:33:05.009] result() for ClusterFuture ...
[09:33:05.009] receiveMessageFromWorker() for ClusterFuture ...
[09:33:05.009] - Validating connection of MultisessionFuture
[09:33:05.054] - received message: FutureResult
[09:33:05.054] - Received FutureResult
[09:33:05.054] - Erased future from FutureRegistry
[09:33:05.054] result() for ClusterFuture ...
[09:33:05.054] - result already collected: FutureResult
[09:33:05.054] result() for ClusterFuture ... done
[09:33:05.055] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:05.055] result() for ClusterFuture ... done
[09:33:05.055] result() for ClusterFuture ...
[09:33:05.055] - result already collected: FutureResult
[09:33:05.055] result() for ClusterFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[09:33:05.057] getGlobalsAndPackages() ...
[09:33:05.057] Searching for globals...
[09:33:05.058] - globals found: [1] ‘print’
[09:33:05.058] Searching for globals ... DONE
[09:33:05.058] Resolving globals: FALSE
[09:33:05.058] 
[09:33:05.059] 
[09:33:05.059] getGlobalsAndPackages() ... DONE
[09:33:05.059] run() for ‘Future’ ...
[09:33:05.059] - state: ‘created’
[09:33:05.059] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:33:05.072] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:05.072] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:33:05.073]   - Field: ‘node’
[09:33:05.073]   - Field: ‘label’
[09:33:05.073]   - Field: ‘local’
[09:33:05.073]   - Field: ‘owner’
[09:33:05.073]   - Field: ‘envir’
[09:33:05.073]   - Field: ‘workers’
[09:33:05.073]   - Field: ‘packages’
[09:33:05.073]   - Field: ‘gc’
[09:33:05.073]   - Field: ‘conditions’
[09:33:05.073]   - Field: ‘persistent’
[09:33:05.074]   - Field: ‘expr’
[09:33:05.074]   - Field: ‘uuid’
[09:33:05.074]   - Field: ‘seed’
[09:33:05.074]   - Field: ‘version’
[09:33:05.074]   - Field: ‘result’
[09:33:05.074]   - Field: ‘asynchronous’
[09:33:05.074]   - Field: ‘calls’
[09:33:05.074]   - Field: ‘globals’
[09:33:05.074]   - Field: ‘stdout’
[09:33:05.074]   - Field: ‘earlySignal’
[09:33:05.074]   - Field: ‘lazy’
[09:33:05.074]   - Field: ‘state’
[09:33:05.075] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:33:05.075] - Launch lazy future ...
[09:33:05.075] Packages needed by the future expression (n = 0): <none>
[09:33:05.075] Packages needed by future strategies (n = 0): <none>
[09:33:05.075] {
[09:33:05.075]     {
[09:33:05.075]         {
[09:33:05.075]             ...future.startTime <- base::Sys.time()
[09:33:05.075]             {
[09:33:05.075]                 {
[09:33:05.075]                   {
[09:33:05.075]                     {
[09:33:05.075]                       base::local({
[09:33:05.075]                         has_future <- base::requireNamespace("future", 
[09:33:05.075]                           quietly = TRUE)
[09:33:05.075]                         if (has_future) {
[09:33:05.075]                           ns <- base::getNamespace("future")
[09:33:05.075]                           version <- ns[[".package"]][["version"]]
[09:33:05.075]                           if (is.null(version)) 
[09:33:05.075]                             version <- utils::packageVersion("future")
[09:33:05.075]                         }
[09:33:05.075]                         else {
[09:33:05.075]                           version <- NULL
[09:33:05.075]                         }
[09:33:05.075]                         if (!has_future || version < "1.8.0") {
[09:33:05.075]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:05.075]                             "", base::R.version$version.string), 
[09:33:05.075]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:05.075]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:05.075]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:05.075]                               "release", "version")], collapse = " "), 
[09:33:05.075]                             hostname = base::Sys.info()[["nodename"]])
[09:33:05.075]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:05.075]                             info)
[09:33:05.075]                           info <- base::paste(info, collapse = "; ")
[09:33:05.075]                           if (!has_future) {
[09:33:05.075]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:05.075]                               info)
[09:33:05.075]                           }
[09:33:05.075]                           else {
[09:33:05.075]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:05.075]                               info, version)
[09:33:05.075]                           }
[09:33:05.075]                           base::stop(msg)
[09:33:05.075]                         }
[09:33:05.075]                       })
[09:33:05.075]                     }
[09:33:05.075]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:05.075]                     base::options(mc.cores = 1L)
[09:33:05.075]                   }
[09:33:05.075]                   ...future.strategy.old <- future::plan("list")
[09:33:05.075]                   options(future.plan = NULL)
[09:33:05.075]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.075]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:05.075]                 }
[09:33:05.075]                 ...future.workdir <- getwd()
[09:33:05.075]             }
[09:33:05.075]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:05.075]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:05.075]         }
[09:33:05.075]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:05.075]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:05.075]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:05.075]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:05.075]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:05.075]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:05.075]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:05.075]             base::names(...future.oldOptions))
[09:33:05.075]     }
[09:33:05.075]     if (FALSE) {
[09:33:05.075]     }
[09:33:05.075]     else {
[09:33:05.075]         if (TRUE) {
[09:33:05.075]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:05.075]                 open = "w")
[09:33:05.075]         }
[09:33:05.075]         else {
[09:33:05.075]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:05.075]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:05.075]         }
[09:33:05.075]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:05.075]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:05.075]             base::sink(type = "output", split = FALSE)
[09:33:05.075]             base::close(...future.stdout)
[09:33:05.075]         }, add = TRUE)
[09:33:05.075]     }
[09:33:05.075]     ...future.frame <- base::sys.nframe()
[09:33:05.075]     ...future.conditions <- base::list()
[09:33:05.075]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:05.075]     if (FALSE) {
[09:33:05.075]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:05.075]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:05.075]     }
[09:33:05.075]     ...future.result <- base::tryCatch({
[09:33:05.075]         base::withCallingHandlers({
[09:33:05.075]             ...future.value <- base::withVisible(base::local({
[09:33:05.075]                 ...future.makeSendCondition <- base::local({
[09:33:05.075]                   sendCondition <- NULL
[09:33:05.075]                   function(frame = 1L) {
[09:33:05.075]                     if (is.function(sendCondition)) 
[09:33:05.075]                       return(sendCondition)
[09:33:05.075]                     ns <- getNamespace("parallel")
[09:33:05.075]                     if (exists("sendData", mode = "function", 
[09:33:05.075]                       envir = ns)) {
[09:33:05.075]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:05.075]                         envir = ns)
[09:33:05.075]                       envir <- sys.frame(frame)
[09:33:05.075]                       master <- NULL
[09:33:05.075]                       while (!identical(envir, .GlobalEnv) && 
[09:33:05.075]                         !identical(envir, emptyenv())) {
[09:33:05.075]                         if (exists("master", mode = "list", envir = envir, 
[09:33:05.075]                           inherits = FALSE)) {
[09:33:05.075]                           master <- get("master", mode = "list", 
[09:33:05.075]                             envir = envir, inherits = FALSE)
[09:33:05.075]                           if (inherits(master, c("SOCKnode", 
[09:33:05.075]                             "SOCK0node"))) {
[09:33:05.075]                             sendCondition <<- function(cond) {
[09:33:05.075]                               data <- list(type = "VALUE", value = cond, 
[09:33:05.075]                                 success = TRUE)
[09:33:05.075]                               parallel_sendData(master, data)
[09:33:05.075]                             }
[09:33:05.075]                             return(sendCondition)
[09:33:05.075]                           }
[09:33:05.075]                         }
[09:33:05.075]                         frame <- frame + 1L
[09:33:05.075]                         envir <- sys.frame(frame)
[09:33:05.075]                       }
[09:33:05.075]                     }
[09:33:05.075]                     sendCondition <<- function(cond) NULL
[09:33:05.075]                   }
[09:33:05.075]                 })
[09:33:05.075]                 withCallingHandlers({
[09:33:05.075]                   print(42)
[09:33:05.075]                 }, immediateCondition = function(cond) {
[09:33:05.075]                   sendCondition <- ...future.makeSendCondition()
[09:33:05.075]                   sendCondition(cond)
[09:33:05.075]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.075]                   {
[09:33:05.075]                     inherits <- base::inherits
[09:33:05.075]                     invokeRestart <- base::invokeRestart
[09:33:05.075]                     is.null <- base::is.null
[09:33:05.075]                     muffled <- FALSE
[09:33:05.075]                     if (inherits(cond, "message")) {
[09:33:05.075]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:05.075]                       if (muffled) 
[09:33:05.075]                         invokeRestart("muffleMessage")
[09:33:05.075]                     }
[09:33:05.075]                     else if (inherits(cond, "warning")) {
[09:33:05.075]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:05.075]                       if (muffled) 
[09:33:05.075]                         invokeRestart("muffleWarning")
[09:33:05.075]                     }
[09:33:05.075]                     else if (inherits(cond, "condition")) {
[09:33:05.075]                       if (!is.null(pattern)) {
[09:33:05.075]                         computeRestarts <- base::computeRestarts
[09:33:05.075]                         grepl <- base::grepl
[09:33:05.075]                         restarts <- computeRestarts(cond)
[09:33:05.075]                         for (restart in restarts) {
[09:33:05.075]                           name <- restart$name
[09:33:05.075]                           if (is.null(name)) 
[09:33:05.075]                             next
[09:33:05.075]                           if (!grepl(pattern, name)) 
[09:33:05.075]                             next
[09:33:05.075]                           invokeRestart(restart)
[09:33:05.075]                           muffled <- TRUE
[09:33:05.075]                           break
[09:33:05.075]                         }
[09:33:05.075]                       }
[09:33:05.075]                     }
[09:33:05.075]                     invisible(muffled)
[09:33:05.075]                   }
[09:33:05.075]                   muffleCondition(cond)
[09:33:05.075]                 })
[09:33:05.075]             }))
[09:33:05.075]             future::FutureResult(value = ...future.value$value, 
[09:33:05.075]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.075]                   ...future.rng), globalenv = if (FALSE) 
[09:33:05.075]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:05.075]                     ...future.globalenv.names))
[09:33:05.075]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:05.075]         }, condition = base::local({
[09:33:05.075]             c <- base::c
[09:33:05.075]             inherits <- base::inherits
[09:33:05.075]             invokeRestart <- base::invokeRestart
[09:33:05.075]             length <- base::length
[09:33:05.075]             list <- base::list
[09:33:05.075]             seq.int <- base::seq.int
[09:33:05.075]             signalCondition <- base::signalCondition
[09:33:05.075]             sys.calls <- base::sys.calls
[09:33:05.075]             `[[` <- base::`[[`
[09:33:05.075]             `+` <- base::`+`
[09:33:05.075]             `<<-` <- base::`<<-`
[09:33:05.075]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:05.075]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:05.075]                   3L)]
[09:33:05.075]             }
[09:33:05.075]             function(cond) {
[09:33:05.075]                 is_error <- inherits(cond, "error")
[09:33:05.075]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:05.075]                   NULL)
[09:33:05.075]                 if (is_error) {
[09:33:05.075]                   sessionInformation <- function() {
[09:33:05.075]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:05.075]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:05.075]                       search = base::search(), system = base::Sys.info())
[09:33:05.075]                   }
[09:33:05.075]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.075]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:05.075]                     cond$call), session = sessionInformation(), 
[09:33:05.075]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:05.075]                   signalCondition(cond)
[09:33:05.075]                 }
[09:33:05.075]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:05.075]                 "immediateCondition"))) {
[09:33:05.075]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:05.075]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.075]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:05.075]                   if (TRUE && !signal) {
[09:33:05.075]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.075]                     {
[09:33:05.075]                       inherits <- base::inherits
[09:33:05.075]                       invokeRestart <- base::invokeRestart
[09:33:05.075]                       is.null <- base::is.null
[09:33:05.075]                       muffled <- FALSE
[09:33:05.075]                       if (inherits(cond, "message")) {
[09:33:05.075]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.075]                         if (muffled) 
[09:33:05.075]                           invokeRestart("muffleMessage")
[09:33:05.075]                       }
[09:33:05.075]                       else if (inherits(cond, "warning")) {
[09:33:05.075]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.075]                         if (muffled) 
[09:33:05.075]                           invokeRestart("muffleWarning")
[09:33:05.075]                       }
[09:33:05.075]                       else if (inherits(cond, "condition")) {
[09:33:05.075]                         if (!is.null(pattern)) {
[09:33:05.075]                           computeRestarts <- base::computeRestarts
[09:33:05.075]                           grepl <- base::grepl
[09:33:05.075]                           restarts <- computeRestarts(cond)
[09:33:05.075]                           for (restart in restarts) {
[09:33:05.075]                             name <- restart$name
[09:33:05.075]                             if (is.null(name)) 
[09:33:05.075]                               next
[09:33:05.075]                             if (!grepl(pattern, name)) 
[09:33:05.075]                               next
[09:33:05.075]                             invokeRestart(restart)
[09:33:05.075]                             muffled <- TRUE
[09:33:05.075]                             break
[09:33:05.075]                           }
[09:33:05.075]                         }
[09:33:05.075]                       }
[09:33:05.075]                       invisible(muffled)
[09:33:05.075]                     }
[09:33:05.075]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.075]                   }
[09:33:05.075]                 }
[09:33:05.075]                 else {
[09:33:05.075]                   if (TRUE) {
[09:33:05.075]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.075]                     {
[09:33:05.075]                       inherits <- base::inherits
[09:33:05.075]                       invokeRestart <- base::invokeRestart
[09:33:05.075]                       is.null <- base::is.null
[09:33:05.075]                       muffled <- FALSE
[09:33:05.075]                       if (inherits(cond, "message")) {
[09:33:05.075]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.075]                         if (muffled) 
[09:33:05.075]                           invokeRestart("muffleMessage")
[09:33:05.075]                       }
[09:33:05.075]                       else if (inherits(cond, "warning")) {
[09:33:05.075]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.075]                         if (muffled) 
[09:33:05.075]                           invokeRestart("muffleWarning")
[09:33:05.075]                       }
[09:33:05.075]                       else if (inherits(cond, "condition")) {
[09:33:05.075]                         if (!is.null(pattern)) {
[09:33:05.075]                           computeRestarts <- base::computeRestarts
[09:33:05.075]                           grepl <- base::grepl
[09:33:05.075]                           restarts <- computeRestarts(cond)
[09:33:05.075]                           for (restart in restarts) {
[09:33:05.075]                             name <- restart$name
[09:33:05.075]                             if (is.null(name)) 
[09:33:05.075]                               next
[09:33:05.075]                             if (!grepl(pattern, name)) 
[09:33:05.075]                               next
[09:33:05.075]                             invokeRestart(restart)
[09:33:05.075]                             muffled <- TRUE
[09:33:05.075]                             break
[09:33:05.075]                           }
[09:33:05.075]                         }
[09:33:05.075]                       }
[09:33:05.075]                       invisible(muffled)
[09:33:05.075]                     }
[09:33:05.075]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.075]                   }
[09:33:05.075]                 }
[09:33:05.075]             }
[09:33:05.075]         }))
[09:33:05.075]     }, error = function(ex) {
[09:33:05.075]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:05.075]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.075]                 ...future.rng), started = ...future.startTime, 
[09:33:05.075]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:05.075]             version = "1.8"), class = "FutureResult")
[09:33:05.075]     }, finally = {
[09:33:05.075]         if (!identical(...future.workdir, getwd())) 
[09:33:05.075]             setwd(...future.workdir)
[09:33:05.075]         {
[09:33:05.075]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:05.075]                 ...future.oldOptions$nwarnings <- NULL
[09:33:05.075]             }
[09:33:05.075]             base::options(...future.oldOptions)
[09:33:05.075]             if (.Platform$OS.type == "windows") {
[09:33:05.075]                 old_names <- names(...future.oldEnvVars)
[09:33:05.075]                 envs <- base::Sys.getenv()
[09:33:05.075]                 names <- names(envs)
[09:33:05.075]                 common <- intersect(names, old_names)
[09:33:05.075]                 added <- setdiff(names, old_names)
[09:33:05.075]                 removed <- setdiff(old_names, names)
[09:33:05.075]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:05.075]                   envs[common]]
[09:33:05.075]                 NAMES <- toupper(changed)
[09:33:05.075]                 args <- list()
[09:33:05.075]                 for (kk in seq_along(NAMES)) {
[09:33:05.075]                   name <- changed[[kk]]
[09:33:05.075]                   NAME <- NAMES[[kk]]
[09:33:05.075]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.075]                     next
[09:33:05.075]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.075]                 }
[09:33:05.075]                 NAMES <- toupper(added)
[09:33:05.075]                 for (kk in seq_along(NAMES)) {
[09:33:05.075]                   name <- added[[kk]]
[09:33:05.075]                   NAME <- NAMES[[kk]]
[09:33:05.075]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.075]                     next
[09:33:05.075]                   args[[name]] <- ""
[09:33:05.075]                 }
[09:33:05.075]                 NAMES <- toupper(removed)
[09:33:05.075]                 for (kk in seq_along(NAMES)) {
[09:33:05.075]                   name <- removed[[kk]]
[09:33:05.075]                   NAME <- NAMES[[kk]]
[09:33:05.075]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.075]                     next
[09:33:05.075]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.075]                 }
[09:33:05.075]                 if (length(args) > 0) 
[09:33:05.075]                   base::do.call(base::Sys.setenv, args = args)
[09:33:05.075]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:05.075]             }
[09:33:05.075]             else {
[09:33:05.075]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:05.075]             }
[09:33:05.075]             {
[09:33:05.075]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:05.075]                   0L) {
[09:33:05.075]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:05.075]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:05.075]                   base::options(opts)
[09:33:05.075]                 }
[09:33:05.075]                 {
[09:33:05.075]                   {
[09:33:05.075]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:05.075]                     NULL
[09:33:05.075]                   }
[09:33:05.075]                   options(future.plan = NULL)
[09:33:05.075]                   if (is.na(NA_character_)) 
[09:33:05.075]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.075]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:05.075]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:05.075]                     .init = FALSE)
[09:33:05.075]                 }
[09:33:05.075]             }
[09:33:05.075]         }
[09:33:05.075]     })
[09:33:05.075]     if (TRUE) {
[09:33:05.075]         base::sink(type = "output", split = FALSE)
[09:33:05.075]         if (TRUE) {
[09:33:05.075]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:05.075]         }
[09:33:05.075]         else {
[09:33:05.075]             ...future.result["stdout"] <- base::list(NULL)
[09:33:05.075]         }
[09:33:05.075]         base::close(...future.stdout)
[09:33:05.075]         ...future.stdout <- NULL
[09:33:05.075]     }
[09:33:05.075]     ...future.result$conditions <- ...future.conditions
[09:33:05.075]     ...future.result$finished <- base::Sys.time()
[09:33:05.075]     ...future.result
[09:33:05.075] }
[09:33:05.078] MultisessionFuture started
[09:33:05.078] - Launch lazy future ... done
[09:33:05.078] run() for ‘MultisessionFuture’ ... done
[09:33:05.078] result() for ClusterFuture ...
[09:33:05.079] receiveMessageFromWorker() for ClusterFuture ...
[09:33:05.079] - Validating connection of MultisessionFuture
[09:33:05.079] - received message: FutureResult
[09:33:05.080] - Received FutureResult
[09:33:05.080] - Erased future from FutureRegistry
[09:33:05.080] result() for ClusterFuture ...
[09:33:05.080] - result already collected: FutureResult
[09:33:05.080] result() for ClusterFuture ... done
[09:33:05.080] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:05.080] result() for ClusterFuture ... done
[09:33:05.080] result() for ClusterFuture ...
[09:33:05.080] - result already collected: FutureResult
[09:33:05.080] result() for ClusterFuture ... done
[09:33:05.080] result() for ClusterFuture ...
[09:33:05.081] - result already collected: FutureResult
[09:33:05.081] result() for ClusterFuture ... done
[1] 42
[09:33:05.081] result() for ClusterFuture ...
[09:33:05.081] - result already collected: FutureResult
[09:33:05.081] result() for ClusterFuture ... done
- stdout = FALSE
[09:33:05.081] getGlobalsAndPackages() ...
[09:33:05.081] Searching for globals...
[09:33:05.084] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:05.084] Searching for globals ... DONE
[09:33:05.084] Resolving globals: FALSE
[09:33:05.084] 
[09:33:05.085] - packages: [1] ‘utils’
[09:33:05.085] getGlobalsAndPackages() ... DONE
[09:33:05.085] run() for ‘Future’ ...
[09:33:05.085] - state: ‘created’
[09:33:05.085] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:33:05.098] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:05.098] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:33:05.098]   - Field: ‘node’
[09:33:05.099]   - Field: ‘label’
[09:33:05.099]   - Field: ‘local’
[09:33:05.099]   - Field: ‘owner’
[09:33:05.099]   - Field: ‘envir’
[09:33:05.099]   - Field: ‘workers’
[09:33:05.099]   - Field: ‘packages’
[09:33:05.099]   - Field: ‘gc’
[09:33:05.099]   - Field: ‘conditions’
[09:33:05.099]   - Field: ‘persistent’
[09:33:05.099]   - Field: ‘expr’
[09:33:05.099]   - Field: ‘uuid’
[09:33:05.100]   - Field: ‘seed’
[09:33:05.100]   - Field: ‘version’
[09:33:05.100]   - Field: ‘result’
[09:33:05.100]   - Field: ‘asynchronous’
[09:33:05.100]   - Field: ‘calls’
[09:33:05.100]   - Field: ‘globals’
[09:33:05.100]   - Field: ‘stdout’
[09:33:05.100]   - Field: ‘earlySignal’
[09:33:05.100]   - Field: ‘lazy’
[09:33:05.100]   - Field: ‘state’
[09:33:05.101] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:33:05.101] - Launch lazy future ...
[09:33:05.101] Packages needed by the future expression (n = 1): ‘utils’
[09:33:05.101] Packages needed by future strategies (n = 0): <none>
[09:33:05.101] {
[09:33:05.101]     {
[09:33:05.101]         {
[09:33:05.101]             ...future.startTime <- base::Sys.time()
[09:33:05.101]             {
[09:33:05.101]                 {
[09:33:05.101]                   {
[09:33:05.101]                     {
[09:33:05.101]                       {
[09:33:05.101]                         base::local({
[09:33:05.101]                           has_future <- base::requireNamespace("future", 
[09:33:05.101]                             quietly = TRUE)
[09:33:05.101]                           if (has_future) {
[09:33:05.101]                             ns <- base::getNamespace("future")
[09:33:05.101]                             version <- ns[[".package"]][["version"]]
[09:33:05.101]                             if (is.null(version)) 
[09:33:05.101]                               version <- utils::packageVersion("future")
[09:33:05.101]                           }
[09:33:05.101]                           else {
[09:33:05.101]                             version <- NULL
[09:33:05.101]                           }
[09:33:05.101]                           if (!has_future || version < "1.8.0") {
[09:33:05.101]                             info <- base::c(r_version = base::gsub("R version ", 
[09:33:05.101]                               "", base::R.version$version.string), 
[09:33:05.101]                               platform = base::sprintf("%s (%s-bit)", 
[09:33:05.101]                                 base::R.version$platform, 8 * 
[09:33:05.101]                                   base::.Machine$sizeof.pointer), 
[09:33:05.101]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:05.101]                                 "release", "version")], collapse = " "), 
[09:33:05.101]                               hostname = base::Sys.info()[["nodename"]])
[09:33:05.101]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:33:05.101]                               info)
[09:33:05.101]                             info <- base::paste(info, collapse = "; ")
[09:33:05.101]                             if (!has_future) {
[09:33:05.101]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:05.101]                                 info)
[09:33:05.101]                             }
[09:33:05.101]                             else {
[09:33:05.101]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:05.101]                                 info, version)
[09:33:05.101]                             }
[09:33:05.101]                             base::stop(msg)
[09:33:05.101]                           }
[09:33:05.101]                         })
[09:33:05.101]                       }
[09:33:05.101]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:05.101]                       base::options(mc.cores = 1L)
[09:33:05.101]                     }
[09:33:05.101]                     base::local({
[09:33:05.101]                       for (pkg in "utils") {
[09:33:05.101]                         base::loadNamespace(pkg)
[09:33:05.101]                         base::library(pkg, character.only = TRUE)
[09:33:05.101]                       }
[09:33:05.101]                     })
[09:33:05.101]                   }
[09:33:05.101]                   ...future.strategy.old <- future::plan("list")
[09:33:05.101]                   options(future.plan = NULL)
[09:33:05.101]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.101]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:05.101]                 }
[09:33:05.101]                 ...future.workdir <- getwd()
[09:33:05.101]             }
[09:33:05.101]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:05.101]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:05.101]         }
[09:33:05.101]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:05.101]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:05.101]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:05.101]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:05.101]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:05.101]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:05.101]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:05.101]             base::names(...future.oldOptions))
[09:33:05.101]     }
[09:33:05.101]     if (FALSE) {
[09:33:05.101]     }
[09:33:05.101]     else {
[09:33:05.101]         if (FALSE) {
[09:33:05.101]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:05.101]                 open = "w")
[09:33:05.101]         }
[09:33:05.101]         else {
[09:33:05.101]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:05.101]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:05.101]         }
[09:33:05.101]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:05.101]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:05.101]             base::sink(type = "output", split = FALSE)
[09:33:05.101]             base::close(...future.stdout)
[09:33:05.101]         }, add = TRUE)
[09:33:05.101]     }
[09:33:05.101]     ...future.frame <- base::sys.nframe()
[09:33:05.101]     ...future.conditions <- base::list()
[09:33:05.101]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:05.101]     if (FALSE) {
[09:33:05.101]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:05.101]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:05.101]     }
[09:33:05.101]     ...future.result <- base::tryCatch({
[09:33:05.101]         base::withCallingHandlers({
[09:33:05.101]             ...future.value <- base::withVisible(base::local({
[09:33:05.101]                 ...future.makeSendCondition <- base::local({
[09:33:05.101]                   sendCondition <- NULL
[09:33:05.101]                   function(frame = 1L) {
[09:33:05.101]                     if (is.function(sendCondition)) 
[09:33:05.101]                       return(sendCondition)
[09:33:05.101]                     ns <- getNamespace("parallel")
[09:33:05.101]                     if (exists("sendData", mode = "function", 
[09:33:05.101]                       envir = ns)) {
[09:33:05.101]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:05.101]                         envir = ns)
[09:33:05.101]                       envir <- sys.frame(frame)
[09:33:05.101]                       master <- NULL
[09:33:05.101]                       while (!identical(envir, .GlobalEnv) && 
[09:33:05.101]                         !identical(envir, emptyenv())) {
[09:33:05.101]                         if (exists("master", mode = "list", envir = envir, 
[09:33:05.101]                           inherits = FALSE)) {
[09:33:05.101]                           master <- get("master", mode = "list", 
[09:33:05.101]                             envir = envir, inherits = FALSE)
[09:33:05.101]                           if (inherits(master, c("SOCKnode", 
[09:33:05.101]                             "SOCK0node"))) {
[09:33:05.101]                             sendCondition <<- function(cond) {
[09:33:05.101]                               data <- list(type = "VALUE", value = cond, 
[09:33:05.101]                                 success = TRUE)
[09:33:05.101]                               parallel_sendData(master, data)
[09:33:05.101]                             }
[09:33:05.101]                             return(sendCondition)
[09:33:05.101]                           }
[09:33:05.101]                         }
[09:33:05.101]                         frame <- frame + 1L
[09:33:05.101]                         envir <- sys.frame(frame)
[09:33:05.101]                       }
[09:33:05.101]                     }
[09:33:05.101]                     sendCondition <<- function(cond) NULL
[09:33:05.101]                   }
[09:33:05.101]                 })
[09:33:05.101]                 withCallingHandlers({
[09:33:05.101]                   {
[09:33:05.101]                     print(1:50)
[09:33:05.101]                     str(1:50)
[09:33:05.101]                     cat(letters, sep = "-")
[09:33:05.101]                     cat(1:6, collapse = "\n")
[09:33:05.101]                     write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:05.101]                     42L
[09:33:05.101]                   }
[09:33:05.101]                 }, immediateCondition = function(cond) {
[09:33:05.101]                   sendCondition <- ...future.makeSendCondition()
[09:33:05.101]                   sendCondition(cond)
[09:33:05.101]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.101]                   {
[09:33:05.101]                     inherits <- base::inherits
[09:33:05.101]                     invokeRestart <- base::invokeRestart
[09:33:05.101]                     is.null <- base::is.null
[09:33:05.101]                     muffled <- FALSE
[09:33:05.101]                     if (inherits(cond, "message")) {
[09:33:05.101]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:05.101]                       if (muffled) 
[09:33:05.101]                         invokeRestart("muffleMessage")
[09:33:05.101]                     }
[09:33:05.101]                     else if (inherits(cond, "warning")) {
[09:33:05.101]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:05.101]                       if (muffled) 
[09:33:05.101]                         invokeRestart("muffleWarning")
[09:33:05.101]                     }
[09:33:05.101]                     else if (inherits(cond, "condition")) {
[09:33:05.101]                       if (!is.null(pattern)) {
[09:33:05.101]                         computeRestarts <- base::computeRestarts
[09:33:05.101]                         grepl <- base::grepl
[09:33:05.101]                         restarts <- computeRestarts(cond)
[09:33:05.101]                         for (restart in restarts) {
[09:33:05.101]                           name <- restart$name
[09:33:05.101]                           if (is.null(name)) 
[09:33:05.101]                             next
[09:33:05.101]                           if (!grepl(pattern, name)) 
[09:33:05.101]                             next
[09:33:05.101]                           invokeRestart(restart)
[09:33:05.101]                           muffled <- TRUE
[09:33:05.101]                           break
[09:33:05.101]                         }
[09:33:05.101]                       }
[09:33:05.101]                     }
[09:33:05.101]                     invisible(muffled)
[09:33:05.101]                   }
[09:33:05.101]                   muffleCondition(cond)
[09:33:05.101]                 })
[09:33:05.101]             }))
[09:33:05.101]             future::FutureResult(value = ...future.value$value, 
[09:33:05.101]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.101]                   ...future.rng), globalenv = if (FALSE) 
[09:33:05.101]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:05.101]                     ...future.globalenv.names))
[09:33:05.101]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:05.101]         }, condition = base::local({
[09:33:05.101]             c <- base::c
[09:33:05.101]             inherits <- base::inherits
[09:33:05.101]             invokeRestart <- base::invokeRestart
[09:33:05.101]             length <- base::length
[09:33:05.101]             list <- base::list
[09:33:05.101]             seq.int <- base::seq.int
[09:33:05.101]             signalCondition <- base::signalCondition
[09:33:05.101]             sys.calls <- base::sys.calls
[09:33:05.101]             `[[` <- base::`[[`
[09:33:05.101]             `+` <- base::`+`
[09:33:05.101]             `<<-` <- base::`<<-`
[09:33:05.101]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:05.101]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:05.101]                   3L)]
[09:33:05.101]             }
[09:33:05.101]             function(cond) {
[09:33:05.101]                 is_error <- inherits(cond, "error")
[09:33:05.101]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:05.101]                   NULL)
[09:33:05.101]                 if (is_error) {
[09:33:05.101]                   sessionInformation <- function() {
[09:33:05.101]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:05.101]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:05.101]                       search = base::search(), system = base::Sys.info())
[09:33:05.101]                   }
[09:33:05.101]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.101]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:05.101]                     cond$call), session = sessionInformation(), 
[09:33:05.101]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:05.101]                   signalCondition(cond)
[09:33:05.101]                 }
[09:33:05.101]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:05.101]                 "immediateCondition"))) {
[09:33:05.101]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:05.101]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.101]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:05.101]                   if (TRUE && !signal) {
[09:33:05.101]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.101]                     {
[09:33:05.101]                       inherits <- base::inherits
[09:33:05.101]                       invokeRestart <- base::invokeRestart
[09:33:05.101]                       is.null <- base::is.null
[09:33:05.101]                       muffled <- FALSE
[09:33:05.101]                       if (inherits(cond, "message")) {
[09:33:05.101]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.101]                         if (muffled) 
[09:33:05.101]                           invokeRestart("muffleMessage")
[09:33:05.101]                       }
[09:33:05.101]                       else if (inherits(cond, "warning")) {
[09:33:05.101]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.101]                         if (muffled) 
[09:33:05.101]                           invokeRestart("muffleWarning")
[09:33:05.101]                       }
[09:33:05.101]                       else if (inherits(cond, "condition")) {
[09:33:05.101]                         if (!is.null(pattern)) {
[09:33:05.101]                           computeRestarts <- base::computeRestarts
[09:33:05.101]                           grepl <- base::grepl
[09:33:05.101]                           restarts <- computeRestarts(cond)
[09:33:05.101]                           for (restart in restarts) {
[09:33:05.101]                             name <- restart$name
[09:33:05.101]                             if (is.null(name)) 
[09:33:05.101]                               next
[09:33:05.101]                             if (!grepl(pattern, name)) 
[09:33:05.101]                               next
[09:33:05.101]                             invokeRestart(restart)
[09:33:05.101]                             muffled <- TRUE
[09:33:05.101]                             break
[09:33:05.101]                           }
[09:33:05.101]                         }
[09:33:05.101]                       }
[09:33:05.101]                       invisible(muffled)
[09:33:05.101]                     }
[09:33:05.101]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.101]                   }
[09:33:05.101]                 }
[09:33:05.101]                 else {
[09:33:05.101]                   if (TRUE) {
[09:33:05.101]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.101]                     {
[09:33:05.101]                       inherits <- base::inherits
[09:33:05.101]                       invokeRestart <- base::invokeRestart
[09:33:05.101]                       is.null <- base::is.null
[09:33:05.101]                       muffled <- FALSE
[09:33:05.101]                       if (inherits(cond, "message")) {
[09:33:05.101]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.101]                         if (muffled) 
[09:33:05.101]                           invokeRestart("muffleMessage")
[09:33:05.101]                       }
[09:33:05.101]                       else if (inherits(cond, "warning")) {
[09:33:05.101]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.101]                         if (muffled) 
[09:33:05.101]                           invokeRestart("muffleWarning")
[09:33:05.101]                       }
[09:33:05.101]                       else if (inherits(cond, "condition")) {
[09:33:05.101]                         if (!is.null(pattern)) {
[09:33:05.101]                           computeRestarts <- base::computeRestarts
[09:33:05.101]                           grepl <- base::grepl
[09:33:05.101]                           restarts <- computeRestarts(cond)
[09:33:05.101]                           for (restart in restarts) {
[09:33:05.101]                             name <- restart$name
[09:33:05.101]                             if (is.null(name)) 
[09:33:05.101]                               next
[09:33:05.101]                             if (!grepl(pattern, name)) 
[09:33:05.101]                               next
[09:33:05.101]                             invokeRestart(restart)
[09:33:05.101]                             muffled <- TRUE
[09:33:05.101]                             break
[09:33:05.101]                           }
[09:33:05.101]                         }
[09:33:05.101]                       }
[09:33:05.101]                       invisible(muffled)
[09:33:05.101]                     }
[09:33:05.101]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.101]                   }
[09:33:05.101]                 }
[09:33:05.101]             }
[09:33:05.101]         }))
[09:33:05.101]     }, error = function(ex) {
[09:33:05.101]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:05.101]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.101]                 ...future.rng), started = ...future.startTime, 
[09:33:05.101]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:05.101]             version = "1.8"), class = "FutureResult")
[09:33:05.101]     }, finally = {
[09:33:05.101]         if (!identical(...future.workdir, getwd())) 
[09:33:05.101]             setwd(...future.workdir)
[09:33:05.101]         {
[09:33:05.101]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:05.101]                 ...future.oldOptions$nwarnings <- NULL
[09:33:05.101]             }
[09:33:05.101]             base::options(...future.oldOptions)
[09:33:05.101]             if (.Platform$OS.type == "windows") {
[09:33:05.101]                 old_names <- names(...future.oldEnvVars)
[09:33:05.101]                 envs <- base::Sys.getenv()
[09:33:05.101]                 names <- names(envs)
[09:33:05.101]                 common <- intersect(names, old_names)
[09:33:05.101]                 added <- setdiff(names, old_names)
[09:33:05.101]                 removed <- setdiff(old_names, names)
[09:33:05.101]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:05.101]                   envs[common]]
[09:33:05.101]                 NAMES <- toupper(changed)
[09:33:05.101]                 args <- list()
[09:33:05.101]                 for (kk in seq_along(NAMES)) {
[09:33:05.101]                   name <- changed[[kk]]
[09:33:05.101]                   NAME <- NAMES[[kk]]
[09:33:05.101]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.101]                     next
[09:33:05.101]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.101]                 }
[09:33:05.101]                 NAMES <- toupper(added)
[09:33:05.101]                 for (kk in seq_along(NAMES)) {
[09:33:05.101]                   name <- added[[kk]]
[09:33:05.101]                   NAME <- NAMES[[kk]]
[09:33:05.101]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.101]                     next
[09:33:05.101]                   args[[name]] <- ""
[09:33:05.101]                 }
[09:33:05.101]                 NAMES <- toupper(removed)
[09:33:05.101]                 for (kk in seq_along(NAMES)) {
[09:33:05.101]                   name <- removed[[kk]]
[09:33:05.101]                   NAME <- NAMES[[kk]]
[09:33:05.101]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.101]                     next
[09:33:05.101]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.101]                 }
[09:33:05.101]                 if (length(args) > 0) 
[09:33:05.101]                   base::do.call(base::Sys.setenv, args = args)
[09:33:05.101]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:05.101]             }
[09:33:05.101]             else {
[09:33:05.101]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:05.101]             }
[09:33:05.101]             {
[09:33:05.101]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:05.101]                   0L) {
[09:33:05.101]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:05.101]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:05.101]                   base::options(opts)
[09:33:05.101]                 }
[09:33:05.101]                 {
[09:33:05.101]                   {
[09:33:05.101]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:05.101]                     NULL
[09:33:05.101]                   }
[09:33:05.101]                   options(future.plan = NULL)
[09:33:05.101]                   if (is.na(NA_character_)) 
[09:33:05.101]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.101]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:05.101]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:05.101]                     .init = FALSE)
[09:33:05.101]                 }
[09:33:05.101]             }
[09:33:05.101]         }
[09:33:05.101]     })
[09:33:05.101]     if (TRUE) {
[09:33:05.101]         base::sink(type = "output", split = FALSE)
[09:33:05.101]         if (FALSE) {
[09:33:05.101]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:05.101]         }
[09:33:05.101]         else {
[09:33:05.101]             ...future.result["stdout"] <- base::list(NULL)
[09:33:05.101]         }
[09:33:05.101]         base::close(...future.stdout)
[09:33:05.101]         ...future.stdout <- NULL
[09:33:05.101]     }
[09:33:05.101]     ...future.result$conditions <- ...future.conditions
[09:33:05.101]     ...future.result$finished <- base::Sys.time()
[09:33:05.101]     ...future.result
[09:33:05.101] }
[09:33:05.104] MultisessionFuture started
[09:33:05.104] - Launch lazy future ... done
[09:33:05.104] run() for ‘MultisessionFuture’ ... done
[09:33:05.104] result() for ClusterFuture ...
[09:33:05.105] receiveMessageFromWorker() for ClusterFuture ...
[09:33:05.105] - Validating connection of MultisessionFuture
[09:33:05.106] - received message: FutureResult
[09:33:05.106] - Received FutureResult
[09:33:05.107] - Erased future from FutureRegistry
[09:33:05.107] result() for ClusterFuture ...
[09:33:05.107] - result already collected: FutureResult
[09:33:05.107] result() for ClusterFuture ... done
[09:33:05.107] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:05.107] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 09:33:05"
 $ finished    : POSIXct[1:1], format: "2024-12-19 09:33:05"
 $ session_uuid: chr "27110799-bfcd-a9e1-d348-f52d70de2812"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "8f1daa72e372"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "8f1daa72e372" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 50530
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 09:33:04"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[09:33:05.114] result() for ClusterFuture ...
[09:33:05.114] - result already collected: FutureResult
[09:33:05.115] result() for ClusterFuture ... done
[09:33:05.115] result() for ClusterFuture ...
[09:33:05.115] - result already collected: FutureResult
[09:33:05.115] result() for ClusterFuture ... done
[09:33:05.115] getGlobalsAndPackages() ...
[09:33:05.115] Searching for globals...
[09:33:05.118] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:05.118] Searching for globals ... DONE
[09:33:05.118] Resolving globals: FALSE
[09:33:05.119] 
[09:33:05.119] - packages: [1] ‘utils’
[09:33:05.119] getGlobalsAndPackages() ... DONE
[09:33:05.119] run() for ‘Future’ ...
[09:33:05.119] - state: ‘created’
[09:33:05.119] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:33:05.132] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:05.132] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:33:05.133]   - Field: ‘node’
[09:33:05.133]   - Field: ‘label’
[09:33:05.133]   - Field: ‘local’
[09:33:05.133]   - Field: ‘owner’
[09:33:05.133]   - Field: ‘envir’
[09:33:05.133]   - Field: ‘workers’
[09:33:05.133]   - Field: ‘packages’
[09:33:05.133]   - Field: ‘gc’
[09:33:05.133]   - Field: ‘conditions’
[09:33:05.133]   - Field: ‘persistent’
[09:33:05.133]   - Field: ‘expr’
[09:33:05.134]   - Field: ‘uuid’
[09:33:05.134]   - Field: ‘seed’
[09:33:05.134]   - Field: ‘version’
[09:33:05.134]   - Field: ‘result’
[09:33:05.134]   - Field: ‘asynchronous’
[09:33:05.134]   - Field: ‘calls’
[09:33:05.134]   - Field: ‘globals’
[09:33:05.134]   - Field: ‘stdout’
[09:33:05.134]   - Field: ‘earlySignal’
[09:33:05.134]   - Field: ‘lazy’
[09:33:05.134]   - Field: ‘state’
[09:33:05.135] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:33:05.135] - Launch lazy future ...
[09:33:05.135] Packages needed by the future expression (n = 1): ‘utils’
[09:33:05.135] Packages needed by future strategies (n = 0): <none>
[09:33:05.135] {
[09:33:05.135]     {
[09:33:05.135]         {
[09:33:05.135]             ...future.startTime <- base::Sys.time()
[09:33:05.135]             {
[09:33:05.135]                 {
[09:33:05.135]                   {
[09:33:05.135]                     {
[09:33:05.135]                       {
[09:33:05.135]                         base::local({
[09:33:05.135]                           has_future <- base::requireNamespace("future", 
[09:33:05.135]                             quietly = TRUE)
[09:33:05.135]                           if (has_future) {
[09:33:05.135]                             ns <- base::getNamespace("future")
[09:33:05.135]                             version <- ns[[".package"]][["version"]]
[09:33:05.135]                             if (is.null(version)) 
[09:33:05.135]                               version <- utils::packageVersion("future")
[09:33:05.135]                           }
[09:33:05.135]                           else {
[09:33:05.135]                             version <- NULL
[09:33:05.135]                           }
[09:33:05.135]                           if (!has_future || version < "1.8.0") {
[09:33:05.135]                             info <- base::c(r_version = base::gsub("R version ", 
[09:33:05.135]                               "", base::R.version$version.string), 
[09:33:05.135]                               platform = base::sprintf("%s (%s-bit)", 
[09:33:05.135]                                 base::R.version$platform, 8 * 
[09:33:05.135]                                   base::.Machine$sizeof.pointer), 
[09:33:05.135]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:05.135]                                 "release", "version")], collapse = " "), 
[09:33:05.135]                               hostname = base::Sys.info()[["nodename"]])
[09:33:05.135]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:33:05.135]                               info)
[09:33:05.135]                             info <- base::paste(info, collapse = "; ")
[09:33:05.135]                             if (!has_future) {
[09:33:05.135]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:05.135]                                 info)
[09:33:05.135]                             }
[09:33:05.135]                             else {
[09:33:05.135]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:05.135]                                 info, version)
[09:33:05.135]                             }
[09:33:05.135]                             base::stop(msg)
[09:33:05.135]                           }
[09:33:05.135]                         })
[09:33:05.135]                       }
[09:33:05.135]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:05.135]                       base::options(mc.cores = 1L)
[09:33:05.135]                     }
[09:33:05.135]                     base::local({
[09:33:05.135]                       for (pkg in "utils") {
[09:33:05.135]                         base::loadNamespace(pkg)
[09:33:05.135]                         base::library(pkg, character.only = TRUE)
[09:33:05.135]                       }
[09:33:05.135]                     })
[09:33:05.135]                   }
[09:33:05.135]                   ...future.strategy.old <- future::plan("list")
[09:33:05.135]                   options(future.plan = NULL)
[09:33:05.135]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.135]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:05.135]                 }
[09:33:05.135]                 ...future.workdir <- getwd()
[09:33:05.135]             }
[09:33:05.135]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:05.135]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:05.135]         }
[09:33:05.135]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:05.135]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:05.135]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:05.135]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:05.135]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:05.135]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:05.135]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:05.135]             base::names(...future.oldOptions))
[09:33:05.135]     }
[09:33:05.135]     if (FALSE) {
[09:33:05.135]     }
[09:33:05.135]     else {
[09:33:05.135]         if (FALSE) {
[09:33:05.135]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:05.135]                 open = "w")
[09:33:05.135]         }
[09:33:05.135]         else {
[09:33:05.135]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:05.135]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:05.135]         }
[09:33:05.135]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:05.135]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:05.135]             base::sink(type = "output", split = FALSE)
[09:33:05.135]             base::close(...future.stdout)
[09:33:05.135]         }, add = TRUE)
[09:33:05.135]     }
[09:33:05.135]     ...future.frame <- base::sys.nframe()
[09:33:05.135]     ...future.conditions <- base::list()
[09:33:05.135]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:05.135]     if (FALSE) {
[09:33:05.135]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:05.135]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:05.135]     }
[09:33:05.135]     ...future.result <- base::tryCatch({
[09:33:05.135]         base::withCallingHandlers({
[09:33:05.135]             ...future.value <- base::withVisible(base::local({
[09:33:05.135]                 ...future.makeSendCondition <- base::local({
[09:33:05.135]                   sendCondition <- NULL
[09:33:05.135]                   function(frame = 1L) {
[09:33:05.135]                     if (is.function(sendCondition)) 
[09:33:05.135]                       return(sendCondition)
[09:33:05.135]                     ns <- getNamespace("parallel")
[09:33:05.135]                     if (exists("sendData", mode = "function", 
[09:33:05.135]                       envir = ns)) {
[09:33:05.135]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:05.135]                         envir = ns)
[09:33:05.135]                       envir <- sys.frame(frame)
[09:33:05.135]                       master <- NULL
[09:33:05.135]                       while (!identical(envir, .GlobalEnv) && 
[09:33:05.135]                         !identical(envir, emptyenv())) {
[09:33:05.135]                         if (exists("master", mode = "list", envir = envir, 
[09:33:05.135]                           inherits = FALSE)) {
[09:33:05.135]                           master <- get("master", mode = "list", 
[09:33:05.135]                             envir = envir, inherits = FALSE)
[09:33:05.135]                           if (inherits(master, c("SOCKnode", 
[09:33:05.135]                             "SOCK0node"))) {
[09:33:05.135]                             sendCondition <<- function(cond) {
[09:33:05.135]                               data <- list(type = "VALUE", value = cond, 
[09:33:05.135]                                 success = TRUE)
[09:33:05.135]                               parallel_sendData(master, data)
[09:33:05.135]                             }
[09:33:05.135]                             return(sendCondition)
[09:33:05.135]                           }
[09:33:05.135]                         }
[09:33:05.135]                         frame <- frame + 1L
[09:33:05.135]                         envir <- sys.frame(frame)
[09:33:05.135]                       }
[09:33:05.135]                     }
[09:33:05.135]                     sendCondition <<- function(cond) NULL
[09:33:05.135]                   }
[09:33:05.135]                 })
[09:33:05.135]                 withCallingHandlers({
[09:33:05.135]                   {
[09:33:05.135]                     print(1:50)
[09:33:05.135]                     str(1:50)
[09:33:05.135]                     cat(letters, sep = "-")
[09:33:05.135]                     cat(1:6, collapse = "\n")
[09:33:05.135]                     write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:05.135]                     42L
[09:33:05.135]                   }
[09:33:05.135]                 }, immediateCondition = function(cond) {
[09:33:05.135]                   sendCondition <- ...future.makeSendCondition()
[09:33:05.135]                   sendCondition(cond)
[09:33:05.135]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.135]                   {
[09:33:05.135]                     inherits <- base::inherits
[09:33:05.135]                     invokeRestart <- base::invokeRestart
[09:33:05.135]                     is.null <- base::is.null
[09:33:05.135]                     muffled <- FALSE
[09:33:05.135]                     if (inherits(cond, "message")) {
[09:33:05.135]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:05.135]                       if (muffled) 
[09:33:05.135]                         invokeRestart("muffleMessage")
[09:33:05.135]                     }
[09:33:05.135]                     else if (inherits(cond, "warning")) {
[09:33:05.135]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:05.135]                       if (muffled) 
[09:33:05.135]                         invokeRestart("muffleWarning")
[09:33:05.135]                     }
[09:33:05.135]                     else if (inherits(cond, "condition")) {
[09:33:05.135]                       if (!is.null(pattern)) {
[09:33:05.135]                         computeRestarts <- base::computeRestarts
[09:33:05.135]                         grepl <- base::grepl
[09:33:05.135]                         restarts <- computeRestarts(cond)
[09:33:05.135]                         for (restart in restarts) {
[09:33:05.135]                           name <- restart$name
[09:33:05.135]                           if (is.null(name)) 
[09:33:05.135]                             next
[09:33:05.135]                           if (!grepl(pattern, name)) 
[09:33:05.135]                             next
[09:33:05.135]                           invokeRestart(restart)
[09:33:05.135]                           muffled <- TRUE
[09:33:05.135]                           break
[09:33:05.135]                         }
[09:33:05.135]                       }
[09:33:05.135]                     }
[09:33:05.135]                     invisible(muffled)
[09:33:05.135]                   }
[09:33:05.135]                   muffleCondition(cond)
[09:33:05.135]                 })
[09:33:05.135]             }))
[09:33:05.135]             future::FutureResult(value = ...future.value$value, 
[09:33:05.135]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.135]                   ...future.rng), globalenv = if (FALSE) 
[09:33:05.135]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:05.135]                     ...future.globalenv.names))
[09:33:05.135]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:05.135]         }, condition = base::local({
[09:33:05.135]             c <- base::c
[09:33:05.135]             inherits <- base::inherits
[09:33:05.135]             invokeRestart <- base::invokeRestart
[09:33:05.135]             length <- base::length
[09:33:05.135]             list <- base::list
[09:33:05.135]             seq.int <- base::seq.int
[09:33:05.135]             signalCondition <- base::signalCondition
[09:33:05.135]             sys.calls <- base::sys.calls
[09:33:05.135]             `[[` <- base::`[[`
[09:33:05.135]             `+` <- base::`+`
[09:33:05.135]             `<<-` <- base::`<<-`
[09:33:05.135]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:05.135]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:05.135]                   3L)]
[09:33:05.135]             }
[09:33:05.135]             function(cond) {
[09:33:05.135]                 is_error <- inherits(cond, "error")
[09:33:05.135]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:05.135]                   NULL)
[09:33:05.135]                 if (is_error) {
[09:33:05.135]                   sessionInformation <- function() {
[09:33:05.135]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:05.135]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:05.135]                       search = base::search(), system = base::Sys.info())
[09:33:05.135]                   }
[09:33:05.135]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.135]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:05.135]                     cond$call), session = sessionInformation(), 
[09:33:05.135]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:05.135]                   signalCondition(cond)
[09:33:05.135]                 }
[09:33:05.135]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:05.135]                 "immediateCondition"))) {
[09:33:05.135]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:05.135]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.135]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:05.135]                   if (TRUE && !signal) {
[09:33:05.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.135]                     {
[09:33:05.135]                       inherits <- base::inherits
[09:33:05.135]                       invokeRestart <- base::invokeRestart
[09:33:05.135]                       is.null <- base::is.null
[09:33:05.135]                       muffled <- FALSE
[09:33:05.135]                       if (inherits(cond, "message")) {
[09:33:05.135]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.135]                         if (muffled) 
[09:33:05.135]                           invokeRestart("muffleMessage")
[09:33:05.135]                       }
[09:33:05.135]                       else if (inherits(cond, "warning")) {
[09:33:05.135]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.135]                         if (muffled) 
[09:33:05.135]                           invokeRestart("muffleWarning")
[09:33:05.135]                       }
[09:33:05.135]                       else if (inherits(cond, "condition")) {
[09:33:05.135]                         if (!is.null(pattern)) {
[09:33:05.135]                           computeRestarts <- base::computeRestarts
[09:33:05.135]                           grepl <- base::grepl
[09:33:05.135]                           restarts <- computeRestarts(cond)
[09:33:05.135]                           for (restart in restarts) {
[09:33:05.135]                             name <- restart$name
[09:33:05.135]                             if (is.null(name)) 
[09:33:05.135]                               next
[09:33:05.135]                             if (!grepl(pattern, name)) 
[09:33:05.135]                               next
[09:33:05.135]                             invokeRestart(restart)
[09:33:05.135]                             muffled <- TRUE
[09:33:05.135]                             break
[09:33:05.135]                           }
[09:33:05.135]                         }
[09:33:05.135]                       }
[09:33:05.135]                       invisible(muffled)
[09:33:05.135]                     }
[09:33:05.135]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.135]                   }
[09:33:05.135]                 }
[09:33:05.135]                 else {
[09:33:05.135]                   if (TRUE) {
[09:33:05.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.135]                     {
[09:33:05.135]                       inherits <- base::inherits
[09:33:05.135]                       invokeRestart <- base::invokeRestart
[09:33:05.135]                       is.null <- base::is.null
[09:33:05.135]                       muffled <- FALSE
[09:33:05.135]                       if (inherits(cond, "message")) {
[09:33:05.135]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.135]                         if (muffled) 
[09:33:05.135]                           invokeRestart("muffleMessage")
[09:33:05.135]                       }
[09:33:05.135]                       else if (inherits(cond, "warning")) {
[09:33:05.135]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.135]                         if (muffled) 
[09:33:05.135]                           invokeRestart("muffleWarning")
[09:33:05.135]                       }
[09:33:05.135]                       else if (inherits(cond, "condition")) {
[09:33:05.135]                         if (!is.null(pattern)) {
[09:33:05.135]                           computeRestarts <- base::computeRestarts
[09:33:05.135]                           grepl <- base::grepl
[09:33:05.135]                           restarts <- computeRestarts(cond)
[09:33:05.135]                           for (restart in restarts) {
[09:33:05.135]                             name <- restart$name
[09:33:05.135]                             if (is.null(name)) 
[09:33:05.135]                               next
[09:33:05.135]                             if (!grepl(pattern, name)) 
[09:33:05.135]                               next
[09:33:05.135]                             invokeRestart(restart)
[09:33:05.135]                             muffled <- TRUE
[09:33:05.135]                             break
[09:33:05.135]                           }
[09:33:05.135]                         }
[09:33:05.135]                       }
[09:33:05.135]                       invisible(muffled)
[09:33:05.135]                     }
[09:33:05.135]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.135]                   }
[09:33:05.135]                 }
[09:33:05.135]             }
[09:33:05.135]         }))
[09:33:05.135]     }, error = function(ex) {
[09:33:05.135]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:05.135]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.135]                 ...future.rng), started = ...future.startTime, 
[09:33:05.135]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:05.135]             version = "1.8"), class = "FutureResult")
[09:33:05.135]     }, finally = {
[09:33:05.135]         if (!identical(...future.workdir, getwd())) 
[09:33:05.135]             setwd(...future.workdir)
[09:33:05.135]         {
[09:33:05.135]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:05.135]                 ...future.oldOptions$nwarnings <- NULL
[09:33:05.135]             }
[09:33:05.135]             base::options(...future.oldOptions)
[09:33:05.135]             if (.Platform$OS.type == "windows") {
[09:33:05.135]                 old_names <- names(...future.oldEnvVars)
[09:33:05.135]                 envs <- base::Sys.getenv()
[09:33:05.135]                 names <- names(envs)
[09:33:05.135]                 common <- intersect(names, old_names)
[09:33:05.135]                 added <- setdiff(names, old_names)
[09:33:05.135]                 removed <- setdiff(old_names, names)
[09:33:05.135]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:05.135]                   envs[common]]
[09:33:05.135]                 NAMES <- toupper(changed)
[09:33:05.135]                 args <- list()
[09:33:05.135]                 for (kk in seq_along(NAMES)) {
[09:33:05.135]                   name <- changed[[kk]]
[09:33:05.135]                   NAME <- NAMES[[kk]]
[09:33:05.135]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.135]                     next
[09:33:05.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.135]                 }
[09:33:05.135]                 NAMES <- toupper(added)
[09:33:05.135]                 for (kk in seq_along(NAMES)) {
[09:33:05.135]                   name <- added[[kk]]
[09:33:05.135]                   NAME <- NAMES[[kk]]
[09:33:05.135]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.135]                     next
[09:33:05.135]                   args[[name]] <- ""
[09:33:05.135]                 }
[09:33:05.135]                 NAMES <- toupper(removed)
[09:33:05.135]                 for (kk in seq_along(NAMES)) {
[09:33:05.135]                   name <- removed[[kk]]
[09:33:05.135]                   NAME <- NAMES[[kk]]
[09:33:05.135]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.135]                     next
[09:33:05.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.135]                 }
[09:33:05.135]                 if (length(args) > 0) 
[09:33:05.135]                   base::do.call(base::Sys.setenv, args = args)
[09:33:05.135]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:05.135]             }
[09:33:05.135]             else {
[09:33:05.135]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:05.135]             }
[09:33:05.135]             {
[09:33:05.135]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:05.135]                   0L) {
[09:33:05.135]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:05.135]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:05.135]                   base::options(opts)
[09:33:05.135]                 }
[09:33:05.135]                 {
[09:33:05.135]                   {
[09:33:05.135]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:05.135]                     NULL
[09:33:05.135]                   }
[09:33:05.135]                   options(future.plan = NULL)
[09:33:05.135]                   if (is.na(NA_character_)) 
[09:33:05.135]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.135]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:05.135]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:05.135]                     .init = FALSE)
[09:33:05.135]                 }
[09:33:05.135]             }
[09:33:05.135]         }
[09:33:05.135]     })
[09:33:05.135]     if (TRUE) {
[09:33:05.135]         base::sink(type = "output", split = FALSE)
[09:33:05.135]         if (FALSE) {
[09:33:05.135]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:05.135]         }
[09:33:05.135]         else {
[09:33:05.135]             ...future.result["stdout"] <- base::list(NULL)
[09:33:05.135]         }
[09:33:05.135]         base::close(...future.stdout)
[09:33:05.135]         ...future.stdout <- NULL
[09:33:05.135]     }
[09:33:05.135]     ...future.result$conditions <- ...future.conditions
[09:33:05.135]     ...future.result$finished <- base::Sys.time()
[09:33:05.135]     ...future.result
[09:33:05.135] }
[09:33:05.138] MultisessionFuture started
[09:33:05.138] - Launch lazy future ... done
[09:33:05.138] run() for ‘MultisessionFuture’ ... done
[09:33:05.139] result() for ClusterFuture ...
[09:33:05.139] receiveMessageFromWorker() for ClusterFuture ...
[09:33:05.139] - Validating connection of MultisessionFuture
[09:33:05.182] - received message: FutureResult
[09:33:05.182] - Received FutureResult
[09:33:05.182] - Erased future from FutureRegistry
[09:33:05.182] result() for ClusterFuture ...
[09:33:05.182] - result already collected: FutureResult
[09:33:05.182] result() for ClusterFuture ... done
[09:33:05.183] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:05.183] result() for ClusterFuture ... done
[09:33:05.183] result() for ClusterFuture ...
[09:33:05.183] - result already collected: FutureResult
[09:33:05.183] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[09:33:05.183] getGlobalsAndPackages() ...
[09:33:05.183] Searching for globals...
[09:33:05.184] - globals found: [1] ‘print’
[09:33:05.184] Searching for globals ... DONE
[09:33:05.184] Resolving globals: FALSE
[09:33:05.184] 
[09:33:05.184] 
[09:33:05.184] getGlobalsAndPackages() ... DONE
[09:33:05.185] run() for ‘Future’ ...
[09:33:05.185] - state: ‘created’
[09:33:05.185] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:33:05.198] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:05.198] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:33:05.198]   - Field: ‘node’
[09:33:05.198]   - Field: ‘label’
[09:33:05.198]   - Field: ‘local’
[09:33:05.199]   - Field: ‘owner’
[09:33:05.199]   - Field: ‘envir’
[09:33:05.199]   - Field: ‘workers’
[09:33:05.199]   - Field: ‘packages’
[09:33:05.199]   - Field: ‘gc’
[09:33:05.199]   - Field: ‘conditions’
[09:33:05.199]   - Field: ‘persistent’
[09:33:05.199]   - Field: ‘expr’
[09:33:05.199]   - Field: ‘uuid’
[09:33:05.199]   - Field: ‘seed’
[09:33:05.199]   - Field: ‘version’
[09:33:05.199]   - Field: ‘result’
[09:33:05.200]   - Field: ‘asynchronous’
[09:33:05.200]   - Field: ‘calls’
[09:33:05.200]   - Field: ‘globals’
[09:33:05.200]   - Field: ‘stdout’
[09:33:05.200]   - Field: ‘earlySignal’
[09:33:05.200]   - Field: ‘lazy’
[09:33:05.200]   - Field: ‘state’
[09:33:05.200] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:33:05.200] - Launch lazy future ...
[09:33:05.201] Packages needed by the future expression (n = 0): <none>
[09:33:05.201] Packages needed by future strategies (n = 0): <none>
[09:33:05.201] {
[09:33:05.201]     {
[09:33:05.201]         {
[09:33:05.201]             ...future.startTime <- base::Sys.time()
[09:33:05.201]             {
[09:33:05.201]                 {
[09:33:05.201]                   {
[09:33:05.201]                     {
[09:33:05.201]                       base::local({
[09:33:05.201]                         has_future <- base::requireNamespace("future", 
[09:33:05.201]                           quietly = TRUE)
[09:33:05.201]                         if (has_future) {
[09:33:05.201]                           ns <- base::getNamespace("future")
[09:33:05.201]                           version <- ns[[".package"]][["version"]]
[09:33:05.201]                           if (is.null(version)) 
[09:33:05.201]                             version <- utils::packageVersion("future")
[09:33:05.201]                         }
[09:33:05.201]                         else {
[09:33:05.201]                           version <- NULL
[09:33:05.201]                         }
[09:33:05.201]                         if (!has_future || version < "1.8.0") {
[09:33:05.201]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:05.201]                             "", base::R.version$version.string), 
[09:33:05.201]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:05.201]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:05.201]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:05.201]                               "release", "version")], collapse = " "), 
[09:33:05.201]                             hostname = base::Sys.info()[["nodename"]])
[09:33:05.201]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:05.201]                             info)
[09:33:05.201]                           info <- base::paste(info, collapse = "; ")
[09:33:05.201]                           if (!has_future) {
[09:33:05.201]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:05.201]                               info)
[09:33:05.201]                           }
[09:33:05.201]                           else {
[09:33:05.201]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:05.201]                               info, version)
[09:33:05.201]                           }
[09:33:05.201]                           base::stop(msg)
[09:33:05.201]                         }
[09:33:05.201]                       })
[09:33:05.201]                     }
[09:33:05.201]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:05.201]                     base::options(mc.cores = 1L)
[09:33:05.201]                   }
[09:33:05.201]                   ...future.strategy.old <- future::plan("list")
[09:33:05.201]                   options(future.plan = NULL)
[09:33:05.201]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.201]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:05.201]                 }
[09:33:05.201]                 ...future.workdir <- getwd()
[09:33:05.201]             }
[09:33:05.201]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:05.201]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:05.201]         }
[09:33:05.201]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:05.201]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:05.201]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:05.201]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:05.201]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:05.201]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:05.201]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:05.201]             base::names(...future.oldOptions))
[09:33:05.201]     }
[09:33:05.201]     if (FALSE) {
[09:33:05.201]     }
[09:33:05.201]     else {
[09:33:05.201]         if (TRUE) {
[09:33:05.201]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:05.201]                 open = "w")
[09:33:05.201]         }
[09:33:05.201]         else {
[09:33:05.201]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:05.201]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:05.201]         }
[09:33:05.201]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:05.201]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:05.201]             base::sink(type = "output", split = FALSE)
[09:33:05.201]             base::close(...future.stdout)
[09:33:05.201]         }, add = TRUE)
[09:33:05.201]     }
[09:33:05.201]     ...future.frame <- base::sys.nframe()
[09:33:05.201]     ...future.conditions <- base::list()
[09:33:05.201]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:05.201]     if (FALSE) {
[09:33:05.201]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:05.201]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:05.201]     }
[09:33:05.201]     ...future.result <- base::tryCatch({
[09:33:05.201]         base::withCallingHandlers({
[09:33:05.201]             ...future.value <- base::withVisible(base::local({
[09:33:05.201]                 ...future.makeSendCondition <- base::local({
[09:33:05.201]                   sendCondition <- NULL
[09:33:05.201]                   function(frame = 1L) {
[09:33:05.201]                     if (is.function(sendCondition)) 
[09:33:05.201]                       return(sendCondition)
[09:33:05.201]                     ns <- getNamespace("parallel")
[09:33:05.201]                     if (exists("sendData", mode = "function", 
[09:33:05.201]                       envir = ns)) {
[09:33:05.201]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:05.201]                         envir = ns)
[09:33:05.201]                       envir <- sys.frame(frame)
[09:33:05.201]                       master <- NULL
[09:33:05.201]                       while (!identical(envir, .GlobalEnv) && 
[09:33:05.201]                         !identical(envir, emptyenv())) {
[09:33:05.201]                         if (exists("master", mode = "list", envir = envir, 
[09:33:05.201]                           inherits = FALSE)) {
[09:33:05.201]                           master <- get("master", mode = "list", 
[09:33:05.201]                             envir = envir, inherits = FALSE)
[09:33:05.201]                           if (inherits(master, c("SOCKnode", 
[09:33:05.201]                             "SOCK0node"))) {
[09:33:05.201]                             sendCondition <<- function(cond) {
[09:33:05.201]                               data <- list(type = "VALUE", value = cond, 
[09:33:05.201]                                 success = TRUE)
[09:33:05.201]                               parallel_sendData(master, data)
[09:33:05.201]                             }
[09:33:05.201]                             return(sendCondition)
[09:33:05.201]                           }
[09:33:05.201]                         }
[09:33:05.201]                         frame <- frame + 1L
[09:33:05.201]                         envir <- sys.frame(frame)
[09:33:05.201]                       }
[09:33:05.201]                     }
[09:33:05.201]                     sendCondition <<- function(cond) NULL
[09:33:05.201]                   }
[09:33:05.201]                 })
[09:33:05.201]                 withCallingHandlers({
[09:33:05.201]                   print(42)
[09:33:05.201]                 }, immediateCondition = function(cond) {
[09:33:05.201]                   sendCondition <- ...future.makeSendCondition()
[09:33:05.201]                   sendCondition(cond)
[09:33:05.201]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.201]                   {
[09:33:05.201]                     inherits <- base::inherits
[09:33:05.201]                     invokeRestart <- base::invokeRestart
[09:33:05.201]                     is.null <- base::is.null
[09:33:05.201]                     muffled <- FALSE
[09:33:05.201]                     if (inherits(cond, "message")) {
[09:33:05.201]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:05.201]                       if (muffled) 
[09:33:05.201]                         invokeRestart("muffleMessage")
[09:33:05.201]                     }
[09:33:05.201]                     else if (inherits(cond, "warning")) {
[09:33:05.201]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:05.201]                       if (muffled) 
[09:33:05.201]                         invokeRestart("muffleWarning")
[09:33:05.201]                     }
[09:33:05.201]                     else if (inherits(cond, "condition")) {
[09:33:05.201]                       if (!is.null(pattern)) {
[09:33:05.201]                         computeRestarts <- base::computeRestarts
[09:33:05.201]                         grepl <- base::grepl
[09:33:05.201]                         restarts <- computeRestarts(cond)
[09:33:05.201]                         for (restart in restarts) {
[09:33:05.201]                           name <- restart$name
[09:33:05.201]                           if (is.null(name)) 
[09:33:05.201]                             next
[09:33:05.201]                           if (!grepl(pattern, name)) 
[09:33:05.201]                             next
[09:33:05.201]                           invokeRestart(restart)
[09:33:05.201]                           muffled <- TRUE
[09:33:05.201]                           break
[09:33:05.201]                         }
[09:33:05.201]                       }
[09:33:05.201]                     }
[09:33:05.201]                     invisible(muffled)
[09:33:05.201]                   }
[09:33:05.201]                   muffleCondition(cond)
[09:33:05.201]                 })
[09:33:05.201]             }))
[09:33:05.201]             future::FutureResult(value = ...future.value$value, 
[09:33:05.201]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.201]                   ...future.rng), globalenv = if (FALSE) 
[09:33:05.201]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:05.201]                     ...future.globalenv.names))
[09:33:05.201]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:05.201]         }, condition = base::local({
[09:33:05.201]             c <- base::c
[09:33:05.201]             inherits <- base::inherits
[09:33:05.201]             invokeRestart <- base::invokeRestart
[09:33:05.201]             length <- base::length
[09:33:05.201]             list <- base::list
[09:33:05.201]             seq.int <- base::seq.int
[09:33:05.201]             signalCondition <- base::signalCondition
[09:33:05.201]             sys.calls <- base::sys.calls
[09:33:05.201]             `[[` <- base::`[[`
[09:33:05.201]             `+` <- base::`+`
[09:33:05.201]             `<<-` <- base::`<<-`
[09:33:05.201]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:05.201]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:05.201]                   3L)]
[09:33:05.201]             }
[09:33:05.201]             function(cond) {
[09:33:05.201]                 is_error <- inherits(cond, "error")
[09:33:05.201]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:05.201]                   NULL)
[09:33:05.201]                 if (is_error) {
[09:33:05.201]                   sessionInformation <- function() {
[09:33:05.201]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:05.201]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:05.201]                       search = base::search(), system = base::Sys.info())
[09:33:05.201]                   }
[09:33:05.201]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.201]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:05.201]                     cond$call), session = sessionInformation(), 
[09:33:05.201]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:05.201]                   signalCondition(cond)
[09:33:05.201]                 }
[09:33:05.201]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:05.201]                 "immediateCondition"))) {
[09:33:05.201]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:05.201]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.201]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:05.201]                   if (TRUE && !signal) {
[09:33:05.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.201]                     {
[09:33:05.201]                       inherits <- base::inherits
[09:33:05.201]                       invokeRestart <- base::invokeRestart
[09:33:05.201]                       is.null <- base::is.null
[09:33:05.201]                       muffled <- FALSE
[09:33:05.201]                       if (inherits(cond, "message")) {
[09:33:05.201]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.201]                         if (muffled) 
[09:33:05.201]                           invokeRestart("muffleMessage")
[09:33:05.201]                       }
[09:33:05.201]                       else if (inherits(cond, "warning")) {
[09:33:05.201]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.201]                         if (muffled) 
[09:33:05.201]                           invokeRestart("muffleWarning")
[09:33:05.201]                       }
[09:33:05.201]                       else if (inherits(cond, "condition")) {
[09:33:05.201]                         if (!is.null(pattern)) {
[09:33:05.201]                           computeRestarts <- base::computeRestarts
[09:33:05.201]                           grepl <- base::grepl
[09:33:05.201]                           restarts <- computeRestarts(cond)
[09:33:05.201]                           for (restart in restarts) {
[09:33:05.201]                             name <- restart$name
[09:33:05.201]                             if (is.null(name)) 
[09:33:05.201]                               next
[09:33:05.201]                             if (!grepl(pattern, name)) 
[09:33:05.201]                               next
[09:33:05.201]                             invokeRestart(restart)
[09:33:05.201]                             muffled <- TRUE
[09:33:05.201]                             break
[09:33:05.201]                           }
[09:33:05.201]                         }
[09:33:05.201]                       }
[09:33:05.201]                       invisible(muffled)
[09:33:05.201]                     }
[09:33:05.201]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.201]                   }
[09:33:05.201]                 }
[09:33:05.201]                 else {
[09:33:05.201]                   if (TRUE) {
[09:33:05.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.201]                     {
[09:33:05.201]                       inherits <- base::inherits
[09:33:05.201]                       invokeRestart <- base::invokeRestart
[09:33:05.201]                       is.null <- base::is.null
[09:33:05.201]                       muffled <- FALSE
[09:33:05.201]                       if (inherits(cond, "message")) {
[09:33:05.201]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.201]                         if (muffled) 
[09:33:05.201]                           invokeRestart("muffleMessage")
[09:33:05.201]                       }
[09:33:05.201]                       else if (inherits(cond, "warning")) {
[09:33:05.201]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.201]                         if (muffled) 
[09:33:05.201]                           invokeRestart("muffleWarning")
[09:33:05.201]                       }
[09:33:05.201]                       else if (inherits(cond, "condition")) {
[09:33:05.201]                         if (!is.null(pattern)) {
[09:33:05.201]                           computeRestarts <- base::computeRestarts
[09:33:05.201]                           grepl <- base::grepl
[09:33:05.201]                           restarts <- computeRestarts(cond)
[09:33:05.201]                           for (restart in restarts) {
[09:33:05.201]                             name <- restart$name
[09:33:05.201]                             if (is.null(name)) 
[09:33:05.201]                               next
[09:33:05.201]                             if (!grepl(pattern, name)) 
[09:33:05.201]                               next
[09:33:05.201]                             invokeRestart(restart)
[09:33:05.201]                             muffled <- TRUE
[09:33:05.201]                             break
[09:33:05.201]                           }
[09:33:05.201]                         }
[09:33:05.201]                       }
[09:33:05.201]                       invisible(muffled)
[09:33:05.201]                     }
[09:33:05.201]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.201]                   }
[09:33:05.201]                 }
[09:33:05.201]             }
[09:33:05.201]         }))
[09:33:05.201]     }, error = function(ex) {
[09:33:05.201]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:05.201]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.201]                 ...future.rng), started = ...future.startTime, 
[09:33:05.201]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:05.201]             version = "1.8"), class = "FutureResult")
[09:33:05.201]     }, finally = {
[09:33:05.201]         if (!identical(...future.workdir, getwd())) 
[09:33:05.201]             setwd(...future.workdir)
[09:33:05.201]         {
[09:33:05.201]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:05.201]                 ...future.oldOptions$nwarnings <- NULL
[09:33:05.201]             }
[09:33:05.201]             base::options(...future.oldOptions)
[09:33:05.201]             if (.Platform$OS.type == "windows") {
[09:33:05.201]                 old_names <- names(...future.oldEnvVars)
[09:33:05.201]                 envs <- base::Sys.getenv()
[09:33:05.201]                 names <- names(envs)
[09:33:05.201]                 common <- intersect(names, old_names)
[09:33:05.201]                 added <- setdiff(names, old_names)
[09:33:05.201]                 removed <- setdiff(old_names, names)
[09:33:05.201]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:05.201]                   envs[common]]
[09:33:05.201]                 NAMES <- toupper(changed)
[09:33:05.201]                 args <- list()
[09:33:05.201]                 for (kk in seq_along(NAMES)) {
[09:33:05.201]                   name <- changed[[kk]]
[09:33:05.201]                   NAME <- NAMES[[kk]]
[09:33:05.201]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.201]                     next
[09:33:05.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.201]                 }
[09:33:05.201]                 NAMES <- toupper(added)
[09:33:05.201]                 for (kk in seq_along(NAMES)) {
[09:33:05.201]                   name <- added[[kk]]
[09:33:05.201]                   NAME <- NAMES[[kk]]
[09:33:05.201]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.201]                     next
[09:33:05.201]                   args[[name]] <- ""
[09:33:05.201]                 }
[09:33:05.201]                 NAMES <- toupper(removed)
[09:33:05.201]                 for (kk in seq_along(NAMES)) {
[09:33:05.201]                   name <- removed[[kk]]
[09:33:05.201]                   NAME <- NAMES[[kk]]
[09:33:05.201]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.201]                     next
[09:33:05.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.201]                 }
[09:33:05.201]                 if (length(args) > 0) 
[09:33:05.201]                   base::do.call(base::Sys.setenv, args = args)
[09:33:05.201]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:05.201]             }
[09:33:05.201]             else {
[09:33:05.201]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:05.201]             }
[09:33:05.201]             {
[09:33:05.201]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:05.201]                   0L) {
[09:33:05.201]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:05.201]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:05.201]                   base::options(opts)
[09:33:05.201]                 }
[09:33:05.201]                 {
[09:33:05.201]                   {
[09:33:05.201]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:05.201]                     NULL
[09:33:05.201]                   }
[09:33:05.201]                   options(future.plan = NULL)
[09:33:05.201]                   if (is.na(NA_character_)) 
[09:33:05.201]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.201]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:05.201]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:05.201]                     .init = FALSE)
[09:33:05.201]                 }
[09:33:05.201]             }
[09:33:05.201]         }
[09:33:05.201]     })
[09:33:05.201]     if (TRUE) {
[09:33:05.201]         base::sink(type = "output", split = FALSE)
[09:33:05.201]         if (TRUE) {
[09:33:05.201]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:05.201]         }
[09:33:05.201]         else {
[09:33:05.201]             ...future.result["stdout"] <- base::list(NULL)
[09:33:05.201]         }
[09:33:05.201]         base::close(...future.stdout)
[09:33:05.201]         ...future.stdout <- NULL
[09:33:05.201]     }
[09:33:05.201]     ...future.result$conditions <- ...future.conditions
[09:33:05.201]     ...future.result$finished <- base::Sys.time()
[09:33:05.201]     ...future.result
[09:33:05.201] }
[09:33:05.204] MultisessionFuture started
[09:33:05.204] - Launch lazy future ... done
[09:33:05.204] run() for ‘MultisessionFuture’ ... done
[09:33:05.204] result() for ClusterFuture ...
[09:33:05.204] receiveMessageFromWorker() for ClusterFuture ...
[09:33:05.204] - Validating connection of MultisessionFuture
[09:33:05.205] - received message: FutureResult
[09:33:05.205] - Received FutureResult
[09:33:05.205] - Erased future from FutureRegistry
[09:33:05.205] result() for ClusterFuture ...
[09:33:05.205] - result already collected: FutureResult
[09:33:05.206] result() for ClusterFuture ... done
[09:33:05.206] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:05.206] result() for ClusterFuture ... done
[09:33:05.206] result() for ClusterFuture ...
[09:33:05.206] - result already collected: FutureResult
[09:33:05.206] result() for ClusterFuture ... done
[09:33:05.206] result() for ClusterFuture ...
[09:33:05.206] - result already collected: FutureResult
[09:33:05.206] result() for ClusterFuture ... done
[1] 42
[09:33:05.206] result() for ClusterFuture ...
[09:33:05.206] - result already collected: FutureResult
[09:33:05.207] result() for ClusterFuture ... done
- stdout = NA
[09:33:05.207] getGlobalsAndPackages() ...
[09:33:05.207] Searching for globals...
[09:33:05.210] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:05.210] Searching for globals ... DONE
[09:33:05.210] Resolving globals: FALSE
[09:33:05.210] 
[09:33:05.210] - packages: [1] ‘utils’
[09:33:05.210] getGlobalsAndPackages() ... DONE
[09:33:05.211] run() for ‘Future’ ...
[09:33:05.211] - state: ‘created’
[09:33:05.211] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:33:05.225] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:05.225] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:33:05.225]   - Field: ‘node’
[09:33:05.225]   - Field: ‘label’
[09:33:05.225]   - Field: ‘local’
[09:33:05.225]   - Field: ‘owner’
[09:33:05.225]   - Field: ‘envir’
[09:33:05.225]   - Field: ‘workers’
[09:33:05.225]   - Field: ‘packages’
[09:33:05.225]   - Field: ‘gc’
[09:33:05.225]   - Field: ‘conditions’
[09:33:05.226]   - Field: ‘persistent’
[09:33:05.226]   - Field: ‘expr’
[09:33:05.226]   - Field: ‘uuid’
[09:33:05.226]   - Field: ‘seed’
[09:33:05.226]   - Field: ‘version’
[09:33:05.226]   - Field: ‘result’
[09:33:05.226]   - Field: ‘asynchronous’
[09:33:05.226]   - Field: ‘calls’
[09:33:05.226]   - Field: ‘globals’
[09:33:05.226]   - Field: ‘stdout’
[09:33:05.226]   - Field: ‘earlySignal’
[09:33:05.226]   - Field: ‘lazy’
[09:33:05.227]   - Field: ‘state’
[09:33:05.227] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:33:05.227] - Launch lazy future ...
[09:33:05.227] Packages needed by the future expression (n = 1): ‘utils’
[09:33:05.227] Packages needed by future strategies (n = 0): <none>
[09:33:05.229] {
[09:33:05.229]     {
[09:33:05.229]         {
[09:33:05.229]             ...future.startTime <- base::Sys.time()
[09:33:05.229]             {
[09:33:05.229]                 {
[09:33:05.229]                   {
[09:33:05.229]                     {
[09:33:05.229]                       {
[09:33:05.229]                         base::local({
[09:33:05.229]                           has_future <- base::requireNamespace("future", 
[09:33:05.229]                             quietly = TRUE)
[09:33:05.229]                           if (has_future) {
[09:33:05.229]                             ns <- base::getNamespace("future")
[09:33:05.229]                             version <- ns[[".package"]][["version"]]
[09:33:05.229]                             if (is.null(version)) 
[09:33:05.229]                               version <- utils::packageVersion("future")
[09:33:05.229]                           }
[09:33:05.229]                           else {
[09:33:05.229]                             version <- NULL
[09:33:05.229]                           }
[09:33:05.229]                           if (!has_future || version < "1.8.0") {
[09:33:05.229]                             info <- base::c(r_version = base::gsub("R version ", 
[09:33:05.229]                               "", base::R.version$version.string), 
[09:33:05.229]                               platform = base::sprintf("%s (%s-bit)", 
[09:33:05.229]                                 base::R.version$platform, 8 * 
[09:33:05.229]                                   base::.Machine$sizeof.pointer), 
[09:33:05.229]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:05.229]                                 "release", "version")], collapse = " "), 
[09:33:05.229]                               hostname = base::Sys.info()[["nodename"]])
[09:33:05.229]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:33:05.229]                               info)
[09:33:05.229]                             info <- base::paste(info, collapse = "; ")
[09:33:05.229]                             if (!has_future) {
[09:33:05.229]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:05.229]                                 info)
[09:33:05.229]                             }
[09:33:05.229]                             else {
[09:33:05.229]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:05.229]                                 info, version)
[09:33:05.229]                             }
[09:33:05.229]                             base::stop(msg)
[09:33:05.229]                           }
[09:33:05.229]                         })
[09:33:05.229]                       }
[09:33:05.229]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:05.229]                       base::options(mc.cores = 1L)
[09:33:05.229]                     }
[09:33:05.229]                     base::local({
[09:33:05.229]                       for (pkg in "utils") {
[09:33:05.229]                         base::loadNamespace(pkg)
[09:33:05.229]                         base::library(pkg, character.only = TRUE)
[09:33:05.229]                       }
[09:33:05.229]                     })
[09:33:05.229]                   }
[09:33:05.229]                   ...future.strategy.old <- future::plan("list")
[09:33:05.229]                   options(future.plan = NULL)
[09:33:05.229]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.229]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:05.229]                 }
[09:33:05.229]                 ...future.workdir <- getwd()
[09:33:05.229]             }
[09:33:05.229]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:05.229]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:05.229]         }
[09:33:05.229]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:05.229]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:05.229]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:05.229]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:05.229]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:05.229]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:05.229]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:05.229]             base::names(...future.oldOptions))
[09:33:05.229]     }
[09:33:05.229]     if (TRUE) {
[09:33:05.229]     }
[09:33:05.229]     else {
[09:33:05.229]         if (NA) {
[09:33:05.229]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:05.229]                 open = "w")
[09:33:05.229]         }
[09:33:05.229]         else {
[09:33:05.229]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:05.229]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:05.229]         }
[09:33:05.229]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:05.229]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:05.229]             base::sink(type = "output", split = FALSE)
[09:33:05.229]             base::close(...future.stdout)
[09:33:05.229]         }, add = TRUE)
[09:33:05.229]     }
[09:33:05.229]     ...future.frame <- base::sys.nframe()
[09:33:05.229]     ...future.conditions <- base::list()
[09:33:05.229]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:05.229]     if (FALSE) {
[09:33:05.229]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:05.229]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:05.229]     }
[09:33:05.229]     ...future.result <- base::tryCatch({
[09:33:05.229]         base::withCallingHandlers({
[09:33:05.229]             ...future.value <- base::withVisible(base::local({
[09:33:05.229]                 ...future.makeSendCondition <- base::local({
[09:33:05.229]                   sendCondition <- NULL
[09:33:05.229]                   function(frame = 1L) {
[09:33:05.229]                     if (is.function(sendCondition)) 
[09:33:05.229]                       return(sendCondition)
[09:33:05.229]                     ns <- getNamespace("parallel")
[09:33:05.229]                     if (exists("sendData", mode = "function", 
[09:33:05.229]                       envir = ns)) {
[09:33:05.229]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:05.229]                         envir = ns)
[09:33:05.229]                       envir <- sys.frame(frame)
[09:33:05.229]                       master <- NULL
[09:33:05.229]                       while (!identical(envir, .GlobalEnv) && 
[09:33:05.229]                         !identical(envir, emptyenv())) {
[09:33:05.229]                         if (exists("master", mode = "list", envir = envir, 
[09:33:05.229]                           inherits = FALSE)) {
[09:33:05.229]                           master <- get("master", mode = "list", 
[09:33:05.229]                             envir = envir, inherits = FALSE)
[09:33:05.229]                           if (inherits(master, c("SOCKnode", 
[09:33:05.229]                             "SOCK0node"))) {
[09:33:05.229]                             sendCondition <<- function(cond) {
[09:33:05.229]                               data <- list(type = "VALUE", value = cond, 
[09:33:05.229]                                 success = TRUE)
[09:33:05.229]                               parallel_sendData(master, data)
[09:33:05.229]                             }
[09:33:05.229]                             return(sendCondition)
[09:33:05.229]                           }
[09:33:05.229]                         }
[09:33:05.229]                         frame <- frame + 1L
[09:33:05.229]                         envir <- sys.frame(frame)
[09:33:05.229]                       }
[09:33:05.229]                     }
[09:33:05.229]                     sendCondition <<- function(cond) NULL
[09:33:05.229]                   }
[09:33:05.229]                 })
[09:33:05.229]                 withCallingHandlers({
[09:33:05.229]                   {
[09:33:05.229]                     print(1:50)
[09:33:05.229]                     str(1:50)
[09:33:05.229]                     cat(letters, sep = "-")
[09:33:05.229]                     cat(1:6, collapse = "\n")
[09:33:05.229]                     write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:05.229]                     42L
[09:33:05.229]                   }
[09:33:05.229]                 }, immediateCondition = function(cond) {
[09:33:05.229]                   sendCondition <- ...future.makeSendCondition()
[09:33:05.229]                   sendCondition(cond)
[09:33:05.229]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.229]                   {
[09:33:05.229]                     inherits <- base::inherits
[09:33:05.229]                     invokeRestart <- base::invokeRestart
[09:33:05.229]                     is.null <- base::is.null
[09:33:05.229]                     muffled <- FALSE
[09:33:05.229]                     if (inherits(cond, "message")) {
[09:33:05.229]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:05.229]                       if (muffled) 
[09:33:05.229]                         invokeRestart("muffleMessage")
[09:33:05.229]                     }
[09:33:05.229]                     else if (inherits(cond, "warning")) {
[09:33:05.229]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:05.229]                       if (muffled) 
[09:33:05.229]                         invokeRestart("muffleWarning")
[09:33:05.229]                     }
[09:33:05.229]                     else if (inherits(cond, "condition")) {
[09:33:05.229]                       if (!is.null(pattern)) {
[09:33:05.229]                         computeRestarts <- base::computeRestarts
[09:33:05.229]                         grepl <- base::grepl
[09:33:05.229]                         restarts <- computeRestarts(cond)
[09:33:05.229]                         for (restart in restarts) {
[09:33:05.229]                           name <- restart$name
[09:33:05.229]                           if (is.null(name)) 
[09:33:05.229]                             next
[09:33:05.229]                           if (!grepl(pattern, name)) 
[09:33:05.229]                             next
[09:33:05.229]                           invokeRestart(restart)
[09:33:05.229]                           muffled <- TRUE
[09:33:05.229]                           break
[09:33:05.229]                         }
[09:33:05.229]                       }
[09:33:05.229]                     }
[09:33:05.229]                     invisible(muffled)
[09:33:05.229]                   }
[09:33:05.229]                   muffleCondition(cond)
[09:33:05.229]                 })
[09:33:05.229]             }))
[09:33:05.229]             future::FutureResult(value = ...future.value$value, 
[09:33:05.229]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.229]                   ...future.rng), globalenv = if (FALSE) 
[09:33:05.229]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:05.229]                     ...future.globalenv.names))
[09:33:05.229]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:05.229]         }, condition = base::local({
[09:33:05.229]             c <- base::c
[09:33:05.229]             inherits <- base::inherits
[09:33:05.229]             invokeRestart <- base::invokeRestart
[09:33:05.229]             length <- base::length
[09:33:05.229]             list <- base::list
[09:33:05.229]             seq.int <- base::seq.int
[09:33:05.229]             signalCondition <- base::signalCondition
[09:33:05.229]             sys.calls <- base::sys.calls
[09:33:05.229]             `[[` <- base::`[[`
[09:33:05.229]             `+` <- base::`+`
[09:33:05.229]             `<<-` <- base::`<<-`
[09:33:05.229]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:05.229]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:05.229]                   3L)]
[09:33:05.229]             }
[09:33:05.229]             function(cond) {
[09:33:05.229]                 is_error <- inherits(cond, "error")
[09:33:05.229]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:05.229]                   NULL)
[09:33:05.229]                 if (is_error) {
[09:33:05.229]                   sessionInformation <- function() {
[09:33:05.229]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:05.229]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:05.229]                       search = base::search(), system = base::Sys.info())
[09:33:05.229]                   }
[09:33:05.229]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.229]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:05.229]                     cond$call), session = sessionInformation(), 
[09:33:05.229]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:05.229]                   signalCondition(cond)
[09:33:05.229]                 }
[09:33:05.229]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:05.229]                 "immediateCondition"))) {
[09:33:05.229]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:05.229]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.229]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:05.229]                   if (TRUE && !signal) {
[09:33:05.229]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.229]                     {
[09:33:05.229]                       inherits <- base::inherits
[09:33:05.229]                       invokeRestart <- base::invokeRestart
[09:33:05.229]                       is.null <- base::is.null
[09:33:05.229]                       muffled <- FALSE
[09:33:05.229]                       if (inherits(cond, "message")) {
[09:33:05.229]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.229]                         if (muffled) 
[09:33:05.229]                           invokeRestart("muffleMessage")
[09:33:05.229]                       }
[09:33:05.229]                       else if (inherits(cond, "warning")) {
[09:33:05.229]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.229]                         if (muffled) 
[09:33:05.229]                           invokeRestart("muffleWarning")
[09:33:05.229]                       }
[09:33:05.229]                       else if (inherits(cond, "condition")) {
[09:33:05.229]                         if (!is.null(pattern)) {
[09:33:05.229]                           computeRestarts <- base::computeRestarts
[09:33:05.229]                           grepl <- base::grepl
[09:33:05.229]                           restarts <- computeRestarts(cond)
[09:33:05.229]                           for (restart in restarts) {
[09:33:05.229]                             name <- restart$name
[09:33:05.229]                             if (is.null(name)) 
[09:33:05.229]                               next
[09:33:05.229]                             if (!grepl(pattern, name)) 
[09:33:05.229]                               next
[09:33:05.229]                             invokeRestart(restart)
[09:33:05.229]                             muffled <- TRUE
[09:33:05.229]                             break
[09:33:05.229]                           }
[09:33:05.229]                         }
[09:33:05.229]                       }
[09:33:05.229]                       invisible(muffled)
[09:33:05.229]                     }
[09:33:05.229]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.229]                   }
[09:33:05.229]                 }
[09:33:05.229]                 else {
[09:33:05.229]                   if (TRUE) {
[09:33:05.229]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.229]                     {
[09:33:05.229]                       inherits <- base::inherits
[09:33:05.229]                       invokeRestart <- base::invokeRestart
[09:33:05.229]                       is.null <- base::is.null
[09:33:05.229]                       muffled <- FALSE
[09:33:05.229]                       if (inherits(cond, "message")) {
[09:33:05.229]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.229]                         if (muffled) 
[09:33:05.229]                           invokeRestart("muffleMessage")
[09:33:05.229]                       }
[09:33:05.229]                       else if (inherits(cond, "warning")) {
[09:33:05.229]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.229]                         if (muffled) 
[09:33:05.229]                           invokeRestart("muffleWarning")
[09:33:05.229]                       }
[09:33:05.229]                       else if (inherits(cond, "condition")) {
[09:33:05.229]                         if (!is.null(pattern)) {
[09:33:05.229]                           computeRestarts <- base::computeRestarts
[09:33:05.229]                           grepl <- base::grepl
[09:33:05.229]                           restarts <- computeRestarts(cond)
[09:33:05.229]                           for (restart in restarts) {
[09:33:05.229]                             name <- restart$name
[09:33:05.229]                             if (is.null(name)) 
[09:33:05.229]                               next
[09:33:05.229]                             if (!grepl(pattern, name)) 
[09:33:05.229]                               next
[09:33:05.229]                             invokeRestart(restart)
[09:33:05.229]                             muffled <- TRUE
[09:33:05.229]                             break
[09:33:05.229]                           }
[09:33:05.229]                         }
[09:33:05.229]                       }
[09:33:05.229]                       invisible(muffled)
[09:33:05.229]                     }
[09:33:05.229]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.229]                   }
[09:33:05.229]                 }
[09:33:05.229]             }
[09:33:05.229]         }))
[09:33:05.229]     }, error = function(ex) {
[09:33:05.229]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:05.229]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.229]                 ...future.rng), started = ...future.startTime, 
[09:33:05.229]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:05.229]             version = "1.8"), class = "FutureResult")
[09:33:05.229]     }, finally = {
[09:33:05.229]         if (!identical(...future.workdir, getwd())) 
[09:33:05.229]             setwd(...future.workdir)
[09:33:05.229]         {
[09:33:05.229]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:05.229]                 ...future.oldOptions$nwarnings <- NULL
[09:33:05.229]             }
[09:33:05.229]             base::options(...future.oldOptions)
[09:33:05.229]             if (.Platform$OS.type == "windows") {
[09:33:05.229]                 old_names <- names(...future.oldEnvVars)
[09:33:05.229]                 envs <- base::Sys.getenv()
[09:33:05.229]                 names <- names(envs)
[09:33:05.229]                 common <- intersect(names, old_names)
[09:33:05.229]                 added <- setdiff(names, old_names)
[09:33:05.229]                 removed <- setdiff(old_names, names)
[09:33:05.229]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:05.229]                   envs[common]]
[09:33:05.229]                 NAMES <- toupper(changed)
[09:33:05.229]                 args <- list()
[09:33:05.229]                 for (kk in seq_along(NAMES)) {
[09:33:05.229]                   name <- changed[[kk]]
[09:33:05.229]                   NAME <- NAMES[[kk]]
[09:33:05.229]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.229]                     next
[09:33:05.229]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.229]                 }
[09:33:05.229]                 NAMES <- toupper(added)
[09:33:05.229]                 for (kk in seq_along(NAMES)) {
[09:33:05.229]                   name <- added[[kk]]
[09:33:05.229]                   NAME <- NAMES[[kk]]
[09:33:05.229]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.229]                     next
[09:33:05.229]                   args[[name]] <- ""
[09:33:05.229]                 }
[09:33:05.229]                 NAMES <- toupper(removed)
[09:33:05.229]                 for (kk in seq_along(NAMES)) {
[09:33:05.229]                   name <- removed[[kk]]
[09:33:05.229]                   NAME <- NAMES[[kk]]
[09:33:05.229]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.229]                     next
[09:33:05.229]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.229]                 }
[09:33:05.229]                 if (length(args) > 0) 
[09:33:05.229]                   base::do.call(base::Sys.setenv, args = args)
[09:33:05.229]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:05.229]             }
[09:33:05.229]             else {
[09:33:05.229]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:05.229]             }
[09:33:05.229]             {
[09:33:05.229]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:05.229]                   0L) {
[09:33:05.229]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:05.229]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:05.229]                   base::options(opts)
[09:33:05.229]                 }
[09:33:05.229]                 {
[09:33:05.229]                   {
[09:33:05.229]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:05.229]                     NULL
[09:33:05.229]                   }
[09:33:05.229]                   options(future.plan = NULL)
[09:33:05.229]                   if (is.na(NA_character_)) 
[09:33:05.229]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.229]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:05.229]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:05.229]                     .init = FALSE)
[09:33:05.229]                 }
[09:33:05.229]             }
[09:33:05.229]         }
[09:33:05.229]     })
[09:33:05.229]     if (FALSE) {
[09:33:05.229]         base::sink(type = "output", split = FALSE)
[09:33:05.229]         if (NA) {
[09:33:05.229]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:05.229]         }
[09:33:05.229]         else {
[09:33:05.229]             ...future.result["stdout"] <- base::list(NULL)
[09:33:05.229]         }
[09:33:05.229]         base::close(...future.stdout)
[09:33:05.229]         ...future.stdout <- NULL
[09:33:05.229]     }
[09:33:05.229]     ...future.result$conditions <- ...future.conditions
[09:33:05.229]     ...future.result$finished <- base::Sys.time()
[09:33:05.229]     ...future.result
[09:33:05.229] }
[09:33:05.232] MultisessionFuture started
[09:33:05.232] - Launch lazy future ... done
[09:33:05.232] run() for ‘MultisessionFuture’ ... done
[09:33:05.232] result() for ClusterFuture ...
[09:33:05.232] receiveMessageFromWorker() for ClusterFuture ...
[09:33:05.232] - Validating connection of MultisessionFuture
[09:33:05.278] - received message: FutureResult
[09:33:05.278] - Received FutureResult
[09:33:05.278] - Erased future from FutureRegistry
[09:33:05.278] result() for ClusterFuture ...
[09:33:05.278] - result already collected: FutureResult
[09:33:05.278] result() for ClusterFuture ... done
[09:33:05.278] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:05.279] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 09:33:05"
 $ finished    : POSIXct[1:1], format: "2024-12-19 09:33:05"
 $ session_uuid: chr "27110799-bfcd-a9e1-d348-f52d70de2812"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "8f1daa72e372"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "8f1daa72e372" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 50530
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 09:33:04"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[09:33:05.286] result() for ClusterFuture ...
[09:33:05.286] - result already collected: FutureResult
[09:33:05.286] result() for ClusterFuture ... done
[09:33:05.286] result() for ClusterFuture ...
[09:33:05.286] - result already collected: FutureResult
[09:33:05.286] result() for ClusterFuture ... done
[09:33:05.286] getGlobalsAndPackages() ...
[09:33:05.286] Searching for globals...
[09:33:05.289] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[09:33:05.289] Searching for globals ... DONE
[09:33:05.289] Resolving globals: FALSE
[09:33:05.290] 
[09:33:05.290] - packages: [1] ‘utils’
[09:33:05.290] getGlobalsAndPackages() ... DONE
[09:33:05.290] run() for ‘Future’ ...
[09:33:05.290] - state: ‘created’
[09:33:05.290] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:33:05.304] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:05.304] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:33:05.304]   - Field: ‘node’
[09:33:05.304]   - Field: ‘label’
[09:33:05.304]   - Field: ‘local’
[09:33:05.304]   - Field: ‘owner’
[09:33:05.304]   - Field: ‘envir’
[09:33:05.304]   - Field: ‘workers’
[09:33:05.305]   - Field: ‘packages’
[09:33:05.305]   - Field: ‘gc’
[09:33:05.305]   - Field: ‘conditions’
[09:33:05.305]   - Field: ‘persistent’
[09:33:05.305]   - Field: ‘expr’
[09:33:05.305]   - Field: ‘uuid’
[09:33:05.305]   - Field: ‘seed’
[09:33:05.305]   - Field: ‘version’
[09:33:05.305]   - Field: ‘result’
[09:33:05.305]   - Field: ‘asynchronous’
[09:33:05.305]   - Field: ‘calls’
[09:33:05.305]   - Field: ‘globals’
[09:33:05.306]   - Field: ‘stdout’
[09:33:05.306]   - Field: ‘earlySignal’
[09:33:05.306]   - Field: ‘lazy’
[09:33:05.306]   - Field: ‘state’
[09:33:05.306] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:33:05.306] - Launch lazy future ...
[09:33:05.306] Packages needed by the future expression (n = 1): ‘utils’
[09:33:05.306] Packages needed by future strategies (n = 0): <none>
[09:33:05.307] {
[09:33:05.307]     {
[09:33:05.307]         {
[09:33:05.307]             ...future.startTime <- base::Sys.time()
[09:33:05.307]             {
[09:33:05.307]                 {
[09:33:05.307]                   {
[09:33:05.307]                     {
[09:33:05.307]                       {
[09:33:05.307]                         base::local({
[09:33:05.307]                           has_future <- base::requireNamespace("future", 
[09:33:05.307]                             quietly = TRUE)
[09:33:05.307]                           if (has_future) {
[09:33:05.307]                             ns <- base::getNamespace("future")
[09:33:05.307]                             version <- ns[[".package"]][["version"]]
[09:33:05.307]                             if (is.null(version)) 
[09:33:05.307]                               version <- utils::packageVersion("future")
[09:33:05.307]                           }
[09:33:05.307]                           else {
[09:33:05.307]                             version <- NULL
[09:33:05.307]                           }
[09:33:05.307]                           if (!has_future || version < "1.8.0") {
[09:33:05.307]                             info <- base::c(r_version = base::gsub("R version ", 
[09:33:05.307]                               "", base::R.version$version.string), 
[09:33:05.307]                               platform = base::sprintf("%s (%s-bit)", 
[09:33:05.307]                                 base::R.version$platform, 8 * 
[09:33:05.307]                                   base::.Machine$sizeof.pointer), 
[09:33:05.307]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:05.307]                                 "release", "version")], collapse = " "), 
[09:33:05.307]                               hostname = base::Sys.info()[["nodename"]])
[09:33:05.307]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:33:05.307]                               info)
[09:33:05.307]                             info <- base::paste(info, collapse = "; ")
[09:33:05.307]                             if (!has_future) {
[09:33:05.307]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:05.307]                                 info)
[09:33:05.307]                             }
[09:33:05.307]                             else {
[09:33:05.307]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:05.307]                                 info, version)
[09:33:05.307]                             }
[09:33:05.307]                             base::stop(msg)
[09:33:05.307]                           }
[09:33:05.307]                         })
[09:33:05.307]                       }
[09:33:05.307]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:05.307]                       base::options(mc.cores = 1L)
[09:33:05.307]                     }
[09:33:05.307]                     base::local({
[09:33:05.307]                       for (pkg in "utils") {
[09:33:05.307]                         base::loadNamespace(pkg)
[09:33:05.307]                         base::library(pkg, character.only = TRUE)
[09:33:05.307]                       }
[09:33:05.307]                     })
[09:33:05.307]                   }
[09:33:05.307]                   ...future.strategy.old <- future::plan("list")
[09:33:05.307]                   options(future.plan = NULL)
[09:33:05.307]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.307]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:05.307]                 }
[09:33:05.307]                 ...future.workdir <- getwd()
[09:33:05.307]             }
[09:33:05.307]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:05.307]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:05.307]         }
[09:33:05.307]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:05.307]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:05.307]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:05.307]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:05.307]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:05.307]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:05.307]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:05.307]             base::names(...future.oldOptions))
[09:33:05.307]     }
[09:33:05.307]     if (TRUE) {
[09:33:05.307]     }
[09:33:05.307]     else {
[09:33:05.307]         if (NA) {
[09:33:05.307]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:05.307]                 open = "w")
[09:33:05.307]         }
[09:33:05.307]         else {
[09:33:05.307]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:05.307]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:05.307]         }
[09:33:05.307]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:05.307]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:05.307]             base::sink(type = "output", split = FALSE)
[09:33:05.307]             base::close(...future.stdout)
[09:33:05.307]         }, add = TRUE)
[09:33:05.307]     }
[09:33:05.307]     ...future.frame <- base::sys.nframe()
[09:33:05.307]     ...future.conditions <- base::list()
[09:33:05.307]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:05.307]     if (FALSE) {
[09:33:05.307]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:05.307]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:05.307]     }
[09:33:05.307]     ...future.result <- base::tryCatch({
[09:33:05.307]         base::withCallingHandlers({
[09:33:05.307]             ...future.value <- base::withVisible(base::local({
[09:33:05.307]                 ...future.makeSendCondition <- base::local({
[09:33:05.307]                   sendCondition <- NULL
[09:33:05.307]                   function(frame = 1L) {
[09:33:05.307]                     if (is.function(sendCondition)) 
[09:33:05.307]                       return(sendCondition)
[09:33:05.307]                     ns <- getNamespace("parallel")
[09:33:05.307]                     if (exists("sendData", mode = "function", 
[09:33:05.307]                       envir = ns)) {
[09:33:05.307]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:05.307]                         envir = ns)
[09:33:05.307]                       envir <- sys.frame(frame)
[09:33:05.307]                       master <- NULL
[09:33:05.307]                       while (!identical(envir, .GlobalEnv) && 
[09:33:05.307]                         !identical(envir, emptyenv())) {
[09:33:05.307]                         if (exists("master", mode = "list", envir = envir, 
[09:33:05.307]                           inherits = FALSE)) {
[09:33:05.307]                           master <- get("master", mode = "list", 
[09:33:05.307]                             envir = envir, inherits = FALSE)
[09:33:05.307]                           if (inherits(master, c("SOCKnode", 
[09:33:05.307]                             "SOCK0node"))) {
[09:33:05.307]                             sendCondition <<- function(cond) {
[09:33:05.307]                               data <- list(type = "VALUE", value = cond, 
[09:33:05.307]                                 success = TRUE)
[09:33:05.307]                               parallel_sendData(master, data)
[09:33:05.307]                             }
[09:33:05.307]                             return(sendCondition)
[09:33:05.307]                           }
[09:33:05.307]                         }
[09:33:05.307]                         frame <- frame + 1L
[09:33:05.307]                         envir <- sys.frame(frame)
[09:33:05.307]                       }
[09:33:05.307]                     }
[09:33:05.307]                     sendCondition <<- function(cond) NULL
[09:33:05.307]                   }
[09:33:05.307]                 })
[09:33:05.307]                 withCallingHandlers({
[09:33:05.307]                   {
[09:33:05.307]                     print(1:50)
[09:33:05.307]                     str(1:50)
[09:33:05.307]                     cat(letters, sep = "-")
[09:33:05.307]                     cat(1:6, collapse = "\n")
[09:33:05.307]                     write.table(datasets::iris[1:10, ], sep = "\t")
[09:33:05.307]                     42L
[09:33:05.307]                   }
[09:33:05.307]                 }, immediateCondition = function(cond) {
[09:33:05.307]                   sendCondition <- ...future.makeSendCondition()
[09:33:05.307]                   sendCondition(cond)
[09:33:05.307]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.307]                   {
[09:33:05.307]                     inherits <- base::inherits
[09:33:05.307]                     invokeRestart <- base::invokeRestart
[09:33:05.307]                     is.null <- base::is.null
[09:33:05.307]                     muffled <- FALSE
[09:33:05.307]                     if (inherits(cond, "message")) {
[09:33:05.307]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:05.307]                       if (muffled) 
[09:33:05.307]                         invokeRestart("muffleMessage")
[09:33:05.307]                     }
[09:33:05.307]                     else if (inherits(cond, "warning")) {
[09:33:05.307]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:05.307]                       if (muffled) 
[09:33:05.307]                         invokeRestart("muffleWarning")
[09:33:05.307]                     }
[09:33:05.307]                     else if (inherits(cond, "condition")) {
[09:33:05.307]                       if (!is.null(pattern)) {
[09:33:05.307]                         computeRestarts <- base::computeRestarts
[09:33:05.307]                         grepl <- base::grepl
[09:33:05.307]                         restarts <- computeRestarts(cond)
[09:33:05.307]                         for (restart in restarts) {
[09:33:05.307]                           name <- restart$name
[09:33:05.307]                           if (is.null(name)) 
[09:33:05.307]                             next
[09:33:05.307]                           if (!grepl(pattern, name)) 
[09:33:05.307]                             next
[09:33:05.307]                           invokeRestart(restart)
[09:33:05.307]                           muffled <- TRUE
[09:33:05.307]                           break
[09:33:05.307]                         }
[09:33:05.307]                       }
[09:33:05.307]                     }
[09:33:05.307]                     invisible(muffled)
[09:33:05.307]                   }
[09:33:05.307]                   muffleCondition(cond)
[09:33:05.307]                 })
[09:33:05.307]             }))
[09:33:05.307]             future::FutureResult(value = ...future.value$value, 
[09:33:05.307]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.307]                   ...future.rng), globalenv = if (FALSE) 
[09:33:05.307]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:05.307]                     ...future.globalenv.names))
[09:33:05.307]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:05.307]         }, condition = base::local({
[09:33:05.307]             c <- base::c
[09:33:05.307]             inherits <- base::inherits
[09:33:05.307]             invokeRestart <- base::invokeRestart
[09:33:05.307]             length <- base::length
[09:33:05.307]             list <- base::list
[09:33:05.307]             seq.int <- base::seq.int
[09:33:05.307]             signalCondition <- base::signalCondition
[09:33:05.307]             sys.calls <- base::sys.calls
[09:33:05.307]             `[[` <- base::`[[`
[09:33:05.307]             `+` <- base::`+`
[09:33:05.307]             `<<-` <- base::`<<-`
[09:33:05.307]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:05.307]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:05.307]                   3L)]
[09:33:05.307]             }
[09:33:05.307]             function(cond) {
[09:33:05.307]                 is_error <- inherits(cond, "error")
[09:33:05.307]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:05.307]                   NULL)
[09:33:05.307]                 if (is_error) {
[09:33:05.307]                   sessionInformation <- function() {
[09:33:05.307]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:05.307]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:05.307]                       search = base::search(), system = base::Sys.info())
[09:33:05.307]                   }
[09:33:05.307]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.307]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:05.307]                     cond$call), session = sessionInformation(), 
[09:33:05.307]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:05.307]                   signalCondition(cond)
[09:33:05.307]                 }
[09:33:05.307]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:05.307]                 "immediateCondition"))) {
[09:33:05.307]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:05.307]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.307]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:05.307]                   if (TRUE && !signal) {
[09:33:05.307]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.307]                     {
[09:33:05.307]                       inherits <- base::inherits
[09:33:05.307]                       invokeRestart <- base::invokeRestart
[09:33:05.307]                       is.null <- base::is.null
[09:33:05.307]                       muffled <- FALSE
[09:33:05.307]                       if (inherits(cond, "message")) {
[09:33:05.307]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.307]                         if (muffled) 
[09:33:05.307]                           invokeRestart("muffleMessage")
[09:33:05.307]                       }
[09:33:05.307]                       else if (inherits(cond, "warning")) {
[09:33:05.307]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.307]                         if (muffled) 
[09:33:05.307]                           invokeRestart("muffleWarning")
[09:33:05.307]                       }
[09:33:05.307]                       else if (inherits(cond, "condition")) {
[09:33:05.307]                         if (!is.null(pattern)) {
[09:33:05.307]                           computeRestarts <- base::computeRestarts
[09:33:05.307]                           grepl <- base::grepl
[09:33:05.307]                           restarts <- computeRestarts(cond)
[09:33:05.307]                           for (restart in restarts) {
[09:33:05.307]                             name <- restart$name
[09:33:05.307]                             if (is.null(name)) 
[09:33:05.307]                               next
[09:33:05.307]                             if (!grepl(pattern, name)) 
[09:33:05.307]                               next
[09:33:05.307]                             invokeRestart(restart)
[09:33:05.307]                             muffled <- TRUE
[09:33:05.307]                             break
[09:33:05.307]                           }
[09:33:05.307]                         }
[09:33:05.307]                       }
[09:33:05.307]                       invisible(muffled)
[09:33:05.307]                     }
[09:33:05.307]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.307]                   }
[09:33:05.307]                 }
[09:33:05.307]                 else {
[09:33:05.307]                   if (TRUE) {
[09:33:05.307]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.307]                     {
[09:33:05.307]                       inherits <- base::inherits
[09:33:05.307]                       invokeRestart <- base::invokeRestart
[09:33:05.307]                       is.null <- base::is.null
[09:33:05.307]                       muffled <- FALSE
[09:33:05.307]                       if (inherits(cond, "message")) {
[09:33:05.307]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.307]                         if (muffled) 
[09:33:05.307]                           invokeRestart("muffleMessage")
[09:33:05.307]                       }
[09:33:05.307]                       else if (inherits(cond, "warning")) {
[09:33:05.307]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.307]                         if (muffled) 
[09:33:05.307]                           invokeRestart("muffleWarning")
[09:33:05.307]                       }
[09:33:05.307]                       else if (inherits(cond, "condition")) {
[09:33:05.307]                         if (!is.null(pattern)) {
[09:33:05.307]                           computeRestarts <- base::computeRestarts
[09:33:05.307]                           grepl <- base::grepl
[09:33:05.307]                           restarts <- computeRestarts(cond)
[09:33:05.307]                           for (restart in restarts) {
[09:33:05.307]                             name <- restart$name
[09:33:05.307]                             if (is.null(name)) 
[09:33:05.307]                               next
[09:33:05.307]                             if (!grepl(pattern, name)) 
[09:33:05.307]                               next
[09:33:05.307]                             invokeRestart(restart)
[09:33:05.307]                             muffled <- TRUE
[09:33:05.307]                             break
[09:33:05.307]                           }
[09:33:05.307]                         }
[09:33:05.307]                       }
[09:33:05.307]                       invisible(muffled)
[09:33:05.307]                     }
[09:33:05.307]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.307]                   }
[09:33:05.307]                 }
[09:33:05.307]             }
[09:33:05.307]         }))
[09:33:05.307]     }, error = function(ex) {
[09:33:05.307]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:05.307]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.307]                 ...future.rng), started = ...future.startTime, 
[09:33:05.307]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:05.307]             version = "1.8"), class = "FutureResult")
[09:33:05.307]     }, finally = {
[09:33:05.307]         if (!identical(...future.workdir, getwd())) 
[09:33:05.307]             setwd(...future.workdir)
[09:33:05.307]         {
[09:33:05.307]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:05.307]                 ...future.oldOptions$nwarnings <- NULL
[09:33:05.307]             }
[09:33:05.307]             base::options(...future.oldOptions)
[09:33:05.307]             if (.Platform$OS.type == "windows") {
[09:33:05.307]                 old_names <- names(...future.oldEnvVars)
[09:33:05.307]                 envs <- base::Sys.getenv()
[09:33:05.307]                 names <- names(envs)
[09:33:05.307]                 common <- intersect(names, old_names)
[09:33:05.307]                 added <- setdiff(names, old_names)
[09:33:05.307]                 removed <- setdiff(old_names, names)
[09:33:05.307]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:05.307]                   envs[common]]
[09:33:05.307]                 NAMES <- toupper(changed)
[09:33:05.307]                 args <- list()
[09:33:05.307]                 for (kk in seq_along(NAMES)) {
[09:33:05.307]                   name <- changed[[kk]]
[09:33:05.307]                   NAME <- NAMES[[kk]]
[09:33:05.307]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.307]                     next
[09:33:05.307]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.307]                 }
[09:33:05.307]                 NAMES <- toupper(added)
[09:33:05.307]                 for (kk in seq_along(NAMES)) {
[09:33:05.307]                   name <- added[[kk]]
[09:33:05.307]                   NAME <- NAMES[[kk]]
[09:33:05.307]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.307]                     next
[09:33:05.307]                   args[[name]] <- ""
[09:33:05.307]                 }
[09:33:05.307]                 NAMES <- toupper(removed)
[09:33:05.307]                 for (kk in seq_along(NAMES)) {
[09:33:05.307]                   name <- removed[[kk]]
[09:33:05.307]                   NAME <- NAMES[[kk]]
[09:33:05.307]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.307]                     next
[09:33:05.307]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.307]                 }
[09:33:05.307]                 if (length(args) > 0) 
[09:33:05.307]                   base::do.call(base::Sys.setenv, args = args)
[09:33:05.307]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:05.307]             }
[09:33:05.307]             else {
[09:33:05.307]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:05.307]             }
[09:33:05.307]             {
[09:33:05.307]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:05.307]                   0L) {
[09:33:05.307]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:05.307]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:05.307]                   base::options(opts)
[09:33:05.307]                 }
[09:33:05.307]                 {
[09:33:05.307]                   {
[09:33:05.307]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:05.307]                     NULL
[09:33:05.307]                   }
[09:33:05.307]                   options(future.plan = NULL)
[09:33:05.307]                   if (is.na(NA_character_)) 
[09:33:05.307]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.307]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:05.307]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:05.307]                     .init = FALSE)
[09:33:05.307]                 }
[09:33:05.307]             }
[09:33:05.307]         }
[09:33:05.307]     })
[09:33:05.307]     if (FALSE) {
[09:33:05.307]         base::sink(type = "output", split = FALSE)
[09:33:05.307]         if (NA) {
[09:33:05.307]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:05.307]         }
[09:33:05.307]         else {
[09:33:05.307]             ...future.result["stdout"] <- base::list(NULL)
[09:33:05.307]         }
[09:33:05.307]         base::close(...future.stdout)
[09:33:05.307]         ...future.stdout <- NULL
[09:33:05.307]     }
[09:33:05.307]     ...future.result$conditions <- ...future.conditions
[09:33:05.307]     ...future.result$finished <- base::Sys.time()
[09:33:05.307]     ...future.result
[09:33:05.307] }
[09:33:05.310] MultisessionFuture started
[09:33:05.310] - Launch lazy future ... done
[09:33:05.310] run() for ‘MultisessionFuture’ ... done
[09:33:05.310] result() for ClusterFuture ...
[09:33:05.310] receiveMessageFromWorker() for ClusterFuture ...
[09:33:05.310] - Validating connection of MultisessionFuture
[09:33:05.354] - received message: FutureResult
[09:33:05.354] - Received FutureResult
[09:33:05.354] - Erased future from FutureRegistry
[09:33:05.354] result() for ClusterFuture ...
[09:33:05.354] - result already collected: FutureResult
[09:33:05.354] result() for ClusterFuture ... done
[09:33:05.355] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:05.355] result() for ClusterFuture ... done
[09:33:05.355] result() for ClusterFuture ...
[09:33:05.355] - result already collected: FutureResult
[09:33:05.355] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[09:33:05.355] getGlobalsAndPackages() ...
[09:33:05.355] Searching for globals...
[09:33:05.356] - globals found: [1] ‘print’
[09:33:05.356] Searching for globals ... DONE
[09:33:05.356] Resolving globals: FALSE
[09:33:05.356] 
[09:33:05.356] 
[09:33:05.356] getGlobalsAndPackages() ... DONE
[09:33:05.357] run() for ‘Future’ ...
[09:33:05.357] - state: ‘created’
[09:33:05.357] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:33:05.372] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:33:05.372] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:33:05.372]   - Field: ‘node’
[09:33:05.373]   - Field: ‘label’
[09:33:05.373]   - Field: ‘local’
[09:33:05.373]   - Field: ‘owner’
[09:33:05.373]   - Field: ‘envir’
[09:33:05.373]   - Field: ‘workers’
[09:33:05.373]   - Field: ‘packages’
[09:33:05.373]   - Field: ‘gc’
[09:33:05.373]   - Field: ‘conditions’
[09:33:05.374]   - Field: ‘persistent’
[09:33:05.374]   - Field: ‘expr’
[09:33:05.374]   - Field: ‘uuid’
[09:33:05.374]   - Field: ‘seed’
[09:33:05.374]   - Field: ‘version’
[09:33:05.374]   - Field: ‘result’
[09:33:05.374]   - Field: ‘asynchronous’
[09:33:05.375]   - Field: ‘calls’
[09:33:05.375]   - Field: ‘globals’
[09:33:05.375]   - Field: ‘stdout’
[09:33:05.375]   - Field: ‘earlySignal’
[09:33:05.375]   - Field: ‘lazy’
[09:33:05.375]   - Field: ‘state’
[09:33:05.375] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:33:05.375] - Launch lazy future ...
[09:33:05.376] Packages needed by the future expression (n = 0): <none>
[09:33:05.376] Packages needed by future strategies (n = 0): <none>
[09:33:05.376] {
[09:33:05.376]     {
[09:33:05.376]         {
[09:33:05.376]             ...future.startTime <- base::Sys.time()
[09:33:05.376]             {
[09:33:05.376]                 {
[09:33:05.376]                   {
[09:33:05.376]                     {
[09:33:05.376]                       base::local({
[09:33:05.376]                         has_future <- base::requireNamespace("future", 
[09:33:05.376]                           quietly = TRUE)
[09:33:05.376]                         if (has_future) {
[09:33:05.376]                           ns <- base::getNamespace("future")
[09:33:05.376]                           version <- ns[[".package"]][["version"]]
[09:33:05.376]                           if (is.null(version)) 
[09:33:05.376]                             version <- utils::packageVersion("future")
[09:33:05.376]                         }
[09:33:05.376]                         else {
[09:33:05.376]                           version <- NULL
[09:33:05.376]                         }
[09:33:05.376]                         if (!has_future || version < "1.8.0") {
[09:33:05.376]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:05.376]                             "", base::R.version$version.string), 
[09:33:05.376]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:05.376]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:05.376]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:05.376]                               "release", "version")], collapse = " "), 
[09:33:05.376]                             hostname = base::Sys.info()[["nodename"]])
[09:33:05.376]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:05.376]                             info)
[09:33:05.376]                           info <- base::paste(info, collapse = "; ")
[09:33:05.376]                           if (!has_future) {
[09:33:05.376]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:05.376]                               info)
[09:33:05.376]                           }
[09:33:05.376]                           else {
[09:33:05.376]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:05.376]                               info, version)
[09:33:05.376]                           }
[09:33:05.376]                           base::stop(msg)
[09:33:05.376]                         }
[09:33:05.376]                       })
[09:33:05.376]                     }
[09:33:05.376]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:05.376]                     base::options(mc.cores = 1L)
[09:33:05.376]                   }
[09:33:05.376]                   ...future.strategy.old <- future::plan("list")
[09:33:05.376]                   options(future.plan = NULL)
[09:33:05.376]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.376]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:05.376]                 }
[09:33:05.376]                 ...future.workdir <- getwd()
[09:33:05.376]             }
[09:33:05.376]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:05.376]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:05.376]         }
[09:33:05.376]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:05.376]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:05.376]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:05.376]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:05.376]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:05.376]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:05.376]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:05.376]             base::names(...future.oldOptions))
[09:33:05.376]     }
[09:33:05.376]     if (FALSE) {
[09:33:05.376]     }
[09:33:05.376]     else {
[09:33:05.376]         if (TRUE) {
[09:33:05.376]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:05.376]                 open = "w")
[09:33:05.376]         }
[09:33:05.376]         else {
[09:33:05.376]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:05.376]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:05.376]         }
[09:33:05.376]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:05.376]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:05.376]             base::sink(type = "output", split = FALSE)
[09:33:05.376]             base::close(...future.stdout)
[09:33:05.376]         }, add = TRUE)
[09:33:05.376]     }
[09:33:05.376]     ...future.frame <- base::sys.nframe()
[09:33:05.376]     ...future.conditions <- base::list()
[09:33:05.376]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:05.376]     if (FALSE) {
[09:33:05.376]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:05.376]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:05.376]     }
[09:33:05.376]     ...future.result <- base::tryCatch({
[09:33:05.376]         base::withCallingHandlers({
[09:33:05.376]             ...future.value <- base::withVisible(base::local({
[09:33:05.376]                 ...future.makeSendCondition <- base::local({
[09:33:05.376]                   sendCondition <- NULL
[09:33:05.376]                   function(frame = 1L) {
[09:33:05.376]                     if (is.function(sendCondition)) 
[09:33:05.376]                       return(sendCondition)
[09:33:05.376]                     ns <- getNamespace("parallel")
[09:33:05.376]                     if (exists("sendData", mode = "function", 
[09:33:05.376]                       envir = ns)) {
[09:33:05.376]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:05.376]                         envir = ns)
[09:33:05.376]                       envir <- sys.frame(frame)
[09:33:05.376]                       master <- NULL
[09:33:05.376]                       while (!identical(envir, .GlobalEnv) && 
[09:33:05.376]                         !identical(envir, emptyenv())) {
[09:33:05.376]                         if (exists("master", mode = "list", envir = envir, 
[09:33:05.376]                           inherits = FALSE)) {
[09:33:05.376]                           master <- get("master", mode = "list", 
[09:33:05.376]                             envir = envir, inherits = FALSE)
[09:33:05.376]                           if (inherits(master, c("SOCKnode", 
[09:33:05.376]                             "SOCK0node"))) {
[09:33:05.376]                             sendCondition <<- function(cond) {
[09:33:05.376]                               data <- list(type = "VALUE", value = cond, 
[09:33:05.376]                                 success = TRUE)
[09:33:05.376]                               parallel_sendData(master, data)
[09:33:05.376]                             }
[09:33:05.376]                             return(sendCondition)
[09:33:05.376]                           }
[09:33:05.376]                         }
[09:33:05.376]                         frame <- frame + 1L
[09:33:05.376]                         envir <- sys.frame(frame)
[09:33:05.376]                       }
[09:33:05.376]                     }
[09:33:05.376]                     sendCondition <<- function(cond) NULL
[09:33:05.376]                   }
[09:33:05.376]                 })
[09:33:05.376]                 withCallingHandlers({
[09:33:05.376]                   print(42)
[09:33:05.376]                 }, immediateCondition = function(cond) {
[09:33:05.376]                   sendCondition <- ...future.makeSendCondition()
[09:33:05.376]                   sendCondition(cond)
[09:33:05.376]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.376]                   {
[09:33:05.376]                     inherits <- base::inherits
[09:33:05.376]                     invokeRestart <- base::invokeRestart
[09:33:05.376]                     is.null <- base::is.null
[09:33:05.376]                     muffled <- FALSE
[09:33:05.376]                     if (inherits(cond, "message")) {
[09:33:05.376]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:05.376]                       if (muffled) 
[09:33:05.376]                         invokeRestart("muffleMessage")
[09:33:05.376]                     }
[09:33:05.376]                     else if (inherits(cond, "warning")) {
[09:33:05.376]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:05.376]                       if (muffled) 
[09:33:05.376]                         invokeRestart("muffleWarning")
[09:33:05.376]                     }
[09:33:05.376]                     else if (inherits(cond, "condition")) {
[09:33:05.376]                       if (!is.null(pattern)) {
[09:33:05.376]                         computeRestarts <- base::computeRestarts
[09:33:05.376]                         grepl <- base::grepl
[09:33:05.376]                         restarts <- computeRestarts(cond)
[09:33:05.376]                         for (restart in restarts) {
[09:33:05.376]                           name <- restart$name
[09:33:05.376]                           if (is.null(name)) 
[09:33:05.376]                             next
[09:33:05.376]                           if (!grepl(pattern, name)) 
[09:33:05.376]                             next
[09:33:05.376]                           invokeRestart(restart)
[09:33:05.376]                           muffled <- TRUE
[09:33:05.376]                           break
[09:33:05.376]                         }
[09:33:05.376]                       }
[09:33:05.376]                     }
[09:33:05.376]                     invisible(muffled)
[09:33:05.376]                   }
[09:33:05.376]                   muffleCondition(cond)
[09:33:05.376]                 })
[09:33:05.376]             }))
[09:33:05.376]             future::FutureResult(value = ...future.value$value, 
[09:33:05.376]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.376]                   ...future.rng), globalenv = if (FALSE) 
[09:33:05.376]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:05.376]                     ...future.globalenv.names))
[09:33:05.376]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:05.376]         }, condition = base::local({
[09:33:05.376]             c <- base::c
[09:33:05.376]             inherits <- base::inherits
[09:33:05.376]             invokeRestart <- base::invokeRestart
[09:33:05.376]             length <- base::length
[09:33:05.376]             list <- base::list
[09:33:05.376]             seq.int <- base::seq.int
[09:33:05.376]             signalCondition <- base::signalCondition
[09:33:05.376]             sys.calls <- base::sys.calls
[09:33:05.376]             `[[` <- base::`[[`
[09:33:05.376]             `+` <- base::`+`
[09:33:05.376]             `<<-` <- base::`<<-`
[09:33:05.376]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:05.376]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:05.376]                   3L)]
[09:33:05.376]             }
[09:33:05.376]             function(cond) {
[09:33:05.376]                 is_error <- inherits(cond, "error")
[09:33:05.376]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:05.376]                   NULL)
[09:33:05.376]                 if (is_error) {
[09:33:05.376]                   sessionInformation <- function() {
[09:33:05.376]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:05.376]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:05.376]                       search = base::search(), system = base::Sys.info())
[09:33:05.376]                   }
[09:33:05.376]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.376]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:05.376]                     cond$call), session = sessionInformation(), 
[09:33:05.376]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:05.376]                   signalCondition(cond)
[09:33:05.376]                 }
[09:33:05.376]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:05.376]                 "immediateCondition"))) {
[09:33:05.376]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:05.376]                   ...future.conditions[[length(...future.conditions) + 
[09:33:05.376]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:05.376]                   if (TRUE && !signal) {
[09:33:05.376]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.376]                     {
[09:33:05.376]                       inherits <- base::inherits
[09:33:05.376]                       invokeRestart <- base::invokeRestart
[09:33:05.376]                       is.null <- base::is.null
[09:33:05.376]                       muffled <- FALSE
[09:33:05.376]                       if (inherits(cond, "message")) {
[09:33:05.376]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.376]                         if (muffled) 
[09:33:05.376]                           invokeRestart("muffleMessage")
[09:33:05.376]                       }
[09:33:05.376]                       else if (inherits(cond, "warning")) {
[09:33:05.376]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.376]                         if (muffled) 
[09:33:05.376]                           invokeRestart("muffleWarning")
[09:33:05.376]                       }
[09:33:05.376]                       else if (inherits(cond, "condition")) {
[09:33:05.376]                         if (!is.null(pattern)) {
[09:33:05.376]                           computeRestarts <- base::computeRestarts
[09:33:05.376]                           grepl <- base::grepl
[09:33:05.376]                           restarts <- computeRestarts(cond)
[09:33:05.376]                           for (restart in restarts) {
[09:33:05.376]                             name <- restart$name
[09:33:05.376]                             if (is.null(name)) 
[09:33:05.376]                               next
[09:33:05.376]                             if (!grepl(pattern, name)) 
[09:33:05.376]                               next
[09:33:05.376]                             invokeRestart(restart)
[09:33:05.376]                             muffled <- TRUE
[09:33:05.376]                             break
[09:33:05.376]                           }
[09:33:05.376]                         }
[09:33:05.376]                       }
[09:33:05.376]                       invisible(muffled)
[09:33:05.376]                     }
[09:33:05.376]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.376]                   }
[09:33:05.376]                 }
[09:33:05.376]                 else {
[09:33:05.376]                   if (TRUE) {
[09:33:05.376]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:05.376]                     {
[09:33:05.376]                       inherits <- base::inherits
[09:33:05.376]                       invokeRestart <- base::invokeRestart
[09:33:05.376]                       is.null <- base::is.null
[09:33:05.376]                       muffled <- FALSE
[09:33:05.376]                       if (inherits(cond, "message")) {
[09:33:05.376]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:05.376]                         if (muffled) 
[09:33:05.376]                           invokeRestart("muffleMessage")
[09:33:05.376]                       }
[09:33:05.376]                       else if (inherits(cond, "warning")) {
[09:33:05.376]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:05.376]                         if (muffled) 
[09:33:05.376]                           invokeRestart("muffleWarning")
[09:33:05.376]                       }
[09:33:05.376]                       else if (inherits(cond, "condition")) {
[09:33:05.376]                         if (!is.null(pattern)) {
[09:33:05.376]                           computeRestarts <- base::computeRestarts
[09:33:05.376]                           grepl <- base::grepl
[09:33:05.376]                           restarts <- computeRestarts(cond)
[09:33:05.376]                           for (restart in restarts) {
[09:33:05.376]                             name <- restart$name
[09:33:05.376]                             if (is.null(name)) 
[09:33:05.376]                               next
[09:33:05.376]                             if (!grepl(pattern, name)) 
[09:33:05.376]                               next
[09:33:05.376]                             invokeRestart(restart)
[09:33:05.376]                             muffled <- TRUE
[09:33:05.376]                             break
[09:33:05.376]                           }
[09:33:05.376]                         }
[09:33:05.376]                       }
[09:33:05.376]                       invisible(muffled)
[09:33:05.376]                     }
[09:33:05.376]                     muffleCondition(cond, pattern = "^muffle")
[09:33:05.376]                   }
[09:33:05.376]                 }
[09:33:05.376]             }
[09:33:05.376]         }))
[09:33:05.376]     }, error = function(ex) {
[09:33:05.376]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:05.376]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:05.376]                 ...future.rng), started = ...future.startTime, 
[09:33:05.376]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:05.376]             version = "1.8"), class = "FutureResult")
[09:33:05.376]     }, finally = {
[09:33:05.376]         if (!identical(...future.workdir, getwd())) 
[09:33:05.376]             setwd(...future.workdir)
[09:33:05.376]         {
[09:33:05.376]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:05.376]                 ...future.oldOptions$nwarnings <- NULL
[09:33:05.376]             }
[09:33:05.376]             base::options(...future.oldOptions)
[09:33:05.376]             if (.Platform$OS.type == "windows") {
[09:33:05.376]                 old_names <- names(...future.oldEnvVars)
[09:33:05.376]                 envs <- base::Sys.getenv()
[09:33:05.376]                 names <- names(envs)
[09:33:05.376]                 common <- intersect(names, old_names)
[09:33:05.376]                 added <- setdiff(names, old_names)
[09:33:05.376]                 removed <- setdiff(old_names, names)
[09:33:05.376]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:05.376]                   envs[common]]
[09:33:05.376]                 NAMES <- toupper(changed)
[09:33:05.376]                 args <- list()
[09:33:05.376]                 for (kk in seq_along(NAMES)) {
[09:33:05.376]                   name <- changed[[kk]]
[09:33:05.376]                   NAME <- NAMES[[kk]]
[09:33:05.376]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.376]                     next
[09:33:05.376]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.376]                 }
[09:33:05.376]                 NAMES <- toupper(added)
[09:33:05.376]                 for (kk in seq_along(NAMES)) {
[09:33:05.376]                   name <- added[[kk]]
[09:33:05.376]                   NAME <- NAMES[[kk]]
[09:33:05.376]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.376]                     next
[09:33:05.376]                   args[[name]] <- ""
[09:33:05.376]                 }
[09:33:05.376]                 NAMES <- toupper(removed)
[09:33:05.376]                 for (kk in seq_along(NAMES)) {
[09:33:05.376]                   name <- removed[[kk]]
[09:33:05.376]                   NAME <- NAMES[[kk]]
[09:33:05.376]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:05.376]                     next
[09:33:05.376]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:05.376]                 }
[09:33:05.376]                 if (length(args) > 0) 
[09:33:05.376]                   base::do.call(base::Sys.setenv, args = args)
[09:33:05.376]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:05.376]             }
[09:33:05.376]             else {
[09:33:05.376]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:05.376]             }
[09:33:05.376]             {
[09:33:05.376]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:05.376]                   0L) {
[09:33:05.376]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:05.376]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:05.376]                   base::options(opts)
[09:33:05.376]                 }
[09:33:05.376]                 {
[09:33:05.376]                   {
[09:33:05.376]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:05.376]                     NULL
[09:33:05.376]                   }
[09:33:05.376]                   options(future.plan = NULL)
[09:33:05.376]                   if (is.na(NA_character_)) 
[09:33:05.376]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:05.376]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:05.376]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:05.376]                     .init = FALSE)
[09:33:05.376]                 }
[09:33:05.376]             }
[09:33:05.376]         }
[09:33:05.376]     })
[09:33:05.376]     if (TRUE) {
[09:33:05.376]         base::sink(type = "output", split = FALSE)
[09:33:05.376]         if (TRUE) {
[09:33:05.376]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:05.376]         }
[09:33:05.376]         else {
[09:33:05.376]             ...future.result["stdout"] <- base::list(NULL)
[09:33:05.376]         }
[09:33:05.376]         base::close(...future.stdout)
[09:33:05.376]         ...future.stdout <- NULL
[09:33:05.376]     }
[09:33:05.376]     ...future.result$conditions <- ...future.conditions
[09:33:05.376]     ...future.result$finished <- base::Sys.time()
[09:33:05.376]     ...future.result
[09:33:05.376] }
[09:33:05.380] MultisessionFuture started
[09:33:05.380] - Launch lazy future ... done
[09:33:05.380] run() for ‘MultisessionFuture’ ... done
[09:33:05.380] result() for ClusterFuture ...
[09:33:05.380] receiveMessageFromWorker() for ClusterFuture ...
[09:33:05.381] - Validating connection of MultisessionFuture
[09:33:05.382] - received message: FutureResult
[09:33:05.382] - Received FutureResult
[09:33:05.382] - Erased future from FutureRegistry
[09:33:05.383] result() for ClusterFuture ...
[09:33:05.383] - result already collected: FutureResult
[09:33:05.383] result() for ClusterFuture ... done
[09:33:05.383] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:05.383] result() for ClusterFuture ... done
[09:33:05.383] result() for ClusterFuture ...
[09:33:05.383] - result already collected: FutureResult
[09:33:05.383] result() for ClusterFuture ... done
[09:33:05.384] result() for ClusterFuture ...
[09:33:05.384] - result already collected: FutureResult
[09:33:05.384] result() for ClusterFuture ... done
[1] 42
[09:33:05.384] result() for ClusterFuture ...
[09:33:05.384] - result already collected: FutureResult
[09:33:05.384] result() for ClusterFuture ... done
multisession ... done
Testing with 2 cores ... done
> 
> message("*** Standard output ... DONE")
*** Standard output ... DONE
> 
> source("incl/end.R")
[09:33:05.385] plan(): Setting new future strategy stack:
[09:33:05.385] List of future strategies:
[09:33:05.385] 1. FutureStrategy:
[09:33:05.385]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:05.385]    - tweaked: FALSE
[09:33:05.385]    - call: future::plan(oplan)
[09:33:05.386] plan(): nbrOfWorkers() = 1
> 
