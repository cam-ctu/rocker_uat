
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:39:28.718] plan(): Setting new future strategy stack:
[17:39:28.719] List of future strategies:
[17:39:28.719] 1. sequential:
[17:39:28.719]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:28.719]    - tweaked: FALSE
[17:39:28.719]    - call: future::plan("sequential")
[17:39:28.730] plan(): nbrOfWorkers() = 1
> 
> options(future.debug = FALSE)
> message("*** futureCall() ...")
*** futureCall() ...
> 
> message("- futureCall() - sequential + lazy ...")
- futureCall() - sequential + lazy ...
> 
> f1 <- future(do.call(rnorm, args = list(n = 100)), seed = NULL, lazy = TRUE)
> f2 <- futureCall(rnorm, args = list(n = 100), seed = NULL, lazy = TRUE)
> 
> set.seed(42L)
> v0 <- rnorm(n = 100)
> str(list(v0 = v0))
List of 1
 $ v0: num [1:100] 1.371 -0.565 0.363 0.633 0.404 ...
> 
> set.seed(42L)
> v1 <- value(f1)
> str(list(v1 = v1))
List of 1
 $ v1: num [1:100] 1.371 -0.565 0.363 0.633 0.404 ...
> 
> set.seed(42L)
> v2 <- value(f2)
> str(list(v2 = v2))
List of 1
 $ v2: num [1:100] 1.371 -0.565 0.363 0.633 0.404 ...
> 
> ## Because we use lazy futures and set the
> ## random seed just before they are resolved
> stopifnot(all.equal(v1, v0))
> stopifnot(all.equal(v1, v2))
> 
> message("- futureCall() - sequential + lazy ... DONE")
- futureCall() - sequential + lazy ... DONE
> 
> message("- futureCall() - mix of strategies, cores, lazy and globals ...")
- futureCall() - mix of strategies, cores, lazy and globals ...
> 
> a <- 3
> args <- list(x = 42, y = 12)
> v0 <- do.call(function(x, y) a * (x - y), args = args)
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+   strategies <- supportedStrategies(cores)
+ 
+   for (strategy in strategies) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy)
+ 
+     for (lazy in c(FALSE, TRUE)) {
+       for (globals in c(FALSE, TRUE)) {
+         message("- futureCall() #1")
+         a <- 3
+         args <- list(x = 42, y = 12)
+         f <- futureCall(function(x, y) a * (x - y), args = args,
+                         globals = globals, lazy = lazy)
+         rm(list = c("a", "args"))
+         print(f)
+         res1 <- tryCatch({
+           v1 <- value(f)
+         }, error = identity)
+         stopifnot(!inherits(res1, "FutureError"))
+         if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+           if (globals) {
+             stopifnot(all.equal(v1, v0))
+           } else {
+             stopifnot(inherits(res1, "error"))
+           }
+         } else {
+           if (!inherits(res1, "error")) {
+             utils::str(list(strategy = strategy, globals = globals, lazy = lazy, v0 = v0, v1 = v1))
+             stopifnot(all.equal(v1, v0))
+           } else {
+             stopifnot(!globals)
+           }
+         }
+ 
+         message("- futureCall() #2")
+         a <- 3
+         args <- list(x = 42, y = 12)
+         f <- futureCall(function(x, y) a * (x - y), args = args,
+                         globals = "a", lazy = lazy)
+         rm(list = c("a", "args"))
+         print(f)
+         res2 <- tryCatch({
+           v2 <- value(f)
+         }, error = identity)
+         stopifnot(!inherits(res2, "FutureError"))
+         if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+           if (globals) {
+             stopifnot(all.equal(v2, v0))
+           } else {
+             stopifnot(inherits(res2, "error"))
+           }
+         } else {
+           if (!inherits(res2, "error")) {
+             utils::str(list(strategy = strategy, globals = globals, lazy = lazy, v0 = v0, v2 = v2))
+             stopifnot(all.equal(v2, v0))
+           } else {
+             stopifnot(!globals)
+           }
+         }
+         
+         message("- futureCall() #3")
+         args <- list(x = 42, y = 12)
+         f <- futureCall(function(x, y) a * (x - y), args = args,
+                         globals = list(a = 3), lazy = lazy)
+         rm(list = "args")
+         print(f)
+         res3 <- tryCatch({
+           v3 <- value(f)
+         }, error = identity)
+         stopifnot(!inherits(res3, "FutureError"))
+         if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+           if (globals) {
+             stopifnot(all.equal(v3, v0))
+           } else {
+             stopifnot(inherits(res3, "error"))
+           }
+         } else {
+           if (!inherits(res3, "error")) {
+             utils::str(list(strategy = strategy, globals = globals, lazy = lazy, v0 = v0, v3 = v3, res3 = res3))
+             stopifnot(all.equal(v3, v0))
+           } else {
+             stopifnot(!globals)
+           }
+         }
+ 
+         message("- futureCall() #4")
+         ## FIXME: This works and fails in non-expected ways /HB 2022-05-26
+         local({
+           a <- 2
+           g <- function() a
+           f <- futureCall(g, globals = globals, lazy = lazy)
+           rm(list = "a")
+ 
+           truth <- 2
+           message("truth: ", truth)
+ 
+           v4 <- tryCatch(value(f), error = identity)
+           print(v4)
+ 
+           utils::str(list(strategy = strategy, globals = globals, lazy = lazy, v4 = v4))
+ 
+           if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+             if (globals) {
+               stopifnot(identical(v4, truth))
+             } else {
+               stopifnot(inherits(v4, "error"))
+             }
+           } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+             if (isTRUE(getOption("future.globals.globalsOf.locals", TRUE))) {
+               if (globals) {
+                 stopifnot(identical(v4, truth))
+               } else if (lazy) {
+                 stopifnot(inherits(v4, "error"))
+               } else {
+                 stopifnot(identical(v4, truth))
+               }
+             } else {
+               if (lazy) {
+                 stopifnot(inherits(v4, "error"))
+               } else {
+                 stopifnot(identical(v4, truth))
+               }
+             }
+           } else {
+             if (isTRUE(getOption("future.globals.globalsOf.locals", TRUE))) {
+               if (globals) {
+                 stopifnot(identical(v4, truth))
+               } else if (lazy) {
+                 stopifnot(inherits(v4, "error"))
+               } else if (strategy %in% c("sequential", "multicore")) {
+                 stopifnot(inherits(v4, "error"))
+               } else {
+                 stopifnot(identical(v4, truth))
+               }
+             } else {
+               if (strategy %in% c("sequential", "multicore")) {
+                 stopifnot(inherits(v4, "error"))
+               } else if (lazy) {
+                 stopifnot(inherits(v4, "error"))
+               } else {
+                 stopifnot(identical(v4, truth))
+               }
+             }
+           }
+         })
+ 
+         rm(list = c("v1", "v2", "v3", "v4"))
+       }
+     }
+   }
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ }
Testing with 1 cores ...
- plan('sequential') ...
- futureCall() #1
SequentialFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: 0x562dd985a048
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 2 objects totaling 2.46 KiB (function ‘FUN’ of 2.35 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
List of 5
 $ strategy: chr "sequential"
 $ globals : logi FALSE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v1      : num 90
- futureCall() #2
SequentialFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: 0x562dd9b4e318
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
List of 5
 $ strategy: chr "sequential"
 $ globals : logi FALSE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v2      : num 90
- futureCall() #3
SequentialFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: 0x562dd9e16e50
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
List of 6
 $ strategy: chr "sequential"
 $ globals : logi FALSE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v3      : num 90
 $ res3    : num 90
- futureCall() #4
truth: 2
<simpleError in (function () a)(): object 'a' not found>
List of 4
 $ strategy: chr "sequential"
 $ globals : logi FALSE
 $ lazy    : logi FALSE
 $ v4      :List of 2
  ..$ message: chr "object 'a' not found"
  ..$ call   : language (function ()  a)()
  ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v4' not found
- futureCall() #1
SequentialFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: 0x562dd77a9e28
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes, numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
List of 5
 $ strategy: chr "sequential"
 $ globals : logi TRUE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v1      : num 90
- futureCall() #2
SequentialFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: 0x562dd986ded8
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
List of 5
 $ strategy: chr "sequential"
 $ globals : logi TRUE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v2      : num 90
- futureCall() #3
SequentialFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: 0x562dd9b76f20
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
List of 6
 $ strategy: chr "sequential"
 $ globals : logi TRUE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v3      : num 90
 $ res3    : num 90
- futureCall() #4
truth: 2
[1] 2
List of 4
 $ strategy: chr "sequential"
 $ globals : logi TRUE
 $ lazy    : logi FALSE
 $ v4      : num 2
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v4' not found
- futureCall() #1
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd8734a80
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 2 objects totaling 2.46 KiB (function ‘FUN’ of 2.35 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
- futureCall() #2
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd7711910
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 5
 $ strategy: chr "sequential"
 $ globals : logi FALSE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v2      : num 90
- futureCall() #3
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd957af70
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 6
 $ strategy: chr "sequential"
 $ globals : logi FALSE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v3      : num 90
 $ res3    : num 90
- futureCall() #4
truth: 2
<simpleError in (function () a)(): object 'a' not found>
List of 4
 $ strategy: chr "sequential"
 $ globals : logi FALSE
 $ lazy    : logi TRUE
 $ v4      :List of 2
  ..$ message: chr "object 'a' not found"
  ..$ call   : language (function ()  a)()
  ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v1' not found
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v4' not found
- futureCall() #1
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd9ca0c58
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes, numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 5
 $ strategy: chr "sequential"
 $ globals : logi TRUE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v1      : num 90
- futureCall() #2
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dda2e8dc0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 5
 $ strategy: chr "sequential"
 $ globals : logi TRUE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v2      : num 90
- futureCall() #3
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd768e208
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 6
 $ strategy: chr "sequential"
 $ globals : logi TRUE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v3      : num 90
 $ res3    : num 90
- futureCall() #4
truth: 2
[1] 2
List of 4
 $ strategy: chr "sequential"
 $ globals : logi TRUE
 $ lazy    : logi TRUE
 $ v4      : num 2
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v4' not found
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('multicore') ...
- futureCall() #1
MulticoreFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd9ee3d98
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 2 objects totaling 2.46 KiB (function ‘FUN’ of 2.35 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multicore"
 $ globals : logi FALSE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v1      : num 90
- futureCall() #2
MulticoreFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd82b9f98
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multicore"
 $ globals : logi FALSE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v2      : num 90
- futureCall() #3
MulticoreFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd9862368
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
List of 6
 $ strategy: chr "multicore"
 $ globals : logi FALSE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v3      : num 90
 $ res3    : num 90
- futureCall() #4
truth: 2
<simpleError in (function () a)(): object 'a' not found>
List of 4
 $ strategy: chr "multicore"
 $ globals : logi FALSE
 $ lazy    : logi FALSE
 $ v4      :List of 2
  ..$ message: chr "object 'a' not found"
  ..$ call   : language (function ()  a)()
  ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v4' not found
- futureCall() #1
MulticoreFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd85bf4a0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes, numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multicore"
 $ globals : logi TRUE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v1      : num 90
- futureCall() #2
MulticoreFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd95808d0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multicore"
 $ globals : logi TRUE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v2      : num 90
- futureCall() #3
MulticoreFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd9a363c0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
List of 6
 $ strategy: chr "multicore"
 $ globals : logi TRUE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v3      : num 90
 $ res3    : num 90
- futureCall() #4
truth: 2
[1] 2
List of 4
 $ strategy: chr "multicore"
 $ globals : logi TRUE
 $ lazy    : logi FALSE
 $ v4      : num 2
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v4' not found
- futureCall() #1
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd77a5098
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 2 objects totaling 2.46 KiB (function ‘FUN’ of 2.35 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
- futureCall() #2
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd98f69c0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multicore"
 $ globals : logi FALSE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v2      : num 90
- futureCall() #3
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd9c39030
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 6
 $ strategy: chr "multicore"
 $ globals : logi FALSE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v3      : num 90
 $ res3    : num 90
- futureCall() #4
truth: 2
<simpleError in (function () a)(): object 'a' not found>
List of 4
 $ strategy: chr "multicore"
 $ globals : logi FALSE
 $ lazy    : logi TRUE
 $ v4      :List of 2
  ..$ message: chr "object 'a' not found"
  ..$ call   : language (function ()  a)()
  ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v1' not found
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v4' not found
- futureCall() #1
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd9ac0918
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes, numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multicore"
 $ globals : logi TRUE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v1      : num 90
- futureCall() #2
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd84f36f0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multicore"
 $ globals : logi TRUE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v2      : num 90
- futureCall() #3
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd94979e0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 6
 $ strategy: chr "multicore"
 $ globals : logi TRUE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v3      : num 90
 $ res3    : num 90
- futureCall() #4
truth: 2
[1] 2
List of 4
 $ strategy: chr "multicore"
 $ globals : logi TRUE
 $ lazy    : logi TRUE
 $ v4      : num 2
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v4' not found
- plan('multisession') ...
- futureCall() #1
MultisessionFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd9e532c8
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 2 objects totaling 2.46 KiB (function ‘FUN’ of 2.35 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
- futureCall() #2
MultisessionFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd9b44820
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multisession"
 $ globals : logi FALSE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v2      : num 90
- futureCall() #3
MultisessionFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd958b248
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
List of 6
 $ strategy: chr "multisession"
 $ globals : logi FALSE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v3      : num 90
 $ res3    : num 90
- futureCall() #4
truth: 2
[1] 2
List of 4
 $ strategy: chr "multisession"
 $ globals : logi FALSE
 $ lazy    : logi FALSE
 $ v4      : num 2
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v1' not found
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v4' not found
- futureCall() #1
MultisessionFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562ddaf0f560
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes, numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multisession"
 $ globals : logi TRUE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v1      : num 90
- futureCall() #2
MultisessionFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562ddb39dd20
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multisession"
 $ globals : logi TRUE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v2      : num 90
- futureCall() #3
MultisessionFuture:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562ddb76d460
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
List of 6
 $ strategy: chr "multisession"
 $ globals : logi TRUE
 $ lazy    : logi FALSE
 $ v0      : num 90
 $ v3      : num 90
 $ res3    : num 90
- futureCall() #4
truth: 2
[1] 2
List of 4
 $ strategy: chr "multisession"
 $ globals : logi TRUE
 $ lazy    : logi FALSE
 $ v4      : num 2
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v4' not found
- futureCall() #1
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562ddbf6ad90
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 2 objects totaling 2.46 KiB (function ‘FUN’ of 2.35 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
- futureCall() #2
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dda380748
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multisession"
 $ globals : logi FALSE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v2      : num 90
- futureCall() #3
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd9cb7f70
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 6
 $ strategy: chr "multisession"
 $ globals : logi FALSE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v3      : num 90
 $ res3    : num 90
- futureCall() #4
truth: 2
<simpleError in (function () a)(): object 'a' not found>
List of 4
 $ strategy: chr "multisession"
 $ globals : logi FALSE
 $ lazy    : logi TRUE
 $ v4      :List of 2
  ..$ message: chr "object 'a' not found"
  ..$ call   : language (function ()  a)()
  ..- attr(*, "class")= chr [1:3] "simpleError" "error" "condition"
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v1' not found
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v4' not found
- futureCall() #1
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562dd77894e0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes, numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multisession"
 $ globals : logi TRUE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v1      : num 90
- futureCall() #2
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562ddafd8c18
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 5
 $ strategy: chr "multisession"
 $ globals : logi TRUE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v2      : num 90
- futureCall() #3
Future:
Label: ‘<none>’
Expression:
do.call(what = FUN, args = args)
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562ddb376960
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 3 objects totaling 1.31 KiB (numeric ‘a’ of 56 bytes, function ‘FUN’ of 1.15 KiB, list ‘args’ of 112 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2bc1cb27-71e0-355d-4e8b-20e98a59cacd
Class: ‘Future’, ‘environment’
List of 6
 $ strategy: chr "multisession"
 $ globals : logi TRUE
 $ lazy    : logi TRUE
 $ v0      : num 90
 $ v3      : num 90
 $ res3    : num 90
- futureCall() #4
truth: 2
[1] 2
List of 4
 $ strategy: chr "multisession"
 $ globals : logi TRUE
 $ lazy    : logi TRUE
 $ v4      : num 2
Warning in rm(list = c("v1", "v2", "v3", "v4")) : object 'v4' not found
Testing with 2 cores ... DONE
> 
> message("- futureCall() - mix of strategies, cores, lazy and globals ... DONE")
- futureCall() - mix of strategies, cores, lazy and globals ... DONE
> 
> message("- futureCall() - bug fixes")
- futureCall() - bug fixes
> 
> plan(sequential)
> plan(cluster, workers = 1L)
> 
> fcn <- function() a
> v <- tryCatch(local({
+   abc <- 42
+   f <- futureCall(fcn, args = list(), globals = "abc")
+   value(f)
+ }), error = identity)
> 
> ## Bug #262: the above used to return NULL
> stopifnot(!is.null(v))
> 
> ## Bug: Now, it instead fails, because it cannot find 'abc'
> print(v)
<simpleError in (function () a)(): object 'a' not found>
> stopifnot(inherits(v, "error"))
> 
> message("*** futureCall() ... DONE")
*** futureCall() ... DONE
> 
> source("incl/end.R")
> 
