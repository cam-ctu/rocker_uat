
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:38:47.996] plan(): Setting new future strategy stack:
[17:38:47.997] List of future strategies:
[17:38:47.997] 1. sequential:
[17:38:47.997]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:47.997]    - tweaked: FALSE
[17:38:47.997]    - call: future::plan("sequential")
[17:38:48.008] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[17:38:48.022] getGlobalsAndPackages() ...
[17:38:48.022] Searching for globals...
[17:38:48.028] - globals found: [2] ‘{’, ‘stop’
[17:38:48.028] Searching for globals ... DONE
[17:38:48.028] Resolving globals: FALSE
[17:38:48.029] 
[17:38:48.029] 
[17:38:48.029] getGlobalsAndPackages() ... DONE
[17:38:48.030] run() for ‘Future’ ...
[17:38:48.030] - state: ‘created’
[17:38:48.030] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:38:48.030] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:38:48.030] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:38:48.031]   - Field: ‘label’
[17:38:48.031]   - Field: ‘local’
[17:38:48.031]   - Field: ‘owner’
[17:38:48.031]   - Field: ‘envir’
[17:38:48.031]   - Field: ‘packages’
[17:38:48.031]   - Field: ‘gc’
[17:38:48.031]   - Field: ‘conditions’
[17:38:48.031]   - Field: ‘expr’
[17:38:48.031]   - Field: ‘uuid’
[17:38:48.031]   - Field: ‘seed’
[17:38:48.032]   - Field: ‘version’
[17:38:48.032]   - Field: ‘result’
[17:38:48.032]   - Field: ‘asynchronous’
[17:38:48.032]   - Field: ‘calls’
[17:38:48.032]   - Field: ‘globals’
[17:38:48.032]   - Field: ‘stdout’
[17:38:48.032]   - Field: ‘earlySignal’
[17:38:48.032]   - Field: ‘lazy’
[17:38:48.032]   - Field: ‘state’
[17:38:48.032] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:38:48.032] - Launch lazy future ...
[17:38:48.033] Packages needed by the future expression (n = 0): <none>
[17:38:48.033] Packages needed by future strategies (n = 0): <none>
[17:38:48.034] {
[17:38:48.034]     {
[17:38:48.034]         {
[17:38:48.034]             ...future.startTime <- base::Sys.time()
[17:38:48.034]             {
[17:38:48.034]                 {
[17:38:48.034]                   {
[17:38:48.034]                     base::local({
[17:38:48.034]                       has_future <- base::requireNamespace("future", 
[17:38:48.034]                         quietly = TRUE)
[17:38:48.034]                       if (has_future) {
[17:38:48.034]                         ns <- base::getNamespace("future")
[17:38:48.034]                         version <- ns[[".package"]][["version"]]
[17:38:48.034]                         if (is.null(version)) 
[17:38:48.034]                           version <- utils::packageVersion("future")
[17:38:48.034]                       }
[17:38:48.034]                       else {
[17:38:48.034]                         version <- NULL
[17:38:48.034]                       }
[17:38:48.034]                       if (!has_future || version < "1.8.0") {
[17:38:48.034]                         info <- base::c(r_version = base::gsub("R version ", 
[17:38:48.034]                           "", base::R.version$version.string), 
[17:38:48.034]                           platform = base::sprintf("%s (%s-bit)", 
[17:38:48.034]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:48.034]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:48.034]                             "release", "version")], collapse = " "), 
[17:38:48.034]                           hostname = base::Sys.info()[["nodename"]])
[17:38:48.034]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:38:48.034]                           info)
[17:38:48.034]                         info <- base::paste(info, collapse = "; ")
[17:38:48.034]                         if (!has_future) {
[17:38:48.034]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:48.034]                             info)
[17:38:48.034]                         }
[17:38:48.034]                         else {
[17:38:48.034]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:48.034]                             info, version)
[17:38:48.034]                         }
[17:38:48.034]                         base::stop(msg)
[17:38:48.034]                       }
[17:38:48.034]                     })
[17:38:48.034]                   }
[17:38:48.034]                   ...future.strategy.old <- future::plan("list")
[17:38:48.034]                   options(future.plan = NULL)
[17:38:48.034]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.034]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:48.034]                 }
[17:38:48.034]                 ...future.workdir <- getwd()
[17:38:48.034]             }
[17:38:48.034]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:48.034]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:48.034]         }
[17:38:48.034]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:48.034]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:48.034]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:48.034]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:48.034]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:48.034]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:48.034]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:48.034]             base::names(...future.oldOptions))
[17:38:48.034]     }
[17:38:48.034]     if (FALSE) {
[17:38:48.034]     }
[17:38:48.034]     else {
[17:38:48.034]         if (TRUE) {
[17:38:48.034]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:48.034]                 open = "w")
[17:38:48.034]         }
[17:38:48.034]         else {
[17:38:48.034]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:48.034]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:48.034]         }
[17:38:48.034]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:48.034]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:48.034]             base::sink(type = "output", split = FALSE)
[17:38:48.034]             base::close(...future.stdout)
[17:38:48.034]         }, add = TRUE)
[17:38:48.034]     }
[17:38:48.034]     ...future.frame <- base::sys.nframe()
[17:38:48.034]     ...future.conditions <- base::list()
[17:38:48.034]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:48.034]     if (FALSE) {
[17:38:48.034]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:48.034]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:48.034]     }
[17:38:48.034]     ...future.result <- base::tryCatch({
[17:38:48.034]         base::withCallingHandlers({
[17:38:48.034]             ...future.value <- base::withVisible(base::local({
[17:38:48.034]                 42L
[17:38:48.034]                 stop("Woops")
[17:38:48.034]             }))
[17:38:48.034]             future::FutureResult(value = ...future.value$value, 
[17:38:48.034]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.034]                   ...future.rng), globalenv = if (FALSE) 
[17:38:48.034]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:48.034]                     ...future.globalenv.names))
[17:38:48.034]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:48.034]         }, condition = base::local({
[17:38:48.034]             c <- base::c
[17:38:48.034]             inherits <- base::inherits
[17:38:48.034]             invokeRestart <- base::invokeRestart
[17:38:48.034]             length <- base::length
[17:38:48.034]             list <- base::list
[17:38:48.034]             seq.int <- base::seq.int
[17:38:48.034]             signalCondition <- base::signalCondition
[17:38:48.034]             sys.calls <- base::sys.calls
[17:38:48.034]             `[[` <- base::`[[`
[17:38:48.034]             `+` <- base::`+`
[17:38:48.034]             `<<-` <- base::`<<-`
[17:38:48.034]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:48.034]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:48.034]                   3L)]
[17:38:48.034]             }
[17:38:48.034]             function(cond) {
[17:38:48.034]                 is_error <- inherits(cond, "error")
[17:38:48.034]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:48.034]                   NULL)
[17:38:48.034]                 if (is_error) {
[17:38:48.034]                   sessionInformation <- function() {
[17:38:48.034]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:48.034]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:48.034]                       search = base::search(), system = base::Sys.info())
[17:38:48.034]                   }
[17:38:48.034]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.034]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:48.034]                     cond$call), session = sessionInformation(), 
[17:38:48.034]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:48.034]                   signalCondition(cond)
[17:38:48.034]                 }
[17:38:48.034]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:48.034]                 "immediateCondition"))) {
[17:38:48.034]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:48.034]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.034]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:48.034]                   if (TRUE && !signal) {
[17:38:48.034]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.034]                     {
[17:38:48.034]                       inherits <- base::inherits
[17:38:48.034]                       invokeRestart <- base::invokeRestart
[17:38:48.034]                       is.null <- base::is.null
[17:38:48.034]                       muffled <- FALSE
[17:38:48.034]                       if (inherits(cond, "message")) {
[17:38:48.034]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.034]                         if (muffled) 
[17:38:48.034]                           invokeRestart("muffleMessage")
[17:38:48.034]                       }
[17:38:48.034]                       else if (inherits(cond, "warning")) {
[17:38:48.034]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.034]                         if (muffled) 
[17:38:48.034]                           invokeRestart("muffleWarning")
[17:38:48.034]                       }
[17:38:48.034]                       else if (inherits(cond, "condition")) {
[17:38:48.034]                         if (!is.null(pattern)) {
[17:38:48.034]                           computeRestarts <- base::computeRestarts
[17:38:48.034]                           grepl <- base::grepl
[17:38:48.034]                           restarts <- computeRestarts(cond)
[17:38:48.034]                           for (restart in restarts) {
[17:38:48.034]                             name <- restart$name
[17:38:48.034]                             if (is.null(name)) 
[17:38:48.034]                               next
[17:38:48.034]                             if (!grepl(pattern, name)) 
[17:38:48.034]                               next
[17:38:48.034]                             invokeRestart(restart)
[17:38:48.034]                             muffled <- TRUE
[17:38:48.034]                             break
[17:38:48.034]                           }
[17:38:48.034]                         }
[17:38:48.034]                       }
[17:38:48.034]                       invisible(muffled)
[17:38:48.034]                     }
[17:38:48.034]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.034]                   }
[17:38:48.034]                 }
[17:38:48.034]                 else {
[17:38:48.034]                   if (TRUE) {
[17:38:48.034]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.034]                     {
[17:38:48.034]                       inherits <- base::inherits
[17:38:48.034]                       invokeRestart <- base::invokeRestart
[17:38:48.034]                       is.null <- base::is.null
[17:38:48.034]                       muffled <- FALSE
[17:38:48.034]                       if (inherits(cond, "message")) {
[17:38:48.034]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.034]                         if (muffled) 
[17:38:48.034]                           invokeRestart("muffleMessage")
[17:38:48.034]                       }
[17:38:48.034]                       else if (inherits(cond, "warning")) {
[17:38:48.034]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.034]                         if (muffled) 
[17:38:48.034]                           invokeRestart("muffleWarning")
[17:38:48.034]                       }
[17:38:48.034]                       else if (inherits(cond, "condition")) {
[17:38:48.034]                         if (!is.null(pattern)) {
[17:38:48.034]                           computeRestarts <- base::computeRestarts
[17:38:48.034]                           grepl <- base::grepl
[17:38:48.034]                           restarts <- computeRestarts(cond)
[17:38:48.034]                           for (restart in restarts) {
[17:38:48.034]                             name <- restart$name
[17:38:48.034]                             if (is.null(name)) 
[17:38:48.034]                               next
[17:38:48.034]                             if (!grepl(pattern, name)) 
[17:38:48.034]                               next
[17:38:48.034]                             invokeRestart(restart)
[17:38:48.034]                             muffled <- TRUE
[17:38:48.034]                             break
[17:38:48.034]                           }
[17:38:48.034]                         }
[17:38:48.034]                       }
[17:38:48.034]                       invisible(muffled)
[17:38:48.034]                     }
[17:38:48.034]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.034]                   }
[17:38:48.034]                 }
[17:38:48.034]             }
[17:38:48.034]         }))
[17:38:48.034]     }, error = function(ex) {
[17:38:48.034]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:48.034]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.034]                 ...future.rng), started = ...future.startTime, 
[17:38:48.034]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:48.034]             version = "1.8"), class = "FutureResult")
[17:38:48.034]     }, finally = {
[17:38:48.034]         if (!identical(...future.workdir, getwd())) 
[17:38:48.034]             setwd(...future.workdir)
[17:38:48.034]         {
[17:38:48.034]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:48.034]                 ...future.oldOptions$nwarnings <- NULL
[17:38:48.034]             }
[17:38:48.034]             base::options(...future.oldOptions)
[17:38:48.034]             if (.Platform$OS.type == "windows") {
[17:38:48.034]                 old_names <- names(...future.oldEnvVars)
[17:38:48.034]                 envs <- base::Sys.getenv()
[17:38:48.034]                 names <- names(envs)
[17:38:48.034]                 common <- intersect(names, old_names)
[17:38:48.034]                 added <- setdiff(names, old_names)
[17:38:48.034]                 removed <- setdiff(old_names, names)
[17:38:48.034]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:48.034]                   envs[common]]
[17:38:48.034]                 NAMES <- toupper(changed)
[17:38:48.034]                 args <- list()
[17:38:48.034]                 for (kk in seq_along(NAMES)) {
[17:38:48.034]                   name <- changed[[kk]]
[17:38:48.034]                   NAME <- NAMES[[kk]]
[17:38:48.034]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.034]                     next
[17:38:48.034]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.034]                 }
[17:38:48.034]                 NAMES <- toupper(added)
[17:38:48.034]                 for (kk in seq_along(NAMES)) {
[17:38:48.034]                   name <- added[[kk]]
[17:38:48.034]                   NAME <- NAMES[[kk]]
[17:38:48.034]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.034]                     next
[17:38:48.034]                   args[[name]] <- ""
[17:38:48.034]                 }
[17:38:48.034]                 NAMES <- toupper(removed)
[17:38:48.034]                 for (kk in seq_along(NAMES)) {
[17:38:48.034]                   name <- removed[[kk]]
[17:38:48.034]                   NAME <- NAMES[[kk]]
[17:38:48.034]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.034]                     next
[17:38:48.034]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.034]                 }
[17:38:48.034]                 if (length(args) > 0) 
[17:38:48.034]                   base::do.call(base::Sys.setenv, args = args)
[17:38:48.034]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:48.034]             }
[17:38:48.034]             else {
[17:38:48.034]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:48.034]             }
[17:38:48.034]             {
[17:38:48.034]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:48.034]                   0L) {
[17:38:48.034]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:48.034]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:48.034]                   base::options(opts)
[17:38:48.034]                 }
[17:38:48.034]                 {
[17:38:48.034]                   {
[17:38:48.034]                     NULL
[17:38:48.034]                     RNGkind("Mersenne-Twister")
[17:38:48.034]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:38:48.034]                       inherits = FALSE)
[17:38:48.034]                   }
[17:38:48.034]                   options(future.plan = NULL)
[17:38:48.034]                   if (is.na(NA_character_)) 
[17:38:48.034]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.034]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:48.034]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:48.034]                     .init = FALSE)
[17:38:48.034]                 }
[17:38:48.034]             }
[17:38:48.034]         }
[17:38:48.034]     })
[17:38:48.034]     if (TRUE) {
[17:38:48.034]         base::sink(type = "output", split = FALSE)
[17:38:48.034]         if (TRUE) {
[17:38:48.034]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:48.034]         }
[17:38:48.034]         else {
[17:38:48.034]             ...future.result["stdout"] <- base::list(NULL)
[17:38:48.034]         }
[17:38:48.034]         base::close(...future.stdout)
[17:38:48.034]         ...future.stdout <- NULL
[17:38:48.034]     }
[17:38:48.034]     ...future.result$conditions <- ...future.conditions
[17:38:48.034]     ...future.result$finished <- base::Sys.time()
[17:38:48.034]     ...future.result
[17:38:48.034] }
[17:38:48.036] plan(): Setting new future strategy stack:
[17:38:48.036] List of future strategies:
[17:38:48.036] 1. sequential:
[17:38:48.036]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.036]    - tweaked: FALSE
[17:38:48.036]    - call: NULL
[17:38:48.037] plan(): nbrOfWorkers() = 1
[17:38:48.038] plan(): Setting new future strategy stack:
[17:38:48.038] List of future strategies:
[17:38:48.038] 1. sequential:
[17:38:48.038]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.038]    - tweaked: FALSE
[17:38:48.038]    - call: future::plan("sequential")
[17:38:48.038] plan(): nbrOfWorkers() = 1
[17:38:48.038] SequentialFuture started (and completed)
[17:38:48.039] signalConditions() ...
[17:38:48.039]  - include = ‘immediateCondition’
[17:38:48.039]  - exclude = 
[17:38:48.039]  - resignal = FALSE
[17:38:48.039]  - Number of conditions: 1
[17:38:48.039] signalConditions() ... done
[17:38:48.039] - Launch lazy future ... done
[17:38:48.039] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[17:38:48.040] signalConditions() ...
[17:38:48.040]  - include = ‘immediateCondition’
[17:38:48.040]  - exclude = 
[17:38:48.040]  - resignal = FALSE
[17:38:48.040]  - Number of conditions: 1
[17:38:48.040] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[17:38:48.041] resolved() for ‘SequentialFuture’ ...
[17:38:48.041] - state: ‘finished’
[17:38:48.041] - run: TRUE
[17:38:48.041] - result: ‘FutureResult’
[17:38:48.042] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[17:38:48.042] getGlobalsAndPackages() ...
[17:38:48.042] Searching for globals...
[17:38:48.043] - globals found: [2] ‘{’, ‘stop’
[17:38:48.043] Searching for globals ... DONE
[17:38:48.043] Resolving globals: FALSE
[17:38:48.044] 
[17:38:48.044] 
[17:38:48.044] getGlobalsAndPackages() ... DONE
[17:38:48.044] run() for ‘Future’ ...
[17:38:48.044] - state: ‘created’
[17:38:48.044] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:38:48.045] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:38:48.045] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:38:48.045]   - Field: ‘label’
[17:38:48.045]   - Field: ‘local’
[17:38:48.045]   - Field: ‘owner’
[17:38:48.045]   - Field: ‘envir’
[17:38:48.045]   - Field: ‘packages’
[17:38:48.045]   - Field: ‘gc’
[17:38:48.045]   - Field: ‘conditions’
[17:38:48.046]   - Field: ‘expr’
[17:38:48.046]   - Field: ‘uuid’
[17:38:48.046]   - Field: ‘seed’
[17:38:48.046]   - Field: ‘version’
[17:38:48.046]   - Field: ‘result’
[17:38:48.046]   - Field: ‘asynchronous’
[17:38:48.046]   - Field: ‘calls’
[17:38:48.046]   - Field: ‘globals’
[17:38:48.046]   - Field: ‘stdout’
[17:38:48.046]   - Field: ‘earlySignal’
[17:38:48.046]   - Field: ‘lazy’
[17:38:48.046]   - Field: ‘state’
[17:38:48.047] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:38:48.047] - Launch lazy future ...
[17:38:48.047] Packages needed by the future expression (n = 0): <none>
[17:38:48.047] Packages needed by future strategies (n = 0): <none>
[17:38:48.047] {
[17:38:48.047]     {
[17:38:48.047]         {
[17:38:48.047]             ...future.startTime <- base::Sys.time()
[17:38:48.047]             {
[17:38:48.047]                 {
[17:38:48.047]                   {
[17:38:48.047]                     base::local({
[17:38:48.047]                       has_future <- base::requireNamespace("future", 
[17:38:48.047]                         quietly = TRUE)
[17:38:48.047]                       if (has_future) {
[17:38:48.047]                         ns <- base::getNamespace("future")
[17:38:48.047]                         version <- ns[[".package"]][["version"]]
[17:38:48.047]                         if (is.null(version)) 
[17:38:48.047]                           version <- utils::packageVersion("future")
[17:38:48.047]                       }
[17:38:48.047]                       else {
[17:38:48.047]                         version <- NULL
[17:38:48.047]                       }
[17:38:48.047]                       if (!has_future || version < "1.8.0") {
[17:38:48.047]                         info <- base::c(r_version = base::gsub("R version ", 
[17:38:48.047]                           "", base::R.version$version.string), 
[17:38:48.047]                           platform = base::sprintf("%s (%s-bit)", 
[17:38:48.047]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:48.047]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:48.047]                             "release", "version")], collapse = " "), 
[17:38:48.047]                           hostname = base::Sys.info()[["nodename"]])
[17:38:48.047]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:38:48.047]                           info)
[17:38:48.047]                         info <- base::paste(info, collapse = "; ")
[17:38:48.047]                         if (!has_future) {
[17:38:48.047]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:48.047]                             info)
[17:38:48.047]                         }
[17:38:48.047]                         else {
[17:38:48.047]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:48.047]                             info, version)
[17:38:48.047]                         }
[17:38:48.047]                         base::stop(msg)
[17:38:48.047]                       }
[17:38:48.047]                     })
[17:38:48.047]                   }
[17:38:48.047]                   ...future.strategy.old <- future::plan("list")
[17:38:48.047]                   options(future.plan = NULL)
[17:38:48.047]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.047]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:48.047]                 }
[17:38:48.047]                 ...future.workdir <- getwd()
[17:38:48.047]             }
[17:38:48.047]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:48.047]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:48.047]         }
[17:38:48.047]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:48.047]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:48.047]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:48.047]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:48.047]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:48.047]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:48.047]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:48.047]             base::names(...future.oldOptions))
[17:38:48.047]     }
[17:38:48.047]     if (FALSE) {
[17:38:48.047]     }
[17:38:48.047]     else {
[17:38:48.047]         if (TRUE) {
[17:38:48.047]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:48.047]                 open = "w")
[17:38:48.047]         }
[17:38:48.047]         else {
[17:38:48.047]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:48.047]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:48.047]         }
[17:38:48.047]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:48.047]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:48.047]             base::sink(type = "output", split = FALSE)
[17:38:48.047]             base::close(...future.stdout)
[17:38:48.047]         }, add = TRUE)
[17:38:48.047]     }
[17:38:48.047]     ...future.frame <- base::sys.nframe()
[17:38:48.047]     ...future.conditions <- base::list()
[17:38:48.047]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:48.047]     if (FALSE) {
[17:38:48.047]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:48.047]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:48.047]     }
[17:38:48.047]     ...future.result <- base::tryCatch({
[17:38:48.047]         base::withCallingHandlers({
[17:38:48.047]             ...future.value <- base::withVisible(base::local({
[17:38:48.047]                 42L
[17:38:48.047]                 stop("Woops")
[17:38:48.047]             }))
[17:38:48.047]             future::FutureResult(value = ...future.value$value, 
[17:38:48.047]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.047]                   ...future.rng), globalenv = if (FALSE) 
[17:38:48.047]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:48.047]                     ...future.globalenv.names))
[17:38:48.047]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:48.047]         }, condition = base::local({
[17:38:48.047]             c <- base::c
[17:38:48.047]             inherits <- base::inherits
[17:38:48.047]             invokeRestart <- base::invokeRestart
[17:38:48.047]             length <- base::length
[17:38:48.047]             list <- base::list
[17:38:48.047]             seq.int <- base::seq.int
[17:38:48.047]             signalCondition <- base::signalCondition
[17:38:48.047]             sys.calls <- base::sys.calls
[17:38:48.047]             `[[` <- base::`[[`
[17:38:48.047]             `+` <- base::`+`
[17:38:48.047]             `<<-` <- base::`<<-`
[17:38:48.047]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:48.047]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:48.047]                   3L)]
[17:38:48.047]             }
[17:38:48.047]             function(cond) {
[17:38:48.047]                 is_error <- inherits(cond, "error")
[17:38:48.047]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:48.047]                   NULL)
[17:38:48.047]                 if (is_error) {
[17:38:48.047]                   sessionInformation <- function() {
[17:38:48.047]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:48.047]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:48.047]                       search = base::search(), system = base::Sys.info())
[17:38:48.047]                   }
[17:38:48.047]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.047]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:48.047]                     cond$call), session = sessionInformation(), 
[17:38:48.047]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:48.047]                   signalCondition(cond)
[17:38:48.047]                 }
[17:38:48.047]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:48.047]                 "immediateCondition"))) {
[17:38:48.047]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:48.047]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.047]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:48.047]                   if (TRUE && !signal) {
[17:38:48.047]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.047]                     {
[17:38:48.047]                       inherits <- base::inherits
[17:38:48.047]                       invokeRestart <- base::invokeRestart
[17:38:48.047]                       is.null <- base::is.null
[17:38:48.047]                       muffled <- FALSE
[17:38:48.047]                       if (inherits(cond, "message")) {
[17:38:48.047]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.047]                         if (muffled) 
[17:38:48.047]                           invokeRestart("muffleMessage")
[17:38:48.047]                       }
[17:38:48.047]                       else if (inherits(cond, "warning")) {
[17:38:48.047]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.047]                         if (muffled) 
[17:38:48.047]                           invokeRestart("muffleWarning")
[17:38:48.047]                       }
[17:38:48.047]                       else if (inherits(cond, "condition")) {
[17:38:48.047]                         if (!is.null(pattern)) {
[17:38:48.047]                           computeRestarts <- base::computeRestarts
[17:38:48.047]                           grepl <- base::grepl
[17:38:48.047]                           restarts <- computeRestarts(cond)
[17:38:48.047]                           for (restart in restarts) {
[17:38:48.047]                             name <- restart$name
[17:38:48.047]                             if (is.null(name)) 
[17:38:48.047]                               next
[17:38:48.047]                             if (!grepl(pattern, name)) 
[17:38:48.047]                               next
[17:38:48.047]                             invokeRestart(restart)
[17:38:48.047]                             muffled <- TRUE
[17:38:48.047]                             break
[17:38:48.047]                           }
[17:38:48.047]                         }
[17:38:48.047]                       }
[17:38:48.047]                       invisible(muffled)
[17:38:48.047]                     }
[17:38:48.047]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.047]                   }
[17:38:48.047]                 }
[17:38:48.047]                 else {
[17:38:48.047]                   if (TRUE) {
[17:38:48.047]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.047]                     {
[17:38:48.047]                       inherits <- base::inherits
[17:38:48.047]                       invokeRestart <- base::invokeRestart
[17:38:48.047]                       is.null <- base::is.null
[17:38:48.047]                       muffled <- FALSE
[17:38:48.047]                       if (inherits(cond, "message")) {
[17:38:48.047]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.047]                         if (muffled) 
[17:38:48.047]                           invokeRestart("muffleMessage")
[17:38:48.047]                       }
[17:38:48.047]                       else if (inherits(cond, "warning")) {
[17:38:48.047]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.047]                         if (muffled) 
[17:38:48.047]                           invokeRestart("muffleWarning")
[17:38:48.047]                       }
[17:38:48.047]                       else if (inherits(cond, "condition")) {
[17:38:48.047]                         if (!is.null(pattern)) {
[17:38:48.047]                           computeRestarts <- base::computeRestarts
[17:38:48.047]                           grepl <- base::grepl
[17:38:48.047]                           restarts <- computeRestarts(cond)
[17:38:48.047]                           for (restart in restarts) {
[17:38:48.047]                             name <- restart$name
[17:38:48.047]                             if (is.null(name)) 
[17:38:48.047]                               next
[17:38:48.047]                             if (!grepl(pattern, name)) 
[17:38:48.047]                               next
[17:38:48.047]                             invokeRestart(restart)
[17:38:48.047]                             muffled <- TRUE
[17:38:48.047]                             break
[17:38:48.047]                           }
[17:38:48.047]                         }
[17:38:48.047]                       }
[17:38:48.047]                       invisible(muffled)
[17:38:48.047]                     }
[17:38:48.047]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.047]                   }
[17:38:48.047]                 }
[17:38:48.047]             }
[17:38:48.047]         }))
[17:38:48.047]     }, error = function(ex) {
[17:38:48.047]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:48.047]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.047]                 ...future.rng), started = ...future.startTime, 
[17:38:48.047]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:48.047]             version = "1.8"), class = "FutureResult")
[17:38:48.047]     }, finally = {
[17:38:48.047]         if (!identical(...future.workdir, getwd())) 
[17:38:48.047]             setwd(...future.workdir)
[17:38:48.047]         {
[17:38:48.047]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:48.047]                 ...future.oldOptions$nwarnings <- NULL
[17:38:48.047]             }
[17:38:48.047]             base::options(...future.oldOptions)
[17:38:48.047]             if (.Platform$OS.type == "windows") {
[17:38:48.047]                 old_names <- names(...future.oldEnvVars)
[17:38:48.047]                 envs <- base::Sys.getenv()
[17:38:48.047]                 names <- names(envs)
[17:38:48.047]                 common <- intersect(names, old_names)
[17:38:48.047]                 added <- setdiff(names, old_names)
[17:38:48.047]                 removed <- setdiff(old_names, names)
[17:38:48.047]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:48.047]                   envs[common]]
[17:38:48.047]                 NAMES <- toupper(changed)
[17:38:48.047]                 args <- list()
[17:38:48.047]                 for (kk in seq_along(NAMES)) {
[17:38:48.047]                   name <- changed[[kk]]
[17:38:48.047]                   NAME <- NAMES[[kk]]
[17:38:48.047]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.047]                     next
[17:38:48.047]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.047]                 }
[17:38:48.047]                 NAMES <- toupper(added)
[17:38:48.047]                 for (kk in seq_along(NAMES)) {
[17:38:48.047]                   name <- added[[kk]]
[17:38:48.047]                   NAME <- NAMES[[kk]]
[17:38:48.047]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.047]                     next
[17:38:48.047]                   args[[name]] <- ""
[17:38:48.047]                 }
[17:38:48.047]                 NAMES <- toupper(removed)
[17:38:48.047]                 for (kk in seq_along(NAMES)) {
[17:38:48.047]                   name <- removed[[kk]]
[17:38:48.047]                   NAME <- NAMES[[kk]]
[17:38:48.047]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.047]                     next
[17:38:48.047]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.047]                 }
[17:38:48.047]                 if (length(args) > 0) 
[17:38:48.047]                   base::do.call(base::Sys.setenv, args = args)
[17:38:48.047]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:48.047]             }
[17:38:48.047]             else {
[17:38:48.047]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:48.047]             }
[17:38:48.047]             {
[17:38:48.047]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:48.047]                   0L) {
[17:38:48.047]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:48.047]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:48.047]                   base::options(opts)
[17:38:48.047]                 }
[17:38:48.047]                 {
[17:38:48.047]                   {
[17:38:48.047]                     NULL
[17:38:48.047]                     RNGkind("Mersenne-Twister")
[17:38:48.047]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:38:48.047]                       inherits = FALSE)
[17:38:48.047]                   }
[17:38:48.047]                   options(future.plan = NULL)
[17:38:48.047]                   if (is.na(NA_character_)) 
[17:38:48.047]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.047]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:48.047]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:48.047]                     .init = FALSE)
[17:38:48.047]                 }
[17:38:48.047]             }
[17:38:48.047]         }
[17:38:48.047]     })
[17:38:48.047]     if (TRUE) {
[17:38:48.047]         base::sink(type = "output", split = FALSE)
[17:38:48.047]         if (TRUE) {
[17:38:48.047]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:48.047]         }
[17:38:48.047]         else {
[17:38:48.047]             ...future.result["stdout"] <- base::list(NULL)
[17:38:48.047]         }
[17:38:48.047]         base::close(...future.stdout)
[17:38:48.047]         ...future.stdout <- NULL
[17:38:48.047]     }
[17:38:48.047]     ...future.result$conditions <- ...future.conditions
[17:38:48.047]     ...future.result$finished <- base::Sys.time()
[17:38:48.047]     ...future.result
[17:38:48.047] }
[17:38:48.049] plan(): Setting new future strategy stack:
[17:38:48.049] List of future strategies:
[17:38:48.049] 1. sequential:
[17:38:48.049]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.049]    - tweaked: FALSE
[17:38:48.049]    - call: NULL
[17:38:48.050] plan(): nbrOfWorkers() = 1
[17:38:48.050] plan(): Setting new future strategy stack:
[17:38:48.050] List of future strategies:
[17:38:48.050] 1. sequential:
[17:38:48.050]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.050]    - tweaked: FALSE
[17:38:48.050]    - call: future::plan("sequential")
[17:38:48.051] plan(): nbrOfWorkers() = 1
[17:38:48.051] SequentialFuture started (and completed)
[17:38:48.051] signalConditions() ...
[17:38:48.051]  - include = ‘immediateCondition’
[17:38:48.051]  - exclude = 
[17:38:48.051]  - resignal = FALSE
[17:38:48.051]  - Number of conditions: 1
[17:38:48.052] signalConditions() ... done
[17:38:48.052] - Launch lazy future ... done
[17:38:48.052] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[17:38:48.052] resolved() for ‘SequentialFuture’ ...
[17:38:48.052] - state: ‘finished’
[17:38:48.052] - run: TRUE
[17:38:48.052] - result: ‘FutureResult’
[17:38:48.052] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[17:38:48.053] getGlobalsAndPackages() ...
[17:38:48.053] Searching for globals...
[17:38:48.054] - globals found: [2] ‘{’, ‘stop’
[17:38:48.054] Searching for globals ... DONE
[17:38:48.054] Resolving globals: FALSE
[17:38:48.055] 
[17:38:48.055] 
[17:38:48.055] getGlobalsAndPackages() ... DONE
[17:38:48.055] run() for ‘Future’ ...
[17:38:48.055] - state: ‘created’
[17:38:48.055] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:38:48.056] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:38:48.056] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:38:48.056]   - Field: ‘label’
[17:38:48.056]   - Field: ‘local’
[17:38:48.056]   - Field: ‘owner’
[17:38:48.056]   - Field: ‘envir’
[17:38:48.056]   - Field: ‘packages’
[17:38:48.056]   - Field: ‘gc’
[17:38:48.056]   - Field: ‘conditions’
[17:38:48.056]   - Field: ‘expr’
[17:38:48.057]   - Field: ‘uuid’
[17:38:48.057]   - Field: ‘seed’
[17:38:48.057]   - Field: ‘version’
[17:38:48.057]   - Field: ‘result’
[17:38:48.057]   - Field: ‘asynchronous’
[17:38:48.057]   - Field: ‘calls’
[17:38:48.057]   - Field: ‘globals’
[17:38:48.057]   - Field: ‘stdout’
[17:38:48.060]   - Field: ‘earlySignal’
[17:38:48.060]   - Field: ‘lazy’
[17:38:48.060]   - Field: ‘state’
[17:38:48.060] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:38:48.060] - Launch lazy future ...
[17:38:48.060] Packages needed by the future expression (n = 0): <none>
[17:38:48.060] Packages needed by future strategies (n = 0): <none>
[17:38:48.061] {
[17:38:48.061]     {
[17:38:48.061]         {
[17:38:48.061]             ...future.startTime <- base::Sys.time()
[17:38:48.061]             {
[17:38:48.061]                 {
[17:38:48.061]                   {
[17:38:48.061]                     base::local({
[17:38:48.061]                       has_future <- base::requireNamespace("future", 
[17:38:48.061]                         quietly = TRUE)
[17:38:48.061]                       if (has_future) {
[17:38:48.061]                         ns <- base::getNamespace("future")
[17:38:48.061]                         version <- ns[[".package"]][["version"]]
[17:38:48.061]                         if (is.null(version)) 
[17:38:48.061]                           version <- utils::packageVersion("future")
[17:38:48.061]                       }
[17:38:48.061]                       else {
[17:38:48.061]                         version <- NULL
[17:38:48.061]                       }
[17:38:48.061]                       if (!has_future || version < "1.8.0") {
[17:38:48.061]                         info <- base::c(r_version = base::gsub("R version ", 
[17:38:48.061]                           "", base::R.version$version.string), 
[17:38:48.061]                           platform = base::sprintf("%s (%s-bit)", 
[17:38:48.061]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:48.061]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:48.061]                             "release", "version")], collapse = " "), 
[17:38:48.061]                           hostname = base::Sys.info()[["nodename"]])
[17:38:48.061]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:38:48.061]                           info)
[17:38:48.061]                         info <- base::paste(info, collapse = "; ")
[17:38:48.061]                         if (!has_future) {
[17:38:48.061]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:48.061]                             info)
[17:38:48.061]                         }
[17:38:48.061]                         else {
[17:38:48.061]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:48.061]                             info, version)
[17:38:48.061]                         }
[17:38:48.061]                         base::stop(msg)
[17:38:48.061]                       }
[17:38:48.061]                     })
[17:38:48.061]                   }
[17:38:48.061]                   ...future.strategy.old <- future::plan("list")
[17:38:48.061]                   options(future.plan = NULL)
[17:38:48.061]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.061]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:48.061]                 }
[17:38:48.061]                 ...future.workdir <- getwd()
[17:38:48.061]             }
[17:38:48.061]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:48.061]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:48.061]         }
[17:38:48.061]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:48.061]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:48.061]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:48.061]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:48.061]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:48.061]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:48.061]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:48.061]             base::names(...future.oldOptions))
[17:38:48.061]     }
[17:38:48.061]     if (FALSE) {
[17:38:48.061]     }
[17:38:48.061]     else {
[17:38:48.061]         if (TRUE) {
[17:38:48.061]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:48.061]                 open = "w")
[17:38:48.061]         }
[17:38:48.061]         else {
[17:38:48.061]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:48.061]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:48.061]         }
[17:38:48.061]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:48.061]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:48.061]             base::sink(type = "output", split = FALSE)
[17:38:48.061]             base::close(...future.stdout)
[17:38:48.061]         }, add = TRUE)
[17:38:48.061]     }
[17:38:48.061]     ...future.frame <- base::sys.nframe()
[17:38:48.061]     ...future.conditions <- base::list()
[17:38:48.061]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:48.061]     if (FALSE) {
[17:38:48.061]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:48.061]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:48.061]     }
[17:38:48.061]     ...future.result <- base::tryCatch({
[17:38:48.061]         base::withCallingHandlers({
[17:38:48.061]             ...future.value <- base::withVisible(base::local({
[17:38:48.061]                 42L
[17:38:48.061]                 stop("Woops")
[17:38:48.061]             }))
[17:38:48.061]             future::FutureResult(value = ...future.value$value, 
[17:38:48.061]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.061]                   ...future.rng), globalenv = if (FALSE) 
[17:38:48.061]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:48.061]                     ...future.globalenv.names))
[17:38:48.061]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:48.061]         }, condition = base::local({
[17:38:48.061]             c <- base::c
[17:38:48.061]             inherits <- base::inherits
[17:38:48.061]             invokeRestart <- base::invokeRestart
[17:38:48.061]             length <- base::length
[17:38:48.061]             list <- base::list
[17:38:48.061]             seq.int <- base::seq.int
[17:38:48.061]             signalCondition <- base::signalCondition
[17:38:48.061]             sys.calls <- base::sys.calls
[17:38:48.061]             `[[` <- base::`[[`
[17:38:48.061]             `+` <- base::`+`
[17:38:48.061]             `<<-` <- base::`<<-`
[17:38:48.061]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:48.061]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:48.061]                   3L)]
[17:38:48.061]             }
[17:38:48.061]             function(cond) {
[17:38:48.061]                 is_error <- inherits(cond, "error")
[17:38:48.061]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:48.061]                   NULL)
[17:38:48.061]                 if (is_error) {
[17:38:48.061]                   sessionInformation <- function() {
[17:38:48.061]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:48.061]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:48.061]                       search = base::search(), system = base::Sys.info())
[17:38:48.061]                   }
[17:38:48.061]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.061]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:48.061]                     cond$call), session = sessionInformation(), 
[17:38:48.061]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:48.061]                   signalCondition(cond)
[17:38:48.061]                 }
[17:38:48.061]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:48.061]                 "immediateCondition"))) {
[17:38:48.061]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:48.061]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.061]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:48.061]                   if (TRUE && !signal) {
[17:38:48.061]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.061]                     {
[17:38:48.061]                       inherits <- base::inherits
[17:38:48.061]                       invokeRestart <- base::invokeRestart
[17:38:48.061]                       is.null <- base::is.null
[17:38:48.061]                       muffled <- FALSE
[17:38:48.061]                       if (inherits(cond, "message")) {
[17:38:48.061]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.061]                         if (muffled) 
[17:38:48.061]                           invokeRestart("muffleMessage")
[17:38:48.061]                       }
[17:38:48.061]                       else if (inherits(cond, "warning")) {
[17:38:48.061]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.061]                         if (muffled) 
[17:38:48.061]                           invokeRestart("muffleWarning")
[17:38:48.061]                       }
[17:38:48.061]                       else if (inherits(cond, "condition")) {
[17:38:48.061]                         if (!is.null(pattern)) {
[17:38:48.061]                           computeRestarts <- base::computeRestarts
[17:38:48.061]                           grepl <- base::grepl
[17:38:48.061]                           restarts <- computeRestarts(cond)
[17:38:48.061]                           for (restart in restarts) {
[17:38:48.061]                             name <- restart$name
[17:38:48.061]                             if (is.null(name)) 
[17:38:48.061]                               next
[17:38:48.061]                             if (!grepl(pattern, name)) 
[17:38:48.061]                               next
[17:38:48.061]                             invokeRestart(restart)
[17:38:48.061]                             muffled <- TRUE
[17:38:48.061]                             break
[17:38:48.061]                           }
[17:38:48.061]                         }
[17:38:48.061]                       }
[17:38:48.061]                       invisible(muffled)
[17:38:48.061]                     }
[17:38:48.061]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.061]                   }
[17:38:48.061]                 }
[17:38:48.061]                 else {
[17:38:48.061]                   if (TRUE) {
[17:38:48.061]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.061]                     {
[17:38:48.061]                       inherits <- base::inherits
[17:38:48.061]                       invokeRestart <- base::invokeRestart
[17:38:48.061]                       is.null <- base::is.null
[17:38:48.061]                       muffled <- FALSE
[17:38:48.061]                       if (inherits(cond, "message")) {
[17:38:48.061]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.061]                         if (muffled) 
[17:38:48.061]                           invokeRestart("muffleMessage")
[17:38:48.061]                       }
[17:38:48.061]                       else if (inherits(cond, "warning")) {
[17:38:48.061]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.061]                         if (muffled) 
[17:38:48.061]                           invokeRestart("muffleWarning")
[17:38:48.061]                       }
[17:38:48.061]                       else if (inherits(cond, "condition")) {
[17:38:48.061]                         if (!is.null(pattern)) {
[17:38:48.061]                           computeRestarts <- base::computeRestarts
[17:38:48.061]                           grepl <- base::grepl
[17:38:48.061]                           restarts <- computeRestarts(cond)
[17:38:48.061]                           for (restart in restarts) {
[17:38:48.061]                             name <- restart$name
[17:38:48.061]                             if (is.null(name)) 
[17:38:48.061]                               next
[17:38:48.061]                             if (!grepl(pattern, name)) 
[17:38:48.061]                               next
[17:38:48.061]                             invokeRestart(restart)
[17:38:48.061]                             muffled <- TRUE
[17:38:48.061]                             break
[17:38:48.061]                           }
[17:38:48.061]                         }
[17:38:48.061]                       }
[17:38:48.061]                       invisible(muffled)
[17:38:48.061]                     }
[17:38:48.061]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.061]                   }
[17:38:48.061]                 }
[17:38:48.061]             }
[17:38:48.061]         }))
[17:38:48.061]     }, error = function(ex) {
[17:38:48.061]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:48.061]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.061]                 ...future.rng), started = ...future.startTime, 
[17:38:48.061]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:48.061]             version = "1.8"), class = "FutureResult")
[17:38:48.061]     }, finally = {
[17:38:48.061]         if (!identical(...future.workdir, getwd())) 
[17:38:48.061]             setwd(...future.workdir)
[17:38:48.061]         {
[17:38:48.061]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:48.061]                 ...future.oldOptions$nwarnings <- NULL
[17:38:48.061]             }
[17:38:48.061]             base::options(...future.oldOptions)
[17:38:48.061]             if (.Platform$OS.type == "windows") {
[17:38:48.061]                 old_names <- names(...future.oldEnvVars)
[17:38:48.061]                 envs <- base::Sys.getenv()
[17:38:48.061]                 names <- names(envs)
[17:38:48.061]                 common <- intersect(names, old_names)
[17:38:48.061]                 added <- setdiff(names, old_names)
[17:38:48.061]                 removed <- setdiff(old_names, names)
[17:38:48.061]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:48.061]                   envs[common]]
[17:38:48.061]                 NAMES <- toupper(changed)
[17:38:48.061]                 args <- list()
[17:38:48.061]                 for (kk in seq_along(NAMES)) {
[17:38:48.061]                   name <- changed[[kk]]
[17:38:48.061]                   NAME <- NAMES[[kk]]
[17:38:48.061]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.061]                     next
[17:38:48.061]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.061]                 }
[17:38:48.061]                 NAMES <- toupper(added)
[17:38:48.061]                 for (kk in seq_along(NAMES)) {
[17:38:48.061]                   name <- added[[kk]]
[17:38:48.061]                   NAME <- NAMES[[kk]]
[17:38:48.061]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.061]                     next
[17:38:48.061]                   args[[name]] <- ""
[17:38:48.061]                 }
[17:38:48.061]                 NAMES <- toupper(removed)
[17:38:48.061]                 for (kk in seq_along(NAMES)) {
[17:38:48.061]                   name <- removed[[kk]]
[17:38:48.061]                   NAME <- NAMES[[kk]]
[17:38:48.061]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.061]                     next
[17:38:48.061]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.061]                 }
[17:38:48.061]                 if (length(args) > 0) 
[17:38:48.061]                   base::do.call(base::Sys.setenv, args = args)
[17:38:48.061]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:48.061]             }
[17:38:48.061]             else {
[17:38:48.061]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:48.061]             }
[17:38:48.061]             {
[17:38:48.061]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:48.061]                   0L) {
[17:38:48.061]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:48.061]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:48.061]                   base::options(opts)
[17:38:48.061]                 }
[17:38:48.061]                 {
[17:38:48.061]                   {
[17:38:48.061]                     NULL
[17:38:48.061]                     RNGkind("Mersenne-Twister")
[17:38:48.061]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:38:48.061]                       inherits = FALSE)
[17:38:48.061]                   }
[17:38:48.061]                   options(future.plan = NULL)
[17:38:48.061]                   if (is.na(NA_character_)) 
[17:38:48.061]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.061]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:48.061]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:48.061]                     .init = FALSE)
[17:38:48.061]                 }
[17:38:48.061]             }
[17:38:48.061]         }
[17:38:48.061]     })
[17:38:48.061]     if (TRUE) {
[17:38:48.061]         base::sink(type = "output", split = FALSE)
[17:38:48.061]         if (TRUE) {
[17:38:48.061]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:48.061]         }
[17:38:48.061]         else {
[17:38:48.061]             ...future.result["stdout"] <- base::list(NULL)
[17:38:48.061]         }
[17:38:48.061]         base::close(...future.stdout)
[17:38:48.061]         ...future.stdout <- NULL
[17:38:48.061]     }
[17:38:48.061]     ...future.result$conditions <- ...future.conditions
[17:38:48.061]     ...future.result$finished <- base::Sys.time()
[17:38:48.061]     ...future.result
[17:38:48.061] }
[17:38:48.062] plan(): Setting new future strategy stack:
[17:38:48.063] List of future strategies:
[17:38:48.063] 1. sequential:
[17:38:48.063]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.063]    - tweaked: FALSE
[17:38:48.063]    - call: NULL
[17:38:48.063] plan(): nbrOfWorkers() = 1
[17:38:48.064] plan(): Setting new future strategy stack:
[17:38:48.064] List of future strategies:
[17:38:48.064] 1. sequential:
[17:38:48.064]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.064]    - tweaked: FALSE
[17:38:48.064]    - call: future::plan("sequential")
[17:38:48.064] plan(): nbrOfWorkers() = 1
[17:38:48.065] SequentialFuture started (and completed)
[17:38:48.065] signalConditions() ...
[17:38:48.065]  - include = ‘immediateCondition’
[17:38:48.065]  - exclude = 
[17:38:48.065]  - resignal = FALSE
[17:38:48.065]  - Number of conditions: 1
[17:38:48.065] signalConditions() ... done
[17:38:48.065] - Launch lazy future ... done
[17:38:48.065] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[17:38:48.066] getGlobalsAndPackages() ...
[17:38:48.066] Searching for globals...
[17:38:48.067] - globals found: [2] ‘{’, ‘stop’
[17:38:48.067] Searching for globals ... DONE
[17:38:48.067] Resolving globals: FALSE
[17:38:48.067] 
[17:38:48.067] 
[17:38:48.067] getGlobalsAndPackages() ... DONE
[17:38:48.067] run() for ‘Future’ ...
[17:38:48.067] - state: ‘created’
[17:38:48.068] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:38:48.068] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:38:48.068] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:38:48.068]   - Field: ‘label’
[17:38:48.068]   - Field: ‘local’
[17:38:48.068]   - Field: ‘owner’
[17:38:48.068]   - Field: ‘envir’
[17:38:48.068]   - Field: ‘packages’
[17:38:48.069]   - Field: ‘gc’
[17:38:48.069]   - Field: ‘conditions’
[17:38:48.069]   - Field: ‘expr’
[17:38:48.069]   - Field: ‘uuid’
[17:38:48.069]   - Field: ‘seed’
[17:38:48.069]   - Field: ‘version’
[17:38:48.069]   - Field: ‘result’
[17:38:48.069]   - Field: ‘asynchronous’
[17:38:48.069]   - Field: ‘calls’
[17:38:48.069]   - Field: ‘globals’
[17:38:48.069]   - Field: ‘stdout’
[17:38:48.069]   - Field: ‘earlySignal’
[17:38:48.070]   - Field: ‘lazy’
[17:38:48.070]   - Field: ‘state’
[17:38:48.070] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:38:48.070] - Launch lazy future ...
[17:38:48.070] Packages needed by the future expression (n = 0): <none>
[17:38:48.070] Packages needed by future strategies (n = 0): <none>
[17:38:48.070] {
[17:38:48.070]     {
[17:38:48.070]         {
[17:38:48.070]             ...future.startTime <- base::Sys.time()
[17:38:48.070]             {
[17:38:48.070]                 {
[17:38:48.070]                   {
[17:38:48.070]                     base::local({
[17:38:48.070]                       has_future <- base::requireNamespace("future", 
[17:38:48.070]                         quietly = TRUE)
[17:38:48.070]                       if (has_future) {
[17:38:48.070]                         ns <- base::getNamespace("future")
[17:38:48.070]                         version <- ns[[".package"]][["version"]]
[17:38:48.070]                         if (is.null(version)) 
[17:38:48.070]                           version <- utils::packageVersion("future")
[17:38:48.070]                       }
[17:38:48.070]                       else {
[17:38:48.070]                         version <- NULL
[17:38:48.070]                       }
[17:38:48.070]                       if (!has_future || version < "1.8.0") {
[17:38:48.070]                         info <- base::c(r_version = base::gsub("R version ", 
[17:38:48.070]                           "", base::R.version$version.string), 
[17:38:48.070]                           platform = base::sprintf("%s (%s-bit)", 
[17:38:48.070]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:48.070]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:48.070]                             "release", "version")], collapse = " "), 
[17:38:48.070]                           hostname = base::Sys.info()[["nodename"]])
[17:38:48.070]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:38:48.070]                           info)
[17:38:48.070]                         info <- base::paste(info, collapse = "; ")
[17:38:48.070]                         if (!has_future) {
[17:38:48.070]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:48.070]                             info)
[17:38:48.070]                         }
[17:38:48.070]                         else {
[17:38:48.070]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:48.070]                             info, version)
[17:38:48.070]                         }
[17:38:48.070]                         base::stop(msg)
[17:38:48.070]                       }
[17:38:48.070]                     })
[17:38:48.070]                   }
[17:38:48.070]                   ...future.strategy.old <- future::plan("list")
[17:38:48.070]                   options(future.plan = NULL)
[17:38:48.070]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.070]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:48.070]                 }
[17:38:48.070]                 ...future.workdir <- getwd()
[17:38:48.070]             }
[17:38:48.070]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:48.070]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:48.070]         }
[17:38:48.070]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:48.070]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:48.070]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:48.070]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:48.070]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:48.070]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:48.070]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:48.070]             base::names(...future.oldOptions))
[17:38:48.070]     }
[17:38:48.070]     if (FALSE) {
[17:38:48.070]     }
[17:38:48.070]     else {
[17:38:48.070]         if (TRUE) {
[17:38:48.070]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:48.070]                 open = "w")
[17:38:48.070]         }
[17:38:48.070]         else {
[17:38:48.070]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:48.070]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:48.070]         }
[17:38:48.070]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:48.070]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:48.070]             base::sink(type = "output", split = FALSE)
[17:38:48.070]             base::close(...future.stdout)
[17:38:48.070]         }, add = TRUE)
[17:38:48.070]     }
[17:38:48.070]     ...future.frame <- base::sys.nframe()
[17:38:48.070]     ...future.conditions <- base::list()
[17:38:48.070]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:48.070]     if (FALSE) {
[17:38:48.070]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:48.070]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:48.070]     }
[17:38:48.070]     ...future.result <- base::tryCatch({
[17:38:48.070]         base::withCallingHandlers({
[17:38:48.070]             ...future.value <- base::withVisible(base::local({
[17:38:48.070]                 42L
[17:38:48.070]                 stop("Woops")
[17:38:48.070]             }))
[17:38:48.070]             future::FutureResult(value = ...future.value$value, 
[17:38:48.070]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.070]                   ...future.rng), globalenv = if (FALSE) 
[17:38:48.070]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:48.070]                     ...future.globalenv.names))
[17:38:48.070]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:48.070]         }, condition = base::local({
[17:38:48.070]             c <- base::c
[17:38:48.070]             inherits <- base::inherits
[17:38:48.070]             invokeRestart <- base::invokeRestart
[17:38:48.070]             length <- base::length
[17:38:48.070]             list <- base::list
[17:38:48.070]             seq.int <- base::seq.int
[17:38:48.070]             signalCondition <- base::signalCondition
[17:38:48.070]             sys.calls <- base::sys.calls
[17:38:48.070]             `[[` <- base::`[[`
[17:38:48.070]             `+` <- base::`+`
[17:38:48.070]             `<<-` <- base::`<<-`
[17:38:48.070]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:48.070]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:48.070]                   3L)]
[17:38:48.070]             }
[17:38:48.070]             function(cond) {
[17:38:48.070]                 is_error <- inherits(cond, "error")
[17:38:48.070]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:48.070]                   NULL)
[17:38:48.070]                 if (is_error) {
[17:38:48.070]                   sessionInformation <- function() {
[17:38:48.070]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:48.070]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:48.070]                       search = base::search(), system = base::Sys.info())
[17:38:48.070]                   }
[17:38:48.070]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.070]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:48.070]                     cond$call), session = sessionInformation(), 
[17:38:48.070]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:48.070]                   signalCondition(cond)
[17:38:48.070]                 }
[17:38:48.070]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:48.070]                 "immediateCondition"))) {
[17:38:48.070]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:48.070]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.070]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:48.070]                   if (TRUE && !signal) {
[17:38:48.070]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.070]                     {
[17:38:48.070]                       inherits <- base::inherits
[17:38:48.070]                       invokeRestart <- base::invokeRestart
[17:38:48.070]                       is.null <- base::is.null
[17:38:48.070]                       muffled <- FALSE
[17:38:48.070]                       if (inherits(cond, "message")) {
[17:38:48.070]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.070]                         if (muffled) 
[17:38:48.070]                           invokeRestart("muffleMessage")
[17:38:48.070]                       }
[17:38:48.070]                       else if (inherits(cond, "warning")) {
[17:38:48.070]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.070]                         if (muffled) 
[17:38:48.070]                           invokeRestart("muffleWarning")
[17:38:48.070]                       }
[17:38:48.070]                       else if (inherits(cond, "condition")) {
[17:38:48.070]                         if (!is.null(pattern)) {
[17:38:48.070]                           computeRestarts <- base::computeRestarts
[17:38:48.070]                           grepl <- base::grepl
[17:38:48.070]                           restarts <- computeRestarts(cond)
[17:38:48.070]                           for (restart in restarts) {
[17:38:48.070]                             name <- restart$name
[17:38:48.070]                             if (is.null(name)) 
[17:38:48.070]                               next
[17:38:48.070]                             if (!grepl(pattern, name)) 
[17:38:48.070]                               next
[17:38:48.070]                             invokeRestart(restart)
[17:38:48.070]                             muffled <- TRUE
[17:38:48.070]                             break
[17:38:48.070]                           }
[17:38:48.070]                         }
[17:38:48.070]                       }
[17:38:48.070]                       invisible(muffled)
[17:38:48.070]                     }
[17:38:48.070]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.070]                   }
[17:38:48.070]                 }
[17:38:48.070]                 else {
[17:38:48.070]                   if (TRUE) {
[17:38:48.070]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.070]                     {
[17:38:48.070]                       inherits <- base::inherits
[17:38:48.070]                       invokeRestart <- base::invokeRestart
[17:38:48.070]                       is.null <- base::is.null
[17:38:48.070]                       muffled <- FALSE
[17:38:48.070]                       if (inherits(cond, "message")) {
[17:38:48.070]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.070]                         if (muffled) 
[17:38:48.070]                           invokeRestart("muffleMessage")
[17:38:48.070]                       }
[17:38:48.070]                       else if (inherits(cond, "warning")) {
[17:38:48.070]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.070]                         if (muffled) 
[17:38:48.070]                           invokeRestart("muffleWarning")
[17:38:48.070]                       }
[17:38:48.070]                       else if (inherits(cond, "condition")) {
[17:38:48.070]                         if (!is.null(pattern)) {
[17:38:48.070]                           computeRestarts <- base::computeRestarts
[17:38:48.070]                           grepl <- base::grepl
[17:38:48.070]                           restarts <- computeRestarts(cond)
[17:38:48.070]                           for (restart in restarts) {
[17:38:48.070]                             name <- restart$name
[17:38:48.070]                             if (is.null(name)) 
[17:38:48.070]                               next
[17:38:48.070]                             if (!grepl(pattern, name)) 
[17:38:48.070]                               next
[17:38:48.070]                             invokeRestart(restart)
[17:38:48.070]                             muffled <- TRUE
[17:38:48.070]                             break
[17:38:48.070]                           }
[17:38:48.070]                         }
[17:38:48.070]                       }
[17:38:48.070]                       invisible(muffled)
[17:38:48.070]                     }
[17:38:48.070]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.070]                   }
[17:38:48.070]                 }
[17:38:48.070]             }
[17:38:48.070]         }))
[17:38:48.070]     }, error = function(ex) {
[17:38:48.070]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:48.070]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.070]                 ...future.rng), started = ...future.startTime, 
[17:38:48.070]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:48.070]             version = "1.8"), class = "FutureResult")
[17:38:48.070]     }, finally = {
[17:38:48.070]         if (!identical(...future.workdir, getwd())) 
[17:38:48.070]             setwd(...future.workdir)
[17:38:48.070]         {
[17:38:48.070]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:48.070]                 ...future.oldOptions$nwarnings <- NULL
[17:38:48.070]             }
[17:38:48.070]             base::options(...future.oldOptions)
[17:38:48.070]             if (.Platform$OS.type == "windows") {
[17:38:48.070]                 old_names <- names(...future.oldEnvVars)
[17:38:48.070]                 envs <- base::Sys.getenv()
[17:38:48.070]                 names <- names(envs)
[17:38:48.070]                 common <- intersect(names, old_names)
[17:38:48.070]                 added <- setdiff(names, old_names)
[17:38:48.070]                 removed <- setdiff(old_names, names)
[17:38:48.070]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:48.070]                   envs[common]]
[17:38:48.070]                 NAMES <- toupper(changed)
[17:38:48.070]                 args <- list()
[17:38:48.070]                 for (kk in seq_along(NAMES)) {
[17:38:48.070]                   name <- changed[[kk]]
[17:38:48.070]                   NAME <- NAMES[[kk]]
[17:38:48.070]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.070]                     next
[17:38:48.070]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.070]                 }
[17:38:48.070]                 NAMES <- toupper(added)
[17:38:48.070]                 for (kk in seq_along(NAMES)) {
[17:38:48.070]                   name <- added[[kk]]
[17:38:48.070]                   NAME <- NAMES[[kk]]
[17:38:48.070]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.070]                     next
[17:38:48.070]                   args[[name]] <- ""
[17:38:48.070]                 }
[17:38:48.070]                 NAMES <- toupper(removed)
[17:38:48.070]                 for (kk in seq_along(NAMES)) {
[17:38:48.070]                   name <- removed[[kk]]
[17:38:48.070]                   NAME <- NAMES[[kk]]
[17:38:48.070]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.070]                     next
[17:38:48.070]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.070]                 }
[17:38:48.070]                 if (length(args) > 0) 
[17:38:48.070]                   base::do.call(base::Sys.setenv, args = args)
[17:38:48.070]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:48.070]             }
[17:38:48.070]             else {
[17:38:48.070]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:48.070]             }
[17:38:48.070]             {
[17:38:48.070]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:48.070]                   0L) {
[17:38:48.070]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:48.070]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:48.070]                   base::options(opts)
[17:38:48.070]                 }
[17:38:48.070]                 {
[17:38:48.070]                   {
[17:38:48.070]                     NULL
[17:38:48.070]                     RNGkind("Mersenne-Twister")
[17:38:48.070]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:38:48.070]                       inherits = FALSE)
[17:38:48.070]                   }
[17:38:48.070]                   options(future.plan = NULL)
[17:38:48.070]                   if (is.na(NA_character_)) 
[17:38:48.070]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.070]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:48.070]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:48.070]                     .init = FALSE)
[17:38:48.070]                 }
[17:38:48.070]             }
[17:38:48.070]         }
[17:38:48.070]     })
[17:38:48.070]     if (TRUE) {
[17:38:48.070]         base::sink(type = "output", split = FALSE)
[17:38:48.070]         if (TRUE) {
[17:38:48.070]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:48.070]         }
[17:38:48.070]         else {
[17:38:48.070]             ...future.result["stdout"] <- base::list(NULL)
[17:38:48.070]         }
[17:38:48.070]         base::close(...future.stdout)
[17:38:48.070]         ...future.stdout <- NULL
[17:38:48.070]     }
[17:38:48.070]     ...future.result$conditions <- ...future.conditions
[17:38:48.070]     ...future.result$finished <- base::Sys.time()
[17:38:48.070]     ...future.result
[17:38:48.070] }
[17:38:48.072] plan(): Setting new future strategy stack:
[17:38:48.072] List of future strategies:
[17:38:48.072] 1. sequential:
[17:38:48.072]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.072]    - tweaked: FALSE
[17:38:48.072]    - call: NULL
[17:38:48.073] plan(): nbrOfWorkers() = 1
[17:38:48.073] plan(): Setting new future strategy stack:
[17:38:48.074] List of future strategies:
[17:38:48.074] 1. sequential:
[17:38:48.074]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.074]    - tweaked: FALSE
[17:38:48.074]    - call: future::plan("sequential")
[17:38:48.074] plan(): nbrOfWorkers() = 1
[17:38:48.074] SequentialFuture started (and completed)
[17:38:48.074] signalConditions() ...
[17:38:48.074]  - include = ‘immediateCondition’
[17:38:48.074]  - exclude = 
[17:38:48.075]  - resignal = FALSE
[17:38:48.075]  - Number of conditions: 1
[17:38:48.075] signalConditions() ... done
[17:38:48.075] - Launch lazy future ... done
[17:38:48.075] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[17:38:48.075] resolved() for ‘SequentialFuture’ ...
[17:38:48.075] - state: ‘finished’
[17:38:48.075] - run: TRUE
[17:38:48.076] - result: ‘FutureResult’
[17:38:48.076] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[17:38:48.077] getGlobalsAndPackages() ...
[17:38:48.077] Searching for globals...
[17:38:48.078] - globals found: [2] ‘{’, ‘stop’
[17:38:48.078] Searching for globals ... DONE
[17:38:48.078] Resolving globals: FALSE
[17:38:48.078] 
[17:38:48.078] 
[17:38:48.078] getGlobalsAndPackages() ... DONE
[17:38:48.079] run() for ‘Future’ ...
[17:38:48.079] - state: ‘created’
[17:38:48.079] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:38:48.079] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:38:48.079] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:38:48.079]   - Field: ‘label’
[17:38:48.079]   - Field: ‘local’
[17:38:48.079]   - Field: ‘owner’
[17:38:48.079]   - Field: ‘envir’
[17:38:48.080]   - Field: ‘packages’
[17:38:48.080]   - Field: ‘gc’
[17:38:48.080]   - Field: ‘conditions’
[17:38:48.080]   - Field: ‘expr’
[17:38:48.080]   - Field: ‘uuid’
[17:38:48.080]   - Field: ‘seed’
[17:38:48.080]   - Field: ‘version’
[17:38:48.080]   - Field: ‘result’
[17:38:48.080]   - Field: ‘asynchronous’
[17:38:48.080]   - Field: ‘calls’
[17:38:48.080]   - Field: ‘globals’
[17:38:48.081]   - Field: ‘stdout’
[17:38:48.081]   - Field: ‘earlySignal’
[17:38:48.081]   - Field: ‘lazy’
[17:38:48.081]   - Field: ‘state’
[17:38:48.081] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:38:48.081] - Launch lazy future ...
[17:38:48.081] Packages needed by the future expression (n = 0): <none>
[17:38:48.081] Packages needed by future strategies (n = 0): <none>
[17:38:48.082] {
[17:38:48.082]     {
[17:38:48.082]         {
[17:38:48.082]             ...future.startTime <- base::Sys.time()
[17:38:48.082]             {
[17:38:48.082]                 {
[17:38:48.082]                   {
[17:38:48.082]                     base::local({
[17:38:48.082]                       has_future <- base::requireNamespace("future", 
[17:38:48.082]                         quietly = TRUE)
[17:38:48.082]                       if (has_future) {
[17:38:48.082]                         ns <- base::getNamespace("future")
[17:38:48.082]                         version <- ns[[".package"]][["version"]]
[17:38:48.082]                         if (is.null(version)) 
[17:38:48.082]                           version <- utils::packageVersion("future")
[17:38:48.082]                       }
[17:38:48.082]                       else {
[17:38:48.082]                         version <- NULL
[17:38:48.082]                       }
[17:38:48.082]                       if (!has_future || version < "1.8.0") {
[17:38:48.082]                         info <- base::c(r_version = base::gsub("R version ", 
[17:38:48.082]                           "", base::R.version$version.string), 
[17:38:48.082]                           platform = base::sprintf("%s (%s-bit)", 
[17:38:48.082]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:48.082]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:48.082]                             "release", "version")], collapse = " "), 
[17:38:48.082]                           hostname = base::Sys.info()[["nodename"]])
[17:38:48.082]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:38:48.082]                           info)
[17:38:48.082]                         info <- base::paste(info, collapse = "; ")
[17:38:48.082]                         if (!has_future) {
[17:38:48.082]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:48.082]                             info)
[17:38:48.082]                         }
[17:38:48.082]                         else {
[17:38:48.082]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:48.082]                             info, version)
[17:38:48.082]                         }
[17:38:48.082]                         base::stop(msg)
[17:38:48.082]                       }
[17:38:48.082]                     })
[17:38:48.082]                   }
[17:38:48.082]                   ...future.strategy.old <- future::plan("list")
[17:38:48.082]                   options(future.plan = NULL)
[17:38:48.082]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.082]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:48.082]                 }
[17:38:48.082]                 ...future.workdir <- getwd()
[17:38:48.082]             }
[17:38:48.082]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:48.082]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:48.082]         }
[17:38:48.082]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:48.082]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:48.082]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:48.082]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:48.082]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:48.082]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:48.082]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:48.082]             base::names(...future.oldOptions))
[17:38:48.082]     }
[17:38:48.082]     if (FALSE) {
[17:38:48.082]     }
[17:38:48.082]     else {
[17:38:48.082]         if (TRUE) {
[17:38:48.082]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:48.082]                 open = "w")
[17:38:48.082]         }
[17:38:48.082]         else {
[17:38:48.082]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:48.082]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:48.082]         }
[17:38:48.082]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:48.082]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:48.082]             base::sink(type = "output", split = FALSE)
[17:38:48.082]             base::close(...future.stdout)
[17:38:48.082]         }, add = TRUE)
[17:38:48.082]     }
[17:38:48.082]     ...future.frame <- base::sys.nframe()
[17:38:48.082]     ...future.conditions <- base::list()
[17:38:48.082]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:48.082]     if (FALSE) {
[17:38:48.082]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:48.082]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:48.082]     }
[17:38:48.082]     ...future.result <- base::tryCatch({
[17:38:48.082]         base::withCallingHandlers({
[17:38:48.082]             ...future.value <- base::withVisible(base::local({
[17:38:48.082]                 42L
[17:38:48.082]                 stop("Woops")
[17:38:48.082]             }))
[17:38:48.082]             future::FutureResult(value = ...future.value$value, 
[17:38:48.082]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.082]                   ...future.rng), globalenv = if (FALSE) 
[17:38:48.082]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:48.082]                     ...future.globalenv.names))
[17:38:48.082]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:48.082]         }, condition = base::local({
[17:38:48.082]             c <- base::c
[17:38:48.082]             inherits <- base::inherits
[17:38:48.082]             invokeRestart <- base::invokeRestart
[17:38:48.082]             length <- base::length
[17:38:48.082]             list <- base::list
[17:38:48.082]             seq.int <- base::seq.int
[17:38:48.082]             signalCondition <- base::signalCondition
[17:38:48.082]             sys.calls <- base::sys.calls
[17:38:48.082]             `[[` <- base::`[[`
[17:38:48.082]             `+` <- base::`+`
[17:38:48.082]             `<<-` <- base::`<<-`
[17:38:48.082]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:48.082]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:48.082]                   3L)]
[17:38:48.082]             }
[17:38:48.082]             function(cond) {
[17:38:48.082]                 is_error <- inherits(cond, "error")
[17:38:48.082]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:48.082]                   NULL)
[17:38:48.082]                 if (is_error) {
[17:38:48.082]                   sessionInformation <- function() {
[17:38:48.082]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:48.082]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:48.082]                       search = base::search(), system = base::Sys.info())
[17:38:48.082]                   }
[17:38:48.082]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.082]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:48.082]                     cond$call), session = sessionInformation(), 
[17:38:48.082]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:48.082]                   signalCondition(cond)
[17:38:48.082]                 }
[17:38:48.082]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:48.082]                 "immediateCondition"))) {
[17:38:48.082]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:48.082]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.082]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:48.082]                   if (TRUE && !signal) {
[17:38:48.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.082]                     {
[17:38:48.082]                       inherits <- base::inherits
[17:38:48.082]                       invokeRestart <- base::invokeRestart
[17:38:48.082]                       is.null <- base::is.null
[17:38:48.082]                       muffled <- FALSE
[17:38:48.082]                       if (inherits(cond, "message")) {
[17:38:48.082]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.082]                         if (muffled) 
[17:38:48.082]                           invokeRestart("muffleMessage")
[17:38:48.082]                       }
[17:38:48.082]                       else if (inherits(cond, "warning")) {
[17:38:48.082]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.082]                         if (muffled) 
[17:38:48.082]                           invokeRestart("muffleWarning")
[17:38:48.082]                       }
[17:38:48.082]                       else if (inherits(cond, "condition")) {
[17:38:48.082]                         if (!is.null(pattern)) {
[17:38:48.082]                           computeRestarts <- base::computeRestarts
[17:38:48.082]                           grepl <- base::grepl
[17:38:48.082]                           restarts <- computeRestarts(cond)
[17:38:48.082]                           for (restart in restarts) {
[17:38:48.082]                             name <- restart$name
[17:38:48.082]                             if (is.null(name)) 
[17:38:48.082]                               next
[17:38:48.082]                             if (!grepl(pattern, name)) 
[17:38:48.082]                               next
[17:38:48.082]                             invokeRestart(restart)
[17:38:48.082]                             muffled <- TRUE
[17:38:48.082]                             break
[17:38:48.082]                           }
[17:38:48.082]                         }
[17:38:48.082]                       }
[17:38:48.082]                       invisible(muffled)
[17:38:48.082]                     }
[17:38:48.082]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.082]                   }
[17:38:48.082]                 }
[17:38:48.082]                 else {
[17:38:48.082]                   if (TRUE) {
[17:38:48.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.082]                     {
[17:38:48.082]                       inherits <- base::inherits
[17:38:48.082]                       invokeRestart <- base::invokeRestart
[17:38:48.082]                       is.null <- base::is.null
[17:38:48.082]                       muffled <- FALSE
[17:38:48.082]                       if (inherits(cond, "message")) {
[17:38:48.082]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.082]                         if (muffled) 
[17:38:48.082]                           invokeRestart("muffleMessage")
[17:38:48.082]                       }
[17:38:48.082]                       else if (inherits(cond, "warning")) {
[17:38:48.082]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.082]                         if (muffled) 
[17:38:48.082]                           invokeRestart("muffleWarning")
[17:38:48.082]                       }
[17:38:48.082]                       else if (inherits(cond, "condition")) {
[17:38:48.082]                         if (!is.null(pattern)) {
[17:38:48.082]                           computeRestarts <- base::computeRestarts
[17:38:48.082]                           grepl <- base::grepl
[17:38:48.082]                           restarts <- computeRestarts(cond)
[17:38:48.082]                           for (restart in restarts) {
[17:38:48.082]                             name <- restart$name
[17:38:48.082]                             if (is.null(name)) 
[17:38:48.082]                               next
[17:38:48.082]                             if (!grepl(pattern, name)) 
[17:38:48.082]                               next
[17:38:48.082]                             invokeRestart(restart)
[17:38:48.082]                             muffled <- TRUE
[17:38:48.082]                             break
[17:38:48.082]                           }
[17:38:48.082]                         }
[17:38:48.082]                       }
[17:38:48.082]                       invisible(muffled)
[17:38:48.082]                     }
[17:38:48.082]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.082]                   }
[17:38:48.082]                 }
[17:38:48.082]             }
[17:38:48.082]         }))
[17:38:48.082]     }, error = function(ex) {
[17:38:48.082]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:48.082]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.082]                 ...future.rng), started = ...future.startTime, 
[17:38:48.082]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:48.082]             version = "1.8"), class = "FutureResult")
[17:38:48.082]     }, finally = {
[17:38:48.082]         if (!identical(...future.workdir, getwd())) 
[17:38:48.082]             setwd(...future.workdir)
[17:38:48.082]         {
[17:38:48.082]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:48.082]                 ...future.oldOptions$nwarnings <- NULL
[17:38:48.082]             }
[17:38:48.082]             base::options(...future.oldOptions)
[17:38:48.082]             if (.Platform$OS.type == "windows") {
[17:38:48.082]                 old_names <- names(...future.oldEnvVars)
[17:38:48.082]                 envs <- base::Sys.getenv()
[17:38:48.082]                 names <- names(envs)
[17:38:48.082]                 common <- intersect(names, old_names)
[17:38:48.082]                 added <- setdiff(names, old_names)
[17:38:48.082]                 removed <- setdiff(old_names, names)
[17:38:48.082]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:48.082]                   envs[common]]
[17:38:48.082]                 NAMES <- toupper(changed)
[17:38:48.082]                 args <- list()
[17:38:48.082]                 for (kk in seq_along(NAMES)) {
[17:38:48.082]                   name <- changed[[kk]]
[17:38:48.082]                   NAME <- NAMES[[kk]]
[17:38:48.082]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.082]                     next
[17:38:48.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.082]                 }
[17:38:48.082]                 NAMES <- toupper(added)
[17:38:48.082]                 for (kk in seq_along(NAMES)) {
[17:38:48.082]                   name <- added[[kk]]
[17:38:48.082]                   NAME <- NAMES[[kk]]
[17:38:48.082]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.082]                     next
[17:38:48.082]                   args[[name]] <- ""
[17:38:48.082]                 }
[17:38:48.082]                 NAMES <- toupper(removed)
[17:38:48.082]                 for (kk in seq_along(NAMES)) {
[17:38:48.082]                   name <- removed[[kk]]
[17:38:48.082]                   NAME <- NAMES[[kk]]
[17:38:48.082]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.082]                     next
[17:38:48.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.082]                 }
[17:38:48.082]                 if (length(args) > 0) 
[17:38:48.082]                   base::do.call(base::Sys.setenv, args = args)
[17:38:48.082]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:48.082]             }
[17:38:48.082]             else {
[17:38:48.082]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:48.082]             }
[17:38:48.082]             {
[17:38:48.082]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:48.082]                   0L) {
[17:38:48.082]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:48.082]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:48.082]                   base::options(opts)
[17:38:48.082]                 }
[17:38:48.082]                 {
[17:38:48.082]                   {
[17:38:48.082]                     NULL
[17:38:48.082]                     RNGkind("Mersenne-Twister")
[17:38:48.082]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:38:48.082]                       inherits = FALSE)
[17:38:48.082]                   }
[17:38:48.082]                   options(future.plan = NULL)
[17:38:48.082]                   if (is.na(NA_character_)) 
[17:38:48.082]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.082]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:48.082]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:48.082]                     .init = FALSE)
[17:38:48.082]                 }
[17:38:48.082]             }
[17:38:48.082]         }
[17:38:48.082]     })
[17:38:48.082]     if (TRUE) {
[17:38:48.082]         base::sink(type = "output", split = FALSE)
[17:38:48.082]         if (TRUE) {
[17:38:48.082]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:48.082]         }
[17:38:48.082]         else {
[17:38:48.082]             ...future.result["stdout"] <- base::list(NULL)
[17:38:48.082]         }
[17:38:48.082]         base::close(...future.stdout)
[17:38:48.082]         ...future.stdout <- NULL
[17:38:48.082]     }
[17:38:48.082]     ...future.result$conditions <- ...future.conditions
[17:38:48.082]     ...future.result$finished <- base::Sys.time()
[17:38:48.082]     ...future.result
[17:38:48.082] }
[17:38:48.083] plan(): Setting new future strategy stack:
[17:38:48.083] List of future strategies:
[17:38:48.083] 1. sequential:
[17:38:48.083]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.083]    - tweaked: FALSE
[17:38:48.083]    - call: NULL
[17:38:48.084] plan(): nbrOfWorkers() = 1
[17:38:48.085] plan(): Setting new future strategy stack:
[17:38:48.085] List of future strategies:
[17:38:48.085] 1. sequential:
[17:38:48.085]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.085]    - tweaked: FALSE
[17:38:48.085]    - call: future::plan("sequential")
[17:38:48.085] plan(): nbrOfWorkers() = 1
[17:38:48.085] SequentialFuture started (and completed)
[17:38:48.085] signalConditions() ...
[17:38:48.086]  - include = ‘immediateCondition’
[17:38:48.086]  - exclude = 
[17:38:48.086]  - resignal = FALSE
[17:38:48.086]  - Number of conditions: 1
[17:38:48.086] signalConditions() ... done
[17:38:48.086] - Launch lazy future ... done
[17:38:48.086] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[17:38:48.086] getGlobalsAndPackages() ...
[17:38:48.086] Searching for globals...
[17:38:48.087] - globals found: [2] ‘{’, ‘stop’
[17:38:48.087] Searching for globals ... DONE
[17:38:48.088] Resolving globals: FALSE
[17:38:48.088] 
[17:38:48.088] 
[17:38:48.088] getGlobalsAndPackages() ... DONE
[17:38:48.088] run() for ‘Future’ ...
[17:38:48.088] - state: ‘created’
[17:38:48.088] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:38:48.089] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:38:48.089] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:38:48.089]   - Field: ‘label’
[17:38:48.089]   - Field: ‘local’
[17:38:48.089]   - Field: ‘owner’
[17:38:48.089]   - Field: ‘envir’
[17:38:48.089]   - Field: ‘packages’
[17:38:48.089]   - Field: ‘gc’
[17:38:48.089]   - Field: ‘conditions’
[17:38:48.089]   - Field: ‘expr’
[17:38:48.090]   - Field: ‘uuid’
[17:38:48.090]   - Field: ‘seed’
[17:38:48.090]   - Field: ‘version’
[17:38:48.090]   - Field: ‘result’
[17:38:48.090]   - Field: ‘asynchronous’
[17:38:48.090]   - Field: ‘calls’
[17:38:48.090]   - Field: ‘globals’
[17:38:48.090]   - Field: ‘stdout’
[17:38:48.090]   - Field: ‘earlySignal’
[17:38:48.090]   - Field: ‘lazy’
[17:38:48.090]   - Field: ‘state’
[17:38:48.090] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:38:48.091] - Launch lazy future ...
[17:38:48.091] Packages needed by the future expression (n = 0): <none>
[17:38:48.091] Packages needed by future strategies (n = 0): <none>
[17:38:48.091] {
[17:38:48.091]     {
[17:38:48.091]         {
[17:38:48.091]             ...future.startTime <- base::Sys.time()
[17:38:48.091]             {
[17:38:48.091]                 {
[17:38:48.091]                   {
[17:38:48.091]                     base::local({
[17:38:48.091]                       has_future <- base::requireNamespace("future", 
[17:38:48.091]                         quietly = TRUE)
[17:38:48.091]                       if (has_future) {
[17:38:48.091]                         ns <- base::getNamespace("future")
[17:38:48.091]                         version <- ns[[".package"]][["version"]]
[17:38:48.091]                         if (is.null(version)) 
[17:38:48.091]                           version <- utils::packageVersion("future")
[17:38:48.091]                       }
[17:38:48.091]                       else {
[17:38:48.091]                         version <- NULL
[17:38:48.091]                       }
[17:38:48.091]                       if (!has_future || version < "1.8.0") {
[17:38:48.091]                         info <- base::c(r_version = base::gsub("R version ", 
[17:38:48.091]                           "", base::R.version$version.string), 
[17:38:48.091]                           platform = base::sprintf("%s (%s-bit)", 
[17:38:48.091]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:48.091]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:48.091]                             "release", "version")], collapse = " "), 
[17:38:48.091]                           hostname = base::Sys.info()[["nodename"]])
[17:38:48.091]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:38:48.091]                           info)
[17:38:48.091]                         info <- base::paste(info, collapse = "; ")
[17:38:48.091]                         if (!has_future) {
[17:38:48.091]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:48.091]                             info)
[17:38:48.091]                         }
[17:38:48.091]                         else {
[17:38:48.091]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:48.091]                             info, version)
[17:38:48.091]                         }
[17:38:48.091]                         base::stop(msg)
[17:38:48.091]                       }
[17:38:48.091]                     })
[17:38:48.091]                   }
[17:38:48.091]                   ...future.strategy.old <- future::plan("list")
[17:38:48.091]                   options(future.plan = NULL)
[17:38:48.091]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.091]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:48.091]                 }
[17:38:48.091]                 ...future.workdir <- getwd()
[17:38:48.091]             }
[17:38:48.091]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:48.091]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:48.091]         }
[17:38:48.091]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:48.091]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:48.091]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:48.091]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:48.091]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:48.091]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:48.091]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:48.091]             base::names(...future.oldOptions))
[17:38:48.091]     }
[17:38:48.091]     if (FALSE) {
[17:38:48.091]     }
[17:38:48.091]     else {
[17:38:48.091]         if (TRUE) {
[17:38:48.091]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:48.091]                 open = "w")
[17:38:48.091]         }
[17:38:48.091]         else {
[17:38:48.091]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:48.091]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:48.091]         }
[17:38:48.091]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:48.091]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:48.091]             base::sink(type = "output", split = FALSE)
[17:38:48.091]             base::close(...future.stdout)
[17:38:48.091]         }, add = TRUE)
[17:38:48.091]     }
[17:38:48.091]     ...future.frame <- base::sys.nframe()
[17:38:48.091]     ...future.conditions <- base::list()
[17:38:48.091]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:48.091]     if (FALSE) {
[17:38:48.091]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:48.091]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:48.091]     }
[17:38:48.091]     ...future.result <- base::tryCatch({
[17:38:48.091]         base::withCallingHandlers({
[17:38:48.091]             ...future.value <- base::withVisible(base::local({
[17:38:48.091]                 42L
[17:38:48.091]                 stop("Woops")
[17:38:48.091]             }))
[17:38:48.091]             future::FutureResult(value = ...future.value$value, 
[17:38:48.091]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.091]                   ...future.rng), globalenv = if (FALSE) 
[17:38:48.091]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:48.091]                     ...future.globalenv.names))
[17:38:48.091]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:48.091]         }, condition = base::local({
[17:38:48.091]             c <- base::c
[17:38:48.091]             inherits <- base::inherits
[17:38:48.091]             invokeRestart <- base::invokeRestart
[17:38:48.091]             length <- base::length
[17:38:48.091]             list <- base::list
[17:38:48.091]             seq.int <- base::seq.int
[17:38:48.091]             signalCondition <- base::signalCondition
[17:38:48.091]             sys.calls <- base::sys.calls
[17:38:48.091]             `[[` <- base::`[[`
[17:38:48.091]             `+` <- base::`+`
[17:38:48.091]             `<<-` <- base::`<<-`
[17:38:48.091]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:48.091]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:48.091]                   3L)]
[17:38:48.091]             }
[17:38:48.091]             function(cond) {
[17:38:48.091]                 is_error <- inherits(cond, "error")
[17:38:48.091]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:48.091]                   NULL)
[17:38:48.091]                 if (is_error) {
[17:38:48.091]                   sessionInformation <- function() {
[17:38:48.091]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:48.091]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:48.091]                       search = base::search(), system = base::Sys.info())
[17:38:48.091]                   }
[17:38:48.091]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.091]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:48.091]                     cond$call), session = sessionInformation(), 
[17:38:48.091]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:48.091]                   signalCondition(cond)
[17:38:48.091]                 }
[17:38:48.091]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:48.091]                 "immediateCondition"))) {
[17:38:48.091]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:48.091]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.091]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:48.091]                   if (TRUE && !signal) {
[17:38:48.091]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.091]                     {
[17:38:48.091]                       inherits <- base::inherits
[17:38:48.091]                       invokeRestart <- base::invokeRestart
[17:38:48.091]                       is.null <- base::is.null
[17:38:48.091]                       muffled <- FALSE
[17:38:48.091]                       if (inherits(cond, "message")) {
[17:38:48.091]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.091]                         if (muffled) 
[17:38:48.091]                           invokeRestart("muffleMessage")
[17:38:48.091]                       }
[17:38:48.091]                       else if (inherits(cond, "warning")) {
[17:38:48.091]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.091]                         if (muffled) 
[17:38:48.091]                           invokeRestart("muffleWarning")
[17:38:48.091]                       }
[17:38:48.091]                       else if (inherits(cond, "condition")) {
[17:38:48.091]                         if (!is.null(pattern)) {
[17:38:48.091]                           computeRestarts <- base::computeRestarts
[17:38:48.091]                           grepl <- base::grepl
[17:38:48.091]                           restarts <- computeRestarts(cond)
[17:38:48.091]                           for (restart in restarts) {
[17:38:48.091]                             name <- restart$name
[17:38:48.091]                             if (is.null(name)) 
[17:38:48.091]                               next
[17:38:48.091]                             if (!grepl(pattern, name)) 
[17:38:48.091]                               next
[17:38:48.091]                             invokeRestart(restart)
[17:38:48.091]                             muffled <- TRUE
[17:38:48.091]                             break
[17:38:48.091]                           }
[17:38:48.091]                         }
[17:38:48.091]                       }
[17:38:48.091]                       invisible(muffled)
[17:38:48.091]                     }
[17:38:48.091]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.091]                   }
[17:38:48.091]                 }
[17:38:48.091]                 else {
[17:38:48.091]                   if (TRUE) {
[17:38:48.091]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.091]                     {
[17:38:48.091]                       inherits <- base::inherits
[17:38:48.091]                       invokeRestart <- base::invokeRestart
[17:38:48.091]                       is.null <- base::is.null
[17:38:48.091]                       muffled <- FALSE
[17:38:48.091]                       if (inherits(cond, "message")) {
[17:38:48.091]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.091]                         if (muffled) 
[17:38:48.091]                           invokeRestart("muffleMessage")
[17:38:48.091]                       }
[17:38:48.091]                       else if (inherits(cond, "warning")) {
[17:38:48.091]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.091]                         if (muffled) 
[17:38:48.091]                           invokeRestart("muffleWarning")
[17:38:48.091]                       }
[17:38:48.091]                       else if (inherits(cond, "condition")) {
[17:38:48.091]                         if (!is.null(pattern)) {
[17:38:48.091]                           computeRestarts <- base::computeRestarts
[17:38:48.091]                           grepl <- base::grepl
[17:38:48.091]                           restarts <- computeRestarts(cond)
[17:38:48.091]                           for (restart in restarts) {
[17:38:48.091]                             name <- restart$name
[17:38:48.091]                             if (is.null(name)) 
[17:38:48.091]                               next
[17:38:48.091]                             if (!grepl(pattern, name)) 
[17:38:48.091]                               next
[17:38:48.091]                             invokeRestart(restart)
[17:38:48.091]                             muffled <- TRUE
[17:38:48.091]                             break
[17:38:48.091]                           }
[17:38:48.091]                         }
[17:38:48.091]                       }
[17:38:48.091]                       invisible(muffled)
[17:38:48.091]                     }
[17:38:48.091]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.091]                   }
[17:38:48.091]                 }
[17:38:48.091]             }
[17:38:48.091]         }))
[17:38:48.091]     }, error = function(ex) {
[17:38:48.091]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:48.091]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.091]                 ...future.rng), started = ...future.startTime, 
[17:38:48.091]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:48.091]             version = "1.8"), class = "FutureResult")
[17:38:48.091]     }, finally = {
[17:38:48.091]         if (!identical(...future.workdir, getwd())) 
[17:38:48.091]             setwd(...future.workdir)
[17:38:48.091]         {
[17:38:48.091]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:48.091]                 ...future.oldOptions$nwarnings <- NULL
[17:38:48.091]             }
[17:38:48.091]             base::options(...future.oldOptions)
[17:38:48.091]             if (.Platform$OS.type == "windows") {
[17:38:48.091]                 old_names <- names(...future.oldEnvVars)
[17:38:48.091]                 envs <- base::Sys.getenv()
[17:38:48.091]                 names <- names(envs)
[17:38:48.091]                 common <- intersect(names, old_names)
[17:38:48.091]                 added <- setdiff(names, old_names)
[17:38:48.091]                 removed <- setdiff(old_names, names)
[17:38:48.091]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:48.091]                   envs[common]]
[17:38:48.091]                 NAMES <- toupper(changed)
[17:38:48.091]                 args <- list()
[17:38:48.091]                 for (kk in seq_along(NAMES)) {
[17:38:48.091]                   name <- changed[[kk]]
[17:38:48.091]                   NAME <- NAMES[[kk]]
[17:38:48.091]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.091]                     next
[17:38:48.091]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.091]                 }
[17:38:48.091]                 NAMES <- toupper(added)
[17:38:48.091]                 for (kk in seq_along(NAMES)) {
[17:38:48.091]                   name <- added[[kk]]
[17:38:48.091]                   NAME <- NAMES[[kk]]
[17:38:48.091]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.091]                     next
[17:38:48.091]                   args[[name]] <- ""
[17:38:48.091]                 }
[17:38:48.091]                 NAMES <- toupper(removed)
[17:38:48.091]                 for (kk in seq_along(NAMES)) {
[17:38:48.091]                   name <- removed[[kk]]
[17:38:48.091]                   NAME <- NAMES[[kk]]
[17:38:48.091]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.091]                     next
[17:38:48.091]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.091]                 }
[17:38:48.091]                 if (length(args) > 0) 
[17:38:48.091]                   base::do.call(base::Sys.setenv, args = args)
[17:38:48.091]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:48.091]             }
[17:38:48.091]             else {
[17:38:48.091]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:48.091]             }
[17:38:48.091]             {
[17:38:48.091]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:48.091]                   0L) {
[17:38:48.091]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:48.091]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:48.091]                   base::options(opts)
[17:38:48.091]                 }
[17:38:48.091]                 {
[17:38:48.091]                   {
[17:38:48.091]                     NULL
[17:38:48.091]                     RNGkind("Mersenne-Twister")
[17:38:48.091]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:38:48.091]                       inherits = FALSE)
[17:38:48.091]                   }
[17:38:48.091]                   options(future.plan = NULL)
[17:38:48.091]                   if (is.na(NA_character_)) 
[17:38:48.091]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.091]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:48.091]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:48.091]                     .init = FALSE)
[17:38:48.091]                 }
[17:38:48.091]             }
[17:38:48.091]         }
[17:38:48.091]     })
[17:38:48.091]     if (TRUE) {
[17:38:48.091]         base::sink(type = "output", split = FALSE)
[17:38:48.091]         if (TRUE) {
[17:38:48.091]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:48.091]         }
[17:38:48.091]         else {
[17:38:48.091]             ...future.result["stdout"] <- base::list(NULL)
[17:38:48.091]         }
[17:38:48.091]         base::close(...future.stdout)
[17:38:48.091]         ...future.stdout <- NULL
[17:38:48.091]     }
[17:38:48.091]     ...future.result$conditions <- ...future.conditions
[17:38:48.091]     ...future.result$finished <- base::Sys.time()
[17:38:48.091]     ...future.result
[17:38:48.091] }
[17:38:48.094] plan(): Setting new future strategy stack:
[17:38:48.095] List of future strategies:
[17:38:48.095] 1. sequential:
[17:38:48.095]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.095]    - tweaked: FALSE
[17:38:48.095]    - call: NULL
[17:38:48.095] plan(): nbrOfWorkers() = 1
[17:38:48.096] plan(): Setting new future strategy stack:
[17:38:48.096] List of future strategies:
[17:38:48.096] 1. sequential:
[17:38:48.096]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.096]    - tweaked: FALSE
[17:38:48.096]    - call: future::plan("sequential")
[17:38:48.096] plan(): nbrOfWorkers() = 1
[17:38:48.096] SequentialFuture started (and completed)
[17:38:48.097] signalConditions() ...
[17:38:48.097]  - include = ‘immediateCondition’
[17:38:48.097]  - exclude = 
[17:38:48.097]  - resignal = FALSE
[17:38:48.097]  - Number of conditions: 1
[17:38:48.097] signalConditions() ... done
[17:38:48.097] - Launch lazy future ... done
[17:38:48.097] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[17:38:48.098] resolved() for ‘SequentialFuture’ ...
[17:38:48.098] - state: ‘finished’
[17:38:48.098] - run: TRUE
[17:38:48.098] - result: ‘FutureResult’
[17:38:48.098] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[17:38:48.098] getGlobalsAndPackages() ...
[17:38:48.099] Searching for globals...
[17:38:48.099] - globals found: [2] ‘{’, ‘stop’
[17:38:48.099] Searching for globals ... DONE
[17:38:48.100] Resolving globals: FALSE
[17:38:48.100] 
[17:38:48.100] 
[17:38:48.100] getGlobalsAndPackages() ... DONE
[17:38:48.100] run() for ‘Future’ ...
[17:38:48.100] - state: ‘created’
[17:38:48.100] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:38:48.101] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:38:48.101] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:38:48.101]   - Field: ‘label’
[17:38:48.101]   - Field: ‘local’
[17:38:48.101]   - Field: ‘owner’
[17:38:48.101]   - Field: ‘envir’
[17:38:48.101]   - Field: ‘packages’
[17:38:48.101]   - Field: ‘gc’
[17:38:48.101]   - Field: ‘conditions’
[17:38:48.102]   - Field: ‘expr’
[17:38:48.102]   - Field: ‘uuid’
[17:38:48.102]   - Field: ‘seed’
[17:38:48.102]   - Field: ‘version’
[17:38:48.102]   - Field: ‘result’
[17:38:48.102]   - Field: ‘asynchronous’
[17:38:48.102]   - Field: ‘calls’
[17:38:48.102]   - Field: ‘globals’
[17:38:48.102]   - Field: ‘stdout’
[17:38:48.102]   - Field: ‘earlySignal’
[17:38:48.102]   - Field: ‘lazy’
[17:38:48.102]   - Field: ‘state’
[17:38:48.103] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:38:48.103] - Launch lazy future ...
[17:38:48.103] Packages needed by the future expression (n = 0): <none>
[17:38:48.103] Packages needed by future strategies (n = 0): <none>
[17:38:48.103] {
[17:38:48.103]     {
[17:38:48.103]         {
[17:38:48.103]             ...future.startTime <- base::Sys.time()
[17:38:48.103]             {
[17:38:48.103]                 {
[17:38:48.103]                   {
[17:38:48.103]                     base::local({
[17:38:48.103]                       has_future <- base::requireNamespace("future", 
[17:38:48.103]                         quietly = TRUE)
[17:38:48.103]                       if (has_future) {
[17:38:48.103]                         ns <- base::getNamespace("future")
[17:38:48.103]                         version <- ns[[".package"]][["version"]]
[17:38:48.103]                         if (is.null(version)) 
[17:38:48.103]                           version <- utils::packageVersion("future")
[17:38:48.103]                       }
[17:38:48.103]                       else {
[17:38:48.103]                         version <- NULL
[17:38:48.103]                       }
[17:38:48.103]                       if (!has_future || version < "1.8.0") {
[17:38:48.103]                         info <- base::c(r_version = base::gsub("R version ", 
[17:38:48.103]                           "", base::R.version$version.string), 
[17:38:48.103]                           platform = base::sprintf("%s (%s-bit)", 
[17:38:48.103]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:48.103]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:48.103]                             "release", "version")], collapse = " "), 
[17:38:48.103]                           hostname = base::Sys.info()[["nodename"]])
[17:38:48.103]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:38:48.103]                           info)
[17:38:48.103]                         info <- base::paste(info, collapse = "; ")
[17:38:48.103]                         if (!has_future) {
[17:38:48.103]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:48.103]                             info)
[17:38:48.103]                         }
[17:38:48.103]                         else {
[17:38:48.103]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:48.103]                             info, version)
[17:38:48.103]                         }
[17:38:48.103]                         base::stop(msg)
[17:38:48.103]                       }
[17:38:48.103]                     })
[17:38:48.103]                   }
[17:38:48.103]                   ...future.strategy.old <- future::plan("list")
[17:38:48.103]                   options(future.plan = NULL)
[17:38:48.103]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.103]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:48.103]                 }
[17:38:48.103]                 ...future.workdir <- getwd()
[17:38:48.103]             }
[17:38:48.103]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:48.103]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:48.103]         }
[17:38:48.103]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:48.103]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:48.103]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:48.103]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:48.103]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:48.103]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:48.103]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:48.103]             base::names(...future.oldOptions))
[17:38:48.103]     }
[17:38:48.103]     if (FALSE) {
[17:38:48.103]     }
[17:38:48.103]     else {
[17:38:48.103]         if (TRUE) {
[17:38:48.103]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:48.103]                 open = "w")
[17:38:48.103]         }
[17:38:48.103]         else {
[17:38:48.103]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:48.103]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:48.103]         }
[17:38:48.103]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:48.103]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:48.103]             base::sink(type = "output", split = FALSE)
[17:38:48.103]             base::close(...future.stdout)
[17:38:48.103]         }, add = TRUE)
[17:38:48.103]     }
[17:38:48.103]     ...future.frame <- base::sys.nframe()
[17:38:48.103]     ...future.conditions <- base::list()
[17:38:48.103]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:48.103]     if (FALSE) {
[17:38:48.103]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:48.103]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:48.103]     }
[17:38:48.103]     ...future.result <- base::tryCatch({
[17:38:48.103]         base::withCallingHandlers({
[17:38:48.103]             ...future.value <- base::withVisible(base::local({
[17:38:48.103]                 42L
[17:38:48.103]                 stop("Woops")
[17:38:48.103]             }))
[17:38:48.103]             future::FutureResult(value = ...future.value$value, 
[17:38:48.103]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.103]                   ...future.rng), globalenv = if (FALSE) 
[17:38:48.103]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:48.103]                     ...future.globalenv.names))
[17:38:48.103]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:48.103]         }, condition = base::local({
[17:38:48.103]             c <- base::c
[17:38:48.103]             inherits <- base::inherits
[17:38:48.103]             invokeRestart <- base::invokeRestart
[17:38:48.103]             length <- base::length
[17:38:48.103]             list <- base::list
[17:38:48.103]             seq.int <- base::seq.int
[17:38:48.103]             signalCondition <- base::signalCondition
[17:38:48.103]             sys.calls <- base::sys.calls
[17:38:48.103]             `[[` <- base::`[[`
[17:38:48.103]             `+` <- base::`+`
[17:38:48.103]             `<<-` <- base::`<<-`
[17:38:48.103]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:48.103]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:48.103]                   3L)]
[17:38:48.103]             }
[17:38:48.103]             function(cond) {
[17:38:48.103]                 is_error <- inherits(cond, "error")
[17:38:48.103]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:48.103]                   NULL)
[17:38:48.103]                 if (is_error) {
[17:38:48.103]                   sessionInformation <- function() {
[17:38:48.103]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:48.103]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:48.103]                       search = base::search(), system = base::Sys.info())
[17:38:48.103]                   }
[17:38:48.103]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.103]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:48.103]                     cond$call), session = sessionInformation(), 
[17:38:48.103]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:48.103]                   signalCondition(cond)
[17:38:48.103]                 }
[17:38:48.103]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:48.103]                 "immediateCondition"))) {
[17:38:48.103]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:48.103]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.103]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:48.103]                   if (TRUE && !signal) {
[17:38:48.103]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.103]                     {
[17:38:48.103]                       inherits <- base::inherits
[17:38:48.103]                       invokeRestart <- base::invokeRestart
[17:38:48.103]                       is.null <- base::is.null
[17:38:48.103]                       muffled <- FALSE
[17:38:48.103]                       if (inherits(cond, "message")) {
[17:38:48.103]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.103]                         if (muffled) 
[17:38:48.103]                           invokeRestart("muffleMessage")
[17:38:48.103]                       }
[17:38:48.103]                       else if (inherits(cond, "warning")) {
[17:38:48.103]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.103]                         if (muffled) 
[17:38:48.103]                           invokeRestart("muffleWarning")
[17:38:48.103]                       }
[17:38:48.103]                       else if (inherits(cond, "condition")) {
[17:38:48.103]                         if (!is.null(pattern)) {
[17:38:48.103]                           computeRestarts <- base::computeRestarts
[17:38:48.103]                           grepl <- base::grepl
[17:38:48.103]                           restarts <- computeRestarts(cond)
[17:38:48.103]                           for (restart in restarts) {
[17:38:48.103]                             name <- restart$name
[17:38:48.103]                             if (is.null(name)) 
[17:38:48.103]                               next
[17:38:48.103]                             if (!grepl(pattern, name)) 
[17:38:48.103]                               next
[17:38:48.103]                             invokeRestart(restart)
[17:38:48.103]                             muffled <- TRUE
[17:38:48.103]                             break
[17:38:48.103]                           }
[17:38:48.103]                         }
[17:38:48.103]                       }
[17:38:48.103]                       invisible(muffled)
[17:38:48.103]                     }
[17:38:48.103]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.103]                   }
[17:38:48.103]                 }
[17:38:48.103]                 else {
[17:38:48.103]                   if (TRUE) {
[17:38:48.103]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.103]                     {
[17:38:48.103]                       inherits <- base::inherits
[17:38:48.103]                       invokeRestart <- base::invokeRestart
[17:38:48.103]                       is.null <- base::is.null
[17:38:48.103]                       muffled <- FALSE
[17:38:48.103]                       if (inherits(cond, "message")) {
[17:38:48.103]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.103]                         if (muffled) 
[17:38:48.103]                           invokeRestart("muffleMessage")
[17:38:48.103]                       }
[17:38:48.103]                       else if (inherits(cond, "warning")) {
[17:38:48.103]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.103]                         if (muffled) 
[17:38:48.103]                           invokeRestart("muffleWarning")
[17:38:48.103]                       }
[17:38:48.103]                       else if (inherits(cond, "condition")) {
[17:38:48.103]                         if (!is.null(pattern)) {
[17:38:48.103]                           computeRestarts <- base::computeRestarts
[17:38:48.103]                           grepl <- base::grepl
[17:38:48.103]                           restarts <- computeRestarts(cond)
[17:38:48.103]                           for (restart in restarts) {
[17:38:48.103]                             name <- restart$name
[17:38:48.103]                             if (is.null(name)) 
[17:38:48.103]                               next
[17:38:48.103]                             if (!grepl(pattern, name)) 
[17:38:48.103]                               next
[17:38:48.103]                             invokeRestart(restart)
[17:38:48.103]                             muffled <- TRUE
[17:38:48.103]                             break
[17:38:48.103]                           }
[17:38:48.103]                         }
[17:38:48.103]                       }
[17:38:48.103]                       invisible(muffled)
[17:38:48.103]                     }
[17:38:48.103]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.103]                   }
[17:38:48.103]                 }
[17:38:48.103]             }
[17:38:48.103]         }))
[17:38:48.103]     }, error = function(ex) {
[17:38:48.103]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:48.103]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.103]                 ...future.rng), started = ...future.startTime, 
[17:38:48.103]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:48.103]             version = "1.8"), class = "FutureResult")
[17:38:48.103]     }, finally = {
[17:38:48.103]         if (!identical(...future.workdir, getwd())) 
[17:38:48.103]             setwd(...future.workdir)
[17:38:48.103]         {
[17:38:48.103]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:48.103]                 ...future.oldOptions$nwarnings <- NULL
[17:38:48.103]             }
[17:38:48.103]             base::options(...future.oldOptions)
[17:38:48.103]             if (.Platform$OS.type == "windows") {
[17:38:48.103]                 old_names <- names(...future.oldEnvVars)
[17:38:48.103]                 envs <- base::Sys.getenv()
[17:38:48.103]                 names <- names(envs)
[17:38:48.103]                 common <- intersect(names, old_names)
[17:38:48.103]                 added <- setdiff(names, old_names)
[17:38:48.103]                 removed <- setdiff(old_names, names)
[17:38:48.103]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:48.103]                   envs[common]]
[17:38:48.103]                 NAMES <- toupper(changed)
[17:38:48.103]                 args <- list()
[17:38:48.103]                 for (kk in seq_along(NAMES)) {
[17:38:48.103]                   name <- changed[[kk]]
[17:38:48.103]                   NAME <- NAMES[[kk]]
[17:38:48.103]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.103]                     next
[17:38:48.103]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.103]                 }
[17:38:48.103]                 NAMES <- toupper(added)
[17:38:48.103]                 for (kk in seq_along(NAMES)) {
[17:38:48.103]                   name <- added[[kk]]
[17:38:48.103]                   NAME <- NAMES[[kk]]
[17:38:48.103]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.103]                     next
[17:38:48.103]                   args[[name]] <- ""
[17:38:48.103]                 }
[17:38:48.103]                 NAMES <- toupper(removed)
[17:38:48.103]                 for (kk in seq_along(NAMES)) {
[17:38:48.103]                   name <- removed[[kk]]
[17:38:48.103]                   NAME <- NAMES[[kk]]
[17:38:48.103]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.103]                     next
[17:38:48.103]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.103]                 }
[17:38:48.103]                 if (length(args) > 0) 
[17:38:48.103]                   base::do.call(base::Sys.setenv, args = args)
[17:38:48.103]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:48.103]             }
[17:38:48.103]             else {
[17:38:48.103]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:48.103]             }
[17:38:48.103]             {
[17:38:48.103]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:48.103]                   0L) {
[17:38:48.103]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:48.103]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:48.103]                   base::options(opts)
[17:38:48.103]                 }
[17:38:48.103]                 {
[17:38:48.103]                   {
[17:38:48.103]                     NULL
[17:38:48.103]                     RNGkind("Mersenne-Twister")
[17:38:48.103]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:38:48.103]                       inherits = FALSE)
[17:38:48.103]                   }
[17:38:48.103]                   options(future.plan = NULL)
[17:38:48.103]                   if (is.na(NA_character_)) 
[17:38:48.103]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.103]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:48.103]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:48.103]                     .init = FALSE)
[17:38:48.103]                 }
[17:38:48.103]             }
[17:38:48.103]         }
[17:38:48.103]     })
[17:38:48.103]     if (TRUE) {
[17:38:48.103]         base::sink(type = "output", split = FALSE)
[17:38:48.103]         if (TRUE) {
[17:38:48.103]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:48.103]         }
[17:38:48.103]         else {
[17:38:48.103]             ...future.result["stdout"] <- base::list(NULL)
[17:38:48.103]         }
[17:38:48.103]         base::close(...future.stdout)
[17:38:48.103]         ...future.stdout <- NULL
[17:38:48.103]     }
[17:38:48.103]     ...future.result$conditions <- ...future.conditions
[17:38:48.103]     ...future.result$finished <- base::Sys.time()
[17:38:48.103]     ...future.result
[17:38:48.103] }
[17:38:48.105] plan(): Setting new future strategy stack:
[17:38:48.105] List of future strategies:
[17:38:48.105] 1. sequential:
[17:38:48.105]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.105]    - tweaked: FALSE
[17:38:48.105]    - call: NULL
[17:38:48.106] plan(): nbrOfWorkers() = 1
[17:38:48.106] plan(): Setting new future strategy stack:
[17:38:48.106] List of future strategies:
[17:38:48.106] 1. sequential:
[17:38:48.106]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.106]    - tweaked: FALSE
[17:38:48.106]    - call: future::plan("sequential")
[17:38:48.107] plan(): nbrOfWorkers() = 1
[17:38:48.107] SequentialFuture started (and completed)
[17:38:48.107] signalConditions() ...
[17:38:48.107]  - include = ‘immediateCondition’
[17:38:48.107]  - exclude = 
[17:38:48.107]  - resignal = FALSE
[17:38:48.107]  - Number of conditions: 1
[17:38:48.108] signalConditions() ... done
[17:38:48.108] - Launch lazy future ... done
[17:38:48.108] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[17:38:48.108] getGlobalsAndPackages() ...
[17:38:48.108] Searching for globals...
[17:38:48.109] - globals found: [2] ‘{’, ‘stop’
[17:38:48.109] Searching for globals ... DONE
[17:38:48.109] Resolving globals: FALSE
[17:38:48.109] 
[17:38:48.109] 
[17:38:48.109] getGlobalsAndPackages() ... DONE
[17:38:48.110] run() for ‘Future’ ...
[17:38:48.110] - state: ‘created’
[17:38:48.110] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:38:48.110] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:38:48.110] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:38:48.110]   - Field: ‘label’
[17:38:48.110]   - Field: ‘local’
[17:38:48.111]   - Field: ‘owner’
[17:38:48.111]   - Field: ‘envir’
[17:38:48.111]   - Field: ‘packages’
[17:38:48.111]   - Field: ‘gc’
[17:38:48.111]   - Field: ‘conditions’
[17:38:48.111]   - Field: ‘expr’
[17:38:48.111]   - Field: ‘uuid’
[17:38:48.111]   - Field: ‘seed’
[17:38:48.111]   - Field: ‘version’
[17:38:48.111]   - Field: ‘result’
[17:38:48.111]   - Field: ‘asynchronous’
[17:38:48.111]   - Field: ‘calls’
[17:38:48.112]   - Field: ‘globals’
[17:38:48.112]   - Field: ‘stdout’
[17:38:48.112]   - Field: ‘earlySignal’
[17:38:48.112]   - Field: ‘lazy’
[17:38:48.112]   - Field: ‘state’
[17:38:48.112] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:38:48.112] - Launch lazy future ...
[17:38:48.112] Packages needed by the future expression (n = 0): <none>
[17:38:48.112] Packages needed by future strategies (n = 0): <none>
[17:38:48.113] {
[17:38:48.113]     {
[17:38:48.113]         {
[17:38:48.113]             ...future.startTime <- base::Sys.time()
[17:38:48.113]             {
[17:38:48.113]                 {
[17:38:48.113]                   {
[17:38:48.113]                     base::local({
[17:38:48.113]                       has_future <- base::requireNamespace("future", 
[17:38:48.113]                         quietly = TRUE)
[17:38:48.113]                       if (has_future) {
[17:38:48.113]                         ns <- base::getNamespace("future")
[17:38:48.113]                         version <- ns[[".package"]][["version"]]
[17:38:48.113]                         if (is.null(version)) 
[17:38:48.113]                           version <- utils::packageVersion("future")
[17:38:48.113]                       }
[17:38:48.113]                       else {
[17:38:48.113]                         version <- NULL
[17:38:48.113]                       }
[17:38:48.113]                       if (!has_future || version < "1.8.0") {
[17:38:48.113]                         info <- base::c(r_version = base::gsub("R version ", 
[17:38:48.113]                           "", base::R.version$version.string), 
[17:38:48.113]                           platform = base::sprintf("%s (%s-bit)", 
[17:38:48.113]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:48.113]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:48.113]                             "release", "version")], collapse = " "), 
[17:38:48.113]                           hostname = base::Sys.info()[["nodename"]])
[17:38:48.113]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:38:48.113]                           info)
[17:38:48.113]                         info <- base::paste(info, collapse = "; ")
[17:38:48.113]                         if (!has_future) {
[17:38:48.113]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:48.113]                             info)
[17:38:48.113]                         }
[17:38:48.113]                         else {
[17:38:48.113]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:48.113]                             info, version)
[17:38:48.113]                         }
[17:38:48.113]                         base::stop(msg)
[17:38:48.113]                       }
[17:38:48.113]                     })
[17:38:48.113]                   }
[17:38:48.113]                   ...future.strategy.old <- future::plan("list")
[17:38:48.113]                   options(future.plan = NULL)
[17:38:48.113]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.113]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:48.113]                 }
[17:38:48.113]                 ...future.workdir <- getwd()
[17:38:48.113]             }
[17:38:48.113]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:48.113]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:48.113]         }
[17:38:48.113]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:48.113]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:48.113]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:48.113]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:48.113]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:48.113]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:48.113]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:48.113]             base::names(...future.oldOptions))
[17:38:48.113]     }
[17:38:48.113]     if (FALSE) {
[17:38:48.113]     }
[17:38:48.113]     else {
[17:38:48.113]         if (TRUE) {
[17:38:48.113]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:48.113]                 open = "w")
[17:38:48.113]         }
[17:38:48.113]         else {
[17:38:48.113]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:48.113]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:48.113]         }
[17:38:48.113]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:48.113]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:48.113]             base::sink(type = "output", split = FALSE)
[17:38:48.113]             base::close(...future.stdout)
[17:38:48.113]         }, add = TRUE)
[17:38:48.113]     }
[17:38:48.113]     ...future.frame <- base::sys.nframe()
[17:38:48.113]     ...future.conditions <- base::list()
[17:38:48.113]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:48.113]     if (FALSE) {
[17:38:48.113]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:48.113]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:48.113]     }
[17:38:48.113]     ...future.result <- base::tryCatch({
[17:38:48.113]         base::withCallingHandlers({
[17:38:48.113]             ...future.value <- base::withVisible(base::local({
[17:38:48.113]                 42L
[17:38:48.113]                 stop("Woops")
[17:38:48.113]             }))
[17:38:48.113]             future::FutureResult(value = ...future.value$value, 
[17:38:48.113]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.113]                   ...future.rng), globalenv = if (FALSE) 
[17:38:48.113]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:48.113]                     ...future.globalenv.names))
[17:38:48.113]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:48.113]         }, condition = base::local({
[17:38:48.113]             c <- base::c
[17:38:48.113]             inherits <- base::inherits
[17:38:48.113]             invokeRestart <- base::invokeRestart
[17:38:48.113]             length <- base::length
[17:38:48.113]             list <- base::list
[17:38:48.113]             seq.int <- base::seq.int
[17:38:48.113]             signalCondition <- base::signalCondition
[17:38:48.113]             sys.calls <- base::sys.calls
[17:38:48.113]             `[[` <- base::`[[`
[17:38:48.113]             `+` <- base::`+`
[17:38:48.113]             `<<-` <- base::`<<-`
[17:38:48.113]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:48.113]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:48.113]                   3L)]
[17:38:48.113]             }
[17:38:48.113]             function(cond) {
[17:38:48.113]                 is_error <- inherits(cond, "error")
[17:38:48.113]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:48.113]                   NULL)
[17:38:48.113]                 if (is_error) {
[17:38:48.113]                   sessionInformation <- function() {
[17:38:48.113]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:48.113]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:48.113]                       search = base::search(), system = base::Sys.info())
[17:38:48.113]                   }
[17:38:48.113]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.113]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:48.113]                     cond$call), session = sessionInformation(), 
[17:38:48.113]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:48.113]                   signalCondition(cond)
[17:38:48.113]                 }
[17:38:48.113]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:48.113]                 "immediateCondition"))) {
[17:38:48.113]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:48.113]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.113]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:48.113]                   if (TRUE && !signal) {
[17:38:48.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.113]                     {
[17:38:48.113]                       inherits <- base::inherits
[17:38:48.113]                       invokeRestart <- base::invokeRestart
[17:38:48.113]                       is.null <- base::is.null
[17:38:48.113]                       muffled <- FALSE
[17:38:48.113]                       if (inherits(cond, "message")) {
[17:38:48.113]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.113]                         if (muffled) 
[17:38:48.113]                           invokeRestart("muffleMessage")
[17:38:48.113]                       }
[17:38:48.113]                       else if (inherits(cond, "warning")) {
[17:38:48.113]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.113]                         if (muffled) 
[17:38:48.113]                           invokeRestart("muffleWarning")
[17:38:48.113]                       }
[17:38:48.113]                       else if (inherits(cond, "condition")) {
[17:38:48.113]                         if (!is.null(pattern)) {
[17:38:48.113]                           computeRestarts <- base::computeRestarts
[17:38:48.113]                           grepl <- base::grepl
[17:38:48.113]                           restarts <- computeRestarts(cond)
[17:38:48.113]                           for (restart in restarts) {
[17:38:48.113]                             name <- restart$name
[17:38:48.113]                             if (is.null(name)) 
[17:38:48.113]                               next
[17:38:48.113]                             if (!grepl(pattern, name)) 
[17:38:48.113]                               next
[17:38:48.113]                             invokeRestart(restart)
[17:38:48.113]                             muffled <- TRUE
[17:38:48.113]                             break
[17:38:48.113]                           }
[17:38:48.113]                         }
[17:38:48.113]                       }
[17:38:48.113]                       invisible(muffled)
[17:38:48.113]                     }
[17:38:48.113]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.113]                   }
[17:38:48.113]                 }
[17:38:48.113]                 else {
[17:38:48.113]                   if (TRUE) {
[17:38:48.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.113]                     {
[17:38:48.113]                       inherits <- base::inherits
[17:38:48.113]                       invokeRestart <- base::invokeRestart
[17:38:48.113]                       is.null <- base::is.null
[17:38:48.113]                       muffled <- FALSE
[17:38:48.113]                       if (inherits(cond, "message")) {
[17:38:48.113]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.113]                         if (muffled) 
[17:38:48.113]                           invokeRestart("muffleMessage")
[17:38:48.113]                       }
[17:38:48.113]                       else if (inherits(cond, "warning")) {
[17:38:48.113]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.113]                         if (muffled) 
[17:38:48.113]                           invokeRestart("muffleWarning")
[17:38:48.113]                       }
[17:38:48.113]                       else if (inherits(cond, "condition")) {
[17:38:48.113]                         if (!is.null(pattern)) {
[17:38:48.113]                           computeRestarts <- base::computeRestarts
[17:38:48.113]                           grepl <- base::grepl
[17:38:48.113]                           restarts <- computeRestarts(cond)
[17:38:48.113]                           for (restart in restarts) {
[17:38:48.113]                             name <- restart$name
[17:38:48.113]                             if (is.null(name)) 
[17:38:48.113]                               next
[17:38:48.113]                             if (!grepl(pattern, name)) 
[17:38:48.113]                               next
[17:38:48.113]                             invokeRestart(restart)
[17:38:48.113]                             muffled <- TRUE
[17:38:48.113]                             break
[17:38:48.113]                           }
[17:38:48.113]                         }
[17:38:48.113]                       }
[17:38:48.113]                       invisible(muffled)
[17:38:48.113]                     }
[17:38:48.113]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.113]                   }
[17:38:48.113]                 }
[17:38:48.113]             }
[17:38:48.113]         }))
[17:38:48.113]     }, error = function(ex) {
[17:38:48.113]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:48.113]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.113]                 ...future.rng), started = ...future.startTime, 
[17:38:48.113]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:48.113]             version = "1.8"), class = "FutureResult")
[17:38:48.113]     }, finally = {
[17:38:48.113]         if (!identical(...future.workdir, getwd())) 
[17:38:48.113]             setwd(...future.workdir)
[17:38:48.113]         {
[17:38:48.113]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:48.113]                 ...future.oldOptions$nwarnings <- NULL
[17:38:48.113]             }
[17:38:48.113]             base::options(...future.oldOptions)
[17:38:48.113]             if (.Platform$OS.type == "windows") {
[17:38:48.113]                 old_names <- names(...future.oldEnvVars)
[17:38:48.113]                 envs <- base::Sys.getenv()
[17:38:48.113]                 names <- names(envs)
[17:38:48.113]                 common <- intersect(names, old_names)
[17:38:48.113]                 added <- setdiff(names, old_names)
[17:38:48.113]                 removed <- setdiff(old_names, names)
[17:38:48.113]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:48.113]                   envs[common]]
[17:38:48.113]                 NAMES <- toupper(changed)
[17:38:48.113]                 args <- list()
[17:38:48.113]                 for (kk in seq_along(NAMES)) {
[17:38:48.113]                   name <- changed[[kk]]
[17:38:48.113]                   NAME <- NAMES[[kk]]
[17:38:48.113]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.113]                     next
[17:38:48.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.113]                 }
[17:38:48.113]                 NAMES <- toupper(added)
[17:38:48.113]                 for (kk in seq_along(NAMES)) {
[17:38:48.113]                   name <- added[[kk]]
[17:38:48.113]                   NAME <- NAMES[[kk]]
[17:38:48.113]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.113]                     next
[17:38:48.113]                   args[[name]] <- ""
[17:38:48.113]                 }
[17:38:48.113]                 NAMES <- toupper(removed)
[17:38:48.113]                 for (kk in seq_along(NAMES)) {
[17:38:48.113]                   name <- removed[[kk]]
[17:38:48.113]                   NAME <- NAMES[[kk]]
[17:38:48.113]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.113]                     next
[17:38:48.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.113]                 }
[17:38:48.113]                 if (length(args) > 0) 
[17:38:48.113]                   base::do.call(base::Sys.setenv, args = args)
[17:38:48.113]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:48.113]             }
[17:38:48.113]             else {
[17:38:48.113]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:48.113]             }
[17:38:48.113]             {
[17:38:48.113]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:48.113]                   0L) {
[17:38:48.113]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:48.113]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:48.113]                   base::options(opts)
[17:38:48.113]                 }
[17:38:48.113]                 {
[17:38:48.113]                   {
[17:38:48.113]                     NULL
[17:38:48.113]                     RNGkind("Mersenne-Twister")
[17:38:48.113]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:38:48.113]                       inherits = FALSE)
[17:38:48.113]                   }
[17:38:48.113]                   options(future.plan = NULL)
[17:38:48.113]                   if (is.na(NA_character_)) 
[17:38:48.113]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.113]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:48.113]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:48.113]                     .init = FALSE)
[17:38:48.113]                 }
[17:38:48.113]             }
[17:38:48.113]         }
[17:38:48.113]     })
[17:38:48.113]     if (TRUE) {
[17:38:48.113]         base::sink(type = "output", split = FALSE)
[17:38:48.113]         if (TRUE) {
[17:38:48.113]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:48.113]         }
[17:38:48.113]         else {
[17:38:48.113]             ...future.result["stdout"] <- base::list(NULL)
[17:38:48.113]         }
[17:38:48.113]         base::close(...future.stdout)
[17:38:48.113]         ...future.stdout <- NULL
[17:38:48.113]     }
[17:38:48.113]     ...future.result$conditions <- ...future.conditions
[17:38:48.113]     ...future.result$finished <- base::Sys.time()
[17:38:48.113]     ...future.result
[17:38:48.113] }
[17:38:48.114] plan(): Setting new future strategy stack:
[17:38:48.115] List of future strategies:
[17:38:48.115] 1. sequential:
[17:38:48.115]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.115]    - tweaked: FALSE
[17:38:48.115]    - call: NULL
[17:38:48.115] plan(): nbrOfWorkers() = 1
[17:38:48.116] plan(): Setting new future strategy stack:
[17:38:48.116] List of future strategies:
[17:38:48.116] 1. sequential:
[17:38:48.116]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.116]    - tweaked: FALSE
[17:38:48.116]    - call: future::plan("sequential")
[17:38:48.116] plan(): nbrOfWorkers() = 1
[17:38:48.116] SequentialFuture started (and completed)
[17:38:48.117] signalConditions() ...
[17:38:48.117]  - include = ‘immediateCondition’
[17:38:48.117]  - exclude = 
[17:38:48.117]  - resignal = FALSE
[17:38:48.117]  - Number of conditions: 1
[17:38:48.117] signalConditions() ... done
[17:38:48.117] - Launch lazy future ... done
[17:38:48.117] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[17:38:48.118] resolve() on list ...
[17:38:48.118]  recursive: 0
[17:38:48.118]  length: 2
[17:38:48.118] 
[17:38:48.118] resolved() for ‘SequentialFuture’ ...
[17:38:48.118] - state: ‘finished’
[17:38:48.118] - run: TRUE
[17:38:48.118] - result: ‘FutureResult’
[17:38:48.119] resolved() for ‘SequentialFuture’ ... done
[17:38:48.119] Future #1
[17:38:48.119] signalConditions() ...
[17:38:48.119]  - include = ‘immediateCondition’
[17:38:48.119]  - exclude = 
[17:38:48.119]  - resignal = FALSE
[17:38:48.119]  - Number of conditions: 1
[17:38:48.119] signalConditions() ... done
[17:38:48.119] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:38:48.119] - nx: 2
[17:38:48.119] - relay: TRUE
[17:38:48.119] - stdout: TRUE
[17:38:48.120] - signal: FALSE
[17:38:48.120] - resignal: FALSE
[17:38:48.120] - force: TRUE
[17:38:48.120] - relayed: [n=2] FALSE, FALSE
[17:38:48.120] - queued futures: [n=2] FALSE, FALSE
[17:38:48.120]  - until=1
[17:38:48.120]  - relaying element #1
[17:38:48.120] signalConditions() ...
[17:38:48.120]  - include = ‘immediateCondition’
[17:38:48.120]  - exclude = 
[17:38:48.120]  - resignal = FALSE
[17:38:48.121]  - Number of conditions: 1
[17:38:48.121] signalConditions() ... done
[17:38:48.121] - relayed: [n=2] TRUE, FALSE
[17:38:48.121] - queued futures: [n=2] TRUE, FALSE
[17:38:48.121] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:38:48.121]  length: 1 (resolved future 1)
[17:38:48.121] resolved() for ‘SequentialFuture’ ...
[17:38:48.121] - state: ‘finished’
[17:38:48.121] - run: TRUE
[17:38:48.121] - result: ‘FutureResult’
[17:38:48.122] resolved() for ‘SequentialFuture’ ... done
[17:38:48.122] Future #2
[17:38:48.122] signalConditions() ...
[17:38:48.122]  - include = ‘immediateCondition’
[17:38:48.122]  - exclude = 
[17:38:48.122]  - resignal = FALSE
[17:38:48.122]  - Number of conditions: 1
[17:38:48.122] signalConditions() ... done
[17:38:48.122] signalConditionsASAP(SequentialFuture, pos=2) ...
[17:38:48.122] - nx: 2
[17:38:48.122] - relay: TRUE
[17:38:48.123] - stdout: TRUE
[17:38:48.123] - signal: FALSE
[17:38:48.123] - resignal: FALSE
[17:38:48.123] - force: TRUE
[17:38:48.123] - relayed: [n=2] TRUE, FALSE
[17:38:48.123] - queued futures: [n=2] TRUE, FALSE
[17:38:48.123]  - until=2
[17:38:48.123]  - relaying element #2
[17:38:48.123] signalConditions() ...
[17:38:48.123]  - include = ‘immediateCondition’
[17:38:48.123]  - exclude = 
[17:38:48.123]  - resignal = FALSE
[17:38:48.123]  - Number of conditions: 1
[17:38:48.124] signalConditions() ... done
[17:38:48.124] - relayed: [n=2] TRUE, TRUE
[17:38:48.124] - queued futures: [n=2] TRUE, TRUE
[17:38:48.124] signalConditionsASAP(SequentialFuture, pos=2) ... done
[17:38:48.124]  length: 0 (resolved future 2)
[17:38:48.124] Relaying remaining futures
[17:38:48.124] signalConditionsASAP(NULL, pos=0) ...
[17:38:48.124] - nx: 2
[17:38:48.124] - relay: TRUE
[17:38:48.124] - stdout: TRUE
[17:38:48.124] - signal: FALSE
[17:38:48.125] - resignal: FALSE
[17:38:48.126] - force: TRUE
[17:38:48.126] - relayed: [n=2] TRUE, TRUE
[17:38:48.126] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:38:48.127] - relayed: [n=2] TRUE, TRUE
[17:38:48.127] - queued futures: [n=2] TRUE, TRUE
[17:38:48.127] signalConditionsASAP(NULL, pos=0) ... done
[17:38:48.127] resolve() on list ... DONE
[17:38:48.127] signalConditions() ...
[17:38:48.127]  - include = ‘immediateCondition’
[17:38:48.127]  - exclude = 
[17:38:48.127]  - resignal = FALSE
[17:38:48.127]  - Number of conditions: 1
[17:38:48.127] signalConditions() ... done
[17:38:48.128] signalConditions() ...
[17:38:48.128]  - include = ‘immediateCondition’
[17:38:48.128]  - exclude = 
[17:38:48.128]  - resignal = FALSE
[17:38:48.128]  - Number of conditions: 1
[17:38:48.128] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[17:38:48.128] resolved() for ‘SequentialFuture’ ...
[17:38:48.129] - state: ‘finished’
[17:38:48.129] - run: TRUE
[17:38:48.129] - result: ‘FutureResult’
[17:38:48.129] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[17:38:48.129] getGlobalsAndPackages() ...
[17:38:48.129] Searching for globals...
[17:38:48.130] 
[17:38:48.130] Searching for globals ... DONE
[17:38:48.130] - globals: [0] <none>
[17:38:48.130] getGlobalsAndPackages() ... DONE
[17:38:48.130] run() for ‘Future’ ...
[17:38:48.130] - state: ‘created’
[17:38:48.130] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:38:48.131] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:38:48.131] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:38:48.131]   - Field: ‘label’
[17:38:48.131]   - Field: ‘local’
[17:38:48.131]   - Field: ‘owner’
[17:38:48.131]   - Field: ‘envir’
[17:38:48.131]   - Field: ‘packages’
[17:38:48.131]   - Field: ‘gc’
[17:38:48.131]   - Field: ‘conditions’
[17:38:48.132]   - Field: ‘expr’
[17:38:48.132]   - Field: ‘uuid’
[17:38:48.132]   - Field: ‘seed’
[17:38:48.132]   - Field: ‘version’
[17:38:48.132]   - Field: ‘result’
[17:38:48.132]   - Field: ‘asynchronous’
[17:38:48.132]   - Field: ‘calls’
[17:38:48.132]   - Field: ‘globals’
[17:38:48.132]   - Field: ‘stdout’
[17:38:48.132]   - Field: ‘earlySignal’
[17:38:48.132]   - Field: ‘lazy’
[17:38:48.133]   - Field: ‘state’
[17:38:48.133] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:38:48.133] - Launch lazy future ...
[17:38:48.133] Packages needed by the future expression (n = 0): <none>
[17:38:48.133] Packages needed by future strategies (n = 0): <none>
[17:38:48.133] {
[17:38:48.133]     {
[17:38:48.133]         {
[17:38:48.133]             ...future.startTime <- base::Sys.time()
[17:38:48.133]             {
[17:38:48.133]                 {
[17:38:48.133]                   {
[17:38:48.133]                     base::local({
[17:38:48.133]                       has_future <- base::requireNamespace("future", 
[17:38:48.133]                         quietly = TRUE)
[17:38:48.133]                       if (has_future) {
[17:38:48.133]                         ns <- base::getNamespace("future")
[17:38:48.133]                         version <- ns[[".package"]][["version"]]
[17:38:48.133]                         if (is.null(version)) 
[17:38:48.133]                           version <- utils::packageVersion("future")
[17:38:48.133]                       }
[17:38:48.133]                       else {
[17:38:48.133]                         version <- NULL
[17:38:48.133]                       }
[17:38:48.133]                       if (!has_future || version < "1.8.0") {
[17:38:48.133]                         info <- base::c(r_version = base::gsub("R version ", 
[17:38:48.133]                           "", base::R.version$version.string), 
[17:38:48.133]                           platform = base::sprintf("%s (%s-bit)", 
[17:38:48.133]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:48.133]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:48.133]                             "release", "version")], collapse = " "), 
[17:38:48.133]                           hostname = base::Sys.info()[["nodename"]])
[17:38:48.133]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:38:48.133]                           info)
[17:38:48.133]                         info <- base::paste(info, collapse = "; ")
[17:38:48.133]                         if (!has_future) {
[17:38:48.133]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:48.133]                             info)
[17:38:48.133]                         }
[17:38:48.133]                         else {
[17:38:48.133]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:48.133]                             info, version)
[17:38:48.133]                         }
[17:38:48.133]                         base::stop(msg)
[17:38:48.133]                       }
[17:38:48.133]                     })
[17:38:48.133]                   }
[17:38:48.133]                   ...future.strategy.old <- future::plan("list")
[17:38:48.133]                   options(future.plan = NULL)
[17:38:48.133]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.133]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:48.133]                 }
[17:38:48.133]                 ...future.workdir <- getwd()
[17:38:48.133]             }
[17:38:48.133]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:48.133]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:48.133]         }
[17:38:48.133]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:48.133]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:48.133]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:48.133]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:48.133]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:48.133]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:48.133]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:48.133]             base::names(...future.oldOptions))
[17:38:48.133]     }
[17:38:48.133]     if (FALSE) {
[17:38:48.133]     }
[17:38:48.133]     else {
[17:38:48.133]         if (TRUE) {
[17:38:48.133]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:48.133]                 open = "w")
[17:38:48.133]         }
[17:38:48.133]         else {
[17:38:48.133]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:48.133]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:48.133]         }
[17:38:48.133]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:48.133]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:48.133]             base::sink(type = "output", split = FALSE)
[17:38:48.133]             base::close(...future.stdout)
[17:38:48.133]         }, add = TRUE)
[17:38:48.133]     }
[17:38:48.133]     ...future.frame <- base::sys.nframe()
[17:38:48.133]     ...future.conditions <- base::list()
[17:38:48.133]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:48.133]     if (FALSE) {
[17:38:48.133]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:48.133]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:48.133]     }
[17:38:48.133]     ...future.result <- base::tryCatch({
[17:38:48.133]         base::withCallingHandlers({
[17:38:48.133]             ...future.value <- base::withVisible(base::local(42L))
[17:38:48.133]             future::FutureResult(value = ...future.value$value, 
[17:38:48.133]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.133]                   ...future.rng), globalenv = if (FALSE) 
[17:38:48.133]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:48.133]                     ...future.globalenv.names))
[17:38:48.133]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:48.133]         }, condition = base::local({
[17:38:48.133]             c <- base::c
[17:38:48.133]             inherits <- base::inherits
[17:38:48.133]             invokeRestart <- base::invokeRestart
[17:38:48.133]             length <- base::length
[17:38:48.133]             list <- base::list
[17:38:48.133]             seq.int <- base::seq.int
[17:38:48.133]             signalCondition <- base::signalCondition
[17:38:48.133]             sys.calls <- base::sys.calls
[17:38:48.133]             `[[` <- base::`[[`
[17:38:48.133]             `+` <- base::`+`
[17:38:48.133]             `<<-` <- base::`<<-`
[17:38:48.133]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:48.133]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:48.133]                   3L)]
[17:38:48.133]             }
[17:38:48.133]             function(cond) {
[17:38:48.133]                 is_error <- inherits(cond, "error")
[17:38:48.133]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:48.133]                   NULL)
[17:38:48.133]                 if (is_error) {
[17:38:48.133]                   sessionInformation <- function() {
[17:38:48.133]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:48.133]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:48.133]                       search = base::search(), system = base::Sys.info())
[17:38:48.133]                   }
[17:38:48.133]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.133]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:48.133]                     cond$call), session = sessionInformation(), 
[17:38:48.133]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:48.133]                   signalCondition(cond)
[17:38:48.133]                 }
[17:38:48.133]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:48.133]                 "immediateCondition"))) {
[17:38:48.133]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:48.133]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.133]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:48.133]                   if (TRUE && !signal) {
[17:38:48.133]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.133]                     {
[17:38:48.133]                       inherits <- base::inherits
[17:38:48.133]                       invokeRestart <- base::invokeRestart
[17:38:48.133]                       is.null <- base::is.null
[17:38:48.133]                       muffled <- FALSE
[17:38:48.133]                       if (inherits(cond, "message")) {
[17:38:48.133]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.133]                         if (muffled) 
[17:38:48.133]                           invokeRestart("muffleMessage")
[17:38:48.133]                       }
[17:38:48.133]                       else if (inherits(cond, "warning")) {
[17:38:48.133]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.133]                         if (muffled) 
[17:38:48.133]                           invokeRestart("muffleWarning")
[17:38:48.133]                       }
[17:38:48.133]                       else if (inherits(cond, "condition")) {
[17:38:48.133]                         if (!is.null(pattern)) {
[17:38:48.133]                           computeRestarts <- base::computeRestarts
[17:38:48.133]                           grepl <- base::grepl
[17:38:48.133]                           restarts <- computeRestarts(cond)
[17:38:48.133]                           for (restart in restarts) {
[17:38:48.133]                             name <- restart$name
[17:38:48.133]                             if (is.null(name)) 
[17:38:48.133]                               next
[17:38:48.133]                             if (!grepl(pattern, name)) 
[17:38:48.133]                               next
[17:38:48.133]                             invokeRestart(restart)
[17:38:48.133]                             muffled <- TRUE
[17:38:48.133]                             break
[17:38:48.133]                           }
[17:38:48.133]                         }
[17:38:48.133]                       }
[17:38:48.133]                       invisible(muffled)
[17:38:48.133]                     }
[17:38:48.133]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.133]                   }
[17:38:48.133]                 }
[17:38:48.133]                 else {
[17:38:48.133]                   if (TRUE) {
[17:38:48.133]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.133]                     {
[17:38:48.133]                       inherits <- base::inherits
[17:38:48.133]                       invokeRestart <- base::invokeRestart
[17:38:48.133]                       is.null <- base::is.null
[17:38:48.133]                       muffled <- FALSE
[17:38:48.133]                       if (inherits(cond, "message")) {
[17:38:48.133]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.133]                         if (muffled) 
[17:38:48.133]                           invokeRestart("muffleMessage")
[17:38:48.133]                       }
[17:38:48.133]                       else if (inherits(cond, "warning")) {
[17:38:48.133]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.133]                         if (muffled) 
[17:38:48.133]                           invokeRestart("muffleWarning")
[17:38:48.133]                       }
[17:38:48.133]                       else if (inherits(cond, "condition")) {
[17:38:48.133]                         if (!is.null(pattern)) {
[17:38:48.133]                           computeRestarts <- base::computeRestarts
[17:38:48.133]                           grepl <- base::grepl
[17:38:48.133]                           restarts <- computeRestarts(cond)
[17:38:48.133]                           for (restart in restarts) {
[17:38:48.133]                             name <- restart$name
[17:38:48.133]                             if (is.null(name)) 
[17:38:48.133]                               next
[17:38:48.133]                             if (!grepl(pattern, name)) 
[17:38:48.133]                               next
[17:38:48.133]                             invokeRestart(restart)
[17:38:48.133]                             muffled <- TRUE
[17:38:48.133]                             break
[17:38:48.133]                           }
[17:38:48.133]                         }
[17:38:48.133]                       }
[17:38:48.133]                       invisible(muffled)
[17:38:48.133]                     }
[17:38:48.133]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.133]                   }
[17:38:48.133]                 }
[17:38:48.133]             }
[17:38:48.133]         }))
[17:38:48.133]     }, error = function(ex) {
[17:38:48.133]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:48.133]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.133]                 ...future.rng), started = ...future.startTime, 
[17:38:48.133]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:48.133]             version = "1.8"), class = "FutureResult")
[17:38:48.133]     }, finally = {
[17:38:48.133]         if (!identical(...future.workdir, getwd())) 
[17:38:48.133]             setwd(...future.workdir)
[17:38:48.133]         {
[17:38:48.133]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:48.133]                 ...future.oldOptions$nwarnings <- NULL
[17:38:48.133]             }
[17:38:48.133]             base::options(...future.oldOptions)
[17:38:48.133]             if (.Platform$OS.type == "windows") {
[17:38:48.133]                 old_names <- names(...future.oldEnvVars)
[17:38:48.133]                 envs <- base::Sys.getenv()
[17:38:48.133]                 names <- names(envs)
[17:38:48.133]                 common <- intersect(names, old_names)
[17:38:48.133]                 added <- setdiff(names, old_names)
[17:38:48.133]                 removed <- setdiff(old_names, names)
[17:38:48.133]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:48.133]                   envs[common]]
[17:38:48.133]                 NAMES <- toupper(changed)
[17:38:48.133]                 args <- list()
[17:38:48.133]                 for (kk in seq_along(NAMES)) {
[17:38:48.133]                   name <- changed[[kk]]
[17:38:48.133]                   NAME <- NAMES[[kk]]
[17:38:48.133]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.133]                     next
[17:38:48.133]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.133]                 }
[17:38:48.133]                 NAMES <- toupper(added)
[17:38:48.133]                 for (kk in seq_along(NAMES)) {
[17:38:48.133]                   name <- added[[kk]]
[17:38:48.133]                   NAME <- NAMES[[kk]]
[17:38:48.133]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.133]                     next
[17:38:48.133]                   args[[name]] <- ""
[17:38:48.133]                 }
[17:38:48.133]                 NAMES <- toupper(removed)
[17:38:48.133]                 for (kk in seq_along(NAMES)) {
[17:38:48.133]                   name <- removed[[kk]]
[17:38:48.133]                   NAME <- NAMES[[kk]]
[17:38:48.133]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.133]                     next
[17:38:48.133]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.133]                 }
[17:38:48.133]                 if (length(args) > 0) 
[17:38:48.133]                   base::do.call(base::Sys.setenv, args = args)
[17:38:48.133]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:48.133]             }
[17:38:48.133]             else {
[17:38:48.133]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:48.133]             }
[17:38:48.133]             {
[17:38:48.133]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:48.133]                   0L) {
[17:38:48.133]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:48.133]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:48.133]                   base::options(opts)
[17:38:48.133]                 }
[17:38:48.133]                 {
[17:38:48.133]                   {
[17:38:48.133]                     NULL
[17:38:48.133]                     RNGkind("Mersenne-Twister")
[17:38:48.133]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:38:48.133]                       inherits = FALSE)
[17:38:48.133]                   }
[17:38:48.133]                   options(future.plan = NULL)
[17:38:48.133]                   if (is.na(NA_character_)) 
[17:38:48.133]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.133]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:48.133]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:48.133]                     .init = FALSE)
[17:38:48.133]                 }
[17:38:48.133]             }
[17:38:48.133]         }
[17:38:48.133]     })
[17:38:48.133]     if (TRUE) {
[17:38:48.133]         base::sink(type = "output", split = FALSE)
[17:38:48.133]         if (TRUE) {
[17:38:48.133]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:48.133]         }
[17:38:48.133]         else {
[17:38:48.133]             ...future.result["stdout"] <- base::list(NULL)
[17:38:48.133]         }
[17:38:48.133]         base::close(...future.stdout)
[17:38:48.133]         ...future.stdout <- NULL
[17:38:48.133]     }
[17:38:48.133]     ...future.result$conditions <- ...future.conditions
[17:38:48.133]     ...future.result$finished <- base::Sys.time()
[17:38:48.133]     ...future.result
[17:38:48.133] }
[17:38:48.135] plan(): Setting new future strategy stack:
[17:38:48.135] List of future strategies:
[17:38:48.135] 1. sequential:
[17:38:48.135]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.135]    - tweaked: FALSE
[17:38:48.135]    - call: NULL
[17:38:48.136] plan(): nbrOfWorkers() = 1
[17:38:48.137] plan(): Setting new future strategy stack:
[17:38:48.137] List of future strategies:
[17:38:48.137] 1. sequential:
[17:38:48.137]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.137]    - tweaked: FALSE
[17:38:48.137]    - call: future::plan("sequential")
[17:38:48.137] plan(): nbrOfWorkers() = 1
[17:38:48.137] SequentialFuture started (and completed)
[17:38:48.138] - Launch lazy future ... done
[17:38:48.138] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[17:38:48.138] resolved() for ‘SequentialFuture’ ...
[17:38:48.138] - state: ‘finished’
[17:38:48.138] - run: TRUE
[17:38:48.138] - result: ‘FutureResult’
[17:38:48.138] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[17:38:48.139] getGlobalsAndPackages() ...
[17:38:48.139] Searching for globals...
[17:38:48.140] - globals found: [2] ‘{’, ‘stop’
[17:38:48.140] Searching for globals ... DONE
[17:38:48.140] Resolving globals: FALSE
[17:38:48.140] 
[17:38:48.140] 
[17:38:48.140] getGlobalsAndPackages() ... DONE
[17:38:48.141] run() for ‘Future’ ...
[17:38:48.141] - state: ‘created’
[17:38:48.141] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:38:48.141] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:38:48.141] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:38:48.141]   - Field: ‘label’
[17:38:48.141]   - Field: ‘local’
[17:38:48.142]   - Field: ‘owner’
[17:38:48.142]   - Field: ‘envir’
[17:38:48.142]   - Field: ‘packages’
[17:38:48.142]   - Field: ‘gc’
[17:38:48.142]   - Field: ‘conditions’
[17:38:48.142]   - Field: ‘expr’
[17:38:48.142]   - Field: ‘uuid’
[17:38:48.142]   - Field: ‘seed’
[17:38:48.142]   - Field: ‘version’
[17:38:48.142]   - Field: ‘result’
[17:38:48.142]   - Field: ‘asynchronous’
[17:38:48.142]   - Field: ‘calls’
[17:38:48.143]   - Field: ‘globals’
[17:38:48.143]   - Field: ‘stdout’
[17:38:48.143]   - Field: ‘earlySignal’
[17:38:48.143]   - Field: ‘lazy’
[17:38:48.143]   - Field: ‘state’
[17:38:48.143] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:38:48.143] - Launch lazy future ...
[17:38:48.143] Packages needed by the future expression (n = 0): <none>
[17:38:48.143] Packages needed by future strategies (n = 0): <none>
[17:38:48.144] {
[17:38:48.144]     {
[17:38:48.144]         {
[17:38:48.144]             ...future.startTime <- base::Sys.time()
[17:38:48.144]             {
[17:38:48.144]                 {
[17:38:48.144]                   {
[17:38:48.144]                     base::local({
[17:38:48.144]                       has_future <- base::requireNamespace("future", 
[17:38:48.144]                         quietly = TRUE)
[17:38:48.144]                       if (has_future) {
[17:38:48.144]                         ns <- base::getNamespace("future")
[17:38:48.144]                         version <- ns[[".package"]][["version"]]
[17:38:48.144]                         if (is.null(version)) 
[17:38:48.144]                           version <- utils::packageVersion("future")
[17:38:48.144]                       }
[17:38:48.144]                       else {
[17:38:48.144]                         version <- NULL
[17:38:48.144]                       }
[17:38:48.144]                       if (!has_future || version < "1.8.0") {
[17:38:48.144]                         info <- base::c(r_version = base::gsub("R version ", 
[17:38:48.144]                           "", base::R.version$version.string), 
[17:38:48.144]                           platform = base::sprintf("%s (%s-bit)", 
[17:38:48.144]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:48.144]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:48.144]                             "release", "version")], collapse = " "), 
[17:38:48.144]                           hostname = base::Sys.info()[["nodename"]])
[17:38:48.144]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:38:48.144]                           info)
[17:38:48.144]                         info <- base::paste(info, collapse = "; ")
[17:38:48.144]                         if (!has_future) {
[17:38:48.144]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:48.144]                             info)
[17:38:48.144]                         }
[17:38:48.144]                         else {
[17:38:48.144]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:48.144]                             info, version)
[17:38:48.144]                         }
[17:38:48.144]                         base::stop(msg)
[17:38:48.144]                       }
[17:38:48.144]                     })
[17:38:48.144]                   }
[17:38:48.144]                   ...future.strategy.old <- future::plan("list")
[17:38:48.144]                   options(future.plan = NULL)
[17:38:48.144]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.144]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:48.144]                 }
[17:38:48.144]                 ...future.workdir <- getwd()
[17:38:48.144]             }
[17:38:48.144]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:48.144]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:48.144]         }
[17:38:48.144]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:48.144]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:48.144]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:48.144]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:48.144]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:48.144]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:48.144]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:48.144]             base::names(...future.oldOptions))
[17:38:48.144]     }
[17:38:48.144]     if (FALSE) {
[17:38:48.144]     }
[17:38:48.144]     else {
[17:38:48.144]         if (TRUE) {
[17:38:48.144]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:48.144]                 open = "w")
[17:38:48.144]         }
[17:38:48.144]         else {
[17:38:48.144]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:48.144]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:48.144]         }
[17:38:48.144]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:48.144]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:48.144]             base::sink(type = "output", split = FALSE)
[17:38:48.144]             base::close(...future.stdout)
[17:38:48.144]         }, add = TRUE)
[17:38:48.144]     }
[17:38:48.144]     ...future.frame <- base::sys.nframe()
[17:38:48.144]     ...future.conditions <- base::list()
[17:38:48.144]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:48.144]     if (FALSE) {
[17:38:48.144]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:48.144]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:48.144]     }
[17:38:48.144]     ...future.result <- base::tryCatch({
[17:38:48.144]         base::withCallingHandlers({
[17:38:48.144]             ...future.value <- base::withVisible(base::local({
[17:38:48.144]                 42L
[17:38:48.144]                 stop("Woops")
[17:38:48.144]             }))
[17:38:48.144]             future::FutureResult(value = ...future.value$value, 
[17:38:48.144]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.144]                   ...future.rng), globalenv = if (FALSE) 
[17:38:48.144]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:48.144]                     ...future.globalenv.names))
[17:38:48.144]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:48.144]         }, condition = base::local({
[17:38:48.144]             c <- base::c
[17:38:48.144]             inherits <- base::inherits
[17:38:48.144]             invokeRestart <- base::invokeRestart
[17:38:48.144]             length <- base::length
[17:38:48.144]             list <- base::list
[17:38:48.144]             seq.int <- base::seq.int
[17:38:48.144]             signalCondition <- base::signalCondition
[17:38:48.144]             sys.calls <- base::sys.calls
[17:38:48.144]             `[[` <- base::`[[`
[17:38:48.144]             `+` <- base::`+`
[17:38:48.144]             `<<-` <- base::`<<-`
[17:38:48.144]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:48.144]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:48.144]                   3L)]
[17:38:48.144]             }
[17:38:48.144]             function(cond) {
[17:38:48.144]                 is_error <- inherits(cond, "error")
[17:38:48.144]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:48.144]                   NULL)
[17:38:48.144]                 if (is_error) {
[17:38:48.144]                   sessionInformation <- function() {
[17:38:48.144]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:48.144]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:48.144]                       search = base::search(), system = base::Sys.info())
[17:38:48.144]                   }
[17:38:48.144]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.144]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:48.144]                     cond$call), session = sessionInformation(), 
[17:38:48.144]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:48.144]                   signalCondition(cond)
[17:38:48.144]                 }
[17:38:48.144]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:48.144]                 "immediateCondition"))) {
[17:38:48.144]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:48.144]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.144]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:48.144]                   if (TRUE && !signal) {
[17:38:48.144]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.144]                     {
[17:38:48.144]                       inherits <- base::inherits
[17:38:48.144]                       invokeRestart <- base::invokeRestart
[17:38:48.144]                       is.null <- base::is.null
[17:38:48.144]                       muffled <- FALSE
[17:38:48.144]                       if (inherits(cond, "message")) {
[17:38:48.144]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.144]                         if (muffled) 
[17:38:48.144]                           invokeRestart("muffleMessage")
[17:38:48.144]                       }
[17:38:48.144]                       else if (inherits(cond, "warning")) {
[17:38:48.144]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.144]                         if (muffled) 
[17:38:48.144]                           invokeRestart("muffleWarning")
[17:38:48.144]                       }
[17:38:48.144]                       else if (inherits(cond, "condition")) {
[17:38:48.144]                         if (!is.null(pattern)) {
[17:38:48.144]                           computeRestarts <- base::computeRestarts
[17:38:48.144]                           grepl <- base::grepl
[17:38:48.144]                           restarts <- computeRestarts(cond)
[17:38:48.144]                           for (restart in restarts) {
[17:38:48.144]                             name <- restart$name
[17:38:48.144]                             if (is.null(name)) 
[17:38:48.144]                               next
[17:38:48.144]                             if (!grepl(pattern, name)) 
[17:38:48.144]                               next
[17:38:48.144]                             invokeRestart(restart)
[17:38:48.144]                             muffled <- TRUE
[17:38:48.144]                             break
[17:38:48.144]                           }
[17:38:48.144]                         }
[17:38:48.144]                       }
[17:38:48.144]                       invisible(muffled)
[17:38:48.144]                     }
[17:38:48.144]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.144]                   }
[17:38:48.144]                 }
[17:38:48.144]                 else {
[17:38:48.144]                   if (TRUE) {
[17:38:48.144]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.144]                     {
[17:38:48.144]                       inherits <- base::inherits
[17:38:48.144]                       invokeRestart <- base::invokeRestart
[17:38:48.144]                       is.null <- base::is.null
[17:38:48.144]                       muffled <- FALSE
[17:38:48.144]                       if (inherits(cond, "message")) {
[17:38:48.144]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.144]                         if (muffled) 
[17:38:48.144]                           invokeRestart("muffleMessage")
[17:38:48.144]                       }
[17:38:48.144]                       else if (inherits(cond, "warning")) {
[17:38:48.144]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.144]                         if (muffled) 
[17:38:48.144]                           invokeRestart("muffleWarning")
[17:38:48.144]                       }
[17:38:48.144]                       else if (inherits(cond, "condition")) {
[17:38:48.144]                         if (!is.null(pattern)) {
[17:38:48.144]                           computeRestarts <- base::computeRestarts
[17:38:48.144]                           grepl <- base::grepl
[17:38:48.144]                           restarts <- computeRestarts(cond)
[17:38:48.144]                           for (restart in restarts) {
[17:38:48.144]                             name <- restart$name
[17:38:48.144]                             if (is.null(name)) 
[17:38:48.144]                               next
[17:38:48.144]                             if (!grepl(pattern, name)) 
[17:38:48.144]                               next
[17:38:48.144]                             invokeRestart(restart)
[17:38:48.144]                             muffled <- TRUE
[17:38:48.144]                             break
[17:38:48.144]                           }
[17:38:48.144]                         }
[17:38:48.144]                       }
[17:38:48.144]                       invisible(muffled)
[17:38:48.144]                     }
[17:38:48.144]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.144]                   }
[17:38:48.144]                 }
[17:38:48.144]             }
[17:38:48.144]         }))
[17:38:48.144]     }, error = function(ex) {
[17:38:48.144]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:48.144]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.144]                 ...future.rng), started = ...future.startTime, 
[17:38:48.144]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:48.144]             version = "1.8"), class = "FutureResult")
[17:38:48.144]     }, finally = {
[17:38:48.144]         if (!identical(...future.workdir, getwd())) 
[17:38:48.144]             setwd(...future.workdir)
[17:38:48.144]         {
[17:38:48.144]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:48.144]                 ...future.oldOptions$nwarnings <- NULL
[17:38:48.144]             }
[17:38:48.144]             base::options(...future.oldOptions)
[17:38:48.144]             if (.Platform$OS.type == "windows") {
[17:38:48.144]                 old_names <- names(...future.oldEnvVars)
[17:38:48.144]                 envs <- base::Sys.getenv()
[17:38:48.144]                 names <- names(envs)
[17:38:48.144]                 common <- intersect(names, old_names)
[17:38:48.144]                 added <- setdiff(names, old_names)
[17:38:48.144]                 removed <- setdiff(old_names, names)
[17:38:48.144]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:48.144]                   envs[common]]
[17:38:48.144]                 NAMES <- toupper(changed)
[17:38:48.144]                 args <- list()
[17:38:48.144]                 for (kk in seq_along(NAMES)) {
[17:38:48.144]                   name <- changed[[kk]]
[17:38:48.144]                   NAME <- NAMES[[kk]]
[17:38:48.144]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.144]                     next
[17:38:48.144]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.144]                 }
[17:38:48.144]                 NAMES <- toupper(added)
[17:38:48.144]                 for (kk in seq_along(NAMES)) {
[17:38:48.144]                   name <- added[[kk]]
[17:38:48.144]                   NAME <- NAMES[[kk]]
[17:38:48.144]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.144]                     next
[17:38:48.144]                   args[[name]] <- ""
[17:38:48.144]                 }
[17:38:48.144]                 NAMES <- toupper(removed)
[17:38:48.144]                 for (kk in seq_along(NAMES)) {
[17:38:48.144]                   name <- removed[[kk]]
[17:38:48.144]                   NAME <- NAMES[[kk]]
[17:38:48.144]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.144]                     next
[17:38:48.144]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.144]                 }
[17:38:48.144]                 if (length(args) > 0) 
[17:38:48.144]                   base::do.call(base::Sys.setenv, args = args)
[17:38:48.144]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:48.144]             }
[17:38:48.144]             else {
[17:38:48.144]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:48.144]             }
[17:38:48.144]             {
[17:38:48.144]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:48.144]                   0L) {
[17:38:48.144]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:48.144]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:48.144]                   base::options(opts)
[17:38:48.144]                 }
[17:38:48.144]                 {
[17:38:48.144]                   {
[17:38:48.144]                     NULL
[17:38:48.144]                     RNGkind("Mersenne-Twister")
[17:38:48.144]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:38:48.144]                       inherits = FALSE)
[17:38:48.144]                   }
[17:38:48.144]                   options(future.plan = NULL)
[17:38:48.144]                   if (is.na(NA_character_)) 
[17:38:48.144]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.144]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:48.144]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:48.144]                     .init = FALSE)
[17:38:48.144]                 }
[17:38:48.144]             }
[17:38:48.144]         }
[17:38:48.144]     })
[17:38:48.144]     if (TRUE) {
[17:38:48.144]         base::sink(type = "output", split = FALSE)
[17:38:48.144]         if (TRUE) {
[17:38:48.144]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:48.144]         }
[17:38:48.144]         else {
[17:38:48.144]             ...future.result["stdout"] <- base::list(NULL)
[17:38:48.144]         }
[17:38:48.144]         base::close(...future.stdout)
[17:38:48.144]         ...future.stdout <- NULL
[17:38:48.144]     }
[17:38:48.144]     ...future.result$conditions <- ...future.conditions
[17:38:48.144]     ...future.result$finished <- base::Sys.time()
[17:38:48.144]     ...future.result
[17:38:48.144] }
[17:38:48.145] plan(): Setting new future strategy stack:
[17:38:48.146] List of future strategies:
[17:38:48.146] 1. sequential:
[17:38:48.146]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.146]    - tweaked: FALSE
[17:38:48.146]    - call: NULL
[17:38:48.146] plan(): nbrOfWorkers() = 1
[17:38:48.147] plan(): Setting new future strategy stack:
[17:38:48.147] List of future strategies:
[17:38:48.147] 1. sequential:
[17:38:48.147]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:48.147]    - tweaked: FALSE
[17:38:48.147]    - call: future::plan("sequential")
[17:38:48.147] plan(): nbrOfWorkers() = 1
[17:38:48.148] SequentialFuture started (and completed)
[17:38:48.148] signalConditions() ...
[17:38:48.148]  - include = ‘immediateCondition’
[17:38:48.148]  - exclude = 
[17:38:48.148]  - resignal = FALSE
[17:38:48.148]  - Number of conditions: 1
[17:38:48.148] signalConditions() ... done
[17:38:48.148] - Launch lazy future ... done
[17:38:48.148] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[17:38:48.149] signalConditions() ...
[17:38:48.149]  - include = ‘immediateCondition’
[17:38:48.149]  - exclude = 
[17:38:48.149]  - resignal = FALSE
[17:38:48.149]  - Number of conditions: 1
[17:38:48.149] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[17:38:48.155] plan(): Setting new future strategy stack:
[17:38:48.155] List of future strategies:
[17:38:48.155] 1. multisession:
[17:38:48.155]    - args: function (..., workers = 2L, envir = parent.frame())
[17:38:48.155]    - tweaked: TRUE
[17:38:48.155]    - call: plan(multisession, workers = 2L)
[17:38:48.168] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:38:48.168] multisession:
[17:38:48.168] - args: function (..., workers = 2L, envir = parent.frame())
[17:38:48.168] - tweaked: TRUE
[17:38:48.168] - call: plan(multisession, workers = 2L)
[17:38:48.169] getGlobalsAndPackages() ...
[17:38:48.169] Not searching for globals
[17:38:48.169] - globals: [0] <none>
[17:38:48.169] getGlobalsAndPackages() ... DONE
[17:38:48.169] [local output] makeClusterPSOCK() ...
[17:38:48.205] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:38:48.206] [local output] Base port: 11857
[17:38:48.206] [local output] Getting setup options for 2 cluster nodes ...
[17:38:48.206] [local output]  - Node 1 of 2 ...
[17:38:48.206] [local output] localMachine=TRUE => revtunnel=FALSE

[17:38:48.207] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpsEyY7N/worker.rank=1.parallelly.parent=38806.9796562212b3.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpsEyY7N/worker.rank=1.parallelly.parent=38806.9796562212b3.pid")'’
[17:38:48.397] - Possible to infer worker's PID: TRUE
[17:38:48.397] [local output] Rscript port: 11857

[17:38:48.398] [local output]  - Node 2 of 2 ...
[17:38:48.398] [local output] localMachine=TRUE => revtunnel=FALSE

[17:38:48.399] [local output] Rscript port: 11857

[17:38:48.399] [local output] Getting setup options for 2 cluster nodes ... done
[17:38:48.399] [local output]  - Parallel setup requested for some PSOCK nodes
[17:38:48.400] [local output] Setting up PSOCK nodes in parallel
[17:38:48.400] List of 36
[17:38:48.400]  $ worker          : chr "localhost"
[17:38:48.400]   ..- attr(*, "localhost")= logi TRUE
[17:38:48.400]  $ master          : chr "localhost"
[17:38:48.400]  $ port            : int 11857
[17:38:48.400]  $ connectTimeout  : num 120
[17:38:48.400]  $ timeout         : num 2592000
[17:38:48.400]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:38:48.400]  $ homogeneous     : logi TRUE
[17:38:48.400]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:38:48.400]  $ rscript_envs    : NULL
[17:38:48.400]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:38:48.400]  $ rscript_startup : NULL
[17:38:48.400]  $ rscript_sh      : chr "sh"
[17:38:48.400]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:38:48.400]  $ methods         : logi TRUE
[17:38:48.400]  $ socketOptions   : chr "no-delay"
[17:38:48.400]  $ useXDR          : logi FALSE
[17:38:48.400]  $ outfile         : chr "/dev/null"
[17:38:48.400]  $ renice          : int NA
[17:38:48.400]  $ rshcmd          : NULL
[17:38:48.400]  $ user            : chr(0) 
[17:38:48.400]  $ revtunnel       : logi FALSE
[17:38:48.400]  $ rshlogfile      : NULL
[17:38:48.400]  $ rshopts         : chr(0) 
[17:38:48.400]  $ rank            : int 1
[17:38:48.400]  $ manual          : logi FALSE
[17:38:48.400]  $ dryrun          : logi FALSE
[17:38:48.400]  $ quiet           : logi FALSE
[17:38:48.400]  $ setup_strategy  : chr "parallel"
[17:38:48.400]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:38:48.400]  $ pidfile         : chr "/tmp/RtmpsEyY7N/worker.rank=1.parallelly.parent=38806.9796562212b3.pid"
[17:38:48.400]  $ rshcmd_label    : NULL
[17:38:48.400]  $ rsh_call        : NULL
[17:38:48.400]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:38:48.400]  $ localMachine    : logi TRUE
[17:38:48.400]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:38:48.400]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:38:48.400]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:38:48.400]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:38:48.400]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:38:48.400]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:38:48.400]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:38:48.400]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:38:48.400]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:38:48.400]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:38:48.400]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:38:48.400]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:38:48.400]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:38:48.400]  $ arguments       :List of 28
[17:38:48.400]   ..$ worker          : chr "localhost"
[17:38:48.400]   ..$ master          : NULL
[17:38:48.400]   ..$ port            : int 11857
[17:38:48.400]   ..$ connectTimeout  : num 120
[17:38:48.400]   ..$ timeout         : num 2592000
[17:38:48.400]   ..$ rscript         : NULL
[17:38:48.400]   ..$ homogeneous     : NULL
[17:38:48.400]   ..$ rscript_args    : NULL
[17:38:48.400]   ..$ rscript_envs    : NULL
[17:38:48.400]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:38:48.400]   ..$ rscript_startup : NULL
[17:38:48.400]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:38:48.400]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:38:48.400]   ..$ methods         : logi TRUE
[17:38:48.400]   ..$ socketOptions   : chr "no-delay"
[17:38:48.400]   ..$ useXDR          : logi FALSE
[17:38:48.400]   ..$ outfile         : chr "/dev/null"
[17:38:48.400]   ..$ renice          : int NA
[17:38:48.400]   ..$ rshcmd          : NULL
[17:38:48.400]   ..$ user            : NULL
[17:38:48.400]   ..$ revtunnel       : logi NA
[17:38:48.400]   ..$ rshlogfile      : NULL
[17:38:48.400]   ..$ rshopts         : NULL
[17:38:48.400]   ..$ rank            : int 1
[17:38:48.400]   ..$ manual          : logi FALSE
[17:38:48.400]   ..$ dryrun          : logi FALSE
[17:38:48.400]   ..$ quiet           : logi FALSE
[17:38:48.400]   ..$ setup_strategy  : chr "parallel"
[17:38:48.400]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:38:48.418] [local output] System call to launch all workers:
[17:38:48.418] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpsEyY7N/worker.rank=1.parallelly.parent=38806.9796562212b3.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11857 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:38:48.418] [local output] Starting PSOCK main server
[17:38:48.424] [local output] Workers launched
[17:38:48.424] [local output] Waiting for workers to connect back
[17:38:48.424]  - [local output] 0 workers out of 2 ready
[17:38:48.663]  - [local output] 0 workers out of 2 ready
[17:38:48.664]  - [local output] 1 workers out of 2 ready
[17:38:48.674]  - [local output] 1 workers out of 2 ready
[17:38:48.674]  - [local output] 2 workers out of 2 ready
[17:38:48.674] [local output] Launching of workers completed
[17:38:48.674] [local output] Collecting session information from workers
[17:38:48.675] [local output]  - Worker #1 of 2
[17:38:48.676] [local output]  - Worker #2 of 2
[17:38:48.676] [local output] makeClusterPSOCK() ... done
[17:38:48.688] Packages needed by the future expression (n = 0): <none>
[17:38:48.688] Packages needed by future strategies (n = 0): <none>
[17:38:48.688] {
[17:38:48.688]     {
[17:38:48.688]         {
[17:38:48.688]             ...future.startTime <- base::Sys.time()
[17:38:48.688]             {
[17:38:48.688]                 {
[17:38:48.688]                   {
[17:38:48.688]                     {
[17:38:48.688]                       base::local({
[17:38:48.688]                         has_future <- base::requireNamespace("future", 
[17:38:48.688]                           quietly = TRUE)
[17:38:48.688]                         if (has_future) {
[17:38:48.688]                           ns <- base::getNamespace("future")
[17:38:48.688]                           version <- ns[[".package"]][["version"]]
[17:38:48.688]                           if (is.null(version)) 
[17:38:48.688]                             version <- utils::packageVersion("future")
[17:38:48.688]                         }
[17:38:48.688]                         else {
[17:38:48.688]                           version <- NULL
[17:38:48.688]                         }
[17:38:48.688]                         if (!has_future || version < "1.8.0") {
[17:38:48.688]                           info <- base::c(r_version = base::gsub("R version ", 
[17:38:48.688]                             "", base::R.version$version.string), 
[17:38:48.688]                             platform = base::sprintf("%s (%s-bit)", 
[17:38:48.688]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:48.688]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:48.688]                               "release", "version")], collapse = " "), 
[17:38:48.688]                             hostname = base::Sys.info()[["nodename"]])
[17:38:48.688]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:38:48.688]                             info)
[17:38:48.688]                           info <- base::paste(info, collapse = "; ")
[17:38:48.688]                           if (!has_future) {
[17:38:48.688]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:48.688]                               info)
[17:38:48.688]                           }
[17:38:48.688]                           else {
[17:38:48.688]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:48.688]                               info, version)
[17:38:48.688]                           }
[17:38:48.688]                           base::stop(msg)
[17:38:48.688]                         }
[17:38:48.688]                       })
[17:38:48.688]                     }
[17:38:48.688]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:38:48.688]                     base::options(mc.cores = 1L)
[17:38:48.688]                   }
[17:38:48.688]                   ...future.strategy.old <- future::plan("list")
[17:38:48.688]                   options(future.plan = NULL)
[17:38:48.688]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.688]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:48.688]                 }
[17:38:48.688]                 ...future.workdir <- getwd()
[17:38:48.688]             }
[17:38:48.688]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:48.688]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:48.688]         }
[17:38:48.688]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:48.688]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:48.688]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:48.688]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:48.688]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:48.688]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:48.688]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:48.688]             base::names(...future.oldOptions))
[17:38:48.688]     }
[17:38:48.688]     if (FALSE) {
[17:38:48.688]     }
[17:38:48.688]     else {
[17:38:48.688]         if (TRUE) {
[17:38:48.688]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:48.688]                 open = "w")
[17:38:48.688]         }
[17:38:48.688]         else {
[17:38:48.688]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:48.688]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:48.688]         }
[17:38:48.688]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:48.688]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:48.688]             base::sink(type = "output", split = FALSE)
[17:38:48.688]             base::close(...future.stdout)
[17:38:48.688]         }, add = TRUE)
[17:38:48.688]     }
[17:38:48.688]     ...future.frame <- base::sys.nframe()
[17:38:48.688]     ...future.conditions <- base::list()
[17:38:48.688]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:48.688]     if (FALSE) {
[17:38:48.688]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:48.688]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:48.688]     }
[17:38:48.688]     ...future.result <- base::tryCatch({
[17:38:48.688]         base::withCallingHandlers({
[17:38:48.688]             ...future.value <- base::withVisible(base::local({
[17:38:48.688]                 ...future.makeSendCondition <- base::local({
[17:38:48.688]                   sendCondition <- NULL
[17:38:48.688]                   function(frame = 1L) {
[17:38:48.688]                     if (is.function(sendCondition)) 
[17:38:48.688]                       return(sendCondition)
[17:38:48.688]                     ns <- getNamespace("parallel")
[17:38:48.688]                     if (exists("sendData", mode = "function", 
[17:38:48.688]                       envir = ns)) {
[17:38:48.688]                       parallel_sendData <- get("sendData", mode = "function", 
[17:38:48.688]                         envir = ns)
[17:38:48.688]                       envir <- sys.frame(frame)
[17:38:48.688]                       master <- NULL
[17:38:48.688]                       while (!identical(envir, .GlobalEnv) && 
[17:38:48.688]                         !identical(envir, emptyenv())) {
[17:38:48.688]                         if (exists("master", mode = "list", envir = envir, 
[17:38:48.688]                           inherits = FALSE)) {
[17:38:48.688]                           master <- get("master", mode = "list", 
[17:38:48.688]                             envir = envir, inherits = FALSE)
[17:38:48.688]                           if (inherits(master, c("SOCKnode", 
[17:38:48.688]                             "SOCK0node"))) {
[17:38:48.688]                             sendCondition <<- function(cond) {
[17:38:48.688]                               data <- list(type = "VALUE", value = cond, 
[17:38:48.688]                                 success = TRUE)
[17:38:48.688]                               parallel_sendData(master, data)
[17:38:48.688]                             }
[17:38:48.688]                             return(sendCondition)
[17:38:48.688]                           }
[17:38:48.688]                         }
[17:38:48.688]                         frame <- frame + 1L
[17:38:48.688]                         envir <- sys.frame(frame)
[17:38:48.688]                       }
[17:38:48.688]                     }
[17:38:48.688]                     sendCondition <<- function(cond) NULL
[17:38:48.688]                   }
[17:38:48.688]                 })
[17:38:48.688]                 withCallingHandlers({
[17:38:48.688]                   NA
[17:38:48.688]                 }, immediateCondition = function(cond) {
[17:38:48.688]                   sendCondition <- ...future.makeSendCondition()
[17:38:48.688]                   sendCondition(cond)
[17:38:48.688]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.688]                   {
[17:38:48.688]                     inherits <- base::inherits
[17:38:48.688]                     invokeRestart <- base::invokeRestart
[17:38:48.688]                     is.null <- base::is.null
[17:38:48.688]                     muffled <- FALSE
[17:38:48.688]                     if (inherits(cond, "message")) {
[17:38:48.688]                       muffled <- grepl(pattern, "muffleMessage")
[17:38:48.688]                       if (muffled) 
[17:38:48.688]                         invokeRestart("muffleMessage")
[17:38:48.688]                     }
[17:38:48.688]                     else if (inherits(cond, "warning")) {
[17:38:48.688]                       muffled <- grepl(pattern, "muffleWarning")
[17:38:48.688]                       if (muffled) 
[17:38:48.688]                         invokeRestart("muffleWarning")
[17:38:48.688]                     }
[17:38:48.688]                     else if (inherits(cond, "condition")) {
[17:38:48.688]                       if (!is.null(pattern)) {
[17:38:48.688]                         computeRestarts <- base::computeRestarts
[17:38:48.688]                         grepl <- base::grepl
[17:38:48.688]                         restarts <- computeRestarts(cond)
[17:38:48.688]                         for (restart in restarts) {
[17:38:48.688]                           name <- restart$name
[17:38:48.688]                           if (is.null(name)) 
[17:38:48.688]                             next
[17:38:48.688]                           if (!grepl(pattern, name)) 
[17:38:48.688]                             next
[17:38:48.688]                           invokeRestart(restart)
[17:38:48.688]                           muffled <- TRUE
[17:38:48.688]                           break
[17:38:48.688]                         }
[17:38:48.688]                       }
[17:38:48.688]                     }
[17:38:48.688]                     invisible(muffled)
[17:38:48.688]                   }
[17:38:48.688]                   muffleCondition(cond)
[17:38:48.688]                 })
[17:38:48.688]             }))
[17:38:48.688]             future::FutureResult(value = ...future.value$value, 
[17:38:48.688]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.688]                   ...future.rng), globalenv = if (FALSE) 
[17:38:48.688]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:48.688]                     ...future.globalenv.names))
[17:38:48.688]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:48.688]         }, condition = base::local({
[17:38:48.688]             c <- base::c
[17:38:48.688]             inherits <- base::inherits
[17:38:48.688]             invokeRestart <- base::invokeRestart
[17:38:48.688]             length <- base::length
[17:38:48.688]             list <- base::list
[17:38:48.688]             seq.int <- base::seq.int
[17:38:48.688]             signalCondition <- base::signalCondition
[17:38:48.688]             sys.calls <- base::sys.calls
[17:38:48.688]             `[[` <- base::`[[`
[17:38:48.688]             `+` <- base::`+`
[17:38:48.688]             `<<-` <- base::`<<-`
[17:38:48.688]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:48.688]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:48.688]                   3L)]
[17:38:48.688]             }
[17:38:48.688]             function(cond) {
[17:38:48.688]                 is_error <- inherits(cond, "error")
[17:38:48.688]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:48.688]                   NULL)
[17:38:48.688]                 if (is_error) {
[17:38:48.688]                   sessionInformation <- function() {
[17:38:48.688]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:48.688]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:48.688]                       search = base::search(), system = base::Sys.info())
[17:38:48.688]                   }
[17:38:48.688]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.688]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:48.688]                     cond$call), session = sessionInformation(), 
[17:38:48.688]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:48.688]                   signalCondition(cond)
[17:38:48.688]                 }
[17:38:48.688]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:48.688]                 "immediateCondition"))) {
[17:38:48.688]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:48.688]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.688]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:48.688]                   if (TRUE && !signal) {
[17:38:48.688]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.688]                     {
[17:38:48.688]                       inherits <- base::inherits
[17:38:48.688]                       invokeRestart <- base::invokeRestart
[17:38:48.688]                       is.null <- base::is.null
[17:38:48.688]                       muffled <- FALSE
[17:38:48.688]                       if (inherits(cond, "message")) {
[17:38:48.688]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.688]                         if (muffled) 
[17:38:48.688]                           invokeRestart("muffleMessage")
[17:38:48.688]                       }
[17:38:48.688]                       else if (inherits(cond, "warning")) {
[17:38:48.688]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.688]                         if (muffled) 
[17:38:48.688]                           invokeRestart("muffleWarning")
[17:38:48.688]                       }
[17:38:48.688]                       else if (inherits(cond, "condition")) {
[17:38:48.688]                         if (!is.null(pattern)) {
[17:38:48.688]                           computeRestarts <- base::computeRestarts
[17:38:48.688]                           grepl <- base::grepl
[17:38:48.688]                           restarts <- computeRestarts(cond)
[17:38:48.688]                           for (restart in restarts) {
[17:38:48.688]                             name <- restart$name
[17:38:48.688]                             if (is.null(name)) 
[17:38:48.688]                               next
[17:38:48.688]                             if (!grepl(pattern, name)) 
[17:38:48.688]                               next
[17:38:48.688]                             invokeRestart(restart)
[17:38:48.688]                             muffled <- TRUE
[17:38:48.688]                             break
[17:38:48.688]                           }
[17:38:48.688]                         }
[17:38:48.688]                       }
[17:38:48.688]                       invisible(muffled)
[17:38:48.688]                     }
[17:38:48.688]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.688]                   }
[17:38:48.688]                 }
[17:38:48.688]                 else {
[17:38:48.688]                   if (TRUE) {
[17:38:48.688]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.688]                     {
[17:38:48.688]                       inherits <- base::inherits
[17:38:48.688]                       invokeRestart <- base::invokeRestart
[17:38:48.688]                       is.null <- base::is.null
[17:38:48.688]                       muffled <- FALSE
[17:38:48.688]                       if (inherits(cond, "message")) {
[17:38:48.688]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.688]                         if (muffled) 
[17:38:48.688]                           invokeRestart("muffleMessage")
[17:38:48.688]                       }
[17:38:48.688]                       else if (inherits(cond, "warning")) {
[17:38:48.688]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.688]                         if (muffled) 
[17:38:48.688]                           invokeRestart("muffleWarning")
[17:38:48.688]                       }
[17:38:48.688]                       else if (inherits(cond, "condition")) {
[17:38:48.688]                         if (!is.null(pattern)) {
[17:38:48.688]                           computeRestarts <- base::computeRestarts
[17:38:48.688]                           grepl <- base::grepl
[17:38:48.688]                           restarts <- computeRestarts(cond)
[17:38:48.688]                           for (restart in restarts) {
[17:38:48.688]                             name <- restart$name
[17:38:48.688]                             if (is.null(name)) 
[17:38:48.688]                               next
[17:38:48.688]                             if (!grepl(pattern, name)) 
[17:38:48.688]                               next
[17:38:48.688]                             invokeRestart(restart)
[17:38:48.688]                             muffled <- TRUE
[17:38:48.688]                             break
[17:38:48.688]                           }
[17:38:48.688]                         }
[17:38:48.688]                       }
[17:38:48.688]                       invisible(muffled)
[17:38:48.688]                     }
[17:38:48.688]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.688]                   }
[17:38:48.688]                 }
[17:38:48.688]             }
[17:38:48.688]         }))
[17:38:48.688]     }, error = function(ex) {
[17:38:48.688]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:48.688]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.688]                 ...future.rng), started = ...future.startTime, 
[17:38:48.688]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:48.688]             version = "1.8"), class = "FutureResult")
[17:38:48.688]     }, finally = {
[17:38:48.688]         if (!identical(...future.workdir, getwd())) 
[17:38:48.688]             setwd(...future.workdir)
[17:38:48.688]         {
[17:38:48.688]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:48.688]                 ...future.oldOptions$nwarnings <- NULL
[17:38:48.688]             }
[17:38:48.688]             base::options(...future.oldOptions)
[17:38:48.688]             if (.Platform$OS.type == "windows") {
[17:38:48.688]                 old_names <- names(...future.oldEnvVars)
[17:38:48.688]                 envs <- base::Sys.getenv()
[17:38:48.688]                 names <- names(envs)
[17:38:48.688]                 common <- intersect(names, old_names)
[17:38:48.688]                 added <- setdiff(names, old_names)
[17:38:48.688]                 removed <- setdiff(old_names, names)
[17:38:48.688]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:48.688]                   envs[common]]
[17:38:48.688]                 NAMES <- toupper(changed)
[17:38:48.688]                 args <- list()
[17:38:48.688]                 for (kk in seq_along(NAMES)) {
[17:38:48.688]                   name <- changed[[kk]]
[17:38:48.688]                   NAME <- NAMES[[kk]]
[17:38:48.688]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.688]                     next
[17:38:48.688]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.688]                 }
[17:38:48.688]                 NAMES <- toupper(added)
[17:38:48.688]                 for (kk in seq_along(NAMES)) {
[17:38:48.688]                   name <- added[[kk]]
[17:38:48.688]                   NAME <- NAMES[[kk]]
[17:38:48.688]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.688]                     next
[17:38:48.688]                   args[[name]] <- ""
[17:38:48.688]                 }
[17:38:48.688]                 NAMES <- toupper(removed)
[17:38:48.688]                 for (kk in seq_along(NAMES)) {
[17:38:48.688]                   name <- removed[[kk]]
[17:38:48.688]                   NAME <- NAMES[[kk]]
[17:38:48.688]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.688]                     next
[17:38:48.688]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.688]                 }
[17:38:48.688]                 if (length(args) > 0) 
[17:38:48.688]                   base::do.call(base::Sys.setenv, args = args)
[17:38:48.688]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:48.688]             }
[17:38:48.688]             else {
[17:38:48.688]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:48.688]             }
[17:38:48.688]             {
[17:38:48.688]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:48.688]                   0L) {
[17:38:48.688]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:48.688]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:48.688]                   base::options(opts)
[17:38:48.688]                 }
[17:38:48.688]                 {
[17:38:48.688]                   {
[17:38:48.688]                     base::options(mc.cores = ...future.mc.cores.old)
[17:38:48.688]                     NULL
[17:38:48.688]                   }
[17:38:48.688]                   options(future.plan = NULL)
[17:38:48.688]                   if (is.na(NA_character_)) 
[17:38:48.688]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.688]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:48.688]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:48.688]                     .init = FALSE)
[17:38:48.688]                 }
[17:38:48.688]             }
[17:38:48.688]         }
[17:38:48.688]     })
[17:38:48.688]     if (TRUE) {
[17:38:48.688]         base::sink(type = "output", split = FALSE)
[17:38:48.688]         if (TRUE) {
[17:38:48.688]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:48.688]         }
[17:38:48.688]         else {
[17:38:48.688]             ...future.result["stdout"] <- base::list(NULL)
[17:38:48.688]         }
[17:38:48.688]         base::close(...future.stdout)
[17:38:48.688]         ...future.stdout <- NULL
[17:38:48.688]     }
[17:38:48.688]     ...future.result$conditions <- ...future.conditions
[17:38:48.688]     ...future.result$finished <- base::Sys.time()
[17:38:48.688]     ...future.result
[17:38:48.688] }
[17:38:48.741] MultisessionFuture started
[17:38:48.741] result() for ClusterFuture ...
[17:38:48.742] receiveMessageFromWorker() for ClusterFuture ...
[17:38:48.742] - Validating connection of MultisessionFuture
[17:38:48.774] - received message: FutureResult
[17:38:48.774] - Received FutureResult
[17:38:48.777] - Erased future from FutureRegistry
[17:38:48.777] result() for ClusterFuture ...
[17:38:48.777] - result already collected: FutureResult
[17:38:48.777] result() for ClusterFuture ... done
[17:38:48.777] receiveMessageFromWorker() for ClusterFuture ... done
[17:38:48.777] result() for ClusterFuture ... done
[17:38:48.778] result() for ClusterFuture ...
[17:38:48.778] - result already collected: FutureResult
[17:38:48.778] result() for ClusterFuture ... done
[17:38:48.778] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:38:48.778] plan(): nbrOfWorkers() = 2
[17:38:48.778] getGlobalsAndPackages() ...
[17:38:48.779] Searching for globals...
[17:38:48.780] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[17:38:48.780] Searching for globals ... DONE
[17:38:48.780] Resolving globals: FALSE
[17:38:48.781] 
[17:38:48.781] 
[17:38:48.781] getGlobalsAndPackages() ... DONE
[17:38:48.781] run() for ‘Future’ ...
[17:38:48.781] - state: ‘created’
[17:38:48.782] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:38:48.792] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:38:48.793] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:38:48.793]   - Field: ‘node’
[17:38:48.793]   - Field: ‘label’
[17:38:48.793]   - Field: ‘local’
[17:38:48.793]   - Field: ‘owner’
[17:38:48.793]   - Field: ‘envir’
[17:38:48.793]   - Field: ‘workers’
[17:38:48.793]   - Field: ‘packages’
[17:38:48.793]   - Field: ‘gc’
[17:38:48.794]   - Field: ‘conditions’
[17:38:48.794]   - Field: ‘persistent’
[17:38:48.794]   - Field: ‘expr’
[17:38:48.794]   - Field: ‘uuid’
[17:38:48.794]   - Field: ‘seed’
[17:38:48.794]   - Field: ‘version’
[17:38:48.794]   - Field: ‘result’
[17:38:48.794]   - Field: ‘asynchronous’
[17:38:48.794]   - Field: ‘calls’
[17:38:48.795]   - Field: ‘globals’
[17:38:48.795]   - Field: ‘stdout’
[17:38:48.795]   - Field: ‘earlySignal’
[17:38:48.795]   - Field: ‘lazy’
[17:38:48.795]   - Field: ‘state’
[17:38:48.795] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:38:48.795] - Launch lazy future ...
[17:38:48.796] Packages needed by the future expression (n = 0): <none>
[17:38:48.796] Packages needed by future strategies (n = 0): <none>
[17:38:48.796] {
[17:38:48.796]     {
[17:38:48.796]         {
[17:38:48.796]             ...future.startTime <- base::Sys.time()
[17:38:48.796]             {
[17:38:48.796]                 {
[17:38:48.796]                   {
[17:38:48.796]                     {
[17:38:48.796]                       base::local({
[17:38:48.796]                         has_future <- base::requireNamespace("future", 
[17:38:48.796]                           quietly = TRUE)
[17:38:48.796]                         if (has_future) {
[17:38:48.796]                           ns <- base::getNamespace("future")
[17:38:48.796]                           version <- ns[[".package"]][["version"]]
[17:38:48.796]                           if (is.null(version)) 
[17:38:48.796]                             version <- utils::packageVersion("future")
[17:38:48.796]                         }
[17:38:48.796]                         else {
[17:38:48.796]                           version <- NULL
[17:38:48.796]                         }
[17:38:48.796]                         if (!has_future || version < "1.8.0") {
[17:38:48.796]                           info <- base::c(r_version = base::gsub("R version ", 
[17:38:48.796]                             "", base::R.version$version.string), 
[17:38:48.796]                             platform = base::sprintf("%s (%s-bit)", 
[17:38:48.796]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:38:48.796]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:38:48.796]                               "release", "version")], collapse = " "), 
[17:38:48.796]                             hostname = base::Sys.info()[["nodename"]])
[17:38:48.796]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:38:48.796]                             info)
[17:38:48.796]                           info <- base::paste(info, collapse = "; ")
[17:38:48.796]                           if (!has_future) {
[17:38:48.796]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:38:48.796]                               info)
[17:38:48.796]                           }
[17:38:48.796]                           else {
[17:38:48.796]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:38:48.796]                               info, version)
[17:38:48.796]                           }
[17:38:48.796]                           base::stop(msg)
[17:38:48.796]                         }
[17:38:48.796]                       })
[17:38:48.796]                     }
[17:38:48.796]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:38:48.796]                     base::options(mc.cores = 1L)
[17:38:48.796]                   }
[17:38:48.796]                   ...future.strategy.old <- future::plan("list")
[17:38:48.796]                   options(future.plan = NULL)
[17:38:48.796]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.796]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:38:48.796]                 }
[17:38:48.796]                 ...future.workdir <- getwd()
[17:38:48.796]             }
[17:38:48.796]             ...future.oldOptions <- base::as.list(base::.Options)
[17:38:48.796]             ...future.oldEnvVars <- base::Sys.getenv()
[17:38:48.796]         }
[17:38:48.796]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:38:48.796]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:38:48.796]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:38:48.796]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:38:48.796]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:38:48.796]             future.stdout.windows.reencode = NULL, width = 80L)
[17:38:48.796]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:38:48.796]             base::names(...future.oldOptions))
[17:38:48.796]     }
[17:38:48.796]     if (FALSE) {
[17:38:48.796]     }
[17:38:48.796]     else {
[17:38:48.796]         if (TRUE) {
[17:38:48.796]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:38:48.796]                 open = "w")
[17:38:48.796]         }
[17:38:48.796]         else {
[17:38:48.796]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:38:48.796]                 windows = "NUL", "/dev/null"), open = "w")
[17:38:48.796]         }
[17:38:48.796]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:38:48.796]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:38:48.796]             base::sink(type = "output", split = FALSE)
[17:38:48.796]             base::close(...future.stdout)
[17:38:48.796]         }, add = TRUE)
[17:38:48.796]     }
[17:38:48.796]     ...future.frame <- base::sys.nframe()
[17:38:48.796]     ...future.conditions <- base::list()
[17:38:48.796]     ...future.rng <- base::globalenv()$.Random.seed
[17:38:48.796]     if (FALSE) {
[17:38:48.796]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:38:48.796]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:38:48.796]     }
[17:38:48.796]     ...future.result <- base::tryCatch({
[17:38:48.796]         base::withCallingHandlers({
[17:38:48.796]             ...future.value <- base::withVisible(base::local({
[17:38:48.796]                 ...future.makeSendCondition <- base::local({
[17:38:48.796]                   sendCondition <- NULL
[17:38:48.796]                   function(frame = 1L) {
[17:38:48.796]                     if (is.function(sendCondition)) 
[17:38:48.796]                       return(sendCondition)
[17:38:48.796]                     ns <- getNamespace("parallel")
[17:38:48.796]                     if (exists("sendData", mode = "function", 
[17:38:48.796]                       envir = ns)) {
[17:38:48.796]                       parallel_sendData <- get("sendData", mode = "function", 
[17:38:48.796]                         envir = ns)
[17:38:48.796]                       envir <- sys.frame(frame)
[17:38:48.796]                       master <- NULL
[17:38:48.796]                       while (!identical(envir, .GlobalEnv) && 
[17:38:48.796]                         !identical(envir, emptyenv())) {
[17:38:48.796]                         if (exists("master", mode = "list", envir = envir, 
[17:38:48.796]                           inherits = FALSE)) {
[17:38:48.796]                           master <- get("master", mode = "list", 
[17:38:48.796]                             envir = envir, inherits = FALSE)
[17:38:48.796]                           if (inherits(master, c("SOCKnode", 
[17:38:48.796]                             "SOCK0node"))) {
[17:38:48.796]                             sendCondition <<- function(cond) {
[17:38:48.796]                               data <- list(type = "VALUE", value = cond, 
[17:38:48.796]                                 success = TRUE)
[17:38:48.796]                               parallel_sendData(master, data)
[17:38:48.796]                             }
[17:38:48.796]                             return(sendCondition)
[17:38:48.796]                           }
[17:38:48.796]                         }
[17:38:48.796]                         frame <- frame + 1L
[17:38:48.796]                         envir <- sys.frame(frame)
[17:38:48.796]                       }
[17:38:48.796]                     }
[17:38:48.796]                     sendCondition <<- function(cond) NULL
[17:38:48.796]                   }
[17:38:48.796]                 })
[17:38:48.796]                 withCallingHandlers({
[17:38:48.796]                   {
[17:38:48.796]                     Sys.sleep(3)
[17:38:48.796]                     42L
[17:38:48.796]                     stop("Woops")
[17:38:48.796]                   }
[17:38:48.796]                 }, immediateCondition = function(cond) {
[17:38:48.796]                   sendCondition <- ...future.makeSendCondition()
[17:38:48.796]                   sendCondition(cond)
[17:38:48.796]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.796]                   {
[17:38:48.796]                     inherits <- base::inherits
[17:38:48.796]                     invokeRestart <- base::invokeRestart
[17:38:48.796]                     is.null <- base::is.null
[17:38:48.796]                     muffled <- FALSE
[17:38:48.796]                     if (inherits(cond, "message")) {
[17:38:48.796]                       muffled <- grepl(pattern, "muffleMessage")
[17:38:48.796]                       if (muffled) 
[17:38:48.796]                         invokeRestart("muffleMessage")
[17:38:48.796]                     }
[17:38:48.796]                     else if (inherits(cond, "warning")) {
[17:38:48.796]                       muffled <- grepl(pattern, "muffleWarning")
[17:38:48.796]                       if (muffled) 
[17:38:48.796]                         invokeRestart("muffleWarning")
[17:38:48.796]                     }
[17:38:48.796]                     else if (inherits(cond, "condition")) {
[17:38:48.796]                       if (!is.null(pattern)) {
[17:38:48.796]                         computeRestarts <- base::computeRestarts
[17:38:48.796]                         grepl <- base::grepl
[17:38:48.796]                         restarts <- computeRestarts(cond)
[17:38:48.796]                         for (restart in restarts) {
[17:38:48.796]                           name <- restart$name
[17:38:48.796]                           if (is.null(name)) 
[17:38:48.796]                             next
[17:38:48.796]                           if (!grepl(pattern, name)) 
[17:38:48.796]                             next
[17:38:48.796]                           invokeRestart(restart)
[17:38:48.796]                           muffled <- TRUE
[17:38:48.796]                           break
[17:38:48.796]                         }
[17:38:48.796]                       }
[17:38:48.796]                     }
[17:38:48.796]                     invisible(muffled)
[17:38:48.796]                   }
[17:38:48.796]                   muffleCondition(cond)
[17:38:48.796]                 })
[17:38:48.796]             }))
[17:38:48.796]             future::FutureResult(value = ...future.value$value, 
[17:38:48.796]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.796]                   ...future.rng), globalenv = if (FALSE) 
[17:38:48.796]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:38:48.796]                     ...future.globalenv.names))
[17:38:48.796]                 else NULL, started = ...future.startTime, version = "1.8")
[17:38:48.796]         }, condition = base::local({
[17:38:48.796]             c <- base::c
[17:38:48.796]             inherits <- base::inherits
[17:38:48.796]             invokeRestart <- base::invokeRestart
[17:38:48.796]             length <- base::length
[17:38:48.796]             list <- base::list
[17:38:48.796]             seq.int <- base::seq.int
[17:38:48.796]             signalCondition <- base::signalCondition
[17:38:48.796]             sys.calls <- base::sys.calls
[17:38:48.796]             `[[` <- base::`[[`
[17:38:48.796]             `+` <- base::`+`
[17:38:48.796]             `<<-` <- base::`<<-`
[17:38:48.796]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:38:48.796]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:38:48.796]                   3L)]
[17:38:48.796]             }
[17:38:48.796]             function(cond) {
[17:38:48.796]                 is_error <- inherits(cond, "error")
[17:38:48.796]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:38:48.796]                   NULL)
[17:38:48.796]                 if (is_error) {
[17:38:48.796]                   sessionInformation <- function() {
[17:38:48.796]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:38:48.796]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:38:48.796]                       search = base::search(), system = base::Sys.info())
[17:38:48.796]                   }
[17:38:48.796]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.796]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:38:48.796]                     cond$call), session = sessionInformation(), 
[17:38:48.796]                     timestamp = base::Sys.time(), signaled = 0L)
[17:38:48.796]                   signalCondition(cond)
[17:38:48.796]                 }
[17:38:48.796]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:38:48.796]                 "immediateCondition"))) {
[17:38:48.796]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:38:48.796]                   ...future.conditions[[length(...future.conditions) + 
[17:38:48.796]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:38:48.796]                   if (TRUE && !signal) {
[17:38:48.796]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.796]                     {
[17:38:48.796]                       inherits <- base::inherits
[17:38:48.796]                       invokeRestart <- base::invokeRestart
[17:38:48.796]                       is.null <- base::is.null
[17:38:48.796]                       muffled <- FALSE
[17:38:48.796]                       if (inherits(cond, "message")) {
[17:38:48.796]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.796]                         if (muffled) 
[17:38:48.796]                           invokeRestart("muffleMessage")
[17:38:48.796]                       }
[17:38:48.796]                       else if (inherits(cond, "warning")) {
[17:38:48.796]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.796]                         if (muffled) 
[17:38:48.796]                           invokeRestart("muffleWarning")
[17:38:48.796]                       }
[17:38:48.796]                       else if (inherits(cond, "condition")) {
[17:38:48.796]                         if (!is.null(pattern)) {
[17:38:48.796]                           computeRestarts <- base::computeRestarts
[17:38:48.796]                           grepl <- base::grepl
[17:38:48.796]                           restarts <- computeRestarts(cond)
[17:38:48.796]                           for (restart in restarts) {
[17:38:48.796]                             name <- restart$name
[17:38:48.796]                             if (is.null(name)) 
[17:38:48.796]                               next
[17:38:48.796]                             if (!grepl(pattern, name)) 
[17:38:48.796]                               next
[17:38:48.796]                             invokeRestart(restart)
[17:38:48.796]                             muffled <- TRUE
[17:38:48.796]                             break
[17:38:48.796]                           }
[17:38:48.796]                         }
[17:38:48.796]                       }
[17:38:48.796]                       invisible(muffled)
[17:38:48.796]                     }
[17:38:48.796]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.796]                   }
[17:38:48.796]                 }
[17:38:48.796]                 else {
[17:38:48.796]                   if (TRUE) {
[17:38:48.796]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:38:48.796]                     {
[17:38:48.796]                       inherits <- base::inherits
[17:38:48.796]                       invokeRestart <- base::invokeRestart
[17:38:48.796]                       is.null <- base::is.null
[17:38:48.796]                       muffled <- FALSE
[17:38:48.796]                       if (inherits(cond, "message")) {
[17:38:48.796]                         muffled <- grepl(pattern, "muffleMessage")
[17:38:48.796]                         if (muffled) 
[17:38:48.796]                           invokeRestart("muffleMessage")
[17:38:48.796]                       }
[17:38:48.796]                       else if (inherits(cond, "warning")) {
[17:38:48.796]                         muffled <- grepl(pattern, "muffleWarning")
[17:38:48.796]                         if (muffled) 
[17:38:48.796]                           invokeRestart("muffleWarning")
[17:38:48.796]                       }
[17:38:48.796]                       else if (inherits(cond, "condition")) {
[17:38:48.796]                         if (!is.null(pattern)) {
[17:38:48.796]                           computeRestarts <- base::computeRestarts
[17:38:48.796]                           grepl <- base::grepl
[17:38:48.796]                           restarts <- computeRestarts(cond)
[17:38:48.796]                           for (restart in restarts) {
[17:38:48.796]                             name <- restart$name
[17:38:48.796]                             if (is.null(name)) 
[17:38:48.796]                               next
[17:38:48.796]                             if (!grepl(pattern, name)) 
[17:38:48.796]                               next
[17:38:48.796]                             invokeRestart(restart)
[17:38:48.796]                             muffled <- TRUE
[17:38:48.796]                             break
[17:38:48.796]                           }
[17:38:48.796]                         }
[17:38:48.796]                       }
[17:38:48.796]                       invisible(muffled)
[17:38:48.796]                     }
[17:38:48.796]                     muffleCondition(cond, pattern = "^muffle")
[17:38:48.796]                   }
[17:38:48.796]                 }
[17:38:48.796]             }
[17:38:48.796]         }))
[17:38:48.796]     }, error = function(ex) {
[17:38:48.796]         base::structure(base::list(value = NULL, visible = NULL, 
[17:38:48.796]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:38:48.796]                 ...future.rng), started = ...future.startTime, 
[17:38:48.796]             finished = Sys.time(), session_uuid = NA_character_, 
[17:38:48.796]             version = "1.8"), class = "FutureResult")
[17:38:48.796]     }, finally = {
[17:38:48.796]         if (!identical(...future.workdir, getwd())) 
[17:38:48.796]             setwd(...future.workdir)
[17:38:48.796]         {
[17:38:48.796]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:38:48.796]                 ...future.oldOptions$nwarnings <- NULL
[17:38:48.796]             }
[17:38:48.796]             base::options(...future.oldOptions)
[17:38:48.796]             if (.Platform$OS.type == "windows") {
[17:38:48.796]                 old_names <- names(...future.oldEnvVars)
[17:38:48.796]                 envs <- base::Sys.getenv()
[17:38:48.796]                 names <- names(envs)
[17:38:48.796]                 common <- intersect(names, old_names)
[17:38:48.796]                 added <- setdiff(names, old_names)
[17:38:48.796]                 removed <- setdiff(old_names, names)
[17:38:48.796]                 changed <- common[...future.oldEnvVars[common] != 
[17:38:48.796]                   envs[common]]
[17:38:48.796]                 NAMES <- toupper(changed)
[17:38:48.796]                 args <- list()
[17:38:48.796]                 for (kk in seq_along(NAMES)) {
[17:38:48.796]                   name <- changed[[kk]]
[17:38:48.796]                   NAME <- NAMES[[kk]]
[17:38:48.796]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.796]                     next
[17:38:48.796]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.796]                 }
[17:38:48.796]                 NAMES <- toupper(added)
[17:38:48.796]                 for (kk in seq_along(NAMES)) {
[17:38:48.796]                   name <- added[[kk]]
[17:38:48.796]                   NAME <- NAMES[[kk]]
[17:38:48.796]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.796]                     next
[17:38:48.796]                   args[[name]] <- ""
[17:38:48.796]                 }
[17:38:48.796]                 NAMES <- toupper(removed)
[17:38:48.796]                 for (kk in seq_along(NAMES)) {
[17:38:48.796]                   name <- removed[[kk]]
[17:38:48.796]                   NAME <- NAMES[[kk]]
[17:38:48.796]                   if (name != NAME && is.element(NAME, old_names)) 
[17:38:48.796]                     next
[17:38:48.796]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:38:48.796]                 }
[17:38:48.796]                 if (length(args) > 0) 
[17:38:48.796]                   base::do.call(base::Sys.setenv, args = args)
[17:38:48.796]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:38:48.796]             }
[17:38:48.796]             else {
[17:38:48.796]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:38:48.796]             }
[17:38:48.796]             {
[17:38:48.796]                 if (base::length(...future.futureOptionsAdded) > 
[17:38:48.796]                   0L) {
[17:38:48.796]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:38:48.796]                   base::names(opts) <- ...future.futureOptionsAdded
[17:38:48.796]                   base::options(opts)
[17:38:48.796]                 }
[17:38:48.796]                 {
[17:38:48.796]                   {
[17:38:48.796]                     base::options(mc.cores = ...future.mc.cores.old)
[17:38:48.796]                     NULL
[17:38:48.796]                   }
[17:38:48.796]                   options(future.plan = NULL)
[17:38:48.796]                   if (is.na(NA_character_)) 
[17:38:48.796]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:38:48.796]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:38:48.796]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:38:48.796]                     .init = FALSE)
[17:38:48.796]                 }
[17:38:48.796]             }
[17:38:48.796]         }
[17:38:48.796]     })
[17:38:48.796]     if (TRUE) {
[17:38:48.796]         base::sink(type = "output", split = FALSE)
[17:38:48.796]         if (TRUE) {
[17:38:48.796]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:38:48.796]         }
[17:38:48.796]         else {
[17:38:48.796]             ...future.result["stdout"] <- base::list(NULL)
[17:38:48.796]         }
[17:38:48.796]         base::close(...future.stdout)
[17:38:48.796]         ...future.stdout <- NULL
[17:38:48.796]     }
[17:38:48.796]     ...future.result$conditions <- ...future.conditions
[17:38:48.796]     ...future.result$finished <- base::Sys.time()
[17:38:48.796]     ...future.result
[17:38:48.796] }
[17:38:48.799] MultisessionFuture started
[17:38:48.800] - Launch lazy future ... done
[17:38:48.800] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[17:38:51.805] receiveMessageFromWorker() for ClusterFuture ...
[17:38:51.805] - Validating connection of MultisessionFuture
[17:38:51.806] - received message: FutureResult
[17:38:51.806] - Received FutureResult
[17:38:51.806] - Erased future from FutureRegistry
[17:38:51.806] result() for ClusterFuture ...
[17:38:51.806] - result already collected: FutureResult
[17:38:51.806] result() for ClusterFuture ... done
[17:38:51.806] signalConditions() ...
[17:38:51.807]  - include = ‘immediateCondition’
[17:38:51.807]  - exclude = 
[17:38:51.807]  - resignal = FALSE
[17:38:51.807]  - Number of conditions: 1
[17:38:51.807] signalConditions() ... done
[17:38:51.807] receiveMessageFromWorker() for ClusterFuture ... done
[17:38:51.807] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 1d8e8d79-72a0-6373-cba4-09d5610177f7
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[17:38:51.809] plan(): Setting new future strategy stack:
[17:38:51.809] List of future strategies:
[17:38:51.809] 1. FutureStrategy:
[17:38:51.809]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:38:51.809]    - tweaked: FALSE
[17:38:51.809]    - call: future::plan(oplan)
[17:38:51.810] plan(): nbrOfWorkers() = 1
> 
