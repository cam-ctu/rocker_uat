
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:30:27.050] plan(): Setting new future strategy stack:
[09:30:27.051] List of future strategies:
[09:30:27.051] 1. sequential:
[09:30:27.051]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.051]    - tweaked: FALSE
[09:30:27.051]    - call: future::plan("sequential")
[09:30:27.061] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[09:30:27.074] getGlobalsAndPackages() ...
[09:30:27.074] Searching for globals...
[09:30:27.080] - globals found: [2] ‘{’, ‘stop’
[09:30:27.080] Searching for globals ... DONE
[09:30:27.080] Resolving globals: FALSE
[09:30:27.081] 
[09:30:27.081] 
[09:30:27.081] getGlobalsAndPackages() ... DONE
[09:30:27.081] run() for ‘Future’ ...
[09:30:27.081] - state: ‘created’
[09:30:27.082] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:27.082] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:27.082] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:27.082]   - Field: ‘label’
[09:30:27.082]   - Field: ‘local’
[09:30:27.082]   - Field: ‘owner’
[09:30:27.082]   - Field: ‘envir’
[09:30:27.083]   - Field: ‘packages’
[09:30:27.083]   - Field: ‘gc’
[09:30:27.083]   - Field: ‘conditions’
[09:30:27.083]   - Field: ‘expr’
[09:30:27.083]   - Field: ‘uuid’
[09:30:27.083]   - Field: ‘seed’
[09:30:27.083]   - Field: ‘version’
[09:30:27.083]   - Field: ‘result’
[09:30:27.083]   - Field: ‘asynchronous’
[09:30:27.083]   - Field: ‘calls’
[09:30:27.083]   - Field: ‘globals’
[09:30:27.083]   - Field: ‘stdout’
[09:30:27.084]   - Field: ‘earlySignal’
[09:30:27.084]   - Field: ‘lazy’
[09:30:27.084]   - Field: ‘state’
[09:30:27.084] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:27.084] - Launch lazy future ...
[09:30:27.085] Packages needed by the future expression (n = 0): <none>
[09:30:27.085] Packages needed by future strategies (n = 0): <none>
[09:30:27.085] {
[09:30:27.085]     {
[09:30:27.085]         {
[09:30:27.085]             ...future.startTime <- base::Sys.time()
[09:30:27.085]             {
[09:30:27.085]                 {
[09:30:27.085]                   {
[09:30:27.085]                     base::local({
[09:30:27.085]                       has_future <- base::requireNamespace("future", 
[09:30:27.085]                         quietly = TRUE)
[09:30:27.085]                       if (has_future) {
[09:30:27.085]                         ns <- base::getNamespace("future")
[09:30:27.085]                         version <- ns[[".package"]][["version"]]
[09:30:27.085]                         if (is.null(version)) 
[09:30:27.085]                           version <- utils::packageVersion("future")
[09:30:27.085]                       }
[09:30:27.085]                       else {
[09:30:27.085]                         version <- NULL
[09:30:27.085]                       }
[09:30:27.085]                       if (!has_future || version < "1.8.0") {
[09:30:27.085]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:27.085]                           "", base::R.version$version.string), 
[09:30:27.085]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:27.085]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:27.085]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:27.085]                             "release", "version")], collapse = " "), 
[09:30:27.085]                           hostname = base::Sys.info()[["nodename"]])
[09:30:27.085]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:27.085]                           info)
[09:30:27.085]                         info <- base::paste(info, collapse = "; ")
[09:30:27.085]                         if (!has_future) {
[09:30:27.085]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:27.085]                             info)
[09:30:27.085]                         }
[09:30:27.085]                         else {
[09:30:27.085]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:27.085]                             info, version)
[09:30:27.085]                         }
[09:30:27.085]                         base::stop(msg)
[09:30:27.085]                       }
[09:30:27.085]                     })
[09:30:27.085]                   }
[09:30:27.085]                   ...future.strategy.old <- future::plan("list")
[09:30:27.085]                   options(future.plan = NULL)
[09:30:27.085]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.085]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:27.085]                 }
[09:30:27.085]                 ...future.workdir <- getwd()
[09:30:27.085]             }
[09:30:27.085]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:27.085]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:27.085]         }
[09:30:27.085]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:27.085]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:27.085]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:27.085]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:27.085]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:27.085]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:27.085]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:27.085]             base::names(...future.oldOptions))
[09:30:27.085]     }
[09:30:27.085]     if (FALSE) {
[09:30:27.085]     }
[09:30:27.085]     else {
[09:30:27.085]         if (TRUE) {
[09:30:27.085]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:27.085]                 open = "w")
[09:30:27.085]         }
[09:30:27.085]         else {
[09:30:27.085]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:27.085]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:27.085]         }
[09:30:27.085]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:27.085]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:27.085]             base::sink(type = "output", split = FALSE)
[09:30:27.085]             base::close(...future.stdout)
[09:30:27.085]         }, add = TRUE)
[09:30:27.085]     }
[09:30:27.085]     ...future.frame <- base::sys.nframe()
[09:30:27.085]     ...future.conditions <- base::list()
[09:30:27.085]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:27.085]     if (FALSE) {
[09:30:27.085]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:27.085]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:27.085]     }
[09:30:27.085]     ...future.result <- base::tryCatch({
[09:30:27.085]         base::withCallingHandlers({
[09:30:27.085]             ...future.value <- base::withVisible(base::local({
[09:30:27.085]                 42L
[09:30:27.085]                 stop("Woops")
[09:30:27.085]             }))
[09:30:27.085]             future::FutureResult(value = ...future.value$value, 
[09:30:27.085]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.085]                   ...future.rng), globalenv = if (FALSE) 
[09:30:27.085]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:27.085]                     ...future.globalenv.names))
[09:30:27.085]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:27.085]         }, condition = base::local({
[09:30:27.085]             c <- base::c
[09:30:27.085]             inherits <- base::inherits
[09:30:27.085]             invokeRestart <- base::invokeRestart
[09:30:27.085]             length <- base::length
[09:30:27.085]             list <- base::list
[09:30:27.085]             seq.int <- base::seq.int
[09:30:27.085]             signalCondition <- base::signalCondition
[09:30:27.085]             sys.calls <- base::sys.calls
[09:30:27.085]             `[[` <- base::`[[`
[09:30:27.085]             `+` <- base::`+`
[09:30:27.085]             `<<-` <- base::`<<-`
[09:30:27.085]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:27.085]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:27.085]                   3L)]
[09:30:27.085]             }
[09:30:27.085]             function(cond) {
[09:30:27.085]                 is_error <- inherits(cond, "error")
[09:30:27.085]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:27.085]                   NULL)
[09:30:27.085]                 if (is_error) {
[09:30:27.085]                   sessionInformation <- function() {
[09:30:27.085]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:27.085]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:27.085]                       search = base::search(), system = base::Sys.info())
[09:30:27.085]                   }
[09:30:27.085]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.085]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:27.085]                     cond$call), session = sessionInformation(), 
[09:30:27.085]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:27.085]                   signalCondition(cond)
[09:30:27.085]                 }
[09:30:27.085]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:27.085]                 "immediateCondition"))) {
[09:30:27.085]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:27.085]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.085]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:27.085]                   if (TRUE && !signal) {
[09:30:27.085]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.085]                     {
[09:30:27.085]                       inherits <- base::inherits
[09:30:27.085]                       invokeRestart <- base::invokeRestart
[09:30:27.085]                       is.null <- base::is.null
[09:30:27.085]                       muffled <- FALSE
[09:30:27.085]                       if (inherits(cond, "message")) {
[09:30:27.085]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.085]                         if (muffled) 
[09:30:27.085]                           invokeRestart("muffleMessage")
[09:30:27.085]                       }
[09:30:27.085]                       else if (inherits(cond, "warning")) {
[09:30:27.085]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.085]                         if (muffled) 
[09:30:27.085]                           invokeRestart("muffleWarning")
[09:30:27.085]                       }
[09:30:27.085]                       else if (inherits(cond, "condition")) {
[09:30:27.085]                         if (!is.null(pattern)) {
[09:30:27.085]                           computeRestarts <- base::computeRestarts
[09:30:27.085]                           grepl <- base::grepl
[09:30:27.085]                           restarts <- computeRestarts(cond)
[09:30:27.085]                           for (restart in restarts) {
[09:30:27.085]                             name <- restart$name
[09:30:27.085]                             if (is.null(name)) 
[09:30:27.085]                               next
[09:30:27.085]                             if (!grepl(pattern, name)) 
[09:30:27.085]                               next
[09:30:27.085]                             invokeRestart(restart)
[09:30:27.085]                             muffled <- TRUE
[09:30:27.085]                             break
[09:30:27.085]                           }
[09:30:27.085]                         }
[09:30:27.085]                       }
[09:30:27.085]                       invisible(muffled)
[09:30:27.085]                     }
[09:30:27.085]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.085]                   }
[09:30:27.085]                 }
[09:30:27.085]                 else {
[09:30:27.085]                   if (TRUE) {
[09:30:27.085]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.085]                     {
[09:30:27.085]                       inherits <- base::inherits
[09:30:27.085]                       invokeRestart <- base::invokeRestart
[09:30:27.085]                       is.null <- base::is.null
[09:30:27.085]                       muffled <- FALSE
[09:30:27.085]                       if (inherits(cond, "message")) {
[09:30:27.085]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.085]                         if (muffled) 
[09:30:27.085]                           invokeRestart("muffleMessage")
[09:30:27.085]                       }
[09:30:27.085]                       else if (inherits(cond, "warning")) {
[09:30:27.085]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.085]                         if (muffled) 
[09:30:27.085]                           invokeRestart("muffleWarning")
[09:30:27.085]                       }
[09:30:27.085]                       else if (inherits(cond, "condition")) {
[09:30:27.085]                         if (!is.null(pattern)) {
[09:30:27.085]                           computeRestarts <- base::computeRestarts
[09:30:27.085]                           grepl <- base::grepl
[09:30:27.085]                           restarts <- computeRestarts(cond)
[09:30:27.085]                           for (restart in restarts) {
[09:30:27.085]                             name <- restart$name
[09:30:27.085]                             if (is.null(name)) 
[09:30:27.085]                               next
[09:30:27.085]                             if (!grepl(pattern, name)) 
[09:30:27.085]                               next
[09:30:27.085]                             invokeRestart(restart)
[09:30:27.085]                             muffled <- TRUE
[09:30:27.085]                             break
[09:30:27.085]                           }
[09:30:27.085]                         }
[09:30:27.085]                       }
[09:30:27.085]                       invisible(muffled)
[09:30:27.085]                     }
[09:30:27.085]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.085]                   }
[09:30:27.085]                 }
[09:30:27.085]             }
[09:30:27.085]         }))
[09:30:27.085]     }, error = function(ex) {
[09:30:27.085]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:27.085]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.085]                 ...future.rng), started = ...future.startTime, 
[09:30:27.085]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:27.085]             version = "1.8"), class = "FutureResult")
[09:30:27.085]     }, finally = {
[09:30:27.085]         if (!identical(...future.workdir, getwd())) 
[09:30:27.085]             setwd(...future.workdir)
[09:30:27.085]         {
[09:30:27.085]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:27.085]                 ...future.oldOptions$nwarnings <- NULL
[09:30:27.085]             }
[09:30:27.085]             base::options(...future.oldOptions)
[09:30:27.085]             if (.Platform$OS.type == "windows") {
[09:30:27.085]                 old_names <- names(...future.oldEnvVars)
[09:30:27.085]                 envs <- base::Sys.getenv()
[09:30:27.085]                 names <- names(envs)
[09:30:27.085]                 common <- intersect(names, old_names)
[09:30:27.085]                 added <- setdiff(names, old_names)
[09:30:27.085]                 removed <- setdiff(old_names, names)
[09:30:27.085]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:27.085]                   envs[common]]
[09:30:27.085]                 NAMES <- toupper(changed)
[09:30:27.085]                 args <- list()
[09:30:27.085]                 for (kk in seq_along(NAMES)) {
[09:30:27.085]                   name <- changed[[kk]]
[09:30:27.085]                   NAME <- NAMES[[kk]]
[09:30:27.085]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.085]                     next
[09:30:27.085]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.085]                 }
[09:30:27.085]                 NAMES <- toupper(added)
[09:30:27.085]                 for (kk in seq_along(NAMES)) {
[09:30:27.085]                   name <- added[[kk]]
[09:30:27.085]                   NAME <- NAMES[[kk]]
[09:30:27.085]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.085]                     next
[09:30:27.085]                   args[[name]] <- ""
[09:30:27.085]                 }
[09:30:27.085]                 NAMES <- toupper(removed)
[09:30:27.085]                 for (kk in seq_along(NAMES)) {
[09:30:27.085]                   name <- removed[[kk]]
[09:30:27.085]                   NAME <- NAMES[[kk]]
[09:30:27.085]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.085]                     next
[09:30:27.085]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.085]                 }
[09:30:27.085]                 if (length(args) > 0) 
[09:30:27.085]                   base::do.call(base::Sys.setenv, args = args)
[09:30:27.085]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:27.085]             }
[09:30:27.085]             else {
[09:30:27.085]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:27.085]             }
[09:30:27.085]             {
[09:30:27.085]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:27.085]                   0L) {
[09:30:27.085]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:27.085]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:27.085]                   base::options(opts)
[09:30:27.085]                 }
[09:30:27.085]                 {
[09:30:27.085]                   {
[09:30:27.085]                     NULL
[09:30:27.085]                     RNGkind("Mersenne-Twister")
[09:30:27.085]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:27.085]                       inherits = FALSE)
[09:30:27.085]                   }
[09:30:27.085]                   options(future.plan = NULL)
[09:30:27.085]                   if (is.na(NA_character_)) 
[09:30:27.085]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.085]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:27.085]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:27.085]                     .init = FALSE)
[09:30:27.085]                 }
[09:30:27.085]             }
[09:30:27.085]         }
[09:30:27.085]     })
[09:30:27.085]     if (TRUE) {
[09:30:27.085]         base::sink(type = "output", split = FALSE)
[09:30:27.085]         if (TRUE) {
[09:30:27.085]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:27.085]         }
[09:30:27.085]         else {
[09:30:27.085]             ...future.result["stdout"] <- base::list(NULL)
[09:30:27.085]         }
[09:30:27.085]         base::close(...future.stdout)
[09:30:27.085]         ...future.stdout <- NULL
[09:30:27.085]     }
[09:30:27.085]     ...future.result$conditions <- ...future.conditions
[09:30:27.085]     ...future.result$finished <- base::Sys.time()
[09:30:27.085]     ...future.result
[09:30:27.085] }
[09:30:27.087] plan(): Setting new future strategy stack:
[09:30:27.087] List of future strategies:
[09:30:27.087] 1. sequential:
[09:30:27.087]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.087]    - tweaked: FALSE
[09:30:27.087]    - call: NULL
[09:30:27.088] plan(): nbrOfWorkers() = 1
[09:30:27.089] plan(): Setting new future strategy stack:
[09:30:27.089] List of future strategies:
[09:30:27.089] 1. sequential:
[09:30:27.089]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.089]    - tweaked: FALSE
[09:30:27.089]    - call: future::plan("sequential")
[09:30:27.089] plan(): nbrOfWorkers() = 1
[09:30:27.089] SequentialFuture started (and completed)
[09:30:27.090] signalConditions() ...
[09:30:27.090]  - include = ‘immediateCondition’
[09:30:27.090]  - exclude = 
[09:30:27.090]  - resignal = FALSE
[09:30:27.090]  - Number of conditions: 1
[09:30:27.090] signalConditions() ... done
[09:30:27.090] - Launch lazy future ... done
[09:30:27.090] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[09:30:27.091] signalConditions() ...
[09:30:27.091]  - include = ‘immediateCondition’
[09:30:27.091]  - exclude = 
[09:30:27.091]  - resignal = FALSE
[09:30:27.091]  - Number of conditions: 1
[09:30:27.091] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[09:30:27.092] resolved() for ‘SequentialFuture’ ...
[09:30:27.093] - state: ‘finished’
[09:30:27.093] - run: TRUE
[09:30:27.093] - result: ‘FutureResult’
[09:30:27.093] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[09:30:27.094] getGlobalsAndPackages() ...
[09:30:27.094] Searching for globals...
[09:30:27.094] - globals found: [2] ‘{’, ‘stop’
[09:30:27.095] Searching for globals ... DONE
[09:30:27.095] Resolving globals: FALSE
[09:30:27.095] 
[09:30:27.095] 
[09:30:27.095] getGlobalsAndPackages() ... DONE
[09:30:27.095] run() for ‘Future’ ...
[09:30:27.095] - state: ‘created’
[09:30:27.096] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:27.096] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:27.096] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:27.096]   - Field: ‘label’
[09:30:27.096]   - Field: ‘local’
[09:30:27.096]   - Field: ‘owner’
[09:30:27.096]   - Field: ‘envir’
[09:30:27.096]   - Field: ‘packages’
[09:30:27.097]   - Field: ‘gc’
[09:30:27.097]   - Field: ‘conditions’
[09:30:27.097]   - Field: ‘expr’
[09:30:27.097]   - Field: ‘uuid’
[09:30:27.097]   - Field: ‘seed’
[09:30:27.097]   - Field: ‘version’
[09:30:27.097]   - Field: ‘result’
[09:30:27.097]   - Field: ‘asynchronous’
[09:30:27.097]   - Field: ‘calls’
[09:30:27.097]   - Field: ‘globals’
[09:30:27.097]   - Field: ‘stdout’
[09:30:27.097]   - Field: ‘earlySignal’
[09:30:27.098]   - Field: ‘lazy’
[09:30:27.098]   - Field: ‘state’
[09:30:27.098] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:27.098] - Launch lazy future ...
[09:30:27.098] Packages needed by the future expression (n = 0): <none>
[09:30:27.098] Packages needed by future strategies (n = 0): <none>
[09:30:27.098] {
[09:30:27.098]     {
[09:30:27.098]         {
[09:30:27.098]             ...future.startTime <- base::Sys.time()
[09:30:27.098]             {
[09:30:27.098]                 {
[09:30:27.098]                   {
[09:30:27.098]                     base::local({
[09:30:27.098]                       has_future <- base::requireNamespace("future", 
[09:30:27.098]                         quietly = TRUE)
[09:30:27.098]                       if (has_future) {
[09:30:27.098]                         ns <- base::getNamespace("future")
[09:30:27.098]                         version <- ns[[".package"]][["version"]]
[09:30:27.098]                         if (is.null(version)) 
[09:30:27.098]                           version <- utils::packageVersion("future")
[09:30:27.098]                       }
[09:30:27.098]                       else {
[09:30:27.098]                         version <- NULL
[09:30:27.098]                       }
[09:30:27.098]                       if (!has_future || version < "1.8.0") {
[09:30:27.098]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:27.098]                           "", base::R.version$version.string), 
[09:30:27.098]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:27.098]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:27.098]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:27.098]                             "release", "version")], collapse = " "), 
[09:30:27.098]                           hostname = base::Sys.info()[["nodename"]])
[09:30:27.098]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:27.098]                           info)
[09:30:27.098]                         info <- base::paste(info, collapse = "; ")
[09:30:27.098]                         if (!has_future) {
[09:30:27.098]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:27.098]                             info)
[09:30:27.098]                         }
[09:30:27.098]                         else {
[09:30:27.098]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:27.098]                             info, version)
[09:30:27.098]                         }
[09:30:27.098]                         base::stop(msg)
[09:30:27.098]                       }
[09:30:27.098]                     })
[09:30:27.098]                   }
[09:30:27.098]                   ...future.strategy.old <- future::plan("list")
[09:30:27.098]                   options(future.plan = NULL)
[09:30:27.098]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.098]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:27.098]                 }
[09:30:27.098]                 ...future.workdir <- getwd()
[09:30:27.098]             }
[09:30:27.098]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:27.098]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:27.098]         }
[09:30:27.098]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:27.098]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:27.098]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:27.098]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:27.098]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:27.098]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:27.098]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:27.098]             base::names(...future.oldOptions))
[09:30:27.098]     }
[09:30:27.098]     if (FALSE) {
[09:30:27.098]     }
[09:30:27.098]     else {
[09:30:27.098]         if (TRUE) {
[09:30:27.098]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:27.098]                 open = "w")
[09:30:27.098]         }
[09:30:27.098]         else {
[09:30:27.098]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:27.098]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:27.098]         }
[09:30:27.098]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:27.098]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:27.098]             base::sink(type = "output", split = FALSE)
[09:30:27.098]             base::close(...future.stdout)
[09:30:27.098]         }, add = TRUE)
[09:30:27.098]     }
[09:30:27.098]     ...future.frame <- base::sys.nframe()
[09:30:27.098]     ...future.conditions <- base::list()
[09:30:27.098]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:27.098]     if (FALSE) {
[09:30:27.098]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:27.098]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:27.098]     }
[09:30:27.098]     ...future.result <- base::tryCatch({
[09:30:27.098]         base::withCallingHandlers({
[09:30:27.098]             ...future.value <- base::withVisible(base::local({
[09:30:27.098]                 42L
[09:30:27.098]                 stop("Woops")
[09:30:27.098]             }))
[09:30:27.098]             future::FutureResult(value = ...future.value$value, 
[09:30:27.098]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.098]                   ...future.rng), globalenv = if (FALSE) 
[09:30:27.098]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:27.098]                     ...future.globalenv.names))
[09:30:27.098]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:27.098]         }, condition = base::local({
[09:30:27.098]             c <- base::c
[09:30:27.098]             inherits <- base::inherits
[09:30:27.098]             invokeRestart <- base::invokeRestart
[09:30:27.098]             length <- base::length
[09:30:27.098]             list <- base::list
[09:30:27.098]             seq.int <- base::seq.int
[09:30:27.098]             signalCondition <- base::signalCondition
[09:30:27.098]             sys.calls <- base::sys.calls
[09:30:27.098]             `[[` <- base::`[[`
[09:30:27.098]             `+` <- base::`+`
[09:30:27.098]             `<<-` <- base::`<<-`
[09:30:27.098]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:27.098]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:27.098]                   3L)]
[09:30:27.098]             }
[09:30:27.098]             function(cond) {
[09:30:27.098]                 is_error <- inherits(cond, "error")
[09:30:27.098]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:27.098]                   NULL)
[09:30:27.098]                 if (is_error) {
[09:30:27.098]                   sessionInformation <- function() {
[09:30:27.098]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:27.098]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:27.098]                       search = base::search(), system = base::Sys.info())
[09:30:27.098]                   }
[09:30:27.098]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.098]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:27.098]                     cond$call), session = sessionInformation(), 
[09:30:27.098]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:27.098]                   signalCondition(cond)
[09:30:27.098]                 }
[09:30:27.098]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:27.098]                 "immediateCondition"))) {
[09:30:27.098]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:27.098]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.098]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:27.098]                   if (TRUE && !signal) {
[09:30:27.098]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.098]                     {
[09:30:27.098]                       inherits <- base::inherits
[09:30:27.098]                       invokeRestart <- base::invokeRestart
[09:30:27.098]                       is.null <- base::is.null
[09:30:27.098]                       muffled <- FALSE
[09:30:27.098]                       if (inherits(cond, "message")) {
[09:30:27.098]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.098]                         if (muffled) 
[09:30:27.098]                           invokeRestart("muffleMessage")
[09:30:27.098]                       }
[09:30:27.098]                       else if (inherits(cond, "warning")) {
[09:30:27.098]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.098]                         if (muffled) 
[09:30:27.098]                           invokeRestart("muffleWarning")
[09:30:27.098]                       }
[09:30:27.098]                       else if (inherits(cond, "condition")) {
[09:30:27.098]                         if (!is.null(pattern)) {
[09:30:27.098]                           computeRestarts <- base::computeRestarts
[09:30:27.098]                           grepl <- base::grepl
[09:30:27.098]                           restarts <- computeRestarts(cond)
[09:30:27.098]                           for (restart in restarts) {
[09:30:27.098]                             name <- restart$name
[09:30:27.098]                             if (is.null(name)) 
[09:30:27.098]                               next
[09:30:27.098]                             if (!grepl(pattern, name)) 
[09:30:27.098]                               next
[09:30:27.098]                             invokeRestart(restart)
[09:30:27.098]                             muffled <- TRUE
[09:30:27.098]                             break
[09:30:27.098]                           }
[09:30:27.098]                         }
[09:30:27.098]                       }
[09:30:27.098]                       invisible(muffled)
[09:30:27.098]                     }
[09:30:27.098]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.098]                   }
[09:30:27.098]                 }
[09:30:27.098]                 else {
[09:30:27.098]                   if (TRUE) {
[09:30:27.098]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.098]                     {
[09:30:27.098]                       inherits <- base::inherits
[09:30:27.098]                       invokeRestart <- base::invokeRestart
[09:30:27.098]                       is.null <- base::is.null
[09:30:27.098]                       muffled <- FALSE
[09:30:27.098]                       if (inherits(cond, "message")) {
[09:30:27.098]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.098]                         if (muffled) 
[09:30:27.098]                           invokeRestart("muffleMessage")
[09:30:27.098]                       }
[09:30:27.098]                       else if (inherits(cond, "warning")) {
[09:30:27.098]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.098]                         if (muffled) 
[09:30:27.098]                           invokeRestart("muffleWarning")
[09:30:27.098]                       }
[09:30:27.098]                       else if (inherits(cond, "condition")) {
[09:30:27.098]                         if (!is.null(pattern)) {
[09:30:27.098]                           computeRestarts <- base::computeRestarts
[09:30:27.098]                           grepl <- base::grepl
[09:30:27.098]                           restarts <- computeRestarts(cond)
[09:30:27.098]                           for (restart in restarts) {
[09:30:27.098]                             name <- restart$name
[09:30:27.098]                             if (is.null(name)) 
[09:30:27.098]                               next
[09:30:27.098]                             if (!grepl(pattern, name)) 
[09:30:27.098]                               next
[09:30:27.098]                             invokeRestart(restart)
[09:30:27.098]                             muffled <- TRUE
[09:30:27.098]                             break
[09:30:27.098]                           }
[09:30:27.098]                         }
[09:30:27.098]                       }
[09:30:27.098]                       invisible(muffled)
[09:30:27.098]                     }
[09:30:27.098]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.098]                   }
[09:30:27.098]                 }
[09:30:27.098]             }
[09:30:27.098]         }))
[09:30:27.098]     }, error = function(ex) {
[09:30:27.098]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:27.098]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.098]                 ...future.rng), started = ...future.startTime, 
[09:30:27.098]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:27.098]             version = "1.8"), class = "FutureResult")
[09:30:27.098]     }, finally = {
[09:30:27.098]         if (!identical(...future.workdir, getwd())) 
[09:30:27.098]             setwd(...future.workdir)
[09:30:27.098]         {
[09:30:27.098]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:27.098]                 ...future.oldOptions$nwarnings <- NULL
[09:30:27.098]             }
[09:30:27.098]             base::options(...future.oldOptions)
[09:30:27.098]             if (.Platform$OS.type == "windows") {
[09:30:27.098]                 old_names <- names(...future.oldEnvVars)
[09:30:27.098]                 envs <- base::Sys.getenv()
[09:30:27.098]                 names <- names(envs)
[09:30:27.098]                 common <- intersect(names, old_names)
[09:30:27.098]                 added <- setdiff(names, old_names)
[09:30:27.098]                 removed <- setdiff(old_names, names)
[09:30:27.098]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:27.098]                   envs[common]]
[09:30:27.098]                 NAMES <- toupper(changed)
[09:30:27.098]                 args <- list()
[09:30:27.098]                 for (kk in seq_along(NAMES)) {
[09:30:27.098]                   name <- changed[[kk]]
[09:30:27.098]                   NAME <- NAMES[[kk]]
[09:30:27.098]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.098]                     next
[09:30:27.098]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.098]                 }
[09:30:27.098]                 NAMES <- toupper(added)
[09:30:27.098]                 for (kk in seq_along(NAMES)) {
[09:30:27.098]                   name <- added[[kk]]
[09:30:27.098]                   NAME <- NAMES[[kk]]
[09:30:27.098]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.098]                     next
[09:30:27.098]                   args[[name]] <- ""
[09:30:27.098]                 }
[09:30:27.098]                 NAMES <- toupper(removed)
[09:30:27.098]                 for (kk in seq_along(NAMES)) {
[09:30:27.098]                   name <- removed[[kk]]
[09:30:27.098]                   NAME <- NAMES[[kk]]
[09:30:27.098]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.098]                     next
[09:30:27.098]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.098]                 }
[09:30:27.098]                 if (length(args) > 0) 
[09:30:27.098]                   base::do.call(base::Sys.setenv, args = args)
[09:30:27.098]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:27.098]             }
[09:30:27.098]             else {
[09:30:27.098]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:27.098]             }
[09:30:27.098]             {
[09:30:27.098]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:27.098]                   0L) {
[09:30:27.098]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:27.098]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:27.098]                   base::options(opts)
[09:30:27.098]                 }
[09:30:27.098]                 {
[09:30:27.098]                   {
[09:30:27.098]                     NULL
[09:30:27.098]                     RNGkind("Mersenne-Twister")
[09:30:27.098]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:27.098]                       inherits = FALSE)
[09:30:27.098]                   }
[09:30:27.098]                   options(future.plan = NULL)
[09:30:27.098]                   if (is.na(NA_character_)) 
[09:30:27.098]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.098]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:27.098]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:27.098]                     .init = FALSE)
[09:30:27.098]                 }
[09:30:27.098]             }
[09:30:27.098]         }
[09:30:27.098]     })
[09:30:27.098]     if (TRUE) {
[09:30:27.098]         base::sink(type = "output", split = FALSE)
[09:30:27.098]         if (TRUE) {
[09:30:27.098]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:27.098]         }
[09:30:27.098]         else {
[09:30:27.098]             ...future.result["stdout"] <- base::list(NULL)
[09:30:27.098]         }
[09:30:27.098]         base::close(...future.stdout)
[09:30:27.098]         ...future.stdout <- NULL
[09:30:27.098]     }
[09:30:27.098]     ...future.result$conditions <- ...future.conditions
[09:30:27.098]     ...future.result$finished <- base::Sys.time()
[09:30:27.098]     ...future.result
[09:30:27.098] }
[09:30:27.100] plan(): Setting new future strategy stack:
[09:30:27.100] List of future strategies:
[09:30:27.100] 1. sequential:
[09:30:27.100]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.100]    - tweaked: FALSE
[09:30:27.100]    - call: NULL
[09:30:27.101] plan(): nbrOfWorkers() = 1
[09:30:27.101] plan(): Setting new future strategy stack:
[09:30:27.101] List of future strategies:
[09:30:27.101] 1. sequential:
[09:30:27.101]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.101]    - tweaked: FALSE
[09:30:27.101]    - call: future::plan("sequential")
[09:30:27.102] plan(): nbrOfWorkers() = 1
[09:30:27.102] SequentialFuture started (and completed)
[09:30:27.102] signalConditions() ...
[09:30:27.102]  - include = ‘immediateCondition’
[09:30:27.102]  - exclude = 
[09:30:27.102]  - resignal = FALSE
[09:30:27.103]  - Number of conditions: 1
[09:30:27.103] signalConditions() ... done
[09:30:27.103] - Launch lazy future ... done
[09:30:27.103] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[09:30:27.103] resolved() for ‘SequentialFuture’ ...
[09:30:27.103] - state: ‘finished’
[09:30:27.103] - run: TRUE
[09:30:27.103] - result: ‘FutureResult’
[09:30:27.103] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[09:30:27.104] getGlobalsAndPackages() ...
[09:30:27.104] Searching for globals...
[09:30:27.105] - globals found: [2] ‘{’, ‘stop’
[09:30:27.105] Searching for globals ... DONE
[09:30:27.105] Resolving globals: FALSE
[09:30:27.106] 
[09:30:27.106] 
[09:30:27.106] getGlobalsAndPackages() ... DONE
[09:30:27.106] run() for ‘Future’ ...
[09:30:27.106] - state: ‘created’
[09:30:27.106] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:27.107] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:27.107] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:27.107]   - Field: ‘label’
[09:30:27.107]   - Field: ‘local’
[09:30:27.107]   - Field: ‘owner’
[09:30:27.107]   - Field: ‘envir’
[09:30:27.107]   - Field: ‘packages’
[09:30:27.107]   - Field: ‘gc’
[09:30:27.107]   - Field: ‘conditions’
[09:30:27.107]   - Field: ‘expr’
[09:30:27.107]   - Field: ‘uuid’
[09:30:27.108]   - Field: ‘seed’
[09:30:27.108]   - Field: ‘version’
[09:30:27.108]   - Field: ‘result’
[09:30:27.108]   - Field: ‘asynchronous’
[09:30:27.108]   - Field: ‘calls’
[09:30:27.108]   - Field: ‘globals’
[09:30:27.108]   - Field: ‘stdout’
[09:30:27.110]   - Field: ‘earlySignal’
[09:30:27.110]   - Field: ‘lazy’
[09:30:27.110]   - Field: ‘state’
[09:30:27.111] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:27.111] - Launch lazy future ...
[09:30:27.111] Packages needed by the future expression (n = 0): <none>
[09:30:27.111] Packages needed by future strategies (n = 0): <none>
[09:30:27.111] {
[09:30:27.111]     {
[09:30:27.111]         {
[09:30:27.111]             ...future.startTime <- base::Sys.time()
[09:30:27.111]             {
[09:30:27.111]                 {
[09:30:27.111]                   {
[09:30:27.111]                     base::local({
[09:30:27.111]                       has_future <- base::requireNamespace("future", 
[09:30:27.111]                         quietly = TRUE)
[09:30:27.111]                       if (has_future) {
[09:30:27.111]                         ns <- base::getNamespace("future")
[09:30:27.111]                         version <- ns[[".package"]][["version"]]
[09:30:27.111]                         if (is.null(version)) 
[09:30:27.111]                           version <- utils::packageVersion("future")
[09:30:27.111]                       }
[09:30:27.111]                       else {
[09:30:27.111]                         version <- NULL
[09:30:27.111]                       }
[09:30:27.111]                       if (!has_future || version < "1.8.0") {
[09:30:27.111]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:27.111]                           "", base::R.version$version.string), 
[09:30:27.111]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:27.111]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:27.111]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:27.111]                             "release", "version")], collapse = " "), 
[09:30:27.111]                           hostname = base::Sys.info()[["nodename"]])
[09:30:27.111]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:27.111]                           info)
[09:30:27.111]                         info <- base::paste(info, collapse = "; ")
[09:30:27.111]                         if (!has_future) {
[09:30:27.111]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:27.111]                             info)
[09:30:27.111]                         }
[09:30:27.111]                         else {
[09:30:27.111]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:27.111]                             info, version)
[09:30:27.111]                         }
[09:30:27.111]                         base::stop(msg)
[09:30:27.111]                       }
[09:30:27.111]                     })
[09:30:27.111]                   }
[09:30:27.111]                   ...future.strategy.old <- future::plan("list")
[09:30:27.111]                   options(future.plan = NULL)
[09:30:27.111]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.111]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:27.111]                 }
[09:30:27.111]                 ...future.workdir <- getwd()
[09:30:27.111]             }
[09:30:27.111]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:27.111]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:27.111]         }
[09:30:27.111]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:27.111]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:27.111]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:27.111]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:27.111]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:27.111]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:27.111]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:27.111]             base::names(...future.oldOptions))
[09:30:27.111]     }
[09:30:27.111]     if (FALSE) {
[09:30:27.111]     }
[09:30:27.111]     else {
[09:30:27.111]         if (TRUE) {
[09:30:27.111]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:27.111]                 open = "w")
[09:30:27.111]         }
[09:30:27.111]         else {
[09:30:27.111]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:27.111]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:27.111]         }
[09:30:27.111]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:27.111]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:27.111]             base::sink(type = "output", split = FALSE)
[09:30:27.111]             base::close(...future.stdout)
[09:30:27.111]         }, add = TRUE)
[09:30:27.111]     }
[09:30:27.111]     ...future.frame <- base::sys.nframe()
[09:30:27.111]     ...future.conditions <- base::list()
[09:30:27.111]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:27.111]     if (FALSE) {
[09:30:27.111]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:27.111]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:27.111]     }
[09:30:27.111]     ...future.result <- base::tryCatch({
[09:30:27.111]         base::withCallingHandlers({
[09:30:27.111]             ...future.value <- base::withVisible(base::local({
[09:30:27.111]                 42L
[09:30:27.111]                 stop("Woops")
[09:30:27.111]             }))
[09:30:27.111]             future::FutureResult(value = ...future.value$value, 
[09:30:27.111]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.111]                   ...future.rng), globalenv = if (FALSE) 
[09:30:27.111]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:27.111]                     ...future.globalenv.names))
[09:30:27.111]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:27.111]         }, condition = base::local({
[09:30:27.111]             c <- base::c
[09:30:27.111]             inherits <- base::inherits
[09:30:27.111]             invokeRestart <- base::invokeRestart
[09:30:27.111]             length <- base::length
[09:30:27.111]             list <- base::list
[09:30:27.111]             seq.int <- base::seq.int
[09:30:27.111]             signalCondition <- base::signalCondition
[09:30:27.111]             sys.calls <- base::sys.calls
[09:30:27.111]             `[[` <- base::`[[`
[09:30:27.111]             `+` <- base::`+`
[09:30:27.111]             `<<-` <- base::`<<-`
[09:30:27.111]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:27.111]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:27.111]                   3L)]
[09:30:27.111]             }
[09:30:27.111]             function(cond) {
[09:30:27.111]                 is_error <- inherits(cond, "error")
[09:30:27.111]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:27.111]                   NULL)
[09:30:27.111]                 if (is_error) {
[09:30:27.111]                   sessionInformation <- function() {
[09:30:27.111]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:27.111]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:27.111]                       search = base::search(), system = base::Sys.info())
[09:30:27.111]                   }
[09:30:27.111]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.111]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:27.111]                     cond$call), session = sessionInformation(), 
[09:30:27.111]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:27.111]                   signalCondition(cond)
[09:30:27.111]                 }
[09:30:27.111]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:27.111]                 "immediateCondition"))) {
[09:30:27.111]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:27.111]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.111]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:27.111]                   if (TRUE && !signal) {
[09:30:27.111]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.111]                     {
[09:30:27.111]                       inherits <- base::inherits
[09:30:27.111]                       invokeRestart <- base::invokeRestart
[09:30:27.111]                       is.null <- base::is.null
[09:30:27.111]                       muffled <- FALSE
[09:30:27.111]                       if (inherits(cond, "message")) {
[09:30:27.111]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.111]                         if (muffled) 
[09:30:27.111]                           invokeRestart("muffleMessage")
[09:30:27.111]                       }
[09:30:27.111]                       else if (inherits(cond, "warning")) {
[09:30:27.111]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.111]                         if (muffled) 
[09:30:27.111]                           invokeRestart("muffleWarning")
[09:30:27.111]                       }
[09:30:27.111]                       else if (inherits(cond, "condition")) {
[09:30:27.111]                         if (!is.null(pattern)) {
[09:30:27.111]                           computeRestarts <- base::computeRestarts
[09:30:27.111]                           grepl <- base::grepl
[09:30:27.111]                           restarts <- computeRestarts(cond)
[09:30:27.111]                           for (restart in restarts) {
[09:30:27.111]                             name <- restart$name
[09:30:27.111]                             if (is.null(name)) 
[09:30:27.111]                               next
[09:30:27.111]                             if (!grepl(pattern, name)) 
[09:30:27.111]                               next
[09:30:27.111]                             invokeRestart(restart)
[09:30:27.111]                             muffled <- TRUE
[09:30:27.111]                             break
[09:30:27.111]                           }
[09:30:27.111]                         }
[09:30:27.111]                       }
[09:30:27.111]                       invisible(muffled)
[09:30:27.111]                     }
[09:30:27.111]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.111]                   }
[09:30:27.111]                 }
[09:30:27.111]                 else {
[09:30:27.111]                   if (TRUE) {
[09:30:27.111]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.111]                     {
[09:30:27.111]                       inherits <- base::inherits
[09:30:27.111]                       invokeRestart <- base::invokeRestart
[09:30:27.111]                       is.null <- base::is.null
[09:30:27.111]                       muffled <- FALSE
[09:30:27.111]                       if (inherits(cond, "message")) {
[09:30:27.111]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.111]                         if (muffled) 
[09:30:27.111]                           invokeRestart("muffleMessage")
[09:30:27.111]                       }
[09:30:27.111]                       else if (inherits(cond, "warning")) {
[09:30:27.111]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.111]                         if (muffled) 
[09:30:27.111]                           invokeRestart("muffleWarning")
[09:30:27.111]                       }
[09:30:27.111]                       else if (inherits(cond, "condition")) {
[09:30:27.111]                         if (!is.null(pattern)) {
[09:30:27.111]                           computeRestarts <- base::computeRestarts
[09:30:27.111]                           grepl <- base::grepl
[09:30:27.111]                           restarts <- computeRestarts(cond)
[09:30:27.111]                           for (restart in restarts) {
[09:30:27.111]                             name <- restart$name
[09:30:27.111]                             if (is.null(name)) 
[09:30:27.111]                               next
[09:30:27.111]                             if (!grepl(pattern, name)) 
[09:30:27.111]                               next
[09:30:27.111]                             invokeRestart(restart)
[09:30:27.111]                             muffled <- TRUE
[09:30:27.111]                             break
[09:30:27.111]                           }
[09:30:27.111]                         }
[09:30:27.111]                       }
[09:30:27.111]                       invisible(muffled)
[09:30:27.111]                     }
[09:30:27.111]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.111]                   }
[09:30:27.111]                 }
[09:30:27.111]             }
[09:30:27.111]         }))
[09:30:27.111]     }, error = function(ex) {
[09:30:27.111]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:27.111]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.111]                 ...future.rng), started = ...future.startTime, 
[09:30:27.111]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:27.111]             version = "1.8"), class = "FutureResult")
[09:30:27.111]     }, finally = {
[09:30:27.111]         if (!identical(...future.workdir, getwd())) 
[09:30:27.111]             setwd(...future.workdir)
[09:30:27.111]         {
[09:30:27.111]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:27.111]                 ...future.oldOptions$nwarnings <- NULL
[09:30:27.111]             }
[09:30:27.111]             base::options(...future.oldOptions)
[09:30:27.111]             if (.Platform$OS.type == "windows") {
[09:30:27.111]                 old_names <- names(...future.oldEnvVars)
[09:30:27.111]                 envs <- base::Sys.getenv()
[09:30:27.111]                 names <- names(envs)
[09:30:27.111]                 common <- intersect(names, old_names)
[09:30:27.111]                 added <- setdiff(names, old_names)
[09:30:27.111]                 removed <- setdiff(old_names, names)
[09:30:27.111]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:27.111]                   envs[common]]
[09:30:27.111]                 NAMES <- toupper(changed)
[09:30:27.111]                 args <- list()
[09:30:27.111]                 for (kk in seq_along(NAMES)) {
[09:30:27.111]                   name <- changed[[kk]]
[09:30:27.111]                   NAME <- NAMES[[kk]]
[09:30:27.111]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.111]                     next
[09:30:27.111]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.111]                 }
[09:30:27.111]                 NAMES <- toupper(added)
[09:30:27.111]                 for (kk in seq_along(NAMES)) {
[09:30:27.111]                   name <- added[[kk]]
[09:30:27.111]                   NAME <- NAMES[[kk]]
[09:30:27.111]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.111]                     next
[09:30:27.111]                   args[[name]] <- ""
[09:30:27.111]                 }
[09:30:27.111]                 NAMES <- toupper(removed)
[09:30:27.111]                 for (kk in seq_along(NAMES)) {
[09:30:27.111]                   name <- removed[[kk]]
[09:30:27.111]                   NAME <- NAMES[[kk]]
[09:30:27.111]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.111]                     next
[09:30:27.111]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.111]                 }
[09:30:27.111]                 if (length(args) > 0) 
[09:30:27.111]                   base::do.call(base::Sys.setenv, args = args)
[09:30:27.111]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:27.111]             }
[09:30:27.111]             else {
[09:30:27.111]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:27.111]             }
[09:30:27.111]             {
[09:30:27.111]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:27.111]                   0L) {
[09:30:27.111]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:27.111]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:27.111]                   base::options(opts)
[09:30:27.111]                 }
[09:30:27.111]                 {
[09:30:27.111]                   {
[09:30:27.111]                     NULL
[09:30:27.111]                     RNGkind("Mersenne-Twister")
[09:30:27.111]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:27.111]                       inherits = FALSE)
[09:30:27.111]                   }
[09:30:27.111]                   options(future.plan = NULL)
[09:30:27.111]                   if (is.na(NA_character_)) 
[09:30:27.111]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.111]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:27.111]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:27.111]                     .init = FALSE)
[09:30:27.111]                 }
[09:30:27.111]             }
[09:30:27.111]         }
[09:30:27.111]     })
[09:30:27.111]     if (TRUE) {
[09:30:27.111]         base::sink(type = "output", split = FALSE)
[09:30:27.111]         if (TRUE) {
[09:30:27.111]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:27.111]         }
[09:30:27.111]         else {
[09:30:27.111]             ...future.result["stdout"] <- base::list(NULL)
[09:30:27.111]         }
[09:30:27.111]         base::close(...future.stdout)
[09:30:27.111]         ...future.stdout <- NULL
[09:30:27.111]     }
[09:30:27.111]     ...future.result$conditions <- ...future.conditions
[09:30:27.111]     ...future.result$finished <- base::Sys.time()
[09:30:27.111]     ...future.result
[09:30:27.111] }
[09:30:27.113] plan(): Setting new future strategy stack:
[09:30:27.113] List of future strategies:
[09:30:27.113] 1. sequential:
[09:30:27.113]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.113]    - tweaked: FALSE
[09:30:27.113]    - call: NULL
[09:30:27.114] plan(): nbrOfWorkers() = 1
[09:30:27.114] plan(): Setting new future strategy stack:
[09:30:27.114] List of future strategies:
[09:30:27.114] 1. sequential:
[09:30:27.114]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.114]    - tweaked: FALSE
[09:30:27.114]    - call: future::plan("sequential")
[09:30:27.115] plan(): nbrOfWorkers() = 1
[09:30:27.115] SequentialFuture started (and completed)
[09:30:27.115] signalConditions() ...
[09:30:27.115]  - include = ‘immediateCondition’
[09:30:27.115]  - exclude = 
[09:30:27.115]  - resignal = FALSE
[09:30:27.115]  - Number of conditions: 1
[09:30:27.116] signalConditions() ... done
[09:30:27.116] - Launch lazy future ... done
[09:30:27.116] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[09:30:27.116] getGlobalsAndPackages() ...
[09:30:27.116] Searching for globals...
[09:30:27.117] - globals found: [2] ‘{’, ‘stop’
[09:30:27.117] Searching for globals ... DONE
[09:30:27.117] Resolving globals: FALSE
[09:30:27.117] 
[09:30:27.117] 
[09:30:27.118] getGlobalsAndPackages() ... DONE
[09:30:27.118] run() for ‘Future’ ...
[09:30:27.118] - state: ‘created’
[09:30:27.118] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:27.118] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:27.118] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:27.118]   - Field: ‘label’
[09:30:27.119]   - Field: ‘local’
[09:30:27.119]   - Field: ‘owner’
[09:30:27.119]   - Field: ‘envir’
[09:30:27.119]   - Field: ‘packages’
[09:30:27.119]   - Field: ‘gc’
[09:30:27.119]   - Field: ‘conditions’
[09:30:27.119]   - Field: ‘expr’
[09:30:27.119]   - Field: ‘uuid’
[09:30:27.119]   - Field: ‘seed’
[09:30:27.119]   - Field: ‘version’
[09:30:27.120]   - Field: ‘result’
[09:30:27.120]   - Field: ‘asynchronous’
[09:30:27.120]   - Field: ‘calls’
[09:30:27.120]   - Field: ‘globals’
[09:30:27.120]   - Field: ‘stdout’
[09:30:27.120]   - Field: ‘earlySignal’
[09:30:27.120]   - Field: ‘lazy’
[09:30:27.120]   - Field: ‘state’
[09:30:27.120] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:27.120] - Launch lazy future ...
[09:30:27.121] Packages needed by the future expression (n = 0): <none>
[09:30:27.121] Packages needed by future strategies (n = 0): <none>
[09:30:27.121] {
[09:30:27.121]     {
[09:30:27.121]         {
[09:30:27.121]             ...future.startTime <- base::Sys.time()
[09:30:27.121]             {
[09:30:27.121]                 {
[09:30:27.121]                   {
[09:30:27.121]                     base::local({
[09:30:27.121]                       has_future <- base::requireNamespace("future", 
[09:30:27.121]                         quietly = TRUE)
[09:30:27.121]                       if (has_future) {
[09:30:27.121]                         ns <- base::getNamespace("future")
[09:30:27.121]                         version <- ns[[".package"]][["version"]]
[09:30:27.121]                         if (is.null(version)) 
[09:30:27.121]                           version <- utils::packageVersion("future")
[09:30:27.121]                       }
[09:30:27.121]                       else {
[09:30:27.121]                         version <- NULL
[09:30:27.121]                       }
[09:30:27.121]                       if (!has_future || version < "1.8.0") {
[09:30:27.121]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:27.121]                           "", base::R.version$version.string), 
[09:30:27.121]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:27.121]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:27.121]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:27.121]                             "release", "version")], collapse = " "), 
[09:30:27.121]                           hostname = base::Sys.info()[["nodename"]])
[09:30:27.121]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:27.121]                           info)
[09:30:27.121]                         info <- base::paste(info, collapse = "; ")
[09:30:27.121]                         if (!has_future) {
[09:30:27.121]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:27.121]                             info)
[09:30:27.121]                         }
[09:30:27.121]                         else {
[09:30:27.121]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:27.121]                             info, version)
[09:30:27.121]                         }
[09:30:27.121]                         base::stop(msg)
[09:30:27.121]                       }
[09:30:27.121]                     })
[09:30:27.121]                   }
[09:30:27.121]                   ...future.strategy.old <- future::plan("list")
[09:30:27.121]                   options(future.plan = NULL)
[09:30:27.121]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.121]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:27.121]                 }
[09:30:27.121]                 ...future.workdir <- getwd()
[09:30:27.121]             }
[09:30:27.121]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:27.121]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:27.121]         }
[09:30:27.121]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:27.121]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:27.121]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:27.121]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:27.121]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:27.121]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:27.121]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:27.121]             base::names(...future.oldOptions))
[09:30:27.121]     }
[09:30:27.121]     if (FALSE) {
[09:30:27.121]     }
[09:30:27.121]     else {
[09:30:27.121]         if (TRUE) {
[09:30:27.121]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:27.121]                 open = "w")
[09:30:27.121]         }
[09:30:27.121]         else {
[09:30:27.121]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:27.121]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:27.121]         }
[09:30:27.121]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:27.121]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:27.121]             base::sink(type = "output", split = FALSE)
[09:30:27.121]             base::close(...future.stdout)
[09:30:27.121]         }, add = TRUE)
[09:30:27.121]     }
[09:30:27.121]     ...future.frame <- base::sys.nframe()
[09:30:27.121]     ...future.conditions <- base::list()
[09:30:27.121]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:27.121]     if (FALSE) {
[09:30:27.121]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:27.121]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:27.121]     }
[09:30:27.121]     ...future.result <- base::tryCatch({
[09:30:27.121]         base::withCallingHandlers({
[09:30:27.121]             ...future.value <- base::withVisible(base::local({
[09:30:27.121]                 42L
[09:30:27.121]                 stop("Woops")
[09:30:27.121]             }))
[09:30:27.121]             future::FutureResult(value = ...future.value$value, 
[09:30:27.121]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.121]                   ...future.rng), globalenv = if (FALSE) 
[09:30:27.121]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:27.121]                     ...future.globalenv.names))
[09:30:27.121]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:27.121]         }, condition = base::local({
[09:30:27.121]             c <- base::c
[09:30:27.121]             inherits <- base::inherits
[09:30:27.121]             invokeRestart <- base::invokeRestart
[09:30:27.121]             length <- base::length
[09:30:27.121]             list <- base::list
[09:30:27.121]             seq.int <- base::seq.int
[09:30:27.121]             signalCondition <- base::signalCondition
[09:30:27.121]             sys.calls <- base::sys.calls
[09:30:27.121]             `[[` <- base::`[[`
[09:30:27.121]             `+` <- base::`+`
[09:30:27.121]             `<<-` <- base::`<<-`
[09:30:27.121]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:27.121]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:27.121]                   3L)]
[09:30:27.121]             }
[09:30:27.121]             function(cond) {
[09:30:27.121]                 is_error <- inherits(cond, "error")
[09:30:27.121]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:27.121]                   NULL)
[09:30:27.121]                 if (is_error) {
[09:30:27.121]                   sessionInformation <- function() {
[09:30:27.121]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:27.121]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:27.121]                       search = base::search(), system = base::Sys.info())
[09:30:27.121]                   }
[09:30:27.121]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.121]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:27.121]                     cond$call), session = sessionInformation(), 
[09:30:27.121]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:27.121]                   signalCondition(cond)
[09:30:27.121]                 }
[09:30:27.121]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:27.121]                 "immediateCondition"))) {
[09:30:27.121]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:27.121]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.121]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:27.121]                   if (TRUE && !signal) {
[09:30:27.121]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.121]                     {
[09:30:27.121]                       inherits <- base::inherits
[09:30:27.121]                       invokeRestart <- base::invokeRestart
[09:30:27.121]                       is.null <- base::is.null
[09:30:27.121]                       muffled <- FALSE
[09:30:27.121]                       if (inherits(cond, "message")) {
[09:30:27.121]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.121]                         if (muffled) 
[09:30:27.121]                           invokeRestart("muffleMessage")
[09:30:27.121]                       }
[09:30:27.121]                       else if (inherits(cond, "warning")) {
[09:30:27.121]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.121]                         if (muffled) 
[09:30:27.121]                           invokeRestart("muffleWarning")
[09:30:27.121]                       }
[09:30:27.121]                       else if (inherits(cond, "condition")) {
[09:30:27.121]                         if (!is.null(pattern)) {
[09:30:27.121]                           computeRestarts <- base::computeRestarts
[09:30:27.121]                           grepl <- base::grepl
[09:30:27.121]                           restarts <- computeRestarts(cond)
[09:30:27.121]                           for (restart in restarts) {
[09:30:27.121]                             name <- restart$name
[09:30:27.121]                             if (is.null(name)) 
[09:30:27.121]                               next
[09:30:27.121]                             if (!grepl(pattern, name)) 
[09:30:27.121]                               next
[09:30:27.121]                             invokeRestart(restart)
[09:30:27.121]                             muffled <- TRUE
[09:30:27.121]                             break
[09:30:27.121]                           }
[09:30:27.121]                         }
[09:30:27.121]                       }
[09:30:27.121]                       invisible(muffled)
[09:30:27.121]                     }
[09:30:27.121]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.121]                   }
[09:30:27.121]                 }
[09:30:27.121]                 else {
[09:30:27.121]                   if (TRUE) {
[09:30:27.121]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.121]                     {
[09:30:27.121]                       inherits <- base::inherits
[09:30:27.121]                       invokeRestart <- base::invokeRestart
[09:30:27.121]                       is.null <- base::is.null
[09:30:27.121]                       muffled <- FALSE
[09:30:27.121]                       if (inherits(cond, "message")) {
[09:30:27.121]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.121]                         if (muffled) 
[09:30:27.121]                           invokeRestart("muffleMessage")
[09:30:27.121]                       }
[09:30:27.121]                       else if (inherits(cond, "warning")) {
[09:30:27.121]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.121]                         if (muffled) 
[09:30:27.121]                           invokeRestart("muffleWarning")
[09:30:27.121]                       }
[09:30:27.121]                       else if (inherits(cond, "condition")) {
[09:30:27.121]                         if (!is.null(pattern)) {
[09:30:27.121]                           computeRestarts <- base::computeRestarts
[09:30:27.121]                           grepl <- base::grepl
[09:30:27.121]                           restarts <- computeRestarts(cond)
[09:30:27.121]                           for (restart in restarts) {
[09:30:27.121]                             name <- restart$name
[09:30:27.121]                             if (is.null(name)) 
[09:30:27.121]                               next
[09:30:27.121]                             if (!grepl(pattern, name)) 
[09:30:27.121]                               next
[09:30:27.121]                             invokeRestart(restart)
[09:30:27.121]                             muffled <- TRUE
[09:30:27.121]                             break
[09:30:27.121]                           }
[09:30:27.121]                         }
[09:30:27.121]                       }
[09:30:27.121]                       invisible(muffled)
[09:30:27.121]                     }
[09:30:27.121]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.121]                   }
[09:30:27.121]                 }
[09:30:27.121]             }
[09:30:27.121]         }))
[09:30:27.121]     }, error = function(ex) {
[09:30:27.121]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:27.121]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.121]                 ...future.rng), started = ...future.startTime, 
[09:30:27.121]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:27.121]             version = "1.8"), class = "FutureResult")
[09:30:27.121]     }, finally = {
[09:30:27.121]         if (!identical(...future.workdir, getwd())) 
[09:30:27.121]             setwd(...future.workdir)
[09:30:27.121]         {
[09:30:27.121]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:27.121]                 ...future.oldOptions$nwarnings <- NULL
[09:30:27.121]             }
[09:30:27.121]             base::options(...future.oldOptions)
[09:30:27.121]             if (.Platform$OS.type == "windows") {
[09:30:27.121]                 old_names <- names(...future.oldEnvVars)
[09:30:27.121]                 envs <- base::Sys.getenv()
[09:30:27.121]                 names <- names(envs)
[09:30:27.121]                 common <- intersect(names, old_names)
[09:30:27.121]                 added <- setdiff(names, old_names)
[09:30:27.121]                 removed <- setdiff(old_names, names)
[09:30:27.121]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:27.121]                   envs[common]]
[09:30:27.121]                 NAMES <- toupper(changed)
[09:30:27.121]                 args <- list()
[09:30:27.121]                 for (kk in seq_along(NAMES)) {
[09:30:27.121]                   name <- changed[[kk]]
[09:30:27.121]                   NAME <- NAMES[[kk]]
[09:30:27.121]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.121]                     next
[09:30:27.121]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.121]                 }
[09:30:27.121]                 NAMES <- toupper(added)
[09:30:27.121]                 for (kk in seq_along(NAMES)) {
[09:30:27.121]                   name <- added[[kk]]
[09:30:27.121]                   NAME <- NAMES[[kk]]
[09:30:27.121]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.121]                     next
[09:30:27.121]                   args[[name]] <- ""
[09:30:27.121]                 }
[09:30:27.121]                 NAMES <- toupper(removed)
[09:30:27.121]                 for (kk in seq_along(NAMES)) {
[09:30:27.121]                   name <- removed[[kk]]
[09:30:27.121]                   NAME <- NAMES[[kk]]
[09:30:27.121]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.121]                     next
[09:30:27.121]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.121]                 }
[09:30:27.121]                 if (length(args) > 0) 
[09:30:27.121]                   base::do.call(base::Sys.setenv, args = args)
[09:30:27.121]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:27.121]             }
[09:30:27.121]             else {
[09:30:27.121]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:27.121]             }
[09:30:27.121]             {
[09:30:27.121]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:27.121]                   0L) {
[09:30:27.121]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:27.121]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:27.121]                   base::options(opts)
[09:30:27.121]                 }
[09:30:27.121]                 {
[09:30:27.121]                   {
[09:30:27.121]                     NULL
[09:30:27.121]                     RNGkind("Mersenne-Twister")
[09:30:27.121]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:27.121]                       inherits = FALSE)
[09:30:27.121]                   }
[09:30:27.121]                   options(future.plan = NULL)
[09:30:27.121]                   if (is.na(NA_character_)) 
[09:30:27.121]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.121]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:27.121]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:27.121]                     .init = FALSE)
[09:30:27.121]                 }
[09:30:27.121]             }
[09:30:27.121]         }
[09:30:27.121]     })
[09:30:27.121]     if (TRUE) {
[09:30:27.121]         base::sink(type = "output", split = FALSE)
[09:30:27.121]         if (TRUE) {
[09:30:27.121]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:27.121]         }
[09:30:27.121]         else {
[09:30:27.121]             ...future.result["stdout"] <- base::list(NULL)
[09:30:27.121]         }
[09:30:27.121]         base::close(...future.stdout)
[09:30:27.121]         ...future.stdout <- NULL
[09:30:27.121]     }
[09:30:27.121]     ...future.result$conditions <- ...future.conditions
[09:30:27.121]     ...future.result$finished <- base::Sys.time()
[09:30:27.121]     ...future.result
[09:30:27.121] }
[09:30:27.123] plan(): Setting new future strategy stack:
[09:30:27.123] List of future strategies:
[09:30:27.123] 1. sequential:
[09:30:27.123]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.123]    - tweaked: FALSE
[09:30:27.123]    - call: NULL
[09:30:27.123] plan(): nbrOfWorkers() = 1
[09:30:27.124] plan(): Setting new future strategy stack:
[09:30:27.124] List of future strategies:
[09:30:27.124] 1. sequential:
[09:30:27.124]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.124]    - tweaked: FALSE
[09:30:27.124]    - call: future::plan("sequential")
[09:30:27.125] plan(): nbrOfWorkers() = 1
[09:30:27.125] SequentialFuture started (and completed)
[09:30:27.125] signalConditions() ...
[09:30:27.125]  - include = ‘immediateCondition’
[09:30:27.125]  - exclude = 
[09:30:27.125]  - resignal = FALSE
[09:30:27.125]  - Number of conditions: 1
[09:30:27.125] signalConditions() ... done
[09:30:27.125] - Launch lazy future ... done
[09:30:27.125] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[09:30:27.126] resolved() for ‘SequentialFuture’ ...
[09:30:27.126] - state: ‘finished’
[09:30:27.126] - run: TRUE
[09:30:27.126] - result: ‘FutureResult’
[09:30:27.126] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[09:30:27.127] getGlobalsAndPackages() ...
[09:30:27.127] Searching for globals...
[09:30:27.128] - globals found: [2] ‘{’, ‘stop’
[09:30:27.128] Searching for globals ... DONE
[09:30:27.128] Resolving globals: FALSE
[09:30:27.128] 
[09:30:27.129] 
[09:30:27.129] getGlobalsAndPackages() ... DONE
[09:30:27.129] run() for ‘Future’ ...
[09:30:27.129] - state: ‘created’
[09:30:27.129] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:27.129] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:27.129] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:27.130]   - Field: ‘label’
[09:30:27.130]   - Field: ‘local’
[09:30:27.130]   - Field: ‘owner’
[09:30:27.130]   - Field: ‘envir’
[09:30:27.130]   - Field: ‘packages’
[09:30:27.130]   - Field: ‘gc’
[09:30:27.130]   - Field: ‘conditions’
[09:30:27.130]   - Field: ‘expr’
[09:30:27.130]   - Field: ‘uuid’
[09:30:27.130]   - Field: ‘seed’
[09:30:27.130]   - Field: ‘version’
[09:30:27.130]   - Field: ‘result’
[09:30:27.131]   - Field: ‘asynchronous’
[09:30:27.131]   - Field: ‘calls’
[09:30:27.131]   - Field: ‘globals’
[09:30:27.131]   - Field: ‘stdout’
[09:30:27.131]   - Field: ‘earlySignal’
[09:30:27.131]   - Field: ‘lazy’
[09:30:27.131]   - Field: ‘state’
[09:30:27.131] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:27.131] - Launch lazy future ...
[09:30:27.131] Packages needed by the future expression (n = 0): <none>
[09:30:27.131] Packages needed by future strategies (n = 0): <none>
[09:30:27.132] {
[09:30:27.132]     {
[09:30:27.132]         {
[09:30:27.132]             ...future.startTime <- base::Sys.time()
[09:30:27.132]             {
[09:30:27.132]                 {
[09:30:27.132]                   {
[09:30:27.132]                     base::local({
[09:30:27.132]                       has_future <- base::requireNamespace("future", 
[09:30:27.132]                         quietly = TRUE)
[09:30:27.132]                       if (has_future) {
[09:30:27.132]                         ns <- base::getNamespace("future")
[09:30:27.132]                         version <- ns[[".package"]][["version"]]
[09:30:27.132]                         if (is.null(version)) 
[09:30:27.132]                           version <- utils::packageVersion("future")
[09:30:27.132]                       }
[09:30:27.132]                       else {
[09:30:27.132]                         version <- NULL
[09:30:27.132]                       }
[09:30:27.132]                       if (!has_future || version < "1.8.0") {
[09:30:27.132]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:27.132]                           "", base::R.version$version.string), 
[09:30:27.132]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:27.132]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:27.132]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:27.132]                             "release", "version")], collapse = " "), 
[09:30:27.132]                           hostname = base::Sys.info()[["nodename"]])
[09:30:27.132]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:27.132]                           info)
[09:30:27.132]                         info <- base::paste(info, collapse = "; ")
[09:30:27.132]                         if (!has_future) {
[09:30:27.132]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:27.132]                             info)
[09:30:27.132]                         }
[09:30:27.132]                         else {
[09:30:27.132]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:27.132]                             info, version)
[09:30:27.132]                         }
[09:30:27.132]                         base::stop(msg)
[09:30:27.132]                       }
[09:30:27.132]                     })
[09:30:27.132]                   }
[09:30:27.132]                   ...future.strategy.old <- future::plan("list")
[09:30:27.132]                   options(future.plan = NULL)
[09:30:27.132]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.132]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:27.132]                 }
[09:30:27.132]                 ...future.workdir <- getwd()
[09:30:27.132]             }
[09:30:27.132]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:27.132]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:27.132]         }
[09:30:27.132]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:27.132]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:27.132]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:27.132]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:27.132]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:27.132]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:27.132]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:27.132]             base::names(...future.oldOptions))
[09:30:27.132]     }
[09:30:27.132]     if (FALSE) {
[09:30:27.132]     }
[09:30:27.132]     else {
[09:30:27.132]         if (TRUE) {
[09:30:27.132]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:27.132]                 open = "w")
[09:30:27.132]         }
[09:30:27.132]         else {
[09:30:27.132]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:27.132]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:27.132]         }
[09:30:27.132]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:27.132]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:27.132]             base::sink(type = "output", split = FALSE)
[09:30:27.132]             base::close(...future.stdout)
[09:30:27.132]         }, add = TRUE)
[09:30:27.132]     }
[09:30:27.132]     ...future.frame <- base::sys.nframe()
[09:30:27.132]     ...future.conditions <- base::list()
[09:30:27.132]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:27.132]     if (FALSE) {
[09:30:27.132]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:27.132]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:27.132]     }
[09:30:27.132]     ...future.result <- base::tryCatch({
[09:30:27.132]         base::withCallingHandlers({
[09:30:27.132]             ...future.value <- base::withVisible(base::local({
[09:30:27.132]                 42L
[09:30:27.132]                 stop("Woops")
[09:30:27.132]             }))
[09:30:27.132]             future::FutureResult(value = ...future.value$value, 
[09:30:27.132]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.132]                   ...future.rng), globalenv = if (FALSE) 
[09:30:27.132]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:27.132]                     ...future.globalenv.names))
[09:30:27.132]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:27.132]         }, condition = base::local({
[09:30:27.132]             c <- base::c
[09:30:27.132]             inherits <- base::inherits
[09:30:27.132]             invokeRestart <- base::invokeRestart
[09:30:27.132]             length <- base::length
[09:30:27.132]             list <- base::list
[09:30:27.132]             seq.int <- base::seq.int
[09:30:27.132]             signalCondition <- base::signalCondition
[09:30:27.132]             sys.calls <- base::sys.calls
[09:30:27.132]             `[[` <- base::`[[`
[09:30:27.132]             `+` <- base::`+`
[09:30:27.132]             `<<-` <- base::`<<-`
[09:30:27.132]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:27.132]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:27.132]                   3L)]
[09:30:27.132]             }
[09:30:27.132]             function(cond) {
[09:30:27.132]                 is_error <- inherits(cond, "error")
[09:30:27.132]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:27.132]                   NULL)
[09:30:27.132]                 if (is_error) {
[09:30:27.132]                   sessionInformation <- function() {
[09:30:27.132]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:27.132]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:27.132]                       search = base::search(), system = base::Sys.info())
[09:30:27.132]                   }
[09:30:27.132]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.132]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:27.132]                     cond$call), session = sessionInformation(), 
[09:30:27.132]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:27.132]                   signalCondition(cond)
[09:30:27.132]                 }
[09:30:27.132]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:27.132]                 "immediateCondition"))) {
[09:30:27.132]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:27.132]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.132]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:27.132]                   if (TRUE && !signal) {
[09:30:27.132]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.132]                     {
[09:30:27.132]                       inherits <- base::inherits
[09:30:27.132]                       invokeRestart <- base::invokeRestart
[09:30:27.132]                       is.null <- base::is.null
[09:30:27.132]                       muffled <- FALSE
[09:30:27.132]                       if (inherits(cond, "message")) {
[09:30:27.132]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.132]                         if (muffled) 
[09:30:27.132]                           invokeRestart("muffleMessage")
[09:30:27.132]                       }
[09:30:27.132]                       else if (inherits(cond, "warning")) {
[09:30:27.132]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.132]                         if (muffled) 
[09:30:27.132]                           invokeRestart("muffleWarning")
[09:30:27.132]                       }
[09:30:27.132]                       else if (inherits(cond, "condition")) {
[09:30:27.132]                         if (!is.null(pattern)) {
[09:30:27.132]                           computeRestarts <- base::computeRestarts
[09:30:27.132]                           grepl <- base::grepl
[09:30:27.132]                           restarts <- computeRestarts(cond)
[09:30:27.132]                           for (restart in restarts) {
[09:30:27.132]                             name <- restart$name
[09:30:27.132]                             if (is.null(name)) 
[09:30:27.132]                               next
[09:30:27.132]                             if (!grepl(pattern, name)) 
[09:30:27.132]                               next
[09:30:27.132]                             invokeRestart(restart)
[09:30:27.132]                             muffled <- TRUE
[09:30:27.132]                             break
[09:30:27.132]                           }
[09:30:27.132]                         }
[09:30:27.132]                       }
[09:30:27.132]                       invisible(muffled)
[09:30:27.132]                     }
[09:30:27.132]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.132]                   }
[09:30:27.132]                 }
[09:30:27.132]                 else {
[09:30:27.132]                   if (TRUE) {
[09:30:27.132]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.132]                     {
[09:30:27.132]                       inherits <- base::inherits
[09:30:27.132]                       invokeRestart <- base::invokeRestart
[09:30:27.132]                       is.null <- base::is.null
[09:30:27.132]                       muffled <- FALSE
[09:30:27.132]                       if (inherits(cond, "message")) {
[09:30:27.132]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.132]                         if (muffled) 
[09:30:27.132]                           invokeRestart("muffleMessage")
[09:30:27.132]                       }
[09:30:27.132]                       else if (inherits(cond, "warning")) {
[09:30:27.132]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.132]                         if (muffled) 
[09:30:27.132]                           invokeRestart("muffleWarning")
[09:30:27.132]                       }
[09:30:27.132]                       else if (inherits(cond, "condition")) {
[09:30:27.132]                         if (!is.null(pattern)) {
[09:30:27.132]                           computeRestarts <- base::computeRestarts
[09:30:27.132]                           grepl <- base::grepl
[09:30:27.132]                           restarts <- computeRestarts(cond)
[09:30:27.132]                           for (restart in restarts) {
[09:30:27.132]                             name <- restart$name
[09:30:27.132]                             if (is.null(name)) 
[09:30:27.132]                               next
[09:30:27.132]                             if (!grepl(pattern, name)) 
[09:30:27.132]                               next
[09:30:27.132]                             invokeRestart(restart)
[09:30:27.132]                             muffled <- TRUE
[09:30:27.132]                             break
[09:30:27.132]                           }
[09:30:27.132]                         }
[09:30:27.132]                       }
[09:30:27.132]                       invisible(muffled)
[09:30:27.132]                     }
[09:30:27.132]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.132]                   }
[09:30:27.132]                 }
[09:30:27.132]             }
[09:30:27.132]         }))
[09:30:27.132]     }, error = function(ex) {
[09:30:27.132]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:27.132]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.132]                 ...future.rng), started = ...future.startTime, 
[09:30:27.132]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:27.132]             version = "1.8"), class = "FutureResult")
[09:30:27.132]     }, finally = {
[09:30:27.132]         if (!identical(...future.workdir, getwd())) 
[09:30:27.132]             setwd(...future.workdir)
[09:30:27.132]         {
[09:30:27.132]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:27.132]                 ...future.oldOptions$nwarnings <- NULL
[09:30:27.132]             }
[09:30:27.132]             base::options(...future.oldOptions)
[09:30:27.132]             if (.Platform$OS.type == "windows") {
[09:30:27.132]                 old_names <- names(...future.oldEnvVars)
[09:30:27.132]                 envs <- base::Sys.getenv()
[09:30:27.132]                 names <- names(envs)
[09:30:27.132]                 common <- intersect(names, old_names)
[09:30:27.132]                 added <- setdiff(names, old_names)
[09:30:27.132]                 removed <- setdiff(old_names, names)
[09:30:27.132]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:27.132]                   envs[common]]
[09:30:27.132]                 NAMES <- toupper(changed)
[09:30:27.132]                 args <- list()
[09:30:27.132]                 for (kk in seq_along(NAMES)) {
[09:30:27.132]                   name <- changed[[kk]]
[09:30:27.132]                   NAME <- NAMES[[kk]]
[09:30:27.132]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.132]                     next
[09:30:27.132]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.132]                 }
[09:30:27.132]                 NAMES <- toupper(added)
[09:30:27.132]                 for (kk in seq_along(NAMES)) {
[09:30:27.132]                   name <- added[[kk]]
[09:30:27.132]                   NAME <- NAMES[[kk]]
[09:30:27.132]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.132]                     next
[09:30:27.132]                   args[[name]] <- ""
[09:30:27.132]                 }
[09:30:27.132]                 NAMES <- toupper(removed)
[09:30:27.132]                 for (kk in seq_along(NAMES)) {
[09:30:27.132]                   name <- removed[[kk]]
[09:30:27.132]                   NAME <- NAMES[[kk]]
[09:30:27.132]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.132]                     next
[09:30:27.132]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.132]                 }
[09:30:27.132]                 if (length(args) > 0) 
[09:30:27.132]                   base::do.call(base::Sys.setenv, args = args)
[09:30:27.132]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:27.132]             }
[09:30:27.132]             else {
[09:30:27.132]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:27.132]             }
[09:30:27.132]             {
[09:30:27.132]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:27.132]                   0L) {
[09:30:27.132]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:27.132]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:27.132]                   base::options(opts)
[09:30:27.132]                 }
[09:30:27.132]                 {
[09:30:27.132]                   {
[09:30:27.132]                     NULL
[09:30:27.132]                     RNGkind("Mersenne-Twister")
[09:30:27.132]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:27.132]                       inherits = FALSE)
[09:30:27.132]                   }
[09:30:27.132]                   options(future.plan = NULL)
[09:30:27.132]                   if (is.na(NA_character_)) 
[09:30:27.132]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.132]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:27.132]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:27.132]                     .init = FALSE)
[09:30:27.132]                 }
[09:30:27.132]             }
[09:30:27.132]         }
[09:30:27.132]     })
[09:30:27.132]     if (TRUE) {
[09:30:27.132]         base::sink(type = "output", split = FALSE)
[09:30:27.132]         if (TRUE) {
[09:30:27.132]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:27.132]         }
[09:30:27.132]         else {
[09:30:27.132]             ...future.result["stdout"] <- base::list(NULL)
[09:30:27.132]         }
[09:30:27.132]         base::close(...future.stdout)
[09:30:27.132]         ...future.stdout <- NULL
[09:30:27.132]     }
[09:30:27.132]     ...future.result$conditions <- ...future.conditions
[09:30:27.132]     ...future.result$finished <- base::Sys.time()
[09:30:27.132]     ...future.result
[09:30:27.132] }
[09:30:27.134] plan(): Setting new future strategy stack:
[09:30:27.134] List of future strategies:
[09:30:27.134] 1. sequential:
[09:30:27.134]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.134]    - tweaked: FALSE
[09:30:27.134]    - call: NULL
[09:30:27.134] plan(): nbrOfWorkers() = 1
[09:30:27.135] plan(): Setting new future strategy stack:
[09:30:27.135] List of future strategies:
[09:30:27.135] 1. sequential:
[09:30:27.135]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.135]    - tweaked: FALSE
[09:30:27.135]    - call: future::plan("sequential")
[09:30:27.135] plan(): nbrOfWorkers() = 1
[09:30:27.136] SequentialFuture started (and completed)
[09:30:27.136] signalConditions() ...
[09:30:27.136]  - include = ‘immediateCondition’
[09:30:27.136]  - exclude = 
[09:30:27.136]  - resignal = FALSE
[09:30:27.136]  - Number of conditions: 1
[09:30:27.136] signalConditions() ... done
[09:30:27.136] - Launch lazy future ... done
[09:30:27.136] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[09:30:27.137] getGlobalsAndPackages() ...
[09:30:27.137] Searching for globals...
[09:30:27.137] - globals found: [2] ‘{’, ‘stop’
[09:30:27.138] Searching for globals ... DONE
[09:30:27.138] Resolving globals: FALSE
[09:30:27.138] 
[09:30:27.138] 
[09:30:27.138] getGlobalsAndPackages() ... DONE
[09:30:27.138] run() for ‘Future’ ...
[09:30:27.138] - state: ‘created’
[09:30:27.139] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:27.139] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:27.139] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:27.139]   - Field: ‘label’
[09:30:27.139]   - Field: ‘local’
[09:30:27.139]   - Field: ‘owner’
[09:30:27.139]   - Field: ‘envir’
[09:30:27.139]   - Field: ‘packages’
[09:30:27.139]   - Field: ‘gc’
[09:30:27.140]   - Field: ‘conditions’
[09:30:27.140]   - Field: ‘expr’
[09:30:27.140]   - Field: ‘uuid’
[09:30:27.140]   - Field: ‘seed’
[09:30:27.140]   - Field: ‘version’
[09:30:27.140]   - Field: ‘result’
[09:30:27.140]   - Field: ‘asynchronous’
[09:30:27.140]   - Field: ‘calls’
[09:30:27.140]   - Field: ‘globals’
[09:30:27.140]   - Field: ‘stdout’
[09:30:27.140]   - Field: ‘earlySignal’
[09:30:27.140]   - Field: ‘lazy’
[09:30:27.141]   - Field: ‘state’
[09:30:27.141] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:27.141] - Launch lazy future ...
[09:30:27.141] Packages needed by the future expression (n = 0): <none>
[09:30:27.141] Packages needed by future strategies (n = 0): <none>
[09:30:27.141] {
[09:30:27.141]     {
[09:30:27.141]         {
[09:30:27.141]             ...future.startTime <- base::Sys.time()
[09:30:27.141]             {
[09:30:27.141]                 {
[09:30:27.141]                   {
[09:30:27.141]                     base::local({
[09:30:27.141]                       has_future <- base::requireNamespace("future", 
[09:30:27.141]                         quietly = TRUE)
[09:30:27.141]                       if (has_future) {
[09:30:27.141]                         ns <- base::getNamespace("future")
[09:30:27.141]                         version <- ns[[".package"]][["version"]]
[09:30:27.141]                         if (is.null(version)) 
[09:30:27.141]                           version <- utils::packageVersion("future")
[09:30:27.141]                       }
[09:30:27.141]                       else {
[09:30:27.141]                         version <- NULL
[09:30:27.141]                       }
[09:30:27.141]                       if (!has_future || version < "1.8.0") {
[09:30:27.141]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:27.141]                           "", base::R.version$version.string), 
[09:30:27.141]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:27.141]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:27.141]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:27.141]                             "release", "version")], collapse = " "), 
[09:30:27.141]                           hostname = base::Sys.info()[["nodename"]])
[09:30:27.141]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:27.141]                           info)
[09:30:27.141]                         info <- base::paste(info, collapse = "; ")
[09:30:27.141]                         if (!has_future) {
[09:30:27.141]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:27.141]                             info)
[09:30:27.141]                         }
[09:30:27.141]                         else {
[09:30:27.141]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:27.141]                             info, version)
[09:30:27.141]                         }
[09:30:27.141]                         base::stop(msg)
[09:30:27.141]                       }
[09:30:27.141]                     })
[09:30:27.141]                   }
[09:30:27.141]                   ...future.strategy.old <- future::plan("list")
[09:30:27.141]                   options(future.plan = NULL)
[09:30:27.141]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.141]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:27.141]                 }
[09:30:27.141]                 ...future.workdir <- getwd()
[09:30:27.141]             }
[09:30:27.141]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:27.141]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:27.141]         }
[09:30:27.141]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:27.141]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:27.141]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:27.141]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:27.141]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:27.141]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:27.141]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:27.141]             base::names(...future.oldOptions))
[09:30:27.141]     }
[09:30:27.141]     if (FALSE) {
[09:30:27.141]     }
[09:30:27.141]     else {
[09:30:27.141]         if (TRUE) {
[09:30:27.141]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:27.141]                 open = "w")
[09:30:27.141]         }
[09:30:27.141]         else {
[09:30:27.141]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:27.141]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:27.141]         }
[09:30:27.141]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:27.141]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:27.141]             base::sink(type = "output", split = FALSE)
[09:30:27.141]             base::close(...future.stdout)
[09:30:27.141]         }, add = TRUE)
[09:30:27.141]     }
[09:30:27.141]     ...future.frame <- base::sys.nframe()
[09:30:27.141]     ...future.conditions <- base::list()
[09:30:27.141]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:27.141]     if (FALSE) {
[09:30:27.141]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:27.141]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:27.141]     }
[09:30:27.141]     ...future.result <- base::tryCatch({
[09:30:27.141]         base::withCallingHandlers({
[09:30:27.141]             ...future.value <- base::withVisible(base::local({
[09:30:27.141]                 42L
[09:30:27.141]                 stop("Woops")
[09:30:27.141]             }))
[09:30:27.141]             future::FutureResult(value = ...future.value$value, 
[09:30:27.141]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.141]                   ...future.rng), globalenv = if (FALSE) 
[09:30:27.141]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:27.141]                     ...future.globalenv.names))
[09:30:27.141]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:27.141]         }, condition = base::local({
[09:30:27.141]             c <- base::c
[09:30:27.141]             inherits <- base::inherits
[09:30:27.141]             invokeRestart <- base::invokeRestart
[09:30:27.141]             length <- base::length
[09:30:27.141]             list <- base::list
[09:30:27.141]             seq.int <- base::seq.int
[09:30:27.141]             signalCondition <- base::signalCondition
[09:30:27.141]             sys.calls <- base::sys.calls
[09:30:27.141]             `[[` <- base::`[[`
[09:30:27.141]             `+` <- base::`+`
[09:30:27.141]             `<<-` <- base::`<<-`
[09:30:27.141]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:27.141]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:27.141]                   3L)]
[09:30:27.141]             }
[09:30:27.141]             function(cond) {
[09:30:27.141]                 is_error <- inherits(cond, "error")
[09:30:27.141]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:27.141]                   NULL)
[09:30:27.141]                 if (is_error) {
[09:30:27.141]                   sessionInformation <- function() {
[09:30:27.141]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:27.141]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:27.141]                       search = base::search(), system = base::Sys.info())
[09:30:27.141]                   }
[09:30:27.141]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.141]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:27.141]                     cond$call), session = sessionInformation(), 
[09:30:27.141]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:27.141]                   signalCondition(cond)
[09:30:27.141]                 }
[09:30:27.141]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:27.141]                 "immediateCondition"))) {
[09:30:27.141]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:27.141]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.141]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:27.141]                   if (TRUE && !signal) {
[09:30:27.141]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.141]                     {
[09:30:27.141]                       inherits <- base::inherits
[09:30:27.141]                       invokeRestart <- base::invokeRestart
[09:30:27.141]                       is.null <- base::is.null
[09:30:27.141]                       muffled <- FALSE
[09:30:27.141]                       if (inherits(cond, "message")) {
[09:30:27.141]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.141]                         if (muffled) 
[09:30:27.141]                           invokeRestart("muffleMessage")
[09:30:27.141]                       }
[09:30:27.141]                       else if (inherits(cond, "warning")) {
[09:30:27.141]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.141]                         if (muffled) 
[09:30:27.141]                           invokeRestart("muffleWarning")
[09:30:27.141]                       }
[09:30:27.141]                       else if (inherits(cond, "condition")) {
[09:30:27.141]                         if (!is.null(pattern)) {
[09:30:27.141]                           computeRestarts <- base::computeRestarts
[09:30:27.141]                           grepl <- base::grepl
[09:30:27.141]                           restarts <- computeRestarts(cond)
[09:30:27.141]                           for (restart in restarts) {
[09:30:27.141]                             name <- restart$name
[09:30:27.141]                             if (is.null(name)) 
[09:30:27.141]                               next
[09:30:27.141]                             if (!grepl(pattern, name)) 
[09:30:27.141]                               next
[09:30:27.141]                             invokeRestart(restart)
[09:30:27.141]                             muffled <- TRUE
[09:30:27.141]                             break
[09:30:27.141]                           }
[09:30:27.141]                         }
[09:30:27.141]                       }
[09:30:27.141]                       invisible(muffled)
[09:30:27.141]                     }
[09:30:27.141]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.141]                   }
[09:30:27.141]                 }
[09:30:27.141]                 else {
[09:30:27.141]                   if (TRUE) {
[09:30:27.141]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.141]                     {
[09:30:27.141]                       inherits <- base::inherits
[09:30:27.141]                       invokeRestart <- base::invokeRestart
[09:30:27.141]                       is.null <- base::is.null
[09:30:27.141]                       muffled <- FALSE
[09:30:27.141]                       if (inherits(cond, "message")) {
[09:30:27.141]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.141]                         if (muffled) 
[09:30:27.141]                           invokeRestart("muffleMessage")
[09:30:27.141]                       }
[09:30:27.141]                       else if (inherits(cond, "warning")) {
[09:30:27.141]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.141]                         if (muffled) 
[09:30:27.141]                           invokeRestart("muffleWarning")
[09:30:27.141]                       }
[09:30:27.141]                       else if (inherits(cond, "condition")) {
[09:30:27.141]                         if (!is.null(pattern)) {
[09:30:27.141]                           computeRestarts <- base::computeRestarts
[09:30:27.141]                           grepl <- base::grepl
[09:30:27.141]                           restarts <- computeRestarts(cond)
[09:30:27.141]                           for (restart in restarts) {
[09:30:27.141]                             name <- restart$name
[09:30:27.141]                             if (is.null(name)) 
[09:30:27.141]                               next
[09:30:27.141]                             if (!grepl(pattern, name)) 
[09:30:27.141]                               next
[09:30:27.141]                             invokeRestart(restart)
[09:30:27.141]                             muffled <- TRUE
[09:30:27.141]                             break
[09:30:27.141]                           }
[09:30:27.141]                         }
[09:30:27.141]                       }
[09:30:27.141]                       invisible(muffled)
[09:30:27.141]                     }
[09:30:27.141]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.141]                   }
[09:30:27.141]                 }
[09:30:27.141]             }
[09:30:27.141]         }))
[09:30:27.141]     }, error = function(ex) {
[09:30:27.141]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:27.141]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.141]                 ...future.rng), started = ...future.startTime, 
[09:30:27.141]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:27.141]             version = "1.8"), class = "FutureResult")
[09:30:27.141]     }, finally = {
[09:30:27.141]         if (!identical(...future.workdir, getwd())) 
[09:30:27.141]             setwd(...future.workdir)
[09:30:27.141]         {
[09:30:27.141]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:27.141]                 ...future.oldOptions$nwarnings <- NULL
[09:30:27.141]             }
[09:30:27.141]             base::options(...future.oldOptions)
[09:30:27.141]             if (.Platform$OS.type == "windows") {
[09:30:27.141]                 old_names <- names(...future.oldEnvVars)
[09:30:27.141]                 envs <- base::Sys.getenv()
[09:30:27.141]                 names <- names(envs)
[09:30:27.141]                 common <- intersect(names, old_names)
[09:30:27.141]                 added <- setdiff(names, old_names)
[09:30:27.141]                 removed <- setdiff(old_names, names)
[09:30:27.141]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:27.141]                   envs[common]]
[09:30:27.141]                 NAMES <- toupper(changed)
[09:30:27.141]                 args <- list()
[09:30:27.141]                 for (kk in seq_along(NAMES)) {
[09:30:27.141]                   name <- changed[[kk]]
[09:30:27.141]                   NAME <- NAMES[[kk]]
[09:30:27.141]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.141]                     next
[09:30:27.141]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.141]                 }
[09:30:27.141]                 NAMES <- toupper(added)
[09:30:27.141]                 for (kk in seq_along(NAMES)) {
[09:30:27.141]                   name <- added[[kk]]
[09:30:27.141]                   NAME <- NAMES[[kk]]
[09:30:27.141]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.141]                     next
[09:30:27.141]                   args[[name]] <- ""
[09:30:27.141]                 }
[09:30:27.141]                 NAMES <- toupper(removed)
[09:30:27.141]                 for (kk in seq_along(NAMES)) {
[09:30:27.141]                   name <- removed[[kk]]
[09:30:27.141]                   NAME <- NAMES[[kk]]
[09:30:27.141]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.141]                     next
[09:30:27.141]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.141]                 }
[09:30:27.141]                 if (length(args) > 0) 
[09:30:27.141]                   base::do.call(base::Sys.setenv, args = args)
[09:30:27.141]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:27.141]             }
[09:30:27.141]             else {
[09:30:27.141]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:27.141]             }
[09:30:27.141]             {
[09:30:27.141]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:27.141]                   0L) {
[09:30:27.141]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:27.141]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:27.141]                   base::options(opts)
[09:30:27.141]                 }
[09:30:27.141]                 {
[09:30:27.141]                   {
[09:30:27.141]                     NULL
[09:30:27.141]                     RNGkind("Mersenne-Twister")
[09:30:27.141]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:27.141]                       inherits = FALSE)
[09:30:27.141]                   }
[09:30:27.141]                   options(future.plan = NULL)
[09:30:27.141]                   if (is.na(NA_character_)) 
[09:30:27.141]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.141]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:27.141]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:27.141]                     .init = FALSE)
[09:30:27.141]                 }
[09:30:27.141]             }
[09:30:27.141]         }
[09:30:27.141]     })
[09:30:27.141]     if (TRUE) {
[09:30:27.141]         base::sink(type = "output", split = FALSE)
[09:30:27.141]         if (TRUE) {
[09:30:27.141]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:27.141]         }
[09:30:27.141]         else {
[09:30:27.141]             ...future.result["stdout"] <- base::list(NULL)
[09:30:27.141]         }
[09:30:27.141]         base::close(...future.stdout)
[09:30:27.141]         ...future.stdout <- NULL
[09:30:27.141]     }
[09:30:27.141]     ...future.result$conditions <- ...future.conditions
[09:30:27.141]     ...future.result$finished <- base::Sys.time()
[09:30:27.141]     ...future.result
[09:30:27.141] }
[09:30:27.144] plan(): Setting new future strategy stack:
[09:30:27.144] List of future strategies:
[09:30:27.144] 1. sequential:
[09:30:27.144]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.144]    - tweaked: FALSE
[09:30:27.144]    - call: NULL
[09:30:27.145] plan(): nbrOfWorkers() = 1
[09:30:27.145] plan(): Setting new future strategy stack:
[09:30:27.145] List of future strategies:
[09:30:27.145] 1. sequential:
[09:30:27.145]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.145]    - tweaked: FALSE
[09:30:27.145]    - call: future::plan("sequential")
[09:30:27.146] plan(): nbrOfWorkers() = 1
[09:30:27.146] SequentialFuture started (and completed)
[09:30:27.146] signalConditions() ...
[09:30:27.146]  - include = ‘immediateCondition’
[09:30:27.146]  - exclude = 
[09:30:27.146]  - resignal = FALSE
[09:30:27.147]  - Number of conditions: 1
[09:30:27.147] signalConditions() ... done
[09:30:27.147] - Launch lazy future ... done
[09:30:27.147] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[09:30:27.147] resolved() for ‘SequentialFuture’ ...
[09:30:27.147] - state: ‘finished’
[09:30:27.147] - run: TRUE
[09:30:27.147] - result: ‘FutureResult’
[09:30:27.147] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[09:30:27.148] getGlobalsAndPackages() ...
[09:30:27.148] Searching for globals...
[09:30:27.149] - globals found: [2] ‘{’, ‘stop’
[09:30:27.149] Searching for globals ... DONE
[09:30:27.149] Resolving globals: FALSE
[09:30:27.149] 
[09:30:27.149] 
[09:30:27.150] getGlobalsAndPackages() ... DONE
[09:30:27.150] run() for ‘Future’ ...
[09:30:27.150] - state: ‘created’
[09:30:27.150] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:27.150] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:27.150] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:27.150]   - Field: ‘label’
[09:30:27.151]   - Field: ‘local’
[09:30:27.151]   - Field: ‘owner’
[09:30:27.151]   - Field: ‘envir’
[09:30:27.151]   - Field: ‘packages’
[09:30:27.151]   - Field: ‘gc’
[09:30:27.151]   - Field: ‘conditions’
[09:30:27.151]   - Field: ‘expr’
[09:30:27.151]   - Field: ‘uuid’
[09:30:27.151]   - Field: ‘seed’
[09:30:27.151]   - Field: ‘version’
[09:30:27.151]   - Field: ‘result’
[09:30:27.151]   - Field: ‘asynchronous’
[09:30:27.152]   - Field: ‘calls’
[09:30:27.152]   - Field: ‘globals’
[09:30:27.152]   - Field: ‘stdout’
[09:30:27.152]   - Field: ‘earlySignal’
[09:30:27.152]   - Field: ‘lazy’
[09:30:27.152]   - Field: ‘state’
[09:30:27.152] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:27.152] - Launch lazy future ...
[09:30:27.152] Packages needed by the future expression (n = 0): <none>
[09:30:27.152] Packages needed by future strategies (n = 0): <none>
[09:30:27.153] {
[09:30:27.153]     {
[09:30:27.153]         {
[09:30:27.153]             ...future.startTime <- base::Sys.time()
[09:30:27.153]             {
[09:30:27.153]                 {
[09:30:27.153]                   {
[09:30:27.153]                     base::local({
[09:30:27.153]                       has_future <- base::requireNamespace("future", 
[09:30:27.153]                         quietly = TRUE)
[09:30:27.153]                       if (has_future) {
[09:30:27.153]                         ns <- base::getNamespace("future")
[09:30:27.153]                         version <- ns[[".package"]][["version"]]
[09:30:27.153]                         if (is.null(version)) 
[09:30:27.153]                           version <- utils::packageVersion("future")
[09:30:27.153]                       }
[09:30:27.153]                       else {
[09:30:27.153]                         version <- NULL
[09:30:27.153]                       }
[09:30:27.153]                       if (!has_future || version < "1.8.0") {
[09:30:27.153]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:27.153]                           "", base::R.version$version.string), 
[09:30:27.153]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:27.153]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:27.153]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:27.153]                             "release", "version")], collapse = " "), 
[09:30:27.153]                           hostname = base::Sys.info()[["nodename"]])
[09:30:27.153]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:27.153]                           info)
[09:30:27.153]                         info <- base::paste(info, collapse = "; ")
[09:30:27.153]                         if (!has_future) {
[09:30:27.153]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:27.153]                             info)
[09:30:27.153]                         }
[09:30:27.153]                         else {
[09:30:27.153]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:27.153]                             info, version)
[09:30:27.153]                         }
[09:30:27.153]                         base::stop(msg)
[09:30:27.153]                       }
[09:30:27.153]                     })
[09:30:27.153]                   }
[09:30:27.153]                   ...future.strategy.old <- future::plan("list")
[09:30:27.153]                   options(future.plan = NULL)
[09:30:27.153]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.153]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:27.153]                 }
[09:30:27.153]                 ...future.workdir <- getwd()
[09:30:27.153]             }
[09:30:27.153]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:27.153]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:27.153]         }
[09:30:27.153]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:27.153]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:27.153]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:27.153]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:27.153]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:27.153]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:27.153]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:27.153]             base::names(...future.oldOptions))
[09:30:27.153]     }
[09:30:27.153]     if (FALSE) {
[09:30:27.153]     }
[09:30:27.153]     else {
[09:30:27.153]         if (TRUE) {
[09:30:27.153]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:27.153]                 open = "w")
[09:30:27.153]         }
[09:30:27.153]         else {
[09:30:27.153]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:27.153]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:27.153]         }
[09:30:27.153]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:27.153]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:27.153]             base::sink(type = "output", split = FALSE)
[09:30:27.153]             base::close(...future.stdout)
[09:30:27.153]         }, add = TRUE)
[09:30:27.153]     }
[09:30:27.153]     ...future.frame <- base::sys.nframe()
[09:30:27.153]     ...future.conditions <- base::list()
[09:30:27.153]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:27.153]     if (FALSE) {
[09:30:27.153]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:27.153]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:27.153]     }
[09:30:27.153]     ...future.result <- base::tryCatch({
[09:30:27.153]         base::withCallingHandlers({
[09:30:27.153]             ...future.value <- base::withVisible(base::local({
[09:30:27.153]                 42L
[09:30:27.153]                 stop("Woops")
[09:30:27.153]             }))
[09:30:27.153]             future::FutureResult(value = ...future.value$value, 
[09:30:27.153]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.153]                   ...future.rng), globalenv = if (FALSE) 
[09:30:27.153]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:27.153]                     ...future.globalenv.names))
[09:30:27.153]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:27.153]         }, condition = base::local({
[09:30:27.153]             c <- base::c
[09:30:27.153]             inherits <- base::inherits
[09:30:27.153]             invokeRestart <- base::invokeRestart
[09:30:27.153]             length <- base::length
[09:30:27.153]             list <- base::list
[09:30:27.153]             seq.int <- base::seq.int
[09:30:27.153]             signalCondition <- base::signalCondition
[09:30:27.153]             sys.calls <- base::sys.calls
[09:30:27.153]             `[[` <- base::`[[`
[09:30:27.153]             `+` <- base::`+`
[09:30:27.153]             `<<-` <- base::`<<-`
[09:30:27.153]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:27.153]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:27.153]                   3L)]
[09:30:27.153]             }
[09:30:27.153]             function(cond) {
[09:30:27.153]                 is_error <- inherits(cond, "error")
[09:30:27.153]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:27.153]                   NULL)
[09:30:27.153]                 if (is_error) {
[09:30:27.153]                   sessionInformation <- function() {
[09:30:27.153]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:27.153]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:27.153]                       search = base::search(), system = base::Sys.info())
[09:30:27.153]                   }
[09:30:27.153]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.153]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:27.153]                     cond$call), session = sessionInformation(), 
[09:30:27.153]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:27.153]                   signalCondition(cond)
[09:30:27.153]                 }
[09:30:27.153]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:27.153]                 "immediateCondition"))) {
[09:30:27.153]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:27.153]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.153]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:27.153]                   if (TRUE && !signal) {
[09:30:27.153]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.153]                     {
[09:30:27.153]                       inherits <- base::inherits
[09:30:27.153]                       invokeRestart <- base::invokeRestart
[09:30:27.153]                       is.null <- base::is.null
[09:30:27.153]                       muffled <- FALSE
[09:30:27.153]                       if (inherits(cond, "message")) {
[09:30:27.153]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.153]                         if (muffled) 
[09:30:27.153]                           invokeRestart("muffleMessage")
[09:30:27.153]                       }
[09:30:27.153]                       else if (inherits(cond, "warning")) {
[09:30:27.153]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.153]                         if (muffled) 
[09:30:27.153]                           invokeRestart("muffleWarning")
[09:30:27.153]                       }
[09:30:27.153]                       else if (inherits(cond, "condition")) {
[09:30:27.153]                         if (!is.null(pattern)) {
[09:30:27.153]                           computeRestarts <- base::computeRestarts
[09:30:27.153]                           grepl <- base::grepl
[09:30:27.153]                           restarts <- computeRestarts(cond)
[09:30:27.153]                           for (restart in restarts) {
[09:30:27.153]                             name <- restart$name
[09:30:27.153]                             if (is.null(name)) 
[09:30:27.153]                               next
[09:30:27.153]                             if (!grepl(pattern, name)) 
[09:30:27.153]                               next
[09:30:27.153]                             invokeRestart(restart)
[09:30:27.153]                             muffled <- TRUE
[09:30:27.153]                             break
[09:30:27.153]                           }
[09:30:27.153]                         }
[09:30:27.153]                       }
[09:30:27.153]                       invisible(muffled)
[09:30:27.153]                     }
[09:30:27.153]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.153]                   }
[09:30:27.153]                 }
[09:30:27.153]                 else {
[09:30:27.153]                   if (TRUE) {
[09:30:27.153]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.153]                     {
[09:30:27.153]                       inherits <- base::inherits
[09:30:27.153]                       invokeRestart <- base::invokeRestart
[09:30:27.153]                       is.null <- base::is.null
[09:30:27.153]                       muffled <- FALSE
[09:30:27.153]                       if (inherits(cond, "message")) {
[09:30:27.153]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.153]                         if (muffled) 
[09:30:27.153]                           invokeRestart("muffleMessage")
[09:30:27.153]                       }
[09:30:27.153]                       else if (inherits(cond, "warning")) {
[09:30:27.153]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.153]                         if (muffled) 
[09:30:27.153]                           invokeRestart("muffleWarning")
[09:30:27.153]                       }
[09:30:27.153]                       else if (inherits(cond, "condition")) {
[09:30:27.153]                         if (!is.null(pattern)) {
[09:30:27.153]                           computeRestarts <- base::computeRestarts
[09:30:27.153]                           grepl <- base::grepl
[09:30:27.153]                           restarts <- computeRestarts(cond)
[09:30:27.153]                           for (restart in restarts) {
[09:30:27.153]                             name <- restart$name
[09:30:27.153]                             if (is.null(name)) 
[09:30:27.153]                               next
[09:30:27.153]                             if (!grepl(pattern, name)) 
[09:30:27.153]                               next
[09:30:27.153]                             invokeRestart(restart)
[09:30:27.153]                             muffled <- TRUE
[09:30:27.153]                             break
[09:30:27.153]                           }
[09:30:27.153]                         }
[09:30:27.153]                       }
[09:30:27.153]                       invisible(muffled)
[09:30:27.153]                     }
[09:30:27.153]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.153]                   }
[09:30:27.153]                 }
[09:30:27.153]             }
[09:30:27.153]         }))
[09:30:27.153]     }, error = function(ex) {
[09:30:27.153]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:27.153]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.153]                 ...future.rng), started = ...future.startTime, 
[09:30:27.153]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:27.153]             version = "1.8"), class = "FutureResult")
[09:30:27.153]     }, finally = {
[09:30:27.153]         if (!identical(...future.workdir, getwd())) 
[09:30:27.153]             setwd(...future.workdir)
[09:30:27.153]         {
[09:30:27.153]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:27.153]                 ...future.oldOptions$nwarnings <- NULL
[09:30:27.153]             }
[09:30:27.153]             base::options(...future.oldOptions)
[09:30:27.153]             if (.Platform$OS.type == "windows") {
[09:30:27.153]                 old_names <- names(...future.oldEnvVars)
[09:30:27.153]                 envs <- base::Sys.getenv()
[09:30:27.153]                 names <- names(envs)
[09:30:27.153]                 common <- intersect(names, old_names)
[09:30:27.153]                 added <- setdiff(names, old_names)
[09:30:27.153]                 removed <- setdiff(old_names, names)
[09:30:27.153]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:27.153]                   envs[common]]
[09:30:27.153]                 NAMES <- toupper(changed)
[09:30:27.153]                 args <- list()
[09:30:27.153]                 for (kk in seq_along(NAMES)) {
[09:30:27.153]                   name <- changed[[kk]]
[09:30:27.153]                   NAME <- NAMES[[kk]]
[09:30:27.153]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.153]                     next
[09:30:27.153]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.153]                 }
[09:30:27.153]                 NAMES <- toupper(added)
[09:30:27.153]                 for (kk in seq_along(NAMES)) {
[09:30:27.153]                   name <- added[[kk]]
[09:30:27.153]                   NAME <- NAMES[[kk]]
[09:30:27.153]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.153]                     next
[09:30:27.153]                   args[[name]] <- ""
[09:30:27.153]                 }
[09:30:27.153]                 NAMES <- toupper(removed)
[09:30:27.153]                 for (kk in seq_along(NAMES)) {
[09:30:27.153]                   name <- removed[[kk]]
[09:30:27.153]                   NAME <- NAMES[[kk]]
[09:30:27.153]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.153]                     next
[09:30:27.153]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.153]                 }
[09:30:27.153]                 if (length(args) > 0) 
[09:30:27.153]                   base::do.call(base::Sys.setenv, args = args)
[09:30:27.153]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:27.153]             }
[09:30:27.153]             else {
[09:30:27.153]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:27.153]             }
[09:30:27.153]             {
[09:30:27.153]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:27.153]                   0L) {
[09:30:27.153]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:27.153]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:27.153]                   base::options(opts)
[09:30:27.153]                 }
[09:30:27.153]                 {
[09:30:27.153]                   {
[09:30:27.153]                     NULL
[09:30:27.153]                     RNGkind("Mersenne-Twister")
[09:30:27.153]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:27.153]                       inherits = FALSE)
[09:30:27.153]                   }
[09:30:27.153]                   options(future.plan = NULL)
[09:30:27.153]                   if (is.na(NA_character_)) 
[09:30:27.153]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.153]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:27.153]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:27.153]                     .init = FALSE)
[09:30:27.153]                 }
[09:30:27.153]             }
[09:30:27.153]         }
[09:30:27.153]     })
[09:30:27.153]     if (TRUE) {
[09:30:27.153]         base::sink(type = "output", split = FALSE)
[09:30:27.153]         if (TRUE) {
[09:30:27.153]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:27.153]         }
[09:30:27.153]         else {
[09:30:27.153]             ...future.result["stdout"] <- base::list(NULL)
[09:30:27.153]         }
[09:30:27.153]         base::close(...future.stdout)
[09:30:27.153]         ...future.stdout <- NULL
[09:30:27.153]     }
[09:30:27.153]     ...future.result$conditions <- ...future.conditions
[09:30:27.153]     ...future.result$finished <- base::Sys.time()
[09:30:27.153]     ...future.result
[09:30:27.153] }
[09:30:27.154] plan(): Setting new future strategy stack:
[09:30:27.155] List of future strategies:
[09:30:27.155] 1. sequential:
[09:30:27.155]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.155]    - tweaked: FALSE
[09:30:27.155]    - call: NULL
[09:30:27.155] plan(): nbrOfWorkers() = 1
[09:30:27.156] plan(): Setting new future strategy stack:
[09:30:27.156] List of future strategies:
[09:30:27.156] 1. sequential:
[09:30:27.156]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.156]    - tweaked: FALSE
[09:30:27.156]    - call: future::plan("sequential")
[09:30:27.156] plan(): nbrOfWorkers() = 1
[09:30:27.156] SequentialFuture started (and completed)
[09:30:27.156] signalConditions() ...
[09:30:27.157]  - include = ‘immediateCondition’
[09:30:27.157]  - exclude = 
[09:30:27.157]  - resignal = FALSE
[09:30:27.157]  - Number of conditions: 1
[09:30:27.157] signalConditions() ... done
[09:30:27.157] - Launch lazy future ... done
[09:30:27.157] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[09:30:27.157] getGlobalsAndPackages() ...
[09:30:27.157] Searching for globals...
[09:30:27.158] - globals found: [2] ‘{’, ‘stop’
[09:30:27.158] Searching for globals ... DONE
[09:30:27.158] Resolving globals: FALSE
[09:30:27.159] 
[09:30:27.159] 
[09:30:27.159] getGlobalsAndPackages() ... DONE
[09:30:27.159] run() for ‘Future’ ...
[09:30:27.159] - state: ‘created’
[09:30:27.159] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:27.159] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:27.159] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:27.160]   - Field: ‘label’
[09:30:27.160]   - Field: ‘local’
[09:30:27.160]   - Field: ‘owner’
[09:30:27.160]   - Field: ‘envir’
[09:30:27.160]   - Field: ‘packages’
[09:30:27.160]   - Field: ‘gc’
[09:30:27.160]   - Field: ‘conditions’
[09:30:27.160]   - Field: ‘expr’
[09:30:27.160]   - Field: ‘uuid’
[09:30:27.160]   - Field: ‘seed’
[09:30:27.160]   - Field: ‘version’
[09:30:27.161]   - Field: ‘result’
[09:30:27.161]   - Field: ‘asynchronous’
[09:30:27.161]   - Field: ‘calls’
[09:30:27.161]   - Field: ‘globals’
[09:30:27.161]   - Field: ‘stdout’
[09:30:27.161]   - Field: ‘earlySignal’
[09:30:27.161]   - Field: ‘lazy’
[09:30:27.161]   - Field: ‘state’
[09:30:27.161] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:27.161] - Launch lazy future ...
[09:30:27.161] Packages needed by the future expression (n = 0): <none>
[09:30:27.162] Packages needed by future strategies (n = 0): <none>
[09:30:27.162] {
[09:30:27.162]     {
[09:30:27.162]         {
[09:30:27.162]             ...future.startTime <- base::Sys.time()
[09:30:27.162]             {
[09:30:27.162]                 {
[09:30:27.162]                   {
[09:30:27.162]                     base::local({
[09:30:27.162]                       has_future <- base::requireNamespace("future", 
[09:30:27.162]                         quietly = TRUE)
[09:30:27.162]                       if (has_future) {
[09:30:27.162]                         ns <- base::getNamespace("future")
[09:30:27.162]                         version <- ns[[".package"]][["version"]]
[09:30:27.162]                         if (is.null(version)) 
[09:30:27.162]                           version <- utils::packageVersion("future")
[09:30:27.162]                       }
[09:30:27.162]                       else {
[09:30:27.162]                         version <- NULL
[09:30:27.162]                       }
[09:30:27.162]                       if (!has_future || version < "1.8.0") {
[09:30:27.162]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:27.162]                           "", base::R.version$version.string), 
[09:30:27.162]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:27.162]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:27.162]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:27.162]                             "release", "version")], collapse = " "), 
[09:30:27.162]                           hostname = base::Sys.info()[["nodename"]])
[09:30:27.162]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:27.162]                           info)
[09:30:27.162]                         info <- base::paste(info, collapse = "; ")
[09:30:27.162]                         if (!has_future) {
[09:30:27.162]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:27.162]                             info)
[09:30:27.162]                         }
[09:30:27.162]                         else {
[09:30:27.162]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:27.162]                             info, version)
[09:30:27.162]                         }
[09:30:27.162]                         base::stop(msg)
[09:30:27.162]                       }
[09:30:27.162]                     })
[09:30:27.162]                   }
[09:30:27.162]                   ...future.strategy.old <- future::plan("list")
[09:30:27.162]                   options(future.plan = NULL)
[09:30:27.162]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.162]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:27.162]                 }
[09:30:27.162]                 ...future.workdir <- getwd()
[09:30:27.162]             }
[09:30:27.162]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:27.162]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:27.162]         }
[09:30:27.162]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:27.162]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:27.162]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:27.162]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:27.162]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:27.162]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:27.162]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:27.162]             base::names(...future.oldOptions))
[09:30:27.162]     }
[09:30:27.162]     if (FALSE) {
[09:30:27.162]     }
[09:30:27.162]     else {
[09:30:27.162]         if (TRUE) {
[09:30:27.162]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:27.162]                 open = "w")
[09:30:27.162]         }
[09:30:27.162]         else {
[09:30:27.162]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:27.162]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:27.162]         }
[09:30:27.162]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:27.162]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:27.162]             base::sink(type = "output", split = FALSE)
[09:30:27.162]             base::close(...future.stdout)
[09:30:27.162]         }, add = TRUE)
[09:30:27.162]     }
[09:30:27.162]     ...future.frame <- base::sys.nframe()
[09:30:27.162]     ...future.conditions <- base::list()
[09:30:27.162]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:27.162]     if (FALSE) {
[09:30:27.162]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:27.162]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:27.162]     }
[09:30:27.162]     ...future.result <- base::tryCatch({
[09:30:27.162]         base::withCallingHandlers({
[09:30:27.162]             ...future.value <- base::withVisible(base::local({
[09:30:27.162]                 42L
[09:30:27.162]                 stop("Woops")
[09:30:27.162]             }))
[09:30:27.162]             future::FutureResult(value = ...future.value$value, 
[09:30:27.162]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.162]                   ...future.rng), globalenv = if (FALSE) 
[09:30:27.162]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:27.162]                     ...future.globalenv.names))
[09:30:27.162]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:27.162]         }, condition = base::local({
[09:30:27.162]             c <- base::c
[09:30:27.162]             inherits <- base::inherits
[09:30:27.162]             invokeRestart <- base::invokeRestart
[09:30:27.162]             length <- base::length
[09:30:27.162]             list <- base::list
[09:30:27.162]             seq.int <- base::seq.int
[09:30:27.162]             signalCondition <- base::signalCondition
[09:30:27.162]             sys.calls <- base::sys.calls
[09:30:27.162]             `[[` <- base::`[[`
[09:30:27.162]             `+` <- base::`+`
[09:30:27.162]             `<<-` <- base::`<<-`
[09:30:27.162]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:27.162]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:27.162]                   3L)]
[09:30:27.162]             }
[09:30:27.162]             function(cond) {
[09:30:27.162]                 is_error <- inherits(cond, "error")
[09:30:27.162]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:27.162]                   NULL)
[09:30:27.162]                 if (is_error) {
[09:30:27.162]                   sessionInformation <- function() {
[09:30:27.162]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:27.162]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:27.162]                       search = base::search(), system = base::Sys.info())
[09:30:27.162]                   }
[09:30:27.162]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.162]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:27.162]                     cond$call), session = sessionInformation(), 
[09:30:27.162]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:27.162]                   signalCondition(cond)
[09:30:27.162]                 }
[09:30:27.162]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:27.162]                 "immediateCondition"))) {
[09:30:27.162]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:27.162]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.162]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:27.162]                   if (TRUE && !signal) {
[09:30:27.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.162]                     {
[09:30:27.162]                       inherits <- base::inherits
[09:30:27.162]                       invokeRestart <- base::invokeRestart
[09:30:27.162]                       is.null <- base::is.null
[09:30:27.162]                       muffled <- FALSE
[09:30:27.162]                       if (inherits(cond, "message")) {
[09:30:27.162]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.162]                         if (muffled) 
[09:30:27.162]                           invokeRestart("muffleMessage")
[09:30:27.162]                       }
[09:30:27.162]                       else if (inherits(cond, "warning")) {
[09:30:27.162]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.162]                         if (muffled) 
[09:30:27.162]                           invokeRestart("muffleWarning")
[09:30:27.162]                       }
[09:30:27.162]                       else if (inherits(cond, "condition")) {
[09:30:27.162]                         if (!is.null(pattern)) {
[09:30:27.162]                           computeRestarts <- base::computeRestarts
[09:30:27.162]                           grepl <- base::grepl
[09:30:27.162]                           restarts <- computeRestarts(cond)
[09:30:27.162]                           for (restart in restarts) {
[09:30:27.162]                             name <- restart$name
[09:30:27.162]                             if (is.null(name)) 
[09:30:27.162]                               next
[09:30:27.162]                             if (!grepl(pattern, name)) 
[09:30:27.162]                               next
[09:30:27.162]                             invokeRestart(restart)
[09:30:27.162]                             muffled <- TRUE
[09:30:27.162]                             break
[09:30:27.162]                           }
[09:30:27.162]                         }
[09:30:27.162]                       }
[09:30:27.162]                       invisible(muffled)
[09:30:27.162]                     }
[09:30:27.162]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.162]                   }
[09:30:27.162]                 }
[09:30:27.162]                 else {
[09:30:27.162]                   if (TRUE) {
[09:30:27.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.162]                     {
[09:30:27.162]                       inherits <- base::inherits
[09:30:27.162]                       invokeRestart <- base::invokeRestart
[09:30:27.162]                       is.null <- base::is.null
[09:30:27.162]                       muffled <- FALSE
[09:30:27.162]                       if (inherits(cond, "message")) {
[09:30:27.162]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.162]                         if (muffled) 
[09:30:27.162]                           invokeRestart("muffleMessage")
[09:30:27.162]                       }
[09:30:27.162]                       else if (inherits(cond, "warning")) {
[09:30:27.162]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.162]                         if (muffled) 
[09:30:27.162]                           invokeRestart("muffleWarning")
[09:30:27.162]                       }
[09:30:27.162]                       else if (inherits(cond, "condition")) {
[09:30:27.162]                         if (!is.null(pattern)) {
[09:30:27.162]                           computeRestarts <- base::computeRestarts
[09:30:27.162]                           grepl <- base::grepl
[09:30:27.162]                           restarts <- computeRestarts(cond)
[09:30:27.162]                           for (restart in restarts) {
[09:30:27.162]                             name <- restart$name
[09:30:27.162]                             if (is.null(name)) 
[09:30:27.162]                               next
[09:30:27.162]                             if (!grepl(pattern, name)) 
[09:30:27.162]                               next
[09:30:27.162]                             invokeRestart(restart)
[09:30:27.162]                             muffled <- TRUE
[09:30:27.162]                             break
[09:30:27.162]                           }
[09:30:27.162]                         }
[09:30:27.162]                       }
[09:30:27.162]                       invisible(muffled)
[09:30:27.162]                     }
[09:30:27.162]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.162]                   }
[09:30:27.162]                 }
[09:30:27.162]             }
[09:30:27.162]         }))
[09:30:27.162]     }, error = function(ex) {
[09:30:27.162]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:27.162]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.162]                 ...future.rng), started = ...future.startTime, 
[09:30:27.162]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:27.162]             version = "1.8"), class = "FutureResult")
[09:30:27.162]     }, finally = {
[09:30:27.162]         if (!identical(...future.workdir, getwd())) 
[09:30:27.162]             setwd(...future.workdir)
[09:30:27.162]         {
[09:30:27.162]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:27.162]                 ...future.oldOptions$nwarnings <- NULL
[09:30:27.162]             }
[09:30:27.162]             base::options(...future.oldOptions)
[09:30:27.162]             if (.Platform$OS.type == "windows") {
[09:30:27.162]                 old_names <- names(...future.oldEnvVars)
[09:30:27.162]                 envs <- base::Sys.getenv()
[09:30:27.162]                 names <- names(envs)
[09:30:27.162]                 common <- intersect(names, old_names)
[09:30:27.162]                 added <- setdiff(names, old_names)
[09:30:27.162]                 removed <- setdiff(old_names, names)
[09:30:27.162]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:27.162]                   envs[common]]
[09:30:27.162]                 NAMES <- toupper(changed)
[09:30:27.162]                 args <- list()
[09:30:27.162]                 for (kk in seq_along(NAMES)) {
[09:30:27.162]                   name <- changed[[kk]]
[09:30:27.162]                   NAME <- NAMES[[kk]]
[09:30:27.162]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.162]                     next
[09:30:27.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.162]                 }
[09:30:27.162]                 NAMES <- toupper(added)
[09:30:27.162]                 for (kk in seq_along(NAMES)) {
[09:30:27.162]                   name <- added[[kk]]
[09:30:27.162]                   NAME <- NAMES[[kk]]
[09:30:27.162]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.162]                     next
[09:30:27.162]                   args[[name]] <- ""
[09:30:27.162]                 }
[09:30:27.162]                 NAMES <- toupper(removed)
[09:30:27.162]                 for (kk in seq_along(NAMES)) {
[09:30:27.162]                   name <- removed[[kk]]
[09:30:27.162]                   NAME <- NAMES[[kk]]
[09:30:27.162]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.162]                     next
[09:30:27.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.162]                 }
[09:30:27.162]                 if (length(args) > 0) 
[09:30:27.162]                   base::do.call(base::Sys.setenv, args = args)
[09:30:27.162]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:27.162]             }
[09:30:27.162]             else {
[09:30:27.162]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:27.162]             }
[09:30:27.162]             {
[09:30:27.162]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:27.162]                   0L) {
[09:30:27.162]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:27.162]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:27.162]                   base::options(opts)
[09:30:27.162]                 }
[09:30:27.162]                 {
[09:30:27.162]                   {
[09:30:27.162]                     NULL
[09:30:27.162]                     RNGkind("Mersenne-Twister")
[09:30:27.162]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:27.162]                       inherits = FALSE)
[09:30:27.162]                   }
[09:30:27.162]                   options(future.plan = NULL)
[09:30:27.162]                   if (is.na(NA_character_)) 
[09:30:27.162]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.162]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:27.162]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:27.162]                     .init = FALSE)
[09:30:27.162]                 }
[09:30:27.162]             }
[09:30:27.162]         }
[09:30:27.162]     })
[09:30:27.162]     if (TRUE) {
[09:30:27.162]         base::sink(type = "output", split = FALSE)
[09:30:27.162]         if (TRUE) {
[09:30:27.162]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:27.162]         }
[09:30:27.162]         else {
[09:30:27.162]             ...future.result["stdout"] <- base::list(NULL)
[09:30:27.162]         }
[09:30:27.162]         base::close(...future.stdout)
[09:30:27.162]         ...future.stdout <- NULL
[09:30:27.162]     }
[09:30:27.162]     ...future.result$conditions <- ...future.conditions
[09:30:27.162]     ...future.result$finished <- base::Sys.time()
[09:30:27.162]     ...future.result
[09:30:27.162] }
[09:30:27.164] plan(): Setting new future strategy stack:
[09:30:27.164] List of future strategies:
[09:30:27.164] 1. sequential:
[09:30:27.164]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.164]    - tweaked: FALSE
[09:30:27.164]    - call: NULL
[09:30:27.164] plan(): nbrOfWorkers() = 1
[09:30:27.165] plan(): Setting new future strategy stack:
[09:30:27.165] List of future strategies:
[09:30:27.165] 1. sequential:
[09:30:27.165]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.165]    - tweaked: FALSE
[09:30:27.165]    - call: future::plan("sequential")
[09:30:27.165] plan(): nbrOfWorkers() = 1
[09:30:27.165] SequentialFuture started (and completed)
[09:30:27.166] signalConditions() ...
[09:30:27.166]  - include = ‘immediateCondition’
[09:30:27.166]  - exclude = 
[09:30:27.166]  - resignal = FALSE
[09:30:27.166]  - Number of conditions: 1
[09:30:27.166] signalConditions() ... done
[09:30:27.166] - Launch lazy future ... done
[09:30:27.166] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[09:30:27.167] resolve() on list ...
[09:30:27.167]  recursive: 0
[09:30:27.167]  length: 2
[09:30:27.167] 
[09:30:27.167] resolved() for ‘SequentialFuture’ ...
[09:30:27.167] - state: ‘finished’
[09:30:27.167] - run: TRUE
[09:30:27.167] - result: ‘FutureResult’
[09:30:27.167] resolved() for ‘SequentialFuture’ ... done
[09:30:27.168] Future #1
[09:30:27.168] signalConditions() ...
[09:30:27.168]  - include = ‘immediateCondition’
[09:30:27.168]  - exclude = 
[09:30:27.168]  - resignal = FALSE
[09:30:27.168]  - Number of conditions: 1
[09:30:27.168] signalConditions() ... done
[09:30:27.168] signalConditionsASAP(SequentialFuture, pos=1) ...
[09:30:27.168] - nx: 2
[09:30:27.168] - relay: TRUE
[09:30:27.168] - stdout: TRUE
[09:30:27.168] - signal: FALSE
[09:30:27.169] - resignal: FALSE
[09:30:27.169] - force: TRUE
[09:30:27.169] - relayed: [n=2] FALSE, FALSE
[09:30:27.169] - queued futures: [n=2] FALSE, FALSE
[09:30:27.169]  - until=1
[09:30:27.169]  - relaying element #1
[09:30:27.169] signalConditions() ...
[09:30:27.169]  - include = ‘immediateCondition’
[09:30:27.169]  - exclude = 
[09:30:27.169]  - resignal = FALSE
[09:30:27.169]  - Number of conditions: 1
[09:30:27.169] signalConditions() ... done
[09:30:27.170] - relayed: [n=2] TRUE, FALSE
[09:30:27.170] - queued futures: [n=2] TRUE, FALSE
[09:30:27.170] signalConditionsASAP(SequentialFuture, pos=1) ... done
[09:30:27.170]  length: 1 (resolved future 1)
[09:30:27.170] resolved() for ‘SequentialFuture’ ...
[09:30:27.170] - state: ‘finished’
[09:30:27.170] - run: TRUE
[09:30:27.170] - result: ‘FutureResult’
[09:30:27.170] resolved() for ‘SequentialFuture’ ... done
[09:30:27.170] Future #2
[09:30:27.171] signalConditions() ...
[09:30:27.171]  - include = ‘immediateCondition’
[09:30:27.171]  - exclude = 
[09:30:27.171]  - resignal = FALSE
[09:30:27.171]  - Number of conditions: 1
[09:30:27.171] signalConditions() ... done
[09:30:27.171] signalConditionsASAP(SequentialFuture, pos=2) ...
[09:30:27.171] - nx: 2
[09:30:27.171] - relay: TRUE
[09:30:27.171] - stdout: TRUE
[09:30:27.171] - signal: FALSE
[09:30:27.171] - resignal: FALSE
[09:30:27.172] - force: TRUE
[09:30:27.172] - relayed: [n=2] TRUE, FALSE
[09:30:27.172] - queued futures: [n=2] TRUE, FALSE
[09:30:27.172]  - until=2
[09:30:27.172]  - relaying element #2
[09:30:27.172] signalConditions() ...
[09:30:27.172]  - include = ‘immediateCondition’
[09:30:27.172]  - exclude = 
[09:30:27.172]  - resignal = FALSE
[09:30:27.172]  - Number of conditions: 1
[09:30:27.172] signalConditions() ... done
[09:30:27.172] - relayed: [n=2] TRUE, TRUE
[09:30:27.173] - queued futures: [n=2] TRUE, TRUE
[09:30:27.173] signalConditionsASAP(SequentialFuture, pos=2) ... done
[09:30:27.173]  length: 0 (resolved future 2)
[09:30:27.173] Relaying remaining futures
[09:30:27.173] signalConditionsASAP(NULL, pos=0) ...
[09:30:27.173] - nx: 2
[09:30:27.173] - relay: TRUE
[09:30:27.173] - stdout: TRUE
[09:30:27.173] - signal: FALSE
[09:30:27.173] - resignal: FALSE
[09:30:27.174] - force: TRUE
[09:30:27.174] - relayed: [n=2] TRUE, TRUE
[09:30:27.174] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:30:27.175] - relayed: [n=2] TRUE, TRUE
[09:30:27.175] - queued futures: [n=2] TRUE, TRUE
[09:30:27.175] signalConditionsASAP(NULL, pos=0) ... done
[09:30:27.175] resolve() on list ... DONE
[09:30:27.175] signalConditions() ...
[09:30:27.175]  - include = ‘immediateCondition’
[09:30:27.175]  - exclude = 
[09:30:27.175]  - resignal = FALSE
[09:30:27.175]  - Number of conditions: 1
[09:30:27.175] signalConditions() ... done
[09:30:27.176] signalConditions() ...
[09:30:27.176]  - include = ‘immediateCondition’
[09:30:27.176]  - exclude = 
[09:30:27.176]  - resignal = FALSE
[09:30:27.176]  - Number of conditions: 1
[09:30:27.176] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[09:30:27.176] resolved() for ‘SequentialFuture’ ...
[09:30:27.176] - state: ‘finished’
[09:30:27.176] - run: TRUE
[09:30:27.177] - result: ‘FutureResult’
[09:30:27.177] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[09:30:27.177] getGlobalsAndPackages() ...
[09:30:27.177] Searching for globals...
[09:30:27.177] 
[09:30:27.178] Searching for globals ... DONE
[09:30:27.178] - globals: [0] <none>
[09:30:27.178] getGlobalsAndPackages() ... DONE
[09:30:27.178] run() for ‘Future’ ...
[09:30:27.178] - state: ‘created’
[09:30:27.178] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:27.178] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:27.178] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:27.179]   - Field: ‘label’
[09:30:27.179]   - Field: ‘local’
[09:30:27.179]   - Field: ‘owner’
[09:30:27.179]   - Field: ‘envir’
[09:30:27.179]   - Field: ‘packages’
[09:30:27.179]   - Field: ‘gc’
[09:30:27.179]   - Field: ‘conditions’
[09:30:27.179]   - Field: ‘expr’
[09:30:27.179]   - Field: ‘uuid’
[09:30:27.179]   - Field: ‘seed’
[09:30:27.179]   - Field: ‘version’
[09:30:27.180]   - Field: ‘result’
[09:30:27.180]   - Field: ‘asynchronous’
[09:30:27.180]   - Field: ‘calls’
[09:30:27.180]   - Field: ‘globals’
[09:30:27.180]   - Field: ‘stdout’
[09:30:27.180]   - Field: ‘earlySignal’
[09:30:27.180]   - Field: ‘lazy’
[09:30:27.180]   - Field: ‘state’
[09:30:27.180] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:27.180] - Launch lazy future ...
[09:30:27.180] Packages needed by the future expression (n = 0): <none>
[09:30:27.181] Packages needed by future strategies (n = 0): <none>
[09:30:27.181] {
[09:30:27.181]     {
[09:30:27.181]         {
[09:30:27.181]             ...future.startTime <- base::Sys.time()
[09:30:27.181]             {
[09:30:27.181]                 {
[09:30:27.181]                   {
[09:30:27.181]                     base::local({
[09:30:27.181]                       has_future <- base::requireNamespace("future", 
[09:30:27.181]                         quietly = TRUE)
[09:30:27.181]                       if (has_future) {
[09:30:27.181]                         ns <- base::getNamespace("future")
[09:30:27.181]                         version <- ns[[".package"]][["version"]]
[09:30:27.181]                         if (is.null(version)) 
[09:30:27.181]                           version <- utils::packageVersion("future")
[09:30:27.181]                       }
[09:30:27.181]                       else {
[09:30:27.181]                         version <- NULL
[09:30:27.181]                       }
[09:30:27.181]                       if (!has_future || version < "1.8.0") {
[09:30:27.181]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:27.181]                           "", base::R.version$version.string), 
[09:30:27.181]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:27.181]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:27.181]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:27.181]                             "release", "version")], collapse = " "), 
[09:30:27.181]                           hostname = base::Sys.info()[["nodename"]])
[09:30:27.181]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:27.181]                           info)
[09:30:27.181]                         info <- base::paste(info, collapse = "; ")
[09:30:27.181]                         if (!has_future) {
[09:30:27.181]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:27.181]                             info)
[09:30:27.181]                         }
[09:30:27.181]                         else {
[09:30:27.181]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:27.181]                             info, version)
[09:30:27.181]                         }
[09:30:27.181]                         base::stop(msg)
[09:30:27.181]                       }
[09:30:27.181]                     })
[09:30:27.181]                   }
[09:30:27.181]                   ...future.strategy.old <- future::plan("list")
[09:30:27.181]                   options(future.plan = NULL)
[09:30:27.181]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.181]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:27.181]                 }
[09:30:27.181]                 ...future.workdir <- getwd()
[09:30:27.181]             }
[09:30:27.181]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:27.181]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:27.181]         }
[09:30:27.181]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:27.181]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:27.181]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:27.181]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:27.181]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:27.181]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:27.181]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:27.181]             base::names(...future.oldOptions))
[09:30:27.181]     }
[09:30:27.181]     if (FALSE) {
[09:30:27.181]     }
[09:30:27.181]     else {
[09:30:27.181]         if (TRUE) {
[09:30:27.181]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:27.181]                 open = "w")
[09:30:27.181]         }
[09:30:27.181]         else {
[09:30:27.181]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:27.181]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:27.181]         }
[09:30:27.181]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:27.181]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:27.181]             base::sink(type = "output", split = FALSE)
[09:30:27.181]             base::close(...future.stdout)
[09:30:27.181]         }, add = TRUE)
[09:30:27.181]     }
[09:30:27.181]     ...future.frame <- base::sys.nframe()
[09:30:27.181]     ...future.conditions <- base::list()
[09:30:27.181]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:27.181]     if (FALSE) {
[09:30:27.181]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:27.181]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:27.181]     }
[09:30:27.181]     ...future.result <- base::tryCatch({
[09:30:27.181]         base::withCallingHandlers({
[09:30:27.181]             ...future.value <- base::withVisible(base::local(42L))
[09:30:27.181]             future::FutureResult(value = ...future.value$value, 
[09:30:27.181]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.181]                   ...future.rng), globalenv = if (FALSE) 
[09:30:27.181]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:27.181]                     ...future.globalenv.names))
[09:30:27.181]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:27.181]         }, condition = base::local({
[09:30:27.181]             c <- base::c
[09:30:27.181]             inherits <- base::inherits
[09:30:27.181]             invokeRestart <- base::invokeRestart
[09:30:27.181]             length <- base::length
[09:30:27.181]             list <- base::list
[09:30:27.181]             seq.int <- base::seq.int
[09:30:27.181]             signalCondition <- base::signalCondition
[09:30:27.181]             sys.calls <- base::sys.calls
[09:30:27.181]             `[[` <- base::`[[`
[09:30:27.181]             `+` <- base::`+`
[09:30:27.181]             `<<-` <- base::`<<-`
[09:30:27.181]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:27.181]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:27.181]                   3L)]
[09:30:27.181]             }
[09:30:27.181]             function(cond) {
[09:30:27.181]                 is_error <- inherits(cond, "error")
[09:30:27.181]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:27.181]                   NULL)
[09:30:27.181]                 if (is_error) {
[09:30:27.181]                   sessionInformation <- function() {
[09:30:27.181]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:27.181]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:27.181]                       search = base::search(), system = base::Sys.info())
[09:30:27.181]                   }
[09:30:27.181]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.181]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:27.181]                     cond$call), session = sessionInformation(), 
[09:30:27.181]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:27.181]                   signalCondition(cond)
[09:30:27.181]                 }
[09:30:27.181]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:27.181]                 "immediateCondition"))) {
[09:30:27.181]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:27.181]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.181]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:27.181]                   if (TRUE && !signal) {
[09:30:27.181]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.181]                     {
[09:30:27.181]                       inherits <- base::inherits
[09:30:27.181]                       invokeRestart <- base::invokeRestart
[09:30:27.181]                       is.null <- base::is.null
[09:30:27.181]                       muffled <- FALSE
[09:30:27.181]                       if (inherits(cond, "message")) {
[09:30:27.181]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.181]                         if (muffled) 
[09:30:27.181]                           invokeRestart("muffleMessage")
[09:30:27.181]                       }
[09:30:27.181]                       else if (inherits(cond, "warning")) {
[09:30:27.181]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.181]                         if (muffled) 
[09:30:27.181]                           invokeRestart("muffleWarning")
[09:30:27.181]                       }
[09:30:27.181]                       else if (inherits(cond, "condition")) {
[09:30:27.181]                         if (!is.null(pattern)) {
[09:30:27.181]                           computeRestarts <- base::computeRestarts
[09:30:27.181]                           grepl <- base::grepl
[09:30:27.181]                           restarts <- computeRestarts(cond)
[09:30:27.181]                           for (restart in restarts) {
[09:30:27.181]                             name <- restart$name
[09:30:27.181]                             if (is.null(name)) 
[09:30:27.181]                               next
[09:30:27.181]                             if (!grepl(pattern, name)) 
[09:30:27.181]                               next
[09:30:27.181]                             invokeRestart(restart)
[09:30:27.181]                             muffled <- TRUE
[09:30:27.181]                             break
[09:30:27.181]                           }
[09:30:27.181]                         }
[09:30:27.181]                       }
[09:30:27.181]                       invisible(muffled)
[09:30:27.181]                     }
[09:30:27.181]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.181]                   }
[09:30:27.181]                 }
[09:30:27.181]                 else {
[09:30:27.181]                   if (TRUE) {
[09:30:27.181]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.181]                     {
[09:30:27.181]                       inherits <- base::inherits
[09:30:27.181]                       invokeRestart <- base::invokeRestart
[09:30:27.181]                       is.null <- base::is.null
[09:30:27.181]                       muffled <- FALSE
[09:30:27.181]                       if (inherits(cond, "message")) {
[09:30:27.181]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.181]                         if (muffled) 
[09:30:27.181]                           invokeRestart("muffleMessage")
[09:30:27.181]                       }
[09:30:27.181]                       else if (inherits(cond, "warning")) {
[09:30:27.181]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.181]                         if (muffled) 
[09:30:27.181]                           invokeRestart("muffleWarning")
[09:30:27.181]                       }
[09:30:27.181]                       else if (inherits(cond, "condition")) {
[09:30:27.181]                         if (!is.null(pattern)) {
[09:30:27.181]                           computeRestarts <- base::computeRestarts
[09:30:27.181]                           grepl <- base::grepl
[09:30:27.181]                           restarts <- computeRestarts(cond)
[09:30:27.181]                           for (restart in restarts) {
[09:30:27.181]                             name <- restart$name
[09:30:27.181]                             if (is.null(name)) 
[09:30:27.181]                               next
[09:30:27.181]                             if (!grepl(pattern, name)) 
[09:30:27.181]                               next
[09:30:27.181]                             invokeRestart(restart)
[09:30:27.181]                             muffled <- TRUE
[09:30:27.181]                             break
[09:30:27.181]                           }
[09:30:27.181]                         }
[09:30:27.181]                       }
[09:30:27.181]                       invisible(muffled)
[09:30:27.181]                     }
[09:30:27.181]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.181]                   }
[09:30:27.181]                 }
[09:30:27.181]             }
[09:30:27.181]         }))
[09:30:27.181]     }, error = function(ex) {
[09:30:27.181]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:27.181]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.181]                 ...future.rng), started = ...future.startTime, 
[09:30:27.181]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:27.181]             version = "1.8"), class = "FutureResult")
[09:30:27.181]     }, finally = {
[09:30:27.181]         if (!identical(...future.workdir, getwd())) 
[09:30:27.181]             setwd(...future.workdir)
[09:30:27.181]         {
[09:30:27.181]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:27.181]                 ...future.oldOptions$nwarnings <- NULL
[09:30:27.181]             }
[09:30:27.181]             base::options(...future.oldOptions)
[09:30:27.181]             if (.Platform$OS.type == "windows") {
[09:30:27.181]                 old_names <- names(...future.oldEnvVars)
[09:30:27.181]                 envs <- base::Sys.getenv()
[09:30:27.181]                 names <- names(envs)
[09:30:27.181]                 common <- intersect(names, old_names)
[09:30:27.181]                 added <- setdiff(names, old_names)
[09:30:27.181]                 removed <- setdiff(old_names, names)
[09:30:27.181]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:27.181]                   envs[common]]
[09:30:27.181]                 NAMES <- toupper(changed)
[09:30:27.181]                 args <- list()
[09:30:27.181]                 for (kk in seq_along(NAMES)) {
[09:30:27.181]                   name <- changed[[kk]]
[09:30:27.181]                   NAME <- NAMES[[kk]]
[09:30:27.181]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.181]                     next
[09:30:27.181]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.181]                 }
[09:30:27.181]                 NAMES <- toupper(added)
[09:30:27.181]                 for (kk in seq_along(NAMES)) {
[09:30:27.181]                   name <- added[[kk]]
[09:30:27.181]                   NAME <- NAMES[[kk]]
[09:30:27.181]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.181]                     next
[09:30:27.181]                   args[[name]] <- ""
[09:30:27.181]                 }
[09:30:27.181]                 NAMES <- toupper(removed)
[09:30:27.181]                 for (kk in seq_along(NAMES)) {
[09:30:27.181]                   name <- removed[[kk]]
[09:30:27.181]                   NAME <- NAMES[[kk]]
[09:30:27.181]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.181]                     next
[09:30:27.181]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.181]                 }
[09:30:27.181]                 if (length(args) > 0) 
[09:30:27.181]                   base::do.call(base::Sys.setenv, args = args)
[09:30:27.181]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:27.181]             }
[09:30:27.181]             else {
[09:30:27.181]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:27.181]             }
[09:30:27.181]             {
[09:30:27.181]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:27.181]                   0L) {
[09:30:27.181]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:27.181]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:27.181]                   base::options(opts)
[09:30:27.181]                 }
[09:30:27.181]                 {
[09:30:27.181]                   {
[09:30:27.181]                     NULL
[09:30:27.181]                     RNGkind("Mersenne-Twister")
[09:30:27.181]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:27.181]                       inherits = FALSE)
[09:30:27.181]                   }
[09:30:27.181]                   options(future.plan = NULL)
[09:30:27.181]                   if (is.na(NA_character_)) 
[09:30:27.181]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.181]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:27.181]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:27.181]                     .init = FALSE)
[09:30:27.181]                 }
[09:30:27.181]             }
[09:30:27.181]         }
[09:30:27.181]     })
[09:30:27.181]     if (TRUE) {
[09:30:27.181]         base::sink(type = "output", split = FALSE)
[09:30:27.181]         if (TRUE) {
[09:30:27.181]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:27.181]         }
[09:30:27.181]         else {
[09:30:27.181]             ...future.result["stdout"] <- base::list(NULL)
[09:30:27.181]         }
[09:30:27.181]         base::close(...future.stdout)
[09:30:27.181]         ...future.stdout <- NULL
[09:30:27.181]     }
[09:30:27.181]     ...future.result$conditions <- ...future.conditions
[09:30:27.181]     ...future.result$finished <- base::Sys.time()
[09:30:27.181]     ...future.result
[09:30:27.181] }
[09:30:27.183] plan(): Setting new future strategy stack:
[09:30:27.183] List of future strategies:
[09:30:27.183] 1. sequential:
[09:30:27.183]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.183]    - tweaked: FALSE
[09:30:27.183]    - call: NULL
[09:30:27.183] plan(): nbrOfWorkers() = 1
[09:30:27.184] plan(): Setting new future strategy stack:
[09:30:27.184] List of future strategies:
[09:30:27.184] 1. sequential:
[09:30:27.184]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.184]    - tweaked: FALSE
[09:30:27.184]    - call: future::plan("sequential")
[09:30:27.185] plan(): nbrOfWorkers() = 1
[09:30:27.185] SequentialFuture started (and completed)
[09:30:27.185] - Launch lazy future ... done
[09:30:27.185] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[09:30:27.185] resolved() for ‘SequentialFuture’ ...
[09:30:27.185] - state: ‘finished’
[09:30:27.185] - run: TRUE
[09:30:27.185] - result: ‘FutureResult’
[09:30:27.185] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[09:30:27.186] getGlobalsAndPackages() ...
[09:30:27.186] Searching for globals...
[09:30:27.187] - globals found: [2] ‘{’, ‘stop’
[09:30:27.187] Searching for globals ... DONE
[09:30:27.187] Resolving globals: FALSE
[09:30:27.187] 
[09:30:27.187] 
[09:30:27.187] getGlobalsAndPackages() ... DONE
[09:30:27.188] run() for ‘Future’ ...
[09:30:27.188] - state: ‘created’
[09:30:27.188] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:27.188] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:27.188] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:27.188]   - Field: ‘label’
[09:30:27.188]   - Field: ‘local’
[09:30:27.188]   - Field: ‘owner’
[09:30:27.188]   - Field: ‘envir’
[09:30:27.189]   - Field: ‘packages’
[09:30:27.189]   - Field: ‘gc’
[09:30:27.189]   - Field: ‘conditions’
[09:30:27.189]   - Field: ‘expr’
[09:30:27.189]   - Field: ‘uuid’
[09:30:27.189]   - Field: ‘seed’
[09:30:27.189]   - Field: ‘version’
[09:30:27.189]   - Field: ‘result’
[09:30:27.189]   - Field: ‘asynchronous’
[09:30:27.189]   - Field: ‘calls’
[09:30:27.189]   - Field: ‘globals’
[09:30:27.189]   - Field: ‘stdout’
[09:30:27.190]   - Field: ‘earlySignal’
[09:30:27.190]   - Field: ‘lazy’
[09:30:27.190]   - Field: ‘state’
[09:30:27.190] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:27.190] - Launch lazy future ...
[09:30:27.190] Packages needed by the future expression (n = 0): <none>
[09:30:27.190] Packages needed by future strategies (n = 0): <none>
[09:30:27.190] {
[09:30:27.190]     {
[09:30:27.190]         {
[09:30:27.190]             ...future.startTime <- base::Sys.time()
[09:30:27.190]             {
[09:30:27.190]                 {
[09:30:27.190]                   {
[09:30:27.190]                     base::local({
[09:30:27.190]                       has_future <- base::requireNamespace("future", 
[09:30:27.190]                         quietly = TRUE)
[09:30:27.190]                       if (has_future) {
[09:30:27.190]                         ns <- base::getNamespace("future")
[09:30:27.190]                         version <- ns[[".package"]][["version"]]
[09:30:27.190]                         if (is.null(version)) 
[09:30:27.190]                           version <- utils::packageVersion("future")
[09:30:27.190]                       }
[09:30:27.190]                       else {
[09:30:27.190]                         version <- NULL
[09:30:27.190]                       }
[09:30:27.190]                       if (!has_future || version < "1.8.0") {
[09:30:27.190]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:27.190]                           "", base::R.version$version.string), 
[09:30:27.190]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:27.190]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:27.190]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:27.190]                             "release", "version")], collapse = " "), 
[09:30:27.190]                           hostname = base::Sys.info()[["nodename"]])
[09:30:27.190]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:27.190]                           info)
[09:30:27.190]                         info <- base::paste(info, collapse = "; ")
[09:30:27.190]                         if (!has_future) {
[09:30:27.190]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:27.190]                             info)
[09:30:27.190]                         }
[09:30:27.190]                         else {
[09:30:27.190]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:27.190]                             info, version)
[09:30:27.190]                         }
[09:30:27.190]                         base::stop(msg)
[09:30:27.190]                       }
[09:30:27.190]                     })
[09:30:27.190]                   }
[09:30:27.190]                   ...future.strategy.old <- future::plan("list")
[09:30:27.190]                   options(future.plan = NULL)
[09:30:27.190]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.190]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:27.190]                 }
[09:30:27.190]                 ...future.workdir <- getwd()
[09:30:27.190]             }
[09:30:27.190]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:27.190]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:27.190]         }
[09:30:27.190]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:27.190]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:27.190]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:27.190]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:27.190]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:27.190]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:27.190]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:27.190]             base::names(...future.oldOptions))
[09:30:27.190]     }
[09:30:27.190]     if (FALSE) {
[09:30:27.190]     }
[09:30:27.190]     else {
[09:30:27.190]         if (TRUE) {
[09:30:27.190]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:27.190]                 open = "w")
[09:30:27.190]         }
[09:30:27.190]         else {
[09:30:27.190]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:27.190]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:27.190]         }
[09:30:27.190]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:27.190]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:27.190]             base::sink(type = "output", split = FALSE)
[09:30:27.190]             base::close(...future.stdout)
[09:30:27.190]         }, add = TRUE)
[09:30:27.190]     }
[09:30:27.190]     ...future.frame <- base::sys.nframe()
[09:30:27.190]     ...future.conditions <- base::list()
[09:30:27.190]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:27.190]     if (FALSE) {
[09:30:27.190]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:27.190]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:27.190]     }
[09:30:27.190]     ...future.result <- base::tryCatch({
[09:30:27.190]         base::withCallingHandlers({
[09:30:27.190]             ...future.value <- base::withVisible(base::local({
[09:30:27.190]                 42L
[09:30:27.190]                 stop("Woops")
[09:30:27.190]             }))
[09:30:27.190]             future::FutureResult(value = ...future.value$value, 
[09:30:27.190]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.190]                   ...future.rng), globalenv = if (FALSE) 
[09:30:27.190]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:27.190]                     ...future.globalenv.names))
[09:30:27.190]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:27.190]         }, condition = base::local({
[09:30:27.190]             c <- base::c
[09:30:27.190]             inherits <- base::inherits
[09:30:27.190]             invokeRestart <- base::invokeRestart
[09:30:27.190]             length <- base::length
[09:30:27.190]             list <- base::list
[09:30:27.190]             seq.int <- base::seq.int
[09:30:27.190]             signalCondition <- base::signalCondition
[09:30:27.190]             sys.calls <- base::sys.calls
[09:30:27.190]             `[[` <- base::`[[`
[09:30:27.190]             `+` <- base::`+`
[09:30:27.190]             `<<-` <- base::`<<-`
[09:30:27.190]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:27.190]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:27.190]                   3L)]
[09:30:27.190]             }
[09:30:27.190]             function(cond) {
[09:30:27.190]                 is_error <- inherits(cond, "error")
[09:30:27.190]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:27.190]                   NULL)
[09:30:27.190]                 if (is_error) {
[09:30:27.190]                   sessionInformation <- function() {
[09:30:27.190]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:27.190]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:27.190]                       search = base::search(), system = base::Sys.info())
[09:30:27.190]                   }
[09:30:27.190]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.190]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:27.190]                     cond$call), session = sessionInformation(), 
[09:30:27.190]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:27.190]                   signalCondition(cond)
[09:30:27.190]                 }
[09:30:27.190]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:27.190]                 "immediateCondition"))) {
[09:30:27.190]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:27.190]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.190]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:27.190]                   if (TRUE && !signal) {
[09:30:27.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.190]                     {
[09:30:27.190]                       inherits <- base::inherits
[09:30:27.190]                       invokeRestart <- base::invokeRestart
[09:30:27.190]                       is.null <- base::is.null
[09:30:27.190]                       muffled <- FALSE
[09:30:27.190]                       if (inherits(cond, "message")) {
[09:30:27.190]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.190]                         if (muffled) 
[09:30:27.190]                           invokeRestart("muffleMessage")
[09:30:27.190]                       }
[09:30:27.190]                       else if (inherits(cond, "warning")) {
[09:30:27.190]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.190]                         if (muffled) 
[09:30:27.190]                           invokeRestart("muffleWarning")
[09:30:27.190]                       }
[09:30:27.190]                       else if (inherits(cond, "condition")) {
[09:30:27.190]                         if (!is.null(pattern)) {
[09:30:27.190]                           computeRestarts <- base::computeRestarts
[09:30:27.190]                           grepl <- base::grepl
[09:30:27.190]                           restarts <- computeRestarts(cond)
[09:30:27.190]                           for (restart in restarts) {
[09:30:27.190]                             name <- restart$name
[09:30:27.190]                             if (is.null(name)) 
[09:30:27.190]                               next
[09:30:27.190]                             if (!grepl(pattern, name)) 
[09:30:27.190]                               next
[09:30:27.190]                             invokeRestart(restart)
[09:30:27.190]                             muffled <- TRUE
[09:30:27.190]                             break
[09:30:27.190]                           }
[09:30:27.190]                         }
[09:30:27.190]                       }
[09:30:27.190]                       invisible(muffled)
[09:30:27.190]                     }
[09:30:27.190]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.190]                   }
[09:30:27.190]                 }
[09:30:27.190]                 else {
[09:30:27.190]                   if (TRUE) {
[09:30:27.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.190]                     {
[09:30:27.190]                       inherits <- base::inherits
[09:30:27.190]                       invokeRestart <- base::invokeRestart
[09:30:27.190]                       is.null <- base::is.null
[09:30:27.190]                       muffled <- FALSE
[09:30:27.190]                       if (inherits(cond, "message")) {
[09:30:27.190]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.190]                         if (muffled) 
[09:30:27.190]                           invokeRestart("muffleMessage")
[09:30:27.190]                       }
[09:30:27.190]                       else if (inherits(cond, "warning")) {
[09:30:27.190]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.190]                         if (muffled) 
[09:30:27.190]                           invokeRestart("muffleWarning")
[09:30:27.190]                       }
[09:30:27.190]                       else if (inherits(cond, "condition")) {
[09:30:27.190]                         if (!is.null(pattern)) {
[09:30:27.190]                           computeRestarts <- base::computeRestarts
[09:30:27.190]                           grepl <- base::grepl
[09:30:27.190]                           restarts <- computeRestarts(cond)
[09:30:27.190]                           for (restart in restarts) {
[09:30:27.190]                             name <- restart$name
[09:30:27.190]                             if (is.null(name)) 
[09:30:27.190]                               next
[09:30:27.190]                             if (!grepl(pattern, name)) 
[09:30:27.190]                               next
[09:30:27.190]                             invokeRestart(restart)
[09:30:27.190]                             muffled <- TRUE
[09:30:27.190]                             break
[09:30:27.190]                           }
[09:30:27.190]                         }
[09:30:27.190]                       }
[09:30:27.190]                       invisible(muffled)
[09:30:27.190]                     }
[09:30:27.190]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.190]                   }
[09:30:27.190]                 }
[09:30:27.190]             }
[09:30:27.190]         }))
[09:30:27.190]     }, error = function(ex) {
[09:30:27.190]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:27.190]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.190]                 ...future.rng), started = ...future.startTime, 
[09:30:27.190]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:27.190]             version = "1.8"), class = "FutureResult")
[09:30:27.190]     }, finally = {
[09:30:27.190]         if (!identical(...future.workdir, getwd())) 
[09:30:27.190]             setwd(...future.workdir)
[09:30:27.190]         {
[09:30:27.190]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:27.190]                 ...future.oldOptions$nwarnings <- NULL
[09:30:27.190]             }
[09:30:27.190]             base::options(...future.oldOptions)
[09:30:27.190]             if (.Platform$OS.type == "windows") {
[09:30:27.190]                 old_names <- names(...future.oldEnvVars)
[09:30:27.190]                 envs <- base::Sys.getenv()
[09:30:27.190]                 names <- names(envs)
[09:30:27.190]                 common <- intersect(names, old_names)
[09:30:27.190]                 added <- setdiff(names, old_names)
[09:30:27.190]                 removed <- setdiff(old_names, names)
[09:30:27.190]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:27.190]                   envs[common]]
[09:30:27.190]                 NAMES <- toupper(changed)
[09:30:27.190]                 args <- list()
[09:30:27.190]                 for (kk in seq_along(NAMES)) {
[09:30:27.190]                   name <- changed[[kk]]
[09:30:27.190]                   NAME <- NAMES[[kk]]
[09:30:27.190]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.190]                     next
[09:30:27.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.190]                 }
[09:30:27.190]                 NAMES <- toupper(added)
[09:30:27.190]                 for (kk in seq_along(NAMES)) {
[09:30:27.190]                   name <- added[[kk]]
[09:30:27.190]                   NAME <- NAMES[[kk]]
[09:30:27.190]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.190]                     next
[09:30:27.190]                   args[[name]] <- ""
[09:30:27.190]                 }
[09:30:27.190]                 NAMES <- toupper(removed)
[09:30:27.190]                 for (kk in seq_along(NAMES)) {
[09:30:27.190]                   name <- removed[[kk]]
[09:30:27.190]                   NAME <- NAMES[[kk]]
[09:30:27.190]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.190]                     next
[09:30:27.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.190]                 }
[09:30:27.190]                 if (length(args) > 0) 
[09:30:27.190]                   base::do.call(base::Sys.setenv, args = args)
[09:30:27.190]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:27.190]             }
[09:30:27.190]             else {
[09:30:27.190]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:27.190]             }
[09:30:27.190]             {
[09:30:27.190]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:27.190]                   0L) {
[09:30:27.190]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:27.190]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:27.190]                   base::options(opts)
[09:30:27.190]                 }
[09:30:27.190]                 {
[09:30:27.190]                   {
[09:30:27.190]                     NULL
[09:30:27.190]                     RNGkind("Mersenne-Twister")
[09:30:27.190]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:27.190]                       inherits = FALSE)
[09:30:27.190]                   }
[09:30:27.190]                   options(future.plan = NULL)
[09:30:27.190]                   if (is.na(NA_character_)) 
[09:30:27.190]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.190]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:27.190]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:27.190]                     .init = FALSE)
[09:30:27.190]                 }
[09:30:27.190]             }
[09:30:27.190]         }
[09:30:27.190]     })
[09:30:27.190]     if (TRUE) {
[09:30:27.190]         base::sink(type = "output", split = FALSE)
[09:30:27.190]         if (TRUE) {
[09:30:27.190]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:27.190]         }
[09:30:27.190]         else {
[09:30:27.190]             ...future.result["stdout"] <- base::list(NULL)
[09:30:27.190]         }
[09:30:27.190]         base::close(...future.stdout)
[09:30:27.190]         ...future.stdout <- NULL
[09:30:27.190]     }
[09:30:27.190]     ...future.result$conditions <- ...future.conditions
[09:30:27.190]     ...future.result$finished <- base::Sys.time()
[09:30:27.190]     ...future.result
[09:30:27.190] }
[09:30:27.192] plan(): Setting new future strategy stack:
[09:30:27.192] List of future strategies:
[09:30:27.192] 1. sequential:
[09:30:27.192]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.192]    - tweaked: FALSE
[09:30:27.192]    - call: NULL
[09:30:27.193] plan(): nbrOfWorkers() = 1
[09:30:27.193] plan(): Setting new future strategy stack:
[09:30:27.193] List of future strategies:
[09:30:27.193] 1. sequential:
[09:30:27.193]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:27.193]    - tweaked: FALSE
[09:30:27.193]    - call: future::plan("sequential")
[09:30:27.194] plan(): nbrOfWorkers() = 1
[09:30:27.194] SequentialFuture started (and completed)
[09:30:27.194] signalConditions() ...
[09:30:27.194]  - include = ‘immediateCondition’
[09:30:27.194]  - exclude = 
[09:30:27.194]  - resignal = FALSE
[09:30:27.194]  - Number of conditions: 1
[09:30:27.195] signalConditions() ... done
[09:30:27.195] - Launch lazy future ... done
[09:30:27.195] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[09:30:27.195] signalConditions() ...
[09:30:27.195]  - include = ‘immediateCondition’
[09:30:27.195]  - exclude = 
[09:30:27.195]  - resignal = FALSE
[09:30:27.195]  - Number of conditions: 1
[09:30:27.195] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[09:30:27.201] plan(): Setting new future strategy stack:
[09:30:27.201] List of future strategies:
[09:30:27.201] 1. multisession:
[09:30:27.201]    - args: function (..., workers = 2L, envir = parent.frame())
[09:30:27.201]    - tweaked: TRUE
[09:30:27.201]    - call: plan(multisession, workers = 2L)
[09:30:27.213] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:30:27.213] multisession:
[09:30:27.213] - args: function (..., workers = 2L, envir = parent.frame())
[09:30:27.213] - tweaked: TRUE
[09:30:27.213] - call: plan(multisession, workers = 2L)
[09:30:27.213] getGlobalsAndPackages() ...
[09:30:27.213] Not searching for globals
[09:30:27.214] - globals: [0] <none>
[09:30:27.214] getGlobalsAndPackages() ... DONE
[09:30:27.214] [local output] makeClusterPSOCK() ...
[09:30:27.245] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:30:27.246] [local output] Base port: 11649
[09:30:27.246] [local output] Getting setup options for 2 cluster nodes ...
[09:30:27.247] [local output]  - Node 1 of 2 ...
[09:30:27.247] [local output] localMachine=TRUE => revtunnel=FALSE

[09:30:27.248] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpRmKwTL/worker.rank=1.parallelly.parent=38803.979350fada8c.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpRmKwTL/worker.rank=1.parallelly.parent=38803.979350fada8c.pid")'’
[09:30:27.433] - Possible to infer worker's PID: TRUE
[09:30:27.433] [local output] Rscript port: 11649

[09:30:27.434] [local output]  - Node 2 of 2 ...
[09:30:27.434] [local output] localMachine=TRUE => revtunnel=FALSE

[09:30:27.435] [local output] Rscript port: 11649

[09:30:27.435] [local output] Getting setup options for 2 cluster nodes ... done
[09:30:27.435] [local output]  - Parallel setup requested for some PSOCK nodes
[09:30:27.436] [local output] Setting up PSOCK nodes in parallel
[09:30:27.436] List of 36
[09:30:27.436]  $ worker          : chr "localhost"
[09:30:27.436]   ..- attr(*, "localhost")= logi TRUE
[09:30:27.436]  $ master          : chr "localhost"
[09:30:27.436]  $ port            : int 11649
[09:30:27.436]  $ connectTimeout  : num 120
[09:30:27.436]  $ timeout         : num 2592000
[09:30:27.436]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:30:27.436]  $ homogeneous     : logi TRUE
[09:30:27.436]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:30:27.436]  $ rscript_envs    : NULL
[09:30:27.436]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:30:27.436]  $ rscript_startup : NULL
[09:30:27.436]  $ rscript_sh      : chr "sh"
[09:30:27.436]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:30:27.436]  $ methods         : logi TRUE
[09:30:27.436]  $ socketOptions   : chr "no-delay"
[09:30:27.436]  $ useXDR          : logi FALSE
[09:30:27.436]  $ outfile         : chr "/dev/null"
[09:30:27.436]  $ renice          : int NA
[09:30:27.436]  $ rshcmd          : NULL
[09:30:27.436]  $ user            : chr(0) 
[09:30:27.436]  $ revtunnel       : logi FALSE
[09:30:27.436]  $ rshlogfile      : NULL
[09:30:27.436]  $ rshopts         : chr(0) 
[09:30:27.436]  $ rank            : int 1
[09:30:27.436]  $ manual          : logi FALSE
[09:30:27.436]  $ dryrun          : logi FALSE
[09:30:27.436]  $ quiet           : logi FALSE
[09:30:27.436]  $ setup_strategy  : chr "parallel"
[09:30:27.436]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:30:27.436]  $ pidfile         : chr "/tmp/RtmpRmKwTL/worker.rank=1.parallelly.parent=38803.979350fada8c.pid"
[09:30:27.436]  $ rshcmd_label    : NULL
[09:30:27.436]  $ rsh_call        : NULL
[09:30:27.436]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:30:27.436]  $ localMachine    : logi TRUE
[09:30:27.436]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:30:27.436]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:30:27.436]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:30:27.436]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:30:27.436]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:30:27.436]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:30:27.436]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:30:27.436]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:30:27.436]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:30:27.436]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:30:27.436]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:30:27.436]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:30:27.436]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:30:27.436]  $ arguments       :List of 28
[09:30:27.436]   ..$ worker          : chr "localhost"
[09:30:27.436]   ..$ master          : NULL
[09:30:27.436]   ..$ port            : int 11649
[09:30:27.436]   ..$ connectTimeout  : num 120
[09:30:27.436]   ..$ timeout         : num 2592000
[09:30:27.436]   ..$ rscript         : NULL
[09:30:27.436]   ..$ homogeneous     : NULL
[09:30:27.436]   ..$ rscript_args    : NULL
[09:30:27.436]   ..$ rscript_envs    : NULL
[09:30:27.436]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:30:27.436]   ..$ rscript_startup : NULL
[09:30:27.436]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:30:27.436]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:30:27.436]   ..$ methods         : logi TRUE
[09:30:27.436]   ..$ socketOptions   : chr "no-delay"
[09:30:27.436]   ..$ useXDR          : logi FALSE
[09:30:27.436]   ..$ outfile         : chr "/dev/null"
[09:30:27.436]   ..$ renice          : int NA
[09:30:27.436]   ..$ rshcmd          : NULL
[09:30:27.436]   ..$ user            : NULL
[09:30:27.436]   ..$ revtunnel       : logi NA
[09:30:27.436]   ..$ rshlogfile      : NULL
[09:30:27.436]   ..$ rshopts         : NULL
[09:30:27.436]   ..$ rank            : int 1
[09:30:27.436]   ..$ manual          : logi FALSE
[09:30:27.436]   ..$ dryrun          : logi FALSE
[09:30:27.436]   ..$ quiet           : logi FALSE
[09:30:27.436]   ..$ setup_strategy  : chr "parallel"
[09:30:27.436]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:30:27.454] [local output] System call to launch all workers:
[09:30:27.454] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpRmKwTL/worker.rank=1.parallelly.parent=38803.979350fada8c.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11649 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:30:27.454] [local output] Starting PSOCK main server
[09:30:27.460] [local output] Workers launched
[09:30:27.460] [local output] Waiting for workers to connect back
[09:30:27.460]  - [local output] 0 workers out of 2 ready
[09:30:27.711]  - [local output] 0 workers out of 2 ready
[09:30:27.711]  - [local output] 1 workers out of 2 ready
[09:30:27.712]  - [local output] 2 workers out of 2 ready
[09:30:27.712] [local output] Launching of workers completed
[09:30:27.712] [local output] Collecting session information from workers
[09:30:27.713] [local output]  - Worker #1 of 2
[09:30:27.713] [local output]  - Worker #2 of 2
[09:30:27.713] [local output] makeClusterPSOCK() ... done
[09:30:27.726] Packages needed by the future expression (n = 0): <none>
[09:30:27.726] Packages needed by future strategies (n = 0): <none>
[09:30:27.727] {
[09:30:27.727]     {
[09:30:27.727]         {
[09:30:27.727]             ...future.startTime <- base::Sys.time()
[09:30:27.727]             {
[09:30:27.727]                 {
[09:30:27.727]                   {
[09:30:27.727]                     {
[09:30:27.727]                       base::local({
[09:30:27.727]                         has_future <- base::requireNamespace("future", 
[09:30:27.727]                           quietly = TRUE)
[09:30:27.727]                         if (has_future) {
[09:30:27.727]                           ns <- base::getNamespace("future")
[09:30:27.727]                           version <- ns[[".package"]][["version"]]
[09:30:27.727]                           if (is.null(version)) 
[09:30:27.727]                             version <- utils::packageVersion("future")
[09:30:27.727]                         }
[09:30:27.727]                         else {
[09:30:27.727]                           version <- NULL
[09:30:27.727]                         }
[09:30:27.727]                         if (!has_future || version < "1.8.0") {
[09:30:27.727]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:27.727]                             "", base::R.version$version.string), 
[09:30:27.727]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:27.727]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:27.727]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:27.727]                               "release", "version")], collapse = " "), 
[09:30:27.727]                             hostname = base::Sys.info()[["nodename"]])
[09:30:27.727]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:27.727]                             info)
[09:30:27.727]                           info <- base::paste(info, collapse = "; ")
[09:30:27.727]                           if (!has_future) {
[09:30:27.727]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:27.727]                               info)
[09:30:27.727]                           }
[09:30:27.727]                           else {
[09:30:27.727]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:27.727]                               info, version)
[09:30:27.727]                           }
[09:30:27.727]                           base::stop(msg)
[09:30:27.727]                         }
[09:30:27.727]                       })
[09:30:27.727]                     }
[09:30:27.727]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:27.727]                     base::options(mc.cores = 1L)
[09:30:27.727]                   }
[09:30:27.727]                   ...future.strategy.old <- future::plan("list")
[09:30:27.727]                   options(future.plan = NULL)
[09:30:27.727]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.727]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:27.727]                 }
[09:30:27.727]                 ...future.workdir <- getwd()
[09:30:27.727]             }
[09:30:27.727]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:27.727]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:27.727]         }
[09:30:27.727]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:27.727]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:27.727]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:27.727]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:27.727]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:27.727]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:27.727]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:27.727]             base::names(...future.oldOptions))
[09:30:27.727]     }
[09:30:27.727]     if (FALSE) {
[09:30:27.727]     }
[09:30:27.727]     else {
[09:30:27.727]         if (TRUE) {
[09:30:27.727]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:27.727]                 open = "w")
[09:30:27.727]         }
[09:30:27.727]         else {
[09:30:27.727]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:27.727]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:27.727]         }
[09:30:27.727]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:27.727]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:27.727]             base::sink(type = "output", split = FALSE)
[09:30:27.727]             base::close(...future.stdout)
[09:30:27.727]         }, add = TRUE)
[09:30:27.727]     }
[09:30:27.727]     ...future.frame <- base::sys.nframe()
[09:30:27.727]     ...future.conditions <- base::list()
[09:30:27.727]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:27.727]     if (FALSE) {
[09:30:27.727]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:27.727]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:27.727]     }
[09:30:27.727]     ...future.result <- base::tryCatch({
[09:30:27.727]         base::withCallingHandlers({
[09:30:27.727]             ...future.value <- base::withVisible(base::local({
[09:30:27.727]                 ...future.makeSendCondition <- base::local({
[09:30:27.727]                   sendCondition <- NULL
[09:30:27.727]                   function(frame = 1L) {
[09:30:27.727]                     if (is.function(sendCondition)) 
[09:30:27.727]                       return(sendCondition)
[09:30:27.727]                     ns <- getNamespace("parallel")
[09:30:27.727]                     if (exists("sendData", mode = "function", 
[09:30:27.727]                       envir = ns)) {
[09:30:27.727]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:27.727]                         envir = ns)
[09:30:27.727]                       envir <- sys.frame(frame)
[09:30:27.727]                       master <- NULL
[09:30:27.727]                       while (!identical(envir, .GlobalEnv) && 
[09:30:27.727]                         !identical(envir, emptyenv())) {
[09:30:27.727]                         if (exists("master", mode = "list", envir = envir, 
[09:30:27.727]                           inherits = FALSE)) {
[09:30:27.727]                           master <- get("master", mode = "list", 
[09:30:27.727]                             envir = envir, inherits = FALSE)
[09:30:27.727]                           if (inherits(master, c("SOCKnode", 
[09:30:27.727]                             "SOCK0node"))) {
[09:30:27.727]                             sendCondition <<- function(cond) {
[09:30:27.727]                               data <- list(type = "VALUE", value = cond, 
[09:30:27.727]                                 success = TRUE)
[09:30:27.727]                               parallel_sendData(master, data)
[09:30:27.727]                             }
[09:30:27.727]                             return(sendCondition)
[09:30:27.727]                           }
[09:30:27.727]                         }
[09:30:27.727]                         frame <- frame + 1L
[09:30:27.727]                         envir <- sys.frame(frame)
[09:30:27.727]                       }
[09:30:27.727]                     }
[09:30:27.727]                     sendCondition <<- function(cond) NULL
[09:30:27.727]                   }
[09:30:27.727]                 })
[09:30:27.727]                 withCallingHandlers({
[09:30:27.727]                   NA
[09:30:27.727]                 }, immediateCondition = function(cond) {
[09:30:27.727]                   sendCondition <- ...future.makeSendCondition()
[09:30:27.727]                   sendCondition(cond)
[09:30:27.727]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.727]                   {
[09:30:27.727]                     inherits <- base::inherits
[09:30:27.727]                     invokeRestart <- base::invokeRestart
[09:30:27.727]                     is.null <- base::is.null
[09:30:27.727]                     muffled <- FALSE
[09:30:27.727]                     if (inherits(cond, "message")) {
[09:30:27.727]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:27.727]                       if (muffled) 
[09:30:27.727]                         invokeRestart("muffleMessage")
[09:30:27.727]                     }
[09:30:27.727]                     else if (inherits(cond, "warning")) {
[09:30:27.727]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:27.727]                       if (muffled) 
[09:30:27.727]                         invokeRestart("muffleWarning")
[09:30:27.727]                     }
[09:30:27.727]                     else if (inherits(cond, "condition")) {
[09:30:27.727]                       if (!is.null(pattern)) {
[09:30:27.727]                         computeRestarts <- base::computeRestarts
[09:30:27.727]                         grepl <- base::grepl
[09:30:27.727]                         restarts <- computeRestarts(cond)
[09:30:27.727]                         for (restart in restarts) {
[09:30:27.727]                           name <- restart$name
[09:30:27.727]                           if (is.null(name)) 
[09:30:27.727]                             next
[09:30:27.727]                           if (!grepl(pattern, name)) 
[09:30:27.727]                             next
[09:30:27.727]                           invokeRestart(restart)
[09:30:27.727]                           muffled <- TRUE
[09:30:27.727]                           break
[09:30:27.727]                         }
[09:30:27.727]                       }
[09:30:27.727]                     }
[09:30:27.727]                     invisible(muffled)
[09:30:27.727]                   }
[09:30:27.727]                   muffleCondition(cond)
[09:30:27.727]                 })
[09:30:27.727]             }))
[09:30:27.727]             future::FutureResult(value = ...future.value$value, 
[09:30:27.727]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.727]                   ...future.rng), globalenv = if (FALSE) 
[09:30:27.727]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:27.727]                     ...future.globalenv.names))
[09:30:27.727]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:27.727]         }, condition = base::local({
[09:30:27.727]             c <- base::c
[09:30:27.727]             inherits <- base::inherits
[09:30:27.727]             invokeRestart <- base::invokeRestart
[09:30:27.727]             length <- base::length
[09:30:27.727]             list <- base::list
[09:30:27.727]             seq.int <- base::seq.int
[09:30:27.727]             signalCondition <- base::signalCondition
[09:30:27.727]             sys.calls <- base::sys.calls
[09:30:27.727]             `[[` <- base::`[[`
[09:30:27.727]             `+` <- base::`+`
[09:30:27.727]             `<<-` <- base::`<<-`
[09:30:27.727]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:27.727]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:27.727]                   3L)]
[09:30:27.727]             }
[09:30:27.727]             function(cond) {
[09:30:27.727]                 is_error <- inherits(cond, "error")
[09:30:27.727]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:27.727]                   NULL)
[09:30:27.727]                 if (is_error) {
[09:30:27.727]                   sessionInformation <- function() {
[09:30:27.727]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:27.727]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:27.727]                       search = base::search(), system = base::Sys.info())
[09:30:27.727]                   }
[09:30:27.727]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.727]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:27.727]                     cond$call), session = sessionInformation(), 
[09:30:27.727]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:27.727]                   signalCondition(cond)
[09:30:27.727]                 }
[09:30:27.727]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:27.727]                 "immediateCondition"))) {
[09:30:27.727]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:27.727]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.727]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:27.727]                   if (TRUE && !signal) {
[09:30:27.727]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.727]                     {
[09:30:27.727]                       inherits <- base::inherits
[09:30:27.727]                       invokeRestart <- base::invokeRestart
[09:30:27.727]                       is.null <- base::is.null
[09:30:27.727]                       muffled <- FALSE
[09:30:27.727]                       if (inherits(cond, "message")) {
[09:30:27.727]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.727]                         if (muffled) 
[09:30:27.727]                           invokeRestart("muffleMessage")
[09:30:27.727]                       }
[09:30:27.727]                       else if (inherits(cond, "warning")) {
[09:30:27.727]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.727]                         if (muffled) 
[09:30:27.727]                           invokeRestart("muffleWarning")
[09:30:27.727]                       }
[09:30:27.727]                       else if (inherits(cond, "condition")) {
[09:30:27.727]                         if (!is.null(pattern)) {
[09:30:27.727]                           computeRestarts <- base::computeRestarts
[09:30:27.727]                           grepl <- base::grepl
[09:30:27.727]                           restarts <- computeRestarts(cond)
[09:30:27.727]                           for (restart in restarts) {
[09:30:27.727]                             name <- restart$name
[09:30:27.727]                             if (is.null(name)) 
[09:30:27.727]                               next
[09:30:27.727]                             if (!grepl(pattern, name)) 
[09:30:27.727]                               next
[09:30:27.727]                             invokeRestart(restart)
[09:30:27.727]                             muffled <- TRUE
[09:30:27.727]                             break
[09:30:27.727]                           }
[09:30:27.727]                         }
[09:30:27.727]                       }
[09:30:27.727]                       invisible(muffled)
[09:30:27.727]                     }
[09:30:27.727]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.727]                   }
[09:30:27.727]                 }
[09:30:27.727]                 else {
[09:30:27.727]                   if (TRUE) {
[09:30:27.727]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.727]                     {
[09:30:27.727]                       inherits <- base::inherits
[09:30:27.727]                       invokeRestart <- base::invokeRestart
[09:30:27.727]                       is.null <- base::is.null
[09:30:27.727]                       muffled <- FALSE
[09:30:27.727]                       if (inherits(cond, "message")) {
[09:30:27.727]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.727]                         if (muffled) 
[09:30:27.727]                           invokeRestart("muffleMessage")
[09:30:27.727]                       }
[09:30:27.727]                       else if (inherits(cond, "warning")) {
[09:30:27.727]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.727]                         if (muffled) 
[09:30:27.727]                           invokeRestart("muffleWarning")
[09:30:27.727]                       }
[09:30:27.727]                       else if (inherits(cond, "condition")) {
[09:30:27.727]                         if (!is.null(pattern)) {
[09:30:27.727]                           computeRestarts <- base::computeRestarts
[09:30:27.727]                           grepl <- base::grepl
[09:30:27.727]                           restarts <- computeRestarts(cond)
[09:30:27.727]                           for (restart in restarts) {
[09:30:27.727]                             name <- restart$name
[09:30:27.727]                             if (is.null(name)) 
[09:30:27.727]                               next
[09:30:27.727]                             if (!grepl(pattern, name)) 
[09:30:27.727]                               next
[09:30:27.727]                             invokeRestart(restart)
[09:30:27.727]                             muffled <- TRUE
[09:30:27.727]                             break
[09:30:27.727]                           }
[09:30:27.727]                         }
[09:30:27.727]                       }
[09:30:27.727]                       invisible(muffled)
[09:30:27.727]                     }
[09:30:27.727]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.727]                   }
[09:30:27.727]                 }
[09:30:27.727]             }
[09:30:27.727]         }))
[09:30:27.727]     }, error = function(ex) {
[09:30:27.727]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:27.727]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.727]                 ...future.rng), started = ...future.startTime, 
[09:30:27.727]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:27.727]             version = "1.8"), class = "FutureResult")
[09:30:27.727]     }, finally = {
[09:30:27.727]         if (!identical(...future.workdir, getwd())) 
[09:30:27.727]             setwd(...future.workdir)
[09:30:27.727]         {
[09:30:27.727]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:27.727]                 ...future.oldOptions$nwarnings <- NULL
[09:30:27.727]             }
[09:30:27.727]             base::options(...future.oldOptions)
[09:30:27.727]             if (.Platform$OS.type == "windows") {
[09:30:27.727]                 old_names <- names(...future.oldEnvVars)
[09:30:27.727]                 envs <- base::Sys.getenv()
[09:30:27.727]                 names <- names(envs)
[09:30:27.727]                 common <- intersect(names, old_names)
[09:30:27.727]                 added <- setdiff(names, old_names)
[09:30:27.727]                 removed <- setdiff(old_names, names)
[09:30:27.727]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:27.727]                   envs[common]]
[09:30:27.727]                 NAMES <- toupper(changed)
[09:30:27.727]                 args <- list()
[09:30:27.727]                 for (kk in seq_along(NAMES)) {
[09:30:27.727]                   name <- changed[[kk]]
[09:30:27.727]                   NAME <- NAMES[[kk]]
[09:30:27.727]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.727]                     next
[09:30:27.727]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.727]                 }
[09:30:27.727]                 NAMES <- toupper(added)
[09:30:27.727]                 for (kk in seq_along(NAMES)) {
[09:30:27.727]                   name <- added[[kk]]
[09:30:27.727]                   NAME <- NAMES[[kk]]
[09:30:27.727]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.727]                     next
[09:30:27.727]                   args[[name]] <- ""
[09:30:27.727]                 }
[09:30:27.727]                 NAMES <- toupper(removed)
[09:30:27.727]                 for (kk in seq_along(NAMES)) {
[09:30:27.727]                   name <- removed[[kk]]
[09:30:27.727]                   NAME <- NAMES[[kk]]
[09:30:27.727]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.727]                     next
[09:30:27.727]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.727]                 }
[09:30:27.727]                 if (length(args) > 0) 
[09:30:27.727]                   base::do.call(base::Sys.setenv, args = args)
[09:30:27.727]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:27.727]             }
[09:30:27.727]             else {
[09:30:27.727]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:27.727]             }
[09:30:27.727]             {
[09:30:27.727]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:27.727]                   0L) {
[09:30:27.727]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:27.727]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:27.727]                   base::options(opts)
[09:30:27.727]                 }
[09:30:27.727]                 {
[09:30:27.727]                   {
[09:30:27.727]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:27.727]                     NULL
[09:30:27.727]                   }
[09:30:27.727]                   options(future.plan = NULL)
[09:30:27.727]                   if (is.na(NA_character_)) 
[09:30:27.727]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.727]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:27.727]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:27.727]                     .init = FALSE)
[09:30:27.727]                 }
[09:30:27.727]             }
[09:30:27.727]         }
[09:30:27.727]     })
[09:30:27.727]     if (TRUE) {
[09:30:27.727]         base::sink(type = "output", split = FALSE)
[09:30:27.727]         if (TRUE) {
[09:30:27.727]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:27.727]         }
[09:30:27.727]         else {
[09:30:27.727]             ...future.result["stdout"] <- base::list(NULL)
[09:30:27.727]         }
[09:30:27.727]         base::close(...future.stdout)
[09:30:27.727]         ...future.stdout <- NULL
[09:30:27.727]     }
[09:30:27.727]     ...future.result$conditions <- ...future.conditions
[09:30:27.727]     ...future.result$finished <- base::Sys.time()
[09:30:27.727]     ...future.result
[09:30:27.727] }
[09:30:27.778] MultisessionFuture started
[09:30:27.778] result() for ClusterFuture ...
[09:30:27.779] receiveMessageFromWorker() for ClusterFuture ...
[09:30:27.779] - Validating connection of MultisessionFuture
[09:30:27.810] - received message: FutureResult
[09:30:27.810] - Received FutureResult
[09:30:27.813] - Erased future from FutureRegistry
[09:30:27.813] result() for ClusterFuture ...
[09:30:27.813] - result already collected: FutureResult
[09:30:27.813] result() for ClusterFuture ... done
[09:30:27.813] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:27.813] result() for ClusterFuture ... done
[09:30:27.814] result() for ClusterFuture ...
[09:30:27.814] - result already collected: FutureResult
[09:30:27.814] result() for ClusterFuture ... done
[09:30:27.814] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:30:27.814] plan(): nbrOfWorkers() = 2
[09:30:27.814] getGlobalsAndPackages() ...
[09:30:27.814] Searching for globals...
[09:30:27.816] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[09:30:27.816] Searching for globals ... DONE
[09:30:27.816] Resolving globals: FALSE
[09:30:27.817] 
[09:30:27.817] 
[09:30:27.817] getGlobalsAndPackages() ... DONE
[09:30:27.817] run() for ‘Future’ ...
[09:30:27.817] - state: ‘created’
[09:30:27.818] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:27.828] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:27.829] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:27.829]   - Field: ‘node’
[09:30:27.829]   - Field: ‘label’
[09:30:27.829]   - Field: ‘local’
[09:30:27.829]   - Field: ‘owner’
[09:30:27.829]   - Field: ‘envir’
[09:30:27.829]   - Field: ‘workers’
[09:30:27.829]   - Field: ‘packages’
[09:30:27.829]   - Field: ‘gc’
[09:30:27.830]   - Field: ‘conditions’
[09:30:27.830]   - Field: ‘persistent’
[09:30:27.830]   - Field: ‘expr’
[09:30:27.830]   - Field: ‘uuid’
[09:30:27.830]   - Field: ‘seed’
[09:30:27.830]   - Field: ‘version’
[09:30:27.830]   - Field: ‘result’
[09:30:27.830]   - Field: ‘asynchronous’
[09:30:27.830]   - Field: ‘calls’
[09:30:27.831]   - Field: ‘globals’
[09:30:27.831]   - Field: ‘stdout’
[09:30:27.831]   - Field: ‘earlySignal’
[09:30:27.831]   - Field: ‘lazy’
[09:30:27.831]   - Field: ‘state’
[09:30:27.831] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:27.831] - Launch lazy future ...
[09:30:27.831] Packages needed by the future expression (n = 0): <none>
[09:30:27.832] Packages needed by future strategies (n = 0): <none>
[09:30:27.832] {
[09:30:27.832]     {
[09:30:27.832]         {
[09:30:27.832]             ...future.startTime <- base::Sys.time()
[09:30:27.832]             {
[09:30:27.832]                 {
[09:30:27.832]                   {
[09:30:27.832]                     {
[09:30:27.832]                       base::local({
[09:30:27.832]                         has_future <- base::requireNamespace("future", 
[09:30:27.832]                           quietly = TRUE)
[09:30:27.832]                         if (has_future) {
[09:30:27.832]                           ns <- base::getNamespace("future")
[09:30:27.832]                           version <- ns[[".package"]][["version"]]
[09:30:27.832]                           if (is.null(version)) 
[09:30:27.832]                             version <- utils::packageVersion("future")
[09:30:27.832]                         }
[09:30:27.832]                         else {
[09:30:27.832]                           version <- NULL
[09:30:27.832]                         }
[09:30:27.832]                         if (!has_future || version < "1.8.0") {
[09:30:27.832]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:27.832]                             "", base::R.version$version.string), 
[09:30:27.832]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:27.832]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:27.832]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:27.832]                               "release", "version")], collapse = " "), 
[09:30:27.832]                             hostname = base::Sys.info()[["nodename"]])
[09:30:27.832]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:27.832]                             info)
[09:30:27.832]                           info <- base::paste(info, collapse = "; ")
[09:30:27.832]                           if (!has_future) {
[09:30:27.832]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:27.832]                               info)
[09:30:27.832]                           }
[09:30:27.832]                           else {
[09:30:27.832]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:27.832]                               info, version)
[09:30:27.832]                           }
[09:30:27.832]                           base::stop(msg)
[09:30:27.832]                         }
[09:30:27.832]                       })
[09:30:27.832]                     }
[09:30:27.832]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:27.832]                     base::options(mc.cores = 1L)
[09:30:27.832]                   }
[09:30:27.832]                   ...future.strategy.old <- future::plan("list")
[09:30:27.832]                   options(future.plan = NULL)
[09:30:27.832]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.832]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:27.832]                 }
[09:30:27.832]                 ...future.workdir <- getwd()
[09:30:27.832]             }
[09:30:27.832]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:27.832]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:27.832]         }
[09:30:27.832]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:27.832]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:27.832]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:27.832]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:27.832]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:27.832]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:27.832]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:27.832]             base::names(...future.oldOptions))
[09:30:27.832]     }
[09:30:27.832]     if (FALSE) {
[09:30:27.832]     }
[09:30:27.832]     else {
[09:30:27.832]         if (TRUE) {
[09:30:27.832]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:27.832]                 open = "w")
[09:30:27.832]         }
[09:30:27.832]         else {
[09:30:27.832]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:27.832]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:27.832]         }
[09:30:27.832]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:27.832]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:27.832]             base::sink(type = "output", split = FALSE)
[09:30:27.832]             base::close(...future.stdout)
[09:30:27.832]         }, add = TRUE)
[09:30:27.832]     }
[09:30:27.832]     ...future.frame <- base::sys.nframe()
[09:30:27.832]     ...future.conditions <- base::list()
[09:30:27.832]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:27.832]     if (FALSE) {
[09:30:27.832]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:27.832]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:27.832]     }
[09:30:27.832]     ...future.result <- base::tryCatch({
[09:30:27.832]         base::withCallingHandlers({
[09:30:27.832]             ...future.value <- base::withVisible(base::local({
[09:30:27.832]                 ...future.makeSendCondition <- base::local({
[09:30:27.832]                   sendCondition <- NULL
[09:30:27.832]                   function(frame = 1L) {
[09:30:27.832]                     if (is.function(sendCondition)) 
[09:30:27.832]                       return(sendCondition)
[09:30:27.832]                     ns <- getNamespace("parallel")
[09:30:27.832]                     if (exists("sendData", mode = "function", 
[09:30:27.832]                       envir = ns)) {
[09:30:27.832]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:27.832]                         envir = ns)
[09:30:27.832]                       envir <- sys.frame(frame)
[09:30:27.832]                       master <- NULL
[09:30:27.832]                       while (!identical(envir, .GlobalEnv) && 
[09:30:27.832]                         !identical(envir, emptyenv())) {
[09:30:27.832]                         if (exists("master", mode = "list", envir = envir, 
[09:30:27.832]                           inherits = FALSE)) {
[09:30:27.832]                           master <- get("master", mode = "list", 
[09:30:27.832]                             envir = envir, inherits = FALSE)
[09:30:27.832]                           if (inherits(master, c("SOCKnode", 
[09:30:27.832]                             "SOCK0node"))) {
[09:30:27.832]                             sendCondition <<- function(cond) {
[09:30:27.832]                               data <- list(type = "VALUE", value = cond, 
[09:30:27.832]                                 success = TRUE)
[09:30:27.832]                               parallel_sendData(master, data)
[09:30:27.832]                             }
[09:30:27.832]                             return(sendCondition)
[09:30:27.832]                           }
[09:30:27.832]                         }
[09:30:27.832]                         frame <- frame + 1L
[09:30:27.832]                         envir <- sys.frame(frame)
[09:30:27.832]                       }
[09:30:27.832]                     }
[09:30:27.832]                     sendCondition <<- function(cond) NULL
[09:30:27.832]                   }
[09:30:27.832]                 })
[09:30:27.832]                 withCallingHandlers({
[09:30:27.832]                   {
[09:30:27.832]                     Sys.sleep(3)
[09:30:27.832]                     42L
[09:30:27.832]                     stop("Woops")
[09:30:27.832]                   }
[09:30:27.832]                 }, immediateCondition = function(cond) {
[09:30:27.832]                   sendCondition <- ...future.makeSendCondition()
[09:30:27.832]                   sendCondition(cond)
[09:30:27.832]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.832]                   {
[09:30:27.832]                     inherits <- base::inherits
[09:30:27.832]                     invokeRestart <- base::invokeRestart
[09:30:27.832]                     is.null <- base::is.null
[09:30:27.832]                     muffled <- FALSE
[09:30:27.832]                     if (inherits(cond, "message")) {
[09:30:27.832]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:27.832]                       if (muffled) 
[09:30:27.832]                         invokeRestart("muffleMessage")
[09:30:27.832]                     }
[09:30:27.832]                     else if (inherits(cond, "warning")) {
[09:30:27.832]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:27.832]                       if (muffled) 
[09:30:27.832]                         invokeRestart("muffleWarning")
[09:30:27.832]                     }
[09:30:27.832]                     else if (inherits(cond, "condition")) {
[09:30:27.832]                       if (!is.null(pattern)) {
[09:30:27.832]                         computeRestarts <- base::computeRestarts
[09:30:27.832]                         grepl <- base::grepl
[09:30:27.832]                         restarts <- computeRestarts(cond)
[09:30:27.832]                         for (restart in restarts) {
[09:30:27.832]                           name <- restart$name
[09:30:27.832]                           if (is.null(name)) 
[09:30:27.832]                             next
[09:30:27.832]                           if (!grepl(pattern, name)) 
[09:30:27.832]                             next
[09:30:27.832]                           invokeRestart(restart)
[09:30:27.832]                           muffled <- TRUE
[09:30:27.832]                           break
[09:30:27.832]                         }
[09:30:27.832]                       }
[09:30:27.832]                     }
[09:30:27.832]                     invisible(muffled)
[09:30:27.832]                   }
[09:30:27.832]                   muffleCondition(cond)
[09:30:27.832]                 })
[09:30:27.832]             }))
[09:30:27.832]             future::FutureResult(value = ...future.value$value, 
[09:30:27.832]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.832]                   ...future.rng), globalenv = if (FALSE) 
[09:30:27.832]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:27.832]                     ...future.globalenv.names))
[09:30:27.832]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:27.832]         }, condition = base::local({
[09:30:27.832]             c <- base::c
[09:30:27.832]             inherits <- base::inherits
[09:30:27.832]             invokeRestart <- base::invokeRestart
[09:30:27.832]             length <- base::length
[09:30:27.832]             list <- base::list
[09:30:27.832]             seq.int <- base::seq.int
[09:30:27.832]             signalCondition <- base::signalCondition
[09:30:27.832]             sys.calls <- base::sys.calls
[09:30:27.832]             `[[` <- base::`[[`
[09:30:27.832]             `+` <- base::`+`
[09:30:27.832]             `<<-` <- base::`<<-`
[09:30:27.832]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:27.832]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:27.832]                   3L)]
[09:30:27.832]             }
[09:30:27.832]             function(cond) {
[09:30:27.832]                 is_error <- inherits(cond, "error")
[09:30:27.832]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:27.832]                   NULL)
[09:30:27.832]                 if (is_error) {
[09:30:27.832]                   sessionInformation <- function() {
[09:30:27.832]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:27.832]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:27.832]                       search = base::search(), system = base::Sys.info())
[09:30:27.832]                   }
[09:30:27.832]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.832]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:27.832]                     cond$call), session = sessionInformation(), 
[09:30:27.832]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:27.832]                   signalCondition(cond)
[09:30:27.832]                 }
[09:30:27.832]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:27.832]                 "immediateCondition"))) {
[09:30:27.832]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:27.832]                   ...future.conditions[[length(...future.conditions) + 
[09:30:27.832]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:27.832]                   if (TRUE && !signal) {
[09:30:27.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.832]                     {
[09:30:27.832]                       inherits <- base::inherits
[09:30:27.832]                       invokeRestart <- base::invokeRestart
[09:30:27.832]                       is.null <- base::is.null
[09:30:27.832]                       muffled <- FALSE
[09:30:27.832]                       if (inherits(cond, "message")) {
[09:30:27.832]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.832]                         if (muffled) 
[09:30:27.832]                           invokeRestart("muffleMessage")
[09:30:27.832]                       }
[09:30:27.832]                       else if (inherits(cond, "warning")) {
[09:30:27.832]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.832]                         if (muffled) 
[09:30:27.832]                           invokeRestart("muffleWarning")
[09:30:27.832]                       }
[09:30:27.832]                       else if (inherits(cond, "condition")) {
[09:30:27.832]                         if (!is.null(pattern)) {
[09:30:27.832]                           computeRestarts <- base::computeRestarts
[09:30:27.832]                           grepl <- base::grepl
[09:30:27.832]                           restarts <- computeRestarts(cond)
[09:30:27.832]                           for (restart in restarts) {
[09:30:27.832]                             name <- restart$name
[09:30:27.832]                             if (is.null(name)) 
[09:30:27.832]                               next
[09:30:27.832]                             if (!grepl(pattern, name)) 
[09:30:27.832]                               next
[09:30:27.832]                             invokeRestart(restart)
[09:30:27.832]                             muffled <- TRUE
[09:30:27.832]                             break
[09:30:27.832]                           }
[09:30:27.832]                         }
[09:30:27.832]                       }
[09:30:27.832]                       invisible(muffled)
[09:30:27.832]                     }
[09:30:27.832]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.832]                   }
[09:30:27.832]                 }
[09:30:27.832]                 else {
[09:30:27.832]                   if (TRUE) {
[09:30:27.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:27.832]                     {
[09:30:27.832]                       inherits <- base::inherits
[09:30:27.832]                       invokeRestart <- base::invokeRestart
[09:30:27.832]                       is.null <- base::is.null
[09:30:27.832]                       muffled <- FALSE
[09:30:27.832]                       if (inherits(cond, "message")) {
[09:30:27.832]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:27.832]                         if (muffled) 
[09:30:27.832]                           invokeRestart("muffleMessage")
[09:30:27.832]                       }
[09:30:27.832]                       else if (inherits(cond, "warning")) {
[09:30:27.832]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:27.832]                         if (muffled) 
[09:30:27.832]                           invokeRestart("muffleWarning")
[09:30:27.832]                       }
[09:30:27.832]                       else if (inherits(cond, "condition")) {
[09:30:27.832]                         if (!is.null(pattern)) {
[09:30:27.832]                           computeRestarts <- base::computeRestarts
[09:30:27.832]                           grepl <- base::grepl
[09:30:27.832]                           restarts <- computeRestarts(cond)
[09:30:27.832]                           for (restart in restarts) {
[09:30:27.832]                             name <- restart$name
[09:30:27.832]                             if (is.null(name)) 
[09:30:27.832]                               next
[09:30:27.832]                             if (!grepl(pattern, name)) 
[09:30:27.832]                               next
[09:30:27.832]                             invokeRestart(restart)
[09:30:27.832]                             muffled <- TRUE
[09:30:27.832]                             break
[09:30:27.832]                           }
[09:30:27.832]                         }
[09:30:27.832]                       }
[09:30:27.832]                       invisible(muffled)
[09:30:27.832]                     }
[09:30:27.832]                     muffleCondition(cond, pattern = "^muffle")
[09:30:27.832]                   }
[09:30:27.832]                 }
[09:30:27.832]             }
[09:30:27.832]         }))
[09:30:27.832]     }, error = function(ex) {
[09:30:27.832]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:27.832]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:27.832]                 ...future.rng), started = ...future.startTime, 
[09:30:27.832]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:27.832]             version = "1.8"), class = "FutureResult")
[09:30:27.832]     }, finally = {
[09:30:27.832]         if (!identical(...future.workdir, getwd())) 
[09:30:27.832]             setwd(...future.workdir)
[09:30:27.832]         {
[09:30:27.832]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:27.832]                 ...future.oldOptions$nwarnings <- NULL
[09:30:27.832]             }
[09:30:27.832]             base::options(...future.oldOptions)
[09:30:27.832]             if (.Platform$OS.type == "windows") {
[09:30:27.832]                 old_names <- names(...future.oldEnvVars)
[09:30:27.832]                 envs <- base::Sys.getenv()
[09:30:27.832]                 names <- names(envs)
[09:30:27.832]                 common <- intersect(names, old_names)
[09:30:27.832]                 added <- setdiff(names, old_names)
[09:30:27.832]                 removed <- setdiff(old_names, names)
[09:30:27.832]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:27.832]                   envs[common]]
[09:30:27.832]                 NAMES <- toupper(changed)
[09:30:27.832]                 args <- list()
[09:30:27.832]                 for (kk in seq_along(NAMES)) {
[09:30:27.832]                   name <- changed[[kk]]
[09:30:27.832]                   NAME <- NAMES[[kk]]
[09:30:27.832]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.832]                     next
[09:30:27.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.832]                 }
[09:30:27.832]                 NAMES <- toupper(added)
[09:30:27.832]                 for (kk in seq_along(NAMES)) {
[09:30:27.832]                   name <- added[[kk]]
[09:30:27.832]                   NAME <- NAMES[[kk]]
[09:30:27.832]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.832]                     next
[09:30:27.832]                   args[[name]] <- ""
[09:30:27.832]                 }
[09:30:27.832]                 NAMES <- toupper(removed)
[09:30:27.832]                 for (kk in seq_along(NAMES)) {
[09:30:27.832]                   name <- removed[[kk]]
[09:30:27.832]                   NAME <- NAMES[[kk]]
[09:30:27.832]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:27.832]                     next
[09:30:27.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:27.832]                 }
[09:30:27.832]                 if (length(args) > 0) 
[09:30:27.832]                   base::do.call(base::Sys.setenv, args = args)
[09:30:27.832]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:27.832]             }
[09:30:27.832]             else {
[09:30:27.832]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:27.832]             }
[09:30:27.832]             {
[09:30:27.832]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:27.832]                   0L) {
[09:30:27.832]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:27.832]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:27.832]                   base::options(opts)
[09:30:27.832]                 }
[09:30:27.832]                 {
[09:30:27.832]                   {
[09:30:27.832]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:27.832]                     NULL
[09:30:27.832]                   }
[09:30:27.832]                   options(future.plan = NULL)
[09:30:27.832]                   if (is.na(NA_character_)) 
[09:30:27.832]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:27.832]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:27.832]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:27.832]                     .init = FALSE)
[09:30:27.832]                 }
[09:30:27.832]             }
[09:30:27.832]         }
[09:30:27.832]     })
[09:30:27.832]     if (TRUE) {
[09:30:27.832]         base::sink(type = "output", split = FALSE)
[09:30:27.832]         if (TRUE) {
[09:30:27.832]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:27.832]         }
[09:30:27.832]         else {
[09:30:27.832]             ...future.result["stdout"] <- base::list(NULL)
[09:30:27.832]         }
[09:30:27.832]         base::close(...future.stdout)
[09:30:27.832]         ...future.stdout <- NULL
[09:30:27.832]     }
[09:30:27.832]     ...future.result$conditions <- ...future.conditions
[09:30:27.832]     ...future.result$finished <- base::Sys.time()
[09:30:27.832]     ...future.result
[09:30:27.832] }
[09:30:27.835] MultisessionFuture started
[09:30:27.836] - Launch lazy future ... done
[09:30:27.836] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[09:30:30.850] receiveMessageFromWorker() for ClusterFuture ...
[09:30:30.850] - Validating connection of MultisessionFuture
[09:30:30.851] - received message: FutureResult
[09:30:30.851] - Received FutureResult
[09:30:30.851] - Erased future from FutureRegistry
[09:30:30.851] result() for ClusterFuture ...
[09:30:30.851] - result already collected: FutureResult
[09:30:30.851] result() for ClusterFuture ... done
[09:30:30.851] signalConditions() ...
[09:30:30.851]  - include = ‘immediateCondition’
[09:30:30.851]  - exclude = 
[09:30:30.852]  - resignal = FALSE
[09:30:30.852]  - Number of conditions: 1
[09:30:30.852] signalConditions() ... done
[09:30:30.852] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:30.852] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 68f0c7af-c8f9-1b90-7261-23466f94429e
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[09:30:30.854] plan(): Setting new future strategy stack:
[09:30:30.854] List of future strategies:
[09:30:30.854] 1. FutureStrategy:
[09:30:30.854]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:30.854]    - tweaked: FALSE
[09:30:30.854]    - call: future::plan(oplan)
[09:30:30.854] plan(): nbrOfWorkers() = 1
> 
