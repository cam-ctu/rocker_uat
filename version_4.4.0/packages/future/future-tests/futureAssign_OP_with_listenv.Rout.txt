
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:39:24.598] plan(): Setting new future strategy stack:
[17:39:24.598] List of future strategies:
[17:39:24.598] 1. sequential:
[17:39:24.598]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.598]    - tweaked: FALSE
[17:39:24.598]    - call: future::plan("sequential")
[17:39:24.609] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[17:39:24.627] getGlobalsAndPackages() ...
[17:39:24.627] Searching for globals...
[17:39:24.630] - globals found: [1] ‘{’
[17:39:24.630] Searching for globals ... DONE
[17:39:24.630] Resolving globals: FALSE
[17:39:24.631] 
[17:39:24.631] 
[17:39:24.631] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[17:39:24.632] getGlobalsAndPackages() ...
[17:39:24.632] Searching for globals...
[17:39:24.632] - globals found: [1] ‘{’
[17:39:24.632] Searching for globals ... DONE
[17:39:24.633] Resolving globals: FALSE
[17:39:24.633] 
[17:39:24.633] 
[17:39:24.633] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[17:39:24.633] getGlobalsAndPackages() ...
[17:39:24.634] Searching for globals...
[17:39:24.634] - globals found: [1] ‘{’
[17:39:24.634] Searching for globals ... DONE
[17:39:24.634] Resolving globals: FALSE
[17:39:24.635] 
[17:39:24.635] 
[17:39:24.635] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[17:39:24.635] getGlobalsAndPackages() ...
[17:39:24.636] Searching for globals...
[17:39:24.636] - globals found: [1] ‘{’
[17:39:24.636] Searching for globals ... DONE
[17:39:24.636] Resolving globals: FALSE
[17:39:24.637] 
[17:39:24.637] 
[17:39:24.637] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[17:39:24.638] run() for ‘Future’ ...
[17:39:24.638] - state: ‘created’
[17:39:24.638] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:24.638] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:24.638] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:24.638]   - Field: ‘label’
[17:39:24.639]   - Field: ‘local’
[17:39:24.639]   - Field: ‘owner’
[17:39:24.639]   - Field: ‘envir’
[17:39:24.639]   - Field: ‘packages’
[17:39:24.639]   - Field: ‘gc’
[17:39:24.639]   - Field: ‘conditions’
[17:39:24.639]   - Field: ‘expr’
[17:39:24.639]   - Field: ‘uuid’
[17:39:24.639]   - Field: ‘seed’
[17:39:24.639]   - Field: ‘version’
[17:39:24.639]   - Field: ‘result’
[17:39:24.640]   - Field: ‘asynchronous’
[17:39:24.640]   - Field: ‘calls’
[17:39:24.640]   - Field: ‘globals’
[17:39:24.640]   - Field: ‘stdout’
[17:39:24.640]   - Field: ‘earlySignal’
[17:39:24.640]   - Field: ‘lazy’
[17:39:24.640]   - Field: ‘state’
[17:39:24.640] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:24.640] - Launch lazy future ...
[17:39:24.641] Packages needed by the future expression (n = 0): <none>
[17:39:24.641] Packages needed by future strategies (n = 0): <none>
[17:39:24.642] {
[17:39:24.642]     {
[17:39:24.642]         {
[17:39:24.642]             ...future.startTime <- base::Sys.time()
[17:39:24.642]             {
[17:39:24.642]                 {
[17:39:24.642]                   {
[17:39:24.642]                     base::local({
[17:39:24.642]                       has_future <- base::requireNamespace("future", 
[17:39:24.642]                         quietly = TRUE)
[17:39:24.642]                       if (has_future) {
[17:39:24.642]                         ns <- base::getNamespace("future")
[17:39:24.642]                         version <- ns[[".package"]][["version"]]
[17:39:24.642]                         if (is.null(version)) 
[17:39:24.642]                           version <- utils::packageVersion("future")
[17:39:24.642]                       }
[17:39:24.642]                       else {
[17:39:24.642]                         version <- NULL
[17:39:24.642]                       }
[17:39:24.642]                       if (!has_future || version < "1.8.0") {
[17:39:24.642]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:24.642]                           "", base::R.version$version.string), 
[17:39:24.642]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:24.642]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:24.642]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:24.642]                             "release", "version")], collapse = " "), 
[17:39:24.642]                           hostname = base::Sys.info()[["nodename"]])
[17:39:24.642]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:24.642]                           info)
[17:39:24.642]                         info <- base::paste(info, collapse = "; ")
[17:39:24.642]                         if (!has_future) {
[17:39:24.642]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:24.642]                             info)
[17:39:24.642]                         }
[17:39:24.642]                         else {
[17:39:24.642]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:24.642]                             info, version)
[17:39:24.642]                         }
[17:39:24.642]                         base::stop(msg)
[17:39:24.642]                       }
[17:39:24.642]                     })
[17:39:24.642]                   }
[17:39:24.642]                   ...future.strategy.old <- future::plan("list")
[17:39:24.642]                   options(future.plan = NULL)
[17:39:24.642]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.642]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:24.642]                 }
[17:39:24.642]                 ...future.workdir <- getwd()
[17:39:24.642]             }
[17:39:24.642]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:24.642]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:24.642]         }
[17:39:24.642]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:24.642]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:24.642]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:24.642]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:24.642]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:24.642]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:24.642]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:24.642]             base::names(...future.oldOptions))
[17:39:24.642]     }
[17:39:24.642]     if (FALSE) {
[17:39:24.642]     }
[17:39:24.642]     else {
[17:39:24.642]         if (TRUE) {
[17:39:24.642]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:24.642]                 open = "w")
[17:39:24.642]         }
[17:39:24.642]         else {
[17:39:24.642]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:24.642]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:24.642]         }
[17:39:24.642]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:24.642]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:24.642]             base::sink(type = "output", split = FALSE)
[17:39:24.642]             base::close(...future.stdout)
[17:39:24.642]         }, add = TRUE)
[17:39:24.642]     }
[17:39:24.642]     ...future.frame <- base::sys.nframe()
[17:39:24.642]     ...future.conditions <- base::list()
[17:39:24.642]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:24.642]     if (FALSE) {
[17:39:24.642]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:24.642]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:24.642]     }
[17:39:24.642]     ...future.result <- base::tryCatch({
[17:39:24.642]         base::withCallingHandlers({
[17:39:24.642]             ...future.value <- base::withVisible(base::local({
[17:39:24.642]                 2
[17:39:24.642]             }))
[17:39:24.642]             future::FutureResult(value = ...future.value$value, 
[17:39:24.642]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.642]                   ...future.rng), globalenv = if (FALSE) 
[17:39:24.642]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:24.642]                     ...future.globalenv.names))
[17:39:24.642]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:24.642]         }, condition = base::local({
[17:39:24.642]             c <- base::c
[17:39:24.642]             inherits <- base::inherits
[17:39:24.642]             invokeRestart <- base::invokeRestart
[17:39:24.642]             length <- base::length
[17:39:24.642]             list <- base::list
[17:39:24.642]             seq.int <- base::seq.int
[17:39:24.642]             signalCondition <- base::signalCondition
[17:39:24.642]             sys.calls <- base::sys.calls
[17:39:24.642]             `[[` <- base::`[[`
[17:39:24.642]             `+` <- base::`+`
[17:39:24.642]             `<<-` <- base::`<<-`
[17:39:24.642]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:24.642]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:24.642]                   3L)]
[17:39:24.642]             }
[17:39:24.642]             function(cond) {
[17:39:24.642]                 is_error <- inherits(cond, "error")
[17:39:24.642]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:24.642]                   NULL)
[17:39:24.642]                 if (is_error) {
[17:39:24.642]                   sessionInformation <- function() {
[17:39:24.642]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:24.642]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:24.642]                       search = base::search(), system = base::Sys.info())
[17:39:24.642]                   }
[17:39:24.642]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.642]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:24.642]                     cond$call), session = sessionInformation(), 
[17:39:24.642]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:24.642]                   signalCondition(cond)
[17:39:24.642]                 }
[17:39:24.642]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:24.642]                 "immediateCondition"))) {
[17:39:24.642]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:24.642]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.642]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:24.642]                   if (TRUE && !signal) {
[17:39:24.642]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.642]                     {
[17:39:24.642]                       inherits <- base::inherits
[17:39:24.642]                       invokeRestart <- base::invokeRestart
[17:39:24.642]                       is.null <- base::is.null
[17:39:24.642]                       muffled <- FALSE
[17:39:24.642]                       if (inherits(cond, "message")) {
[17:39:24.642]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.642]                         if (muffled) 
[17:39:24.642]                           invokeRestart("muffleMessage")
[17:39:24.642]                       }
[17:39:24.642]                       else if (inherits(cond, "warning")) {
[17:39:24.642]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.642]                         if (muffled) 
[17:39:24.642]                           invokeRestart("muffleWarning")
[17:39:24.642]                       }
[17:39:24.642]                       else if (inherits(cond, "condition")) {
[17:39:24.642]                         if (!is.null(pattern)) {
[17:39:24.642]                           computeRestarts <- base::computeRestarts
[17:39:24.642]                           grepl <- base::grepl
[17:39:24.642]                           restarts <- computeRestarts(cond)
[17:39:24.642]                           for (restart in restarts) {
[17:39:24.642]                             name <- restart$name
[17:39:24.642]                             if (is.null(name)) 
[17:39:24.642]                               next
[17:39:24.642]                             if (!grepl(pattern, name)) 
[17:39:24.642]                               next
[17:39:24.642]                             invokeRestart(restart)
[17:39:24.642]                             muffled <- TRUE
[17:39:24.642]                             break
[17:39:24.642]                           }
[17:39:24.642]                         }
[17:39:24.642]                       }
[17:39:24.642]                       invisible(muffled)
[17:39:24.642]                     }
[17:39:24.642]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.642]                   }
[17:39:24.642]                 }
[17:39:24.642]                 else {
[17:39:24.642]                   if (TRUE) {
[17:39:24.642]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.642]                     {
[17:39:24.642]                       inherits <- base::inherits
[17:39:24.642]                       invokeRestart <- base::invokeRestart
[17:39:24.642]                       is.null <- base::is.null
[17:39:24.642]                       muffled <- FALSE
[17:39:24.642]                       if (inherits(cond, "message")) {
[17:39:24.642]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.642]                         if (muffled) 
[17:39:24.642]                           invokeRestart("muffleMessage")
[17:39:24.642]                       }
[17:39:24.642]                       else if (inherits(cond, "warning")) {
[17:39:24.642]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.642]                         if (muffled) 
[17:39:24.642]                           invokeRestart("muffleWarning")
[17:39:24.642]                       }
[17:39:24.642]                       else if (inherits(cond, "condition")) {
[17:39:24.642]                         if (!is.null(pattern)) {
[17:39:24.642]                           computeRestarts <- base::computeRestarts
[17:39:24.642]                           grepl <- base::grepl
[17:39:24.642]                           restarts <- computeRestarts(cond)
[17:39:24.642]                           for (restart in restarts) {
[17:39:24.642]                             name <- restart$name
[17:39:24.642]                             if (is.null(name)) 
[17:39:24.642]                               next
[17:39:24.642]                             if (!grepl(pattern, name)) 
[17:39:24.642]                               next
[17:39:24.642]                             invokeRestart(restart)
[17:39:24.642]                             muffled <- TRUE
[17:39:24.642]                             break
[17:39:24.642]                           }
[17:39:24.642]                         }
[17:39:24.642]                       }
[17:39:24.642]                       invisible(muffled)
[17:39:24.642]                     }
[17:39:24.642]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.642]                   }
[17:39:24.642]                 }
[17:39:24.642]             }
[17:39:24.642]         }))
[17:39:24.642]     }, error = function(ex) {
[17:39:24.642]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:24.642]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.642]                 ...future.rng), started = ...future.startTime, 
[17:39:24.642]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:24.642]             version = "1.8"), class = "FutureResult")
[17:39:24.642]     }, finally = {
[17:39:24.642]         if (!identical(...future.workdir, getwd())) 
[17:39:24.642]             setwd(...future.workdir)
[17:39:24.642]         {
[17:39:24.642]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:24.642]                 ...future.oldOptions$nwarnings <- NULL
[17:39:24.642]             }
[17:39:24.642]             base::options(...future.oldOptions)
[17:39:24.642]             if (.Platform$OS.type == "windows") {
[17:39:24.642]                 old_names <- names(...future.oldEnvVars)
[17:39:24.642]                 envs <- base::Sys.getenv()
[17:39:24.642]                 names <- names(envs)
[17:39:24.642]                 common <- intersect(names, old_names)
[17:39:24.642]                 added <- setdiff(names, old_names)
[17:39:24.642]                 removed <- setdiff(old_names, names)
[17:39:24.642]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:24.642]                   envs[common]]
[17:39:24.642]                 NAMES <- toupper(changed)
[17:39:24.642]                 args <- list()
[17:39:24.642]                 for (kk in seq_along(NAMES)) {
[17:39:24.642]                   name <- changed[[kk]]
[17:39:24.642]                   NAME <- NAMES[[kk]]
[17:39:24.642]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.642]                     next
[17:39:24.642]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.642]                 }
[17:39:24.642]                 NAMES <- toupper(added)
[17:39:24.642]                 for (kk in seq_along(NAMES)) {
[17:39:24.642]                   name <- added[[kk]]
[17:39:24.642]                   NAME <- NAMES[[kk]]
[17:39:24.642]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.642]                     next
[17:39:24.642]                   args[[name]] <- ""
[17:39:24.642]                 }
[17:39:24.642]                 NAMES <- toupper(removed)
[17:39:24.642]                 for (kk in seq_along(NAMES)) {
[17:39:24.642]                   name <- removed[[kk]]
[17:39:24.642]                   NAME <- NAMES[[kk]]
[17:39:24.642]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.642]                     next
[17:39:24.642]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.642]                 }
[17:39:24.642]                 if (length(args) > 0) 
[17:39:24.642]                   base::do.call(base::Sys.setenv, args = args)
[17:39:24.642]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:24.642]             }
[17:39:24.642]             else {
[17:39:24.642]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:24.642]             }
[17:39:24.642]             {
[17:39:24.642]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:24.642]                   0L) {
[17:39:24.642]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:24.642]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:24.642]                   base::options(opts)
[17:39:24.642]                 }
[17:39:24.642]                 {
[17:39:24.642]                   {
[17:39:24.642]                     NULL
[17:39:24.642]                     RNGkind("Mersenne-Twister")
[17:39:24.642]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:24.642]                       inherits = FALSE)
[17:39:24.642]                   }
[17:39:24.642]                   options(future.plan = NULL)
[17:39:24.642]                   if (is.na(NA_character_)) 
[17:39:24.642]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.642]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:24.642]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:24.642]                     .init = FALSE)
[17:39:24.642]                 }
[17:39:24.642]             }
[17:39:24.642]         }
[17:39:24.642]     })
[17:39:24.642]     if (TRUE) {
[17:39:24.642]         base::sink(type = "output", split = FALSE)
[17:39:24.642]         if (TRUE) {
[17:39:24.642]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:24.642]         }
[17:39:24.642]         else {
[17:39:24.642]             ...future.result["stdout"] <- base::list(NULL)
[17:39:24.642]         }
[17:39:24.642]         base::close(...future.stdout)
[17:39:24.642]         ...future.stdout <- NULL
[17:39:24.642]     }
[17:39:24.642]     ...future.result$conditions <- ...future.conditions
[17:39:24.642]     ...future.result$finished <- base::Sys.time()
[17:39:24.642]     ...future.result
[17:39:24.642] }
[17:39:24.644] plan(): Setting new future strategy stack:
[17:39:24.644] List of future strategies:
[17:39:24.644] 1. sequential:
[17:39:24.644]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.644]    - tweaked: FALSE
[17:39:24.644]    - call: NULL
[17:39:24.644] plan(): nbrOfWorkers() = 1
[17:39:24.646] plan(): Setting new future strategy stack:
[17:39:24.646] List of future strategies:
[17:39:24.646] 1. sequential:
[17:39:24.646]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.646]    - tweaked: FALSE
[17:39:24.646]    - call: future::plan("sequential")
[17:39:24.646] plan(): nbrOfWorkers() = 1
[17:39:24.646] SequentialFuture started (and completed)
[17:39:24.647] - Launch lazy future ... done
[17:39:24.647] run() for ‘SequentialFuture’ ... done
[17:39:24.647] run() for ‘Future’ ...
[17:39:24.647] - state: ‘created’
[17:39:24.647] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:24.647] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:24.648] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:24.648]   - Field: ‘label’
[17:39:24.648]   - Field: ‘local’
[17:39:24.648]   - Field: ‘owner’
[17:39:24.648]   - Field: ‘envir’
[17:39:24.648]   - Field: ‘packages’
[17:39:24.648]   - Field: ‘gc’
[17:39:24.648]   - Field: ‘conditions’
[17:39:24.648]   - Field: ‘expr’
[17:39:24.649]   - Field: ‘uuid’
[17:39:24.649]   - Field: ‘seed’
[17:39:24.649]   - Field: ‘version’
[17:39:24.649]   - Field: ‘result’
[17:39:24.649]   - Field: ‘asynchronous’
[17:39:24.649]   - Field: ‘calls’
[17:39:24.649]   - Field: ‘globals’
[17:39:24.649]   - Field: ‘stdout’
[17:39:24.649]   - Field: ‘earlySignal’
[17:39:24.649]   - Field: ‘lazy’
[17:39:24.649]   - Field: ‘state’
[17:39:24.650] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:24.650] - Launch lazy future ...
[17:39:24.650] Packages needed by the future expression (n = 0): <none>
[17:39:24.650] Packages needed by future strategies (n = 0): <none>
[17:39:24.650] {
[17:39:24.650]     {
[17:39:24.650]         {
[17:39:24.650]             ...future.startTime <- base::Sys.time()
[17:39:24.650]             {
[17:39:24.650]                 {
[17:39:24.650]                   {
[17:39:24.650]                     base::local({
[17:39:24.650]                       has_future <- base::requireNamespace("future", 
[17:39:24.650]                         quietly = TRUE)
[17:39:24.650]                       if (has_future) {
[17:39:24.650]                         ns <- base::getNamespace("future")
[17:39:24.650]                         version <- ns[[".package"]][["version"]]
[17:39:24.650]                         if (is.null(version)) 
[17:39:24.650]                           version <- utils::packageVersion("future")
[17:39:24.650]                       }
[17:39:24.650]                       else {
[17:39:24.650]                         version <- NULL
[17:39:24.650]                       }
[17:39:24.650]                       if (!has_future || version < "1.8.0") {
[17:39:24.650]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:24.650]                           "", base::R.version$version.string), 
[17:39:24.650]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:24.650]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:24.650]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:24.650]                             "release", "version")], collapse = " "), 
[17:39:24.650]                           hostname = base::Sys.info()[["nodename"]])
[17:39:24.650]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:24.650]                           info)
[17:39:24.650]                         info <- base::paste(info, collapse = "; ")
[17:39:24.650]                         if (!has_future) {
[17:39:24.650]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:24.650]                             info)
[17:39:24.650]                         }
[17:39:24.650]                         else {
[17:39:24.650]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:24.650]                             info, version)
[17:39:24.650]                         }
[17:39:24.650]                         base::stop(msg)
[17:39:24.650]                       }
[17:39:24.650]                     })
[17:39:24.650]                   }
[17:39:24.650]                   ...future.strategy.old <- future::plan("list")
[17:39:24.650]                   options(future.plan = NULL)
[17:39:24.650]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.650]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:24.650]                 }
[17:39:24.650]                 ...future.workdir <- getwd()
[17:39:24.650]             }
[17:39:24.650]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:24.650]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:24.650]         }
[17:39:24.650]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:24.650]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:24.650]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:24.650]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:24.650]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:24.650]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:24.650]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:24.650]             base::names(...future.oldOptions))
[17:39:24.650]     }
[17:39:24.650]     if (FALSE) {
[17:39:24.650]     }
[17:39:24.650]     else {
[17:39:24.650]         if (TRUE) {
[17:39:24.650]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:24.650]                 open = "w")
[17:39:24.650]         }
[17:39:24.650]         else {
[17:39:24.650]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:24.650]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:24.650]         }
[17:39:24.650]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:24.650]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:24.650]             base::sink(type = "output", split = FALSE)
[17:39:24.650]             base::close(...future.stdout)
[17:39:24.650]         }, add = TRUE)
[17:39:24.650]     }
[17:39:24.650]     ...future.frame <- base::sys.nframe()
[17:39:24.650]     ...future.conditions <- base::list()
[17:39:24.650]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:24.650]     if (FALSE) {
[17:39:24.650]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:24.650]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:24.650]     }
[17:39:24.650]     ...future.result <- base::tryCatch({
[17:39:24.650]         base::withCallingHandlers({
[17:39:24.650]             ...future.value <- base::withVisible(base::local({
[17:39:24.650]                 "async!"
[17:39:24.650]             }))
[17:39:24.650]             future::FutureResult(value = ...future.value$value, 
[17:39:24.650]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.650]                   ...future.rng), globalenv = if (FALSE) 
[17:39:24.650]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:24.650]                     ...future.globalenv.names))
[17:39:24.650]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:24.650]         }, condition = base::local({
[17:39:24.650]             c <- base::c
[17:39:24.650]             inherits <- base::inherits
[17:39:24.650]             invokeRestart <- base::invokeRestart
[17:39:24.650]             length <- base::length
[17:39:24.650]             list <- base::list
[17:39:24.650]             seq.int <- base::seq.int
[17:39:24.650]             signalCondition <- base::signalCondition
[17:39:24.650]             sys.calls <- base::sys.calls
[17:39:24.650]             `[[` <- base::`[[`
[17:39:24.650]             `+` <- base::`+`
[17:39:24.650]             `<<-` <- base::`<<-`
[17:39:24.650]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:24.650]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:24.650]                   3L)]
[17:39:24.650]             }
[17:39:24.650]             function(cond) {
[17:39:24.650]                 is_error <- inherits(cond, "error")
[17:39:24.650]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:24.650]                   NULL)
[17:39:24.650]                 if (is_error) {
[17:39:24.650]                   sessionInformation <- function() {
[17:39:24.650]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:24.650]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:24.650]                       search = base::search(), system = base::Sys.info())
[17:39:24.650]                   }
[17:39:24.650]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.650]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:24.650]                     cond$call), session = sessionInformation(), 
[17:39:24.650]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:24.650]                   signalCondition(cond)
[17:39:24.650]                 }
[17:39:24.650]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:24.650]                 "immediateCondition"))) {
[17:39:24.650]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:24.650]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.650]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:24.650]                   if (TRUE && !signal) {
[17:39:24.650]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.650]                     {
[17:39:24.650]                       inherits <- base::inherits
[17:39:24.650]                       invokeRestart <- base::invokeRestart
[17:39:24.650]                       is.null <- base::is.null
[17:39:24.650]                       muffled <- FALSE
[17:39:24.650]                       if (inherits(cond, "message")) {
[17:39:24.650]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.650]                         if (muffled) 
[17:39:24.650]                           invokeRestart("muffleMessage")
[17:39:24.650]                       }
[17:39:24.650]                       else if (inherits(cond, "warning")) {
[17:39:24.650]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.650]                         if (muffled) 
[17:39:24.650]                           invokeRestart("muffleWarning")
[17:39:24.650]                       }
[17:39:24.650]                       else if (inherits(cond, "condition")) {
[17:39:24.650]                         if (!is.null(pattern)) {
[17:39:24.650]                           computeRestarts <- base::computeRestarts
[17:39:24.650]                           grepl <- base::grepl
[17:39:24.650]                           restarts <- computeRestarts(cond)
[17:39:24.650]                           for (restart in restarts) {
[17:39:24.650]                             name <- restart$name
[17:39:24.650]                             if (is.null(name)) 
[17:39:24.650]                               next
[17:39:24.650]                             if (!grepl(pattern, name)) 
[17:39:24.650]                               next
[17:39:24.650]                             invokeRestart(restart)
[17:39:24.650]                             muffled <- TRUE
[17:39:24.650]                             break
[17:39:24.650]                           }
[17:39:24.650]                         }
[17:39:24.650]                       }
[17:39:24.650]                       invisible(muffled)
[17:39:24.650]                     }
[17:39:24.650]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.650]                   }
[17:39:24.650]                 }
[17:39:24.650]                 else {
[17:39:24.650]                   if (TRUE) {
[17:39:24.650]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.650]                     {
[17:39:24.650]                       inherits <- base::inherits
[17:39:24.650]                       invokeRestart <- base::invokeRestart
[17:39:24.650]                       is.null <- base::is.null
[17:39:24.650]                       muffled <- FALSE
[17:39:24.650]                       if (inherits(cond, "message")) {
[17:39:24.650]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.650]                         if (muffled) 
[17:39:24.650]                           invokeRestart("muffleMessage")
[17:39:24.650]                       }
[17:39:24.650]                       else if (inherits(cond, "warning")) {
[17:39:24.650]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.650]                         if (muffled) 
[17:39:24.650]                           invokeRestart("muffleWarning")
[17:39:24.650]                       }
[17:39:24.650]                       else if (inherits(cond, "condition")) {
[17:39:24.650]                         if (!is.null(pattern)) {
[17:39:24.650]                           computeRestarts <- base::computeRestarts
[17:39:24.650]                           grepl <- base::grepl
[17:39:24.650]                           restarts <- computeRestarts(cond)
[17:39:24.650]                           for (restart in restarts) {
[17:39:24.650]                             name <- restart$name
[17:39:24.650]                             if (is.null(name)) 
[17:39:24.650]                               next
[17:39:24.650]                             if (!grepl(pattern, name)) 
[17:39:24.650]                               next
[17:39:24.650]                             invokeRestart(restart)
[17:39:24.650]                             muffled <- TRUE
[17:39:24.650]                             break
[17:39:24.650]                           }
[17:39:24.650]                         }
[17:39:24.650]                       }
[17:39:24.650]                       invisible(muffled)
[17:39:24.650]                     }
[17:39:24.650]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.650]                   }
[17:39:24.650]                 }
[17:39:24.650]             }
[17:39:24.650]         }))
[17:39:24.650]     }, error = function(ex) {
[17:39:24.650]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:24.650]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.650]                 ...future.rng), started = ...future.startTime, 
[17:39:24.650]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:24.650]             version = "1.8"), class = "FutureResult")
[17:39:24.650]     }, finally = {
[17:39:24.650]         if (!identical(...future.workdir, getwd())) 
[17:39:24.650]             setwd(...future.workdir)
[17:39:24.650]         {
[17:39:24.650]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:24.650]                 ...future.oldOptions$nwarnings <- NULL
[17:39:24.650]             }
[17:39:24.650]             base::options(...future.oldOptions)
[17:39:24.650]             if (.Platform$OS.type == "windows") {
[17:39:24.650]                 old_names <- names(...future.oldEnvVars)
[17:39:24.650]                 envs <- base::Sys.getenv()
[17:39:24.650]                 names <- names(envs)
[17:39:24.650]                 common <- intersect(names, old_names)
[17:39:24.650]                 added <- setdiff(names, old_names)
[17:39:24.650]                 removed <- setdiff(old_names, names)
[17:39:24.650]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:24.650]                   envs[common]]
[17:39:24.650]                 NAMES <- toupper(changed)
[17:39:24.650]                 args <- list()
[17:39:24.650]                 for (kk in seq_along(NAMES)) {
[17:39:24.650]                   name <- changed[[kk]]
[17:39:24.650]                   NAME <- NAMES[[kk]]
[17:39:24.650]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.650]                     next
[17:39:24.650]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.650]                 }
[17:39:24.650]                 NAMES <- toupper(added)
[17:39:24.650]                 for (kk in seq_along(NAMES)) {
[17:39:24.650]                   name <- added[[kk]]
[17:39:24.650]                   NAME <- NAMES[[kk]]
[17:39:24.650]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.650]                     next
[17:39:24.650]                   args[[name]] <- ""
[17:39:24.650]                 }
[17:39:24.650]                 NAMES <- toupper(removed)
[17:39:24.650]                 for (kk in seq_along(NAMES)) {
[17:39:24.650]                   name <- removed[[kk]]
[17:39:24.650]                   NAME <- NAMES[[kk]]
[17:39:24.650]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.650]                     next
[17:39:24.650]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.650]                 }
[17:39:24.650]                 if (length(args) > 0) 
[17:39:24.650]                   base::do.call(base::Sys.setenv, args = args)
[17:39:24.650]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:24.650]             }
[17:39:24.650]             else {
[17:39:24.650]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:24.650]             }
[17:39:24.650]             {
[17:39:24.650]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:24.650]                   0L) {
[17:39:24.650]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:24.650]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:24.650]                   base::options(opts)
[17:39:24.650]                 }
[17:39:24.650]                 {
[17:39:24.650]                   {
[17:39:24.650]                     NULL
[17:39:24.650]                     RNGkind("Mersenne-Twister")
[17:39:24.650]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:24.650]                       inherits = FALSE)
[17:39:24.650]                   }
[17:39:24.650]                   options(future.plan = NULL)
[17:39:24.650]                   if (is.na(NA_character_)) 
[17:39:24.650]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.650]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:24.650]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:24.650]                     .init = FALSE)
[17:39:24.650]                 }
[17:39:24.650]             }
[17:39:24.650]         }
[17:39:24.650]     })
[17:39:24.650]     if (TRUE) {
[17:39:24.650]         base::sink(type = "output", split = FALSE)
[17:39:24.650]         if (TRUE) {
[17:39:24.650]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:24.650]         }
[17:39:24.650]         else {
[17:39:24.650]             ...future.result["stdout"] <- base::list(NULL)
[17:39:24.650]         }
[17:39:24.650]         base::close(...future.stdout)
[17:39:24.650]         ...future.stdout <- NULL
[17:39:24.650]     }
[17:39:24.650]     ...future.result$conditions <- ...future.conditions
[17:39:24.650]     ...future.result$finished <- base::Sys.time()
[17:39:24.650]     ...future.result
[17:39:24.650] }
[17:39:24.652] plan(): Setting new future strategy stack:
[17:39:24.652] List of future strategies:
[17:39:24.652] 1. sequential:
[17:39:24.652]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.652]    - tweaked: FALSE
[17:39:24.652]    - call: NULL
[17:39:24.652] plan(): nbrOfWorkers() = 1
[17:39:24.653] plan(): Setting new future strategy stack:
[17:39:24.653] List of future strategies:
[17:39:24.653] 1. sequential:
[17:39:24.653]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.653]    - tweaked: FALSE
[17:39:24.653]    - call: future::plan("sequential")
[17:39:24.654] plan(): nbrOfWorkers() = 1
[17:39:24.654] SequentialFuture started (and completed)
[17:39:24.654] - Launch lazy future ... done
[17:39:24.654] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[17:39:24.658] getGlobalsAndPackages() ...
[17:39:24.658] Searching for globals...
[17:39:24.659] - globals found: [1] ‘{’
[17:39:24.659] Searching for globals ... DONE
[17:39:24.659] Resolving globals: FALSE
[17:39:24.659] 
[17:39:24.659] 
[17:39:24.659] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[17:39:24.660] getGlobalsAndPackages() ...
[17:39:24.660] Searching for globals...
[17:39:24.661] - globals found: [1] ‘{’
[17:39:24.661] Searching for globals ... DONE
[17:39:24.661] Resolving globals: FALSE
[17:39:24.661] 
[17:39:24.661] 
[17:39:24.661] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[17:39:24.665] run() for ‘Future’ ...
[17:39:24.665] - state: ‘created’
[17:39:24.665] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:24.665] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:24.665] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:24.665]   - Field: ‘label’
[17:39:24.666]   - Field: ‘local’
[17:39:24.666]   - Field: ‘owner’
[17:39:24.666]   - Field: ‘envir’
[17:39:24.666]   - Field: ‘packages’
[17:39:24.666]   - Field: ‘gc’
[17:39:24.666]   - Field: ‘conditions’
[17:39:24.666]   - Field: ‘expr’
[17:39:24.666]   - Field: ‘uuid’
[17:39:24.666]   - Field: ‘seed’
[17:39:24.666]   - Field: ‘version’
[17:39:24.666]   - Field: ‘result’
[17:39:24.666]   - Field: ‘asynchronous’
[17:39:24.667]   - Field: ‘calls’
[17:39:24.667]   - Field: ‘globals’
[17:39:24.667]   - Field: ‘stdout’
[17:39:24.667]   - Field: ‘earlySignal’
[17:39:24.667]   - Field: ‘lazy’
[17:39:24.667]   - Field: ‘state’
[17:39:24.667] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:24.667] - Launch lazy future ...
[17:39:24.667] Packages needed by the future expression (n = 0): <none>
[17:39:24.667] Packages needed by future strategies (n = 0): <none>
[17:39:24.668] {
[17:39:24.668]     {
[17:39:24.668]         {
[17:39:24.668]             ...future.startTime <- base::Sys.time()
[17:39:24.668]             {
[17:39:24.668]                 {
[17:39:24.668]                   {
[17:39:24.668]                     base::local({
[17:39:24.668]                       has_future <- base::requireNamespace("future", 
[17:39:24.668]                         quietly = TRUE)
[17:39:24.668]                       if (has_future) {
[17:39:24.668]                         ns <- base::getNamespace("future")
[17:39:24.668]                         version <- ns[[".package"]][["version"]]
[17:39:24.668]                         if (is.null(version)) 
[17:39:24.668]                           version <- utils::packageVersion("future")
[17:39:24.668]                       }
[17:39:24.668]                       else {
[17:39:24.668]                         version <- NULL
[17:39:24.668]                       }
[17:39:24.668]                       if (!has_future || version < "1.8.0") {
[17:39:24.668]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:24.668]                           "", base::R.version$version.string), 
[17:39:24.668]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:24.668]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:24.668]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:24.668]                             "release", "version")], collapse = " "), 
[17:39:24.668]                           hostname = base::Sys.info()[["nodename"]])
[17:39:24.668]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:24.668]                           info)
[17:39:24.668]                         info <- base::paste(info, collapse = "; ")
[17:39:24.668]                         if (!has_future) {
[17:39:24.668]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:24.668]                             info)
[17:39:24.668]                         }
[17:39:24.668]                         else {
[17:39:24.668]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:24.668]                             info, version)
[17:39:24.668]                         }
[17:39:24.668]                         base::stop(msg)
[17:39:24.668]                       }
[17:39:24.668]                     })
[17:39:24.668]                   }
[17:39:24.668]                   ...future.strategy.old <- future::plan("list")
[17:39:24.668]                   options(future.plan = NULL)
[17:39:24.668]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.668]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:24.668]                 }
[17:39:24.668]                 ...future.workdir <- getwd()
[17:39:24.668]             }
[17:39:24.668]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:24.668]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:24.668]         }
[17:39:24.668]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:24.668]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:24.668]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:24.668]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:24.668]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:24.668]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:24.668]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:24.668]             base::names(...future.oldOptions))
[17:39:24.668]     }
[17:39:24.668]     if (FALSE) {
[17:39:24.668]     }
[17:39:24.668]     else {
[17:39:24.668]         if (TRUE) {
[17:39:24.668]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:24.668]                 open = "w")
[17:39:24.668]         }
[17:39:24.668]         else {
[17:39:24.668]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:24.668]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:24.668]         }
[17:39:24.668]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:24.668]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:24.668]             base::sink(type = "output", split = FALSE)
[17:39:24.668]             base::close(...future.stdout)
[17:39:24.668]         }, add = TRUE)
[17:39:24.668]     }
[17:39:24.668]     ...future.frame <- base::sys.nframe()
[17:39:24.668]     ...future.conditions <- base::list()
[17:39:24.668]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:24.668]     if (FALSE) {
[17:39:24.668]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:24.668]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:24.668]     }
[17:39:24.668]     ...future.result <- base::tryCatch({
[17:39:24.668]         base::withCallingHandlers({
[17:39:24.668]             ...future.value <- base::withVisible(base::local({
[17:39:24.668]                 1
[17:39:24.668]             }))
[17:39:24.668]             future::FutureResult(value = ...future.value$value, 
[17:39:24.668]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.668]                   ...future.rng), globalenv = if (FALSE) 
[17:39:24.668]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:24.668]                     ...future.globalenv.names))
[17:39:24.668]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:24.668]         }, condition = base::local({
[17:39:24.668]             c <- base::c
[17:39:24.668]             inherits <- base::inherits
[17:39:24.668]             invokeRestart <- base::invokeRestart
[17:39:24.668]             length <- base::length
[17:39:24.668]             list <- base::list
[17:39:24.668]             seq.int <- base::seq.int
[17:39:24.668]             signalCondition <- base::signalCondition
[17:39:24.668]             sys.calls <- base::sys.calls
[17:39:24.668]             `[[` <- base::`[[`
[17:39:24.668]             `+` <- base::`+`
[17:39:24.668]             `<<-` <- base::`<<-`
[17:39:24.668]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:24.668]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:24.668]                   3L)]
[17:39:24.668]             }
[17:39:24.668]             function(cond) {
[17:39:24.668]                 is_error <- inherits(cond, "error")
[17:39:24.668]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:24.668]                   NULL)
[17:39:24.668]                 if (is_error) {
[17:39:24.668]                   sessionInformation <- function() {
[17:39:24.668]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:24.668]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:24.668]                       search = base::search(), system = base::Sys.info())
[17:39:24.668]                   }
[17:39:24.668]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.668]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:24.668]                     cond$call), session = sessionInformation(), 
[17:39:24.668]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:24.668]                   signalCondition(cond)
[17:39:24.668]                 }
[17:39:24.668]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:24.668]                 "immediateCondition"))) {
[17:39:24.668]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:24.668]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.668]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:24.668]                   if (TRUE && !signal) {
[17:39:24.668]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.668]                     {
[17:39:24.668]                       inherits <- base::inherits
[17:39:24.668]                       invokeRestart <- base::invokeRestart
[17:39:24.668]                       is.null <- base::is.null
[17:39:24.668]                       muffled <- FALSE
[17:39:24.668]                       if (inherits(cond, "message")) {
[17:39:24.668]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.668]                         if (muffled) 
[17:39:24.668]                           invokeRestart("muffleMessage")
[17:39:24.668]                       }
[17:39:24.668]                       else if (inherits(cond, "warning")) {
[17:39:24.668]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.668]                         if (muffled) 
[17:39:24.668]                           invokeRestart("muffleWarning")
[17:39:24.668]                       }
[17:39:24.668]                       else if (inherits(cond, "condition")) {
[17:39:24.668]                         if (!is.null(pattern)) {
[17:39:24.668]                           computeRestarts <- base::computeRestarts
[17:39:24.668]                           grepl <- base::grepl
[17:39:24.668]                           restarts <- computeRestarts(cond)
[17:39:24.668]                           for (restart in restarts) {
[17:39:24.668]                             name <- restart$name
[17:39:24.668]                             if (is.null(name)) 
[17:39:24.668]                               next
[17:39:24.668]                             if (!grepl(pattern, name)) 
[17:39:24.668]                               next
[17:39:24.668]                             invokeRestart(restart)
[17:39:24.668]                             muffled <- TRUE
[17:39:24.668]                             break
[17:39:24.668]                           }
[17:39:24.668]                         }
[17:39:24.668]                       }
[17:39:24.668]                       invisible(muffled)
[17:39:24.668]                     }
[17:39:24.668]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.668]                   }
[17:39:24.668]                 }
[17:39:24.668]                 else {
[17:39:24.668]                   if (TRUE) {
[17:39:24.668]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.668]                     {
[17:39:24.668]                       inherits <- base::inherits
[17:39:24.668]                       invokeRestart <- base::invokeRestart
[17:39:24.668]                       is.null <- base::is.null
[17:39:24.668]                       muffled <- FALSE
[17:39:24.668]                       if (inherits(cond, "message")) {
[17:39:24.668]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.668]                         if (muffled) 
[17:39:24.668]                           invokeRestart("muffleMessage")
[17:39:24.668]                       }
[17:39:24.668]                       else if (inherits(cond, "warning")) {
[17:39:24.668]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.668]                         if (muffled) 
[17:39:24.668]                           invokeRestart("muffleWarning")
[17:39:24.668]                       }
[17:39:24.668]                       else if (inherits(cond, "condition")) {
[17:39:24.668]                         if (!is.null(pattern)) {
[17:39:24.668]                           computeRestarts <- base::computeRestarts
[17:39:24.668]                           grepl <- base::grepl
[17:39:24.668]                           restarts <- computeRestarts(cond)
[17:39:24.668]                           for (restart in restarts) {
[17:39:24.668]                             name <- restart$name
[17:39:24.668]                             if (is.null(name)) 
[17:39:24.668]                               next
[17:39:24.668]                             if (!grepl(pattern, name)) 
[17:39:24.668]                               next
[17:39:24.668]                             invokeRestart(restart)
[17:39:24.668]                             muffled <- TRUE
[17:39:24.668]                             break
[17:39:24.668]                           }
[17:39:24.668]                         }
[17:39:24.668]                       }
[17:39:24.668]                       invisible(muffled)
[17:39:24.668]                     }
[17:39:24.668]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.668]                   }
[17:39:24.668]                 }
[17:39:24.668]             }
[17:39:24.668]         }))
[17:39:24.668]     }, error = function(ex) {
[17:39:24.668]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:24.668]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.668]                 ...future.rng), started = ...future.startTime, 
[17:39:24.668]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:24.668]             version = "1.8"), class = "FutureResult")
[17:39:24.668]     }, finally = {
[17:39:24.668]         if (!identical(...future.workdir, getwd())) 
[17:39:24.668]             setwd(...future.workdir)
[17:39:24.668]         {
[17:39:24.668]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:24.668]                 ...future.oldOptions$nwarnings <- NULL
[17:39:24.668]             }
[17:39:24.668]             base::options(...future.oldOptions)
[17:39:24.668]             if (.Platform$OS.type == "windows") {
[17:39:24.668]                 old_names <- names(...future.oldEnvVars)
[17:39:24.668]                 envs <- base::Sys.getenv()
[17:39:24.668]                 names <- names(envs)
[17:39:24.668]                 common <- intersect(names, old_names)
[17:39:24.668]                 added <- setdiff(names, old_names)
[17:39:24.668]                 removed <- setdiff(old_names, names)
[17:39:24.668]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:24.668]                   envs[common]]
[17:39:24.668]                 NAMES <- toupper(changed)
[17:39:24.668]                 args <- list()
[17:39:24.668]                 for (kk in seq_along(NAMES)) {
[17:39:24.668]                   name <- changed[[kk]]
[17:39:24.668]                   NAME <- NAMES[[kk]]
[17:39:24.668]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.668]                     next
[17:39:24.668]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.668]                 }
[17:39:24.668]                 NAMES <- toupper(added)
[17:39:24.668]                 for (kk in seq_along(NAMES)) {
[17:39:24.668]                   name <- added[[kk]]
[17:39:24.668]                   NAME <- NAMES[[kk]]
[17:39:24.668]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.668]                     next
[17:39:24.668]                   args[[name]] <- ""
[17:39:24.668]                 }
[17:39:24.668]                 NAMES <- toupper(removed)
[17:39:24.668]                 for (kk in seq_along(NAMES)) {
[17:39:24.668]                   name <- removed[[kk]]
[17:39:24.668]                   NAME <- NAMES[[kk]]
[17:39:24.668]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.668]                     next
[17:39:24.668]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.668]                 }
[17:39:24.668]                 if (length(args) > 0) 
[17:39:24.668]                   base::do.call(base::Sys.setenv, args = args)
[17:39:24.668]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:24.668]             }
[17:39:24.668]             else {
[17:39:24.668]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:24.668]             }
[17:39:24.668]             {
[17:39:24.668]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:24.668]                   0L) {
[17:39:24.668]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:24.668]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:24.668]                   base::options(opts)
[17:39:24.668]                 }
[17:39:24.668]                 {
[17:39:24.668]                   {
[17:39:24.668]                     NULL
[17:39:24.668]                     RNGkind("Mersenne-Twister")
[17:39:24.668]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:24.668]                       inherits = FALSE)
[17:39:24.668]                   }
[17:39:24.668]                   options(future.plan = NULL)
[17:39:24.668]                   if (is.na(NA_character_)) 
[17:39:24.668]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.668]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:24.668]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:24.668]                     .init = FALSE)
[17:39:24.668]                 }
[17:39:24.668]             }
[17:39:24.668]         }
[17:39:24.668]     })
[17:39:24.668]     if (TRUE) {
[17:39:24.668]         base::sink(type = "output", split = FALSE)
[17:39:24.668]         if (TRUE) {
[17:39:24.668]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:24.668]         }
[17:39:24.668]         else {
[17:39:24.668]             ...future.result["stdout"] <- base::list(NULL)
[17:39:24.668]         }
[17:39:24.668]         base::close(...future.stdout)
[17:39:24.668]         ...future.stdout <- NULL
[17:39:24.668]     }
[17:39:24.668]     ...future.result$conditions <- ...future.conditions
[17:39:24.668]     ...future.result$finished <- base::Sys.time()
[17:39:24.668]     ...future.result
[17:39:24.668] }
[17:39:24.670] plan(): Setting new future strategy stack:
[17:39:24.670] List of future strategies:
[17:39:24.670] 1. sequential:
[17:39:24.670]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.670]    - tweaked: FALSE
[17:39:24.670]    - call: NULL
[17:39:24.670] plan(): nbrOfWorkers() = 1
[17:39:24.671] plan(): Setting new future strategy stack:
[17:39:24.671] List of future strategies:
[17:39:24.671] 1. sequential:
[17:39:24.671]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.671]    - tweaked: FALSE
[17:39:24.671]    - call: future::plan("sequential")
[17:39:24.671] plan(): nbrOfWorkers() = 1
[17:39:24.672] SequentialFuture started (and completed)
[17:39:24.672] - Launch lazy future ... done
[17:39:24.672] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[17:39:24.672] run() for ‘Future’ ...
[17:39:24.672] - state: ‘created’
[17:39:24.672] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:24.672] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:24.673] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:24.673]   - Field: ‘label’
[17:39:24.673]   - Field: ‘local’
[17:39:24.673]   - Field: ‘owner’
[17:39:24.673]   - Field: ‘envir’
[17:39:24.673]   - Field: ‘packages’
[17:39:24.673]   - Field: ‘gc’
[17:39:24.673]   - Field: ‘conditions’
[17:39:24.673]   - Field: ‘expr’
[17:39:24.673]   - Field: ‘uuid’
[17:39:24.673]   - Field: ‘seed’
[17:39:24.674]   - Field: ‘version’
[17:39:24.674]   - Field: ‘result’
[17:39:24.674]   - Field: ‘asynchronous’
[17:39:24.674]   - Field: ‘calls’
[17:39:24.674]   - Field: ‘globals’
[17:39:24.674]   - Field: ‘stdout’
[17:39:24.674]   - Field: ‘earlySignal’
[17:39:24.674]   - Field: ‘lazy’
[17:39:24.674]   - Field: ‘state’
[17:39:24.674] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:24.674] - Launch lazy future ...
[17:39:24.675] Packages needed by the future expression (n = 0): <none>
[17:39:24.675] Packages needed by future strategies (n = 0): <none>
[17:39:24.675] {
[17:39:24.675]     {
[17:39:24.675]         {
[17:39:24.675]             ...future.startTime <- base::Sys.time()
[17:39:24.675]             {
[17:39:24.675]                 {
[17:39:24.675]                   {
[17:39:24.675]                     base::local({
[17:39:24.675]                       has_future <- base::requireNamespace("future", 
[17:39:24.675]                         quietly = TRUE)
[17:39:24.675]                       if (has_future) {
[17:39:24.675]                         ns <- base::getNamespace("future")
[17:39:24.675]                         version <- ns[[".package"]][["version"]]
[17:39:24.675]                         if (is.null(version)) 
[17:39:24.675]                           version <- utils::packageVersion("future")
[17:39:24.675]                       }
[17:39:24.675]                       else {
[17:39:24.675]                         version <- NULL
[17:39:24.675]                       }
[17:39:24.675]                       if (!has_future || version < "1.8.0") {
[17:39:24.675]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:24.675]                           "", base::R.version$version.string), 
[17:39:24.675]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:24.675]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:24.675]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:24.675]                             "release", "version")], collapse = " "), 
[17:39:24.675]                           hostname = base::Sys.info()[["nodename"]])
[17:39:24.675]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:24.675]                           info)
[17:39:24.675]                         info <- base::paste(info, collapse = "; ")
[17:39:24.675]                         if (!has_future) {
[17:39:24.675]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:24.675]                             info)
[17:39:24.675]                         }
[17:39:24.675]                         else {
[17:39:24.675]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:24.675]                             info, version)
[17:39:24.675]                         }
[17:39:24.675]                         base::stop(msg)
[17:39:24.675]                       }
[17:39:24.675]                     })
[17:39:24.675]                   }
[17:39:24.675]                   ...future.strategy.old <- future::plan("list")
[17:39:24.675]                   options(future.plan = NULL)
[17:39:24.675]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.675]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:24.675]                 }
[17:39:24.675]                 ...future.workdir <- getwd()
[17:39:24.675]             }
[17:39:24.675]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:24.675]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:24.675]         }
[17:39:24.675]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:24.675]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:24.675]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:24.675]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:24.675]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:24.675]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:24.675]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:24.675]             base::names(...future.oldOptions))
[17:39:24.675]     }
[17:39:24.675]     if (FALSE) {
[17:39:24.675]     }
[17:39:24.675]     else {
[17:39:24.675]         if (TRUE) {
[17:39:24.675]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:24.675]                 open = "w")
[17:39:24.675]         }
[17:39:24.675]         else {
[17:39:24.675]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:24.675]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:24.675]         }
[17:39:24.675]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:24.675]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:24.675]             base::sink(type = "output", split = FALSE)
[17:39:24.675]             base::close(...future.stdout)
[17:39:24.675]         }, add = TRUE)
[17:39:24.675]     }
[17:39:24.675]     ...future.frame <- base::sys.nframe()
[17:39:24.675]     ...future.conditions <- base::list()
[17:39:24.675]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:24.675]     if (FALSE) {
[17:39:24.675]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:24.675]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:24.675]     }
[17:39:24.675]     ...future.result <- base::tryCatch({
[17:39:24.675]         base::withCallingHandlers({
[17:39:24.675]             ...future.value <- base::withVisible(base::local({
[17:39:24.675]                 2
[17:39:24.675]             }))
[17:39:24.675]             future::FutureResult(value = ...future.value$value, 
[17:39:24.675]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.675]                   ...future.rng), globalenv = if (FALSE) 
[17:39:24.675]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:24.675]                     ...future.globalenv.names))
[17:39:24.675]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:24.675]         }, condition = base::local({
[17:39:24.675]             c <- base::c
[17:39:24.675]             inherits <- base::inherits
[17:39:24.675]             invokeRestart <- base::invokeRestart
[17:39:24.675]             length <- base::length
[17:39:24.675]             list <- base::list
[17:39:24.675]             seq.int <- base::seq.int
[17:39:24.675]             signalCondition <- base::signalCondition
[17:39:24.675]             sys.calls <- base::sys.calls
[17:39:24.675]             `[[` <- base::`[[`
[17:39:24.675]             `+` <- base::`+`
[17:39:24.675]             `<<-` <- base::`<<-`
[17:39:24.675]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:24.675]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:24.675]                   3L)]
[17:39:24.675]             }
[17:39:24.675]             function(cond) {
[17:39:24.675]                 is_error <- inherits(cond, "error")
[17:39:24.675]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:24.675]                   NULL)
[17:39:24.675]                 if (is_error) {
[17:39:24.675]                   sessionInformation <- function() {
[17:39:24.675]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:24.675]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:24.675]                       search = base::search(), system = base::Sys.info())
[17:39:24.675]                   }
[17:39:24.675]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.675]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:24.675]                     cond$call), session = sessionInformation(), 
[17:39:24.675]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:24.675]                   signalCondition(cond)
[17:39:24.675]                 }
[17:39:24.675]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:24.675]                 "immediateCondition"))) {
[17:39:24.675]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:24.675]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.675]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:24.675]                   if (TRUE && !signal) {
[17:39:24.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.675]                     {
[17:39:24.675]                       inherits <- base::inherits
[17:39:24.675]                       invokeRestart <- base::invokeRestart
[17:39:24.675]                       is.null <- base::is.null
[17:39:24.675]                       muffled <- FALSE
[17:39:24.675]                       if (inherits(cond, "message")) {
[17:39:24.675]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.675]                         if (muffled) 
[17:39:24.675]                           invokeRestart("muffleMessage")
[17:39:24.675]                       }
[17:39:24.675]                       else if (inherits(cond, "warning")) {
[17:39:24.675]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.675]                         if (muffled) 
[17:39:24.675]                           invokeRestart("muffleWarning")
[17:39:24.675]                       }
[17:39:24.675]                       else if (inherits(cond, "condition")) {
[17:39:24.675]                         if (!is.null(pattern)) {
[17:39:24.675]                           computeRestarts <- base::computeRestarts
[17:39:24.675]                           grepl <- base::grepl
[17:39:24.675]                           restarts <- computeRestarts(cond)
[17:39:24.675]                           for (restart in restarts) {
[17:39:24.675]                             name <- restart$name
[17:39:24.675]                             if (is.null(name)) 
[17:39:24.675]                               next
[17:39:24.675]                             if (!grepl(pattern, name)) 
[17:39:24.675]                               next
[17:39:24.675]                             invokeRestart(restart)
[17:39:24.675]                             muffled <- TRUE
[17:39:24.675]                             break
[17:39:24.675]                           }
[17:39:24.675]                         }
[17:39:24.675]                       }
[17:39:24.675]                       invisible(muffled)
[17:39:24.675]                     }
[17:39:24.675]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.675]                   }
[17:39:24.675]                 }
[17:39:24.675]                 else {
[17:39:24.675]                   if (TRUE) {
[17:39:24.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.675]                     {
[17:39:24.675]                       inherits <- base::inherits
[17:39:24.675]                       invokeRestart <- base::invokeRestart
[17:39:24.675]                       is.null <- base::is.null
[17:39:24.675]                       muffled <- FALSE
[17:39:24.675]                       if (inherits(cond, "message")) {
[17:39:24.675]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.675]                         if (muffled) 
[17:39:24.675]                           invokeRestart("muffleMessage")
[17:39:24.675]                       }
[17:39:24.675]                       else if (inherits(cond, "warning")) {
[17:39:24.675]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.675]                         if (muffled) 
[17:39:24.675]                           invokeRestart("muffleWarning")
[17:39:24.675]                       }
[17:39:24.675]                       else if (inherits(cond, "condition")) {
[17:39:24.675]                         if (!is.null(pattern)) {
[17:39:24.675]                           computeRestarts <- base::computeRestarts
[17:39:24.675]                           grepl <- base::grepl
[17:39:24.675]                           restarts <- computeRestarts(cond)
[17:39:24.675]                           for (restart in restarts) {
[17:39:24.675]                             name <- restart$name
[17:39:24.675]                             if (is.null(name)) 
[17:39:24.675]                               next
[17:39:24.675]                             if (!grepl(pattern, name)) 
[17:39:24.675]                               next
[17:39:24.675]                             invokeRestart(restart)
[17:39:24.675]                             muffled <- TRUE
[17:39:24.675]                             break
[17:39:24.675]                           }
[17:39:24.675]                         }
[17:39:24.675]                       }
[17:39:24.675]                       invisible(muffled)
[17:39:24.675]                     }
[17:39:24.675]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.675]                   }
[17:39:24.675]                 }
[17:39:24.675]             }
[17:39:24.675]         }))
[17:39:24.675]     }, error = function(ex) {
[17:39:24.675]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:24.675]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.675]                 ...future.rng), started = ...future.startTime, 
[17:39:24.675]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:24.675]             version = "1.8"), class = "FutureResult")
[17:39:24.675]     }, finally = {
[17:39:24.675]         if (!identical(...future.workdir, getwd())) 
[17:39:24.675]             setwd(...future.workdir)
[17:39:24.675]         {
[17:39:24.675]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:24.675]                 ...future.oldOptions$nwarnings <- NULL
[17:39:24.675]             }
[17:39:24.675]             base::options(...future.oldOptions)
[17:39:24.675]             if (.Platform$OS.type == "windows") {
[17:39:24.675]                 old_names <- names(...future.oldEnvVars)
[17:39:24.675]                 envs <- base::Sys.getenv()
[17:39:24.675]                 names <- names(envs)
[17:39:24.675]                 common <- intersect(names, old_names)
[17:39:24.675]                 added <- setdiff(names, old_names)
[17:39:24.675]                 removed <- setdiff(old_names, names)
[17:39:24.675]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:24.675]                   envs[common]]
[17:39:24.675]                 NAMES <- toupper(changed)
[17:39:24.675]                 args <- list()
[17:39:24.675]                 for (kk in seq_along(NAMES)) {
[17:39:24.675]                   name <- changed[[kk]]
[17:39:24.675]                   NAME <- NAMES[[kk]]
[17:39:24.675]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.675]                     next
[17:39:24.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.675]                 }
[17:39:24.675]                 NAMES <- toupper(added)
[17:39:24.675]                 for (kk in seq_along(NAMES)) {
[17:39:24.675]                   name <- added[[kk]]
[17:39:24.675]                   NAME <- NAMES[[kk]]
[17:39:24.675]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.675]                     next
[17:39:24.675]                   args[[name]] <- ""
[17:39:24.675]                 }
[17:39:24.675]                 NAMES <- toupper(removed)
[17:39:24.675]                 for (kk in seq_along(NAMES)) {
[17:39:24.675]                   name <- removed[[kk]]
[17:39:24.675]                   NAME <- NAMES[[kk]]
[17:39:24.675]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.675]                     next
[17:39:24.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.675]                 }
[17:39:24.675]                 if (length(args) > 0) 
[17:39:24.675]                   base::do.call(base::Sys.setenv, args = args)
[17:39:24.675]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:24.675]             }
[17:39:24.675]             else {
[17:39:24.675]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:24.675]             }
[17:39:24.675]             {
[17:39:24.675]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:24.675]                   0L) {
[17:39:24.675]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:24.675]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:24.675]                   base::options(opts)
[17:39:24.675]                 }
[17:39:24.675]                 {
[17:39:24.675]                   {
[17:39:24.675]                     NULL
[17:39:24.675]                     RNGkind("Mersenne-Twister")
[17:39:24.675]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:24.675]                       inherits = FALSE)
[17:39:24.675]                   }
[17:39:24.675]                   options(future.plan = NULL)
[17:39:24.675]                   if (is.na(NA_character_)) 
[17:39:24.675]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.675]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:24.675]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:24.675]                     .init = FALSE)
[17:39:24.675]                 }
[17:39:24.675]             }
[17:39:24.675]         }
[17:39:24.675]     })
[17:39:24.675]     if (TRUE) {
[17:39:24.675]         base::sink(type = "output", split = FALSE)
[17:39:24.675]         if (TRUE) {
[17:39:24.675]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:24.675]         }
[17:39:24.675]         else {
[17:39:24.675]             ...future.result["stdout"] <- base::list(NULL)
[17:39:24.675]         }
[17:39:24.675]         base::close(...future.stdout)
[17:39:24.675]         ...future.stdout <- NULL
[17:39:24.675]     }
[17:39:24.675]     ...future.result$conditions <- ...future.conditions
[17:39:24.675]     ...future.result$finished <- base::Sys.time()
[17:39:24.675]     ...future.result
[17:39:24.675] }
[17:39:24.677] plan(): Setting new future strategy stack:
[17:39:24.677] List of future strategies:
[17:39:24.677] 1. sequential:
[17:39:24.677]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.677]    - tweaked: FALSE
[17:39:24.677]    - call: NULL
[17:39:24.677] plan(): nbrOfWorkers() = 1
[17:39:24.678] plan(): Setting new future strategy stack:
[17:39:24.678] List of future strategies:
[17:39:24.678] 1. sequential:
[17:39:24.678]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.678]    - tweaked: FALSE
[17:39:24.678]    - call: future::plan("sequential")
[17:39:24.679] plan(): nbrOfWorkers() = 1
[17:39:24.679] SequentialFuture started (and completed)
[17:39:24.679] - Launch lazy future ... done
[17:39:24.679] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[17:39:24.685] getGlobalsAndPackages() ...
[17:39:24.685] Searching for globals...
[17:39:24.687] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:39:24.687] Searching for globals ... DONE
[17:39:24.687] Resolving globals: FALSE
[17:39:24.688] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:24.688] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:39:24.688] - globals: [2] ‘rr’, ‘cc’
[17:39:24.688] 
[17:39:24.688] getGlobalsAndPackages() ... DONE
[17:39:24.689] getGlobalsAndPackages() ...
[17:39:24.689] Searching for globals...
[17:39:24.690] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:39:24.690] Searching for globals ... DONE
[17:39:24.690] Resolving globals: FALSE
[17:39:24.690] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:24.690] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:39:24.691] - globals: [2] ‘rr’, ‘cc’
[17:39:24.691] 
[17:39:24.691] getGlobalsAndPackages() ... DONE
[17:39:24.691] getGlobalsAndPackages() ...
[17:39:24.691] Searching for globals...
[17:39:24.692] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:39:24.692] Searching for globals ... DONE
[17:39:24.692] Resolving globals: FALSE
[17:39:24.693] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:24.693] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:39:24.693] - globals: [2] ‘rr’, ‘cc’
[17:39:24.693] 
[17:39:24.693] getGlobalsAndPackages() ... DONE
[17:39:24.694] getGlobalsAndPackages() ...
[17:39:24.694] Searching for globals...
[17:39:24.696] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:39:24.696] Searching for globals ... DONE
[17:39:24.696] Resolving globals: FALSE
[17:39:24.697] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:24.697] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:39:24.697] - globals: [2] ‘rr’, ‘cc’
[17:39:24.697] 
[17:39:24.697] getGlobalsAndPackages() ... DONE
[17:39:24.698] getGlobalsAndPackages() ...
[17:39:24.698] Searching for globals...
[17:39:24.699] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:39:24.699] Searching for globals ... DONE
[17:39:24.699] Resolving globals: FALSE
[17:39:24.699] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:24.700] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:39:24.700] - globals: [2] ‘rr’, ‘cc’
[17:39:24.700] 
[17:39:24.700] getGlobalsAndPackages() ... DONE
[17:39:24.700] getGlobalsAndPackages() ...
[17:39:24.700] Searching for globals...
[17:39:24.701] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:39:24.701] Searching for globals ... DONE
[17:39:24.701] Resolving globals: FALSE
[17:39:24.702] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:24.702] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:39:24.702] - globals: [2] ‘rr’, ‘cc’
[17:39:24.702] 
[17:39:24.702] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[17:39:24.703] run() for ‘Future’ ...
[17:39:24.703] - state: ‘created’
[17:39:24.703] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:24.703] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:24.703] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:24.703]   - Field: ‘label’
[17:39:24.703]   - Field: ‘local’
[17:39:24.703]   - Field: ‘owner’
[17:39:24.704]   - Field: ‘envir’
[17:39:24.704]   - Field: ‘packages’
[17:39:24.704]   - Field: ‘gc’
[17:39:24.704]   - Field: ‘conditions’
[17:39:24.704]   - Field: ‘expr’
[17:39:24.704]   - Field: ‘uuid’
[17:39:24.704]   - Field: ‘seed’
[17:39:24.704]   - Field: ‘version’
[17:39:24.704]   - Field: ‘result’
[17:39:24.704]   - Field: ‘asynchronous’
[17:39:24.704]   - Field: ‘calls’
[17:39:24.705]   - Field: ‘globals’
[17:39:24.705]   - Field: ‘stdout’
[17:39:24.705]   - Field: ‘earlySignal’
[17:39:24.705]   - Field: ‘lazy’
[17:39:24.705]   - Field: ‘state’
[17:39:24.705] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:24.705] - Launch lazy future ...
[17:39:24.705] Packages needed by the future expression (n = 0): <none>
[17:39:24.705] Packages needed by future strategies (n = 0): <none>
[17:39:24.706] {
[17:39:24.706]     {
[17:39:24.706]         {
[17:39:24.706]             ...future.startTime <- base::Sys.time()
[17:39:24.706]             {
[17:39:24.706]                 {
[17:39:24.706]                   {
[17:39:24.706]                     base::local({
[17:39:24.706]                       has_future <- base::requireNamespace("future", 
[17:39:24.706]                         quietly = TRUE)
[17:39:24.706]                       if (has_future) {
[17:39:24.706]                         ns <- base::getNamespace("future")
[17:39:24.706]                         version <- ns[[".package"]][["version"]]
[17:39:24.706]                         if (is.null(version)) 
[17:39:24.706]                           version <- utils::packageVersion("future")
[17:39:24.706]                       }
[17:39:24.706]                       else {
[17:39:24.706]                         version <- NULL
[17:39:24.706]                       }
[17:39:24.706]                       if (!has_future || version < "1.8.0") {
[17:39:24.706]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:24.706]                           "", base::R.version$version.string), 
[17:39:24.706]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:24.706]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:24.706]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:24.706]                             "release", "version")], collapse = " "), 
[17:39:24.706]                           hostname = base::Sys.info()[["nodename"]])
[17:39:24.706]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:24.706]                           info)
[17:39:24.706]                         info <- base::paste(info, collapse = "; ")
[17:39:24.706]                         if (!has_future) {
[17:39:24.706]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:24.706]                             info)
[17:39:24.706]                         }
[17:39:24.706]                         else {
[17:39:24.706]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:24.706]                             info, version)
[17:39:24.706]                         }
[17:39:24.706]                         base::stop(msg)
[17:39:24.706]                       }
[17:39:24.706]                     })
[17:39:24.706]                   }
[17:39:24.706]                   ...future.strategy.old <- future::plan("list")
[17:39:24.706]                   options(future.plan = NULL)
[17:39:24.706]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.706]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:24.706]                 }
[17:39:24.706]                 ...future.workdir <- getwd()
[17:39:24.706]             }
[17:39:24.706]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:24.706]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:24.706]         }
[17:39:24.706]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:24.706]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:24.706]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:24.706]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:24.706]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:24.706]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:24.706]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:24.706]             base::names(...future.oldOptions))
[17:39:24.706]     }
[17:39:24.706]     if (FALSE) {
[17:39:24.706]     }
[17:39:24.706]     else {
[17:39:24.706]         if (TRUE) {
[17:39:24.706]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:24.706]                 open = "w")
[17:39:24.706]         }
[17:39:24.706]         else {
[17:39:24.706]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:24.706]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:24.706]         }
[17:39:24.706]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:24.706]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:24.706]             base::sink(type = "output", split = FALSE)
[17:39:24.706]             base::close(...future.stdout)
[17:39:24.706]         }, add = TRUE)
[17:39:24.706]     }
[17:39:24.706]     ...future.frame <- base::sys.nframe()
[17:39:24.706]     ...future.conditions <- base::list()
[17:39:24.706]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:24.706]     if (FALSE) {
[17:39:24.706]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:24.706]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:24.706]     }
[17:39:24.706]     ...future.result <- base::tryCatch({
[17:39:24.706]         base::withCallingHandlers({
[17:39:24.706]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:39:24.706]                 rr, cc)))
[17:39:24.706]             future::FutureResult(value = ...future.value$value, 
[17:39:24.706]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.706]                   ...future.rng), globalenv = if (FALSE) 
[17:39:24.706]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:24.706]                     ...future.globalenv.names))
[17:39:24.706]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:24.706]         }, condition = base::local({
[17:39:24.706]             c <- base::c
[17:39:24.706]             inherits <- base::inherits
[17:39:24.706]             invokeRestart <- base::invokeRestart
[17:39:24.706]             length <- base::length
[17:39:24.706]             list <- base::list
[17:39:24.706]             seq.int <- base::seq.int
[17:39:24.706]             signalCondition <- base::signalCondition
[17:39:24.706]             sys.calls <- base::sys.calls
[17:39:24.706]             `[[` <- base::`[[`
[17:39:24.706]             `+` <- base::`+`
[17:39:24.706]             `<<-` <- base::`<<-`
[17:39:24.706]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:24.706]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:24.706]                   3L)]
[17:39:24.706]             }
[17:39:24.706]             function(cond) {
[17:39:24.706]                 is_error <- inherits(cond, "error")
[17:39:24.706]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:24.706]                   NULL)
[17:39:24.706]                 if (is_error) {
[17:39:24.706]                   sessionInformation <- function() {
[17:39:24.706]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:24.706]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:24.706]                       search = base::search(), system = base::Sys.info())
[17:39:24.706]                   }
[17:39:24.706]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.706]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:24.706]                     cond$call), session = sessionInformation(), 
[17:39:24.706]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:24.706]                   signalCondition(cond)
[17:39:24.706]                 }
[17:39:24.706]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:24.706]                 "immediateCondition"))) {
[17:39:24.706]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:24.706]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.706]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:24.706]                   if (TRUE && !signal) {
[17:39:24.706]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.706]                     {
[17:39:24.706]                       inherits <- base::inherits
[17:39:24.706]                       invokeRestart <- base::invokeRestart
[17:39:24.706]                       is.null <- base::is.null
[17:39:24.706]                       muffled <- FALSE
[17:39:24.706]                       if (inherits(cond, "message")) {
[17:39:24.706]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.706]                         if (muffled) 
[17:39:24.706]                           invokeRestart("muffleMessage")
[17:39:24.706]                       }
[17:39:24.706]                       else if (inherits(cond, "warning")) {
[17:39:24.706]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.706]                         if (muffled) 
[17:39:24.706]                           invokeRestart("muffleWarning")
[17:39:24.706]                       }
[17:39:24.706]                       else if (inherits(cond, "condition")) {
[17:39:24.706]                         if (!is.null(pattern)) {
[17:39:24.706]                           computeRestarts <- base::computeRestarts
[17:39:24.706]                           grepl <- base::grepl
[17:39:24.706]                           restarts <- computeRestarts(cond)
[17:39:24.706]                           for (restart in restarts) {
[17:39:24.706]                             name <- restart$name
[17:39:24.706]                             if (is.null(name)) 
[17:39:24.706]                               next
[17:39:24.706]                             if (!grepl(pattern, name)) 
[17:39:24.706]                               next
[17:39:24.706]                             invokeRestart(restart)
[17:39:24.706]                             muffled <- TRUE
[17:39:24.706]                             break
[17:39:24.706]                           }
[17:39:24.706]                         }
[17:39:24.706]                       }
[17:39:24.706]                       invisible(muffled)
[17:39:24.706]                     }
[17:39:24.706]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.706]                   }
[17:39:24.706]                 }
[17:39:24.706]                 else {
[17:39:24.706]                   if (TRUE) {
[17:39:24.706]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.706]                     {
[17:39:24.706]                       inherits <- base::inherits
[17:39:24.706]                       invokeRestart <- base::invokeRestart
[17:39:24.706]                       is.null <- base::is.null
[17:39:24.706]                       muffled <- FALSE
[17:39:24.706]                       if (inherits(cond, "message")) {
[17:39:24.706]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.706]                         if (muffled) 
[17:39:24.706]                           invokeRestart("muffleMessage")
[17:39:24.706]                       }
[17:39:24.706]                       else if (inherits(cond, "warning")) {
[17:39:24.706]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.706]                         if (muffled) 
[17:39:24.706]                           invokeRestart("muffleWarning")
[17:39:24.706]                       }
[17:39:24.706]                       else if (inherits(cond, "condition")) {
[17:39:24.706]                         if (!is.null(pattern)) {
[17:39:24.706]                           computeRestarts <- base::computeRestarts
[17:39:24.706]                           grepl <- base::grepl
[17:39:24.706]                           restarts <- computeRestarts(cond)
[17:39:24.706]                           for (restart in restarts) {
[17:39:24.706]                             name <- restart$name
[17:39:24.706]                             if (is.null(name)) 
[17:39:24.706]                               next
[17:39:24.706]                             if (!grepl(pattern, name)) 
[17:39:24.706]                               next
[17:39:24.706]                             invokeRestart(restart)
[17:39:24.706]                             muffled <- TRUE
[17:39:24.706]                             break
[17:39:24.706]                           }
[17:39:24.706]                         }
[17:39:24.706]                       }
[17:39:24.706]                       invisible(muffled)
[17:39:24.706]                     }
[17:39:24.706]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.706]                   }
[17:39:24.706]                 }
[17:39:24.706]             }
[17:39:24.706]         }))
[17:39:24.706]     }, error = function(ex) {
[17:39:24.706]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:24.706]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.706]                 ...future.rng), started = ...future.startTime, 
[17:39:24.706]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:24.706]             version = "1.8"), class = "FutureResult")
[17:39:24.706]     }, finally = {
[17:39:24.706]         if (!identical(...future.workdir, getwd())) 
[17:39:24.706]             setwd(...future.workdir)
[17:39:24.706]         {
[17:39:24.706]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:24.706]                 ...future.oldOptions$nwarnings <- NULL
[17:39:24.706]             }
[17:39:24.706]             base::options(...future.oldOptions)
[17:39:24.706]             if (.Platform$OS.type == "windows") {
[17:39:24.706]                 old_names <- names(...future.oldEnvVars)
[17:39:24.706]                 envs <- base::Sys.getenv()
[17:39:24.706]                 names <- names(envs)
[17:39:24.706]                 common <- intersect(names, old_names)
[17:39:24.706]                 added <- setdiff(names, old_names)
[17:39:24.706]                 removed <- setdiff(old_names, names)
[17:39:24.706]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:24.706]                   envs[common]]
[17:39:24.706]                 NAMES <- toupper(changed)
[17:39:24.706]                 args <- list()
[17:39:24.706]                 for (kk in seq_along(NAMES)) {
[17:39:24.706]                   name <- changed[[kk]]
[17:39:24.706]                   NAME <- NAMES[[kk]]
[17:39:24.706]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.706]                     next
[17:39:24.706]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.706]                 }
[17:39:24.706]                 NAMES <- toupper(added)
[17:39:24.706]                 for (kk in seq_along(NAMES)) {
[17:39:24.706]                   name <- added[[kk]]
[17:39:24.706]                   NAME <- NAMES[[kk]]
[17:39:24.706]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.706]                     next
[17:39:24.706]                   args[[name]] <- ""
[17:39:24.706]                 }
[17:39:24.706]                 NAMES <- toupper(removed)
[17:39:24.706]                 for (kk in seq_along(NAMES)) {
[17:39:24.706]                   name <- removed[[kk]]
[17:39:24.706]                   NAME <- NAMES[[kk]]
[17:39:24.706]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.706]                     next
[17:39:24.706]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.706]                 }
[17:39:24.706]                 if (length(args) > 0) 
[17:39:24.706]                   base::do.call(base::Sys.setenv, args = args)
[17:39:24.706]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:24.706]             }
[17:39:24.706]             else {
[17:39:24.706]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:24.706]             }
[17:39:24.706]             {
[17:39:24.706]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:24.706]                   0L) {
[17:39:24.706]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:24.706]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:24.706]                   base::options(opts)
[17:39:24.706]                 }
[17:39:24.706]                 {
[17:39:24.706]                   {
[17:39:24.706]                     NULL
[17:39:24.706]                     RNGkind("Mersenne-Twister")
[17:39:24.706]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:24.706]                       inherits = FALSE)
[17:39:24.706]                   }
[17:39:24.706]                   options(future.plan = NULL)
[17:39:24.706]                   if (is.na(NA_character_)) 
[17:39:24.706]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.706]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:24.706]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:24.706]                     .init = FALSE)
[17:39:24.706]                 }
[17:39:24.706]             }
[17:39:24.706]         }
[17:39:24.706]     })
[17:39:24.706]     if (TRUE) {
[17:39:24.706]         base::sink(type = "output", split = FALSE)
[17:39:24.706]         if (TRUE) {
[17:39:24.706]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:24.706]         }
[17:39:24.706]         else {
[17:39:24.706]             ...future.result["stdout"] <- base::list(NULL)
[17:39:24.706]         }
[17:39:24.706]         base::close(...future.stdout)
[17:39:24.706]         ...future.stdout <- NULL
[17:39:24.706]     }
[17:39:24.706]     ...future.result$conditions <- ...future.conditions
[17:39:24.706]     ...future.result$finished <- base::Sys.time()
[17:39:24.706]     ...future.result
[17:39:24.706] }
[17:39:24.707] assign_globals() ...
[17:39:24.708] List of 2
[17:39:24.708]  $ rr: int 1
[17:39:24.708]  $ cc: int 1
[17:39:24.708]  - attr(*, "where")=List of 2
[17:39:24.708]   ..$ rr:<environment: R_EmptyEnv> 
[17:39:24.708]   ..$ cc:<environment: R_EmptyEnv> 
[17:39:24.708]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:24.708]  - attr(*, "resolved")= logi FALSE
[17:39:24.708]  - attr(*, "total_size")= num 112
[17:39:24.708]  - attr(*, "already-done")= logi TRUE
[17:39:24.710] - copied ‘rr’ to environment
[17:39:24.711] - copied ‘cc’ to environment
[17:39:24.711] assign_globals() ... done
[17:39:24.711] plan(): Setting new future strategy stack:
[17:39:24.711] List of future strategies:
[17:39:24.711] 1. sequential:
[17:39:24.711]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.711]    - tweaked: FALSE
[17:39:24.711]    - call: NULL
[17:39:24.711] plan(): nbrOfWorkers() = 1
[17:39:24.712] plan(): Setting new future strategy stack:
[17:39:24.712] List of future strategies:
[17:39:24.712] 1. sequential:
[17:39:24.712]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.712]    - tweaked: FALSE
[17:39:24.712]    - call: future::plan("sequential")
[17:39:24.713] plan(): nbrOfWorkers() = 1
[17:39:24.713] SequentialFuture started (and completed)
[17:39:24.713] - Launch lazy future ... done
[17:39:24.713] run() for ‘SequentialFuture’ ... done
[17:39:24.713] run() for ‘Future’ ...
[17:39:24.713] - state: ‘created’
[17:39:24.713] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:24.714] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:24.714] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:24.714]   - Field: ‘label’
[17:39:24.714]   - Field: ‘local’
[17:39:24.714]   - Field: ‘owner’
[17:39:24.714]   - Field: ‘envir’
[17:39:24.714]   - Field: ‘packages’
[17:39:24.714]   - Field: ‘gc’
[17:39:24.714]   - Field: ‘conditions’
[17:39:24.715]   - Field: ‘expr’
[17:39:24.715]   - Field: ‘uuid’
[17:39:24.715]   - Field: ‘seed’
[17:39:24.715]   - Field: ‘version’
[17:39:24.715]   - Field: ‘result’
[17:39:24.715]   - Field: ‘asynchronous’
[17:39:24.715]   - Field: ‘calls’
[17:39:24.715]   - Field: ‘globals’
[17:39:24.715]   - Field: ‘stdout’
[17:39:24.715]   - Field: ‘earlySignal’
[17:39:24.715]   - Field: ‘lazy’
[17:39:24.716]   - Field: ‘state’
[17:39:24.716] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:24.716] - Launch lazy future ...
[17:39:24.716] Packages needed by the future expression (n = 0): <none>
[17:39:24.716] Packages needed by future strategies (n = 0): <none>
[17:39:24.716] {
[17:39:24.716]     {
[17:39:24.716]         {
[17:39:24.716]             ...future.startTime <- base::Sys.time()
[17:39:24.716]             {
[17:39:24.716]                 {
[17:39:24.716]                   {
[17:39:24.716]                     base::local({
[17:39:24.716]                       has_future <- base::requireNamespace("future", 
[17:39:24.716]                         quietly = TRUE)
[17:39:24.716]                       if (has_future) {
[17:39:24.716]                         ns <- base::getNamespace("future")
[17:39:24.716]                         version <- ns[[".package"]][["version"]]
[17:39:24.716]                         if (is.null(version)) 
[17:39:24.716]                           version <- utils::packageVersion("future")
[17:39:24.716]                       }
[17:39:24.716]                       else {
[17:39:24.716]                         version <- NULL
[17:39:24.716]                       }
[17:39:24.716]                       if (!has_future || version < "1.8.0") {
[17:39:24.716]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:24.716]                           "", base::R.version$version.string), 
[17:39:24.716]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:24.716]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:24.716]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:24.716]                             "release", "version")], collapse = " "), 
[17:39:24.716]                           hostname = base::Sys.info()[["nodename"]])
[17:39:24.716]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:24.716]                           info)
[17:39:24.716]                         info <- base::paste(info, collapse = "; ")
[17:39:24.716]                         if (!has_future) {
[17:39:24.716]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:24.716]                             info)
[17:39:24.716]                         }
[17:39:24.716]                         else {
[17:39:24.716]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:24.716]                             info, version)
[17:39:24.716]                         }
[17:39:24.716]                         base::stop(msg)
[17:39:24.716]                       }
[17:39:24.716]                     })
[17:39:24.716]                   }
[17:39:24.716]                   ...future.strategy.old <- future::plan("list")
[17:39:24.716]                   options(future.plan = NULL)
[17:39:24.716]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.716]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:24.716]                 }
[17:39:24.716]                 ...future.workdir <- getwd()
[17:39:24.716]             }
[17:39:24.716]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:24.716]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:24.716]         }
[17:39:24.716]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:24.716]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:24.716]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:24.716]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:24.716]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:24.716]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:24.716]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:24.716]             base::names(...future.oldOptions))
[17:39:24.716]     }
[17:39:24.716]     if (FALSE) {
[17:39:24.716]     }
[17:39:24.716]     else {
[17:39:24.716]         if (TRUE) {
[17:39:24.716]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:24.716]                 open = "w")
[17:39:24.716]         }
[17:39:24.716]         else {
[17:39:24.716]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:24.716]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:24.716]         }
[17:39:24.716]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:24.716]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:24.716]             base::sink(type = "output", split = FALSE)
[17:39:24.716]             base::close(...future.stdout)
[17:39:24.716]         }, add = TRUE)
[17:39:24.716]     }
[17:39:24.716]     ...future.frame <- base::sys.nframe()
[17:39:24.716]     ...future.conditions <- base::list()
[17:39:24.716]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:24.716]     if (FALSE) {
[17:39:24.716]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:24.716]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:24.716]     }
[17:39:24.716]     ...future.result <- base::tryCatch({
[17:39:24.716]         base::withCallingHandlers({
[17:39:24.716]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:39:24.716]                 rr, cc)))
[17:39:24.716]             future::FutureResult(value = ...future.value$value, 
[17:39:24.716]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.716]                   ...future.rng), globalenv = if (FALSE) 
[17:39:24.716]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:24.716]                     ...future.globalenv.names))
[17:39:24.716]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:24.716]         }, condition = base::local({
[17:39:24.716]             c <- base::c
[17:39:24.716]             inherits <- base::inherits
[17:39:24.716]             invokeRestart <- base::invokeRestart
[17:39:24.716]             length <- base::length
[17:39:24.716]             list <- base::list
[17:39:24.716]             seq.int <- base::seq.int
[17:39:24.716]             signalCondition <- base::signalCondition
[17:39:24.716]             sys.calls <- base::sys.calls
[17:39:24.716]             `[[` <- base::`[[`
[17:39:24.716]             `+` <- base::`+`
[17:39:24.716]             `<<-` <- base::`<<-`
[17:39:24.716]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:24.716]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:24.716]                   3L)]
[17:39:24.716]             }
[17:39:24.716]             function(cond) {
[17:39:24.716]                 is_error <- inherits(cond, "error")
[17:39:24.716]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:24.716]                   NULL)
[17:39:24.716]                 if (is_error) {
[17:39:24.716]                   sessionInformation <- function() {
[17:39:24.716]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:24.716]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:24.716]                       search = base::search(), system = base::Sys.info())
[17:39:24.716]                   }
[17:39:24.716]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.716]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:24.716]                     cond$call), session = sessionInformation(), 
[17:39:24.716]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:24.716]                   signalCondition(cond)
[17:39:24.716]                 }
[17:39:24.716]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:24.716]                 "immediateCondition"))) {
[17:39:24.716]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:24.716]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.716]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:24.716]                   if (TRUE && !signal) {
[17:39:24.716]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.716]                     {
[17:39:24.716]                       inherits <- base::inherits
[17:39:24.716]                       invokeRestart <- base::invokeRestart
[17:39:24.716]                       is.null <- base::is.null
[17:39:24.716]                       muffled <- FALSE
[17:39:24.716]                       if (inherits(cond, "message")) {
[17:39:24.716]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.716]                         if (muffled) 
[17:39:24.716]                           invokeRestart("muffleMessage")
[17:39:24.716]                       }
[17:39:24.716]                       else if (inherits(cond, "warning")) {
[17:39:24.716]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.716]                         if (muffled) 
[17:39:24.716]                           invokeRestart("muffleWarning")
[17:39:24.716]                       }
[17:39:24.716]                       else if (inherits(cond, "condition")) {
[17:39:24.716]                         if (!is.null(pattern)) {
[17:39:24.716]                           computeRestarts <- base::computeRestarts
[17:39:24.716]                           grepl <- base::grepl
[17:39:24.716]                           restarts <- computeRestarts(cond)
[17:39:24.716]                           for (restart in restarts) {
[17:39:24.716]                             name <- restart$name
[17:39:24.716]                             if (is.null(name)) 
[17:39:24.716]                               next
[17:39:24.716]                             if (!grepl(pattern, name)) 
[17:39:24.716]                               next
[17:39:24.716]                             invokeRestart(restart)
[17:39:24.716]                             muffled <- TRUE
[17:39:24.716]                             break
[17:39:24.716]                           }
[17:39:24.716]                         }
[17:39:24.716]                       }
[17:39:24.716]                       invisible(muffled)
[17:39:24.716]                     }
[17:39:24.716]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.716]                   }
[17:39:24.716]                 }
[17:39:24.716]                 else {
[17:39:24.716]                   if (TRUE) {
[17:39:24.716]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.716]                     {
[17:39:24.716]                       inherits <- base::inherits
[17:39:24.716]                       invokeRestart <- base::invokeRestart
[17:39:24.716]                       is.null <- base::is.null
[17:39:24.716]                       muffled <- FALSE
[17:39:24.716]                       if (inherits(cond, "message")) {
[17:39:24.716]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.716]                         if (muffled) 
[17:39:24.716]                           invokeRestart("muffleMessage")
[17:39:24.716]                       }
[17:39:24.716]                       else if (inherits(cond, "warning")) {
[17:39:24.716]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.716]                         if (muffled) 
[17:39:24.716]                           invokeRestart("muffleWarning")
[17:39:24.716]                       }
[17:39:24.716]                       else if (inherits(cond, "condition")) {
[17:39:24.716]                         if (!is.null(pattern)) {
[17:39:24.716]                           computeRestarts <- base::computeRestarts
[17:39:24.716]                           grepl <- base::grepl
[17:39:24.716]                           restarts <- computeRestarts(cond)
[17:39:24.716]                           for (restart in restarts) {
[17:39:24.716]                             name <- restart$name
[17:39:24.716]                             if (is.null(name)) 
[17:39:24.716]                               next
[17:39:24.716]                             if (!grepl(pattern, name)) 
[17:39:24.716]                               next
[17:39:24.716]                             invokeRestart(restart)
[17:39:24.716]                             muffled <- TRUE
[17:39:24.716]                             break
[17:39:24.716]                           }
[17:39:24.716]                         }
[17:39:24.716]                       }
[17:39:24.716]                       invisible(muffled)
[17:39:24.716]                     }
[17:39:24.716]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.716]                   }
[17:39:24.716]                 }
[17:39:24.716]             }
[17:39:24.716]         }))
[17:39:24.716]     }, error = function(ex) {
[17:39:24.716]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:24.716]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.716]                 ...future.rng), started = ...future.startTime, 
[17:39:24.716]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:24.716]             version = "1.8"), class = "FutureResult")
[17:39:24.716]     }, finally = {
[17:39:24.716]         if (!identical(...future.workdir, getwd())) 
[17:39:24.716]             setwd(...future.workdir)
[17:39:24.716]         {
[17:39:24.716]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:24.716]                 ...future.oldOptions$nwarnings <- NULL
[17:39:24.716]             }
[17:39:24.716]             base::options(...future.oldOptions)
[17:39:24.716]             if (.Platform$OS.type == "windows") {
[17:39:24.716]                 old_names <- names(...future.oldEnvVars)
[17:39:24.716]                 envs <- base::Sys.getenv()
[17:39:24.716]                 names <- names(envs)
[17:39:24.716]                 common <- intersect(names, old_names)
[17:39:24.716]                 added <- setdiff(names, old_names)
[17:39:24.716]                 removed <- setdiff(old_names, names)
[17:39:24.716]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:24.716]                   envs[common]]
[17:39:24.716]                 NAMES <- toupper(changed)
[17:39:24.716]                 args <- list()
[17:39:24.716]                 for (kk in seq_along(NAMES)) {
[17:39:24.716]                   name <- changed[[kk]]
[17:39:24.716]                   NAME <- NAMES[[kk]]
[17:39:24.716]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.716]                     next
[17:39:24.716]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.716]                 }
[17:39:24.716]                 NAMES <- toupper(added)
[17:39:24.716]                 for (kk in seq_along(NAMES)) {
[17:39:24.716]                   name <- added[[kk]]
[17:39:24.716]                   NAME <- NAMES[[kk]]
[17:39:24.716]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.716]                     next
[17:39:24.716]                   args[[name]] <- ""
[17:39:24.716]                 }
[17:39:24.716]                 NAMES <- toupper(removed)
[17:39:24.716]                 for (kk in seq_along(NAMES)) {
[17:39:24.716]                   name <- removed[[kk]]
[17:39:24.716]                   NAME <- NAMES[[kk]]
[17:39:24.716]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.716]                     next
[17:39:24.716]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.716]                 }
[17:39:24.716]                 if (length(args) > 0) 
[17:39:24.716]                   base::do.call(base::Sys.setenv, args = args)
[17:39:24.716]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:24.716]             }
[17:39:24.716]             else {
[17:39:24.716]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:24.716]             }
[17:39:24.716]             {
[17:39:24.716]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:24.716]                   0L) {
[17:39:24.716]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:24.716]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:24.716]                   base::options(opts)
[17:39:24.716]                 }
[17:39:24.716]                 {
[17:39:24.716]                   {
[17:39:24.716]                     NULL
[17:39:24.716]                     RNGkind("Mersenne-Twister")
[17:39:24.716]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:24.716]                       inherits = FALSE)
[17:39:24.716]                   }
[17:39:24.716]                   options(future.plan = NULL)
[17:39:24.716]                   if (is.na(NA_character_)) 
[17:39:24.716]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.716]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:24.716]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:24.716]                     .init = FALSE)
[17:39:24.716]                 }
[17:39:24.716]             }
[17:39:24.716]         }
[17:39:24.716]     })
[17:39:24.716]     if (TRUE) {
[17:39:24.716]         base::sink(type = "output", split = FALSE)
[17:39:24.716]         if (TRUE) {
[17:39:24.716]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:24.716]         }
[17:39:24.716]         else {
[17:39:24.716]             ...future.result["stdout"] <- base::list(NULL)
[17:39:24.716]         }
[17:39:24.716]         base::close(...future.stdout)
[17:39:24.716]         ...future.stdout <- NULL
[17:39:24.716]     }
[17:39:24.716]     ...future.result$conditions <- ...future.conditions
[17:39:24.716]     ...future.result$finished <- base::Sys.time()
[17:39:24.716]     ...future.result
[17:39:24.716] }
[17:39:24.718] assign_globals() ...
[17:39:24.718] List of 2
[17:39:24.718]  $ rr: int 2
[17:39:24.718]  $ cc: int 1
[17:39:24.718]  - attr(*, "where")=List of 2
[17:39:24.718]   ..$ rr:<environment: R_EmptyEnv> 
[17:39:24.718]   ..$ cc:<environment: R_EmptyEnv> 
[17:39:24.718]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:24.718]  - attr(*, "resolved")= logi FALSE
[17:39:24.718]  - attr(*, "total_size")= num 112
[17:39:24.718]  - attr(*, "already-done")= logi TRUE
[17:39:24.721] - copied ‘rr’ to environment
[17:39:24.721] - copied ‘cc’ to environment
[17:39:24.721] assign_globals() ... done
[17:39:24.721] plan(): Setting new future strategy stack:
[17:39:24.721] List of future strategies:
[17:39:24.721] 1. sequential:
[17:39:24.721]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.721]    - tweaked: FALSE
[17:39:24.721]    - call: NULL
[17:39:24.722] plan(): nbrOfWorkers() = 1
[17:39:24.723] plan(): Setting new future strategy stack:
[17:39:24.723] List of future strategies:
[17:39:24.723] 1. sequential:
[17:39:24.723]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.723]    - tweaked: FALSE
[17:39:24.723]    - call: future::plan("sequential")
[17:39:24.723] plan(): nbrOfWorkers() = 1
[17:39:24.723] SequentialFuture started (and completed)
[17:39:24.723] - Launch lazy future ... done
[17:39:24.723] run() for ‘SequentialFuture’ ... done
[17:39:24.724] run() for ‘Future’ ...
[17:39:24.724] - state: ‘created’
[17:39:24.724] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:24.724] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:24.724] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:24.724]   - Field: ‘label’
[17:39:24.724]   - Field: ‘local’
[17:39:24.725]   - Field: ‘owner’
[17:39:24.725]   - Field: ‘envir’
[17:39:24.726]   - Field: ‘packages’
[17:39:24.726]   - Field: ‘gc’
[17:39:24.726]   - Field: ‘conditions’
[17:39:24.726]   - Field: ‘expr’
[17:39:24.727]   - Field: ‘uuid’
[17:39:24.727]   - Field: ‘seed’
[17:39:24.727]   - Field: ‘version’
[17:39:24.727]   - Field: ‘result’
[17:39:24.727]   - Field: ‘asynchronous’
[17:39:24.727]   - Field: ‘calls’
[17:39:24.727]   - Field: ‘globals’
[17:39:24.727]   - Field: ‘stdout’
[17:39:24.727]   - Field: ‘earlySignal’
[17:39:24.727]   - Field: ‘lazy’
[17:39:24.727]   - Field: ‘state’
[17:39:24.728] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:24.728] - Launch lazy future ...
[17:39:24.728] Packages needed by the future expression (n = 0): <none>
[17:39:24.728] Packages needed by future strategies (n = 0): <none>
[17:39:24.728] {
[17:39:24.728]     {
[17:39:24.728]         {
[17:39:24.728]             ...future.startTime <- base::Sys.time()
[17:39:24.728]             {
[17:39:24.728]                 {
[17:39:24.728]                   {
[17:39:24.728]                     base::local({
[17:39:24.728]                       has_future <- base::requireNamespace("future", 
[17:39:24.728]                         quietly = TRUE)
[17:39:24.728]                       if (has_future) {
[17:39:24.728]                         ns <- base::getNamespace("future")
[17:39:24.728]                         version <- ns[[".package"]][["version"]]
[17:39:24.728]                         if (is.null(version)) 
[17:39:24.728]                           version <- utils::packageVersion("future")
[17:39:24.728]                       }
[17:39:24.728]                       else {
[17:39:24.728]                         version <- NULL
[17:39:24.728]                       }
[17:39:24.728]                       if (!has_future || version < "1.8.0") {
[17:39:24.728]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:24.728]                           "", base::R.version$version.string), 
[17:39:24.728]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:24.728]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:24.728]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:24.728]                             "release", "version")], collapse = " "), 
[17:39:24.728]                           hostname = base::Sys.info()[["nodename"]])
[17:39:24.728]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:24.728]                           info)
[17:39:24.728]                         info <- base::paste(info, collapse = "; ")
[17:39:24.728]                         if (!has_future) {
[17:39:24.728]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:24.728]                             info)
[17:39:24.728]                         }
[17:39:24.728]                         else {
[17:39:24.728]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:24.728]                             info, version)
[17:39:24.728]                         }
[17:39:24.728]                         base::stop(msg)
[17:39:24.728]                       }
[17:39:24.728]                     })
[17:39:24.728]                   }
[17:39:24.728]                   ...future.strategy.old <- future::plan("list")
[17:39:24.728]                   options(future.plan = NULL)
[17:39:24.728]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.728]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:24.728]                 }
[17:39:24.728]                 ...future.workdir <- getwd()
[17:39:24.728]             }
[17:39:24.728]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:24.728]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:24.728]         }
[17:39:24.728]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:24.728]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:24.728]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:24.728]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:24.728]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:24.728]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:24.728]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:24.728]             base::names(...future.oldOptions))
[17:39:24.728]     }
[17:39:24.728]     if (FALSE) {
[17:39:24.728]     }
[17:39:24.728]     else {
[17:39:24.728]         if (TRUE) {
[17:39:24.728]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:24.728]                 open = "w")
[17:39:24.728]         }
[17:39:24.728]         else {
[17:39:24.728]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:24.728]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:24.728]         }
[17:39:24.728]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:24.728]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:24.728]             base::sink(type = "output", split = FALSE)
[17:39:24.728]             base::close(...future.stdout)
[17:39:24.728]         }, add = TRUE)
[17:39:24.728]     }
[17:39:24.728]     ...future.frame <- base::sys.nframe()
[17:39:24.728]     ...future.conditions <- base::list()
[17:39:24.728]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:24.728]     if (FALSE) {
[17:39:24.728]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:24.728]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:24.728]     }
[17:39:24.728]     ...future.result <- base::tryCatch({
[17:39:24.728]         base::withCallingHandlers({
[17:39:24.728]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:39:24.728]                 rr, cc)))
[17:39:24.728]             future::FutureResult(value = ...future.value$value, 
[17:39:24.728]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.728]                   ...future.rng), globalenv = if (FALSE) 
[17:39:24.728]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:24.728]                     ...future.globalenv.names))
[17:39:24.728]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:24.728]         }, condition = base::local({
[17:39:24.728]             c <- base::c
[17:39:24.728]             inherits <- base::inherits
[17:39:24.728]             invokeRestart <- base::invokeRestart
[17:39:24.728]             length <- base::length
[17:39:24.728]             list <- base::list
[17:39:24.728]             seq.int <- base::seq.int
[17:39:24.728]             signalCondition <- base::signalCondition
[17:39:24.728]             sys.calls <- base::sys.calls
[17:39:24.728]             `[[` <- base::`[[`
[17:39:24.728]             `+` <- base::`+`
[17:39:24.728]             `<<-` <- base::`<<-`
[17:39:24.728]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:24.728]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:24.728]                   3L)]
[17:39:24.728]             }
[17:39:24.728]             function(cond) {
[17:39:24.728]                 is_error <- inherits(cond, "error")
[17:39:24.728]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:24.728]                   NULL)
[17:39:24.728]                 if (is_error) {
[17:39:24.728]                   sessionInformation <- function() {
[17:39:24.728]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:24.728]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:24.728]                       search = base::search(), system = base::Sys.info())
[17:39:24.728]                   }
[17:39:24.728]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.728]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:24.728]                     cond$call), session = sessionInformation(), 
[17:39:24.728]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:24.728]                   signalCondition(cond)
[17:39:24.728]                 }
[17:39:24.728]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:24.728]                 "immediateCondition"))) {
[17:39:24.728]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:24.728]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.728]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:24.728]                   if (TRUE && !signal) {
[17:39:24.728]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.728]                     {
[17:39:24.728]                       inherits <- base::inherits
[17:39:24.728]                       invokeRestart <- base::invokeRestart
[17:39:24.728]                       is.null <- base::is.null
[17:39:24.728]                       muffled <- FALSE
[17:39:24.728]                       if (inherits(cond, "message")) {
[17:39:24.728]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.728]                         if (muffled) 
[17:39:24.728]                           invokeRestart("muffleMessage")
[17:39:24.728]                       }
[17:39:24.728]                       else if (inherits(cond, "warning")) {
[17:39:24.728]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.728]                         if (muffled) 
[17:39:24.728]                           invokeRestart("muffleWarning")
[17:39:24.728]                       }
[17:39:24.728]                       else if (inherits(cond, "condition")) {
[17:39:24.728]                         if (!is.null(pattern)) {
[17:39:24.728]                           computeRestarts <- base::computeRestarts
[17:39:24.728]                           grepl <- base::grepl
[17:39:24.728]                           restarts <- computeRestarts(cond)
[17:39:24.728]                           for (restart in restarts) {
[17:39:24.728]                             name <- restart$name
[17:39:24.728]                             if (is.null(name)) 
[17:39:24.728]                               next
[17:39:24.728]                             if (!grepl(pattern, name)) 
[17:39:24.728]                               next
[17:39:24.728]                             invokeRestart(restart)
[17:39:24.728]                             muffled <- TRUE
[17:39:24.728]                             break
[17:39:24.728]                           }
[17:39:24.728]                         }
[17:39:24.728]                       }
[17:39:24.728]                       invisible(muffled)
[17:39:24.728]                     }
[17:39:24.728]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.728]                   }
[17:39:24.728]                 }
[17:39:24.728]                 else {
[17:39:24.728]                   if (TRUE) {
[17:39:24.728]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.728]                     {
[17:39:24.728]                       inherits <- base::inherits
[17:39:24.728]                       invokeRestart <- base::invokeRestart
[17:39:24.728]                       is.null <- base::is.null
[17:39:24.728]                       muffled <- FALSE
[17:39:24.728]                       if (inherits(cond, "message")) {
[17:39:24.728]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.728]                         if (muffled) 
[17:39:24.728]                           invokeRestart("muffleMessage")
[17:39:24.728]                       }
[17:39:24.728]                       else if (inherits(cond, "warning")) {
[17:39:24.728]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.728]                         if (muffled) 
[17:39:24.728]                           invokeRestart("muffleWarning")
[17:39:24.728]                       }
[17:39:24.728]                       else if (inherits(cond, "condition")) {
[17:39:24.728]                         if (!is.null(pattern)) {
[17:39:24.728]                           computeRestarts <- base::computeRestarts
[17:39:24.728]                           grepl <- base::grepl
[17:39:24.728]                           restarts <- computeRestarts(cond)
[17:39:24.728]                           for (restart in restarts) {
[17:39:24.728]                             name <- restart$name
[17:39:24.728]                             if (is.null(name)) 
[17:39:24.728]                               next
[17:39:24.728]                             if (!grepl(pattern, name)) 
[17:39:24.728]                               next
[17:39:24.728]                             invokeRestart(restart)
[17:39:24.728]                             muffled <- TRUE
[17:39:24.728]                             break
[17:39:24.728]                           }
[17:39:24.728]                         }
[17:39:24.728]                       }
[17:39:24.728]                       invisible(muffled)
[17:39:24.728]                     }
[17:39:24.728]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.728]                   }
[17:39:24.728]                 }
[17:39:24.728]             }
[17:39:24.728]         }))
[17:39:24.728]     }, error = function(ex) {
[17:39:24.728]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:24.728]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.728]                 ...future.rng), started = ...future.startTime, 
[17:39:24.728]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:24.728]             version = "1.8"), class = "FutureResult")
[17:39:24.728]     }, finally = {
[17:39:24.728]         if (!identical(...future.workdir, getwd())) 
[17:39:24.728]             setwd(...future.workdir)
[17:39:24.728]         {
[17:39:24.728]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:24.728]                 ...future.oldOptions$nwarnings <- NULL
[17:39:24.728]             }
[17:39:24.728]             base::options(...future.oldOptions)
[17:39:24.728]             if (.Platform$OS.type == "windows") {
[17:39:24.728]                 old_names <- names(...future.oldEnvVars)
[17:39:24.728]                 envs <- base::Sys.getenv()
[17:39:24.728]                 names <- names(envs)
[17:39:24.728]                 common <- intersect(names, old_names)
[17:39:24.728]                 added <- setdiff(names, old_names)
[17:39:24.728]                 removed <- setdiff(old_names, names)
[17:39:24.728]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:24.728]                   envs[common]]
[17:39:24.728]                 NAMES <- toupper(changed)
[17:39:24.728]                 args <- list()
[17:39:24.728]                 for (kk in seq_along(NAMES)) {
[17:39:24.728]                   name <- changed[[kk]]
[17:39:24.728]                   NAME <- NAMES[[kk]]
[17:39:24.728]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.728]                     next
[17:39:24.728]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.728]                 }
[17:39:24.728]                 NAMES <- toupper(added)
[17:39:24.728]                 for (kk in seq_along(NAMES)) {
[17:39:24.728]                   name <- added[[kk]]
[17:39:24.728]                   NAME <- NAMES[[kk]]
[17:39:24.728]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.728]                     next
[17:39:24.728]                   args[[name]] <- ""
[17:39:24.728]                 }
[17:39:24.728]                 NAMES <- toupper(removed)
[17:39:24.728]                 for (kk in seq_along(NAMES)) {
[17:39:24.728]                   name <- removed[[kk]]
[17:39:24.728]                   NAME <- NAMES[[kk]]
[17:39:24.728]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.728]                     next
[17:39:24.728]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.728]                 }
[17:39:24.728]                 if (length(args) > 0) 
[17:39:24.728]                   base::do.call(base::Sys.setenv, args = args)
[17:39:24.728]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:24.728]             }
[17:39:24.728]             else {
[17:39:24.728]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:24.728]             }
[17:39:24.728]             {
[17:39:24.728]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:24.728]                   0L) {
[17:39:24.728]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:24.728]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:24.728]                   base::options(opts)
[17:39:24.728]                 }
[17:39:24.728]                 {
[17:39:24.728]                   {
[17:39:24.728]                     NULL
[17:39:24.728]                     RNGkind("Mersenne-Twister")
[17:39:24.728]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:24.728]                       inherits = FALSE)
[17:39:24.728]                   }
[17:39:24.728]                   options(future.plan = NULL)
[17:39:24.728]                   if (is.na(NA_character_)) 
[17:39:24.728]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.728]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:24.728]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:24.728]                     .init = FALSE)
[17:39:24.728]                 }
[17:39:24.728]             }
[17:39:24.728]         }
[17:39:24.728]     })
[17:39:24.728]     if (TRUE) {
[17:39:24.728]         base::sink(type = "output", split = FALSE)
[17:39:24.728]         if (TRUE) {
[17:39:24.728]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:24.728]         }
[17:39:24.728]         else {
[17:39:24.728]             ...future.result["stdout"] <- base::list(NULL)
[17:39:24.728]         }
[17:39:24.728]         base::close(...future.stdout)
[17:39:24.728]         ...future.stdout <- NULL
[17:39:24.728]     }
[17:39:24.728]     ...future.result$conditions <- ...future.conditions
[17:39:24.728]     ...future.result$finished <- base::Sys.time()
[17:39:24.728]     ...future.result
[17:39:24.728] }
[17:39:24.730] assign_globals() ...
[17:39:24.730] List of 2
[17:39:24.730]  $ rr: int 3
[17:39:24.730]  $ cc: int 1
[17:39:24.730]  - attr(*, "where")=List of 2
[17:39:24.730]   ..$ rr:<environment: R_EmptyEnv> 
[17:39:24.730]   ..$ cc:<environment: R_EmptyEnv> 
[17:39:24.730]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:24.730]  - attr(*, "resolved")= logi FALSE
[17:39:24.730]  - attr(*, "total_size")= num 112
[17:39:24.730]  - attr(*, "already-done")= logi TRUE
[17:39:24.733] - copied ‘rr’ to environment
[17:39:24.733] - copied ‘cc’ to environment
[17:39:24.733] assign_globals() ... done
[17:39:24.733] plan(): Setting new future strategy stack:
[17:39:24.733] List of future strategies:
[17:39:24.733] 1. sequential:
[17:39:24.733]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.733]    - tweaked: FALSE
[17:39:24.733]    - call: NULL
[17:39:24.734] plan(): nbrOfWorkers() = 1
[17:39:24.734] plan(): Setting new future strategy stack:
[17:39:24.735] List of future strategies:
[17:39:24.735] 1. sequential:
[17:39:24.735]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.735]    - tweaked: FALSE
[17:39:24.735]    - call: future::plan("sequential")
[17:39:24.735] plan(): nbrOfWorkers() = 1
[17:39:24.735] SequentialFuture started (and completed)
[17:39:24.735] - Launch lazy future ... done
[17:39:24.735] run() for ‘SequentialFuture’ ... done
[17:39:24.736] run() for ‘Future’ ...
[17:39:24.736] - state: ‘created’
[17:39:24.736] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:24.736] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:24.736] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:24.736]   - Field: ‘label’
[17:39:24.736]   - Field: ‘local’
[17:39:24.736]   - Field: ‘owner’
[17:39:24.737]   - Field: ‘envir’
[17:39:24.737]   - Field: ‘packages’
[17:39:24.737]   - Field: ‘gc’
[17:39:24.737]   - Field: ‘conditions’
[17:39:24.737]   - Field: ‘expr’
[17:39:24.737]   - Field: ‘uuid’
[17:39:24.737]   - Field: ‘seed’
[17:39:24.737]   - Field: ‘version’
[17:39:24.737]   - Field: ‘result’
[17:39:24.737]   - Field: ‘asynchronous’
[17:39:24.737]   - Field: ‘calls’
[17:39:24.738]   - Field: ‘globals’
[17:39:24.738]   - Field: ‘stdout’
[17:39:24.738]   - Field: ‘earlySignal’
[17:39:24.738]   - Field: ‘lazy’
[17:39:24.738]   - Field: ‘state’
[17:39:24.738] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:24.738] - Launch lazy future ...
[17:39:24.738] Packages needed by the future expression (n = 0): <none>
[17:39:24.738] Packages needed by future strategies (n = 0): <none>
[17:39:24.739] {
[17:39:24.739]     {
[17:39:24.739]         {
[17:39:24.739]             ...future.startTime <- base::Sys.time()
[17:39:24.739]             {
[17:39:24.739]                 {
[17:39:24.739]                   {
[17:39:24.739]                     base::local({
[17:39:24.739]                       has_future <- base::requireNamespace("future", 
[17:39:24.739]                         quietly = TRUE)
[17:39:24.739]                       if (has_future) {
[17:39:24.739]                         ns <- base::getNamespace("future")
[17:39:24.739]                         version <- ns[[".package"]][["version"]]
[17:39:24.739]                         if (is.null(version)) 
[17:39:24.739]                           version <- utils::packageVersion("future")
[17:39:24.739]                       }
[17:39:24.739]                       else {
[17:39:24.739]                         version <- NULL
[17:39:24.739]                       }
[17:39:24.739]                       if (!has_future || version < "1.8.0") {
[17:39:24.739]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:24.739]                           "", base::R.version$version.string), 
[17:39:24.739]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:24.739]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:24.739]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:24.739]                             "release", "version")], collapse = " "), 
[17:39:24.739]                           hostname = base::Sys.info()[["nodename"]])
[17:39:24.739]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:24.739]                           info)
[17:39:24.739]                         info <- base::paste(info, collapse = "; ")
[17:39:24.739]                         if (!has_future) {
[17:39:24.739]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:24.739]                             info)
[17:39:24.739]                         }
[17:39:24.739]                         else {
[17:39:24.739]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:24.739]                             info, version)
[17:39:24.739]                         }
[17:39:24.739]                         base::stop(msg)
[17:39:24.739]                       }
[17:39:24.739]                     })
[17:39:24.739]                   }
[17:39:24.739]                   ...future.strategy.old <- future::plan("list")
[17:39:24.739]                   options(future.plan = NULL)
[17:39:24.739]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.739]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:24.739]                 }
[17:39:24.739]                 ...future.workdir <- getwd()
[17:39:24.739]             }
[17:39:24.739]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:24.739]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:24.739]         }
[17:39:24.739]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:24.739]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:24.739]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:24.739]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:24.739]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:24.739]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:24.739]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:24.739]             base::names(...future.oldOptions))
[17:39:24.739]     }
[17:39:24.739]     if (FALSE) {
[17:39:24.739]     }
[17:39:24.739]     else {
[17:39:24.739]         if (TRUE) {
[17:39:24.739]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:24.739]                 open = "w")
[17:39:24.739]         }
[17:39:24.739]         else {
[17:39:24.739]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:24.739]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:24.739]         }
[17:39:24.739]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:24.739]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:24.739]             base::sink(type = "output", split = FALSE)
[17:39:24.739]             base::close(...future.stdout)
[17:39:24.739]         }, add = TRUE)
[17:39:24.739]     }
[17:39:24.739]     ...future.frame <- base::sys.nframe()
[17:39:24.739]     ...future.conditions <- base::list()
[17:39:24.739]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:24.739]     if (FALSE) {
[17:39:24.739]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:24.739]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:24.739]     }
[17:39:24.739]     ...future.result <- base::tryCatch({
[17:39:24.739]         base::withCallingHandlers({
[17:39:24.739]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:39:24.739]                 rr, cc)))
[17:39:24.739]             future::FutureResult(value = ...future.value$value, 
[17:39:24.739]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.739]                   ...future.rng), globalenv = if (FALSE) 
[17:39:24.739]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:24.739]                     ...future.globalenv.names))
[17:39:24.739]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:24.739]         }, condition = base::local({
[17:39:24.739]             c <- base::c
[17:39:24.739]             inherits <- base::inherits
[17:39:24.739]             invokeRestart <- base::invokeRestart
[17:39:24.739]             length <- base::length
[17:39:24.739]             list <- base::list
[17:39:24.739]             seq.int <- base::seq.int
[17:39:24.739]             signalCondition <- base::signalCondition
[17:39:24.739]             sys.calls <- base::sys.calls
[17:39:24.739]             `[[` <- base::`[[`
[17:39:24.739]             `+` <- base::`+`
[17:39:24.739]             `<<-` <- base::`<<-`
[17:39:24.739]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:24.739]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:24.739]                   3L)]
[17:39:24.739]             }
[17:39:24.739]             function(cond) {
[17:39:24.739]                 is_error <- inherits(cond, "error")
[17:39:24.739]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:24.739]                   NULL)
[17:39:24.739]                 if (is_error) {
[17:39:24.739]                   sessionInformation <- function() {
[17:39:24.739]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:24.739]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:24.739]                       search = base::search(), system = base::Sys.info())
[17:39:24.739]                   }
[17:39:24.739]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.739]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:24.739]                     cond$call), session = sessionInformation(), 
[17:39:24.739]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:24.739]                   signalCondition(cond)
[17:39:24.739]                 }
[17:39:24.739]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:24.739]                 "immediateCondition"))) {
[17:39:24.739]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:24.739]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.739]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:24.739]                   if (TRUE && !signal) {
[17:39:24.739]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.739]                     {
[17:39:24.739]                       inherits <- base::inherits
[17:39:24.739]                       invokeRestart <- base::invokeRestart
[17:39:24.739]                       is.null <- base::is.null
[17:39:24.739]                       muffled <- FALSE
[17:39:24.739]                       if (inherits(cond, "message")) {
[17:39:24.739]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.739]                         if (muffled) 
[17:39:24.739]                           invokeRestart("muffleMessage")
[17:39:24.739]                       }
[17:39:24.739]                       else if (inherits(cond, "warning")) {
[17:39:24.739]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.739]                         if (muffled) 
[17:39:24.739]                           invokeRestart("muffleWarning")
[17:39:24.739]                       }
[17:39:24.739]                       else if (inherits(cond, "condition")) {
[17:39:24.739]                         if (!is.null(pattern)) {
[17:39:24.739]                           computeRestarts <- base::computeRestarts
[17:39:24.739]                           grepl <- base::grepl
[17:39:24.739]                           restarts <- computeRestarts(cond)
[17:39:24.739]                           for (restart in restarts) {
[17:39:24.739]                             name <- restart$name
[17:39:24.739]                             if (is.null(name)) 
[17:39:24.739]                               next
[17:39:24.739]                             if (!grepl(pattern, name)) 
[17:39:24.739]                               next
[17:39:24.739]                             invokeRestart(restart)
[17:39:24.739]                             muffled <- TRUE
[17:39:24.739]                             break
[17:39:24.739]                           }
[17:39:24.739]                         }
[17:39:24.739]                       }
[17:39:24.739]                       invisible(muffled)
[17:39:24.739]                     }
[17:39:24.739]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.739]                   }
[17:39:24.739]                 }
[17:39:24.739]                 else {
[17:39:24.739]                   if (TRUE) {
[17:39:24.739]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.739]                     {
[17:39:24.739]                       inherits <- base::inherits
[17:39:24.739]                       invokeRestart <- base::invokeRestart
[17:39:24.739]                       is.null <- base::is.null
[17:39:24.739]                       muffled <- FALSE
[17:39:24.739]                       if (inherits(cond, "message")) {
[17:39:24.739]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.739]                         if (muffled) 
[17:39:24.739]                           invokeRestart("muffleMessage")
[17:39:24.739]                       }
[17:39:24.739]                       else if (inherits(cond, "warning")) {
[17:39:24.739]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.739]                         if (muffled) 
[17:39:24.739]                           invokeRestart("muffleWarning")
[17:39:24.739]                       }
[17:39:24.739]                       else if (inherits(cond, "condition")) {
[17:39:24.739]                         if (!is.null(pattern)) {
[17:39:24.739]                           computeRestarts <- base::computeRestarts
[17:39:24.739]                           grepl <- base::grepl
[17:39:24.739]                           restarts <- computeRestarts(cond)
[17:39:24.739]                           for (restart in restarts) {
[17:39:24.739]                             name <- restart$name
[17:39:24.739]                             if (is.null(name)) 
[17:39:24.739]                               next
[17:39:24.739]                             if (!grepl(pattern, name)) 
[17:39:24.739]                               next
[17:39:24.739]                             invokeRestart(restart)
[17:39:24.739]                             muffled <- TRUE
[17:39:24.739]                             break
[17:39:24.739]                           }
[17:39:24.739]                         }
[17:39:24.739]                       }
[17:39:24.739]                       invisible(muffled)
[17:39:24.739]                     }
[17:39:24.739]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.739]                   }
[17:39:24.739]                 }
[17:39:24.739]             }
[17:39:24.739]         }))
[17:39:24.739]     }, error = function(ex) {
[17:39:24.739]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:24.739]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.739]                 ...future.rng), started = ...future.startTime, 
[17:39:24.739]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:24.739]             version = "1.8"), class = "FutureResult")
[17:39:24.739]     }, finally = {
[17:39:24.739]         if (!identical(...future.workdir, getwd())) 
[17:39:24.739]             setwd(...future.workdir)
[17:39:24.739]         {
[17:39:24.739]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:24.739]                 ...future.oldOptions$nwarnings <- NULL
[17:39:24.739]             }
[17:39:24.739]             base::options(...future.oldOptions)
[17:39:24.739]             if (.Platform$OS.type == "windows") {
[17:39:24.739]                 old_names <- names(...future.oldEnvVars)
[17:39:24.739]                 envs <- base::Sys.getenv()
[17:39:24.739]                 names <- names(envs)
[17:39:24.739]                 common <- intersect(names, old_names)
[17:39:24.739]                 added <- setdiff(names, old_names)
[17:39:24.739]                 removed <- setdiff(old_names, names)
[17:39:24.739]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:24.739]                   envs[common]]
[17:39:24.739]                 NAMES <- toupper(changed)
[17:39:24.739]                 args <- list()
[17:39:24.739]                 for (kk in seq_along(NAMES)) {
[17:39:24.739]                   name <- changed[[kk]]
[17:39:24.739]                   NAME <- NAMES[[kk]]
[17:39:24.739]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.739]                     next
[17:39:24.739]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.739]                 }
[17:39:24.739]                 NAMES <- toupper(added)
[17:39:24.739]                 for (kk in seq_along(NAMES)) {
[17:39:24.739]                   name <- added[[kk]]
[17:39:24.739]                   NAME <- NAMES[[kk]]
[17:39:24.739]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.739]                     next
[17:39:24.739]                   args[[name]] <- ""
[17:39:24.739]                 }
[17:39:24.739]                 NAMES <- toupper(removed)
[17:39:24.739]                 for (kk in seq_along(NAMES)) {
[17:39:24.739]                   name <- removed[[kk]]
[17:39:24.739]                   NAME <- NAMES[[kk]]
[17:39:24.739]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.739]                     next
[17:39:24.739]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.739]                 }
[17:39:24.739]                 if (length(args) > 0) 
[17:39:24.739]                   base::do.call(base::Sys.setenv, args = args)
[17:39:24.739]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:24.739]             }
[17:39:24.739]             else {
[17:39:24.739]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:24.739]             }
[17:39:24.739]             {
[17:39:24.739]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:24.739]                   0L) {
[17:39:24.739]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:24.739]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:24.739]                   base::options(opts)
[17:39:24.739]                 }
[17:39:24.739]                 {
[17:39:24.739]                   {
[17:39:24.739]                     NULL
[17:39:24.739]                     RNGkind("Mersenne-Twister")
[17:39:24.739]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:24.739]                       inherits = FALSE)
[17:39:24.739]                   }
[17:39:24.739]                   options(future.plan = NULL)
[17:39:24.739]                   if (is.na(NA_character_)) 
[17:39:24.739]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.739]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:24.739]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:24.739]                     .init = FALSE)
[17:39:24.739]                 }
[17:39:24.739]             }
[17:39:24.739]         }
[17:39:24.739]     })
[17:39:24.739]     if (TRUE) {
[17:39:24.739]         base::sink(type = "output", split = FALSE)
[17:39:24.739]         if (TRUE) {
[17:39:24.739]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:24.739]         }
[17:39:24.739]         else {
[17:39:24.739]             ...future.result["stdout"] <- base::list(NULL)
[17:39:24.739]         }
[17:39:24.739]         base::close(...future.stdout)
[17:39:24.739]         ...future.stdout <- NULL
[17:39:24.739]     }
[17:39:24.739]     ...future.result$conditions <- ...future.conditions
[17:39:24.739]     ...future.result$finished <- base::Sys.time()
[17:39:24.739]     ...future.result
[17:39:24.739] }
[17:39:24.740] assign_globals() ...
[17:39:24.740] List of 2
[17:39:24.740]  $ rr: int 1
[17:39:24.740]  $ cc: int 2
[17:39:24.740]  - attr(*, "where")=List of 2
[17:39:24.740]   ..$ rr:<environment: R_EmptyEnv> 
[17:39:24.740]   ..$ cc:<environment: R_EmptyEnv> 
[17:39:24.740]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:24.740]  - attr(*, "resolved")= logi FALSE
[17:39:24.740]  - attr(*, "total_size")= num 112
[17:39:24.740]  - attr(*, "already-done")= logi TRUE
[17:39:24.743] - copied ‘rr’ to environment
[17:39:24.743] - copied ‘cc’ to environment
[17:39:24.743] assign_globals() ... done
[17:39:24.744] plan(): Setting new future strategy stack:
[17:39:24.744] List of future strategies:
[17:39:24.744] 1. sequential:
[17:39:24.744]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.744]    - tweaked: FALSE
[17:39:24.744]    - call: NULL
[17:39:24.744] plan(): nbrOfWorkers() = 1
[17:39:24.745] plan(): Setting new future strategy stack:
[17:39:24.745] List of future strategies:
[17:39:24.745] 1. sequential:
[17:39:24.745]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.745]    - tweaked: FALSE
[17:39:24.745]    - call: future::plan("sequential")
[17:39:24.745] plan(): nbrOfWorkers() = 1
[17:39:24.746] SequentialFuture started (and completed)
[17:39:24.746] - Launch lazy future ... done
[17:39:24.746] run() for ‘SequentialFuture’ ... done
[17:39:24.746] run() for ‘Future’ ...
[17:39:24.746] - state: ‘created’
[17:39:24.746] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:24.747] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:24.747] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:24.747]   - Field: ‘label’
[17:39:24.747]   - Field: ‘local’
[17:39:24.747]   - Field: ‘owner’
[17:39:24.747]   - Field: ‘envir’
[17:39:24.747]   - Field: ‘packages’
[17:39:24.747]   - Field: ‘gc’
[17:39:24.747]   - Field: ‘conditions’
[17:39:24.747]   - Field: ‘expr’
[17:39:24.747]   - Field: ‘uuid’
[17:39:24.748]   - Field: ‘seed’
[17:39:24.748]   - Field: ‘version’
[17:39:24.748]   - Field: ‘result’
[17:39:24.748]   - Field: ‘asynchronous’
[17:39:24.748]   - Field: ‘calls’
[17:39:24.748]   - Field: ‘globals’
[17:39:24.748]   - Field: ‘stdout’
[17:39:24.748]   - Field: ‘earlySignal’
[17:39:24.748]   - Field: ‘lazy’
[17:39:24.748]   - Field: ‘state’
[17:39:24.748] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:24.749] - Launch lazy future ...
[17:39:24.749] Packages needed by the future expression (n = 0): <none>
[17:39:24.749] Packages needed by future strategies (n = 0): <none>
[17:39:24.749] {
[17:39:24.749]     {
[17:39:24.749]         {
[17:39:24.749]             ...future.startTime <- base::Sys.time()
[17:39:24.749]             {
[17:39:24.749]                 {
[17:39:24.749]                   {
[17:39:24.749]                     base::local({
[17:39:24.749]                       has_future <- base::requireNamespace("future", 
[17:39:24.749]                         quietly = TRUE)
[17:39:24.749]                       if (has_future) {
[17:39:24.749]                         ns <- base::getNamespace("future")
[17:39:24.749]                         version <- ns[[".package"]][["version"]]
[17:39:24.749]                         if (is.null(version)) 
[17:39:24.749]                           version <- utils::packageVersion("future")
[17:39:24.749]                       }
[17:39:24.749]                       else {
[17:39:24.749]                         version <- NULL
[17:39:24.749]                       }
[17:39:24.749]                       if (!has_future || version < "1.8.0") {
[17:39:24.749]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:24.749]                           "", base::R.version$version.string), 
[17:39:24.749]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:24.749]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:24.749]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:24.749]                             "release", "version")], collapse = " "), 
[17:39:24.749]                           hostname = base::Sys.info()[["nodename"]])
[17:39:24.749]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:24.749]                           info)
[17:39:24.749]                         info <- base::paste(info, collapse = "; ")
[17:39:24.749]                         if (!has_future) {
[17:39:24.749]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:24.749]                             info)
[17:39:24.749]                         }
[17:39:24.749]                         else {
[17:39:24.749]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:24.749]                             info, version)
[17:39:24.749]                         }
[17:39:24.749]                         base::stop(msg)
[17:39:24.749]                       }
[17:39:24.749]                     })
[17:39:24.749]                   }
[17:39:24.749]                   ...future.strategy.old <- future::plan("list")
[17:39:24.749]                   options(future.plan = NULL)
[17:39:24.749]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.749]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:24.749]                 }
[17:39:24.749]                 ...future.workdir <- getwd()
[17:39:24.749]             }
[17:39:24.749]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:24.749]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:24.749]         }
[17:39:24.749]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:24.749]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:24.749]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:24.749]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:24.749]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:24.749]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:24.749]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:24.749]             base::names(...future.oldOptions))
[17:39:24.749]     }
[17:39:24.749]     if (FALSE) {
[17:39:24.749]     }
[17:39:24.749]     else {
[17:39:24.749]         if (TRUE) {
[17:39:24.749]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:24.749]                 open = "w")
[17:39:24.749]         }
[17:39:24.749]         else {
[17:39:24.749]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:24.749]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:24.749]         }
[17:39:24.749]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:24.749]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:24.749]             base::sink(type = "output", split = FALSE)
[17:39:24.749]             base::close(...future.stdout)
[17:39:24.749]         }, add = TRUE)
[17:39:24.749]     }
[17:39:24.749]     ...future.frame <- base::sys.nframe()
[17:39:24.749]     ...future.conditions <- base::list()
[17:39:24.749]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:24.749]     if (FALSE) {
[17:39:24.749]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:24.749]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:24.749]     }
[17:39:24.749]     ...future.result <- base::tryCatch({
[17:39:24.749]         base::withCallingHandlers({
[17:39:24.749]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:39:24.749]                 rr, cc)))
[17:39:24.749]             future::FutureResult(value = ...future.value$value, 
[17:39:24.749]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.749]                   ...future.rng), globalenv = if (FALSE) 
[17:39:24.749]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:24.749]                     ...future.globalenv.names))
[17:39:24.749]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:24.749]         }, condition = base::local({
[17:39:24.749]             c <- base::c
[17:39:24.749]             inherits <- base::inherits
[17:39:24.749]             invokeRestart <- base::invokeRestart
[17:39:24.749]             length <- base::length
[17:39:24.749]             list <- base::list
[17:39:24.749]             seq.int <- base::seq.int
[17:39:24.749]             signalCondition <- base::signalCondition
[17:39:24.749]             sys.calls <- base::sys.calls
[17:39:24.749]             `[[` <- base::`[[`
[17:39:24.749]             `+` <- base::`+`
[17:39:24.749]             `<<-` <- base::`<<-`
[17:39:24.749]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:24.749]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:24.749]                   3L)]
[17:39:24.749]             }
[17:39:24.749]             function(cond) {
[17:39:24.749]                 is_error <- inherits(cond, "error")
[17:39:24.749]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:24.749]                   NULL)
[17:39:24.749]                 if (is_error) {
[17:39:24.749]                   sessionInformation <- function() {
[17:39:24.749]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:24.749]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:24.749]                       search = base::search(), system = base::Sys.info())
[17:39:24.749]                   }
[17:39:24.749]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.749]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:24.749]                     cond$call), session = sessionInformation(), 
[17:39:24.749]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:24.749]                   signalCondition(cond)
[17:39:24.749]                 }
[17:39:24.749]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:24.749]                 "immediateCondition"))) {
[17:39:24.749]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:24.749]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.749]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:24.749]                   if (TRUE && !signal) {
[17:39:24.749]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.749]                     {
[17:39:24.749]                       inherits <- base::inherits
[17:39:24.749]                       invokeRestart <- base::invokeRestart
[17:39:24.749]                       is.null <- base::is.null
[17:39:24.749]                       muffled <- FALSE
[17:39:24.749]                       if (inherits(cond, "message")) {
[17:39:24.749]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.749]                         if (muffled) 
[17:39:24.749]                           invokeRestart("muffleMessage")
[17:39:24.749]                       }
[17:39:24.749]                       else if (inherits(cond, "warning")) {
[17:39:24.749]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.749]                         if (muffled) 
[17:39:24.749]                           invokeRestart("muffleWarning")
[17:39:24.749]                       }
[17:39:24.749]                       else if (inherits(cond, "condition")) {
[17:39:24.749]                         if (!is.null(pattern)) {
[17:39:24.749]                           computeRestarts <- base::computeRestarts
[17:39:24.749]                           grepl <- base::grepl
[17:39:24.749]                           restarts <- computeRestarts(cond)
[17:39:24.749]                           for (restart in restarts) {
[17:39:24.749]                             name <- restart$name
[17:39:24.749]                             if (is.null(name)) 
[17:39:24.749]                               next
[17:39:24.749]                             if (!grepl(pattern, name)) 
[17:39:24.749]                               next
[17:39:24.749]                             invokeRestart(restart)
[17:39:24.749]                             muffled <- TRUE
[17:39:24.749]                             break
[17:39:24.749]                           }
[17:39:24.749]                         }
[17:39:24.749]                       }
[17:39:24.749]                       invisible(muffled)
[17:39:24.749]                     }
[17:39:24.749]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.749]                   }
[17:39:24.749]                 }
[17:39:24.749]                 else {
[17:39:24.749]                   if (TRUE) {
[17:39:24.749]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.749]                     {
[17:39:24.749]                       inherits <- base::inherits
[17:39:24.749]                       invokeRestart <- base::invokeRestart
[17:39:24.749]                       is.null <- base::is.null
[17:39:24.749]                       muffled <- FALSE
[17:39:24.749]                       if (inherits(cond, "message")) {
[17:39:24.749]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.749]                         if (muffled) 
[17:39:24.749]                           invokeRestart("muffleMessage")
[17:39:24.749]                       }
[17:39:24.749]                       else if (inherits(cond, "warning")) {
[17:39:24.749]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.749]                         if (muffled) 
[17:39:24.749]                           invokeRestart("muffleWarning")
[17:39:24.749]                       }
[17:39:24.749]                       else if (inherits(cond, "condition")) {
[17:39:24.749]                         if (!is.null(pattern)) {
[17:39:24.749]                           computeRestarts <- base::computeRestarts
[17:39:24.749]                           grepl <- base::grepl
[17:39:24.749]                           restarts <- computeRestarts(cond)
[17:39:24.749]                           for (restart in restarts) {
[17:39:24.749]                             name <- restart$name
[17:39:24.749]                             if (is.null(name)) 
[17:39:24.749]                               next
[17:39:24.749]                             if (!grepl(pattern, name)) 
[17:39:24.749]                               next
[17:39:24.749]                             invokeRestart(restart)
[17:39:24.749]                             muffled <- TRUE
[17:39:24.749]                             break
[17:39:24.749]                           }
[17:39:24.749]                         }
[17:39:24.749]                       }
[17:39:24.749]                       invisible(muffled)
[17:39:24.749]                     }
[17:39:24.749]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.749]                   }
[17:39:24.749]                 }
[17:39:24.749]             }
[17:39:24.749]         }))
[17:39:24.749]     }, error = function(ex) {
[17:39:24.749]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:24.749]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.749]                 ...future.rng), started = ...future.startTime, 
[17:39:24.749]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:24.749]             version = "1.8"), class = "FutureResult")
[17:39:24.749]     }, finally = {
[17:39:24.749]         if (!identical(...future.workdir, getwd())) 
[17:39:24.749]             setwd(...future.workdir)
[17:39:24.749]         {
[17:39:24.749]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:24.749]                 ...future.oldOptions$nwarnings <- NULL
[17:39:24.749]             }
[17:39:24.749]             base::options(...future.oldOptions)
[17:39:24.749]             if (.Platform$OS.type == "windows") {
[17:39:24.749]                 old_names <- names(...future.oldEnvVars)
[17:39:24.749]                 envs <- base::Sys.getenv()
[17:39:24.749]                 names <- names(envs)
[17:39:24.749]                 common <- intersect(names, old_names)
[17:39:24.749]                 added <- setdiff(names, old_names)
[17:39:24.749]                 removed <- setdiff(old_names, names)
[17:39:24.749]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:24.749]                   envs[common]]
[17:39:24.749]                 NAMES <- toupper(changed)
[17:39:24.749]                 args <- list()
[17:39:24.749]                 for (kk in seq_along(NAMES)) {
[17:39:24.749]                   name <- changed[[kk]]
[17:39:24.749]                   NAME <- NAMES[[kk]]
[17:39:24.749]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.749]                     next
[17:39:24.749]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.749]                 }
[17:39:24.749]                 NAMES <- toupper(added)
[17:39:24.749]                 for (kk in seq_along(NAMES)) {
[17:39:24.749]                   name <- added[[kk]]
[17:39:24.749]                   NAME <- NAMES[[kk]]
[17:39:24.749]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.749]                     next
[17:39:24.749]                   args[[name]] <- ""
[17:39:24.749]                 }
[17:39:24.749]                 NAMES <- toupper(removed)
[17:39:24.749]                 for (kk in seq_along(NAMES)) {
[17:39:24.749]                   name <- removed[[kk]]
[17:39:24.749]                   NAME <- NAMES[[kk]]
[17:39:24.749]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.749]                     next
[17:39:24.749]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.749]                 }
[17:39:24.749]                 if (length(args) > 0) 
[17:39:24.749]                   base::do.call(base::Sys.setenv, args = args)
[17:39:24.749]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:24.749]             }
[17:39:24.749]             else {
[17:39:24.749]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:24.749]             }
[17:39:24.749]             {
[17:39:24.749]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:24.749]                   0L) {
[17:39:24.749]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:24.749]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:24.749]                   base::options(opts)
[17:39:24.749]                 }
[17:39:24.749]                 {
[17:39:24.749]                   {
[17:39:24.749]                     NULL
[17:39:24.749]                     RNGkind("Mersenne-Twister")
[17:39:24.749]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:24.749]                       inherits = FALSE)
[17:39:24.749]                   }
[17:39:24.749]                   options(future.plan = NULL)
[17:39:24.749]                   if (is.na(NA_character_)) 
[17:39:24.749]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.749]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:24.749]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:24.749]                     .init = FALSE)
[17:39:24.749]                 }
[17:39:24.749]             }
[17:39:24.749]         }
[17:39:24.749]     })
[17:39:24.749]     if (TRUE) {
[17:39:24.749]         base::sink(type = "output", split = FALSE)
[17:39:24.749]         if (TRUE) {
[17:39:24.749]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:24.749]         }
[17:39:24.749]         else {
[17:39:24.749]             ...future.result["stdout"] <- base::list(NULL)
[17:39:24.749]         }
[17:39:24.749]         base::close(...future.stdout)
[17:39:24.749]         ...future.stdout <- NULL
[17:39:24.749]     }
[17:39:24.749]     ...future.result$conditions <- ...future.conditions
[17:39:24.749]     ...future.result$finished <- base::Sys.time()
[17:39:24.749]     ...future.result
[17:39:24.749] }
[17:39:24.751] assign_globals() ...
[17:39:24.751] List of 2
[17:39:24.751]  $ rr: int 2
[17:39:24.751]  $ cc: int 2
[17:39:24.751]  - attr(*, "where")=List of 2
[17:39:24.751]   ..$ rr:<environment: R_EmptyEnv> 
[17:39:24.751]   ..$ cc:<environment: R_EmptyEnv> 
[17:39:24.751]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:24.751]  - attr(*, "resolved")= logi FALSE
[17:39:24.751]  - attr(*, "total_size")= num 112
[17:39:24.751]  - attr(*, "already-done")= logi TRUE
[17:39:24.754] - copied ‘rr’ to environment
[17:39:24.754] - copied ‘cc’ to environment
[17:39:24.754] assign_globals() ... done
[17:39:24.754] plan(): Setting new future strategy stack:
[17:39:24.754] List of future strategies:
[17:39:24.754] 1. sequential:
[17:39:24.754]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.754]    - tweaked: FALSE
[17:39:24.754]    - call: NULL
[17:39:24.755] plan(): nbrOfWorkers() = 1
[17:39:24.757] plan(): Setting new future strategy stack:
[17:39:24.757] List of future strategies:
[17:39:24.757] 1. sequential:
[17:39:24.757]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.757]    - tweaked: FALSE
[17:39:24.757]    - call: future::plan("sequential")
[17:39:24.758] plan(): nbrOfWorkers() = 1
[17:39:24.758] SequentialFuture started (and completed)
[17:39:24.758] - Launch lazy future ... done
[17:39:24.758] run() for ‘SequentialFuture’ ... done
[17:39:24.758] run() for ‘Future’ ...
[17:39:24.758] - state: ‘created’
[17:39:24.758] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:24.759] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:24.759] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:24.759]   - Field: ‘label’
[17:39:24.759]   - Field: ‘local’
[17:39:24.759]   - Field: ‘owner’
[17:39:24.759]   - Field: ‘envir’
[17:39:24.759]   - Field: ‘packages’
[17:39:24.759]   - Field: ‘gc’
[17:39:24.759]   - Field: ‘conditions’
[17:39:24.760]   - Field: ‘expr’
[17:39:24.760]   - Field: ‘uuid’
[17:39:24.760]   - Field: ‘seed’
[17:39:24.760]   - Field: ‘version’
[17:39:24.760]   - Field: ‘result’
[17:39:24.760]   - Field: ‘asynchronous’
[17:39:24.760]   - Field: ‘calls’
[17:39:24.760]   - Field: ‘globals’
[17:39:24.760]   - Field: ‘stdout’
[17:39:24.760]   - Field: ‘earlySignal’
[17:39:24.760]   - Field: ‘lazy’
[17:39:24.761]   - Field: ‘state’
[17:39:24.761] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:24.761] - Launch lazy future ...
[17:39:24.761] Packages needed by the future expression (n = 0): <none>
[17:39:24.761] Packages needed by future strategies (n = 0): <none>
[17:39:24.761] {
[17:39:24.761]     {
[17:39:24.761]         {
[17:39:24.761]             ...future.startTime <- base::Sys.time()
[17:39:24.761]             {
[17:39:24.761]                 {
[17:39:24.761]                   {
[17:39:24.761]                     base::local({
[17:39:24.761]                       has_future <- base::requireNamespace("future", 
[17:39:24.761]                         quietly = TRUE)
[17:39:24.761]                       if (has_future) {
[17:39:24.761]                         ns <- base::getNamespace("future")
[17:39:24.761]                         version <- ns[[".package"]][["version"]]
[17:39:24.761]                         if (is.null(version)) 
[17:39:24.761]                           version <- utils::packageVersion("future")
[17:39:24.761]                       }
[17:39:24.761]                       else {
[17:39:24.761]                         version <- NULL
[17:39:24.761]                       }
[17:39:24.761]                       if (!has_future || version < "1.8.0") {
[17:39:24.761]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:24.761]                           "", base::R.version$version.string), 
[17:39:24.761]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:24.761]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:24.761]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:24.761]                             "release", "version")], collapse = " "), 
[17:39:24.761]                           hostname = base::Sys.info()[["nodename"]])
[17:39:24.761]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:24.761]                           info)
[17:39:24.761]                         info <- base::paste(info, collapse = "; ")
[17:39:24.761]                         if (!has_future) {
[17:39:24.761]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:24.761]                             info)
[17:39:24.761]                         }
[17:39:24.761]                         else {
[17:39:24.761]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:24.761]                             info, version)
[17:39:24.761]                         }
[17:39:24.761]                         base::stop(msg)
[17:39:24.761]                       }
[17:39:24.761]                     })
[17:39:24.761]                   }
[17:39:24.761]                   ...future.strategy.old <- future::plan("list")
[17:39:24.761]                   options(future.plan = NULL)
[17:39:24.761]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.761]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:24.761]                 }
[17:39:24.761]                 ...future.workdir <- getwd()
[17:39:24.761]             }
[17:39:24.761]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:24.761]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:24.761]         }
[17:39:24.761]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:24.761]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:24.761]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:24.761]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:24.761]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:24.761]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:24.761]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:24.761]             base::names(...future.oldOptions))
[17:39:24.761]     }
[17:39:24.761]     if (FALSE) {
[17:39:24.761]     }
[17:39:24.761]     else {
[17:39:24.761]         if (TRUE) {
[17:39:24.761]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:24.761]                 open = "w")
[17:39:24.761]         }
[17:39:24.761]         else {
[17:39:24.761]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:24.761]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:24.761]         }
[17:39:24.761]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:24.761]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:24.761]             base::sink(type = "output", split = FALSE)
[17:39:24.761]             base::close(...future.stdout)
[17:39:24.761]         }, add = TRUE)
[17:39:24.761]     }
[17:39:24.761]     ...future.frame <- base::sys.nframe()
[17:39:24.761]     ...future.conditions <- base::list()
[17:39:24.761]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:24.761]     if (FALSE) {
[17:39:24.761]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:24.761]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:24.761]     }
[17:39:24.761]     ...future.result <- base::tryCatch({
[17:39:24.761]         base::withCallingHandlers({
[17:39:24.761]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:39:24.761]                 rr, cc)))
[17:39:24.761]             future::FutureResult(value = ...future.value$value, 
[17:39:24.761]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.761]                   ...future.rng), globalenv = if (FALSE) 
[17:39:24.761]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:24.761]                     ...future.globalenv.names))
[17:39:24.761]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:24.761]         }, condition = base::local({
[17:39:24.761]             c <- base::c
[17:39:24.761]             inherits <- base::inherits
[17:39:24.761]             invokeRestart <- base::invokeRestart
[17:39:24.761]             length <- base::length
[17:39:24.761]             list <- base::list
[17:39:24.761]             seq.int <- base::seq.int
[17:39:24.761]             signalCondition <- base::signalCondition
[17:39:24.761]             sys.calls <- base::sys.calls
[17:39:24.761]             `[[` <- base::`[[`
[17:39:24.761]             `+` <- base::`+`
[17:39:24.761]             `<<-` <- base::`<<-`
[17:39:24.761]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:24.761]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:24.761]                   3L)]
[17:39:24.761]             }
[17:39:24.761]             function(cond) {
[17:39:24.761]                 is_error <- inherits(cond, "error")
[17:39:24.761]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:24.761]                   NULL)
[17:39:24.761]                 if (is_error) {
[17:39:24.761]                   sessionInformation <- function() {
[17:39:24.761]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:24.761]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:24.761]                       search = base::search(), system = base::Sys.info())
[17:39:24.761]                   }
[17:39:24.761]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.761]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:24.761]                     cond$call), session = sessionInformation(), 
[17:39:24.761]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:24.761]                   signalCondition(cond)
[17:39:24.761]                 }
[17:39:24.761]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:24.761]                 "immediateCondition"))) {
[17:39:24.761]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:24.761]                   ...future.conditions[[length(...future.conditions) + 
[17:39:24.761]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:24.761]                   if (TRUE && !signal) {
[17:39:24.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.761]                     {
[17:39:24.761]                       inherits <- base::inherits
[17:39:24.761]                       invokeRestart <- base::invokeRestart
[17:39:24.761]                       is.null <- base::is.null
[17:39:24.761]                       muffled <- FALSE
[17:39:24.761]                       if (inherits(cond, "message")) {
[17:39:24.761]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.761]                         if (muffled) 
[17:39:24.761]                           invokeRestart("muffleMessage")
[17:39:24.761]                       }
[17:39:24.761]                       else if (inherits(cond, "warning")) {
[17:39:24.761]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.761]                         if (muffled) 
[17:39:24.761]                           invokeRestart("muffleWarning")
[17:39:24.761]                       }
[17:39:24.761]                       else if (inherits(cond, "condition")) {
[17:39:24.761]                         if (!is.null(pattern)) {
[17:39:24.761]                           computeRestarts <- base::computeRestarts
[17:39:24.761]                           grepl <- base::grepl
[17:39:24.761]                           restarts <- computeRestarts(cond)
[17:39:24.761]                           for (restart in restarts) {
[17:39:24.761]                             name <- restart$name
[17:39:24.761]                             if (is.null(name)) 
[17:39:24.761]                               next
[17:39:24.761]                             if (!grepl(pattern, name)) 
[17:39:24.761]                               next
[17:39:24.761]                             invokeRestart(restart)
[17:39:24.761]                             muffled <- TRUE
[17:39:24.761]                             break
[17:39:24.761]                           }
[17:39:24.761]                         }
[17:39:24.761]                       }
[17:39:24.761]                       invisible(muffled)
[17:39:24.761]                     }
[17:39:24.761]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.761]                   }
[17:39:24.761]                 }
[17:39:24.761]                 else {
[17:39:24.761]                   if (TRUE) {
[17:39:24.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:24.761]                     {
[17:39:24.761]                       inherits <- base::inherits
[17:39:24.761]                       invokeRestart <- base::invokeRestart
[17:39:24.761]                       is.null <- base::is.null
[17:39:24.761]                       muffled <- FALSE
[17:39:24.761]                       if (inherits(cond, "message")) {
[17:39:24.761]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:24.761]                         if (muffled) 
[17:39:24.761]                           invokeRestart("muffleMessage")
[17:39:24.761]                       }
[17:39:24.761]                       else if (inherits(cond, "warning")) {
[17:39:24.761]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:24.761]                         if (muffled) 
[17:39:24.761]                           invokeRestart("muffleWarning")
[17:39:24.761]                       }
[17:39:24.761]                       else if (inherits(cond, "condition")) {
[17:39:24.761]                         if (!is.null(pattern)) {
[17:39:24.761]                           computeRestarts <- base::computeRestarts
[17:39:24.761]                           grepl <- base::grepl
[17:39:24.761]                           restarts <- computeRestarts(cond)
[17:39:24.761]                           for (restart in restarts) {
[17:39:24.761]                             name <- restart$name
[17:39:24.761]                             if (is.null(name)) 
[17:39:24.761]                               next
[17:39:24.761]                             if (!grepl(pattern, name)) 
[17:39:24.761]                               next
[17:39:24.761]                             invokeRestart(restart)
[17:39:24.761]                             muffled <- TRUE
[17:39:24.761]                             break
[17:39:24.761]                           }
[17:39:24.761]                         }
[17:39:24.761]                       }
[17:39:24.761]                       invisible(muffled)
[17:39:24.761]                     }
[17:39:24.761]                     muffleCondition(cond, pattern = "^muffle")
[17:39:24.761]                   }
[17:39:24.761]                 }
[17:39:24.761]             }
[17:39:24.761]         }))
[17:39:24.761]     }, error = function(ex) {
[17:39:24.761]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:24.761]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:24.761]                 ...future.rng), started = ...future.startTime, 
[17:39:24.761]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:24.761]             version = "1.8"), class = "FutureResult")
[17:39:24.761]     }, finally = {
[17:39:24.761]         if (!identical(...future.workdir, getwd())) 
[17:39:24.761]             setwd(...future.workdir)
[17:39:24.761]         {
[17:39:24.761]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:24.761]                 ...future.oldOptions$nwarnings <- NULL
[17:39:24.761]             }
[17:39:24.761]             base::options(...future.oldOptions)
[17:39:24.761]             if (.Platform$OS.type == "windows") {
[17:39:24.761]                 old_names <- names(...future.oldEnvVars)
[17:39:24.761]                 envs <- base::Sys.getenv()
[17:39:24.761]                 names <- names(envs)
[17:39:24.761]                 common <- intersect(names, old_names)
[17:39:24.761]                 added <- setdiff(names, old_names)
[17:39:24.761]                 removed <- setdiff(old_names, names)
[17:39:24.761]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:24.761]                   envs[common]]
[17:39:24.761]                 NAMES <- toupper(changed)
[17:39:24.761]                 args <- list()
[17:39:24.761]                 for (kk in seq_along(NAMES)) {
[17:39:24.761]                   name <- changed[[kk]]
[17:39:24.761]                   NAME <- NAMES[[kk]]
[17:39:24.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.761]                     next
[17:39:24.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.761]                 }
[17:39:24.761]                 NAMES <- toupper(added)
[17:39:24.761]                 for (kk in seq_along(NAMES)) {
[17:39:24.761]                   name <- added[[kk]]
[17:39:24.761]                   NAME <- NAMES[[kk]]
[17:39:24.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.761]                     next
[17:39:24.761]                   args[[name]] <- ""
[17:39:24.761]                 }
[17:39:24.761]                 NAMES <- toupper(removed)
[17:39:24.761]                 for (kk in seq_along(NAMES)) {
[17:39:24.761]                   name <- removed[[kk]]
[17:39:24.761]                   NAME <- NAMES[[kk]]
[17:39:24.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:24.761]                     next
[17:39:24.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:24.761]                 }
[17:39:24.761]                 if (length(args) > 0) 
[17:39:24.761]                   base::do.call(base::Sys.setenv, args = args)
[17:39:24.761]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:24.761]             }
[17:39:24.761]             else {
[17:39:24.761]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:24.761]             }
[17:39:24.761]             {
[17:39:24.761]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:24.761]                   0L) {
[17:39:24.761]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:24.761]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:24.761]                   base::options(opts)
[17:39:24.761]                 }
[17:39:24.761]                 {
[17:39:24.761]                   {
[17:39:24.761]                     NULL
[17:39:24.761]                     RNGkind("Mersenne-Twister")
[17:39:24.761]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:24.761]                       inherits = FALSE)
[17:39:24.761]                   }
[17:39:24.761]                   options(future.plan = NULL)
[17:39:24.761]                   if (is.na(NA_character_)) 
[17:39:24.761]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:24.761]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:24.761]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:24.761]                     .init = FALSE)
[17:39:24.761]                 }
[17:39:24.761]             }
[17:39:24.761]         }
[17:39:24.761]     })
[17:39:24.761]     if (TRUE) {
[17:39:24.761]         base::sink(type = "output", split = FALSE)
[17:39:24.761]         if (TRUE) {
[17:39:24.761]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:24.761]         }
[17:39:24.761]         else {
[17:39:24.761]             ...future.result["stdout"] <- base::list(NULL)
[17:39:24.761]         }
[17:39:24.761]         base::close(...future.stdout)
[17:39:24.761]         ...future.stdout <- NULL
[17:39:24.761]     }
[17:39:24.761]     ...future.result$conditions <- ...future.conditions
[17:39:24.761]     ...future.result$finished <- base::Sys.time()
[17:39:24.761]     ...future.result
[17:39:24.761] }
[17:39:24.763] assign_globals() ...
[17:39:24.763] List of 2
[17:39:24.763]  $ rr: int 3
[17:39:24.763]  $ cc: int 2
[17:39:24.763]  - attr(*, "where")=List of 2
[17:39:24.763]   ..$ rr:<environment: R_EmptyEnv> 
[17:39:24.763]   ..$ cc:<environment: R_EmptyEnv> 
[17:39:24.763]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:24.763]  - attr(*, "resolved")= logi FALSE
[17:39:24.763]  - attr(*, "total_size")= num 112
[17:39:24.763]  - attr(*, "already-done")= logi TRUE
[17:39:24.766] - copied ‘rr’ to environment
[17:39:24.766] - copied ‘cc’ to environment
[17:39:24.766] assign_globals() ... done
[17:39:24.766] plan(): Setting new future strategy stack:
[17:39:24.766] List of future strategies:
[17:39:24.766] 1. sequential:
[17:39:24.766]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.766]    - tweaked: FALSE
[17:39:24.766]    - call: NULL
[17:39:24.767] plan(): nbrOfWorkers() = 1
[17:39:24.767] plan(): Setting new future strategy stack:
[17:39:24.768] List of future strategies:
[17:39:24.768] 1. sequential:
[17:39:24.768]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.768]    - tweaked: FALSE
[17:39:24.768]    - call: future::plan("sequential")
[17:39:24.768] plan(): nbrOfWorkers() = 1
[17:39:24.768] SequentialFuture started (and completed)
[17:39:24.768] - Launch lazy future ... done
[17:39:24.768] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[17:39:24.769] plan(): Setting new future strategy stack:
[17:39:24.769] List of future strategies:
[17:39:24.769] 1. FutureStrategy:
[17:39:24.769]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:24.769]    - tweaked: FALSE
[17:39:24.769]    - call: future::plan(oplan)
[17:39:24.780] plan(): nbrOfWorkers() = 1
> 
