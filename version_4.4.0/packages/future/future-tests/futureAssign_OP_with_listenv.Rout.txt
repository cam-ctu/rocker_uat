
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:31:03.022] plan(): Setting new future strategy stack:
[09:31:03.023] List of future strategies:
[09:31:03.023] 1. sequential:
[09:31:03.023]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.023]    - tweaked: FALSE
[09:31:03.023]    - call: future::plan("sequential")
[09:31:03.033] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[09:31:03.049] getGlobalsAndPackages() ...
[09:31:03.050] Searching for globals...
[09:31:03.052] - globals found: [1] ‘{’
[09:31:03.053] Searching for globals ... DONE
[09:31:03.053] Resolving globals: FALSE
[09:31:03.053] 
[09:31:03.053] 
[09:31:03.053] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[09:31:03.054] getGlobalsAndPackages() ...
[09:31:03.054] Searching for globals...
[09:31:03.055] - globals found: [1] ‘{’
[09:31:03.055] Searching for globals ... DONE
[09:31:03.055] Resolving globals: FALSE
[09:31:03.055] 
[09:31:03.055] 
[09:31:03.055] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[09:31:03.056] getGlobalsAndPackages() ...
[09:31:03.056] Searching for globals...
[09:31:03.056] - globals found: [1] ‘{’
[09:31:03.056] Searching for globals ... DONE
[09:31:03.057] Resolving globals: FALSE
[09:31:03.057] 
[09:31:03.057] 
[09:31:03.057] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[09:31:03.058] getGlobalsAndPackages() ...
[09:31:03.058] Searching for globals...
[09:31:03.058] - globals found: [1] ‘{’
[09:31:03.058] Searching for globals ... DONE
[09:31:03.059] Resolving globals: FALSE
[09:31:03.059] 
[09:31:03.059] 
[09:31:03.059] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[09:31:03.060] run() for ‘Future’ ...
[09:31:03.060] - state: ‘created’
[09:31:03.060] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.060] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.061] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.061]   - Field: ‘label’
[09:31:03.061]   - Field: ‘local’
[09:31:03.061]   - Field: ‘owner’
[09:31:03.061]   - Field: ‘envir’
[09:31:03.061]   - Field: ‘packages’
[09:31:03.061]   - Field: ‘gc’
[09:31:03.061]   - Field: ‘conditions’
[09:31:03.061]   - Field: ‘expr’
[09:31:03.061]   - Field: ‘uuid’
[09:31:03.061]   - Field: ‘seed’
[09:31:03.062]   - Field: ‘version’
[09:31:03.062]   - Field: ‘result’
[09:31:03.062]   - Field: ‘asynchronous’
[09:31:03.062]   - Field: ‘calls’
[09:31:03.062]   - Field: ‘globals’
[09:31:03.062]   - Field: ‘stdout’
[09:31:03.062]   - Field: ‘earlySignal’
[09:31:03.062]   - Field: ‘lazy’
[09:31:03.062]   - Field: ‘state’
[09:31:03.062] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.062] - Launch lazy future ...
[09:31:03.063] Packages needed by the future expression (n = 0): <none>
[09:31:03.063] Packages needed by future strategies (n = 0): <none>
[09:31:03.064] {
[09:31:03.064]     {
[09:31:03.064]         {
[09:31:03.064]             ...future.startTime <- base::Sys.time()
[09:31:03.064]             {
[09:31:03.064]                 {
[09:31:03.064]                   {
[09:31:03.064]                     base::local({
[09:31:03.064]                       has_future <- base::requireNamespace("future", 
[09:31:03.064]                         quietly = TRUE)
[09:31:03.064]                       if (has_future) {
[09:31:03.064]                         ns <- base::getNamespace("future")
[09:31:03.064]                         version <- ns[[".package"]][["version"]]
[09:31:03.064]                         if (is.null(version)) 
[09:31:03.064]                           version <- utils::packageVersion("future")
[09:31:03.064]                       }
[09:31:03.064]                       else {
[09:31:03.064]                         version <- NULL
[09:31:03.064]                       }
[09:31:03.064]                       if (!has_future || version < "1.8.0") {
[09:31:03.064]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.064]                           "", base::R.version$version.string), 
[09:31:03.064]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.064]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.064]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.064]                             "release", "version")], collapse = " "), 
[09:31:03.064]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.064]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.064]                           info)
[09:31:03.064]                         info <- base::paste(info, collapse = "; ")
[09:31:03.064]                         if (!has_future) {
[09:31:03.064]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.064]                             info)
[09:31:03.064]                         }
[09:31:03.064]                         else {
[09:31:03.064]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.064]                             info, version)
[09:31:03.064]                         }
[09:31:03.064]                         base::stop(msg)
[09:31:03.064]                       }
[09:31:03.064]                     })
[09:31:03.064]                   }
[09:31:03.064]                   ...future.strategy.old <- future::plan("list")
[09:31:03.064]                   options(future.plan = NULL)
[09:31:03.064]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.064]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.064]                 }
[09:31:03.064]                 ...future.workdir <- getwd()
[09:31:03.064]             }
[09:31:03.064]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.064]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.064]         }
[09:31:03.064]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.064]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.064]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.064]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.064]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.064]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.064]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.064]             base::names(...future.oldOptions))
[09:31:03.064]     }
[09:31:03.064]     if (FALSE) {
[09:31:03.064]     }
[09:31:03.064]     else {
[09:31:03.064]         if (TRUE) {
[09:31:03.064]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.064]                 open = "w")
[09:31:03.064]         }
[09:31:03.064]         else {
[09:31:03.064]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.064]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.064]         }
[09:31:03.064]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.064]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.064]             base::sink(type = "output", split = FALSE)
[09:31:03.064]             base::close(...future.stdout)
[09:31:03.064]         }, add = TRUE)
[09:31:03.064]     }
[09:31:03.064]     ...future.frame <- base::sys.nframe()
[09:31:03.064]     ...future.conditions <- base::list()
[09:31:03.064]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.064]     if (FALSE) {
[09:31:03.064]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.064]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.064]     }
[09:31:03.064]     ...future.result <- base::tryCatch({
[09:31:03.064]         base::withCallingHandlers({
[09:31:03.064]             ...future.value <- base::withVisible(base::local({
[09:31:03.064]                 2
[09:31:03.064]             }))
[09:31:03.064]             future::FutureResult(value = ...future.value$value, 
[09:31:03.064]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.064]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.064]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.064]                     ...future.globalenv.names))
[09:31:03.064]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.064]         }, condition = base::local({
[09:31:03.064]             c <- base::c
[09:31:03.064]             inherits <- base::inherits
[09:31:03.064]             invokeRestart <- base::invokeRestart
[09:31:03.064]             length <- base::length
[09:31:03.064]             list <- base::list
[09:31:03.064]             seq.int <- base::seq.int
[09:31:03.064]             signalCondition <- base::signalCondition
[09:31:03.064]             sys.calls <- base::sys.calls
[09:31:03.064]             `[[` <- base::`[[`
[09:31:03.064]             `+` <- base::`+`
[09:31:03.064]             `<<-` <- base::`<<-`
[09:31:03.064]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.064]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.064]                   3L)]
[09:31:03.064]             }
[09:31:03.064]             function(cond) {
[09:31:03.064]                 is_error <- inherits(cond, "error")
[09:31:03.064]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.064]                   NULL)
[09:31:03.064]                 if (is_error) {
[09:31:03.064]                   sessionInformation <- function() {
[09:31:03.064]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.064]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.064]                       search = base::search(), system = base::Sys.info())
[09:31:03.064]                   }
[09:31:03.064]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.064]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.064]                     cond$call), session = sessionInformation(), 
[09:31:03.064]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.064]                   signalCondition(cond)
[09:31:03.064]                 }
[09:31:03.064]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.064]                 "immediateCondition"))) {
[09:31:03.064]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.064]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.064]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.064]                   if (TRUE && !signal) {
[09:31:03.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.064]                     {
[09:31:03.064]                       inherits <- base::inherits
[09:31:03.064]                       invokeRestart <- base::invokeRestart
[09:31:03.064]                       is.null <- base::is.null
[09:31:03.064]                       muffled <- FALSE
[09:31:03.064]                       if (inherits(cond, "message")) {
[09:31:03.064]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.064]                         if (muffled) 
[09:31:03.064]                           invokeRestart("muffleMessage")
[09:31:03.064]                       }
[09:31:03.064]                       else if (inherits(cond, "warning")) {
[09:31:03.064]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.064]                         if (muffled) 
[09:31:03.064]                           invokeRestart("muffleWarning")
[09:31:03.064]                       }
[09:31:03.064]                       else if (inherits(cond, "condition")) {
[09:31:03.064]                         if (!is.null(pattern)) {
[09:31:03.064]                           computeRestarts <- base::computeRestarts
[09:31:03.064]                           grepl <- base::grepl
[09:31:03.064]                           restarts <- computeRestarts(cond)
[09:31:03.064]                           for (restart in restarts) {
[09:31:03.064]                             name <- restart$name
[09:31:03.064]                             if (is.null(name)) 
[09:31:03.064]                               next
[09:31:03.064]                             if (!grepl(pattern, name)) 
[09:31:03.064]                               next
[09:31:03.064]                             invokeRestart(restart)
[09:31:03.064]                             muffled <- TRUE
[09:31:03.064]                             break
[09:31:03.064]                           }
[09:31:03.064]                         }
[09:31:03.064]                       }
[09:31:03.064]                       invisible(muffled)
[09:31:03.064]                     }
[09:31:03.064]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.064]                   }
[09:31:03.064]                 }
[09:31:03.064]                 else {
[09:31:03.064]                   if (TRUE) {
[09:31:03.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.064]                     {
[09:31:03.064]                       inherits <- base::inherits
[09:31:03.064]                       invokeRestart <- base::invokeRestart
[09:31:03.064]                       is.null <- base::is.null
[09:31:03.064]                       muffled <- FALSE
[09:31:03.064]                       if (inherits(cond, "message")) {
[09:31:03.064]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.064]                         if (muffled) 
[09:31:03.064]                           invokeRestart("muffleMessage")
[09:31:03.064]                       }
[09:31:03.064]                       else if (inherits(cond, "warning")) {
[09:31:03.064]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.064]                         if (muffled) 
[09:31:03.064]                           invokeRestart("muffleWarning")
[09:31:03.064]                       }
[09:31:03.064]                       else if (inherits(cond, "condition")) {
[09:31:03.064]                         if (!is.null(pattern)) {
[09:31:03.064]                           computeRestarts <- base::computeRestarts
[09:31:03.064]                           grepl <- base::grepl
[09:31:03.064]                           restarts <- computeRestarts(cond)
[09:31:03.064]                           for (restart in restarts) {
[09:31:03.064]                             name <- restart$name
[09:31:03.064]                             if (is.null(name)) 
[09:31:03.064]                               next
[09:31:03.064]                             if (!grepl(pattern, name)) 
[09:31:03.064]                               next
[09:31:03.064]                             invokeRestart(restart)
[09:31:03.064]                             muffled <- TRUE
[09:31:03.064]                             break
[09:31:03.064]                           }
[09:31:03.064]                         }
[09:31:03.064]                       }
[09:31:03.064]                       invisible(muffled)
[09:31:03.064]                     }
[09:31:03.064]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.064]                   }
[09:31:03.064]                 }
[09:31:03.064]             }
[09:31:03.064]         }))
[09:31:03.064]     }, error = function(ex) {
[09:31:03.064]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.064]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.064]                 ...future.rng), started = ...future.startTime, 
[09:31:03.064]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.064]             version = "1.8"), class = "FutureResult")
[09:31:03.064]     }, finally = {
[09:31:03.064]         if (!identical(...future.workdir, getwd())) 
[09:31:03.064]             setwd(...future.workdir)
[09:31:03.064]         {
[09:31:03.064]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.064]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.064]             }
[09:31:03.064]             base::options(...future.oldOptions)
[09:31:03.064]             if (.Platform$OS.type == "windows") {
[09:31:03.064]                 old_names <- names(...future.oldEnvVars)
[09:31:03.064]                 envs <- base::Sys.getenv()
[09:31:03.064]                 names <- names(envs)
[09:31:03.064]                 common <- intersect(names, old_names)
[09:31:03.064]                 added <- setdiff(names, old_names)
[09:31:03.064]                 removed <- setdiff(old_names, names)
[09:31:03.064]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.064]                   envs[common]]
[09:31:03.064]                 NAMES <- toupper(changed)
[09:31:03.064]                 args <- list()
[09:31:03.064]                 for (kk in seq_along(NAMES)) {
[09:31:03.064]                   name <- changed[[kk]]
[09:31:03.064]                   NAME <- NAMES[[kk]]
[09:31:03.064]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.064]                     next
[09:31:03.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.064]                 }
[09:31:03.064]                 NAMES <- toupper(added)
[09:31:03.064]                 for (kk in seq_along(NAMES)) {
[09:31:03.064]                   name <- added[[kk]]
[09:31:03.064]                   NAME <- NAMES[[kk]]
[09:31:03.064]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.064]                     next
[09:31:03.064]                   args[[name]] <- ""
[09:31:03.064]                 }
[09:31:03.064]                 NAMES <- toupper(removed)
[09:31:03.064]                 for (kk in seq_along(NAMES)) {
[09:31:03.064]                   name <- removed[[kk]]
[09:31:03.064]                   NAME <- NAMES[[kk]]
[09:31:03.064]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.064]                     next
[09:31:03.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.064]                 }
[09:31:03.064]                 if (length(args) > 0) 
[09:31:03.064]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.064]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.064]             }
[09:31:03.064]             else {
[09:31:03.064]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.064]             }
[09:31:03.064]             {
[09:31:03.064]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.064]                   0L) {
[09:31:03.064]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.064]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.064]                   base::options(opts)
[09:31:03.064]                 }
[09:31:03.064]                 {
[09:31:03.064]                   {
[09:31:03.064]                     NULL
[09:31:03.064]                     RNGkind("Mersenne-Twister")
[09:31:03.064]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.064]                       inherits = FALSE)
[09:31:03.064]                   }
[09:31:03.064]                   options(future.plan = NULL)
[09:31:03.064]                   if (is.na(NA_character_)) 
[09:31:03.064]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.064]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.064]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.064]                     .init = FALSE)
[09:31:03.064]                 }
[09:31:03.064]             }
[09:31:03.064]         }
[09:31:03.064]     })
[09:31:03.064]     if (TRUE) {
[09:31:03.064]         base::sink(type = "output", split = FALSE)
[09:31:03.064]         if (TRUE) {
[09:31:03.064]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.064]         }
[09:31:03.064]         else {
[09:31:03.064]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.064]         }
[09:31:03.064]         base::close(...future.stdout)
[09:31:03.064]         ...future.stdout <- NULL
[09:31:03.064]     }
[09:31:03.064]     ...future.result$conditions <- ...future.conditions
[09:31:03.064]     ...future.result$finished <- base::Sys.time()
[09:31:03.064]     ...future.result
[09:31:03.064] }
[09:31:03.066] plan(): Setting new future strategy stack:
[09:31:03.066] List of future strategies:
[09:31:03.066] 1. sequential:
[09:31:03.066]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.066]    - tweaked: FALSE
[09:31:03.066]    - call: NULL
[09:31:03.066] plan(): nbrOfWorkers() = 1
[09:31:03.067] plan(): Setting new future strategy stack:
[09:31:03.067] List of future strategies:
[09:31:03.067] 1. sequential:
[09:31:03.067]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.067]    - tweaked: FALSE
[09:31:03.067]    - call: future::plan("sequential")
[09:31:03.068] plan(): nbrOfWorkers() = 1
[09:31:03.068] SequentialFuture started (and completed)
[09:31:03.068] - Launch lazy future ... done
[09:31:03.069] run() for ‘SequentialFuture’ ... done
[09:31:03.069] run() for ‘Future’ ...
[09:31:03.069] - state: ‘created’
[09:31:03.069] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.069] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.069] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.069]   - Field: ‘label’
[09:31:03.070]   - Field: ‘local’
[09:31:03.070]   - Field: ‘owner’
[09:31:03.070]   - Field: ‘envir’
[09:31:03.070]   - Field: ‘packages’
[09:31:03.070]   - Field: ‘gc’
[09:31:03.070]   - Field: ‘conditions’
[09:31:03.070]   - Field: ‘expr’
[09:31:03.070]   - Field: ‘uuid’
[09:31:03.070]   - Field: ‘seed’
[09:31:03.070]   - Field: ‘version’
[09:31:03.070]   - Field: ‘result’
[09:31:03.070]   - Field: ‘asynchronous’
[09:31:03.071]   - Field: ‘calls’
[09:31:03.071]   - Field: ‘globals’
[09:31:03.071]   - Field: ‘stdout’
[09:31:03.071]   - Field: ‘earlySignal’
[09:31:03.071]   - Field: ‘lazy’
[09:31:03.071]   - Field: ‘state’
[09:31:03.071] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.071] - Launch lazy future ...
[09:31:03.071] Packages needed by the future expression (n = 0): <none>
[09:31:03.071] Packages needed by future strategies (n = 0): <none>
[09:31:03.072] {
[09:31:03.072]     {
[09:31:03.072]         {
[09:31:03.072]             ...future.startTime <- base::Sys.time()
[09:31:03.072]             {
[09:31:03.072]                 {
[09:31:03.072]                   {
[09:31:03.072]                     base::local({
[09:31:03.072]                       has_future <- base::requireNamespace("future", 
[09:31:03.072]                         quietly = TRUE)
[09:31:03.072]                       if (has_future) {
[09:31:03.072]                         ns <- base::getNamespace("future")
[09:31:03.072]                         version <- ns[[".package"]][["version"]]
[09:31:03.072]                         if (is.null(version)) 
[09:31:03.072]                           version <- utils::packageVersion("future")
[09:31:03.072]                       }
[09:31:03.072]                       else {
[09:31:03.072]                         version <- NULL
[09:31:03.072]                       }
[09:31:03.072]                       if (!has_future || version < "1.8.0") {
[09:31:03.072]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.072]                           "", base::R.version$version.string), 
[09:31:03.072]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.072]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.072]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.072]                             "release", "version")], collapse = " "), 
[09:31:03.072]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.072]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.072]                           info)
[09:31:03.072]                         info <- base::paste(info, collapse = "; ")
[09:31:03.072]                         if (!has_future) {
[09:31:03.072]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.072]                             info)
[09:31:03.072]                         }
[09:31:03.072]                         else {
[09:31:03.072]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.072]                             info, version)
[09:31:03.072]                         }
[09:31:03.072]                         base::stop(msg)
[09:31:03.072]                       }
[09:31:03.072]                     })
[09:31:03.072]                   }
[09:31:03.072]                   ...future.strategy.old <- future::plan("list")
[09:31:03.072]                   options(future.plan = NULL)
[09:31:03.072]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.072]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.072]                 }
[09:31:03.072]                 ...future.workdir <- getwd()
[09:31:03.072]             }
[09:31:03.072]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.072]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.072]         }
[09:31:03.072]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.072]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.072]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.072]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.072]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.072]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.072]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.072]             base::names(...future.oldOptions))
[09:31:03.072]     }
[09:31:03.072]     if (FALSE) {
[09:31:03.072]     }
[09:31:03.072]     else {
[09:31:03.072]         if (TRUE) {
[09:31:03.072]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.072]                 open = "w")
[09:31:03.072]         }
[09:31:03.072]         else {
[09:31:03.072]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.072]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.072]         }
[09:31:03.072]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.072]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.072]             base::sink(type = "output", split = FALSE)
[09:31:03.072]             base::close(...future.stdout)
[09:31:03.072]         }, add = TRUE)
[09:31:03.072]     }
[09:31:03.072]     ...future.frame <- base::sys.nframe()
[09:31:03.072]     ...future.conditions <- base::list()
[09:31:03.072]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.072]     if (FALSE) {
[09:31:03.072]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.072]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.072]     }
[09:31:03.072]     ...future.result <- base::tryCatch({
[09:31:03.072]         base::withCallingHandlers({
[09:31:03.072]             ...future.value <- base::withVisible(base::local({
[09:31:03.072]                 "async!"
[09:31:03.072]             }))
[09:31:03.072]             future::FutureResult(value = ...future.value$value, 
[09:31:03.072]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.072]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.072]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.072]                     ...future.globalenv.names))
[09:31:03.072]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.072]         }, condition = base::local({
[09:31:03.072]             c <- base::c
[09:31:03.072]             inherits <- base::inherits
[09:31:03.072]             invokeRestart <- base::invokeRestart
[09:31:03.072]             length <- base::length
[09:31:03.072]             list <- base::list
[09:31:03.072]             seq.int <- base::seq.int
[09:31:03.072]             signalCondition <- base::signalCondition
[09:31:03.072]             sys.calls <- base::sys.calls
[09:31:03.072]             `[[` <- base::`[[`
[09:31:03.072]             `+` <- base::`+`
[09:31:03.072]             `<<-` <- base::`<<-`
[09:31:03.072]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.072]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.072]                   3L)]
[09:31:03.072]             }
[09:31:03.072]             function(cond) {
[09:31:03.072]                 is_error <- inherits(cond, "error")
[09:31:03.072]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.072]                   NULL)
[09:31:03.072]                 if (is_error) {
[09:31:03.072]                   sessionInformation <- function() {
[09:31:03.072]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.072]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.072]                       search = base::search(), system = base::Sys.info())
[09:31:03.072]                   }
[09:31:03.072]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.072]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.072]                     cond$call), session = sessionInformation(), 
[09:31:03.072]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.072]                   signalCondition(cond)
[09:31:03.072]                 }
[09:31:03.072]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.072]                 "immediateCondition"))) {
[09:31:03.072]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.072]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.072]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.072]                   if (TRUE && !signal) {
[09:31:03.072]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.072]                     {
[09:31:03.072]                       inherits <- base::inherits
[09:31:03.072]                       invokeRestart <- base::invokeRestart
[09:31:03.072]                       is.null <- base::is.null
[09:31:03.072]                       muffled <- FALSE
[09:31:03.072]                       if (inherits(cond, "message")) {
[09:31:03.072]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.072]                         if (muffled) 
[09:31:03.072]                           invokeRestart("muffleMessage")
[09:31:03.072]                       }
[09:31:03.072]                       else if (inherits(cond, "warning")) {
[09:31:03.072]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.072]                         if (muffled) 
[09:31:03.072]                           invokeRestart("muffleWarning")
[09:31:03.072]                       }
[09:31:03.072]                       else if (inherits(cond, "condition")) {
[09:31:03.072]                         if (!is.null(pattern)) {
[09:31:03.072]                           computeRestarts <- base::computeRestarts
[09:31:03.072]                           grepl <- base::grepl
[09:31:03.072]                           restarts <- computeRestarts(cond)
[09:31:03.072]                           for (restart in restarts) {
[09:31:03.072]                             name <- restart$name
[09:31:03.072]                             if (is.null(name)) 
[09:31:03.072]                               next
[09:31:03.072]                             if (!grepl(pattern, name)) 
[09:31:03.072]                               next
[09:31:03.072]                             invokeRestart(restart)
[09:31:03.072]                             muffled <- TRUE
[09:31:03.072]                             break
[09:31:03.072]                           }
[09:31:03.072]                         }
[09:31:03.072]                       }
[09:31:03.072]                       invisible(muffled)
[09:31:03.072]                     }
[09:31:03.072]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.072]                   }
[09:31:03.072]                 }
[09:31:03.072]                 else {
[09:31:03.072]                   if (TRUE) {
[09:31:03.072]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.072]                     {
[09:31:03.072]                       inherits <- base::inherits
[09:31:03.072]                       invokeRestart <- base::invokeRestart
[09:31:03.072]                       is.null <- base::is.null
[09:31:03.072]                       muffled <- FALSE
[09:31:03.072]                       if (inherits(cond, "message")) {
[09:31:03.072]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.072]                         if (muffled) 
[09:31:03.072]                           invokeRestart("muffleMessage")
[09:31:03.072]                       }
[09:31:03.072]                       else if (inherits(cond, "warning")) {
[09:31:03.072]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.072]                         if (muffled) 
[09:31:03.072]                           invokeRestart("muffleWarning")
[09:31:03.072]                       }
[09:31:03.072]                       else if (inherits(cond, "condition")) {
[09:31:03.072]                         if (!is.null(pattern)) {
[09:31:03.072]                           computeRestarts <- base::computeRestarts
[09:31:03.072]                           grepl <- base::grepl
[09:31:03.072]                           restarts <- computeRestarts(cond)
[09:31:03.072]                           for (restart in restarts) {
[09:31:03.072]                             name <- restart$name
[09:31:03.072]                             if (is.null(name)) 
[09:31:03.072]                               next
[09:31:03.072]                             if (!grepl(pattern, name)) 
[09:31:03.072]                               next
[09:31:03.072]                             invokeRestart(restart)
[09:31:03.072]                             muffled <- TRUE
[09:31:03.072]                             break
[09:31:03.072]                           }
[09:31:03.072]                         }
[09:31:03.072]                       }
[09:31:03.072]                       invisible(muffled)
[09:31:03.072]                     }
[09:31:03.072]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.072]                   }
[09:31:03.072]                 }
[09:31:03.072]             }
[09:31:03.072]         }))
[09:31:03.072]     }, error = function(ex) {
[09:31:03.072]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.072]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.072]                 ...future.rng), started = ...future.startTime, 
[09:31:03.072]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.072]             version = "1.8"), class = "FutureResult")
[09:31:03.072]     }, finally = {
[09:31:03.072]         if (!identical(...future.workdir, getwd())) 
[09:31:03.072]             setwd(...future.workdir)
[09:31:03.072]         {
[09:31:03.072]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.072]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.072]             }
[09:31:03.072]             base::options(...future.oldOptions)
[09:31:03.072]             if (.Platform$OS.type == "windows") {
[09:31:03.072]                 old_names <- names(...future.oldEnvVars)
[09:31:03.072]                 envs <- base::Sys.getenv()
[09:31:03.072]                 names <- names(envs)
[09:31:03.072]                 common <- intersect(names, old_names)
[09:31:03.072]                 added <- setdiff(names, old_names)
[09:31:03.072]                 removed <- setdiff(old_names, names)
[09:31:03.072]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.072]                   envs[common]]
[09:31:03.072]                 NAMES <- toupper(changed)
[09:31:03.072]                 args <- list()
[09:31:03.072]                 for (kk in seq_along(NAMES)) {
[09:31:03.072]                   name <- changed[[kk]]
[09:31:03.072]                   NAME <- NAMES[[kk]]
[09:31:03.072]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.072]                     next
[09:31:03.072]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.072]                 }
[09:31:03.072]                 NAMES <- toupper(added)
[09:31:03.072]                 for (kk in seq_along(NAMES)) {
[09:31:03.072]                   name <- added[[kk]]
[09:31:03.072]                   NAME <- NAMES[[kk]]
[09:31:03.072]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.072]                     next
[09:31:03.072]                   args[[name]] <- ""
[09:31:03.072]                 }
[09:31:03.072]                 NAMES <- toupper(removed)
[09:31:03.072]                 for (kk in seq_along(NAMES)) {
[09:31:03.072]                   name <- removed[[kk]]
[09:31:03.072]                   NAME <- NAMES[[kk]]
[09:31:03.072]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.072]                     next
[09:31:03.072]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.072]                 }
[09:31:03.072]                 if (length(args) > 0) 
[09:31:03.072]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.072]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.072]             }
[09:31:03.072]             else {
[09:31:03.072]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.072]             }
[09:31:03.072]             {
[09:31:03.072]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.072]                   0L) {
[09:31:03.072]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.072]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.072]                   base::options(opts)
[09:31:03.072]                 }
[09:31:03.072]                 {
[09:31:03.072]                   {
[09:31:03.072]                     NULL
[09:31:03.072]                     RNGkind("Mersenne-Twister")
[09:31:03.072]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.072]                       inherits = FALSE)
[09:31:03.072]                   }
[09:31:03.072]                   options(future.plan = NULL)
[09:31:03.072]                   if (is.na(NA_character_)) 
[09:31:03.072]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.072]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.072]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.072]                     .init = FALSE)
[09:31:03.072]                 }
[09:31:03.072]             }
[09:31:03.072]         }
[09:31:03.072]     })
[09:31:03.072]     if (TRUE) {
[09:31:03.072]         base::sink(type = "output", split = FALSE)
[09:31:03.072]         if (TRUE) {
[09:31:03.072]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.072]         }
[09:31:03.072]         else {
[09:31:03.072]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.072]         }
[09:31:03.072]         base::close(...future.stdout)
[09:31:03.072]         ...future.stdout <- NULL
[09:31:03.072]     }
[09:31:03.072]     ...future.result$conditions <- ...future.conditions
[09:31:03.072]     ...future.result$finished <- base::Sys.time()
[09:31:03.072]     ...future.result
[09:31:03.072] }
[09:31:03.074] plan(): Setting new future strategy stack:
[09:31:03.074] List of future strategies:
[09:31:03.074] 1. sequential:
[09:31:03.074]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.074]    - tweaked: FALSE
[09:31:03.074]    - call: NULL
[09:31:03.074] plan(): nbrOfWorkers() = 1
[09:31:03.075] plan(): Setting new future strategy stack:
[09:31:03.075] List of future strategies:
[09:31:03.075] 1. sequential:
[09:31:03.075]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.075]    - tweaked: FALSE
[09:31:03.075]    - call: future::plan("sequential")
[09:31:03.075] plan(): nbrOfWorkers() = 1
[09:31:03.075] SequentialFuture started (and completed)
[09:31:03.075] - Launch lazy future ... done
[09:31:03.076] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[09:31:03.079] getGlobalsAndPackages() ...
[09:31:03.079] Searching for globals...
[09:31:03.080] - globals found: [1] ‘{’
[09:31:03.080] Searching for globals ... DONE
[09:31:03.080] Resolving globals: FALSE
[09:31:03.081] 
[09:31:03.081] 
[09:31:03.081] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[09:31:03.082] getGlobalsAndPackages() ...
[09:31:03.082] Searching for globals...
[09:31:03.082] - globals found: [1] ‘{’
[09:31:03.082] Searching for globals ... DONE
[09:31:03.082] Resolving globals: FALSE
[09:31:03.083] 
[09:31:03.083] 
[09:31:03.083] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[09:31:03.086] run() for ‘Future’ ...
[09:31:03.086] - state: ‘created’
[09:31:03.086] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.086] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.086] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.086]   - Field: ‘label’
[09:31:03.086]   - Field: ‘local’
[09:31:03.087]   - Field: ‘owner’
[09:31:03.087]   - Field: ‘envir’
[09:31:03.087]   - Field: ‘packages’
[09:31:03.087]   - Field: ‘gc’
[09:31:03.087]   - Field: ‘conditions’
[09:31:03.087]   - Field: ‘expr’
[09:31:03.087]   - Field: ‘uuid’
[09:31:03.087]   - Field: ‘seed’
[09:31:03.087]   - Field: ‘version’
[09:31:03.087]   - Field: ‘result’
[09:31:03.087]   - Field: ‘asynchronous’
[09:31:03.088]   - Field: ‘calls’
[09:31:03.088]   - Field: ‘globals’
[09:31:03.088]   - Field: ‘stdout’
[09:31:03.088]   - Field: ‘earlySignal’
[09:31:03.088]   - Field: ‘lazy’
[09:31:03.088]   - Field: ‘state’
[09:31:03.088] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.088] - Launch lazy future ...
[09:31:03.088] Packages needed by the future expression (n = 0): <none>
[09:31:03.088] Packages needed by future strategies (n = 0): <none>
[09:31:03.089] {
[09:31:03.089]     {
[09:31:03.089]         {
[09:31:03.089]             ...future.startTime <- base::Sys.time()
[09:31:03.089]             {
[09:31:03.089]                 {
[09:31:03.089]                   {
[09:31:03.089]                     base::local({
[09:31:03.089]                       has_future <- base::requireNamespace("future", 
[09:31:03.089]                         quietly = TRUE)
[09:31:03.089]                       if (has_future) {
[09:31:03.089]                         ns <- base::getNamespace("future")
[09:31:03.089]                         version <- ns[[".package"]][["version"]]
[09:31:03.089]                         if (is.null(version)) 
[09:31:03.089]                           version <- utils::packageVersion("future")
[09:31:03.089]                       }
[09:31:03.089]                       else {
[09:31:03.089]                         version <- NULL
[09:31:03.089]                       }
[09:31:03.089]                       if (!has_future || version < "1.8.0") {
[09:31:03.089]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.089]                           "", base::R.version$version.string), 
[09:31:03.089]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.089]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.089]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.089]                             "release", "version")], collapse = " "), 
[09:31:03.089]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.089]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.089]                           info)
[09:31:03.089]                         info <- base::paste(info, collapse = "; ")
[09:31:03.089]                         if (!has_future) {
[09:31:03.089]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.089]                             info)
[09:31:03.089]                         }
[09:31:03.089]                         else {
[09:31:03.089]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.089]                             info, version)
[09:31:03.089]                         }
[09:31:03.089]                         base::stop(msg)
[09:31:03.089]                       }
[09:31:03.089]                     })
[09:31:03.089]                   }
[09:31:03.089]                   ...future.strategy.old <- future::plan("list")
[09:31:03.089]                   options(future.plan = NULL)
[09:31:03.089]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.089]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.089]                 }
[09:31:03.089]                 ...future.workdir <- getwd()
[09:31:03.089]             }
[09:31:03.089]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.089]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.089]         }
[09:31:03.089]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.089]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.089]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.089]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.089]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.089]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.089]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.089]             base::names(...future.oldOptions))
[09:31:03.089]     }
[09:31:03.089]     if (FALSE) {
[09:31:03.089]     }
[09:31:03.089]     else {
[09:31:03.089]         if (TRUE) {
[09:31:03.089]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.089]                 open = "w")
[09:31:03.089]         }
[09:31:03.089]         else {
[09:31:03.089]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.089]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.089]         }
[09:31:03.089]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.089]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.089]             base::sink(type = "output", split = FALSE)
[09:31:03.089]             base::close(...future.stdout)
[09:31:03.089]         }, add = TRUE)
[09:31:03.089]     }
[09:31:03.089]     ...future.frame <- base::sys.nframe()
[09:31:03.089]     ...future.conditions <- base::list()
[09:31:03.089]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.089]     if (FALSE) {
[09:31:03.089]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.089]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.089]     }
[09:31:03.089]     ...future.result <- base::tryCatch({
[09:31:03.089]         base::withCallingHandlers({
[09:31:03.089]             ...future.value <- base::withVisible(base::local({
[09:31:03.089]                 1
[09:31:03.089]             }))
[09:31:03.089]             future::FutureResult(value = ...future.value$value, 
[09:31:03.089]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.089]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.089]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.089]                     ...future.globalenv.names))
[09:31:03.089]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.089]         }, condition = base::local({
[09:31:03.089]             c <- base::c
[09:31:03.089]             inherits <- base::inherits
[09:31:03.089]             invokeRestart <- base::invokeRestart
[09:31:03.089]             length <- base::length
[09:31:03.089]             list <- base::list
[09:31:03.089]             seq.int <- base::seq.int
[09:31:03.089]             signalCondition <- base::signalCondition
[09:31:03.089]             sys.calls <- base::sys.calls
[09:31:03.089]             `[[` <- base::`[[`
[09:31:03.089]             `+` <- base::`+`
[09:31:03.089]             `<<-` <- base::`<<-`
[09:31:03.089]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.089]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.089]                   3L)]
[09:31:03.089]             }
[09:31:03.089]             function(cond) {
[09:31:03.089]                 is_error <- inherits(cond, "error")
[09:31:03.089]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.089]                   NULL)
[09:31:03.089]                 if (is_error) {
[09:31:03.089]                   sessionInformation <- function() {
[09:31:03.089]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.089]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.089]                       search = base::search(), system = base::Sys.info())
[09:31:03.089]                   }
[09:31:03.089]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.089]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.089]                     cond$call), session = sessionInformation(), 
[09:31:03.089]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.089]                   signalCondition(cond)
[09:31:03.089]                 }
[09:31:03.089]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.089]                 "immediateCondition"))) {
[09:31:03.089]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.089]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.089]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.089]                   if (TRUE && !signal) {
[09:31:03.089]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.089]                     {
[09:31:03.089]                       inherits <- base::inherits
[09:31:03.089]                       invokeRestart <- base::invokeRestart
[09:31:03.089]                       is.null <- base::is.null
[09:31:03.089]                       muffled <- FALSE
[09:31:03.089]                       if (inherits(cond, "message")) {
[09:31:03.089]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.089]                         if (muffled) 
[09:31:03.089]                           invokeRestart("muffleMessage")
[09:31:03.089]                       }
[09:31:03.089]                       else if (inherits(cond, "warning")) {
[09:31:03.089]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.089]                         if (muffled) 
[09:31:03.089]                           invokeRestart("muffleWarning")
[09:31:03.089]                       }
[09:31:03.089]                       else if (inherits(cond, "condition")) {
[09:31:03.089]                         if (!is.null(pattern)) {
[09:31:03.089]                           computeRestarts <- base::computeRestarts
[09:31:03.089]                           grepl <- base::grepl
[09:31:03.089]                           restarts <- computeRestarts(cond)
[09:31:03.089]                           for (restart in restarts) {
[09:31:03.089]                             name <- restart$name
[09:31:03.089]                             if (is.null(name)) 
[09:31:03.089]                               next
[09:31:03.089]                             if (!grepl(pattern, name)) 
[09:31:03.089]                               next
[09:31:03.089]                             invokeRestart(restart)
[09:31:03.089]                             muffled <- TRUE
[09:31:03.089]                             break
[09:31:03.089]                           }
[09:31:03.089]                         }
[09:31:03.089]                       }
[09:31:03.089]                       invisible(muffled)
[09:31:03.089]                     }
[09:31:03.089]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.089]                   }
[09:31:03.089]                 }
[09:31:03.089]                 else {
[09:31:03.089]                   if (TRUE) {
[09:31:03.089]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.089]                     {
[09:31:03.089]                       inherits <- base::inherits
[09:31:03.089]                       invokeRestart <- base::invokeRestart
[09:31:03.089]                       is.null <- base::is.null
[09:31:03.089]                       muffled <- FALSE
[09:31:03.089]                       if (inherits(cond, "message")) {
[09:31:03.089]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.089]                         if (muffled) 
[09:31:03.089]                           invokeRestart("muffleMessage")
[09:31:03.089]                       }
[09:31:03.089]                       else if (inherits(cond, "warning")) {
[09:31:03.089]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.089]                         if (muffled) 
[09:31:03.089]                           invokeRestart("muffleWarning")
[09:31:03.089]                       }
[09:31:03.089]                       else if (inherits(cond, "condition")) {
[09:31:03.089]                         if (!is.null(pattern)) {
[09:31:03.089]                           computeRestarts <- base::computeRestarts
[09:31:03.089]                           grepl <- base::grepl
[09:31:03.089]                           restarts <- computeRestarts(cond)
[09:31:03.089]                           for (restart in restarts) {
[09:31:03.089]                             name <- restart$name
[09:31:03.089]                             if (is.null(name)) 
[09:31:03.089]                               next
[09:31:03.089]                             if (!grepl(pattern, name)) 
[09:31:03.089]                               next
[09:31:03.089]                             invokeRestart(restart)
[09:31:03.089]                             muffled <- TRUE
[09:31:03.089]                             break
[09:31:03.089]                           }
[09:31:03.089]                         }
[09:31:03.089]                       }
[09:31:03.089]                       invisible(muffled)
[09:31:03.089]                     }
[09:31:03.089]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.089]                   }
[09:31:03.089]                 }
[09:31:03.089]             }
[09:31:03.089]         }))
[09:31:03.089]     }, error = function(ex) {
[09:31:03.089]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.089]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.089]                 ...future.rng), started = ...future.startTime, 
[09:31:03.089]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.089]             version = "1.8"), class = "FutureResult")
[09:31:03.089]     }, finally = {
[09:31:03.089]         if (!identical(...future.workdir, getwd())) 
[09:31:03.089]             setwd(...future.workdir)
[09:31:03.089]         {
[09:31:03.089]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.089]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.089]             }
[09:31:03.089]             base::options(...future.oldOptions)
[09:31:03.089]             if (.Platform$OS.type == "windows") {
[09:31:03.089]                 old_names <- names(...future.oldEnvVars)
[09:31:03.089]                 envs <- base::Sys.getenv()
[09:31:03.089]                 names <- names(envs)
[09:31:03.089]                 common <- intersect(names, old_names)
[09:31:03.089]                 added <- setdiff(names, old_names)
[09:31:03.089]                 removed <- setdiff(old_names, names)
[09:31:03.089]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.089]                   envs[common]]
[09:31:03.089]                 NAMES <- toupper(changed)
[09:31:03.089]                 args <- list()
[09:31:03.089]                 for (kk in seq_along(NAMES)) {
[09:31:03.089]                   name <- changed[[kk]]
[09:31:03.089]                   NAME <- NAMES[[kk]]
[09:31:03.089]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.089]                     next
[09:31:03.089]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.089]                 }
[09:31:03.089]                 NAMES <- toupper(added)
[09:31:03.089]                 for (kk in seq_along(NAMES)) {
[09:31:03.089]                   name <- added[[kk]]
[09:31:03.089]                   NAME <- NAMES[[kk]]
[09:31:03.089]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.089]                     next
[09:31:03.089]                   args[[name]] <- ""
[09:31:03.089]                 }
[09:31:03.089]                 NAMES <- toupper(removed)
[09:31:03.089]                 for (kk in seq_along(NAMES)) {
[09:31:03.089]                   name <- removed[[kk]]
[09:31:03.089]                   NAME <- NAMES[[kk]]
[09:31:03.089]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.089]                     next
[09:31:03.089]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.089]                 }
[09:31:03.089]                 if (length(args) > 0) 
[09:31:03.089]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.089]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.089]             }
[09:31:03.089]             else {
[09:31:03.089]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.089]             }
[09:31:03.089]             {
[09:31:03.089]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.089]                   0L) {
[09:31:03.089]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.089]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.089]                   base::options(opts)
[09:31:03.089]                 }
[09:31:03.089]                 {
[09:31:03.089]                   {
[09:31:03.089]                     NULL
[09:31:03.089]                     RNGkind("Mersenne-Twister")
[09:31:03.089]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.089]                       inherits = FALSE)
[09:31:03.089]                   }
[09:31:03.089]                   options(future.plan = NULL)
[09:31:03.089]                   if (is.na(NA_character_)) 
[09:31:03.089]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.089]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.089]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.089]                     .init = FALSE)
[09:31:03.089]                 }
[09:31:03.089]             }
[09:31:03.089]         }
[09:31:03.089]     })
[09:31:03.089]     if (TRUE) {
[09:31:03.089]         base::sink(type = "output", split = FALSE)
[09:31:03.089]         if (TRUE) {
[09:31:03.089]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.089]         }
[09:31:03.089]         else {
[09:31:03.089]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.089]         }
[09:31:03.089]         base::close(...future.stdout)
[09:31:03.089]         ...future.stdout <- NULL
[09:31:03.089]     }
[09:31:03.089]     ...future.result$conditions <- ...future.conditions
[09:31:03.089]     ...future.result$finished <- base::Sys.time()
[09:31:03.089]     ...future.result
[09:31:03.089] }
[09:31:03.090] plan(): Setting new future strategy stack:
[09:31:03.091] List of future strategies:
[09:31:03.091] 1. sequential:
[09:31:03.091]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.091]    - tweaked: FALSE
[09:31:03.091]    - call: NULL
[09:31:03.091] plan(): nbrOfWorkers() = 1
[09:31:03.092] plan(): Setting new future strategy stack:
[09:31:03.092] List of future strategies:
[09:31:03.092] 1. sequential:
[09:31:03.092]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.092]    - tweaked: FALSE
[09:31:03.092]    - call: future::plan("sequential")
[09:31:03.092] plan(): nbrOfWorkers() = 1
[09:31:03.092] SequentialFuture started (and completed)
[09:31:03.092] - Launch lazy future ... done
[09:31:03.092] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[09:31:03.093] run() for ‘Future’ ...
[09:31:03.093] - state: ‘created’
[09:31:03.093] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.093] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.093] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.093]   - Field: ‘label’
[09:31:03.093]   - Field: ‘local’
[09:31:03.094]   - Field: ‘owner’
[09:31:03.094]   - Field: ‘envir’
[09:31:03.094]   - Field: ‘packages’
[09:31:03.094]   - Field: ‘gc’
[09:31:03.094]   - Field: ‘conditions’
[09:31:03.094]   - Field: ‘expr’
[09:31:03.094]   - Field: ‘uuid’
[09:31:03.094]   - Field: ‘seed’
[09:31:03.094]   - Field: ‘version’
[09:31:03.094]   - Field: ‘result’
[09:31:03.094]   - Field: ‘asynchronous’
[09:31:03.095]   - Field: ‘calls’
[09:31:03.095]   - Field: ‘globals’
[09:31:03.095]   - Field: ‘stdout’
[09:31:03.095]   - Field: ‘earlySignal’
[09:31:03.095]   - Field: ‘lazy’
[09:31:03.095]   - Field: ‘state’
[09:31:03.095] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.095] - Launch lazy future ...
[09:31:03.095] Packages needed by the future expression (n = 0): <none>
[09:31:03.095] Packages needed by future strategies (n = 0): <none>
[09:31:03.096] {
[09:31:03.096]     {
[09:31:03.096]         {
[09:31:03.096]             ...future.startTime <- base::Sys.time()
[09:31:03.096]             {
[09:31:03.096]                 {
[09:31:03.096]                   {
[09:31:03.096]                     base::local({
[09:31:03.096]                       has_future <- base::requireNamespace("future", 
[09:31:03.096]                         quietly = TRUE)
[09:31:03.096]                       if (has_future) {
[09:31:03.096]                         ns <- base::getNamespace("future")
[09:31:03.096]                         version <- ns[[".package"]][["version"]]
[09:31:03.096]                         if (is.null(version)) 
[09:31:03.096]                           version <- utils::packageVersion("future")
[09:31:03.096]                       }
[09:31:03.096]                       else {
[09:31:03.096]                         version <- NULL
[09:31:03.096]                       }
[09:31:03.096]                       if (!has_future || version < "1.8.0") {
[09:31:03.096]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.096]                           "", base::R.version$version.string), 
[09:31:03.096]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.096]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.096]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.096]                             "release", "version")], collapse = " "), 
[09:31:03.096]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.096]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.096]                           info)
[09:31:03.096]                         info <- base::paste(info, collapse = "; ")
[09:31:03.096]                         if (!has_future) {
[09:31:03.096]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.096]                             info)
[09:31:03.096]                         }
[09:31:03.096]                         else {
[09:31:03.096]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.096]                             info, version)
[09:31:03.096]                         }
[09:31:03.096]                         base::stop(msg)
[09:31:03.096]                       }
[09:31:03.096]                     })
[09:31:03.096]                   }
[09:31:03.096]                   ...future.strategy.old <- future::plan("list")
[09:31:03.096]                   options(future.plan = NULL)
[09:31:03.096]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.096]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.096]                 }
[09:31:03.096]                 ...future.workdir <- getwd()
[09:31:03.096]             }
[09:31:03.096]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.096]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.096]         }
[09:31:03.096]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.096]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.096]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.096]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.096]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.096]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.096]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.096]             base::names(...future.oldOptions))
[09:31:03.096]     }
[09:31:03.096]     if (FALSE) {
[09:31:03.096]     }
[09:31:03.096]     else {
[09:31:03.096]         if (TRUE) {
[09:31:03.096]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.096]                 open = "w")
[09:31:03.096]         }
[09:31:03.096]         else {
[09:31:03.096]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.096]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.096]         }
[09:31:03.096]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.096]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.096]             base::sink(type = "output", split = FALSE)
[09:31:03.096]             base::close(...future.stdout)
[09:31:03.096]         }, add = TRUE)
[09:31:03.096]     }
[09:31:03.096]     ...future.frame <- base::sys.nframe()
[09:31:03.096]     ...future.conditions <- base::list()
[09:31:03.096]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.096]     if (FALSE) {
[09:31:03.096]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.096]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.096]     }
[09:31:03.096]     ...future.result <- base::tryCatch({
[09:31:03.096]         base::withCallingHandlers({
[09:31:03.096]             ...future.value <- base::withVisible(base::local({
[09:31:03.096]                 2
[09:31:03.096]             }))
[09:31:03.096]             future::FutureResult(value = ...future.value$value, 
[09:31:03.096]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.096]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.096]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.096]                     ...future.globalenv.names))
[09:31:03.096]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.096]         }, condition = base::local({
[09:31:03.096]             c <- base::c
[09:31:03.096]             inherits <- base::inherits
[09:31:03.096]             invokeRestart <- base::invokeRestart
[09:31:03.096]             length <- base::length
[09:31:03.096]             list <- base::list
[09:31:03.096]             seq.int <- base::seq.int
[09:31:03.096]             signalCondition <- base::signalCondition
[09:31:03.096]             sys.calls <- base::sys.calls
[09:31:03.096]             `[[` <- base::`[[`
[09:31:03.096]             `+` <- base::`+`
[09:31:03.096]             `<<-` <- base::`<<-`
[09:31:03.096]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.096]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.096]                   3L)]
[09:31:03.096]             }
[09:31:03.096]             function(cond) {
[09:31:03.096]                 is_error <- inherits(cond, "error")
[09:31:03.096]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.096]                   NULL)
[09:31:03.096]                 if (is_error) {
[09:31:03.096]                   sessionInformation <- function() {
[09:31:03.096]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.096]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.096]                       search = base::search(), system = base::Sys.info())
[09:31:03.096]                   }
[09:31:03.096]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.096]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.096]                     cond$call), session = sessionInformation(), 
[09:31:03.096]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.096]                   signalCondition(cond)
[09:31:03.096]                 }
[09:31:03.096]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.096]                 "immediateCondition"))) {
[09:31:03.096]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.096]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.096]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.096]                   if (TRUE && !signal) {
[09:31:03.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.096]                     {
[09:31:03.096]                       inherits <- base::inherits
[09:31:03.096]                       invokeRestart <- base::invokeRestart
[09:31:03.096]                       is.null <- base::is.null
[09:31:03.096]                       muffled <- FALSE
[09:31:03.096]                       if (inherits(cond, "message")) {
[09:31:03.096]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.096]                         if (muffled) 
[09:31:03.096]                           invokeRestart("muffleMessage")
[09:31:03.096]                       }
[09:31:03.096]                       else if (inherits(cond, "warning")) {
[09:31:03.096]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.096]                         if (muffled) 
[09:31:03.096]                           invokeRestart("muffleWarning")
[09:31:03.096]                       }
[09:31:03.096]                       else if (inherits(cond, "condition")) {
[09:31:03.096]                         if (!is.null(pattern)) {
[09:31:03.096]                           computeRestarts <- base::computeRestarts
[09:31:03.096]                           grepl <- base::grepl
[09:31:03.096]                           restarts <- computeRestarts(cond)
[09:31:03.096]                           for (restart in restarts) {
[09:31:03.096]                             name <- restart$name
[09:31:03.096]                             if (is.null(name)) 
[09:31:03.096]                               next
[09:31:03.096]                             if (!grepl(pattern, name)) 
[09:31:03.096]                               next
[09:31:03.096]                             invokeRestart(restart)
[09:31:03.096]                             muffled <- TRUE
[09:31:03.096]                             break
[09:31:03.096]                           }
[09:31:03.096]                         }
[09:31:03.096]                       }
[09:31:03.096]                       invisible(muffled)
[09:31:03.096]                     }
[09:31:03.096]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.096]                   }
[09:31:03.096]                 }
[09:31:03.096]                 else {
[09:31:03.096]                   if (TRUE) {
[09:31:03.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.096]                     {
[09:31:03.096]                       inherits <- base::inherits
[09:31:03.096]                       invokeRestart <- base::invokeRestart
[09:31:03.096]                       is.null <- base::is.null
[09:31:03.096]                       muffled <- FALSE
[09:31:03.096]                       if (inherits(cond, "message")) {
[09:31:03.096]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.096]                         if (muffled) 
[09:31:03.096]                           invokeRestart("muffleMessage")
[09:31:03.096]                       }
[09:31:03.096]                       else if (inherits(cond, "warning")) {
[09:31:03.096]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.096]                         if (muffled) 
[09:31:03.096]                           invokeRestart("muffleWarning")
[09:31:03.096]                       }
[09:31:03.096]                       else if (inherits(cond, "condition")) {
[09:31:03.096]                         if (!is.null(pattern)) {
[09:31:03.096]                           computeRestarts <- base::computeRestarts
[09:31:03.096]                           grepl <- base::grepl
[09:31:03.096]                           restarts <- computeRestarts(cond)
[09:31:03.096]                           for (restart in restarts) {
[09:31:03.096]                             name <- restart$name
[09:31:03.096]                             if (is.null(name)) 
[09:31:03.096]                               next
[09:31:03.096]                             if (!grepl(pattern, name)) 
[09:31:03.096]                               next
[09:31:03.096]                             invokeRestart(restart)
[09:31:03.096]                             muffled <- TRUE
[09:31:03.096]                             break
[09:31:03.096]                           }
[09:31:03.096]                         }
[09:31:03.096]                       }
[09:31:03.096]                       invisible(muffled)
[09:31:03.096]                     }
[09:31:03.096]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.096]                   }
[09:31:03.096]                 }
[09:31:03.096]             }
[09:31:03.096]         }))
[09:31:03.096]     }, error = function(ex) {
[09:31:03.096]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.096]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.096]                 ...future.rng), started = ...future.startTime, 
[09:31:03.096]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.096]             version = "1.8"), class = "FutureResult")
[09:31:03.096]     }, finally = {
[09:31:03.096]         if (!identical(...future.workdir, getwd())) 
[09:31:03.096]             setwd(...future.workdir)
[09:31:03.096]         {
[09:31:03.096]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.096]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.096]             }
[09:31:03.096]             base::options(...future.oldOptions)
[09:31:03.096]             if (.Platform$OS.type == "windows") {
[09:31:03.096]                 old_names <- names(...future.oldEnvVars)
[09:31:03.096]                 envs <- base::Sys.getenv()
[09:31:03.096]                 names <- names(envs)
[09:31:03.096]                 common <- intersect(names, old_names)
[09:31:03.096]                 added <- setdiff(names, old_names)
[09:31:03.096]                 removed <- setdiff(old_names, names)
[09:31:03.096]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.096]                   envs[common]]
[09:31:03.096]                 NAMES <- toupper(changed)
[09:31:03.096]                 args <- list()
[09:31:03.096]                 for (kk in seq_along(NAMES)) {
[09:31:03.096]                   name <- changed[[kk]]
[09:31:03.096]                   NAME <- NAMES[[kk]]
[09:31:03.096]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.096]                     next
[09:31:03.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.096]                 }
[09:31:03.096]                 NAMES <- toupper(added)
[09:31:03.096]                 for (kk in seq_along(NAMES)) {
[09:31:03.096]                   name <- added[[kk]]
[09:31:03.096]                   NAME <- NAMES[[kk]]
[09:31:03.096]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.096]                     next
[09:31:03.096]                   args[[name]] <- ""
[09:31:03.096]                 }
[09:31:03.096]                 NAMES <- toupper(removed)
[09:31:03.096]                 for (kk in seq_along(NAMES)) {
[09:31:03.096]                   name <- removed[[kk]]
[09:31:03.096]                   NAME <- NAMES[[kk]]
[09:31:03.096]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.096]                     next
[09:31:03.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.096]                 }
[09:31:03.096]                 if (length(args) > 0) 
[09:31:03.096]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.096]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.096]             }
[09:31:03.096]             else {
[09:31:03.096]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.096]             }
[09:31:03.096]             {
[09:31:03.096]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.096]                   0L) {
[09:31:03.096]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.096]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.096]                   base::options(opts)
[09:31:03.096]                 }
[09:31:03.096]                 {
[09:31:03.096]                   {
[09:31:03.096]                     NULL
[09:31:03.096]                     RNGkind("Mersenne-Twister")
[09:31:03.096]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.096]                       inherits = FALSE)
[09:31:03.096]                   }
[09:31:03.096]                   options(future.plan = NULL)
[09:31:03.096]                   if (is.na(NA_character_)) 
[09:31:03.096]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.096]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.096]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.096]                     .init = FALSE)
[09:31:03.096]                 }
[09:31:03.096]             }
[09:31:03.096]         }
[09:31:03.096]     })
[09:31:03.096]     if (TRUE) {
[09:31:03.096]         base::sink(type = "output", split = FALSE)
[09:31:03.096]         if (TRUE) {
[09:31:03.096]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.096]         }
[09:31:03.096]         else {
[09:31:03.096]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.096]         }
[09:31:03.096]         base::close(...future.stdout)
[09:31:03.096]         ...future.stdout <- NULL
[09:31:03.096]     }
[09:31:03.096]     ...future.result$conditions <- ...future.conditions
[09:31:03.096]     ...future.result$finished <- base::Sys.time()
[09:31:03.096]     ...future.result
[09:31:03.096] }
[09:31:03.097] plan(): Setting new future strategy stack:
[09:31:03.098] List of future strategies:
[09:31:03.098] 1. sequential:
[09:31:03.098]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.098]    - tweaked: FALSE
[09:31:03.098]    - call: NULL
[09:31:03.098] plan(): nbrOfWorkers() = 1
[09:31:03.099] plan(): Setting new future strategy stack:
[09:31:03.099] List of future strategies:
[09:31:03.099] 1. sequential:
[09:31:03.099]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.099]    - tweaked: FALSE
[09:31:03.099]    - call: future::plan("sequential")
[09:31:03.099] plan(): nbrOfWorkers() = 1
[09:31:03.099] SequentialFuture started (and completed)
[09:31:03.099] - Launch lazy future ... done
[09:31:03.099] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[09:31:03.105] getGlobalsAndPackages() ...
[09:31:03.105] Searching for globals...
[09:31:03.106] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[09:31:03.106] Searching for globals ... DONE
[09:31:03.107] Resolving globals: FALSE
[09:31:03.107] The total size of the 2 globals is 112 bytes (112 bytes)
[09:31:03.108] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[09:31:03.108] - globals: [2] ‘rr’, ‘cc’
[09:31:03.108] 
[09:31:03.108] getGlobalsAndPackages() ... DONE
[09:31:03.108] getGlobalsAndPackages() ...
[09:31:03.109] Searching for globals...
[09:31:03.109] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[09:31:03.109] Searching for globals ... DONE
[09:31:03.109] Resolving globals: FALSE
[09:31:03.110] The total size of the 2 globals is 112 bytes (112 bytes)
[09:31:03.110] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[09:31:03.110] - globals: [2] ‘rr’, ‘cc’
[09:31:03.110] 
[09:31:03.110] getGlobalsAndPackages() ... DONE
[09:31:03.111] getGlobalsAndPackages() ...
[09:31:03.111] Searching for globals...
[09:31:03.111] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[09:31:03.111] Searching for globals ... DONE
[09:31:03.112] Resolving globals: FALSE
[09:31:03.112] The total size of the 2 globals is 112 bytes (112 bytes)
[09:31:03.112] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[09:31:03.112] - globals: [2] ‘rr’, ‘cc’
[09:31:03.112] 
[09:31:03.113] getGlobalsAndPackages() ... DONE
[09:31:03.113] getGlobalsAndPackages() ...
[09:31:03.113] Searching for globals...
[09:31:03.115] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[09:31:03.115] Searching for globals ... DONE
[09:31:03.115] Resolving globals: FALSE
[09:31:03.115] The total size of the 2 globals is 112 bytes (112 bytes)
[09:31:03.116] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[09:31:03.116] - globals: [2] ‘rr’, ‘cc’
[09:31:03.116] 
[09:31:03.116] getGlobalsAndPackages() ... DONE
[09:31:03.116] getGlobalsAndPackages() ...
[09:31:03.117] Searching for globals...
[09:31:03.117] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[09:31:03.117] Searching for globals ... DONE
[09:31:03.117] Resolving globals: FALSE
[09:31:03.118] The total size of the 2 globals is 112 bytes (112 bytes)
[09:31:03.118] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[09:31:03.118] - globals: [2] ‘rr’, ‘cc’
[09:31:03.118] 
[09:31:03.118] getGlobalsAndPackages() ... DONE
[09:31:03.119] getGlobalsAndPackages() ...
[09:31:03.119] Searching for globals...
[09:31:03.119] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[09:31:03.119] Searching for globals ... DONE
[09:31:03.120] Resolving globals: FALSE
[09:31:03.120] The total size of the 2 globals is 112 bytes (112 bytes)
[09:31:03.120] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[09:31:03.120] - globals: [2] ‘rr’, ‘cc’
[09:31:03.120] 
[09:31:03.121] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[09:31:03.121] run() for ‘Future’ ...
[09:31:03.121] - state: ‘created’
[09:31:03.121] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.121] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.121] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.121]   - Field: ‘label’
[09:31:03.122]   - Field: ‘local’
[09:31:03.122]   - Field: ‘owner’
[09:31:03.122]   - Field: ‘envir’
[09:31:03.122]   - Field: ‘packages’
[09:31:03.122]   - Field: ‘gc’
[09:31:03.122]   - Field: ‘conditions’
[09:31:03.122]   - Field: ‘expr’
[09:31:03.122]   - Field: ‘uuid’
[09:31:03.122]   - Field: ‘seed’
[09:31:03.122]   - Field: ‘version’
[09:31:03.122]   - Field: ‘result’
[09:31:03.122]   - Field: ‘asynchronous’
[09:31:03.123]   - Field: ‘calls’
[09:31:03.123]   - Field: ‘globals’
[09:31:03.123]   - Field: ‘stdout’
[09:31:03.123]   - Field: ‘earlySignal’
[09:31:03.123]   - Field: ‘lazy’
[09:31:03.123]   - Field: ‘state’
[09:31:03.123] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.123] - Launch lazy future ...
[09:31:03.123] Packages needed by the future expression (n = 0): <none>
[09:31:03.123] Packages needed by future strategies (n = 0): <none>
[09:31:03.124] {
[09:31:03.124]     {
[09:31:03.124]         {
[09:31:03.124]             ...future.startTime <- base::Sys.time()
[09:31:03.124]             {
[09:31:03.124]                 {
[09:31:03.124]                   {
[09:31:03.124]                     base::local({
[09:31:03.124]                       has_future <- base::requireNamespace("future", 
[09:31:03.124]                         quietly = TRUE)
[09:31:03.124]                       if (has_future) {
[09:31:03.124]                         ns <- base::getNamespace("future")
[09:31:03.124]                         version <- ns[[".package"]][["version"]]
[09:31:03.124]                         if (is.null(version)) 
[09:31:03.124]                           version <- utils::packageVersion("future")
[09:31:03.124]                       }
[09:31:03.124]                       else {
[09:31:03.124]                         version <- NULL
[09:31:03.124]                       }
[09:31:03.124]                       if (!has_future || version < "1.8.0") {
[09:31:03.124]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.124]                           "", base::R.version$version.string), 
[09:31:03.124]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.124]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.124]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.124]                             "release", "version")], collapse = " "), 
[09:31:03.124]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.124]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.124]                           info)
[09:31:03.124]                         info <- base::paste(info, collapse = "; ")
[09:31:03.124]                         if (!has_future) {
[09:31:03.124]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.124]                             info)
[09:31:03.124]                         }
[09:31:03.124]                         else {
[09:31:03.124]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.124]                             info, version)
[09:31:03.124]                         }
[09:31:03.124]                         base::stop(msg)
[09:31:03.124]                       }
[09:31:03.124]                     })
[09:31:03.124]                   }
[09:31:03.124]                   ...future.strategy.old <- future::plan("list")
[09:31:03.124]                   options(future.plan = NULL)
[09:31:03.124]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.124]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.124]                 }
[09:31:03.124]                 ...future.workdir <- getwd()
[09:31:03.124]             }
[09:31:03.124]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.124]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.124]         }
[09:31:03.124]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.124]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.124]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.124]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.124]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.124]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.124]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.124]             base::names(...future.oldOptions))
[09:31:03.124]     }
[09:31:03.124]     if (FALSE) {
[09:31:03.124]     }
[09:31:03.124]     else {
[09:31:03.124]         if (TRUE) {
[09:31:03.124]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.124]                 open = "w")
[09:31:03.124]         }
[09:31:03.124]         else {
[09:31:03.124]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.124]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.124]         }
[09:31:03.124]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.124]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.124]             base::sink(type = "output", split = FALSE)
[09:31:03.124]             base::close(...future.stdout)
[09:31:03.124]         }, add = TRUE)
[09:31:03.124]     }
[09:31:03.124]     ...future.frame <- base::sys.nframe()
[09:31:03.124]     ...future.conditions <- base::list()
[09:31:03.124]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.124]     if (FALSE) {
[09:31:03.124]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.124]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.124]     }
[09:31:03.124]     ...future.result <- base::tryCatch({
[09:31:03.124]         base::withCallingHandlers({
[09:31:03.124]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[09:31:03.124]                 rr, cc)))
[09:31:03.124]             future::FutureResult(value = ...future.value$value, 
[09:31:03.124]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.124]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.124]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.124]                     ...future.globalenv.names))
[09:31:03.124]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.124]         }, condition = base::local({
[09:31:03.124]             c <- base::c
[09:31:03.124]             inherits <- base::inherits
[09:31:03.124]             invokeRestart <- base::invokeRestart
[09:31:03.124]             length <- base::length
[09:31:03.124]             list <- base::list
[09:31:03.124]             seq.int <- base::seq.int
[09:31:03.124]             signalCondition <- base::signalCondition
[09:31:03.124]             sys.calls <- base::sys.calls
[09:31:03.124]             `[[` <- base::`[[`
[09:31:03.124]             `+` <- base::`+`
[09:31:03.124]             `<<-` <- base::`<<-`
[09:31:03.124]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.124]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.124]                   3L)]
[09:31:03.124]             }
[09:31:03.124]             function(cond) {
[09:31:03.124]                 is_error <- inherits(cond, "error")
[09:31:03.124]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.124]                   NULL)
[09:31:03.124]                 if (is_error) {
[09:31:03.124]                   sessionInformation <- function() {
[09:31:03.124]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.124]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.124]                       search = base::search(), system = base::Sys.info())
[09:31:03.124]                   }
[09:31:03.124]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.124]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.124]                     cond$call), session = sessionInformation(), 
[09:31:03.124]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.124]                   signalCondition(cond)
[09:31:03.124]                 }
[09:31:03.124]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.124]                 "immediateCondition"))) {
[09:31:03.124]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.124]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.124]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.124]                   if (TRUE && !signal) {
[09:31:03.124]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.124]                     {
[09:31:03.124]                       inherits <- base::inherits
[09:31:03.124]                       invokeRestart <- base::invokeRestart
[09:31:03.124]                       is.null <- base::is.null
[09:31:03.124]                       muffled <- FALSE
[09:31:03.124]                       if (inherits(cond, "message")) {
[09:31:03.124]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.124]                         if (muffled) 
[09:31:03.124]                           invokeRestart("muffleMessage")
[09:31:03.124]                       }
[09:31:03.124]                       else if (inherits(cond, "warning")) {
[09:31:03.124]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.124]                         if (muffled) 
[09:31:03.124]                           invokeRestart("muffleWarning")
[09:31:03.124]                       }
[09:31:03.124]                       else if (inherits(cond, "condition")) {
[09:31:03.124]                         if (!is.null(pattern)) {
[09:31:03.124]                           computeRestarts <- base::computeRestarts
[09:31:03.124]                           grepl <- base::grepl
[09:31:03.124]                           restarts <- computeRestarts(cond)
[09:31:03.124]                           for (restart in restarts) {
[09:31:03.124]                             name <- restart$name
[09:31:03.124]                             if (is.null(name)) 
[09:31:03.124]                               next
[09:31:03.124]                             if (!grepl(pattern, name)) 
[09:31:03.124]                               next
[09:31:03.124]                             invokeRestart(restart)
[09:31:03.124]                             muffled <- TRUE
[09:31:03.124]                             break
[09:31:03.124]                           }
[09:31:03.124]                         }
[09:31:03.124]                       }
[09:31:03.124]                       invisible(muffled)
[09:31:03.124]                     }
[09:31:03.124]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.124]                   }
[09:31:03.124]                 }
[09:31:03.124]                 else {
[09:31:03.124]                   if (TRUE) {
[09:31:03.124]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.124]                     {
[09:31:03.124]                       inherits <- base::inherits
[09:31:03.124]                       invokeRestart <- base::invokeRestart
[09:31:03.124]                       is.null <- base::is.null
[09:31:03.124]                       muffled <- FALSE
[09:31:03.124]                       if (inherits(cond, "message")) {
[09:31:03.124]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.124]                         if (muffled) 
[09:31:03.124]                           invokeRestart("muffleMessage")
[09:31:03.124]                       }
[09:31:03.124]                       else if (inherits(cond, "warning")) {
[09:31:03.124]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.124]                         if (muffled) 
[09:31:03.124]                           invokeRestart("muffleWarning")
[09:31:03.124]                       }
[09:31:03.124]                       else if (inherits(cond, "condition")) {
[09:31:03.124]                         if (!is.null(pattern)) {
[09:31:03.124]                           computeRestarts <- base::computeRestarts
[09:31:03.124]                           grepl <- base::grepl
[09:31:03.124]                           restarts <- computeRestarts(cond)
[09:31:03.124]                           for (restart in restarts) {
[09:31:03.124]                             name <- restart$name
[09:31:03.124]                             if (is.null(name)) 
[09:31:03.124]                               next
[09:31:03.124]                             if (!grepl(pattern, name)) 
[09:31:03.124]                               next
[09:31:03.124]                             invokeRestart(restart)
[09:31:03.124]                             muffled <- TRUE
[09:31:03.124]                             break
[09:31:03.124]                           }
[09:31:03.124]                         }
[09:31:03.124]                       }
[09:31:03.124]                       invisible(muffled)
[09:31:03.124]                     }
[09:31:03.124]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.124]                   }
[09:31:03.124]                 }
[09:31:03.124]             }
[09:31:03.124]         }))
[09:31:03.124]     }, error = function(ex) {
[09:31:03.124]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.124]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.124]                 ...future.rng), started = ...future.startTime, 
[09:31:03.124]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.124]             version = "1.8"), class = "FutureResult")
[09:31:03.124]     }, finally = {
[09:31:03.124]         if (!identical(...future.workdir, getwd())) 
[09:31:03.124]             setwd(...future.workdir)
[09:31:03.124]         {
[09:31:03.124]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.124]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.124]             }
[09:31:03.124]             base::options(...future.oldOptions)
[09:31:03.124]             if (.Platform$OS.type == "windows") {
[09:31:03.124]                 old_names <- names(...future.oldEnvVars)
[09:31:03.124]                 envs <- base::Sys.getenv()
[09:31:03.124]                 names <- names(envs)
[09:31:03.124]                 common <- intersect(names, old_names)
[09:31:03.124]                 added <- setdiff(names, old_names)
[09:31:03.124]                 removed <- setdiff(old_names, names)
[09:31:03.124]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.124]                   envs[common]]
[09:31:03.124]                 NAMES <- toupper(changed)
[09:31:03.124]                 args <- list()
[09:31:03.124]                 for (kk in seq_along(NAMES)) {
[09:31:03.124]                   name <- changed[[kk]]
[09:31:03.124]                   NAME <- NAMES[[kk]]
[09:31:03.124]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.124]                     next
[09:31:03.124]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.124]                 }
[09:31:03.124]                 NAMES <- toupper(added)
[09:31:03.124]                 for (kk in seq_along(NAMES)) {
[09:31:03.124]                   name <- added[[kk]]
[09:31:03.124]                   NAME <- NAMES[[kk]]
[09:31:03.124]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.124]                     next
[09:31:03.124]                   args[[name]] <- ""
[09:31:03.124]                 }
[09:31:03.124]                 NAMES <- toupper(removed)
[09:31:03.124]                 for (kk in seq_along(NAMES)) {
[09:31:03.124]                   name <- removed[[kk]]
[09:31:03.124]                   NAME <- NAMES[[kk]]
[09:31:03.124]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.124]                     next
[09:31:03.124]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.124]                 }
[09:31:03.124]                 if (length(args) > 0) 
[09:31:03.124]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.124]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.124]             }
[09:31:03.124]             else {
[09:31:03.124]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.124]             }
[09:31:03.124]             {
[09:31:03.124]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.124]                   0L) {
[09:31:03.124]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.124]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.124]                   base::options(opts)
[09:31:03.124]                 }
[09:31:03.124]                 {
[09:31:03.124]                   {
[09:31:03.124]                     NULL
[09:31:03.124]                     RNGkind("Mersenne-Twister")
[09:31:03.124]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.124]                       inherits = FALSE)
[09:31:03.124]                   }
[09:31:03.124]                   options(future.plan = NULL)
[09:31:03.124]                   if (is.na(NA_character_)) 
[09:31:03.124]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.124]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.124]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.124]                     .init = FALSE)
[09:31:03.124]                 }
[09:31:03.124]             }
[09:31:03.124]         }
[09:31:03.124]     })
[09:31:03.124]     if (TRUE) {
[09:31:03.124]         base::sink(type = "output", split = FALSE)
[09:31:03.124]         if (TRUE) {
[09:31:03.124]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.124]         }
[09:31:03.124]         else {
[09:31:03.124]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.124]         }
[09:31:03.124]         base::close(...future.stdout)
[09:31:03.124]         ...future.stdout <- NULL
[09:31:03.124]     }
[09:31:03.124]     ...future.result$conditions <- ...future.conditions
[09:31:03.124]     ...future.result$finished <- base::Sys.time()
[09:31:03.124]     ...future.result
[09:31:03.124] }
[09:31:03.125] assign_globals() ...
[09:31:03.125] List of 2
[09:31:03.125]  $ rr: int 1
[09:31:03.125]  $ cc: int 1
[09:31:03.125]  - attr(*, "where")=List of 2
[09:31:03.125]   ..$ rr:<environment: R_EmptyEnv> 
[09:31:03.125]   ..$ cc:<environment: R_EmptyEnv> 
[09:31:03.125]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.125]  - attr(*, "resolved")= logi FALSE
[09:31:03.125]  - attr(*, "total_size")= num 112
[09:31:03.125]  - attr(*, "already-done")= logi TRUE
[09:31:03.128] - copied ‘rr’ to environment
[09:31:03.128] - copied ‘cc’ to environment
[09:31:03.128] assign_globals() ... done
[09:31:03.129] plan(): Setting new future strategy stack:
[09:31:03.129] List of future strategies:
[09:31:03.129] 1. sequential:
[09:31:03.129]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.129]    - tweaked: FALSE
[09:31:03.129]    - call: NULL
[09:31:03.129] plan(): nbrOfWorkers() = 1
[09:31:03.130] plan(): Setting new future strategy stack:
[09:31:03.130] List of future strategies:
[09:31:03.130] 1. sequential:
[09:31:03.130]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.130]    - tweaked: FALSE
[09:31:03.130]    - call: future::plan("sequential")
[09:31:03.130] plan(): nbrOfWorkers() = 1
[09:31:03.130] SequentialFuture started (and completed)
[09:31:03.131] - Launch lazy future ... done
[09:31:03.131] run() for ‘SequentialFuture’ ... done
[09:31:03.131] run() for ‘Future’ ...
[09:31:03.131] - state: ‘created’
[09:31:03.131] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.131] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.131] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.131]   - Field: ‘label’
[09:31:03.132]   - Field: ‘local’
[09:31:03.132]   - Field: ‘owner’
[09:31:03.132]   - Field: ‘envir’
[09:31:03.132]   - Field: ‘packages’
[09:31:03.132]   - Field: ‘gc’
[09:31:03.132]   - Field: ‘conditions’
[09:31:03.132]   - Field: ‘expr’
[09:31:03.132]   - Field: ‘uuid’
[09:31:03.132]   - Field: ‘seed’
[09:31:03.132]   - Field: ‘version’
[09:31:03.132]   - Field: ‘result’
[09:31:03.133]   - Field: ‘asynchronous’
[09:31:03.133]   - Field: ‘calls’
[09:31:03.133]   - Field: ‘globals’
[09:31:03.133]   - Field: ‘stdout’
[09:31:03.133]   - Field: ‘earlySignal’
[09:31:03.133]   - Field: ‘lazy’
[09:31:03.133]   - Field: ‘state’
[09:31:03.133] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.133] - Launch lazy future ...
[09:31:03.133] Packages needed by the future expression (n = 0): <none>
[09:31:03.133] Packages needed by future strategies (n = 0): <none>
[09:31:03.134] {
[09:31:03.134]     {
[09:31:03.134]         {
[09:31:03.134]             ...future.startTime <- base::Sys.time()
[09:31:03.134]             {
[09:31:03.134]                 {
[09:31:03.134]                   {
[09:31:03.134]                     base::local({
[09:31:03.134]                       has_future <- base::requireNamespace("future", 
[09:31:03.134]                         quietly = TRUE)
[09:31:03.134]                       if (has_future) {
[09:31:03.134]                         ns <- base::getNamespace("future")
[09:31:03.134]                         version <- ns[[".package"]][["version"]]
[09:31:03.134]                         if (is.null(version)) 
[09:31:03.134]                           version <- utils::packageVersion("future")
[09:31:03.134]                       }
[09:31:03.134]                       else {
[09:31:03.134]                         version <- NULL
[09:31:03.134]                       }
[09:31:03.134]                       if (!has_future || version < "1.8.0") {
[09:31:03.134]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.134]                           "", base::R.version$version.string), 
[09:31:03.134]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.134]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.134]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.134]                             "release", "version")], collapse = " "), 
[09:31:03.134]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.134]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.134]                           info)
[09:31:03.134]                         info <- base::paste(info, collapse = "; ")
[09:31:03.134]                         if (!has_future) {
[09:31:03.134]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.134]                             info)
[09:31:03.134]                         }
[09:31:03.134]                         else {
[09:31:03.134]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.134]                             info, version)
[09:31:03.134]                         }
[09:31:03.134]                         base::stop(msg)
[09:31:03.134]                       }
[09:31:03.134]                     })
[09:31:03.134]                   }
[09:31:03.134]                   ...future.strategy.old <- future::plan("list")
[09:31:03.134]                   options(future.plan = NULL)
[09:31:03.134]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.134]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.134]                 }
[09:31:03.134]                 ...future.workdir <- getwd()
[09:31:03.134]             }
[09:31:03.134]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.134]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.134]         }
[09:31:03.134]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.134]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.134]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.134]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.134]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.134]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.134]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.134]             base::names(...future.oldOptions))
[09:31:03.134]     }
[09:31:03.134]     if (FALSE) {
[09:31:03.134]     }
[09:31:03.134]     else {
[09:31:03.134]         if (TRUE) {
[09:31:03.134]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.134]                 open = "w")
[09:31:03.134]         }
[09:31:03.134]         else {
[09:31:03.134]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.134]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.134]         }
[09:31:03.134]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.134]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.134]             base::sink(type = "output", split = FALSE)
[09:31:03.134]             base::close(...future.stdout)
[09:31:03.134]         }, add = TRUE)
[09:31:03.134]     }
[09:31:03.134]     ...future.frame <- base::sys.nframe()
[09:31:03.134]     ...future.conditions <- base::list()
[09:31:03.134]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.134]     if (FALSE) {
[09:31:03.134]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.134]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.134]     }
[09:31:03.134]     ...future.result <- base::tryCatch({
[09:31:03.134]         base::withCallingHandlers({
[09:31:03.134]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[09:31:03.134]                 rr, cc)))
[09:31:03.134]             future::FutureResult(value = ...future.value$value, 
[09:31:03.134]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.134]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.134]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.134]                     ...future.globalenv.names))
[09:31:03.134]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.134]         }, condition = base::local({
[09:31:03.134]             c <- base::c
[09:31:03.134]             inherits <- base::inherits
[09:31:03.134]             invokeRestart <- base::invokeRestart
[09:31:03.134]             length <- base::length
[09:31:03.134]             list <- base::list
[09:31:03.134]             seq.int <- base::seq.int
[09:31:03.134]             signalCondition <- base::signalCondition
[09:31:03.134]             sys.calls <- base::sys.calls
[09:31:03.134]             `[[` <- base::`[[`
[09:31:03.134]             `+` <- base::`+`
[09:31:03.134]             `<<-` <- base::`<<-`
[09:31:03.134]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.134]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.134]                   3L)]
[09:31:03.134]             }
[09:31:03.134]             function(cond) {
[09:31:03.134]                 is_error <- inherits(cond, "error")
[09:31:03.134]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.134]                   NULL)
[09:31:03.134]                 if (is_error) {
[09:31:03.134]                   sessionInformation <- function() {
[09:31:03.134]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.134]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.134]                       search = base::search(), system = base::Sys.info())
[09:31:03.134]                   }
[09:31:03.134]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.134]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.134]                     cond$call), session = sessionInformation(), 
[09:31:03.134]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.134]                   signalCondition(cond)
[09:31:03.134]                 }
[09:31:03.134]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.134]                 "immediateCondition"))) {
[09:31:03.134]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.134]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.134]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.134]                   if (TRUE && !signal) {
[09:31:03.134]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.134]                     {
[09:31:03.134]                       inherits <- base::inherits
[09:31:03.134]                       invokeRestart <- base::invokeRestart
[09:31:03.134]                       is.null <- base::is.null
[09:31:03.134]                       muffled <- FALSE
[09:31:03.134]                       if (inherits(cond, "message")) {
[09:31:03.134]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.134]                         if (muffled) 
[09:31:03.134]                           invokeRestart("muffleMessage")
[09:31:03.134]                       }
[09:31:03.134]                       else if (inherits(cond, "warning")) {
[09:31:03.134]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.134]                         if (muffled) 
[09:31:03.134]                           invokeRestart("muffleWarning")
[09:31:03.134]                       }
[09:31:03.134]                       else if (inherits(cond, "condition")) {
[09:31:03.134]                         if (!is.null(pattern)) {
[09:31:03.134]                           computeRestarts <- base::computeRestarts
[09:31:03.134]                           grepl <- base::grepl
[09:31:03.134]                           restarts <- computeRestarts(cond)
[09:31:03.134]                           for (restart in restarts) {
[09:31:03.134]                             name <- restart$name
[09:31:03.134]                             if (is.null(name)) 
[09:31:03.134]                               next
[09:31:03.134]                             if (!grepl(pattern, name)) 
[09:31:03.134]                               next
[09:31:03.134]                             invokeRestart(restart)
[09:31:03.134]                             muffled <- TRUE
[09:31:03.134]                             break
[09:31:03.134]                           }
[09:31:03.134]                         }
[09:31:03.134]                       }
[09:31:03.134]                       invisible(muffled)
[09:31:03.134]                     }
[09:31:03.134]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.134]                   }
[09:31:03.134]                 }
[09:31:03.134]                 else {
[09:31:03.134]                   if (TRUE) {
[09:31:03.134]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.134]                     {
[09:31:03.134]                       inherits <- base::inherits
[09:31:03.134]                       invokeRestart <- base::invokeRestart
[09:31:03.134]                       is.null <- base::is.null
[09:31:03.134]                       muffled <- FALSE
[09:31:03.134]                       if (inherits(cond, "message")) {
[09:31:03.134]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.134]                         if (muffled) 
[09:31:03.134]                           invokeRestart("muffleMessage")
[09:31:03.134]                       }
[09:31:03.134]                       else if (inherits(cond, "warning")) {
[09:31:03.134]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.134]                         if (muffled) 
[09:31:03.134]                           invokeRestart("muffleWarning")
[09:31:03.134]                       }
[09:31:03.134]                       else if (inherits(cond, "condition")) {
[09:31:03.134]                         if (!is.null(pattern)) {
[09:31:03.134]                           computeRestarts <- base::computeRestarts
[09:31:03.134]                           grepl <- base::grepl
[09:31:03.134]                           restarts <- computeRestarts(cond)
[09:31:03.134]                           for (restart in restarts) {
[09:31:03.134]                             name <- restart$name
[09:31:03.134]                             if (is.null(name)) 
[09:31:03.134]                               next
[09:31:03.134]                             if (!grepl(pattern, name)) 
[09:31:03.134]                               next
[09:31:03.134]                             invokeRestart(restart)
[09:31:03.134]                             muffled <- TRUE
[09:31:03.134]                             break
[09:31:03.134]                           }
[09:31:03.134]                         }
[09:31:03.134]                       }
[09:31:03.134]                       invisible(muffled)
[09:31:03.134]                     }
[09:31:03.134]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.134]                   }
[09:31:03.134]                 }
[09:31:03.134]             }
[09:31:03.134]         }))
[09:31:03.134]     }, error = function(ex) {
[09:31:03.134]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.134]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.134]                 ...future.rng), started = ...future.startTime, 
[09:31:03.134]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.134]             version = "1.8"), class = "FutureResult")
[09:31:03.134]     }, finally = {
[09:31:03.134]         if (!identical(...future.workdir, getwd())) 
[09:31:03.134]             setwd(...future.workdir)
[09:31:03.134]         {
[09:31:03.134]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.134]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.134]             }
[09:31:03.134]             base::options(...future.oldOptions)
[09:31:03.134]             if (.Platform$OS.type == "windows") {
[09:31:03.134]                 old_names <- names(...future.oldEnvVars)
[09:31:03.134]                 envs <- base::Sys.getenv()
[09:31:03.134]                 names <- names(envs)
[09:31:03.134]                 common <- intersect(names, old_names)
[09:31:03.134]                 added <- setdiff(names, old_names)
[09:31:03.134]                 removed <- setdiff(old_names, names)
[09:31:03.134]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.134]                   envs[common]]
[09:31:03.134]                 NAMES <- toupper(changed)
[09:31:03.134]                 args <- list()
[09:31:03.134]                 for (kk in seq_along(NAMES)) {
[09:31:03.134]                   name <- changed[[kk]]
[09:31:03.134]                   NAME <- NAMES[[kk]]
[09:31:03.134]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.134]                     next
[09:31:03.134]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.134]                 }
[09:31:03.134]                 NAMES <- toupper(added)
[09:31:03.134]                 for (kk in seq_along(NAMES)) {
[09:31:03.134]                   name <- added[[kk]]
[09:31:03.134]                   NAME <- NAMES[[kk]]
[09:31:03.134]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.134]                     next
[09:31:03.134]                   args[[name]] <- ""
[09:31:03.134]                 }
[09:31:03.134]                 NAMES <- toupper(removed)
[09:31:03.134]                 for (kk in seq_along(NAMES)) {
[09:31:03.134]                   name <- removed[[kk]]
[09:31:03.134]                   NAME <- NAMES[[kk]]
[09:31:03.134]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.134]                     next
[09:31:03.134]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.134]                 }
[09:31:03.134]                 if (length(args) > 0) 
[09:31:03.134]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.134]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.134]             }
[09:31:03.134]             else {
[09:31:03.134]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.134]             }
[09:31:03.134]             {
[09:31:03.134]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.134]                   0L) {
[09:31:03.134]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.134]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.134]                   base::options(opts)
[09:31:03.134]                 }
[09:31:03.134]                 {
[09:31:03.134]                   {
[09:31:03.134]                     NULL
[09:31:03.134]                     RNGkind("Mersenne-Twister")
[09:31:03.134]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.134]                       inherits = FALSE)
[09:31:03.134]                   }
[09:31:03.134]                   options(future.plan = NULL)
[09:31:03.134]                   if (is.na(NA_character_)) 
[09:31:03.134]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.134]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.134]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.134]                     .init = FALSE)
[09:31:03.134]                 }
[09:31:03.134]             }
[09:31:03.134]         }
[09:31:03.134]     })
[09:31:03.134]     if (TRUE) {
[09:31:03.134]         base::sink(type = "output", split = FALSE)
[09:31:03.134]         if (TRUE) {
[09:31:03.134]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.134]         }
[09:31:03.134]         else {
[09:31:03.134]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.134]         }
[09:31:03.134]         base::close(...future.stdout)
[09:31:03.134]         ...future.stdout <- NULL
[09:31:03.134]     }
[09:31:03.134]     ...future.result$conditions <- ...future.conditions
[09:31:03.134]     ...future.result$finished <- base::Sys.time()
[09:31:03.134]     ...future.result
[09:31:03.134] }
[09:31:03.135] assign_globals() ...
[09:31:03.135] List of 2
[09:31:03.135]  $ rr: int 2
[09:31:03.135]  $ cc: int 1
[09:31:03.135]  - attr(*, "where")=List of 2
[09:31:03.135]   ..$ rr:<environment: R_EmptyEnv> 
[09:31:03.135]   ..$ cc:<environment: R_EmptyEnv> 
[09:31:03.135]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.135]  - attr(*, "resolved")= logi FALSE
[09:31:03.135]  - attr(*, "total_size")= num 112
[09:31:03.135]  - attr(*, "already-done")= logi TRUE
[09:31:03.138] - copied ‘rr’ to environment
[09:31:03.138] - copied ‘cc’ to environment
[09:31:03.138] assign_globals() ... done
[09:31:03.139] plan(): Setting new future strategy stack:
[09:31:03.139] List of future strategies:
[09:31:03.139] 1. sequential:
[09:31:03.139]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.139]    - tweaked: FALSE
[09:31:03.139]    - call: NULL
[09:31:03.139] plan(): nbrOfWorkers() = 1
[09:31:03.140] plan(): Setting new future strategy stack:
[09:31:03.140] List of future strategies:
[09:31:03.140] 1. sequential:
[09:31:03.140]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.140]    - tweaked: FALSE
[09:31:03.140]    - call: future::plan("sequential")
[09:31:03.140] plan(): nbrOfWorkers() = 1
[09:31:03.140] SequentialFuture started (and completed)
[09:31:03.140] - Launch lazy future ... done
[09:31:03.141] run() for ‘SequentialFuture’ ... done
[09:31:03.141] run() for ‘Future’ ...
[09:31:03.141] - state: ‘created’
[09:31:03.141] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.141] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.141] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.141]   - Field: ‘label’
[09:31:03.141]   - Field: ‘local’
[09:31:03.142]   - Field: ‘owner’
[09:31:03.142]   - Field: ‘envir’
[09:31:03.143]   - Field: ‘packages’
[09:31:03.143]   - Field: ‘gc’
[09:31:03.143]   - Field: ‘conditions’
[09:31:03.143]   - Field: ‘expr’
[09:31:03.143]   - Field: ‘uuid’
[09:31:03.143]   - Field: ‘seed’
[09:31:03.143]   - Field: ‘version’
[09:31:03.143]   - Field: ‘result’
[09:31:03.143]   - Field: ‘asynchronous’
[09:31:03.143]   - Field: ‘calls’
[09:31:03.144]   - Field: ‘globals’
[09:31:03.144]   - Field: ‘stdout’
[09:31:03.144]   - Field: ‘earlySignal’
[09:31:03.144]   - Field: ‘lazy’
[09:31:03.144]   - Field: ‘state’
[09:31:03.144] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.144] - Launch lazy future ...
[09:31:03.144] Packages needed by the future expression (n = 0): <none>
[09:31:03.144] Packages needed by future strategies (n = 0): <none>
[09:31:03.145] {
[09:31:03.145]     {
[09:31:03.145]         {
[09:31:03.145]             ...future.startTime <- base::Sys.time()
[09:31:03.145]             {
[09:31:03.145]                 {
[09:31:03.145]                   {
[09:31:03.145]                     base::local({
[09:31:03.145]                       has_future <- base::requireNamespace("future", 
[09:31:03.145]                         quietly = TRUE)
[09:31:03.145]                       if (has_future) {
[09:31:03.145]                         ns <- base::getNamespace("future")
[09:31:03.145]                         version <- ns[[".package"]][["version"]]
[09:31:03.145]                         if (is.null(version)) 
[09:31:03.145]                           version <- utils::packageVersion("future")
[09:31:03.145]                       }
[09:31:03.145]                       else {
[09:31:03.145]                         version <- NULL
[09:31:03.145]                       }
[09:31:03.145]                       if (!has_future || version < "1.8.0") {
[09:31:03.145]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.145]                           "", base::R.version$version.string), 
[09:31:03.145]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.145]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.145]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.145]                             "release", "version")], collapse = " "), 
[09:31:03.145]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.145]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.145]                           info)
[09:31:03.145]                         info <- base::paste(info, collapse = "; ")
[09:31:03.145]                         if (!has_future) {
[09:31:03.145]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.145]                             info)
[09:31:03.145]                         }
[09:31:03.145]                         else {
[09:31:03.145]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.145]                             info, version)
[09:31:03.145]                         }
[09:31:03.145]                         base::stop(msg)
[09:31:03.145]                       }
[09:31:03.145]                     })
[09:31:03.145]                   }
[09:31:03.145]                   ...future.strategy.old <- future::plan("list")
[09:31:03.145]                   options(future.plan = NULL)
[09:31:03.145]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.145]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.145]                 }
[09:31:03.145]                 ...future.workdir <- getwd()
[09:31:03.145]             }
[09:31:03.145]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.145]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.145]         }
[09:31:03.145]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.145]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.145]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.145]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.145]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.145]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.145]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.145]             base::names(...future.oldOptions))
[09:31:03.145]     }
[09:31:03.145]     if (FALSE) {
[09:31:03.145]     }
[09:31:03.145]     else {
[09:31:03.145]         if (TRUE) {
[09:31:03.145]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.145]                 open = "w")
[09:31:03.145]         }
[09:31:03.145]         else {
[09:31:03.145]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.145]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.145]         }
[09:31:03.145]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.145]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.145]             base::sink(type = "output", split = FALSE)
[09:31:03.145]             base::close(...future.stdout)
[09:31:03.145]         }, add = TRUE)
[09:31:03.145]     }
[09:31:03.145]     ...future.frame <- base::sys.nframe()
[09:31:03.145]     ...future.conditions <- base::list()
[09:31:03.145]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.145]     if (FALSE) {
[09:31:03.145]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.145]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.145]     }
[09:31:03.145]     ...future.result <- base::tryCatch({
[09:31:03.145]         base::withCallingHandlers({
[09:31:03.145]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[09:31:03.145]                 rr, cc)))
[09:31:03.145]             future::FutureResult(value = ...future.value$value, 
[09:31:03.145]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.145]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.145]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.145]                     ...future.globalenv.names))
[09:31:03.145]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.145]         }, condition = base::local({
[09:31:03.145]             c <- base::c
[09:31:03.145]             inherits <- base::inherits
[09:31:03.145]             invokeRestart <- base::invokeRestart
[09:31:03.145]             length <- base::length
[09:31:03.145]             list <- base::list
[09:31:03.145]             seq.int <- base::seq.int
[09:31:03.145]             signalCondition <- base::signalCondition
[09:31:03.145]             sys.calls <- base::sys.calls
[09:31:03.145]             `[[` <- base::`[[`
[09:31:03.145]             `+` <- base::`+`
[09:31:03.145]             `<<-` <- base::`<<-`
[09:31:03.145]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.145]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.145]                   3L)]
[09:31:03.145]             }
[09:31:03.145]             function(cond) {
[09:31:03.145]                 is_error <- inherits(cond, "error")
[09:31:03.145]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.145]                   NULL)
[09:31:03.145]                 if (is_error) {
[09:31:03.145]                   sessionInformation <- function() {
[09:31:03.145]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.145]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.145]                       search = base::search(), system = base::Sys.info())
[09:31:03.145]                   }
[09:31:03.145]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.145]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.145]                     cond$call), session = sessionInformation(), 
[09:31:03.145]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.145]                   signalCondition(cond)
[09:31:03.145]                 }
[09:31:03.145]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.145]                 "immediateCondition"))) {
[09:31:03.145]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.145]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.145]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.145]                   if (TRUE && !signal) {
[09:31:03.145]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.145]                     {
[09:31:03.145]                       inherits <- base::inherits
[09:31:03.145]                       invokeRestart <- base::invokeRestart
[09:31:03.145]                       is.null <- base::is.null
[09:31:03.145]                       muffled <- FALSE
[09:31:03.145]                       if (inherits(cond, "message")) {
[09:31:03.145]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.145]                         if (muffled) 
[09:31:03.145]                           invokeRestart("muffleMessage")
[09:31:03.145]                       }
[09:31:03.145]                       else if (inherits(cond, "warning")) {
[09:31:03.145]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.145]                         if (muffled) 
[09:31:03.145]                           invokeRestart("muffleWarning")
[09:31:03.145]                       }
[09:31:03.145]                       else if (inherits(cond, "condition")) {
[09:31:03.145]                         if (!is.null(pattern)) {
[09:31:03.145]                           computeRestarts <- base::computeRestarts
[09:31:03.145]                           grepl <- base::grepl
[09:31:03.145]                           restarts <- computeRestarts(cond)
[09:31:03.145]                           for (restart in restarts) {
[09:31:03.145]                             name <- restart$name
[09:31:03.145]                             if (is.null(name)) 
[09:31:03.145]                               next
[09:31:03.145]                             if (!grepl(pattern, name)) 
[09:31:03.145]                               next
[09:31:03.145]                             invokeRestart(restart)
[09:31:03.145]                             muffled <- TRUE
[09:31:03.145]                             break
[09:31:03.145]                           }
[09:31:03.145]                         }
[09:31:03.145]                       }
[09:31:03.145]                       invisible(muffled)
[09:31:03.145]                     }
[09:31:03.145]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.145]                   }
[09:31:03.145]                 }
[09:31:03.145]                 else {
[09:31:03.145]                   if (TRUE) {
[09:31:03.145]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.145]                     {
[09:31:03.145]                       inherits <- base::inherits
[09:31:03.145]                       invokeRestart <- base::invokeRestart
[09:31:03.145]                       is.null <- base::is.null
[09:31:03.145]                       muffled <- FALSE
[09:31:03.145]                       if (inherits(cond, "message")) {
[09:31:03.145]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.145]                         if (muffled) 
[09:31:03.145]                           invokeRestart("muffleMessage")
[09:31:03.145]                       }
[09:31:03.145]                       else if (inherits(cond, "warning")) {
[09:31:03.145]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.145]                         if (muffled) 
[09:31:03.145]                           invokeRestart("muffleWarning")
[09:31:03.145]                       }
[09:31:03.145]                       else if (inherits(cond, "condition")) {
[09:31:03.145]                         if (!is.null(pattern)) {
[09:31:03.145]                           computeRestarts <- base::computeRestarts
[09:31:03.145]                           grepl <- base::grepl
[09:31:03.145]                           restarts <- computeRestarts(cond)
[09:31:03.145]                           for (restart in restarts) {
[09:31:03.145]                             name <- restart$name
[09:31:03.145]                             if (is.null(name)) 
[09:31:03.145]                               next
[09:31:03.145]                             if (!grepl(pattern, name)) 
[09:31:03.145]                               next
[09:31:03.145]                             invokeRestart(restart)
[09:31:03.145]                             muffled <- TRUE
[09:31:03.145]                             break
[09:31:03.145]                           }
[09:31:03.145]                         }
[09:31:03.145]                       }
[09:31:03.145]                       invisible(muffled)
[09:31:03.145]                     }
[09:31:03.145]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.145]                   }
[09:31:03.145]                 }
[09:31:03.145]             }
[09:31:03.145]         }))
[09:31:03.145]     }, error = function(ex) {
[09:31:03.145]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.145]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.145]                 ...future.rng), started = ...future.startTime, 
[09:31:03.145]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.145]             version = "1.8"), class = "FutureResult")
[09:31:03.145]     }, finally = {
[09:31:03.145]         if (!identical(...future.workdir, getwd())) 
[09:31:03.145]             setwd(...future.workdir)
[09:31:03.145]         {
[09:31:03.145]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.145]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.145]             }
[09:31:03.145]             base::options(...future.oldOptions)
[09:31:03.145]             if (.Platform$OS.type == "windows") {
[09:31:03.145]                 old_names <- names(...future.oldEnvVars)
[09:31:03.145]                 envs <- base::Sys.getenv()
[09:31:03.145]                 names <- names(envs)
[09:31:03.145]                 common <- intersect(names, old_names)
[09:31:03.145]                 added <- setdiff(names, old_names)
[09:31:03.145]                 removed <- setdiff(old_names, names)
[09:31:03.145]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.145]                   envs[common]]
[09:31:03.145]                 NAMES <- toupper(changed)
[09:31:03.145]                 args <- list()
[09:31:03.145]                 for (kk in seq_along(NAMES)) {
[09:31:03.145]                   name <- changed[[kk]]
[09:31:03.145]                   NAME <- NAMES[[kk]]
[09:31:03.145]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.145]                     next
[09:31:03.145]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.145]                 }
[09:31:03.145]                 NAMES <- toupper(added)
[09:31:03.145]                 for (kk in seq_along(NAMES)) {
[09:31:03.145]                   name <- added[[kk]]
[09:31:03.145]                   NAME <- NAMES[[kk]]
[09:31:03.145]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.145]                     next
[09:31:03.145]                   args[[name]] <- ""
[09:31:03.145]                 }
[09:31:03.145]                 NAMES <- toupper(removed)
[09:31:03.145]                 for (kk in seq_along(NAMES)) {
[09:31:03.145]                   name <- removed[[kk]]
[09:31:03.145]                   NAME <- NAMES[[kk]]
[09:31:03.145]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.145]                     next
[09:31:03.145]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.145]                 }
[09:31:03.145]                 if (length(args) > 0) 
[09:31:03.145]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.145]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.145]             }
[09:31:03.145]             else {
[09:31:03.145]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.145]             }
[09:31:03.145]             {
[09:31:03.145]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.145]                   0L) {
[09:31:03.145]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.145]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.145]                   base::options(opts)
[09:31:03.145]                 }
[09:31:03.145]                 {
[09:31:03.145]                   {
[09:31:03.145]                     NULL
[09:31:03.145]                     RNGkind("Mersenne-Twister")
[09:31:03.145]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.145]                       inherits = FALSE)
[09:31:03.145]                   }
[09:31:03.145]                   options(future.plan = NULL)
[09:31:03.145]                   if (is.na(NA_character_)) 
[09:31:03.145]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.145]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.145]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.145]                     .init = FALSE)
[09:31:03.145]                 }
[09:31:03.145]             }
[09:31:03.145]         }
[09:31:03.145]     })
[09:31:03.145]     if (TRUE) {
[09:31:03.145]         base::sink(type = "output", split = FALSE)
[09:31:03.145]         if (TRUE) {
[09:31:03.145]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.145]         }
[09:31:03.145]         else {
[09:31:03.145]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.145]         }
[09:31:03.145]         base::close(...future.stdout)
[09:31:03.145]         ...future.stdout <- NULL
[09:31:03.145]     }
[09:31:03.145]     ...future.result$conditions <- ...future.conditions
[09:31:03.145]     ...future.result$finished <- base::Sys.time()
[09:31:03.145]     ...future.result
[09:31:03.145] }
[09:31:03.146] assign_globals() ...
[09:31:03.146] List of 2
[09:31:03.146]  $ rr: int 3
[09:31:03.146]  $ cc: int 1
[09:31:03.146]  - attr(*, "where")=List of 2
[09:31:03.146]   ..$ rr:<environment: R_EmptyEnv> 
[09:31:03.146]   ..$ cc:<environment: R_EmptyEnv> 
[09:31:03.146]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.146]  - attr(*, "resolved")= logi FALSE
[09:31:03.146]  - attr(*, "total_size")= num 112
[09:31:03.146]  - attr(*, "already-done")= logi TRUE
[09:31:03.149] - copied ‘rr’ to environment
[09:31:03.149] - copied ‘cc’ to environment
[09:31:03.149] assign_globals() ... done
[09:31:03.149] plan(): Setting new future strategy stack:
[09:31:03.150] List of future strategies:
[09:31:03.150] 1. sequential:
[09:31:03.150]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.150]    - tweaked: FALSE
[09:31:03.150]    - call: NULL
[09:31:03.150] plan(): nbrOfWorkers() = 1
[09:31:03.151] plan(): Setting new future strategy stack:
[09:31:03.151] List of future strategies:
[09:31:03.151] 1. sequential:
[09:31:03.151]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.151]    - tweaked: FALSE
[09:31:03.151]    - call: future::plan("sequential")
[09:31:03.151] plan(): nbrOfWorkers() = 1
[09:31:03.151] SequentialFuture started (and completed)
[09:31:03.151] - Launch lazy future ... done
[09:31:03.151] run() for ‘SequentialFuture’ ... done
[09:31:03.152] run() for ‘Future’ ...
[09:31:03.152] - state: ‘created’
[09:31:03.152] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.152] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.152] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.152]   - Field: ‘label’
[09:31:03.152]   - Field: ‘local’
[09:31:03.152]   - Field: ‘owner’
[09:31:03.153]   - Field: ‘envir’
[09:31:03.153]   - Field: ‘packages’
[09:31:03.153]   - Field: ‘gc’
[09:31:03.153]   - Field: ‘conditions’
[09:31:03.153]   - Field: ‘expr’
[09:31:03.153]   - Field: ‘uuid’
[09:31:03.153]   - Field: ‘seed’
[09:31:03.153]   - Field: ‘version’
[09:31:03.153]   - Field: ‘result’
[09:31:03.153]   - Field: ‘asynchronous’
[09:31:03.153]   - Field: ‘calls’
[09:31:03.153]   - Field: ‘globals’
[09:31:03.154]   - Field: ‘stdout’
[09:31:03.154]   - Field: ‘earlySignal’
[09:31:03.154]   - Field: ‘lazy’
[09:31:03.154]   - Field: ‘state’
[09:31:03.154] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.154] - Launch lazy future ...
[09:31:03.154] Packages needed by the future expression (n = 0): <none>
[09:31:03.154] Packages needed by future strategies (n = 0): <none>
[09:31:03.155] {
[09:31:03.155]     {
[09:31:03.155]         {
[09:31:03.155]             ...future.startTime <- base::Sys.time()
[09:31:03.155]             {
[09:31:03.155]                 {
[09:31:03.155]                   {
[09:31:03.155]                     base::local({
[09:31:03.155]                       has_future <- base::requireNamespace("future", 
[09:31:03.155]                         quietly = TRUE)
[09:31:03.155]                       if (has_future) {
[09:31:03.155]                         ns <- base::getNamespace("future")
[09:31:03.155]                         version <- ns[[".package"]][["version"]]
[09:31:03.155]                         if (is.null(version)) 
[09:31:03.155]                           version <- utils::packageVersion("future")
[09:31:03.155]                       }
[09:31:03.155]                       else {
[09:31:03.155]                         version <- NULL
[09:31:03.155]                       }
[09:31:03.155]                       if (!has_future || version < "1.8.0") {
[09:31:03.155]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.155]                           "", base::R.version$version.string), 
[09:31:03.155]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.155]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.155]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.155]                             "release", "version")], collapse = " "), 
[09:31:03.155]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.155]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.155]                           info)
[09:31:03.155]                         info <- base::paste(info, collapse = "; ")
[09:31:03.155]                         if (!has_future) {
[09:31:03.155]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.155]                             info)
[09:31:03.155]                         }
[09:31:03.155]                         else {
[09:31:03.155]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.155]                             info, version)
[09:31:03.155]                         }
[09:31:03.155]                         base::stop(msg)
[09:31:03.155]                       }
[09:31:03.155]                     })
[09:31:03.155]                   }
[09:31:03.155]                   ...future.strategy.old <- future::plan("list")
[09:31:03.155]                   options(future.plan = NULL)
[09:31:03.155]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.155]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.155]                 }
[09:31:03.155]                 ...future.workdir <- getwd()
[09:31:03.155]             }
[09:31:03.155]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.155]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.155]         }
[09:31:03.155]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.155]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.155]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.155]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.155]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.155]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.155]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.155]             base::names(...future.oldOptions))
[09:31:03.155]     }
[09:31:03.155]     if (FALSE) {
[09:31:03.155]     }
[09:31:03.155]     else {
[09:31:03.155]         if (TRUE) {
[09:31:03.155]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.155]                 open = "w")
[09:31:03.155]         }
[09:31:03.155]         else {
[09:31:03.155]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.155]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.155]         }
[09:31:03.155]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.155]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.155]             base::sink(type = "output", split = FALSE)
[09:31:03.155]             base::close(...future.stdout)
[09:31:03.155]         }, add = TRUE)
[09:31:03.155]     }
[09:31:03.155]     ...future.frame <- base::sys.nframe()
[09:31:03.155]     ...future.conditions <- base::list()
[09:31:03.155]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.155]     if (FALSE) {
[09:31:03.155]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.155]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.155]     }
[09:31:03.155]     ...future.result <- base::tryCatch({
[09:31:03.155]         base::withCallingHandlers({
[09:31:03.155]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[09:31:03.155]                 rr, cc)))
[09:31:03.155]             future::FutureResult(value = ...future.value$value, 
[09:31:03.155]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.155]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.155]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.155]                     ...future.globalenv.names))
[09:31:03.155]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.155]         }, condition = base::local({
[09:31:03.155]             c <- base::c
[09:31:03.155]             inherits <- base::inherits
[09:31:03.155]             invokeRestart <- base::invokeRestart
[09:31:03.155]             length <- base::length
[09:31:03.155]             list <- base::list
[09:31:03.155]             seq.int <- base::seq.int
[09:31:03.155]             signalCondition <- base::signalCondition
[09:31:03.155]             sys.calls <- base::sys.calls
[09:31:03.155]             `[[` <- base::`[[`
[09:31:03.155]             `+` <- base::`+`
[09:31:03.155]             `<<-` <- base::`<<-`
[09:31:03.155]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.155]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.155]                   3L)]
[09:31:03.155]             }
[09:31:03.155]             function(cond) {
[09:31:03.155]                 is_error <- inherits(cond, "error")
[09:31:03.155]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.155]                   NULL)
[09:31:03.155]                 if (is_error) {
[09:31:03.155]                   sessionInformation <- function() {
[09:31:03.155]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.155]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.155]                       search = base::search(), system = base::Sys.info())
[09:31:03.155]                   }
[09:31:03.155]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.155]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.155]                     cond$call), session = sessionInformation(), 
[09:31:03.155]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.155]                   signalCondition(cond)
[09:31:03.155]                 }
[09:31:03.155]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.155]                 "immediateCondition"))) {
[09:31:03.155]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.155]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.155]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.155]                   if (TRUE && !signal) {
[09:31:03.155]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.155]                     {
[09:31:03.155]                       inherits <- base::inherits
[09:31:03.155]                       invokeRestart <- base::invokeRestart
[09:31:03.155]                       is.null <- base::is.null
[09:31:03.155]                       muffled <- FALSE
[09:31:03.155]                       if (inherits(cond, "message")) {
[09:31:03.155]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.155]                         if (muffled) 
[09:31:03.155]                           invokeRestart("muffleMessage")
[09:31:03.155]                       }
[09:31:03.155]                       else if (inherits(cond, "warning")) {
[09:31:03.155]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.155]                         if (muffled) 
[09:31:03.155]                           invokeRestart("muffleWarning")
[09:31:03.155]                       }
[09:31:03.155]                       else if (inherits(cond, "condition")) {
[09:31:03.155]                         if (!is.null(pattern)) {
[09:31:03.155]                           computeRestarts <- base::computeRestarts
[09:31:03.155]                           grepl <- base::grepl
[09:31:03.155]                           restarts <- computeRestarts(cond)
[09:31:03.155]                           for (restart in restarts) {
[09:31:03.155]                             name <- restart$name
[09:31:03.155]                             if (is.null(name)) 
[09:31:03.155]                               next
[09:31:03.155]                             if (!grepl(pattern, name)) 
[09:31:03.155]                               next
[09:31:03.155]                             invokeRestart(restart)
[09:31:03.155]                             muffled <- TRUE
[09:31:03.155]                             break
[09:31:03.155]                           }
[09:31:03.155]                         }
[09:31:03.155]                       }
[09:31:03.155]                       invisible(muffled)
[09:31:03.155]                     }
[09:31:03.155]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.155]                   }
[09:31:03.155]                 }
[09:31:03.155]                 else {
[09:31:03.155]                   if (TRUE) {
[09:31:03.155]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.155]                     {
[09:31:03.155]                       inherits <- base::inherits
[09:31:03.155]                       invokeRestart <- base::invokeRestart
[09:31:03.155]                       is.null <- base::is.null
[09:31:03.155]                       muffled <- FALSE
[09:31:03.155]                       if (inherits(cond, "message")) {
[09:31:03.155]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.155]                         if (muffled) 
[09:31:03.155]                           invokeRestart("muffleMessage")
[09:31:03.155]                       }
[09:31:03.155]                       else if (inherits(cond, "warning")) {
[09:31:03.155]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.155]                         if (muffled) 
[09:31:03.155]                           invokeRestart("muffleWarning")
[09:31:03.155]                       }
[09:31:03.155]                       else if (inherits(cond, "condition")) {
[09:31:03.155]                         if (!is.null(pattern)) {
[09:31:03.155]                           computeRestarts <- base::computeRestarts
[09:31:03.155]                           grepl <- base::grepl
[09:31:03.155]                           restarts <- computeRestarts(cond)
[09:31:03.155]                           for (restart in restarts) {
[09:31:03.155]                             name <- restart$name
[09:31:03.155]                             if (is.null(name)) 
[09:31:03.155]                               next
[09:31:03.155]                             if (!grepl(pattern, name)) 
[09:31:03.155]                               next
[09:31:03.155]                             invokeRestart(restart)
[09:31:03.155]                             muffled <- TRUE
[09:31:03.155]                             break
[09:31:03.155]                           }
[09:31:03.155]                         }
[09:31:03.155]                       }
[09:31:03.155]                       invisible(muffled)
[09:31:03.155]                     }
[09:31:03.155]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.155]                   }
[09:31:03.155]                 }
[09:31:03.155]             }
[09:31:03.155]         }))
[09:31:03.155]     }, error = function(ex) {
[09:31:03.155]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.155]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.155]                 ...future.rng), started = ...future.startTime, 
[09:31:03.155]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.155]             version = "1.8"), class = "FutureResult")
[09:31:03.155]     }, finally = {
[09:31:03.155]         if (!identical(...future.workdir, getwd())) 
[09:31:03.155]             setwd(...future.workdir)
[09:31:03.155]         {
[09:31:03.155]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.155]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.155]             }
[09:31:03.155]             base::options(...future.oldOptions)
[09:31:03.155]             if (.Platform$OS.type == "windows") {
[09:31:03.155]                 old_names <- names(...future.oldEnvVars)
[09:31:03.155]                 envs <- base::Sys.getenv()
[09:31:03.155]                 names <- names(envs)
[09:31:03.155]                 common <- intersect(names, old_names)
[09:31:03.155]                 added <- setdiff(names, old_names)
[09:31:03.155]                 removed <- setdiff(old_names, names)
[09:31:03.155]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.155]                   envs[common]]
[09:31:03.155]                 NAMES <- toupper(changed)
[09:31:03.155]                 args <- list()
[09:31:03.155]                 for (kk in seq_along(NAMES)) {
[09:31:03.155]                   name <- changed[[kk]]
[09:31:03.155]                   NAME <- NAMES[[kk]]
[09:31:03.155]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.155]                     next
[09:31:03.155]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.155]                 }
[09:31:03.155]                 NAMES <- toupper(added)
[09:31:03.155]                 for (kk in seq_along(NAMES)) {
[09:31:03.155]                   name <- added[[kk]]
[09:31:03.155]                   NAME <- NAMES[[kk]]
[09:31:03.155]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.155]                     next
[09:31:03.155]                   args[[name]] <- ""
[09:31:03.155]                 }
[09:31:03.155]                 NAMES <- toupper(removed)
[09:31:03.155]                 for (kk in seq_along(NAMES)) {
[09:31:03.155]                   name <- removed[[kk]]
[09:31:03.155]                   NAME <- NAMES[[kk]]
[09:31:03.155]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.155]                     next
[09:31:03.155]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.155]                 }
[09:31:03.155]                 if (length(args) > 0) 
[09:31:03.155]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.155]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.155]             }
[09:31:03.155]             else {
[09:31:03.155]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.155]             }
[09:31:03.155]             {
[09:31:03.155]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.155]                   0L) {
[09:31:03.155]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.155]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.155]                   base::options(opts)
[09:31:03.155]                 }
[09:31:03.155]                 {
[09:31:03.155]                   {
[09:31:03.155]                     NULL
[09:31:03.155]                     RNGkind("Mersenne-Twister")
[09:31:03.155]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.155]                       inherits = FALSE)
[09:31:03.155]                   }
[09:31:03.155]                   options(future.plan = NULL)
[09:31:03.155]                   if (is.na(NA_character_)) 
[09:31:03.155]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.155]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.155]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.155]                     .init = FALSE)
[09:31:03.155]                 }
[09:31:03.155]             }
[09:31:03.155]         }
[09:31:03.155]     })
[09:31:03.155]     if (TRUE) {
[09:31:03.155]         base::sink(type = "output", split = FALSE)
[09:31:03.155]         if (TRUE) {
[09:31:03.155]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.155]         }
[09:31:03.155]         else {
[09:31:03.155]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.155]         }
[09:31:03.155]         base::close(...future.stdout)
[09:31:03.155]         ...future.stdout <- NULL
[09:31:03.155]     }
[09:31:03.155]     ...future.result$conditions <- ...future.conditions
[09:31:03.155]     ...future.result$finished <- base::Sys.time()
[09:31:03.155]     ...future.result
[09:31:03.155] }
[09:31:03.156] assign_globals() ...
[09:31:03.156] List of 2
[09:31:03.156]  $ rr: int 1
[09:31:03.156]  $ cc: int 2
[09:31:03.156]  - attr(*, "where")=List of 2
[09:31:03.156]   ..$ rr:<environment: R_EmptyEnv> 
[09:31:03.156]   ..$ cc:<environment: R_EmptyEnv> 
[09:31:03.156]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.156]  - attr(*, "resolved")= logi FALSE
[09:31:03.156]  - attr(*, "total_size")= num 112
[09:31:03.156]  - attr(*, "already-done")= logi TRUE
[09:31:03.159] - copied ‘rr’ to environment
[09:31:03.159] - copied ‘cc’ to environment
[09:31:03.159] assign_globals() ... done
[09:31:03.159] plan(): Setting new future strategy stack:
[09:31:03.159] List of future strategies:
[09:31:03.159] 1. sequential:
[09:31:03.159]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.159]    - tweaked: FALSE
[09:31:03.159]    - call: NULL
[09:31:03.160] plan(): nbrOfWorkers() = 1
[09:31:03.160] plan(): Setting new future strategy stack:
[09:31:03.161] List of future strategies:
[09:31:03.161] 1. sequential:
[09:31:03.161]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.161]    - tweaked: FALSE
[09:31:03.161]    - call: future::plan("sequential")
[09:31:03.161] plan(): nbrOfWorkers() = 1
[09:31:03.161] SequentialFuture started (and completed)
[09:31:03.161] - Launch lazy future ... done
[09:31:03.161] run() for ‘SequentialFuture’ ... done
[09:31:03.161] run() for ‘Future’ ...
[09:31:03.162] - state: ‘created’
[09:31:03.162] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.162] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.162] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.162]   - Field: ‘label’
[09:31:03.162]   - Field: ‘local’
[09:31:03.162]   - Field: ‘owner’
[09:31:03.162]   - Field: ‘envir’
[09:31:03.162]   - Field: ‘packages’
[09:31:03.163]   - Field: ‘gc’
[09:31:03.163]   - Field: ‘conditions’
[09:31:03.163]   - Field: ‘expr’
[09:31:03.163]   - Field: ‘uuid’
[09:31:03.163]   - Field: ‘seed’
[09:31:03.163]   - Field: ‘version’
[09:31:03.163]   - Field: ‘result’
[09:31:03.163]   - Field: ‘asynchronous’
[09:31:03.163]   - Field: ‘calls’
[09:31:03.163]   - Field: ‘globals’
[09:31:03.163]   - Field: ‘stdout’
[09:31:03.163]   - Field: ‘earlySignal’
[09:31:03.164]   - Field: ‘lazy’
[09:31:03.164]   - Field: ‘state’
[09:31:03.164] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.164] - Launch lazy future ...
[09:31:03.164] Packages needed by the future expression (n = 0): <none>
[09:31:03.164] Packages needed by future strategies (n = 0): <none>
[09:31:03.164] {
[09:31:03.164]     {
[09:31:03.164]         {
[09:31:03.164]             ...future.startTime <- base::Sys.time()
[09:31:03.164]             {
[09:31:03.164]                 {
[09:31:03.164]                   {
[09:31:03.164]                     base::local({
[09:31:03.164]                       has_future <- base::requireNamespace("future", 
[09:31:03.164]                         quietly = TRUE)
[09:31:03.164]                       if (has_future) {
[09:31:03.164]                         ns <- base::getNamespace("future")
[09:31:03.164]                         version <- ns[[".package"]][["version"]]
[09:31:03.164]                         if (is.null(version)) 
[09:31:03.164]                           version <- utils::packageVersion("future")
[09:31:03.164]                       }
[09:31:03.164]                       else {
[09:31:03.164]                         version <- NULL
[09:31:03.164]                       }
[09:31:03.164]                       if (!has_future || version < "1.8.0") {
[09:31:03.164]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.164]                           "", base::R.version$version.string), 
[09:31:03.164]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.164]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.164]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.164]                             "release", "version")], collapse = " "), 
[09:31:03.164]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.164]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.164]                           info)
[09:31:03.164]                         info <- base::paste(info, collapse = "; ")
[09:31:03.164]                         if (!has_future) {
[09:31:03.164]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.164]                             info)
[09:31:03.164]                         }
[09:31:03.164]                         else {
[09:31:03.164]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.164]                             info, version)
[09:31:03.164]                         }
[09:31:03.164]                         base::stop(msg)
[09:31:03.164]                       }
[09:31:03.164]                     })
[09:31:03.164]                   }
[09:31:03.164]                   ...future.strategy.old <- future::plan("list")
[09:31:03.164]                   options(future.plan = NULL)
[09:31:03.164]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.164]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.164]                 }
[09:31:03.164]                 ...future.workdir <- getwd()
[09:31:03.164]             }
[09:31:03.164]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.164]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.164]         }
[09:31:03.164]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.164]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.164]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.164]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.164]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.164]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.164]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.164]             base::names(...future.oldOptions))
[09:31:03.164]     }
[09:31:03.164]     if (FALSE) {
[09:31:03.164]     }
[09:31:03.164]     else {
[09:31:03.164]         if (TRUE) {
[09:31:03.164]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.164]                 open = "w")
[09:31:03.164]         }
[09:31:03.164]         else {
[09:31:03.164]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.164]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.164]         }
[09:31:03.164]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.164]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.164]             base::sink(type = "output", split = FALSE)
[09:31:03.164]             base::close(...future.stdout)
[09:31:03.164]         }, add = TRUE)
[09:31:03.164]     }
[09:31:03.164]     ...future.frame <- base::sys.nframe()
[09:31:03.164]     ...future.conditions <- base::list()
[09:31:03.164]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.164]     if (FALSE) {
[09:31:03.164]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.164]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.164]     }
[09:31:03.164]     ...future.result <- base::tryCatch({
[09:31:03.164]         base::withCallingHandlers({
[09:31:03.164]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[09:31:03.164]                 rr, cc)))
[09:31:03.164]             future::FutureResult(value = ...future.value$value, 
[09:31:03.164]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.164]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.164]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.164]                     ...future.globalenv.names))
[09:31:03.164]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.164]         }, condition = base::local({
[09:31:03.164]             c <- base::c
[09:31:03.164]             inherits <- base::inherits
[09:31:03.164]             invokeRestart <- base::invokeRestart
[09:31:03.164]             length <- base::length
[09:31:03.164]             list <- base::list
[09:31:03.164]             seq.int <- base::seq.int
[09:31:03.164]             signalCondition <- base::signalCondition
[09:31:03.164]             sys.calls <- base::sys.calls
[09:31:03.164]             `[[` <- base::`[[`
[09:31:03.164]             `+` <- base::`+`
[09:31:03.164]             `<<-` <- base::`<<-`
[09:31:03.164]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.164]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.164]                   3L)]
[09:31:03.164]             }
[09:31:03.164]             function(cond) {
[09:31:03.164]                 is_error <- inherits(cond, "error")
[09:31:03.164]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.164]                   NULL)
[09:31:03.164]                 if (is_error) {
[09:31:03.164]                   sessionInformation <- function() {
[09:31:03.164]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.164]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.164]                       search = base::search(), system = base::Sys.info())
[09:31:03.164]                   }
[09:31:03.164]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.164]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.164]                     cond$call), session = sessionInformation(), 
[09:31:03.164]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.164]                   signalCondition(cond)
[09:31:03.164]                 }
[09:31:03.164]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.164]                 "immediateCondition"))) {
[09:31:03.164]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.164]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.164]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.164]                   if (TRUE && !signal) {
[09:31:03.164]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.164]                     {
[09:31:03.164]                       inherits <- base::inherits
[09:31:03.164]                       invokeRestart <- base::invokeRestart
[09:31:03.164]                       is.null <- base::is.null
[09:31:03.164]                       muffled <- FALSE
[09:31:03.164]                       if (inherits(cond, "message")) {
[09:31:03.164]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.164]                         if (muffled) 
[09:31:03.164]                           invokeRestart("muffleMessage")
[09:31:03.164]                       }
[09:31:03.164]                       else if (inherits(cond, "warning")) {
[09:31:03.164]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.164]                         if (muffled) 
[09:31:03.164]                           invokeRestart("muffleWarning")
[09:31:03.164]                       }
[09:31:03.164]                       else if (inherits(cond, "condition")) {
[09:31:03.164]                         if (!is.null(pattern)) {
[09:31:03.164]                           computeRestarts <- base::computeRestarts
[09:31:03.164]                           grepl <- base::grepl
[09:31:03.164]                           restarts <- computeRestarts(cond)
[09:31:03.164]                           for (restart in restarts) {
[09:31:03.164]                             name <- restart$name
[09:31:03.164]                             if (is.null(name)) 
[09:31:03.164]                               next
[09:31:03.164]                             if (!grepl(pattern, name)) 
[09:31:03.164]                               next
[09:31:03.164]                             invokeRestart(restart)
[09:31:03.164]                             muffled <- TRUE
[09:31:03.164]                             break
[09:31:03.164]                           }
[09:31:03.164]                         }
[09:31:03.164]                       }
[09:31:03.164]                       invisible(muffled)
[09:31:03.164]                     }
[09:31:03.164]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.164]                   }
[09:31:03.164]                 }
[09:31:03.164]                 else {
[09:31:03.164]                   if (TRUE) {
[09:31:03.164]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.164]                     {
[09:31:03.164]                       inherits <- base::inherits
[09:31:03.164]                       invokeRestart <- base::invokeRestart
[09:31:03.164]                       is.null <- base::is.null
[09:31:03.164]                       muffled <- FALSE
[09:31:03.164]                       if (inherits(cond, "message")) {
[09:31:03.164]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.164]                         if (muffled) 
[09:31:03.164]                           invokeRestart("muffleMessage")
[09:31:03.164]                       }
[09:31:03.164]                       else if (inherits(cond, "warning")) {
[09:31:03.164]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.164]                         if (muffled) 
[09:31:03.164]                           invokeRestart("muffleWarning")
[09:31:03.164]                       }
[09:31:03.164]                       else if (inherits(cond, "condition")) {
[09:31:03.164]                         if (!is.null(pattern)) {
[09:31:03.164]                           computeRestarts <- base::computeRestarts
[09:31:03.164]                           grepl <- base::grepl
[09:31:03.164]                           restarts <- computeRestarts(cond)
[09:31:03.164]                           for (restart in restarts) {
[09:31:03.164]                             name <- restart$name
[09:31:03.164]                             if (is.null(name)) 
[09:31:03.164]                               next
[09:31:03.164]                             if (!grepl(pattern, name)) 
[09:31:03.164]                               next
[09:31:03.164]                             invokeRestart(restart)
[09:31:03.164]                             muffled <- TRUE
[09:31:03.164]                             break
[09:31:03.164]                           }
[09:31:03.164]                         }
[09:31:03.164]                       }
[09:31:03.164]                       invisible(muffled)
[09:31:03.164]                     }
[09:31:03.164]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.164]                   }
[09:31:03.164]                 }
[09:31:03.164]             }
[09:31:03.164]         }))
[09:31:03.164]     }, error = function(ex) {
[09:31:03.164]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.164]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.164]                 ...future.rng), started = ...future.startTime, 
[09:31:03.164]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.164]             version = "1.8"), class = "FutureResult")
[09:31:03.164]     }, finally = {
[09:31:03.164]         if (!identical(...future.workdir, getwd())) 
[09:31:03.164]             setwd(...future.workdir)
[09:31:03.164]         {
[09:31:03.164]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.164]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.164]             }
[09:31:03.164]             base::options(...future.oldOptions)
[09:31:03.164]             if (.Platform$OS.type == "windows") {
[09:31:03.164]                 old_names <- names(...future.oldEnvVars)
[09:31:03.164]                 envs <- base::Sys.getenv()
[09:31:03.164]                 names <- names(envs)
[09:31:03.164]                 common <- intersect(names, old_names)
[09:31:03.164]                 added <- setdiff(names, old_names)
[09:31:03.164]                 removed <- setdiff(old_names, names)
[09:31:03.164]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.164]                   envs[common]]
[09:31:03.164]                 NAMES <- toupper(changed)
[09:31:03.164]                 args <- list()
[09:31:03.164]                 for (kk in seq_along(NAMES)) {
[09:31:03.164]                   name <- changed[[kk]]
[09:31:03.164]                   NAME <- NAMES[[kk]]
[09:31:03.164]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.164]                     next
[09:31:03.164]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.164]                 }
[09:31:03.164]                 NAMES <- toupper(added)
[09:31:03.164]                 for (kk in seq_along(NAMES)) {
[09:31:03.164]                   name <- added[[kk]]
[09:31:03.164]                   NAME <- NAMES[[kk]]
[09:31:03.164]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.164]                     next
[09:31:03.164]                   args[[name]] <- ""
[09:31:03.164]                 }
[09:31:03.164]                 NAMES <- toupper(removed)
[09:31:03.164]                 for (kk in seq_along(NAMES)) {
[09:31:03.164]                   name <- removed[[kk]]
[09:31:03.164]                   NAME <- NAMES[[kk]]
[09:31:03.164]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.164]                     next
[09:31:03.164]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.164]                 }
[09:31:03.164]                 if (length(args) > 0) 
[09:31:03.164]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.164]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.164]             }
[09:31:03.164]             else {
[09:31:03.164]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.164]             }
[09:31:03.164]             {
[09:31:03.164]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.164]                   0L) {
[09:31:03.164]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.164]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.164]                   base::options(opts)
[09:31:03.164]                 }
[09:31:03.164]                 {
[09:31:03.164]                   {
[09:31:03.164]                     NULL
[09:31:03.164]                     RNGkind("Mersenne-Twister")
[09:31:03.164]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.164]                       inherits = FALSE)
[09:31:03.164]                   }
[09:31:03.164]                   options(future.plan = NULL)
[09:31:03.164]                   if (is.na(NA_character_)) 
[09:31:03.164]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.164]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.164]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.164]                     .init = FALSE)
[09:31:03.164]                 }
[09:31:03.164]             }
[09:31:03.164]         }
[09:31:03.164]     })
[09:31:03.164]     if (TRUE) {
[09:31:03.164]         base::sink(type = "output", split = FALSE)
[09:31:03.164]         if (TRUE) {
[09:31:03.164]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.164]         }
[09:31:03.164]         else {
[09:31:03.164]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.164]         }
[09:31:03.164]         base::close(...future.stdout)
[09:31:03.164]         ...future.stdout <- NULL
[09:31:03.164]     }
[09:31:03.164]     ...future.result$conditions <- ...future.conditions
[09:31:03.164]     ...future.result$finished <- base::Sys.time()
[09:31:03.164]     ...future.result
[09:31:03.164] }
[09:31:03.166] assign_globals() ...
[09:31:03.166] List of 2
[09:31:03.166]  $ rr: int 2
[09:31:03.166]  $ cc: int 2
[09:31:03.166]  - attr(*, "where")=List of 2
[09:31:03.166]   ..$ rr:<environment: R_EmptyEnv> 
[09:31:03.166]   ..$ cc:<environment: R_EmptyEnv> 
[09:31:03.166]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.166]  - attr(*, "resolved")= logi FALSE
[09:31:03.166]  - attr(*, "total_size")= num 112
[09:31:03.166]  - attr(*, "already-done")= logi TRUE
[09:31:03.169] - copied ‘rr’ to environment
[09:31:03.169] - copied ‘cc’ to environment
[09:31:03.169] assign_globals() ... done
[09:31:03.169] plan(): Setting new future strategy stack:
[09:31:03.169] List of future strategies:
[09:31:03.169] 1. sequential:
[09:31:03.169]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.169]    - tweaked: FALSE
[09:31:03.169]    - call: NULL
[09:31:03.170] plan(): nbrOfWorkers() = 1
[09:31:03.171] plan(): Setting new future strategy stack:
[09:31:03.171] List of future strategies:
[09:31:03.171] 1. sequential:
[09:31:03.171]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.171]    - tweaked: FALSE
[09:31:03.171]    - call: future::plan("sequential")
[09:31:03.172] plan(): nbrOfWorkers() = 1
[09:31:03.172] SequentialFuture started (and completed)
[09:31:03.172] - Launch lazy future ... done
[09:31:03.172] run() for ‘SequentialFuture’ ... done
[09:31:03.172] run() for ‘Future’ ...
[09:31:03.172] - state: ‘created’
[09:31:03.172] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.173] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.173] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.173]   - Field: ‘label’
[09:31:03.173]   - Field: ‘local’
[09:31:03.173]   - Field: ‘owner’
[09:31:03.173]   - Field: ‘envir’
[09:31:03.173]   - Field: ‘packages’
[09:31:03.173]   - Field: ‘gc’
[09:31:03.173]   - Field: ‘conditions’
[09:31:03.174]   - Field: ‘expr’
[09:31:03.174]   - Field: ‘uuid’
[09:31:03.174]   - Field: ‘seed’
[09:31:03.174]   - Field: ‘version’
[09:31:03.174]   - Field: ‘result’
[09:31:03.174]   - Field: ‘asynchronous’
[09:31:03.174]   - Field: ‘calls’
[09:31:03.174]   - Field: ‘globals’
[09:31:03.174]   - Field: ‘stdout’
[09:31:03.174]   - Field: ‘earlySignal’
[09:31:03.174]   - Field: ‘lazy’
[09:31:03.174]   - Field: ‘state’
[09:31:03.175] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.175] - Launch lazy future ...
[09:31:03.175] Packages needed by the future expression (n = 0): <none>
[09:31:03.175] Packages needed by future strategies (n = 0): <none>
[09:31:03.175] {
[09:31:03.175]     {
[09:31:03.175]         {
[09:31:03.175]             ...future.startTime <- base::Sys.time()
[09:31:03.175]             {
[09:31:03.175]                 {
[09:31:03.175]                   {
[09:31:03.175]                     base::local({
[09:31:03.175]                       has_future <- base::requireNamespace("future", 
[09:31:03.175]                         quietly = TRUE)
[09:31:03.175]                       if (has_future) {
[09:31:03.175]                         ns <- base::getNamespace("future")
[09:31:03.175]                         version <- ns[[".package"]][["version"]]
[09:31:03.175]                         if (is.null(version)) 
[09:31:03.175]                           version <- utils::packageVersion("future")
[09:31:03.175]                       }
[09:31:03.175]                       else {
[09:31:03.175]                         version <- NULL
[09:31:03.175]                       }
[09:31:03.175]                       if (!has_future || version < "1.8.0") {
[09:31:03.175]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.175]                           "", base::R.version$version.string), 
[09:31:03.175]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.175]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.175]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.175]                             "release", "version")], collapse = " "), 
[09:31:03.175]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.175]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.175]                           info)
[09:31:03.175]                         info <- base::paste(info, collapse = "; ")
[09:31:03.175]                         if (!has_future) {
[09:31:03.175]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.175]                             info)
[09:31:03.175]                         }
[09:31:03.175]                         else {
[09:31:03.175]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.175]                             info, version)
[09:31:03.175]                         }
[09:31:03.175]                         base::stop(msg)
[09:31:03.175]                       }
[09:31:03.175]                     })
[09:31:03.175]                   }
[09:31:03.175]                   ...future.strategy.old <- future::plan("list")
[09:31:03.175]                   options(future.plan = NULL)
[09:31:03.175]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.175]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.175]                 }
[09:31:03.175]                 ...future.workdir <- getwd()
[09:31:03.175]             }
[09:31:03.175]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.175]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.175]         }
[09:31:03.175]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.175]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.175]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.175]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.175]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.175]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.175]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.175]             base::names(...future.oldOptions))
[09:31:03.175]     }
[09:31:03.175]     if (FALSE) {
[09:31:03.175]     }
[09:31:03.175]     else {
[09:31:03.175]         if (TRUE) {
[09:31:03.175]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.175]                 open = "w")
[09:31:03.175]         }
[09:31:03.175]         else {
[09:31:03.175]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.175]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.175]         }
[09:31:03.175]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.175]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.175]             base::sink(type = "output", split = FALSE)
[09:31:03.175]             base::close(...future.stdout)
[09:31:03.175]         }, add = TRUE)
[09:31:03.175]     }
[09:31:03.175]     ...future.frame <- base::sys.nframe()
[09:31:03.175]     ...future.conditions <- base::list()
[09:31:03.175]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.175]     if (FALSE) {
[09:31:03.175]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.175]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.175]     }
[09:31:03.175]     ...future.result <- base::tryCatch({
[09:31:03.175]         base::withCallingHandlers({
[09:31:03.175]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[09:31:03.175]                 rr, cc)))
[09:31:03.175]             future::FutureResult(value = ...future.value$value, 
[09:31:03.175]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.175]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.175]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.175]                     ...future.globalenv.names))
[09:31:03.175]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.175]         }, condition = base::local({
[09:31:03.175]             c <- base::c
[09:31:03.175]             inherits <- base::inherits
[09:31:03.175]             invokeRestart <- base::invokeRestart
[09:31:03.175]             length <- base::length
[09:31:03.175]             list <- base::list
[09:31:03.175]             seq.int <- base::seq.int
[09:31:03.175]             signalCondition <- base::signalCondition
[09:31:03.175]             sys.calls <- base::sys.calls
[09:31:03.175]             `[[` <- base::`[[`
[09:31:03.175]             `+` <- base::`+`
[09:31:03.175]             `<<-` <- base::`<<-`
[09:31:03.175]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.175]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.175]                   3L)]
[09:31:03.175]             }
[09:31:03.175]             function(cond) {
[09:31:03.175]                 is_error <- inherits(cond, "error")
[09:31:03.175]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.175]                   NULL)
[09:31:03.175]                 if (is_error) {
[09:31:03.175]                   sessionInformation <- function() {
[09:31:03.175]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.175]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.175]                       search = base::search(), system = base::Sys.info())
[09:31:03.175]                   }
[09:31:03.175]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.175]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.175]                     cond$call), session = sessionInformation(), 
[09:31:03.175]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.175]                   signalCondition(cond)
[09:31:03.175]                 }
[09:31:03.175]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.175]                 "immediateCondition"))) {
[09:31:03.175]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.175]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.175]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.175]                   if (TRUE && !signal) {
[09:31:03.175]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.175]                     {
[09:31:03.175]                       inherits <- base::inherits
[09:31:03.175]                       invokeRestart <- base::invokeRestart
[09:31:03.175]                       is.null <- base::is.null
[09:31:03.175]                       muffled <- FALSE
[09:31:03.175]                       if (inherits(cond, "message")) {
[09:31:03.175]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.175]                         if (muffled) 
[09:31:03.175]                           invokeRestart("muffleMessage")
[09:31:03.175]                       }
[09:31:03.175]                       else if (inherits(cond, "warning")) {
[09:31:03.175]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.175]                         if (muffled) 
[09:31:03.175]                           invokeRestart("muffleWarning")
[09:31:03.175]                       }
[09:31:03.175]                       else if (inherits(cond, "condition")) {
[09:31:03.175]                         if (!is.null(pattern)) {
[09:31:03.175]                           computeRestarts <- base::computeRestarts
[09:31:03.175]                           grepl <- base::grepl
[09:31:03.175]                           restarts <- computeRestarts(cond)
[09:31:03.175]                           for (restart in restarts) {
[09:31:03.175]                             name <- restart$name
[09:31:03.175]                             if (is.null(name)) 
[09:31:03.175]                               next
[09:31:03.175]                             if (!grepl(pattern, name)) 
[09:31:03.175]                               next
[09:31:03.175]                             invokeRestart(restart)
[09:31:03.175]                             muffled <- TRUE
[09:31:03.175]                             break
[09:31:03.175]                           }
[09:31:03.175]                         }
[09:31:03.175]                       }
[09:31:03.175]                       invisible(muffled)
[09:31:03.175]                     }
[09:31:03.175]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.175]                   }
[09:31:03.175]                 }
[09:31:03.175]                 else {
[09:31:03.175]                   if (TRUE) {
[09:31:03.175]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.175]                     {
[09:31:03.175]                       inherits <- base::inherits
[09:31:03.175]                       invokeRestart <- base::invokeRestart
[09:31:03.175]                       is.null <- base::is.null
[09:31:03.175]                       muffled <- FALSE
[09:31:03.175]                       if (inherits(cond, "message")) {
[09:31:03.175]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.175]                         if (muffled) 
[09:31:03.175]                           invokeRestart("muffleMessage")
[09:31:03.175]                       }
[09:31:03.175]                       else if (inherits(cond, "warning")) {
[09:31:03.175]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.175]                         if (muffled) 
[09:31:03.175]                           invokeRestart("muffleWarning")
[09:31:03.175]                       }
[09:31:03.175]                       else if (inherits(cond, "condition")) {
[09:31:03.175]                         if (!is.null(pattern)) {
[09:31:03.175]                           computeRestarts <- base::computeRestarts
[09:31:03.175]                           grepl <- base::grepl
[09:31:03.175]                           restarts <- computeRestarts(cond)
[09:31:03.175]                           for (restart in restarts) {
[09:31:03.175]                             name <- restart$name
[09:31:03.175]                             if (is.null(name)) 
[09:31:03.175]                               next
[09:31:03.175]                             if (!grepl(pattern, name)) 
[09:31:03.175]                               next
[09:31:03.175]                             invokeRestart(restart)
[09:31:03.175]                             muffled <- TRUE
[09:31:03.175]                             break
[09:31:03.175]                           }
[09:31:03.175]                         }
[09:31:03.175]                       }
[09:31:03.175]                       invisible(muffled)
[09:31:03.175]                     }
[09:31:03.175]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.175]                   }
[09:31:03.175]                 }
[09:31:03.175]             }
[09:31:03.175]         }))
[09:31:03.175]     }, error = function(ex) {
[09:31:03.175]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.175]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.175]                 ...future.rng), started = ...future.startTime, 
[09:31:03.175]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.175]             version = "1.8"), class = "FutureResult")
[09:31:03.175]     }, finally = {
[09:31:03.175]         if (!identical(...future.workdir, getwd())) 
[09:31:03.175]             setwd(...future.workdir)
[09:31:03.175]         {
[09:31:03.175]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.175]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.175]             }
[09:31:03.175]             base::options(...future.oldOptions)
[09:31:03.175]             if (.Platform$OS.type == "windows") {
[09:31:03.175]                 old_names <- names(...future.oldEnvVars)
[09:31:03.175]                 envs <- base::Sys.getenv()
[09:31:03.175]                 names <- names(envs)
[09:31:03.175]                 common <- intersect(names, old_names)
[09:31:03.175]                 added <- setdiff(names, old_names)
[09:31:03.175]                 removed <- setdiff(old_names, names)
[09:31:03.175]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.175]                   envs[common]]
[09:31:03.175]                 NAMES <- toupper(changed)
[09:31:03.175]                 args <- list()
[09:31:03.175]                 for (kk in seq_along(NAMES)) {
[09:31:03.175]                   name <- changed[[kk]]
[09:31:03.175]                   NAME <- NAMES[[kk]]
[09:31:03.175]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.175]                     next
[09:31:03.175]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.175]                 }
[09:31:03.175]                 NAMES <- toupper(added)
[09:31:03.175]                 for (kk in seq_along(NAMES)) {
[09:31:03.175]                   name <- added[[kk]]
[09:31:03.175]                   NAME <- NAMES[[kk]]
[09:31:03.175]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.175]                     next
[09:31:03.175]                   args[[name]] <- ""
[09:31:03.175]                 }
[09:31:03.175]                 NAMES <- toupper(removed)
[09:31:03.175]                 for (kk in seq_along(NAMES)) {
[09:31:03.175]                   name <- removed[[kk]]
[09:31:03.175]                   NAME <- NAMES[[kk]]
[09:31:03.175]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.175]                     next
[09:31:03.175]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.175]                 }
[09:31:03.175]                 if (length(args) > 0) 
[09:31:03.175]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.175]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.175]             }
[09:31:03.175]             else {
[09:31:03.175]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.175]             }
[09:31:03.175]             {
[09:31:03.175]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.175]                   0L) {
[09:31:03.175]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.175]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.175]                   base::options(opts)
[09:31:03.175]                 }
[09:31:03.175]                 {
[09:31:03.175]                   {
[09:31:03.175]                     NULL
[09:31:03.175]                     RNGkind("Mersenne-Twister")
[09:31:03.175]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.175]                       inherits = FALSE)
[09:31:03.175]                   }
[09:31:03.175]                   options(future.plan = NULL)
[09:31:03.175]                   if (is.na(NA_character_)) 
[09:31:03.175]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.175]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.175]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.175]                     .init = FALSE)
[09:31:03.175]                 }
[09:31:03.175]             }
[09:31:03.175]         }
[09:31:03.175]     })
[09:31:03.175]     if (TRUE) {
[09:31:03.175]         base::sink(type = "output", split = FALSE)
[09:31:03.175]         if (TRUE) {
[09:31:03.175]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.175]         }
[09:31:03.175]         else {
[09:31:03.175]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.175]         }
[09:31:03.175]         base::close(...future.stdout)
[09:31:03.175]         ...future.stdout <- NULL
[09:31:03.175]     }
[09:31:03.175]     ...future.result$conditions <- ...future.conditions
[09:31:03.175]     ...future.result$finished <- base::Sys.time()
[09:31:03.175]     ...future.result
[09:31:03.175] }
[09:31:03.177] assign_globals() ...
[09:31:03.177] List of 2
[09:31:03.177]  $ rr: int 3
[09:31:03.177]  $ cc: int 2
[09:31:03.177]  - attr(*, "where")=List of 2
[09:31:03.177]   ..$ rr:<environment: R_EmptyEnv> 
[09:31:03.177]   ..$ cc:<environment: R_EmptyEnv> 
[09:31:03.177]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.177]  - attr(*, "resolved")= logi FALSE
[09:31:03.177]  - attr(*, "total_size")= num 112
[09:31:03.177]  - attr(*, "already-done")= logi TRUE
[09:31:03.179] - copied ‘rr’ to environment
[09:31:03.180] - copied ‘cc’ to environment
[09:31:03.180] assign_globals() ... done
[09:31:03.180] plan(): Setting new future strategy stack:
[09:31:03.180] List of future strategies:
[09:31:03.180] 1. sequential:
[09:31:03.180]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.180]    - tweaked: FALSE
[09:31:03.180]    - call: NULL
[09:31:03.180] plan(): nbrOfWorkers() = 1
[09:31:03.181] plan(): Setting new future strategy stack:
[09:31:03.181] List of future strategies:
[09:31:03.181] 1. sequential:
[09:31:03.181]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.181]    - tweaked: FALSE
[09:31:03.181]    - call: future::plan("sequential")
[09:31:03.182] plan(): nbrOfWorkers() = 1
[09:31:03.182] SequentialFuture started (and completed)
[09:31:03.182] - Launch lazy future ... done
[09:31:03.182] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[09:31:03.183] plan(): Setting new future strategy stack:
[09:31:03.183] List of future strategies:
[09:31:03.183] 1. FutureStrategy:
[09:31:03.183]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.183]    - tweaked: FALSE
[09:31:03.183]    - call: future::plan(oplan)
[09:31:03.193] plan(): nbrOfWorkers() = 1
> 
