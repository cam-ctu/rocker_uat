
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:30:48.057] plan(): Setting new future strategy stack:
[09:30:48.058] List of future strategies:
[09:30:48.058] 1. sequential:
[09:30:48.058]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.058]    - tweaked: FALSE
[09:30:48.058]    - call: future::plan("sequential")
[09:30:48.069] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("*** Global argument '...' ...")
+ 
+   sum_fcns <- list()
+ 
+   sum_fcns$A <- function(x, ...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, ...) }
+     y
+   }
+ 
+ 
+   sum_fcns$B <- function(x, ...) {
+     sumt <- function(x) {
+       message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+       y %<-% { sum(x, ...) }
+       y
+     }
+     sumt(x)
+   }
+ 
+   sum_fcns$C <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y) }
+     y
+   }
+ 
+   sum_fcns$D <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y, ...) }
+     y
+   }
+ 
+   ## Issue/PR #400: Emulate how '...' may be used by the 'rlang' package
+   sum_fcns$E <- function(...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+ 
+     ## Grab '...' into a Globals object
+     globals <- globals::globalsByName("...", envir=environment())
+ 
+     ## Evaluate an expression with '...' in an environment that does not
+     ## have an '...' object - hence the parent.frame().  This will produce
+     ## an error unless we pass 'globals' which contains '...'
+     f <- future({
+       fcn <- function() sum(...)
+       fcn()
+     }, envir = parent.frame(), globals = globals)
+     y <- value(f)
+     y
+   }
+ 
+   ## Issue: https://github.com/HenrikBengtsson/globals/issues/72
+   sum_fcns$F <- function(x, y) {
+     message("Using '...' in a formula")
+ 
+     fcn <- function(x, y) {
+       z = ~ list(...)
+       sum(x, y)
+     }
+     
+     f <- future(fcn(x, y))
+     y <- value(f)
+     y
+   }
+ 
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy, substitute = FALSE)
+ 
+     for (name in names(sum_fcns)) {
+       message(sprintf("** Sum function '%s' with plan('%s') ...", name, strategy))
+       sum_fcn <- sum_fcns[[name]]
+       print(sum_fcn)
+       y <- try(sum_fcn(1:2, 3))
+       print(y)
+       if (name %in% c("D")) {
+         stopifnot(inherits(y, "try-error"))
+       } else {
+         stopifnot(y == 6)
+       }
+     }
+   }
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** Global argument '...' ...
- plan('sequential') ...
[09:30:48.117] plan(): Setting new future strategy stack:
[09:30:48.117] List of future strategies:
[09:30:48.117] 1. sequential:
[09:30:48.117]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.117]    - tweaked: FALSE
[09:30:48.117]    - call: plan(strategy, substitute = FALSE)
[09:30:48.130] plan(): nbrOfWorkers() = 1
** Sum function 'A' with plan('sequential') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x559328ebe960>
Arguments '...' exists: TRUE
[09:30:48.133] getGlobalsAndPackages() ...
[09:30:48.133] Searching for globals...
[09:30:48.146] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[09:30:48.146] Searching for globals ... DONE
[09:30:48.147] Resolving globals: FALSE
[09:30:48.147] Tweak future expression to call with '...' arguments ...
[09:30:48.147] {
[09:30:48.147]     do.call(function(...) {
[09:30:48.147]         sum(x, ...)
[09:30:48.147]     }, args = future.call.arguments)
[09:30:48.147] }
[09:30:48.147] Tweak future expression to call with '...' arguments ... DONE
[09:30:48.150] The total size of the 2 globals is 112 bytes (112 bytes)
[09:30:48.150] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[09:30:48.151] - globals: [2] ‘x’, ‘future.call.arguments’
[09:30:48.151] 
[09:30:48.151] getGlobalsAndPackages() ... DONE
[09:30:48.152] run() for ‘Future’ ...
[09:30:48.152] - state: ‘created’
[09:30:48.153] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:48.153] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:48.153] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:48.153]   - Field: ‘label’
[09:30:48.154]   - Field: ‘local’
[09:30:48.154]   - Field: ‘owner’
[09:30:48.154]   - Field: ‘envir’
[09:30:48.154]   - Field: ‘packages’
[09:30:48.154]   - Field: ‘gc’
[09:30:48.154]   - Field: ‘conditions’
[09:30:48.155]   - Field: ‘expr’
[09:30:48.155]   - Field: ‘uuid’
[09:30:48.155]   - Field: ‘seed’
[09:30:48.155]   - Field: ‘version’
[09:30:48.155]   - Field: ‘result’
[09:30:48.155]   - Field: ‘asynchronous’
[09:30:48.155]   - Field: ‘calls’
[09:30:48.156]   - Field: ‘globals’
[09:30:48.156]   - Field: ‘stdout’
[09:30:48.156]   - Field: ‘earlySignal’
[09:30:48.156]   - Field: ‘lazy’
[09:30:48.156]   - Field: ‘state’
[09:30:48.156] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:48.157] - Launch lazy future ...
[09:30:48.158] Packages needed by the future expression (n = 0): <none>
[09:30:48.158] Packages needed by future strategies (n = 0): <none>
[09:30:48.159] {
[09:30:48.159]     {
[09:30:48.159]         {
[09:30:48.159]             ...future.startTime <- base::Sys.time()
[09:30:48.159]             {
[09:30:48.159]                 {
[09:30:48.159]                   {
[09:30:48.159]                     base::local({
[09:30:48.159]                       has_future <- base::requireNamespace("future", 
[09:30:48.159]                         quietly = TRUE)
[09:30:48.159]                       if (has_future) {
[09:30:48.159]                         ns <- base::getNamespace("future")
[09:30:48.159]                         version <- ns[[".package"]][["version"]]
[09:30:48.159]                         if (is.null(version)) 
[09:30:48.159]                           version <- utils::packageVersion("future")
[09:30:48.159]                       }
[09:30:48.159]                       else {
[09:30:48.159]                         version <- NULL
[09:30:48.159]                       }
[09:30:48.159]                       if (!has_future || version < "1.8.0") {
[09:30:48.159]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:48.159]                           "", base::R.version$version.string), 
[09:30:48.159]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:48.159]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:48.159]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:48.159]                             "release", "version")], collapse = " "), 
[09:30:48.159]                           hostname = base::Sys.info()[["nodename"]])
[09:30:48.159]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:48.159]                           info)
[09:30:48.159]                         info <- base::paste(info, collapse = "; ")
[09:30:48.159]                         if (!has_future) {
[09:30:48.159]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:48.159]                             info)
[09:30:48.159]                         }
[09:30:48.159]                         else {
[09:30:48.159]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:48.159]                             info, version)
[09:30:48.159]                         }
[09:30:48.159]                         base::stop(msg)
[09:30:48.159]                       }
[09:30:48.159]                     })
[09:30:48.159]                   }
[09:30:48.159]                   ...future.strategy.old <- future::plan("list")
[09:30:48.159]                   options(future.plan = NULL)
[09:30:48.159]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.159]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:48.159]                 }
[09:30:48.159]                 ...future.workdir <- getwd()
[09:30:48.159]             }
[09:30:48.159]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:48.159]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:48.159]         }
[09:30:48.159]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:48.159]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:48.159]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:48.159]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:48.159]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:48.159]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:48.159]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:48.159]             base::names(...future.oldOptions))
[09:30:48.159]     }
[09:30:48.159]     if (FALSE) {
[09:30:48.159]     }
[09:30:48.159]     else {
[09:30:48.159]         if (TRUE) {
[09:30:48.159]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:48.159]                 open = "w")
[09:30:48.159]         }
[09:30:48.159]         else {
[09:30:48.159]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:48.159]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:48.159]         }
[09:30:48.159]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:48.159]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:48.159]             base::sink(type = "output", split = FALSE)
[09:30:48.159]             base::close(...future.stdout)
[09:30:48.159]         }, add = TRUE)
[09:30:48.159]     }
[09:30:48.159]     ...future.frame <- base::sys.nframe()
[09:30:48.159]     ...future.conditions <- base::list()
[09:30:48.159]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:48.159]     if (FALSE) {
[09:30:48.159]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:48.159]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:48.159]     }
[09:30:48.159]     ...future.result <- base::tryCatch({
[09:30:48.159]         base::withCallingHandlers({
[09:30:48.159]             ...future.value <- base::withVisible(base::local({
[09:30:48.159]                 do.call(function(...) {
[09:30:48.159]                   sum(x, ...)
[09:30:48.159]                 }, args = future.call.arguments)
[09:30:48.159]             }))
[09:30:48.159]             future::FutureResult(value = ...future.value$value, 
[09:30:48.159]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.159]                   ...future.rng), globalenv = if (FALSE) 
[09:30:48.159]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:48.159]                     ...future.globalenv.names))
[09:30:48.159]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:48.159]         }, condition = base::local({
[09:30:48.159]             c <- base::c
[09:30:48.159]             inherits <- base::inherits
[09:30:48.159]             invokeRestart <- base::invokeRestart
[09:30:48.159]             length <- base::length
[09:30:48.159]             list <- base::list
[09:30:48.159]             seq.int <- base::seq.int
[09:30:48.159]             signalCondition <- base::signalCondition
[09:30:48.159]             sys.calls <- base::sys.calls
[09:30:48.159]             `[[` <- base::`[[`
[09:30:48.159]             `+` <- base::`+`
[09:30:48.159]             `<<-` <- base::`<<-`
[09:30:48.159]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:48.159]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:48.159]                   3L)]
[09:30:48.159]             }
[09:30:48.159]             function(cond) {
[09:30:48.159]                 is_error <- inherits(cond, "error")
[09:30:48.159]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:48.159]                   NULL)
[09:30:48.159]                 if (is_error) {
[09:30:48.159]                   sessionInformation <- function() {
[09:30:48.159]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:48.159]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:48.159]                       search = base::search(), system = base::Sys.info())
[09:30:48.159]                   }
[09:30:48.159]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.159]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:48.159]                     cond$call), session = sessionInformation(), 
[09:30:48.159]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:48.159]                   signalCondition(cond)
[09:30:48.159]                 }
[09:30:48.159]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:48.159]                 "immediateCondition"))) {
[09:30:48.159]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:48.159]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.159]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:48.159]                   if (TRUE && !signal) {
[09:30:48.159]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.159]                     {
[09:30:48.159]                       inherits <- base::inherits
[09:30:48.159]                       invokeRestart <- base::invokeRestart
[09:30:48.159]                       is.null <- base::is.null
[09:30:48.159]                       muffled <- FALSE
[09:30:48.159]                       if (inherits(cond, "message")) {
[09:30:48.159]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.159]                         if (muffled) 
[09:30:48.159]                           invokeRestart("muffleMessage")
[09:30:48.159]                       }
[09:30:48.159]                       else if (inherits(cond, "warning")) {
[09:30:48.159]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.159]                         if (muffled) 
[09:30:48.159]                           invokeRestart("muffleWarning")
[09:30:48.159]                       }
[09:30:48.159]                       else if (inherits(cond, "condition")) {
[09:30:48.159]                         if (!is.null(pattern)) {
[09:30:48.159]                           computeRestarts <- base::computeRestarts
[09:30:48.159]                           grepl <- base::grepl
[09:30:48.159]                           restarts <- computeRestarts(cond)
[09:30:48.159]                           for (restart in restarts) {
[09:30:48.159]                             name <- restart$name
[09:30:48.159]                             if (is.null(name)) 
[09:30:48.159]                               next
[09:30:48.159]                             if (!grepl(pattern, name)) 
[09:30:48.159]                               next
[09:30:48.159]                             invokeRestart(restart)
[09:30:48.159]                             muffled <- TRUE
[09:30:48.159]                             break
[09:30:48.159]                           }
[09:30:48.159]                         }
[09:30:48.159]                       }
[09:30:48.159]                       invisible(muffled)
[09:30:48.159]                     }
[09:30:48.159]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.159]                   }
[09:30:48.159]                 }
[09:30:48.159]                 else {
[09:30:48.159]                   if (TRUE) {
[09:30:48.159]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.159]                     {
[09:30:48.159]                       inherits <- base::inherits
[09:30:48.159]                       invokeRestart <- base::invokeRestart
[09:30:48.159]                       is.null <- base::is.null
[09:30:48.159]                       muffled <- FALSE
[09:30:48.159]                       if (inherits(cond, "message")) {
[09:30:48.159]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.159]                         if (muffled) 
[09:30:48.159]                           invokeRestart("muffleMessage")
[09:30:48.159]                       }
[09:30:48.159]                       else if (inherits(cond, "warning")) {
[09:30:48.159]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.159]                         if (muffled) 
[09:30:48.159]                           invokeRestart("muffleWarning")
[09:30:48.159]                       }
[09:30:48.159]                       else if (inherits(cond, "condition")) {
[09:30:48.159]                         if (!is.null(pattern)) {
[09:30:48.159]                           computeRestarts <- base::computeRestarts
[09:30:48.159]                           grepl <- base::grepl
[09:30:48.159]                           restarts <- computeRestarts(cond)
[09:30:48.159]                           for (restart in restarts) {
[09:30:48.159]                             name <- restart$name
[09:30:48.159]                             if (is.null(name)) 
[09:30:48.159]                               next
[09:30:48.159]                             if (!grepl(pattern, name)) 
[09:30:48.159]                               next
[09:30:48.159]                             invokeRestart(restart)
[09:30:48.159]                             muffled <- TRUE
[09:30:48.159]                             break
[09:30:48.159]                           }
[09:30:48.159]                         }
[09:30:48.159]                       }
[09:30:48.159]                       invisible(muffled)
[09:30:48.159]                     }
[09:30:48.159]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.159]                   }
[09:30:48.159]                 }
[09:30:48.159]             }
[09:30:48.159]         }))
[09:30:48.159]     }, error = function(ex) {
[09:30:48.159]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:48.159]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.159]                 ...future.rng), started = ...future.startTime, 
[09:30:48.159]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:48.159]             version = "1.8"), class = "FutureResult")
[09:30:48.159]     }, finally = {
[09:30:48.159]         if (!identical(...future.workdir, getwd())) 
[09:30:48.159]             setwd(...future.workdir)
[09:30:48.159]         {
[09:30:48.159]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:48.159]                 ...future.oldOptions$nwarnings <- NULL
[09:30:48.159]             }
[09:30:48.159]             base::options(...future.oldOptions)
[09:30:48.159]             if (.Platform$OS.type == "windows") {
[09:30:48.159]                 old_names <- names(...future.oldEnvVars)
[09:30:48.159]                 envs <- base::Sys.getenv()
[09:30:48.159]                 names <- names(envs)
[09:30:48.159]                 common <- intersect(names, old_names)
[09:30:48.159]                 added <- setdiff(names, old_names)
[09:30:48.159]                 removed <- setdiff(old_names, names)
[09:30:48.159]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:48.159]                   envs[common]]
[09:30:48.159]                 NAMES <- toupper(changed)
[09:30:48.159]                 args <- list()
[09:30:48.159]                 for (kk in seq_along(NAMES)) {
[09:30:48.159]                   name <- changed[[kk]]
[09:30:48.159]                   NAME <- NAMES[[kk]]
[09:30:48.159]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.159]                     next
[09:30:48.159]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.159]                 }
[09:30:48.159]                 NAMES <- toupper(added)
[09:30:48.159]                 for (kk in seq_along(NAMES)) {
[09:30:48.159]                   name <- added[[kk]]
[09:30:48.159]                   NAME <- NAMES[[kk]]
[09:30:48.159]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.159]                     next
[09:30:48.159]                   args[[name]] <- ""
[09:30:48.159]                 }
[09:30:48.159]                 NAMES <- toupper(removed)
[09:30:48.159]                 for (kk in seq_along(NAMES)) {
[09:30:48.159]                   name <- removed[[kk]]
[09:30:48.159]                   NAME <- NAMES[[kk]]
[09:30:48.159]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.159]                     next
[09:30:48.159]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.159]                 }
[09:30:48.159]                 if (length(args) > 0) 
[09:30:48.159]                   base::do.call(base::Sys.setenv, args = args)
[09:30:48.159]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:48.159]             }
[09:30:48.159]             else {
[09:30:48.159]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:48.159]             }
[09:30:48.159]             {
[09:30:48.159]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:48.159]                   0L) {
[09:30:48.159]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:48.159]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:48.159]                   base::options(opts)
[09:30:48.159]                 }
[09:30:48.159]                 {
[09:30:48.159]                   {
[09:30:48.159]                     NULL
[09:30:48.159]                     RNGkind("Mersenne-Twister")
[09:30:48.159]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:48.159]                       inherits = FALSE)
[09:30:48.159]                   }
[09:30:48.159]                   options(future.plan = NULL)
[09:30:48.159]                   if (is.na(NA_character_)) 
[09:30:48.159]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.159]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:48.159]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:48.159]                     .init = FALSE)
[09:30:48.159]                 }
[09:30:48.159]             }
[09:30:48.159]         }
[09:30:48.159]     })
[09:30:48.159]     if (TRUE) {
[09:30:48.159]         base::sink(type = "output", split = FALSE)
[09:30:48.159]         if (TRUE) {
[09:30:48.159]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:48.159]         }
[09:30:48.159]         else {
[09:30:48.159]             ...future.result["stdout"] <- base::list(NULL)
[09:30:48.159]         }
[09:30:48.159]         base::close(...future.stdout)
[09:30:48.159]         ...future.stdout <- NULL
[09:30:48.159]     }
[09:30:48.159]     ...future.result$conditions <- ...future.conditions
[09:30:48.159]     ...future.result$finished <- base::Sys.time()
[09:30:48.159]     ...future.result
[09:30:48.159] }
[09:30:48.162] assign_globals() ...
[09:30:48.163] List of 2
[09:30:48.163]  $ x                    : int [1:2] 1 2
[09:30:48.163]  $ future.call.arguments:List of 1
[09:30:48.163]   ..$ : num 3
[09:30:48.163]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:30:48.163]  - attr(*, "where")=List of 2
[09:30:48.163]   ..$ x                    :<environment: R_EmptyEnv> 
[09:30:48.163]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[09:30:48.163]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:48.163]  - attr(*, "resolved")= logi FALSE
[09:30:48.163]  - attr(*, "total_size")= num 112
[09:30:48.163]  - attr(*, "already-done")= logi TRUE
[09:30:48.172] - copied ‘x’ to environment
[09:30:48.172] - copied ‘future.call.arguments’ to environment
[09:30:48.172] assign_globals() ... done
[09:30:48.173] plan(): Setting new future strategy stack:
[09:30:48.173] List of future strategies:
[09:30:48.173] 1. sequential:
[09:30:48.173]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.173]    - tweaked: FALSE
[09:30:48.173]    - call: NULL
[09:30:48.173] plan(): nbrOfWorkers() = 1
[09:30:48.175] plan(): Setting new future strategy stack:
[09:30:48.175] List of future strategies:
[09:30:48.175] 1. sequential:
[09:30:48.175]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.175]    - tweaked: FALSE
[09:30:48.175]    - call: plan(strategy, substitute = FALSE)
[09:30:48.175] plan(): nbrOfWorkers() = 1
[09:30:48.176] SequentialFuture started (and completed)
[09:30:48.176] - Launch lazy future ... done
[09:30:48.177] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'B' with plan('sequential') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5593292463d8>
Arguments '...' exists: TRUE
[09:30:48.177] getGlobalsAndPackages() ...
[09:30:48.178] Searching for globals...
[09:30:48.179] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[09:30:48.179] Searching for globals ... DONE
[09:30:48.179] Resolving globals: FALSE
[09:30:48.179] Tweak future expression to call with '...' arguments ...
[09:30:48.179] {
[09:30:48.179]     do.call(function(...) {
[09:30:48.179]         sum(x, ...)
[09:30:48.179]     }, args = future.call.arguments)
[09:30:48.179] }
[09:30:48.179] Tweak future expression to call with '...' arguments ... DONE
[09:30:48.180] The total size of the 2 globals is 112 bytes (112 bytes)
[09:30:48.180] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[09:30:48.180] - globals: [2] ‘x’, ‘future.call.arguments’
[09:30:48.180] 
[09:30:48.181] getGlobalsAndPackages() ... DONE
[09:30:48.181] run() for ‘Future’ ...
[09:30:48.181] - state: ‘created’
[09:30:48.181] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:48.181] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:48.181] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:48.181]   - Field: ‘label’
[09:30:48.182]   - Field: ‘local’
[09:30:48.182]   - Field: ‘owner’
[09:30:48.182]   - Field: ‘envir’
[09:30:48.182]   - Field: ‘packages’
[09:30:48.182]   - Field: ‘gc’
[09:30:48.182]   - Field: ‘conditions’
[09:30:48.182]   - Field: ‘expr’
[09:30:48.182]   - Field: ‘uuid’
[09:30:48.182]   - Field: ‘seed’
[09:30:48.182]   - Field: ‘version’
[09:30:48.182]   - Field: ‘result’
[09:30:48.183]   - Field: ‘asynchronous’
[09:30:48.183]   - Field: ‘calls’
[09:30:48.183]   - Field: ‘globals’
[09:30:48.183]   - Field: ‘stdout’
[09:30:48.183]   - Field: ‘earlySignal’
[09:30:48.183]   - Field: ‘lazy’
[09:30:48.183]   - Field: ‘state’
[09:30:48.183] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:48.183] - Launch lazy future ...
[09:30:48.183] Packages needed by the future expression (n = 0): <none>
[09:30:48.183] Packages needed by future strategies (n = 0): <none>
[09:30:48.184] {
[09:30:48.184]     {
[09:30:48.184]         {
[09:30:48.184]             ...future.startTime <- base::Sys.time()
[09:30:48.184]             {
[09:30:48.184]                 {
[09:30:48.184]                   {
[09:30:48.184]                     base::local({
[09:30:48.184]                       has_future <- base::requireNamespace("future", 
[09:30:48.184]                         quietly = TRUE)
[09:30:48.184]                       if (has_future) {
[09:30:48.184]                         ns <- base::getNamespace("future")
[09:30:48.184]                         version <- ns[[".package"]][["version"]]
[09:30:48.184]                         if (is.null(version)) 
[09:30:48.184]                           version <- utils::packageVersion("future")
[09:30:48.184]                       }
[09:30:48.184]                       else {
[09:30:48.184]                         version <- NULL
[09:30:48.184]                       }
[09:30:48.184]                       if (!has_future || version < "1.8.0") {
[09:30:48.184]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:48.184]                           "", base::R.version$version.string), 
[09:30:48.184]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:48.184]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:48.184]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:48.184]                             "release", "version")], collapse = " "), 
[09:30:48.184]                           hostname = base::Sys.info()[["nodename"]])
[09:30:48.184]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:48.184]                           info)
[09:30:48.184]                         info <- base::paste(info, collapse = "; ")
[09:30:48.184]                         if (!has_future) {
[09:30:48.184]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:48.184]                             info)
[09:30:48.184]                         }
[09:30:48.184]                         else {
[09:30:48.184]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:48.184]                             info, version)
[09:30:48.184]                         }
[09:30:48.184]                         base::stop(msg)
[09:30:48.184]                       }
[09:30:48.184]                     })
[09:30:48.184]                   }
[09:30:48.184]                   ...future.strategy.old <- future::plan("list")
[09:30:48.184]                   options(future.plan = NULL)
[09:30:48.184]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.184]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:48.184]                 }
[09:30:48.184]                 ...future.workdir <- getwd()
[09:30:48.184]             }
[09:30:48.184]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:48.184]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:48.184]         }
[09:30:48.184]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:48.184]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:48.184]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:48.184]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:48.184]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:48.184]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:48.184]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:48.184]             base::names(...future.oldOptions))
[09:30:48.184]     }
[09:30:48.184]     if (FALSE) {
[09:30:48.184]     }
[09:30:48.184]     else {
[09:30:48.184]         if (TRUE) {
[09:30:48.184]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:48.184]                 open = "w")
[09:30:48.184]         }
[09:30:48.184]         else {
[09:30:48.184]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:48.184]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:48.184]         }
[09:30:48.184]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:48.184]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:48.184]             base::sink(type = "output", split = FALSE)
[09:30:48.184]             base::close(...future.stdout)
[09:30:48.184]         }, add = TRUE)
[09:30:48.184]     }
[09:30:48.184]     ...future.frame <- base::sys.nframe()
[09:30:48.184]     ...future.conditions <- base::list()
[09:30:48.184]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:48.184]     if (FALSE) {
[09:30:48.184]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:48.184]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:48.184]     }
[09:30:48.184]     ...future.result <- base::tryCatch({
[09:30:48.184]         base::withCallingHandlers({
[09:30:48.184]             ...future.value <- base::withVisible(base::local({
[09:30:48.184]                 do.call(function(...) {
[09:30:48.184]                   sum(x, ...)
[09:30:48.184]                 }, args = future.call.arguments)
[09:30:48.184]             }))
[09:30:48.184]             future::FutureResult(value = ...future.value$value, 
[09:30:48.184]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.184]                   ...future.rng), globalenv = if (FALSE) 
[09:30:48.184]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:48.184]                     ...future.globalenv.names))
[09:30:48.184]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:48.184]         }, condition = base::local({
[09:30:48.184]             c <- base::c
[09:30:48.184]             inherits <- base::inherits
[09:30:48.184]             invokeRestart <- base::invokeRestart
[09:30:48.184]             length <- base::length
[09:30:48.184]             list <- base::list
[09:30:48.184]             seq.int <- base::seq.int
[09:30:48.184]             signalCondition <- base::signalCondition
[09:30:48.184]             sys.calls <- base::sys.calls
[09:30:48.184]             `[[` <- base::`[[`
[09:30:48.184]             `+` <- base::`+`
[09:30:48.184]             `<<-` <- base::`<<-`
[09:30:48.184]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:48.184]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:48.184]                   3L)]
[09:30:48.184]             }
[09:30:48.184]             function(cond) {
[09:30:48.184]                 is_error <- inherits(cond, "error")
[09:30:48.184]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:48.184]                   NULL)
[09:30:48.184]                 if (is_error) {
[09:30:48.184]                   sessionInformation <- function() {
[09:30:48.184]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:48.184]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:48.184]                       search = base::search(), system = base::Sys.info())
[09:30:48.184]                   }
[09:30:48.184]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.184]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:48.184]                     cond$call), session = sessionInformation(), 
[09:30:48.184]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:48.184]                   signalCondition(cond)
[09:30:48.184]                 }
[09:30:48.184]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:48.184]                 "immediateCondition"))) {
[09:30:48.184]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:48.184]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.184]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:48.184]                   if (TRUE && !signal) {
[09:30:48.184]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.184]                     {
[09:30:48.184]                       inherits <- base::inherits
[09:30:48.184]                       invokeRestart <- base::invokeRestart
[09:30:48.184]                       is.null <- base::is.null
[09:30:48.184]                       muffled <- FALSE
[09:30:48.184]                       if (inherits(cond, "message")) {
[09:30:48.184]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.184]                         if (muffled) 
[09:30:48.184]                           invokeRestart("muffleMessage")
[09:30:48.184]                       }
[09:30:48.184]                       else if (inherits(cond, "warning")) {
[09:30:48.184]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.184]                         if (muffled) 
[09:30:48.184]                           invokeRestart("muffleWarning")
[09:30:48.184]                       }
[09:30:48.184]                       else if (inherits(cond, "condition")) {
[09:30:48.184]                         if (!is.null(pattern)) {
[09:30:48.184]                           computeRestarts <- base::computeRestarts
[09:30:48.184]                           grepl <- base::grepl
[09:30:48.184]                           restarts <- computeRestarts(cond)
[09:30:48.184]                           for (restart in restarts) {
[09:30:48.184]                             name <- restart$name
[09:30:48.184]                             if (is.null(name)) 
[09:30:48.184]                               next
[09:30:48.184]                             if (!grepl(pattern, name)) 
[09:30:48.184]                               next
[09:30:48.184]                             invokeRestart(restart)
[09:30:48.184]                             muffled <- TRUE
[09:30:48.184]                             break
[09:30:48.184]                           }
[09:30:48.184]                         }
[09:30:48.184]                       }
[09:30:48.184]                       invisible(muffled)
[09:30:48.184]                     }
[09:30:48.184]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.184]                   }
[09:30:48.184]                 }
[09:30:48.184]                 else {
[09:30:48.184]                   if (TRUE) {
[09:30:48.184]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.184]                     {
[09:30:48.184]                       inherits <- base::inherits
[09:30:48.184]                       invokeRestart <- base::invokeRestart
[09:30:48.184]                       is.null <- base::is.null
[09:30:48.184]                       muffled <- FALSE
[09:30:48.184]                       if (inherits(cond, "message")) {
[09:30:48.184]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.184]                         if (muffled) 
[09:30:48.184]                           invokeRestart("muffleMessage")
[09:30:48.184]                       }
[09:30:48.184]                       else if (inherits(cond, "warning")) {
[09:30:48.184]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.184]                         if (muffled) 
[09:30:48.184]                           invokeRestart("muffleWarning")
[09:30:48.184]                       }
[09:30:48.184]                       else if (inherits(cond, "condition")) {
[09:30:48.184]                         if (!is.null(pattern)) {
[09:30:48.184]                           computeRestarts <- base::computeRestarts
[09:30:48.184]                           grepl <- base::grepl
[09:30:48.184]                           restarts <- computeRestarts(cond)
[09:30:48.184]                           for (restart in restarts) {
[09:30:48.184]                             name <- restart$name
[09:30:48.184]                             if (is.null(name)) 
[09:30:48.184]                               next
[09:30:48.184]                             if (!grepl(pattern, name)) 
[09:30:48.184]                               next
[09:30:48.184]                             invokeRestart(restart)
[09:30:48.184]                             muffled <- TRUE
[09:30:48.184]                             break
[09:30:48.184]                           }
[09:30:48.184]                         }
[09:30:48.184]                       }
[09:30:48.184]                       invisible(muffled)
[09:30:48.184]                     }
[09:30:48.184]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.184]                   }
[09:30:48.184]                 }
[09:30:48.184]             }
[09:30:48.184]         }))
[09:30:48.184]     }, error = function(ex) {
[09:30:48.184]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:48.184]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.184]                 ...future.rng), started = ...future.startTime, 
[09:30:48.184]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:48.184]             version = "1.8"), class = "FutureResult")
[09:30:48.184]     }, finally = {
[09:30:48.184]         if (!identical(...future.workdir, getwd())) 
[09:30:48.184]             setwd(...future.workdir)
[09:30:48.184]         {
[09:30:48.184]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:48.184]                 ...future.oldOptions$nwarnings <- NULL
[09:30:48.184]             }
[09:30:48.184]             base::options(...future.oldOptions)
[09:30:48.184]             if (.Platform$OS.type == "windows") {
[09:30:48.184]                 old_names <- names(...future.oldEnvVars)
[09:30:48.184]                 envs <- base::Sys.getenv()
[09:30:48.184]                 names <- names(envs)
[09:30:48.184]                 common <- intersect(names, old_names)
[09:30:48.184]                 added <- setdiff(names, old_names)
[09:30:48.184]                 removed <- setdiff(old_names, names)
[09:30:48.184]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:48.184]                   envs[common]]
[09:30:48.184]                 NAMES <- toupper(changed)
[09:30:48.184]                 args <- list()
[09:30:48.184]                 for (kk in seq_along(NAMES)) {
[09:30:48.184]                   name <- changed[[kk]]
[09:30:48.184]                   NAME <- NAMES[[kk]]
[09:30:48.184]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.184]                     next
[09:30:48.184]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.184]                 }
[09:30:48.184]                 NAMES <- toupper(added)
[09:30:48.184]                 for (kk in seq_along(NAMES)) {
[09:30:48.184]                   name <- added[[kk]]
[09:30:48.184]                   NAME <- NAMES[[kk]]
[09:30:48.184]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.184]                     next
[09:30:48.184]                   args[[name]] <- ""
[09:30:48.184]                 }
[09:30:48.184]                 NAMES <- toupper(removed)
[09:30:48.184]                 for (kk in seq_along(NAMES)) {
[09:30:48.184]                   name <- removed[[kk]]
[09:30:48.184]                   NAME <- NAMES[[kk]]
[09:30:48.184]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.184]                     next
[09:30:48.184]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.184]                 }
[09:30:48.184]                 if (length(args) > 0) 
[09:30:48.184]                   base::do.call(base::Sys.setenv, args = args)
[09:30:48.184]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:48.184]             }
[09:30:48.184]             else {
[09:30:48.184]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:48.184]             }
[09:30:48.184]             {
[09:30:48.184]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:48.184]                   0L) {
[09:30:48.184]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:48.184]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:48.184]                   base::options(opts)
[09:30:48.184]                 }
[09:30:48.184]                 {
[09:30:48.184]                   {
[09:30:48.184]                     NULL
[09:30:48.184]                     RNGkind("Mersenne-Twister")
[09:30:48.184]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:48.184]                       inherits = FALSE)
[09:30:48.184]                   }
[09:30:48.184]                   options(future.plan = NULL)
[09:30:48.184]                   if (is.na(NA_character_)) 
[09:30:48.184]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.184]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:48.184]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:48.184]                     .init = FALSE)
[09:30:48.184]                 }
[09:30:48.184]             }
[09:30:48.184]         }
[09:30:48.184]     })
[09:30:48.184]     if (TRUE) {
[09:30:48.184]         base::sink(type = "output", split = FALSE)
[09:30:48.184]         if (TRUE) {
[09:30:48.184]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:48.184]         }
[09:30:48.184]         else {
[09:30:48.184]             ...future.result["stdout"] <- base::list(NULL)
[09:30:48.184]         }
[09:30:48.184]         base::close(...future.stdout)
[09:30:48.184]         ...future.stdout <- NULL
[09:30:48.184]     }
[09:30:48.184]     ...future.result$conditions <- ...future.conditions
[09:30:48.184]     ...future.result$finished <- base::Sys.time()
[09:30:48.184]     ...future.result
[09:30:48.184] }
[09:30:48.185] assign_globals() ...
[09:30:48.186] List of 2
[09:30:48.186]  $ x                    : int [1:2] 1 2
[09:30:48.186]  $ future.call.arguments:List of 1
[09:30:48.186]   ..$ : num 3
[09:30:48.186]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:30:48.186]  - attr(*, "where")=List of 2
[09:30:48.186]   ..$ x                    :<environment: R_EmptyEnv> 
[09:30:48.186]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[09:30:48.186]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:48.186]  - attr(*, "resolved")= logi FALSE
[09:30:48.186]  - attr(*, "total_size")= num 112
[09:30:48.186]  - attr(*, "already-done")= logi TRUE
[09:30:48.189] - copied ‘x’ to environment
[09:30:48.189] - copied ‘future.call.arguments’ to environment
[09:30:48.189] assign_globals() ... done
[09:30:48.189] plan(): Setting new future strategy stack:
[09:30:48.189] List of future strategies:
[09:30:48.189] 1. sequential:
[09:30:48.189]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.189]    - tweaked: FALSE
[09:30:48.189]    - call: NULL
[09:30:48.190] plan(): nbrOfWorkers() = 1
[09:30:48.190] plan(): Setting new future strategy stack:
[09:30:48.191] List of future strategies:
[09:30:48.191] 1. sequential:
[09:30:48.191]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.191]    - tweaked: FALSE
[09:30:48.191]    - call: plan(strategy, substitute = FALSE)
[09:30:48.191] plan(): nbrOfWorkers() = 1
[09:30:48.191] SequentialFuture started (and completed)
[09:30:48.191] - Launch lazy future ... done
[09:30:48.191] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'C' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x559329414468>
Arguments '...' exists: FALSE
[09:30:48.195] getGlobalsAndPackages() ...
[09:30:48.195] Searching for globals...
[09:30:48.196] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[09:30:48.196] Searching for globals ... DONE
[09:30:48.196] Resolving globals: FALSE
[09:30:48.197] The total size of the 2 globals is 112 bytes (112 bytes)
[09:30:48.197] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[09:30:48.197] - globals: [2] ‘x’, ‘y’
[09:30:48.197] 
[09:30:48.197] getGlobalsAndPackages() ... DONE
[09:30:48.198] run() for ‘Future’ ...
[09:30:48.198] - state: ‘created’
[09:30:48.198] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:48.198] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:48.198] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:48.198]   - Field: ‘label’
[09:30:48.198]   - Field: ‘local’
[09:30:48.198]   - Field: ‘owner’
[09:30:48.199]   - Field: ‘envir’
[09:30:48.199]   - Field: ‘packages’
[09:30:48.199]   - Field: ‘gc’
[09:30:48.199]   - Field: ‘conditions’
[09:30:48.199]   - Field: ‘expr’
[09:30:48.199]   - Field: ‘uuid’
[09:30:48.199]   - Field: ‘seed’
[09:30:48.199]   - Field: ‘version’
[09:30:48.199]   - Field: ‘result’
[09:30:48.199]   - Field: ‘asynchronous’
[09:30:48.199]   - Field: ‘calls’
[09:30:48.199]   - Field: ‘globals’
[09:30:48.200]   - Field: ‘stdout’
[09:30:48.200]   - Field: ‘earlySignal’
[09:30:48.200]   - Field: ‘lazy’
[09:30:48.200]   - Field: ‘state’
[09:30:48.200] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:48.200] - Launch lazy future ...
[09:30:48.200] Packages needed by the future expression (n = 0): <none>
[09:30:48.200] Packages needed by future strategies (n = 0): <none>
[09:30:48.201] {
[09:30:48.201]     {
[09:30:48.201]         {
[09:30:48.201]             ...future.startTime <- base::Sys.time()
[09:30:48.201]             {
[09:30:48.201]                 {
[09:30:48.201]                   {
[09:30:48.201]                     base::local({
[09:30:48.201]                       has_future <- base::requireNamespace("future", 
[09:30:48.201]                         quietly = TRUE)
[09:30:48.201]                       if (has_future) {
[09:30:48.201]                         ns <- base::getNamespace("future")
[09:30:48.201]                         version <- ns[[".package"]][["version"]]
[09:30:48.201]                         if (is.null(version)) 
[09:30:48.201]                           version <- utils::packageVersion("future")
[09:30:48.201]                       }
[09:30:48.201]                       else {
[09:30:48.201]                         version <- NULL
[09:30:48.201]                       }
[09:30:48.201]                       if (!has_future || version < "1.8.0") {
[09:30:48.201]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:48.201]                           "", base::R.version$version.string), 
[09:30:48.201]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:48.201]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:48.201]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:48.201]                             "release", "version")], collapse = " "), 
[09:30:48.201]                           hostname = base::Sys.info()[["nodename"]])
[09:30:48.201]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:48.201]                           info)
[09:30:48.201]                         info <- base::paste(info, collapse = "; ")
[09:30:48.201]                         if (!has_future) {
[09:30:48.201]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:48.201]                             info)
[09:30:48.201]                         }
[09:30:48.201]                         else {
[09:30:48.201]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:48.201]                             info, version)
[09:30:48.201]                         }
[09:30:48.201]                         base::stop(msg)
[09:30:48.201]                       }
[09:30:48.201]                     })
[09:30:48.201]                   }
[09:30:48.201]                   ...future.strategy.old <- future::plan("list")
[09:30:48.201]                   options(future.plan = NULL)
[09:30:48.201]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.201]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:48.201]                 }
[09:30:48.201]                 ...future.workdir <- getwd()
[09:30:48.201]             }
[09:30:48.201]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:48.201]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:48.201]         }
[09:30:48.201]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:48.201]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:48.201]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:48.201]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:48.201]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:48.201]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:48.201]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:48.201]             base::names(...future.oldOptions))
[09:30:48.201]     }
[09:30:48.201]     if (FALSE) {
[09:30:48.201]     }
[09:30:48.201]     else {
[09:30:48.201]         if (TRUE) {
[09:30:48.201]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:48.201]                 open = "w")
[09:30:48.201]         }
[09:30:48.201]         else {
[09:30:48.201]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:48.201]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:48.201]         }
[09:30:48.201]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:48.201]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:48.201]             base::sink(type = "output", split = FALSE)
[09:30:48.201]             base::close(...future.stdout)
[09:30:48.201]         }, add = TRUE)
[09:30:48.201]     }
[09:30:48.201]     ...future.frame <- base::sys.nframe()
[09:30:48.201]     ...future.conditions <- base::list()
[09:30:48.201]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:48.201]     if (FALSE) {
[09:30:48.201]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:48.201]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:48.201]     }
[09:30:48.201]     ...future.result <- base::tryCatch({
[09:30:48.201]         base::withCallingHandlers({
[09:30:48.201]             ...future.value <- base::withVisible(base::local({
[09:30:48.201]                 sum(x, y)
[09:30:48.201]             }))
[09:30:48.201]             future::FutureResult(value = ...future.value$value, 
[09:30:48.201]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.201]                   ...future.rng), globalenv = if (FALSE) 
[09:30:48.201]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:48.201]                     ...future.globalenv.names))
[09:30:48.201]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:48.201]         }, condition = base::local({
[09:30:48.201]             c <- base::c
[09:30:48.201]             inherits <- base::inherits
[09:30:48.201]             invokeRestart <- base::invokeRestart
[09:30:48.201]             length <- base::length
[09:30:48.201]             list <- base::list
[09:30:48.201]             seq.int <- base::seq.int
[09:30:48.201]             signalCondition <- base::signalCondition
[09:30:48.201]             sys.calls <- base::sys.calls
[09:30:48.201]             `[[` <- base::`[[`
[09:30:48.201]             `+` <- base::`+`
[09:30:48.201]             `<<-` <- base::`<<-`
[09:30:48.201]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:48.201]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:48.201]                   3L)]
[09:30:48.201]             }
[09:30:48.201]             function(cond) {
[09:30:48.201]                 is_error <- inherits(cond, "error")
[09:30:48.201]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:48.201]                   NULL)
[09:30:48.201]                 if (is_error) {
[09:30:48.201]                   sessionInformation <- function() {
[09:30:48.201]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:48.201]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:48.201]                       search = base::search(), system = base::Sys.info())
[09:30:48.201]                   }
[09:30:48.201]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.201]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:48.201]                     cond$call), session = sessionInformation(), 
[09:30:48.201]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:48.201]                   signalCondition(cond)
[09:30:48.201]                 }
[09:30:48.201]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:48.201]                 "immediateCondition"))) {
[09:30:48.201]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:48.201]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.201]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:48.201]                   if (TRUE && !signal) {
[09:30:48.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.201]                     {
[09:30:48.201]                       inherits <- base::inherits
[09:30:48.201]                       invokeRestart <- base::invokeRestart
[09:30:48.201]                       is.null <- base::is.null
[09:30:48.201]                       muffled <- FALSE
[09:30:48.201]                       if (inherits(cond, "message")) {
[09:30:48.201]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.201]                         if (muffled) 
[09:30:48.201]                           invokeRestart("muffleMessage")
[09:30:48.201]                       }
[09:30:48.201]                       else if (inherits(cond, "warning")) {
[09:30:48.201]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.201]                         if (muffled) 
[09:30:48.201]                           invokeRestart("muffleWarning")
[09:30:48.201]                       }
[09:30:48.201]                       else if (inherits(cond, "condition")) {
[09:30:48.201]                         if (!is.null(pattern)) {
[09:30:48.201]                           computeRestarts <- base::computeRestarts
[09:30:48.201]                           grepl <- base::grepl
[09:30:48.201]                           restarts <- computeRestarts(cond)
[09:30:48.201]                           for (restart in restarts) {
[09:30:48.201]                             name <- restart$name
[09:30:48.201]                             if (is.null(name)) 
[09:30:48.201]                               next
[09:30:48.201]                             if (!grepl(pattern, name)) 
[09:30:48.201]                               next
[09:30:48.201]                             invokeRestart(restart)
[09:30:48.201]                             muffled <- TRUE
[09:30:48.201]                             break
[09:30:48.201]                           }
[09:30:48.201]                         }
[09:30:48.201]                       }
[09:30:48.201]                       invisible(muffled)
[09:30:48.201]                     }
[09:30:48.201]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.201]                   }
[09:30:48.201]                 }
[09:30:48.201]                 else {
[09:30:48.201]                   if (TRUE) {
[09:30:48.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.201]                     {
[09:30:48.201]                       inherits <- base::inherits
[09:30:48.201]                       invokeRestart <- base::invokeRestart
[09:30:48.201]                       is.null <- base::is.null
[09:30:48.201]                       muffled <- FALSE
[09:30:48.201]                       if (inherits(cond, "message")) {
[09:30:48.201]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.201]                         if (muffled) 
[09:30:48.201]                           invokeRestart("muffleMessage")
[09:30:48.201]                       }
[09:30:48.201]                       else if (inherits(cond, "warning")) {
[09:30:48.201]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.201]                         if (muffled) 
[09:30:48.201]                           invokeRestart("muffleWarning")
[09:30:48.201]                       }
[09:30:48.201]                       else if (inherits(cond, "condition")) {
[09:30:48.201]                         if (!is.null(pattern)) {
[09:30:48.201]                           computeRestarts <- base::computeRestarts
[09:30:48.201]                           grepl <- base::grepl
[09:30:48.201]                           restarts <- computeRestarts(cond)
[09:30:48.201]                           for (restart in restarts) {
[09:30:48.201]                             name <- restart$name
[09:30:48.201]                             if (is.null(name)) 
[09:30:48.201]                               next
[09:30:48.201]                             if (!grepl(pattern, name)) 
[09:30:48.201]                               next
[09:30:48.201]                             invokeRestart(restart)
[09:30:48.201]                             muffled <- TRUE
[09:30:48.201]                             break
[09:30:48.201]                           }
[09:30:48.201]                         }
[09:30:48.201]                       }
[09:30:48.201]                       invisible(muffled)
[09:30:48.201]                     }
[09:30:48.201]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.201]                   }
[09:30:48.201]                 }
[09:30:48.201]             }
[09:30:48.201]         }))
[09:30:48.201]     }, error = function(ex) {
[09:30:48.201]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:48.201]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.201]                 ...future.rng), started = ...future.startTime, 
[09:30:48.201]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:48.201]             version = "1.8"), class = "FutureResult")
[09:30:48.201]     }, finally = {
[09:30:48.201]         if (!identical(...future.workdir, getwd())) 
[09:30:48.201]             setwd(...future.workdir)
[09:30:48.201]         {
[09:30:48.201]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:48.201]                 ...future.oldOptions$nwarnings <- NULL
[09:30:48.201]             }
[09:30:48.201]             base::options(...future.oldOptions)
[09:30:48.201]             if (.Platform$OS.type == "windows") {
[09:30:48.201]                 old_names <- names(...future.oldEnvVars)
[09:30:48.201]                 envs <- base::Sys.getenv()
[09:30:48.201]                 names <- names(envs)
[09:30:48.201]                 common <- intersect(names, old_names)
[09:30:48.201]                 added <- setdiff(names, old_names)
[09:30:48.201]                 removed <- setdiff(old_names, names)
[09:30:48.201]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:48.201]                   envs[common]]
[09:30:48.201]                 NAMES <- toupper(changed)
[09:30:48.201]                 args <- list()
[09:30:48.201]                 for (kk in seq_along(NAMES)) {
[09:30:48.201]                   name <- changed[[kk]]
[09:30:48.201]                   NAME <- NAMES[[kk]]
[09:30:48.201]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.201]                     next
[09:30:48.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.201]                 }
[09:30:48.201]                 NAMES <- toupper(added)
[09:30:48.201]                 for (kk in seq_along(NAMES)) {
[09:30:48.201]                   name <- added[[kk]]
[09:30:48.201]                   NAME <- NAMES[[kk]]
[09:30:48.201]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.201]                     next
[09:30:48.201]                   args[[name]] <- ""
[09:30:48.201]                 }
[09:30:48.201]                 NAMES <- toupper(removed)
[09:30:48.201]                 for (kk in seq_along(NAMES)) {
[09:30:48.201]                   name <- removed[[kk]]
[09:30:48.201]                   NAME <- NAMES[[kk]]
[09:30:48.201]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.201]                     next
[09:30:48.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.201]                 }
[09:30:48.201]                 if (length(args) > 0) 
[09:30:48.201]                   base::do.call(base::Sys.setenv, args = args)
[09:30:48.201]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:48.201]             }
[09:30:48.201]             else {
[09:30:48.201]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:48.201]             }
[09:30:48.201]             {
[09:30:48.201]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:48.201]                   0L) {
[09:30:48.201]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:48.201]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:48.201]                   base::options(opts)
[09:30:48.201]                 }
[09:30:48.201]                 {
[09:30:48.201]                   {
[09:30:48.201]                     NULL
[09:30:48.201]                     RNGkind("Mersenne-Twister")
[09:30:48.201]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:48.201]                       inherits = FALSE)
[09:30:48.201]                   }
[09:30:48.201]                   options(future.plan = NULL)
[09:30:48.201]                   if (is.na(NA_character_)) 
[09:30:48.201]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.201]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:48.201]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:48.201]                     .init = FALSE)
[09:30:48.201]                 }
[09:30:48.201]             }
[09:30:48.201]         }
[09:30:48.201]     })
[09:30:48.201]     if (TRUE) {
[09:30:48.201]         base::sink(type = "output", split = FALSE)
[09:30:48.201]         if (TRUE) {
[09:30:48.201]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:48.201]         }
[09:30:48.201]         else {
[09:30:48.201]             ...future.result["stdout"] <- base::list(NULL)
[09:30:48.201]         }
[09:30:48.201]         base::close(...future.stdout)
[09:30:48.201]         ...future.stdout <- NULL
[09:30:48.201]     }
[09:30:48.201]     ...future.result$conditions <- ...future.conditions
[09:30:48.201]     ...future.result$finished <- base::Sys.time()
[09:30:48.201]     ...future.result
[09:30:48.201] }
[09:30:48.202] assign_globals() ...
[09:30:48.202] List of 2
[09:30:48.202]  $ x: int [1:2] 1 2
[09:30:48.202]  $ y: num 3
[09:30:48.202]  - attr(*, "where")=List of 2
[09:30:48.202]   ..$ x:<environment: R_EmptyEnv> 
[09:30:48.202]   ..$ y:<environment: R_EmptyEnv> 
[09:30:48.202]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:48.202]  - attr(*, "resolved")= logi FALSE
[09:30:48.202]  - attr(*, "total_size")= num 112
[09:30:48.202]  - attr(*, "already-done")= logi TRUE
[09:30:48.205] - copied ‘x’ to environment
[09:30:48.205] - copied ‘y’ to environment
[09:30:48.205] assign_globals() ... done
[09:30:48.206] plan(): Setting new future strategy stack:
[09:30:48.206] List of future strategies:
[09:30:48.206] 1. sequential:
[09:30:48.206]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.206]    - tweaked: FALSE
[09:30:48.206]    - call: NULL
[09:30:48.206] plan(): nbrOfWorkers() = 1
[09:30:48.207] plan(): Setting new future strategy stack:
[09:30:48.207] List of future strategies:
[09:30:48.207] 1. sequential:
[09:30:48.207]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.207]    - tweaked: FALSE
[09:30:48.207]    - call: plan(strategy, substitute = FALSE)
[09:30:48.207] plan(): nbrOfWorkers() = 1
[09:30:48.207] SequentialFuture started (and completed)
[09:30:48.207] - Launch lazy future ... done
[09:30:48.208] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'D' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5593295b00c0>
Arguments '...' exists: FALSE
[09:30:48.208] getGlobalsAndPackages() ...
[09:30:48.208] Searching for globals...
[09:30:48.209] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[09:30:48.210] Searching for globals ... DONE
[09:30:48.210] Resolving globals: FALSE
[09:30:48.210] Tweak future expression to call with '...' arguments ...
[09:30:48.210] The total size of the 2 globals is 112 bytes (112 bytes)
[09:30:48.211] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[09:30:48.211] - globals: [2] ‘x’, ‘y’
[09:30:48.211] 
[09:30:48.211] getGlobalsAndPackages() ... DONE
[09:30:48.211] run() for ‘Future’ ...
[09:30:48.211] - state: ‘created’
[09:30:48.211] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:48.212] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:48.212] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:48.212]   - Field: ‘label’
[09:30:48.212]   - Field: ‘local’
[09:30:48.212]   - Field: ‘owner’
[09:30:48.212]   - Field: ‘envir’
[09:30:48.212]   - Field: ‘packages’
[09:30:48.212]   - Field: ‘gc’
[09:30:48.212]   - Field: ‘conditions’
[09:30:48.212]   - Field: ‘expr’
[09:30:48.212]   - Field: ‘uuid’
[09:30:48.213]   - Field: ‘seed’
[09:30:48.213]   - Field: ‘version’
[09:30:48.213]   - Field: ‘result’
[09:30:48.213]   - Field: ‘asynchronous’
[09:30:48.213]   - Field: ‘calls’
[09:30:48.213]   - Field: ‘globals’
[09:30:48.213]   - Field: ‘stdout’
[09:30:48.213]   - Field: ‘earlySignal’
[09:30:48.213]   - Field: ‘lazy’
[09:30:48.213]   - Field: ‘state’
[09:30:48.213] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:48.213] - Launch lazy future ...
[09:30:48.214] Packages needed by the future expression (n = 0): <none>
[09:30:48.214] Packages needed by future strategies (n = 0): <none>
[09:30:48.214] {
[09:30:48.214]     {
[09:30:48.214]         {
[09:30:48.214]             ...future.startTime <- base::Sys.time()
[09:30:48.214]             {
[09:30:48.214]                 {
[09:30:48.214]                   {
[09:30:48.214]                     base::local({
[09:30:48.214]                       has_future <- base::requireNamespace("future", 
[09:30:48.214]                         quietly = TRUE)
[09:30:48.214]                       if (has_future) {
[09:30:48.214]                         ns <- base::getNamespace("future")
[09:30:48.214]                         version <- ns[[".package"]][["version"]]
[09:30:48.214]                         if (is.null(version)) 
[09:30:48.214]                           version <- utils::packageVersion("future")
[09:30:48.214]                       }
[09:30:48.214]                       else {
[09:30:48.214]                         version <- NULL
[09:30:48.214]                       }
[09:30:48.214]                       if (!has_future || version < "1.8.0") {
[09:30:48.214]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:48.214]                           "", base::R.version$version.string), 
[09:30:48.214]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:48.214]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:48.214]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:48.214]                             "release", "version")], collapse = " "), 
[09:30:48.214]                           hostname = base::Sys.info()[["nodename"]])
[09:30:48.214]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:48.214]                           info)
[09:30:48.214]                         info <- base::paste(info, collapse = "; ")
[09:30:48.214]                         if (!has_future) {
[09:30:48.214]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:48.214]                             info)
[09:30:48.214]                         }
[09:30:48.214]                         else {
[09:30:48.214]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:48.214]                             info, version)
[09:30:48.214]                         }
[09:30:48.214]                         base::stop(msg)
[09:30:48.214]                       }
[09:30:48.214]                     })
[09:30:48.214]                   }
[09:30:48.214]                   ...future.strategy.old <- future::plan("list")
[09:30:48.214]                   options(future.plan = NULL)
[09:30:48.214]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.214]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:48.214]                 }
[09:30:48.214]                 ...future.workdir <- getwd()
[09:30:48.214]             }
[09:30:48.214]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:48.214]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:48.214]         }
[09:30:48.214]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:48.214]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:48.214]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:48.214]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:48.214]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:48.214]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:48.214]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:48.214]             base::names(...future.oldOptions))
[09:30:48.214]     }
[09:30:48.214]     if (FALSE) {
[09:30:48.214]     }
[09:30:48.214]     else {
[09:30:48.214]         if (TRUE) {
[09:30:48.214]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:48.214]                 open = "w")
[09:30:48.214]         }
[09:30:48.214]         else {
[09:30:48.214]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:48.214]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:48.214]         }
[09:30:48.214]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:48.214]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:48.214]             base::sink(type = "output", split = FALSE)
[09:30:48.214]             base::close(...future.stdout)
[09:30:48.214]         }, add = TRUE)
[09:30:48.214]     }
[09:30:48.214]     ...future.frame <- base::sys.nframe()
[09:30:48.214]     ...future.conditions <- base::list()
[09:30:48.214]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:48.214]     if (FALSE) {
[09:30:48.214]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:48.214]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:48.214]     }
[09:30:48.214]     ...future.result <- base::tryCatch({
[09:30:48.214]         base::withCallingHandlers({
[09:30:48.214]             ...future.value <- base::withVisible(base::local({
[09:30:48.214]                 sum(x, y, ...)
[09:30:48.214]             }))
[09:30:48.214]             future::FutureResult(value = ...future.value$value, 
[09:30:48.214]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.214]                   ...future.rng), globalenv = if (FALSE) 
[09:30:48.214]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:48.214]                     ...future.globalenv.names))
[09:30:48.214]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:48.214]         }, condition = base::local({
[09:30:48.214]             c <- base::c
[09:30:48.214]             inherits <- base::inherits
[09:30:48.214]             invokeRestart <- base::invokeRestart
[09:30:48.214]             length <- base::length
[09:30:48.214]             list <- base::list
[09:30:48.214]             seq.int <- base::seq.int
[09:30:48.214]             signalCondition <- base::signalCondition
[09:30:48.214]             sys.calls <- base::sys.calls
[09:30:48.214]             `[[` <- base::`[[`
[09:30:48.214]             `+` <- base::`+`
[09:30:48.214]             `<<-` <- base::`<<-`
[09:30:48.214]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:48.214]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:48.214]                   3L)]
[09:30:48.214]             }
[09:30:48.214]             function(cond) {
[09:30:48.214]                 is_error <- inherits(cond, "error")
[09:30:48.214]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:48.214]                   NULL)
[09:30:48.214]                 if (is_error) {
[09:30:48.214]                   sessionInformation <- function() {
[09:30:48.214]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:48.214]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:48.214]                       search = base::search(), system = base::Sys.info())
[09:30:48.214]                   }
[09:30:48.214]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.214]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:48.214]                     cond$call), session = sessionInformation(), 
[09:30:48.214]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:48.214]                   signalCondition(cond)
[09:30:48.214]                 }
[09:30:48.214]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:48.214]                 "immediateCondition"))) {
[09:30:48.214]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:48.214]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.214]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:48.214]                   if (TRUE && !signal) {
[09:30:48.214]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.214]                     {
[09:30:48.214]                       inherits <- base::inherits
[09:30:48.214]                       invokeRestart <- base::invokeRestart
[09:30:48.214]                       is.null <- base::is.null
[09:30:48.214]                       muffled <- FALSE
[09:30:48.214]                       if (inherits(cond, "message")) {
[09:30:48.214]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.214]                         if (muffled) 
[09:30:48.214]                           invokeRestart("muffleMessage")
[09:30:48.214]                       }
[09:30:48.214]                       else if (inherits(cond, "warning")) {
[09:30:48.214]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.214]                         if (muffled) 
[09:30:48.214]                           invokeRestart("muffleWarning")
[09:30:48.214]                       }
[09:30:48.214]                       else if (inherits(cond, "condition")) {
[09:30:48.214]                         if (!is.null(pattern)) {
[09:30:48.214]                           computeRestarts <- base::computeRestarts
[09:30:48.214]                           grepl <- base::grepl
[09:30:48.214]                           restarts <- computeRestarts(cond)
[09:30:48.214]                           for (restart in restarts) {
[09:30:48.214]                             name <- restart$name
[09:30:48.214]                             if (is.null(name)) 
[09:30:48.214]                               next
[09:30:48.214]                             if (!grepl(pattern, name)) 
[09:30:48.214]                               next
[09:30:48.214]                             invokeRestart(restart)
[09:30:48.214]                             muffled <- TRUE
[09:30:48.214]                             break
[09:30:48.214]                           }
[09:30:48.214]                         }
[09:30:48.214]                       }
[09:30:48.214]                       invisible(muffled)
[09:30:48.214]                     }
[09:30:48.214]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.214]                   }
[09:30:48.214]                 }
[09:30:48.214]                 else {
[09:30:48.214]                   if (TRUE) {
[09:30:48.214]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.214]                     {
[09:30:48.214]                       inherits <- base::inherits
[09:30:48.214]                       invokeRestart <- base::invokeRestart
[09:30:48.214]                       is.null <- base::is.null
[09:30:48.214]                       muffled <- FALSE
[09:30:48.214]                       if (inherits(cond, "message")) {
[09:30:48.214]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.214]                         if (muffled) 
[09:30:48.214]                           invokeRestart("muffleMessage")
[09:30:48.214]                       }
[09:30:48.214]                       else if (inherits(cond, "warning")) {
[09:30:48.214]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.214]                         if (muffled) 
[09:30:48.214]                           invokeRestart("muffleWarning")
[09:30:48.214]                       }
[09:30:48.214]                       else if (inherits(cond, "condition")) {
[09:30:48.214]                         if (!is.null(pattern)) {
[09:30:48.214]                           computeRestarts <- base::computeRestarts
[09:30:48.214]                           grepl <- base::grepl
[09:30:48.214]                           restarts <- computeRestarts(cond)
[09:30:48.214]                           for (restart in restarts) {
[09:30:48.214]                             name <- restart$name
[09:30:48.214]                             if (is.null(name)) 
[09:30:48.214]                               next
[09:30:48.214]                             if (!grepl(pattern, name)) 
[09:30:48.214]                               next
[09:30:48.214]                             invokeRestart(restart)
[09:30:48.214]                             muffled <- TRUE
[09:30:48.214]                             break
[09:30:48.214]                           }
[09:30:48.214]                         }
[09:30:48.214]                       }
[09:30:48.214]                       invisible(muffled)
[09:30:48.214]                     }
[09:30:48.214]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.214]                   }
[09:30:48.214]                 }
[09:30:48.214]             }
[09:30:48.214]         }))
[09:30:48.214]     }, error = function(ex) {
[09:30:48.214]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:48.214]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.214]                 ...future.rng), started = ...future.startTime, 
[09:30:48.214]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:48.214]             version = "1.8"), class = "FutureResult")
[09:30:48.214]     }, finally = {
[09:30:48.214]         if (!identical(...future.workdir, getwd())) 
[09:30:48.214]             setwd(...future.workdir)
[09:30:48.214]         {
[09:30:48.214]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:48.214]                 ...future.oldOptions$nwarnings <- NULL
[09:30:48.214]             }
[09:30:48.214]             base::options(...future.oldOptions)
[09:30:48.214]             if (.Platform$OS.type == "windows") {
[09:30:48.214]                 old_names <- names(...future.oldEnvVars)
[09:30:48.214]                 envs <- base::Sys.getenv()
[09:30:48.214]                 names <- names(envs)
[09:30:48.214]                 common <- intersect(names, old_names)
[09:30:48.214]                 added <- setdiff(names, old_names)
[09:30:48.214]                 removed <- setdiff(old_names, names)
[09:30:48.214]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:48.214]                   envs[common]]
[09:30:48.214]                 NAMES <- toupper(changed)
[09:30:48.214]                 args <- list()
[09:30:48.214]                 for (kk in seq_along(NAMES)) {
[09:30:48.214]                   name <- changed[[kk]]
[09:30:48.214]                   NAME <- NAMES[[kk]]
[09:30:48.214]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.214]                     next
[09:30:48.214]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.214]                 }
[09:30:48.214]                 NAMES <- toupper(added)
[09:30:48.214]                 for (kk in seq_along(NAMES)) {
[09:30:48.214]                   name <- added[[kk]]
[09:30:48.214]                   NAME <- NAMES[[kk]]
[09:30:48.214]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.214]                     next
[09:30:48.214]                   args[[name]] <- ""
[09:30:48.214]                 }
[09:30:48.214]                 NAMES <- toupper(removed)
[09:30:48.214]                 for (kk in seq_along(NAMES)) {
[09:30:48.214]                   name <- removed[[kk]]
[09:30:48.214]                   NAME <- NAMES[[kk]]
[09:30:48.214]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.214]                     next
[09:30:48.214]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.214]                 }
[09:30:48.214]                 if (length(args) > 0) 
[09:30:48.214]                   base::do.call(base::Sys.setenv, args = args)
[09:30:48.214]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:48.214]             }
[09:30:48.214]             else {
[09:30:48.214]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:48.214]             }
[09:30:48.214]             {
[09:30:48.214]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:48.214]                   0L) {
[09:30:48.214]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:48.214]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:48.214]                   base::options(opts)
[09:30:48.214]                 }
[09:30:48.214]                 {
[09:30:48.214]                   {
[09:30:48.214]                     NULL
[09:30:48.214]                     RNGkind("Mersenne-Twister")
[09:30:48.214]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:48.214]                       inherits = FALSE)
[09:30:48.214]                   }
[09:30:48.214]                   options(future.plan = NULL)
[09:30:48.214]                   if (is.na(NA_character_)) 
[09:30:48.214]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.214]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:48.214]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:48.214]                     .init = FALSE)
[09:30:48.214]                 }
[09:30:48.214]             }
[09:30:48.214]         }
[09:30:48.214]     })
[09:30:48.214]     if (TRUE) {
[09:30:48.214]         base::sink(type = "output", split = FALSE)
[09:30:48.214]         if (TRUE) {
[09:30:48.214]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:48.214]         }
[09:30:48.214]         else {
[09:30:48.214]             ...future.result["stdout"] <- base::list(NULL)
[09:30:48.214]         }
[09:30:48.214]         base::close(...future.stdout)
[09:30:48.214]         ...future.stdout <- NULL
[09:30:48.214]     }
[09:30:48.214]     ...future.result$conditions <- ...future.conditions
[09:30:48.214]     ...future.result$finished <- base::Sys.time()
[09:30:48.214]     ...future.result
[09:30:48.214] }
[09:30:48.216] assign_globals() ...
[09:30:48.216] List of 2
[09:30:48.216]  $ x: int [1:2] 1 2
[09:30:48.216]  $ y: num 3
[09:30:48.216]  - attr(*, "where")=List of 2
[09:30:48.216]   ..$ x:<environment: R_EmptyEnv> 
[09:30:48.216]   ..$ y:<environment: R_EmptyEnv> 
[09:30:48.216]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:48.216]  - attr(*, "resolved")= logi FALSE
[09:30:48.216]  - attr(*, "total_size")= num 112
[09:30:48.216]  - attr(*, "already-done")= logi TRUE
[09:30:48.218] - copied ‘x’ to environment
[09:30:48.219] - copied ‘y’ to environment
[09:30:48.219] assign_globals() ... done
[09:30:48.219] plan(): Setting new future strategy stack:
[09:30:48.219] List of future strategies:
[09:30:48.219] 1. sequential:
[09:30:48.219]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.219]    - tweaked: FALSE
[09:30:48.219]    - call: NULL
[09:30:48.219] plan(): nbrOfWorkers() = 1
[09:30:48.220] plan(): Setting new future strategy stack:
[09:30:48.220] List of future strategies:
[09:30:48.220] 1. sequential:
[09:30:48.220]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.220]    - tweaked: FALSE
[09:30:48.220]    - call: plan(strategy, substitute = FALSE)
[09:30:48.221] plan(): nbrOfWorkers() = 1
[09:30:48.221] SequentialFuture started (and completed)
[09:30:48.221] signalConditions() ...
[09:30:48.221]  - include = ‘immediateCondition’
[09:30:48.221]  - exclude = 
[09:30:48.221]  - resignal = FALSE
[09:30:48.221]  - Number of conditions: 1
[09:30:48.221] signalConditions() ... done
[09:30:48.221] - Launch lazy future ... done
[09:30:48.222] run() for ‘SequentialFuture’ ... done
[09:30:48.222] signalConditions() ...
[09:30:48.222]  - include = ‘immediateCondition’
[09:30:48.222]  - exclude = 
[09:30:48.222]  - resignal = FALSE
[09:30:48.222]  - Number of conditions: 1
[09:30:48.222] signalConditions() ... done
[09:30:48.223] Future state: ‘finished’
[09:30:48.223] signalConditions() ...
[09:30:48.223]  - include = ‘condition’
[09:30:48.224]  - exclude = ‘immediateCondition’
[09:30:48.224]  - resignal = TRUE
[09:30:48.224]  - Number of conditions: 1
[09:30:48.224]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:30:48.224] signalConditions() ... done
Error in eval(quote({ : '...' used in an incorrect context
[1] "Error in eval(quote({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    sum(x, y, ...)}), new.env()): '...' used in an incorrect context>
** Sum function 'E' with plan('sequential') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x559329b9b798>
Arguments '...' exists: TRUE
[09:30:48.225] getGlobalsAndPackages() ...
[09:30:48.225] - globals passed as-is: [1] ‘...’
[09:30:48.225] Resolving globals: FALSE
[09:30:48.225] Tweak future expression to call with '...' arguments ...
[09:30:48.225] {
[09:30:48.225]     do.call(function(...) {
[09:30:48.225]         fcn <- function() sum(...)
[09:30:48.225]         fcn()
[09:30:48.225]     }, args = future.call.arguments)
[09:30:48.225] }
[09:30:48.225] Tweak future expression to call with '...' arguments ... DONE
[09:30:48.226] The total size of the 1 globals is 112 bytes (112 bytes)
[09:30:48.226] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[09:30:48.226] - globals: [1] ‘future.call.arguments’
[09:30:48.226] 
[09:30:48.226] getGlobalsAndPackages() ... DONE
[09:30:48.226] run() for ‘Future’ ...
[09:30:48.226] - state: ‘created’
[09:30:48.227] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:48.227] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:48.227] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:48.227]   - Field: ‘label’
[09:30:48.227]   - Field: ‘local’
[09:30:48.227]   - Field: ‘owner’
[09:30:48.227]   - Field: ‘envir’
[09:30:48.227]   - Field: ‘packages’
[09:30:48.227]   - Field: ‘gc’
[09:30:48.228]   - Field: ‘conditions’
[09:30:48.228]   - Field: ‘expr’
[09:30:48.228]   - Field: ‘uuid’
[09:30:48.228]   - Field: ‘seed’
[09:30:48.228]   - Field: ‘version’
[09:30:48.228]   - Field: ‘result’
[09:30:48.228]   - Field: ‘asynchronous’
[09:30:48.228]   - Field: ‘calls’
[09:30:48.228]   - Field: ‘globals’
[09:30:48.228]   - Field: ‘stdout’
[09:30:48.228]   - Field: ‘earlySignal’
[09:30:48.229]   - Field: ‘lazy’
[09:30:48.229]   - Field: ‘state’
[09:30:48.229] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:48.229] - Launch lazy future ...
[09:30:48.229] Packages needed by the future expression (n = 0): <none>
[09:30:48.229] Packages needed by future strategies (n = 0): <none>
[09:30:48.229] {
[09:30:48.229]     {
[09:30:48.229]         {
[09:30:48.229]             ...future.startTime <- base::Sys.time()
[09:30:48.229]             {
[09:30:48.229]                 {
[09:30:48.229]                   {
[09:30:48.229]                     base::local({
[09:30:48.229]                       has_future <- base::requireNamespace("future", 
[09:30:48.229]                         quietly = TRUE)
[09:30:48.229]                       if (has_future) {
[09:30:48.229]                         ns <- base::getNamespace("future")
[09:30:48.229]                         version <- ns[[".package"]][["version"]]
[09:30:48.229]                         if (is.null(version)) 
[09:30:48.229]                           version <- utils::packageVersion("future")
[09:30:48.229]                       }
[09:30:48.229]                       else {
[09:30:48.229]                         version <- NULL
[09:30:48.229]                       }
[09:30:48.229]                       if (!has_future || version < "1.8.0") {
[09:30:48.229]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:48.229]                           "", base::R.version$version.string), 
[09:30:48.229]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:48.229]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:48.229]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:48.229]                             "release", "version")], collapse = " "), 
[09:30:48.229]                           hostname = base::Sys.info()[["nodename"]])
[09:30:48.229]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:48.229]                           info)
[09:30:48.229]                         info <- base::paste(info, collapse = "; ")
[09:30:48.229]                         if (!has_future) {
[09:30:48.229]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:48.229]                             info)
[09:30:48.229]                         }
[09:30:48.229]                         else {
[09:30:48.229]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:48.229]                             info, version)
[09:30:48.229]                         }
[09:30:48.229]                         base::stop(msg)
[09:30:48.229]                       }
[09:30:48.229]                     })
[09:30:48.229]                   }
[09:30:48.229]                   ...future.strategy.old <- future::plan("list")
[09:30:48.229]                   options(future.plan = NULL)
[09:30:48.229]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.229]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:48.229]                 }
[09:30:48.229]                 ...future.workdir <- getwd()
[09:30:48.229]             }
[09:30:48.229]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:48.229]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:48.229]         }
[09:30:48.229]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:48.229]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:48.229]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:48.229]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:48.229]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:48.229]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:48.229]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:48.229]             base::names(...future.oldOptions))
[09:30:48.229]     }
[09:30:48.229]     if (FALSE) {
[09:30:48.229]     }
[09:30:48.229]     else {
[09:30:48.229]         if (TRUE) {
[09:30:48.229]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:48.229]                 open = "w")
[09:30:48.229]         }
[09:30:48.229]         else {
[09:30:48.229]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:48.229]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:48.229]         }
[09:30:48.229]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:48.229]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:48.229]             base::sink(type = "output", split = FALSE)
[09:30:48.229]             base::close(...future.stdout)
[09:30:48.229]         }, add = TRUE)
[09:30:48.229]     }
[09:30:48.229]     ...future.frame <- base::sys.nframe()
[09:30:48.229]     ...future.conditions <- base::list()
[09:30:48.229]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:48.229]     if (FALSE) {
[09:30:48.229]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:48.229]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:48.229]     }
[09:30:48.229]     ...future.result <- base::tryCatch({
[09:30:48.229]         base::withCallingHandlers({
[09:30:48.229]             ...future.value <- base::withVisible(base::local({
[09:30:48.229]                 do.call(function(...) {
[09:30:48.229]                   fcn <- function() sum(...)
[09:30:48.229]                   fcn()
[09:30:48.229]                 }, args = future.call.arguments)
[09:30:48.229]             }))
[09:30:48.229]             future::FutureResult(value = ...future.value$value, 
[09:30:48.229]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.229]                   ...future.rng), globalenv = if (FALSE) 
[09:30:48.229]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:48.229]                     ...future.globalenv.names))
[09:30:48.229]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:48.229]         }, condition = base::local({
[09:30:48.229]             c <- base::c
[09:30:48.229]             inherits <- base::inherits
[09:30:48.229]             invokeRestart <- base::invokeRestart
[09:30:48.229]             length <- base::length
[09:30:48.229]             list <- base::list
[09:30:48.229]             seq.int <- base::seq.int
[09:30:48.229]             signalCondition <- base::signalCondition
[09:30:48.229]             sys.calls <- base::sys.calls
[09:30:48.229]             `[[` <- base::`[[`
[09:30:48.229]             `+` <- base::`+`
[09:30:48.229]             `<<-` <- base::`<<-`
[09:30:48.229]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:48.229]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:48.229]                   3L)]
[09:30:48.229]             }
[09:30:48.229]             function(cond) {
[09:30:48.229]                 is_error <- inherits(cond, "error")
[09:30:48.229]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:48.229]                   NULL)
[09:30:48.229]                 if (is_error) {
[09:30:48.229]                   sessionInformation <- function() {
[09:30:48.229]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:48.229]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:48.229]                       search = base::search(), system = base::Sys.info())
[09:30:48.229]                   }
[09:30:48.229]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.229]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:48.229]                     cond$call), session = sessionInformation(), 
[09:30:48.229]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:48.229]                   signalCondition(cond)
[09:30:48.229]                 }
[09:30:48.229]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:48.229]                 "immediateCondition"))) {
[09:30:48.229]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:48.229]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.229]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:48.229]                   if (TRUE && !signal) {
[09:30:48.229]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.229]                     {
[09:30:48.229]                       inherits <- base::inherits
[09:30:48.229]                       invokeRestart <- base::invokeRestart
[09:30:48.229]                       is.null <- base::is.null
[09:30:48.229]                       muffled <- FALSE
[09:30:48.229]                       if (inherits(cond, "message")) {
[09:30:48.229]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.229]                         if (muffled) 
[09:30:48.229]                           invokeRestart("muffleMessage")
[09:30:48.229]                       }
[09:30:48.229]                       else if (inherits(cond, "warning")) {
[09:30:48.229]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.229]                         if (muffled) 
[09:30:48.229]                           invokeRestart("muffleWarning")
[09:30:48.229]                       }
[09:30:48.229]                       else if (inherits(cond, "condition")) {
[09:30:48.229]                         if (!is.null(pattern)) {
[09:30:48.229]                           computeRestarts <- base::computeRestarts
[09:30:48.229]                           grepl <- base::grepl
[09:30:48.229]                           restarts <- computeRestarts(cond)
[09:30:48.229]                           for (restart in restarts) {
[09:30:48.229]                             name <- restart$name
[09:30:48.229]                             if (is.null(name)) 
[09:30:48.229]                               next
[09:30:48.229]                             if (!grepl(pattern, name)) 
[09:30:48.229]                               next
[09:30:48.229]                             invokeRestart(restart)
[09:30:48.229]                             muffled <- TRUE
[09:30:48.229]                             break
[09:30:48.229]                           }
[09:30:48.229]                         }
[09:30:48.229]                       }
[09:30:48.229]                       invisible(muffled)
[09:30:48.229]                     }
[09:30:48.229]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.229]                   }
[09:30:48.229]                 }
[09:30:48.229]                 else {
[09:30:48.229]                   if (TRUE) {
[09:30:48.229]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.229]                     {
[09:30:48.229]                       inherits <- base::inherits
[09:30:48.229]                       invokeRestart <- base::invokeRestart
[09:30:48.229]                       is.null <- base::is.null
[09:30:48.229]                       muffled <- FALSE
[09:30:48.229]                       if (inherits(cond, "message")) {
[09:30:48.229]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.229]                         if (muffled) 
[09:30:48.229]                           invokeRestart("muffleMessage")
[09:30:48.229]                       }
[09:30:48.229]                       else if (inherits(cond, "warning")) {
[09:30:48.229]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.229]                         if (muffled) 
[09:30:48.229]                           invokeRestart("muffleWarning")
[09:30:48.229]                       }
[09:30:48.229]                       else if (inherits(cond, "condition")) {
[09:30:48.229]                         if (!is.null(pattern)) {
[09:30:48.229]                           computeRestarts <- base::computeRestarts
[09:30:48.229]                           grepl <- base::grepl
[09:30:48.229]                           restarts <- computeRestarts(cond)
[09:30:48.229]                           for (restart in restarts) {
[09:30:48.229]                             name <- restart$name
[09:30:48.229]                             if (is.null(name)) 
[09:30:48.229]                               next
[09:30:48.229]                             if (!grepl(pattern, name)) 
[09:30:48.229]                               next
[09:30:48.229]                             invokeRestart(restart)
[09:30:48.229]                             muffled <- TRUE
[09:30:48.229]                             break
[09:30:48.229]                           }
[09:30:48.229]                         }
[09:30:48.229]                       }
[09:30:48.229]                       invisible(muffled)
[09:30:48.229]                     }
[09:30:48.229]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.229]                   }
[09:30:48.229]                 }
[09:30:48.229]             }
[09:30:48.229]         }))
[09:30:48.229]     }, error = function(ex) {
[09:30:48.229]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:48.229]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.229]                 ...future.rng), started = ...future.startTime, 
[09:30:48.229]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:48.229]             version = "1.8"), class = "FutureResult")
[09:30:48.229]     }, finally = {
[09:30:48.229]         if (!identical(...future.workdir, getwd())) 
[09:30:48.229]             setwd(...future.workdir)
[09:30:48.229]         {
[09:30:48.229]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:48.229]                 ...future.oldOptions$nwarnings <- NULL
[09:30:48.229]             }
[09:30:48.229]             base::options(...future.oldOptions)
[09:30:48.229]             if (.Platform$OS.type == "windows") {
[09:30:48.229]                 old_names <- names(...future.oldEnvVars)
[09:30:48.229]                 envs <- base::Sys.getenv()
[09:30:48.229]                 names <- names(envs)
[09:30:48.229]                 common <- intersect(names, old_names)
[09:30:48.229]                 added <- setdiff(names, old_names)
[09:30:48.229]                 removed <- setdiff(old_names, names)
[09:30:48.229]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:48.229]                   envs[common]]
[09:30:48.229]                 NAMES <- toupper(changed)
[09:30:48.229]                 args <- list()
[09:30:48.229]                 for (kk in seq_along(NAMES)) {
[09:30:48.229]                   name <- changed[[kk]]
[09:30:48.229]                   NAME <- NAMES[[kk]]
[09:30:48.229]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.229]                     next
[09:30:48.229]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.229]                 }
[09:30:48.229]                 NAMES <- toupper(added)
[09:30:48.229]                 for (kk in seq_along(NAMES)) {
[09:30:48.229]                   name <- added[[kk]]
[09:30:48.229]                   NAME <- NAMES[[kk]]
[09:30:48.229]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.229]                     next
[09:30:48.229]                   args[[name]] <- ""
[09:30:48.229]                 }
[09:30:48.229]                 NAMES <- toupper(removed)
[09:30:48.229]                 for (kk in seq_along(NAMES)) {
[09:30:48.229]                   name <- removed[[kk]]
[09:30:48.229]                   NAME <- NAMES[[kk]]
[09:30:48.229]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.229]                     next
[09:30:48.229]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.229]                 }
[09:30:48.229]                 if (length(args) > 0) 
[09:30:48.229]                   base::do.call(base::Sys.setenv, args = args)
[09:30:48.229]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:48.229]             }
[09:30:48.229]             else {
[09:30:48.229]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:48.229]             }
[09:30:48.229]             {
[09:30:48.229]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:48.229]                   0L) {
[09:30:48.229]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:48.229]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:48.229]                   base::options(opts)
[09:30:48.229]                 }
[09:30:48.229]                 {
[09:30:48.229]                   {
[09:30:48.229]                     NULL
[09:30:48.229]                     RNGkind("Mersenne-Twister")
[09:30:48.229]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:48.229]                       inherits = FALSE)
[09:30:48.229]                   }
[09:30:48.229]                   options(future.plan = NULL)
[09:30:48.229]                   if (is.na(NA_character_)) 
[09:30:48.229]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.229]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:48.229]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:48.229]                     .init = FALSE)
[09:30:48.229]                 }
[09:30:48.229]             }
[09:30:48.229]         }
[09:30:48.229]     })
[09:30:48.229]     if (TRUE) {
[09:30:48.229]         base::sink(type = "output", split = FALSE)
[09:30:48.229]         if (TRUE) {
[09:30:48.229]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:48.229]         }
[09:30:48.229]         else {
[09:30:48.229]             ...future.result["stdout"] <- base::list(NULL)
[09:30:48.229]         }
[09:30:48.229]         base::close(...future.stdout)
[09:30:48.229]         ...future.stdout <- NULL
[09:30:48.229]     }
[09:30:48.229]     ...future.result$conditions <- ...future.conditions
[09:30:48.229]     ...future.result$finished <- base::Sys.time()
[09:30:48.229]     ...future.result
[09:30:48.229] }
[09:30:48.231] assign_globals() ...
[09:30:48.231] List of 1
[09:30:48.231]  $ future.call.arguments:List of 2
[09:30:48.231]   ..$ : int [1:2] 1 2
[09:30:48.231]   ..$ : num 3
[09:30:48.231]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:30:48.231]  - attr(*, "where")=List of 1
[09:30:48.231]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[09:30:48.231]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:48.231]  - attr(*, "resolved")= logi FALSE
[09:30:48.231]  - attr(*, "total_size")= num 112
[09:30:48.231]  - attr(*, "already-done")= logi TRUE
[09:30:48.234] - copied ‘future.call.arguments’ to environment
[09:30:48.234] assign_globals() ... done
[09:30:48.234] plan(): Setting new future strategy stack:
[09:30:48.234] List of future strategies:
[09:30:48.234] 1. sequential:
[09:30:48.234]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.234]    - tweaked: FALSE
[09:30:48.234]    - call: NULL
[09:30:48.235] plan(): nbrOfWorkers() = 1
[09:30:48.236] plan(): Setting new future strategy stack:
[09:30:48.236] List of future strategies:
[09:30:48.236] 1. sequential:
[09:30:48.236]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.236]    - tweaked: FALSE
[09:30:48.236]    - call: plan(strategy, substitute = FALSE)
[09:30:48.236] plan(): nbrOfWorkers() = 1
[09:30:48.236] SequentialFuture started (and completed)
[09:30:48.236] - Launch lazy future ... done
[09:30:48.236] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'F' with plan('sequential') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x559327be1d68>
Using '...' in a formula
[09:30:48.237] getGlobalsAndPackages() ...
[09:30:48.237] Searching for globals...
[09:30:48.240] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[09:30:48.240] Searching for globals ... DONE
[09:30:48.240] Resolving globals: FALSE
[09:30:48.240] Tweak future expression to call with '...' arguments ...
[09:30:48.240] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[09:30:48.241] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[09:30:48.241] - globals: [3] ‘fcn’, ‘x’, ‘y’
[09:30:48.241] 
[09:30:48.241] getGlobalsAndPackages() ... DONE
[09:30:48.241] run() for ‘Future’ ...
[09:30:48.242] - state: ‘created’
[09:30:48.242] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:30:48.242] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:30:48.242] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:30:48.242]   - Field: ‘label’
[09:30:48.242]   - Field: ‘local’
[09:30:48.242]   - Field: ‘owner’
[09:30:48.242]   - Field: ‘envir’
[09:30:48.242]   - Field: ‘packages’
[09:30:48.243]   - Field: ‘gc’
[09:30:48.243]   - Field: ‘conditions’
[09:30:48.243]   - Field: ‘expr’
[09:30:48.243]   - Field: ‘uuid’
[09:30:48.243]   - Field: ‘seed’
[09:30:48.243]   - Field: ‘version’
[09:30:48.243]   - Field: ‘result’
[09:30:48.243]   - Field: ‘asynchronous’
[09:30:48.243]   - Field: ‘calls’
[09:30:48.243]   - Field: ‘globals’
[09:30:48.243]   - Field: ‘stdout’
[09:30:48.244]   - Field: ‘earlySignal’
[09:30:48.244]   - Field: ‘lazy’
[09:30:48.244]   - Field: ‘state’
[09:30:48.244] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:30:48.244] - Launch lazy future ...
[09:30:48.244] Packages needed by the future expression (n = 0): <none>
[09:30:48.244] Packages needed by future strategies (n = 0): <none>
[09:30:48.245] {
[09:30:48.245]     {
[09:30:48.245]         {
[09:30:48.245]             ...future.startTime <- base::Sys.time()
[09:30:48.245]             {
[09:30:48.245]                 {
[09:30:48.245]                   {
[09:30:48.245]                     base::local({
[09:30:48.245]                       has_future <- base::requireNamespace("future", 
[09:30:48.245]                         quietly = TRUE)
[09:30:48.245]                       if (has_future) {
[09:30:48.245]                         ns <- base::getNamespace("future")
[09:30:48.245]                         version <- ns[[".package"]][["version"]]
[09:30:48.245]                         if (is.null(version)) 
[09:30:48.245]                           version <- utils::packageVersion("future")
[09:30:48.245]                       }
[09:30:48.245]                       else {
[09:30:48.245]                         version <- NULL
[09:30:48.245]                       }
[09:30:48.245]                       if (!has_future || version < "1.8.0") {
[09:30:48.245]                         info <- base::c(r_version = base::gsub("R version ", 
[09:30:48.245]                           "", base::R.version$version.string), 
[09:30:48.245]                           platform = base::sprintf("%s (%s-bit)", 
[09:30:48.245]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:48.245]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:48.245]                             "release", "version")], collapse = " "), 
[09:30:48.245]                           hostname = base::Sys.info()[["nodename"]])
[09:30:48.245]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:30:48.245]                           info)
[09:30:48.245]                         info <- base::paste(info, collapse = "; ")
[09:30:48.245]                         if (!has_future) {
[09:30:48.245]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:48.245]                             info)
[09:30:48.245]                         }
[09:30:48.245]                         else {
[09:30:48.245]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:48.245]                             info, version)
[09:30:48.245]                         }
[09:30:48.245]                         base::stop(msg)
[09:30:48.245]                       }
[09:30:48.245]                     })
[09:30:48.245]                   }
[09:30:48.245]                   ...future.strategy.old <- future::plan("list")
[09:30:48.245]                   options(future.plan = NULL)
[09:30:48.245]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.245]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:48.245]                 }
[09:30:48.245]                 ...future.workdir <- getwd()
[09:30:48.245]             }
[09:30:48.245]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:48.245]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:48.245]         }
[09:30:48.245]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:48.245]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:48.245]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:48.245]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:48.245]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:48.245]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:48.245]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:48.245]             base::names(...future.oldOptions))
[09:30:48.245]     }
[09:30:48.245]     if (FALSE) {
[09:30:48.245]     }
[09:30:48.245]     else {
[09:30:48.245]         if (TRUE) {
[09:30:48.245]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:48.245]                 open = "w")
[09:30:48.245]         }
[09:30:48.245]         else {
[09:30:48.245]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:48.245]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:48.245]         }
[09:30:48.245]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:48.245]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:48.245]             base::sink(type = "output", split = FALSE)
[09:30:48.245]             base::close(...future.stdout)
[09:30:48.245]         }, add = TRUE)
[09:30:48.245]     }
[09:30:48.245]     ...future.frame <- base::sys.nframe()
[09:30:48.245]     ...future.conditions <- base::list()
[09:30:48.245]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:48.245]     if (FALSE) {
[09:30:48.245]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:48.245]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:48.245]     }
[09:30:48.245]     ...future.result <- base::tryCatch({
[09:30:48.245]         base::withCallingHandlers({
[09:30:48.245]             ...future.value <- base::withVisible(base::local(fcn(x, 
[09:30:48.245]                 y)))
[09:30:48.245]             future::FutureResult(value = ...future.value$value, 
[09:30:48.245]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.245]                   ...future.rng), globalenv = if (FALSE) 
[09:30:48.245]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:48.245]                     ...future.globalenv.names))
[09:30:48.245]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:48.245]         }, condition = base::local({
[09:30:48.245]             c <- base::c
[09:30:48.245]             inherits <- base::inherits
[09:30:48.245]             invokeRestart <- base::invokeRestart
[09:30:48.245]             length <- base::length
[09:30:48.245]             list <- base::list
[09:30:48.245]             seq.int <- base::seq.int
[09:30:48.245]             signalCondition <- base::signalCondition
[09:30:48.245]             sys.calls <- base::sys.calls
[09:30:48.245]             `[[` <- base::`[[`
[09:30:48.245]             `+` <- base::`+`
[09:30:48.245]             `<<-` <- base::`<<-`
[09:30:48.245]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:48.245]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:48.245]                   3L)]
[09:30:48.245]             }
[09:30:48.245]             function(cond) {
[09:30:48.245]                 is_error <- inherits(cond, "error")
[09:30:48.245]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:48.245]                   NULL)
[09:30:48.245]                 if (is_error) {
[09:30:48.245]                   sessionInformation <- function() {
[09:30:48.245]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:48.245]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:48.245]                       search = base::search(), system = base::Sys.info())
[09:30:48.245]                   }
[09:30:48.245]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.245]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:48.245]                     cond$call), session = sessionInformation(), 
[09:30:48.245]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:48.245]                   signalCondition(cond)
[09:30:48.245]                 }
[09:30:48.245]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:48.245]                 "immediateCondition"))) {
[09:30:48.245]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:48.245]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.245]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:48.245]                   if (TRUE && !signal) {
[09:30:48.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.245]                     {
[09:30:48.245]                       inherits <- base::inherits
[09:30:48.245]                       invokeRestart <- base::invokeRestart
[09:30:48.245]                       is.null <- base::is.null
[09:30:48.245]                       muffled <- FALSE
[09:30:48.245]                       if (inherits(cond, "message")) {
[09:30:48.245]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.245]                         if (muffled) 
[09:30:48.245]                           invokeRestart("muffleMessage")
[09:30:48.245]                       }
[09:30:48.245]                       else if (inherits(cond, "warning")) {
[09:30:48.245]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.245]                         if (muffled) 
[09:30:48.245]                           invokeRestart("muffleWarning")
[09:30:48.245]                       }
[09:30:48.245]                       else if (inherits(cond, "condition")) {
[09:30:48.245]                         if (!is.null(pattern)) {
[09:30:48.245]                           computeRestarts <- base::computeRestarts
[09:30:48.245]                           grepl <- base::grepl
[09:30:48.245]                           restarts <- computeRestarts(cond)
[09:30:48.245]                           for (restart in restarts) {
[09:30:48.245]                             name <- restart$name
[09:30:48.245]                             if (is.null(name)) 
[09:30:48.245]                               next
[09:30:48.245]                             if (!grepl(pattern, name)) 
[09:30:48.245]                               next
[09:30:48.245]                             invokeRestart(restart)
[09:30:48.245]                             muffled <- TRUE
[09:30:48.245]                             break
[09:30:48.245]                           }
[09:30:48.245]                         }
[09:30:48.245]                       }
[09:30:48.245]                       invisible(muffled)
[09:30:48.245]                     }
[09:30:48.245]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.245]                   }
[09:30:48.245]                 }
[09:30:48.245]                 else {
[09:30:48.245]                   if (TRUE) {
[09:30:48.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.245]                     {
[09:30:48.245]                       inherits <- base::inherits
[09:30:48.245]                       invokeRestart <- base::invokeRestart
[09:30:48.245]                       is.null <- base::is.null
[09:30:48.245]                       muffled <- FALSE
[09:30:48.245]                       if (inherits(cond, "message")) {
[09:30:48.245]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.245]                         if (muffled) 
[09:30:48.245]                           invokeRestart("muffleMessage")
[09:30:48.245]                       }
[09:30:48.245]                       else if (inherits(cond, "warning")) {
[09:30:48.245]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.245]                         if (muffled) 
[09:30:48.245]                           invokeRestart("muffleWarning")
[09:30:48.245]                       }
[09:30:48.245]                       else if (inherits(cond, "condition")) {
[09:30:48.245]                         if (!is.null(pattern)) {
[09:30:48.245]                           computeRestarts <- base::computeRestarts
[09:30:48.245]                           grepl <- base::grepl
[09:30:48.245]                           restarts <- computeRestarts(cond)
[09:30:48.245]                           for (restart in restarts) {
[09:30:48.245]                             name <- restart$name
[09:30:48.245]                             if (is.null(name)) 
[09:30:48.245]                               next
[09:30:48.245]                             if (!grepl(pattern, name)) 
[09:30:48.245]                               next
[09:30:48.245]                             invokeRestart(restart)
[09:30:48.245]                             muffled <- TRUE
[09:30:48.245]                             break
[09:30:48.245]                           }
[09:30:48.245]                         }
[09:30:48.245]                       }
[09:30:48.245]                       invisible(muffled)
[09:30:48.245]                     }
[09:30:48.245]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.245]                   }
[09:30:48.245]                 }
[09:30:48.245]             }
[09:30:48.245]         }))
[09:30:48.245]     }, error = function(ex) {
[09:30:48.245]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:48.245]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.245]                 ...future.rng), started = ...future.startTime, 
[09:30:48.245]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:48.245]             version = "1.8"), class = "FutureResult")
[09:30:48.245]     }, finally = {
[09:30:48.245]         if (!identical(...future.workdir, getwd())) 
[09:30:48.245]             setwd(...future.workdir)
[09:30:48.245]         {
[09:30:48.245]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:48.245]                 ...future.oldOptions$nwarnings <- NULL
[09:30:48.245]             }
[09:30:48.245]             base::options(...future.oldOptions)
[09:30:48.245]             if (.Platform$OS.type == "windows") {
[09:30:48.245]                 old_names <- names(...future.oldEnvVars)
[09:30:48.245]                 envs <- base::Sys.getenv()
[09:30:48.245]                 names <- names(envs)
[09:30:48.245]                 common <- intersect(names, old_names)
[09:30:48.245]                 added <- setdiff(names, old_names)
[09:30:48.245]                 removed <- setdiff(old_names, names)
[09:30:48.245]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:48.245]                   envs[common]]
[09:30:48.245]                 NAMES <- toupper(changed)
[09:30:48.245]                 args <- list()
[09:30:48.245]                 for (kk in seq_along(NAMES)) {
[09:30:48.245]                   name <- changed[[kk]]
[09:30:48.245]                   NAME <- NAMES[[kk]]
[09:30:48.245]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.245]                     next
[09:30:48.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.245]                 }
[09:30:48.245]                 NAMES <- toupper(added)
[09:30:48.245]                 for (kk in seq_along(NAMES)) {
[09:30:48.245]                   name <- added[[kk]]
[09:30:48.245]                   NAME <- NAMES[[kk]]
[09:30:48.245]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.245]                     next
[09:30:48.245]                   args[[name]] <- ""
[09:30:48.245]                 }
[09:30:48.245]                 NAMES <- toupper(removed)
[09:30:48.245]                 for (kk in seq_along(NAMES)) {
[09:30:48.245]                   name <- removed[[kk]]
[09:30:48.245]                   NAME <- NAMES[[kk]]
[09:30:48.245]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.245]                     next
[09:30:48.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.245]                 }
[09:30:48.245]                 if (length(args) > 0) 
[09:30:48.245]                   base::do.call(base::Sys.setenv, args = args)
[09:30:48.245]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:48.245]             }
[09:30:48.245]             else {
[09:30:48.245]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:48.245]             }
[09:30:48.245]             {
[09:30:48.245]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:48.245]                   0L) {
[09:30:48.245]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:48.245]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:48.245]                   base::options(opts)
[09:30:48.245]                 }
[09:30:48.245]                 {
[09:30:48.245]                   {
[09:30:48.245]                     NULL
[09:30:48.245]                     RNGkind("Mersenne-Twister")
[09:30:48.245]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:30:48.245]                       inherits = FALSE)
[09:30:48.245]                   }
[09:30:48.245]                   options(future.plan = NULL)
[09:30:48.245]                   if (is.na(NA_character_)) 
[09:30:48.245]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.245]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:48.245]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:48.245]                     .init = FALSE)
[09:30:48.245]                 }
[09:30:48.245]             }
[09:30:48.245]         }
[09:30:48.245]     })
[09:30:48.245]     if (TRUE) {
[09:30:48.245]         base::sink(type = "output", split = FALSE)
[09:30:48.245]         if (TRUE) {
[09:30:48.245]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:48.245]         }
[09:30:48.245]         else {
[09:30:48.245]             ...future.result["stdout"] <- base::list(NULL)
[09:30:48.245]         }
[09:30:48.245]         base::close(...future.stdout)
[09:30:48.245]         ...future.stdout <- NULL
[09:30:48.245]     }
[09:30:48.245]     ...future.result$conditions <- ...future.conditions
[09:30:48.245]     ...future.result$finished <- base::Sys.time()
[09:30:48.245]     ...future.result
[09:30:48.245] }
[09:30:48.246] assign_globals() ...
[09:30:48.246] List of 3
[09:30:48.246]  $ fcn:function (x, y)  
[09:30:48.246]  $ x  : int [1:2] 1 2
[09:30:48.246]  $ y  : num 3
[09:30:48.246]  - attr(*, "where")=List of 3
[09:30:48.246]   ..$ fcn:<environment: R_EmptyEnv> 
[09:30:48.246]   ..$ x  :<environment: R_EmptyEnv> 
[09:30:48.246]   ..$ y  :<environment: R_EmptyEnv> 
[09:30:48.246]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:48.246]  - attr(*, "resolved")= logi FALSE
[09:30:48.246]  - attr(*, "total_size")= num 4280
[09:30:48.246]  - attr(*, "already-done")= logi TRUE
[09:30:48.249] - reassign environment for ‘fcn’
[09:30:48.250] - copied ‘fcn’ to environment
[09:30:48.250] - copied ‘x’ to environment
[09:30:48.250] - copied ‘y’ to environment
[09:30:48.250] assign_globals() ... done
[09:30:48.250] plan(): Setting new future strategy stack:
[09:30:48.250] List of future strategies:
[09:30:48.250] 1. sequential:
[09:30:48.250]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.250]    - tweaked: FALSE
[09:30:48.250]    - call: NULL
[09:30:48.252] plan(): nbrOfWorkers() = 1
[09:30:48.252] plan(): Setting new future strategy stack:
[09:30:48.253] List of future strategies:
[09:30:48.253] 1. sequential:
[09:30:48.253]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.253]    - tweaked: FALSE
[09:30:48.253]    - call: plan(strategy, substitute = FALSE)
[09:30:48.253] plan(): nbrOfWorkers() = 1
[09:30:48.253] SequentialFuture started (and completed)
[09:30:48.253] - Launch lazy future ... done
[09:30:48.253] run() for ‘SequentialFuture’ ... done
[1] 6
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** Global argument '...' ...
- plan('multicore') ...
[09:30:48.258] plan(): Setting new future strategy stack:
[09:30:48.259] List of future strategies:
[09:30:48.259] 1. multicore:
[09:30:48.259]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:30:48.259]    - tweaked: FALSE
[09:30:48.259]    - call: plan(strategy, substitute = FALSE)
[09:30:48.262] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multicore') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x559328ebe960>
Arguments '...' exists: TRUE
[09:30:48.263] getGlobalsAndPackages() ...
[09:30:48.263] Searching for globals...
[09:30:48.264] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[09:30:48.264] Searching for globals ... DONE
[09:30:48.264] Resolving globals: FALSE
[09:30:48.264] Tweak future expression to call with '...' arguments ...
[09:30:48.264] {
[09:30:48.264]     do.call(function(...) {
[09:30:48.264]         sum(x, ...)
[09:30:48.264]     }, args = future.call.arguments)
[09:30:48.264] }
[09:30:48.265] Tweak future expression to call with '...' arguments ... DONE
[09:30:48.265] The total size of the 2 globals is 112 bytes (112 bytes)
[09:30:48.265] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[09:30:48.265] - globals: [2] ‘x’, ‘future.call.arguments’
[09:30:48.266] 
[09:30:48.266] getGlobalsAndPackages() ... DONE
[09:30:48.266] run() for ‘Future’ ...
[09:30:48.266] - state: ‘created’
[09:30:48.266] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:30:48.269] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:48.270] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:30:48.270]   - Field: ‘label’
[09:30:48.271]   - Field: ‘local’
[09:30:48.271]   - Field: ‘owner’
[09:30:48.272]   - Field: ‘envir’
[09:30:48.272]   - Field: ‘workers’
[09:30:48.273]   - Field: ‘packages’
[09:30:48.273]   - Field: ‘gc’
[09:30:48.273]   - Field: ‘job’
[09:30:48.274]   - Field: ‘conditions’
[09:30:48.274]   - Field: ‘expr’
[09:30:48.275]   - Field: ‘uuid’
[09:30:48.275]   - Field: ‘seed’
[09:30:48.275]   - Field: ‘version’
[09:30:48.276]   - Field: ‘result’
[09:30:48.276]   - Field: ‘asynchronous’
[09:30:48.277]   - Field: ‘calls’
[09:30:48.277]   - Field: ‘globals’
[09:30:48.278]   - Field: ‘stdout’
[09:30:48.278]   - Field: ‘earlySignal’
[09:30:48.278]   - Field: ‘lazy’
[09:30:48.279]   - Field: ‘state’
[09:30:48.279] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:30:48.279] - Launch lazy future ...
[09:30:48.281] Packages needed by the future expression (n = 0): <none>
[09:30:48.282] Packages needed by future strategies (n = 0): <none>
[09:30:48.283] {
[09:30:48.283]     {
[09:30:48.283]         {
[09:30:48.283]             ...future.startTime <- base::Sys.time()
[09:30:48.283]             {
[09:30:48.283]                 {
[09:30:48.283]                   {
[09:30:48.283]                     {
[09:30:48.283]                       base::local({
[09:30:48.283]                         has_future <- base::requireNamespace("future", 
[09:30:48.283]                           quietly = TRUE)
[09:30:48.283]                         if (has_future) {
[09:30:48.283]                           ns <- base::getNamespace("future")
[09:30:48.283]                           version <- ns[[".package"]][["version"]]
[09:30:48.283]                           if (is.null(version)) 
[09:30:48.283]                             version <- utils::packageVersion("future")
[09:30:48.283]                         }
[09:30:48.283]                         else {
[09:30:48.283]                           version <- NULL
[09:30:48.283]                         }
[09:30:48.283]                         if (!has_future || version < "1.8.0") {
[09:30:48.283]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:48.283]                             "", base::R.version$version.string), 
[09:30:48.283]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:48.283]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:48.283]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:48.283]                               "release", "version")], collapse = " "), 
[09:30:48.283]                             hostname = base::Sys.info()[["nodename"]])
[09:30:48.283]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:48.283]                             info)
[09:30:48.283]                           info <- base::paste(info, collapse = "; ")
[09:30:48.283]                           if (!has_future) {
[09:30:48.283]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:48.283]                               info)
[09:30:48.283]                           }
[09:30:48.283]                           else {
[09:30:48.283]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:48.283]                               info, version)
[09:30:48.283]                           }
[09:30:48.283]                           base::stop(msg)
[09:30:48.283]                         }
[09:30:48.283]                       })
[09:30:48.283]                     }
[09:30:48.283]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:48.283]                     base::options(mc.cores = 1L)
[09:30:48.283]                   }
[09:30:48.283]                   ...future.strategy.old <- future::plan("list")
[09:30:48.283]                   options(future.plan = NULL)
[09:30:48.283]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.283]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:48.283]                 }
[09:30:48.283]                 ...future.workdir <- getwd()
[09:30:48.283]             }
[09:30:48.283]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:48.283]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:48.283]         }
[09:30:48.283]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:48.283]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:48.283]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:48.283]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:48.283]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:48.283]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:48.283]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:48.283]             base::names(...future.oldOptions))
[09:30:48.283]     }
[09:30:48.283]     if (FALSE) {
[09:30:48.283]     }
[09:30:48.283]     else {
[09:30:48.283]         if (TRUE) {
[09:30:48.283]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:48.283]                 open = "w")
[09:30:48.283]         }
[09:30:48.283]         else {
[09:30:48.283]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:48.283]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:48.283]         }
[09:30:48.283]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:48.283]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:48.283]             base::sink(type = "output", split = FALSE)
[09:30:48.283]             base::close(...future.stdout)
[09:30:48.283]         }, add = TRUE)
[09:30:48.283]     }
[09:30:48.283]     ...future.frame <- base::sys.nframe()
[09:30:48.283]     ...future.conditions <- base::list()
[09:30:48.283]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:48.283]     if (FALSE) {
[09:30:48.283]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:48.283]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:48.283]     }
[09:30:48.283]     ...future.result <- base::tryCatch({
[09:30:48.283]         base::withCallingHandlers({
[09:30:48.283]             ...future.value <- base::withVisible(base::local({
[09:30:48.283]                 withCallingHandlers({
[09:30:48.283]                   {
[09:30:48.283]                     do.call(function(...) {
[09:30:48.283]                       sum(x, ...)
[09:30:48.283]                     }, args = future.call.arguments)
[09:30:48.283]                   }
[09:30:48.283]                 }, immediateCondition = function(cond) {
[09:30:48.283]                   save_rds <- function (object, pathname, ...) 
[09:30:48.283]                   {
[09:30:48.283]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:30:48.283]                     if (file_test("-f", pathname_tmp)) {
[09:30:48.283]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.283]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:30:48.283]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.283]                         fi_tmp[["mtime"]])
[09:30:48.283]                     }
[09:30:48.283]                     tryCatch({
[09:30:48.283]                       saveRDS(object, file = pathname_tmp, ...)
[09:30:48.283]                     }, error = function(ex) {
[09:30:48.283]                       msg <- conditionMessage(ex)
[09:30:48.283]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.283]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:30:48.283]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.283]                         fi_tmp[["mtime"]], msg)
[09:30:48.283]                       ex$message <- msg
[09:30:48.283]                       stop(ex)
[09:30:48.283]                     })
[09:30:48.283]                     stopifnot(file_test("-f", pathname_tmp))
[09:30:48.283]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:30:48.283]                     if (!res || file_test("-f", pathname_tmp)) {
[09:30:48.283]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.283]                       fi <- file.info(pathname)
[09:30:48.283]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:30:48.283]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.283]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:30:48.283]                         fi[["size"]], fi[["mtime"]])
[09:30:48.283]                       stop(msg)
[09:30:48.283]                     }
[09:30:48.283]                     invisible(pathname)
[09:30:48.283]                   }
[09:30:48.283]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:30:48.283]                     rootPath = tempdir()) 
[09:30:48.283]                   {
[09:30:48.283]                     obj <- list(time = Sys.time(), condition = cond)
[09:30:48.283]                     file <- tempfile(pattern = class(cond)[1], 
[09:30:48.283]                       tmpdir = path, fileext = ".rds")
[09:30:48.283]                     save_rds(obj, file)
[09:30:48.283]                   }
[09:30:48.283]                   saveImmediateCondition(cond, path = "/tmp/RtmpbtCiVA/.future/immediateConditions")
[09:30:48.283]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.283]                   {
[09:30:48.283]                     inherits <- base::inherits
[09:30:48.283]                     invokeRestart <- base::invokeRestart
[09:30:48.283]                     is.null <- base::is.null
[09:30:48.283]                     muffled <- FALSE
[09:30:48.283]                     if (inherits(cond, "message")) {
[09:30:48.283]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:48.283]                       if (muffled) 
[09:30:48.283]                         invokeRestart("muffleMessage")
[09:30:48.283]                     }
[09:30:48.283]                     else if (inherits(cond, "warning")) {
[09:30:48.283]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:48.283]                       if (muffled) 
[09:30:48.283]                         invokeRestart("muffleWarning")
[09:30:48.283]                     }
[09:30:48.283]                     else if (inherits(cond, "condition")) {
[09:30:48.283]                       if (!is.null(pattern)) {
[09:30:48.283]                         computeRestarts <- base::computeRestarts
[09:30:48.283]                         grepl <- base::grepl
[09:30:48.283]                         restarts <- computeRestarts(cond)
[09:30:48.283]                         for (restart in restarts) {
[09:30:48.283]                           name <- restart$name
[09:30:48.283]                           if (is.null(name)) 
[09:30:48.283]                             next
[09:30:48.283]                           if (!grepl(pattern, name)) 
[09:30:48.283]                             next
[09:30:48.283]                           invokeRestart(restart)
[09:30:48.283]                           muffled <- TRUE
[09:30:48.283]                           break
[09:30:48.283]                         }
[09:30:48.283]                       }
[09:30:48.283]                     }
[09:30:48.283]                     invisible(muffled)
[09:30:48.283]                   }
[09:30:48.283]                   muffleCondition(cond)
[09:30:48.283]                 })
[09:30:48.283]             }))
[09:30:48.283]             future::FutureResult(value = ...future.value$value, 
[09:30:48.283]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.283]                   ...future.rng), globalenv = if (FALSE) 
[09:30:48.283]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:48.283]                     ...future.globalenv.names))
[09:30:48.283]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:48.283]         }, condition = base::local({
[09:30:48.283]             c <- base::c
[09:30:48.283]             inherits <- base::inherits
[09:30:48.283]             invokeRestart <- base::invokeRestart
[09:30:48.283]             length <- base::length
[09:30:48.283]             list <- base::list
[09:30:48.283]             seq.int <- base::seq.int
[09:30:48.283]             signalCondition <- base::signalCondition
[09:30:48.283]             sys.calls <- base::sys.calls
[09:30:48.283]             `[[` <- base::`[[`
[09:30:48.283]             `+` <- base::`+`
[09:30:48.283]             `<<-` <- base::`<<-`
[09:30:48.283]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:48.283]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:48.283]                   3L)]
[09:30:48.283]             }
[09:30:48.283]             function(cond) {
[09:30:48.283]                 is_error <- inherits(cond, "error")
[09:30:48.283]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:48.283]                   NULL)
[09:30:48.283]                 if (is_error) {
[09:30:48.283]                   sessionInformation <- function() {
[09:30:48.283]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:48.283]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:48.283]                       search = base::search(), system = base::Sys.info())
[09:30:48.283]                   }
[09:30:48.283]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.283]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:48.283]                     cond$call), session = sessionInformation(), 
[09:30:48.283]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:48.283]                   signalCondition(cond)
[09:30:48.283]                 }
[09:30:48.283]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:48.283]                 "immediateCondition"))) {
[09:30:48.283]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:48.283]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.283]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:48.283]                   if (TRUE && !signal) {
[09:30:48.283]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.283]                     {
[09:30:48.283]                       inherits <- base::inherits
[09:30:48.283]                       invokeRestart <- base::invokeRestart
[09:30:48.283]                       is.null <- base::is.null
[09:30:48.283]                       muffled <- FALSE
[09:30:48.283]                       if (inherits(cond, "message")) {
[09:30:48.283]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.283]                         if (muffled) 
[09:30:48.283]                           invokeRestart("muffleMessage")
[09:30:48.283]                       }
[09:30:48.283]                       else if (inherits(cond, "warning")) {
[09:30:48.283]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.283]                         if (muffled) 
[09:30:48.283]                           invokeRestart("muffleWarning")
[09:30:48.283]                       }
[09:30:48.283]                       else if (inherits(cond, "condition")) {
[09:30:48.283]                         if (!is.null(pattern)) {
[09:30:48.283]                           computeRestarts <- base::computeRestarts
[09:30:48.283]                           grepl <- base::grepl
[09:30:48.283]                           restarts <- computeRestarts(cond)
[09:30:48.283]                           for (restart in restarts) {
[09:30:48.283]                             name <- restart$name
[09:30:48.283]                             if (is.null(name)) 
[09:30:48.283]                               next
[09:30:48.283]                             if (!grepl(pattern, name)) 
[09:30:48.283]                               next
[09:30:48.283]                             invokeRestart(restart)
[09:30:48.283]                             muffled <- TRUE
[09:30:48.283]                             break
[09:30:48.283]                           }
[09:30:48.283]                         }
[09:30:48.283]                       }
[09:30:48.283]                       invisible(muffled)
[09:30:48.283]                     }
[09:30:48.283]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.283]                   }
[09:30:48.283]                 }
[09:30:48.283]                 else {
[09:30:48.283]                   if (TRUE) {
[09:30:48.283]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.283]                     {
[09:30:48.283]                       inherits <- base::inherits
[09:30:48.283]                       invokeRestart <- base::invokeRestart
[09:30:48.283]                       is.null <- base::is.null
[09:30:48.283]                       muffled <- FALSE
[09:30:48.283]                       if (inherits(cond, "message")) {
[09:30:48.283]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.283]                         if (muffled) 
[09:30:48.283]                           invokeRestart("muffleMessage")
[09:30:48.283]                       }
[09:30:48.283]                       else if (inherits(cond, "warning")) {
[09:30:48.283]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.283]                         if (muffled) 
[09:30:48.283]                           invokeRestart("muffleWarning")
[09:30:48.283]                       }
[09:30:48.283]                       else if (inherits(cond, "condition")) {
[09:30:48.283]                         if (!is.null(pattern)) {
[09:30:48.283]                           computeRestarts <- base::computeRestarts
[09:30:48.283]                           grepl <- base::grepl
[09:30:48.283]                           restarts <- computeRestarts(cond)
[09:30:48.283]                           for (restart in restarts) {
[09:30:48.283]                             name <- restart$name
[09:30:48.283]                             if (is.null(name)) 
[09:30:48.283]                               next
[09:30:48.283]                             if (!grepl(pattern, name)) 
[09:30:48.283]                               next
[09:30:48.283]                             invokeRestart(restart)
[09:30:48.283]                             muffled <- TRUE
[09:30:48.283]                             break
[09:30:48.283]                           }
[09:30:48.283]                         }
[09:30:48.283]                       }
[09:30:48.283]                       invisible(muffled)
[09:30:48.283]                     }
[09:30:48.283]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.283]                   }
[09:30:48.283]                 }
[09:30:48.283]             }
[09:30:48.283]         }))
[09:30:48.283]     }, error = function(ex) {
[09:30:48.283]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:48.283]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.283]                 ...future.rng), started = ...future.startTime, 
[09:30:48.283]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:48.283]             version = "1.8"), class = "FutureResult")
[09:30:48.283]     }, finally = {
[09:30:48.283]         if (!identical(...future.workdir, getwd())) 
[09:30:48.283]             setwd(...future.workdir)
[09:30:48.283]         {
[09:30:48.283]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:48.283]                 ...future.oldOptions$nwarnings <- NULL
[09:30:48.283]             }
[09:30:48.283]             base::options(...future.oldOptions)
[09:30:48.283]             if (.Platform$OS.type == "windows") {
[09:30:48.283]                 old_names <- names(...future.oldEnvVars)
[09:30:48.283]                 envs <- base::Sys.getenv()
[09:30:48.283]                 names <- names(envs)
[09:30:48.283]                 common <- intersect(names, old_names)
[09:30:48.283]                 added <- setdiff(names, old_names)
[09:30:48.283]                 removed <- setdiff(old_names, names)
[09:30:48.283]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:48.283]                   envs[common]]
[09:30:48.283]                 NAMES <- toupper(changed)
[09:30:48.283]                 args <- list()
[09:30:48.283]                 for (kk in seq_along(NAMES)) {
[09:30:48.283]                   name <- changed[[kk]]
[09:30:48.283]                   NAME <- NAMES[[kk]]
[09:30:48.283]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.283]                     next
[09:30:48.283]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.283]                 }
[09:30:48.283]                 NAMES <- toupper(added)
[09:30:48.283]                 for (kk in seq_along(NAMES)) {
[09:30:48.283]                   name <- added[[kk]]
[09:30:48.283]                   NAME <- NAMES[[kk]]
[09:30:48.283]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.283]                     next
[09:30:48.283]                   args[[name]] <- ""
[09:30:48.283]                 }
[09:30:48.283]                 NAMES <- toupper(removed)
[09:30:48.283]                 for (kk in seq_along(NAMES)) {
[09:30:48.283]                   name <- removed[[kk]]
[09:30:48.283]                   NAME <- NAMES[[kk]]
[09:30:48.283]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.283]                     next
[09:30:48.283]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.283]                 }
[09:30:48.283]                 if (length(args) > 0) 
[09:30:48.283]                   base::do.call(base::Sys.setenv, args = args)
[09:30:48.283]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:48.283]             }
[09:30:48.283]             else {
[09:30:48.283]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:48.283]             }
[09:30:48.283]             {
[09:30:48.283]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:48.283]                   0L) {
[09:30:48.283]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:48.283]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:48.283]                   base::options(opts)
[09:30:48.283]                 }
[09:30:48.283]                 {
[09:30:48.283]                   {
[09:30:48.283]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:48.283]                     NULL
[09:30:48.283]                   }
[09:30:48.283]                   options(future.plan = NULL)
[09:30:48.283]                   if (is.na(NA_character_)) 
[09:30:48.283]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.283]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:48.283]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:48.283]                     .init = FALSE)
[09:30:48.283]                 }
[09:30:48.283]             }
[09:30:48.283]         }
[09:30:48.283]     })
[09:30:48.283]     if (TRUE) {
[09:30:48.283]         base::sink(type = "output", split = FALSE)
[09:30:48.283]         if (TRUE) {
[09:30:48.283]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:48.283]         }
[09:30:48.283]         else {
[09:30:48.283]             ...future.result["stdout"] <- base::list(NULL)
[09:30:48.283]         }
[09:30:48.283]         base::close(...future.stdout)
[09:30:48.283]         ...future.stdout <- NULL
[09:30:48.283]     }
[09:30:48.283]     ...future.result$conditions <- ...future.conditions
[09:30:48.283]     ...future.result$finished <- base::Sys.time()
[09:30:48.283]     ...future.result
[09:30:48.283] }
[09:30:48.287] assign_globals() ...
[09:30:48.287] List of 2
[09:30:48.287]  $ x                    : int [1:2] 1 2
[09:30:48.287]  $ future.call.arguments:List of 1
[09:30:48.287]   ..$ : num 3
[09:30:48.287]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:30:48.287]  - attr(*, "where")=List of 2
[09:30:48.287]   ..$ x                    :<environment: R_EmptyEnv> 
[09:30:48.287]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[09:30:48.287]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:48.287]  - attr(*, "resolved")= logi FALSE
[09:30:48.287]  - attr(*, "total_size")= num 112
[09:30:48.287]  - attr(*, "already-done")= logi TRUE
[09:30:48.294] - copied ‘x’ to environment
[09:30:48.294] - copied ‘future.call.arguments’ to environment
[09:30:48.295] assign_globals() ... done
[09:30:48.295] requestCore(): workers = 2
[09:30:48.298] MulticoreFuture started
[09:30:48.299] - Launch lazy future ... done
[09:30:48.299] run() for ‘MulticoreFuture’ ... done
[09:30:48.300] plan(): Setting new future strategy stack:
[09:30:48.301] result() for MulticoreFuture ...
[09:30:48.300] List of future strategies:
[09:30:48.300] 1. sequential:
[09:30:48.300]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.300]    - tweaked: FALSE
[09:30:48.300]    - call: NULL
[09:30:48.302] plan(): nbrOfWorkers() = 1
[09:30:48.306] plan(): Setting new future strategy stack:
[09:30:48.306] List of future strategies:
[09:30:48.306] 1. multicore:
[09:30:48.306]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:30:48.306]    - tweaked: FALSE
[09:30:48.306]    - call: plan(strategy, substitute = FALSE)
[09:30:48.320] plan(): nbrOfWorkers() = 2
[09:30:48.327] result() for MulticoreFuture ...
[09:30:48.327] result() for MulticoreFuture ... done
[09:30:48.328] result() for MulticoreFuture ... done
[09:30:48.328] result() for MulticoreFuture ...
[09:30:48.328] result() for MulticoreFuture ... done
[1] 6
** Sum function 'B' with plan('multicore') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5593292463d8>
Arguments '...' exists: TRUE
[09:30:48.329] getGlobalsAndPackages() ...
[09:30:48.329] Searching for globals...
[09:30:48.330] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[09:30:48.331] Searching for globals ... DONE
[09:30:48.331] Resolving globals: FALSE
[09:30:48.331] Tweak future expression to call with '...' arguments ...
[09:30:48.331] {
[09:30:48.331]     do.call(function(...) {
[09:30:48.331]         sum(x, ...)
[09:30:48.331]     }, args = future.call.arguments)
[09:30:48.331] }
[09:30:48.331] Tweak future expression to call with '...' arguments ... DONE
[09:30:48.332] The total size of the 2 globals is 112 bytes (112 bytes)
[09:30:48.332] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[09:30:48.332] - globals: [2] ‘x’, ‘future.call.arguments’
[09:30:48.333] 
[09:30:48.333] getGlobalsAndPackages() ... DONE
[09:30:48.333] run() for ‘Future’ ...
[09:30:48.333] - state: ‘created’
[09:30:48.333] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:30:48.337] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:48.337] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:30:48.337]   - Field: ‘label’
[09:30:48.337]   - Field: ‘local’
[09:30:48.338]   - Field: ‘owner’
[09:30:48.338]   - Field: ‘envir’
[09:30:48.338]   - Field: ‘workers’
[09:30:48.338]   - Field: ‘packages’
[09:30:48.338]   - Field: ‘gc’
[09:30:48.338]   - Field: ‘job’
[09:30:48.338]   - Field: ‘conditions’
[09:30:48.338]   - Field: ‘expr’
[09:30:48.339]   - Field: ‘uuid’
[09:30:48.339]   - Field: ‘seed’
[09:30:48.339]   - Field: ‘version’
[09:30:48.339]   - Field: ‘result’
[09:30:48.339]   - Field: ‘asynchronous’
[09:30:48.339]   - Field: ‘calls’
[09:30:48.339]   - Field: ‘globals’
[09:30:48.339]   - Field: ‘stdout’
[09:30:48.339]   - Field: ‘earlySignal’
[09:30:48.339]   - Field: ‘lazy’
[09:30:48.340]   - Field: ‘state’
[09:30:48.340] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:30:48.340] - Launch lazy future ...
[09:30:48.340] Packages needed by the future expression (n = 0): <none>
[09:30:48.340] Packages needed by future strategies (n = 0): <none>
[09:30:48.341] {
[09:30:48.341]     {
[09:30:48.341]         {
[09:30:48.341]             ...future.startTime <- base::Sys.time()
[09:30:48.341]             {
[09:30:48.341]                 {
[09:30:48.341]                   {
[09:30:48.341]                     {
[09:30:48.341]                       base::local({
[09:30:48.341]                         has_future <- base::requireNamespace("future", 
[09:30:48.341]                           quietly = TRUE)
[09:30:48.341]                         if (has_future) {
[09:30:48.341]                           ns <- base::getNamespace("future")
[09:30:48.341]                           version <- ns[[".package"]][["version"]]
[09:30:48.341]                           if (is.null(version)) 
[09:30:48.341]                             version <- utils::packageVersion("future")
[09:30:48.341]                         }
[09:30:48.341]                         else {
[09:30:48.341]                           version <- NULL
[09:30:48.341]                         }
[09:30:48.341]                         if (!has_future || version < "1.8.0") {
[09:30:48.341]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:48.341]                             "", base::R.version$version.string), 
[09:30:48.341]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:48.341]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:48.341]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:48.341]                               "release", "version")], collapse = " "), 
[09:30:48.341]                             hostname = base::Sys.info()[["nodename"]])
[09:30:48.341]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:48.341]                             info)
[09:30:48.341]                           info <- base::paste(info, collapse = "; ")
[09:30:48.341]                           if (!has_future) {
[09:30:48.341]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:48.341]                               info)
[09:30:48.341]                           }
[09:30:48.341]                           else {
[09:30:48.341]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:48.341]                               info, version)
[09:30:48.341]                           }
[09:30:48.341]                           base::stop(msg)
[09:30:48.341]                         }
[09:30:48.341]                       })
[09:30:48.341]                     }
[09:30:48.341]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:48.341]                     base::options(mc.cores = 1L)
[09:30:48.341]                   }
[09:30:48.341]                   ...future.strategy.old <- future::plan("list")
[09:30:48.341]                   options(future.plan = NULL)
[09:30:48.341]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.341]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:48.341]                 }
[09:30:48.341]                 ...future.workdir <- getwd()
[09:30:48.341]             }
[09:30:48.341]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:48.341]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:48.341]         }
[09:30:48.341]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:48.341]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:48.341]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:48.341]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:48.341]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:48.341]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:48.341]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:48.341]             base::names(...future.oldOptions))
[09:30:48.341]     }
[09:30:48.341]     if (FALSE) {
[09:30:48.341]     }
[09:30:48.341]     else {
[09:30:48.341]         if (TRUE) {
[09:30:48.341]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:48.341]                 open = "w")
[09:30:48.341]         }
[09:30:48.341]         else {
[09:30:48.341]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:48.341]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:48.341]         }
[09:30:48.341]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:48.341]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:48.341]             base::sink(type = "output", split = FALSE)
[09:30:48.341]             base::close(...future.stdout)
[09:30:48.341]         }, add = TRUE)
[09:30:48.341]     }
[09:30:48.341]     ...future.frame <- base::sys.nframe()
[09:30:48.341]     ...future.conditions <- base::list()
[09:30:48.341]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:48.341]     if (FALSE) {
[09:30:48.341]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:48.341]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:48.341]     }
[09:30:48.341]     ...future.result <- base::tryCatch({
[09:30:48.341]         base::withCallingHandlers({
[09:30:48.341]             ...future.value <- base::withVisible(base::local({
[09:30:48.341]                 withCallingHandlers({
[09:30:48.341]                   {
[09:30:48.341]                     do.call(function(...) {
[09:30:48.341]                       sum(x, ...)
[09:30:48.341]                     }, args = future.call.arguments)
[09:30:48.341]                   }
[09:30:48.341]                 }, immediateCondition = function(cond) {
[09:30:48.341]                   save_rds <- function (object, pathname, ...) 
[09:30:48.341]                   {
[09:30:48.341]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:30:48.341]                     if (file_test("-f", pathname_tmp)) {
[09:30:48.341]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.341]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:30:48.341]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.341]                         fi_tmp[["mtime"]])
[09:30:48.341]                     }
[09:30:48.341]                     tryCatch({
[09:30:48.341]                       saveRDS(object, file = pathname_tmp, ...)
[09:30:48.341]                     }, error = function(ex) {
[09:30:48.341]                       msg <- conditionMessage(ex)
[09:30:48.341]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.341]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:30:48.341]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.341]                         fi_tmp[["mtime"]], msg)
[09:30:48.341]                       ex$message <- msg
[09:30:48.341]                       stop(ex)
[09:30:48.341]                     })
[09:30:48.341]                     stopifnot(file_test("-f", pathname_tmp))
[09:30:48.341]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:30:48.341]                     if (!res || file_test("-f", pathname_tmp)) {
[09:30:48.341]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.341]                       fi <- file.info(pathname)
[09:30:48.341]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:30:48.341]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.341]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:30:48.341]                         fi[["size"]], fi[["mtime"]])
[09:30:48.341]                       stop(msg)
[09:30:48.341]                     }
[09:30:48.341]                     invisible(pathname)
[09:30:48.341]                   }
[09:30:48.341]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:30:48.341]                     rootPath = tempdir()) 
[09:30:48.341]                   {
[09:30:48.341]                     obj <- list(time = Sys.time(), condition = cond)
[09:30:48.341]                     file <- tempfile(pattern = class(cond)[1], 
[09:30:48.341]                       tmpdir = path, fileext = ".rds")
[09:30:48.341]                     save_rds(obj, file)
[09:30:48.341]                   }
[09:30:48.341]                   saveImmediateCondition(cond, path = "/tmp/RtmpbtCiVA/.future/immediateConditions")
[09:30:48.341]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.341]                   {
[09:30:48.341]                     inherits <- base::inherits
[09:30:48.341]                     invokeRestart <- base::invokeRestart
[09:30:48.341]                     is.null <- base::is.null
[09:30:48.341]                     muffled <- FALSE
[09:30:48.341]                     if (inherits(cond, "message")) {
[09:30:48.341]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:48.341]                       if (muffled) 
[09:30:48.341]                         invokeRestart("muffleMessage")
[09:30:48.341]                     }
[09:30:48.341]                     else if (inherits(cond, "warning")) {
[09:30:48.341]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:48.341]                       if (muffled) 
[09:30:48.341]                         invokeRestart("muffleWarning")
[09:30:48.341]                     }
[09:30:48.341]                     else if (inherits(cond, "condition")) {
[09:30:48.341]                       if (!is.null(pattern)) {
[09:30:48.341]                         computeRestarts <- base::computeRestarts
[09:30:48.341]                         grepl <- base::grepl
[09:30:48.341]                         restarts <- computeRestarts(cond)
[09:30:48.341]                         for (restart in restarts) {
[09:30:48.341]                           name <- restart$name
[09:30:48.341]                           if (is.null(name)) 
[09:30:48.341]                             next
[09:30:48.341]                           if (!grepl(pattern, name)) 
[09:30:48.341]                             next
[09:30:48.341]                           invokeRestart(restart)
[09:30:48.341]                           muffled <- TRUE
[09:30:48.341]                           break
[09:30:48.341]                         }
[09:30:48.341]                       }
[09:30:48.341]                     }
[09:30:48.341]                     invisible(muffled)
[09:30:48.341]                   }
[09:30:48.341]                   muffleCondition(cond)
[09:30:48.341]                 })
[09:30:48.341]             }))
[09:30:48.341]             future::FutureResult(value = ...future.value$value, 
[09:30:48.341]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.341]                   ...future.rng), globalenv = if (FALSE) 
[09:30:48.341]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:48.341]                     ...future.globalenv.names))
[09:30:48.341]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:48.341]         }, condition = base::local({
[09:30:48.341]             c <- base::c
[09:30:48.341]             inherits <- base::inherits
[09:30:48.341]             invokeRestart <- base::invokeRestart
[09:30:48.341]             length <- base::length
[09:30:48.341]             list <- base::list
[09:30:48.341]             seq.int <- base::seq.int
[09:30:48.341]             signalCondition <- base::signalCondition
[09:30:48.341]             sys.calls <- base::sys.calls
[09:30:48.341]             `[[` <- base::`[[`
[09:30:48.341]             `+` <- base::`+`
[09:30:48.341]             `<<-` <- base::`<<-`
[09:30:48.341]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:48.341]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:48.341]                   3L)]
[09:30:48.341]             }
[09:30:48.341]             function(cond) {
[09:30:48.341]                 is_error <- inherits(cond, "error")
[09:30:48.341]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:48.341]                   NULL)
[09:30:48.341]                 if (is_error) {
[09:30:48.341]                   sessionInformation <- function() {
[09:30:48.341]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:48.341]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:48.341]                       search = base::search(), system = base::Sys.info())
[09:30:48.341]                   }
[09:30:48.341]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.341]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:48.341]                     cond$call), session = sessionInformation(), 
[09:30:48.341]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:48.341]                   signalCondition(cond)
[09:30:48.341]                 }
[09:30:48.341]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:48.341]                 "immediateCondition"))) {
[09:30:48.341]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:48.341]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.341]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:48.341]                   if (TRUE && !signal) {
[09:30:48.341]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.341]                     {
[09:30:48.341]                       inherits <- base::inherits
[09:30:48.341]                       invokeRestart <- base::invokeRestart
[09:30:48.341]                       is.null <- base::is.null
[09:30:48.341]                       muffled <- FALSE
[09:30:48.341]                       if (inherits(cond, "message")) {
[09:30:48.341]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.341]                         if (muffled) 
[09:30:48.341]                           invokeRestart("muffleMessage")
[09:30:48.341]                       }
[09:30:48.341]                       else if (inherits(cond, "warning")) {
[09:30:48.341]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.341]                         if (muffled) 
[09:30:48.341]                           invokeRestart("muffleWarning")
[09:30:48.341]                       }
[09:30:48.341]                       else if (inherits(cond, "condition")) {
[09:30:48.341]                         if (!is.null(pattern)) {
[09:30:48.341]                           computeRestarts <- base::computeRestarts
[09:30:48.341]                           grepl <- base::grepl
[09:30:48.341]                           restarts <- computeRestarts(cond)
[09:30:48.341]                           for (restart in restarts) {
[09:30:48.341]                             name <- restart$name
[09:30:48.341]                             if (is.null(name)) 
[09:30:48.341]                               next
[09:30:48.341]                             if (!grepl(pattern, name)) 
[09:30:48.341]                               next
[09:30:48.341]                             invokeRestart(restart)
[09:30:48.341]                             muffled <- TRUE
[09:30:48.341]                             break
[09:30:48.341]                           }
[09:30:48.341]                         }
[09:30:48.341]                       }
[09:30:48.341]                       invisible(muffled)
[09:30:48.341]                     }
[09:30:48.341]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.341]                   }
[09:30:48.341]                 }
[09:30:48.341]                 else {
[09:30:48.341]                   if (TRUE) {
[09:30:48.341]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.341]                     {
[09:30:48.341]                       inherits <- base::inherits
[09:30:48.341]                       invokeRestart <- base::invokeRestart
[09:30:48.341]                       is.null <- base::is.null
[09:30:48.341]                       muffled <- FALSE
[09:30:48.341]                       if (inherits(cond, "message")) {
[09:30:48.341]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.341]                         if (muffled) 
[09:30:48.341]                           invokeRestart("muffleMessage")
[09:30:48.341]                       }
[09:30:48.341]                       else if (inherits(cond, "warning")) {
[09:30:48.341]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.341]                         if (muffled) 
[09:30:48.341]                           invokeRestart("muffleWarning")
[09:30:48.341]                       }
[09:30:48.341]                       else if (inherits(cond, "condition")) {
[09:30:48.341]                         if (!is.null(pattern)) {
[09:30:48.341]                           computeRestarts <- base::computeRestarts
[09:30:48.341]                           grepl <- base::grepl
[09:30:48.341]                           restarts <- computeRestarts(cond)
[09:30:48.341]                           for (restart in restarts) {
[09:30:48.341]                             name <- restart$name
[09:30:48.341]                             if (is.null(name)) 
[09:30:48.341]                               next
[09:30:48.341]                             if (!grepl(pattern, name)) 
[09:30:48.341]                               next
[09:30:48.341]                             invokeRestart(restart)
[09:30:48.341]                             muffled <- TRUE
[09:30:48.341]                             break
[09:30:48.341]                           }
[09:30:48.341]                         }
[09:30:48.341]                       }
[09:30:48.341]                       invisible(muffled)
[09:30:48.341]                     }
[09:30:48.341]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.341]                   }
[09:30:48.341]                 }
[09:30:48.341]             }
[09:30:48.341]         }))
[09:30:48.341]     }, error = function(ex) {
[09:30:48.341]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:48.341]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.341]                 ...future.rng), started = ...future.startTime, 
[09:30:48.341]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:48.341]             version = "1.8"), class = "FutureResult")
[09:30:48.341]     }, finally = {
[09:30:48.341]         if (!identical(...future.workdir, getwd())) 
[09:30:48.341]             setwd(...future.workdir)
[09:30:48.341]         {
[09:30:48.341]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:48.341]                 ...future.oldOptions$nwarnings <- NULL
[09:30:48.341]             }
[09:30:48.341]             base::options(...future.oldOptions)
[09:30:48.341]             if (.Platform$OS.type == "windows") {
[09:30:48.341]                 old_names <- names(...future.oldEnvVars)
[09:30:48.341]                 envs <- base::Sys.getenv()
[09:30:48.341]                 names <- names(envs)
[09:30:48.341]                 common <- intersect(names, old_names)
[09:30:48.341]                 added <- setdiff(names, old_names)
[09:30:48.341]                 removed <- setdiff(old_names, names)
[09:30:48.341]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:48.341]                   envs[common]]
[09:30:48.341]                 NAMES <- toupper(changed)
[09:30:48.341]                 args <- list()
[09:30:48.341]                 for (kk in seq_along(NAMES)) {
[09:30:48.341]                   name <- changed[[kk]]
[09:30:48.341]                   NAME <- NAMES[[kk]]
[09:30:48.341]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.341]                     next
[09:30:48.341]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.341]                 }
[09:30:48.341]                 NAMES <- toupper(added)
[09:30:48.341]                 for (kk in seq_along(NAMES)) {
[09:30:48.341]                   name <- added[[kk]]
[09:30:48.341]                   NAME <- NAMES[[kk]]
[09:30:48.341]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.341]                     next
[09:30:48.341]                   args[[name]] <- ""
[09:30:48.341]                 }
[09:30:48.341]                 NAMES <- toupper(removed)
[09:30:48.341]                 for (kk in seq_along(NAMES)) {
[09:30:48.341]                   name <- removed[[kk]]
[09:30:48.341]                   NAME <- NAMES[[kk]]
[09:30:48.341]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.341]                     next
[09:30:48.341]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.341]                 }
[09:30:48.341]                 if (length(args) > 0) 
[09:30:48.341]                   base::do.call(base::Sys.setenv, args = args)
[09:30:48.341]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:48.341]             }
[09:30:48.341]             else {
[09:30:48.341]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:48.341]             }
[09:30:48.341]             {
[09:30:48.341]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:48.341]                   0L) {
[09:30:48.341]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:48.341]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:48.341]                   base::options(opts)
[09:30:48.341]                 }
[09:30:48.341]                 {
[09:30:48.341]                   {
[09:30:48.341]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:48.341]                     NULL
[09:30:48.341]                   }
[09:30:48.341]                   options(future.plan = NULL)
[09:30:48.341]                   if (is.na(NA_character_)) 
[09:30:48.341]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.341]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:48.341]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:48.341]                     .init = FALSE)
[09:30:48.341]                 }
[09:30:48.341]             }
[09:30:48.341]         }
[09:30:48.341]     })
[09:30:48.341]     if (TRUE) {
[09:30:48.341]         base::sink(type = "output", split = FALSE)
[09:30:48.341]         if (TRUE) {
[09:30:48.341]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:48.341]         }
[09:30:48.341]         else {
[09:30:48.341]             ...future.result["stdout"] <- base::list(NULL)
[09:30:48.341]         }
[09:30:48.341]         base::close(...future.stdout)
[09:30:48.341]         ...future.stdout <- NULL
[09:30:48.341]     }
[09:30:48.341]     ...future.result$conditions <- ...future.conditions
[09:30:48.341]     ...future.result$finished <- base::Sys.time()
[09:30:48.341]     ...future.result
[09:30:48.341] }
[09:30:48.343] assign_globals() ...
[09:30:48.343] List of 2
[09:30:48.343]  $ x                    : int [1:2] 1 2
[09:30:48.343]  $ future.call.arguments:List of 1
[09:30:48.343]   ..$ : num 3
[09:30:48.343]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:30:48.343]  - attr(*, "where")=List of 2
[09:30:48.343]   ..$ x                    :<environment: R_EmptyEnv> 
[09:30:48.343]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[09:30:48.343]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:48.343]  - attr(*, "resolved")= logi FALSE
[09:30:48.343]  - attr(*, "total_size")= num 112
[09:30:48.343]  - attr(*, "already-done")= logi TRUE
[09:30:48.347] - copied ‘x’ to environment
[09:30:48.347] - copied ‘future.call.arguments’ to environment
[09:30:48.347] assign_globals() ... done
[09:30:48.347] requestCore(): workers = 2
[09:30:48.349] MulticoreFuture started
[09:30:48.350] - Launch lazy future ... done
[09:30:48.350] run() for ‘MulticoreFuture’ ... done
[09:30:48.350] result() for MulticoreFuture ...
[09:30:48.350] plan(): Setting new future strategy stack:
[09:30:48.351] List of future strategies:
[09:30:48.351] 1. sequential:
[09:30:48.351]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.351]    - tweaked: FALSE
[09:30:48.351]    - call: NULL
[09:30:48.352] plan(): nbrOfWorkers() = 1
[09:30:48.354] plan(): Setting new future strategy stack:
[09:30:48.354] List of future strategies:
[09:30:48.354] 1. multicore:
[09:30:48.354]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:30:48.354]    - tweaked: FALSE
[09:30:48.354]    - call: plan(strategy, substitute = FALSE)
[09:30:48.359] plan(): nbrOfWorkers() = 2
[09:30:48.359] result() for MulticoreFuture ...
[09:30:48.360] result() for MulticoreFuture ... done
[09:30:48.360] result() for MulticoreFuture ... done
[09:30:48.360] result() for MulticoreFuture ...
[09:30:48.360] result() for MulticoreFuture ... done
[1] 6
** Sum function 'C' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x559329414468>
Arguments '...' exists: FALSE
[09:30:48.361] getGlobalsAndPackages() ...
[09:30:48.361] Searching for globals...
[09:30:48.362] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[09:30:48.363] Searching for globals ... DONE
[09:30:48.363] Resolving globals: FALSE
[09:30:48.363] The total size of the 2 globals is 112 bytes (112 bytes)
[09:30:48.364] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[09:30:48.364] - globals: [2] ‘x’, ‘y’
[09:30:48.364] 
[09:30:48.364] getGlobalsAndPackages() ... DONE
[09:30:48.365] run() for ‘Future’ ...
[09:30:48.365] - state: ‘created’
[09:30:48.365] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:30:48.369] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:48.369] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:30:48.369]   - Field: ‘label’
[09:30:48.369]   - Field: ‘local’
[09:30:48.369]   - Field: ‘owner’
[09:30:48.369]   - Field: ‘envir’
[09:30:48.369]   - Field: ‘workers’
[09:30:48.370]   - Field: ‘packages’
[09:30:48.370]   - Field: ‘gc’
[09:30:48.370]   - Field: ‘job’
[09:30:48.370]   - Field: ‘conditions’
[09:30:48.370]   - Field: ‘expr’
[09:30:48.370]   - Field: ‘uuid’
[09:30:48.370]   - Field: ‘seed’
[09:30:48.370]   - Field: ‘version’
[09:30:48.370]   - Field: ‘result’
[09:30:48.371]   - Field: ‘asynchronous’
[09:30:48.371]   - Field: ‘calls’
[09:30:48.371]   - Field: ‘globals’
[09:30:48.371]   - Field: ‘stdout’
[09:30:48.371]   - Field: ‘earlySignal’
[09:30:48.371]   - Field: ‘lazy’
[09:30:48.371]   - Field: ‘state’
[09:30:48.371] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:30:48.371] - Launch lazy future ...
[09:30:48.372] Packages needed by the future expression (n = 0): <none>
[09:30:48.372] Packages needed by future strategies (n = 0): <none>
[09:30:48.372] {
[09:30:48.372]     {
[09:30:48.372]         {
[09:30:48.372]             ...future.startTime <- base::Sys.time()
[09:30:48.372]             {
[09:30:48.372]                 {
[09:30:48.372]                   {
[09:30:48.372]                     {
[09:30:48.372]                       base::local({
[09:30:48.372]                         has_future <- base::requireNamespace("future", 
[09:30:48.372]                           quietly = TRUE)
[09:30:48.372]                         if (has_future) {
[09:30:48.372]                           ns <- base::getNamespace("future")
[09:30:48.372]                           version <- ns[[".package"]][["version"]]
[09:30:48.372]                           if (is.null(version)) 
[09:30:48.372]                             version <- utils::packageVersion("future")
[09:30:48.372]                         }
[09:30:48.372]                         else {
[09:30:48.372]                           version <- NULL
[09:30:48.372]                         }
[09:30:48.372]                         if (!has_future || version < "1.8.0") {
[09:30:48.372]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:48.372]                             "", base::R.version$version.string), 
[09:30:48.372]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:48.372]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:48.372]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:48.372]                               "release", "version")], collapse = " "), 
[09:30:48.372]                             hostname = base::Sys.info()[["nodename"]])
[09:30:48.372]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:48.372]                             info)
[09:30:48.372]                           info <- base::paste(info, collapse = "; ")
[09:30:48.372]                           if (!has_future) {
[09:30:48.372]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:48.372]                               info)
[09:30:48.372]                           }
[09:30:48.372]                           else {
[09:30:48.372]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:48.372]                               info, version)
[09:30:48.372]                           }
[09:30:48.372]                           base::stop(msg)
[09:30:48.372]                         }
[09:30:48.372]                       })
[09:30:48.372]                     }
[09:30:48.372]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:48.372]                     base::options(mc.cores = 1L)
[09:30:48.372]                   }
[09:30:48.372]                   ...future.strategy.old <- future::plan("list")
[09:30:48.372]                   options(future.plan = NULL)
[09:30:48.372]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.372]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:48.372]                 }
[09:30:48.372]                 ...future.workdir <- getwd()
[09:30:48.372]             }
[09:30:48.372]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:48.372]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:48.372]         }
[09:30:48.372]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:48.372]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:48.372]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:48.372]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:48.372]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:48.372]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:48.372]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:48.372]             base::names(...future.oldOptions))
[09:30:48.372]     }
[09:30:48.372]     if (FALSE) {
[09:30:48.372]     }
[09:30:48.372]     else {
[09:30:48.372]         if (TRUE) {
[09:30:48.372]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:48.372]                 open = "w")
[09:30:48.372]         }
[09:30:48.372]         else {
[09:30:48.372]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:48.372]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:48.372]         }
[09:30:48.372]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:48.372]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:48.372]             base::sink(type = "output", split = FALSE)
[09:30:48.372]             base::close(...future.stdout)
[09:30:48.372]         }, add = TRUE)
[09:30:48.372]     }
[09:30:48.372]     ...future.frame <- base::sys.nframe()
[09:30:48.372]     ...future.conditions <- base::list()
[09:30:48.372]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:48.372]     if (FALSE) {
[09:30:48.372]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:48.372]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:48.372]     }
[09:30:48.372]     ...future.result <- base::tryCatch({
[09:30:48.372]         base::withCallingHandlers({
[09:30:48.372]             ...future.value <- base::withVisible(base::local({
[09:30:48.372]                 withCallingHandlers({
[09:30:48.372]                   {
[09:30:48.372]                     sum(x, y)
[09:30:48.372]                   }
[09:30:48.372]                 }, immediateCondition = function(cond) {
[09:30:48.372]                   save_rds <- function (object, pathname, ...) 
[09:30:48.372]                   {
[09:30:48.372]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:30:48.372]                     if (file_test("-f", pathname_tmp)) {
[09:30:48.372]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.372]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:30:48.372]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.372]                         fi_tmp[["mtime"]])
[09:30:48.372]                     }
[09:30:48.372]                     tryCatch({
[09:30:48.372]                       saveRDS(object, file = pathname_tmp, ...)
[09:30:48.372]                     }, error = function(ex) {
[09:30:48.372]                       msg <- conditionMessage(ex)
[09:30:48.372]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.372]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:30:48.372]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.372]                         fi_tmp[["mtime"]], msg)
[09:30:48.372]                       ex$message <- msg
[09:30:48.372]                       stop(ex)
[09:30:48.372]                     })
[09:30:48.372]                     stopifnot(file_test("-f", pathname_tmp))
[09:30:48.372]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:30:48.372]                     if (!res || file_test("-f", pathname_tmp)) {
[09:30:48.372]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.372]                       fi <- file.info(pathname)
[09:30:48.372]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:30:48.372]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.372]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:30:48.372]                         fi[["size"]], fi[["mtime"]])
[09:30:48.372]                       stop(msg)
[09:30:48.372]                     }
[09:30:48.372]                     invisible(pathname)
[09:30:48.372]                   }
[09:30:48.372]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:30:48.372]                     rootPath = tempdir()) 
[09:30:48.372]                   {
[09:30:48.372]                     obj <- list(time = Sys.time(), condition = cond)
[09:30:48.372]                     file <- tempfile(pattern = class(cond)[1], 
[09:30:48.372]                       tmpdir = path, fileext = ".rds")
[09:30:48.372]                     save_rds(obj, file)
[09:30:48.372]                   }
[09:30:48.372]                   saveImmediateCondition(cond, path = "/tmp/RtmpbtCiVA/.future/immediateConditions")
[09:30:48.372]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.372]                   {
[09:30:48.372]                     inherits <- base::inherits
[09:30:48.372]                     invokeRestart <- base::invokeRestart
[09:30:48.372]                     is.null <- base::is.null
[09:30:48.372]                     muffled <- FALSE
[09:30:48.372]                     if (inherits(cond, "message")) {
[09:30:48.372]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:48.372]                       if (muffled) 
[09:30:48.372]                         invokeRestart("muffleMessage")
[09:30:48.372]                     }
[09:30:48.372]                     else if (inherits(cond, "warning")) {
[09:30:48.372]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:48.372]                       if (muffled) 
[09:30:48.372]                         invokeRestart("muffleWarning")
[09:30:48.372]                     }
[09:30:48.372]                     else if (inherits(cond, "condition")) {
[09:30:48.372]                       if (!is.null(pattern)) {
[09:30:48.372]                         computeRestarts <- base::computeRestarts
[09:30:48.372]                         grepl <- base::grepl
[09:30:48.372]                         restarts <- computeRestarts(cond)
[09:30:48.372]                         for (restart in restarts) {
[09:30:48.372]                           name <- restart$name
[09:30:48.372]                           if (is.null(name)) 
[09:30:48.372]                             next
[09:30:48.372]                           if (!grepl(pattern, name)) 
[09:30:48.372]                             next
[09:30:48.372]                           invokeRestart(restart)
[09:30:48.372]                           muffled <- TRUE
[09:30:48.372]                           break
[09:30:48.372]                         }
[09:30:48.372]                       }
[09:30:48.372]                     }
[09:30:48.372]                     invisible(muffled)
[09:30:48.372]                   }
[09:30:48.372]                   muffleCondition(cond)
[09:30:48.372]                 })
[09:30:48.372]             }))
[09:30:48.372]             future::FutureResult(value = ...future.value$value, 
[09:30:48.372]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.372]                   ...future.rng), globalenv = if (FALSE) 
[09:30:48.372]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:48.372]                     ...future.globalenv.names))
[09:30:48.372]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:48.372]         }, condition = base::local({
[09:30:48.372]             c <- base::c
[09:30:48.372]             inherits <- base::inherits
[09:30:48.372]             invokeRestart <- base::invokeRestart
[09:30:48.372]             length <- base::length
[09:30:48.372]             list <- base::list
[09:30:48.372]             seq.int <- base::seq.int
[09:30:48.372]             signalCondition <- base::signalCondition
[09:30:48.372]             sys.calls <- base::sys.calls
[09:30:48.372]             `[[` <- base::`[[`
[09:30:48.372]             `+` <- base::`+`
[09:30:48.372]             `<<-` <- base::`<<-`
[09:30:48.372]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:48.372]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:48.372]                   3L)]
[09:30:48.372]             }
[09:30:48.372]             function(cond) {
[09:30:48.372]                 is_error <- inherits(cond, "error")
[09:30:48.372]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:48.372]                   NULL)
[09:30:48.372]                 if (is_error) {
[09:30:48.372]                   sessionInformation <- function() {
[09:30:48.372]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:48.372]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:48.372]                       search = base::search(), system = base::Sys.info())
[09:30:48.372]                   }
[09:30:48.372]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.372]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:48.372]                     cond$call), session = sessionInformation(), 
[09:30:48.372]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:48.372]                   signalCondition(cond)
[09:30:48.372]                 }
[09:30:48.372]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:48.372]                 "immediateCondition"))) {
[09:30:48.372]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:48.372]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.372]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:48.372]                   if (TRUE && !signal) {
[09:30:48.372]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.372]                     {
[09:30:48.372]                       inherits <- base::inherits
[09:30:48.372]                       invokeRestart <- base::invokeRestart
[09:30:48.372]                       is.null <- base::is.null
[09:30:48.372]                       muffled <- FALSE
[09:30:48.372]                       if (inherits(cond, "message")) {
[09:30:48.372]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.372]                         if (muffled) 
[09:30:48.372]                           invokeRestart("muffleMessage")
[09:30:48.372]                       }
[09:30:48.372]                       else if (inherits(cond, "warning")) {
[09:30:48.372]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.372]                         if (muffled) 
[09:30:48.372]                           invokeRestart("muffleWarning")
[09:30:48.372]                       }
[09:30:48.372]                       else if (inherits(cond, "condition")) {
[09:30:48.372]                         if (!is.null(pattern)) {
[09:30:48.372]                           computeRestarts <- base::computeRestarts
[09:30:48.372]                           grepl <- base::grepl
[09:30:48.372]                           restarts <- computeRestarts(cond)
[09:30:48.372]                           for (restart in restarts) {
[09:30:48.372]                             name <- restart$name
[09:30:48.372]                             if (is.null(name)) 
[09:30:48.372]                               next
[09:30:48.372]                             if (!grepl(pattern, name)) 
[09:30:48.372]                               next
[09:30:48.372]                             invokeRestart(restart)
[09:30:48.372]                             muffled <- TRUE
[09:30:48.372]                             break
[09:30:48.372]                           }
[09:30:48.372]                         }
[09:30:48.372]                       }
[09:30:48.372]                       invisible(muffled)
[09:30:48.372]                     }
[09:30:48.372]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.372]                   }
[09:30:48.372]                 }
[09:30:48.372]                 else {
[09:30:48.372]                   if (TRUE) {
[09:30:48.372]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.372]                     {
[09:30:48.372]                       inherits <- base::inherits
[09:30:48.372]                       invokeRestart <- base::invokeRestart
[09:30:48.372]                       is.null <- base::is.null
[09:30:48.372]                       muffled <- FALSE
[09:30:48.372]                       if (inherits(cond, "message")) {
[09:30:48.372]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.372]                         if (muffled) 
[09:30:48.372]                           invokeRestart("muffleMessage")
[09:30:48.372]                       }
[09:30:48.372]                       else if (inherits(cond, "warning")) {
[09:30:48.372]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.372]                         if (muffled) 
[09:30:48.372]                           invokeRestart("muffleWarning")
[09:30:48.372]                       }
[09:30:48.372]                       else if (inherits(cond, "condition")) {
[09:30:48.372]                         if (!is.null(pattern)) {
[09:30:48.372]                           computeRestarts <- base::computeRestarts
[09:30:48.372]                           grepl <- base::grepl
[09:30:48.372]                           restarts <- computeRestarts(cond)
[09:30:48.372]                           for (restart in restarts) {
[09:30:48.372]                             name <- restart$name
[09:30:48.372]                             if (is.null(name)) 
[09:30:48.372]                               next
[09:30:48.372]                             if (!grepl(pattern, name)) 
[09:30:48.372]                               next
[09:30:48.372]                             invokeRestart(restart)
[09:30:48.372]                             muffled <- TRUE
[09:30:48.372]                             break
[09:30:48.372]                           }
[09:30:48.372]                         }
[09:30:48.372]                       }
[09:30:48.372]                       invisible(muffled)
[09:30:48.372]                     }
[09:30:48.372]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.372]                   }
[09:30:48.372]                 }
[09:30:48.372]             }
[09:30:48.372]         }))
[09:30:48.372]     }, error = function(ex) {
[09:30:48.372]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:48.372]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.372]                 ...future.rng), started = ...future.startTime, 
[09:30:48.372]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:48.372]             version = "1.8"), class = "FutureResult")
[09:30:48.372]     }, finally = {
[09:30:48.372]         if (!identical(...future.workdir, getwd())) 
[09:30:48.372]             setwd(...future.workdir)
[09:30:48.372]         {
[09:30:48.372]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:48.372]                 ...future.oldOptions$nwarnings <- NULL
[09:30:48.372]             }
[09:30:48.372]             base::options(...future.oldOptions)
[09:30:48.372]             if (.Platform$OS.type == "windows") {
[09:30:48.372]                 old_names <- names(...future.oldEnvVars)
[09:30:48.372]                 envs <- base::Sys.getenv()
[09:30:48.372]                 names <- names(envs)
[09:30:48.372]                 common <- intersect(names, old_names)
[09:30:48.372]                 added <- setdiff(names, old_names)
[09:30:48.372]                 removed <- setdiff(old_names, names)
[09:30:48.372]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:48.372]                   envs[common]]
[09:30:48.372]                 NAMES <- toupper(changed)
[09:30:48.372]                 args <- list()
[09:30:48.372]                 for (kk in seq_along(NAMES)) {
[09:30:48.372]                   name <- changed[[kk]]
[09:30:48.372]                   NAME <- NAMES[[kk]]
[09:30:48.372]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.372]                     next
[09:30:48.372]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.372]                 }
[09:30:48.372]                 NAMES <- toupper(added)
[09:30:48.372]                 for (kk in seq_along(NAMES)) {
[09:30:48.372]                   name <- added[[kk]]
[09:30:48.372]                   NAME <- NAMES[[kk]]
[09:30:48.372]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.372]                     next
[09:30:48.372]                   args[[name]] <- ""
[09:30:48.372]                 }
[09:30:48.372]                 NAMES <- toupper(removed)
[09:30:48.372]                 for (kk in seq_along(NAMES)) {
[09:30:48.372]                   name <- removed[[kk]]
[09:30:48.372]                   NAME <- NAMES[[kk]]
[09:30:48.372]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.372]                     next
[09:30:48.372]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.372]                 }
[09:30:48.372]                 if (length(args) > 0) 
[09:30:48.372]                   base::do.call(base::Sys.setenv, args = args)
[09:30:48.372]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:48.372]             }
[09:30:48.372]             else {
[09:30:48.372]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:48.372]             }
[09:30:48.372]             {
[09:30:48.372]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:48.372]                   0L) {
[09:30:48.372]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:48.372]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:48.372]                   base::options(opts)
[09:30:48.372]                 }
[09:30:48.372]                 {
[09:30:48.372]                   {
[09:30:48.372]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:48.372]                     NULL
[09:30:48.372]                   }
[09:30:48.372]                   options(future.plan = NULL)
[09:30:48.372]                   if (is.na(NA_character_)) 
[09:30:48.372]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.372]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:48.372]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:48.372]                     .init = FALSE)
[09:30:48.372]                 }
[09:30:48.372]             }
[09:30:48.372]         }
[09:30:48.372]     })
[09:30:48.372]     if (TRUE) {
[09:30:48.372]         base::sink(type = "output", split = FALSE)
[09:30:48.372]         if (TRUE) {
[09:30:48.372]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:48.372]         }
[09:30:48.372]         else {
[09:30:48.372]             ...future.result["stdout"] <- base::list(NULL)
[09:30:48.372]         }
[09:30:48.372]         base::close(...future.stdout)
[09:30:48.372]         ...future.stdout <- NULL
[09:30:48.372]     }
[09:30:48.372]     ...future.result$conditions <- ...future.conditions
[09:30:48.372]     ...future.result$finished <- base::Sys.time()
[09:30:48.372]     ...future.result
[09:30:48.372] }
[09:30:48.375] assign_globals() ...
[09:30:48.375] List of 2
[09:30:48.375]  $ x: int [1:2] 1 2
[09:30:48.375]  $ y: num 3
[09:30:48.375]  - attr(*, "where")=List of 2
[09:30:48.375]   ..$ x:<environment: R_EmptyEnv> 
[09:30:48.375]   ..$ y:<environment: R_EmptyEnv> 
[09:30:48.375]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:48.375]  - attr(*, "resolved")= logi FALSE
[09:30:48.375]  - attr(*, "total_size")= num 112
[09:30:48.375]  - attr(*, "already-done")= logi TRUE
[09:30:48.381] - copied ‘x’ to environment
[09:30:48.381] - copied ‘y’ to environment
[09:30:48.381] assign_globals() ... done
[09:30:48.381] requestCore(): workers = 2
[09:30:48.383] MulticoreFuture started
[09:30:48.383] - Launch lazy future ... done
[09:30:48.384] run() for ‘MulticoreFuture’ ... done
[09:30:48.384] result() for MulticoreFuture ...
[09:30:48.384] plan(): Setting new future strategy stack:
[09:30:48.384] List of future strategies:
[09:30:48.384] 1. sequential:
[09:30:48.384]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.384]    - tweaked: FALSE
[09:30:48.384]    - call: NULL
[09:30:48.385] plan(): nbrOfWorkers() = 1
[09:30:48.387] plan(): Setting new future strategy stack:
[09:30:48.387] List of future strategies:
[09:30:48.387] 1. multicore:
[09:30:48.387]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:30:48.387]    - tweaked: FALSE
[09:30:48.387]    - call: plan(strategy, substitute = FALSE)
[09:30:48.392] plan(): nbrOfWorkers() = 2
[09:30:48.393] result() for MulticoreFuture ...
[09:30:48.393] result() for MulticoreFuture ... done
[09:30:48.393] result() for MulticoreFuture ... done
[09:30:48.393] result() for MulticoreFuture ...
[09:30:48.394] result() for MulticoreFuture ... done
[1] 6
** Sum function 'D' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5593295b00c0>
Arguments '...' exists: FALSE
[09:30:48.394] getGlobalsAndPackages() ...
[09:30:48.395] Searching for globals...
[09:30:48.397] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[09:30:48.397] Searching for globals ... DONE
[09:30:48.397] Resolving globals: FALSE
[09:30:48.397] Tweak future expression to call with '...' arguments ...
[09:30:48.398] The total size of the 2 globals is 112 bytes (112 bytes)
[09:30:48.398] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[09:30:48.398] - globals: [2] ‘x’, ‘y’
[09:30:48.398] 
[09:30:48.398] getGlobalsAndPackages() ... DONE
[09:30:48.399] run() for ‘Future’ ...
[09:30:48.399] - state: ‘created’
[09:30:48.399] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:30:48.403] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:48.403] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:30:48.403]   - Field: ‘label’
[09:30:48.403]   - Field: ‘local’
[09:30:48.404]   - Field: ‘owner’
[09:30:48.404]   - Field: ‘envir’
[09:30:48.404]   - Field: ‘workers’
[09:30:48.404]   - Field: ‘packages’
[09:30:48.404]   - Field: ‘gc’
[09:30:48.404]   - Field: ‘job’
[09:30:48.404]   - Field: ‘conditions’
[09:30:48.404]   - Field: ‘expr’
[09:30:48.405]   - Field: ‘uuid’
[09:30:48.405]   - Field: ‘seed’
[09:30:48.405]   - Field: ‘version’
[09:30:48.405]   - Field: ‘result’
[09:30:48.405]   - Field: ‘asynchronous’
[09:30:48.405]   - Field: ‘calls’
[09:30:48.405]   - Field: ‘globals’
[09:30:48.405]   - Field: ‘stdout’
[09:30:48.405]   - Field: ‘earlySignal’
[09:30:48.406]   - Field: ‘lazy’
[09:30:48.406]   - Field: ‘state’
[09:30:48.406] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:30:48.406] - Launch lazy future ...
[09:30:48.406] Packages needed by the future expression (n = 0): <none>
[09:30:48.406] Packages needed by future strategies (n = 0): <none>
[09:30:48.407] {
[09:30:48.407]     {
[09:30:48.407]         {
[09:30:48.407]             ...future.startTime <- base::Sys.time()
[09:30:48.407]             {
[09:30:48.407]                 {
[09:30:48.407]                   {
[09:30:48.407]                     {
[09:30:48.407]                       base::local({
[09:30:48.407]                         has_future <- base::requireNamespace("future", 
[09:30:48.407]                           quietly = TRUE)
[09:30:48.407]                         if (has_future) {
[09:30:48.407]                           ns <- base::getNamespace("future")
[09:30:48.407]                           version <- ns[[".package"]][["version"]]
[09:30:48.407]                           if (is.null(version)) 
[09:30:48.407]                             version <- utils::packageVersion("future")
[09:30:48.407]                         }
[09:30:48.407]                         else {
[09:30:48.407]                           version <- NULL
[09:30:48.407]                         }
[09:30:48.407]                         if (!has_future || version < "1.8.0") {
[09:30:48.407]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:48.407]                             "", base::R.version$version.string), 
[09:30:48.407]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:48.407]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:48.407]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:48.407]                               "release", "version")], collapse = " "), 
[09:30:48.407]                             hostname = base::Sys.info()[["nodename"]])
[09:30:48.407]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:48.407]                             info)
[09:30:48.407]                           info <- base::paste(info, collapse = "; ")
[09:30:48.407]                           if (!has_future) {
[09:30:48.407]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:48.407]                               info)
[09:30:48.407]                           }
[09:30:48.407]                           else {
[09:30:48.407]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:48.407]                               info, version)
[09:30:48.407]                           }
[09:30:48.407]                           base::stop(msg)
[09:30:48.407]                         }
[09:30:48.407]                       })
[09:30:48.407]                     }
[09:30:48.407]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:48.407]                     base::options(mc.cores = 1L)
[09:30:48.407]                   }
[09:30:48.407]                   ...future.strategy.old <- future::plan("list")
[09:30:48.407]                   options(future.plan = NULL)
[09:30:48.407]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.407]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:48.407]                 }
[09:30:48.407]                 ...future.workdir <- getwd()
[09:30:48.407]             }
[09:30:48.407]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:48.407]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:48.407]         }
[09:30:48.407]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:48.407]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:48.407]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:48.407]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:48.407]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:48.407]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:48.407]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:48.407]             base::names(...future.oldOptions))
[09:30:48.407]     }
[09:30:48.407]     if (FALSE) {
[09:30:48.407]     }
[09:30:48.407]     else {
[09:30:48.407]         if (TRUE) {
[09:30:48.407]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:48.407]                 open = "w")
[09:30:48.407]         }
[09:30:48.407]         else {
[09:30:48.407]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:48.407]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:48.407]         }
[09:30:48.407]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:48.407]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:48.407]             base::sink(type = "output", split = FALSE)
[09:30:48.407]             base::close(...future.stdout)
[09:30:48.407]         }, add = TRUE)
[09:30:48.407]     }
[09:30:48.407]     ...future.frame <- base::sys.nframe()
[09:30:48.407]     ...future.conditions <- base::list()
[09:30:48.407]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:48.407]     if (FALSE) {
[09:30:48.407]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:48.407]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:48.407]     }
[09:30:48.407]     ...future.result <- base::tryCatch({
[09:30:48.407]         base::withCallingHandlers({
[09:30:48.407]             ...future.value <- base::withVisible(base::local({
[09:30:48.407]                 withCallingHandlers({
[09:30:48.407]                   {
[09:30:48.407]                     sum(x, y, ...)
[09:30:48.407]                   }
[09:30:48.407]                 }, immediateCondition = function(cond) {
[09:30:48.407]                   save_rds <- function (object, pathname, ...) 
[09:30:48.407]                   {
[09:30:48.407]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:30:48.407]                     if (file_test("-f", pathname_tmp)) {
[09:30:48.407]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.407]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:30:48.407]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.407]                         fi_tmp[["mtime"]])
[09:30:48.407]                     }
[09:30:48.407]                     tryCatch({
[09:30:48.407]                       saveRDS(object, file = pathname_tmp, ...)
[09:30:48.407]                     }, error = function(ex) {
[09:30:48.407]                       msg <- conditionMessage(ex)
[09:30:48.407]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.407]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:30:48.407]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.407]                         fi_tmp[["mtime"]], msg)
[09:30:48.407]                       ex$message <- msg
[09:30:48.407]                       stop(ex)
[09:30:48.407]                     })
[09:30:48.407]                     stopifnot(file_test("-f", pathname_tmp))
[09:30:48.407]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:30:48.407]                     if (!res || file_test("-f", pathname_tmp)) {
[09:30:48.407]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.407]                       fi <- file.info(pathname)
[09:30:48.407]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:30:48.407]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.407]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:30:48.407]                         fi[["size"]], fi[["mtime"]])
[09:30:48.407]                       stop(msg)
[09:30:48.407]                     }
[09:30:48.407]                     invisible(pathname)
[09:30:48.407]                   }
[09:30:48.407]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:30:48.407]                     rootPath = tempdir()) 
[09:30:48.407]                   {
[09:30:48.407]                     obj <- list(time = Sys.time(), condition = cond)
[09:30:48.407]                     file <- tempfile(pattern = class(cond)[1], 
[09:30:48.407]                       tmpdir = path, fileext = ".rds")
[09:30:48.407]                     save_rds(obj, file)
[09:30:48.407]                   }
[09:30:48.407]                   saveImmediateCondition(cond, path = "/tmp/RtmpbtCiVA/.future/immediateConditions")
[09:30:48.407]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.407]                   {
[09:30:48.407]                     inherits <- base::inherits
[09:30:48.407]                     invokeRestart <- base::invokeRestart
[09:30:48.407]                     is.null <- base::is.null
[09:30:48.407]                     muffled <- FALSE
[09:30:48.407]                     if (inherits(cond, "message")) {
[09:30:48.407]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:48.407]                       if (muffled) 
[09:30:48.407]                         invokeRestart("muffleMessage")
[09:30:48.407]                     }
[09:30:48.407]                     else if (inherits(cond, "warning")) {
[09:30:48.407]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:48.407]                       if (muffled) 
[09:30:48.407]                         invokeRestart("muffleWarning")
[09:30:48.407]                     }
[09:30:48.407]                     else if (inherits(cond, "condition")) {
[09:30:48.407]                       if (!is.null(pattern)) {
[09:30:48.407]                         computeRestarts <- base::computeRestarts
[09:30:48.407]                         grepl <- base::grepl
[09:30:48.407]                         restarts <- computeRestarts(cond)
[09:30:48.407]                         for (restart in restarts) {
[09:30:48.407]                           name <- restart$name
[09:30:48.407]                           if (is.null(name)) 
[09:30:48.407]                             next
[09:30:48.407]                           if (!grepl(pattern, name)) 
[09:30:48.407]                             next
[09:30:48.407]                           invokeRestart(restart)
[09:30:48.407]                           muffled <- TRUE
[09:30:48.407]                           break
[09:30:48.407]                         }
[09:30:48.407]                       }
[09:30:48.407]                     }
[09:30:48.407]                     invisible(muffled)
[09:30:48.407]                   }
[09:30:48.407]                   muffleCondition(cond)
[09:30:48.407]                 })
[09:30:48.407]             }))
[09:30:48.407]             future::FutureResult(value = ...future.value$value, 
[09:30:48.407]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.407]                   ...future.rng), globalenv = if (FALSE) 
[09:30:48.407]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:48.407]                     ...future.globalenv.names))
[09:30:48.407]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:48.407]         }, condition = base::local({
[09:30:48.407]             c <- base::c
[09:30:48.407]             inherits <- base::inherits
[09:30:48.407]             invokeRestart <- base::invokeRestart
[09:30:48.407]             length <- base::length
[09:30:48.407]             list <- base::list
[09:30:48.407]             seq.int <- base::seq.int
[09:30:48.407]             signalCondition <- base::signalCondition
[09:30:48.407]             sys.calls <- base::sys.calls
[09:30:48.407]             `[[` <- base::`[[`
[09:30:48.407]             `+` <- base::`+`
[09:30:48.407]             `<<-` <- base::`<<-`
[09:30:48.407]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:48.407]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:48.407]                   3L)]
[09:30:48.407]             }
[09:30:48.407]             function(cond) {
[09:30:48.407]                 is_error <- inherits(cond, "error")
[09:30:48.407]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:48.407]                   NULL)
[09:30:48.407]                 if (is_error) {
[09:30:48.407]                   sessionInformation <- function() {
[09:30:48.407]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:48.407]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:48.407]                       search = base::search(), system = base::Sys.info())
[09:30:48.407]                   }
[09:30:48.407]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.407]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:48.407]                     cond$call), session = sessionInformation(), 
[09:30:48.407]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:48.407]                   signalCondition(cond)
[09:30:48.407]                 }
[09:30:48.407]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:48.407]                 "immediateCondition"))) {
[09:30:48.407]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:48.407]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.407]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:48.407]                   if (TRUE && !signal) {
[09:30:48.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.407]                     {
[09:30:48.407]                       inherits <- base::inherits
[09:30:48.407]                       invokeRestart <- base::invokeRestart
[09:30:48.407]                       is.null <- base::is.null
[09:30:48.407]                       muffled <- FALSE
[09:30:48.407]                       if (inherits(cond, "message")) {
[09:30:48.407]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.407]                         if (muffled) 
[09:30:48.407]                           invokeRestart("muffleMessage")
[09:30:48.407]                       }
[09:30:48.407]                       else if (inherits(cond, "warning")) {
[09:30:48.407]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.407]                         if (muffled) 
[09:30:48.407]                           invokeRestart("muffleWarning")
[09:30:48.407]                       }
[09:30:48.407]                       else if (inherits(cond, "condition")) {
[09:30:48.407]                         if (!is.null(pattern)) {
[09:30:48.407]                           computeRestarts <- base::computeRestarts
[09:30:48.407]                           grepl <- base::grepl
[09:30:48.407]                           restarts <- computeRestarts(cond)
[09:30:48.407]                           for (restart in restarts) {
[09:30:48.407]                             name <- restart$name
[09:30:48.407]                             if (is.null(name)) 
[09:30:48.407]                               next
[09:30:48.407]                             if (!grepl(pattern, name)) 
[09:30:48.407]                               next
[09:30:48.407]                             invokeRestart(restart)
[09:30:48.407]                             muffled <- TRUE
[09:30:48.407]                             break
[09:30:48.407]                           }
[09:30:48.407]                         }
[09:30:48.407]                       }
[09:30:48.407]                       invisible(muffled)
[09:30:48.407]                     }
[09:30:48.407]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.407]                   }
[09:30:48.407]                 }
[09:30:48.407]                 else {
[09:30:48.407]                   if (TRUE) {
[09:30:48.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.407]                     {
[09:30:48.407]                       inherits <- base::inherits
[09:30:48.407]                       invokeRestart <- base::invokeRestart
[09:30:48.407]                       is.null <- base::is.null
[09:30:48.407]                       muffled <- FALSE
[09:30:48.407]                       if (inherits(cond, "message")) {
[09:30:48.407]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.407]                         if (muffled) 
[09:30:48.407]                           invokeRestart("muffleMessage")
[09:30:48.407]                       }
[09:30:48.407]                       else if (inherits(cond, "warning")) {
[09:30:48.407]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.407]                         if (muffled) 
[09:30:48.407]                           invokeRestart("muffleWarning")
[09:30:48.407]                       }
[09:30:48.407]                       else if (inherits(cond, "condition")) {
[09:30:48.407]                         if (!is.null(pattern)) {
[09:30:48.407]                           computeRestarts <- base::computeRestarts
[09:30:48.407]                           grepl <- base::grepl
[09:30:48.407]                           restarts <- computeRestarts(cond)
[09:30:48.407]                           for (restart in restarts) {
[09:30:48.407]                             name <- restart$name
[09:30:48.407]                             if (is.null(name)) 
[09:30:48.407]                               next
[09:30:48.407]                             if (!grepl(pattern, name)) 
[09:30:48.407]                               next
[09:30:48.407]                             invokeRestart(restart)
[09:30:48.407]                             muffled <- TRUE
[09:30:48.407]                             break
[09:30:48.407]                           }
[09:30:48.407]                         }
[09:30:48.407]                       }
[09:30:48.407]                       invisible(muffled)
[09:30:48.407]                     }
[09:30:48.407]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.407]                   }
[09:30:48.407]                 }
[09:30:48.407]             }
[09:30:48.407]         }))
[09:30:48.407]     }, error = function(ex) {
[09:30:48.407]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:48.407]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.407]                 ...future.rng), started = ...future.startTime, 
[09:30:48.407]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:48.407]             version = "1.8"), class = "FutureResult")
[09:30:48.407]     }, finally = {
[09:30:48.407]         if (!identical(...future.workdir, getwd())) 
[09:30:48.407]             setwd(...future.workdir)
[09:30:48.407]         {
[09:30:48.407]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:48.407]                 ...future.oldOptions$nwarnings <- NULL
[09:30:48.407]             }
[09:30:48.407]             base::options(...future.oldOptions)
[09:30:48.407]             if (.Platform$OS.type == "windows") {
[09:30:48.407]                 old_names <- names(...future.oldEnvVars)
[09:30:48.407]                 envs <- base::Sys.getenv()
[09:30:48.407]                 names <- names(envs)
[09:30:48.407]                 common <- intersect(names, old_names)
[09:30:48.407]                 added <- setdiff(names, old_names)
[09:30:48.407]                 removed <- setdiff(old_names, names)
[09:30:48.407]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:48.407]                   envs[common]]
[09:30:48.407]                 NAMES <- toupper(changed)
[09:30:48.407]                 args <- list()
[09:30:48.407]                 for (kk in seq_along(NAMES)) {
[09:30:48.407]                   name <- changed[[kk]]
[09:30:48.407]                   NAME <- NAMES[[kk]]
[09:30:48.407]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.407]                     next
[09:30:48.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.407]                 }
[09:30:48.407]                 NAMES <- toupper(added)
[09:30:48.407]                 for (kk in seq_along(NAMES)) {
[09:30:48.407]                   name <- added[[kk]]
[09:30:48.407]                   NAME <- NAMES[[kk]]
[09:30:48.407]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.407]                     next
[09:30:48.407]                   args[[name]] <- ""
[09:30:48.407]                 }
[09:30:48.407]                 NAMES <- toupper(removed)
[09:30:48.407]                 for (kk in seq_along(NAMES)) {
[09:30:48.407]                   name <- removed[[kk]]
[09:30:48.407]                   NAME <- NAMES[[kk]]
[09:30:48.407]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.407]                     next
[09:30:48.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.407]                 }
[09:30:48.407]                 if (length(args) > 0) 
[09:30:48.407]                   base::do.call(base::Sys.setenv, args = args)
[09:30:48.407]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:48.407]             }
[09:30:48.407]             else {
[09:30:48.407]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:48.407]             }
[09:30:48.407]             {
[09:30:48.407]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:48.407]                   0L) {
[09:30:48.407]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:48.407]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:48.407]                   base::options(opts)
[09:30:48.407]                 }
[09:30:48.407]                 {
[09:30:48.407]                   {
[09:30:48.407]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:48.407]                     NULL
[09:30:48.407]                   }
[09:30:48.407]                   options(future.plan = NULL)
[09:30:48.407]                   if (is.na(NA_character_)) 
[09:30:48.407]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.407]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:48.407]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:48.407]                     .init = FALSE)
[09:30:48.407]                 }
[09:30:48.407]             }
[09:30:48.407]         }
[09:30:48.407]     })
[09:30:48.407]     if (TRUE) {
[09:30:48.407]         base::sink(type = "output", split = FALSE)
[09:30:48.407]         if (TRUE) {
[09:30:48.407]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:48.407]         }
[09:30:48.407]         else {
[09:30:48.407]             ...future.result["stdout"] <- base::list(NULL)
[09:30:48.407]         }
[09:30:48.407]         base::close(...future.stdout)
[09:30:48.407]         ...future.stdout <- NULL
[09:30:48.407]     }
[09:30:48.407]     ...future.result$conditions <- ...future.conditions
[09:30:48.407]     ...future.result$finished <- base::Sys.time()
[09:30:48.407]     ...future.result
[09:30:48.407] }
[09:30:48.410] assign_globals() ...
[09:30:48.410] List of 2
[09:30:48.410]  $ x: int [1:2] 1 2
[09:30:48.410]  $ y: num 3
[09:30:48.410]  - attr(*, "where")=List of 2
[09:30:48.410]   ..$ x:<environment: R_EmptyEnv> 
[09:30:48.410]   ..$ y:<environment: R_EmptyEnv> 
[09:30:48.410]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:48.410]  - attr(*, "resolved")= logi FALSE
[09:30:48.410]  - attr(*, "total_size")= num 112
[09:30:48.410]  - attr(*, "already-done")= logi TRUE
[09:30:48.413] - copied ‘x’ to environment
[09:30:48.413] - copied ‘y’ to environment
[09:30:48.414] assign_globals() ... done
[09:30:48.414] requestCore(): workers = 2
[09:30:48.416] MulticoreFuture started
[09:30:48.416] - Launch lazy future ... done
[09:30:48.416] run() for ‘MulticoreFuture’ ... done
[09:30:48.417] result() for MulticoreFuture ...
[09:30:48.417] plan(): Setting new future strategy stack:
[09:30:48.417] List of future strategies:
[09:30:48.417] 1. sequential:
[09:30:48.417]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.417]    - tweaked: FALSE
[09:30:48.417]    - call: NULL
[09:30:48.418] plan(): nbrOfWorkers() = 1
[09:30:48.420] plan(): Setting new future strategy stack:
[09:30:48.420] List of future strategies:
[09:30:48.420] 1. multicore:
[09:30:48.420]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:30:48.420]    - tweaked: FALSE
[09:30:48.420]    - call: plan(strategy, substitute = FALSE)
[09:30:48.426] plan(): nbrOfWorkers() = 2
[09:30:48.431] result() for MulticoreFuture ...
[09:30:48.432] result() for MulticoreFuture ... done
[09:30:48.432] signalConditions() ...
[09:30:48.432]  - include = ‘immediateCondition’
[09:30:48.432]  - exclude = 
[09:30:48.432]  - resignal = FALSE
[09:30:48.432]  - Number of conditions: 1
[09:30:48.432] signalConditions() ... done
[09:30:48.432] result() for MulticoreFuture ... done
[09:30:48.433] result() for MulticoreFuture ...
[09:30:48.433] result() for MulticoreFuture ... done
[09:30:48.433] signalConditions() ...
[09:30:48.433]  - include = ‘immediateCondition’
[09:30:48.433]  - exclude = 
[09:30:48.433]  - resignal = FALSE
[09:30:48.433]  - Number of conditions: 1
[09:30:48.433] signalConditions() ... done
[09:30:48.434] Future state: ‘finished’
[09:30:48.434] result() for MulticoreFuture ...
[09:30:48.434] result() for MulticoreFuture ... done
[09:30:48.434] signalConditions() ...
[09:30:48.434]  - include = ‘condition’
[09:30:48.434]  - exclude = ‘immediateCondition’
[09:30:48.434]  - resignal = TRUE
[09:30:48.434]  - Number of conditions: 1
[09:30:48.434]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:30:48.435] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpbtCiVA/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multicore') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x559329b9b798>
Arguments '...' exists: TRUE
[09:30:48.436] getGlobalsAndPackages() ...
[09:30:48.436] - globals passed as-is: [1] ‘...’
[09:30:48.436] Resolving globals: FALSE
[09:30:48.437] Tweak future expression to call with '...' arguments ...
[09:30:48.437] {
[09:30:48.437]     do.call(function(...) {
[09:30:48.437]         fcn <- function() sum(...)
[09:30:48.437]         fcn()
[09:30:48.437]     }, args = future.call.arguments)
[09:30:48.437] }
[09:30:48.437] Tweak future expression to call with '...' arguments ... DONE
[09:30:48.438] The total size of the 1 globals is 112 bytes (112 bytes)
[09:30:48.438] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[09:30:48.438] - globals: [1] ‘future.call.arguments’
[09:30:48.438] 
[09:30:48.438] getGlobalsAndPackages() ... DONE
[09:30:48.439] run() for ‘Future’ ...
[09:30:48.439] - state: ‘created’
[09:30:48.439] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:30:48.446] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:48.446] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:30:48.446]   - Field: ‘label’
[09:30:48.447]   - Field: ‘local’
[09:30:48.447]   - Field: ‘owner’
[09:30:48.447]   - Field: ‘envir’
[09:30:48.447]   - Field: ‘workers’
[09:30:48.447]   - Field: ‘packages’
[09:30:48.447]   - Field: ‘gc’
[09:30:48.447]   - Field: ‘job’
[09:30:48.447]   - Field: ‘conditions’
[09:30:48.448]   - Field: ‘expr’
[09:30:48.448]   - Field: ‘uuid’
[09:30:48.448]   - Field: ‘seed’
[09:30:48.448]   - Field: ‘version’
[09:30:48.448]   - Field: ‘result’
[09:30:48.448]   - Field: ‘asynchronous’
[09:30:48.448]   - Field: ‘calls’
[09:30:48.448]   - Field: ‘globals’
[09:30:48.449]   - Field: ‘stdout’
[09:30:48.449]   - Field: ‘earlySignal’
[09:30:48.449]   - Field: ‘lazy’
[09:30:48.449]   - Field: ‘state’
[09:30:48.449] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:30:48.449] - Launch lazy future ...
[09:30:48.449] Packages needed by the future expression (n = 0): <none>
[09:30:48.450] Packages needed by future strategies (n = 0): <none>
[09:30:48.450] {
[09:30:48.450]     {
[09:30:48.450]         {
[09:30:48.450]             ...future.startTime <- base::Sys.time()
[09:30:48.450]             {
[09:30:48.450]                 {
[09:30:48.450]                   {
[09:30:48.450]                     {
[09:30:48.450]                       base::local({
[09:30:48.450]                         has_future <- base::requireNamespace("future", 
[09:30:48.450]                           quietly = TRUE)
[09:30:48.450]                         if (has_future) {
[09:30:48.450]                           ns <- base::getNamespace("future")
[09:30:48.450]                           version <- ns[[".package"]][["version"]]
[09:30:48.450]                           if (is.null(version)) 
[09:30:48.450]                             version <- utils::packageVersion("future")
[09:30:48.450]                         }
[09:30:48.450]                         else {
[09:30:48.450]                           version <- NULL
[09:30:48.450]                         }
[09:30:48.450]                         if (!has_future || version < "1.8.0") {
[09:30:48.450]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:48.450]                             "", base::R.version$version.string), 
[09:30:48.450]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:48.450]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:48.450]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:48.450]                               "release", "version")], collapse = " "), 
[09:30:48.450]                             hostname = base::Sys.info()[["nodename"]])
[09:30:48.450]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:48.450]                             info)
[09:30:48.450]                           info <- base::paste(info, collapse = "; ")
[09:30:48.450]                           if (!has_future) {
[09:30:48.450]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:48.450]                               info)
[09:30:48.450]                           }
[09:30:48.450]                           else {
[09:30:48.450]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:48.450]                               info, version)
[09:30:48.450]                           }
[09:30:48.450]                           base::stop(msg)
[09:30:48.450]                         }
[09:30:48.450]                       })
[09:30:48.450]                     }
[09:30:48.450]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:48.450]                     base::options(mc.cores = 1L)
[09:30:48.450]                   }
[09:30:48.450]                   ...future.strategy.old <- future::plan("list")
[09:30:48.450]                   options(future.plan = NULL)
[09:30:48.450]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.450]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:48.450]                 }
[09:30:48.450]                 ...future.workdir <- getwd()
[09:30:48.450]             }
[09:30:48.450]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:48.450]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:48.450]         }
[09:30:48.450]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:48.450]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:48.450]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:48.450]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:48.450]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:48.450]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:48.450]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:48.450]             base::names(...future.oldOptions))
[09:30:48.450]     }
[09:30:48.450]     if (FALSE) {
[09:30:48.450]     }
[09:30:48.450]     else {
[09:30:48.450]         if (TRUE) {
[09:30:48.450]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:48.450]                 open = "w")
[09:30:48.450]         }
[09:30:48.450]         else {
[09:30:48.450]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:48.450]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:48.450]         }
[09:30:48.450]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:48.450]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:48.450]             base::sink(type = "output", split = FALSE)
[09:30:48.450]             base::close(...future.stdout)
[09:30:48.450]         }, add = TRUE)
[09:30:48.450]     }
[09:30:48.450]     ...future.frame <- base::sys.nframe()
[09:30:48.450]     ...future.conditions <- base::list()
[09:30:48.450]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:48.450]     if (FALSE) {
[09:30:48.450]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:48.450]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:48.450]     }
[09:30:48.450]     ...future.result <- base::tryCatch({
[09:30:48.450]         base::withCallingHandlers({
[09:30:48.450]             ...future.value <- base::withVisible(base::local({
[09:30:48.450]                 withCallingHandlers({
[09:30:48.450]                   {
[09:30:48.450]                     do.call(function(...) {
[09:30:48.450]                       fcn <- function() sum(...)
[09:30:48.450]                       fcn()
[09:30:48.450]                     }, args = future.call.arguments)
[09:30:48.450]                   }
[09:30:48.450]                 }, immediateCondition = function(cond) {
[09:30:48.450]                   save_rds <- function (object, pathname, ...) 
[09:30:48.450]                   {
[09:30:48.450]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:30:48.450]                     if (file_test("-f", pathname_tmp)) {
[09:30:48.450]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.450]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:30:48.450]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.450]                         fi_tmp[["mtime"]])
[09:30:48.450]                     }
[09:30:48.450]                     tryCatch({
[09:30:48.450]                       saveRDS(object, file = pathname_tmp, ...)
[09:30:48.450]                     }, error = function(ex) {
[09:30:48.450]                       msg <- conditionMessage(ex)
[09:30:48.450]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.450]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:30:48.450]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.450]                         fi_tmp[["mtime"]], msg)
[09:30:48.450]                       ex$message <- msg
[09:30:48.450]                       stop(ex)
[09:30:48.450]                     })
[09:30:48.450]                     stopifnot(file_test("-f", pathname_tmp))
[09:30:48.450]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:30:48.450]                     if (!res || file_test("-f", pathname_tmp)) {
[09:30:48.450]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.450]                       fi <- file.info(pathname)
[09:30:48.450]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:30:48.450]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.450]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:30:48.450]                         fi[["size"]], fi[["mtime"]])
[09:30:48.450]                       stop(msg)
[09:30:48.450]                     }
[09:30:48.450]                     invisible(pathname)
[09:30:48.450]                   }
[09:30:48.450]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:30:48.450]                     rootPath = tempdir()) 
[09:30:48.450]                   {
[09:30:48.450]                     obj <- list(time = Sys.time(), condition = cond)
[09:30:48.450]                     file <- tempfile(pattern = class(cond)[1], 
[09:30:48.450]                       tmpdir = path, fileext = ".rds")
[09:30:48.450]                     save_rds(obj, file)
[09:30:48.450]                   }
[09:30:48.450]                   saveImmediateCondition(cond, path = "/tmp/RtmpbtCiVA/.future/immediateConditions")
[09:30:48.450]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.450]                   {
[09:30:48.450]                     inherits <- base::inherits
[09:30:48.450]                     invokeRestart <- base::invokeRestart
[09:30:48.450]                     is.null <- base::is.null
[09:30:48.450]                     muffled <- FALSE
[09:30:48.450]                     if (inherits(cond, "message")) {
[09:30:48.450]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:48.450]                       if (muffled) 
[09:30:48.450]                         invokeRestart("muffleMessage")
[09:30:48.450]                     }
[09:30:48.450]                     else if (inherits(cond, "warning")) {
[09:30:48.450]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:48.450]                       if (muffled) 
[09:30:48.450]                         invokeRestart("muffleWarning")
[09:30:48.450]                     }
[09:30:48.450]                     else if (inherits(cond, "condition")) {
[09:30:48.450]                       if (!is.null(pattern)) {
[09:30:48.450]                         computeRestarts <- base::computeRestarts
[09:30:48.450]                         grepl <- base::grepl
[09:30:48.450]                         restarts <- computeRestarts(cond)
[09:30:48.450]                         for (restart in restarts) {
[09:30:48.450]                           name <- restart$name
[09:30:48.450]                           if (is.null(name)) 
[09:30:48.450]                             next
[09:30:48.450]                           if (!grepl(pattern, name)) 
[09:30:48.450]                             next
[09:30:48.450]                           invokeRestart(restart)
[09:30:48.450]                           muffled <- TRUE
[09:30:48.450]                           break
[09:30:48.450]                         }
[09:30:48.450]                       }
[09:30:48.450]                     }
[09:30:48.450]                     invisible(muffled)
[09:30:48.450]                   }
[09:30:48.450]                   muffleCondition(cond)
[09:30:48.450]                 })
[09:30:48.450]             }))
[09:30:48.450]             future::FutureResult(value = ...future.value$value, 
[09:30:48.450]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.450]                   ...future.rng), globalenv = if (FALSE) 
[09:30:48.450]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:48.450]                     ...future.globalenv.names))
[09:30:48.450]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:48.450]         }, condition = base::local({
[09:30:48.450]             c <- base::c
[09:30:48.450]             inherits <- base::inherits
[09:30:48.450]             invokeRestart <- base::invokeRestart
[09:30:48.450]             length <- base::length
[09:30:48.450]             list <- base::list
[09:30:48.450]             seq.int <- base::seq.int
[09:30:48.450]             signalCondition <- base::signalCondition
[09:30:48.450]             sys.calls <- base::sys.calls
[09:30:48.450]             `[[` <- base::`[[`
[09:30:48.450]             `+` <- base::`+`
[09:30:48.450]             `<<-` <- base::`<<-`
[09:30:48.450]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:48.450]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:48.450]                   3L)]
[09:30:48.450]             }
[09:30:48.450]             function(cond) {
[09:30:48.450]                 is_error <- inherits(cond, "error")
[09:30:48.450]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:48.450]                   NULL)
[09:30:48.450]                 if (is_error) {
[09:30:48.450]                   sessionInformation <- function() {
[09:30:48.450]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:48.450]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:48.450]                       search = base::search(), system = base::Sys.info())
[09:30:48.450]                   }
[09:30:48.450]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.450]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:48.450]                     cond$call), session = sessionInformation(), 
[09:30:48.450]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:48.450]                   signalCondition(cond)
[09:30:48.450]                 }
[09:30:48.450]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:48.450]                 "immediateCondition"))) {
[09:30:48.450]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:48.450]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.450]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:48.450]                   if (TRUE && !signal) {
[09:30:48.450]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.450]                     {
[09:30:48.450]                       inherits <- base::inherits
[09:30:48.450]                       invokeRestart <- base::invokeRestart
[09:30:48.450]                       is.null <- base::is.null
[09:30:48.450]                       muffled <- FALSE
[09:30:48.450]                       if (inherits(cond, "message")) {
[09:30:48.450]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.450]                         if (muffled) 
[09:30:48.450]                           invokeRestart("muffleMessage")
[09:30:48.450]                       }
[09:30:48.450]                       else if (inherits(cond, "warning")) {
[09:30:48.450]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.450]                         if (muffled) 
[09:30:48.450]                           invokeRestart("muffleWarning")
[09:30:48.450]                       }
[09:30:48.450]                       else if (inherits(cond, "condition")) {
[09:30:48.450]                         if (!is.null(pattern)) {
[09:30:48.450]                           computeRestarts <- base::computeRestarts
[09:30:48.450]                           grepl <- base::grepl
[09:30:48.450]                           restarts <- computeRestarts(cond)
[09:30:48.450]                           for (restart in restarts) {
[09:30:48.450]                             name <- restart$name
[09:30:48.450]                             if (is.null(name)) 
[09:30:48.450]                               next
[09:30:48.450]                             if (!grepl(pattern, name)) 
[09:30:48.450]                               next
[09:30:48.450]                             invokeRestart(restart)
[09:30:48.450]                             muffled <- TRUE
[09:30:48.450]                             break
[09:30:48.450]                           }
[09:30:48.450]                         }
[09:30:48.450]                       }
[09:30:48.450]                       invisible(muffled)
[09:30:48.450]                     }
[09:30:48.450]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.450]                   }
[09:30:48.450]                 }
[09:30:48.450]                 else {
[09:30:48.450]                   if (TRUE) {
[09:30:48.450]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.450]                     {
[09:30:48.450]                       inherits <- base::inherits
[09:30:48.450]                       invokeRestart <- base::invokeRestart
[09:30:48.450]                       is.null <- base::is.null
[09:30:48.450]                       muffled <- FALSE
[09:30:48.450]                       if (inherits(cond, "message")) {
[09:30:48.450]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.450]                         if (muffled) 
[09:30:48.450]                           invokeRestart("muffleMessage")
[09:30:48.450]                       }
[09:30:48.450]                       else if (inherits(cond, "warning")) {
[09:30:48.450]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.450]                         if (muffled) 
[09:30:48.450]                           invokeRestart("muffleWarning")
[09:30:48.450]                       }
[09:30:48.450]                       else if (inherits(cond, "condition")) {
[09:30:48.450]                         if (!is.null(pattern)) {
[09:30:48.450]                           computeRestarts <- base::computeRestarts
[09:30:48.450]                           grepl <- base::grepl
[09:30:48.450]                           restarts <- computeRestarts(cond)
[09:30:48.450]                           for (restart in restarts) {
[09:30:48.450]                             name <- restart$name
[09:30:48.450]                             if (is.null(name)) 
[09:30:48.450]                               next
[09:30:48.450]                             if (!grepl(pattern, name)) 
[09:30:48.450]                               next
[09:30:48.450]                             invokeRestart(restart)
[09:30:48.450]                             muffled <- TRUE
[09:30:48.450]                             break
[09:30:48.450]                           }
[09:30:48.450]                         }
[09:30:48.450]                       }
[09:30:48.450]                       invisible(muffled)
[09:30:48.450]                     }
[09:30:48.450]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.450]                   }
[09:30:48.450]                 }
[09:30:48.450]             }
[09:30:48.450]         }))
[09:30:48.450]     }, error = function(ex) {
[09:30:48.450]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:48.450]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.450]                 ...future.rng), started = ...future.startTime, 
[09:30:48.450]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:48.450]             version = "1.8"), class = "FutureResult")
[09:30:48.450]     }, finally = {
[09:30:48.450]         if (!identical(...future.workdir, getwd())) 
[09:30:48.450]             setwd(...future.workdir)
[09:30:48.450]         {
[09:30:48.450]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:48.450]                 ...future.oldOptions$nwarnings <- NULL
[09:30:48.450]             }
[09:30:48.450]             base::options(...future.oldOptions)
[09:30:48.450]             if (.Platform$OS.type == "windows") {
[09:30:48.450]                 old_names <- names(...future.oldEnvVars)
[09:30:48.450]                 envs <- base::Sys.getenv()
[09:30:48.450]                 names <- names(envs)
[09:30:48.450]                 common <- intersect(names, old_names)
[09:30:48.450]                 added <- setdiff(names, old_names)
[09:30:48.450]                 removed <- setdiff(old_names, names)
[09:30:48.450]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:48.450]                   envs[common]]
[09:30:48.450]                 NAMES <- toupper(changed)
[09:30:48.450]                 args <- list()
[09:30:48.450]                 for (kk in seq_along(NAMES)) {
[09:30:48.450]                   name <- changed[[kk]]
[09:30:48.450]                   NAME <- NAMES[[kk]]
[09:30:48.450]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.450]                     next
[09:30:48.450]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.450]                 }
[09:30:48.450]                 NAMES <- toupper(added)
[09:30:48.450]                 for (kk in seq_along(NAMES)) {
[09:30:48.450]                   name <- added[[kk]]
[09:30:48.450]                   NAME <- NAMES[[kk]]
[09:30:48.450]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.450]                     next
[09:30:48.450]                   args[[name]] <- ""
[09:30:48.450]                 }
[09:30:48.450]                 NAMES <- toupper(removed)
[09:30:48.450]                 for (kk in seq_along(NAMES)) {
[09:30:48.450]                   name <- removed[[kk]]
[09:30:48.450]                   NAME <- NAMES[[kk]]
[09:30:48.450]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.450]                     next
[09:30:48.450]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.450]                 }
[09:30:48.450]                 if (length(args) > 0) 
[09:30:48.450]                   base::do.call(base::Sys.setenv, args = args)
[09:30:48.450]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:48.450]             }
[09:30:48.450]             else {
[09:30:48.450]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:48.450]             }
[09:30:48.450]             {
[09:30:48.450]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:48.450]                   0L) {
[09:30:48.450]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:48.450]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:48.450]                   base::options(opts)
[09:30:48.450]                 }
[09:30:48.450]                 {
[09:30:48.450]                   {
[09:30:48.450]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:48.450]                     NULL
[09:30:48.450]                   }
[09:30:48.450]                   options(future.plan = NULL)
[09:30:48.450]                   if (is.na(NA_character_)) 
[09:30:48.450]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.450]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:48.450]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:48.450]                     .init = FALSE)
[09:30:48.450]                 }
[09:30:48.450]             }
[09:30:48.450]         }
[09:30:48.450]     })
[09:30:48.450]     if (TRUE) {
[09:30:48.450]         base::sink(type = "output", split = FALSE)
[09:30:48.450]         if (TRUE) {
[09:30:48.450]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:48.450]         }
[09:30:48.450]         else {
[09:30:48.450]             ...future.result["stdout"] <- base::list(NULL)
[09:30:48.450]         }
[09:30:48.450]         base::close(...future.stdout)
[09:30:48.450]         ...future.stdout <- NULL
[09:30:48.450]     }
[09:30:48.450]     ...future.result$conditions <- ...future.conditions
[09:30:48.450]     ...future.result$finished <- base::Sys.time()
[09:30:48.450]     ...future.result
[09:30:48.450] }
[09:30:48.452] assign_globals() ...
[09:30:48.453] List of 1
[09:30:48.453]  $ future.call.arguments:List of 2
[09:30:48.453]   ..$ : int [1:2] 1 2
[09:30:48.453]   ..$ : num 3
[09:30:48.453]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:30:48.453]  - attr(*, "where")=List of 1
[09:30:48.453]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[09:30:48.453]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:48.453]  - attr(*, "resolved")= logi FALSE
[09:30:48.453]  - attr(*, "total_size")= num 112
[09:30:48.453]  - attr(*, "already-done")= logi TRUE
[09:30:48.457] - copied ‘future.call.arguments’ to environment
[09:30:48.457] assign_globals() ... done
[09:30:48.457] requestCore(): workers = 2
[09:30:48.459] MulticoreFuture started
[09:30:48.459] - Launch lazy future ... done
[09:30:48.460] run() for ‘MulticoreFuture’ ... done
[09:30:48.460] result() for MulticoreFuture ...
[09:30:48.460] plan(): Setting new future strategy stack:
[09:30:48.460] List of future strategies:
[09:30:48.460] 1. sequential:
[09:30:48.460]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.460]    - tweaked: FALSE
[09:30:48.460]    - call: NULL
[09:30:48.461] plan(): nbrOfWorkers() = 1
[09:30:48.463] plan(): Setting new future strategy stack:
[09:30:48.464] List of future strategies:
[09:30:48.464] 1. multicore:
[09:30:48.464]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:30:48.464]    - tweaked: FALSE
[09:30:48.464]    - call: plan(strategy, substitute = FALSE)
[09:30:48.469] plan(): nbrOfWorkers() = 2
[09:30:48.470] result() for MulticoreFuture ...
[09:30:48.470] result() for MulticoreFuture ... done
[09:30:48.470] result() for MulticoreFuture ... done
[09:30:48.470] result() for MulticoreFuture ...
[09:30:48.470] result() for MulticoreFuture ... done
[1] 6
** Sum function 'F' with plan('multicore') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x559327be1d68>
Using '...' in a formula
[09:30:48.471] getGlobalsAndPackages() ...
[09:30:48.471] Searching for globals...
[09:30:48.475] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[09:30:48.475] Searching for globals ... DONE
[09:30:48.476] Resolving globals: FALSE
[09:30:48.476] Tweak future expression to call with '...' arguments ...
[09:30:48.476] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[09:30:48.477] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[09:30:48.477] - globals: [3] ‘fcn’, ‘x’, ‘y’
[09:30:48.477] 
[09:30:48.477] getGlobalsAndPackages() ... DONE
[09:30:48.478] run() for ‘Future’ ...
[09:30:48.478] - state: ‘created’
[09:30:48.478] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:30:48.482] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:48.482] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:30:48.482]   - Field: ‘label’
[09:30:48.482]   - Field: ‘local’
[09:30:48.483]   - Field: ‘owner’
[09:30:48.483]   - Field: ‘envir’
[09:30:48.483]   - Field: ‘workers’
[09:30:48.483]   - Field: ‘packages’
[09:30:48.483]   - Field: ‘gc’
[09:30:48.483]   - Field: ‘job’
[09:30:48.483]   - Field: ‘conditions’
[09:30:48.483]   - Field: ‘expr’
[09:30:48.483]   - Field: ‘uuid’
[09:30:48.484]   - Field: ‘seed’
[09:30:48.484]   - Field: ‘version’
[09:30:48.484]   - Field: ‘result’
[09:30:48.484]   - Field: ‘asynchronous’
[09:30:48.484]   - Field: ‘calls’
[09:30:48.484]   - Field: ‘globals’
[09:30:48.484]   - Field: ‘stdout’
[09:30:48.484]   - Field: ‘earlySignal’
[09:30:48.485]   - Field: ‘lazy’
[09:30:48.485]   - Field: ‘state’
[09:30:48.485] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:30:48.485] - Launch lazy future ...
[09:30:48.485] Packages needed by the future expression (n = 0): <none>
[09:30:48.485] Packages needed by future strategies (n = 0): <none>
[09:30:48.486] {
[09:30:48.486]     {
[09:30:48.486]         {
[09:30:48.486]             ...future.startTime <- base::Sys.time()
[09:30:48.486]             {
[09:30:48.486]                 {
[09:30:48.486]                   {
[09:30:48.486]                     {
[09:30:48.486]                       base::local({
[09:30:48.486]                         has_future <- base::requireNamespace("future", 
[09:30:48.486]                           quietly = TRUE)
[09:30:48.486]                         if (has_future) {
[09:30:48.486]                           ns <- base::getNamespace("future")
[09:30:48.486]                           version <- ns[[".package"]][["version"]]
[09:30:48.486]                           if (is.null(version)) 
[09:30:48.486]                             version <- utils::packageVersion("future")
[09:30:48.486]                         }
[09:30:48.486]                         else {
[09:30:48.486]                           version <- NULL
[09:30:48.486]                         }
[09:30:48.486]                         if (!has_future || version < "1.8.0") {
[09:30:48.486]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:48.486]                             "", base::R.version$version.string), 
[09:30:48.486]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:48.486]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:48.486]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:48.486]                               "release", "version")], collapse = " "), 
[09:30:48.486]                             hostname = base::Sys.info()[["nodename"]])
[09:30:48.486]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:48.486]                             info)
[09:30:48.486]                           info <- base::paste(info, collapse = "; ")
[09:30:48.486]                           if (!has_future) {
[09:30:48.486]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:48.486]                               info)
[09:30:48.486]                           }
[09:30:48.486]                           else {
[09:30:48.486]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:48.486]                               info, version)
[09:30:48.486]                           }
[09:30:48.486]                           base::stop(msg)
[09:30:48.486]                         }
[09:30:48.486]                       })
[09:30:48.486]                     }
[09:30:48.486]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:48.486]                     base::options(mc.cores = 1L)
[09:30:48.486]                   }
[09:30:48.486]                   ...future.strategy.old <- future::plan("list")
[09:30:48.486]                   options(future.plan = NULL)
[09:30:48.486]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.486]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:48.486]                 }
[09:30:48.486]                 ...future.workdir <- getwd()
[09:30:48.486]             }
[09:30:48.486]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:48.486]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:48.486]         }
[09:30:48.486]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:48.486]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:48.486]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:48.486]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:48.486]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:48.486]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:48.486]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:48.486]             base::names(...future.oldOptions))
[09:30:48.486]     }
[09:30:48.486]     if (FALSE) {
[09:30:48.486]     }
[09:30:48.486]     else {
[09:30:48.486]         if (TRUE) {
[09:30:48.486]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:48.486]                 open = "w")
[09:30:48.486]         }
[09:30:48.486]         else {
[09:30:48.486]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:48.486]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:48.486]         }
[09:30:48.486]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:48.486]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:48.486]             base::sink(type = "output", split = FALSE)
[09:30:48.486]             base::close(...future.stdout)
[09:30:48.486]         }, add = TRUE)
[09:30:48.486]     }
[09:30:48.486]     ...future.frame <- base::sys.nframe()
[09:30:48.486]     ...future.conditions <- base::list()
[09:30:48.486]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:48.486]     if (FALSE) {
[09:30:48.486]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:48.486]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:48.486]     }
[09:30:48.486]     ...future.result <- base::tryCatch({
[09:30:48.486]         base::withCallingHandlers({
[09:30:48.486]             ...future.value <- base::withVisible(base::local({
[09:30:48.486]                 withCallingHandlers({
[09:30:48.486]                   fcn(x, y)
[09:30:48.486]                 }, immediateCondition = function(cond) {
[09:30:48.486]                   save_rds <- function (object, pathname, ...) 
[09:30:48.486]                   {
[09:30:48.486]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:30:48.486]                     if (file_test("-f", pathname_tmp)) {
[09:30:48.486]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.486]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:30:48.486]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.486]                         fi_tmp[["mtime"]])
[09:30:48.486]                     }
[09:30:48.486]                     tryCatch({
[09:30:48.486]                       saveRDS(object, file = pathname_tmp, ...)
[09:30:48.486]                     }, error = function(ex) {
[09:30:48.486]                       msg <- conditionMessage(ex)
[09:30:48.486]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.486]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:30:48.486]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.486]                         fi_tmp[["mtime"]], msg)
[09:30:48.486]                       ex$message <- msg
[09:30:48.486]                       stop(ex)
[09:30:48.486]                     })
[09:30:48.486]                     stopifnot(file_test("-f", pathname_tmp))
[09:30:48.486]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:30:48.486]                     if (!res || file_test("-f", pathname_tmp)) {
[09:30:48.486]                       fi_tmp <- file.info(pathname_tmp)
[09:30:48.486]                       fi <- file.info(pathname)
[09:30:48.486]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:30:48.486]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:30:48.486]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:30:48.486]                         fi[["size"]], fi[["mtime"]])
[09:30:48.486]                       stop(msg)
[09:30:48.486]                     }
[09:30:48.486]                     invisible(pathname)
[09:30:48.486]                   }
[09:30:48.486]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:30:48.486]                     rootPath = tempdir()) 
[09:30:48.486]                   {
[09:30:48.486]                     obj <- list(time = Sys.time(), condition = cond)
[09:30:48.486]                     file <- tempfile(pattern = class(cond)[1], 
[09:30:48.486]                       tmpdir = path, fileext = ".rds")
[09:30:48.486]                     save_rds(obj, file)
[09:30:48.486]                   }
[09:30:48.486]                   saveImmediateCondition(cond, path = "/tmp/RtmpbtCiVA/.future/immediateConditions")
[09:30:48.486]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.486]                   {
[09:30:48.486]                     inherits <- base::inherits
[09:30:48.486]                     invokeRestart <- base::invokeRestart
[09:30:48.486]                     is.null <- base::is.null
[09:30:48.486]                     muffled <- FALSE
[09:30:48.486]                     if (inherits(cond, "message")) {
[09:30:48.486]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:48.486]                       if (muffled) 
[09:30:48.486]                         invokeRestart("muffleMessage")
[09:30:48.486]                     }
[09:30:48.486]                     else if (inherits(cond, "warning")) {
[09:30:48.486]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:48.486]                       if (muffled) 
[09:30:48.486]                         invokeRestart("muffleWarning")
[09:30:48.486]                     }
[09:30:48.486]                     else if (inherits(cond, "condition")) {
[09:30:48.486]                       if (!is.null(pattern)) {
[09:30:48.486]                         computeRestarts <- base::computeRestarts
[09:30:48.486]                         grepl <- base::grepl
[09:30:48.486]                         restarts <- computeRestarts(cond)
[09:30:48.486]                         for (restart in restarts) {
[09:30:48.486]                           name <- restart$name
[09:30:48.486]                           if (is.null(name)) 
[09:30:48.486]                             next
[09:30:48.486]                           if (!grepl(pattern, name)) 
[09:30:48.486]                             next
[09:30:48.486]                           invokeRestart(restart)
[09:30:48.486]                           muffled <- TRUE
[09:30:48.486]                           break
[09:30:48.486]                         }
[09:30:48.486]                       }
[09:30:48.486]                     }
[09:30:48.486]                     invisible(muffled)
[09:30:48.486]                   }
[09:30:48.486]                   muffleCondition(cond)
[09:30:48.486]                 })
[09:30:48.486]             }))
[09:30:48.486]             future::FutureResult(value = ...future.value$value, 
[09:30:48.486]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.486]                   ...future.rng), globalenv = if (FALSE) 
[09:30:48.486]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:48.486]                     ...future.globalenv.names))
[09:30:48.486]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:48.486]         }, condition = base::local({
[09:30:48.486]             c <- base::c
[09:30:48.486]             inherits <- base::inherits
[09:30:48.486]             invokeRestart <- base::invokeRestart
[09:30:48.486]             length <- base::length
[09:30:48.486]             list <- base::list
[09:30:48.486]             seq.int <- base::seq.int
[09:30:48.486]             signalCondition <- base::signalCondition
[09:30:48.486]             sys.calls <- base::sys.calls
[09:30:48.486]             `[[` <- base::`[[`
[09:30:48.486]             `+` <- base::`+`
[09:30:48.486]             `<<-` <- base::`<<-`
[09:30:48.486]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:48.486]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:48.486]                   3L)]
[09:30:48.486]             }
[09:30:48.486]             function(cond) {
[09:30:48.486]                 is_error <- inherits(cond, "error")
[09:30:48.486]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:48.486]                   NULL)
[09:30:48.486]                 if (is_error) {
[09:30:48.486]                   sessionInformation <- function() {
[09:30:48.486]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:48.486]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:48.486]                       search = base::search(), system = base::Sys.info())
[09:30:48.486]                   }
[09:30:48.486]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.486]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:48.486]                     cond$call), session = sessionInformation(), 
[09:30:48.486]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:48.486]                   signalCondition(cond)
[09:30:48.486]                 }
[09:30:48.486]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:48.486]                 "immediateCondition"))) {
[09:30:48.486]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:48.486]                   ...future.conditions[[length(...future.conditions) + 
[09:30:48.486]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:48.486]                   if (TRUE && !signal) {
[09:30:48.486]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.486]                     {
[09:30:48.486]                       inherits <- base::inherits
[09:30:48.486]                       invokeRestart <- base::invokeRestart
[09:30:48.486]                       is.null <- base::is.null
[09:30:48.486]                       muffled <- FALSE
[09:30:48.486]                       if (inherits(cond, "message")) {
[09:30:48.486]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.486]                         if (muffled) 
[09:30:48.486]                           invokeRestart("muffleMessage")
[09:30:48.486]                       }
[09:30:48.486]                       else if (inherits(cond, "warning")) {
[09:30:48.486]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.486]                         if (muffled) 
[09:30:48.486]                           invokeRestart("muffleWarning")
[09:30:48.486]                       }
[09:30:48.486]                       else if (inherits(cond, "condition")) {
[09:30:48.486]                         if (!is.null(pattern)) {
[09:30:48.486]                           computeRestarts <- base::computeRestarts
[09:30:48.486]                           grepl <- base::grepl
[09:30:48.486]                           restarts <- computeRestarts(cond)
[09:30:48.486]                           for (restart in restarts) {
[09:30:48.486]                             name <- restart$name
[09:30:48.486]                             if (is.null(name)) 
[09:30:48.486]                               next
[09:30:48.486]                             if (!grepl(pattern, name)) 
[09:30:48.486]                               next
[09:30:48.486]                             invokeRestart(restart)
[09:30:48.486]                             muffled <- TRUE
[09:30:48.486]                             break
[09:30:48.486]                           }
[09:30:48.486]                         }
[09:30:48.486]                       }
[09:30:48.486]                       invisible(muffled)
[09:30:48.486]                     }
[09:30:48.486]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.486]                   }
[09:30:48.486]                 }
[09:30:48.486]                 else {
[09:30:48.486]                   if (TRUE) {
[09:30:48.486]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:48.486]                     {
[09:30:48.486]                       inherits <- base::inherits
[09:30:48.486]                       invokeRestart <- base::invokeRestart
[09:30:48.486]                       is.null <- base::is.null
[09:30:48.486]                       muffled <- FALSE
[09:30:48.486]                       if (inherits(cond, "message")) {
[09:30:48.486]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:48.486]                         if (muffled) 
[09:30:48.486]                           invokeRestart("muffleMessage")
[09:30:48.486]                       }
[09:30:48.486]                       else if (inherits(cond, "warning")) {
[09:30:48.486]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:48.486]                         if (muffled) 
[09:30:48.486]                           invokeRestart("muffleWarning")
[09:30:48.486]                       }
[09:30:48.486]                       else if (inherits(cond, "condition")) {
[09:30:48.486]                         if (!is.null(pattern)) {
[09:30:48.486]                           computeRestarts <- base::computeRestarts
[09:30:48.486]                           grepl <- base::grepl
[09:30:48.486]                           restarts <- computeRestarts(cond)
[09:30:48.486]                           for (restart in restarts) {
[09:30:48.486]                             name <- restart$name
[09:30:48.486]                             if (is.null(name)) 
[09:30:48.486]                               next
[09:30:48.486]                             if (!grepl(pattern, name)) 
[09:30:48.486]                               next
[09:30:48.486]                             invokeRestart(restart)
[09:30:48.486]                             muffled <- TRUE
[09:30:48.486]                             break
[09:30:48.486]                           }
[09:30:48.486]                         }
[09:30:48.486]                       }
[09:30:48.486]                       invisible(muffled)
[09:30:48.486]                     }
[09:30:48.486]                     muffleCondition(cond, pattern = "^muffle")
[09:30:48.486]                   }
[09:30:48.486]                 }
[09:30:48.486]             }
[09:30:48.486]         }))
[09:30:48.486]     }, error = function(ex) {
[09:30:48.486]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:48.486]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:48.486]                 ...future.rng), started = ...future.startTime, 
[09:30:48.486]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:48.486]             version = "1.8"), class = "FutureResult")
[09:30:48.486]     }, finally = {
[09:30:48.486]         if (!identical(...future.workdir, getwd())) 
[09:30:48.486]             setwd(...future.workdir)
[09:30:48.486]         {
[09:30:48.486]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:48.486]                 ...future.oldOptions$nwarnings <- NULL
[09:30:48.486]             }
[09:30:48.486]             base::options(...future.oldOptions)
[09:30:48.486]             if (.Platform$OS.type == "windows") {
[09:30:48.486]                 old_names <- names(...future.oldEnvVars)
[09:30:48.486]                 envs <- base::Sys.getenv()
[09:30:48.486]                 names <- names(envs)
[09:30:48.486]                 common <- intersect(names, old_names)
[09:30:48.486]                 added <- setdiff(names, old_names)
[09:30:48.486]                 removed <- setdiff(old_names, names)
[09:30:48.486]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:48.486]                   envs[common]]
[09:30:48.486]                 NAMES <- toupper(changed)
[09:30:48.486]                 args <- list()
[09:30:48.486]                 for (kk in seq_along(NAMES)) {
[09:30:48.486]                   name <- changed[[kk]]
[09:30:48.486]                   NAME <- NAMES[[kk]]
[09:30:48.486]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.486]                     next
[09:30:48.486]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.486]                 }
[09:30:48.486]                 NAMES <- toupper(added)
[09:30:48.486]                 for (kk in seq_along(NAMES)) {
[09:30:48.486]                   name <- added[[kk]]
[09:30:48.486]                   NAME <- NAMES[[kk]]
[09:30:48.486]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.486]                     next
[09:30:48.486]                   args[[name]] <- ""
[09:30:48.486]                 }
[09:30:48.486]                 NAMES <- toupper(removed)
[09:30:48.486]                 for (kk in seq_along(NAMES)) {
[09:30:48.486]                   name <- removed[[kk]]
[09:30:48.486]                   NAME <- NAMES[[kk]]
[09:30:48.486]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:48.486]                     next
[09:30:48.486]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:48.486]                 }
[09:30:48.486]                 if (length(args) > 0) 
[09:30:48.486]                   base::do.call(base::Sys.setenv, args = args)
[09:30:48.486]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:48.486]             }
[09:30:48.486]             else {
[09:30:48.486]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:48.486]             }
[09:30:48.486]             {
[09:30:48.486]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:48.486]                   0L) {
[09:30:48.486]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:48.486]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:48.486]                   base::options(opts)
[09:30:48.486]                 }
[09:30:48.486]                 {
[09:30:48.486]                   {
[09:30:48.486]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:48.486]                     NULL
[09:30:48.486]                   }
[09:30:48.486]                   options(future.plan = NULL)
[09:30:48.486]                   if (is.na(NA_character_)) 
[09:30:48.486]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:48.486]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:48.486]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:48.486]                     .init = FALSE)
[09:30:48.486]                 }
[09:30:48.486]             }
[09:30:48.486]         }
[09:30:48.486]     })
[09:30:48.486]     if (TRUE) {
[09:30:48.486]         base::sink(type = "output", split = FALSE)
[09:30:48.486]         if (TRUE) {
[09:30:48.486]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:48.486]         }
[09:30:48.486]         else {
[09:30:48.486]             ...future.result["stdout"] <- base::list(NULL)
[09:30:48.486]         }
[09:30:48.486]         base::close(...future.stdout)
[09:30:48.486]         ...future.stdout <- NULL
[09:30:48.486]     }
[09:30:48.486]     ...future.result$conditions <- ...future.conditions
[09:30:48.486]     ...future.result$finished <- base::Sys.time()
[09:30:48.486]     ...future.result
[09:30:48.486] }
[09:30:48.489] assign_globals() ...
[09:30:48.489] List of 3
[09:30:48.489]  $ fcn:function (x, y)  
[09:30:48.489]  $ x  : int [1:2] 1 2
[09:30:48.489]  $ y  : num 3
[09:30:48.489]  - attr(*, "where")=List of 3
[09:30:48.489]   ..$ fcn:<environment: R_EmptyEnv> 
[09:30:48.489]   ..$ x  :<environment: R_EmptyEnv> 
[09:30:48.489]   ..$ y  :<environment: R_EmptyEnv> 
[09:30:48.489]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:30:48.489]  - attr(*, "resolved")= logi FALSE
[09:30:48.489]  - attr(*, "total_size")= num 4280
[09:30:48.489]  - attr(*, "already-done")= logi TRUE
[09:30:48.493] - reassign environment for ‘fcn’
[09:30:48.493] - copied ‘fcn’ to environment
[09:30:48.495] - copied ‘x’ to environment
[09:30:48.495] - copied ‘y’ to environment
[09:30:48.495] assign_globals() ... done
[09:30:48.496] requestCore(): workers = 2
[09:30:48.498] MulticoreFuture started
[09:30:48.498] - Launch lazy future ... done
[09:30:48.498] run() for ‘MulticoreFuture’ ... done
[09:30:48.499] result() for MulticoreFuture ...
[09:30:48.499] plan(): Setting new future strategy stack:
[09:30:48.499] List of future strategies:
[09:30:48.499] 1. sequential:
[09:30:48.499]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:48.499]    - tweaked: FALSE
[09:30:48.499]    - call: NULL
[09:30:48.501] plan(): nbrOfWorkers() = 1
[09:30:48.503] plan(): Setting new future strategy stack:
[09:30:48.503] List of future strategies:
[09:30:48.503] 1. multicore:
[09:30:48.503]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:30:48.503]    - tweaked: FALSE
[09:30:48.503]    - call: plan(strategy, substitute = FALSE)
[09:30:48.508] plan(): nbrOfWorkers() = 2
[09:30:48.509] result() for MulticoreFuture ...
[09:30:48.510] result() for MulticoreFuture ... done
[09:30:48.510] result() for MulticoreFuture ... done
[09:30:48.510] result() for MulticoreFuture ...
[09:30:48.510] result() for MulticoreFuture ... done
[1] 6
- plan('multisession') ...
[09:30:48.511] plan(): Setting new future strategy stack:
[09:30:48.511] List of future strategies:
[09:30:48.511] 1. multisession:
[09:30:48.511]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:30:48.511]    - tweaked: FALSE
[09:30:48.511]    - call: plan(strategy, substitute = FALSE)
[09:30:48.512] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:30:48.512] multisession:
[09:30:48.512] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:30:48.512] - tweaked: FALSE
[09:30:48.512] - call: plan(strategy, substitute = FALSE)
[09:30:48.519] getGlobalsAndPackages() ...
[09:30:48.519] Not searching for globals
[09:30:48.519] - globals: [0] <none>
[09:30:48.520] getGlobalsAndPackages() ... DONE
[09:30:48.520] [local output] makeClusterPSOCK() ...
[09:30:48.566] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:30:48.568] [local output] Base port: 11874
[09:30:48.568] [local output] Getting setup options for 2 cluster nodes ...
[09:30:48.568] [local output]  - Node 1 of 2 ...
[09:30:48.568] [local output] localMachine=TRUE => revtunnel=FALSE

[09:30:48.569] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpbtCiVA/worker.rank=1.parallelly.parent=40158.9cde6da1873c.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpbtCiVA/worker.rank=1.parallelly.parent=40158.9cde6da1873c.pid")'’
[09:30:48.756] - Possible to infer worker's PID: TRUE
[09:30:48.756] [local output] Rscript port: 11874

[09:30:48.757] [local output]  - Node 2 of 2 ...
[09:30:48.757] [local output] localMachine=TRUE => revtunnel=FALSE

[09:30:48.758] [local output] Rscript port: 11874

[09:30:48.758] [local output] Getting setup options for 2 cluster nodes ... done
[09:30:48.758] [local output]  - Parallel setup requested for some PSOCK nodes
[09:30:48.759] [local output] Setting up PSOCK nodes in parallel
[09:30:48.759] List of 36
[09:30:48.759]  $ worker          : chr "localhost"
[09:30:48.759]   ..- attr(*, "localhost")= logi TRUE
[09:30:48.759]  $ master          : chr "localhost"
[09:30:48.759]  $ port            : int 11874
[09:30:48.759]  $ connectTimeout  : num 120
[09:30:48.759]  $ timeout         : num 2592000
[09:30:48.759]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:30:48.759]  $ homogeneous     : logi TRUE
[09:30:48.759]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:30:48.759]  $ rscript_envs    : NULL
[09:30:48.759]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:30:48.759]  $ rscript_startup : NULL
[09:30:48.759]  $ rscript_sh      : chr "sh"
[09:30:48.759]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:30:48.759]  $ methods         : logi TRUE
[09:30:48.759]  $ socketOptions   : chr "no-delay"
[09:30:48.759]  $ useXDR          : logi FALSE
[09:30:48.759]  $ outfile         : chr "/dev/null"
[09:30:48.759]  $ renice          : int NA
[09:30:48.759]  $ rshcmd          : NULL
[09:30:48.759]  $ user            : chr(0) 
[09:30:48.759]  $ revtunnel       : logi FALSE
[09:30:48.759]  $ rshlogfile      : NULL
[09:30:48.759]  $ rshopts         : chr(0) 
[09:30:48.759]  $ rank            : int 1
[09:30:48.759]  $ manual          : logi FALSE
[09:30:48.759]  $ dryrun          : logi FALSE
[09:30:48.759]  $ quiet           : logi FALSE
[09:30:48.759]  $ setup_strategy  : chr "parallel"
[09:30:48.759]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:30:48.759]  $ pidfile         : chr "/tmp/RtmpbtCiVA/worker.rank=1.parallelly.parent=40158.9cde6da1873c.pid"
[09:30:48.759]  $ rshcmd_label    : NULL
[09:30:48.759]  $ rsh_call        : NULL
[09:30:48.759]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:30:48.759]  $ localMachine    : logi TRUE
[09:30:48.759]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:30:48.759]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:30:48.759]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:30:48.759]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:30:48.759]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:30:48.759]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:30:48.759]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:30:48.759]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:30:48.759]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:30:48.759]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:30:48.759]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:30:48.759]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:30:48.759]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:30:48.759]  $ arguments       :List of 28
[09:30:48.759]   ..$ worker          : chr "localhost"
[09:30:48.759]   ..$ master          : NULL
[09:30:48.759]   ..$ port            : int 11874
[09:30:48.759]   ..$ connectTimeout  : num 120
[09:30:48.759]   ..$ timeout         : num 2592000
[09:30:48.759]   ..$ rscript         : NULL
[09:30:48.759]   ..$ homogeneous     : NULL
[09:30:48.759]   ..$ rscript_args    : NULL
[09:30:48.759]   ..$ rscript_envs    : NULL
[09:30:48.759]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:30:48.759]   ..$ rscript_startup : NULL
[09:30:48.759]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:30:48.759]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:30:48.759]   ..$ methods         : logi TRUE
[09:30:48.759]   ..$ socketOptions   : chr "no-delay"
[09:30:48.759]   ..$ useXDR          : logi FALSE
[09:30:48.759]   ..$ outfile         : chr "/dev/null"
[09:30:48.759]   ..$ renice          : int NA
[09:30:48.759]   ..$ rshcmd          : NULL
[09:30:48.759]   ..$ user            : NULL
[09:30:48.759]   ..$ revtunnel       : logi NA
[09:30:48.759]   ..$ rshlogfile      : NULL
[09:30:48.759]   ..$ rshopts         : NULL
[09:30:48.759]   ..$ rank            : int 1
[09:30:48.759]   ..$ manual          : logi FALSE
[09:30:48.759]   ..$ dryrun          : logi FALSE
[09:30:48.759]   ..$ quiet           : logi FALSE
[09:30:48.759]   ..$ setup_strategy  : chr "parallel"
[09:30:48.759]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:30:48.775] [local output] System call to launch all workers:
[09:30:48.775] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpbtCiVA/worker.rank=1.parallelly.parent=40158.9cde6da1873c.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11874 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:30:48.775] [local output] Starting PSOCK main server
[09:30:48.780] [local output] Workers launched
[09:30:48.781] [local output] Waiting for workers to connect back
[09:30:48.781]  - [local output] 0 workers out of 2 ready
[09:30:49.026]  - [local output] 0 workers out of 2 ready
[09:30:49.026]  - [local output] 1 workers out of 2 ready
[09:30:49.026]  - [local output] 2 workers out of 2 ready
[09:30:49.026] [local output] Launching of workers completed
[09:30:49.027] [local output] Collecting session information from workers
[09:30:49.027] [local output]  - Worker #1 of 2
[09:30:49.028] [local output]  - Worker #2 of 2
[09:30:49.028] [local output] makeClusterPSOCK() ... done
[09:30:49.040] Packages needed by the future expression (n = 0): <none>
[09:30:49.040] Packages needed by future strategies (n = 0): <none>
[09:30:49.041] {
[09:30:49.041]     {
[09:30:49.041]         {
[09:30:49.041]             ...future.startTime <- base::Sys.time()
[09:30:49.041]             {
[09:30:49.041]                 {
[09:30:49.041]                   {
[09:30:49.041]                     {
[09:30:49.041]                       base::local({
[09:30:49.041]                         has_future <- base::requireNamespace("future", 
[09:30:49.041]                           quietly = TRUE)
[09:30:49.041]                         if (has_future) {
[09:30:49.041]                           ns <- base::getNamespace("future")
[09:30:49.041]                           version <- ns[[".package"]][["version"]]
[09:30:49.041]                           if (is.null(version)) 
[09:30:49.041]                             version <- utils::packageVersion("future")
[09:30:49.041]                         }
[09:30:49.041]                         else {
[09:30:49.041]                           version <- NULL
[09:30:49.041]                         }
[09:30:49.041]                         if (!has_future || version < "1.8.0") {
[09:30:49.041]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:49.041]                             "", base::R.version$version.string), 
[09:30:49.041]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:49.041]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:49.041]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:49.041]                               "release", "version")], collapse = " "), 
[09:30:49.041]                             hostname = base::Sys.info()[["nodename"]])
[09:30:49.041]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:49.041]                             info)
[09:30:49.041]                           info <- base::paste(info, collapse = "; ")
[09:30:49.041]                           if (!has_future) {
[09:30:49.041]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:49.041]                               info)
[09:30:49.041]                           }
[09:30:49.041]                           else {
[09:30:49.041]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:49.041]                               info, version)
[09:30:49.041]                           }
[09:30:49.041]                           base::stop(msg)
[09:30:49.041]                         }
[09:30:49.041]                       })
[09:30:49.041]                     }
[09:30:49.041]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:49.041]                     base::options(mc.cores = 1L)
[09:30:49.041]                   }
[09:30:49.041]                   ...future.strategy.old <- future::plan("list")
[09:30:49.041]                   options(future.plan = NULL)
[09:30:49.041]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.041]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:49.041]                 }
[09:30:49.041]                 ...future.workdir <- getwd()
[09:30:49.041]             }
[09:30:49.041]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:49.041]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:49.041]         }
[09:30:49.041]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:49.041]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:49.041]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:49.041]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:49.041]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:49.041]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:49.041]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:49.041]             base::names(...future.oldOptions))
[09:30:49.041]     }
[09:30:49.041]     if (FALSE) {
[09:30:49.041]     }
[09:30:49.041]     else {
[09:30:49.041]         if (TRUE) {
[09:30:49.041]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:49.041]                 open = "w")
[09:30:49.041]         }
[09:30:49.041]         else {
[09:30:49.041]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:49.041]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:49.041]         }
[09:30:49.041]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:49.041]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:49.041]             base::sink(type = "output", split = FALSE)
[09:30:49.041]             base::close(...future.stdout)
[09:30:49.041]         }, add = TRUE)
[09:30:49.041]     }
[09:30:49.041]     ...future.frame <- base::sys.nframe()
[09:30:49.041]     ...future.conditions <- base::list()
[09:30:49.041]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:49.041]     if (FALSE) {
[09:30:49.041]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:49.041]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:49.041]     }
[09:30:49.041]     ...future.result <- base::tryCatch({
[09:30:49.041]         base::withCallingHandlers({
[09:30:49.041]             ...future.value <- base::withVisible(base::local({
[09:30:49.041]                 ...future.makeSendCondition <- base::local({
[09:30:49.041]                   sendCondition <- NULL
[09:30:49.041]                   function(frame = 1L) {
[09:30:49.041]                     if (is.function(sendCondition)) 
[09:30:49.041]                       return(sendCondition)
[09:30:49.041]                     ns <- getNamespace("parallel")
[09:30:49.041]                     if (exists("sendData", mode = "function", 
[09:30:49.041]                       envir = ns)) {
[09:30:49.041]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:49.041]                         envir = ns)
[09:30:49.041]                       envir <- sys.frame(frame)
[09:30:49.041]                       master <- NULL
[09:30:49.041]                       while (!identical(envir, .GlobalEnv) && 
[09:30:49.041]                         !identical(envir, emptyenv())) {
[09:30:49.041]                         if (exists("master", mode = "list", envir = envir, 
[09:30:49.041]                           inherits = FALSE)) {
[09:30:49.041]                           master <- get("master", mode = "list", 
[09:30:49.041]                             envir = envir, inherits = FALSE)
[09:30:49.041]                           if (inherits(master, c("SOCKnode", 
[09:30:49.041]                             "SOCK0node"))) {
[09:30:49.041]                             sendCondition <<- function(cond) {
[09:30:49.041]                               data <- list(type = "VALUE", value = cond, 
[09:30:49.041]                                 success = TRUE)
[09:30:49.041]                               parallel_sendData(master, data)
[09:30:49.041]                             }
[09:30:49.041]                             return(sendCondition)
[09:30:49.041]                           }
[09:30:49.041]                         }
[09:30:49.041]                         frame <- frame + 1L
[09:30:49.041]                         envir <- sys.frame(frame)
[09:30:49.041]                       }
[09:30:49.041]                     }
[09:30:49.041]                     sendCondition <<- function(cond) NULL
[09:30:49.041]                   }
[09:30:49.041]                 })
[09:30:49.041]                 withCallingHandlers({
[09:30:49.041]                   NA
[09:30:49.041]                 }, immediateCondition = function(cond) {
[09:30:49.041]                   sendCondition <- ...future.makeSendCondition()
[09:30:49.041]                   sendCondition(cond)
[09:30:49.041]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.041]                   {
[09:30:49.041]                     inherits <- base::inherits
[09:30:49.041]                     invokeRestart <- base::invokeRestart
[09:30:49.041]                     is.null <- base::is.null
[09:30:49.041]                     muffled <- FALSE
[09:30:49.041]                     if (inherits(cond, "message")) {
[09:30:49.041]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:49.041]                       if (muffled) 
[09:30:49.041]                         invokeRestart("muffleMessage")
[09:30:49.041]                     }
[09:30:49.041]                     else if (inherits(cond, "warning")) {
[09:30:49.041]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:49.041]                       if (muffled) 
[09:30:49.041]                         invokeRestart("muffleWarning")
[09:30:49.041]                     }
[09:30:49.041]                     else if (inherits(cond, "condition")) {
[09:30:49.041]                       if (!is.null(pattern)) {
[09:30:49.041]                         computeRestarts <- base::computeRestarts
[09:30:49.041]                         grepl <- base::grepl
[09:30:49.041]                         restarts <- computeRestarts(cond)
[09:30:49.041]                         for (restart in restarts) {
[09:30:49.041]                           name <- restart$name
[09:30:49.041]                           if (is.null(name)) 
[09:30:49.041]                             next
[09:30:49.041]                           if (!grepl(pattern, name)) 
[09:30:49.041]                             next
[09:30:49.041]                           invokeRestart(restart)
[09:30:49.041]                           muffled <- TRUE
[09:30:49.041]                           break
[09:30:49.041]                         }
[09:30:49.041]                       }
[09:30:49.041]                     }
[09:30:49.041]                     invisible(muffled)
[09:30:49.041]                   }
[09:30:49.041]                   muffleCondition(cond)
[09:30:49.041]                 })
[09:30:49.041]             }))
[09:30:49.041]             future::FutureResult(value = ...future.value$value, 
[09:30:49.041]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.041]                   ...future.rng), globalenv = if (FALSE) 
[09:30:49.041]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:49.041]                     ...future.globalenv.names))
[09:30:49.041]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:49.041]         }, condition = base::local({
[09:30:49.041]             c <- base::c
[09:30:49.041]             inherits <- base::inherits
[09:30:49.041]             invokeRestart <- base::invokeRestart
[09:30:49.041]             length <- base::length
[09:30:49.041]             list <- base::list
[09:30:49.041]             seq.int <- base::seq.int
[09:30:49.041]             signalCondition <- base::signalCondition
[09:30:49.041]             sys.calls <- base::sys.calls
[09:30:49.041]             `[[` <- base::`[[`
[09:30:49.041]             `+` <- base::`+`
[09:30:49.041]             `<<-` <- base::`<<-`
[09:30:49.041]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:49.041]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:49.041]                   3L)]
[09:30:49.041]             }
[09:30:49.041]             function(cond) {
[09:30:49.041]                 is_error <- inherits(cond, "error")
[09:30:49.041]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:49.041]                   NULL)
[09:30:49.041]                 if (is_error) {
[09:30:49.041]                   sessionInformation <- function() {
[09:30:49.041]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:49.041]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:49.041]                       search = base::search(), system = base::Sys.info())
[09:30:49.041]                   }
[09:30:49.041]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.041]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:49.041]                     cond$call), session = sessionInformation(), 
[09:30:49.041]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:49.041]                   signalCondition(cond)
[09:30:49.041]                 }
[09:30:49.041]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:49.041]                 "immediateCondition"))) {
[09:30:49.041]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:49.041]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.041]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:49.041]                   if (TRUE && !signal) {
[09:30:49.041]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.041]                     {
[09:30:49.041]                       inherits <- base::inherits
[09:30:49.041]                       invokeRestart <- base::invokeRestart
[09:30:49.041]                       is.null <- base::is.null
[09:30:49.041]                       muffled <- FALSE
[09:30:49.041]                       if (inherits(cond, "message")) {
[09:30:49.041]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.041]                         if (muffled) 
[09:30:49.041]                           invokeRestart("muffleMessage")
[09:30:49.041]                       }
[09:30:49.041]                       else if (inherits(cond, "warning")) {
[09:30:49.041]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.041]                         if (muffled) 
[09:30:49.041]                           invokeRestart("muffleWarning")
[09:30:49.041]                       }
[09:30:49.041]                       else if (inherits(cond, "condition")) {
[09:30:49.041]                         if (!is.null(pattern)) {
[09:30:49.041]                           computeRestarts <- base::computeRestarts
[09:30:49.041]                           grepl <- base::grepl
[09:30:49.041]                           restarts <- computeRestarts(cond)
[09:30:49.041]                           for (restart in restarts) {
[09:30:49.041]                             name <- restart$name
[09:30:49.041]                             if (is.null(name)) 
[09:30:49.041]                               next
[09:30:49.041]                             if (!grepl(pattern, name)) 
[09:30:49.041]                               next
[09:30:49.041]                             invokeRestart(restart)
[09:30:49.041]                             muffled <- TRUE
[09:30:49.041]                             break
[09:30:49.041]                           }
[09:30:49.041]                         }
[09:30:49.041]                       }
[09:30:49.041]                       invisible(muffled)
[09:30:49.041]                     }
[09:30:49.041]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.041]                   }
[09:30:49.041]                 }
[09:30:49.041]                 else {
[09:30:49.041]                   if (TRUE) {
[09:30:49.041]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.041]                     {
[09:30:49.041]                       inherits <- base::inherits
[09:30:49.041]                       invokeRestart <- base::invokeRestart
[09:30:49.041]                       is.null <- base::is.null
[09:30:49.041]                       muffled <- FALSE
[09:30:49.041]                       if (inherits(cond, "message")) {
[09:30:49.041]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.041]                         if (muffled) 
[09:30:49.041]                           invokeRestart("muffleMessage")
[09:30:49.041]                       }
[09:30:49.041]                       else if (inherits(cond, "warning")) {
[09:30:49.041]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.041]                         if (muffled) 
[09:30:49.041]                           invokeRestart("muffleWarning")
[09:30:49.041]                       }
[09:30:49.041]                       else if (inherits(cond, "condition")) {
[09:30:49.041]                         if (!is.null(pattern)) {
[09:30:49.041]                           computeRestarts <- base::computeRestarts
[09:30:49.041]                           grepl <- base::grepl
[09:30:49.041]                           restarts <- computeRestarts(cond)
[09:30:49.041]                           for (restart in restarts) {
[09:30:49.041]                             name <- restart$name
[09:30:49.041]                             if (is.null(name)) 
[09:30:49.041]                               next
[09:30:49.041]                             if (!grepl(pattern, name)) 
[09:30:49.041]                               next
[09:30:49.041]                             invokeRestart(restart)
[09:30:49.041]                             muffled <- TRUE
[09:30:49.041]                             break
[09:30:49.041]                           }
[09:30:49.041]                         }
[09:30:49.041]                       }
[09:30:49.041]                       invisible(muffled)
[09:30:49.041]                     }
[09:30:49.041]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.041]                   }
[09:30:49.041]                 }
[09:30:49.041]             }
[09:30:49.041]         }))
[09:30:49.041]     }, error = function(ex) {
[09:30:49.041]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:49.041]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.041]                 ...future.rng), started = ...future.startTime, 
[09:30:49.041]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:49.041]             version = "1.8"), class = "FutureResult")
[09:30:49.041]     }, finally = {
[09:30:49.041]         if (!identical(...future.workdir, getwd())) 
[09:30:49.041]             setwd(...future.workdir)
[09:30:49.041]         {
[09:30:49.041]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:49.041]                 ...future.oldOptions$nwarnings <- NULL
[09:30:49.041]             }
[09:30:49.041]             base::options(...future.oldOptions)
[09:30:49.041]             if (.Platform$OS.type == "windows") {
[09:30:49.041]                 old_names <- names(...future.oldEnvVars)
[09:30:49.041]                 envs <- base::Sys.getenv()
[09:30:49.041]                 names <- names(envs)
[09:30:49.041]                 common <- intersect(names, old_names)
[09:30:49.041]                 added <- setdiff(names, old_names)
[09:30:49.041]                 removed <- setdiff(old_names, names)
[09:30:49.041]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:49.041]                   envs[common]]
[09:30:49.041]                 NAMES <- toupper(changed)
[09:30:49.041]                 args <- list()
[09:30:49.041]                 for (kk in seq_along(NAMES)) {
[09:30:49.041]                   name <- changed[[kk]]
[09:30:49.041]                   NAME <- NAMES[[kk]]
[09:30:49.041]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.041]                     next
[09:30:49.041]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.041]                 }
[09:30:49.041]                 NAMES <- toupper(added)
[09:30:49.041]                 for (kk in seq_along(NAMES)) {
[09:30:49.041]                   name <- added[[kk]]
[09:30:49.041]                   NAME <- NAMES[[kk]]
[09:30:49.041]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.041]                     next
[09:30:49.041]                   args[[name]] <- ""
[09:30:49.041]                 }
[09:30:49.041]                 NAMES <- toupper(removed)
[09:30:49.041]                 for (kk in seq_along(NAMES)) {
[09:30:49.041]                   name <- removed[[kk]]
[09:30:49.041]                   NAME <- NAMES[[kk]]
[09:30:49.041]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.041]                     next
[09:30:49.041]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.041]                 }
[09:30:49.041]                 if (length(args) > 0) 
[09:30:49.041]                   base::do.call(base::Sys.setenv, args = args)
[09:30:49.041]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:49.041]             }
[09:30:49.041]             else {
[09:30:49.041]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:49.041]             }
[09:30:49.041]             {
[09:30:49.041]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:49.041]                   0L) {
[09:30:49.041]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:49.041]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:49.041]                   base::options(opts)
[09:30:49.041]                 }
[09:30:49.041]                 {
[09:30:49.041]                   {
[09:30:49.041]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:49.041]                     NULL
[09:30:49.041]                   }
[09:30:49.041]                   options(future.plan = NULL)
[09:30:49.041]                   if (is.na(NA_character_)) 
[09:30:49.041]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.041]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:49.041]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:49.041]                     .init = FALSE)
[09:30:49.041]                 }
[09:30:49.041]             }
[09:30:49.041]         }
[09:30:49.041]     })
[09:30:49.041]     if (TRUE) {
[09:30:49.041]         base::sink(type = "output", split = FALSE)
[09:30:49.041]         if (TRUE) {
[09:30:49.041]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:49.041]         }
[09:30:49.041]         else {
[09:30:49.041]             ...future.result["stdout"] <- base::list(NULL)
[09:30:49.041]         }
[09:30:49.041]         base::close(...future.stdout)
[09:30:49.041]         ...future.stdout <- NULL
[09:30:49.041]     }
[09:30:49.041]     ...future.result$conditions <- ...future.conditions
[09:30:49.041]     ...future.result$finished <- base::Sys.time()
[09:30:49.041]     ...future.result
[09:30:49.041] }
[09:30:49.093] MultisessionFuture started
[09:30:49.093] result() for ClusterFuture ...
[09:30:49.093] receiveMessageFromWorker() for ClusterFuture ...
[09:30:49.094] - Validating connection of MultisessionFuture
[09:30:49.125] - received message: FutureResult
[09:30:49.125] - Received FutureResult
[09:30:49.125] - Erased future from FutureRegistry
[09:30:49.125] result() for ClusterFuture ...
[09:30:49.125] - result already collected: FutureResult
[09:30:49.125] result() for ClusterFuture ... done
[09:30:49.125] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:49.125] result() for ClusterFuture ... done
[09:30:49.126] result() for ClusterFuture ...
[09:30:49.126] - result already collected: FutureResult
[09:30:49.126] result() for ClusterFuture ... done
[09:30:49.126] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:30:49.130] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multisession') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x559328ebe960>
Arguments '...' exists: TRUE
[09:30:49.130] getGlobalsAndPackages() ...
[09:30:49.131] Searching for globals...
[09:30:49.132] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[09:30:49.132] Searching for globals ... DONE
[09:30:49.133] Resolving globals: FALSE
[09:30:49.133] Tweak future expression to call with '...' arguments ...
[09:30:49.133] {
[09:30:49.133]     do.call(function(...) {
[09:30:49.133]         sum(x, ...)
[09:30:49.133]     }, args = future.call.arguments)
[09:30:49.133] }
[09:30:49.133] Tweak future expression to call with '...' arguments ... DONE
[09:30:49.134] The total size of the 2 globals is 112 bytes (112 bytes)
[09:30:49.134] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[09:30:49.134] - globals: [2] ‘x’, ‘future.call.arguments’
[09:30:49.134] 
[09:30:49.135] getGlobalsAndPackages() ... DONE
[09:30:49.135] run() for ‘Future’ ...
[09:30:49.135] - state: ‘created’
[09:30:49.135] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:49.149] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:49.149] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:49.150]   - Field: ‘node’
[09:30:49.150]   - Field: ‘label’
[09:30:49.150]   - Field: ‘local’
[09:30:49.150]   - Field: ‘owner’
[09:30:49.150]   - Field: ‘envir’
[09:30:49.150]   - Field: ‘workers’
[09:30:49.150]   - Field: ‘packages’
[09:30:49.150]   - Field: ‘gc’
[09:30:49.150]   - Field: ‘conditions’
[09:30:49.150]   - Field: ‘persistent’
[09:30:49.151]   - Field: ‘expr’
[09:30:49.151]   - Field: ‘uuid’
[09:30:49.151]   - Field: ‘seed’
[09:30:49.151]   - Field: ‘version’
[09:30:49.151]   - Field: ‘result’
[09:30:49.151]   - Field: ‘asynchronous’
[09:30:49.151]   - Field: ‘calls’
[09:30:49.151]   - Field: ‘globals’
[09:30:49.151]   - Field: ‘stdout’
[09:30:49.152]   - Field: ‘earlySignal’
[09:30:49.152]   - Field: ‘lazy’
[09:30:49.152]   - Field: ‘state’
[09:30:49.152] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:49.152] - Launch lazy future ...
[09:30:49.152] Packages needed by the future expression (n = 0): <none>
[09:30:49.153] Packages needed by future strategies (n = 0): <none>
[09:30:49.153] {
[09:30:49.153]     {
[09:30:49.153]         {
[09:30:49.153]             ...future.startTime <- base::Sys.time()
[09:30:49.153]             {
[09:30:49.153]                 {
[09:30:49.153]                   {
[09:30:49.153]                     {
[09:30:49.153]                       base::local({
[09:30:49.153]                         has_future <- base::requireNamespace("future", 
[09:30:49.153]                           quietly = TRUE)
[09:30:49.153]                         if (has_future) {
[09:30:49.153]                           ns <- base::getNamespace("future")
[09:30:49.153]                           version <- ns[[".package"]][["version"]]
[09:30:49.153]                           if (is.null(version)) 
[09:30:49.153]                             version <- utils::packageVersion("future")
[09:30:49.153]                         }
[09:30:49.153]                         else {
[09:30:49.153]                           version <- NULL
[09:30:49.153]                         }
[09:30:49.153]                         if (!has_future || version < "1.8.0") {
[09:30:49.153]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:49.153]                             "", base::R.version$version.string), 
[09:30:49.153]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:49.153]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:49.153]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:49.153]                               "release", "version")], collapse = " "), 
[09:30:49.153]                             hostname = base::Sys.info()[["nodename"]])
[09:30:49.153]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:49.153]                             info)
[09:30:49.153]                           info <- base::paste(info, collapse = "; ")
[09:30:49.153]                           if (!has_future) {
[09:30:49.153]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:49.153]                               info)
[09:30:49.153]                           }
[09:30:49.153]                           else {
[09:30:49.153]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:49.153]                               info, version)
[09:30:49.153]                           }
[09:30:49.153]                           base::stop(msg)
[09:30:49.153]                         }
[09:30:49.153]                       })
[09:30:49.153]                     }
[09:30:49.153]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:49.153]                     base::options(mc.cores = 1L)
[09:30:49.153]                   }
[09:30:49.153]                   ...future.strategy.old <- future::plan("list")
[09:30:49.153]                   options(future.plan = NULL)
[09:30:49.153]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.153]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:49.153]                 }
[09:30:49.153]                 ...future.workdir <- getwd()
[09:30:49.153]             }
[09:30:49.153]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:49.153]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:49.153]         }
[09:30:49.153]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:49.153]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:49.153]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:49.153]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:49.153]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:49.153]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:49.153]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:49.153]             base::names(...future.oldOptions))
[09:30:49.153]     }
[09:30:49.153]     if (FALSE) {
[09:30:49.153]     }
[09:30:49.153]     else {
[09:30:49.153]         if (TRUE) {
[09:30:49.153]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:49.153]                 open = "w")
[09:30:49.153]         }
[09:30:49.153]         else {
[09:30:49.153]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:49.153]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:49.153]         }
[09:30:49.153]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:49.153]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:49.153]             base::sink(type = "output", split = FALSE)
[09:30:49.153]             base::close(...future.stdout)
[09:30:49.153]         }, add = TRUE)
[09:30:49.153]     }
[09:30:49.153]     ...future.frame <- base::sys.nframe()
[09:30:49.153]     ...future.conditions <- base::list()
[09:30:49.153]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:49.153]     if (FALSE) {
[09:30:49.153]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:49.153]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:49.153]     }
[09:30:49.153]     ...future.result <- base::tryCatch({
[09:30:49.153]         base::withCallingHandlers({
[09:30:49.153]             ...future.value <- base::withVisible(base::local({
[09:30:49.153]                 ...future.makeSendCondition <- base::local({
[09:30:49.153]                   sendCondition <- NULL
[09:30:49.153]                   function(frame = 1L) {
[09:30:49.153]                     if (is.function(sendCondition)) 
[09:30:49.153]                       return(sendCondition)
[09:30:49.153]                     ns <- getNamespace("parallel")
[09:30:49.153]                     if (exists("sendData", mode = "function", 
[09:30:49.153]                       envir = ns)) {
[09:30:49.153]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:49.153]                         envir = ns)
[09:30:49.153]                       envir <- sys.frame(frame)
[09:30:49.153]                       master <- NULL
[09:30:49.153]                       while (!identical(envir, .GlobalEnv) && 
[09:30:49.153]                         !identical(envir, emptyenv())) {
[09:30:49.153]                         if (exists("master", mode = "list", envir = envir, 
[09:30:49.153]                           inherits = FALSE)) {
[09:30:49.153]                           master <- get("master", mode = "list", 
[09:30:49.153]                             envir = envir, inherits = FALSE)
[09:30:49.153]                           if (inherits(master, c("SOCKnode", 
[09:30:49.153]                             "SOCK0node"))) {
[09:30:49.153]                             sendCondition <<- function(cond) {
[09:30:49.153]                               data <- list(type = "VALUE", value = cond, 
[09:30:49.153]                                 success = TRUE)
[09:30:49.153]                               parallel_sendData(master, data)
[09:30:49.153]                             }
[09:30:49.153]                             return(sendCondition)
[09:30:49.153]                           }
[09:30:49.153]                         }
[09:30:49.153]                         frame <- frame + 1L
[09:30:49.153]                         envir <- sys.frame(frame)
[09:30:49.153]                       }
[09:30:49.153]                     }
[09:30:49.153]                     sendCondition <<- function(cond) NULL
[09:30:49.153]                   }
[09:30:49.153]                 })
[09:30:49.153]                 withCallingHandlers({
[09:30:49.153]                   {
[09:30:49.153]                     do.call(function(...) {
[09:30:49.153]                       sum(x, ...)
[09:30:49.153]                     }, args = future.call.arguments)
[09:30:49.153]                   }
[09:30:49.153]                 }, immediateCondition = function(cond) {
[09:30:49.153]                   sendCondition <- ...future.makeSendCondition()
[09:30:49.153]                   sendCondition(cond)
[09:30:49.153]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.153]                   {
[09:30:49.153]                     inherits <- base::inherits
[09:30:49.153]                     invokeRestart <- base::invokeRestart
[09:30:49.153]                     is.null <- base::is.null
[09:30:49.153]                     muffled <- FALSE
[09:30:49.153]                     if (inherits(cond, "message")) {
[09:30:49.153]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:49.153]                       if (muffled) 
[09:30:49.153]                         invokeRestart("muffleMessage")
[09:30:49.153]                     }
[09:30:49.153]                     else if (inherits(cond, "warning")) {
[09:30:49.153]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:49.153]                       if (muffled) 
[09:30:49.153]                         invokeRestart("muffleWarning")
[09:30:49.153]                     }
[09:30:49.153]                     else if (inherits(cond, "condition")) {
[09:30:49.153]                       if (!is.null(pattern)) {
[09:30:49.153]                         computeRestarts <- base::computeRestarts
[09:30:49.153]                         grepl <- base::grepl
[09:30:49.153]                         restarts <- computeRestarts(cond)
[09:30:49.153]                         for (restart in restarts) {
[09:30:49.153]                           name <- restart$name
[09:30:49.153]                           if (is.null(name)) 
[09:30:49.153]                             next
[09:30:49.153]                           if (!grepl(pattern, name)) 
[09:30:49.153]                             next
[09:30:49.153]                           invokeRestart(restart)
[09:30:49.153]                           muffled <- TRUE
[09:30:49.153]                           break
[09:30:49.153]                         }
[09:30:49.153]                       }
[09:30:49.153]                     }
[09:30:49.153]                     invisible(muffled)
[09:30:49.153]                   }
[09:30:49.153]                   muffleCondition(cond)
[09:30:49.153]                 })
[09:30:49.153]             }))
[09:30:49.153]             future::FutureResult(value = ...future.value$value, 
[09:30:49.153]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.153]                   ...future.rng), globalenv = if (FALSE) 
[09:30:49.153]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:49.153]                     ...future.globalenv.names))
[09:30:49.153]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:49.153]         }, condition = base::local({
[09:30:49.153]             c <- base::c
[09:30:49.153]             inherits <- base::inherits
[09:30:49.153]             invokeRestart <- base::invokeRestart
[09:30:49.153]             length <- base::length
[09:30:49.153]             list <- base::list
[09:30:49.153]             seq.int <- base::seq.int
[09:30:49.153]             signalCondition <- base::signalCondition
[09:30:49.153]             sys.calls <- base::sys.calls
[09:30:49.153]             `[[` <- base::`[[`
[09:30:49.153]             `+` <- base::`+`
[09:30:49.153]             `<<-` <- base::`<<-`
[09:30:49.153]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:49.153]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:49.153]                   3L)]
[09:30:49.153]             }
[09:30:49.153]             function(cond) {
[09:30:49.153]                 is_error <- inherits(cond, "error")
[09:30:49.153]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:49.153]                   NULL)
[09:30:49.153]                 if (is_error) {
[09:30:49.153]                   sessionInformation <- function() {
[09:30:49.153]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:49.153]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:49.153]                       search = base::search(), system = base::Sys.info())
[09:30:49.153]                   }
[09:30:49.153]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.153]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:49.153]                     cond$call), session = sessionInformation(), 
[09:30:49.153]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:49.153]                   signalCondition(cond)
[09:30:49.153]                 }
[09:30:49.153]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:49.153]                 "immediateCondition"))) {
[09:30:49.153]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:49.153]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.153]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:49.153]                   if (TRUE && !signal) {
[09:30:49.153]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.153]                     {
[09:30:49.153]                       inherits <- base::inherits
[09:30:49.153]                       invokeRestart <- base::invokeRestart
[09:30:49.153]                       is.null <- base::is.null
[09:30:49.153]                       muffled <- FALSE
[09:30:49.153]                       if (inherits(cond, "message")) {
[09:30:49.153]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.153]                         if (muffled) 
[09:30:49.153]                           invokeRestart("muffleMessage")
[09:30:49.153]                       }
[09:30:49.153]                       else if (inherits(cond, "warning")) {
[09:30:49.153]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.153]                         if (muffled) 
[09:30:49.153]                           invokeRestart("muffleWarning")
[09:30:49.153]                       }
[09:30:49.153]                       else if (inherits(cond, "condition")) {
[09:30:49.153]                         if (!is.null(pattern)) {
[09:30:49.153]                           computeRestarts <- base::computeRestarts
[09:30:49.153]                           grepl <- base::grepl
[09:30:49.153]                           restarts <- computeRestarts(cond)
[09:30:49.153]                           for (restart in restarts) {
[09:30:49.153]                             name <- restart$name
[09:30:49.153]                             if (is.null(name)) 
[09:30:49.153]                               next
[09:30:49.153]                             if (!grepl(pattern, name)) 
[09:30:49.153]                               next
[09:30:49.153]                             invokeRestart(restart)
[09:30:49.153]                             muffled <- TRUE
[09:30:49.153]                             break
[09:30:49.153]                           }
[09:30:49.153]                         }
[09:30:49.153]                       }
[09:30:49.153]                       invisible(muffled)
[09:30:49.153]                     }
[09:30:49.153]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.153]                   }
[09:30:49.153]                 }
[09:30:49.153]                 else {
[09:30:49.153]                   if (TRUE) {
[09:30:49.153]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.153]                     {
[09:30:49.153]                       inherits <- base::inherits
[09:30:49.153]                       invokeRestart <- base::invokeRestart
[09:30:49.153]                       is.null <- base::is.null
[09:30:49.153]                       muffled <- FALSE
[09:30:49.153]                       if (inherits(cond, "message")) {
[09:30:49.153]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.153]                         if (muffled) 
[09:30:49.153]                           invokeRestart("muffleMessage")
[09:30:49.153]                       }
[09:30:49.153]                       else if (inherits(cond, "warning")) {
[09:30:49.153]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.153]                         if (muffled) 
[09:30:49.153]                           invokeRestart("muffleWarning")
[09:30:49.153]                       }
[09:30:49.153]                       else if (inherits(cond, "condition")) {
[09:30:49.153]                         if (!is.null(pattern)) {
[09:30:49.153]                           computeRestarts <- base::computeRestarts
[09:30:49.153]                           grepl <- base::grepl
[09:30:49.153]                           restarts <- computeRestarts(cond)
[09:30:49.153]                           for (restart in restarts) {
[09:30:49.153]                             name <- restart$name
[09:30:49.153]                             if (is.null(name)) 
[09:30:49.153]                               next
[09:30:49.153]                             if (!grepl(pattern, name)) 
[09:30:49.153]                               next
[09:30:49.153]                             invokeRestart(restart)
[09:30:49.153]                             muffled <- TRUE
[09:30:49.153]                             break
[09:30:49.153]                           }
[09:30:49.153]                         }
[09:30:49.153]                       }
[09:30:49.153]                       invisible(muffled)
[09:30:49.153]                     }
[09:30:49.153]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.153]                   }
[09:30:49.153]                 }
[09:30:49.153]             }
[09:30:49.153]         }))
[09:30:49.153]     }, error = function(ex) {
[09:30:49.153]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:49.153]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.153]                 ...future.rng), started = ...future.startTime, 
[09:30:49.153]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:49.153]             version = "1.8"), class = "FutureResult")
[09:30:49.153]     }, finally = {
[09:30:49.153]         if (!identical(...future.workdir, getwd())) 
[09:30:49.153]             setwd(...future.workdir)
[09:30:49.153]         {
[09:30:49.153]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:49.153]                 ...future.oldOptions$nwarnings <- NULL
[09:30:49.153]             }
[09:30:49.153]             base::options(...future.oldOptions)
[09:30:49.153]             if (.Platform$OS.type == "windows") {
[09:30:49.153]                 old_names <- names(...future.oldEnvVars)
[09:30:49.153]                 envs <- base::Sys.getenv()
[09:30:49.153]                 names <- names(envs)
[09:30:49.153]                 common <- intersect(names, old_names)
[09:30:49.153]                 added <- setdiff(names, old_names)
[09:30:49.153]                 removed <- setdiff(old_names, names)
[09:30:49.153]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:49.153]                   envs[common]]
[09:30:49.153]                 NAMES <- toupper(changed)
[09:30:49.153]                 args <- list()
[09:30:49.153]                 for (kk in seq_along(NAMES)) {
[09:30:49.153]                   name <- changed[[kk]]
[09:30:49.153]                   NAME <- NAMES[[kk]]
[09:30:49.153]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.153]                     next
[09:30:49.153]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.153]                 }
[09:30:49.153]                 NAMES <- toupper(added)
[09:30:49.153]                 for (kk in seq_along(NAMES)) {
[09:30:49.153]                   name <- added[[kk]]
[09:30:49.153]                   NAME <- NAMES[[kk]]
[09:30:49.153]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.153]                     next
[09:30:49.153]                   args[[name]] <- ""
[09:30:49.153]                 }
[09:30:49.153]                 NAMES <- toupper(removed)
[09:30:49.153]                 for (kk in seq_along(NAMES)) {
[09:30:49.153]                   name <- removed[[kk]]
[09:30:49.153]                   NAME <- NAMES[[kk]]
[09:30:49.153]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.153]                     next
[09:30:49.153]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.153]                 }
[09:30:49.153]                 if (length(args) > 0) 
[09:30:49.153]                   base::do.call(base::Sys.setenv, args = args)
[09:30:49.153]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:49.153]             }
[09:30:49.153]             else {
[09:30:49.153]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:49.153]             }
[09:30:49.153]             {
[09:30:49.153]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:49.153]                   0L) {
[09:30:49.153]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:49.153]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:49.153]                   base::options(opts)
[09:30:49.153]                 }
[09:30:49.153]                 {
[09:30:49.153]                   {
[09:30:49.153]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:49.153]                     NULL
[09:30:49.153]                   }
[09:30:49.153]                   options(future.plan = NULL)
[09:30:49.153]                   if (is.na(NA_character_)) 
[09:30:49.153]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.153]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:49.153]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:49.153]                     .init = FALSE)
[09:30:49.153]                 }
[09:30:49.153]             }
[09:30:49.153]         }
[09:30:49.153]     })
[09:30:49.153]     if (TRUE) {
[09:30:49.153]         base::sink(type = "output", split = FALSE)
[09:30:49.153]         if (TRUE) {
[09:30:49.153]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:49.153]         }
[09:30:49.153]         else {
[09:30:49.153]             ...future.result["stdout"] <- base::list(NULL)
[09:30:49.153]         }
[09:30:49.153]         base::close(...future.stdout)
[09:30:49.153]         ...future.stdout <- NULL
[09:30:49.153]     }
[09:30:49.153]     ...future.result$conditions <- ...future.conditions
[09:30:49.153]     ...future.result$finished <- base::Sys.time()
[09:30:49.153]     ...future.result
[09:30:49.153] }
[09:30:49.156] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[09:30:49.156] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[09:30:49.156] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[09:30:49.157] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[09:30:49.157] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[09:30:49.157] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[09:30:49.158] MultisessionFuture started
[09:30:49.158] - Launch lazy future ... done
[09:30:49.158] run() for ‘MultisessionFuture’ ... done
[09:30:49.158] result() for ClusterFuture ...
[09:30:49.158] receiveMessageFromWorker() for ClusterFuture ...
[09:30:49.158] - Validating connection of MultisessionFuture
[09:30:49.159] - received message: FutureResult
[09:30:49.159] - Received FutureResult
[09:30:49.160] - Erased future from FutureRegistry
[09:30:49.160] result() for ClusterFuture ...
[09:30:49.160] - result already collected: FutureResult
[09:30:49.160] result() for ClusterFuture ... done
[09:30:49.160] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:49.160] result() for ClusterFuture ... done
[09:30:49.160] result() for ClusterFuture ...
[09:30:49.160] - result already collected: FutureResult
[09:30:49.160] result() for ClusterFuture ... done
[1] 6
** Sum function 'B' with plan('multisession') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5593292463d8>
Arguments '...' exists: TRUE
[09:30:49.161] getGlobalsAndPackages() ...
[09:30:49.161] Searching for globals...
[09:30:49.163] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[09:30:49.163] Searching for globals ... DONE
[09:30:49.163] Resolving globals: FALSE
[09:30:49.163] Tweak future expression to call with '...' arguments ...
[09:30:49.163] {
[09:30:49.163]     do.call(function(...) {
[09:30:49.163]         sum(x, ...)
[09:30:49.163]     }, args = future.call.arguments)
[09:30:49.163] }
[09:30:49.163] Tweak future expression to call with '...' arguments ... DONE
[09:30:49.164] The total size of the 2 globals is 112 bytes (112 bytes)
[09:30:49.165] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[09:30:49.165] - globals: [2] ‘x’, ‘future.call.arguments’
[09:30:49.165] 
[09:30:49.165] getGlobalsAndPackages() ... DONE
[09:30:49.165] run() for ‘Future’ ...
[09:30:49.165] - state: ‘created’
[09:30:49.165] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:49.179] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:49.180] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:49.180]   - Field: ‘node’
[09:30:49.180]   - Field: ‘label’
[09:30:49.180]   - Field: ‘local’
[09:30:49.180]   - Field: ‘owner’
[09:30:49.180]   - Field: ‘envir’
[09:30:49.180]   - Field: ‘workers’
[09:30:49.180]   - Field: ‘packages’
[09:30:49.180]   - Field: ‘gc’
[09:30:49.180]   - Field: ‘conditions’
[09:30:49.181]   - Field: ‘persistent’
[09:30:49.181]   - Field: ‘expr’
[09:30:49.181]   - Field: ‘uuid’
[09:30:49.181]   - Field: ‘seed’
[09:30:49.181]   - Field: ‘version’
[09:30:49.181]   - Field: ‘result’
[09:30:49.181]   - Field: ‘asynchronous’
[09:30:49.181]   - Field: ‘calls’
[09:30:49.181]   - Field: ‘globals’
[09:30:49.182]   - Field: ‘stdout’
[09:30:49.182]   - Field: ‘earlySignal’
[09:30:49.182]   - Field: ‘lazy’
[09:30:49.182]   - Field: ‘state’
[09:30:49.182] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:49.182] - Launch lazy future ...
[09:30:49.182] Packages needed by the future expression (n = 0): <none>
[09:30:49.183] Packages needed by future strategies (n = 0): <none>
[09:30:49.183] {
[09:30:49.183]     {
[09:30:49.183]         {
[09:30:49.183]             ...future.startTime <- base::Sys.time()
[09:30:49.183]             {
[09:30:49.183]                 {
[09:30:49.183]                   {
[09:30:49.183]                     {
[09:30:49.183]                       base::local({
[09:30:49.183]                         has_future <- base::requireNamespace("future", 
[09:30:49.183]                           quietly = TRUE)
[09:30:49.183]                         if (has_future) {
[09:30:49.183]                           ns <- base::getNamespace("future")
[09:30:49.183]                           version <- ns[[".package"]][["version"]]
[09:30:49.183]                           if (is.null(version)) 
[09:30:49.183]                             version <- utils::packageVersion("future")
[09:30:49.183]                         }
[09:30:49.183]                         else {
[09:30:49.183]                           version <- NULL
[09:30:49.183]                         }
[09:30:49.183]                         if (!has_future || version < "1.8.0") {
[09:30:49.183]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:49.183]                             "", base::R.version$version.string), 
[09:30:49.183]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:49.183]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:49.183]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:49.183]                               "release", "version")], collapse = " "), 
[09:30:49.183]                             hostname = base::Sys.info()[["nodename"]])
[09:30:49.183]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:49.183]                             info)
[09:30:49.183]                           info <- base::paste(info, collapse = "; ")
[09:30:49.183]                           if (!has_future) {
[09:30:49.183]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:49.183]                               info)
[09:30:49.183]                           }
[09:30:49.183]                           else {
[09:30:49.183]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:49.183]                               info, version)
[09:30:49.183]                           }
[09:30:49.183]                           base::stop(msg)
[09:30:49.183]                         }
[09:30:49.183]                       })
[09:30:49.183]                     }
[09:30:49.183]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:49.183]                     base::options(mc.cores = 1L)
[09:30:49.183]                   }
[09:30:49.183]                   ...future.strategy.old <- future::plan("list")
[09:30:49.183]                   options(future.plan = NULL)
[09:30:49.183]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.183]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:49.183]                 }
[09:30:49.183]                 ...future.workdir <- getwd()
[09:30:49.183]             }
[09:30:49.183]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:49.183]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:49.183]         }
[09:30:49.183]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:49.183]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:49.183]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:49.183]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:49.183]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:49.183]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:49.183]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:49.183]             base::names(...future.oldOptions))
[09:30:49.183]     }
[09:30:49.183]     if (FALSE) {
[09:30:49.183]     }
[09:30:49.183]     else {
[09:30:49.183]         if (TRUE) {
[09:30:49.183]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:49.183]                 open = "w")
[09:30:49.183]         }
[09:30:49.183]         else {
[09:30:49.183]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:49.183]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:49.183]         }
[09:30:49.183]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:49.183]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:49.183]             base::sink(type = "output", split = FALSE)
[09:30:49.183]             base::close(...future.stdout)
[09:30:49.183]         }, add = TRUE)
[09:30:49.183]     }
[09:30:49.183]     ...future.frame <- base::sys.nframe()
[09:30:49.183]     ...future.conditions <- base::list()
[09:30:49.183]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:49.183]     if (FALSE) {
[09:30:49.183]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:49.183]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:49.183]     }
[09:30:49.183]     ...future.result <- base::tryCatch({
[09:30:49.183]         base::withCallingHandlers({
[09:30:49.183]             ...future.value <- base::withVisible(base::local({
[09:30:49.183]                 ...future.makeSendCondition <- base::local({
[09:30:49.183]                   sendCondition <- NULL
[09:30:49.183]                   function(frame = 1L) {
[09:30:49.183]                     if (is.function(sendCondition)) 
[09:30:49.183]                       return(sendCondition)
[09:30:49.183]                     ns <- getNamespace("parallel")
[09:30:49.183]                     if (exists("sendData", mode = "function", 
[09:30:49.183]                       envir = ns)) {
[09:30:49.183]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:49.183]                         envir = ns)
[09:30:49.183]                       envir <- sys.frame(frame)
[09:30:49.183]                       master <- NULL
[09:30:49.183]                       while (!identical(envir, .GlobalEnv) && 
[09:30:49.183]                         !identical(envir, emptyenv())) {
[09:30:49.183]                         if (exists("master", mode = "list", envir = envir, 
[09:30:49.183]                           inherits = FALSE)) {
[09:30:49.183]                           master <- get("master", mode = "list", 
[09:30:49.183]                             envir = envir, inherits = FALSE)
[09:30:49.183]                           if (inherits(master, c("SOCKnode", 
[09:30:49.183]                             "SOCK0node"))) {
[09:30:49.183]                             sendCondition <<- function(cond) {
[09:30:49.183]                               data <- list(type = "VALUE", value = cond, 
[09:30:49.183]                                 success = TRUE)
[09:30:49.183]                               parallel_sendData(master, data)
[09:30:49.183]                             }
[09:30:49.183]                             return(sendCondition)
[09:30:49.183]                           }
[09:30:49.183]                         }
[09:30:49.183]                         frame <- frame + 1L
[09:30:49.183]                         envir <- sys.frame(frame)
[09:30:49.183]                       }
[09:30:49.183]                     }
[09:30:49.183]                     sendCondition <<- function(cond) NULL
[09:30:49.183]                   }
[09:30:49.183]                 })
[09:30:49.183]                 withCallingHandlers({
[09:30:49.183]                   {
[09:30:49.183]                     do.call(function(...) {
[09:30:49.183]                       sum(x, ...)
[09:30:49.183]                     }, args = future.call.arguments)
[09:30:49.183]                   }
[09:30:49.183]                 }, immediateCondition = function(cond) {
[09:30:49.183]                   sendCondition <- ...future.makeSendCondition()
[09:30:49.183]                   sendCondition(cond)
[09:30:49.183]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.183]                   {
[09:30:49.183]                     inherits <- base::inherits
[09:30:49.183]                     invokeRestart <- base::invokeRestart
[09:30:49.183]                     is.null <- base::is.null
[09:30:49.183]                     muffled <- FALSE
[09:30:49.183]                     if (inherits(cond, "message")) {
[09:30:49.183]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:49.183]                       if (muffled) 
[09:30:49.183]                         invokeRestart("muffleMessage")
[09:30:49.183]                     }
[09:30:49.183]                     else if (inherits(cond, "warning")) {
[09:30:49.183]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:49.183]                       if (muffled) 
[09:30:49.183]                         invokeRestart("muffleWarning")
[09:30:49.183]                     }
[09:30:49.183]                     else if (inherits(cond, "condition")) {
[09:30:49.183]                       if (!is.null(pattern)) {
[09:30:49.183]                         computeRestarts <- base::computeRestarts
[09:30:49.183]                         grepl <- base::grepl
[09:30:49.183]                         restarts <- computeRestarts(cond)
[09:30:49.183]                         for (restart in restarts) {
[09:30:49.183]                           name <- restart$name
[09:30:49.183]                           if (is.null(name)) 
[09:30:49.183]                             next
[09:30:49.183]                           if (!grepl(pattern, name)) 
[09:30:49.183]                             next
[09:30:49.183]                           invokeRestart(restart)
[09:30:49.183]                           muffled <- TRUE
[09:30:49.183]                           break
[09:30:49.183]                         }
[09:30:49.183]                       }
[09:30:49.183]                     }
[09:30:49.183]                     invisible(muffled)
[09:30:49.183]                   }
[09:30:49.183]                   muffleCondition(cond)
[09:30:49.183]                 })
[09:30:49.183]             }))
[09:30:49.183]             future::FutureResult(value = ...future.value$value, 
[09:30:49.183]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.183]                   ...future.rng), globalenv = if (FALSE) 
[09:30:49.183]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:49.183]                     ...future.globalenv.names))
[09:30:49.183]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:49.183]         }, condition = base::local({
[09:30:49.183]             c <- base::c
[09:30:49.183]             inherits <- base::inherits
[09:30:49.183]             invokeRestart <- base::invokeRestart
[09:30:49.183]             length <- base::length
[09:30:49.183]             list <- base::list
[09:30:49.183]             seq.int <- base::seq.int
[09:30:49.183]             signalCondition <- base::signalCondition
[09:30:49.183]             sys.calls <- base::sys.calls
[09:30:49.183]             `[[` <- base::`[[`
[09:30:49.183]             `+` <- base::`+`
[09:30:49.183]             `<<-` <- base::`<<-`
[09:30:49.183]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:49.183]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:49.183]                   3L)]
[09:30:49.183]             }
[09:30:49.183]             function(cond) {
[09:30:49.183]                 is_error <- inherits(cond, "error")
[09:30:49.183]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:49.183]                   NULL)
[09:30:49.183]                 if (is_error) {
[09:30:49.183]                   sessionInformation <- function() {
[09:30:49.183]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:49.183]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:49.183]                       search = base::search(), system = base::Sys.info())
[09:30:49.183]                   }
[09:30:49.183]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.183]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:49.183]                     cond$call), session = sessionInformation(), 
[09:30:49.183]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:49.183]                   signalCondition(cond)
[09:30:49.183]                 }
[09:30:49.183]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:49.183]                 "immediateCondition"))) {
[09:30:49.183]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:49.183]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.183]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:49.183]                   if (TRUE && !signal) {
[09:30:49.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.183]                     {
[09:30:49.183]                       inherits <- base::inherits
[09:30:49.183]                       invokeRestart <- base::invokeRestart
[09:30:49.183]                       is.null <- base::is.null
[09:30:49.183]                       muffled <- FALSE
[09:30:49.183]                       if (inherits(cond, "message")) {
[09:30:49.183]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.183]                         if (muffled) 
[09:30:49.183]                           invokeRestart("muffleMessage")
[09:30:49.183]                       }
[09:30:49.183]                       else if (inherits(cond, "warning")) {
[09:30:49.183]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.183]                         if (muffled) 
[09:30:49.183]                           invokeRestart("muffleWarning")
[09:30:49.183]                       }
[09:30:49.183]                       else if (inherits(cond, "condition")) {
[09:30:49.183]                         if (!is.null(pattern)) {
[09:30:49.183]                           computeRestarts <- base::computeRestarts
[09:30:49.183]                           grepl <- base::grepl
[09:30:49.183]                           restarts <- computeRestarts(cond)
[09:30:49.183]                           for (restart in restarts) {
[09:30:49.183]                             name <- restart$name
[09:30:49.183]                             if (is.null(name)) 
[09:30:49.183]                               next
[09:30:49.183]                             if (!grepl(pattern, name)) 
[09:30:49.183]                               next
[09:30:49.183]                             invokeRestart(restart)
[09:30:49.183]                             muffled <- TRUE
[09:30:49.183]                             break
[09:30:49.183]                           }
[09:30:49.183]                         }
[09:30:49.183]                       }
[09:30:49.183]                       invisible(muffled)
[09:30:49.183]                     }
[09:30:49.183]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.183]                   }
[09:30:49.183]                 }
[09:30:49.183]                 else {
[09:30:49.183]                   if (TRUE) {
[09:30:49.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.183]                     {
[09:30:49.183]                       inherits <- base::inherits
[09:30:49.183]                       invokeRestart <- base::invokeRestart
[09:30:49.183]                       is.null <- base::is.null
[09:30:49.183]                       muffled <- FALSE
[09:30:49.183]                       if (inherits(cond, "message")) {
[09:30:49.183]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.183]                         if (muffled) 
[09:30:49.183]                           invokeRestart("muffleMessage")
[09:30:49.183]                       }
[09:30:49.183]                       else if (inherits(cond, "warning")) {
[09:30:49.183]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.183]                         if (muffled) 
[09:30:49.183]                           invokeRestart("muffleWarning")
[09:30:49.183]                       }
[09:30:49.183]                       else if (inherits(cond, "condition")) {
[09:30:49.183]                         if (!is.null(pattern)) {
[09:30:49.183]                           computeRestarts <- base::computeRestarts
[09:30:49.183]                           grepl <- base::grepl
[09:30:49.183]                           restarts <- computeRestarts(cond)
[09:30:49.183]                           for (restart in restarts) {
[09:30:49.183]                             name <- restart$name
[09:30:49.183]                             if (is.null(name)) 
[09:30:49.183]                               next
[09:30:49.183]                             if (!grepl(pattern, name)) 
[09:30:49.183]                               next
[09:30:49.183]                             invokeRestart(restart)
[09:30:49.183]                             muffled <- TRUE
[09:30:49.183]                             break
[09:30:49.183]                           }
[09:30:49.183]                         }
[09:30:49.183]                       }
[09:30:49.183]                       invisible(muffled)
[09:30:49.183]                     }
[09:30:49.183]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.183]                   }
[09:30:49.183]                 }
[09:30:49.183]             }
[09:30:49.183]         }))
[09:30:49.183]     }, error = function(ex) {
[09:30:49.183]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:49.183]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.183]                 ...future.rng), started = ...future.startTime, 
[09:30:49.183]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:49.183]             version = "1.8"), class = "FutureResult")
[09:30:49.183]     }, finally = {
[09:30:49.183]         if (!identical(...future.workdir, getwd())) 
[09:30:49.183]             setwd(...future.workdir)
[09:30:49.183]         {
[09:30:49.183]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:49.183]                 ...future.oldOptions$nwarnings <- NULL
[09:30:49.183]             }
[09:30:49.183]             base::options(...future.oldOptions)
[09:30:49.183]             if (.Platform$OS.type == "windows") {
[09:30:49.183]                 old_names <- names(...future.oldEnvVars)
[09:30:49.183]                 envs <- base::Sys.getenv()
[09:30:49.183]                 names <- names(envs)
[09:30:49.183]                 common <- intersect(names, old_names)
[09:30:49.183]                 added <- setdiff(names, old_names)
[09:30:49.183]                 removed <- setdiff(old_names, names)
[09:30:49.183]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:49.183]                   envs[common]]
[09:30:49.183]                 NAMES <- toupper(changed)
[09:30:49.183]                 args <- list()
[09:30:49.183]                 for (kk in seq_along(NAMES)) {
[09:30:49.183]                   name <- changed[[kk]]
[09:30:49.183]                   NAME <- NAMES[[kk]]
[09:30:49.183]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.183]                     next
[09:30:49.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.183]                 }
[09:30:49.183]                 NAMES <- toupper(added)
[09:30:49.183]                 for (kk in seq_along(NAMES)) {
[09:30:49.183]                   name <- added[[kk]]
[09:30:49.183]                   NAME <- NAMES[[kk]]
[09:30:49.183]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.183]                     next
[09:30:49.183]                   args[[name]] <- ""
[09:30:49.183]                 }
[09:30:49.183]                 NAMES <- toupper(removed)
[09:30:49.183]                 for (kk in seq_along(NAMES)) {
[09:30:49.183]                   name <- removed[[kk]]
[09:30:49.183]                   NAME <- NAMES[[kk]]
[09:30:49.183]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.183]                     next
[09:30:49.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.183]                 }
[09:30:49.183]                 if (length(args) > 0) 
[09:30:49.183]                   base::do.call(base::Sys.setenv, args = args)
[09:30:49.183]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:49.183]             }
[09:30:49.183]             else {
[09:30:49.183]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:49.183]             }
[09:30:49.183]             {
[09:30:49.183]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:49.183]                   0L) {
[09:30:49.183]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:49.183]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:49.183]                   base::options(opts)
[09:30:49.183]                 }
[09:30:49.183]                 {
[09:30:49.183]                   {
[09:30:49.183]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:49.183]                     NULL
[09:30:49.183]                   }
[09:30:49.183]                   options(future.plan = NULL)
[09:30:49.183]                   if (is.na(NA_character_)) 
[09:30:49.183]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.183]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:49.183]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:49.183]                     .init = FALSE)
[09:30:49.183]                 }
[09:30:49.183]             }
[09:30:49.183]         }
[09:30:49.183]     })
[09:30:49.183]     if (TRUE) {
[09:30:49.183]         base::sink(type = "output", split = FALSE)
[09:30:49.183]         if (TRUE) {
[09:30:49.183]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:49.183]         }
[09:30:49.183]         else {
[09:30:49.183]             ...future.result["stdout"] <- base::list(NULL)
[09:30:49.183]         }
[09:30:49.183]         base::close(...future.stdout)
[09:30:49.183]         ...future.stdout <- NULL
[09:30:49.183]     }
[09:30:49.183]     ...future.result$conditions <- ...future.conditions
[09:30:49.183]     ...future.result$finished <- base::Sys.time()
[09:30:49.183]     ...future.result
[09:30:49.183] }
[09:30:49.186] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[09:30:49.186] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[09:30:49.186] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[09:30:49.187] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[09:30:49.187] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[09:30:49.187] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[09:30:49.188] MultisessionFuture started
[09:30:49.188] - Launch lazy future ... done
[09:30:49.188] run() for ‘MultisessionFuture’ ... done
[09:30:49.188] result() for ClusterFuture ...
[09:30:49.188] receiveMessageFromWorker() for ClusterFuture ...
[09:30:49.188] - Validating connection of MultisessionFuture
[09:30:49.193] - received message: FutureResult
[09:30:49.193] - Received FutureResult
[09:30:49.193] - Erased future from FutureRegistry
[09:30:49.193] result() for ClusterFuture ...
[09:30:49.193] - result already collected: FutureResult
[09:30:49.193] result() for ClusterFuture ... done
[09:30:49.193] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:49.193] result() for ClusterFuture ... done
[09:30:49.194] result() for ClusterFuture ...
[09:30:49.194] - result already collected: FutureResult
[09:30:49.194] result() for ClusterFuture ... done
[1] 6
** Sum function 'C' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x559329414468>
Arguments '...' exists: FALSE
[09:30:49.194] getGlobalsAndPackages() ...
[09:30:49.194] Searching for globals...
[09:30:49.196] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[09:30:49.196] Searching for globals ... DONE
[09:30:49.196] Resolving globals: FALSE
[09:30:49.197] The total size of the 2 globals is 112 bytes (112 bytes)
[09:30:49.197] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[09:30:49.197] - globals: [2] ‘x’, ‘y’
[09:30:49.197] 
[09:30:49.197] getGlobalsAndPackages() ... DONE
[09:30:49.198] run() for ‘Future’ ...
[09:30:49.198] - state: ‘created’
[09:30:49.198] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:49.212] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:49.212] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:49.212]   - Field: ‘node’
[09:30:49.213]   - Field: ‘label’
[09:30:49.213]   - Field: ‘local’
[09:30:49.213]   - Field: ‘owner’
[09:30:49.213]   - Field: ‘envir’
[09:30:49.213]   - Field: ‘workers’
[09:30:49.213]   - Field: ‘packages’
[09:30:49.213]   - Field: ‘gc’
[09:30:49.213]   - Field: ‘conditions’
[09:30:49.213]   - Field: ‘persistent’
[09:30:49.213]   - Field: ‘expr’
[09:30:49.214]   - Field: ‘uuid’
[09:30:49.214]   - Field: ‘seed’
[09:30:49.214]   - Field: ‘version’
[09:30:49.214]   - Field: ‘result’
[09:30:49.214]   - Field: ‘asynchronous’
[09:30:49.214]   - Field: ‘calls’
[09:30:49.214]   - Field: ‘globals’
[09:30:49.214]   - Field: ‘stdout’
[09:30:49.215]   - Field: ‘earlySignal’
[09:30:49.215]   - Field: ‘lazy’
[09:30:49.215]   - Field: ‘state’
[09:30:49.215] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:49.215] - Launch lazy future ...
[09:30:49.215] Packages needed by the future expression (n = 0): <none>
[09:30:49.215] Packages needed by future strategies (n = 0): <none>
[09:30:49.216] {
[09:30:49.216]     {
[09:30:49.216]         {
[09:30:49.216]             ...future.startTime <- base::Sys.time()
[09:30:49.216]             {
[09:30:49.216]                 {
[09:30:49.216]                   {
[09:30:49.216]                     {
[09:30:49.216]                       base::local({
[09:30:49.216]                         has_future <- base::requireNamespace("future", 
[09:30:49.216]                           quietly = TRUE)
[09:30:49.216]                         if (has_future) {
[09:30:49.216]                           ns <- base::getNamespace("future")
[09:30:49.216]                           version <- ns[[".package"]][["version"]]
[09:30:49.216]                           if (is.null(version)) 
[09:30:49.216]                             version <- utils::packageVersion("future")
[09:30:49.216]                         }
[09:30:49.216]                         else {
[09:30:49.216]                           version <- NULL
[09:30:49.216]                         }
[09:30:49.216]                         if (!has_future || version < "1.8.0") {
[09:30:49.216]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:49.216]                             "", base::R.version$version.string), 
[09:30:49.216]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:49.216]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:49.216]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:49.216]                               "release", "version")], collapse = " "), 
[09:30:49.216]                             hostname = base::Sys.info()[["nodename"]])
[09:30:49.216]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:49.216]                             info)
[09:30:49.216]                           info <- base::paste(info, collapse = "; ")
[09:30:49.216]                           if (!has_future) {
[09:30:49.216]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:49.216]                               info)
[09:30:49.216]                           }
[09:30:49.216]                           else {
[09:30:49.216]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:49.216]                               info, version)
[09:30:49.216]                           }
[09:30:49.216]                           base::stop(msg)
[09:30:49.216]                         }
[09:30:49.216]                       })
[09:30:49.216]                     }
[09:30:49.216]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:49.216]                     base::options(mc.cores = 1L)
[09:30:49.216]                   }
[09:30:49.216]                   ...future.strategy.old <- future::plan("list")
[09:30:49.216]                   options(future.plan = NULL)
[09:30:49.216]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.216]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:49.216]                 }
[09:30:49.216]                 ...future.workdir <- getwd()
[09:30:49.216]             }
[09:30:49.216]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:49.216]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:49.216]         }
[09:30:49.216]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:49.216]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:49.216]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:49.216]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:49.216]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:49.216]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:49.216]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:49.216]             base::names(...future.oldOptions))
[09:30:49.216]     }
[09:30:49.216]     if (FALSE) {
[09:30:49.216]     }
[09:30:49.216]     else {
[09:30:49.216]         if (TRUE) {
[09:30:49.216]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:49.216]                 open = "w")
[09:30:49.216]         }
[09:30:49.216]         else {
[09:30:49.216]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:49.216]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:49.216]         }
[09:30:49.216]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:49.216]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:49.216]             base::sink(type = "output", split = FALSE)
[09:30:49.216]             base::close(...future.stdout)
[09:30:49.216]         }, add = TRUE)
[09:30:49.216]     }
[09:30:49.216]     ...future.frame <- base::sys.nframe()
[09:30:49.216]     ...future.conditions <- base::list()
[09:30:49.216]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:49.216]     if (FALSE) {
[09:30:49.216]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:49.216]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:49.216]     }
[09:30:49.216]     ...future.result <- base::tryCatch({
[09:30:49.216]         base::withCallingHandlers({
[09:30:49.216]             ...future.value <- base::withVisible(base::local({
[09:30:49.216]                 ...future.makeSendCondition <- base::local({
[09:30:49.216]                   sendCondition <- NULL
[09:30:49.216]                   function(frame = 1L) {
[09:30:49.216]                     if (is.function(sendCondition)) 
[09:30:49.216]                       return(sendCondition)
[09:30:49.216]                     ns <- getNamespace("parallel")
[09:30:49.216]                     if (exists("sendData", mode = "function", 
[09:30:49.216]                       envir = ns)) {
[09:30:49.216]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:49.216]                         envir = ns)
[09:30:49.216]                       envir <- sys.frame(frame)
[09:30:49.216]                       master <- NULL
[09:30:49.216]                       while (!identical(envir, .GlobalEnv) && 
[09:30:49.216]                         !identical(envir, emptyenv())) {
[09:30:49.216]                         if (exists("master", mode = "list", envir = envir, 
[09:30:49.216]                           inherits = FALSE)) {
[09:30:49.216]                           master <- get("master", mode = "list", 
[09:30:49.216]                             envir = envir, inherits = FALSE)
[09:30:49.216]                           if (inherits(master, c("SOCKnode", 
[09:30:49.216]                             "SOCK0node"))) {
[09:30:49.216]                             sendCondition <<- function(cond) {
[09:30:49.216]                               data <- list(type = "VALUE", value = cond, 
[09:30:49.216]                                 success = TRUE)
[09:30:49.216]                               parallel_sendData(master, data)
[09:30:49.216]                             }
[09:30:49.216]                             return(sendCondition)
[09:30:49.216]                           }
[09:30:49.216]                         }
[09:30:49.216]                         frame <- frame + 1L
[09:30:49.216]                         envir <- sys.frame(frame)
[09:30:49.216]                       }
[09:30:49.216]                     }
[09:30:49.216]                     sendCondition <<- function(cond) NULL
[09:30:49.216]                   }
[09:30:49.216]                 })
[09:30:49.216]                 withCallingHandlers({
[09:30:49.216]                   {
[09:30:49.216]                     sum(x, y)
[09:30:49.216]                   }
[09:30:49.216]                 }, immediateCondition = function(cond) {
[09:30:49.216]                   sendCondition <- ...future.makeSendCondition()
[09:30:49.216]                   sendCondition(cond)
[09:30:49.216]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.216]                   {
[09:30:49.216]                     inherits <- base::inherits
[09:30:49.216]                     invokeRestart <- base::invokeRestart
[09:30:49.216]                     is.null <- base::is.null
[09:30:49.216]                     muffled <- FALSE
[09:30:49.216]                     if (inherits(cond, "message")) {
[09:30:49.216]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:49.216]                       if (muffled) 
[09:30:49.216]                         invokeRestart("muffleMessage")
[09:30:49.216]                     }
[09:30:49.216]                     else if (inherits(cond, "warning")) {
[09:30:49.216]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:49.216]                       if (muffled) 
[09:30:49.216]                         invokeRestart("muffleWarning")
[09:30:49.216]                     }
[09:30:49.216]                     else if (inherits(cond, "condition")) {
[09:30:49.216]                       if (!is.null(pattern)) {
[09:30:49.216]                         computeRestarts <- base::computeRestarts
[09:30:49.216]                         grepl <- base::grepl
[09:30:49.216]                         restarts <- computeRestarts(cond)
[09:30:49.216]                         for (restart in restarts) {
[09:30:49.216]                           name <- restart$name
[09:30:49.216]                           if (is.null(name)) 
[09:30:49.216]                             next
[09:30:49.216]                           if (!grepl(pattern, name)) 
[09:30:49.216]                             next
[09:30:49.216]                           invokeRestart(restart)
[09:30:49.216]                           muffled <- TRUE
[09:30:49.216]                           break
[09:30:49.216]                         }
[09:30:49.216]                       }
[09:30:49.216]                     }
[09:30:49.216]                     invisible(muffled)
[09:30:49.216]                   }
[09:30:49.216]                   muffleCondition(cond)
[09:30:49.216]                 })
[09:30:49.216]             }))
[09:30:49.216]             future::FutureResult(value = ...future.value$value, 
[09:30:49.216]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.216]                   ...future.rng), globalenv = if (FALSE) 
[09:30:49.216]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:49.216]                     ...future.globalenv.names))
[09:30:49.216]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:49.216]         }, condition = base::local({
[09:30:49.216]             c <- base::c
[09:30:49.216]             inherits <- base::inherits
[09:30:49.216]             invokeRestart <- base::invokeRestart
[09:30:49.216]             length <- base::length
[09:30:49.216]             list <- base::list
[09:30:49.216]             seq.int <- base::seq.int
[09:30:49.216]             signalCondition <- base::signalCondition
[09:30:49.216]             sys.calls <- base::sys.calls
[09:30:49.216]             `[[` <- base::`[[`
[09:30:49.216]             `+` <- base::`+`
[09:30:49.216]             `<<-` <- base::`<<-`
[09:30:49.216]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:49.216]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:49.216]                   3L)]
[09:30:49.216]             }
[09:30:49.216]             function(cond) {
[09:30:49.216]                 is_error <- inherits(cond, "error")
[09:30:49.216]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:49.216]                   NULL)
[09:30:49.216]                 if (is_error) {
[09:30:49.216]                   sessionInformation <- function() {
[09:30:49.216]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:49.216]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:49.216]                       search = base::search(), system = base::Sys.info())
[09:30:49.216]                   }
[09:30:49.216]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.216]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:49.216]                     cond$call), session = sessionInformation(), 
[09:30:49.216]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:49.216]                   signalCondition(cond)
[09:30:49.216]                 }
[09:30:49.216]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:49.216]                 "immediateCondition"))) {
[09:30:49.216]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:49.216]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.216]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:49.216]                   if (TRUE && !signal) {
[09:30:49.216]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.216]                     {
[09:30:49.216]                       inherits <- base::inherits
[09:30:49.216]                       invokeRestart <- base::invokeRestart
[09:30:49.216]                       is.null <- base::is.null
[09:30:49.216]                       muffled <- FALSE
[09:30:49.216]                       if (inherits(cond, "message")) {
[09:30:49.216]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.216]                         if (muffled) 
[09:30:49.216]                           invokeRestart("muffleMessage")
[09:30:49.216]                       }
[09:30:49.216]                       else if (inherits(cond, "warning")) {
[09:30:49.216]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.216]                         if (muffled) 
[09:30:49.216]                           invokeRestart("muffleWarning")
[09:30:49.216]                       }
[09:30:49.216]                       else if (inherits(cond, "condition")) {
[09:30:49.216]                         if (!is.null(pattern)) {
[09:30:49.216]                           computeRestarts <- base::computeRestarts
[09:30:49.216]                           grepl <- base::grepl
[09:30:49.216]                           restarts <- computeRestarts(cond)
[09:30:49.216]                           for (restart in restarts) {
[09:30:49.216]                             name <- restart$name
[09:30:49.216]                             if (is.null(name)) 
[09:30:49.216]                               next
[09:30:49.216]                             if (!grepl(pattern, name)) 
[09:30:49.216]                               next
[09:30:49.216]                             invokeRestart(restart)
[09:30:49.216]                             muffled <- TRUE
[09:30:49.216]                             break
[09:30:49.216]                           }
[09:30:49.216]                         }
[09:30:49.216]                       }
[09:30:49.216]                       invisible(muffled)
[09:30:49.216]                     }
[09:30:49.216]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.216]                   }
[09:30:49.216]                 }
[09:30:49.216]                 else {
[09:30:49.216]                   if (TRUE) {
[09:30:49.216]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.216]                     {
[09:30:49.216]                       inherits <- base::inherits
[09:30:49.216]                       invokeRestart <- base::invokeRestart
[09:30:49.216]                       is.null <- base::is.null
[09:30:49.216]                       muffled <- FALSE
[09:30:49.216]                       if (inherits(cond, "message")) {
[09:30:49.216]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.216]                         if (muffled) 
[09:30:49.216]                           invokeRestart("muffleMessage")
[09:30:49.216]                       }
[09:30:49.216]                       else if (inherits(cond, "warning")) {
[09:30:49.216]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.216]                         if (muffled) 
[09:30:49.216]                           invokeRestart("muffleWarning")
[09:30:49.216]                       }
[09:30:49.216]                       else if (inherits(cond, "condition")) {
[09:30:49.216]                         if (!is.null(pattern)) {
[09:30:49.216]                           computeRestarts <- base::computeRestarts
[09:30:49.216]                           grepl <- base::grepl
[09:30:49.216]                           restarts <- computeRestarts(cond)
[09:30:49.216]                           for (restart in restarts) {
[09:30:49.216]                             name <- restart$name
[09:30:49.216]                             if (is.null(name)) 
[09:30:49.216]                               next
[09:30:49.216]                             if (!grepl(pattern, name)) 
[09:30:49.216]                               next
[09:30:49.216]                             invokeRestart(restart)
[09:30:49.216]                             muffled <- TRUE
[09:30:49.216]                             break
[09:30:49.216]                           }
[09:30:49.216]                         }
[09:30:49.216]                       }
[09:30:49.216]                       invisible(muffled)
[09:30:49.216]                     }
[09:30:49.216]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.216]                   }
[09:30:49.216]                 }
[09:30:49.216]             }
[09:30:49.216]         }))
[09:30:49.216]     }, error = function(ex) {
[09:30:49.216]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:49.216]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.216]                 ...future.rng), started = ...future.startTime, 
[09:30:49.216]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:49.216]             version = "1.8"), class = "FutureResult")
[09:30:49.216]     }, finally = {
[09:30:49.216]         if (!identical(...future.workdir, getwd())) 
[09:30:49.216]             setwd(...future.workdir)
[09:30:49.216]         {
[09:30:49.216]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:49.216]                 ...future.oldOptions$nwarnings <- NULL
[09:30:49.216]             }
[09:30:49.216]             base::options(...future.oldOptions)
[09:30:49.216]             if (.Platform$OS.type == "windows") {
[09:30:49.216]                 old_names <- names(...future.oldEnvVars)
[09:30:49.216]                 envs <- base::Sys.getenv()
[09:30:49.216]                 names <- names(envs)
[09:30:49.216]                 common <- intersect(names, old_names)
[09:30:49.216]                 added <- setdiff(names, old_names)
[09:30:49.216]                 removed <- setdiff(old_names, names)
[09:30:49.216]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:49.216]                   envs[common]]
[09:30:49.216]                 NAMES <- toupper(changed)
[09:30:49.216]                 args <- list()
[09:30:49.216]                 for (kk in seq_along(NAMES)) {
[09:30:49.216]                   name <- changed[[kk]]
[09:30:49.216]                   NAME <- NAMES[[kk]]
[09:30:49.216]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.216]                     next
[09:30:49.216]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.216]                 }
[09:30:49.216]                 NAMES <- toupper(added)
[09:30:49.216]                 for (kk in seq_along(NAMES)) {
[09:30:49.216]                   name <- added[[kk]]
[09:30:49.216]                   NAME <- NAMES[[kk]]
[09:30:49.216]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.216]                     next
[09:30:49.216]                   args[[name]] <- ""
[09:30:49.216]                 }
[09:30:49.216]                 NAMES <- toupper(removed)
[09:30:49.216]                 for (kk in seq_along(NAMES)) {
[09:30:49.216]                   name <- removed[[kk]]
[09:30:49.216]                   NAME <- NAMES[[kk]]
[09:30:49.216]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.216]                     next
[09:30:49.216]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.216]                 }
[09:30:49.216]                 if (length(args) > 0) 
[09:30:49.216]                   base::do.call(base::Sys.setenv, args = args)
[09:30:49.216]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:49.216]             }
[09:30:49.216]             else {
[09:30:49.216]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:49.216]             }
[09:30:49.216]             {
[09:30:49.216]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:49.216]                   0L) {
[09:30:49.216]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:49.216]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:49.216]                   base::options(opts)
[09:30:49.216]                 }
[09:30:49.216]                 {
[09:30:49.216]                   {
[09:30:49.216]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:49.216]                     NULL
[09:30:49.216]                   }
[09:30:49.216]                   options(future.plan = NULL)
[09:30:49.216]                   if (is.na(NA_character_)) 
[09:30:49.216]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.216]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:49.216]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:49.216]                     .init = FALSE)
[09:30:49.216]                 }
[09:30:49.216]             }
[09:30:49.216]         }
[09:30:49.216]     })
[09:30:49.216]     if (TRUE) {
[09:30:49.216]         base::sink(type = "output", split = FALSE)
[09:30:49.216]         if (TRUE) {
[09:30:49.216]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:49.216]         }
[09:30:49.216]         else {
[09:30:49.216]             ...future.result["stdout"] <- base::list(NULL)
[09:30:49.216]         }
[09:30:49.216]         base::close(...future.stdout)
[09:30:49.216]         ...future.stdout <- NULL
[09:30:49.216]     }
[09:30:49.216]     ...future.result$conditions <- ...future.conditions
[09:30:49.216]     ...future.result$finished <- base::Sys.time()
[09:30:49.216]     ...future.result
[09:30:49.216] }
[09:30:49.219] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[09:30:49.219] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[09:30:49.220] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[09:30:49.220] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[09:30:49.221] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[09:30:49.221] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[09:30:49.221] MultisessionFuture started
[09:30:49.222] - Launch lazy future ... done
[09:30:49.225] run() for ‘MultisessionFuture’ ... done
[09:30:49.225] result() for ClusterFuture ...
[09:30:49.225] receiveMessageFromWorker() for ClusterFuture ...
[09:30:49.225] - Validating connection of MultisessionFuture
[09:30:49.226] - received message: FutureResult
[09:30:49.226] - Received FutureResult
[09:30:49.226] - Erased future from FutureRegistry
[09:30:49.226] result() for ClusterFuture ...
[09:30:49.226] - result already collected: FutureResult
[09:30:49.226] result() for ClusterFuture ... done
[09:30:49.226] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:49.227] result() for ClusterFuture ... done
[09:30:49.227] result() for ClusterFuture ...
[09:30:49.227] - result already collected: FutureResult
[09:30:49.227] result() for ClusterFuture ... done
[1] 6
** Sum function 'D' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5593295b00c0>
Arguments '...' exists: FALSE
[09:30:49.228] getGlobalsAndPackages() ...
[09:30:49.228] Searching for globals...
[09:30:49.230] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[09:30:49.230] Searching for globals ... DONE
[09:30:49.230] Resolving globals: FALSE
[09:30:49.230] Tweak future expression to call with '...' arguments ...
[09:30:49.231] The total size of the 2 globals is 112 bytes (112 bytes)
[09:30:49.231] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[09:30:49.231] - globals: [2] ‘x’, ‘y’
[09:30:49.231] 
[09:30:49.231] getGlobalsAndPackages() ... DONE
[09:30:49.232] run() for ‘Future’ ...
[09:30:49.232] - state: ‘created’
[09:30:49.232] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:49.247] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:49.247] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:49.247]   - Field: ‘node’
[09:30:49.248]   - Field: ‘label’
[09:30:49.248]   - Field: ‘local’
[09:30:49.248]   - Field: ‘owner’
[09:30:49.248]   - Field: ‘envir’
[09:30:49.248]   - Field: ‘workers’
[09:30:49.248]   - Field: ‘packages’
[09:30:49.248]   - Field: ‘gc’
[09:30:49.248]   - Field: ‘conditions’
[09:30:49.248]   - Field: ‘persistent’
[09:30:49.248]   - Field: ‘expr’
[09:30:49.249]   - Field: ‘uuid’
[09:30:49.249]   - Field: ‘seed’
[09:30:49.249]   - Field: ‘version’
[09:30:49.249]   - Field: ‘result’
[09:30:49.249]   - Field: ‘asynchronous’
[09:30:49.249]   - Field: ‘calls’
[09:30:49.249]   - Field: ‘globals’
[09:30:49.249]   - Field: ‘stdout’
[09:30:49.249]   - Field: ‘earlySignal’
[09:30:49.249]   - Field: ‘lazy’
[09:30:49.249]   - Field: ‘state’
[09:30:49.250] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:49.250] - Launch lazy future ...
[09:30:49.250] Packages needed by the future expression (n = 0): <none>
[09:30:49.250] Packages needed by future strategies (n = 0): <none>
[09:30:49.250] {
[09:30:49.250]     {
[09:30:49.250]         {
[09:30:49.250]             ...future.startTime <- base::Sys.time()
[09:30:49.250]             {
[09:30:49.250]                 {
[09:30:49.250]                   {
[09:30:49.250]                     {
[09:30:49.250]                       base::local({
[09:30:49.250]                         has_future <- base::requireNamespace("future", 
[09:30:49.250]                           quietly = TRUE)
[09:30:49.250]                         if (has_future) {
[09:30:49.250]                           ns <- base::getNamespace("future")
[09:30:49.250]                           version <- ns[[".package"]][["version"]]
[09:30:49.250]                           if (is.null(version)) 
[09:30:49.250]                             version <- utils::packageVersion("future")
[09:30:49.250]                         }
[09:30:49.250]                         else {
[09:30:49.250]                           version <- NULL
[09:30:49.250]                         }
[09:30:49.250]                         if (!has_future || version < "1.8.0") {
[09:30:49.250]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:49.250]                             "", base::R.version$version.string), 
[09:30:49.250]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:49.250]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:49.250]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:49.250]                               "release", "version")], collapse = " "), 
[09:30:49.250]                             hostname = base::Sys.info()[["nodename"]])
[09:30:49.250]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:49.250]                             info)
[09:30:49.250]                           info <- base::paste(info, collapse = "; ")
[09:30:49.250]                           if (!has_future) {
[09:30:49.250]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:49.250]                               info)
[09:30:49.250]                           }
[09:30:49.250]                           else {
[09:30:49.250]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:49.250]                               info, version)
[09:30:49.250]                           }
[09:30:49.250]                           base::stop(msg)
[09:30:49.250]                         }
[09:30:49.250]                       })
[09:30:49.250]                     }
[09:30:49.250]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:49.250]                     base::options(mc.cores = 1L)
[09:30:49.250]                   }
[09:30:49.250]                   ...future.strategy.old <- future::plan("list")
[09:30:49.250]                   options(future.plan = NULL)
[09:30:49.250]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.250]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:49.250]                 }
[09:30:49.250]                 ...future.workdir <- getwd()
[09:30:49.250]             }
[09:30:49.250]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:49.250]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:49.250]         }
[09:30:49.250]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:49.250]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:49.250]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:49.250]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:49.250]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:49.250]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:49.250]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:49.250]             base::names(...future.oldOptions))
[09:30:49.250]     }
[09:30:49.250]     if (FALSE) {
[09:30:49.250]     }
[09:30:49.250]     else {
[09:30:49.250]         if (TRUE) {
[09:30:49.250]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:49.250]                 open = "w")
[09:30:49.250]         }
[09:30:49.250]         else {
[09:30:49.250]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:49.250]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:49.250]         }
[09:30:49.250]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:49.250]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:49.250]             base::sink(type = "output", split = FALSE)
[09:30:49.250]             base::close(...future.stdout)
[09:30:49.250]         }, add = TRUE)
[09:30:49.250]     }
[09:30:49.250]     ...future.frame <- base::sys.nframe()
[09:30:49.250]     ...future.conditions <- base::list()
[09:30:49.250]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:49.250]     if (FALSE) {
[09:30:49.250]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:49.250]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:49.250]     }
[09:30:49.250]     ...future.result <- base::tryCatch({
[09:30:49.250]         base::withCallingHandlers({
[09:30:49.250]             ...future.value <- base::withVisible(base::local({
[09:30:49.250]                 ...future.makeSendCondition <- base::local({
[09:30:49.250]                   sendCondition <- NULL
[09:30:49.250]                   function(frame = 1L) {
[09:30:49.250]                     if (is.function(sendCondition)) 
[09:30:49.250]                       return(sendCondition)
[09:30:49.250]                     ns <- getNamespace("parallel")
[09:30:49.250]                     if (exists("sendData", mode = "function", 
[09:30:49.250]                       envir = ns)) {
[09:30:49.250]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:49.250]                         envir = ns)
[09:30:49.250]                       envir <- sys.frame(frame)
[09:30:49.250]                       master <- NULL
[09:30:49.250]                       while (!identical(envir, .GlobalEnv) && 
[09:30:49.250]                         !identical(envir, emptyenv())) {
[09:30:49.250]                         if (exists("master", mode = "list", envir = envir, 
[09:30:49.250]                           inherits = FALSE)) {
[09:30:49.250]                           master <- get("master", mode = "list", 
[09:30:49.250]                             envir = envir, inherits = FALSE)
[09:30:49.250]                           if (inherits(master, c("SOCKnode", 
[09:30:49.250]                             "SOCK0node"))) {
[09:30:49.250]                             sendCondition <<- function(cond) {
[09:30:49.250]                               data <- list(type = "VALUE", value = cond, 
[09:30:49.250]                                 success = TRUE)
[09:30:49.250]                               parallel_sendData(master, data)
[09:30:49.250]                             }
[09:30:49.250]                             return(sendCondition)
[09:30:49.250]                           }
[09:30:49.250]                         }
[09:30:49.250]                         frame <- frame + 1L
[09:30:49.250]                         envir <- sys.frame(frame)
[09:30:49.250]                       }
[09:30:49.250]                     }
[09:30:49.250]                     sendCondition <<- function(cond) NULL
[09:30:49.250]                   }
[09:30:49.250]                 })
[09:30:49.250]                 withCallingHandlers({
[09:30:49.250]                   {
[09:30:49.250]                     sum(x, y, ...)
[09:30:49.250]                   }
[09:30:49.250]                 }, immediateCondition = function(cond) {
[09:30:49.250]                   sendCondition <- ...future.makeSendCondition()
[09:30:49.250]                   sendCondition(cond)
[09:30:49.250]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.250]                   {
[09:30:49.250]                     inherits <- base::inherits
[09:30:49.250]                     invokeRestart <- base::invokeRestart
[09:30:49.250]                     is.null <- base::is.null
[09:30:49.250]                     muffled <- FALSE
[09:30:49.250]                     if (inherits(cond, "message")) {
[09:30:49.250]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:49.250]                       if (muffled) 
[09:30:49.250]                         invokeRestart("muffleMessage")
[09:30:49.250]                     }
[09:30:49.250]                     else if (inherits(cond, "warning")) {
[09:30:49.250]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:49.250]                       if (muffled) 
[09:30:49.250]                         invokeRestart("muffleWarning")
[09:30:49.250]                     }
[09:30:49.250]                     else if (inherits(cond, "condition")) {
[09:30:49.250]                       if (!is.null(pattern)) {
[09:30:49.250]                         computeRestarts <- base::computeRestarts
[09:30:49.250]                         grepl <- base::grepl
[09:30:49.250]                         restarts <- computeRestarts(cond)
[09:30:49.250]                         for (restart in restarts) {
[09:30:49.250]                           name <- restart$name
[09:30:49.250]                           if (is.null(name)) 
[09:30:49.250]                             next
[09:30:49.250]                           if (!grepl(pattern, name)) 
[09:30:49.250]                             next
[09:30:49.250]                           invokeRestart(restart)
[09:30:49.250]                           muffled <- TRUE
[09:30:49.250]                           break
[09:30:49.250]                         }
[09:30:49.250]                       }
[09:30:49.250]                     }
[09:30:49.250]                     invisible(muffled)
[09:30:49.250]                   }
[09:30:49.250]                   muffleCondition(cond)
[09:30:49.250]                 })
[09:30:49.250]             }))
[09:30:49.250]             future::FutureResult(value = ...future.value$value, 
[09:30:49.250]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.250]                   ...future.rng), globalenv = if (FALSE) 
[09:30:49.250]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:49.250]                     ...future.globalenv.names))
[09:30:49.250]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:49.250]         }, condition = base::local({
[09:30:49.250]             c <- base::c
[09:30:49.250]             inherits <- base::inherits
[09:30:49.250]             invokeRestart <- base::invokeRestart
[09:30:49.250]             length <- base::length
[09:30:49.250]             list <- base::list
[09:30:49.250]             seq.int <- base::seq.int
[09:30:49.250]             signalCondition <- base::signalCondition
[09:30:49.250]             sys.calls <- base::sys.calls
[09:30:49.250]             `[[` <- base::`[[`
[09:30:49.250]             `+` <- base::`+`
[09:30:49.250]             `<<-` <- base::`<<-`
[09:30:49.250]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:49.250]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:49.250]                   3L)]
[09:30:49.250]             }
[09:30:49.250]             function(cond) {
[09:30:49.250]                 is_error <- inherits(cond, "error")
[09:30:49.250]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:49.250]                   NULL)
[09:30:49.250]                 if (is_error) {
[09:30:49.250]                   sessionInformation <- function() {
[09:30:49.250]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:49.250]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:49.250]                       search = base::search(), system = base::Sys.info())
[09:30:49.250]                   }
[09:30:49.250]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.250]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:49.250]                     cond$call), session = sessionInformation(), 
[09:30:49.250]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:49.250]                   signalCondition(cond)
[09:30:49.250]                 }
[09:30:49.250]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:49.250]                 "immediateCondition"))) {
[09:30:49.250]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:49.250]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.250]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:49.250]                   if (TRUE && !signal) {
[09:30:49.250]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.250]                     {
[09:30:49.250]                       inherits <- base::inherits
[09:30:49.250]                       invokeRestart <- base::invokeRestart
[09:30:49.250]                       is.null <- base::is.null
[09:30:49.250]                       muffled <- FALSE
[09:30:49.250]                       if (inherits(cond, "message")) {
[09:30:49.250]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.250]                         if (muffled) 
[09:30:49.250]                           invokeRestart("muffleMessage")
[09:30:49.250]                       }
[09:30:49.250]                       else if (inherits(cond, "warning")) {
[09:30:49.250]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.250]                         if (muffled) 
[09:30:49.250]                           invokeRestart("muffleWarning")
[09:30:49.250]                       }
[09:30:49.250]                       else if (inherits(cond, "condition")) {
[09:30:49.250]                         if (!is.null(pattern)) {
[09:30:49.250]                           computeRestarts <- base::computeRestarts
[09:30:49.250]                           grepl <- base::grepl
[09:30:49.250]                           restarts <- computeRestarts(cond)
[09:30:49.250]                           for (restart in restarts) {
[09:30:49.250]                             name <- restart$name
[09:30:49.250]                             if (is.null(name)) 
[09:30:49.250]                               next
[09:30:49.250]                             if (!grepl(pattern, name)) 
[09:30:49.250]                               next
[09:30:49.250]                             invokeRestart(restart)
[09:30:49.250]                             muffled <- TRUE
[09:30:49.250]                             break
[09:30:49.250]                           }
[09:30:49.250]                         }
[09:30:49.250]                       }
[09:30:49.250]                       invisible(muffled)
[09:30:49.250]                     }
[09:30:49.250]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.250]                   }
[09:30:49.250]                 }
[09:30:49.250]                 else {
[09:30:49.250]                   if (TRUE) {
[09:30:49.250]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.250]                     {
[09:30:49.250]                       inherits <- base::inherits
[09:30:49.250]                       invokeRestart <- base::invokeRestart
[09:30:49.250]                       is.null <- base::is.null
[09:30:49.250]                       muffled <- FALSE
[09:30:49.250]                       if (inherits(cond, "message")) {
[09:30:49.250]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.250]                         if (muffled) 
[09:30:49.250]                           invokeRestart("muffleMessage")
[09:30:49.250]                       }
[09:30:49.250]                       else if (inherits(cond, "warning")) {
[09:30:49.250]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.250]                         if (muffled) 
[09:30:49.250]                           invokeRestart("muffleWarning")
[09:30:49.250]                       }
[09:30:49.250]                       else if (inherits(cond, "condition")) {
[09:30:49.250]                         if (!is.null(pattern)) {
[09:30:49.250]                           computeRestarts <- base::computeRestarts
[09:30:49.250]                           grepl <- base::grepl
[09:30:49.250]                           restarts <- computeRestarts(cond)
[09:30:49.250]                           for (restart in restarts) {
[09:30:49.250]                             name <- restart$name
[09:30:49.250]                             if (is.null(name)) 
[09:30:49.250]                               next
[09:30:49.250]                             if (!grepl(pattern, name)) 
[09:30:49.250]                               next
[09:30:49.250]                             invokeRestart(restart)
[09:30:49.250]                             muffled <- TRUE
[09:30:49.250]                             break
[09:30:49.250]                           }
[09:30:49.250]                         }
[09:30:49.250]                       }
[09:30:49.250]                       invisible(muffled)
[09:30:49.250]                     }
[09:30:49.250]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.250]                   }
[09:30:49.250]                 }
[09:30:49.250]             }
[09:30:49.250]         }))
[09:30:49.250]     }, error = function(ex) {
[09:30:49.250]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:49.250]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.250]                 ...future.rng), started = ...future.startTime, 
[09:30:49.250]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:49.250]             version = "1.8"), class = "FutureResult")
[09:30:49.250]     }, finally = {
[09:30:49.250]         if (!identical(...future.workdir, getwd())) 
[09:30:49.250]             setwd(...future.workdir)
[09:30:49.250]         {
[09:30:49.250]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:49.250]                 ...future.oldOptions$nwarnings <- NULL
[09:30:49.250]             }
[09:30:49.250]             base::options(...future.oldOptions)
[09:30:49.250]             if (.Platform$OS.type == "windows") {
[09:30:49.250]                 old_names <- names(...future.oldEnvVars)
[09:30:49.250]                 envs <- base::Sys.getenv()
[09:30:49.250]                 names <- names(envs)
[09:30:49.250]                 common <- intersect(names, old_names)
[09:30:49.250]                 added <- setdiff(names, old_names)
[09:30:49.250]                 removed <- setdiff(old_names, names)
[09:30:49.250]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:49.250]                   envs[common]]
[09:30:49.250]                 NAMES <- toupper(changed)
[09:30:49.250]                 args <- list()
[09:30:49.250]                 for (kk in seq_along(NAMES)) {
[09:30:49.250]                   name <- changed[[kk]]
[09:30:49.250]                   NAME <- NAMES[[kk]]
[09:30:49.250]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.250]                     next
[09:30:49.250]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.250]                 }
[09:30:49.250]                 NAMES <- toupper(added)
[09:30:49.250]                 for (kk in seq_along(NAMES)) {
[09:30:49.250]                   name <- added[[kk]]
[09:30:49.250]                   NAME <- NAMES[[kk]]
[09:30:49.250]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.250]                     next
[09:30:49.250]                   args[[name]] <- ""
[09:30:49.250]                 }
[09:30:49.250]                 NAMES <- toupper(removed)
[09:30:49.250]                 for (kk in seq_along(NAMES)) {
[09:30:49.250]                   name <- removed[[kk]]
[09:30:49.250]                   NAME <- NAMES[[kk]]
[09:30:49.250]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.250]                     next
[09:30:49.250]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.250]                 }
[09:30:49.250]                 if (length(args) > 0) 
[09:30:49.250]                   base::do.call(base::Sys.setenv, args = args)
[09:30:49.250]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:49.250]             }
[09:30:49.250]             else {
[09:30:49.250]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:49.250]             }
[09:30:49.250]             {
[09:30:49.250]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:49.250]                   0L) {
[09:30:49.250]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:49.250]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:49.250]                   base::options(opts)
[09:30:49.250]                 }
[09:30:49.250]                 {
[09:30:49.250]                   {
[09:30:49.250]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:49.250]                     NULL
[09:30:49.250]                   }
[09:30:49.250]                   options(future.plan = NULL)
[09:30:49.250]                   if (is.na(NA_character_)) 
[09:30:49.250]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.250]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:49.250]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:49.250]                     .init = FALSE)
[09:30:49.250]                 }
[09:30:49.250]             }
[09:30:49.250]         }
[09:30:49.250]     })
[09:30:49.250]     if (TRUE) {
[09:30:49.250]         base::sink(type = "output", split = FALSE)
[09:30:49.250]         if (TRUE) {
[09:30:49.250]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:49.250]         }
[09:30:49.250]         else {
[09:30:49.250]             ...future.result["stdout"] <- base::list(NULL)
[09:30:49.250]         }
[09:30:49.250]         base::close(...future.stdout)
[09:30:49.250]         ...future.stdout <- NULL
[09:30:49.250]     }
[09:30:49.250]     ...future.result$conditions <- ...future.conditions
[09:30:49.250]     ...future.result$finished <- base::Sys.time()
[09:30:49.250]     ...future.result
[09:30:49.250] }
[09:30:49.253] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[09:30:49.253] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[09:30:49.254] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[09:30:49.254] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[09:30:49.254] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[09:30:49.254] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[09:30:49.255] MultisessionFuture started
[09:30:49.255] - Launch lazy future ... done
[09:30:49.255] run() for ‘MultisessionFuture’ ... done
[09:30:49.255] result() for ClusterFuture ...
[09:30:49.255] receiveMessageFromWorker() for ClusterFuture ...
[09:30:49.255] - Validating connection of MultisessionFuture
[09:30:49.258] - received message: FutureResult
[09:30:49.258] - Received FutureResult
[09:30:49.258] - Erased future from FutureRegistry
[09:30:49.258] result() for ClusterFuture ...
[09:30:49.258] - result already collected: FutureResult
[09:30:49.258] result() for ClusterFuture ... done
[09:30:49.258] signalConditions() ...
[09:30:49.258]  - include = ‘immediateCondition’
[09:30:49.259]  - exclude = 
[09:30:49.259]  - resignal = FALSE
[09:30:49.259]  - Number of conditions: 1
[09:30:49.259] signalConditions() ... done
[09:30:49.259] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:49.259] result() for ClusterFuture ... done
[09:30:49.259] result() for ClusterFuture ...
[09:30:49.259] - result already collected: FutureResult
[09:30:49.259] result() for ClusterFuture ... done
[09:30:49.259] signalConditions() ...
[09:30:49.259]  - include = ‘immediateCondition’
[09:30:49.260]  - exclude = 
[09:30:49.260]  - resignal = FALSE
[09:30:49.260]  - Number of conditions: 1
[09:30:49.260] signalConditions() ... done
[09:30:49.260] Future state: ‘finished’
[09:30:49.260] result() for ClusterFuture ...
[09:30:49.260] - result already collected: FutureResult
[09:30:49.260] result() for ClusterFuture ... done
[09:30:49.260] signalConditions() ...
[09:30:49.260]  - include = ‘condition’
[09:30:49.260]  - exclude = ‘immediateCondition’
[09:30:49.261]  - resignal = TRUE
[09:30:49.261]  - Number of conditions: 1
[09:30:49.261]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:30:49.261] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multisession') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x559329b9b798>
Arguments '...' exists: TRUE
[09:30:49.262] getGlobalsAndPackages() ...
[09:30:49.262] - globals passed as-is: [1] ‘...’
[09:30:49.262] Resolving globals: FALSE
[09:30:49.262] Tweak future expression to call with '...' arguments ...
[09:30:49.262] {
[09:30:49.262]     do.call(function(...) {
[09:30:49.262]         fcn <- function() sum(...)
[09:30:49.262]         fcn()
[09:30:49.262]     }, args = future.call.arguments)
[09:30:49.262] }
[09:30:49.262] Tweak future expression to call with '...' arguments ... DONE
[09:30:49.263] The total size of the 1 globals is 112 bytes (112 bytes)
[09:30:49.263] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[09:30:49.263] - globals: [1] ‘future.call.arguments’
[09:30:49.263] 
[09:30:49.263] getGlobalsAndPackages() ... DONE
[09:30:49.264] run() for ‘Future’ ...
[09:30:49.264] - state: ‘created’
[09:30:49.264] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:49.281] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:49.282] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:49.282]   - Field: ‘node’
[09:30:49.282]   - Field: ‘label’
[09:30:49.282]   - Field: ‘local’
[09:30:49.282]   - Field: ‘owner’
[09:30:49.282]   - Field: ‘envir’
[09:30:49.282]   - Field: ‘workers’
[09:30:49.282]   - Field: ‘packages’
[09:30:49.283]   - Field: ‘gc’
[09:30:49.283]   - Field: ‘conditions’
[09:30:49.283]   - Field: ‘persistent’
[09:30:49.283]   - Field: ‘expr’
[09:30:49.283]   - Field: ‘uuid’
[09:30:49.283]   - Field: ‘seed’
[09:30:49.283]   - Field: ‘version’
[09:30:49.283]   - Field: ‘result’
[09:30:49.284]   - Field: ‘asynchronous’
[09:30:49.284]   - Field: ‘calls’
[09:30:49.284]   - Field: ‘globals’
[09:30:49.284]   - Field: ‘stdout’
[09:30:49.284]   - Field: ‘earlySignal’
[09:30:49.284]   - Field: ‘lazy’
[09:30:49.284]   - Field: ‘state’
[09:30:49.284] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:49.285] - Launch lazy future ...
[09:30:49.285] Packages needed by the future expression (n = 0): <none>
[09:30:49.285] Packages needed by future strategies (n = 0): <none>
[09:30:49.286] {
[09:30:49.286]     {
[09:30:49.286]         {
[09:30:49.286]             ...future.startTime <- base::Sys.time()
[09:30:49.286]             {
[09:30:49.286]                 {
[09:30:49.286]                   {
[09:30:49.286]                     {
[09:30:49.286]                       base::local({
[09:30:49.286]                         has_future <- base::requireNamespace("future", 
[09:30:49.286]                           quietly = TRUE)
[09:30:49.286]                         if (has_future) {
[09:30:49.286]                           ns <- base::getNamespace("future")
[09:30:49.286]                           version <- ns[[".package"]][["version"]]
[09:30:49.286]                           if (is.null(version)) 
[09:30:49.286]                             version <- utils::packageVersion("future")
[09:30:49.286]                         }
[09:30:49.286]                         else {
[09:30:49.286]                           version <- NULL
[09:30:49.286]                         }
[09:30:49.286]                         if (!has_future || version < "1.8.0") {
[09:30:49.286]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:49.286]                             "", base::R.version$version.string), 
[09:30:49.286]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:49.286]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:49.286]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:49.286]                               "release", "version")], collapse = " "), 
[09:30:49.286]                             hostname = base::Sys.info()[["nodename"]])
[09:30:49.286]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:49.286]                             info)
[09:30:49.286]                           info <- base::paste(info, collapse = "; ")
[09:30:49.286]                           if (!has_future) {
[09:30:49.286]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:49.286]                               info)
[09:30:49.286]                           }
[09:30:49.286]                           else {
[09:30:49.286]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:49.286]                               info, version)
[09:30:49.286]                           }
[09:30:49.286]                           base::stop(msg)
[09:30:49.286]                         }
[09:30:49.286]                       })
[09:30:49.286]                     }
[09:30:49.286]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:49.286]                     base::options(mc.cores = 1L)
[09:30:49.286]                   }
[09:30:49.286]                   ...future.strategy.old <- future::plan("list")
[09:30:49.286]                   options(future.plan = NULL)
[09:30:49.286]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.286]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:49.286]                 }
[09:30:49.286]                 ...future.workdir <- getwd()
[09:30:49.286]             }
[09:30:49.286]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:49.286]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:49.286]         }
[09:30:49.286]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:49.286]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:49.286]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:49.286]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:49.286]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:49.286]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:49.286]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:49.286]             base::names(...future.oldOptions))
[09:30:49.286]     }
[09:30:49.286]     if (FALSE) {
[09:30:49.286]     }
[09:30:49.286]     else {
[09:30:49.286]         if (TRUE) {
[09:30:49.286]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:49.286]                 open = "w")
[09:30:49.286]         }
[09:30:49.286]         else {
[09:30:49.286]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:49.286]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:49.286]         }
[09:30:49.286]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:49.286]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:49.286]             base::sink(type = "output", split = FALSE)
[09:30:49.286]             base::close(...future.stdout)
[09:30:49.286]         }, add = TRUE)
[09:30:49.286]     }
[09:30:49.286]     ...future.frame <- base::sys.nframe()
[09:30:49.286]     ...future.conditions <- base::list()
[09:30:49.286]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:49.286]     if (FALSE) {
[09:30:49.286]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:49.286]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:49.286]     }
[09:30:49.286]     ...future.result <- base::tryCatch({
[09:30:49.286]         base::withCallingHandlers({
[09:30:49.286]             ...future.value <- base::withVisible(base::local({
[09:30:49.286]                 ...future.makeSendCondition <- base::local({
[09:30:49.286]                   sendCondition <- NULL
[09:30:49.286]                   function(frame = 1L) {
[09:30:49.286]                     if (is.function(sendCondition)) 
[09:30:49.286]                       return(sendCondition)
[09:30:49.286]                     ns <- getNamespace("parallel")
[09:30:49.286]                     if (exists("sendData", mode = "function", 
[09:30:49.286]                       envir = ns)) {
[09:30:49.286]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:49.286]                         envir = ns)
[09:30:49.286]                       envir <- sys.frame(frame)
[09:30:49.286]                       master <- NULL
[09:30:49.286]                       while (!identical(envir, .GlobalEnv) && 
[09:30:49.286]                         !identical(envir, emptyenv())) {
[09:30:49.286]                         if (exists("master", mode = "list", envir = envir, 
[09:30:49.286]                           inherits = FALSE)) {
[09:30:49.286]                           master <- get("master", mode = "list", 
[09:30:49.286]                             envir = envir, inherits = FALSE)
[09:30:49.286]                           if (inherits(master, c("SOCKnode", 
[09:30:49.286]                             "SOCK0node"))) {
[09:30:49.286]                             sendCondition <<- function(cond) {
[09:30:49.286]                               data <- list(type = "VALUE", value = cond, 
[09:30:49.286]                                 success = TRUE)
[09:30:49.286]                               parallel_sendData(master, data)
[09:30:49.286]                             }
[09:30:49.286]                             return(sendCondition)
[09:30:49.286]                           }
[09:30:49.286]                         }
[09:30:49.286]                         frame <- frame + 1L
[09:30:49.286]                         envir <- sys.frame(frame)
[09:30:49.286]                       }
[09:30:49.286]                     }
[09:30:49.286]                     sendCondition <<- function(cond) NULL
[09:30:49.286]                   }
[09:30:49.286]                 })
[09:30:49.286]                 withCallingHandlers({
[09:30:49.286]                   {
[09:30:49.286]                     do.call(function(...) {
[09:30:49.286]                       fcn <- function() sum(...)
[09:30:49.286]                       fcn()
[09:30:49.286]                     }, args = future.call.arguments)
[09:30:49.286]                   }
[09:30:49.286]                 }, immediateCondition = function(cond) {
[09:30:49.286]                   sendCondition <- ...future.makeSendCondition()
[09:30:49.286]                   sendCondition(cond)
[09:30:49.286]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.286]                   {
[09:30:49.286]                     inherits <- base::inherits
[09:30:49.286]                     invokeRestart <- base::invokeRestart
[09:30:49.286]                     is.null <- base::is.null
[09:30:49.286]                     muffled <- FALSE
[09:30:49.286]                     if (inherits(cond, "message")) {
[09:30:49.286]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:49.286]                       if (muffled) 
[09:30:49.286]                         invokeRestart("muffleMessage")
[09:30:49.286]                     }
[09:30:49.286]                     else if (inherits(cond, "warning")) {
[09:30:49.286]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:49.286]                       if (muffled) 
[09:30:49.286]                         invokeRestart("muffleWarning")
[09:30:49.286]                     }
[09:30:49.286]                     else if (inherits(cond, "condition")) {
[09:30:49.286]                       if (!is.null(pattern)) {
[09:30:49.286]                         computeRestarts <- base::computeRestarts
[09:30:49.286]                         grepl <- base::grepl
[09:30:49.286]                         restarts <- computeRestarts(cond)
[09:30:49.286]                         for (restart in restarts) {
[09:30:49.286]                           name <- restart$name
[09:30:49.286]                           if (is.null(name)) 
[09:30:49.286]                             next
[09:30:49.286]                           if (!grepl(pattern, name)) 
[09:30:49.286]                             next
[09:30:49.286]                           invokeRestart(restart)
[09:30:49.286]                           muffled <- TRUE
[09:30:49.286]                           break
[09:30:49.286]                         }
[09:30:49.286]                       }
[09:30:49.286]                     }
[09:30:49.286]                     invisible(muffled)
[09:30:49.286]                   }
[09:30:49.286]                   muffleCondition(cond)
[09:30:49.286]                 })
[09:30:49.286]             }))
[09:30:49.286]             future::FutureResult(value = ...future.value$value, 
[09:30:49.286]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.286]                   ...future.rng), globalenv = if (FALSE) 
[09:30:49.286]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:49.286]                     ...future.globalenv.names))
[09:30:49.286]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:49.286]         }, condition = base::local({
[09:30:49.286]             c <- base::c
[09:30:49.286]             inherits <- base::inherits
[09:30:49.286]             invokeRestart <- base::invokeRestart
[09:30:49.286]             length <- base::length
[09:30:49.286]             list <- base::list
[09:30:49.286]             seq.int <- base::seq.int
[09:30:49.286]             signalCondition <- base::signalCondition
[09:30:49.286]             sys.calls <- base::sys.calls
[09:30:49.286]             `[[` <- base::`[[`
[09:30:49.286]             `+` <- base::`+`
[09:30:49.286]             `<<-` <- base::`<<-`
[09:30:49.286]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:49.286]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:49.286]                   3L)]
[09:30:49.286]             }
[09:30:49.286]             function(cond) {
[09:30:49.286]                 is_error <- inherits(cond, "error")
[09:30:49.286]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:49.286]                   NULL)
[09:30:49.286]                 if (is_error) {
[09:30:49.286]                   sessionInformation <- function() {
[09:30:49.286]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:49.286]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:49.286]                       search = base::search(), system = base::Sys.info())
[09:30:49.286]                   }
[09:30:49.286]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.286]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:49.286]                     cond$call), session = sessionInformation(), 
[09:30:49.286]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:49.286]                   signalCondition(cond)
[09:30:49.286]                 }
[09:30:49.286]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:49.286]                 "immediateCondition"))) {
[09:30:49.286]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:49.286]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.286]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:49.286]                   if (TRUE && !signal) {
[09:30:49.286]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.286]                     {
[09:30:49.286]                       inherits <- base::inherits
[09:30:49.286]                       invokeRestart <- base::invokeRestart
[09:30:49.286]                       is.null <- base::is.null
[09:30:49.286]                       muffled <- FALSE
[09:30:49.286]                       if (inherits(cond, "message")) {
[09:30:49.286]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.286]                         if (muffled) 
[09:30:49.286]                           invokeRestart("muffleMessage")
[09:30:49.286]                       }
[09:30:49.286]                       else if (inherits(cond, "warning")) {
[09:30:49.286]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.286]                         if (muffled) 
[09:30:49.286]                           invokeRestart("muffleWarning")
[09:30:49.286]                       }
[09:30:49.286]                       else if (inherits(cond, "condition")) {
[09:30:49.286]                         if (!is.null(pattern)) {
[09:30:49.286]                           computeRestarts <- base::computeRestarts
[09:30:49.286]                           grepl <- base::grepl
[09:30:49.286]                           restarts <- computeRestarts(cond)
[09:30:49.286]                           for (restart in restarts) {
[09:30:49.286]                             name <- restart$name
[09:30:49.286]                             if (is.null(name)) 
[09:30:49.286]                               next
[09:30:49.286]                             if (!grepl(pattern, name)) 
[09:30:49.286]                               next
[09:30:49.286]                             invokeRestart(restart)
[09:30:49.286]                             muffled <- TRUE
[09:30:49.286]                             break
[09:30:49.286]                           }
[09:30:49.286]                         }
[09:30:49.286]                       }
[09:30:49.286]                       invisible(muffled)
[09:30:49.286]                     }
[09:30:49.286]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.286]                   }
[09:30:49.286]                 }
[09:30:49.286]                 else {
[09:30:49.286]                   if (TRUE) {
[09:30:49.286]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.286]                     {
[09:30:49.286]                       inherits <- base::inherits
[09:30:49.286]                       invokeRestart <- base::invokeRestart
[09:30:49.286]                       is.null <- base::is.null
[09:30:49.286]                       muffled <- FALSE
[09:30:49.286]                       if (inherits(cond, "message")) {
[09:30:49.286]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.286]                         if (muffled) 
[09:30:49.286]                           invokeRestart("muffleMessage")
[09:30:49.286]                       }
[09:30:49.286]                       else if (inherits(cond, "warning")) {
[09:30:49.286]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.286]                         if (muffled) 
[09:30:49.286]                           invokeRestart("muffleWarning")
[09:30:49.286]                       }
[09:30:49.286]                       else if (inherits(cond, "condition")) {
[09:30:49.286]                         if (!is.null(pattern)) {
[09:30:49.286]                           computeRestarts <- base::computeRestarts
[09:30:49.286]                           grepl <- base::grepl
[09:30:49.286]                           restarts <- computeRestarts(cond)
[09:30:49.286]                           for (restart in restarts) {
[09:30:49.286]                             name <- restart$name
[09:30:49.286]                             if (is.null(name)) 
[09:30:49.286]                               next
[09:30:49.286]                             if (!grepl(pattern, name)) 
[09:30:49.286]                               next
[09:30:49.286]                             invokeRestart(restart)
[09:30:49.286]                             muffled <- TRUE
[09:30:49.286]                             break
[09:30:49.286]                           }
[09:30:49.286]                         }
[09:30:49.286]                       }
[09:30:49.286]                       invisible(muffled)
[09:30:49.286]                     }
[09:30:49.286]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.286]                   }
[09:30:49.286]                 }
[09:30:49.286]             }
[09:30:49.286]         }))
[09:30:49.286]     }, error = function(ex) {
[09:30:49.286]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:49.286]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.286]                 ...future.rng), started = ...future.startTime, 
[09:30:49.286]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:49.286]             version = "1.8"), class = "FutureResult")
[09:30:49.286]     }, finally = {
[09:30:49.286]         if (!identical(...future.workdir, getwd())) 
[09:30:49.286]             setwd(...future.workdir)
[09:30:49.286]         {
[09:30:49.286]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:49.286]                 ...future.oldOptions$nwarnings <- NULL
[09:30:49.286]             }
[09:30:49.286]             base::options(...future.oldOptions)
[09:30:49.286]             if (.Platform$OS.type == "windows") {
[09:30:49.286]                 old_names <- names(...future.oldEnvVars)
[09:30:49.286]                 envs <- base::Sys.getenv()
[09:30:49.286]                 names <- names(envs)
[09:30:49.286]                 common <- intersect(names, old_names)
[09:30:49.286]                 added <- setdiff(names, old_names)
[09:30:49.286]                 removed <- setdiff(old_names, names)
[09:30:49.286]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:49.286]                   envs[common]]
[09:30:49.286]                 NAMES <- toupper(changed)
[09:30:49.286]                 args <- list()
[09:30:49.286]                 for (kk in seq_along(NAMES)) {
[09:30:49.286]                   name <- changed[[kk]]
[09:30:49.286]                   NAME <- NAMES[[kk]]
[09:30:49.286]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.286]                     next
[09:30:49.286]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.286]                 }
[09:30:49.286]                 NAMES <- toupper(added)
[09:30:49.286]                 for (kk in seq_along(NAMES)) {
[09:30:49.286]                   name <- added[[kk]]
[09:30:49.286]                   NAME <- NAMES[[kk]]
[09:30:49.286]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.286]                     next
[09:30:49.286]                   args[[name]] <- ""
[09:30:49.286]                 }
[09:30:49.286]                 NAMES <- toupper(removed)
[09:30:49.286]                 for (kk in seq_along(NAMES)) {
[09:30:49.286]                   name <- removed[[kk]]
[09:30:49.286]                   NAME <- NAMES[[kk]]
[09:30:49.286]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.286]                     next
[09:30:49.286]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.286]                 }
[09:30:49.286]                 if (length(args) > 0) 
[09:30:49.286]                   base::do.call(base::Sys.setenv, args = args)
[09:30:49.286]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:49.286]             }
[09:30:49.286]             else {
[09:30:49.286]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:49.286]             }
[09:30:49.286]             {
[09:30:49.286]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:49.286]                   0L) {
[09:30:49.286]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:49.286]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:49.286]                   base::options(opts)
[09:30:49.286]                 }
[09:30:49.286]                 {
[09:30:49.286]                   {
[09:30:49.286]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:49.286]                     NULL
[09:30:49.286]                   }
[09:30:49.286]                   options(future.plan = NULL)
[09:30:49.286]                   if (is.na(NA_character_)) 
[09:30:49.286]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.286]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:49.286]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:49.286]                     .init = FALSE)
[09:30:49.286]                 }
[09:30:49.286]             }
[09:30:49.286]         }
[09:30:49.286]     })
[09:30:49.286]     if (TRUE) {
[09:30:49.286]         base::sink(type = "output", split = FALSE)
[09:30:49.286]         if (TRUE) {
[09:30:49.286]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:49.286]         }
[09:30:49.286]         else {
[09:30:49.286]             ...future.result["stdout"] <- base::list(NULL)
[09:30:49.286]         }
[09:30:49.286]         base::close(...future.stdout)
[09:30:49.286]         ...future.stdout <- NULL
[09:30:49.286]     }
[09:30:49.286]     ...future.result$conditions <- ...future.conditions
[09:30:49.286]     ...future.result$finished <- base::Sys.time()
[09:30:49.286]     ...future.result
[09:30:49.286] }
[09:30:49.289] Exporting 1 global objects (112 bytes) to cluster node #1 ...
[09:30:49.289] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ...
[09:30:49.289] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ... DONE
[09:30:49.289] Exporting 1 global objects (112 bytes) to cluster node #1 ... DONE
[09:30:49.290] MultisessionFuture started
[09:30:49.290] - Launch lazy future ... done
[09:30:49.290] run() for ‘MultisessionFuture’ ... done
[09:30:49.290] result() for ClusterFuture ...
[09:30:49.290] receiveMessageFromWorker() for ClusterFuture ...
[09:30:49.290] - Validating connection of MultisessionFuture
[09:30:49.291] - received message: FutureResult
[09:30:49.291] - Received FutureResult
[09:30:49.291] - Erased future from FutureRegistry
[09:30:49.292] result() for ClusterFuture ...
[09:30:49.292] - result already collected: FutureResult
[09:30:49.292] result() for ClusterFuture ... done
[09:30:49.292] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:49.292] result() for ClusterFuture ... done
[09:30:49.292] result() for ClusterFuture ...
[09:30:49.292] - result already collected: FutureResult
[09:30:49.292] result() for ClusterFuture ... done
[1] 6
** Sum function 'F' with plan('multisession') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x559327be1d68>
Using '...' in a formula
[09:30:49.293] getGlobalsAndPackages() ...
[09:30:49.293] Searching for globals...
[09:30:49.295] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[09:30:49.295] Searching for globals ... DONE
[09:30:49.295] Resolving globals: FALSE
[09:30:49.295] Tweak future expression to call with '...' arguments ...
[09:30:49.296] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[09:30:49.296] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[09:30:49.296] - globals: [3] ‘fcn’, ‘x’, ‘y’
[09:30:49.296] 
[09:30:49.297] getGlobalsAndPackages() ... DONE
[09:30:49.297] run() for ‘Future’ ...
[09:30:49.297] - state: ‘created’
[09:30:49.297] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:30:49.310] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:30:49.310] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:30:49.310]   - Field: ‘node’
[09:30:49.310]   - Field: ‘label’
[09:30:49.311]   - Field: ‘local’
[09:30:49.311]   - Field: ‘owner’
[09:30:49.311]   - Field: ‘envir’
[09:30:49.311]   - Field: ‘workers’
[09:30:49.311]   - Field: ‘packages’
[09:30:49.311]   - Field: ‘gc’
[09:30:49.311]   - Field: ‘conditions’
[09:30:49.311]   - Field: ‘persistent’
[09:30:49.311]   - Field: ‘expr’
[09:30:49.311]   - Field: ‘uuid’
[09:30:49.311]   - Field: ‘seed’
[09:30:49.311]   - Field: ‘version’
[09:30:49.312]   - Field: ‘result’
[09:30:49.312]   - Field: ‘asynchronous’
[09:30:49.312]   - Field: ‘calls’
[09:30:49.312]   - Field: ‘globals’
[09:30:49.312]   - Field: ‘stdout’
[09:30:49.312]   - Field: ‘earlySignal’
[09:30:49.312]   - Field: ‘lazy’
[09:30:49.312]   - Field: ‘state’
[09:30:49.312] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:30:49.312] - Launch lazy future ...
[09:30:49.313] Packages needed by the future expression (n = 0): <none>
[09:30:49.313] Packages needed by future strategies (n = 0): <none>
[09:30:49.313] {
[09:30:49.313]     {
[09:30:49.313]         {
[09:30:49.313]             ...future.startTime <- base::Sys.time()
[09:30:49.313]             {
[09:30:49.313]                 {
[09:30:49.313]                   {
[09:30:49.313]                     {
[09:30:49.313]                       base::local({
[09:30:49.313]                         has_future <- base::requireNamespace("future", 
[09:30:49.313]                           quietly = TRUE)
[09:30:49.313]                         if (has_future) {
[09:30:49.313]                           ns <- base::getNamespace("future")
[09:30:49.313]                           version <- ns[[".package"]][["version"]]
[09:30:49.313]                           if (is.null(version)) 
[09:30:49.313]                             version <- utils::packageVersion("future")
[09:30:49.313]                         }
[09:30:49.313]                         else {
[09:30:49.313]                           version <- NULL
[09:30:49.313]                         }
[09:30:49.313]                         if (!has_future || version < "1.8.0") {
[09:30:49.313]                           info <- base::c(r_version = base::gsub("R version ", 
[09:30:49.313]                             "", base::R.version$version.string), 
[09:30:49.313]                             platform = base::sprintf("%s (%s-bit)", 
[09:30:49.313]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:30:49.313]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:30:49.313]                               "release", "version")], collapse = " "), 
[09:30:49.313]                             hostname = base::Sys.info()[["nodename"]])
[09:30:49.313]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:30:49.313]                             info)
[09:30:49.313]                           info <- base::paste(info, collapse = "; ")
[09:30:49.313]                           if (!has_future) {
[09:30:49.313]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:30:49.313]                               info)
[09:30:49.313]                           }
[09:30:49.313]                           else {
[09:30:49.313]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:30:49.313]                               info, version)
[09:30:49.313]                           }
[09:30:49.313]                           base::stop(msg)
[09:30:49.313]                         }
[09:30:49.313]                       })
[09:30:49.313]                     }
[09:30:49.313]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:30:49.313]                     base::options(mc.cores = 1L)
[09:30:49.313]                   }
[09:30:49.313]                   ...future.strategy.old <- future::plan("list")
[09:30:49.313]                   options(future.plan = NULL)
[09:30:49.313]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.313]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:30:49.313]                 }
[09:30:49.313]                 ...future.workdir <- getwd()
[09:30:49.313]             }
[09:30:49.313]             ...future.oldOptions <- base::as.list(base::.Options)
[09:30:49.313]             ...future.oldEnvVars <- base::Sys.getenv()
[09:30:49.313]         }
[09:30:49.313]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:30:49.313]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:30:49.313]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:30:49.313]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:30:49.313]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:30:49.313]             future.stdout.windows.reencode = NULL, width = 80L)
[09:30:49.313]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:30:49.313]             base::names(...future.oldOptions))
[09:30:49.313]     }
[09:30:49.313]     if (FALSE) {
[09:30:49.313]     }
[09:30:49.313]     else {
[09:30:49.313]         if (TRUE) {
[09:30:49.313]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:30:49.313]                 open = "w")
[09:30:49.313]         }
[09:30:49.313]         else {
[09:30:49.313]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:30:49.313]                 windows = "NUL", "/dev/null"), open = "w")
[09:30:49.313]         }
[09:30:49.313]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:30:49.313]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:30:49.313]             base::sink(type = "output", split = FALSE)
[09:30:49.313]             base::close(...future.stdout)
[09:30:49.313]         }, add = TRUE)
[09:30:49.313]     }
[09:30:49.313]     ...future.frame <- base::sys.nframe()
[09:30:49.313]     ...future.conditions <- base::list()
[09:30:49.313]     ...future.rng <- base::globalenv()$.Random.seed
[09:30:49.313]     if (FALSE) {
[09:30:49.313]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:30:49.313]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:30:49.313]     }
[09:30:49.313]     ...future.result <- base::tryCatch({
[09:30:49.313]         base::withCallingHandlers({
[09:30:49.313]             ...future.value <- base::withVisible(base::local({
[09:30:49.313]                 ...future.makeSendCondition <- base::local({
[09:30:49.313]                   sendCondition <- NULL
[09:30:49.313]                   function(frame = 1L) {
[09:30:49.313]                     if (is.function(sendCondition)) 
[09:30:49.313]                       return(sendCondition)
[09:30:49.313]                     ns <- getNamespace("parallel")
[09:30:49.313]                     if (exists("sendData", mode = "function", 
[09:30:49.313]                       envir = ns)) {
[09:30:49.313]                       parallel_sendData <- get("sendData", mode = "function", 
[09:30:49.313]                         envir = ns)
[09:30:49.313]                       envir <- sys.frame(frame)
[09:30:49.313]                       master <- NULL
[09:30:49.313]                       while (!identical(envir, .GlobalEnv) && 
[09:30:49.313]                         !identical(envir, emptyenv())) {
[09:30:49.313]                         if (exists("master", mode = "list", envir = envir, 
[09:30:49.313]                           inherits = FALSE)) {
[09:30:49.313]                           master <- get("master", mode = "list", 
[09:30:49.313]                             envir = envir, inherits = FALSE)
[09:30:49.313]                           if (inherits(master, c("SOCKnode", 
[09:30:49.313]                             "SOCK0node"))) {
[09:30:49.313]                             sendCondition <<- function(cond) {
[09:30:49.313]                               data <- list(type = "VALUE", value = cond, 
[09:30:49.313]                                 success = TRUE)
[09:30:49.313]                               parallel_sendData(master, data)
[09:30:49.313]                             }
[09:30:49.313]                             return(sendCondition)
[09:30:49.313]                           }
[09:30:49.313]                         }
[09:30:49.313]                         frame <- frame + 1L
[09:30:49.313]                         envir <- sys.frame(frame)
[09:30:49.313]                       }
[09:30:49.313]                     }
[09:30:49.313]                     sendCondition <<- function(cond) NULL
[09:30:49.313]                   }
[09:30:49.313]                 })
[09:30:49.313]                 withCallingHandlers({
[09:30:49.313]                   fcn(x, y)
[09:30:49.313]                 }, immediateCondition = function(cond) {
[09:30:49.313]                   sendCondition <- ...future.makeSendCondition()
[09:30:49.313]                   sendCondition(cond)
[09:30:49.313]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.313]                   {
[09:30:49.313]                     inherits <- base::inherits
[09:30:49.313]                     invokeRestart <- base::invokeRestart
[09:30:49.313]                     is.null <- base::is.null
[09:30:49.313]                     muffled <- FALSE
[09:30:49.313]                     if (inherits(cond, "message")) {
[09:30:49.313]                       muffled <- grepl(pattern, "muffleMessage")
[09:30:49.313]                       if (muffled) 
[09:30:49.313]                         invokeRestart("muffleMessage")
[09:30:49.313]                     }
[09:30:49.313]                     else if (inherits(cond, "warning")) {
[09:30:49.313]                       muffled <- grepl(pattern, "muffleWarning")
[09:30:49.313]                       if (muffled) 
[09:30:49.313]                         invokeRestart("muffleWarning")
[09:30:49.313]                     }
[09:30:49.313]                     else if (inherits(cond, "condition")) {
[09:30:49.313]                       if (!is.null(pattern)) {
[09:30:49.313]                         computeRestarts <- base::computeRestarts
[09:30:49.313]                         grepl <- base::grepl
[09:30:49.313]                         restarts <- computeRestarts(cond)
[09:30:49.313]                         for (restart in restarts) {
[09:30:49.313]                           name <- restart$name
[09:30:49.313]                           if (is.null(name)) 
[09:30:49.313]                             next
[09:30:49.313]                           if (!grepl(pattern, name)) 
[09:30:49.313]                             next
[09:30:49.313]                           invokeRestart(restart)
[09:30:49.313]                           muffled <- TRUE
[09:30:49.313]                           break
[09:30:49.313]                         }
[09:30:49.313]                       }
[09:30:49.313]                     }
[09:30:49.313]                     invisible(muffled)
[09:30:49.313]                   }
[09:30:49.313]                   muffleCondition(cond)
[09:30:49.313]                 })
[09:30:49.313]             }))
[09:30:49.313]             future::FutureResult(value = ...future.value$value, 
[09:30:49.313]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.313]                   ...future.rng), globalenv = if (FALSE) 
[09:30:49.313]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:30:49.313]                     ...future.globalenv.names))
[09:30:49.313]                 else NULL, started = ...future.startTime, version = "1.8")
[09:30:49.313]         }, condition = base::local({
[09:30:49.313]             c <- base::c
[09:30:49.313]             inherits <- base::inherits
[09:30:49.313]             invokeRestart <- base::invokeRestart
[09:30:49.313]             length <- base::length
[09:30:49.313]             list <- base::list
[09:30:49.313]             seq.int <- base::seq.int
[09:30:49.313]             signalCondition <- base::signalCondition
[09:30:49.313]             sys.calls <- base::sys.calls
[09:30:49.313]             `[[` <- base::`[[`
[09:30:49.313]             `+` <- base::`+`
[09:30:49.313]             `<<-` <- base::`<<-`
[09:30:49.313]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:30:49.313]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:30:49.313]                   3L)]
[09:30:49.313]             }
[09:30:49.313]             function(cond) {
[09:30:49.313]                 is_error <- inherits(cond, "error")
[09:30:49.313]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:30:49.313]                   NULL)
[09:30:49.313]                 if (is_error) {
[09:30:49.313]                   sessionInformation <- function() {
[09:30:49.313]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:30:49.313]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:30:49.313]                       search = base::search(), system = base::Sys.info())
[09:30:49.313]                   }
[09:30:49.313]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.313]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:30:49.313]                     cond$call), session = sessionInformation(), 
[09:30:49.313]                     timestamp = base::Sys.time(), signaled = 0L)
[09:30:49.313]                   signalCondition(cond)
[09:30:49.313]                 }
[09:30:49.313]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:30:49.313]                 "immediateCondition"))) {
[09:30:49.313]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:30:49.313]                   ...future.conditions[[length(...future.conditions) + 
[09:30:49.313]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:30:49.313]                   if (TRUE && !signal) {
[09:30:49.313]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.313]                     {
[09:30:49.313]                       inherits <- base::inherits
[09:30:49.313]                       invokeRestart <- base::invokeRestart
[09:30:49.313]                       is.null <- base::is.null
[09:30:49.313]                       muffled <- FALSE
[09:30:49.313]                       if (inherits(cond, "message")) {
[09:30:49.313]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.313]                         if (muffled) 
[09:30:49.313]                           invokeRestart("muffleMessage")
[09:30:49.313]                       }
[09:30:49.313]                       else if (inherits(cond, "warning")) {
[09:30:49.313]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.313]                         if (muffled) 
[09:30:49.313]                           invokeRestart("muffleWarning")
[09:30:49.313]                       }
[09:30:49.313]                       else if (inherits(cond, "condition")) {
[09:30:49.313]                         if (!is.null(pattern)) {
[09:30:49.313]                           computeRestarts <- base::computeRestarts
[09:30:49.313]                           grepl <- base::grepl
[09:30:49.313]                           restarts <- computeRestarts(cond)
[09:30:49.313]                           for (restart in restarts) {
[09:30:49.313]                             name <- restart$name
[09:30:49.313]                             if (is.null(name)) 
[09:30:49.313]                               next
[09:30:49.313]                             if (!grepl(pattern, name)) 
[09:30:49.313]                               next
[09:30:49.313]                             invokeRestart(restart)
[09:30:49.313]                             muffled <- TRUE
[09:30:49.313]                             break
[09:30:49.313]                           }
[09:30:49.313]                         }
[09:30:49.313]                       }
[09:30:49.313]                       invisible(muffled)
[09:30:49.313]                     }
[09:30:49.313]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.313]                   }
[09:30:49.313]                 }
[09:30:49.313]                 else {
[09:30:49.313]                   if (TRUE) {
[09:30:49.313]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:30:49.313]                     {
[09:30:49.313]                       inherits <- base::inherits
[09:30:49.313]                       invokeRestart <- base::invokeRestart
[09:30:49.313]                       is.null <- base::is.null
[09:30:49.313]                       muffled <- FALSE
[09:30:49.313]                       if (inherits(cond, "message")) {
[09:30:49.313]                         muffled <- grepl(pattern, "muffleMessage")
[09:30:49.313]                         if (muffled) 
[09:30:49.313]                           invokeRestart("muffleMessage")
[09:30:49.313]                       }
[09:30:49.313]                       else if (inherits(cond, "warning")) {
[09:30:49.313]                         muffled <- grepl(pattern, "muffleWarning")
[09:30:49.313]                         if (muffled) 
[09:30:49.313]                           invokeRestart("muffleWarning")
[09:30:49.313]                       }
[09:30:49.313]                       else if (inherits(cond, "condition")) {
[09:30:49.313]                         if (!is.null(pattern)) {
[09:30:49.313]                           computeRestarts <- base::computeRestarts
[09:30:49.313]                           grepl <- base::grepl
[09:30:49.313]                           restarts <- computeRestarts(cond)
[09:30:49.313]                           for (restart in restarts) {
[09:30:49.313]                             name <- restart$name
[09:30:49.313]                             if (is.null(name)) 
[09:30:49.313]                               next
[09:30:49.313]                             if (!grepl(pattern, name)) 
[09:30:49.313]                               next
[09:30:49.313]                             invokeRestart(restart)
[09:30:49.313]                             muffled <- TRUE
[09:30:49.313]                             break
[09:30:49.313]                           }
[09:30:49.313]                         }
[09:30:49.313]                       }
[09:30:49.313]                       invisible(muffled)
[09:30:49.313]                     }
[09:30:49.313]                     muffleCondition(cond, pattern = "^muffle")
[09:30:49.313]                   }
[09:30:49.313]                 }
[09:30:49.313]             }
[09:30:49.313]         }))
[09:30:49.313]     }, error = function(ex) {
[09:30:49.313]         base::structure(base::list(value = NULL, visible = NULL, 
[09:30:49.313]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:30:49.313]                 ...future.rng), started = ...future.startTime, 
[09:30:49.313]             finished = Sys.time(), session_uuid = NA_character_, 
[09:30:49.313]             version = "1.8"), class = "FutureResult")
[09:30:49.313]     }, finally = {
[09:30:49.313]         if (!identical(...future.workdir, getwd())) 
[09:30:49.313]             setwd(...future.workdir)
[09:30:49.313]         {
[09:30:49.313]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:30:49.313]                 ...future.oldOptions$nwarnings <- NULL
[09:30:49.313]             }
[09:30:49.313]             base::options(...future.oldOptions)
[09:30:49.313]             if (.Platform$OS.type == "windows") {
[09:30:49.313]                 old_names <- names(...future.oldEnvVars)
[09:30:49.313]                 envs <- base::Sys.getenv()
[09:30:49.313]                 names <- names(envs)
[09:30:49.313]                 common <- intersect(names, old_names)
[09:30:49.313]                 added <- setdiff(names, old_names)
[09:30:49.313]                 removed <- setdiff(old_names, names)
[09:30:49.313]                 changed <- common[...future.oldEnvVars[common] != 
[09:30:49.313]                   envs[common]]
[09:30:49.313]                 NAMES <- toupper(changed)
[09:30:49.313]                 args <- list()
[09:30:49.313]                 for (kk in seq_along(NAMES)) {
[09:30:49.313]                   name <- changed[[kk]]
[09:30:49.313]                   NAME <- NAMES[[kk]]
[09:30:49.313]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.313]                     next
[09:30:49.313]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.313]                 }
[09:30:49.313]                 NAMES <- toupper(added)
[09:30:49.313]                 for (kk in seq_along(NAMES)) {
[09:30:49.313]                   name <- added[[kk]]
[09:30:49.313]                   NAME <- NAMES[[kk]]
[09:30:49.313]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.313]                     next
[09:30:49.313]                   args[[name]] <- ""
[09:30:49.313]                 }
[09:30:49.313]                 NAMES <- toupper(removed)
[09:30:49.313]                 for (kk in seq_along(NAMES)) {
[09:30:49.313]                   name <- removed[[kk]]
[09:30:49.313]                   NAME <- NAMES[[kk]]
[09:30:49.313]                   if (name != NAME && is.element(NAME, old_names)) 
[09:30:49.313]                     next
[09:30:49.313]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:30:49.313]                 }
[09:30:49.313]                 if (length(args) > 0) 
[09:30:49.313]                   base::do.call(base::Sys.setenv, args = args)
[09:30:49.313]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:30:49.313]             }
[09:30:49.313]             else {
[09:30:49.313]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:30:49.313]             }
[09:30:49.313]             {
[09:30:49.313]                 if (base::length(...future.futureOptionsAdded) > 
[09:30:49.313]                   0L) {
[09:30:49.313]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:30:49.313]                   base::names(opts) <- ...future.futureOptionsAdded
[09:30:49.313]                   base::options(opts)
[09:30:49.313]                 }
[09:30:49.313]                 {
[09:30:49.313]                   {
[09:30:49.313]                     base::options(mc.cores = ...future.mc.cores.old)
[09:30:49.313]                     NULL
[09:30:49.313]                   }
[09:30:49.313]                   options(future.plan = NULL)
[09:30:49.313]                   if (is.na(NA_character_)) 
[09:30:49.313]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:30:49.313]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:30:49.313]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:30:49.313]                     .init = FALSE)
[09:30:49.313]                 }
[09:30:49.313]             }
[09:30:49.313]         }
[09:30:49.313]     })
[09:30:49.313]     if (TRUE) {
[09:30:49.313]         base::sink(type = "output", split = FALSE)
[09:30:49.313]         if (TRUE) {
[09:30:49.313]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:30:49.313]         }
[09:30:49.313]         else {
[09:30:49.313]             ...future.result["stdout"] <- base::list(NULL)
[09:30:49.313]         }
[09:30:49.313]         base::close(...future.stdout)
[09:30:49.313]         ...future.stdout <- NULL
[09:30:49.313]     }
[09:30:49.313]     ...future.result$conditions <- ...future.conditions
[09:30:49.313]     ...future.result$finished <- base::Sys.time()
[09:30:49.313]     ...future.result
[09:30:49.313] }
[09:30:49.315] Exporting 3 global objects (4.18 KiB) to cluster node #1 ...
[09:30:49.316] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ...
[09:30:49.316] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ... DONE
[09:30:49.316] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[09:30:49.316] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[09:30:49.317] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[09:30:49.317] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[09:30:49.317] Exporting 3 global objects (4.18 KiB) to cluster node #1 ... DONE
[09:30:49.317] MultisessionFuture started
[09:30:49.317] - Launch lazy future ... done
[09:30:49.318] run() for ‘MultisessionFuture’ ... done
[09:30:49.318] result() for ClusterFuture ...
[09:30:49.318] receiveMessageFromWorker() for ClusterFuture ...
[09:30:49.318] - Validating connection of MultisessionFuture
[09:30:49.319] - received message: FutureResult
[09:30:49.319] - Received FutureResult
[09:30:49.319] - Erased future from FutureRegistry
[09:30:49.319] result() for ClusterFuture ...
[09:30:49.319] - result already collected: FutureResult
[09:30:49.319] result() for ClusterFuture ... done
[09:30:49.319] receiveMessageFromWorker() for ClusterFuture ... done
[09:30:49.319] result() for ClusterFuture ... done
[09:30:49.319] result() for ClusterFuture ...
[09:30:49.320] - result already collected: FutureResult
[09:30:49.320] result() for ClusterFuture ... done
[1] 6
Testing with 2 cores ... DONE
> 
> message("*** Global argument '...' ... DONE")
*** Global argument '...' ... DONE
> 
> source("incl/end.R")
[09:30:49.320] plan(): Setting new future strategy stack:
[09:30:49.320] List of future strategies:
[09:30:49.320] 1. FutureStrategy:
[09:30:49.320]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:30:49.320]    - tweaked: FALSE
[09:30:49.320]    - call: future::plan(oplan)
[09:30:49.321] plan(): nbrOfWorkers() = 1
> 
