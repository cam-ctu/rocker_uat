
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:39:09.498] plan(): Setting new future strategy stack:
[17:39:09.499] List of future strategies:
[17:39:09.499] 1. sequential:
[17:39:09.499]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.499]    - tweaked: FALSE
[17:39:09.499]    - call: future::plan("sequential")
[17:39:09.510] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("*** Global argument '...' ...")
+ 
+   sum_fcns <- list()
+ 
+   sum_fcns$A <- function(x, ...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, ...) }
+     y
+   }
+ 
+ 
+   sum_fcns$B <- function(x, ...) {
+     sumt <- function(x) {
+       message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+       y %<-% { sum(x, ...) }
+       y
+     }
+     sumt(x)
+   }
+ 
+   sum_fcns$C <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y) }
+     y
+   }
+ 
+   sum_fcns$D <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y, ...) }
+     y
+   }
+ 
+   ## Issue/PR #400: Emulate how '...' may be used by the 'rlang' package
+   sum_fcns$E <- function(...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+ 
+     ## Grab '...' into a Globals object
+     globals <- globals::globalsByName("...", envir=environment())
+ 
+     ## Evaluate an expression with '...' in an environment that does not
+     ## have an '...' object - hence the parent.frame().  This will produce
+     ## an error unless we pass 'globals' which contains '...'
+     f <- future({
+       fcn <- function() sum(...)
+       fcn()
+     }, envir = parent.frame(), globals = globals)
+     y <- value(f)
+     y
+   }
+ 
+   ## Issue: https://github.com/HenrikBengtsson/globals/issues/72
+   sum_fcns$F <- function(x, y) {
+     message("Using '...' in a formula")
+ 
+     fcn <- function(x, y) {
+       z = ~ list(...)
+       sum(x, y)
+     }
+     
+     f <- future(fcn(x, y))
+     y <- value(f)
+     y
+   }
+ 
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy, substitute = FALSE)
+ 
+     for (name in names(sum_fcns)) {
+       message(sprintf("** Sum function '%s' with plan('%s') ...", name, strategy))
+       sum_fcn <- sum_fcns[[name]]
+       print(sum_fcn)
+       y <- try(sum_fcn(1:2, 3))
+       print(y)
+       if (name %in% c("D")) {
+         stopifnot(inherits(y, "try-error"))
+       } else {
+         stopifnot(y == 6)
+       }
+     }
+   }
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** Global argument '...' ...
- plan('sequential') ...
[17:39:09.561] plan(): Setting new future strategy stack:
[17:39:09.561] List of future strategies:
[17:39:09.561] 1. sequential:
[17:39:09.561]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.561]    - tweaked: FALSE
[17:39:09.561]    - call: plan(strategy, substitute = FALSE)
[17:39:09.572] plan(): nbrOfWorkers() = 1
** Sum function 'A' with plan('sequential') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x5582e008c960>
Arguments '...' exists: TRUE
[17:39:09.574] getGlobalsAndPackages() ...
[17:39:09.574] Searching for globals...
[17:39:09.582] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[17:39:09.583] Searching for globals ... DONE
[17:39:09.583] Resolving globals: FALSE
[17:39:09.583] Tweak future expression to call with '...' arguments ...
[17:39:09.583] {
[17:39:09.583]     do.call(function(...) {
[17:39:09.583]         sum(x, ...)
[17:39:09.583]     }, args = future.call.arguments)
[17:39:09.583] }
[17:39:09.583] Tweak future expression to call with '...' arguments ... DONE
[17:39:09.585] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:09.585] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[17:39:09.585] - globals: [2] ‘x’, ‘future.call.arguments’
[17:39:09.585] 
[17:39:09.585] getGlobalsAndPackages() ... DONE
[17:39:09.586] run() for ‘Future’ ...
[17:39:09.586] - state: ‘created’
[17:39:09.586] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:09.587] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:09.587] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:09.587]   - Field: ‘label’
[17:39:09.587]   - Field: ‘local’
[17:39:09.587]   - Field: ‘owner’
[17:39:09.587]   - Field: ‘envir’
[17:39:09.587]   - Field: ‘packages’
[17:39:09.587]   - Field: ‘gc’
[17:39:09.587]   - Field: ‘conditions’
[17:39:09.588]   - Field: ‘expr’
[17:39:09.588]   - Field: ‘uuid’
[17:39:09.588]   - Field: ‘seed’
[17:39:09.588]   - Field: ‘version’
[17:39:09.588]   - Field: ‘result’
[17:39:09.588]   - Field: ‘asynchronous’
[17:39:09.588]   - Field: ‘calls’
[17:39:09.588]   - Field: ‘globals’
[17:39:09.588]   - Field: ‘stdout’
[17:39:09.588]   - Field: ‘earlySignal’
[17:39:09.588]   - Field: ‘lazy’
[17:39:09.589]   - Field: ‘state’
[17:39:09.589] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:09.589] - Launch lazy future ...
[17:39:09.589] Packages needed by the future expression (n = 0): <none>
[17:39:09.590] Packages needed by future strategies (n = 0): <none>
[17:39:09.590] {
[17:39:09.590]     {
[17:39:09.590]         {
[17:39:09.590]             ...future.startTime <- base::Sys.time()
[17:39:09.590]             {
[17:39:09.590]                 {
[17:39:09.590]                   {
[17:39:09.590]                     base::local({
[17:39:09.590]                       has_future <- base::requireNamespace("future", 
[17:39:09.590]                         quietly = TRUE)
[17:39:09.590]                       if (has_future) {
[17:39:09.590]                         ns <- base::getNamespace("future")
[17:39:09.590]                         version <- ns[[".package"]][["version"]]
[17:39:09.590]                         if (is.null(version)) 
[17:39:09.590]                           version <- utils::packageVersion("future")
[17:39:09.590]                       }
[17:39:09.590]                       else {
[17:39:09.590]                         version <- NULL
[17:39:09.590]                       }
[17:39:09.590]                       if (!has_future || version < "1.8.0") {
[17:39:09.590]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.590]                           "", base::R.version$version.string), 
[17:39:09.590]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:09.590]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:09.590]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.590]                             "release", "version")], collapse = " "), 
[17:39:09.590]                           hostname = base::Sys.info()[["nodename"]])
[17:39:09.590]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.590]                           info)
[17:39:09.590]                         info <- base::paste(info, collapse = "; ")
[17:39:09.590]                         if (!has_future) {
[17:39:09.590]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.590]                             info)
[17:39:09.590]                         }
[17:39:09.590]                         else {
[17:39:09.590]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.590]                             info, version)
[17:39:09.590]                         }
[17:39:09.590]                         base::stop(msg)
[17:39:09.590]                       }
[17:39:09.590]                     })
[17:39:09.590]                   }
[17:39:09.590]                   ...future.strategy.old <- future::plan("list")
[17:39:09.590]                   options(future.plan = NULL)
[17:39:09.590]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.590]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.590]                 }
[17:39:09.590]                 ...future.workdir <- getwd()
[17:39:09.590]             }
[17:39:09.590]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.590]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.590]         }
[17:39:09.590]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.590]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.590]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.590]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.590]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.590]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.590]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.590]             base::names(...future.oldOptions))
[17:39:09.590]     }
[17:39:09.590]     if (FALSE) {
[17:39:09.590]     }
[17:39:09.590]     else {
[17:39:09.590]         if (TRUE) {
[17:39:09.590]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.590]                 open = "w")
[17:39:09.590]         }
[17:39:09.590]         else {
[17:39:09.590]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.590]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.590]         }
[17:39:09.590]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.590]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.590]             base::sink(type = "output", split = FALSE)
[17:39:09.590]             base::close(...future.stdout)
[17:39:09.590]         }, add = TRUE)
[17:39:09.590]     }
[17:39:09.590]     ...future.frame <- base::sys.nframe()
[17:39:09.590]     ...future.conditions <- base::list()
[17:39:09.590]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.590]     if (FALSE) {
[17:39:09.590]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.590]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.590]     }
[17:39:09.590]     ...future.result <- base::tryCatch({
[17:39:09.590]         base::withCallingHandlers({
[17:39:09.590]             ...future.value <- base::withVisible(base::local({
[17:39:09.590]                 do.call(function(...) {
[17:39:09.590]                   sum(x, ...)
[17:39:09.590]                 }, args = future.call.arguments)
[17:39:09.590]             }))
[17:39:09.590]             future::FutureResult(value = ...future.value$value, 
[17:39:09.590]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.590]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.590]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.590]                     ...future.globalenv.names))
[17:39:09.590]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.590]         }, condition = base::local({
[17:39:09.590]             c <- base::c
[17:39:09.590]             inherits <- base::inherits
[17:39:09.590]             invokeRestart <- base::invokeRestart
[17:39:09.590]             length <- base::length
[17:39:09.590]             list <- base::list
[17:39:09.590]             seq.int <- base::seq.int
[17:39:09.590]             signalCondition <- base::signalCondition
[17:39:09.590]             sys.calls <- base::sys.calls
[17:39:09.590]             `[[` <- base::`[[`
[17:39:09.590]             `+` <- base::`+`
[17:39:09.590]             `<<-` <- base::`<<-`
[17:39:09.590]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.590]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.590]                   3L)]
[17:39:09.590]             }
[17:39:09.590]             function(cond) {
[17:39:09.590]                 is_error <- inherits(cond, "error")
[17:39:09.590]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.590]                   NULL)
[17:39:09.590]                 if (is_error) {
[17:39:09.590]                   sessionInformation <- function() {
[17:39:09.590]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.590]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.590]                       search = base::search(), system = base::Sys.info())
[17:39:09.590]                   }
[17:39:09.590]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.590]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.590]                     cond$call), session = sessionInformation(), 
[17:39:09.590]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.590]                   signalCondition(cond)
[17:39:09.590]                 }
[17:39:09.590]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.590]                 "immediateCondition"))) {
[17:39:09.590]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.590]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.590]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.590]                   if (TRUE && !signal) {
[17:39:09.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.590]                     {
[17:39:09.590]                       inherits <- base::inherits
[17:39:09.590]                       invokeRestart <- base::invokeRestart
[17:39:09.590]                       is.null <- base::is.null
[17:39:09.590]                       muffled <- FALSE
[17:39:09.590]                       if (inherits(cond, "message")) {
[17:39:09.590]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.590]                         if (muffled) 
[17:39:09.590]                           invokeRestart("muffleMessage")
[17:39:09.590]                       }
[17:39:09.590]                       else if (inherits(cond, "warning")) {
[17:39:09.590]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.590]                         if (muffled) 
[17:39:09.590]                           invokeRestart("muffleWarning")
[17:39:09.590]                       }
[17:39:09.590]                       else if (inherits(cond, "condition")) {
[17:39:09.590]                         if (!is.null(pattern)) {
[17:39:09.590]                           computeRestarts <- base::computeRestarts
[17:39:09.590]                           grepl <- base::grepl
[17:39:09.590]                           restarts <- computeRestarts(cond)
[17:39:09.590]                           for (restart in restarts) {
[17:39:09.590]                             name <- restart$name
[17:39:09.590]                             if (is.null(name)) 
[17:39:09.590]                               next
[17:39:09.590]                             if (!grepl(pattern, name)) 
[17:39:09.590]                               next
[17:39:09.590]                             invokeRestart(restart)
[17:39:09.590]                             muffled <- TRUE
[17:39:09.590]                             break
[17:39:09.590]                           }
[17:39:09.590]                         }
[17:39:09.590]                       }
[17:39:09.590]                       invisible(muffled)
[17:39:09.590]                     }
[17:39:09.590]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.590]                   }
[17:39:09.590]                 }
[17:39:09.590]                 else {
[17:39:09.590]                   if (TRUE) {
[17:39:09.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.590]                     {
[17:39:09.590]                       inherits <- base::inherits
[17:39:09.590]                       invokeRestart <- base::invokeRestart
[17:39:09.590]                       is.null <- base::is.null
[17:39:09.590]                       muffled <- FALSE
[17:39:09.590]                       if (inherits(cond, "message")) {
[17:39:09.590]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.590]                         if (muffled) 
[17:39:09.590]                           invokeRestart("muffleMessage")
[17:39:09.590]                       }
[17:39:09.590]                       else if (inherits(cond, "warning")) {
[17:39:09.590]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.590]                         if (muffled) 
[17:39:09.590]                           invokeRestart("muffleWarning")
[17:39:09.590]                       }
[17:39:09.590]                       else if (inherits(cond, "condition")) {
[17:39:09.590]                         if (!is.null(pattern)) {
[17:39:09.590]                           computeRestarts <- base::computeRestarts
[17:39:09.590]                           grepl <- base::grepl
[17:39:09.590]                           restarts <- computeRestarts(cond)
[17:39:09.590]                           for (restart in restarts) {
[17:39:09.590]                             name <- restart$name
[17:39:09.590]                             if (is.null(name)) 
[17:39:09.590]                               next
[17:39:09.590]                             if (!grepl(pattern, name)) 
[17:39:09.590]                               next
[17:39:09.590]                             invokeRestart(restart)
[17:39:09.590]                             muffled <- TRUE
[17:39:09.590]                             break
[17:39:09.590]                           }
[17:39:09.590]                         }
[17:39:09.590]                       }
[17:39:09.590]                       invisible(muffled)
[17:39:09.590]                     }
[17:39:09.590]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.590]                   }
[17:39:09.590]                 }
[17:39:09.590]             }
[17:39:09.590]         }))
[17:39:09.590]     }, error = function(ex) {
[17:39:09.590]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.590]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.590]                 ...future.rng), started = ...future.startTime, 
[17:39:09.590]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.590]             version = "1.8"), class = "FutureResult")
[17:39:09.590]     }, finally = {
[17:39:09.590]         if (!identical(...future.workdir, getwd())) 
[17:39:09.590]             setwd(...future.workdir)
[17:39:09.590]         {
[17:39:09.590]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.590]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.590]             }
[17:39:09.590]             base::options(...future.oldOptions)
[17:39:09.590]             if (.Platform$OS.type == "windows") {
[17:39:09.590]                 old_names <- names(...future.oldEnvVars)
[17:39:09.590]                 envs <- base::Sys.getenv()
[17:39:09.590]                 names <- names(envs)
[17:39:09.590]                 common <- intersect(names, old_names)
[17:39:09.590]                 added <- setdiff(names, old_names)
[17:39:09.590]                 removed <- setdiff(old_names, names)
[17:39:09.590]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.590]                   envs[common]]
[17:39:09.590]                 NAMES <- toupper(changed)
[17:39:09.590]                 args <- list()
[17:39:09.590]                 for (kk in seq_along(NAMES)) {
[17:39:09.590]                   name <- changed[[kk]]
[17:39:09.590]                   NAME <- NAMES[[kk]]
[17:39:09.590]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.590]                     next
[17:39:09.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.590]                 }
[17:39:09.590]                 NAMES <- toupper(added)
[17:39:09.590]                 for (kk in seq_along(NAMES)) {
[17:39:09.590]                   name <- added[[kk]]
[17:39:09.590]                   NAME <- NAMES[[kk]]
[17:39:09.590]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.590]                     next
[17:39:09.590]                   args[[name]] <- ""
[17:39:09.590]                 }
[17:39:09.590]                 NAMES <- toupper(removed)
[17:39:09.590]                 for (kk in seq_along(NAMES)) {
[17:39:09.590]                   name <- removed[[kk]]
[17:39:09.590]                   NAME <- NAMES[[kk]]
[17:39:09.590]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.590]                     next
[17:39:09.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.590]                 }
[17:39:09.590]                 if (length(args) > 0) 
[17:39:09.590]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.590]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.590]             }
[17:39:09.590]             else {
[17:39:09.590]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.590]             }
[17:39:09.590]             {
[17:39:09.590]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.590]                   0L) {
[17:39:09.590]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.590]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.590]                   base::options(opts)
[17:39:09.590]                 }
[17:39:09.590]                 {
[17:39:09.590]                   {
[17:39:09.590]                     NULL
[17:39:09.590]                     RNGkind("Mersenne-Twister")
[17:39:09.590]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:09.590]                       inherits = FALSE)
[17:39:09.590]                   }
[17:39:09.590]                   options(future.plan = NULL)
[17:39:09.590]                   if (is.na(NA_character_)) 
[17:39:09.590]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.590]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.590]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.590]                     .init = FALSE)
[17:39:09.590]                 }
[17:39:09.590]             }
[17:39:09.590]         }
[17:39:09.590]     })
[17:39:09.590]     if (TRUE) {
[17:39:09.590]         base::sink(type = "output", split = FALSE)
[17:39:09.590]         if (TRUE) {
[17:39:09.590]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.590]         }
[17:39:09.590]         else {
[17:39:09.590]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.590]         }
[17:39:09.590]         base::close(...future.stdout)
[17:39:09.590]         ...future.stdout <- NULL
[17:39:09.590]     }
[17:39:09.590]     ...future.result$conditions <- ...future.conditions
[17:39:09.590]     ...future.result$finished <- base::Sys.time()
[17:39:09.590]     ...future.result
[17:39:09.590] }
[17:39:09.592] assign_globals() ...
[17:39:09.592] List of 2
[17:39:09.592]  $ x                    : int [1:2] 1 2
[17:39:09.592]  $ future.call.arguments:List of 1
[17:39:09.592]   ..$ : num 3
[17:39:09.592]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:39:09.592]  - attr(*, "where")=List of 2
[17:39:09.592]   ..$ x                    :<environment: R_EmptyEnv> 
[17:39:09.592]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[17:39:09.592]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:09.592]  - attr(*, "resolved")= logi FALSE
[17:39:09.592]  - attr(*, "total_size")= num 112
[17:39:09.592]  - attr(*, "already-done")= logi TRUE
[17:39:09.598] - copied ‘x’ to environment
[17:39:09.598] - copied ‘future.call.arguments’ to environment
[17:39:09.598] assign_globals() ... done
[17:39:09.598] plan(): Setting new future strategy stack:
[17:39:09.598] List of future strategies:
[17:39:09.598] 1. sequential:
[17:39:09.598]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.598]    - tweaked: FALSE
[17:39:09.598]    - call: NULL
[17:39:09.599] plan(): nbrOfWorkers() = 1
[17:39:09.600] plan(): Setting new future strategy stack:
[17:39:09.600] List of future strategies:
[17:39:09.600] 1. sequential:
[17:39:09.600]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.600]    - tweaked: FALSE
[17:39:09.600]    - call: plan(strategy, substitute = FALSE)
[17:39:09.601] plan(): nbrOfWorkers() = 1
[17:39:09.601] SequentialFuture started (and completed)
[17:39:09.601] - Launch lazy future ... done
[17:39:09.601] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'B' with plan('sequential') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5582e04143d8>
Arguments '...' exists: TRUE
[17:39:09.602] getGlobalsAndPackages() ...
[17:39:09.602] Searching for globals...
[17:39:09.603] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[17:39:09.604] Searching for globals ... DONE
[17:39:09.604] Resolving globals: FALSE
[17:39:09.604] Tweak future expression to call with '...' arguments ...
[17:39:09.604] {
[17:39:09.604]     do.call(function(...) {
[17:39:09.604]         sum(x, ...)
[17:39:09.604]     }, args = future.call.arguments)
[17:39:09.604] }
[17:39:09.604] Tweak future expression to call with '...' arguments ... DONE
[17:39:09.605] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:09.605] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[17:39:09.605] - globals: [2] ‘x’, ‘future.call.arguments’
[17:39:09.605] 
[17:39:09.605] getGlobalsAndPackages() ... DONE
[17:39:09.606] run() for ‘Future’ ...
[17:39:09.606] - state: ‘created’
[17:39:09.606] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:09.606] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:09.606] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:09.606]   - Field: ‘label’
[17:39:09.606]   - Field: ‘local’
[17:39:09.607]   - Field: ‘owner’
[17:39:09.607]   - Field: ‘envir’
[17:39:09.607]   - Field: ‘packages’
[17:39:09.607]   - Field: ‘gc’
[17:39:09.607]   - Field: ‘conditions’
[17:39:09.607]   - Field: ‘expr’
[17:39:09.607]   - Field: ‘uuid’
[17:39:09.607]   - Field: ‘seed’
[17:39:09.607]   - Field: ‘version’
[17:39:09.607]   - Field: ‘result’
[17:39:09.607]   - Field: ‘asynchronous’
[17:39:09.608]   - Field: ‘calls’
[17:39:09.608]   - Field: ‘globals’
[17:39:09.608]   - Field: ‘stdout’
[17:39:09.608]   - Field: ‘earlySignal’
[17:39:09.608]   - Field: ‘lazy’
[17:39:09.608]   - Field: ‘state’
[17:39:09.608] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:09.608] - Launch lazy future ...
[17:39:09.608] Packages needed by the future expression (n = 0): <none>
[17:39:09.609] Packages needed by future strategies (n = 0): <none>
[17:39:09.609] {
[17:39:09.609]     {
[17:39:09.609]         {
[17:39:09.609]             ...future.startTime <- base::Sys.time()
[17:39:09.609]             {
[17:39:09.609]                 {
[17:39:09.609]                   {
[17:39:09.609]                     base::local({
[17:39:09.609]                       has_future <- base::requireNamespace("future", 
[17:39:09.609]                         quietly = TRUE)
[17:39:09.609]                       if (has_future) {
[17:39:09.609]                         ns <- base::getNamespace("future")
[17:39:09.609]                         version <- ns[[".package"]][["version"]]
[17:39:09.609]                         if (is.null(version)) 
[17:39:09.609]                           version <- utils::packageVersion("future")
[17:39:09.609]                       }
[17:39:09.609]                       else {
[17:39:09.609]                         version <- NULL
[17:39:09.609]                       }
[17:39:09.609]                       if (!has_future || version < "1.8.0") {
[17:39:09.609]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.609]                           "", base::R.version$version.string), 
[17:39:09.609]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:09.609]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:09.609]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.609]                             "release", "version")], collapse = " "), 
[17:39:09.609]                           hostname = base::Sys.info()[["nodename"]])
[17:39:09.609]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.609]                           info)
[17:39:09.609]                         info <- base::paste(info, collapse = "; ")
[17:39:09.609]                         if (!has_future) {
[17:39:09.609]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.609]                             info)
[17:39:09.609]                         }
[17:39:09.609]                         else {
[17:39:09.609]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.609]                             info, version)
[17:39:09.609]                         }
[17:39:09.609]                         base::stop(msg)
[17:39:09.609]                       }
[17:39:09.609]                     })
[17:39:09.609]                   }
[17:39:09.609]                   ...future.strategy.old <- future::plan("list")
[17:39:09.609]                   options(future.plan = NULL)
[17:39:09.609]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.609]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.609]                 }
[17:39:09.609]                 ...future.workdir <- getwd()
[17:39:09.609]             }
[17:39:09.609]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.609]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.609]         }
[17:39:09.609]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.609]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.609]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.609]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.609]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.609]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.609]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.609]             base::names(...future.oldOptions))
[17:39:09.609]     }
[17:39:09.609]     if (FALSE) {
[17:39:09.609]     }
[17:39:09.609]     else {
[17:39:09.609]         if (TRUE) {
[17:39:09.609]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.609]                 open = "w")
[17:39:09.609]         }
[17:39:09.609]         else {
[17:39:09.609]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.609]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.609]         }
[17:39:09.609]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.609]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.609]             base::sink(type = "output", split = FALSE)
[17:39:09.609]             base::close(...future.stdout)
[17:39:09.609]         }, add = TRUE)
[17:39:09.609]     }
[17:39:09.609]     ...future.frame <- base::sys.nframe()
[17:39:09.609]     ...future.conditions <- base::list()
[17:39:09.609]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.609]     if (FALSE) {
[17:39:09.609]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.609]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.609]     }
[17:39:09.609]     ...future.result <- base::tryCatch({
[17:39:09.609]         base::withCallingHandlers({
[17:39:09.609]             ...future.value <- base::withVisible(base::local({
[17:39:09.609]                 do.call(function(...) {
[17:39:09.609]                   sum(x, ...)
[17:39:09.609]                 }, args = future.call.arguments)
[17:39:09.609]             }))
[17:39:09.609]             future::FutureResult(value = ...future.value$value, 
[17:39:09.609]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.609]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.609]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.609]                     ...future.globalenv.names))
[17:39:09.609]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.609]         }, condition = base::local({
[17:39:09.609]             c <- base::c
[17:39:09.609]             inherits <- base::inherits
[17:39:09.609]             invokeRestart <- base::invokeRestart
[17:39:09.609]             length <- base::length
[17:39:09.609]             list <- base::list
[17:39:09.609]             seq.int <- base::seq.int
[17:39:09.609]             signalCondition <- base::signalCondition
[17:39:09.609]             sys.calls <- base::sys.calls
[17:39:09.609]             `[[` <- base::`[[`
[17:39:09.609]             `+` <- base::`+`
[17:39:09.609]             `<<-` <- base::`<<-`
[17:39:09.609]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.609]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.609]                   3L)]
[17:39:09.609]             }
[17:39:09.609]             function(cond) {
[17:39:09.609]                 is_error <- inherits(cond, "error")
[17:39:09.609]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.609]                   NULL)
[17:39:09.609]                 if (is_error) {
[17:39:09.609]                   sessionInformation <- function() {
[17:39:09.609]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.609]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.609]                       search = base::search(), system = base::Sys.info())
[17:39:09.609]                   }
[17:39:09.609]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.609]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.609]                     cond$call), session = sessionInformation(), 
[17:39:09.609]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.609]                   signalCondition(cond)
[17:39:09.609]                 }
[17:39:09.609]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.609]                 "immediateCondition"))) {
[17:39:09.609]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.609]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.609]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.609]                   if (TRUE && !signal) {
[17:39:09.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.609]                     {
[17:39:09.609]                       inherits <- base::inherits
[17:39:09.609]                       invokeRestart <- base::invokeRestart
[17:39:09.609]                       is.null <- base::is.null
[17:39:09.609]                       muffled <- FALSE
[17:39:09.609]                       if (inherits(cond, "message")) {
[17:39:09.609]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.609]                         if (muffled) 
[17:39:09.609]                           invokeRestart("muffleMessage")
[17:39:09.609]                       }
[17:39:09.609]                       else if (inherits(cond, "warning")) {
[17:39:09.609]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.609]                         if (muffled) 
[17:39:09.609]                           invokeRestart("muffleWarning")
[17:39:09.609]                       }
[17:39:09.609]                       else if (inherits(cond, "condition")) {
[17:39:09.609]                         if (!is.null(pattern)) {
[17:39:09.609]                           computeRestarts <- base::computeRestarts
[17:39:09.609]                           grepl <- base::grepl
[17:39:09.609]                           restarts <- computeRestarts(cond)
[17:39:09.609]                           for (restart in restarts) {
[17:39:09.609]                             name <- restart$name
[17:39:09.609]                             if (is.null(name)) 
[17:39:09.609]                               next
[17:39:09.609]                             if (!grepl(pattern, name)) 
[17:39:09.609]                               next
[17:39:09.609]                             invokeRestart(restart)
[17:39:09.609]                             muffled <- TRUE
[17:39:09.609]                             break
[17:39:09.609]                           }
[17:39:09.609]                         }
[17:39:09.609]                       }
[17:39:09.609]                       invisible(muffled)
[17:39:09.609]                     }
[17:39:09.609]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.609]                   }
[17:39:09.609]                 }
[17:39:09.609]                 else {
[17:39:09.609]                   if (TRUE) {
[17:39:09.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.609]                     {
[17:39:09.609]                       inherits <- base::inherits
[17:39:09.609]                       invokeRestart <- base::invokeRestart
[17:39:09.609]                       is.null <- base::is.null
[17:39:09.609]                       muffled <- FALSE
[17:39:09.609]                       if (inherits(cond, "message")) {
[17:39:09.609]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.609]                         if (muffled) 
[17:39:09.609]                           invokeRestart("muffleMessage")
[17:39:09.609]                       }
[17:39:09.609]                       else if (inherits(cond, "warning")) {
[17:39:09.609]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.609]                         if (muffled) 
[17:39:09.609]                           invokeRestart("muffleWarning")
[17:39:09.609]                       }
[17:39:09.609]                       else if (inherits(cond, "condition")) {
[17:39:09.609]                         if (!is.null(pattern)) {
[17:39:09.609]                           computeRestarts <- base::computeRestarts
[17:39:09.609]                           grepl <- base::grepl
[17:39:09.609]                           restarts <- computeRestarts(cond)
[17:39:09.609]                           for (restart in restarts) {
[17:39:09.609]                             name <- restart$name
[17:39:09.609]                             if (is.null(name)) 
[17:39:09.609]                               next
[17:39:09.609]                             if (!grepl(pattern, name)) 
[17:39:09.609]                               next
[17:39:09.609]                             invokeRestart(restart)
[17:39:09.609]                             muffled <- TRUE
[17:39:09.609]                             break
[17:39:09.609]                           }
[17:39:09.609]                         }
[17:39:09.609]                       }
[17:39:09.609]                       invisible(muffled)
[17:39:09.609]                     }
[17:39:09.609]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.609]                   }
[17:39:09.609]                 }
[17:39:09.609]             }
[17:39:09.609]         }))
[17:39:09.609]     }, error = function(ex) {
[17:39:09.609]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.609]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.609]                 ...future.rng), started = ...future.startTime, 
[17:39:09.609]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.609]             version = "1.8"), class = "FutureResult")
[17:39:09.609]     }, finally = {
[17:39:09.609]         if (!identical(...future.workdir, getwd())) 
[17:39:09.609]             setwd(...future.workdir)
[17:39:09.609]         {
[17:39:09.609]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.609]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.609]             }
[17:39:09.609]             base::options(...future.oldOptions)
[17:39:09.609]             if (.Platform$OS.type == "windows") {
[17:39:09.609]                 old_names <- names(...future.oldEnvVars)
[17:39:09.609]                 envs <- base::Sys.getenv()
[17:39:09.609]                 names <- names(envs)
[17:39:09.609]                 common <- intersect(names, old_names)
[17:39:09.609]                 added <- setdiff(names, old_names)
[17:39:09.609]                 removed <- setdiff(old_names, names)
[17:39:09.609]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.609]                   envs[common]]
[17:39:09.609]                 NAMES <- toupper(changed)
[17:39:09.609]                 args <- list()
[17:39:09.609]                 for (kk in seq_along(NAMES)) {
[17:39:09.609]                   name <- changed[[kk]]
[17:39:09.609]                   NAME <- NAMES[[kk]]
[17:39:09.609]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.609]                     next
[17:39:09.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.609]                 }
[17:39:09.609]                 NAMES <- toupper(added)
[17:39:09.609]                 for (kk in seq_along(NAMES)) {
[17:39:09.609]                   name <- added[[kk]]
[17:39:09.609]                   NAME <- NAMES[[kk]]
[17:39:09.609]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.609]                     next
[17:39:09.609]                   args[[name]] <- ""
[17:39:09.609]                 }
[17:39:09.609]                 NAMES <- toupper(removed)
[17:39:09.609]                 for (kk in seq_along(NAMES)) {
[17:39:09.609]                   name <- removed[[kk]]
[17:39:09.609]                   NAME <- NAMES[[kk]]
[17:39:09.609]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.609]                     next
[17:39:09.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.609]                 }
[17:39:09.609]                 if (length(args) > 0) 
[17:39:09.609]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.609]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.609]             }
[17:39:09.609]             else {
[17:39:09.609]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.609]             }
[17:39:09.609]             {
[17:39:09.609]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.609]                   0L) {
[17:39:09.609]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.609]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.609]                   base::options(opts)
[17:39:09.609]                 }
[17:39:09.609]                 {
[17:39:09.609]                   {
[17:39:09.609]                     NULL
[17:39:09.609]                     RNGkind("Mersenne-Twister")
[17:39:09.609]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:09.609]                       inherits = FALSE)
[17:39:09.609]                   }
[17:39:09.609]                   options(future.plan = NULL)
[17:39:09.609]                   if (is.na(NA_character_)) 
[17:39:09.609]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.609]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.609]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.609]                     .init = FALSE)
[17:39:09.609]                 }
[17:39:09.609]             }
[17:39:09.609]         }
[17:39:09.609]     })
[17:39:09.609]     if (TRUE) {
[17:39:09.609]         base::sink(type = "output", split = FALSE)
[17:39:09.609]         if (TRUE) {
[17:39:09.609]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.609]         }
[17:39:09.609]         else {
[17:39:09.609]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.609]         }
[17:39:09.609]         base::close(...future.stdout)
[17:39:09.609]         ...future.stdout <- NULL
[17:39:09.609]     }
[17:39:09.609]     ...future.result$conditions <- ...future.conditions
[17:39:09.609]     ...future.result$finished <- base::Sys.time()
[17:39:09.609]     ...future.result
[17:39:09.609] }
[17:39:09.610] assign_globals() ...
[17:39:09.611] List of 2
[17:39:09.611]  $ x                    : int [1:2] 1 2
[17:39:09.611]  $ future.call.arguments:List of 1
[17:39:09.611]   ..$ : num 3
[17:39:09.611]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:39:09.611]  - attr(*, "where")=List of 2
[17:39:09.611]   ..$ x                    :<environment: R_EmptyEnv> 
[17:39:09.611]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[17:39:09.611]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:09.611]  - attr(*, "resolved")= logi FALSE
[17:39:09.611]  - attr(*, "total_size")= num 112
[17:39:09.611]  - attr(*, "already-done")= logi TRUE
[17:39:09.614] - copied ‘x’ to environment
[17:39:09.614] - copied ‘future.call.arguments’ to environment
[17:39:09.614] assign_globals() ... done
[17:39:09.614] plan(): Setting new future strategy stack:
[17:39:09.615] List of future strategies:
[17:39:09.615] 1. sequential:
[17:39:09.615]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.615]    - tweaked: FALSE
[17:39:09.615]    - call: NULL
[17:39:09.615] plan(): nbrOfWorkers() = 1
[17:39:09.616] plan(): Setting new future strategy stack:
[17:39:09.616] List of future strategies:
[17:39:09.616] 1. sequential:
[17:39:09.616]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.616]    - tweaked: FALSE
[17:39:09.616]    - call: plan(strategy, substitute = FALSE)
[17:39:09.616] plan(): nbrOfWorkers() = 1
[17:39:09.616] SequentialFuture started (and completed)
[17:39:09.617] - Launch lazy future ... done
[17:39:09.617] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'C' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x5582e05e2468>
Arguments '...' exists: FALSE
[17:39:09.619] getGlobalsAndPackages() ...
[17:39:09.619] Searching for globals...
[17:39:09.620] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[17:39:09.621] Searching for globals ... DONE
[17:39:09.621] Resolving globals: FALSE
[17:39:09.621] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:09.621] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:39:09.622] - globals: [2] ‘x’, ‘y’
[17:39:09.622] 
[17:39:09.622] getGlobalsAndPackages() ... DONE
[17:39:09.622] run() for ‘Future’ ...
[17:39:09.622] - state: ‘created’
[17:39:09.622] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:09.622] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:09.623] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:09.623]   - Field: ‘label’
[17:39:09.623]   - Field: ‘local’
[17:39:09.623]   - Field: ‘owner’
[17:39:09.623]   - Field: ‘envir’
[17:39:09.623]   - Field: ‘packages’
[17:39:09.623]   - Field: ‘gc’
[17:39:09.623]   - Field: ‘conditions’
[17:39:09.623]   - Field: ‘expr’
[17:39:09.623]   - Field: ‘uuid’
[17:39:09.623]   - Field: ‘seed’
[17:39:09.624]   - Field: ‘version’
[17:39:09.624]   - Field: ‘result’
[17:39:09.624]   - Field: ‘asynchronous’
[17:39:09.624]   - Field: ‘calls’
[17:39:09.624]   - Field: ‘globals’
[17:39:09.624]   - Field: ‘stdout’
[17:39:09.624]   - Field: ‘earlySignal’
[17:39:09.624]   - Field: ‘lazy’
[17:39:09.624]   - Field: ‘state’
[17:39:09.624] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:09.624] - Launch lazy future ...
[17:39:09.625] Packages needed by the future expression (n = 0): <none>
[17:39:09.625] Packages needed by future strategies (n = 0): <none>
[17:39:09.625] {
[17:39:09.625]     {
[17:39:09.625]         {
[17:39:09.625]             ...future.startTime <- base::Sys.time()
[17:39:09.625]             {
[17:39:09.625]                 {
[17:39:09.625]                   {
[17:39:09.625]                     base::local({
[17:39:09.625]                       has_future <- base::requireNamespace("future", 
[17:39:09.625]                         quietly = TRUE)
[17:39:09.625]                       if (has_future) {
[17:39:09.625]                         ns <- base::getNamespace("future")
[17:39:09.625]                         version <- ns[[".package"]][["version"]]
[17:39:09.625]                         if (is.null(version)) 
[17:39:09.625]                           version <- utils::packageVersion("future")
[17:39:09.625]                       }
[17:39:09.625]                       else {
[17:39:09.625]                         version <- NULL
[17:39:09.625]                       }
[17:39:09.625]                       if (!has_future || version < "1.8.0") {
[17:39:09.625]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.625]                           "", base::R.version$version.string), 
[17:39:09.625]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:09.625]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:09.625]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.625]                             "release", "version")], collapse = " "), 
[17:39:09.625]                           hostname = base::Sys.info()[["nodename"]])
[17:39:09.625]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.625]                           info)
[17:39:09.625]                         info <- base::paste(info, collapse = "; ")
[17:39:09.625]                         if (!has_future) {
[17:39:09.625]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.625]                             info)
[17:39:09.625]                         }
[17:39:09.625]                         else {
[17:39:09.625]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.625]                             info, version)
[17:39:09.625]                         }
[17:39:09.625]                         base::stop(msg)
[17:39:09.625]                       }
[17:39:09.625]                     })
[17:39:09.625]                   }
[17:39:09.625]                   ...future.strategy.old <- future::plan("list")
[17:39:09.625]                   options(future.plan = NULL)
[17:39:09.625]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.625]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.625]                 }
[17:39:09.625]                 ...future.workdir <- getwd()
[17:39:09.625]             }
[17:39:09.625]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.625]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.625]         }
[17:39:09.625]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.625]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.625]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.625]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.625]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.625]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.625]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.625]             base::names(...future.oldOptions))
[17:39:09.625]     }
[17:39:09.625]     if (FALSE) {
[17:39:09.625]     }
[17:39:09.625]     else {
[17:39:09.625]         if (TRUE) {
[17:39:09.625]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.625]                 open = "w")
[17:39:09.625]         }
[17:39:09.625]         else {
[17:39:09.625]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.625]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.625]         }
[17:39:09.625]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.625]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.625]             base::sink(type = "output", split = FALSE)
[17:39:09.625]             base::close(...future.stdout)
[17:39:09.625]         }, add = TRUE)
[17:39:09.625]     }
[17:39:09.625]     ...future.frame <- base::sys.nframe()
[17:39:09.625]     ...future.conditions <- base::list()
[17:39:09.625]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.625]     if (FALSE) {
[17:39:09.625]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.625]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.625]     }
[17:39:09.625]     ...future.result <- base::tryCatch({
[17:39:09.625]         base::withCallingHandlers({
[17:39:09.625]             ...future.value <- base::withVisible(base::local({
[17:39:09.625]                 sum(x, y)
[17:39:09.625]             }))
[17:39:09.625]             future::FutureResult(value = ...future.value$value, 
[17:39:09.625]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.625]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.625]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.625]                     ...future.globalenv.names))
[17:39:09.625]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.625]         }, condition = base::local({
[17:39:09.625]             c <- base::c
[17:39:09.625]             inherits <- base::inherits
[17:39:09.625]             invokeRestart <- base::invokeRestart
[17:39:09.625]             length <- base::length
[17:39:09.625]             list <- base::list
[17:39:09.625]             seq.int <- base::seq.int
[17:39:09.625]             signalCondition <- base::signalCondition
[17:39:09.625]             sys.calls <- base::sys.calls
[17:39:09.625]             `[[` <- base::`[[`
[17:39:09.625]             `+` <- base::`+`
[17:39:09.625]             `<<-` <- base::`<<-`
[17:39:09.625]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.625]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.625]                   3L)]
[17:39:09.625]             }
[17:39:09.625]             function(cond) {
[17:39:09.625]                 is_error <- inherits(cond, "error")
[17:39:09.625]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.625]                   NULL)
[17:39:09.625]                 if (is_error) {
[17:39:09.625]                   sessionInformation <- function() {
[17:39:09.625]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.625]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.625]                       search = base::search(), system = base::Sys.info())
[17:39:09.625]                   }
[17:39:09.625]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.625]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.625]                     cond$call), session = sessionInformation(), 
[17:39:09.625]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.625]                   signalCondition(cond)
[17:39:09.625]                 }
[17:39:09.625]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.625]                 "immediateCondition"))) {
[17:39:09.625]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.625]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.625]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.625]                   if (TRUE && !signal) {
[17:39:09.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.625]                     {
[17:39:09.625]                       inherits <- base::inherits
[17:39:09.625]                       invokeRestart <- base::invokeRestart
[17:39:09.625]                       is.null <- base::is.null
[17:39:09.625]                       muffled <- FALSE
[17:39:09.625]                       if (inherits(cond, "message")) {
[17:39:09.625]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.625]                         if (muffled) 
[17:39:09.625]                           invokeRestart("muffleMessage")
[17:39:09.625]                       }
[17:39:09.625]                       else if (inherits(cond, "warning")) {
[17:39:09.625]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.625]                         if (muffled) 
[17:39:09.625]                           invokeRestart("muffleWarning")
[17:39:09.625]                       }
[17:39:09.625]                       else if (inherits(cond, "condition")) {
[17:39:09.625]                         if (!is.null(pattern)) {
[17:39:09.625]                           computeRestarts <- base::computeRestarts
[17:39:09.625]                           grepl <- base::grepl
[17:39:09.625]                           restarts <- computeRestarts(cond)
[17:39:09.625]                           for (restart in restarts) {
[17:39:09.625]                             name <- restart$name
[17:39:09.625]                             if (is.null(name)) 
[17:39:09.625]                               next
[17:39:09.625]                             if (!grepl(pattern, name)) 
[17:39:09.625]                               next
[17:39:09.625]                             invokeRestart(restart)
[17:39:09.625]                             muffled <- TRUE
[17:39:09.625]                             break
[17:39:09.625]                           }
[17:39:09.625]                         }
[17:39:09.625]                       }
[17:39:09.625]                       invisible(muffled)
[17:39:09.625]                     }
[17:39:09.625]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.625]                   }
[17:39:09.625]                 }
[17:39:09.625]                 else {
[17:39:09.625]                   if (TRUE) {
[17:39:09.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.625]                     {
[17:39:09.625]                       inherits <- base::inherits
[17:39:09.625]                       invokeRestart <- base::invokeRestart
[17:39:09.625]                       is.null <- base::is.null
[17:39:09.625]                       muffled <- FALSE
[17:39:09.625]                       if (inherits(cond, "message")) {
[17:39:09.625]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.625]                         if (muffled) 
[17:39:09.625]                           invokeRestart("muffleMessage")
[17:39:09.625]                       }
[17:39:09.625]                       else if (inherits(cond, "warning")) {
[17:39:09.625]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.625]                         if (muffled) 
[17:39:09.625]                           invokeRestart("muffleWarning")
[17:39:09.625]                       }
[17:39:09.625]                       else if (inherits(cond, "condition")) {
[17:39:09.625]                         if (!is.null(pattern)) {
[17:39:09.625]                           computeRestarts <- base::computeRestarts
[17:39:09.625]                           grepl <- base::grepl
[17:39:09.625]                           restarts <- computeRestarts(cond)
[17:39:09.625]                           for (restart in restarts) {
[17:39:09.625]                             name <- restart$name
[17:39:09.625]                             if (is.null(name)) 
[17:39:09.625]                               next
[17:39:09.625]                             if (!grepl(pattern, name)) 
[17:39:09.625]                               next
[17:39:09.625]                             invokeRestart(restart)
[17:39:09.625]                             muffled <- TRUE
[17:39:09.625]                             break
[17:39:09.625]                           }
[17:39:09.625]                         }
[17:39:09.625]                       }
[17:39:09.625]                       invisible(muffled)
[17:39:09.625]                     }
[17:39:09.625]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.625]                   }
[17:39:09.625]                 }
[17:39:09.625]             }
[17:39:09.625]         }))
[17:39:09.625]     }, error = function(ex) {
[17:39:09.625]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.625]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.625]                 ...future.rng), started = ...future.startTime, 
[17:39:09.625]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.625]             version = "1.8"), class = "FutureResult")
[17:39:09.625]     }, finally = {
[17:39:09.625]         if (!identical(...future.workdir, getwd())) 
[17:39:09.625]             setwd(...future.workdir)
[17:39:09.625]         {
[17:39:09.625]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.625]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.625]             }
[17:39:09.625]             base::options(...future.oldOptions)
[17:39:09.625]             if (.Platform$OS.type == "windows") {
[17:39:09.625]                 old_names <- names(...future.oldEnvVars)
[17:39:09.625]                 envs <- base::Sys.getenv()
[17:39:09.625]                 names <- names(envs)
[17:39:09.625]                 common <- intersect(names, old_names)
[17:39:09.625]                 added <- setdiff(names, old_names)
[17:39:09.625]                 removed <- setdiff(old_names, names)
[17:39:09.625]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.625]                   envs[common]]
[17:39:09.625]                 NAMES <- toupper(changed)
[17:39:09.625]                 args <- list()
[17:39:09.625]                 for (kk in seq_along(NAMES)) {
[17:39:09.625]                   name <- changed[[kk]]
[17:39:09.625]                   NAME <- NAMES[[kk]]
[17:39:09.625]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.625]                     next
[17:39:09.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.625]                 }
[17:39:09.625]                 NAMES <- toupper(added)
[17:39:09.625]                 for (kk in seq_along(NAMES)) {
[17:39:09.625]                   name <- added[[kk]]
[17:39:09.625]                   NAME <- NAMES[[kk]]
[17:39:09.625]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.625]                     next
[17:39:09.625]                   args[[name]] <- ""
[17:39:09.625]                 }
[17:39:09.625]                 NAMES <- toupper(removed)
[17:39:09.625]                 for (kk in seq_along(NAMES)) {
[17:39:09.625]                   name <- removed[[kk]]
[17:39:09.625]                   NAME <- NAMES[[kk]]
[17:39:09.625]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.625]                     next
[17:39:09.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.625]                 }
[17:39:09.625]                 if (length(args) > 0) 
[17:39:09.625]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.625]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.625]             }
[17:39:09.625]             else {
[17:39:09.625]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.625]             }
[17:39:09.625]             {
[17:39:09.625]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.625]                   0L) {
[17:39:09.625]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.625]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.625]                   base::options(opts)
[17:39:09.625]                 }
[17:39:09.625]                 {
[17:39:09.625]                   {
[17:39:09.625]                     NULL
[17:39:09.625]                     RNGkind("Mersenne-Twister")
[17:39:09.625]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:09.625]                       inherits = FALSE)
[17:39:09.625]                   }
[17:39:09.625]                   options(future.plan = NULL)
[17:39:09.625]                   if (is.na(NA_character_)) 
[17:39:09.625]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.625]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.625]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.625]                     .init = FALSE)
[17:39:09.625]                 }
[17:39:09.625]             }
[17:39:09.625]         }
[17:39:09.625]     })
[17:39:09.625]     if (TRUE) {
[17:39:09.625]         base::sink(type = "output", split = FALSE)
[17:39:09.625]         if (TRUE) {
[17:39:09.625]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.625]         }
[17:39:09.625]         else {
[17:39:09.625]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.625]         }
[17:39:09.625]         base::close(...future.stdout)
[17:39:09.625]         ...future.stdout <- NULL
[17:39:09.625]     }
[17:39:09.625]     ...future.result$conditions <- ...future.conditions
[17:39:09.625]     ...future.result$finished <- base::Sys.time()
[17:39:09.625]     ...future.result
[17:39:09.625] }
[17:39:09.627] assign_globals() ...
[17:39:09.627] List of 2
[17:39:09.627]  $ x: int [1:2] 1 2
[17:39:09.627]  $ y: num 3
[17:39:09.627]  - attr(*, "where")=List of 2
[17:39:09.627]   ..$ x:<environment: R_EmptyEnv> 
[17:39:09.627]   ..$ y:<environment: R_EmptyEnv> 
[17:39:09.627]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:09.627]  - attr(*, "resolved")= logi FALSE
[17:39:09.627]  - attr(*, "total_size")= num 112
[17:39:09.627]  - attr(*, "already-done")= logi TRUE
[17:39:09.630] - copied ‘x’ to environment
[17:39:09.630] - copied ‘y’ to environment
[17:39:09.630] assign_globals() ... done
[17:39:09.630] plan(): Setting new future strategy stack:
[17:39:09.630] List of future strategies:
[17:39:09.630] 1. sequential:
[17:39:09.630]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.630]    - tweaked: FALSE
[17:39:09.630]    - call: NULL
[17:39:09.631] plan(): nbrOfWorkers() = 1
[17:39:09.631] plan(): Setting new future strategy stack:
[17:39:09.631] List of future strategies:
[17:39:09.631] 1. sequential:
[17:39:09.631]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.631]    - tweaked: FALSE
[17:39:09.631]    - call: plan(strategy, substitute = FALSE)
[17:39:09.632] plan(): nbrOfWorkers() = 1
[17:39:09.632] SequentialFuture started (and completed)
[17:39:09.632] - Launch lazy future ... done
[17:39:09.632] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'D' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5582e077e0c0>
Arguments '...' exists: FALSE
[17:39:09.633] getGlobalsAndPackages() ...
[17:39:09.633] Searching for globals...
[17:39:09.634] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[17:39:09.634] Searching for globals ... DONE
[17:39:09.634] Resolving globals: FALSE
[17:39:09.634] Tweak future expression to call with '...' arguments ...
[17:39:09.635] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:09.635] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:39:09.635] - globals: [2] ‘x’, ‘y’
[17:39:09.635] 
[17:39:09.636] getGlobalsAndPackages() ... DONE
[17:39:09.636] run() for ‘Future’ ...
[17:39:09.636] - state: ‘created’
[17:39:09.636] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:09.636] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:09.636] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:09.636]   - Field: ‘label’
[17:39:09.637]   - Field: ‘local’
[17:39:09.637]   - Field: ‘owner’
[17:39:09.637]   - Field: ‘envir’
[17:39:09.637]   - Field: ‘packages’
[17:39:09.637]   - Field: ‘gc’
[17:39:09.637]   - Field: ‘conditions’
[17:39:09.637]   - Field: ‘expr’
[17:39:09.637]   - Field: ‘uuid’
[17:39:09.637]   - Field: ‘seed’
[17:39:09.637]   - Field: ‘version’
[17:39:09.637]   - Field: ‘result’
[17:39:09.638]   - Field: ‘asynchronous’
[17:39:09.638]   - Field: ‘calls’
[17:39:09.638]   - Field: ‘globals’
[17:39:09.638]   - Field: ‘stdout’
[17:39:09.638]   - Field: ‘earlySignal’
[17:39:09.638]   - Field: ‘lazy’
[17:39:09.638]   - Field: ‘state’
[17:39:09.638] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:09.638] - Launch lazy future ...
[17:39:09.638] Packages needed by the future expression (n = 0): <none>
[17:39:09.639] Packages needed by future strategies (n = 0): <none>
[17:39:09.639] {
[17:39:09.639]     {
[17:39:09.639]         {
[17:39:09.639]             ...future.startTime <- base::Sys.time()
[17:39:09.639]             {
[17:39:09.639]                 {
[17:39:09.639]                   {
[17:39:09.639]                     base::local({
[17:39:09.639]                       has_future <- base::requireNamespace("future", 
[17:39:09.639]                         quietly = TRUE)
[17:39:09.639]                       if (has_future) {
[17:39:09.639]                         ns <- base::getNamespace("future")
[17:39:09.639]                         version <- ns[[".package"]][["version"]]
[17:39:09.639]                         if (is.null(version)) 
[17:39:09.639]                           version <- utils::packageVersion("future")
[17:39:09.639]                       }
[17:39:09.639]                       else {
[17:39:09.639]                         version <- NULL
[17:39:09.639]                       }
[17:39:09.639]                       if (!has_future || version < "1.8.0") {
[17:39:09.639]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.639]                           "", base::R.version$version.string), 
[17:39:09.639]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:09.639]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:09.639]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.639]                             "release", "version")], collapse = " "), 
[17:39:09.639]                           hostname = base::Sys.info()[["nodename"]])
[17:39:09.639]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.639]                           info)
[17:39:09.639]                         info <- base::paste(info, collapse = "; ")
[17:39:09.639]                         if (!has_future) {
[17:39:09.639]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.639]                             info)
[17:39:09.639]                         }
[17:39:09.639]                         else {
[17:39:09.639]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.639]                             info, version)
[17:39:09.639]                         }
[17:39:09.639]                         base::stop(msg)
[17:39:09.639]                       }
[17:39:09.639]                     })
[17:39:09.639]                   }
[17:39:09.639]                   ...future.strategy.old <- future::plan("list")
[17:39:09.639]                   options(future.plan = NULL)
[17:39:09.639]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.639]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.639]                 }
[17:39:09.639]                 ...future.workdir <- getwd()
[17:39:09.639]             }
[17:39:09.639]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.639]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.639]         }
[17:39:09.639]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.639]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.639]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.639]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.639]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.639]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.639]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.639]             base::names(...future.oldOptions))
[17:39:09.639]     }
[17:39:09.639]     if (FALSE) {
[17:39:09.639]     }
[17:39:09.639]     else {
[17:39:09.639]         if (TRUE) {
[17:39:09.639]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.639]                 open = "w")
[17:39:09.639]         }
[17:39:09.639]         else {
[17:39:09.639]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.639]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.639]         }
[17:39:09.639]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.639]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.639]             base::sink(type = "output", split = FALSE)
[17:39:09.639]             base::close(...future.stdout)
[17:39:09.639]         }, add = TRUE)
[17:39:09.639]     }
[17:39:09.639]     ...future.frame <- base::sys.nframe()
[17:39:09.639]     ...future.conditions <- base::list()
[17:39:09.639]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.639]     if (FALSE) {
[17:39:09.639]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.639]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.639]     }
[17:39:09.639]     ...future.result <- base::tryCatch({
[17:39:09.639]         base::withCallingHandlers({
[17:39:09.639]             ...future.value <- base::withVisible(base::local({
[17:39:09.639]                 sum(x, y, ...)
[17:39:09.639]             }))
[17:39:09.639]             future::FutureResult(value = ...future.value$value, 
[17:39:09.639]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.639]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.639]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.639]                     ...future.globalenv.names))
[17:39:09.639]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.639]         }, condition = base::local({
[17:39:09.639]             c <- base::c
[17:39:09.639]             inherits <- base::inherits
[17:39:09.639]             invokeRestart <- base::invokeRestart
[17:39:09.639]             length <- base::length
[17:39:09.639]             list <- base::list
[17:39:09.639]             seq.int <- base::seq.int
[17:39:09.639]             signalCondition <- base::signalCondition
[17:39:09.639]             sys.calls <- base::sys.calls
[17:39:09.639]             `[[` <- base::`[[`
[17:39:09.639]             `+` <- base::`+`
[17:39:09.639]             `<<-` <- base::`<<-`
[17:39:09.639]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.639]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.639]                   3L)]
[17:39:09.639]             }
[17:39:09.639]             function(cond) {
[17:39:09.639]                 is_error <- inherits(cond, "error")
[17:39:09.639]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.639]                   NULL)
[17:39:09.639]                 if (is_error) {
[17:39:09.639]                   sessionInformation <- function() {
[17:39:09.639]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.639]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.639]                       search = base::search(), system = base::Sys.info())
[17:39:09.639]                   }
[17:39:09.639]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.639]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.639]                     cond$call), session = sessionInformation(), 
[17:39:09.639]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.639]                   signalCondition(cond)
[17:39:09.639]                 }
[17:39:09.639]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.639]                 "immediateCondition"))) {
[17:39:09.639]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.639]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.639]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.639]                   if (TRUE && !signal) {
[17:39:09.639]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.639]                     {
[17:39:09.639]                       inherits <- base::inherits
[17:39:09.639]                       invokeRestart <- base::invokeRestart
[17:39:09.639]                       is.null <- base::is.null
[17:39:09.639]                       muffled <- FALSE
[17:39:09.639]                       if (inherits(cond, "message")) {
[17:39:09.639]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.639]                         if (muffled) 
[17:39:09.639]                           invokeRestart("muffleMessage")
[17:39:09.639]                       }
[17:39:09.639]                       else if (inherits(cond, "warning")) {
[17:39:09.639]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.639]                         if (muffled) 
[17:39:09.639]                           invokeRestart("muffleWarning")
[17:39:09.639]                       }
[17:39:09.639]                       else if (inherits(cond, "condition")) {
[17:39:09.639]                         if (!is.null(pattern)) {
[17:39:09.639]                           computeRestarts <- base::computeRestarts
[17:39:09.639]                           grepl <- base::grepl
[17:39:09.639]                           restarts <- computeRestarts(cond)
[17:39:09.639]                           for (restart in restarts) {
[17:39:09.639]                             name <- restart$name
[17:39:09.639]                             if (is.null(name)) 
[17:39:09.639]                               next
[17:39:09.639]                             if (!grepl(pattern, name)) 
[17:39:09.639]                               next
[17:39:09.639]                             invokeRestart(restart)
[17:39:09.639]                             muffled <- TRUE
[17:39:09.639]                             break
[17:39:09.639]                           }
[17:39:09.639]                         }
[17:39:09.639]                       }
[17:39:09.639]                       invisible(muffled)
[17:39:09.639]                     }
[17:39:09.639]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.639]                   }
[17:39:09.639]                 }
[17:39:09.639]                 else {
[17:39:09.639]                   if (TRUE) {
[17:39:09.639]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.639]                     {
[17:39:09.639]                       inherits <- base::inherits
[17:39:09.639]                       invokeRestart <- base::invokeRestart
[17:39:09.639]                       is.null <- base::is.null
[17:39:09.639]                       muffled <- FALSE
[17:39:09.639]                       if (inherits(cond, "message")) {
[17:39:09.639]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.639]                         if (muffled) 
[17:39:09.639]                           invokeRestart("muffleMessage")
[17:39:09.639]                       }
[17:39:09.639]                       else if (inherits(cond, "warning")) {
[17:39:09.639]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.639]                         if (muffled) 
[17:39:09.639]                           invokeRestart("muffleWarning")
[17:39:09.639]                       }
[17:39:09.639]                       else if (inherits(cond, "condition")) {
[17:39:09.639]                         if (!is.null(pattern)) {
[17:39:09.639]                           computeRestarts <- base::computeRestarts
[17:39:09.639]                           grepl <- base::grepl
[17:39:09.639]                           restarts <- computeRestarts(cond)
[17:39:09.639]                           for (restart in restarts) {
[17:39:09.639]                             name <- restart$name
[17:39:09.639]                             if (is.null(name)) 
[17:39:09.639]                               next
[17:39:09.639]                             if (!grepl(pattern, name)) 
[17:39:09.639]                               next
[17:39:09.639]                             invokeRestart(restart)
[17:39:09.639]                             muffled <- TRUE
[17:39:09.639]                             break
[17:39:09.639]                           }
[17:39:09.639]                         }
[17:39:09.639]                       }
[17:39:09.639]                       invisible(muffled)
[17:39:09.639]                     }
[17:39:09.639]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.639]                   }
[17:39:09.639]                 }
[17:39:09.639]             }
[17:39:09.639]         }))
[17:39:09.639]     }, error = function(ex) {
[17:39:09.639]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.639]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.639]                 ...future.rng), started = ...future.startTime, 
[17:39:09.639]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.639]             version = "1.8"), class = "FutureResult")
[17:39:09.639]     }, finally = {
[17:39:09.639]         if (!identical(...future.workdir, getwd())) 
[17:39:09.639]             setwd(...future.workdir)
[17:39:09.639]         {
[17:39:09.639]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.639]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.639]             }
[17:39:09.639]             base::options(...future.oldOptions)
[17:39:09.639]             if (.Platform$OS.type == "windows") {
[17:39:09.639]                 old_names <- names(...future.oldEnvVars)
[17:39:09.639]                 envs <- base::Sys.getenv()
[17:39:09.639]                 names <- names(envs)
[17:39:09.639]                 common <- intersect(names, old_names)
[17:39:09.639]                 added <- setdiff(names, old_names)
[17:39:09.639]                 removed <- setdiff(old_names, names)
[17:39:09.639]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.639]                   envs[common]]
[17:39:09.639]                 NAMES <- toupper(changed)
[17:39:09.639]                 args <- list()
[17:39:09.639]                 for (kk in seq_along(NAMES)) {
[17:39:09.639]                   name <- changed[[kk]]
[17:39:09.639]                   NAME <- NAMES[[kk]]
[17:39:09.639]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.639]                     next
[17:39:09.639]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.639]                 }
[17:39:09.639]                 NAMES <- toupper(added)
[17:39:09.639]                 for (kk in seq_along(NAMES)) {
[17:39:09.639]                   name <- added[[kk]]
[17:39:09.639]                   NAME <- NAMES[[kk]]
[17:39:09.639]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.639]                     next
[17:39:09.639]                   args[[name]] <- ""
[17:39:09.639]                 }
[17:39:09.639]                 NAMES <- toupper(removed)
[17:39:09.639]                 for (kk in seq_along(NAMES)) {
[17:39:09.639]                   name <- removed[[kk]]
[17:39:09.639]                   NAME <- NAMES[[kk]]
[17:39:09.639]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.639]                     next
[17:39:09.639]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.639]                 }
[17:39:09.639]                 if (length(args) > 0) 
[17:39:09.639]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.639]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.639]             }
[17:39:09.639]             else {
[17:39:09.639]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.639]             }
[17:39:09.639]             {
[17:39:09.639]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.639]                   0L) {
[17:39:09.639]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.639]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.639]                   base::options(opts)
[17:39:09.639]                 }
[17:39:09.639]                 {
[17:39:09.639]                   {
[17:39:09.639]                     NULL
[17:39:09.639]                     RNGkind("Mersenne-Twister")
[17:39:09.639]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:09.639]                       inherits = FALSE)
[17:39:09.639]                   }
[17:39:09.639]                   options(future.plan = NULL)
[17:39:09.639]                   if (is.na(NA_character_)) 
[17:39:09.639]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.639]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.639]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.639]                     .init = FALSE)
[17:39:09.639]                 }
[17:39:09.639]             }
[17:39:09.639]         }
[17:39:09.639]     })
[17:39:09.639]     if (TRUE) {
[17:39:09.639]         base::sink(type = "output", split = FALSE)
[17:39:09.639]         if (TRUE) {
[17:39:09.639]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.639]         }
[17:39:09.639]         else {
[17:39:09.639]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.639]         }
[17:39:09.639]         base::close(...future.stdout)
[17:39:09.639]         ...future.stdout <- NULL
[17:39:09.639]     }
[17:39:09.639]     ...future.result$conditions <- ...future.conditions
[17:39:09.639]     ...future.result$finished <- base::Sys.time()
[17:39:09.639]     ...future.result
[17:39:09.639] }
[17:39:09.640] assign_globals() ...
[17:39:09.641] List of 2
[17:39:09.641]  $ x: int [1:2] 1 2
[17:39:09.641]  $ y: num 3
[17:39:09.641]  - attr(*, "where")=List of 2
[17:39:09.641]   ..$ x:<environment: R_EmptyEnv> 
[17:39:09.641]   ..$ y:<environment: R_EmptyEnv> 
[17:39:09.641]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:09.641]  - attr(*, "resolved")= logi FALSE
[17:39:09.641]  - attr(*, "total_size")= num 112
[17:39:09.641]  - attr(*, "already-done")= logi TRUE
[17:39:09.643] - copied ‘x’ to environment
[17:39:09.644] - copied ‘y’ to environment
[17:39:09.644] assign_globals() ... done
[17:39:09.644] plan(): Setting new future strategy stack:
[17:39:09.644] List of future strategies:
[17:39:09.644] 1. sequential:
[17:39:09.644]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.644]    - tweaked: FALSE
[17:39:09.644]    - call: NULL
[17:39:09.644] plan(): nbrOfWorkers() = 1
[17:39:09.645] plan(): Setting new future strategy stack:
[17:39:09.645] List of future strategies:
[17:39:09.645] 1. sequential:
[17:39:09.645]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.645]    - tweaked: FALSE
[17:39:09.645]    - call: plan(strategy, substitute = FALSE)
[17:39:09.646] plan(): nbrOfWorkers() = 1
[17:39:09.646] SequentialFuture started (and completed)
[17:39:09.646] signalConditions() ...
[17:39:09.646]  - include = ‘immediateCondition’
[17:39:09.646]  - exclude = 
[17:39:09.646]  - resignal = FALSE
[17:39:09.647]  - Number of conditions: 1
[17:39:09.647] signalConditions() ... done
[17:39:09.647] - Launch lazy future ... done
[17:39:09.647] run() for ‘SequentialFuture’ ... done
[17:39:09.647] signalConditions() ...
[17:39:09.647]  - include = ‘immediateCondition’
[17:39:09.647]  - exclude = 
[17:39:09.647]  - resignal = FALSE
[17:39:09.647]  - Number of conditions: 1
[17:39:09.647] signalConditions() ... done
[17:39:09.649] Future state: ‘finished’
[17:39:09.649] signalConditions() ...
[17:39:09.649]  - include = ‘condition’
[17:39:09.649]  - exclude = ‘immediateCondition’
[17:39:09.650]  - resignal = TRUE
[17:39:09.650]  - Number of conditions: 1
[17:39:09.650]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:09.650] signalConditions() ... done
Error in eval(quote({ : '...' used in an incorrect context
[1] "Error in eval(quote({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    sum(x, y, ...)}), new.env()): '...' used in an incorrect context>
** Sum function 'E' with plan('sequential') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x5582e0d69798>
Arguments '...' exists: TRUE
[17:39:09.651] getGlobalsAndPackages() ...
[17:39:09.651] - globals passed as-is: [1] ‘...’
[17:39:09.651] Resolving globals: FALSE
[17:39:09.651] Tweak future expression to call with '...' arguments ...
[17:39:09.651] {
[17:39:09.651]     do.call(function(...) {
[17:39:09.651]         fcn <- function() sum(...)
[17:39:09.651]         fcn()
[17:39:09.651]     }, args = future.call.arguments)
[17:39:09.651] }
[17:39:09.651] Tweak future expression to call with '...' arguments ... DONE
[17:39:09.652] The total size of the 1 globals is 112 bytes (112 bytes)
[17:39:09.652] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[17:39:09.652] - globals: [1] ‘future.call.arguments’
[17:39:09.652] 
[17:39:09.652] getGlobalsAndPackages() ... DONE
[17:39:09.652] run() for ‘Future’ ...
[17:39:09.653] - state: ‘created’
[17:39:09.653] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:09.653] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:09.653] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:09.653]   - Field: ‘label’
[17:39:09.653]   - Field: ‘local’
[17:39:09.653]   - Field: ‘owner’
[17:39:09.653]   - Field: ‘envir’
[17:39:09.654]   - Field: ‘packages’
[17:39:09.654]   - Field: ‘gc’
[17:39:09.654]   - Field: ‘conditions’
[17:39:09.654]   - Field: ‘expr’
[17:39:09.654]   - Field: ‘uuid’
[17:39:09.654]   - Field: ‘seed’
[17:39:09.654]   - Field: ‘version’
[17:39:09.654]   - Field: ‘result’
[17:39:09.654]   - Field: ‘asynchronous’
[17:39:09.654]   - Field: ‘calls’
[17:39:09.654]   - Field: ‘globals’
[17:39:09.655]   - Field: ‘stdout’
[17:39:09.655]   - Field: ‘earlySignal’
[17:39:09.655]   - Field: ‘lazy’
[17:39:09.655]   - Field: ‘state’
[17:39:09.655] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:09.655] - Launch lazy future ...
[17:39:09.655] Packages needed by the future expression (n = 0): <none>
[17:39:09.655] Packages needed by future strategies (n = 0): <none>
[17:39:09.656] {
[17:39:09.656]     {
[17:39:09.656]         {
[17:39:09.656]             ...future.startTime <- base::Sys.time()
[17:39:09.656]             {
[17:39:09.656]                 {
[17:39:09.656]                   {
[17:39:09.656]                     base::local({
[17:39:09.656]                       has_future <- base::requireNamespace("future", 
[17:39:09.656]                         quietly = TRUE)
[17:39:09.656]                       if (has_future) {
[17:39:09.656]                         ns <- base::getNamespace("future")
[17:39:09.656]                         version <- ns[[".package"]][["version"]]
[17:39:09.656]                         if (is.null(version)) 
[17:39:09.656]                           version <- utils::packageVersion("future")
[17:39:09.656]                       }
[17:39:09.656]                       else {
[17:39:09.656]                         version <- NULL
[17:39:09.656]                       }
[17:39:09.656]                       if (!has_future || version < "1.8.0") {
[17:39:09.656]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.656]                           "", base::R.version$version.string), 
[17:39:09.656]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:09.656]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:09.656]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.656]                             "release", "version")], collapse = " "), 
[17:39:09.656]                           hostname = base::Sys.info()[["nodename"]])
[17:39:09.656]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.656]                           info)
[17:39:09.656]                         info <- base::paste(info, collapse = "; ")
[17:39:09.656]                         if (!has_future) {
[17:39:09.656]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.656]                             info)
[17:39:09.656]                         }
[17:39:09.656]                         else {
[17:39:09.656]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.656]                             info, version)
[17:39:09.656]                         }
[17:39:09.656]                         base::stop(msg)
[17:39:09.656]                       }
[17:39:09.656]                     })
[17:39:09.656]                   }
[17:39:09.656]                   ...future.strategy.old <- future::plan("list")
[17:39:09.656]                   options(future.plan = NULL)
[17:39:09.656]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.656]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.656]                 }
[17:39:09.656]                 ...future.workdir <- getwd()
[17:39:09.656]             }
[17:39:09.656]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.656]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.656]         }
[17:39:09.656]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.656]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.656]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.656]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.656]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.656]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.656]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.656]             base::names(...future.oldOptions))
[17:39:09.656]     }
[17:39:09.656]     if (FALSE) {
[17:39:09.656]     }
[17:39:09.656]     else {
[17:39:09.656]         if (TRUE) {
[17:39:09.656]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.656]                 open = "w")
[17:39:09.656]         }
[17:39:09.656]         else {
[17:39:09.656]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.656]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.656]         }
[17:39:09.656]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.656]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.656]             base::sink(type = "output", split = FALSE)
[17:39:09.656]             base::close(...future.stdout)
[17:39:09.656]         }, add = TRUE)
[17:39:09.656]     }
[17:39:09.656]     ...future.frame <- base::sys.nframe()
[17:39:09.656]     ...future.conditions <- base::list()
[17:39:09.656]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.656]     if (FALSE) {
[17:39:09.656]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.656]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.656]     }
[17:39:09.656]     ...future.result <- base::tryCatch({
[17:39:09.656]         base::withCallingHandlers({
[17:39:09.656]             ...future.value <- base::withVisible(base::local({
[17:39:09.656]                 do.call(function(...) {
[17:39:09.656]                   fcn <- function() sum(...)
[17:39:09.656]                   fcn()
[17:39:09.656]                 }, args = future.call.arguments)
[17:39:09.656]             }))
[17:39:09.656]             future::FutureResult(value = ...future.value$value, 
[17:39:09.656]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.656]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.656]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.656]                     ...future.globalenv.names))
[17:39:09.656]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.656]         }, condition = base::local({
[17:39:09.656]             c <- base::c
[17:39:09.656]             inherits <- base::inherits
[17:39:09.656]             invokeRestart <- base::invokeRestart
[17:39:09.656]             length <- base::length
[17:39:09.656]             list <- base::list
[17:39:09.656]             seq.int <- base::seq.int
[17:39:09.656]             signalCondition <- base::signalCondition
[17:39:09.656]             sys.calls <- base::sys.calls
[17:39:09.656]             `[[` <- base::`[[`
[17:39:09.656]             `+` <- base::`+`
[17:39:09.656]             `<<-` <- base::`<<-`
[17:39:09.656]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.656]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.656]                   3L)]
[17:39:09.656]             }
[17:39:09.656]             function(cond) {
[17:39:09.656]                 is_error <- inherits(cond, "error")
[17:39:09.656]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.656]                   NULL)
[17:39:09.656]                 if (is_error) {
[17:39:09.656]                   sessionInformation <- function() {
[17:39:09.656]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.656]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.656]                       search = base::search(), system = base::Sys.info())
[17:39:09.656]                   }
[17:39:09.656]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.656]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.656]                     cond$call), session = sessionInformation(), 
[17:39:09.656]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.656]                   signalCondition(cond)
[17:39:09.656]                 }
[17:39:09.656]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.656]                 "immediateCondition"))) {
[17:39:09.656]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.656]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.656]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.656]                   if (TRUE && !signal) {
[17:39:09.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.656]                     {
[17:39:09.656]                       inherits <- base::inherits
[17:39:09.656]                       invokeRestart <- base::invokeRestart
[17:39:09.656]                       is.null <- base::is.null
[17:39:09.656]                       muffled <- FALSE
[17:39:09.656]                       if (inherits(cond, "message")) {
[17:39:09.656]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.656]                         if (muffled) 
[17:39:09.656]                           invokeRestart("muffleMessage")
[17:39:09.656]                       }
[17:39:09.656]                       else if (inherits(cond, "warning")) {
[17:39:09.656]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.656]                         if (muffled) 
[17:39:09.656]                           invokeRestart("muffleWarning")
[17:39:09.656]                       }
[17:39:09.656]                       else if (inherits(cond, "condition")) {
[17:39:09.656]                         if (!is.null(pattern)) {
[17:39:09.656]                           computeRestarts <- base::computeRestarts
[17:39:09.656]                           grepl <- base::grepl
[17:39:09.656]                           restarts <- computeRestarts(cond)
[17:39:09.656]                           for (restart in restarts) {
[17:39:09.656]                             name <- restart$name
[17:39:09.656]                             if (is.null(name)) 
[17:39:09.656]                               next
[17:39:09.656]                             if (!grepl(pattern, name)) 
[17:39:09.656]                               next
[17:39:09.656]                             invokeRestart(restart)
[17:39:09.656]                             muffled <- TRUE
[17:39:09.656]                             break
[17:39:09.656]                           }
[17:39:09.656]                         }
[17:39:09.656]                       }
[17:39:09.656]                       invisible(muffled)
[17:39:09.656]                     }
[17:39:09.656]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.656]                   }
[17:39:09.656]                 }
[17:39:09.656]                 else {
[17:39:09.656]                   if (TRUE) {
[17:39:09.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.656]                     {
[17:39:09.656]                       inherits <- base::inherits
[17:39:09.656]                       invokeRestart <- base::invokeRestart
[17:39:09.656]                       is.null <- base::is.null
[17:39:09.656]                       muffled <- FALSE
[17:39:09.656]                       if (inherits(cond, "message")) {
[17:39:09.656]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.656]                         if (muffled) 
[17:39:09.656]                           invokeRestart("muffleMessage")
[17:39:09.656]                       }
[17:39:09.656]                       else if (inherits(cond, "warning")) {
[17:39:09.656]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.656]                         if (muffled) 
[17:39:09.656]                           invokeRestart("muffleWarning")
[17:39:09.656]                       }
[17:39:09.656]                       else if (inherits(cond, "condition")) {
[17:39:09.656]                         if (!is.null(pattern)) {
[17:39:09.656]                           computeRestarts <- base::computeRestarts
[17:39:09.656]                           grepl <- base::grepl
[17:39:09.656]                           restarts <- computeRestarts(cond)
[17:39:09.656]                           for (restart in restarts) {
[17:39:09.656]                             name <- restart$name
[17:39:09.656]                             if (is.null(name)) 
[17:39:09.656]                               next
[17:39:09.656]                             if (!grepl(pattern, name)) 
[17:39:09.656]                               next
[17:39:09.656]                             invokeRestart(restart)
[17:39:09.656]                             muffled <- TRUE
[17:39:09.656]                             break
[17:39:09.656]                           }
[17:39:09.656]                         }
[17:39:09.656]                       }
[17:39:09.656]                       invisible(muffled)
[17:39:09.656]                     }
[17:39:09.656]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.656]                   }
[17:39:09.656]                 }
[17:39:09.656]             }
[17:39:09.656]         }))
[17:39:09.656]     }, error = function(ex) {
[17:39:09.656]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.656]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.656]                 ...future.rng), started = ...future.startTime, 
[17:39:09.656]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.656]             version = "1.8"), class = "FutureResult")
[17:39:09.656]     }, finally = {
[17:39:09.656]         if (!identical(...future.workdir, getwd())) 
[17:39:09.656]             setwd(...future.workdir)
[17:39:09.656]         {
[17:39:09.656]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.656]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.656]             }
[17:39:09.656]             base::options(...future.oldOptions)
[17:39:09.656]             if (.Platform$OS.type == "windows") {
[17:39:09.656]                 old_names <- names(...future.oldEnvVars)
[17:39:09.656]                 envs <- base::Sys.getenv()
[17:39:09.656]                 names <- names(envs)
[17:39:09.656]                 common <- intersect(names, old_names)
[17:39:09.656]                 added <- setdiff(names, old_names)
[17:39:09.656]                 removed <- setdiff(old_names, names)
[17:39:09.656]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.656]                   envs[common]]
[17:39:09.656]                 NAMES <- toupper(changed)
[17:39:09.656]                 args <- list()
[17:39:09.656]                 for (kk in seq_along(NAMES)) {
[17:39:09.656]                   name <- changed[[kk]]
[17:39:09.656]                   NAME <- NAMES[[kk]]
[17:39:09.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.656]                     next
[17:39:09.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.656]                 }
[17:39:09.656]                 NAMES <- toupper(added)
[17:39:09.656]                 for (kk in seq_along(NAMES)) {
[17:39:09.656]                   name <- added[[kk]]
[17:39:09.656]                   NAME <- NAMES[[kk]]
[17:39:09.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.656]                     next
[17:39:09.656]                   args[[name]] <- ""
[17:39:09.656]                 }
[17:39:09.656]                 NAMES <- toupper(removed)
[17:39:09.656]                 for (kk in seq_along(NAMES)) {
[17:39:09.656]                   name <- removed[[kk]]
[17:39:09.656]                   NAME <- NAMES[[kk]]
[17:39:09.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.656]                     next
[17:39:09.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.656]                 }
[17:39:09.656]                 if (length(args) > 0) 
[17:39:09.656]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.656]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.656]             }
[17:39:09.656]             else {
[17:39:09.656]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.656]             }
[17:39:09.656]             {
[17:39:09.656]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.656]                   0L) {
[17:39:09.656]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.656]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.656]                   base::options(opts)
[17:39:09.656]                 }
[17:39:09.656]                 {
[17:39:09.656]                   {
[17:39:09.656]                     NULL
[17:39:09.656]                     RNGkind("Mersenne-Twister")
[17:39:09.656]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:09.656]                       inherits = FALSE)
[17:39:09.656]                   }
[17:39:09.656]                   options(future.plan = NULL)
[17:39:09.656]                   if (is.na(NA_character_)) 
[17:39:09.656]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.656]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.656]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.656]                     .init = FALSE)
[17:39:09.656]                 }
[17:39:09.656]             }
[17:39:09.656]         }
[17:39:09.656]     })
[17:39:09.656]     if (TRUE) {
[17:39:09.656]         base::sink(type = "output", split = FALSE)
[17:39:09.656]         if (TRUE) {
[17:39:09.656]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.656]         }
[17:39:09.656]         else {
[17:39:09.656]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.656]         }
[17:39:09.656]         base::close(...future.stdout)
[17:39:09.656]         ...future.stdout <- NULL
[17:39:09.656]     }
[17:39:09.656]     ...future.result$conditions <- ...future.conditions
[17:39:09.656]     ...future.result$finished <- base::Sys.time()
[17:39:09.656]     ...future.result
[17:39:09.656] }
[17:39:09.657] assign_globals() ...
[17:39:09.657] List of 1
[17:39:09.657]  $ future.call.arguments:List of 2
[17:39:09.657]   ..$ : int [1:2] 1 2
[17:39:09.657]   ..$ : num 3
[17:39:09.657]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:39:09.657]  - attr(*, "where")=List of 1
[17:39:09.657]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[17:39:09.657]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:09.657]  - attr(*, "resolved")= logi FALSE
[17:39:09.657]  - attr(*, "total_size")= num 112
[17:39:09.657]  - attr(*, "already-done")= logi TRUE
[17:39:09.661] - copied ‘future.call.arguments’ to environment
[17:39:09.661] assign_globals() ... done
[17:39:09.661] plan(): Setting new future strategy stack:
[17:39:09.661] List of future strategies:
[17:39:09.661] 1. sequential:
[17:39:09.661]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.661]    - tweaked: FALSE
[17:39:09.661]    - call: NULL
[17:39:09.661] plan(): nbrOfWorkers() = 1
[17:39:09.662] plan(): Setting new future strategy stack:
[17:39:09.662] List of future strategies:
[17:39:09.662] 1. sequential:
[17:39:09.662]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.662]    - tweaked: FALSE
[17:39:09.662]    - call: plan(strategy, substitute = FALSE)
[17:39:09.663] plan(): nbrOfWorkers() = 1
[17:39:09.663] SequentialFuture started (and completed)
[17:39:09.663] - Launch lazy future ... done
[17:39:09.663] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'F' with plan('sequential') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x5582dedafd68>
Using '...' in a formula
[17:39:09.663] getGlobalsAndPackages() ...
[17:39:09.663] Searching for globals...
[17:39:09.666] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[17:39:09.666] Searching for globals ... DONE
[17:39:09.666] Resolving globals: FALSE
[17:39:09.667] Tweak future expression to call with '...' arguments ...
[17:39:09.667] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[17:39:09.667] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:39:09.668] - globals: [3] ‘fcn’, ‘x’, ‘y’
[17:39:09.668] 
[17:39:09.668] getGlobalsAndPackages() ... DONE
[17:39:09.668] run() for ‘Future’ ...
[17:39:09.668] - state: ‘created’
[17:39:09.668] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:09.668] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:09.669] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:09.669]   - Field: ‘label’
[17:39:09.669]   - Field: ‘local’
[17:39:09.669]   - Field: ‘owner’
[17:39:09.669]   - Field: ‘envir’
[17:39:09.669]   - Field: ‘packages’
[17:39:09.669]   - Field: ‘gc’
[17:39:09.669]   - Field: ‘conditions’
[17:39:09.669]   - Field: ‘expr’
[17:39:09.669]   - Field: ‘uuid’
[17:39:09.669]   - Field: ‘seed’
[17:39:09.670]   - Field: ‘version’
[17:39:09.670]   - Field: ‘result’
[17:39:09.670]   - Field: ‘asynchronous’
[17:39:09.670]   - Field: ‘calls’
[17:39:09.670]   - Field: ‘globals’
[17:39:09.670]   - Field: ‘stdout’
[17:39:09.670]   - Field: ‘earlySignal’
[17:39:09.670]   - Field: ‘lazy’
[17:39:09.670]   - Field: ‘state’
[17:39:09.670] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:09.670] - Launch lazy future ...
[17:39:09.671] Packages needed by the future expression (n = 0): <none>
[17:39:09.671] Packages needed by future strategies (n = 0): <none>
[17:39:09.671] {
[17:39:09.671]     {
[17:39:09.671]         {
[17:39:09.671]             ...future.startTime <- base::Sys.time()
[17:39:09.671]             {
[17:39:09.671]                 {
[17:39:09.671]                   {
[17:39:09.671]                     base::local({
[17:39:09.671]                       has_future <- base::requireNamespace("future", 
[17:39:09.671]                         quietly = TRUE)
[17:39:09.671]                       if (has_future) {
[17:39:09.671]                         ns <- base::getNamespace("future")
[17:39:09.671]                         version <- ns[[".package"]][["version"]]
[17:39:09.671]                         if (is.null(version)) 
[17:39:09.671]                           version <- utils::packageVersion("future")
[17:39:09.671]                       }
[17:39:09.671]                       else {
[17:39:09.671]                         version <- NULL
[17:39:09.671]                       }
[17:39:09.671]                       if (!has_future || version < "1.8.0") {
[17:39:09.671]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.671]                           "", base::R.version$version.string), 
[17:39:09.671]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:09.671]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:09.671]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.671]                             "release", "version")], collapse = " "), 
[17:39:09.671]                           hostname = base::Sys.info()[["nodename"]])
[17:39:09.671]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.671]                           info)
[17:39:09.671]                         info <- base::paste(info, collapse = "; ")
[17:39:09.671]                         if (!has_future) {
[17:39:09.671]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.671]                             info)
[17:39:09.671]                         }
[17:39:09.671]                         else {
[17:39:09.671]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.671]                             info, version)
[17:39:09.671]                         }
[17:39:09.671]                         base::stop(msg)
[17:39:09.671]                       }
[17:39:09.671]                     })
[17:39:09.671]                   }
[17:39:09.671]                   ...future.strategy.old <- future::plan("list")
[17:39:09.671]                   options(future.plan = NULL)
[17:39:09.671]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.671]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.671]                 }
[17:39:09.671]                 ...future.workdir <- getwd()
[17:39:09.671]             }
[17:39:09.671]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.671]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.671]         }
[17:39:09.671]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.671]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.671]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.671]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.671]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.671]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.671]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.671]             base::names(...future.oldOptions))
[17:39:09.671]     }
[17:39:09.671]     if (FALSE) {
[17:39:09.671]     }
[17:39:09.671]     else {
[17:39:09.671]         if (TRUE) {
[17:39:09.671]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.671]                 open = "w")
[17:39:09.671]         }
[17:39:09.671]         else {
[17:39:09.671]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.671]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.671]         }
[17:39:09.671]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.671]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.671]             base::sink(type = "output", split = FALSE)
[17:39:09.671]             base::close(...future.stdout)
[17:39:09.671]         }, add = TRUE)
[17:39:09.671]     }
[17:39:09.671]     ...future.frame <- base::sys.nframe()
[17:39:09.671]     ...future.conditions <- base::list()
[17:39:09.671]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.671]     if (FALSE) {
[17:39:09.671]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.671]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.671]     }
[17:39:09.671]     ...future.result <- base::tryCatch({
[17:39:09.671]         base::withCallingHandlers({
[17:39:09.671]             ...future.value <- base::withVisible(base::local(fcn(x, 
[17:39:09.671]                 y)))
[17:39:09.671]             future::FutureResult(value = ...future.value$value, 
[17:39:09.671]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.671]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.671]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.671]                     ...future.globalenv.names))
[17:39:09.671]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.671]         }, condition = base::local({
[17:39:09.671]             c <- base::c
[17:39:09.671]             inherits <- base::inherits
[17:39:09.671]             invokeRestart <- base::invokeRestart
[17:39:09.671]             length <- base::length
[17:39:09.671]             list <- base::list
[17:39:09.671]             seq.int <- base::seq.int
[17:39:09.671]             signalCondition <- base::signalCondition
[17:39:09.671]             sys.calls <- base::sys.calls
[17:39:09.671]             `[[` <- base::`[[`
[17:39:09.671]             `+` <- base::`+`
[17:39:09.671]             `<<-` <- base::`<<-`
[17:39:09.671]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.671]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.671]                   3L)]
[17:39:09.671]             }
[17:39:09.671]             function(cond) {
[17:39:09.671]                 is_error <- inherits(cond, "error")
[17:39:09.671]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.671]                   NULL)
[17:39:09.671]                 if (is_error) {
[17:39:09.671]                   sessionInformation <- function() {
[17:39:09.671]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.671]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.671]                       search = base::search(), system = base::Sys.info())
[17:39:09.671]                   }
[17:39:09.671]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.671]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.671]                     cond$call), session = sessionInformation(), 
[17:39:09.671]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.671]                   signalCondition(cond)
[17:39:09.671]                 }
[17:39:09.671]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.671]                 "immediateCondition"))) {
[17:39:09.671]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.671]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.671]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.671]                   if (TRUE && !signal) {
[17:39:09.671]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.671]                     {
[17:39:09.671]                       inherits <- base::inherits
[17:39:09.671]                       invokeRestart <- base::invokeRestart
[17:39:09.671]                       is.null <- base::is.null
[17:39:09.671]                       muffled <- FALSE
[17:39:09.671]                       if (inherits(cond, "message")) {
[17:39:09.671]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.671]                         if (muffled) 
[17:39:09.671]                           invokeRestart("muffleMessage")
[17:39:09.671]                       }
[17:39:09.671]                       else if (inherits(cond, "warning")) {
[17:39:09.671]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.671]                         if (muffled) 
[17:39:09.671]                           invokeRestart("muffleWarning")
[17:39:09.671]                       }
[17:39:09.671]                       else if (inherits(cond, "condition")) {
[17:39:09.671]                         if (!is.null(pattern)) {
[17:39:09.671]                           computeRestarts <- base::computeRestarts
[17:39:09.671]                           grepl <- base::grepl
[17:39:09.671]                           restarts <- computeRestarts(cond)
[17:39:09.671]                           for (restart in restarts) {
[17:39:09.671]                             name <- restart$name
[17:39:09.671]                             if (is.null(name)) 
[17:39:09.671]                               next
[17:39:09.671]                             if (!grepl(pattern, name)) 
[17:39:09.671]                               next
[17:39:09.671]                             invokeRestart(restart)
[17:39:09.671]                             muffled <- TRUE
[17:39:09.671]                             break
[17:39:09.671]                           }
[17:39:09.671]                         }
[17:39:09.671]                       }
[17:39:09.671]                       invisible(muffled)
[17:39:09.671]                     }
[17:39:09.671]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.671]                   }
[17:39:09.671]                 }
[17:39:09.671]                 else {
[17:39:09.671]                   if (TRUE) {
[17:39:09.671]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.671]                     {
[17:39:09.671]                       inherits <- base::inherits
[17:39:09.671]                       invokeRestart <- base::invokeRestart
[17:39:09.671]                       is.null <- base::is.null
[17:39:09.671]                       muffled <- FALSE
[17:39:09.671]                       if (inherits(cond, "message")) {
[17:39:09.671]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.671]                         if (muffled) 
[17:39:09.671]                           invokeRestart("muffleMessage")
[17:39:09.671]                       }
[17:39:09.671]                       else if (inherits(cond, "warning")) {
[17:39:09.671]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.671]                         if (muffled) 
[17:39:09.671]                           invokeRestart("muffleWarning")
[17:39:09.671]                       }
[17:39:09.671]                       else if (inherits(cond, "condition")) {
[17:39:09.671]                         if (!is.null(pattern)) {
[17:39:09.671]                           computeRestarts <- base::computeRestarts
[17:39:09.671]                           grepl <- base::grepl
[17:39:09.671]                           restarts <- computeRestarts(cond)
[17:39:09.671]                           for (restart in restarts) {
[17:39:09.671]                             name <- restart$name
[17:39:09.671]                             if (is.null(name)) 
[17:39:09.671]                               next
[17:39:09.671]                             if (!grepl(pattern, name)) 
[17:39:09.671]                               next
[17:39:09.671]                             invokeRestart(restart)
[17:39:09.671]                             muffled <- TRUE
[17:39:09.671]                             break
[17:39:09.671]                           }
[17:39:09.671]                         }
[17:39:09.671]                       }
[17:39:09.671]                       invisible(muffled)
[17:39:09.671]                     }
[17:39:09.671]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.671]                   }
[17:39:09.671]                 }
[17:39:09.671]             }
[17:39:09.671]         }))
[17:39:09.671]     }, error = function(ex) {
[17:39:09.671]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.671]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.671]                 ...future.rng), started = ...future.startTime, 
[17:39:09.671]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.671]             version = "1.8"), class = "FutureResult")
[17:39:09.671]     }, finally = {
[17:39:09.671]         if (!identical(...future.workdir, getwd())) 
[17:39:09.671]             setwd(...future.workdir)
[17:39:09.671]         {
[17:39:09.671]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.671]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.671]             }
[17:39:09.671]             base::options(...future.oldOptions)
[17:39:09.671]             if (.Platform$OS.type == "windows") {
[17:39:09.671]                 old_names <- names(...future.oldEnvVars)
[17:39:09.671]                 envs <- base::Sys.getenv()
[17:39:09.671]                 names <- names(envs)
[17:39:09.671]                 common <- intersect(names, old_names)
[17:39:09.671]                 added <- setdiff(names, old_names)
[17:39:09.671]                 removed <- setdiff(old_names, names)
[17:39:09.671]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.671]                   envs[common]]
[17:39:09.671]                 NAMES <- toupper(changed)
[17:39:09.671]                 args <- list()
[17:39:09.671]                 for (kk in seq_along(NAMES)) {
[17:39:09.671]                   name <- changed[[kk]]
[17:39:09.671]                   NAME <- NAMES[[kk]]
[17:39:09.671]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.671]                     next
[17:39:09.671]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.671]                 }
[17:39:09.671]                 NAMES <- toupper(added)
[17:39:09.671]                 for (kk in seq_along(NAMES)) {
[17:39:09.671]                   name <- added[[kk]]
[17:39:09.671]                   NAME <- NAMES[[kk]]
[17:39:09.671]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.671]                     next
[17:39:09.671]                   args[[name]] <- ""
[17:39:09.671]                 }
[17:39:09.671]                 NAMES <- toupper(removed)
[17:39:09.671]                 for (kk in seq_along(NAMES)) {
[17:39:09.671]                   name <- removed[[kk]]
[17:39:09.671]                   NAME <- NAMES[[kk]]
[17:39:09.671]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.671]                     next
[17:39:09.671]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.671]                 }
[17:39:09.671]                 if (length(args) > 0) 
[17:39:09.671]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.671]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.671]             }
[17:39:09.671]             else {
[17:39:09.671]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.671]             }
[17:39:09.671]             {
[17:39:09.671]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.671]                   0L) {
[17:39:09.671]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.671]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.671]                   base::options(opts)
[17:39:09.671]                 }
[17:39:09.671]                 {
[17:39:09.671]                   {
[17:39:09.671]                     NULL
[17:39:09.671]                     RNGkind("Mersenne-Twister")
[17:39:09.671]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:09.671]                       inherits = FALSE)
[17:39:09.671]                   }
[17:39:09.671]                   options(future.plan = NULL)
[17:39:09.671]                   if (is.na(NA_character_)) 
[17:39:09.671]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.671]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.671]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.671]                     .init = FALSE)
[17:39:09.671]                 }
[17:39:09.671]             }
[17:39:09.671]         }
[17:39:09.671]     })
[17:39:09.671]     if (TRUE) {
[17:39:09.671]         base::sink(type = "output", split = FALSE)
[17:39:09.671]         if (TRUE) {
[17:39:09.671]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.671]         }
[17:39:09.671]         else {
[17:39:09.671]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.671]         }
[17:39:09.671]         base::close(...future.stdout)
[17:39:09.671]         ...future.stdout <- NULL
[17:39:09.671]     }
[17:39:09.671]     ...future.result$conditions <- ...future.conditions
[17:39:09.671]     ...future.result$finished <- base::Sys.time()
[17:39:09.671]     ...future.result
[17:39:09.671] }
[17:39:09.673] assign_globals() ...
[17:39:09.673] List of 3
[17:39:09.673]  $ fcn:function (x, y)  
[17:39:09.673]  $ x  : int [1:2] 1 2
[17:39:09.673]  $ y  : num 3
[17:39:09.673]  - attr(*, "where")=List of 3
[17:39:09.673]   ..$ fcn:<environment: R_EmptyEnv> 
[17:39:09.673]   ..$ x  :<environment: R_EmptyEnv> 
[17:39:09.673]   ..$ y  :<environment: R_EmptyEnv> 
[17:39:09.673]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:09.673]  - attr(*, "resolved")= logi FALSE
[17:39:09.673]  - attr(*, "total_size")= num 4280
[17:39:09.673]  - attr(*, "already-done")= logi TRUE
[17:39:09.676] - reassign environment for ‘fcn’
[17:39:09.676] - copied ‘fcn’ to environment
[17:39:09.676] - copied ‘x’ to environment
[17:39:09.676] - copied ‘y’ to environment
[17:39:09.677] assign_globals() ... done
[17:39:09.677] plan(): Setting new future strategy stack:
[17:39:09.677] List of future strategies:
[17:39:09.677] 1. sequential:
[17:39:09.677]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.677]    - tweaked: FALSE
[17:39:09.677]    - call: NULL
[17:39:09.679] plan(): nbrOfWorkers() = 1
[17:39:09.679] plan(): Setting new future strategy stack:
[17:39:09.680] List of future strategies:
[17:39:09.680] 1. sequential:
[17:39:09.680]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.680]    - tweaked: FALSE
[17:39:09.680]    - call: plan(strategy, substitute = FALSE)
[17:39:09.680] plan(): nbrOfWorkers() = 1
[17:39:09.680] SequentialFuture started (and completed)
[17:39:09.680] - Launch lazy future ... done
[17:39:09.680] run() for ‘SequentialFuture’ ... done
[1] 6
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** Global argument '...' ...
- plan('multicore') ...
[17:39:09.686] plan(): Setting new future strategy stack:
[17:39:09.686] List of future strategies:
[17:39:09.686] 1. multicore:
[17:39:09.686]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:09.686]    - tweaked: FALSE
[17:39:09.686]    - call: plan(strategy, substitute = FALSE)
[17:39:09.690] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multicore') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x5582e008c960>
Arguments '...' exists: TRUE
[17:39:09.690] getGlobalsAndPackages() ...
[17:39:09.690] Searching for globals...
[17:39:09.691] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[17:39:09.692] Searching for globals ... DONE
[17:39:09.692] Resolving globals: FALSE
[17:39:09.692] Tweak future expression to call with '...' arguments ...
[17:39:09.692] {
[17:39:09.692]     do.call(function(...) {
[17:39:09.692]         sum(x, ...)
[17:39:09.692]     }, args = future.call.arguments)
[17:39:09.692] }
[17:39:09.692] Tweak future expression to call with '...' arguments ... DONE
[17:39:09.693] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:09.693] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[17:39:09.693] - globals: [2] ‘x’, ‘future.call.arguments’
[17:39:09.693] 
[17:39:09.693] getGlobalsAndPackages() ... DONE
[17:39:09.694] run() for ‘Future’ ...
[17:39:09.694] - state: ‘created’
[17:39:09.694] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:09.698] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:09.698] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:09.698]   - Field: ‘label’
[17:39:09.698]   - Field: ‘local’
[17:39:09.698]   - Field: ‘owner’
[17:39:09.698]   - Field: ‘envir’
[17:39:09.699]   - Field: ‘workers’
[17:39:09.699]   - Field: ‘packages’
[17:39:09.699]   - Field: ‘gc’
[17:39:09.699]   - Field: ‘job’
[17:39:09.699]   - Field: ‘conditions’
[17:39:09.699]   - Field: ‘expr’
[17:39:09.699]   - Field: ‘uuid’
[17:39:09.699]   - Field: ‘seed’
[17:39:09.700]   - Field: ‘version’
[17:39:09.700]   - Field: ‘result’
[17:39:09.700]   - Field: ‘asynchronous’
[17:39:09.700]   - Field: ‘calls’
[17:39:09.700]   - Field: ‘globals’
[17:39:09.700]   - Field: ‘stdout’
[17:39:09.700]   - Field: ‘earlySignal’
[17:39:09.700]   - Field: ‘lazy’
[17:39:09.700]   - Field: ‘state’
[17:39:09.701] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:09.701] - Launch lazy future ...
[17:39:09.702] Packages needed by the future expression (n = 0): <none>
[17:39:09.702] Packages needed by future strategies (n = 0): <none>
[17:39:09.702] {
[17:39:09.702]     {
[17:39:09.702]         {
[17:39:09.702]             ...future.startTime <- base::Sys.time()
[17:39:09.702]             {
[17:39:09.702]                 {
[17:39:09.702]                   {
[17:39:09.702]                     {
[17:39:09.702]                       base::local({
[17:39:09.702]                         has_future <- base::requireNamespace("future", 
[17:39:09.702]                           quietly = TRUE)
[17:39:09.702]                         if (has_future) {
[17:39:09.702]                           ns <- base::getNamespace("future")
[17:39:09.702]                           version <- ns[[".package"]][["version"]]
[17:39:09.702]                           if (is.null(version)) 
[17:39:09.702]                             version <- utils::packageVersion("future")
[17:39:09.702]                         }
[17:39:09.702]                         else {
[17:39:09.702]                           version <- NULL
[17:39:09.702]                         }
[17:39:09.702]                         if (!has_future || version < "1.8.0") {
[17:39:09.702]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.702]                             "", base::R.version$version.string), 
[17:39:09.702]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:09.702]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:09.702]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.702]                               "release", "version")], collapse = " "), 
[17:39:09.702]                             hostname = base::Sys.info()[["nodename"]])
[17:39:09.702]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.702]                             info)
[17:39:09.702]                           info <- base::paste(info, collapse = "; ")
[17:39:09.702]                           if (!has_future) {
[17:39:09.702]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.702]                               info)
[17:39:09.702]                           }
[17:39:09.702]                           else {
[17:39:09.702]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.702]                               info, version)
[17:39:09.702]                           }
[17:39:09.702]                           base::stop(msg)
[17:39:09.702]                         }
[17:39:09.702]                       })
[17:39:09.702]                     }
[17:39:09.702]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:09.702]                     base::options(mc.cores = 1L)
[17:39:09.702]                   }
[17:39:09.702]                   ...future.strategy.old <- future::plan("list")
[17:39:09.702]                   options(future.plan = NULL)
[17:39:09.702]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.702]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.702]                 }
[17:39:09.702]                 ...future.workdir <- getwd()
[17:39:09.702]             }
[17:39:09.702]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.702]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.702]         }
[17:39:09.702]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.702]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.702]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.702]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.702]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.702]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.702]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.702]             base::names(...future.oldOptions))
[17:39:09.702]     }
[17:39:09.702]     if (FALSE) {
[17:39:09.702]     }
[17:39:09.702]     else {
[17:39:09.702]         if (TRUE) {
[17:39:09.702]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.702]                 open = "w")
[17:39:09.702]         }
[17:39:09.702]         else {
[17:39:09.702]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.702]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.702]         }
[17:39:09.702]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.702]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.702]             base::sink(type = "output", split = FALSE)
[17:39:09.702]             base::close(...future.stdout)
[17:39:09.702]         }, add = TRUE)
[17:39:09.702]     }
[17:39:09.702]     ...future.frame <- base::sys.nframe()
[17:39:09.702]     ...future.conditions <- base::list()
[17:39:09.702]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.702]     if (FALSE) {
[17:39:09.702]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.702]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.702]     }
[17:39:09.702]     ...future.result <- base::tryCatch({
[17:39:09.702]         base::withCallingHandlers({
[17:39:09.702]             ...future.value <- base::withVisible(base::local({
[17:39:09.702]                 withCallingHandlers({
[17:39:09.702]                   {
[17:39:09.702]                     do.call(function(...) {
[17:39:09.702]                       sum(x, ...)
[17:39:09.702]                     }, args = future.call.arguments)
[17:39:09.702]                   }
[17:39:09.702]                 }, immediateCondition = function(cond) {
[17:39:09.702]                   save_rds <- function (object, pathname, ...) 
[17:39:09.702]                   {
[17:39:09.702]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:09.702]                     if (file_test("-f", pathname_tmp)) {
[17:39:09.702]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.702]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:09.702]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.702]                         fi_tmp[["mtime"]])
[17:39:09.702]                     }
[17:39:09.702]                     tryCatch({
[17:39:09.702]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:09.702]                     }, error = function(ex) {
[17:39:09.702]                       msg <- conditionMessage(ex)
[17:39:09.702]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.702]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:09.702]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.702]                         fi_tmp[["mtime"]], msg)
[17:39:09.702]                       ex$message <- msg
[17:39:09.702]                       stop(ex)
[17:39:09.702]                     })
[17:39:09.702]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:09.702]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:09.702]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:09.702]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.702]                       fi <- file.info(pathname)
[17:39:09.702]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:09.702]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.702]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:09.702]                         fi[["size"]], fi[["mtime"]])
[17:39:09.702]                       stop(msg)
[17:39:09.702]                     }
[17:39:09.702]                     invisible(pathname)
[17:39:09.702]                   }
[17:39:09.702]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:09.702]                     rootPath = tempdir()) 
[17:39:09.702]                   {
[17:39:09.702]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:09.702]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:09.702]                       tmpdir = path, fileext = ".rds")
[17:39:09.702]                     save_rds(obj, file)
[17:39:09.702]                   }
[17:39:09.702]                   saveImmediateCondition(cond, path = "/tmp/Rtmp6U4g1T/.future/immediateConditions")
[17:39:09.702]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.702]                   {
[17:39:09.702]                     inherits <- base::inherits
[17:39:09.702]                     invokeRestart <- base::invokeRestart
[17:39:09.702]                     is.null <- base::is.null
[17:39:09.702]                     muffled <- FALSE
[17:39:09.702]                     if (inherits(cond, "message")) {
[17:39:09.702]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:09.702]                       if (muffled) 
[17:39:09.702]                         invokeRestart("muffleMessage")
[17:39:09.702]                     }
[17:39:09.702]                     else if (inherits(cond, "warning")) {
[17:39:09.702]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:09.702]                       if (muffled) 
[17:39:09.702]                         invokeRestart("muffleWarning")
[17:39:09.702]                     }
[17:39:09.702]                     else if (inherits(cond, "condition")) {
[17:39:09.702]                       if (!is.null(pattern)) {
[17:39:09.702]                         computeRestarts <- base::computeRestarts
[17:39:09.702]                         grepl <- base::grepl
[17:39:09.702]                         restarts <- computeRestarts(cond)
[17:39:09.702]                         for (restart in restarts) {
[17:39:09.702]                           name <- restart$name
[17:39:09.702]                           if (is.null(name)) 
[17:39:09.702]                             next
[17:39:09.702]                           if (!grepl(pattern, name)) 
[17:39:09.702]                             next
[17:39:09.702]                           invokeRestart(restart)
[17:39:09.702]                           muffled <- TRUE
[17:39:09.702]                           break
[17:39:09.702]                         }
[17:39:09.702]                       }
[17:39:09.702]                     }
[17:39:09.702]                     invisible(muffled)
[17:39:09.702]                   }
[17:39:09.702]                   muffleCondition(cond)
[17:39:09.702]                 })
[17:39:09.702]             }))
[17:39:09.702]             future::FutureResult(value = ...future.value$value, 
[17:39:09.702]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.702]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.702]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.702]                     ...future.globalenv.names))
[17:39:09.702]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.702]         }, condition = base::local({
[17:39:09.702]             c <- base::c
[17:39:09.702]             inherits <- base::inherits
[17:39:09.702]             invokeRestart <- base::invokeRestart
[17:39:09.702]             length <- base::length
[17:39:09.702]             list <- base::list
[17:39:09.702]             seq.int <- base::seq.int
[17:39:09.702]             signalCondition <- base::signalCondition
[17:39:09.702]             sys.calls <- base::sys.calls
[17:39:09.702]             `[[` <- base::`[[`
[17:39:09.702]             `+` <- base::`+`
[17:39:09.702]             `<<-` <- base::`<<-`
[17:39:09.702]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.702]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.702]                   3L)]
[17:39:09.702]             }
[17:39:09.702]             function(cond) {
[17:39:09.702]                 is_error <- inherits(cond, "error")
[17:39:09.702]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.702]                   NULL)
[17:39:09.702]                 if (is_error) {
[17:39:09.702]                   sessionInformation <- function() {
[17:39:09.702]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.702]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.702]                       search = base::search(), system = base::Sys.info())
[17:39:09.702]                   }
[17:39:09.702]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.702]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.702]                     cond$call), session = sessionInformation(), 
[17:39:09.702]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.702]                   signalCondition(cond)
[17:39:09.702]                 }
[17:39:09.702]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.702]                 "immediateCondition"))) {
[17:39:09.702]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.702]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.702]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.702]                   if (TRUE && !signal) {
[17:39:09.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.702]                     {
[17:39:09.702]                       inherits <- base::inherits
[17:39:09.702]                       invokeRestart <- base::invokeRestart
[17:39:09.702]                       is.null <- base::is.null
[17:39:09.702]                       muffled <- FALSE
[17:39:09.702]                       if (inherits(cond, "message")) {
[17:39:09.702]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.702]                         if (muffled) 
[17:39:09.702]                           invokeRestart("muffleMessage")
[17:39:09.702]                       }
[17:39:09.702]                       else if (inherits(cond, "warning")) {
[17:39:09.702]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.702]                         if (muffled) 
[17:39:09.702]                           invokeRestart("muffleWarning")
[17:39:09.702]                       }
[17:39:09.702]                       else if (inherits(cond, "condition")) {
[17:39:09.702]                         if (!is.null(pattern)) {
[17:39:09.702]                           computeRestarts <- base::computeRestarts
[17:39:09.702]                           grepl <- base::grepl
[17:39:09.702]                           restarts <- computeRestarts(cond)
[17:39:09.702]                           for (restart in restarts) {
[17:39:09.702]                             name <- restart$name
[17:39:09.702]                             if (is.null(name)) 
[17:39:09.702]                               next
[17:39:09.702]                             if (!grepl(pattern, name)) 
[17:39:09.702]                               next
[17:39:09.702]                             invokeRestart(restart)
[17:39:09.702]                             muffled <- TRUE
[17:39:09.702]                             break
[17:39:09.702]                           }
[17:39:09.702]                         }
[17:39:09.702]                       }
[17:39:09.702]                       invisible(muffled)
[17:39:09.702]                     }
[17:39:09.702]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.702]                   }
[17:39:09.702]                 }
[17:39:09.702]                 else {
[17:39:09.702]                   if (TRUE) {
[17:39:09.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.702]                     {
[17:39:09.702]                       inherits <- base::inherits
[17:39:09.702]                       invokeRestart <- base::invokeRestart
[17:39:09.702]                       is.null <- base::is.null
[17:39:09.702]                       muffled <- FALSE
[17:39:09.702]                       if (inherits(cond, "message")) {
[17:39:09.702]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.702]                         if (muffled) 
[17:39:09.702]                           invokeRestart("muffleMessage")
[17:39:09.702]                       }
[17:39:09.702]                       else if (inherits(cond, "warning")) {
[17:39:09.702]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.702]                         if (muffled) 
[17:39:09.702]                           invokeRestart("muffleWarning")
[17:39:09.702]                       }
[17:39:09.702]                       else if (inherits(cond, "condition")) {
[17:39:09.702]                         if (!is.null(pattern)) {
[17:39:09.702]                           computeRestarts <- base::computeRestarts
[17:39:09.702]                           grepl <- base::grepl
[17:39:09.702]                           restarts <- computeRestarts(cond)
[17:39:09.702]                           for (restart in restarts) {
[17:39:09.702]                             name <- restart$name
[17:39:09.702]                             if (is.null(name)) 
[17:39:09.702]                               next
[17:39:09.702]                             if (!grepl(pattern, name)) 
[17:39:09.702]                               next
[17:39:09.702]                             invokeRestart(restart)
[17:39:09.702]                             muffled <- TRUE
[17:39:09.702]                             break
[17:39:09.702]                           }
[17:39:09.702]                         }
[17:39:09.702]                       }
[17:39:09.702]                       invisible(muffled)
[17:39:09.702]                     }
[17:39:09.702]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.702]                   }
[17:39:09.702]                 }
[17:39:09.702]             }
[17:39:09.702]         }))
[17:39:09.702]     }, error = function(ex) {
[17:39:09.702]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.702]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.702]                 ...future.rng), started = ...future.startTime, 
[17:39:09.702]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.702]             version = "1.8"), class = "FutureResult")
[17:39:09.702]     }, finally = {
[17:39:09.702]         if (!identical(...future.workdir, getwd())) 
[17:39:09.702]             setwd(...future.workdir)
[17:39:09.702]         {
[17:39:09.702]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.702]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.702]             }
[17:39:09.702]             base::options(...future.oldOptions)
[17:39:09.702]             if (.Platform$OS.type == "windows") {
[17:39:09.702]                 old_names <- names(...future.oldEnvVars)
[17:39:09.702]                 envs <- base::Sys.getenv()
[17:39:09.702]                 names <- names(envs)
[17:39:09.702]                 common <- intersect(names, old_names)
[17:39:09.702]                 added <- setdiff(names, old_names)
[17:39:09.702]                 removed <- setdiff(old_names, names)
[17:39:09.702]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.702]                   envs[common]]
[17:39:09.702]                 NAMES <- toupper(changed)
[17:39:09.702]                 args <- list()
[17:39:09.702]                 for (kk in seq_along(NAMES)) {
[17:39:09.702]                   name <- changed[[kk]]
[17:39:09.702]                   NAME <- NAMES[[kk]]
[17:39:09.702]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.702]                     next
[17:39:09.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.702]                 }
[17:39:09.702]                 NAMES <- toupper(added)
[17:39:09.702]                 for (kk in seq_along(NAMES)) {
[17:39:09.702]                   name <- added[[kk]]
[17:39:09.702]                   NAME <- NAMES[[kk]]
[17:39:09.702]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.702]                     next
[17:39:09.702]                   args[[name]] <- ""
[17:39:09.702]                 }
[17:39:09.702]                 NAMES <- toupper(removed)
[17:39:09.702]                 for (kk in seq_along(NAMES)) {
[17:39:09.702]                   name <- removed[[kk]]
[17:39:09.702]                   NAME <- NAMES[[kk]]
[17:39:09.702]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.702]                     next
[17:39:09.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.702]                 }
[17:39:09.702]                 if (length(args) > 0) 
[17:39:09.702]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.702]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.702]             }
[17:39:09.702]             else {
[17:39:09.702]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.702]             }
[17:39:09.702]             {
[17:39:09.702]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.702]                   0L) {
[17:39:09.702]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.702]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.702]                   base::options(opts)
[17:39:09.702]                 }
[17:39:09.702]                 {
[17:39:09.702]                   {
[17:39:09.702]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:09.702]                     NULL
[17:39:09.702]                   }
[17:39:09.702]                   options(future.plan = NULL)
[17:39:09.702]                   if (is.na(NA_character_)) 
[17:39:09.702]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.702]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.702]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.702]                     .init = FALSE)
[17:39:09.702]                 }
[17:39:09.702]             }
[17:39:09.702]         }
[17:39:09.702]     })
[17:39:09.702]     if (TRUE) {
[17:39:09.702]         base::sink(type = "output", split = FALSE)
[17:39:09.702]         if (TRUE) {
[17:39:09.702]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.702]         }
[17:39:09.702]         else {
[17:39:09.702]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.702]         }
[17:39:09.702]         base::close(...future.stdout)
[17:39:09.702]         ...future.stdout <- NULL
[17:39:09.702]     }
[17:39:09.702]     ...future.result$conditions <- ...future.conditions
[17:39:09.702]     ...future.result$finished <- base::Sys.time()
[17:39:09.702]     ...future.result
[17:39:09.702] }
[17:39:09.704] assign_globals() ...
[17:39:09.705] List of 2
[17:39:09.705]  $ x                    : int [1:2] 1 2
[17:39:09.705]  $ future.call.arguments:List of 1
[17:39:09.705]   ..$ : num 3
[17:39:09.705]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:39:09.705]  - attr(*, "where")=List of 2
[17:39:09.705]   ..$ x                    :<environment: R_EmptyEnv> 
[17:39:09.705]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[17:39:09.705]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:09.705]  - attr(*, "resolved")= logi FALSE
[17:39:09.705]  - attr(*, "total_size")= num 112
[17:39:09.705]  - attr(*, "already-done")= logi TRUE
[17:39:09.708] - copied ‘x’ to environment
[17:39:09.708] - copied ‘future.call.arguments’ to environment
[17:39:09.709] assign_globals() ... done
[17:39:09.709] requestCore(): workers = 2
[17:39:09.712] MulticoreFuture started
[17:39:09.712] - Launch lazy future ... done
[17:39:09.712] plan(): Setting new future strategy stack:
[17:39:09.712] run() for ‘MulticoreFuture’ ... done
[17:39:09.713] List of future strategies:
[17:39:09.713] 1. sequential:
[17:39:09.713]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.713]    - tweaked: FALSE
[17:39:09.713]    - call: NULL
[17:39:09.714] plan(): nbrOfWorkers() = 1
[17:39:09.714] result() for MulticoreFuture ...
[17:39:09.716] plan(): Setting new future strategy stack:
[17:39:09.716] List of future strategies:
[17:39:09.716] 1. multicore:
[17:39:09.716]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:09.716]    - tweaked: FALSE
[17:39:09.716]    - call: plan(strategy, substitute = FALSE)
[17:39:09.725] plan(): nbrOfWorkers() = 2
[17:39:09.733] result() for MulticoreFuture ...
[17:39:09.733] result() for MulticoreFuture ... done
[17:39:09.733] result() for MulticoreFuture ... done
[17:39:09.734] result() for MulticoreFuture ...
[17:39:09.734] result() for MulticoreFuture ... done
[1] 6
** Sum function 'B' with plan('multicore') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5582e04143d8>
Arguments '...' exists: TRUE
[17:39:09.735] getGlobalsAndPackages() ...
[17:39:09.735] Searching for globals...
[17:39:09.737] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[17:39:09.737] Searching for globals ... DONE
[17:39:09.737] Resolving globals: FALSE
[17:39:09.737] Tweak future expression to call with '...' arguments ...
[17:39:09.737] {
[17:39:09.737]     do.call(function(...) {
[17:39:09.737]         sum(x, ...)
[17:39:09.737]     }, args = future.call.arguments)
[17:39:09.737] }
[17:39:09.737] Tweak future expression to call with '...' arguments ... DONE
[17:39:09.738] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:09.739] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[17:39:09.739] - globals: [2] ‘x’, ‘future.call.arguments’
[17:39:09.739] 
[17:39:09.739] getGlobalsAndPackages() ... DONE
[17:39:09.739] run() for ‘Future’ ...
[17:39:09.740] - state: ‘created’
[17:39:09.740] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:09.744] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:09.744] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:09.744]   - Field: ‘label’
[17:39:09.744]   - Field: ‘local’
[17:39:09.744]   - Field: ‘owner’
[17:39:09.745]   - Field: ‘envir’
[17:39:09.745]   - Field: ‘workers’
[17:39:09.745]   - Field: ‘packages’
[17:39:09.745]   - Field: ‘gc’
[17:39:09.745]   - Field: ‘job’
[17:39:09.745]   - Field: ‘conditions’
[17:39:09.745]   - Field: ‘expr’
[17:39:09.745]   - Field: ‘uuid’
[17:39:09.746]   - Field: ‘seed’
[17:39:09.746]   - Field: ‘version’
[17:39:09.746]   - Field: ‘result’
[17:39:09.746]   - Field: ‘asynchronous’
[17:39:09.746]   - Field: ‘calls’
[17:39:09.746]   - Field: ‘globals’
[17:39:09.746]   - Field: ‘stdout’
[17:39:09.746]   - Field: ‘earlySignal’
[17:39:09.746]   - Field: ‘lazy’
[17:39:09.746]   - Field: ‘state’
[17:39:09.747] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:09.747] - Launch lazy future ...
[17:39:09.747] Packages needed by the future expression (n = 0): <none>
[17:39:09.747] Packages needed by future strategies (n = 0): <none>
[17:39:09.748] {
[17:39:09.748]     {
[17:39:09.748]         {
[17:39:09.748]             ...future.startTime <- base::Sys.time()
[17:39:09.748]             {
[17:39:09.748]                 {
[17:39:09.748]                   {
[17:39:09.748]                     {
[17:39:09.748]                       base::local({
[17:39:09.748]                         has_future <- base::requireNamespace("future", 
[17:39:09.748]                           quietly = TRUE)
[17:39:09.748]                         if (has_future) {
[17:39:09.748]                           ns <- base::getNamespace("future")
[17:39:09.748]                           version <- ns[[".package"]][["version"]]
[17:39:09.748]                           if (is.null(version)) 
[17:39:09.748]                             version <- utils::packageVersion("future")
[17:39:09.748]                         }
[17:39:09.748]                         else {
[17:39:09.748]                           version <- NULL
[17:39:09.748]                         }
[17:39:09.748]                         if (!has_future || version < "1.8.0") {
[17:39:09.748]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.748]                             "", base::R.version$version.string), 
[17:39:09.748]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:09.748]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:09.748]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.748]                               "release", "version")], collapse = " "), 
[17:39:09.748]                             hostname = base::Sys.info()[["nodename"]])
[17:39:09.748]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.748]                             info)
[17:39:09.748]                           info <- base::paste(info, collapse = "; ")
[17:39:09.748]                           if (!has_future) {
[17:39:09.748]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.748]                               info)
[17:39:09.748]                           }
[17:39:09.748]                           else {
[17:39:09.748]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.748]                               info, version)
[17:39:09.748]                           }
[17:39:09.748]                           base::stop(msg)
[17:39:09.748]                         }
[17:39:09.748]                       })
[17:39:09.748]                     }
[17:39:09.748]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:09.748]                     base::options(mc.cores = 1L)
[17:39:09.748]                   }
[17:39:09.748]                   ...future.strategy.old <- future::plan("list")
[17:39:09.748]                   options(future.plan = NULL)
[17:39:09.748]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.748]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.748]                 }
[17:39:09.748]                 ...future.workdir <- getwd()
[17:39:09.748]             }
[17:39:09.748]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.748]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.748]         }
[17:39:09.748]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.748]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.748]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.748]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.748]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.748]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.748]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.748]             base::names(...future.oldOptions))
[17:39:09.748]     }
[17:39:09.748]     if (FALSE) {
[17:39:09.748]     }
[17:39:09.748]     else {
[17:39:09.748]         if (TRUE) {
[17:39:09.748]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.748]                 open = "w")
[17:39:09.748]         }
[17:39:09.748]         else {
[17:39:09.748]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.748]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.748]         }
[17:39:09.748]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.748]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.748]             base::sink(type = "output", split = FALSE)
[17:39:09.748]             base::close(...future.stdout)
[17:39:09.748]         }, add = TRUE)
[17:39:09.748]     }
[17:39:09.748]     ...future.frame <- base::sys.nframe()
[17:39:09.748]     ...future.conditions <- base::list()
[17:39:09.748]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.748]     if (FALSE) {
[17:39:09.748]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.748]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.748]     }
[17:39:09.748]     ...future.result <- base::tryCatch({
[17:39:09.748]         base::withCallingHandlers({
[17:39:09.748]             ...future.value <- base::withVisible(base::local({
[17:39:09.748]                 withCallingHandlers({
[17:39:09.748]                   {
[17:39:09.748]                     do.call(function(...) {
[17:39:09.748]                       sum(x, ...)
[17:39:09.748]                     }, args = future.call.arguments)
[17:39:09.748]                   }
[17:39:09.748]                 }, immediateCondition = function(cond) {
[17:39:09.748]                   save_rds <- function (object, pathname, ...) 
[17:39:09.748]                   {
[17:39:09.748]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:09.748]                     if (file_test("-f", pathname_tmp)) {
[17:39:09.748]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.748]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:09.748]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.748]                         fi_tmp[["mtime"]])
[17:39:09.748]                     }
[17:39:09.748]                     tryCatch({
[17:39:09.748]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:09.748]                     }, error = function(ex) {
[17:39:09.748]                       msg <- conditionMessage(ex)
[17:39:09.748]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.748]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:09.748]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.748]                         fi_tmp[["mtime"]], msg)
[17:39:09.748]                       ex$message <- msg
[17:39:09.748]                       stop(ex)
[17:39:09.748]                     })
[17:39:09.748]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:09.748]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:09.748]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:09.748]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.748]                       fi <- file.info(pathname)
[17:39:09.748]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:09.748]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.748]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:09.748]                         fi[["size"]], fi[["mtime"]])
[17:39:09.748]                       stop(msg)
[17:39:09.748]                     }
[17:39:09.748]                     invisible(pathname)
[17:39:09.748]                   }
[17:39:09.748]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:09.748]                     rootPath = tempdir()) 
[17:39:09.748]                   {
[17:39:09.748]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:09.748]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:09.748]                       tmpdir = path, fileext = ".rds")
[17:39:09.748]                     save_rds(obj, file)
[17:39:09.748]                   }
[17:39:09.748]                   saveImmediateCondition(cond, path = "/tmp/Rtmp6U4g1T/.future/immediateConditions")
[17:39:09.748]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.748]                   {
[17:39:09.748]                     inherits <- base::inherits
[17:39:09.748]                     invokeRestart <- base::invokeRestart
[17:39:09.748]                     is.null <- base::is.null
[17:39:09.748]                     muffled <- FALSE
[17:39:09.748]                     if (inherits(cond, "message")) {
[17:39:09.748]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:09.748]                       if (muffled) 
[17:39:09.748]                         invokeRestart("muffleMessage")
[17:39:09.748]                     }
[17:39:09.748]                     else if (inherits(cond, "warning")) {
[17:39:09.748]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:09.748]                       if (muffled) 
[17:39:09.748]                         invokeRestart("muffleWarning")
[17:39:09.748]                     }
[17:39:09.748]                     else if (inherits(cond, "condition")) {
[17:39:09.748]                       if (!is.null(pattern)) {
[17:39:09.748]                         computeRestarts <- base::computeRestarts
[17:39:09.748]                         grepl <- base::grepl
[17:39:09.748]                         restarts <- computeRestarts(cond)
[17:39:09.748]                         for (restart in restarts) {
[17:39:09.748]                           name <- restart$name
[17:39:09.748]                           if (is.null(name)) 
[17:39:09.748]                             next
[17:39:09.748]                           if (!grepl(pattern, name)) 
[17:39:09.748]                             next
[17:39:09.748]                           invokeRestart(restart)
[17:39:09.748]                           muffled <- TRUE
[17:39:09.748]                           break
[17:39:09.748]                         }
[17:39:09.748]                       }
[17:39:09.748]                     }
[17:39:09.748]                     invisible(muffled)
[17:39:09.748]                   }
[17:39:09.748]                   muffleCondition(cond)
[17:39:09.748]                 })
[17:39:09.748]             }))
[17:39:09.748]             future::FutureResult(value = ...future.value$value, 
[17:39:09.748]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.748]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.748]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.748]                     ...future.globalenv.names))
[17:39:09.748]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.748]         }, condition = base::local({
[17:39:09.748]             c <- base::c
[17:39:09.748]             inherits <- base::inherits
[17:39:09.748]             invokeRestart <- base::invokeRestart
[17:39:09.748]             length <- base::length
[17:39:09.748]             list <- base::list
[17:39:09.748]             seq.int <- base::seq.int
[17:39:09.748]             signalCondition <- base::signalCondition
[17:39:09.748]             sys.calls <- base::sys.calls
[17:39:09.748]             `[[` <- base::`[[`
[17:39:09.748]             `+` <- base::`+`
[17:39:09.748]             `<<-` <- base::`<<-`
[17:39:09.748]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.748]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.748]                   3L)]
[17:39:09.748]             }
[17:39:09.748]             function(cond) {
[17:39:09.748]                 is_error <- inherits(cond, "error")
[17:39:09.748]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.748]                   NULL)
[17:39:09.748]                 if (is_error) {
[17:39:09.748]                   sessionInformation <- function() {
[17:39:09.748]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.748]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.748]                       search = base::search(), system = base::Sys.info())
[17:39:09.748]                   }
[17:39:09.748]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.748]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.748]                     cond$call), session = sessionInformation(), 
[17:39:09.748]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.748]                   signalCondition(cond)
[17:39:09.748]                 }
[17:39:09.748]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.748]                 "immediateCondition"))) {
[17:39:09.748]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.748]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.748]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.748]                   if (TRUE && !signal) {
[17:39:09.748]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.748]                     {
[17:39:09.748]                       inherits <- base::inherits
[17:39:09.748]                       invokeRestart <- base::invokeRestart
[17:39:09.748]                       is.null <- base::is.null
[17:39:09.748]                       muffled <- FALSE
[17:39:09.748]                       if (inherits(cond, "message")) {
[17:39:09.748]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.748]                         if (muffled) 
[17:39:09.748]                           invokeRestart("muffleMessage")
[17:39:09.748]                       }
[17:39:09.748]                       else if (inherits(cond, "warning")) {
[17:39:09.748]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.748]                         if (muffled) 
[17:39:09.748]                           invokeRestart("muffleWarning")
[17:39:09.748]                       }
[17:39:09.748]                       else if (inherits(cond, "condition")) {
[17:39:09.748]                         if (!is.null(pattern)) {
[17:39:09.748]                           computeRestarts <- base::computeRestarts
[17:39:09.748]                           grepl <- base::grepl
[17:39:09.748]                           restarts <- computeRestarts(cond)
[17:39:09.748]                           for (restart in restarts) {
[17:39:09.748]                             name <- restart$name
[17:39:09.748]                             if (is.null(name)) 
[17:39:09.748]                               next
[17:39:09.748]                             if (!grepl(pattern, name)) 
[17:39:09.748]                               next
[17:39:09.748]                             invokeRestart(restart)
[17:39:09.748]                             muffled <- TRUE
[17:39:09.748]                             break
[17:39:09.748]                           }
[17:39:09.748]                         }
[17:39:09.748]                       }
[17:39:09.748]                       invisible(muffled)
[17:39:09.748]                     }
[17:39:09.748]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.748]                   }
[17:39:09.748]                 }
[17:39:09.748]                 else {
[17:39:09.748]                   if (TRUE) {
[17:39:09.748]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.748]                     {
[17:39:09.748]                       inherits <- base::inherits
[17:39:09.748]                       invokeRestart <- base::invokeRestart
[17:39:09.748]                       is.null <- base::is.null
[17:39:09.748]                       muffled <- FALSE
[17:39:09.748]                       if (inherits(cond, "message")) {
[17:39:09.748]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.748]                         if (muffled) 
[17:39:09.748]                           invokeRestart("muffleMessage")
[17:39:09.748]                       }
[17:39:09.748]                       else if (inherits(cond, "warning")) {
[17:39:09.748]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.748]                         if (muffled) 
[17:39:09.748]                           invokeRestart("muffleWarning")
[17:39:09.748]                       }
[17:39:09.748]                       else if (inherits(cond, "condition")) {
[17:39:09.748]                         if (!is.null(pattern)) {
[17:39:09.748]                           computeRestarts <- base::computeRestarts
[17:39:09.748]                           grepl <- base::grepl
[17:39:09.748]                           restarts <- computeRestarts(cond)
[17:39:09.748]                           for (restart in restarts) {
[17:39:09.748]                             name <- restart$name
[17:39:09.748]                             if (is.null(name)) 
[17:39:09.748]                               next
[17:39:09.748]                             if (!grepl(pattern, name)) 
[17:39:09.748]                               next
[17:39:09.748]                             invokeRestart(restart)
[17:39:09.748]                             muffled <- TRUE
[17:39:09.748]                             break
[17:39:09.748]                           }
[17:39:09.748]                         }
[17:39:09.748]                       }
[17:39:09.748]                       invisible(muffled)
[17:39:09.748]                     }
[17:39:09.748]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.748]                   }
[17:39:09.748]                 }
[17:39:09.748]             }
[17:39:09.748]         }))
[17:39:09.748]     }, error = function(ex) {
[17:39:09.748]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.748]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.748]                 ...future.rng), started = ...future.startTime, 
[17:39:09.748]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.748]             version = "1.8"), class = "FutureResult")
[17:39:09.748]     }, finally = {
[17:39:09.748]         if (!identical(...future.workdir, getwd())) 
[17:39:09.748]             setwd(...future.workdir)
[17:39:09.748]         {
[17:39:09.748]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.748]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.748]             }
[17:39:09.748]             base::options(...future.oldOptions)
[17:39:09.748]             if (.Platform$OS.type == "windows") {
[17:39:09.748]                 old_names <- names(...future.oldEnvVars)
[17:39:09.748]                 envs <- base::Sys.getenv()
[17:39:09.748]                 names <- names(envs)
[17:39:09.748]                 common <- intersect(names, old_names)
[17:39:09.748]                 added <- setdiff(names, old_names)
[17:39:09.748]                 removed <- setdiff(old_names, names)
[17:39:09.748]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.748]                   envs[common]]
[17:39:09.748]                 NAMES <- toupper(changed)
[17:39:09.748]                 args <- list()
[17:39:09.748]                 for (kk in seq_along(NAMES)) {
[17:39:09.748]                   name <- changed[[kk]]
[17:39:09.748]                   NAME <- NAMES[[kk]]
[17:39:09.748]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.748]                     next
[17:39:09.748]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.748]                 }
[17:39:09.748]                 NAMES <- toupper(added)
[17:39:09.748]                 for (kk in seq_along(NAMES)) {
[17:39:09.748]                   name <- added[[kk]]
[17:39:09.748]                   NAME <- NAMES[[kk]]
[17:39:09.748]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.748]                     next
[17:39:09.748]                   args[[name]] <- ""
[17:39:09.748]                 }
[17:39:09.748]                 NAMES <- toupper(removed)
[17:39:09.748]                 for (kk in seq_along(NAMES)) {
[17:39:09.748]                   name <- removed[[kk]]
[17:39:09.748]                   NAME <- NAMES[[kk]]
[17:39:09.748]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.748]                     next
[17:39:09.748]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.748]                 }
[17:39:09.748]                 if (length(args) > 0) 
[17:39:09.748]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.748]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.748]             }
[17:39:09.748]             else {
[17:39:09.748]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.748]             }
[17:39:09.748]             {
[17:39:09.748]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.748]                   0L) {
[17:39:09.748]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.748]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.748]                   base::options(opts)
[17:39:09.748]                 }
[17:39:09.748]                 {
[17:39:09.748]                   {
[17:39:09.748]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:09.748]                     NULL
[17:39:09.748]                   }
[17:39:09.748]                   options(future.plan = NULL)
[17:39:09.748]                   if (is.na(NA_character_)) 
[17:39:09.748]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.748]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.748]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.748]                     .init = FALSE)
[17:39:09.748]                 }
[17:39:09.748]             }
[17:39:09.748]         }
[17:39:09.748]     })
[17:39:09.748]     if (TRUE) {
[17:39:09.748]         base::sink(type = "output", split = FALSE)
[17:39:09.748]         if (TRUE) {
[17:39:09.748]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.748]         }
[17:39:09.748]         else {
[17:39:09.748]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.748]         }
[17:39:09.748]         base::close(...future.stdout)
[17:39:09.748]         ...future.stdout <- NULL
[17:39:09.748]     }
[17:39:09.748]     ...future.result$conditions <- ...future.conditions
[17:39:09.748]     ...future.result$finished <- base::Sys.time()
[17:39:09.748]     ...future.result
[17:39:09.748] }
[17:39:09.750] assign_globals() ...
[17:39:09.750] List of 2
[17:39:09.750]  $ x                    : int [1:2] 1 2
[17:39:09.750]  $ future.call.arguments:List of 1
[17:39:09.750]   ..$ : num 3
[17:39:09.750]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:39:09.750]  - attr(*, "where")=List of 2
[17:39:09.750]   ..$ x                    :<environment: R_EmptyEnv> 
[17:39:09.750]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[17:39:09.750]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:09.750]  - attr(*, "resolved")= logi FALSE
[17:39:09.750]  - attr(*, "total_size")= num 112
[17:39:09.750]  - attr(*, "already-done")= logi TRUE
[17:39:09.755] - copied ‘x’ to environment
[17:39:09.755] - copied ‘future.call.arguments’ to environment
[17:39:09.755] assign_globals() ... done
[17:39:09.755] requestCore(): workers = 2
[17:39:09.757] MulticoreFuture started
[17:39:09.758] - Launch lazy future ... done
[17:39:09.758] run() for ‘MulticoreFuture’ ... done
[17:39:09.758] result() for MulticoreFuture ...
[17:39:09.758] plan(): Setting new future strategy stack:
[17:39:09.759] List of future strategies:
[17:39:09.759] 1. sequential:
[17:39:09.759]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.759]    - tweaked: FALSE
[17:39:09.759]    - call: NULL
[17:39:09.760] plan(): nbrOfWorkers() = 1
[17:39:09.762] plan(): Setting new future strategy stack:
[17:39:09.762] List of future strategies:
[17:39:09.762] 1. multicore:
[17:39:09.762]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:09.762]    - tweaked: FALSE
[17:39:09.762]    - call: plan(strategy, substitute = FALSE)
[17:39:09.768] plan(): nbrOfWorkers() = 2
[17:39:09.769] result() for MulticoreFuture ...
[17:39:09.769] result() for MulticoreFuture ... done
[17:39:09.769] result() for MulticoreFuture ... done
[17:39:09.769] result() for MulticoreFuture ...
[17:39:09.769] result() for MulticoreFuture ... done
[1] 6
** Sum function 'C' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x5582e05e2468>
Arguments '...' exists: FALSE
[17:39:09.770] getGlobalsAndPackages() ...
[17:39:09.770] Searching for globals...
[17:39:09.772] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[17:39:09.772] Searching for globals ... DONE
[17:39:09.772] Resolving globals: FALSE
[17:39:09.773] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:09.774] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:39:09.774] - globals: [2] ‘x’, ‘y’
[17:39:09.774] 
[17:39:09.774] getGlobalsAndPackages() ... DONE
[17:39:09.774] run() for ‘Future’ ...
[17:39:09.775] - state: ‘created’
[17:39:09.775] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:09.779] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:09.779] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:09.779]   - Field: ‘label’
[17:39:09.780]   - Field: ‘local’
[17:39:09.780]   - Field: ‘owner’
[17:39:09.780]   - Field: ‘envir’
[17:39:09.780]   - Field: ‘workers’
[17:39:09.780]   - Field: ‘packages’
[17:39:09.780]   - Field: ‘gc’
[17:39:09.780]   - Field: ‘job’
[17:39:09.780]   - Field: ‘conditions’
[17:39:09.780]   - Field: ‘expr’
[17:39:09.781]   - Field: ‘uuid’
[17:39:09.781]   - Field: ‘seed’
[17:39:09.781]   - Field: ‘version’
[17:39:09.781]   - Field: ‘result’
[17:39:09.781]   - Field: ‘asynchronous’
[17:39:09.781]   - Field: ‘calls’
[17:39:09.781]   - Field: ‘globals’
[17:39:09.781]   - Field: ‘stdout’
[17:39:09.781]   - Field: ‘earlySignal’
[17:39:09.782]   - Field: ‘lazy’
[17:39:09.782]   - Field: ‘state’
[17:39:09.782] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:09.782] - Launch lazy future ...
[17:39:09.782] Packages needed by the future expression (n = 0): <none>
[17:39:09.782] Packages needed by future strategies (n = 0): <none>
[17:39:09.783] {
[17:39:09.783]     {
[17:39:09.783]         {
[17:39:09.783]             ...future.startTime <- base::Sys.time()
[17:39:09.783]             {
[17:39:09.783]                 {
[17:39:09.783]                   {
[17:39:09.783]                     {
[17:39:09.783]                       base::local({
[17:39:09.783]                         has_future <- base::requireNamespace("future", 
[17:39:09.783]                           quietly = TRUE)
[17:39:09.783]                         if (has_future) {
[17:39:09.783]                           ns <- base::getNamespace("future")
[17:39:09.783]                           version <- ns[[".package"]][["version"]]
[17:39:09.783]                           if (is.null(version)) 
[17:39:09.783]                             version <- utils::packageVersion("future")
[17:39:09.783]                         }
[17:39:09.783]                         else {
[17:39:09.783]                           version <- NULL
[17:39:09.783]                         }
[17:39:09.783]                         if (!has_future || version < "1.8.0") {
[17:39:09.783]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.783]                             "", base::R.version$version.string), 
[17:39:09.783]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:09.783]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:09.783]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.783]                               "release", "version")], collapse = " "), 
[17:39:09.783]                             hostname = base::Sys.info()[["nodename"]])
[17:39:09.783]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.783]                             info)
[17:39:09.783]                           info <- base::paste(info, collapse = "; ")
[17:39:09.783]                           if (!has_future) {
[17:39:09.783]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.783]                               info)
[17:39:09.783]                           }
[17:39:09.783]                           else {
[17:39:09.783]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.783]                               info, version)
[17:39:09.783]                           }
[17:39:09.783]                           base::stop(msg)
[17:39:09.783]                         }
[17:39:09.783]                       })
[17:39:09.783]                     }
[17:39:09.783]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:09.783]                     base::options(mc.cores = 1L)
[17:39:09.783]                   }
[17:39:09.783]                   ...future.strategy.old <- future::plan("list")
[17:39:09.783]                   options(future.plan = NULL)
[17:39:09.783]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.783]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.783]                 }
[17:39:09.783]                 ...future.workdir <- getwd()
[17:39:09.783]             }
[17:39:09.783]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.783]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.783]         }
[17:39:09.783]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.783]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.783]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.783]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.783]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.783]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.783]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.783]             base::names(...future.oldOptions))
[17:39:09.783]     }
[17:39:09.783]     if (FALSE) {
[17:39:09.783]     }
[17:39:09.783]     else {
[17:39:09.783]         if (TRUE) {
[17:39:09.783]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.783]                 open = "w")
[17:39:09.783]         }
[17:39:09.783]         else {
[17:39:09.783]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.783]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.783]         }
[17:39:09.783]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.783]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.783]             base::sink(type = "output", split = FALSE)
[17:39:09.783]             base::close(...future.stdout)
[17:39:09.783]         }, add = TRUE)
[17:39:09.783]     }
[17:39:09.783]     ...future.frame <- base::sys.nframe()
[17:39:09.783]     ...future.conditions <- base::list()
[17:39:09.783]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.783]     if (FALSE) {
[17:39:09.783]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.783]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.783]     }
[17:39:09.783]     ...future.result <- base::tryCatch({
[17:39:09.783]         base::withCallingHandlers({
[17:39:09.783]             ...future.value <- base::withVisible(base::local({
[17:39:09.783]                 withCallingHandlers({
[17:39:09.783]                   {
[17:39:09.783]                     sum(x, y)
[17:39:09.783]                   }
[17:39:09.783]                 }, immediateCondition = function(cond) {
[17:39:09.783]                   save_rds <- function (object, pathname, ...) 
[17:39:09.783]                   {
[17:39:09.783]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:09.783]                     if (file_test("-f", pathname_tmp)) {
[17:39:09.783]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.783]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:09.783]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.783]                         fi_tmp[["mtime"]])
[17:39:09.783]                     }
[17:39:09.783]                     tryCatch({
[17:39:09.783]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:09.783]                     }, error = function(ex) {
[17:39:09.783]                       msg <- conditionMessage(ex)
[17:39:09.783]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.783]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:09.783]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.783]                         fi_tmp[["mtime"]], msg)
[17:39:09.783]                       ex$message <- msg
[17:39:09.783]                       stop(ex)
[17:39:09.783]                     })
[17:39:09.783]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:09.783]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:09.783]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:09.783]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.783]                       fi <- file.info(pathname)
[17:39:09.783]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:09.783]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.783]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:09.783]                         fi[["size"]], fi[["mtime"]])
[17:39:09.783]                       stop(msg)
[17:39:09.783]                     }
[17:39:09.783]                     invisible(pathname)
[17:39:09.783]                   }
[17:39:09.783]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:09.783]                     rootPath = tempdir()) 
[17:39:09.783]                   {
[17:39:09.783]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:09.783]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:09.783]                       tmpdir = path, fileext = ".rds")
[17:39:09.783]                     save_rds(obj, file)
[17:39:09.783]                   }
[17:39:09.783]                   saveImmediateCondition(cond, path = "/tmp/Rtmp6U4g1T/.future/immediateConditions")
[17:39:09.783]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.783]                   {
[17:39:09.783]                     inherits <- base::inherits
[17:39:09.783]                     invokeRestart <- base::invokeRestart
[17:39:09.783]                     is.null <- base::is.null
[17:39:09.783]                     muffled <- FALSE
[17:39:09.783]                     if (inherits(cond, "message")) {
[17:39:09.783]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:09.783]                       if (muffled) 
[17:39:09.783]                         invokeRestart("muffleMessage")
[17:39:09.783]                     }
[17:39:09.783]                     else if (inherits(cond, "warning")) {
[17:39:09.783]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:09.783]                       if (muffled) 
[17:39:09.783]                         invokeRestart("muffleWarning")
[17:39:09.783]                     }
[17:39:09.783]                     else if (inherits(cond, "condition")) {
[17:39:09.783]                       if (!is.null(pattern)) {
[17:39:09.783]                         computeRestarts <- base::computeRestarts
[17:39:09.783]                         grepl <- base::grepl
[17:39:09.783]                         restarts <- computeRestarts(cond)
[17:39:09.783]                         for (restart in restarts) {
[17:39:09.783]                           name <- restart$name
[17:39:09.783]                           if (is.null(name)) 
[17:39:09.783]                             next
[17:39:09.783]                           if (!grepl(pattern, name)) 
[17:39:09.783]                             next
[17:39:09.783]                           invokeRestart(restart)
[17:39:09.783]                           muffled <- TRUE
[17:39:09.783]                           break
[17:39:09.783]                         }
[17:39:09.783]                       }
[17:39:09.783]                     }
[17:39:09.783]                     invisible(muffled)
[17:39:09.783]                   }
[17:39:09.783]                   muffleCondition(cond)
[17:39:09.783]                 })
[17:39:09.783]             }))
[17:39:09.783]             future::FutureResult(value = ...future.value$value, 
[17:39:09.783]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.783]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.783]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.783]                     ...future.globalenv.names))
[17:39:09.783]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.783]         }, condition = base::local({
[17:39:09.783]             c <- base::c
[17:39:09.783]             inherits <- base::inherits
[17:39:09.783]             invokeRestart <- base::invokeRestart
[17:39:09.783]             length <- base::length
[17:39:09.783]             list <- base::list
[17:39:09.783]             seq.int <- base::seq.int
[17:39:09.783]             signalCondition <- base::signalCondition
[17:39:09.783]             sys.calls <- base::sys.calls
[17:39:09.783]             `[[` <- base::`[[`
[17:39:09.783]             `+` <- base::`+`
[17:39:09.783]             `<<-` <- base::`<<-`
[17:39:09.783]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.783]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.783]                   3L)]
[17:39:09.783]             }
[17:39:09.783]             function(cond) {
[17:39:09.783]                 is_error <- inherits(cond, "error")
[17:39:09.783]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.783]                   NULL)
[17:39:09.783]                 if (is_error) {
[17:39:09.783]                   sessionInformation <- function() {
[17:39:09.783]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.783]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.783]                       search = base::search(), system = base::Sys.info())
[17:39:09.783]                   }
[17:39:09.783]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.783]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.783]                     cond$call), session = sessionInformation(), 
[17:39:09.783]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.783]                   signalCondition(cond)
[17:39:09.783]                 }
[17:39:09.783]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.783]                 "immediateCondition"))) {
[17:39:09.783]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.783]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.783]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.783]                   if (TRUE && !signal) {
[17:39:09.783]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.783]                     {
[17:39:09.783]                       inherits <- base::inherits
[17:39:09.783]                       invokeRestart <- base::invokeRestart
[17:39:09.783]                       is.null <- base::is.null
[17:39:09.783]                       muffled <- FALSE
[17:39:09.783]                       if (inherits(cond, "message")) {
[17:39:09.783]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.783]                         if (muffled) 
[17:39:09.783]                           invokeRestart("muffleMessage")
[17:39:09.783]                       }
[17:39:09.783]                       else if (inherits(cond, "warning")) {
[17:39:09.783]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.783]                         if (muffled) 
[17:39:09.783]                           invokeRestart("muffleWarning")
[17:39:09.783]                       }
[17:39:09.783]                       else if (inherits(cond, "condition")) {
[17:39:09.783]                         if (!is.null(pattern)) {
[17:39:09.783]                           computeRestarts <- base::computeRestarts
[17:39:09.783]                           grepl <- base::grepl
[17:39:09.783]                           restarts <- computeRestarts(cond)
[17:39:09.783]                           for (restart in restarts) {
[17:39:09.783]                             name <- restart$name
[17:39:09.783]                             if (is.null(name)) 
[17:39:09.783]                               next
[17:39:09.783]                             if (!grepl(pattern, name)) 
[17:39:09.783]                               next
[17:39:09.783]                             invokeRestart(restart)
[17:39:09.783]                             muffled <- TRUE
[17:39:09.783]                             break
[17:39:09.783]                           }
[17:39:09.783]                         }
[17:39:09.783]                       }
[17:39:09.783]                       invisible(muffled)
[17:39:09.783]                     }
[17:39:09.783]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.783]                   }
[17:39:09.783]                 }
[17:39:09.783]                 else {
[17:39:09.783]                   if (TRUE) {
[17:39:09.783]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.783]                     {
[17:39:09.783]                       inherits <- base::inherits
[17:39:09.783]                       invokeRestart <- base::invokeRestart
[17:39:09.783]                       is.null <- base::is.null
[17:39:09.783]                       muffled <- FALSE
[17:39:09.783]                       if (inherits(cond, "message")) {
[17:39:09.783]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.783]                         if (muffled) 
[17:39:09.783]                           invokeRestart("muffleMessage")
[17:39:09.783]                       }
[17:39:09.783]                       else if (inherits(cond, "warning")) {
[17:39:09.783]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.783]                         if (muffled) 
[17:39:09.783]                           invokeRestart("muffleWarning")
[17:39:09.783]                       }
[17:39:09.783]                       else if (inherits(cond, "condition")) {
[17:39:09.783]                         if (!is.null(pattern)) {
[17:39:09.783]                           computeRestarts <- base::computeRestarts
[17:39:09.783]                           grepl <- base::grepl
[17:39:09.783]                           restarts <- computeRestarts(cond)
[17:39:09.783]                           for (restart in restarts) {
[17:39:09.783]                             name <- restart$name
[17:39:09.783]                             if (is.null(name)) 
[17:39:09.783]                               next
[17:39:09.783]                             if (!grepl(pattern, name)) 
[17:39:09.783]                               next
[17:39:09.783]                             invokeRestart(restart)
[17:39:09.783]                             muffled <- TRUE
[17:39:09.783]                             break
[17:39:09.783]                           }
[17:39:09.783]                         }
[17:39:09.783]                       }
[17:39:09.783]                       invisible(muffled)
[17:39:09.783]                     }
[17:39:09.783]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.783]                   }
[17:39:09.783]                 }
[17:39:09.783]             }
[17:39:09.783]         }))
[17:39:09.783]     }, error = function(ex) {
[17:39:09.783]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.783]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.783]                 ...future.rng), started = ...future.startTime, 
[17:39:09.783]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.783]             version = "1.8"), class = "FutureResult")
[17:39:09.783]     }, finally = {
[17:39:09.783]         if (!identical(...future.workdir, getwd())) 
[17:39:09.783]             setwd(...future.workdir)
[17:39:09.783]         {
[17:39:09.783]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.783]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.783]             }
[17:39:09.783]             base::options(...future.oldOptions)
[17:39:09.783]             if (.Platform$OS.type == "windows") {
[17:39:09.783]                 old_names <- names(...future.oldEnvVars)
[17:39:09.783]                 envs <- base::Sys.getenv()
[17:39:09.783]                 names <- names(envs)
[17:39:09.783]                 common <- intersect(names, old_names)
[17:39:09.783]                 added <- setdiff(names, old_names)
[17:39:09.783]                 removed <- setdiff(old_names, names)
[17:39:09.783]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.783]                   envs[common]]
[17:39:09.783]                 NAMES <- toupper(changed)
[17:39:09.783]                 args <- list()
[17:39:09.783]                 for (kk in seq_along(NAMES)) {
[17:39:09.783]                   name <- changed[[kk]]
[17:39:09.783]                   NAME <- NAMES[[kk]]
[17:39:09.783]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.783]                     next
[17:39:09.783]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.783]                 }
[17:39:09.783]                 NAMES <- toupper(added)
[17:39:09.783]                 for (kk in seq_along(NAMES)) {
[17:39:09.783]                   name <- added[[kk]]
[17:39:09.783]                   NAME <- NAMES[[kk]]
[17:39:09.783]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.783]                     next
[17:39:09.783]                   args[[name]] <- ""
[17:39:09.783]                 }
[17:39:09.783]                 NAMES <- toupper(removed)
[17:39:09.783]                 for (kk in seq_along(NAMES)) {
[17:39:09.783]                   name <- removed[[kk]]
[17:39:09.783]                   NAME <- NAMES[[kk]]
[17:39:09.783]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.783]                     next
[17:39:09.783]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.783]                 }
[17:39:09.783]                 if (length(args) > 0) 
[17:39:09.783]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.783]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.783]             }
[17:39:09.783]             else {
[17:39:09.783]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.783]             }
[17:39:09.783]             {
[17:39:09.783]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.783]                   0L) {
[17:39:09.783]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.783]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.783]                   base::options(opts)
[17:39:09.783]                 }
[17:39:09.783]                 {
[17:39:09.783]                   {
[17:39:09.783]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:09.783]                     NULL
[17:39:09.783]                   }
[17:39:09.783]                   options(future.plan = NULL)
[17:39:09.783]                   if (is.na(NA_character_)) 
[17:39:09.783]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.783]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.783]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.783]                     .init = FALSE)
[17:39:09.783]                 }
[17:39:09.783]             }
[17:39:09.783]         }
[17:39:09.783]     })
[17:39:09.783]     if (TRUE) {
[17:39:09.783]         base::sink(type = "output", split = FALSE)
[17:39:09.783]         if (TRUE) {
[17:39:09.783]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.783]         }
[17:39:09.783]         else {
[17:39:09.783]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.783]         }
[17:39:09.783]         base::close(...future.stdout)
[17:39:09.783]         ...future.stdout <- NULL
[17:39:09.783]     }
[17:39:09.783]     ...future.result$conditions <- ...future.conditions
[17:39:09.783]     ...future.result$finished <- base::Sys.time()
[17:39:09.783]     ...future.result
[17:39:09.783] }
[17:39:09.786] assign_globals() ...
[17:39:09.786] List of 2
[17:39:09.786]  $ x: int [1:2] 1 2
[17:39:09.786]  $ y: num 3
[17:39:09.786]  - attr(*, "where")=List of 2
[17:39:09.786]   ..$ x:<environment: R_EmptyEnv> 
[17:39:09.786]   ..$ y:<environment: R_EmptyEnv> 
[17:39:09.786]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:09.786]  - attr(*, "resolved")= logi FALSE
[17:39:09.786]  - attr(*, "total_size")= num 112
[17:39:09.786]  - attr(*, "already-done")= logi TRUE
[17:39:09.793] - copied ‘x’ to environment
[17:39:09.793] - copied ‘y’ to environment
[17:39:09.793] assign_globals() ... done
[17:39:09.793] requestCore(): workers = 2
[17:39:09.795] MulticoreFuture started
[17:39:09.796] - Launch lazy future ... done
[17:39:09.796] run() for ‘MulticoreFuture’ ... done
[17:39:09.797] result() for MulticoreFuture ...
[17:39:09.797] plan(): Setting new future strategy stack:
[17:39:09.797] List of future strategies:
[17:39:09.797] 1. sequential:
[17:39:09.797]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.797]    - tweaked: FALSE
[17:39:09.797]    - call: NULL
[17:39:09.798] plan(): nbrOfWorkers() = 1
[17:39:09.800] plan(): Setting new future strategy stack:
[17:39:09.800] List of future strategies:
[17:39:09.800] 1. multicore:
[17:39:09.800]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:09.800]    - tweaked: FALSE
[17:39:09.800]    - call: plan(strategy, substitute = FALSE)
[17:39:09.806] plan(): nbrOfWorkers() = 2
[17:39:09.807] result() for MulticoreFuture ...
[17:39:09.807] result() for MulticoreFuture ... done
[17:39:09.807] result() for MulticoreFuture ... done
[17:39:09.807] result() for MulticoreFuture ...
[17:39:09.807] result() for MulticoreFuture ... done
[1] 6
** Sum function 'D' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5582e077e0c0>
Arguments '...' exists: FALSE
[17:39:09.808] getGlobalsAndPackages() ...
[17:39:09.808] Searching for globals...
[17:39:09.811] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[17:39:09.811] Searching for globals ... DONE
[17:39:09.811] Resolving globals: FALSE
[17:39:09.811] Tweak future expression to call with '...' arguments ...
[17:39:09.812] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:09.812] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:39:09.812] - globals: [2] ‘x’, ‘y’
[17:39:09.812] 
[17:39:09.813] getGlobalsAndPackages() ... DONE
[17:39:09.813] run() for ‘Future’ ...
[17:39:09.813] - state: ‘created’
[17:39:09.813] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:09.817] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:09.817] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:09.818]   - Field: ‘label’
[17:39:09.818]   - Field: ‘local’
[17:39:09.818]   - Field: ‘owner’
[17:39:09.818]   - Field: ‘envir’
[17:39:09.818]   - Field: ‘workers’
[17:39:09.818]   - Field: ‘packages’
[17:39:09.818]   - Field: ‘gc’
[17:39:09.818]   - Field: ‘job’
[17:39:09.818]   - Field: ‘conditions’
[17:39:09.819]   - Field: ‘expr’
[17:39:09.819]   - Field: ‘uuid’
[17:39:09.819]   - Field: ‘seed’
[17:39:09.819]   - Field: ‘version’
[17:39:09.819]   - Field: ‘result’
[17:39:09.819]   - Field: ‘asynchronous’
[17:39:09.819]   - Field: ‘calls’
[17:39:09.819]   - Field: ‘globals’
[17:39:09.819]   - Field: ‘stdout’
[17:39:09.820]   - Field: ‘earlySignal’
[17:39:09.820]   - Field: ‘lazy’
[17:39:09.820]   - Field: ‘state’
[17:39:09.820] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:09.820] - Launch lazy future ...
[17:39:09.820] Packages needed by the future expression (n = 0): <none>
[17:39:09.821] Packages needed by future strategies (n = 0): <none>
[17:39:09.821] {
[17:39:09.821]     {
[17:39:09.821]         {
[17:39:09.821]             ...future.startTime <- base::Sys.time()
[17:39:09.821]             {
[17:39:09.821]                 {
[17:39:09.821]                   {
[17:39:09.821]                     {
[17:39:09.821]                       base::local({
[17:39:09.821]                         has_future <- base::requireNamespace("future", 
[17:39:09.821]                           quietly = TRUE)
[17:39:09.821]                         if (has_future) {
[17:39:09.821]                           ns <- base::getNamespace("future")
[17:39:09.821]                           version <- ns[[".package"]][["version"]]
[17:39:09.821]                           if (is.null(version)) 
[17:39:09.821]                             version <- utils::packageVersion("future")
[17:39:09.821]                         }
[17:39:09.821]                         else {
[17:39:09.821]                           version <- NULL
[17:39:09.821]                         }
[17:39:09.821]                         if (!has_future || version < "1.8.0") {
[17:39:09.821]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.821]                             "", base::R.version$version.string), 
[17:39:09.821]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:09.821]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:09.821]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.821]                               "release", "version")], collapse = " "), 
[17:39:09.821]                             hostname = base::Sys.info()[["nodename"]])
[17:39:09.821]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.821]                             info)
[17:39:09.821]                           info <- base::paste(info, collapse = "; ")
[17:39:09.821]                           if (!has_future) {
[17:39:09.821]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.821]                               info)
[17:39:09.821]                           }
[17:39:09.821]                           else {
[17:39:09.821]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.821]                               info, version)
[17:39:09.821]                           }
[17:39:09.821]                           base::stop(msg)
[17:39:09.821]                         }
[17:39:09.821]                       })
[17:39:09.821]                     }
[17:39:09.821]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:09.821]                     base::options(mc.cores = 1L)
[17:39:09.821]                   }
[17:39:09.821]                   ...future.strategy.old <- future::plan("list")
[17:39:09.821]                   options(future.plan = NULL)
[17:39:09.821]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.821]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.821]                 }
[17:39:09.821]                 ...future.workdir <- getwd()
[17:39:09.821]             }
[17:39:09.821]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.821]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.821]         }
[17:39:09.821]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.821]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.821]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.821]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.821]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.821]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.821]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.821]             base::names(...future.oldOptions))
[17:39:09.821]     }
[17:39:09.821]     if (FALSE) {
[17:39:09.821]     }
[17:39:09.821]     else {
[17:39:09.821]         if (TRUE) {
[17:39:09.821]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.821]                 open = "w")
[17:39:09.821]         }
[17:39:09.821]         else {
[17:39:09.821]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.821]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.821]         }
[17:39:09.821]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.821]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.821]             base::sink(type = "output", split = FALSE)
[17:39:09.821]             base::close(...future.stdout)
[17:39:09.821]         }, add = TRUE)
[17:39:09.821]     }
[17:39:09.821]     ...future.frame <- base::sys.nframe()
[17:39:09.821]     ...future.conditions <- base::list()
[17:39:09.821]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.821]     if (FALSE) {
[17:39:09.821]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.821]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.821]     }
[17:39:09.821]     ...future.result <- base::tryCatch({
[17:39:09.821]         base::withCallingHandlers({
[17:39:09.821]             ...future.value <- base::withVisible(base::local({
[17:39:09.821]                 withCallingHandlers({
[17:39:09.821]                   {
[17:39:09.821]                     sum(x, y, ...)
[17:39:09.821]                   }
[17:39:09.821]                 }, immediateCondition = function(cond) {
[17:39:09.821]                   save_rds <- function (object, pathname, ...) 
[17:39:09.821]                   {
[17:39:09.821]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:09.821]                     if (file_test("-f", pathname_tmp)) {
[17:39:09.821]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.821]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:09.821]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.821]                         fi_tmp[["mtime"]])
[17:39:09.821]                     }
[17:39:09.821]                     tryCatch({
[17:39:09.821]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:09.821]                     }, error = function(ex) {
[17:39:09.821]                       msg <- conditionMessage(ex)
[17:39:09.821]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.821]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:09.821]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.821]                         fi_tmp[["mtime"]], msg)
[17:39:09.821]                       ex$message <- msg
[17:39:09.821]                       stop(ex)
[17:39:09.821]                     })
[17:39:09.821]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:09.821]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:09.821]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:09.821]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.821]                       fi <- file.info(pathname)
[17:39:09.821]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:09.821]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.821]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:09.821]                         fi[["size"]], fi[["mtime"]])
[17:39:09.821]                       stop(msg)
[17:39:09.821]                     }
[17:39:09.821]                     invisible(pathname)
[17:39:09.821]                   }
[17:39:09.821]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:09.821]                     rootPath = tempdir()) 
[17:39:09.821]                   {
[17:39:09.821]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:09.821]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:09.821]                       tmpdir = path, fileext = ".rds")
[17:39:09.821]                     save_rds(obj, file)
[17:39:09.821]                   }
[17:39:09.821]                   saveImmediateCondition(cond, path = "/tmp/Rtmp6U4g1T/.future/immediateConditions")
[17:39:09.821]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.821]                   {
[17:39:09.821]                     inherits <- base::inherits
[17:39:09.821]                     invokeRestart <- base::invokeRestart
[17:39:09.821]                     is.null <- base::is.null
[17:39:09.821]                     muffled <- FALSE
[17:39:09.821]                     if (inherits(cond, "message")) {
[17:39:09.821]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:09.821]                       if (muffled) 
[17:39:09.821]                         invokeRestart("muffleMessage")
[17:39:09.821]                     }
[17:39:09.821]                     else if (inherits(cond, "warning")) {
[17:39:09.821]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:09.821]                       if (muffled) 
[17:39:09.821]                         invokeRestart("muffleWarning")
[17:39:09.821]                     }
[17:39:09.821]                     else if (inherits(cond, "condition")) {
[17:39:09.821]                       if (!is.null(pattern)) {
[17:39:09.821]                         computeRestarts <- base::computeRestarts
[17:39:09.821]                         grepl <- base::grepl
[17:39:09.821]                         restarts <- computeRestarts(cond)
[17:39:09.821]                         for (restart in restarts) {
[17:39:09.821]                           name <- restart$name
[17:39:09.821]                           if (is.null(name)) 
[17:39:09.821]                             next
[17:39:09.821]                           if (!grepl(pattern, name)) 
[17:39:09.821]                             next
[17:39:09.821]                           invokeRestart(restart)
[17:39:09.821]                           muffled <- TRUE
[17:39:09.821]                           break
[17:39:09.821]                         }
[17:39:09.821]                       }
[17:39:09.821]                     }
[17:39:09.821]                     invisible(muffled)
[17:39:09.821]                   }
[17:39:09.821]                   muffleCondition(cond)
[17:39:09.821]                 })
[17:39:09.821]             }))
[17:39:09.821]             future::FutureResult(value = ...future.value$value, 
[17:39:09.821]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.821]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.821]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.821]                     ...future.globalenv.names))
[17:39:09.821]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.821]         }, condition = base::local({
[17:39:09.821]             c <- base::c
[17:39:09.821]             inherits <- base::inherits
[17:39:09.821]             invokeRestart <- base::invokeRestart
[17:39:09.821]             length <- base::length
[17:39:09.821]             list <- base::list
[17:39:09.821]             seq.int <- base::seq.int
[17:39:09.821]             signalCondition <- base::signalCondition
[17:39:09.821]             sys.calls <- base::sys.calls
[17:39:09.821]             `[[` <- base::`[[`
[17:39:09.821]             `+` <- base::`+`
[17:39:09.821]             `<<-` <- base::`<<-`
[17:39:09.821]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.821]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.821]                   3L)]
[17:39:09.821]             }
[17:39:09.821]             function(cond) {
[17:39:09.821]                 is_error <- inherits(cond, "error")
[17:39:09.821]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.821]                   NULL)
[17:39:09.821]                 if (is_error) {
[17:39:09.821]                   sessionInformation <- function() {
[17:39:09.821]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.821]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.821]                       search = base::search(), system = base::Sys.info())
[17:39:09.821]                   }
[17:39:09.821]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.821]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.821]                     cond$call), session = sessionInformation(), 
[17:39:09.821]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.821]                   signalCondition(cond)
[17:39:09.821]                 }
[17:39:09.821]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.821]                 "immediateCondition"))) {
[17:39:09.821]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.821]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.821]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.821]                   if (TRUE && !signal) {
[17:39:09.821]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.821]                     {
[17:39:09.821]                       inherits <- base::inherits
[17:39:09.821]                       invokeRestart <- base::invokeRestart
[17:39:09.821]                       is.null <- base::is.null
[17:39:09.821]                       muffled <- FALSE
[17:39:09.821]                       if (inherits(cond, "message")) {
[17:39:09.821]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.821]                         if (muffled) 
[17:39:09.821]                           invokeRestart("muffleMessage")
[17:39:09.821]                       }
[17:39:09.821]                       else if (inherits(cond, "warning")) {
[17:39:09.821]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.821]                         if (muffled) 
[17:39:09.821]                           invokeRestart("muffleWarning")
[17:39:09.821]                       }
[17:39:09.821]                       else if (inherits(cond, "condition")) {
[17:39:09.821]                         if (!is.null(pattern)) {
[17:39:09.821]                           computeRestarts <- base::computeRestarts
[17:39:09.821]                           grepl <- base::grepl
[17:39:09.821]                           restarts <- computeRestarts(cond)
[17:39:09.821]                           for (restart in restarts) {
[17:39:09.821]                             name <- restart$name
[17:39:09.821]                             if (is.null(name)) 
[17:39:09.821]                               next
[17:39:09.821]                             if (!grepl(pattern, name)) 
[17:39:09.821]                               next
[17:39:09.821]                             invokeRestart(restart)
[17:39:09.821]                             muffled <- TRUE
[17:39:09.821]                             break
[17:39:09.821]                           }
[17:39:09.821]                         }
[17:39:09.821]                       }
[17:39:09.821]                       invisible(muffled)
[17:39:09.821]                     }
[17:39:09.821]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.821]                   }
[17:39:09.821]                 }
[17:39:09.821]                 else {
[17:39:09.821]                   if (TRUE) {
[17:39:09.821]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.821]                     {
[17:39:09.821]                       inherits <- base::inherits
[17:39:09.821]                       invokeRestart <- base::invokeRestart
[17:39:09.821]                       is.null <- base::is.null
[17:39:09.821]                       muffled <- FALSE
[17:39:09.821]                       if (inherits(cond, "message")) {
[17:39:09.821]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.821]                         if (muffled) 
[17:39:09.821]                           invokeRestart("muffleMessage")
[17:39:09.821]                       }
[17:39:09.821]                       else if (inherits(cond, "warning")) {
[17:39:09.821]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.821]                         if (muffled) 
[17:39:09.821]                           invokeRestart("muffleWarning")
[17:39:09.821]                       }
[17:39:09.821]                       else if (inherits(cond, "condition")) {
[17:39:09.821]                         if (!is.null(pattern)) {
[17:39:09.821]                           computeRestarts <- base::computeRestarts
[17:39:09.821]                           grepl <- base::grepl
[17:39:09.821]                           restarts <- computeRestarts(cond)
[17:39:09.821]                           for (restart in restarts) {
[17:39:09.821]                             name <- restart$name
[17:39:09.821]                             if (is.null(name)) 
[17:39:09.821]                               next
[17:39:09.821]                             if (!grepl(pattern, name)) 
[17:39:09.821]                               next
[17:39:09.821]                             invokeRestart(restart)
[17:39:09.821]                             muffled <- TRUE
[17:39:09.821]                             break
[17:39:09.821]                           }
[17:39:09.821]                         }
[17:39:09.821]                       }
[17:39:09.821]                       invisible(muffled)
[17:39:09.821]                     }
[17:39:09.821]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.821]                   }
[17:39:09.821]                 }
[17:39:09.821]             }
[17:39:09.821]         }))
[17:39:09.821]     }, error = function(ex) {
[17:39:09.821]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.821]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.821]                 ...future.rng), started = ...future.startTime, 
[17:39:09.821]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.821]             version = "1.8"), class = "FutureResult")
[17:39:09.821]     }, finally = {
[17:39:09.821]         if (!identical(...future.workdir, getwd())) 
[17:39:09.821]             setwd(...future.workdir)
[17:39:09.821]         {
[17:39:09.821]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.821]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.821]             }
[17:39:09.821]             base::options(...future.oldOptions)
[17:39:09.821]             if (.Platform$OS.type == "windows") {
[17:39:09.821]                 old_names <- names(...future.oldEnvVars)
[17:39:09.821]                 envs <- base::Sys.getenv()
[17:39:09.821]                 names <- names(envs)
[17:39:09.821]                 common <- intersect(names, old_names)
[17:39:09.821]                 added <- setdiff(names, old_names)
[17:39:09.821]                 removed <- setdiff(old_names, names)
[17:39:09.821]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.821]                   envs[common]]
[17:39:09.821]                 NAMES <- toupper(changed)
[17:39:09.821]                 args <- list()
[17:39:09.821]                 for (kk in seq_along(NAMES)) {
[17:39:09.821]                   name <- changed[[kk]]
[17:39:09.821]                   NAME <- NAMES[[kk]]
[17:39:09.821]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.821]                     next
[17:39:09.821]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.821]                 }
[17:39:09.821]                 NAMES <- toupper(added)
[17:39:09.821]                 for (kk in seq_along(NAMES)) {
[17:39:09.821]                   name <- added[[kk]]
[17:39:09.821]                   NAME <- NAMES[[kk]]
[17:39:09.821]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.821]                     next
[17:39:09.821]                   args[[name]] <- ""
[17:39:09.821]                 }
[17:39:09.821]                 NAMES <- toupper(removed)
[17:39:09.821]                 for (kk in seq_along(NAMES)) {
[17:39:09.821]                   name <- removed[[kk]]
[17:39:09.821]                   NAME <- NAMES[[kk]]
[17:39:09.821]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.821]                     next
[17:39:09.821]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.821]                 }
[17:39:09.821]                 if (length(args) > 0) 
[17:39:09.821]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.821]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.821]             }
[17:39:09.821]             else {
[17:39:09.821]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.821]             }
[17:39:09.821]             {
[17:39:09.821]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.821]                   0L) {
[17:39:09.821]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.821]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.821]                   base::options(opts)
[17:39:09.821]                 }
[17:39:09.821]                 {
[17:39:09.821]                   {
[17:39:09.821]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:09.821]                     NULL
[17:39:09.821]                   }
[17:39:09.821]                   options(future.plan = NULL)
[17:39:09.821]                   if (is.na(NA_character_)) 
[17:39:09.821]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.821]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.821]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.821]                     .init = FALSE)
[17:39:09.821]                 }
[17:39:09.821]             }
[17:39:09.821]         }
[17:39:09.821]     })
[17:39:09.821]     if (TRUE) {
[17:39:09.821]         base::sink(type = "output", split = FALSE)
[17:39:09.821]         if (TRUE) {
[17:39:09.821]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.821]         }
[17:39:09.821]         else {
[17:39:09.821]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.821]         }
[17:39:09.821]         base::close(...future.stdout)
[17:39:09.821]         ...future.stdout <- NULL
[17:39:09.821]     }
[17:39:09.821]     ...future.result$conditions <- ...future.conditions
[17:39:09.821]     ...future.result$finished <- base::Sys.time()
[17:39:09.821]     ...future.result
[17:39:09.821] }
[17:39:09.824] assign_globals() ...
[17:39:09.824] List of 2
[17:39:09.824]  $ x: int [1:2] 1 2
[17:39:09.824]  $ y: num 3
[17:39:09.824]  - attr(*, "where")=List of 2
[17:39:09.824]   ..$ x:<environment: R_EmptyEnv> 
[17:39:09.824]   ..$ y:<environment: R_EmptyEnv> 
[17:39:09.824]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:09.824]  - attr(*, "resolved")= logi FALSE
[17:39:09.824]  - attr(*, "total_size")= num 112
[17:39:09.824]  - attr(*, "already-done")= logi TRUE
[17:39:09.827] - copied ‘x’ to environment
[17:39:09.828] - copied ‘y’ to environment
[17:39:09.828] assign_globals() ... done
[17:39:09.828] requestCore(): workers = 2
[17:39:09.830] MulticoreFuture started
[17:39:09.830] - Launch lazy future ... done
[17:39:09.830] run() for ‘MulticoreFuture’ ... done
[17:39:09.831] result() for MulticoreFuture ...
[17:39:09.831] plan(): Setting new future strategy stack:
[17:39:09.831] List of future strategies:
[17:39:09.831] 1. sequential:
[17:39:09.831]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.831]    - tweaked: FALSE
[17:39:09.831]    - call: NULL
[17:39:09.832] plan(): nbrOfWorkers() = 1
[17:39:09.834] plan(): Setting new future strategy stack:
[17:39:09.834] List of future strategies:
[17:39:09.834] 1. multicore:
[17:39:09.834]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:09.834]    - tweaked: FALSE
[17:39:09.834]    - call: plan(strategy, substitute = FALSE)
[17:39:09.839] plan(): nbrOfWorkers() = 2
[17:39:09.845] result() for MulticoreFuture ...
[17:39:09.845] result() for MulticoreFuture ... done
[17:39:09.846] signalConditions() ...
[17:39:09.846]  - include = ‘immediateCondition’
[17:39:09.846]  - exclude = 
[17:39:09.846]  - resignal = FALSE
[17:39:09.846]  - Number of conditions: 1
[17:39:09.846] signalConditions() ... done
[17:39:09.847] result() for MulticoreFuture ... done
[17:39:09.847] result() for MulticoreFuture ...
[17:39:09.847] result() for MulticoreFuture ... done
[17:39:09.847] signalConditions() ...
[17:39:09.847]  - include = ‘immediateCondition’
[17:39:09.847]  - exclude = 
[17:39:09.847]  - resignal = FALSE
[17:39:09.848]  - Number of conditions: 1
[17:39:09.848] signalConditions() ... done
[17:39:09.848] Future state: ‘finished’
[17:39:09.848] result() for MulticoreFuture ...
[17:39:09.848] result() for MulticoreFuture ... done
[17:39:09.848] signalConditions() ...
[17:39:09.849]  - include = ‘condition’
[17:39:09.849]  - exclude = ‘immediateCondition’
[17:39:09.849]  - resignal = TRUE
[17:39:09.849]  - Number of conditions: 1
[17:39:09.849]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:09.849] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/Rtmp6U4g1T/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multicore') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x5582e0d69798>
Arguments '...' exists: TRUE
[17:39:09.851] getGlobalsAndPackages() ...
[17:39:09.851] - globals passed as-is: [1] ‘...’
[17:39:09.851] Resolving globals: FALSE
[17:39:09.851] Tweak future expression to call with '...' arguments ...
[17:39:09.851] {
[17:39:09.851]     do.call(function(...) {
[17:39:09.851]         fcn <- function() sum(...)
[17:39:09.851]         fcn()
[17:39:09.851]     }, args = future.call.arguments)
[17:39:09.851] }
[17:39:09.851] Tweak future expression to call with '...' arguments ... DONE
[17:39:09.852] The total size of the 1 globals is 112 bytes (112 bytes)
[17:39:09.853] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[17:39:09.853] - globals: [1] ‘future.call.arguments’
[17:39:09.853] 
[17:39:09.853] getGlobalsAndPackages() ... DONE
[17:39:09.853] run() for ‘Future’ ...
[17:39:09.853] - state: ‘created’
[17:39:09.854] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:09.860] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:09.861] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:09.861]   - Field: ‘label’
[17:39:09.861]   - Field: ‘local’
[17:39:09.861]   - Field: ‘owner’
[17:39:09.861]   - Field: ‘envir’
[17:39:09.861]   - Field: ‘workers’
[17:39:09.861]   - Field: ‘packages’
[17:39:09.862]   - Field: ‘gc’
[17:39:09.862]   - Field: ‘job’
[17:39:09.862]   - Field: ‘conditions’
[17:39:09.862]   - Field: ‘expr’
[17:39:09.862]   - Field: ‘uuid’
[17:39:09.862]   - Field: ‘seed’
[17:39:09.862]   - Field: ‘version’
[17:39:09.862]   - Field: ‘result’
[17:39:09.863]   - Field: ‘asynchronous’
[17:39:09.863]   - Field: ‘calls’
[17:39:09.863]   - Field: ‘globals’
[17:39:09.863]   - Field: ‘stdout’
[17:39:09.863]   - Field: ‘earlySignal’
[17:39:09.863]   - Field: ‘lazy’
[17:39:09.863]   - Field: ‘state’
[17:39:09.863] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:09.863] - Launch lazy future ...
[17:39:09.864] Packages needed by the future expression (n = 0): <none>
[17:39:09.864] Packages needed by future strategies (n = 0): <none>
[17:39:09.865] {
[17:39:09.865]     {
[17:39:09.865]         {
[17:39:09.865]             ...future.startTime <- base::Sys.time()
[17:39:09.865]             {
[17:39:09.865]                 {
[17:39:09.865]                   {
[17:39:09.865]                     {
[17:39:09.865]                       base::local({
[17:39:09.865]                         has_future <- base::requireNamespace("future", 
[17:39:09.865]                           quietly = TRUE)
[17:39:09.865]                         if (has_future) {
[17:39:09.865]                           ns <- base::getNamespace("future")
[17:39:09.865]                           version <- ns[[".package"]][["version"]]
[17:39:09.865]                           if (is.null(version)) 
[17:39:09.865]                             version <- utils::packageVersion("future")
[17:39:09.865]                         }
[17:39:09.865]                         else {
[17:39:09.865]                           version <- NULL
[17:39:09.865]                         }
[17:39:09.865]                         if (!has_future || version < "1.8.0") {
[17:39:09.865]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.865]                             "", base::R.version$version.string), 
[17:39:09.865]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:09.865]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:09.865]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.865]                               "release", "version")], collapse = " "), 
[17:39:09.865]                             hostname = base::Sys.info()[["nodename"]])
[17:39:09.865]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.865]                             info)
[17:39:09.865]                           info <- base::paste(info, collapse = "; ")
[17:39:09.865]                           if (!has_future) {
[17:39:09.865]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.865]                               info)
[17:39:09.865]                           }
[17:39:09.865]                           else {
[17:39:09.865]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.865]                               info, version)
[17:39:09.865]                           }
[17:39:09.865]                           base::stop(msg)
[17:39:09.865]                         }
[17:39:09.865]                       })
[17:39:09.865]                     }
[17:39:09.865]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:09.865]                     base::options(mc.cores = 1L)
[17:39:09.865]                   }
[17:39:09.865]                   ...future.strategy.old <- future::plan("list")
[17:39:09.865]                   options(future.plan = NULL)
[17:39:09.865]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.865]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.865]                 }
[17:39:09.865]                 ...future.workdir <- getwd()
[17:39:09.865]             }
[17:39:09.865]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.865]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.865]         }
[17:39:09.865]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.865]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.865]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.865]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.865]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.865]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.865]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.865]             base::names(...future.oldOptions))
[17:39:09.865]     }
[17:39:09.865]     if (FALSE) {
[17:39:09.865]     }
[17:39:09.865]     else {
[17:39:09.865]         if (TRUE) {
[17:39:09.865]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.865]                 open = "w")
[17:39:09.865]         }
[17:39:09.865]         else {
[17:39:09.865]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.865]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.865]         }
[17:39:09.865]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.865]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.865]             base::sink(type = "output", split = FALSE)
[17:39:09.865]             base::close(...future.stdout)
[17:39:09.865]         }, add = TRUE)
[17:39:09.865]     }
[17:39:09.865]     ...future.frame <- base::sys.nframe()
[17:39:09.865]     ...future.conditions <- base::list()
[17:39:09.865]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.865]     if (FALSE) {
[17:39:09.865]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.865]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.865]     }
[17:39:09.865]     ...future.result <- base::tryCatch({
[17:39:09.865]         base::withCallingHandlers({
[17:39:09.865]             ...future.value <- base::withVisible(base::local({
[17:39:09.865]                 withCallingHandlers({
[17:39:09.865]                   {
[17:39:09.865]                     do.call(function(...) {
[17:39:09.865]                       fcn <- function() sum(...)
[17:39:09.865]                       fcn()
[17:39:09.865]                     }, args = future.call.arguments)
[17:39:09.865]                   }
[17:39:09.865]                 }, immediateCondition = function(cond) {
[17:39:09.865]                   save_rds <- function (object, pathname, ...) 
[17:39:09.865]                   {
[17:39:09.865]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:09.865]                     if (file_test("-f", pathname_tmp)) {
[17:39:09.865]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.865]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:09.865]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.865]                         fi_tmp[["mtime"]])
[17:39:09.865]                     }
[17:39:09.865]                     tryCatch({
[17:39:09.865]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:09.865]                     }, error = function(ex) {
[17:39:09.865]                       msg <- conditionMessage(ex)
[17:39:09.865]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.865]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:09.865]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.865]                         fi_tmp[["mtime"]], msg)
[17:39:09.865]                       ex$message <- msg
[17:39:09.865]                       stop(ex)
[17:39:09.865]                     })
[17:39:09.865]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:09.865]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:09.865]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:09.865]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.865]                       fi <- file.info(pathname)
[17:39:09.865]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:09.865]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.865]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:09.865]                         fi[["size"]], fi[["mtime"]])
[17:39:09.865]                       stop(msg)
[17:39:09.865]                     }
[17:39:09.865]                     invisible(pathname)
[17:39:09.865]                   }
[17:39:09.865]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:09.865]                     rootPath = tempdir()) 
[17:39:09.865]                   {
[17:39:09.865]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:09.865]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:09.865]                       tmpdir = path, fileext = ".rds")
[17:39:09.865]                     save_rds(obj, file)
[17:39:09.865]                   }
[17:39:09.865]                   saveImmediateCondition(cond, path = "/tmp/Rtmp6U4g1T/.future/immediateConditions")
[17:39:09.865]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.865]                   {
[17:39:09.865]                     inherits <- base::inherits
[17:39:09.865]                     invokeRestart <- base::invokeRestart
[17:39:09.865]                     is.null <- base::is.null
[17:39:09.865]                     muffled <- FALSE
[17:39:09.865]                     if (inherits(cond, "message")) {
[17:39:09.865]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:09.865]                       if (muffled) 
[17:39:09.865]                         invokeRestart("muffleMessage")
[17:39:09.865]                     }
[17:39:09.865]                     else if (inherits(cond, "warning")) {
[17:39:09.865]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:09.865]                       if (muffled) 
[17:39:09.865]                         invokeRestart("muffleWarning")
[17:39:09.865]                     }
[17:39:09.865]                     else if (inherits(cond, "condition")) {
[17:39:09.865]                       if (!is.null(pattern)) {
[17:39:09.865]                         computeRestarts <- base::computeRestarts
[17:39:09.865]                         grepl <- base::grepl
[17:39:09.865]                         restarts <- computeRestarts(cond)
[17:39:09.865]                         for (restart in restarts) {
[17:39:09.865]                           name <- restart$name
[17:39:09.865]                           if (is.null(name)) 
[17:39:09.865]                             next
[17:39:09.865]                           if (!grepl(pattern, name)) 
[17:39:09.865]                             next
[17:39:09.865]                           invokeRestart(restart)
[17:39:09.865]                           muffled <- TRUE
[17:39:09.865]                           break
[17:39:09.865]                         }
[17:39:09.865]                       }
[17:39:09.865]                     }
[17:39:09.865]                     invisible(muffled)
[17:39:09.865]                   }
[17:39:09.865]                   muffleCondition(cond)
[17:39:09.865]                 })
[17:39:09.865]             }))
[17:39:09.865]             future::FutureResult(value = ...future.value$value, 
[17:39:09.865]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.865]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.865]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.865]                     ...future.globalenv.names))
[17:39:09.865]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.865]         }, condition = base::local({
[17:39:09.865]             c <- base::c
[17:39:09.865]             inherits <- base::inherits
[17:39:09.865]             invokeRestart <- base::invokeRestart
[17:39:09.865]             length <- base::length
[17:39:09.865]             list <- base::list
[17:39:09.865]             seq.int <- base::seq.int
[17:39:09.865]             signalCondition <- base::signalCondition
[17:39:09.865]             sys.calls <- base::sys.calls
[17:39:09.865]             `[[` <- base::`[[`
[17:39:09.865]             `+` <- base::`+`
[17:39:09.865]             `<<-` <- base::`<<-`
[17:39:09.865]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.865]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.865]                   3L)]
[17:39:09.865]             }
[17:39:09.865]             function(cond) {
[17:39:09.865]                 is_error <- inherits(cond, "error")
[17:39:09.865]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.865]                   NULL)
[17:39:09.865]                 if (is_error) {
[17:39:09.865]                   sessionInformation <- function() {
[17:39:09.865]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.865]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.865]                       search = base::search(), system = base::Sys.info())
[17:39:09.865]                   }
[17:39:09.865]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.865]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.865]                     cond$call), session = sessionInformation(), 
[17:39:09.865]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.865]                   signalCondition(cond)
[17:39:09.865]                 }
[17:39:09.865]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.865]                 "immediateCondition"))) {
[17:39:09.865]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.865]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.865]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.865]                   if (TRUE && !signal) {
[17:39:09.865]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.865]                     {
[17:39:09.865]                       inherits <- base::inherits
[17:39:09.865]                       invokeRestart <- base::invokeRestart
[17:39:09.865]                       is.null <- base::is.null
[17:39:09.865]                       muffled <- FALSE
[17:39:09.865]                       if (inherits(cond, "message")) {
[17:39:09.865]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.865]                         if (muffled) 
[17:39:09.865]                           invokeRestart("muffleMessage")
[17:39:09.865]                       }
[17:39:09.865]                       else if (inherits(cond, "warning")) {
[17:39:09.865]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.865]                         if (muffled) 
[17:39:09.865]                           invokeRestart("muffleWarning")
[17:39:09.865]                       }
[17:39:09.865]                       else if (inherits(cond, "condition")) {
[17:39:09.865]                         if (!is.null(pattern)) {
[17:39:09.865]                           computeRestarts <- base::computeRestarts
[17:39:09.865]                           grepl <- base::grepl
[17:39:09.865]                           restarts <- computeRestarts(cond)
[17:39:09.865]                           for (restart in restarts) {
[17:39:09.865]                             name <- restart$name
[17:39:09.865]                             if (is.null(name)) 
[17:39:09.865]                               next
[17:39:09.865]                             if (!grepl(pattern, name)) 
[17:39:09.865]                               next
[17:39:09.865]                             invokeRestart(restart)
[17:39:09.865]                             muffled <- TRUE
[17:39:09.865]                             break
[17:39:09.865]                           }
[17:39:09.865]                         }
[17:39:09.865]                       }
[17:39:09.865]                       invisible(muffled)
[17:39:09.865]                     }
[17:39:09.865]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.865]                   }
[17:39:09.865]                 }
[17:39:09.865]                 else {
[17:39:09.865]                   if (TRUE) {
[17:39:09.865]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.865]                     {
[17:39:09.865]                       inherits <- base::inherits
[17:39:09.865]                       invokeRestart <- base::invokeRestart
[17:39:09.865]                       is.null <- base::is.null
[17:39:09.865]                       muffled <- FALSE
[17:39:09.865]                       if (inherits(cond, "message")) {
[17:39:09.865]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.865]                         if (muffled) 
[17:39:09.865]                           invokeRestart("muffleMessage")
[17:39:09.865]                       }
[17:39:09.865]                       else if (inherits(cond, "warning")) {
[17:39:09.865]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.865]                         if (muffled) 
[17:39:09.865]                           invokeRestart("muffleWarning")
[17:39:09.865]                       }
[17:39:09.865]                       else if (inherits(cond, "condition")) {
[17:39:09.865]                         if (!is.null(pattern)) {
[17:39:09.865]                           computeRestarts <- base::computeRestarts
[17:39:09.865]                           grepl <- base::grepl
[17:39:09.865]                           restarts <- computeRestarts(cond)
[17:39:09.865]                           for (restart in restarts) {
[17:39:09.865]                             name <- restart$name
[17:39:09.865]                             if (is.null(name)) 
[17:39:09.865]                               next
[17:39:09.865]                             if (!grepl(pattern, name)) 
[17:39:09.865]                               next
[17:39:09.865]                             invokeRestart(restart)
[17:39:09.865]                             muffled <- TRUE
[17:39:09.865]                             break
[17:39:09.865]                           }
[17:39:09.865]                         }
[17:39:09.865]                       }
[17:39:09.865]                       invisible(muffled)
[17:39:09.865]                     }
[17:39:09.865]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.865]                   }
[17:39:09.865]                 }
[17:39:09.865]             }
[17:39:09.865]         }))
[17:39:09.865]     }, error = function(ex) {
[17:39:09.865]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.865]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.865]                 ...future.rng), started = ...future.startTime, 
[17:39:09.865]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.865]             version = "1.8"), class = "FutureResult")
[17:39:09.865]     }, finally = {
[17:39:09.865]         if (!identical(...future.workdir, getwd())) 
[17:39:09.865]             setwd(...future.workdir)
[17:39:09.865]         {
[17:39:09.865]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.865]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.865]             }
[17:39:09.865]             base::options(...future.oldOptions)
[17:39:09.865]             if (.Platform$OS.type == "windows") {
[17:39:09.865]                 old_names <- names(...future.oldEnvVars)
[17:39:09.865]                 envs <- base::Sys.getenv()
[17:39:09.865]                 names <- names(envs)
[17:39:09.865]                 common <- intersect(names, old_names)
[17:39:09.865]                 added <- setdiff(names, old_names)
[17:39:09.865]                 removed <- setdiff(old_names, names)
[17:39:09.865]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.865]                   envs[common]]
[17:39:09.865]                 NAMES <- toupper(changed)
[17:39:09.865]                 args <- list()
[17:39:09.865]                 for (kk in seq_along(NAMES)) {
[17:39:09.865]                   name <- changed[[kk]]
[17:39:09.865]                   NAME <- NAMES[[kk]]
[17:39:09.865]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.865]                     next
[17:39:09.865]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.865]                 }
[17:39:09.865]                 NAMES <- toupper(added)
[17:39:09.865]                 for (kk in seq_along(NAMES)) {
[17:39:09.865]                   name <- added[[kk]]
[17:39:09.865]                   NAME <- NAMES[[kk]]
[17:39:09.865]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.865]                     next
[17:39:09.865]                   args[[name]] <- ""
[17:39:09.865]                 }
[17:39:09.865]                 NAMES <- toupper(removed)
[17:39:09.865]                 for (kk in seq_along(NAMES)) {
[17:39:09.865]                   name <- removed[[kk]]
[17:39:09.865]                   NAME <- NAMES[[kk]]
[17:39:09.865]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.865]                     next
[17:39:09.865]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.865]                 }
[17:39:09.865]                 if (length(args) > 0) 
[17:39:09.865]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.865]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.865]             }
[17:39:09.865]             else {
[17:39:09.865]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.865]             }
[17:39:09.865]             {
[17:39:09.865]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.865]                   0L) {
[17:39:09.865]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.865]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.865]                   base::options(opts)
[17:39:09.865]                 }
[17:39:09.865]                 {
[17:39:09.865]                   {
[17:39:09.865]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:09.865]                     NULL
[17:39:09.865]                   }
[17:39:09.865]                   options(future.plan = NULL)
[17:39:09.865]                   if (is.na(NA_character_)) 
[17:39:09.865]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.865]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.865]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.865]                     .init = FALSE)
[17:39:09.865]                 }
[17:39:09.865]             }
[17:39:09.865]         }
[17:39:09.865]     })
[17:39:09.865]     if (TRUE) {
[17:39:09.865]         base::sink(type = "output", split = FALSE)
[17:39:09.865]         if (TRUE) {
[17:39:09.865]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.865]         }
[17:39:09.865]         else {
[17:39:09.865]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.865]         }
[17:39:09.865]         base::close(...future.stdout)
[17:39:09.865]         ...future.stdout <- NULL
[17:39:09.865]     }
[17:39:09.865]     ...future.result$conditions <- ...future.conditions
[17:39:09.865]     ...future.result$finished <- base::Sys.time()
[17:39:09.865]     ...future.result
[17:39:09.865] }
[17:39:09.867] assign_globals() ...
[17:39:09.867] List of 1
[17:39:09.867]  $ future.call.arguments:List of 2
[17:39:09.867]   ..$ : int [1:2] 1 2
[17:39:09.867]   ..$ : num 3
[17:39:09.867]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:39:09.867]  - attr(*, "where")=List of 1
[17:39:09.867]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[17:39:09.867]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:09.867]  - attr(*, "resolved")= logi FALSE
[17:39:09.867]  - attr(*, "total_size")= num 112
[17:39:09.867]  - attr(*, "already-done")= logi TRUE
[17:39:09.871] - copied ‘future.call.arguments’ to environment
[17:39:09.871] assign_globals() ... done
[17:39:09.871] requestCore(): workers = 2
[17:39:09.873] MulticoreFuture started
[17:39:09.873] - Launch lazy future ... done
[17:39:09.874] run() for ‘MulticoreFuture’ ... done
[17:39:09.874] result() for MulticoreFuture ...
[17:39:09.874] plan(): Setting new future strategy stack:
[17:39:09.874] List of future strategies:
[17:39:09.874] 1. sequential:
[17:39:09.874]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.874]    - tweaked: FALSE
[17:39:09.874]    - call: NULL
[17:39:09.875] plan(): nbrOfWorkers() = 1
[17:39:09.877] plan(): Setting new future strategy stack:
[17:39:09.878] List of future strategies:
[17:39:09.878] 1. multicore:
[17:39:09.878]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:09.878]    - tweaked: FALSE
[17:39:09.878]    - call: plan(strategy, substitute = FALSE)
[17:39:09.883] plan(): nbrOfWorkers() = 2
[17:39:09.883] result() for MulticoreFuture ...
[17:39:09.884] result() for MulticoreFuture ... done
[17:39:09.884] result() for MulticoreFuture ... done
[17:39:09.884] result() for MulticoreFuture ...
[17:39:09.884] result() for MulticoreFuture ... done
[1] 6
** Sum function 'F' with plan('multicore') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x5582dedafd68>
Using '...' in a formula
[17:39:09.885] getGlobalsAndPackages() ...
[17:39:09.885] Searching for globals...
[17:39:09.888] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[17:39:09.889] Searching for globals ... DONE
[17:39:09.889] Resolving globals: FALSE
[17:39:09.889] Tweak future expression to call with '...' arguments ...
[17:39:09.890] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[17:39:09.890] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:39:09.890] - globals: [3] ‘fcn’, ‘x’, ‘y’
[17:39:09.890] 
[17:39:09.890] getGlobalsAndPackages() ... DONE
[17:39:09.891] run() for ‘Future’ ...
[17:39:09.891] - state: ‘created’
[17:39:09.891] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:09.895] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:09.895] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:09.895]   - Field: ‘label’
[17:39:09.895]   - Field: ‘local’
[17:39:09.896]   - Field: ‘owner’
[17:39:09.896]   - Field: ‘envir’
[17:39:09.896]   - Field: ‘workers’
[17:39:09.896]   - Field: ‘packages’
[17:39:09.896]   - Field: ‘gc’
[17:39:09.896]   - Field: ‘job’
[17:39:09.896]   - Field: ‘conditions’
[17:39:09.896]   - Field: ‘expr’
[17:39:09.897]   - Field: ‘uuid’
[17:39:09.897]   - Field: ‘seed’
[17:39:09.897]   - Field: ‘version’
[17:39:09.897]   - Field: ‘result’
[17:39:09.897]   - Field: ‘asynchronous’
[17:39:09.897]   - Field: ‘calls’
[17:39:09.897]   - Field: ‘globals’
[17:39:09.897]   - Field: ‘stdout’
[17:39:09.897]   - Field: ‘earlySignal’
[17:39:09.897]   - Field: ‘lazy’
[17:39:09.898]   - Field: ‘state’
[17:39:09.898] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:09.898] - Launch lazy future ...
[17:39:09.898] Packages needed by the future expression (n = 0): <none>
[17:39:09.898] Packages needed by future strategies (n = 0): <none>
[17:39:09.899] {
[17:39:09.899]     {
[17:39:09.899]         {
[17:39:09.899]             ...future.startTime <- base::Sys.time()
[17:39:09.899]             {
[17:39:09.899]                 {
[17:39:09.899]                   {
[17:39:09.899]                     {
[17:39:09.899]                       base::local({
[17:39:09.899]                         has_future <- base::requireNamespace("future", 
[17:39:09.899]                           quietly = TRUE)
[17:39:09.899]                         if (has_future) {
[17:39:09.899]                           ns <- base::getNamespace("future")
[17:39:09.899]                           version <- ns[[".package"]][["version"]]
[17:39:09.899]                           if (is.null(version)) 
[17:39:09.899]                             version <- utils::packageVersion("future")
[17:39:09.899]                         }
[17:39:09.899]                         else {
[17:39:09.899]                           version <- NULL
[17:39:09.899]                         }
[17:39:09.899]                         if (!has_future || version < "1.8.0") {
[17:39:09.899]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:09.899]                             "", base::R.version$version.string), 
[17:39:09.899]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:09.899]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:09.899]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:09.899]                               "release", "version")], collapse = " "), 
[17:39:09.899]                             hostname = base::Sys.info()[["nodename"]])
[17:39:09.899]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:09.899]                             info)
[17:39:09.899]                           info <- base::paste(info, collapse = "; ")
[17:39:09.899]                           if (!has_future) {
[17:39:09.899]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:09.899]                               info)
[17:39:09.899]                           }
[17:39:09.899]                           else {
[17:39:09.899]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:09.899]                               info, version)
[17:39:09.899]                           }
[17:39:09.899]                           base::stop(msg)
[17:39:09.899]                         }
[17:39:09.899]                       })
[17:39:09.899]                     }
[17:39:09.899]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:09.899]                     base::options(mc.cores = 1L)
[17:39:09.899]                   }
[17:39:09.899]                   ...future.strategy.old <- future::plan("list")
[17:39:09.899]                   options(future.plan = NULL)
[17:39:09.899]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.899]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:09.899]                 }
[17:39:09.899]                 ...future.workdir <- getwd()
[17:39:09.899]             }
[17:39:09.899]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:09.899]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:09.899]         }
[17:39:09.899]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:09.899]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:09.899]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:09.899]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:09.899]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:09.899]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:09.899]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:09.899]             base::names(...future.oldOptions))
[17:39:09.899]     }
[17:39:09.899]     if (FALSE) {
[17:39:09.899]     }
[17:39:09.899]     else {
[17:39:09.899]         if (TRUE) {
[17:39:09.899]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:09.899]                 open = "w")
[17:39:09.899]         }
[17:39:09.899]         else {
[17:39:09.899]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:09.899]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:09.899]         }
[17:39:09.899]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:09.899]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:09.899]             base::sink(type = "output", split = FALSE)
[17:39:09.899]             base::close(...future.stdout)
[17:39:09.899]         }, add = TRUE)
[17:39:09.899]     }
[17:39:09.899]     ...future.frame <- base::sys.nframe()
[17:39:09.899]     ...future.conditions <- base::list()
[17:39:09.899]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:09.899]     if (FALSE) {
[17:39:09.899]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:09.899]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:09.899]     }
[17:39:09.899]     ...future.result <- base::tryCatch({
[17:39:09.899]         base::withCallingHandlers({
[17:39:09.899]             ...future.value <- base::withVisible(base::local({
[17:39:09.899]                 withCallingHandlers({
[17:39:09.899]                   fcn(x, y)
[17:39:09.899]                 }, immediateCondition = function(cond) {
[17:39:09.899]                   save_rds <- function (object, pathname, ...) 
[17:39:09.899]                   {
[17:39:09.899]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:09.899]                     if (file_test("-f", pathname_tmp)) {
[17:39:09.899]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.899]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:09.899]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.899]                         fi_tmp[["mtime"]])
[17:39:09.899]                     }
[17:39:09.899]                     tryCatch({
[17:39:09.899]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:09.899]                     }, error = function(ex) {
[17:39:09.899]                       msg <- conditionMessage(ex)
[17:39:09.899]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.899]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:09.899]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.899]                         fi_tmp[["mtime"]], msg)
[17:39:09.899]                       ex$message <- msg
[17:39:09.899]                       stop(ex)
[17:39:09.899]                     })
[17:39:09.899]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:09.899]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:09.899]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:09.899]                       fi_tmp <- file.info(pathname_tmp)
[17:39:09.899]                       fi <- file.info(pathname)
[17:39:09.899]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:09.899]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:09.899]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:09.899]                         fi[["size"]], fi[["mtime"]])
[17:39:09.899]                       stop(msg)
[17:39:09.899]                     }
[17:39:09.899]                     invisible(pathname)
[17:39:09.899]                   }
[17:39:09.899]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:09.899]                     rootPath = tempdir()) 
[17:39:09.899]                   {
[17:39:09.899]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:09.899]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:09.899]                       tmpdir = path, fileext = ".rds")
[17:39:09.899]                     save_rds(obj, file)
[17:39:09.899]                   }
[17:39:09.899]                   saveImmediateCondition(cond, path = "/tmp/Rtmp6U4g1T/.future/immediateConditions")
[17:39:09.899]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.899]                   {
[17:39:09.899]                     inherits <- base::inherits
[17:39:09.899]                     invokeRestart <- base::invokeRestart
[17:39:09.899]                     is.null <- base::is.null
[17:39:09.899]                     muffled <- FALSE
[17:39:09.899]                     if (inherits(cond, "message")) {
[17:39:09.899]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:09.899]                       if (muffled) 
[17:39:09.899]                         invokeRestart("muffleMessage")
[17:39:09.899]                     }
[17:39:09.899]                     else if (inherits(cond, "warning")) {
[17:39:09.899]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:09.899]                       if (muffled) 
[17:39:09.899]                         invokeRestart("muffleWarning")
[17:39:09.899]                     }
[17:39:09.899]                     else if (inherits(cond, "condition")) {
[17:39:09.899]                       if (!is.null(pattern)) {
[17:39:09.899]                         computeRestarts <- base::computeRestarts
[17:39:09.899]                         grepl <- base::grepl
[17:39:09.899]                         restarts <- computeRestarts(cond)
[17:39:09.899]                         for (restart in restarts) {
[17:39:09.899]                           name <- restart$name
[17:39:09.899]                           if (is.null(name)) 
[17:39:09.899]                             next
[17:39:09.899]                           if (!grepl(pattern, name)) 
[17:39:09.899]                             next
[17:39:09.899]                           invokeRestart(restart)
[17:39:09.899]                           muffled <- TRUE
[17:39:09.899]                           break
[17:39:09.899]                         }
[17:39:09.899]                       }
[17:39:09.899]                     }
[17:39:09.899]                     invisible(muffled)
[17:39:09.899]                   }
[17:39:09.899]                   muffleCondition(cond)
[17:39:09.899]                 })
[17:39:09.899]             }))
[17:39:09.899]             future::FutureResult(value = ...future.value$value, 
[17:39:09.899]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.899]                   ...future.rng), globalenv = if (FALSE) 
[17:39:09.899]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:09.899]                     ...future.globalenv.names))
[17:39:09.899]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:09.899]         }, condition = base::local({
[17:39:09.899]             c <- base::c
[17:39:09.899]             inherits <- base::inherits
[17:39:09.899]             invokeRestart <- base::invokeRestart
[17:39:09.899]             length <- base::length
[17:39:09.899]             list <- base::list
[17:39:09.899]             seq.int <- base::seq.int
[17:39:09.899]             signalCondition <- base::signalCondition
[17:39:09.899]             sys.calls <- base::sys.calls
[17:39:09.899]             `[[` <- base::`[[`
[17:39:09.899]             `+` <- base::`+`
[17:39:09.899]             `<<-` <- base::`<<-`
[17:39:09.899]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:09.899]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:09.899]                   3L)]
[17:39:09.899]             }
[17:39:09.899]             function(cond) {
[17:39:09.899]                 is_error <- inherits(cond, "error")
[17:39:09.899]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:09.899]                   NULL)
[17:39:09.899]                 if (is_error) {
[17:39:09.899]                   sessionInformation <- function() {
[17:39:09.899]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:09.899]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:09.899]                       search = base::search(), system = base::Sys.info())
[17:39:09.899]                   }
[17:39:09.899]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.899]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:09.899]                     cond$call), session = sessionInformation(), 
[17:39:09.899]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:09.899]                   signalCondition(cond)
[17:39:09.899]                 }
[17:39:09.899]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:09.899]                 "immediateCondition"))) {
[17:39:09.899]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:09.899]                   ...future.conditions[[length(...future.conditions) + 
[17:39:09.899]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:09.899]                   if (TRUE && !signal) {
[17:39:09.899]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.899]                     {
[17:39:09.899]                       inherits <- base::inherits
[17:39:09.899]                       invokeRestart <- base::invokeRestart
[17:39:09.899]                       is.null <- base::is.null
[17:39:09.899]                       muffled <- FALSE
[17:39:09.899]                       if (inherits(cond, "message")) {
[17:39:09.899]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.899]                         if (muffled) 
[17:39:09.899]                           invokeRestart("muffleMessage")
[17:39:09.899]                       }
[17:39:09.899]                       else if (inherits(cond, "warning")) {
[17:39:09.899]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.899]                         if (muffled) 
[17:39:09.899]                           invokeRestart("muffleWarning")
[17:39:09.899]                       }
[17:39:09.899]                       else if (inherits(cond, "condition")) {
[17:39:09.899]                         if (!is.null(pattern)) {
[17:39:09.899]                           computeRestarts <- base::computeRestarts
[17:39:09.899]                           grepl <- base::grepl
[17:39:09.899]                           restarts <- computeRestarts(cond)
[17:39:09.899]                           for (restart in restarts) {
[17:39:09.899]                             name <- restart$name
[17:39:09.899]                             if (is.null(name)) 
[17:39:09.899]                               next
[17:39:09.899]                             if (!grepl(pattern, name)) 
[17:39:09.899]                               next
[17:39:09.899]                             invokeRestart(restart)
[17:39:09.899]                             muffled <- TRUE
[17:39:09.899]                             break
[17:39:09.899]                           }
[17:39:09.899]                         }
[17:39:09.899]                       }
[17:39:09.899]                       invisible(muffled)
[17:39:09.899]                     }
[17:39:09.899]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.899]                   }
[17:39:09.899]                 }
[17:39:09.899]                 else {
[17:39:09.899]                   if (TRUE) {
[17:39:09.899]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:09.899]                     {
[17:39:09.899]                       inherits <- base::inherits
[17:39:09.899]                       invokeRestart <- base::invokeRestart
[17:39:09.899]                       is.null <- base::is.null
[17:39:09.899]                       muffled <- FALSE
[17:39:09.899]                       if (inherits(cond, "message")) {
[17:39:09.899]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:09.899]                         if (muffled) 
[17:39:09.899]                           invokeRestart("muffleMessage")
[17:39:09.899]                       }
[17:39:09.899]                       else if (inherits(cond, "warning")) {
[17:39:09.899]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:09.899]                         if (muffled) 
[17:39:09.899]                           invokeRestart("muffleWarning")
[17:39:09.899]                       }
[17:39:09.899]                       else if (inherits(cond, "condition")) {
[17:39:09.899]                         if (!is.null(pattern)) {
[17:39:09.899]                           computeRestarts <- base::computeRestarts
[17:39:09.899]                           grepl <- base::grepl
[17:39:09.899]                           restarts <- computeRestarts(cond)
[17:39:09.899]                           for (restart in restarts) {
[17:39:09.899]                             name <- restart$name
[17:39:09.899]                             if (is.null(name)) 
[17:39:09.899]                               next
[17:39:09.899]                             if (!grepl(pattern, name)) 
[17:39:09.899]                               next
[17:39:09.899]                             invokeRestart(restart)
[17:39:09.899]                             muffled <- TRUE
[17:39:09.899]                             break
[17:39:09.899]                           }
[17:39:09.899]                         }
[17:39:09.899]                       }
[17:39:09.899]                       invisible(muffled)
[17:39:09.899]                     }
[17:39:09.899]                     muffleCondition(cond, pattern = "^muffle")
[17:39:09.899]                   }
[17:39:09.899]                 }
[17:39:09.899]             }
[17:39:09.899]         }))
[17:39:09.899]     }, error = function(ex) {
[17:39:09.899]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:09.899]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:09.899]                 ...future.rng), started = ...future.startTime, 
[17:39:09.899]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:09.899]             version = "1.8"), class = "FutureResult")
[17:39:09.899]     }, finally = {
[17:39:09.899]         if (!identical(...future.workdir, getwd())) 
[17:39:09.899]             setwd(...future.workdir)
[17:39:09.899]         {
[17:39:09.899]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:09.899]                 ...future.oldOptions$nwarnings <- NULL
[17:39:09.899]             }
[17:39:09.899]             base::options(...future.oldOptions)
[17:39:09.899]             if (.Platform$OS.type == "windows") {
[17:39:09.899]                 old_names <- names(...future.oldEnvVars)
[17:39:09.899]                 envs <- base::Sys.getenv()
[17:39:09.899]                 names <- names(envs)
[17:39:09.899]                 common <- intersect(names, old_names)
[17:39:09.899]                 added <- setdiff(names, old_names)
[17:39:09.899]                 removed <- setdiff(old_names, names)
[17:39:09.899]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:09.899]                   envs[common]]
[17:39:09.899]                 NAMES <- toupper(changed)
[17:39:09.899]                 args <- list()
[17:39:09.899]                 for (kk in seq_along(NAMES)) {
[17:39:09.899]                   name <- changed[[kk]]
[17:39:09.899]                   NAME <- NAMES[[kk]]
[17:39:09.899]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.899]                     next
[17:39:09.899]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.899]                 }
[17:39:09.899]                 NAMES <- toupper(added)
[17:39:09.899]                 for (kk in seq_along(NAMES)) {
[17:39:09.899]                   name <- added[[kk]]
[17:39:09.899]                   NAME <- NAMES[[kk]]
[17:39:09.899]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.899]                     next
[17:39:09.899]                   args[[name]] <- ""
[17:39:09.899]                 }
[17:39:09.899]                 NAMES <- toupper(removed)
[17:39:09.899]                 for (kk in seq_along(NAMES)) {
[17:39:09.899]                   name <- removed[[kk]]
[17:39:09.899]                   NAME <- NAMES[[kk]]
[17:39:09.899]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:09.899]                     next
[17:39:09.899]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:09.899]                 }
[17:39:09.899]                 if (length(args) > 0) 
[17:39:09.899]                   base::do.call(base::Sys.setenv, args = args)
[17:39:09.899]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:09.899]             }
[17:39:09.899]             else {
[17:39:09.899]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:09.899]             }
[17:39:09.899]             {
[17:39:09.899]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:09.899]                   0L) {
[17:39:09.899]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:09.899]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:09.899]                   base::options(opts)
[17:39:09.899]                 }
[17:39:09.899]                 {
[17:39:09.899]                   {
[17:39:09.899]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:09.899]                     NULL
[17:39:09.899]                   }
[17:39:09.899]                   options(future.plan = NULL)
[17:39:09.899]                   if (is.na(NA_character_)) 
[17:39:09.899]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:09.899]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:09.899]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:09.899]                     .init = FALSE)
[17:39:09.899]                 }
[17:39:09.899]             }
[17:39:09.899]         }
[17:39:09.899]     })
[17:39:09.899]     if (TRUE) {
[17:39:09.899]         base::sink(type = "output", split = FALSE)
[17:39:09.899]         if (TRUE) {
[17:39:09.899]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:09.899]         }
[17:39:09.899]         else {
[17:39:09.899]             ...future.result["stdout"] <- base::list(NULL)
[17:39:09.899]         }
[17:39:09.899]         base::close(...future.stdout)
[17:39:09.899]         ...future.stdout <- NULL
[17:39:09.899]     }
[17:39:09.899]     ...future.result$conditions <- ...future.conditions
[17:39:09.899]     ...future.result$finished <- base::Sys.time()
[17:39:09.899]     ...future.result
[17:39:09.899] }
[17:39:09.901] assign_globals() ...
[17:39:09.901] List of 3
[17:39:09.901]  $ fcn:function (x, y)  
[17:39:09.901]  $ x  : int [1:2] 1 2
[17:39:09.901]  $ y  : num 3
[17:39:09.901]  - attr(*, "where")=List of 3
[17:39:09.901]   ..$ fcn:<environment: R_EmptyEnv> 
[17:39:09.901]   ..$ x  :<environment: R_EmptyEnv> 
[17:39:09.901]   ..$ y  :<environment: R_EmptyEnv> 
[17:39:09.901]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:09.901]  - attr(*, "resolved")= logi FALSE
[17:39:09.901]  - attr(*, "total_size")= num 4280
[17:39:09.901]  - attr(*, "already-done")= logi TRUE
[17:39:09.906] - reassign environment for ‘fcn’
[17:39:09.906] - copied ‘fcn’ to environment
[17:39:09.908] - copied ‘x’ to environment
[17:39:09.908] - copied ‘y’ to environment
[17:39:09.908] assign_globals() ... done
[17:39:09.908] requestCore(): workers = 2
[17:39:09.910] MulticoreFuture started
[17:39:09.911] - Launch lazy future ... done
[17:39:09.911] run() for ‘MulticoreFuture’ ... done
[17:39:09.911] result() for MulticoreFuture ...
[17:39:09.911] plan(): Setting new future strategy stack:
[17:39:09.912] List of future strategies:
[17:39:09.912] 1. sequential:
[17:39:09.912]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:09.912]    - tweaked: FALSE
[17:39:09.912]    - call: NULL
[17:39:09.913] plan(): nbrOfWorkers() = 1
[17:39:09.915] plan(): Setting new future strategy stack:
[17:39:09.915] List of future strategies:
[17:39:09.915] 1. multicore:
[17:39:09.915]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:09.915]    - tweaked: FALSE
[17:39:09.915]    - call: plan(strategy, substitute = FALSE)
[17:39:09.920] plan(): nbrOfWorkers() = 2
[17:39:09.921] result() for MulticoreFuture ...
[17:39:09.921] result() for MulticoreFuture ... done
[17:39:09.921] result() for MulticoreFuture ... done
[17:39:09.922] result() for MulticoreFuture ...
[17:39:09.922] result() for MulticoreFuture ... done
[1] 6
- plan('multisession') ...
[17:39:09.922] plan(): Setting new future strategy stack:
[17:39:09.923] List of future strategies:
[17:39:09.923] 1. multisession:
[17:39:09.923]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:09.923]    - tweaked: FALSE
[17:39:09.923]    - call: plan(strategy, substitute = FALSE)
[17:39:09.923] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:39:09.923] multisession:
[17:39:09.923] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:09.923] - tweaked: FALSE
[17:39:09.923] - call: plan(strategy, substitute = FALSE)
[17:39:09.930] getGlobalsAndPackages() ...
[17:39:09.930] Not searching for globals
[17:39:09.930] - globals: [0] <none>
[17:39:09.931] getGlobalsAndPackages() ... DONE
[17:39:09.931] [local output] makeClusterPSOCK() ...
[17:39:09.979] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:39:09.981] [local output] Base port: 11756
[17:39:09.981] [local output] Getting setup options for 2 cluster nodes ...
[17:39:09.981] [local output]  - Node 1 of 2 ...
[17:39:09.981] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:09.982] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp6U4g1T/worker.rank=1.parallelly.parent=40161.9ce114e735b9.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp6U4g1T/worker.rank=1.parallelly.parent=40161.9ce114e735b9.pid")'’
[17:39:10.175] - Possible to infer worker's PID: TRUE
[17:39:10.175] [local output] Rscript port: 11756

[17:39:10.176] [local output]  - Node 2 of 2 ...
[17:39:10.176] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:10.177] [local output] Rscript port: 11756

[17:39:10.177] [local output] Getting setup options for 2 cluster nodes ... done
[17:39:10.177] [local output]  - Parallel setup requested for some PSOCK nodes
[17:39:10.178] [local output] Setting up PSOCK nodes in parallel
[17:39:10.178] List of 36
[17:39:10.178]  $ worker          : chr "localhost"
[17:39:10.178]   ..- attr(*, "localhost")= logi TRUE
[17:39:10.178]  $ master          : chr "localhost"
[17:39:10.178]  $ port            : int 11756
[17:39:10.178]  $ connectTimeout  : num 120
[17:39:10.178]  $ timeout         : num 2592000
[17:39:10.178]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:39:10.178]  $ homogeneous     : logi TRUE
[17:39:10.178]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:39:10.178]  $ rscript_envs    : NULL
[17:39:10.178]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:10.178]  $ rscript_startup : NULL
[17:39:10.178]  $ rscript_sh      : chr "sh"
[17:39:10.178]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:10.178]  $ methods         : logi TRUE
[17:39:10.178]  $ socketOptions   : chr "no-delay"
[17:39:10.178]  $ useXDR          : logi FALSE
[17:39:10.178]  $ outfile         : chr "/dev/null"
[17:39:10.178]  $ renice          : int NA
[17:39:10.178]  $ rshcmd          : NULL
[17:39:10.178]  $ user            : chr(0) 
[17:39:10.178]  $ revtunnel       : logi FALSE
[17:39:10.178]  $ rshlogfile      : NULL
[17:39:10.178]  $ rshopts         : chr(0) 
[17:39:10.178]  $ rank            : int 1
[17:39:10.178]  $ manual          : logi FALSE
[17:39:10.178]  $ dryrun          : logi FALSE
[17:39:10.178]  $ quiet           : logi FALSE
[17:39:10.178]  $ setup_strategy  : chr "parallel"
[17:39:10.178]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:10.178]  $ pidfile         : chr "/tmp/Rtmp6U4g1T/worker.rank=1.parallelly.parent=40161.9ce114e735b9.pid"
[17:39:10.178]  $ rshcmd_label    : NULL
[17:39:10.178]  $ rsh_call        : NULL
[17:39:10.178]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:10.178]  $ localMachine    : logi TRUE
[17:39:10.178]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:39:10.178]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:39:10.178]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:39:10.178]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:39:10.178]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:39:10.178]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:39:10.178]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:39:10.178]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:39:10.178]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:39:10.178]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:39:10.178]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:39:10.178]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:39:10.178]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:39:10.178]  $ arguments       :List of 28
[17:39:10.178]   ..$ worker          : chr "localhost"
[17:39:10.178]   ..$ master          : NULL
[17:39:10.178]   ..$ port            : int 11756
[17:39:10.178]   ..$ connectTimeout  : num 120
[17:39:10.178]   ..$ timeout         : num 2592000
[17:39:10.178]   ..$ rscript         : NULL
[17:39:10.178]   ..$ homogeneous     : NULL
[17:39:10.178]   ..$ rscript_args    : NULL
[17:39:10.178]   ..$ rscript_envs    : NULL
[17:39:10.178]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:10.178]   ..$ rscript_startup : NULL
[17:39:10.178]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:39:10.178]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:10.178]   ..$ methods         : logi TRUE
[17:39:10.178]   ..$ socketOptions   : chr "no-delay"
[17:39:10.178]   ..$ useXDR          : logi FALSE
[17:39:10.178]   ..$ outfile         : chr "/dev/null"
[17:39:10.178]   ..$ renice          : int NA
[17:39:10.178]   ..$ rshcmd          : NULL
[17:39:10.178]   ..$ user            : NULL
[17:39:10.178]   ..$ revtunnel       : logi NA
[17:39:10.178]   ..$ rshlogfile      : NULL
[17:39:10.178]   ..$ rshopts         : NULL
[17:39:10.178]   ..$ rank            : int 1
[17:39:10.178]   ..$ manual          : logi FALSE
[17:39:10.178]   ..$ dryrun          : logi FALSE
[17:39:10.178]   ..$ quiet           : logi FALSE
[17:39:10.178]   ..$ setup_strategy  : chr "parallel"
[17:39:10.178]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:39:10.195] [local output] System call to launch all workers:
[17:39:10.195] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp6U4g1T/worker.rank=1.parallelly.parent=40161.9ce114e735b9.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11756 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:39:10.195] [local output] Starting PSOCK main server
[17:39:10.201] [local output] Workers launched
[17:39:10.201] [local output] Waiting for workers to connect back
[17:39:10.201]  - [local output] 0 workers out of 2 ready
[17:39:10.445]  - [local output] 0 workers out of 2 ready
[17:39:10.445]  - [local output] 1 workers out of 2 ready
[17:39:10.445]  - [local output] 2 workers out of 2 ready
[17:39:10.446] [local output] Launching of workers completed
[17:39:10.446] [local output] Collecting session information from workers
[17:39:10.446] [local output]  - Worker #1 of 2
[17:39:10.447] [local output]  - Worker #2 of 2
[17:39:10.447] [local output] makeClusterPSOCK() ... done
[17:39:10.459] Packages needed by the future expression (n = 0): <none>
[17:39:10.460] Packages needed by future strategies (n = 0): <none>
[17:39:10.460] {
[17:39:10.460]     {
[17:39:10.460]         {
[17:39:10.460]             ...future.startTime <- base::Sys.time()
[17:39:10.460]             {
[17:39:10.460]                 {
[17:39:10.460]                   {
[17:39:10.460]                     {
[17:39:10.460]                       base::local({
[17:39:10.460]                         has_future <- base::requireNamespace("future", 
[17:39:10.460]                           quietly = TRUE)
[17:39:10.460]                         if (has_future) {
[17:39:10.460]                           ns <- base::getNamespace("future")
[17:39:10.460]                           version <- ns[[".package"]][["version"]]
[17:39:10.460]                           if (is.null(version)) 
[17:39:10.460]                             version <- utils::packageVersion("future")
[17:39:10.460]                         }
[17:39:10.460]                         else {
[17:39:10.460]                           version <- NULL
[17:39:10.460]                         }
[17:39:10.460]                         if (!has_future || version < "1.8.0") {
[17:39:10.460]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:10.460]                             "", base::R.version$version.string), 
[17:39:10.460]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:10.460]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:10.460]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:10.460]                               "release", "version")], collapse = " "), 
[17:39:10.460]                             hostname = base::Sys.info()[["nodename"]])
[17:39:10.460]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:10.460]                             info)
[17:39:10.460]                           info <- base::paste(info, collapse = "; ")
[17:39:10.460]                           if (!has_future) {
[17:39:10.460]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:10.460]                               info)
[17:39:10.460]                           }
[17:39:10.460]                           else {
[17:39:10.460]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:10.460]                               info, version)
[17:39:10.460]                           }
[17:39:10.460]                           base::stop(msg)
[17:39:10.460]                         }
[17:39:10.460]                       })
[17:39:10.460]                     }
[17:39:10.460]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:10.460]                     base::options(mc.cores = 1L)
[17:39:10.460]                   }
[17:39:10.460]                   ...future.strategy.old <- future::plan("list")
[17:39:10.460]                   options(future.plan = NULL)
[17:39:10.460]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.460]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:10.460]                 }
[17:39:10.460]                 ...future.workdir <- getwd()
[17:39:10.460]             }
[17:39:10.460]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:10.460]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:10.460]         }
[17:39:10.460]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:10.460]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:10.460]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:10.460]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:10.460]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:10.460]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:10.460]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:10.460]             base::names(...future.oldOptions))
[17:39:10.460]     }
[17:39:10.460]     if (FALSE) {
[17:39:10.460]     }
[17:39:10.460]     else {
[17:39:10.460]         if (TRUE) {
[17:39:10.460]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:10.460]                 open = "w")
[17:39:10.460]         }
[17:39:10.460]         else {
[17:39:10.460]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:10.460]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:10.460]         }
[17:39:10.460]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:10.460]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:10.460]             base::sink(type = "output", split = FALSE)
[17:39:10.460]             base::close(...future.stdout)
[17:39:10.460]         }, add = TRUE)
[17:39:10.460]     }
[17:39:10.460]     ...future.frame <- base::sys.nframe()
[17:39:10.460]     ...future.conditions <- base::list()
[17:39:10.460]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:10.460]     if (FALSE) {
[17:39:10.460]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:10.460]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:10.460]     }
[17:39:10.460]     ...future.result <- base::tryCatch({
[17:39:10.460]         base::withCallingHandlers({
[17:39:10.460]             ...future.value <- base::withVisible(base::local({
[17:39:10.460]                 ...future.makeSendCondition <- base::local({
[17:39:10.460]                   sendCondition <- NULL
[17:39:10.460]                   function(frame = 1L) {
[17:39:10.460]                     if (is.function(sendCondition)) 
[17:39:10.460]                       return(sendCondition)
[17:39:10.460]                     ns <- getNamespace("parallel")
[17:39:10.460]                     if (exists("sendData", mode = "function", 
[17:39:10.460]                       envir = ns)) {
[17:39:10.460]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:10.460]                         envir = ns)
[17:39:10.460]                       envir <- sys.frame(frame)
[17:39:10.460]                       master <- NULL
[17:39:10.460]                       while (!identical(envir, .GlobalEnv) && 
[17:39:10.460]                         !identical(envir, emptyenv())) {
[17:39:10.460]                         if (exists("master", mode = "list", envir = envir, 
[17:39:10.460]                           inherits = FALSE)) {
[17:39:10.460]                           master <- get("master", mode = "list", 
[17:39:10.460]                             envir = envir, inherits = FALSE)
[17:39:10.460]                           if (inherits(master, c("SOCKnode", 
[17:39:10.460]                             "SOCK0node"))) {
[17:39:10.460]                             sendCondition <<- function(cond) {
[17:39:10.460]                               data <- list(type = "VALUE", value = cond, 
[17:39:10.460]                                 success = TRUE)
[17:39:10.460]                               parallel_sendData(master, data)
[17:39:10.460]                             }
[17:39:10.460]                             return(sendCondition)
[17:39:10.460]                           }
[17:39:10.460]                         }
[17:39:10.460]                         frame <- frame + 1L
[17:39:10.460]                         envir <- sys.frame(frame)
[17:39:10.460]                       }
[17:39:10.460]                     }
[17:39:10.460]                     sendCondition <<- function(cond) NULL
[17:39:10.460]                   }
[17:39:10.460]                 })
[17:39:10.460]                 withCallingHandlers({
[17:39:10.460]                   NA
[17:39:10.460]                 }, immediateCondition = function(cond) {
[17:39:10.460]                   sendCondition <- ...future.makeSendCondition()
[17:39:10.460]                   sendCondition(cond)
[17:39:10.460]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.460]                   {
[17:39:10.460]                     inherits <- base::inherits
[17:39:10.460]                     invokeRestart <- base::invokeRestart
[17:39:10.460]                     is.null <- base::is.null
[17:39:10.460]                     muffled <- FALSE
[17:39:10.460]                     if (inherits(cond, "message")) {
[17:39:10.460]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:10.460]                       if (muffled) 
[17:39:10.460]                         invokeRestart("muffleMessage")
[17:39:10.460]                     }
[17:39:10.460]                     else if (inherits(cond, "warning")) {
[17:39:10.460]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:10.460]                       if (muffled) 
[17:39:10.460]                         invokeRestart("muffleWarning")
[17:39:10.460]                     }
[17:39:10.460]                     else if (inherits(cond, "condition")) {
[17:39:10.460]                       if (!is.null(pattern)) {
[17:39:10.460]                         computeRestarts <- base::computeRestarts
[17:39:10.460]                         grepl <- base::grepl
[17:39:10.460]                         restarts <- computeRestarts(cond)
[17:39:10.460]                         for (restart in restarts) {
[17:39:10.460]                           name <- restart$name
[17:39:10.460]                           if (is.null(name)) 
[17:39:10.460]                             next
[17:39:10.460]                           if (!grepl(pattern, name)) 
[17:39:10.460]                             next
[17:39:10.460]                           invokeRestart(restart)
[17:39:10.460]                           muffled <- TRUE
[17:39:10.460]                           break
[17:39:10.460]                         }
[17:39:10.460]                       }
[17:39:10.460]                     }
[17:39:10.460]                     invisible(muffled)
[17:39:10.460]                   }
[17:39:10.460]                   muffleCondition(cond)
[17:39:10.460]                 })
[17:39:10.460]             }))
[17:39:10.460]             future::FutureResult(value = ...future.value$value, 
[17:39:10.460]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.460]                   ...future.rng), globalenv = if (FALSE) 
[17:39:10.460]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:10.460]                     ...future.globalenv.names))
[17:39:10.460]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:10.460]         }, condition = base::local({
[17:39:10.460]             c <- base::c
[17:39:10.460]             inherits <- base::inherits
[17:39:10.460]             invokeRestart <- base::invokeRestart
[17:39:10.460]             length <- base::length
[17:39:10.460]             list <- base::list
[17:39:10.460]             seq.int <- base::seq.int
[17:39:10.460]             signalCondition <- base::signalCondition
[17:39:10.460]             sys.calls <- base::sys.calls
[17:39:10.460]             `[[` <- base::`[[`
[17:39:10.460]             `+` <- base::`+`
[17:39:10.460]             `<<-` <- base::`<<-`
[17:39:10.460]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:10.460]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:10.460]                   3L)]
[17:39:10.460]             }
[17:39:10.460]             function(cond) {
[17:39:10.460]                 is_error <- inherits(cond, "error")
[17:39:10.460]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:10.460]                   NULL)
[17:39:10.460]                 if (is_error) {
[17:39:10.460]                   sessionInformation <- function() {
[17:39:10.460]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:10.460]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:10.460]                       search = base::search(), system = base::Sys.info())
[17:39:10.460]                   }
[17:39:10.460]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.460]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:10.460]                     cond$call), session = sessionInformation(), 
[17:39:10.460]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:10.460]                   signalCondition(cond)
[17:39:10.460]                 }
[17:39:10.460]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:10.460]                 "immediateCondition"))) {
[17:39:10.460]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:10.460]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.460]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:10.460]                   if (TRUE && !signal) {
[17:39:10.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.460]                     {
[17:39:10.460]                       inherits <- base::inherits
[17:39:10.460]                       invokeRestart <- base::invokeRestart
[17:39:10.460]                       is.null <- base::is.null
[17:39:10.460]                       muffled <- FALSE
[17:39:10.460]                       if (inherits(cond, "message")) {
[17:39:10.460]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.460]                         if (muffled) 
[17:39:10.460]                           invokeRestart("muffleMessage")
[17:39:10.460]                       }
[17:39:10.460]                       else if (inherits(cond, "warning")) {
[17:39:10.460]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.460]                         if (muffled) 
[17:39:10.460]                           invokeRestart("muffleWarning")
[17:39:10.460]                       }
[17:39:10.460]                       else if (inherits(cond, "condition")) {
[17:39:10.460]                         if (!is.null(pattern)) {
[17:39:10.460]                           computeRestarts <- base::computeRestarts
[17:39:10.460]                           grepl <- base::grepl
[17:39:10.460]                           restarts <- computeRestarts(cond)
[17:39:10.460]                           for (restart in restarts) {
[17:39:10.460]                             name <- restart$name
[17:39:10.460]                             if (is.null(name)) 
[17:39:10.460]                               next
[17:39:10.460]                             if (!grepl(pattern, name)) 
[17:39:10.460]                               next
[17:39:10.460]                             invokeRestart(restart)
[17:39:10.460]                             muffled <- TRUE
[17:39:10.460]                             break
[17:39:10.460]                           }
[17:39:10.460]                         }
[17:39:10.460]                       }
[17:39:10.460]                       invisible(muffled)
[17:39:10.460]                     }
[17:39:10.460]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.460]                   }
[17:39:10.460]                 }
[17:39:10.460]                 else {
[17:39:10.460]                   if (TRUE) {
[17:39:10.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.460]                     {
[17:39:10.460]                       inherits <- base::inherits
[17:39:10.460]                       invokeRestart <- base::invokeRestart
[17:39:10.460]                       is.null <- base::is.null
[17:39:10.460]                       muffled <- FALSE
[17:39:10.460]                       if (inherits(cond, "message")) {
[17:39:10.460]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.460]                         if (muffled) 
[17:39:10.460]                           invokeRestart("muffleMessage")
[17:39:10.460]                       }
[17:39:10.460]                       else if (inherits(cond, "warning")) {
[17:39:10.460]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.460]                         if (muffled) 
[17:39:10.460]                           invokeRestart("muffleWarning")
[17:39:10.460]                       }
[17:39:10.460]                       else if (inherits(cond, "condition")) {
[17:39:10.460]                         if (!is.null(pattern)) {
[17:39:10.460]                           computeRestarts <- base::computeRestarts
[17:39:10.460]                           grepl <- base::grepl
[17:39:10.460]                           restarts <- computeRestarts(cond)
[17:39:10.460]                           for (restart in restarts) {
[17:39:10.460]                             name <- restart$name
[17:39:10.460]                             if (is.null(name)) 
[17:39:10.460]                               next
[17:39:10.460]                             if (!grepl(pattern, name)) 
[17:39:10.460]                               next
[17:39:10.460]                             invokeRestart(restart)
[17:39:10.460]                             muffled <- TRUE
[17:39:10.460]                             break
[17:39:10.460]                           }
[17:39:10.460]                         }
[17:39:10.460]                       }
[17:39:10.460]                       invisible(muffled)
[17:39:10.460]                     }
[17:39:10.460]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.460]                   }
[17:39:10.460]                 }
[17:39:10.460]             }
[17:39:10.460]         }))
[17:39:10.460]     }, error = function(ex) {
[17:39:10.460]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:10.460]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.460]                 ...future.rng), started = ...future.startTime, 
[17:39:10.460]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:10.460]             version = "1.8"), class = "FutureResult")
[17:39:10.460]     }, finally = {
[17:39:10.460]         if (!identical(...future.workdir, getwd())) 
[17:39:10.460]             setwd(...future.workdir)
[17:39:10.460]         {
[17:39:10.460]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:10.460]                 ...future.oldOptions$nwarnings <- NULL
[17:39:10.460]             }
[17:39:10.460]             base::options(...future.oldOptions)
[17:39:10.460]             if (.Platform$OS.type == "windows") {
[17:39:10.460]                 old_names <- names(...future.oldEnvVars)
[17:39:10.460]                 envs <- base::Sys.getenv()
[17:39:10.460]                 names <- names(envs)
[17:39:10.460]                 common <- intersect(names, old_names)
[17:39:10.460]                 added <- setdiff(names, old_names)
[17:39:10.460]                 removed <- setdiff(old_names, names)
[17:39:10.460]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:10.460]                   envs[common]]
[17:39:10.460]                 NAMES <- toupper(changed)
[17:39:10.460]                 args <- list()
[17:39:10.460]                 for (kk in seq_along(NAMES)) {
[17:39:10.460]                   name <- changed[[kk]]
[17:39:10.460]                   NAME <- NAMES[[kk]]
[17:39:10.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.460]                     next
[17:39:10.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.460]                 }
[17:39:10.460]                 NAMES <- toupper(added)
[17:39:10.460]                 for (kk in seq_along(NAMES)) {
[17:39:10.460]                   name <- added[[kk]]
[17:39:10.460]                   NAME <- NAMES[[kk]]
[17:39:10.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.460]                     next
[17:39:10.460]                   args[[name]] <- ""
[17:39:10.460]                 }
[17:39:10.460]                 NAMES <- toupper(removed)
[17:39:10.460]                 for (kk in seq_along(NAMES)) {
[17:39:10.460]                   name <- removed[[kk]]
[17:39:10.460]                   NAME <- NAMES[[kk]]
[17:39:10.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.460]                     next
[17:39:10.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.460]                 }
[17:39:10.460]                 if (length(args) > 0) 
[17:39:10.460]                   base::do.call(base::Sys.setenv, args = args)
[17:39:10.460]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:10.460]             }
[17:39:10.460]             else {
[17:39:10.460]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:10.460]             }
[17:39:10.460]             {
[17:39:10.460]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:10.460]                   0L) {
[17:39:10.460]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:10.460]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:10.460]                   base::options(opts)
[17:39:10.460]                 }
[17:39:10.460]                 {
[17:39:10.460]                   {
[17:39:10.460]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:10.460]                     NULL
[17:39:10.460]                   }
[17:39:10.460]                   options(future.plan = NULL)
[17:39:10.460]                   if (is.na(NA_character_)) 
[17:39:10.460]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.460]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:10.460]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:10.460]                     .init = FALSE)
[17:39:10.460]                 }
[17:39:10.460]             }
[17:39:10.460]         }
[17:39:10.460]     })
[17:39:10.460]     if (TRUE) {
[17:39:10.460]         base::sink(type = "output", split = FALSE)
[17:39:10.460]         if (TRUE) {
[17:39:10.460]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:10.460]         }
[17:39:10.460]         else {
[17:39:10.460]             ...future.result["stdout"] <- base::list(NULL)
[17:39:10.460]         }
[17:39:10.460]         base::close(...future.stdout)
[17:39:10.460]         ...future.stdout <- NULL
[17:39:10.460]     }
[17:39:10.460]     ...future.result$conditions <- ...future.conditions
[17:39:10.460]     ...future.result$finished <- base::Sys.time()
[17:39:10.460]     ...future.result
[17:39:10.460] }
[17:39:10.514] MultisessionFuture started
[17:39:10.514] result() for ClusterFuture ...
[17:39:10.515] receiveMessageFromWorker() for ClusterFuture ...
[17:39:10.515] - Validating connection of MultisessionFuture
[17:39:10.546] - received message: FutureResult
[17:39:10.547] - Received FutureResult
[17:39:10.547] - Erased future from FutureRegistry
[17:39:10.547] result() for ClusterFuture ...
[17:39:10.547] - result already collected: FutureResult
[17:39:10.547] result() for ClusterFuture ... done
[17:39:10.547] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:10.547] result() for ClusterFuture ... done
[17:39:10.548] result() for ClusterFuture ...
[17:39:10.548] - result already collected: FutureResult
[17:39:10.548] result() for ClusterFuture ... done
[17:39:10.548] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:39:10.552] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multisession') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x5582e008c960>
Arguments '...' exists: TRUE
[17:39:10.552] getGlobalsAndPackages() ...
[17:39:10.553] Searching for globals...
[17:39:10.554] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[17:39:10.554] Searching for globals ... DONE
[17:39:10.555] Resolving globals: FALSE
[17:39:10.555] Tweak future expression to call with '...' arguments ...
[17:39:10.555] {
[17:39:10.555]     do.call(function(...) {
[17:39:10.555]         sum(x, ...)
[17:39:10.555]     }, args = future.call.arguments)
[17:39:10.555] }
[17:39:10.555] Tweak future expression to call with '...' arguments ... DONE
[17:39:10.556] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:10.556] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[17:39:10.556] - globals: [2] ‘x’, ‘future.call.arguments’
[17:39:10.556] 
[17:39:10.557] getGlobalsAndPackages() ... DONE
[17:39:10.557] run() for ‘Future’ ...
[17:39:10.557] - state: ‘created’
[17:39:10.557] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:10.571] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:10.571] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:10.572]   - Field: ‘node’
[17:39:10.572]   - Field: ‘label’
[17:39:10.572]   - Field: ‘local’
[17:39:10.572]   - Field: ‘owner’
[17:39:10.572]   - Field: ‘envir’
[17:39:10.572]   - Field: ‘workers’
[17:39:10.572]   - Field: ‘packages’
[17:39:10.572]   - Field: ‘gc’
[17:39:10.572]   - Field: ‘conditions’
[17:39:10.573]   - Field: ‘persistent’
[17:39:10.573]   - Field: ‘expr’
[17:39:10.573]   - Field: ‘uuid’
[17:39:10.573]   - Field: ‘seed’
[17:39:10.573]   - Field: ‘version’
[17:39:10.573]   - Field: ‘result’
[17:39:10.573]   - Field: ‘asynchronous’
[17:39:10.573]   - Field: ‘calls’
[17:39:10.573]   - Field: ‘globals’
[17:39:10.574]   - Field: ‘stdout’
[17:39:10.574]   - Field: ‘earlySignal’
[17:39:10.574]   - Field: ‘lazy’
[17:39:10.574]   - Field: ‘state’
[17:39:10.574] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:10.574] - Launch lazy future ...
[17:39:10.575] Packages needed by the future expression (n = 0): <none>
[17:39:10.575] Packages needed by future strategies (n = 0): <none>
[17:39:10.575] {
[17:39:10.575]     {
[17:39:10.575]         {
[17:39:10.575]             ...future.startTime <- base::Sys.time()
[17:39:10.575]             {
[17:39:10.575]                 {
[17:39:10.575]                   {
[17:39:10.575]                     {
[17:39:10.575]                       base::local({
[17:39:10.575]                         has_future <- base::requireNamespace("future", 
[17:39:10.575]                           quietly = TRUE)
[17:39:10.575]                         if (has_future) {
[17:39:10.575]                           ns <- base::getNamespace("future")
[17:39:10.575]                           version <- ns[[".package"]][["version"]]
[17:39:10.575]                           if (is.null(version)) 
[17:39:10.575]                             version <- utils::packageVersion("future")
[17:39:10.575]                         }
[17:39:10.575]                         else {
[17:39:10.575]                           version <- NULL
[17:39:10.575]                         }
[17:39:10.575]                         if (!has_future || version < "1.8.0") {
[17:39:10.575]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:10.575]                             "", base::R.version$version.string), 
[17:39:10.575]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:10.575]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:10.575]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:10.575]                               "release", "version")], collapse = " "), 
[17:39:10.575]                             hostname = base::Sys.info()[["nodename"]])
[17:39:10.575]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:10.575]                             info)
[17:39:10.575]                           info <- base::paste(info, collapse = "; ")
[17:39:10.575]                           if (!has_future) {
[17:39:10.575]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:10.575]                               info)
[17:39:10.575]                           }
[17:39:10.575]                           else {
[17:39:10.575]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:10.575]                               info, version)
[17:39:10.575]                           }
[17:39:10.575]                           base::stop(msg)
[17:39:10.575]                         }
[17:39:10.575]                       })
[17:39:10.575]                     }
[17:39:10.575]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:10.575]                     base::options(mc.cores = 1L)
[17:39:10.575]                   }
[17:39:10.575]                   ...future.strategy.old <- future::plan("list")
[17:39:10.575]                   options(future.plan = NULL)
[17:39:10.575]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.575]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:10.575]                 }
[17:39:10.575]                 ...future.workdir <- getwd()
[17:39:10.575]             }
[17:39:10.575]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:10.575]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:10.575]         }
[17:39:10.575]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:10.575]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:10.575]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:10.575]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:10.575]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:10.575]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:10.575]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:10.575]             base::names(...future.oldOptions))
[17:39:10.575]     }
[17:39:10.575]     if (FALSE) {
[17:39:10.575]     }
[17:39:10.575]     else {
[17:39:10.575]         if (TRUE) {
[17:39:10.575]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:10.575]                 open = "w")
[17:39:10.575]         }
[17:39:10.575]         else {
[17:39:10.575]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:10.575]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:10.575]         }
[17:39:10.575]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:10.575]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:10.575]             base::sink(type = "output", split = FALSE)
[17:39:10.575]             base::close(...future.stdout)
[17:39:10.575]         }, add = TRUE)
[17:39:10.575]     }
[17:39:10.575]     ...future.frame <- base::sys.nframe()
[17:39:10.575]     ...future.conditions <- base::list()
[17:39:10.575]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:10.575]     if (FALSE) {
[17:39:10.575]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:10.575]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:10.575]     }
[17:39:10.575]     ...future.result <- base::tryCatch({
[17:39:10.575]         base::withCallingHandlers({
[17:39:10.575]             ...future.value <- base::withVisible(base::local({
[17:39:10.575]                 ...future.makeSendCondition <- base::local({
[17:39:10.575]                   sendCondition <- NULL
[17:39:10.575]                   function(frame = 1L) {
[17:39:10.575]                     if (is.function(sendCondition)) 
[17:39:10.575]                       return(sendCondition)
[17:39:10.575]                     ns <- getNamespace("parallel")
[17:39:10.575]                     if (exists("sendData", mode = "function", 
[17:39:10.575]                       envir = ns)) {
[17:39:10.575]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:10.575]                         envir = ns)
[17:39:10.575]                       envir <- sys.frame(frame)
[17:39:10.575]                       master <- NULL
[17:39:10.575]                       while (!identical(envir, .GlobalEnv) && 
[17:39:10.575]                         !identical(envir, emptyenv())) {
[17:39:10.575]                         if (exists("master", mode = "list", envir = envir, 
[17:39:10.575]                           inherits = FALSE)) {
[17:39:10.575]                           master <- get("master", mode = "list", 
[17:39:10.575]                             envir = envir, inherits = FALSE)
[17:39:10.575]                           if (inherits(master, c("SOCKnode", 
[17:39:10.575]                             "SOCK0node"))) {
[17:39:10.575]                             sendCondition <<- function(cond) {
[17:39:10.575]                               data <- list(type = "VALUE", value = cond, 
[17:39:10.575]                                 success = TRUE)
[17:39:10.575]                               parallel_sendData(master, data)
[17:39:10.575]                             }
[17:39:10.575]                             return(sendCondition)
[17:39:10.575]                           }
[17:39:10.575]                         }
[17:39:10.575]                         frame <- frame + 1L
[17:39:10.575]                         envir <- sys.frame(frame)
[17:39:10.575]                       }
[17:39:10.575]                     }
[17:39:10.575]                     sendCondition <<- function(cond) NULL
[17:39:10.575]                   }
[17:39:10.575]                 })
[17:39:10.575]                 withCallingHandlers({
[17:39:10.575]                   {
[17:39:10.575]                     do.call(function(...) {
[17:39:10.575]                       sum(x, ...)
[17:39:10.575]                     }, args = future.call.arguments)
[17:39:10.575]                   }
[17:39:10.575]                 }, immediateCondition = function(cond) {
[17:39:10.575]                   sendCondition <- ...future.makeSendCondition()
[17:39:10.575]                   sendCondition(cond)
[17:39:10.575]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.575]                   {
[17:39:10.575]                     inherits <- base::inherits
[17:39:10.575]                     invokeRestart <- base::invokeRestart
[17:39:10.575]                     is.null <- base::is.null
[17:39:10.575]                     muffled <- FALSE
[17:39:10.575]                     if (inherits(cond, "message")) {
[17:39:10.575]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:10.575]                       if (muffled) 
[17:39:10.575]                         invokeRestart("muffleMessage")
[17:39:10.575]                     }
[17:39:10.575]                     else if (inherits(cond, "warning")) {
[17:39:10.575]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:10.575]                       if (muffled) 
[17:39:10.575]                         invokeRestart("muffleWarning")
[17:39:10.575]                     }
[17:39:10.575]                     else if (inherits(cond, "condition")) {
[17:39:10.575]                       if (!is.null(pattern)) {
[17:39:10.575]                         computeRestarts <- base::computeRestarts
[17:39:10.575]                         grepl <- base::grepl
[17:39:10.575]                         restarts <- computeRestarts(cond)
[17:39:10.575]                         for (restart in restarts) {
[17:39:10.575]                           name <- restart$name
[17:39:10.575]                           if (is.null(name)) 
[17:39:10.575]                             next
[17:39:10.575]                           if (!grepl(pattern, name)) 
[17:39:10.575]                             next
[17:39:10.575]                           invokeRestart(restart)
[17:39:10.575]                           muffled <- TRUE
[17:39:10.575]                           break
[17:39:10.575]                         }
[17:39:10.575]                       }
[17:39:10.575]                     }
[17:39:10.575]                     invisible(muffled)
[17:39:10.575]                   }
[17:39:10.575]                   muffleCondition(cond)
[17:39:10.575]                 })
[17:39:10.575]             }))
[17:39:10.575]             future::FutureResult(value = ...future.value$value, 
[17:39:10.575]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.575]                   ...future.rng), globalenv = if (FALSE) 
[17:39:10.575]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:10.575]                     ...future.globalenv.names))
[17:39:10.575]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:10.575]         }, condition = base::local({
[17:39:10.575]             c <- base::c
[17:39:10.575]             inherits <- base::inherits
[17:39:10.575]             invokeRestart <- base::invokeRestart
[17:39:10.575]             length <- base::length
[17:39:10.575]             list <- base::list
[17:39:10.575]             seq.int <- base::seq.int
[17:39:10.575]             signalCondition <- base::signalCondition
[17:39:10.575]             sys.calls <- base::sys.calls
[17:39:10.575]             `[[` <- base::`[[`
[17:39:10.575]             `+` <- base::`+`
[17:39:10.575]             `<<-` <- base::`<<-`
[17:39:10.575]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:10.575]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:10.575]                   3L)]
[17:39:10.575]             }
[17:39:10.575]             function(cond) {
[17:39:10.575]                 is_error <- inherits(cond, "error")
[17:39:10.575]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:10.575]                   NULL)
[17:39:10.575]                 if (is_error) {
[17:39:10.575]                   sessionInformation <- function() {
[17:39:10.575]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:10.575]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:10.575]                       search = base::search(), system = base::Sys.info())
[17:39:10.575]                   }
[17:39:10.575]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.575]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:10.575]                     cond$call), session = sessionInformation(), 
[17:39:10.575]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:10.575]                   signalCondition(cond)
[17:39:10.575]                 }
[17:39:10.575]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:10.575]                 "immediateCondition"))) {
[17:39:10.575]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:10.575]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.575]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:10.575]                   if (TRUE && !signal) {
[17:39:10.575]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.575]                     {
[17:39:10.575]                       inherits <- base::inherits
[17:39:10.575]                       invokeRestart <- base::invokeRestart
[17:39:10.575]                       is.null <- base::is.null
[17:39:10.575]                       muffled <- FALSE
[17:39:10.575]                       if (inherits(cond, "message")) {
[17:39:10.575]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.575]                         if (muffled) 
[17:39:10.575]                           invokeRestart("muffleMessage")
[17:39:10.575]                       }
[17:39:10.575]                       else if (inherits(cond, "warning")) {
[17:39:10.575]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.575]                         if (muffled) 
[17:39:10.575]                           invokeRestart("muffleWarning")
[17:39:10.575]                       }
[17:39:10.575]                       else if (inherits(cond, "condition")) {
[17:39:10.575]                         if (!is.null(pattern)) {
[17:39:10.575]                           computeRestarts <- base::computeRestarts
[17:39:10.575]                           grepl <- base::grepl
[17:39:10.575]                           restarts <- computeRestarts(cond)
[17:39:10.575]                           for (restart in restarts) {
[17:39:10.575]                             name <- restart$name
[17:39:10.575]                             if (is.null(name)) 
[17:39:10.575]                               next
[17:39:10.575]                             if (!grepl(pattern, name)) 
[17:39:10.575]                               next
[17:39:10.575]                             invokeRestart(restart)
[17:39:10.575]                             muffled <- TRUE
[17:39:10.575]                             break
[17:39:10.575]                           }
[17:39:10.575]                         }
[17:39:10.575]                       }
[17:39:10.575]                       invisible(muffled)
[17:39:10.575]                     }
[17:39:10.575]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.575]                   }
[17:39:10.575]                 }
[17:39:10.575]                 else {
[17:39:10.575]                   if (TRUE) {
[17:39:10.575]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.575]                     {
[17:39:10.575]                       inherits <- base::inherits
[17:39:10.575]                       invokeRestart <- base::invokeRestart
[17:39:10.575]                       is.null <- base::is.null
[17:39:10.575]                       muffled <- FALSE
[17:39:10.575]                       if (inherits(cond, "message")) {
[17:39:10.575]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.575]                         if (muffled) 
[17:39:10.575]                           invokeRestart("muffleMessage")
[17:39:10.575]                       }
[17:39:10.575]                       else if (inherits(cond, "warning")) {
[17:39:10.575]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.575]                         if (muffled) 
[17:39:10.575]                           invokeRestart("muffleWarning")
[17:39:10.575]                       }
[17:39:10.575]                       else if (inherits(cond, "condition")) {
[17:39:10.575]                         if (!is.null(pattern)) {
[17:39:10.575]                           computeRestarts <- base::computeRestarts
[17:39:10.575]                           grepl <- base::grepl
[17:39:10.575]                           restarts <- computeRestarts(cond)
[17:39:10.575]                           for (restart in restarts) {
[17:39:10.575]                             name <- restart$name
[17:39:10.575]                             if (is.null(name)) 
[17:39:10.575]                               next
[17:39:10.575]                             if (!grepl(pattern, name)) 
[17:39:10.575]                               next
[17:39:10.575]                             invokeRestart(restart)
[17:39:10.575]                             muffled <- TRUE
[17:39:10.575]                             break
[17:39:10.575]                           }
[17:39:10.575]                         }
[17:39:10.575]                       }
[17:39:10.575]                       invisible(muffled)
[17:39:10.575]                     }
[17:39:10.575]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.575]                   }
[17:39:10.575]                 }
[17:39:10.575]             }
[17:39:10.575]         }))
[17:39:10.575]     }, error = function(ex) {
[17:39:10.575]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:10.575]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.575]                 ...future.rng), started = ...future.startTime, 
[17:39:10.575]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:10.575]             version = "1.8"), class = "FutureResult")
[17:39:10.575]     }, finally = {
[17:39:10.575]         if (!identical(...future.workdir, getwd())) 
[17:39:10.575]             setwd(...future.workdir)
[17:39:10.575]         {
[17:39:10.575]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:10.575]                 ...future.oldOptions$nwarnings <- NULL
[17:39:10.575]             }
[17:39:10.575]             base::options(...future.oldOptions)
[17:39:10.575]             if (.Platform$OS.type == "windows") {
[17:39:10.575]                 old_names <- names(...future.oldEnvVars)
[17:39:10.575]                 envs <- base::Sys.getenv()
[17:39:10.575]                 names <- names(envs)
[17:39:10.575]                 common <- intersect(names, old_names)
[17:39:10.575]                 added <- setdiff(names, old_names)
[17:39:10.575]                 removed <- setdiff(old_names, names)
[17:39:10.575]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:10.575]                   envs[common]]
[17:39:10.575]                 NAMES <- toupper(changed)
[17:39:10.575]                 args <- list()
[17:39:10.575]                 for (kk in seq_along(NAMES)) {
[17:39:10.575]                   name <- changed[[kk]]
[17:39:10.575]                   NAME <- NAMES[[kk]]
[17:39:10.575]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.575]                     next
[17:39:10.575]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.575]                 }
[17:39:10.575]                 NAMES <- toupper(added)
[17:39:10.575]                 for (kk in seq_along(NAMES)) {
[17:39:10.575]                   name <- added[[kk]]
[17:39:10.575]                   NAME <- NAMES[[kk]]
[17:39:10.575]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.575]                     next
[17:39:10.575]                   args[[name]] <- ""
[17:39:10.575]                 }
[17:39:10.575]                 NAMES <- toupper(removed)
[17:39:10.575]                 for (kk in seq_along(NAMES)) {
[17:39:10.575]                   name <- removed[[kk]]
[17:39:10.575]                   NAME <- NAMES[[kk]]
[17:39:10.575]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.575]                     next
[17:39:10.575]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.575]                 }
[17:39:10.575]                 if (length(args) > 0) 
[17:39:10.575]                   base::do.call(base::Sys.setenv, args = args)
[17:39:10.575]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:10.575]             }
[17:39:10.575]             else {
[17:39:10.575]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:10.575]             }
[17:39:10.575]             {
[17:39:10.575]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:10.575]                   0L) {
[17:39:10.575]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:10.575]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:10.575]                   base::options(opts)
[17:39:10.575]                 }
[17:39:10.575]                 {
[17:39:10.575]                   {
[17:39:10.575]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:10.575]                     NULL
[17:39:10.575]                   }
[17:39:10.575]                   options(future.plan = NULL)
[17:39:10.575]                   if (is.na(NA_character_)) 
[17:39:10.575]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.575]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:10.575]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:10.575]                     .init = FALSE)
[17:39:10.575]                 }
[17:39:10.575]             }
[17:39:10.575]         }
[17:39:10.575]     })
[17:39:10.575]     if (TRUE) {
[17:39:10.575]         base::sink(type = "output", split = FALSE)
[17:39:10.575]         if (TRUE) {
[17:39:10.575]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:10.575]         }
[17:39:10.575]         else {
[17:39:10.575]             ...future.result["stdout"] <- base::list(NULL)
[17:39:10.575]         }
[17:39:10.575]         base::close(...future.stdout)
[17:39:10.575]         ...future.stdout <- NULL
[17:39:10.575]     }
[17:39:10.575]     ...future.result$conditions <- ...future.conditions
[17:39:10.575]     ...future.result$finished <- base::Sys.time()
[17:39:10.575]     ...future.result
[17:39:10.575] }
[17:39:10.578] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[17:39:10.578] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:39:10.579] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:39:10.579] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[17:39:10.579] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[17:39:10.579] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[17:39:10.580] MultisessionFuture started
[17:39:10.580] - Launch lazy future ... done
[17:39:10.580] run() for ‘MultisessionFuture’ ... done
[17:39:10.580] result() for ClusterFuture ...
[17:39:10.580] receiveMessageFromWorker() for ClusterFuture ...
[17:39:10.581] - Validating connection of MultisessionFuture
[17:39:10.582] - received message: FutureResult
[17:39:10.582] - Received FutureResult
[17:39:10.582] - Erased future from FutureRegistry
[17:39:10.582] result() for ClusterFuture ...
[17:39:10.582] - result already collected: FutureResult
[17:39:10.582] result() for ClusterFuture ... done
[17:39:10.582] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:10.582] result() for ClusterFuture ... done
[17:39:10.582] result() for ClusterFuture ...
[17:39:10.583] - result already collected: FutureResult
[17:39:10.583] result() for ClusterFuture ... done
[1] 6
** Sum function 'B' with plan('multisession') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5582e04143d8>
Arguments '...' exists: TRUE
[17:39:10.583] getGlobalsAndPackages() ...
[17:39:10.583] Searching for globals...
[17:39:10.585] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[17:39:10.585] Searching for globals ... DONE
[17:39:10.585] Resolving globals: FALSE
[17:39:10.586] Tweak future expression to call with '...' arguments ...
[17:39:10.586] {
[17:39:10.586]     do.call(function(...) {
[17:39:10.586]         sum(x, ...)
[17:39:10.586]     }, args = future.call.arguments)
[17:39:10.586] }
[17:39:10.586] Tweak future expression to call with '...' arguments ... DONE
[17:39:10.586] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:10.587] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[17:39:10.587] - globals: [2] ‘x’, ‘future.call.arguments’
[17:39:10.587] 
[17:39:10.587] getGlobalsAndPackages() ... DONE
[17:39:10.588] run() for ‘Future’ ...
[17:39:10.588] - state: ‘created’
[17:39:10.588] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:10.603] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:10.603] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:10.603]   - Field: ‘node’
[17:39:10.603]   - Field: ‘label’
[17:39:10.603]   - Field: ‘local’
[17:39:10.603]   - Field: ‘owner’
[17:39:10.603]   - Field: ‘envir’
[17:39:10.603]   - Field: ‘workers’
[17:39:10.603]   - Field: ‘packages’
[17:39:10.604]   - Field: ‘gc’
[17:39:10.604]   - Field: ‘conditions’
[17:39:10.604]   - Field: ‘persistent’
[17:39:10.604]   - Field: ‘expr’
[17:39:10.604]   - Field: ‘uuid’
[17:39:10.604]   - Field: ‘seed’
[17:39:10.604]   - Field: ‘version’
[17:39:10.604]   - Field: ‘result’
[17:39:10.605]   - Field: ‘asynchronous’
[17:39:10.605]   - Field: ‘calls’
[17:39:10.605]   - Field: ‘globals’
[17:39:10.605]   - Field: ‘stdout’
[17:39:10.605]   - Field: ‘earlySignal’
[17:39:10.605]   - Field: ‘lazy’
[17:39:10.605]   - Field: ‘state’
[17:39:10.605] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:10.606] - Launch lazy future ...
[17:39:10.606] Packages needed by the future expression (n = 0): <none>
[17:39:10.606] Packages needed by future strategies (n = 0): <none>
[17:39:10.607] {
[17:39:10.607]     {
[17:39:10.607]         {
[17:39:10.607]             ...future.startTime <- base::Sys.time()
[17:39:10.607]             {
[17:39:10.607]                 {
[17:39:10.607]                   {
[17:39:10.607]                     {
[17:39:10.607]                       base::local({
[17:39:10.607]                         has_future <- base::requireNamespace("future", 
[17:39:10.607]                           quietly = TRUE)
[17:39:10.607]                         if (has_future) {
[17:39:10.607]                           ns <- base::getNamespace("future")
[17:39:10.607]                           version <- ns[[".package"]][["version"]]
[17:39:10.607]                           if (is.null(version)) 
[17:39:10.607]                             version <- utils::packageVersion("future")
[17:39:10.607]                         }
[17:39:10.607]                         else {
[17:39:10.607]                           version <- NULL
[17:39:10.607]                         }
[17:39:10.607]                         if (!has_future || version < "1.8.0") {
[17:39:10.607]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:10.607]                             "", base::R.version$version.string), 
[17:39:10.607]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:10.607]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:10.607]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:10.607]                               "release", "version")], collapse = " "), 
[17:39:10.607]                             hostname = base::Sys.info()[["nodename"]])
[17:39:10.607]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:10.607]                             info)
[17:39:10.607]                           info <- base::paste(info, collapse = "; ")
[17:39:10.607]                           if (!has_future) {
[17:39:10.607]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:10.607]                               info)
[17:39:10.607]                           }
[17:39:10.607]                           else {
[17:39:10.607]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:10.607]                               info, version)
[17:39:10.607]                           }
[17:39:10.607]                           base::stop(msg)
[17:39:10.607]                         }
[17:39:10.607]                       })
[17:39:10.607]                     }
[17:39:10.607]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:10.607]                     base::options(mc.cores = 1L)
[17:39:10.607]                   }
[17:39:10.607]                   ...future.strategy.old <- future::plan("list")
[17:39:10.607]                   options(future.plan = NULL)
[17:39:10.607]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.607]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:10.607]                 }
[17:39:10.607]                 ...future.workdir <- getwd()
[17:39:10.607]             }
[17:39:10.607]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:10.607]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:10.607]         }
[17:39:10.607]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:10.607]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:10.607]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:10.607]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:10.607]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:10.607]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:10.607]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:10.607]             base::names(...future.oldOptions))
[17:39:10.607]     }
[17:39:10.607]     if (FALSE) {
[17:39:10.607]     }
[17:39:10.607]     else {
[17:39:10.607]         if (TRUE) {
[17:39:10.607]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:10.607]                 open = "w")
[17:39:10.607]         }
[17:39:10.607]         else {
[17:39:10.607]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:10.607]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:10.607]         }
[17:39:10.607]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:10.607]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:10.607]             base::sink(type = "output", split = FALSE)
[17:39:10.607]             base::close(...future.stdout)
[17:39:10.607]         }, add = TRUE)
[17:39:10.607]     }
[17:39:10.607]     ...future.frame <- base::sys.nframe()
[17:39:10.607]     ...future.conditions <- base::list()
[17:39:10.607]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:10.607]     if (FALSE) {
[17:39:10.607]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:10.607]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:10.607]     }
[17:39:10.607]     ...future.result <- base::tryCatch({
[17:39:10.607]         base::withCallingHandlers({
[17:39:10.607]             ...future.value <- base::withVisible(base::local({
[17:39:10.607]                 ...future.makeSendCondition <- base::local({
[17:39:10.607]                   sendCondition <- NULL
[17:39:10.607]                   function(frame = 1L) {
[17:39:10.607]                     if (is.function(sendCondition)) 
[17:39:10.607]                       return(sendCondition)
[17:39:10.607]                     ns <- getNamespace("parallel")
[17:39:10.607]                     if (exists("sendData", mode = "function", 
[17:39:10.607]                       envir = ns)) {
[17:39:10.607]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:10.607]                         envir = ns)
[17:39:10.607]                       envir <- sys.frame(frame)
[17:39:10.607]                       master <- NULL
[17:39:10.607]                       while (!identical(envir, .GlobalEnv) && 
[17:39:10.607]                         !identical(envir, emptyenv())) {
[17:39:10.607]                         if (exists("master", mode = "list", envir = envir, 
[17:39:10.607]                           inherits = FALSE)) {
[17:39:10.607]                           master <- get("master", mode = "list", 
[17:39:10.607]                             envir = envir, inherits = FALSE)
[17:39:10.607]                           if (inherits(master, c("SOCKnode", 
[17:39:10.607]                             "SOCK0node"))) {
[17:39:10.607]                             sendCondition <<- function(cond) {
[17:39:10.607]                               data <- list(type = "VALUE", value = cond, 
[17:39:10.607]                                 success = TRUE)
[17:39:10.607]                               parallel_sendData(master, data)
[17:39:10.607]                             }
[17:39:10.607]                             return(sendCondition)
[17:39:10.607]                           }
[17:39:10.607]                         }
[17:39:10.607]                         frame <- frame + 1L
[17:39:10.607]                         envir <- sys.frame(frame)
[17:39:10.607]                       }
[17:39:10.607]                     }
[17:39:10.607]                     sendCondition <<- function(cond) NULL
[17:39:10.607]                   }
[17:39:10.607]                 })
[17:39:10.607]                 withCallingHandlers({
[17:39:10.607]                   {
[17:39:10.607]                     do.call(function(...) {
[17:39:10.607]                       sum(x, ...)
[17:39:10.607]                     }, args = future.call.arguments)
[17:39:10.607]                   }
[17:39:10.607]                 }, immediateCondition = function(cond) {
[17:39:10.607]                   sendCondition <- ...future.makeSendCondition()
[17:39:10.607]                   sendCondition(cond)
[17:39:10.607]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.607]                   {
[17:39:10.607]                     inherits <- base::inherits
[17:39:10.607]                     invokeRestart <- base::invokeRestart
[17:39:10.607]                     is.null <- base::is.null
[17:39:10.607]                     muffled <- FALSE
[17:39:10.607]                     if (inherits(cond, "message")) {
[17:39:10.607]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:10.607]                       if (muffled) 
[17:39:10.607]                         invokeRestart("muffleMessage")
[17:39:10.607]                     }
[17:39:10.607]                     else if (inherits(cond, "warning")) {
[17:39:10.607]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:10.607]                       if (muffled) 
[17:39:10.607]                         invokeRestart("muffleWarning")
[17:39:10.607]                     }
[17:39:10.607]                     else if (inherits(cond, "condition")) {
[17:39:10.607]                       if (!is.null(pattern)) {
[17:39:10.607]                         computeRestarts <- base::computeRestarts
[17:39:10.607]                         grepl <- base::grepl
[17:39:10.607]                         restarts <- computeRestarts(cond)
[17:39:10.607]                         for (restart in restarts) {
[17:39:10.607]                           name <- restart$name
[17:39:10.607]                           if (is.null(name)) 
[17:39:10.607]                             next
[17:39:10.607]                           if (!grepl(pattern, name)) 
[17:39:10.607]                             next
[17:39:10.607]                           invokeRestart(restart)
[17:39:10.607]                           muffled <- TRUE
[17:39:10.607]                           break
[17:39:10.607]                         }
[17:39:10.607]                       }
[17:39:10.607]                     }
[17:39:10.607]                     invisible(muffled)
[17:39:10.607]                   }
[17:39:10.607]                   muffleCondition(cond)
[17:39:10.607]                 })
[17:39:10.607]             }))
[17:39:10.607]             future::FutureResult(value = ...future.value$value, 
[17:39:10.607]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.607]                   ...future.rng), globalenv = if (FALSE) 
[17:39:10.607]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:10.607]                     ...future.globalenv.names))
[17:39:10.607]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:10.607]         }, condition = base::local({
[17:39:10.607]             c <- base::c
[17:39:10.607]             inherits <- base::inherits
[17:39:10.607]             invokeRestart <- base::invokeRestart
[17:39:10.607]             length <- base::length
[17:39:10.607]             list <- base::list
[17:39:10.607]             seq.int <- base::seq.int
[17:39:10.607]             signalCondition <- base::signalCondition
[17:39:10.607]             sys.calls <- base::sys.calls
[17:39:10.607]             `[[` <- base::`[[`
[17:39:10.607]             `+` <- base::`+`
[17:39:10.607]             `<<-` <- base::`<<-`
[17:39:10.607]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:10.607]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:10.607]                   3L)]
[17:39:10.607]             }
[17:39:10.607]             function(cond) {
[17:39:10.607]                 is_error <- inherits(cond, "error")
[17:39:10.607]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:10.607]                   NULL)
[17:39:10.607]                 if (is_error) {
[17:39:10.607]                   sessionInformation <- function() {
[17:39:10.607]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:10.607]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:10.607]                       search = base::search(), system = base::Sys.info())
[17:39:10.607]                   }
[17:39:10.607]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.607]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:10.607]                     cond$call), session = sessionInformation(), 
[17:39:10.607]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:10.607]                   signalCondition(cond)
[17:39:10.607]                 }
[17:39:10.607]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:10.607]                 "immediateCondition"))) {
[17:39:10.607]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:10.607]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.607]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:10.607]                   if (TRUE && !signal) {
[17:39:10.607]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.607]                     {
[17:39:10.607]                       inherits <- base::inherits
[17:39:10.607]                       invokeRestart <- base::invokeRestart
[17:39:10.607]                       is.null <- base::is.null
[17:39:10.607]                       muffled <- FALSE
[17:39:10.607]                       if (inherits(cond, "message")) {
[17:39:10.607]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.607]                         if (muffled) 
[17:39:10.607]                           invokeRestart("muffleMessage")
[17:39:10.607]                       }
[17:39:10.607]                       else if (inherits(cond, "warning")) {
[17:39:10.607]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.607]                         if (muffled) 
[17:39:10.607]                           invokeRestart("muffleWarning")
[17:39:10.607]                       }
[17:39:10.607]                       else if (inherits(cond, "condition")) {
[17:39:10.607]                         if (!is.null(pattern)) {
[17:39:10.607]                           computeRestarts <- base::computeRestarts
[17:39:10.607]                           grepl <- base::grepl
[17:39:10.607]                           restarts <- computeRestarts(cond)
[17:39:10.607]                           for (restart in restarts) {
[17:39:10.607]                             name <- restart$name
[17:39:10.607]                             if (is.null(name)) 
[17:39:10.607]                               next
[17:39:10.607]                             if (!grepl(pattern, name)) 
[17:39:10.607]                               next
[17:39:10.607]                             invokeRestart(restart)
[17:39:10.607]                             muffled <- TRUE
[17:39:10.607]                             break
[17:39:10.607]                           }
[17:39:10.607]                         }
[17:39:10.607]                       }
[17:39:10.607]                       invisible(muffled)
[17:39:10.607]                     }
[17:39:10.607]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.607]                   }
[17:39:10.607]                 }
[17:39:10.607]                 else {
[17:39:10.607]                   if (TRUE) {
[17:39:10.607]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.607]                     {
[17:39:10.607]                       inherits <- base::inherits
[17:39:10.607]                       invokeRestart <- base::invokeRestart
[17:39:10.607]                       is.null <- base::is.null
[17:39:10.607]                       muffled <- FALSE
[17:39:10.607]                       if (inherits(cond, "message")) {
[17:39:10.607]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.607]                         if (muffled) 
[17:39:10.607]                           invokeRestart("muffleMessage")
[17:39:10.607]                       }
[17:39:10.607]                       else if (inherits(cond, "warning")) {
[17:39:10.607]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.607]                         if (muffled) 
[17:39:10.607]                           invokeRestart("muffleWarning")
[17:39:10.607]                       }
[17:39:10.607]                       else if (inherits(cond, "condition")) {
[17:39:10.607]                         if (!is.null(pattern)) {
[17:39:10.607]                           computeRestarts <- base::computeRestarts
[17:39:10.607]                           grepl <- base::grepl
[17:39:10.607]                           restarts <- computeRestarts(cond)
[17:39:10.607]                           for (restart in restarts) {
[17:39:10.607]                             name <- restart$name
[17:39:10.607]                             if (is.null(name)) 
[17:39:10.607]                               next
[17:39:10.607]                             if (!grepl(pattern, name)) 
[17:39:10.607]                               next
[17:39:10.607]                             invokeRestart(restart)
[17:39:10.607]                             muffled <- TRUE
[17:39:10.607]                             break
[17:39:10.607]                           }
[17:39:10.607]                         }
[17:39:10.607]                       }
[17:39:10.607]                       invisible(muffled)
[17:39:10.607]                     }
[17:39:10.607]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.607]                   }
[17:39:10.607]                 }
[17:39:10.607]             }
[17:39:10.607]         }))
[17:39:10.607]     }, error = function(ex) {
[17:39:10.607]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:10.607]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.607]                 ...future.rng), started = ...future.startTime, 
[17:39:10.607]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:10.607]             version = "1.8"), class = "FutureResult")
[17:39:10.607]     }, finally = {
[17:39:10.607]         if (!identical(...future.workdir, getwd())) 
[17:39:10.607]             setwd(...future.workdir)
[17:39:10.607]         {
[17:39:10.607]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:10.607]                 ...future.oldOptions$nwarnings <- NULL
[17:39:10.607]             }
[17:39:10.607]             base::options(...future.oldOptions)
[17:39:10.607]             if (.Platform$OS.type == "windows") {
[17:39:10.607]                 old_names <- names(...future.oldEnvVars)
[17:39:10.607]                 envs <- base::Sys.getenv()
[17:39:10.607]                 names <- names(envs)
[17:39:10.607]                 common <- intersect(names, old_names)
[17:39:10.607]                 added <- setdiff(names, old_names)
[17:39:10.607]                 removed <- setdiff(old_names, names)
[17:39:10.607]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:10.607]                   envs[common]]
[17:39:10.607]                 NAMES <- toupper(changed)
[17:39:10.607]                 args <- list()
[17:39:10.607]                 for (kk in seq_along(NAMES)) {
[17:39:10.607]                   name <- changed[[kk]]
[17:39:10.607]                   NAME <- NAMES[[kk]]
[17:39:10.607]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.607]                     next
[17:39:10.607]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.607]                 }
[17:39:10.607]                 NAMES <- toupper(added)
[17:39:10.607]                 for (kk in seq_along(NAMES)) {
[17:39:10.607]                   name <- added[[kk]]
[17:39:10.607]                   NAME <- NAMES[[kk]]
[17:39:10.607]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.607]                     next
[17:39:10.607]                   args[[name]] <- ""
[17:39:10.607]                 }
[17:39:10.607]                 NAMES <- toupper(removed)
[17:39:10.607]                 for (kk in seq_along(NAMES)) {
[17:39:10.607]                   name <- removed[[kk]]
[17:39:10.607]                   NAME <- NAMES[[kk]]
[17:39:10.607]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.607]                     next
[17:39:10.607]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.607]                 }
[17:39:10.607]                 if (length(args) > 0) 
[17:39:10.607]                   base::do.call(base::Sys.setenv, args = args)
[17:39:10.607]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:10.607]             }
[17:39:10.607]             else {
[17:39:10.607]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:10.607]             }
[17:39:10.607]             {
[17:39:10.607]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:10.607]                   0L) {
[17:39:10.607]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:10.607]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:10.607]                   base::options(opts)
[17:39:10.607]                 }
[17:39:10.607]                 {
[17:39:10.607]                   {
[17:39:10.607]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:10.607]                     NULL
[17:39:10.607]                   }
[17:39:10.607]                   options(future.plan = NULL)
[17:39:10.607]                   if (is.na(NA_character_)) 
[17:39:10.607]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.607]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:10.607]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:10.607]                     .init = FALSE)
[17:39:10.607]                 }
[17:39:10.607]             }
[17:39:10.607]         }
[17:39:10.607]     })
[17:39:10.607]     if (TRUE) {
[17:39:10.607]         base::sink(type = "output", split = FALSE)
[17:39:10.607]         if (TRUE) {
[17:39:10.607]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:10.607]         }
[17:39:10.607]         else {
[17:39:10.607]             ...future.result["stdout"] <- base::list(NULL)
[17:39:10.607]         }
[17:39:10.607]         base::close(...future.stdout)
[17:39:10.607]         ...future.stdout <- NULL
[17:39:10.607]     }
[17:39:10.607]     ...future.result$conditions <- ...future.conditions
[17:39:10.607]     ...future.result$finished <- base::Sys.time()
[17:39:10.607]     ...future.result
[17:39:10.607] }
[17:39:10.609] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[17:39:10.610] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:39:10.610] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:39:10.610] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[17:39:10.611] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[17:39:10.611] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[17:39:10.611] MultisessionFuture started
[17:39:10.611] - Launch lazy future ... done
[17:39:10.611] run() for ‘MultisessionFuture’ ... done
[17:39:10.612] result() for ClusterFuture ...
[17:39:10.612] receiveMessageFromWorker() for ClusterFuture ...
[17:39:10.612] - Validating connection of MultisessionFuture
[17:39:10.616] - received message: FutureResult
[17:39:10.617] - Received FutureResult
[17:39:10.617] - Erased future from FutureRegistry
[17:39:10.617] result() for ClusterFuture ...
[17:39:10.617] - result already collected: FutureResult
[17:39:10.617] result() for ClusterFuture ... done
[17:39:10.617] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:10.617] result() for ClusterFuture ... done
[17:39:10.618] result() for ClusterFuture ...
[17:39:10.618] - result already collected: FutureResult
[17:39:10.618] result() for ClusterFuture ... done
[1] 6
** Sum function 'C' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x5582e05e2468>
Arguments '...' exists: FALSE
[17:39:10.618] getGlobalsAndPackages() ...
[17:39:10.618] Searching for globals...
[17:39:10.620] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[17:39:10.620] Searching for globals ... DONE
[17:39:10.620] Resolving globals: FALSE
[17:39:10.621] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:10.621] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:39:10.621] - globals: [2] ‘x’, ‘y’
[17:39:10.621] 
[17:39:10.622] getGlobalsAndPackages() ... DONE
[17:39:10.622] run() for ‘Future’ ...
[17:39:10.622] - state: ‘created’
[17:39:10.622] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:10.637] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:10.637] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:10.637]   - Field: ‘node’
[17:39:10.637]   - Field: ‘label’
[17:39:10.637]   - Field: ‘local’
[17:39:10.637]   - Field: ‘owner’
[17:39:10.638]   - Field: ‘envir’
[17:39:10.638]   - Field: ‘workers’
[17:39:10.638]   - Field: ‘packages’
[17:39:10.638]   - Field: ‘gc’
[17:39:10.638]   - Field: ‘conditions’
[17:39:10.638]   - Field: ‘persistent’
[17:39:10.638]   - Field: ‘expr’
[17:39:10.638]   - Field: ‘uuid’
[17:39:10.638]   - Field: ‘seed’
[17:39:10.638]   - Field: ‘version’
[17:39:10.639]   - Field: ‘result’
[17:39:10.639]   - Field: ‘asynchronous’
[17:39:10.639]   - Field: ‘calls’
[17:39:10.639]   - Field: ‘globals’
[17:39:10.639]   - Field: ‘stdout’
[17:39:10.639]   - Field: ‘earlySignal’
[17:39:10.639]   - Field: ‘lazy’
[17:39:10.639]   - Field: ‘state’
[17:39:10.640] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:10.640] - Launch lazy future ...
[17:39:10.640] Packages needed by the future expression (n = 0): <none>
[17:39:10.640] Packages needed by future strategies (n = 0): <none>
[17:39:10.641] {
[17:39:10.641]     {
[17:39:10.641]         {
[17:39:10.641]             ...future.startTime <- base::Sys.time()
[17:39:10.641]             {
[17:39:10.641]                 {
[17:39:10.641]                   {
[17:39:10.641]                     {
[17:39:10.641]                       base::local({
[17:39:10.641]                         has_future <- base::requireNamespace("future", 
[17:39:10.641]                           quietly = TRUE)
[17:39:10.641]                         if (has_future) {
[17:39:10.641]                           ns <- base::getNamespace("future")
[17:39:10.641]                           version <- ns[[".package"]][["version"]]
[17:39:10.641]                           if (is.null(version)) 
[17:39:10.641]                             version <- utils::packageVersion("future")
[17:39:10.641]                         }
[17:39:10.641]                         else {
[17:39:10.641]                           version <- NULL
[17:39:10.641]                         }
[17:39:10.641]                         if (!has_future || version < "1.8.0") {
[17:39:10.641]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:10.641]                             "", base::R.version$version.string), 
[17:39:10.641]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:10.641]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:10.641]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:10.641]                               "release", "version")], collapse = " "), 
[17:39:10.641]                             hostname = base::Sys.info()[["nodename"]])
[17:39:10.641]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:10.641]                             info)
[17:39:10.641]                           info <- base::paste(info, collapse = "; ")
[17:39:10.641]                           if (!has_future) {
[17:39:10.641]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:10.641]                               info)
[17:39:10.641]                           }
[17:39:10.641]                           else {
[17:39:10.641]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:10.641]                               info, version)
[17:39:10.641]                           }
[17:39:10.641]                           base::stop(msg)
[17:39:10.641]                         }
[17:39:10.641]                       })
[17:39:10.641]                     }
[17:39:10.641]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:10.641]                     base::options(mc.cores = 1L)
[17:39:10.641]                   }
[17:39:10.641]                   ...future.strategy.old <- future::plan("list")
[17:39:10.641]                   options(future.plan = NULL)
[17:39:10.641]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.641]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:10.641]                 }
[17:39:10.641]                 ...future.workdir <- getwd()
[17:39:10.641]             }
[17:39:10.641]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:10.641]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:10.641]         }
[17:39:10.641]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:10.641]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:10.641]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:10.641]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:10.641]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:10.641]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:10.641]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:10.641]             base::names(...future.oldOptions))
[17:39:10.641]     }
[17:39:10.641]     if (FALSE) {
[17:39:10.641]     }
[17:39:10.641]     else {
[17:39:10.641]         if (TRUE) {
[17:39:10.641]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:10.641]                 open = "w")
[17:39:10.641]         }
[17:39:10.641]         else {
[17:39:10.641]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:10.641]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:10.641]         }
[17:39:10.641]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:10.641]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:10.641]             base::sink(type = "output", split = FALSE)
[17:39:10.641]             base::close(...future.stdout)
[17:39:10.641]         }, add = TRUE)
[17:39:10.641]     }
[17:39:10.641]     ...future.frame <- base::sys.nframe()
[17:39:10.641]     ...future.conditions <- base::list()
[17:39:10.641]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:10.641]     if (FALSE) {
[17:39:10.641]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:10.641]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:10.641]     }
[17:39:10.641]     ...future.result <- base::tryCatch({
[17:39:10.641]         base::withCallingHandlers({
[17:39:10.641]             ...future.value <- base::withVisible(base::local({
[17:39:10.641]                 ...future.makeSendCondition <- base::local({
[17:39:10.641]                   sendCondition <- NULL
[17:39:10.641]                   function(frame = 1L) {
[17:39:10.641]                     if (is.function(sendCondition)) 
[17:39:10.641]                       return(sendCondition)
[17:39:10.641]                     ns <- getNamespace("parallel")
[17:39:10.641]                     if (exists("sendData", mode = "function", 
[17:39:10.641]                       envir = ns)) {
[17:39:10.641]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:10.641]                         envir = ns)
[17:39:10.641]                       envir <- sys.frame(frame)
[17:39:10.641]                       master <- NULL
[17:39:10.641]                       while (!identical(envir, .GlobalEnv) && 
[17:39:10.641]                         !identical(envir, emptyenv())) {
[17:39:10.641]                         if (exists("master", mode = "list", envir = envir, 
[17:39:10.641]                           inherits = FALSE)) {
[17:39:10.641]                           master <- get("master", mode = "list", 
[17:39:10.641]                             envir = envir, inherits = FALSE)
[17:39:10.641]                           if (inherits(master, c("SOCKnode", 
[17:39:10.641]                             "SOCK0node"))) {
[17:39:10.641]                             sendCondition <<- function(cond) {
[17:39:10.641]                               data <- list(type = "VALUE", value = cond, 
[17:39:10.641]                                 success = TRUE)
[17:39:10.641]                               parallel_sendData(master, data)
[17:39:10.641]                             }
[17:39:10.641]                             return(sendCondition)
[17:39:10.641]                           }
[17:39:10.641]                         }
[17:39:10.641]                         frame <- frame + 1L
[17:39:10.641]                         envir <- sys.frame(frame)
[17:39:10.641]                       }
[17:39:10.641]                     }
[17:39:10.641]                     sendCondition <<- function(cond) NULL
[17:39:10.641]                   }
[17:39:10.641]                 })
[17:39:10.641]                 withCallingHandlers({
[17:39:10.641]                   {
[17:39:10.641]                     sum(x, y)
[17:39:10.641]                   }
[17:39:10.641]                 }, immediateCondition = function(cond) {
[17:39:10.641]                   sendCondition <- ...future.makeSendCondition()
[17:39:10.641]                   sendCondition(cond)
[17:39:10.641]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.641]                   {
[17:39:10.641]                     inherits <- base::inherits
[17:39:10.641]                     invokeRestart <- base::invokeRestart
[17:39:10.641]                     is.null <- base::is.null
[17:39:10.641]                     muffled <- FALSE
[17:39:10.641]                     if (inherits(cond, "message")) {
[17:39:10.641]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:10.641]                       if (muffled) 
[17:39:10.641]                         invokeRestart("muffleMessage")
[17:39:10.641]                     }
[17:39:10.641]                     else if (inherits(cond, "warning")) {
[17:39:10.641]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:10.641]                       if (muffled) 
[17:39:10.641]                         invokeRestart("muffleWarning")
[17:39:10.641]                     }
[17:39:10.641]                     else if (inherits(cond, "condition")) {
[17:39:10.641]                       if (!is.null(pattern)) {
[17:39:10.641]                         computeRestarts <- base::computeRestarts
[17:39:10.641]                         grepl <- base::grepl
[17:39:10.641]                         restarts <- computeRestarts(cond)
[17:39:10.641]                         for (restart in restarts) {
[17:39:10.641]                           name <- restart$name
[17:39:10.641]                           if (is.null(name)) 
[17:39:10.641]                             next
[17:39:10.641]                           if (!grepl(pattern, name)) 
[17:39:10.641]                             next
[17:39:10.641]                           invokeRestart(restart)
[17:39:10.641]                           muffled <- TRUE
[17:39:10.641]                           break
[17:39:10.641]                         }
[17:39:10.641]                       }
[17:39:10.641]                     }
[17:39:10.641]                     invisible(muffled)
[17:39:10.641]                   }
[17:39:10.641]                   muffleCondition(cond)
[17:39:10.641]                 })
[17:39:10.641]             }))
[17:39:10.641]             future::FutureResult(value = ...future.value$value, 
[17:39:10.641]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.641]                   ...future.rng), globalenv = if (FALSE) 
[17:39:10.641]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:10.641]                     ...future.globalenv.names))
[17:39:10.641]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:10.641]         }, condition = base::local({
[17:39:10.641]             c <- base::c
[17:39:10.641]             inherits <- base::inherits
[17:39:10.641]             invokeRestart <- base::invokeRestart
[17:39:10.641]             length <- base::length
[17:39:10.641]             list <- base::list
[17:39:10.641]             seq.int <- base::seq.int
[17:39:10.641]             signalCondition <- base::signalCondition
[17:39:10.641]             sys.calls <- base::sys.calls
[17:39:10.641]             `[[` <- base::`[[`
[17:39:10.641]             `+` <- base::`+`
[17:39:10.641]             `<<-` <- base::`<<-`
[17:39:10.641]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:10.641]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:10.641]                   3L)]
[17:39:10.641]             }
[17:39:10.641]             function(cond) {
[17:39:10.641]                 is_error <- inherits(cond, "error")
[17:39:10.641]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:10.641]                   NULL)
[17:39:10.641]                 if (is_error) {
[17:39:10.641]                   sessionInformation <- function() {
[17:39:10.641]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:10.641]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:10.641]                       search = base::search(), system = base::Sys.info())
[17:39:10.641]                   }
[17:39:10.641]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.641]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:10.641]                     cond$call), session = sessionInformation(), 
[17:39:10.641]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:10.641]                   signalCondition(cond)
[17:39:10.641]                 }
[17:39:10.641]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:10.641]                 "immediateCondition"))) {
[17:39:10.641]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:10.641]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.641]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:10.641]                   if (TRUE && !signal) {
[17:39:10.641]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.641]                     {
[17:39:10.641]                       inherits <- base::inherits
[17:39:10.641]                       invokeRestart <- base::invokeRestart
[17:39:10.641]                       is.null <- base::is.null
[17:39:10.641]                       muffled <- FALSE
[17:39:10.641]                       if (inherits(cond, "message")) {
[17:39:10.641]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.641]                         if (muffled) 
[17:39:10.641]                           invokeRestart("muffleMessage")
[17:39:10.641]                       }
[17:39:10.641]                       else if (inherits(cond, "warning")) {
[17:39:10.641]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.641]                         if (muffled) 
[17:39:10.641]                           invokeRestart("muffleWarning")
[17:39:10.641]                       }
[17:39:10.641]                       else if (inherits(cond, "condition")) {
[17:39:10.641]                         if (!is.null(pattern)) {
[17:39:10.641]                           computeRestarts <- base::computeRestarts
[17:39:10.641]                           grepl <- base::grepl
[17:39:10.641]                           restarts <- computeRestarts(cond)
[17:39:10.641]                           for (restart in restarts) {
[17:39:10.641]                             name <- restart$name
[17:39:10.641]                             if (is.null(name)) 
[17:39:10.641]                               next
[17:39:10.641]                             if (!grepl(pattern, name)) 
[17:39:10.641]                               next
[17:39:10.641]                             invokeRestart(restart)
[17:39:10.641]                             muffled <- TRUE
[17:39:10.641]                             break
[17:39:10.641]                           }
[17:39:10.641]                         }
[17:39:10.641]                       }
[17:39:10.641]                       invisible(muffled)
[17:39:10.641]                     }
[17:39:10.641]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.641]                   }
[17:39:10.641]                 }
[17:39:10.641]                 else {
[17:39:10.641]                   if (TRUE) {
[17:39:10.641]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.641]                     {
[17:39:10.641]                       inherits <- base::inherits
[17:39:10.641]                       invokeRestart <- base::invokeRestart
[17:39:10.641]                       is.null <- base::is.null
[17:39:10.641]                       muffled <- FALSE
[17:39:10.641]                       if (inherits(cond, "message")) {
[17:39:10.641]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.641]                         if (muffled) 
[17:39:10.641]                           invokeRestart("muffleMessage")
[17:39:10.641]                       }
[17:39:10.641]                       else if (inherits(cond, "warning")) {
[17:39:10.641]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.641]                         if (muffled) 
[17:39:10.641]                           invokeRestart("muffleWarning")
[17:39:10.641]                       }
[17:39:10.641]                       else if (inherits(cond, "condition")) {
[17:39:10.641]                         if (!is.null(pattern)) {
[17:39:10.641]                           computeRestarts <- base::computeRestarts
[17:39:10.641]                           grepl <- base::grepl
[17:39:10.641]                           restarts <- computeRestarts(cond)
[17:39:10.641]                           for (restart in restarts) {
[17:39:10.641]                             name <- restart$name
[17:39:10.641]                             if (is.null(name)) 
[17:39:10.641]                               next
[17:39:10.641]                             if (!grepl(pattern, name)) 
[17:39:10.641]                               next
[17:39:10.641]                             invokeRestart(restart)
[17:39:10.641]                             muffled <- TRUE
[17:39:10.641]                             break
[17:39:10.641]                           }
[17:39:10.641]                         }
[17:39:10.641]                       }
[17:39:10.641]                       invisible(muffled)
[17:39:10.641]                     }
[17:39:10.641]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.641]                   }
[17:39:10.641]                 }
[17:39:10.641]             }
[17:39:10.641]         }))
[17:39:10.641]     }, error = function(ex) {
[17:39:10.641]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:10.641]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.641]                 ...future.rng), started = ...future.startTime, 
[17:39:10.641]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:10.641]             version = "1.8"), class = "FutureResult")
[17:39:10.641]     }, finally = {
[17:39:10.641]         if (!identical(...future.workdir, getwd())) 
[17:39:10.641]             setwd(...future.workdir)
[17:39:10.641]         {
[17:39:10.641]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:10.641]                 ...future.oldOptions$nwarnings <- NULL
[17:39:10.641]             }
[17:39:10.641]             base::options(...future.oldOptions)
[17:39:10.641]             if (.Platform$OS.type == "windows") {
[17:39:10.641]                 old_names <- names(...future.oldEnvVars)
[17:39:10.641]                 envs <- base::Sys.getenv()
[17:39:10.641]                 names <- names(envs)
[17:39:10.641]                 common <- intersect(names, old_names)
[17:39:10.641]                 added <- setdiff(names, old_names)
[17:39:10.641]                 removed <- setdiff(old_names, names)
[17:39:10.641]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:10.641]                   envs[common]]
[17:39:10.641]                 NAMES <- toupper(changed)
[17:39:10.641]                 args <- list()
[17:39:10.641]                 for (kk in seq_along(NAMES)) {
[17:39:10.641]                   name <- changed[[kk]]
[17:39:10.641]                   NAME <- NAMES[[kk]]
[17:39:10.641]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.641]                     next
[17:39:10.641]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.641]                 }
[17:39:10.641]                 NAMES <- toupper(added)
[17:39:10.641]                 for (kk in seq_along(NAMES)) {
[17:39:10.641]                   name <- added[[kk]]
[17:39:10.641]                   NAME <- NAMES[[kk]]
[17:39:10.641]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.641]                     next
[17:39:10.641]                   args[[name]] <- ""
[17:39:10.641]                 }
[17:39:10.641]                 NAMES <- toupper(removed)
[17:39:10.641]                 for (kk in seq_along(NAMES)) {
[17:39:10.641]                   name <- removed[[kk]]
[17:39:10.641]                   NAME <- NAMES[[kk]]
[17:39:10.641]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.641]                     next
[17:39:10.641]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.641]                 }
[17:39:10.641]                 if (length(args) > 0) 
[17:39:10.641]                   base::do.call(base::Sys.setenv, args = args)
[17:39:10.641]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:10.641]             }
[17:39:10.641]             else {
[17:39:10.641]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:10.641]             }
[17:39:10.641]             {
[17:39:10.641]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:10.641]                   0L) {
[17:39:10.641]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:10.641]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:10.641]                   base::options(opts)
[17:39:10.641]                 }
[17:39:10.641]                 {
[17:39:10.641]                   {
[17:39:10.641]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:10.641]                     NULL
[17:39:10.641]                   }
[17:39:10.641]                   options(future.plan = NULL)
[17:39:10.641]                   if (is.na(NA_character_)) 
[17:39:10.641]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.641]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:10.641]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:10.641]                     .init = FALSE)
[17:39:10.641]                 }
[17:39:10.641]             }
[17:39:10.641]         }
[17:39:10.641]     })
[17:39:10.641]     if (TRUE) {
[17:39:10.641]         base::sink(type = "output", split = FALSE)
[17:39:10.641]         if (TRUE) {
[17:39:10.641]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:10.641]         }
[17:39:10.641]         else {
[17:39:10.641]             ...future.result["stdout"] <- base::list(NULL)
[17:39:10.641]         }
[17:39:10.641]         base::close(...future.stdout)
[17:39:10.641]         ...future.stdout <- NULL
[17:39:10.641]     }
[17:39:10.641]     ...future.result$conditions <- ...future.conditions
[17:39:10.641]     ...future.result$finished <- base::Sys.time()
[17:39:10.641]     ...future.result
[17:39:10.641] }
[17:39:10.644] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[17:39:10.644] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:39:10.644] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:39:10.644] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[17:39:10.645] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[17:39:10.645] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[17:39:10.645] MultisessionFuture started
[17:39:10.648] - Launch lazy future ... done
[17:39:10.648] run() for ‘MultisessionFuture’ ... done
[17:39:10.649] result() for ClusterFuture ...
[17:39:10.649] receiveMessageFromWorker() for ClusterFuture ...
[17:39:10.649] - Validating connection of MultisessionFuture
[17:39:10.649] - received message: FutureResult
[17:39:10.649] - Received FutureResult
[17:39:10.649] - Erased future from FutureRegistry
[17:39:10.649] result() for ClusterFuture ...
[17:39:10.649] - result already collected: FutureResult
[17:39:10.649] result() for ClusterFuture ... done
[17:39:10.649] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:10.650] result() for ClusterFuture ... done
[17:39:10.650] result() for ClusterFuture ...
[17:39:10.650] - result already collected: FutureResult
[17:39:10.650] result() for ClusterFuture ... done
[1] 6
** Sum function 'D' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5582e077e0c0>
Arguments '...' exists: FALSE
[17:39:10.650] getGlobalsAndPackages() ...
[17:39:10.651] Searching for globals...
[17:39:10.652] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[17:39:10.652] Searching for globals ... DONE
[17:39:10.652] Resolving globals: FALSE
[17:39:10.652] Tweak future expression to call with '...' arguments ...
[17:39:10.653] The total size of the 2 globals is 112 bytes (112 bytes)
[17:39:10.653] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:39:10.653] - globals: [2] ‘x’, ‘y’
[17:39:10.653] 
[17:39:10.653] getGlobalsAndPackages() ... DONE
[17:39:10.654] run() for ‘Future’ ...
[17:39:10.654] - state: ‘created’
[17:39:10.654] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:10.667] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:10.668] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:10.668]   - Field: ‘node’
[17:39:10.668]   - Field: ‘label’
[17:39:10.668]   - Field: ‘local’
[17:39:10.668]   - Field: ‘owner’
[17:39:10.668]   - Field: ‘envir’
[17:39:10.668]   - Field: ‘workers’
[17:39:10.668]   - Field: ‘packages’
[17:39:10.668]   - Field: ‘gc’
[17:39:10.669]   - Field: ‘conditions’
[17:39:10.669]   - Field: ‘persistent’
[17:39:10.669]   - Field: ‘expr’
[17:39:10.669]   - Field: ‘uuid’
[17:39:10.669]   - Field: ‘seed’
[17:39:10.669]   - Field: ‘version’
[17:39:10.669]   - Field: ‘result’
[17:39:10.669]   - Field: ‘asynchronous’
[17:39:10.669]   - Field: ‘calls’
[17:39:10.669]   - Field: ‘globals’
[17:39:10.669]   - Field: ‘stdout’
[17:39:10.669]   - Field: ‘earlySignal’
[17:39:10.670]   - Field: ‘lazy’
[17:39:10.670]   - Field: ‘state’
[17:39:10.670] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:10.670] - Launch lazy future ...
[17:39:10.670] Packages needed by the future expression (n = 0): <none>
[17:39:10.670] Packages needed by future strategies (n = 0): <none>
[17:39:10.671] {
[17:39:10.671]     {
[17:39:10.671]         {
[17:39:10.671]             ...future.startTime <- base::Sys.time()
[17:39:10.671]             {
[17:39:10.671]                 {
[17:39:10.671]                   {
[17:39:10.671]                     {
[17:39:10.671]                       base::local({
[17:39:10.671]                         has_future <- base::requireNamespace("future", 
[17:39:10.671]                           quietly = TRUE)
[17:39:10.671]                         if (has_future) {
[17:39:10.671]                           ns <- base::getNamespace("future")
[17:39:10.671]                           version <- ns[[".package"]][["version"]]
[17:39:10.671]                           if (is.null(version)) 
[17:39:10.671]                             version <- utils::packageVersion("future")
[17:39:10.671]                         }
[17:39:10.671]                         else {
[17:39:10.671]                           version <- NULL
[17:39:10.671]                         }
[17:39:10.671]                         if (!has_future || version < "1.8.0") {
[17:39:10.671]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:10.671]                             "", base::R.version$version.string), 
[17:39:10.671]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:10.671]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:10.671]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:10.671]                               "release", "version")], collapse = " "), 
[17:39:10.671]                             hostname = base::Sys.info()[["nodename"]])
[17:39:10.671]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:10.671]                             info)
[17:39:10.671]                           info <- base::paste(info, collapse = "; ")
[17:39:10.671]                           if (!has_future) {
[17:39:10.671]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:10.671]                               info)
[17:39:10.671]                           }
[17:39:10.671]                           else {
[17:39:10.671]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:10.671]                               info, version)
[17:39:10.671]                           }
[17:39:10.671]                           base::stop(msg)
[17:39:10.671]                         }
[17:39:10.671]                       })
[17:39:10.671]                     }
[17:39:10.671]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:10.671]                     base::options(mc.cores = 1L)
[17:39:10.671]                   }
[17:39:10.671]                   ...future.strategy.old <- future::plan("list")
[17:39:10.671]                   options(future.plan = NULL)
[17:39:10.671]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.671]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:10.671]                 }
[17:39:10.671]                 ...future.workdir <- getwd()
[17:39:10.671]             }
[17:39:10.671]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:10.671]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:10.671]         }
[17:39:10.671]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:10.671]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:10.671]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:10.671]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:10.671]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:10.671]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:10.671]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:10.671]             base::names(...future.oldOptions))
[17:39:10.671]     }
[17:39:10.671]     if (FALSE) {
[17:39:10.671]     }
[17:39:10.671]     else {
[17:39:10.671]         if (TRUE) {
[17:39:10.671]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:10.671]                 open = "w")
[17:39:10.671]         }
[17:39:10.671]         else {
[17:39:10.671]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:10.671]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:10.671]         }
[17:39:10.671]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:10.671]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:10.671]             base::sink(type = "output", split = FALSE)
[17:39:10.671]             base::close(...future.stdout)
[17:39:10.671]         }, add = TRUE)
[17:39:10.671]     }
[17:39:10.671]     ...future.frame <- base::sys.nframe()
[17:39:10.671]     ...future.conditions <- base::list()
[17:39:10.671]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:10.671]     if (FALSE) {
[17:39:10.671]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:10.671]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:10.671]     }
[17:39:10.671]     ...future.result <- base::tryCatch({
[17:39:10.671]         base::withCallingHandlers({
[17:39:10.671]             ...future.value <- base::withVisible(base::local({
[17:39:10.671]                 ...future.makeSendCondition <- base::local({
[17:39:10.671]                   sendCondition <- NULL
[17:39:10.671]                   function(frame = 1L) {
[17:39:10.671]                     if (is.function(sendCondition)) 
[17:39:10.671]                       return(sendCondition)
[17:39:10.671]                     ns <- getNamespace("parallel")
[17:39:10.671]                     if (exists("sendData", mode = "function", 
[17:39:10.671]                       envir = ns)) {
[17:39:10.671]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:10.671]                         envir = ns)
[17:39:10.671]                       envir <- sys.frame(frame)
[17:39:10.671]                       master <- NULL
[17:39:10.671]                       while (!identical(envir, .GlobalEnv) && 
[17:39:10.671]                         !identical(envir, emptyenv())) {
[17:39:10.671]                         if (exists("master", mode = "list", envir = envir, 
[17:39:10.671]                           inherits = FALSE)) {
[17:39:10.671]                           master <- get("master", mode = "list", 
[17:39:10.671]                             envir = envir, inherits = FALSE)
[17:39:10.671]                           if (inherits(master, c("SOCKnode", 
[17:39:10.671]                             "SOCK0node"))) {
[17:39:10.671]                             sendCondition <<- function(cond) {
[17:39:10.671]                               data <- list(type = "VALUE", value = cond, 
[17:39:10.671]                                 success = TRUE)
[17:39:10.671]                               parallel_sendData(master, data)
[17:39:10.671]                             }
[17:39:10.671]                             return(sendCondition)
[17:39:10.671]                           }
[17:39:10.671]                         }
[17:39:10.671]                         frame <- frame + 1L
[17:39:10.671]                         envir <- sys.frame(frame)
[17:39:10.671]                       }
[17:39:10.671]                     }
[17:39:10.671]                     sendCondition <<- function(cond) NULL
[17:39:10.671]                   }
[17:39:10.671]                 })
[17:39:10.671]                 withCallingHandlers({
[17:39:10.671]                   {
[17:39:10.671]                     sum(x, y, ...)
[17:39:10.671]                   }
[17:39:10.671]                 }, immediateCondition = function(cond) {
[17:39:10.671]                   sendCondition <- ...future.makeSendCondition()
[17:39:10.671]                   sendCondition(cond)
[17:39:10.671]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.671]                   {
[17:39:10.671]                     inherits <- base::inherits
[17:39:10.671]                     invokeRestart <- base::invokeRestart
[17:39:10.671]                     is.null <- base::is.null
[17:39:10.671]                     muffled <- FALSE
[17:39:10.671]                     if (inherits(cond, "message")) {
[17:39:10.671]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:10.671]                       if (muffled) 
[17:39:10.671]                         invokeRestart("muffleMessage")
[17:39:10.671]                     }
[17:39:10.671]                     else if (inherits(cond, "warning")) {
[17:39:10.671]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:10.671]                       if (muffled) 
[17:39:10.671]                         invokeRestart("muffleWarning")
[17:39:10.671]                     }
[17:39:10.671]                     else if (inherits(cond, "condition")) {
[17:39:10.671]                       if (!is.null(pattern)) {
[17:39:10.671]                         computeRestarts <- base::computeRestarts
[17:39:10.671]                         grepl <- base::grepl
[17:39:10.671]                         restarts <- computeRestarts(cond)
[17:39:10.671]                         for (restart in restarts) {
[17:39:10.671]                           name <- restart$name
[17:39:10.671]                           if (is.null(name)) 
[17:39:10.671]                             next
[17:39:10.671]                           if (!grepl(pattern, name)) 
[17:39:10.671]                             next
[17:39:10.671]                           invokeRestart(restart)
[17:39:10.671]                           muffled <- TRUE
[17:39:10.671]                           break
[17:39:10.671]                         }
[17:39:10.671]                       }
[17:39:10.671]                     }
[17:39:10.671]                     invisible(muffled)
[17:39:10.671]                   }
[17:39:10.671]                   muffleCondition(cond)
[17:39:10.671]                 })
[17:39:10.671]             }))
[17:39:10.671]             future::FutureResult(value = ...future.value$value, 
[17:39:10.671]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.671]                   ...future.rng), globalenv = if (FALSE) 
[17:39:10.671]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:10.671]                     ...future.globalenv.names))
[17:39:10.671]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:10.671]         }, condition = base::local({
[17:39:10.671]             c <- base::c
[17:39:10.671]             inherits <- base::inherits
[17:39:10.671]             invokeRestart <- base::invokeRestart
[17:39:10.671]             length <- base::length
[17:39:10.671]             list <- base::list
[17:39:10.671]             seq.int <- base::seq.int
[17:39:10.671]             signalCondition <- base::signalCondition
[17:39:10.671]             sys.calls <- base::sys.calls
[17:39:10.671]             `[[` <- base::`[[`
[17:39:10.671]             `+` <- base::`+`
[17:39:10.671]             `<<-` <- base::`<<-`
[17:39:10.671]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:10.671]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:10.671]                   3L)]
[17:39:10.671]             }
[17:39:10.671]             function(cond) {
[17:39:10.671]                 is_error <- inherits(cond, "error")
[17:39:10.671]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:10.671]                   NULL)
[17:39:10.671]                 if (is_error) {
[17:39:10.671]                   sessionInformation <- function() {
[17:39:10.671]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:10.671]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:10.671]                       search = base::search(), system = base::Sys.info())
[17:39:10.671]                   }
[17:39:10.671]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.671]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:10.671]                     cond$call), session = sessionInformation(), 
[17:39:10.671]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:10.671]                   signalCondition(cond)
[17:39:10.671]                 }
[17:39:10.671]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:10.671]                 "immediateCondition"))) {
[17:39:10.671]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:10.671]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.671]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:10.671]                   if (TRUE && !signal) {
[17:39:10.671]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.671]                     {
[17:39:10.671]                       inherits <- base::inherits
[17:39:10.671]                       invokeRestart <- base::invokeRestart
[17:39:10.671]                       is.null <- base::is.null
[17:39:10.671]                       muffled <- FALSE
[17:39:10.671]                       if (inherits(cond, "message")) {
[17:39:10.671]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.671]                         if (muffled) 
[17:39:10.671]                           invokeRestart("muffleMessage")
[17:39:10.671]                       }
[17:39:10.671]                       else if (inherits(cond, "warning")) {
[17:39:10.671]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.671]                         if (muffled) 
[17:39:10.671]                           invokeRestart("muffleWarning")
[17:39:10.671]                       }
[17:39:10.671]                       else if (inherits(cond, "condition")) {
[17:39:10.671]                         if (!is.null(pattern)) {
[17:39:10.671]                           computeRestarts <- base::computeRestarts
[17:39:10.671]                           grepl <- base::grepl
[17:39:10.671]                           restarts <- computeRestarts(cond)
[17:39:10.671]                           for (restart in restarts) {
[17:39:10.671]                             name <- restart$name
[17:39:10.671]                             if (is.null(name)) 
[17:39:10.671]                               next
[17:39:10.671]                             if (!grepl(pattern, name)) 
[17:39:10.671]                               next
[17:39:10.671]                             invokeRestart(restart)
[17:39:10.671]                             muffled <- TRUE
[17:39:10.671]                             break
[17:39:10.671]                           }
[17:39:10.671]                         }
[17:39:10.671]                       }
[17:39:10.671]                       invisible(muffled)
[17:39:10.671]                     }
[17:39:10.671]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.671]                   }
[17:39:10.671]                 }
[17:39:10.671]                 else {
[17:39:10.671]                   if (TRUE) {
[17:39:10.671]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.671]                     {
[17:39:10.671]                       inherits <- base::inherits
[17:39:10.671]                       invokeRestart <- base::invokeRestart
[17:39:10.671]                       is.null <- base::is.null
[17:39:10.671]                       muffled <- FALSE
[17:39:10.671]                       if (inherits(cond, "message")) {
[17:39:10.671]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.671]                         if (muffled) 
[17:39:10.671]                           invokeRestart("muffleMessage")
[17:39:10.671]                       }
[17:39:10.671]                       else if (inherits(cond, "warning")) {
[17:39:10.671]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.671]                         if (muffled) 
[17:39:10.671]                           invokeRestart("muffleWarning")
[17:39:10.671]                       }
[17:39:10.671]                       else if (inherits(cond, "condition")) {
[17:39:10.671]                         if (!is.null(pattern)) {
[17:39:10.671]                           computeRestarts <- base::computeRestarts
[17:39:10.671]                           grepl <- base::grepl
[17:39:10.671]                           restarts <- computeRestarts(cond)
[17:39:10.671]                           for (restart in restarts) {
[17:39:10.671]                             name <- restart$name
[17:39:10.671]                             if (is.null(name)) 
[17:39:10.671]                               next
[17:39:10.671]                             if (!grepl(pattern, name)) 
[17:39:10.671]                               next
[17:39:10.671]                             invokeRestart(restart)
[17:39:10.671]                             muffled <- TRUE
[17:39:10.671]                             break
[17:39:10.671]                           }
[17:39:10.671]                         }
[17:39:10.671]                       }
[17:39:10.671]                       invisible(muffled)
[17:39:10.671]                     }
[17:39:10.671]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.671]                   }
[17:39:10.671]                 }
[17:39:10.671]             }
[17:39:10.671]         }))
[17:39:10.671]     }, error = function(ex) {
[17:39:10.671]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:10.671]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.671]                 ...future.rng), started = ...future.startTime, 
[17:39:10.671]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:10.671]             version = "1.8"), class = "FutureResult")
[17:39:10.671]     }, finally = {
[17:39:10.671]         if (!identical(...future.workdir, getwd())) 
[17:39:10.671]             setwd(...future.workdir)
[17:39:10.671]         {
[17:39:10.671]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:10.671]                 ...future.oldOptions$nwarnings <- NULL
[17:39:10.671]             }
[17:39:10.671]             base::options(...future.oldOptions)
[17:39:10.671]             if (.Platform$OS.type == "windows") {
[17:39:10.671]                 old_names <- names(...future.oldEnvVars)
[17:39:10.671]                 envs <- base::Sys.getenv()
[17:39:10.671]                 names <- names(envs)
[17:39:10.671]                 common <- intersect(names, old_names)
[17:39:10.671]                 added <- setdiff(names, old_names)
[17:39:10.671]                 removed <- setdiff(old_names, names)
[17:39:10.671]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:10.671]                   envs[common]]
[17:39:10.671]                 NAMES <- toupper(changed)
[17:39:10.671]                 args <- list()
[17:39:10.671]                 for (kk in seq_along(NAMES)) {
[17:39:10.671]                   name <- changed[[kk]]
[17:39:10.671]                   NAME <- NAMES[[kk]]
[17:39:10.671]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.671]                     next
[17:39:10.671]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.671]                 }
[17:39:10.671]                 NAMES <- toupper(added)
[17:39:10.671]                 for (kk in seq_along(NAMES)) {
[17:39:10.671]                   name <- added[[kk]]
[17:39:10.671]                   NAME <- NAMES[[kk]]
[17:39:10.671]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.671]                     next
[17:39:10.671]                   args[[name]] <- ""
[17:39:10.671]                 }
[17:39:10.671]                 NAMES <- toupper(removed)
[17:39:10.671]                 for (kk in seq_along(NAMES)) {
[17:39:10.671]                   name <- removed[[kk]]
[17:39:10.671]                   NAME <- NAMES[[kk]]
[17:39:10.671]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.671]                     next
[17:39:10.671]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.671]                 }
[17:39:10.671]                 if (length(args) > 0) 
[17:39:10.671]                   base::do.call(base::Sys.setenv, args = args)
[17:39:10.671]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:10.671]             }
[17:39:10.671]             else {
[17:39:10.671]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:10.671]             }
[17:39:10.671]             {
[17:39:10.671]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:10.671]                   0L) {
[17:39:10.671]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:10.671]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:10.671]                   base::options(opts)
[17:39:10.671]                 }
[17:39:10.671]                 {
[17:39:10.671]                   {
[17:39:10.671]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:10.671]                     NULL
[17:39:10.671]                   }
[17:39:10.671]                   options(future.plan = NULL)
[17:39:10.671]                   if (is.na(NA_character_)) 
[17:39:10.671]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.671]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:10.671]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:10.671]                     .init = FALSE)
[17:39:10.671]                 }
[17:39:10.671]             }
[17:39:10.671]         }
[17:39:10.671]     })
[17:39:10.671]     if (TRUE) {
[17:39:10.671]         base::sink(type = "output", split = FALSE)
[17:39:10.671]         if (TRUE) {
[17:39:10.671]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:10.671]         }
[17:39:10.671]         else {
[17:39:10.671]             ...future.result["stdout"] <- base::list(NULL)
[17:39:10.671]         }
[17:39:10.671]         base::close(...future.stdout)
[17:39:10.671]         ...future.stdout <- NULL
[17:39:10.671]     }
[17:39:10.671]     ...future.result$conditions <- ...future.conditions
[17:39:10.671]     ...future.result$finished <- base::Sys.time()
[17:39:10.671]     ...future.result
[17:39:10.671] }
[17:39:10.673] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[17:39:10.673] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:39:10.674] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:39:10.674] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[17:39:10.674] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[17:39:10.674] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[17:39:10.675] MultisessionFuture started
[17:39:10.675] - Launch lazy future ... done
[17:39:10.675] run() for ‘MultisessionFuture’ ... done
[17:39:10.675] result() for ClusterFuture ...
[17:39:10.675] receiveMessageFromWorker() for ClusterFuture ...
[17:39:10.675] - Validating connection of MultisessionFuture
[17:39:10.677] - received message: FutureResult
[17:39:10.677] - Received FutureResult
[17:39:10.677] - Erased future from FutureRegistry
[17:39:10.677] result() for ClusterFuture ...
[17:39:10.677] - result already collected: FutureResult
[17:39:10.678] result() for ClusterFuture ... done
[17:39:10.678] signalConditions() ...
[17:39:10.678]  - include = ‘immediateCondition’
[17:39:10.678]  - exclude = 
[17:39:10.678]  - resignal = FALSE
[17:39:10.678]  - Number of conditions: 1
[17:39:10.678] signalConditions() ... done
[17:39:10.678] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:10.678] result() for ClusterFuture ... done
[17:39:10.678] result() for ClusterFuture ...
[17:39:10.678] - result already collected: FutureResult
[17:39:10.678] result() for ClusterFuture ... done
[17:39:10.679] signalConditions() ...
[17:39:10.679]  - include = ‘immediateCondition’
[17:39:10.679]  - exclude = 
[17:39:10.679]  - resignal = FALSE
[17:39:10.679]  - Number of conditions: 1
[17:39:10.679] signalConditions() ... done
[17:39:10.679] Future state: ‘finished’
[17:39:10.679] result() for ClusterFuture ...
[17:39:10.679] - result already collected: FutureResult
[17:39:10.679] result() for ClusterFuture ... done
[17:39:10.679] signalConditions() ...
[17:39:10.680]  - include = ‘condition’
[17:39:10.680]  - exclude = ‘immediateCondition’
[17:39:10.680]  - resignal = TRUE
[17:39:10.680]  - Number of conditions: 1
[17:39:10.680]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:10.680] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multisession') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x5582e0d69798>
Arguments '...' exists: TRUE
[17:39:10.681] getGlobalsAndPackages() ...
[17:39:10.681] - globals passed as-is: [1] ‘...’
[17:39:10.681] Resolving globals: FALSE
[17:39:10.681] Tweak future expression to call with '...' arguments ...
[17:39:10.681] {
[17:39:10.681]     do.call(function(...) {
[17:39:10.681]         fcn <- function() sum(...)
[17:39:10.681]         fcn()
[17:39:10.681]     }, args = future.call.arguments)
[17:39:10.681] }
[17:39:10.682] Tweak future expression to call with '...' arguments ... DONE
[17:39:10.682] The total size of the 1 globals is 112 bytes (112 bytes)
[17:39:10.682] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[17:39:10.682] - globals: [1] ‘future.call.arguments’
[17:39:10.683] 
[17:39:10.683] getGlobalsAndPackages() ... DONE
[17:39:10.683] run() for ‘Future’ ...
[17:39:10.683] - state: ‘created’
[17:39:10.683] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:10.697] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:10.697] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:10.697]   - Field: ‘node’
[17:39:10.697]   - Field: ‘label’
[17:39:10.697]   - Field: ‘local’
[17:39:10.697]   - Field: ‘owner’
[17:39:10.697]   - Field: ‘envir’
[17:39:10.698]   - Field: ‘workers’
[17:39:10.698]   - Field: ‘packages’
[17:39:10.698]   - Field: ‘gc’
[17:39:10.698]   - Field: ‘conditions’
[17:39:10.698]   - Field: ‘persistent’
[17:39:10.698]   - Field: ‘expr’
[17:39:10.698]   - Field: ‘uuid’
[17:39:10.698]   - Field: ‘seed’
[17:39:10.698]   - Field: ‘version’
[17:39:10.698]   - Field: ‘result’
[17:39:10.698]   - Field: ‘asynchronous’
[17:39:10.699]   - Field: ‘calls’
[17:39:10.699]   - Field: ‘globals’
[17:39:10.699]   - Field: ‘stdout’
[17:39:10.699]   - Field: ‘earlySignal’
[17:39:10.699]   - Field: ‘lazy’
[17:39:10.699]   - Field: ‘state’
[17:39:10.699] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:10.699] - Launch lazy future ...
[17:39:10.699] Packages needed by the future expression (n = 0): <none>
[17:39:10.700] Packages needed by future strategies (n = 0): <none>
[17:39:10.700] {
[17:39:10.700]     {
[17:39:10.700]         {
[17:39:10.700]             ...future.startTime <- base::Sys.time()
[17:39:10.700]             {
[17:39:10.700]                 {
[17:39:10.700]                   {
[17:39:10.700]                     {
[17:39:10.700]                       base::local({
[17:39:10.700]                         has_future <- base::requireNamespace("future", 
[17:39:10.700]                           quietly = TRUE)
[17:39:10.700]                         if (has_future) {
[17:39:10.700]                           ns <- base::getNamespace("future")
[17:39:10.700]                           version <- ns[[".package"]][["version"]]
[17:39:10.700]                           if (is.null(version)) 
[17:39:10.700]                             version <- utils::packageVersion("future")
[17:39:10.700]                         }
[17:39:10.700]                         else {
[17:39:10.700]                           version <- NULL
[17:39:10.700]                         }
[17:39:10.700]                         if (!has_future || version < "1.8.0") {
[17:39:10.700]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:10.700]                             "", base::R.version$version.string), 
[17:39:10.700]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:10.700]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:10.700]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:10.700]                               "release", "version")], collapse = " "), 
[17:39:10.700]                             hostname = base::Sys.info()[["nodename"]])
[17:39:10.700]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:10.700]                             info)
[17:39:10.700]                           info <- base::paste(info, collapse = "; ")
[17:39:10.700]                           if (!has_future) {
[17:39:10.700]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:10.700]                               info)
[17:39:10.700]                           }
[17:39:10.700]                           else {
[17:39:10.700]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:10.700]                               info, version)
[17:39:10.700]                           }
[17:39:10.700]                           base::stop(msg)
[17:39:10.700]                         }
[17:39:10.700]                       })
[17:39:10.700]                     }
[17:39:10.700]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:10.700]                     base::options(mc.cores = 1L)
[17:39:10.700]                   }
[17:39:10.700]                   ...future.strategy.old <- future::plan("list")
[17:39:10.700]                   options(future.plan = NULL)
[17:39:10.700]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.700]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:10.700]                 }
[17:39:10.700]                 ...future.workdir <- getwd()
[17:39:10.700]             }
[17:39:10.700]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:10.700]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:10.700]         }
[17:39:10.700]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:10.700]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:10.700]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:10.700]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:10.700]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:10.700]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:10.700]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:10.700]             base::names(...future.oldOptions))
[17:39:10.700]     }
[17:39:10.700]     if (FALSE) {
[17:39:10.700]     }
[17:39:10.700]     else {
[17:39:10.700]         if (TRUE) {
[17:39:10.700]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:10.700]                 open = "w")
[17:39:10.700]         }
[17:39:10.700]         else {
[17:39:10.700]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:10.700]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:10.700]         }
[17:39:10.700]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:10.700]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:10.700]             base::sink(type = "output", split = FALSE)
[17:39:10.700]             base::close(...future.stdout)
[17:39:10.700]         }, add = TRUE)
[17:39:10.700]     }
[17:39:10.700]     ...future.frame <- base::sys.nframe()
[17:39:10.700]     ...future.conditions <- base::list()
[17:39:10.700]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:10.700]     if (FALSE) {
[17:39:10.700]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:10.700]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:10.700]     }
[17:39:10.700]     ...future.result <- base::tryCatch({
[17:39:10.700]         base::withCallingHandlers({
[17:39:10.700]             ...future.value <- base::withVisible(base::local({
[17:39:10.700]                 ...future.makeSendCondition <- base::local({
[17:39:10.700]                   sendCondition <- NULL
[17:39:10.700]                   function(frame = 1L) {
[17:39:10.700]                     if (is.function(sendCondition)) 
[17:39:10.700]                       return(sendCondition)
[17:39:10.700]                     ns <- getNamespace("parallel")
[17:39:10.700]                     if (exists("sendData", mode = "function", 
[17:39:10.700]                       envir = ns)) {
[17:39:10.700]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:10.700]                         envir = ns)
[17:39:10.700]                       envir <- sys.frame(frame)
[17:39:10.700]                       master <- NULL
[17:39:10.700]                       while (!identical(envir, .GlobalEnv) && 
[17:39:10.700]                         !identical(envir, emptyenv())) {
[17:39:10.700]                         if (exists("master", mode = "list", envir = envir, 
[17:39:10.700]                           inherits = FALSE)) {
[17:39:10.700]                           master <- get("master", mode = "list", 
[17:39:10.700]                             envir = envir, inherits = FALSE)
[17:39:10.700]                           if (inherits(master, c("SOCKnode", 
[17:39:10.700]                             "SOCK0node"))) {
[17:39:10.700]                             sendCondition <<- function(cond) {
[17:39:10.700]                               data <- list(type = "VALUE", value = cond, 
[17:39:10.700]                                 success = TRUE)
[17:39:10.700]                               parallel_sendData(master, data)
[17:39:10.700]                             }
[17:39:10.700]                             return(sendCondition)
[17:39:10.700]                           }
[17:39:10.700]                         }
[17:39:10.700]                         frame <- frame + 1L
[17:39:10.700]                         envir <- sys.frame(frame)
[17:39:10.700]                       }
[17:39:10.700]                     }
[17:39:10.700]                     sendCondition <<- function(cond) NULL
[17:39:10.700]                   }
[17:39:10.700]                 })
[17:39:10.700]                 withCallingHandlers({
[17:39:10.700]                   {
[17:39:10.700]                     do.call(function(...) {
[17:39:10.700]                       fcn <- function() sum(...)
[17:39:10.700]                       fcn()
[17:39:10.700]                     }, args = future.call.arguments)
[17:39:10.700]                   }
[17:39:10.700]                 }, immediateCondition = function(cond) {
[17:39:10.700]                   sendCondition <- ...future.makeSendCondition()
[17:39:10.700]                   sendCondition(cond)
[17:39:10.700]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.700]                   {
[17:39:10.700]                     inherits <- base::inherits
[17:39:10.700]                     invokeRestart <- base::invokeRestart
[17:39:10.700]                     is.null <- base::is.null
[17:39:10.700]                     muffled <- FALSE
[17:39:10.700]                     if (inherits(cond, "message")) {
[17:39:10.700]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:10.700]                       if (muffled) 
[17:39:10.700]                         invokeRestart("muffleMessage")
[17:39:10.700]                     }
[17:39:10.700]                     else if (inherits(cond, "warning")) {
[17:39:10.700]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:10.700]                       if (muffled) 
[17:39:10.700]                         invokeRestart("muffleWarning")
[17:39:10.700]                     }
[17:39:10.700]                     else if (inherits(cond, "condition")) {
[17:39:10.700]                       if (!is.null(pattern)) {
[17:39:10.700]                         computeRestarts <- base::computeRestarts
[17:39:10.700]                         grepl <- base::grepl
[17:39:10.700]                         restarts <- computeRestarts(cond)
[17:39:10.700]                         for (restart in restarts) {
[17:39:10.700]                           name <- restart$name
[17:39:10.700]                           if (is.null(name)) 
[17:39:10.700]                             next
[17:39:10.700]                           if (!grepl(pattern, name)) 
[17:39:10.700]                             next
[17:39:10.700]                           invokeRestart(restart)
[17:39:10.700]                           muffled <- TRUE
[17:39:10.700]                           break
[17:39:10.700]                         }
[17:39:10.700]                       }
[17:39:10.700]                     }
[17:39:10.700]                     invisible(muffled)
[17:39:10.700]                   }
[17:39:10.700]                   muffleCondition(cond)
[17:39:10.700]                 })
[17:39:10.700]             }))
[17:39:10.700]             future::FutureResult(value = ...future.value$value, 
[17:39:10.700]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.700]                   ...future.rng), globalenv = if (FALSE) 
[17:39:10.700]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:10.700]                     ...future.globalenv.names))
[17:39:10.700]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:10.700]         }, condition = base::local({
[17:39:10.700]             c <- base::c
[17:39:10.700]             inherits <- base::inherits
[17:39:10.700]             invokeRestart <- base::invokeRestart
[17:39:10.700]             length <- base::length
[17:39:10.700]             list <- base::list
[17:39:10.700]             seq.int <- base::seq.int
[17:39:10.700]             signalCondition <- base::signalCondition
[17:39:10.700]             sys.calls <- base::sys.calls
[17:39:10.700]             `[[` <- base::`[[`
[17:39:10.700]             `+` <- base::`+`
[17:39:10.700]             `<<-` <- base::`<<-`
[17:39:10.700]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:10.700]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:10.700]                   3L)]
[17:39:10.700]             }
[17:39:10.700]             function(cond) {
[17:39:10.700]                 is_error <- inherits(cond, "error")
[17:39:10.700]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:10.700]                   NULL)
[17:39:10.700]                 if (is_error) {
[17:39:10.700]                   sessionInformation <- function() {
[17:39:10.700]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:10.700]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:10.700]                       search = base::search(), system = base::Sys.info())
[17:39:10.700]                   }
[17:39:10.700]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.700]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:10.700]                     cond$call), session = sessionInformation(), 
[17:39:10.700]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:10.700]                   signalCondition(cond)
[17:39:10.700]                 }
[17:39:10.700]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:10.700]                 "immediateCondition"))) {
[17:39:10.700]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:10.700]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.700]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:10.700]                   if (TRUE && !signal) {
[17:39:10.700]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.700]                     {
[17:39:10.700]                       inherits <- base::inherits
[17:39:10.700]                       invokeRestart <- base::invokeRestart
[17:39:10.700]                       is.null <- base::is.null
[17:39:10.700]                       muffled <- FALSE
[17:39:10.700]                       if (inherits(cond, "message")) {
[17:39:10.700]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.700]                         if (muffled) 
[17:39:10.700]                           invokeRestart("muffleMessage")
[17:39:10.700]                       }
[17:39:10.700]                       else if (inherits(cond, "warning")) {
[17:39:10.700]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.700]                         if (muffled) 
[17:39:10.700]                           invokeRestart("muffleWarning")
[17:39:10.700]                       }
[17:39:10.700]                       else if (inherits(cond, "condition")) {
[17:39:10.700]                         if (!is.null(pattern)) {
[17:39:10.700]                           computeRestarts <- base::computeRestarts
[17:39:10.700]                           grepl <- base::grepl
[17:39:10.700]                           restarts <- computeRestarts(cond)
[17:39:10.700]                           for (restart in restarts) {
[17:39:10.700]                             name <- restart$name
[17:39:10.700]                             if (is.null(name)) 
[17:39:10.700]                               next
[17:39:10.700]                             if (!grepl(pattern, name)) 
[17:39:10.700]                               next
[17:39:10.700]                             invokeRestart(restart)
[17:39:10.700]                             muffled <- TRUE
[17:39:10.700]                             break
[17:39:10.700]                           }
[17:39:10.700]                         }
[17:39:10.700]                       }
[17:39:10.700]                       invisible(muffled)
[17:39:10.700]                     }
[17:39:10.700]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.700]                   }
[17:39:10.700]                 }
[17:39:10.700]                 else {
[17:39:10.700]                   if (TRUE) {
[17:39:10.700]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.700]                     {
[17:39:10.700]                       inherits <- base::inherits
[17:39:10.700]                       invokeRestart <- base::invokeRestart
[17:39:10.700]                       is.null <- base::is.null
[17:39:10.700]                       muffled <- FALSE
[17:39:10.700]                       if (inherits(cond, "message")) {
[17:39:10.700]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.700]                         if (muffled) 
[17:39:10.700]                           invokeRestart("muffleMessage")
[17:39:10.700]                       }
[17:39:10.700]                       else if (inherits(cond, "warning")) {
[17:39:10.700]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.700]                         if (muffled) 
[17:39:10.700]                           invokeRestart("muffleWarning")
[17:39:10.700]                       }
[17:39:10.700]                       else if (inherits(cond, "condition")) {
[17:39:10.700]                         if (!is.null(pattern)) {
[17:39:10.700]                           computeRestarts <- base::computeRestarts
[17:39:10.700]                           grepl <- base::grepl
[17:39:10.700]                           restarts <- computeRestarts(cond)
[17:39:10.700]                           for (restart in restarts) {
[17:39:10.700]                             name <- restart$name
[17:39:10.700]                             if (is.null(name)) 
[17:39:10.700]                               next
[17:39:10.700]                             if (!grepl(pattern, name)) 
[17:39:10.700]                               next
[17:39:10.700]                             invokeRestart(restart)
[17:39:10.700]                             muffled <- TRUE
[17:39:10.700]                             break
[17:39:10.700]                           }
[17:39:10.700]                         }
[17:39:10.700]                       }
[17:39:10.700]                       invisible(muffled)
[17:39:10.700]                     }
[17:39:10.700]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.700]                   }
[17:39:10.700]                 }
[17:39:10.700]             }
[17:39:10.700]         }))
[17:39:10.700]     }, error = function(ex) {
[17:39:10.700]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:10.700]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.700]                 ...future.rng), started = ...future.startTime, 
[17:39:10.700]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:10.700]             version = "1.8"), class = "FutureResult")
[17:39:10.700]     }, finally = {
[17:39:10.700]         if (!identical(...future.workdir, getwd())) 
[17:39:10.700]             setwd(...future.workdir)
[17:39:10.700]         {
[17:39:10.700]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:10.700]                 ...future.oldOptions$nwarnings <- NULL
[17:39:10.700]             }
[17:39:10.700]             base::options(...future.oldOptions)
[17:39:10.700]             if (.Platform$OS.type == "windows") {
[17:39:10.700]                 old_names <- names(...future.oldEnvVars)
[17:39:10.700]                 envs <- base::Sys.getenv()
[17:39:10.700]                 names <- names(envs)
[17:39:10.700]                 common <- intersect(names, old_names)
[17:39:10.700]                 added <- setdiff(names, old_names)
[17:39:10.700]                 removed <- setdiff(old_names, names)
[17:39:10.700]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:10.700]                   envs[common]]
[17:39:10.700]                 NAMES <- toupper(changed)
[17:39:10.700]                 args <- list()
[17:39:10.700]                 for (kk in seq_along(NAMES)) {
[17:39:10.700]                   name <- changed[[kk]]
[17:39:10.700]                   NAME <- NAMES[[kk]]
[17:39:10.700]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.700]                     next
[17:39:10.700]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.700]                 }
[17:39:10.700]                 NAMES <- toupper(added)
[17:39:10.700]                 for (kk in seq_along(NAMES)) {
[17:39:10.700]                   name <- added[[kk]]
[17:39:10.700]                   NAME <- NAMES[[kk]]
[17:39:10.700]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.700]                     next
[17:39:10.700]                   args[[name]] <- ""
[17:39:10.700]                 }
[17:39:10.700]                 NAMES <- toupper(removed)
[17:39:10.700]                 for (kk in seq_along(NAMES)) {
[17:39:10.700]                   name <- removed[[kk]]
[17:39:10.700]                   NAME <- NAMES[[kk]]
[17:39:10.700]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.700]                     next
[17:39:10.700]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.700]                 }
[17:39:10.700]                 if (length(args) > 0) 
[17:39:10.700]                   base::do.call(base::Sys.setenv, args = args)
[17:39:10.700]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:10.700]             }
[17:39:10.700]             else {
[17:39:10.700]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:10.700]             }
[17:39:10.700]             {
[17:39:10.700]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:10.700]                   0L) {
[17:39:10.700]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:10.700]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:10.700]                   base::options(opts)
[17:39:10.700]                 }
[17:39:10.700]                 {
[17:39:10.700]                   {
[17:39:10.700]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:10.700]                     NULL
[17:39:10.700]                   }
[17:39:10.700]                   options(future.plan = NULL)
[17:39:10.700]                   if (is.na(NA_character_)) 
[17:39:10.700]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.700]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:10.700]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:10.700]                     .init = FALSE)
[17:39:10.700]                 }
[17:39:10.700]             }
[17:39:10.700]         }
[17:39:10.700]     })
[17:39:10.700]     if (TRUE) {
[17:39:10.700]         base::sink(type = "output", split = FALSE)
[17:39:10.700]         if (TRUE) {
[17:39:10.700]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:10.700]         }
[17:39:10.700]         else {
[17:39:10.700]             ...future.result["stdout"] <- base::list(NULL)
[17:39:10.700]         }
[17:39:10.700]         base::close(...future.stdout)
[17:39:10.700]         ...future.stdout <- NULL
[17:39:10.700]     }
[17:39:10.700]     ...future.result$conditions <- ...future.conditions
[17:39:10.700]     ...future.result$finished <- base::Sys.time()
[17:39:10.700]     ...future.result
[17:39:10.700] }
[17:39:10.703] Exporting 1 global objects (112 bytes) to cluster node #1 ...
[17:39:10.703] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ...
[17:39:10.703] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ... DONE
[17:39:10.703] Exporting 1 global objects (112 bytes) to cluster node #1 ... DONE
[17:39:10.704] MultisessionFuture started
[17:39:10.704] - Launch lazy future ... done
[17:39:10.704] run() for ‘MultisessionFuture’ ... done
[17:39:10.704] result() for ClusterFuture ...
[17:39:10.704] receiveMessageFromWorker() for ClusterFuture ...
[17:39:10.704] - Validating connection of MultisessionFuture
[17:39:10.705] - received message: FutureResult
[17:39:10.706] - Received FutureResult
[17:39:10.706] - Erased future from FutureRegistry
[17:39:10.706] result() for ClusterFuture ...
[17:39:10.706] - result already collected: FutureResult
[17:39:10.706] result() for ClusterFuture ... done
[17:39:10.706] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:10.706] result() for ClusterFuture ... done
[17:39:10.706] result() for ClusterFuture ...
[17:39:10.706] - result already collected: FutureResult
[17:39:10.706] result() for ClusterFuture ... done
[1] 6
** Sum function 'F' with plan('multisession') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x5582dedafd68>
Using '...' in a formula
[17:39:10.707] getGlobalsAndPackages() ...
[17:39:10.707] Searching for globals...
[17:39:10.709] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[17:39:10.710] Searching for globals ... DONE
[17:39:10.710] Resolving globals: FALSE
[17:39:10.710] Tweak future expression to call with '...' arguments ...
[17:39:10.710] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[17:39:10.711] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:39:10.711] - globals: [3] ‘fcn’, ‘x’, ‘y’
[17:39:10.711] 
[17:39:10.711] getGlobalsAndPackages() ... DONE
[17:39:10.711] run() for ‘Future’ ...
[17:39:10.711] - state: ‘created’
[17:39:10.711] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:10.725] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:10.725] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:10.725]   - Field: ‘node’
[17:39:10.725]   - Field: ‘label’
[17:39:10.725]   - Field: ‘local’
[17:39:10.726]   - Field: ‘owner’
[17:39:10.726]   - Field: ‘envir’
[17:39:10.726]   - Field: ‘workers’
[17:39:10.726]   - Field: ‘packages’
[17:39:10.726]   - Field: ‘gc’
[17:39:10.726]   - Field: ‘conditions’
[17:39:10.726]   - Field: ‘persistent’
[17:39:10.726]   - Field: ‘expr’
[17:39:10.726]   - Field: ‘uuid’
[17:39:10.726]   - Field: ‘seed’
[17:39:10.726]   - Field: ‘version’
[17:39:10.727]   - Field: ‘result’
[17:39:10.727]   - Field: ‘asynchronous’
[17:39:10.727]   - Field: ‘calls’
[17:39:10.727]   - Field: ‘globals’
[17:39:10.727]   - Field: ‘stdout’
[17:39:10.727]   - Field: ‘earlySignal’
[17:39:10.727]   - Field: ‘lazy’
[17:39:10.727]   - Field: ‘state’
[17:39:10.727] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:10.727] - Launch lazy future ...
[17:39:10.728] Packages needed by the future expression (n = 0): <none>
[17:39:10.728] Packages needed by future strategies (n = 0): <none>
[17:39:10.728] {
[17:39:10.728]     {
[17:39:10.728]         {
[17:39:10.728]             ...future.startTime <- base::Sys.time()
[17:39:10.728]             {
[17:39:10.728]                 {
[17:39:10.728]                   {
[17:39:10.728]                     {
[17:39:10.728]                       base::local({
[17:39:10.728]                         has_future <- base::requireNamespace("future", 
[17:39:10.728]                           quietly = TRUE)
[17:39:10.728]                         if (has_future) {
[17:39:10.728]                           ns <- base::getNamespace("future")
[17:39:10.728]                           version <- ns[[".package"]][["version"]]
[17:39:10.728]                           if (is.null(version)) 
[17:39:10.728]                             version <- utils::packageVersion("future")
[17:39:10.728]                         }
[17:39:10.728]                         else {
[17:39:10.728]                           version <- NULL
[17:39:10.728]                         }
[17:39:10.728]                         if (!has_future || version < "1.8.0") {
[17:39:10.728]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:10.728]                             "", base::R.version$version.string), 
[17:39:10.728]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:10.728]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:10.728]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:10.728]                               "release", "version")], collapse = " "), 
[17:39:10.728]                             hostname = base::Sys.info()[["nodename"]])
[17:39:10.728]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:10.728]                             info)
[17:39:10.728]                           info <- base::paste(info, collapse = "; ")
[17:39:10.728]                           if (!has_future) {
[17:39:10.728]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:10.728]                               info)
[17:39:10.728]                           }
[17:39:10.728]                           else {
[17:39:10.728]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:10.728]                               info, version)
[17:39:10.728]                           }
[17:39:10.728]                           base::stop(msg)
[17:39:10.728]                         }
[17:39:10.728]                       })
[17:39:10.728]                     }
[17:39:10.728]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:10.728]                     base::options(mc.cores = 1L)
[17:39:10.728]                   }
[17:39:10.728]                   ...future.strategy.old <- future::plan("list")
[17:39:10.728]                   options(future.plan = NULL)
[17:39:10.728]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.728]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:10.728]                 }
[17:39:10.728]                 ...future.workdir <- getwd()
[17:39:10.728]             }
[17:39:10.728]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:10.728]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:10.728]         }
[17:39:10.728]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:10.728]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:10.728]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:10.728]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:10.728]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:10.728]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:10.728]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:10.728]             base::names(...future.oldOptions))
[17:39:10.728]     }
[17:39:10.728]     if (FALSE) {
[17:39:10.728]     }
[17:39:10.728]     else {
[17:39:10.728]         if (TRUE) {
[17:39:10.728]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:10.728]                 open = "w")
[17:39:10.728]         }
[17:39:10.728]         else {
[17:39:10.728]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:10.728]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:10.728]         }
[17:39:10.728]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:10.728]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:10.728]             base::sink(type = "output", split = FALSE)
[17:39:10.728]             base::close(...future.stdout)
[17:39:10.728]         }, add = TRUE)
[17:39:10.728]     }
[17:39:10.728]     ...future.frame <- base::sys.nframe()
[17:39:10.728]     ...future.conditions <- base::list()
[17:39:10.728]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:10.728]     if (FALSE) {
[17:39:10.728]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:10.728]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:10.728]     }
[17:39:10.728]     ...future.result <- base::tryCatch({
[17:39:10.728]         base::withCallingHandlers({
[17:39:10.728]             ...future.value <- base::withVisible(base::local({
[17:39:10.728]                 ...future.makeSendCondition <- base::local({
[17:39:10.728]                   sendCondition <- NULL
[17:39:10.728]                   function(frame = 1L) {
[17:39:10.728]                     if (is.function(sendCondition)) 
[17:39:10.728]                       return(sendCondition)
[17:39:10.728]                     ns <- getNamespace("parallel")
[17:39:10.728]                     if (exists("sendData", mode = "function", 
[17:39:10.728]                       envir = ns)) {
[17:39:10.728]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:10.728]                         envir = ns)
[17:39:10.728]                       envir <- sys.frame(frame)
[17:39:10.728]                       master <- NULL
[17:39:10.728]                       while (!identical(envir, .GlobalEnv) && 
[17:39:10.728]                         !identical(envir, emptyenv())) {
[17:39:10.728]                         if (exists("master", mode = "list", envir = envir, 
[17:39:10.728]                           inherits = FALSE)) {
[17:39:10.728]                           master <- get("master", mode = "list", 
[17:39:10.728]                             envir = envir, inherits = FALSE)
[17:39:10.728]                           if (inherits(master, c("SOCKnode", 
[17:39:10.728]                             "SOCK0node"))) {
[17:39:10.728]                             sendCondition <<- function(cond) {
[17:39:10.728]                               data <- list(type = "VALUE", value = cond, 
[17:39:10.728]                                 success = TRUE)
[17:39:10.728]                               parallel_sendData(master, data)
[17:39:10.728]                             }
[17:39:10.728]                             return(sendCondition)
[17:39:10.728]                           }
[17:39:10.728]                         }
[17:39:10.728]                         frame <- frame + 1L
[17:39:10.728]                         envir <- sys.frame(frame)
[17:39:10.728]                       }
[17:39:10.728]                     }
[17:39:10.728]                     sendCondition <<- function(cond) NULL
[17:39:10.728]                   }
[17:39:10.728]                 })
[17:39:10.728]                 withCallingHandlers({
[17:39:10.728]                   fcn(x, y)
[17:39:10.728]                 }, immediateCondition = function(cond) {
[17:39:10.728]                   sendCondition <- ...future.makeSendCondition()
[17:39:10.728]                   sendCondition(cond)
[17:39:10.728]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.728]                   {
[17:39:10.728]                     inherits <- base::inherits
[17:39:10.728]                     invokeRestart <- base::invokeRestart
[17:39:10.728]                     is.null <- base::is.null
[17:39:10.728]                     muffled <- FALSE
[17:39:10.728]                     if (inherits(cond, "message")) {
[17:39:10.728]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:10.728]                       if (muffled) 
[17:39:10.728]                         invokeRestart("muffleMessage")
[17:39:10.728]                     }
[17:39:10.728]                     else if (inherits(cond, "warning")) {
[17:39:10.728]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:10.728]                       if (muffled) 
[17:39:10.728]                         invokeRestart("muffleWarning")
[17:39:10.728]                     }
[17:39:10.728]                     else if (inherits(cond, "condition")) {
[17:39:10.728]                       if (!is.null(pattern)) {
[17:39:10.728]                         computeRestarts <- base::computeRestarts
[17:39:10.728]                         grepl <- base::grepl
[17:39:10.728]                         restarts <- computeRestarts(cond)
[17:39:10.728]                         for (restart in restarts) {
[17:39:10.728]                           name <- restart$name
[17:39:10.728]                           if (is.null(name)) 
[17:39:10.728]                             next
[17:39:10.728]                           if (!grepl(pattern, name)) 
[17:39:10.728]                             next
[17:39:10.728]                           invokeRestart(restart)
[17:39:10.728]                           muffled <- TRUE
[17:39:10.728]                           break
[17:39:10.728]                         }
[17:39:10.728]                       }
[17:39:10.728]                     }
[17:39:10.728]                     invisible(muffled)
[17:39:10.728]                   }
[17:39:10.728]                   muffleCondition(cond)
[17:39:10.728]                 })
[17:39:10.728]             }))
[17:39:10.728]             future::FutureResult(value = ...future.value$value, 
[17:39:10.728]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.728]                   ...future.rng), globalenv = if (FALSE) 
[17:39:10.728]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:10.728]                     ...future.globalenv.names))
[17:39:10.728]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:10.728]         }, condition = base::local({
[17:39:10.728]             c <- base::c
[17:39:10.728]             inherits <- base::inherits
[17:39:10.728]             invokeRestart <- base::invokeRestart
[17:39:10.728]             length <- base::length
[17:39:10.728]             list <- base::list
[17:39:10.728]             seq.int <- base::seq.int
[17:39:10.728]             signalCondition <- base::signalCondition
[17:39:10.728]             sys.calls <- base::sys.calls
[17:39:10.728]             `[[` <- base::`[[`
[17:39:10.728]             `+` <- base::`+`
[17:39:10.728]             `<<-` <- base::`<<-`
[17:39:10.728]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:10.728]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:10.728]                   3L)]
[17:39:10.728]             }
[17:39:10.728]             function(cond) {
[17:39:10.728]                 is_error <- inherits(cond, "error")
[17:39:10.728]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:10.728]                   NULL)
[17:39:10.728]                 if (is_error) {
[17:39:10.728]                   sessionInformation <- function() {
[17:39:10.728]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:10.728]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:10.728]                       search = base::search(), system = base::Sys.info())
[17:39:10.728]                   }
[17:39:10.728]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.728]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:10.728]                     cond$call), session = sessionInformation(), 
[17:39:10.728]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:10.728]                   signalCondition(cond)
[17:39:10.728]                 }
[17:39:10.728]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:10.728]                 "immediateCondition"))) {
[17:39:10.728]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:10.728]                   ...future.conditions[[length(...future.conditions) + 
[17:39:10.728]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:10.728]                   if (TRUE && !signal) {
[17:39:10.728]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.728]                     {
[17:39:10.728]                       inherits <- base::inherits
[17:39:10.728]                       invokeRestart <- base::invokeRestart
[17:39:10.728]                       is.null <- base::is.null
[17:39:10.728]                       muffled <- FALSE
[17:39:10.728]                       if (inherits(cond, "message")) {
[17:39:10.728]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.728]                         if (muffled) 
[17:39:10.728]                           invokeRestart("muffleMessage")
[17:39:10.728]                       }
[17:39:10.728]                       else if (inherits(cond, "warning")) {
[17:39:10.728]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.728]                         if (muffled) 
[17:39:10.728]                           invokeRestart("muffleWarning")
[17:39:10.728]                       }
[17:39:10.728]                       else if (inherits(cond, "condition")) {
[17:39:10.728]                         if (!is.null(pattern)) {
[17:39:10.728]                           computeRestarts <- base::computeRestarts
[17:39:10.728]                           grepl <- base::grepl
[17:39:10.728]                           restarts <- computeRestarts(cond)
[17:39:10.728]                           for (restart in restarts) {
[17:39:10.728]                             name <- restart$name
[17:39:10.728]                             if (is.null(name)) 
[17:39:10.728]                               next
[17:39:10.728]                             if (!grepl(pattern, name)) 
[17:39:10.728]                               next
[17:39:10.728]                             invokeRestart(restart)
[17:39:10.728]                             muffled <- TRUE
[17:39:10.728]                             break
[17:39:10.728]                           }
[17:39:10.728]                         }
[17:39:10.728]                       }
[17:39:10.728]                       invisible(muffled)
[17:39:10.728]                     }
[17:39:10.728]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.728]                   }
[17:39:10.728]                 }
[17:39:10.728]                 else {
[17:39:10.728]                   if (TRUE) {
[17:39:10.728]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:10.728]                     {
[17:39:10.728]                       inherits <- base::inherits
[17:39:10.728]                       invokeRestart <- base::invokeRestart
[17:39:10.728]                       is.null <- base::is.null
[17:39:10.728]                       muffled <- FALSE
[17:39:10.728]                       if (inherits(cond, "message")) {
[17:39:10.728]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:10.728]                         if (muffled) 
[17:39:10.728]                           invokeRestart("muffleMessage")
[17:39:10.728]                       }
[17:39:10.728]                       else if (inherits(cond, "warning")) {
[17:39:10.728]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:10.728]                         if (muffled) 
[17:39:10.728]                           invokeRestart("muffleWarning")
[17:39:10.728]                       }
[17:39:10.728]                       else if (inherits(cond, "condition")) {
[17:39:10.728]                         if (!is.null(pattern)) {
[17:39:10.728]                           computeRestarts <- base::computeRestarts
[17:39:10.728]                           grepl <- base::grepl
[17:39:10.728]                           restarts <- computeRestarts(cond)
[17:39:10.728]                           for (restart in restarts) {
[17:39:10.728]                             name <- restart$name
[17:39:10.728]                             if (is.null(name)) 
[17:39:10.728]                               next
[17:39:10.728]                             if (!grepl(pattern, name)) 
[17:39:10.728]                               next
[17:39:10.728]                             invokeRestart(restart)
[17:39:10.728]                             muffled <- TRUE
[17:39:10.728]                             break
[17:39:10.728]                           }
[17:39:10.728]                         }
[17:39:10.728]                       }
[17:39:10.728]                       invisible(muffled)
[17:39:10.728]                     }
[17:39:10.728]                     muffleCondition(cond, pattern = "^muffle")
[17:39:10.728]                   }
[17:39:10.728]                 }
[17:39:10.728]             }
[17:39:10.728]         }))
[17:39:10.728]     }, error = function(ex) {
[17:39:10.728]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:10.728]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:10.728]                 ...future.rng), started = ...future.startTime, 
[17:39:10.728]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:10.728]             version = "1.8"), class = "FutureResult")
[17:39:10.728]     }, finally = {
[17:39:10.728]         if (!identical(...future.workdir, getwd())) 
[17:39:10.728]             setwd(...future.workdir)
[17:39:10.728]         {
[17:39:10.728]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:10.728]                 ...future.oldOptions$nwarnings <- NULL
[17:39:10.728]             }
[17:39:10.728]             base::options(...future.oldOptions)
[17:39:10.728]             if (.Platform$OS.type == "windows") {
[17:39:10.728]                 old_names <- names(...future.oldEnvVars)
[17:39:10.728]                 envs <- base::Sys.getenv()
[17:39:10.728]                 names <- names(envs)
[17:39:10.728]                 common <- intersect(names, old_names)
[17:39:10.728]                 added <- setdiff(names, old_names)
[17:39:10.728]                 removed <- setdiff(old_names, names)
[17:39:10.728]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:10.728]                   envs[common]]
[17:39:10.728]                 NAMES <- toupper(changed)
[17:39:10.728]                 args <- list()
[17:39:10.728]                 for (kk in seq_along(NAMES)) {
[17:39:10.728]                   name <- changed[[kk]]
[17:39:10.728]                   NAME <- NAMES[[kk]]
[17:39:10.728]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.728]                     next
[17:39:10.728]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.728]                 }
[17:39:10.728]                 NAMES <- toupper(added)
[17:39:10.728]                 for (kk in seq_along(NAMES)) {
[17:39:10.728]                   name <- added[[kk]]
[17:39:10.728]                   NAME <- NAMES[[kk]]
[17:39:10.728]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.728]                     next
[17:39:10.728]                   args[[name]] <- ""
[17:39:10.728]                 }
[17:39:10.728]                 NAMES <- toupper(removed)
[17:39:10.728]                 for (kk in seq_along(NAMES)) {
[17:39:10.728]                   name <- removed[[kk]]
[17:39:10.728]                   NAME <- NAMES[[kk]]
[17:39:10.728]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:10.728]                     next
[17:39:10.728]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:10.728]                 }
[17:39:10.728]                 if (length(args) > 0) 
[17:39:10.728]                   base::do.call(base::Sys.setenv, args = args)
[17:39:10.728]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:10.728]             }
[17:39:10.728]             else {
[17:39:10.728]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:10.728]             }
[17:39:10.728]             {
[17:39:10.728]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:10.728]                   0L) {
[17:39:10.728]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:10.728]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:10.728]                   base::options(opts)
[17:39:10.728]                 }
[17:39:10.728]                 {
[17:39:10.728]                   {
[17:39:10.728]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:10.728]                     NULL
[17:39:10.728]                   }
[17:39:10.728]                   options(future.plan = NULL)
[17:39:10.728]                   if (is.na(NA_character_)) 
[17:39:10.728]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:10.728]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:10.728]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:10.728]                     .init = FALSE)
[17:39:10.728]                 }
[17:39:10.728]             }
[17:39:10.728]         }
[17:39:10.728]     })
[17:39:10.728]     if (TRUE) {
[17:39:10.728]         base::sink(type = "output", split = FALSE)
[17:39:10.728]         if (TRUE) {
[17:39:10.728]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:10.728]         }
[17:39:10.728]         else {
[17:39:10.728]             ...future.result["stdout"] <- base::list(NULL)
[17:39:10.728]         }
[17:39:10.728]         base::close(...future.stdout)
[17:39:10.728]         ...future.stdout <- NULL
[17:39:10.728]     }
[17:39:10.728]     ...future.result$conditions <- ...future.conditions
[17:39:10.728]     ...future.result$finished <- base::Sys.time()
[17:39:10.728]     ...future.result
[17:39:10.728] }
[17:39:10.731] Exporting 3 global objects (4.18 KiB) to cluster node #1 ...
[17:39:10.731] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ...
[17:39:10.731] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ... DONE
[17:39:10.731] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:39:10.732] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:39:10.732] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[17:39:10.732] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[17:39:10.732] Exporting 3 global objects (4.18 KiB) to cluster node #1 ... DONE
[17:39:10.733] MultisessionFuture started
[17:39:10.733] - Launch lazy future ... done
[17:39:10.733] run() for ‘MultisessionFuture’ ... done
[17:39:10.733] result() for ClusterFuture ...
[17:39:10.733] receiveMessageFromWorker() for ClusterFuture ...
[17:39:10.733] - Validating connection of MultisessionFuture
[17:39:10.734] - received message: FutureResult
[17:39:10.734] - Received FutureResult
[17:39:10.734] - Erased future from FutureRegistry
[17:39:10.734] result() for ClusterFuture ...
[17:39:10.734] - result already collected: FutureResult
[17:39:10.735] result() for ClusterFuture ... done
[17:39:10.735] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:10.735] result() for ClusterFuture ... done
[17:39:10.735] result() for ClusterFuture ...
[17:39:10.735] - result already collected: FutureResult
[17:39:10.735] result() for ClusterFuture ... done
[1] 6
Testing with 2 cores ... DONE
> 
> message("*** Global argument '...' ... DONE")
*** Global argument '...' ... DONE
> 
> source("incl/end.R")
[17:39:10.736] plan(): Setting new future strategy stack:
[17:39:10.736] List of future strategies:
[17:39:10.736] 1. FutureStrategy:
[17:39:10.736]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:10.736]    - tweaked: FALSE
[17:39:10.736]    - call: future::plan(oplan)
[17:39:10.737] plan(): nbrOfWorkers() = 1
> 
