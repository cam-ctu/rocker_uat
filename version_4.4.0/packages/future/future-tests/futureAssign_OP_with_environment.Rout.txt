
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:31:02.685] plan(): Setting new future strategy stack:
[09:31:02.685] List of future strategies:
[09:31:02.685] 1. sequential:
[09:31:02.685]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.685]    - tweaked: FALSE
[09:31:02.685]    - call: future::plan("sequential")
[09:31:02.696] plan(): nbrOfWorkers() = 1
> 
> ## BACKWARD COMPATIBILITY
> if (getRversion() < "3.2.0") {
+   names <- function(x) if (is.environment(x)) ls(envir = x) else base::names(x)
+ }
> 
> message("*** %<-% to environment ...")
*** %<-% to environment ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Async delayed assignment (infix operator)
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- new.env()
> stopifnot(length(names(z)) == 0L)
> 
> message("*** %<-% to environment: Assign by index (not allowed)")
*** %<-% to environment: Assign by index (not allowed)
> res <- try(z[[1]] %<-% { 2 } %lazy% TRUE, silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> message("*** %<-% to environment: Assign by name (new)")
*** %<-% to environment: Assign by name (new)
> z$B %<-% { TRUE }  %lazy% TRUE
[09:31:02.710] getGlobalsAndPackages() ...
[09:31:02.710] Searching for globals...
[09:31:02.713] - globals found: [1] ‘{’
[09:31:02.713] Searching for globals ... DONE
[09:31:02.713] Resolving globals: FALSE
[09:31:02.714] 
[09:31:02.714] 
[09:31:02.714] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 2) # sic!
> stopifnot("B" %in% ls(z))
> 
> y <- as.list(z)
[09:31:02.715] run() for ‘Future’ ...
[09:31:02.715] - state: ‘created’
[09:31:02.715] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:02.716] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:02.716] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:02.716]   - Field: ‘label’
[09:31:02.716]   - Field: ‘local’
[09:31:02.716]   - Field: ‘owner’
[09:31:02.716]   - Field: ‘envir’
[09:31:02.716]   - Field: ‘packages’
[09:31:02.716]   - Field: ‘gc’
[09:31:02.717]   - Field: ‘conditions’
[09:31:02.717]   - Field: ‘expr’
[09:31:02.717]   - Field: ‘uuid’
[09:31:02.717]   - Field: ‘seed’
[09:31:02.717]   - Field: ‘version’
[09:31:02.717]   - Field: ‘result’
[09:31:02.717]   - Field: ‘asynchronous’
[09:31:02.717]   - Field: ‘calls’
[09:31:02.717]   - Field: ‘globals’
[09:31:02.717]   - Field: ‘stdout’
[09:31:02.717]   - Field: ‘earlySignal’
[09:31:02.717]   - Field: ‘lazy’
[09:31:02.718]   - Field: ‘state’
[09:31:02.718] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:02.718] - Launch lazy future ...
[09:31:02.718] Packages needed by the future expression (n = 0): <none>
[09:31:02.719] Packages needed by future strategies (n = 0): <none>
[09:31:02.719] {
[09:31:02.719]     {
[09:31:02.719]         {
[09:31:02.719]             ...future.startTime <- base::Sys.time()
[09:31:02.719]             {
[09:31:02.719]                 {
[09:31:02.719]                   {
[09:31:02.719]                     base::local({
[09:31:02.719]                       has_future <- base::requireNamespace("future", 
[09:31:02.719]                         quietly = TRUE)
[09:31:02.719]                       if (has_future) {
[09:31:02.719]                         ns <- base::getNamespace("future")
[09:31:02.719]                         version <- ns[[".package"]][["version"]]
[09:31:02.719]                         if (is.null(version)) 
[09:31:02.719]                           version <- utils::packageVersion("future")
[09:31:02.719]                       }
[09:31:02.719]                       else {
[09:31:02.719]                         version <- NULL
[09:31:02.719]                       }
[09:31:02.719]                       if (!has_future || version < "1.8.0") {
[09:31:02.719]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:02.719]                           "", base::R.version$version.string), 
[09:31:02.719]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:02.719]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:02.719]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:02.719]                             "release", "version")], collapse = " "), 
[09:31:02.719]                           hostname = base::Sys.info()[["nodename"]])
[09:31:02.719]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:02.719]                           info)
[09:31:02.719]                         info <- base::paste(info, collapse = "; ")
[09:31:02.719]                         if (!has_future) {
[09:31:02.719]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:02.719]                             info)
[09:31:02.719]                         }
[09:31:02.719]                         else {
[09:31:02.719]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:02.719]                             info, version)
[09:31:02.719]                         }
[09:31:02.719]                         base::stop(msg)
[09:31:02.719]                       }
[09:31:02.719]                     })
[09:31:02.719]                   }
[09:31:02.719]                   ...future.strategy.old <- future::plan("list")
[09:31:02.719]                   options(future.plan = NULL)
[09:31:02.719]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.719]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:02.719]                 }
[09:31:02.719]                 ...future.workdir <- getwd()
[09:31:02.719]             }
[09:31:02.719]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:02.719]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:02.719]         }
[09:31:02.719]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:02.719]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:02.719]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:02.719]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:02.719]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:02.719]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:02.719]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:02.719]             base::names(...future.oldOptions))
[09:31:02.719]     }
[09:31:02.719]     if (FALSE) {
[09:31:02.719]     }
[09:31:02.719]     else {
[09:31:02.719]         if (TRUE) {
[09:31:02.719]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:02.719]                 open = "w")
[09:31:02.719]         }
[09:31:02.719]         else {
[09:31:02.719]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:02.719]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:02.719]         }
[09:31:02.719]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:02.719]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:02.719]             base::sink(type = "output", split = FALSE)
[09:31:02.719]             base::close(...future.stdout)
[09:31:02.719]         }, add = TRUE)
[09:31:02.719]     }
[09:31:02.719]     ...future.frame <- base::sys.nframe()
[09:31:02.719]     ...future.conditions <- base::list()
[09:31:02.719]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:02.719]     if (FALSE) {
[09:31:02.719]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:02.719]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:02.719]     }
[09:31:02.719]     ...future.result <- base::tryCatch({
[09:31:02.719]         base::withCallingHandlers({
[09:31:02.719]             ...future.value <- base::withVisible(base::local({
[09:31:02.719]                 TRUE
[09:31:02.719]             }))
[09:31:02.719]             future::FutureResult(value = ...future.value$value, 
[09:31:02.719]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.719]                   ...future.rng), globalenv = if (FALSE) 
[09:31:02.719]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:02.719]                     ...future.globalenv.names))
[09:31:02.719]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:02.719]         }, condition = base::local({
[09:31:02.719]             c <- base::c
[09:31:02.719]             inherits <- base::inherits
[09:31:02.719]             invokeRestart <- base::invokeRestart
[09:31:02.719]             length <- base::length
[09:31:02.719]             list <- base::list
[09:31:02.719]             seq.int <- base::seq.int
[09:31:02.719]             signalCondition <- base::signalCondition
[09:31:02.719]             sys.calls <- base::sys.calls
[09:31:02.719]             `[[` <- base::`[[`
[09:31:02.719]             `+` <- base::`+`
[09:31:02.719]             `<<-` <- base::`<<-`
[09:31:02.719]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:02.719]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:02.719]                   3L)]
[09:31:02.719]             }
[09:31:02.719]             function(cond) {
[09:31:02.719]                 is_error <- inherits(cond, "error")
[09:31:02.719]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:02.719]                   NULL)
[09:31:02.719]                 if (is_error) {
[09:31:02.719]                   sessionInformation <- function() {
[09:31:02.719]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:02.719]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:02.719]                       search = base::search(), system = base::Sys.info())
[09:31:02.719]                   }
[09:31:02.719]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.719]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:02.719]                     cond$call), session = sessionInformation(), 
[09:31:02.719]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:02.719]                   signalCondition(cond)
[09:31:02.719]                 }
[09:31:02.719]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:02.719]                 "immediateCondition"))) {
[09:31:02.719]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:02.719]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.719]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:02.719]                   if (TRUE && !signal) {
[09:31:02.719]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.719]                     {
[09:31:02.719]                       inherits <- base::inherits
[09:31:02.719]                       invokeRestart <- base::invokeRestart
[09:31:02.719]                       is.null <- base::is.null
[09:31:02.719]                       muffled <- FALSE
[09:31:02.719]                       if (inherits(cond, "message")) {
[09:31:02.719]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.719]                         if (muffled) 
[09:31:02.719]                           invokeRestart("muffleMessage")
[09:31:02.719]                       }
[09:31:02.719]                       else if (inherits(cond, "warning")) {
[09:31:02.719]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.719]                         if (muffled) 
[09:31:02.719]                           invokeRestart("muffleWarning")
[09:31:02.719]                       }
[09:31:02.719]                       else if (inherits(cond, "condition")) {
[09:31:02.719]                         if (!is.null(pattern)) {
[09:31:02.719]                           computeRestarts <- base::computeRestarts
[09:31:02.719]                           grepl <- base::grepl
[09:31:02.719]                           restarts <- computeRestarts(cond)
[09:31:02.719]                           for (restart in restarts) {
[09:31:02.719]                             name <- restart$name
[09:31:02.719]                             if (is.null(name)) 
[09:31:02.719]                               next
[09:31:02.719]                             if (!grepl(pattern, name)) 
[09:31:02.719]                               next
[09:31:02.719]                             invokeRestart(restart)
[09:31:02.719]                             muffled <- TRUE
[09:31:02.719]                             break
[09:31:02.719]                           }
[09:31:02.719]                         }
[09:31:02.719]                       }
[09:31:02.719]                       invisible(muffled)
[09:31:02.719]                     }
[09:31:02.719]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.719]                   }
[09:31:02.719]                 }
[09:31:02.719]                 else {
[09:31:02.719]                   if (TRUE) {
[09:31:02.719]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.719]                     {
[09:31:02.719]                       inherits <- base::inherits
[09:31:02.719]                       invokeRestart <- base::invokeRestart
[09:31:02.719]                       is.null <- base::is.null
[09:31:02.719]                       muffled <- FALSE
[09:31:02.719]                       if (inherits(cond, "message")) {
[09:31:02.719]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.719]                         if (muffled) 
[09:31:02.719]                           invokeRestart("muffleMessage")
[09:31:02.719]                       }
[09:31:02.719]                       else if (inherits(cond, "warning")) {
[09:31:02.719]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.719]                         if (muffled) 
[09:31:02.719]                           invokeRestart("muffleWarning")
[09:31:02.719]                       }
[09:31:02.719]                       else if (inherits(cond, "condition")) {
[09:31:02.719]                         if (!is.null(pattern)) {
[09:31:02.719]                           computeRestarts <- base::computeRestarts
[09:31:02.719]                           grepl <- base::grepl
[09:31:02.719]                           restarts <- computeRestarts(cond)
[09:31:02.719]                           for (restart in restarts) {
[09:31:02.719]                             name <- restart$name
[09:31:02.719]                             if (is.null(name)) 
[09:31:02.719]                               next
[09:31:02.719]                             if (!grepl(pattern, name)) 
[09:31:02.719]                               next
[09:31:02.719]                             invokeRestart(restart)
[09:31:02.719]                             muffled <- TRUE
[09:31:02.719]                             break
[09:31:02.719]                           }
[09:31:02.719]                         }
[09:31:02.719]                       }
[09:31:02.719]                       invisible(muffled)
[09:31:02.719]                     }
[09:31:02.719]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.719]                   }
[09:31:02.719]                 }
[09:31:02.719]             }
[09:31:02.719]         }))
[09:31:02.719]     }, error = function(ex) {
[09:31:02.719]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:02.719]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.719]                 ...future.rng), started = ...future.startTime, 
[09:31:02.719]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:02.719]             version = "1.8"), class = "FutureResult")
[09:31:02.719]     }, finally = {
[09:31:02.719]         if (!identical(...future.workdir, getwd())) 
[09:31:02.719]             setwd(...future.workdir)
[09:31:02.719]         {
[09:31:02.719]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:02.719]                 ...future.oldOptions$nwarnings <- NULL
[09:31:02.719]             }
[09:31:02.719]             base::options(...future.oldOptions)
[09:31:02.719]             if (.Platform$OS.type == "windows") {
[09:31:02.719]                 old_names <- names(...future.oldEnvVars)
[09:31:02.719]                 envs <- base::Sys.getenv()
[09:31:02.719]                 names <- names(envs)
[09:31:02.719]                 common <- intersect(names, old_names)
[09:31:02.719]                 added <- setdiff(names, old_names)
[09:31:02.719]                 removed <- setdiff(old_names, names)
[09:31:02.719]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:02.719]                   envs[common]]
[09:31:02.719]                 NAMES <- toupper(changed)
[09:31:02.719]                 args <- list()
[09:31:02.719]                 for (kk in seq_along(NAMES)) {
[09:31:02.719]                   name <- changed[[kk]]
[09:31:02.719]                   NAME <- NAMES[[kk]]
[09:31:02.719]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.719]                     next
[09:31:02.719]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.719]                 }
[09:31:02.719]                 NAMES <- toupper(added)
[09:31:02.719]                 for (kk in seq_along(NAMES)) {
[09:31:02.719]                   name <- added[[kk]]
[09:31:02.719]                   NAME <- NAMES[[kk]]
[09:31:02.719]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.719]                     next
[09:31:02.719]                   args[[name]] <- ""
[09:31:02.719]                 }
[09:31:02.719]                 NAMES <- toupper(removed)
[09:31:02.719]                 for (kk in seq_along(NAMES)) {
[09:31:02.719]                   name <- removed[[kk]]
[09:31:02.719]                   NAME <- NAMES[[kk]]
[09:31:02.719]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.719]                     next
[09:31:02.719]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.719]                 }
[09:31:02.719]                 if (length(args) > 0) 
[09:31:02.719]                   base::do.call(base::Sys.setenv, args = args)
[09:31:02.719]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:02.719]             }
[09:31:02.719]             else {
[09:31:02.719]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:02.719]             }
[09:31:02.719]             {
[09:31:02.719]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:02.719]                   0L) {
[09:31:02.719]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:02.719]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:02.719]                   base::options(opts)
[09:31:02.719]                 }
[09:31:02.719]                 {
[09:31:02.719]                   {
[09:31:02.719]                     NULL
[09:31:02.719]                     RNGkind("Mersenne-Twister")
[09:31:02.719]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:02.719]                       inherits = FALSE)
[09:31:02.719]                   }
[09:31:02.719]                   options(future.plan = NULL)
[09:31:02.719]                   if (is.na(NA_character_)) 
[09:31:02.719]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.719]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:02.719]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:02.719]                     .init = FALSE)
[09:31:02.719]                 }
[09:31:02.719]             }
[09:31:02.719]         }
[09:31:02.719]     })
[09:31:02.719]     if (TRUE) {
[09:31:02.719]         base::sink(type = "output", split = FALSE)
[09:31:02.719]         if (TRUE) {
[09:31:02.719]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:02.719]         }
[09:31:02.719]         else {
[09:31:02.719]             ...future.result["stdout"] <- base::list(NULL)
[09:31:02.719]         }
[09:31:02.719]         base::close(...future.stdout)
[09:31:02.719]         ...future.stdout <- NULL
[09:31:02.719]     }
[09:31:02.719]     ...future.result$conditions <- ...future.conditions
[09:31:02.719]     ...future.result$finished <- base::Sys.time()
[09:31:02.719]     ...future.result
[09:31:02.719] }
[09:31:02.721] plan(): Setting new future strategy stack:
[09:31:02.721] List of future strategies:
[09:31:02.721] 1. sequential:
[09:31:02.721]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.721]    - tweaked: FALSE
[09:31:02.721]    - call: NULL
[09:31:02.722] plan(): nbrOfWorkers() = 1
[09:31:02.723] plan(): Setting new future strategy stack:
[09:31:02.723] List of future strategies:
[09:31:02.723] 1. sequential:
[09:31:02.723]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.723]    - tweaked: FALSE
[09:31:02.723]    - call: future::plan("sequential")
[09:31:02.723] plan(): nbrOfWorkers() = 1
[09:31:02.724] SequentialFuture started (and completed)
[09:31:02.724] - Launch lazy future ... done
[09:31:02.724] run() for ‘SequentialFuture’ ... done
> str(y)
List of 1
 $ B: logi TRUE
> stopifnot(length(y) == 1)
> stopifnot(identical(names(y), "B"))
> 
> 
> message("*** %<-% to environment: Potential task name clashes")
*** %<-% to environment: Potential task name clashes
> u <- new.env()
> u$a %<-% { 1 } %lazy% TRUE
[09:31:02.727] getGlobalsAndPackages() ...
[09:31:02.727] Searching for globals...
[09:31:02.728] - globals found: [1] ‘{’
[09:31:02.728] Searching for globals ... DONE
[09:31:02.728] Resolving globals: FALSE
[09:31:02.728] 
[09:31:02.728] 
[09:31:02.728] getGlobalsAndPackages() ... DONE
> stopifnot(length(u) == 2)
> stopifnot("a" %in% names(u))
> fu <- futureOf(u$a)
> 
> v <- new.env()
> v$a %<-% { 2 } %lazy% TRUE
[09:31:02.729] getGlobalsAndPackages() ...
[09:31:02.729] Searching for globals...
[09:31:02.730] - globals found: [1] ‘{’
[09:31:02.730] Searching for globals ... DONE
[09:31:02.730] Resolving globals: FALSE
[09:31:02.730] 
[09:31:02.730] 
[09:31:02.730] getGlobalsAndPackages() ... DONE
> stopifnot(length(v) == 2)
> stopifnot("a" %in% names(v))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[09:31:02.731] run() for ‘Future’ ...
[09:31:02.731] - state: ‘created’
[09:31:02.731] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:02.731] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:02.731] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:02.732]   - Field: ‘label’
[09:31:02.732]   - Field: ‘local’
[09:31:02.732]   - Field: ‘owner’
[09:31:02.732]   - Field: ‘envir’
[09:31:02.732]   - Field: ‘packages’
[09:31:02.732]   - Field: ‘gc’
[09:31:02.732]   - Field: ‘conditions’
[09:31:02.732]   - Field: ‘expr’
[09:31:02.732]   - Field: ‘uuid’
[09:31:02.732]   - Field: ‘seed’
[09:31:02.732]   - Field: ‘version’
[09:31:02.733]   - Field: ‘result’
[09:31:02.733]   - Field: ‘asynchronous’
[09:31:02.733]   - Field: ‘calls’
[09:31:02.733]   - Field: ‘globals’
[09:31:02.733]   - Field: ‘stdout’
[09:31:02.733]   - Field: ‘earlySignal’
[09:31:02.733]   - Field: ‘lazy’
[09:31:02.733]   - Field: ‘state’
[09:31:02.733] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:02.733] - Launch lazy future ...
[09:31:02.734] Packages needed by the future expression (n = 0): <none>
[09:31:02.734] Packages needed by future strategies (n = 0): <none>
[09:31:02.734] {
[09:31:02.734]     {
[09:31:02.734]         {
[09:31:02.734]             ...future.startTime <- base::Sys.time()
[09:31:02.734]             {
[09:31:02.734]                 {
[09:31:02.734]                   {
[09:31:02.734]                     base::local({
[09:31:02.734]                       has_future <- base::requireNamespace("future", 
[09:31:02.734]                         quietly = TRUE)
[09:31:02.734]                       if (has_future) {
[09:31:02.734]                         ns <- base::getNamespace("future")
[09:31:02.734]                         version <- ns[[".package"]][["version"]]
[09:31:02.734]                         if (is.null(version)) 
[09:31:02.734]                           version <- utils::packageVersion("future")
[09:31:02.734]                       }
[09:31:02.734]                       else {
[09:31:02.734]                         version <- NULL
[09:31:02.734]                       }
[09:31:02.734]                       if (!has_future || version < "1.8.0") {
[09:31:02.734]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:02.734]                           "", base::R.version$version.string), 
[09:31:02.734]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:02.734]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:02.734]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:02.734]                             "release", "version")], collapse = " "), 
[09:31:02.734]                           hostname = base::Sys.info()[["nodename"]])
[09:31:02.734]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:02.734]                           info)
[09:31:02.734]                         info <- base::paste(info, collapse = "; ")
[09:31:02.734]                         if (!has_future) {
[09:31:02.734]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:02.734]                             info)
[09:31:02.734]                         }
[09:31:02.734]                         else {
[09:31:02.734]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:02.734]                             info, version)
[09:31:02.734]                         }
[09:31:02.734]                         base::stop(msg)
[09:31:02.734]                       }
[09:31:02.734]                     })
[09:31:02.734]                   }
[09:31:02.734]                   ...future.strategy.old <- future::plan("list")
[09:31:02.734]                   options(future.plan = NULL)
[09:31:02.734]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.734]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:02.734]                 }
[09:31:02.734]                 ...future.workdir <- getwd()
[09:31:02.734]             }
[09:31:02.734]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:02.734]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:02.734]         }
[09:31:02.734]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:02.734]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:02.734]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:02.734]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:02.734]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:02.734]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:02.734]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:02.734]             base::names(...future.oldOptions))
[09:31:02.734]     }
[09:31:02.734]     if (FALSE) {
[09:31:02.734]     }
[09:31:02.734]     else {
[09:31:02.734]         if (TRUE) {
[09:31:02.734]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:02.734]                 open = "w")
[09:31:02.734]         }
[09:31:02.734]         else {
[09:31:02.734]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:02.734]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:02.734]         }
[09:31:02.734]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:02.734]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:02.734]             base::sink(type = "output", split = FALSE)
[09:31:02.734]             base::close(...future.stdout)
[09:31:02.734]         }, add = TRUE)
[09:31:02.734]     }
[09:31:02.734]     ...future.frame <- base::sys.nframe()
[09:31:02.734]     ...future.conditions <- base::list()
[09:31:02.734]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:02.734]     if (FALSE) {
[09:31:02.734]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:02.734]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:02.734]     }
[09:31:02.734]     ...future.result <- base::tryCatch({
[09:31:02.734]         base::withCallingHandlers({
[09:31:02.734]             ...future.value <- base::withVisible(base::local({
[09:31:02.734]                 1
[09:31:02.734]             }))
[09:31:02.734]             future::FutureResult(value = ...future.value$value, 
[09:31:02.734]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.734]                   ...future.rng), globalenv = if (FALSE) 
[09:31:02.734]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:02.734]                     ...future.globalenv.names))
[09:31:02.734]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:02.734]         }, condition = base::local({
[09:31:02.734]             c <- base::c
[09:31:02.734]             inherits <- base::inherits
[09:31:02.734]             invokeRestart <- base::invokeRestart
[09:31:02.734]             length <- base::length
[09:31:02.734]             list <- base::list
[09:31:02.734]             seq.int <- base::seq.int
[09:31:02.734]             signalCondition <- base::signalCondition
[09:31:02.734]             sys.calls <- base::sys.calls
[09:31:02.734]             `[[` <- base::`[[`
[09:31:02.734]             `+` <- base::`+`
[09:31:02.734]             `<<-` <- base::`<<-`
[09:31:02.734]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:02.734]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:02.734]                   3L)]
[09:31:02.734]             }
[09:31:02.734]             function(cond) {
[09:31:02.734]                 is_error <- inherits(cond, "error")
[09:31:02.734]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:02.734]                   NULL)
[09:31:02.734]                 if (is_error) {
[09:31:02.734]                   sessionInformation <- function() {
[09:31:02.734]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:02.734]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:02.734]                       search = base::search(), system = base::Sys.info())
[09:31:02.734]                   }
[09:31:02.734]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.734]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:02.734]                     cond$call), session = sessionInformation(), 
[09:31:02.734]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:02.734]                   signalCondition(cond)
[09:31:02.734]                 }
[09:31:02.734]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:02.734]                 "immediateCondition"))) {
[09:31:02.734]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:02.734]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.734]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:02.734]                   if (TRUE && !signal) {
[09:31:02.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.734]                     {
[09:31:02.734]                       inherits <- base::inherits
[09:31:02.734]                       invokeRestart <- base::invokeRestart
[09:31:02.734]                       is.null <- base::is.null
[09:31:02.734]                       muffled <- FALSE
[09:31:02.734]                       if (inherits(cond, "message")) {
[09:31:02.734]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.734]                         if (muffled) 
[09:31:02.734]                           invokeRestart("muffleMessage")
[09:31:02.734]                       }
[09:31:02.734]                       else if (inherits(cond, "warning")) {
[09:31:02.734]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.734]                         if (muffled) 
[09:31:02.734]                           invokeRestart("muffleWarning")
[09:31:02.734]                       }
[09:31:02.734]                       else if (inherits(cond, "condition")) {
[09:31:02.734]                         if (!is.null(pattern)) {
[09:31:02.734]                           computeRestarts <- base::computeRestarts
[09:31:02.734]                           grepl <- base::grepl
[09:31:02.734]                           restarts <- computeRestarts(cond)
[09:31:02.734]                           for (restart in restarts) {
[09:31:02.734]                             name <- restart$name
[09:31:02.734]                             if (is.null(name)) 
[09:31:02.734]                               next
[09:31:02.734]                             if (!grepl(pattern, name)) 
[09:31:02.734]                               next
[09:31:02.734]                             invokeRestart(restart)
[09:31:02.734]                             muffled <- TRUE
[09:31:02.734]                             break
[09:31:02.734]                           }
[09:31:02.734]                         }
[09:31:02.734]                       }
[09:31:02.734]                       invisible(muffled)
[09:31:02.734]                     }
[09:31:02.734]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.734]                   }
[09:31:02.734]                 }
[09:31:02.734]                 else {
[09:31:02.734]                   if (TRUE) {
[09:31:02.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.734]                     {
[09:31:02.734]                       inherits <- base::inherits
[09:31:02.734]                       invokeRestart <- base::invokeRestart
[09:31:02.734]                       is.null <- base::is.null
[09:31:02.734]                       muffled <- FALSE
[09:31:02.734]                       if (inherits(cond, "message")) {
[09:31:02.734]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.734]                         if (muffled) 
[09:31:02.734]                           invokeRestart("muffleMessage")
[09:31:02.734]                       }
[09:31:02.734]                       else if (inherits(cond, "warning")) {
[09:31:02.734]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.734]                         if (muffled) 
[09:31:02.734]                           invokeRestart("muffleWarning")
[09:31:02.734]                       }
[09:31:02.734]                       else if (inherits(cond, "condition")) {
[09:31:02.734]                         if (!is.null(pattern)) {
[09:31:02.734]                           computeRestarts <- base::computeRestarts
[09:31:02.734]                           grepl <- base::grepl
[09:31:02.734]                           restarts <- computeRestarts(cond)
[09:31:02.734]                           for (restart in restarts) {
[09:31:02.734]                             name <- restart$name
[09:31:02.734]                             if (is.null(name)) 
[09:31:02.734]                               next
[09:31:02.734]                             if (!grepl(pattern, name)) 
[09:31:02.734]                               next
[09:31:02.734]                             invokeRestart(restart)
[09:31:02.734]                             muffled <- TRUE
[09:31:02.734]                             break
[09:31:02.734]                           }
[09:31:02.734]                         }
[09:31:02.734]                       }
[09:31:02.734]                       invisible(muffled)
[09:31:02.734]                     }
[09:31:02.734]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.734]                   }
[09:31:02.734]                 }
[09:31:02.734]             }
[09:31:02.734]         }))
[09:31:02.734]     }, error = function(ex) {
[09:31:02.734]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:02.734]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.734]                 ...future.rng), started = ...future.startTime, 
[09:31:02.734]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:02.734]             version = "1.8"), class = "FutureResult")
[09:31:02.734]     }, finally = {
[09:31:02.734]         if (!identical(...future.workdir, getwd())) 
[09:31:02.734]             setwd(...future.workdir)
[09:31:02.734]         {
[09:31:02.734]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:02.734]                 ...future.oldOptions$nwarnings <- NULL
[09:31:02.734]             }
[09:31:02.734]             base::options(...future.oldOptions)
[09:31:02.734]             if (.Platform$OS.type == "windows") {
[09:31:02.734]                 old_names <- names(...future.oldEnvVars)
[09:31:02.734]                 envs <- base::Sys.getenv()
[09:31:02.734]                 names <- names(envs)
[09:31:02.734]                 common <- intersect(names, old_names)
[09:31:02.734]                 added <- setdiff(names, old_names)
[09:31:02.734]                 removed <- setdiff(old_names, names)
[09:31:02.734]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:02.734]                   envs[common]]
[09:31:02.734]                 NAMES <- toupper(changed)
[09:31:02.734]                 args <- list()
[09:31:02.734]                 for (kk in seq_along(NAMES)) {
[09:31:02.734]                   name <- changed[[kk]]
[09:31:02.734]                   NAME <- NAMES[[kk]]
[09:31:02.734]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.734]                     next
[09:31:02.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.734]                 }
[09:31:02.734]                 NAMES <- toupper(added)
[09:31:02.734]                 for (kk in seq_along(NAMES)) {
[09:31:02.734]                   name <- added[[kk]]
[09:31:02.734]                   NAME <- NAMES[[kk]]
[09:31:02.734]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.734]                     next
[09:31:02.734]                   args[[name]] <- ""
[09:31:02.734]                 }
[09:31:02.734]                 NAMES <- toupper(removed)
[09:31:02.734]                 for (kk in seq_along(NAMES)) {
[09:31:02.734]                   name <- removed[[kk]]
[09:31:02.734]                   NAME <- NAMES[[kk]]
[09:31:02.734]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.734]                     next
[09:31:02.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.734]                 }
[09:31:02.734]                 if (length(args) > 0) 
[09:31:02.734]                   base::do.call(base::Sys.setenv, args = args)
[09:31:02.734]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:02.734]             }
[09:31:02.734]             else {
[09:31:02.734]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:02.734]             }
[09:31:02.734]             {
[09:31:02.734]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:02.734]                   0L) {
[09:31:02.734]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:02.734]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:02.734]                   base::options(opts)
[09:31:02.734]                 }
[09:31:02.734]                 {
[09:31:02.734]                   {
[09:31:02.734]                     NULL
[09:31:02.734]                     RNGkind("Mersenne-Twister")
[09:31:02.734]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:02.734]                       inherits = FALSE)
[09:31:02.734]                   }
[09:31:02.734]                   options(future.plan = NULL)
[09:31:02.734]                   if (is.na(NA_character_)) 
[09:31:02.734]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.734]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:02.734]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:02.734]                     .init = FALSE)
[09:31:02.734]                 }
[09:31:02.734]             }
[09:31:02.734]         }
[09:31:02.734]     })
[09:31:02.734]     if (TRUE) {
[09:31:02.734]         base::sink(type = "output", split = FALSE)
[09:31:02.734]         if (TRUE) {
[09:31:02.734]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:02.734]         }
[09:31:02.734]         else {
[09:31:02.734]             ...future.result["stdout"] <- base::list(NULL)
[09:31:02.734]         }
[09:31:02.734]         base::close(...future.stdout)
[09:31:02.734]         ...future.stdout <- NULL
[09:31:02.734]     }
[09:31:02.734]     ...future.result$conditions <- ...future.conditions
[09:31:02.734]     ...future.result$finished <- base::Sys.time()
[09:31:02.734]     ...future.result
[09:31:02.734] }
[09:31:02.736] plan(): Setting new future strategy stack:
[09:31:02.736] List of future strategies:
[09:31:02.736] 1. sequential:
[09:31:02.736]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.736]    - tweaked: FALSE
[09:31:02.736]    - call: NULL
[09:31:02.736] plan(): nbrOfWorkers() = 1
[09:31:02.737] plan(): Setting new future strategy stack:
[09:31:02.737] List of future strategies:
[09:31:02.737] 1. sequential:
[09:31:02.737]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.737]    - tweaked: FALSE
[09:31:02.737]    - call: future::plan("sequential")
[09:31:02.737] plan(): nbrOfWorkers() = 1
[09:31:02.738] SequentialFuture started (and completed)
[09:31:02.738] - Launch lazy future ... done
[09:31:02.738] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[09:31:02.738] run() for ‘Future’ ...
[09:31:02.738] - state: ‘created’
[09:31:02.738] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:02.738] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:02.739] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:02.739]   - Field: ‘label’
[09:31:02.739]   - Field: ‘local’
[09:31:02.739]   - Field: ‘owner’
[09:31:02.739]   - Field: ‘envir’
[09:31:02.739]   - Field: ‘packages’
[09:31:02.739]   - Field: ‘gc’
[09:31:02.739]   - Field: ‘conditions’
[09:31:02.739]   - Field: ‘expr’
[09:31:02.739]   - Field: ‘uuid’
[09:31:02.739]   - Field: ‘seed’
[09:31:02.740]   - Field: ‘version’
[09:31:02.740]   - Field: ‘result’
[09:31:02.740]   - Field: ‘asynchronous’
[09:31:02.740]   - Field: ‘calls’
[09:31:02.740]   - Field: ‘globals’
[09:31:02.740]   - Field: ‘stdout’
[09:31:02.740]   - Field: ‘earlySignal’
[09:31:02.740]   - Field: ‘lazy’
[09:31:02.740]   - Field: ‘state’
[09:31:02.740] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:02.741] - Launch lazy future ...
[09:31:02.741] Packages needed by the future expression (n = 0): <none>
[09:31:02.741] Packages needed by future strategies (n = 0): <none>
[09:31:02.741] {
[09:31:02.741]     {
[09:31:02.741]         {
[09:31:02.741]             ...future.startTime <- base::Sys.time()
[09:31:02.741]             {
[09:31:02.741]                 {
[09:31:02.741]                   {
[09:31:02.741]                     base::local({
[09:31:02.741]                       has_future <- base::requireNamespace("future", 
[09:31:02.741]                         quietly = TRUE)
[09:31:02.741]                       if (has_future) {
[09:31:02.741]                         ns <- base::getNamespace("future")
[09:31:02.741]                         version <- ns[[".package"]][["version"]]
[09:31:02.741]                         if (is.null(version)) 
[09:31:02.741]                           version <- utils::packageVersion("future")
[09:31:02.741]                       }
[09:31:02.741]                       else {
[09:31:02.741]                         version <- NULL
[09:31:02.741]                       }
[09:31:02.741]                       if (!has_future || version < "1.8.0") {
[09:31:02.741]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:02.741]                           "", base::R.version$version.string), 
[09:31:02.741]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:02.741]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:02.741]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:02.741]                             "release", "version")], collapse = " "), 
[09:31:02.741]                           hostname = base::Sys.info()[["nodename"]])
[09:31:02.741]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:02.741]                           info)
[09:31:02.741]                         info <- base::paste(info, collapse = "; ")
[09:31:02.741]                         if (!has_future) {
[09:31:02.741]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:02.741]                             info)
[09:31:02.741]                         }
[09:31:02.741]                         else {
[09:31:02.741]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:02.741]                             info, version)
[09:31:02.741]                         }
[09:31:02.741]                         base::stop(msg)
[09:31:02.741]                       }
[09:31:02.741]                     })
[09:31:02.741]                   }
[09:31:02.741]                   ...future.strategy.old <- future::plan("list")
[09:31:02.741]                   options(future.plan = NULL)
[09:31:02.741]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.741]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:02.741]                 }
[09:31:02.741]                 ...future.workdir <- getwd()
[09:31:02.741]             }
[09:31:02.741]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:02.741]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:02.741]         }
[09:31:02.741]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:02.741]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:02.741]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:02.741]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:02.741]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:02.741]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:02.741]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:02.741]             base::names(...future.oldOptions))
[09:31:02.741]     }
[09:31:02.741]     if (FALSE) {
[09:31:02.741]     }
[09:31:02.741]     else {
[09:31:02.741]         if (TRUE) {
[09:31:02.741]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:02.741]                 open = "w")
[09:31:02.741]         }
[09:31:02.741]         else {
[09:31:02.741]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:02.741]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:02.741]         }
[09:31:02.741]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:02.741]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:02.741]             base::sink(type = "output", split = FALSE)
[09:31:02.741]             base::close(...future.stdout)
[09:31:02.741]         }, add = TRUE)
[09:31:02.741]     }
[09:31:02.741]     ...future.frame <- base::sys.nframe()
[09:31:02.741]     ...future.conditions <- base::list()
[09:31:02.741]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:02.741]     if (FALSE) {
[09:31:02.741]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:02.741]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:02.741]     }
[09:31:02.741]     ...future.result <- base::tryCatch({
[09:31:02.741]         base::withCallingHandlers({
[09:31:02.741]             ...future.value <- base::withVisible(base::local({
[09:31:02.741]                 2
[09:31:02.741]             }))
[09:31:02.741]             future::FutureResult(value = ...future.value$value, 
[09:31:02.741]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.741]                   ...future.rng), globalenv = if (FALSE) 
[09:31:02.741]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:02.741]                     ...future.globalenv.names))
[09:31:02.741]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:02.741]         }, condition = base::local({
[09:31:02.741]             c <- base::c
[09:31:02.741]             inherits <- base::inherits
[09:31:02.741]             invokeRestart <- base::invokeRestart
[09:31:02.741]             length <- base::length
[09:31:02.741]             list <- base::list
[09:31:02.741]             seq.int <- base::seq.int
[09:31:02.741]             signalCondition <- base::signalCondition
[09:31:02.741]             sys.calls <- base::sys.calls
[09:31:02.741]             `[[` <- base::`[[`
[09:31:02.741]             `+` <- base::`+`
[09:31:02.741]             `<<-` <- base::`<<-`
[09:31:02.741]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:02.741]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:02.741]                   3L)]
[09:31:02.741]             }
[09:31:02.741]             function(cond) {
[09:31:02.741]                 is_error <- inherits(cond, "error")
[09:31:02.741]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:02.741]                   NULL)
[09:31:02.741]                 if (is_error) {
[09:31:02.741]                   sessionInformation <- function() {
[09:31:02.741]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:02.741]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:02.741]                       search = base::search(), system = base::Sys.info())
[09:31:02.741]                   }
[09:31:02.741]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.741]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:02.741]                     cond$call), session = sessionInformation(), 
[09:31:02.741]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:02.741]                   signalCondition(cond)
[09:31:02.741]                 }
[09:31:02.741]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:02.741]                 "immediateCondition"))) {
[09:31:02.741]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:02.741]                   ...future.conditions[[length(...future.conditions) + 
[09:31:02.741]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:02.741]                   if (TRUE && !signal) {
[09:31:02.741]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.741]                     {
[09:31:02.741]                       inherits <- base::inherits
[09:31:02.741]                       invokeRestart <- base::invokeRestart
[09:31:02.741]                       is.null <- base::is.null
[09:31:02.741]                       muffled <- FALSE
[09:31:02.741]                       if (inherits(cond, "message")) {
[09:31:02.741]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.741]                         if (muffled) 
[09:31:02.741]                           invokeRestart("muffleMessage")
[09:31:02.741]                       }
[09:31:02.741]                       else if (inherits(cond, "warning")) {
[09:31:02.741]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.741]                         if (muffled) 
[09:31:02.741]                           invokeRestart("muffleWarning")
[09:31:02.741]                       }
[09:31:02.741]                       else if (inherits(cond, "condition")) {
[09:31:02.741]                         if (!is.null(pattern)) {
[09:31:02.741]                           computeRestarts <- base::computeRestarts
[09:31:02.741]                           grepl <- base::grepl
[09:31:02.741]                           restarts <- computeRestarts(cond)
[09:31:02.741]                           for (restart in restarts) {
[09:31:02.741]                             name <- restart$name
[09:31:02.741]                             if (is.null(name)) 
[09:31:02.741]                               next
[09:31:02.741]                             if (!grepl(pattern, name)) 
[09:31:02.741]                               next
[09:31:02.741]                             invokeRestart(restart)
[09:31:02.741]                             muffled <- TRUE
[09:31:02.741]                             break
[09:31:02.741]                           }
[09:31:02.741]                         }
[09:31:02.741]                       }
[09:31:02.741]                       invisible(muffled)
[09:31:02.741]                     }
[09:31:02.741]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.741]                   }
[09:31:02.741]                 }
[09:31:02.741]                 else {
[09:31:02.741]                   if (TRUE) {
[09:31:02.741]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:02.741]                     {
[09:31:02.741]                       inherits <- base::inherits
[09:31:02.741]                       invokeRestart <- base::invokeRestart
[09:31:02.741]                       is.null <- base::is.null
[09:31:02.741]                       muffled <- FALSE
[09:31:02.741]                       if (inherits(cond, "message")) {
[09:31:02.741]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:02.741]                         if (muffled) 
[09:31:02.741]                           invokeRestart("muffleMessage")
[09:31:02.741]                       }
[09:31:02.741]                       else if (inherits(cond, "warning")) {
[09:31:02.741]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:02.741]                         if (muffled) 
[09:31:02.741]                           invokeRestart("muffleWarning")
[09:31:02.741]                       }
[09:31:02.741]                       else if (inherits(cond, "condition")) {
[09:31:02.741]                         if (!is.null(pattern)) {
[09:31:02.741]                           computeRestarts <- base::computeRestarts
[09:31:02.741]                           grepl <- base::grepl
[09:31:02.741]                           restarts <- computeRestarts(cond)
[09:31:02.741]                           for (restart in restarts) {
[09:31:02.741]                             name <- restart$name
[09:31:02.741]                             if (is.null(name)) 
[09:31:02.741]                               next
[09:31:02.741]                             if (!grepl(pattern, name)) 
[09:31:02.741]                               next
[09:31:02.741]                             invokeRestart(restart)
[09:31:02.741]                             muffled <- TRUE
[09:31:02.741]                             break
[09:31:02.741]                           }
[09:31:02.741]                         }
[09:31:02.741]                       }
[09:31:02.741]                       invisible(muffled)
[09:31:02.741]                     }
[09:31:02.741]                     muffleCondition(cond, pattern = "^muffle")
[09:31:02.741]                   }
[09:31:02.741]                 }
[09:31:02.741]             }
[09:31:02.741]         }))
[09:31:02.741]     }, error = function(ex) {
[09:31:02.741]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:02.741]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:02.741]                 ...future.rng), started = ...future.startTime, 
[09:31:02.741]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:02.741]             version = "1.8"), class = "FutureResult")
[09:31:02.741]     }, finally = {
[09:31:02.741]         if (!identical(...future.workdir, getwd())) 
[09:31:02.741]             setwd(...future.workdir)
[09:31:02.741]         {
[09:31:02.741]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:02.741]                 ...future.oldOptions$nwarnings <- NULL
[09:31:02.741]             }
[09:31:02.741]             base::options(...future.oldOptions)
[09:31:02.741]             if (.Platform$OS.type == "windows") {
[09:31:02.741]                 old_names <- names(...future.oldEnvVars)
[09:31:02.741]                 envs <- base::Sys.getenv()
[09:31:02.741]                 names <- names(envs)
[09:31:02.741]                 common <- intersect(names, old_names)
[09:31:02.741]                 added <- setdiff(names, old_names)
[09:31:02.741]                 removed <- setdiff(old_names, names)
[09:31:02.741]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:02.741]                   envs[common]]
[09:31:02.741]                 NAMES <- toupper(changed)
[09:31:02.741]                 args <- list()
[09:31:02.741]                 for (kk in seq_along(NAMES)) {
[09:31:02.741]                   name <- changed[[kk]]
[09:31:02.741]                   NAME <- NAMES[[kk]]
[09:31:02.741]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.741]                     next
[09:31:02.741]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.741]                 }
[09:31:02.741]                 NAMES <- toupper(added)
[09:31:02.741]                 for (kk in seq_along(NAMES)) {
[09:31:02.741]                   name <- added[[kk]]
[09:31:02.741]                   NAME <- NAMES[[kk]]
[09:31:02.741]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.741]                     next
[09:31:02.741]                   args[[name]] <- ""
[09:31:02.741]                 }
[09:31:02.741]                 NAMES <- toupper(removed)
[09:31:02.741]                 for (kk in seq_along(NAMES)) {
[09:31:02.741]                   name <- removed[[kk]]
[09:31:02.741]                   NAME <- NAMES[[kk]]
[09:31:02.741]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:02.741]                     next
[09:31:02.741]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:02.741]                 }
[09:31:02.741]                 if (length(args) > 0) 
[09:31:02.741]                   base::do.call(base::Sys.setenv, args = args)
[09:31:02.741]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:02.741]             }
[09:31:02.741]             else {
[09:31:02.741]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:02.741]             }
[09:31:02.741]             {
[09:31:02.741]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:02.741]                   0L) {
[09:31:02.741]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:02.741]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:02.741]                   base::options(opts)
[09:31:02.741]                 }
[09:31:02.741]                 {
[09:31:02.741]                   {
[09:31:02.741]                     NULL
[09:31:02.741]                     RNGkind("Mersenne-Twister")
[09:31:02.741]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:02.741]                       inherits = FALSE)
[09:31:02.741]                   }
[09:31:02.741]                   options(future.plan = NULL)
[09:31:02.741]                   if (is.na(NA_character_)) 
[09:31:02.741]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:02.741]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:02.741]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:02.741]                     .init = FALSE)
[09:31:02.741]                 }
[09:31:02.741]             }
[09:31:02.741]         }
[09:31:02.741]     })
[09:31:02.741]     if (TRUE) {
[09:31:02.741]         base::sink(type = "output", split = FALSE)
[09:31:02.741]         if (TRUE) {
[09:31:02.741]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:02.741]         }
[09:31:02.741]         else {
[09:31:02.741]             ...future.result["stdout"] <- base::list(NULL)
[09:31:02.741]         }
[09:31:02.741]         base::close(...future.stdout)
[09:31:02.741]         ...future.stdout <- NULL
[09:31:02.741]     }
[09:31:02.741]     ...future.result$conditions <- ...future.conditions
[09:31:02.741]     ...future.result$finished <- base::Sys.time()
[09:31:02.741]     ...future.result
[09:31:02.741] }
[09:31:02.743] plan(): Setting new future strategy stack:
[09:31:02.743] List of future strategies:
[09:31:02.743] 1. sequential:
[09:31:02.743]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.743]    - tweaked: FALSE
[09:31:02.743]    - call: NULL
[09:31:02.744] plan(): nbrOfWorkers() = 1
[09:31:02.744] plan(): Setting new future strategy stack:
[09:31:02.744] List of future strategies:
[09:31:02.744] 1. sequential:
[09:31:02.744]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.744]    - tweaked: FALSE
[09:31:02.744]    - call: future::plan("sequential")
[09:31:02.745] plan(): nbrOfWorkers() = 1
[09:31:02.745] SequentialFuture started (and completed)
[09:31:02.745] - Launch lazy future ... done
[09:31:02.745] run() for ‘SequentialFuture’ ... done
> 
> message("*** %<-% to environment ... DONE")
*** %<-% to environment ... DONE
> 
> source("incl/end.R")
[09:31:02.746] plan(): Setting new future strategy stack:
[09:31:02.746] List of future strategies:
[09:31:02.746] 1. FutureStrategy:
[09:31:02.746]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:02.746]    - tweaked: FALSE
[09:31:02.746]    - call: future::plan(oplan)
[09:31:02.759] plan(): nbrOfWorkers() = 1
> 
