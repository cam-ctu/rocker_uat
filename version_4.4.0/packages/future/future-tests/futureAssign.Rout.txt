
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:31:05.492] plan(): Setting new future strategy stack:
[09:31:05.492] List of future strategies:
[09:31:05.492] 1. sequential:
[09:31:05.492]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.492]    - tweaked: FALSE
[09:31:05.492]    - call: future::plan("sequential")
[09:31:05.503] plan(): nbrOfWorkers() = 1
> 
> message("*** futureAssign() ...")
*** futureAssign() ...
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...
> 
> delayedAssign("a", {
+   cat("Delayed assignment evaluated\n")
+   1
+ })
> 
> futureAssign("b", {
+   cat("Future assignment evaluated\n")
+   2
+ }, lazy = TRUE)
[09:31:05.516] getGlobalsAndPackages() ...
[09:31:05.516] Searching for globals...
[09:31:05.522] - globals found: [2] ‘{’, ‘cat’
[09:31:05.522] Searching for globals ... DONE
[09:31:05.522] Resolving globals: FALSE
[09:31:05.523] 
[09:31:05.523] 
[09:31:05.523] getGlobalsAndPackages() ... DONE
> 
> ## Because "lazy future" is used, the expression/value
> ## for 'b' will not be resolved at the point.  For other
> ## types of futures, it may already have been resolved
> cat(sprintf("b = %s\n", b))
[09:31:05.524] run() for ‘Future’ ...
[09:31:05.524] - state: ‘created’
[09:31:05.524] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:05.525] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:05.525] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:05.525]   - Field: ‘label’
[09:31:05.525]   - Field: ‘local’
[09:31:05.525]   - Field: ‘owner’
[09:31:05.525]   - Field: ‘envir’
[09:31:05.525]   - Field: ‘packages’
[09:31:05.525]   - Field: ‘gc’
[09:31:05.526]   - Field: ‘conditions’
[09:31:05.526]   - Field: ‘expr’
[09:31:05.526]   - Field: ‘uuid’
[09:31:05.526]   - Field: ‘seed’
[09:31:05.526]   - Field: ‘version’
[09:31:05.526]   - Field: ‘result’
[09:31:05.526]   - Field: ‘asynchronous’
[09:31:05.526]   - Field: ‘calls’
[09:31:05.526]   - Field: ‘globals’
[09:31:05.526]   - Field: ‘stdout’
[09:31:05.526]   - Field: ‘earlySignal’
[09:31:05.527]   - Field: ‘lazy’
[09:31:05.527]   - Field: ‘state’
[09:31:05.527] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:05.527] - Launch lazy future ...
[09:31:05.527] Packages needed by the future expression (n = 0): <none>
[09:31:05.528] Packages needed by future strategies (n = 0): <none>
[09:31:05.528] {
[09:31:05.528]     {
[09:31:05.528]         {
[09:31:05.528]             ...future.startTime <- base::Sys.time()
[09:31:05.528]             {
[09:31:05.528]                 {
[09:31:05.528]                   {
[09:31:05.528]                     base::local({
[09:31:05.528]                       has_future <- base::requireNamespace("future", 
[09:31:05.528]                         quietly = TRUE)
[09:31:05.528]                       if (has_future) {
[09:31:05.528]                         ns <- base::getNamespace("future")
[09:31:05.528]                         version <- ns[[".package"]][["version"]]
[09:31:05.528]                         if (is.null(version)) 
[09:31:05.528]                           version <- utils::packageVersion("future")
[09:31:05.528]                       }
[09:31:05.528]                       else {
[09:31:05.528]                         version <- NULL
[09:31:05.528]                       }
[09:31:05.528]                       if (!has_future || version < "1.8.0") {
[09:31:05.528]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.528]                           "", base::R.version$version.string), 
[09:31:05.528]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:05.528]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.528]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.528]                             "release", "version")], collapse = " "), 
[09:31:05.528]                           hostname = base::Sys.info()[["nodename"]])
[09:31:05.528]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.528]                           info)
[09:31:05.528]                         info <- base::paste(info, collapse = "; ")
[09:31:05.528]                         if (!has_future) {
[09:31:05.528]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.528]                             info)
[09:31:05.528]                         }
[09:31:05.528]                         else {
[09:31:05.528]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.528]                             info, version)
[09:31:05.528]                         }
[09:31:05.528]                         base::stop(msg)
[09:31:05.528]                       }
[09:31:05.528]                     })
[09:31:05.528]                   }
[09:31:05.528]                   ...future.strategy.old <- future::plan("list")
[09:31:05.528]                   options(future.plan = NULL)
[09:31:05.528]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.528]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.528]                 }
[09:31:05.528]                 ...future.workdir <- getwd()
[09:31:05.528]             }
[09:31:05.528]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.528]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.528]         }
[09:31:05.528]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.528]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.528]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.528]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.528]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.528]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.528]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.528]             base::names(...future.oldOptions))
[09:31:05.528]     }
[09:31:05.528]     if (FALSE) {
[09:31:05.528]     }
[09:31:05.528]     else {
[09:31:05.528]         if (TRUE) {
[09:31:05.528]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.528]                 open = "w")
[09:31:05.528]         }
[09:31:05.528]         else {
[09:31:05.528]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.528]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.528]         }
[09:31:05.528]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.528]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.528]             base::sink(type = "output", split = FALSE)
[09:31:05.528]             base::close(...future.stdout)
[09:31:05.528]         }, add = TRUE)
[09:31:05.528]     }
[09:31:05.528]     ...future.frame <- base::sys.nframe()
[09:31:05.528]     ...future.conditions <- base::list()
[09:31:05.528]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.528]     if (FALSE) {
[09:31:05.528]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.528]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.528]     }
[09:31:05.528]     ...future.result <- base::tryCatch({
[09:31:05.528]         base::withCallingHandlers({
[09:31:05.528]             ...future.value <- base::withVisible(base::local({
[09:31:05.528]                 cat("Future assignment evaluated\n")
[09:31:05.528]                 2
[09:31:05.528]             }))
[09:31:05.528]             future::FutureResult(value = ...future.value$value, 
[09:31:05.528]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.528]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.528]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.528]                     ...future.globalenv.names))
[09:31:05.528]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.528]         }, condition = base::local({
[09:31:05.528]             c <- base::c
[09:31:05.528]             inherits <- base::inherits
[09:31:05.528]             invokeRestart <- base::invokeRestart
[09:31:05.528]             length <- base::length
[09:31:05.528]             list <- base::list
[09:31:05.528]             seq.int <- base::seq.int
[09:31:05.528]             signalCondition <- base::signalCondition
[09:31:05.528]             sys.calls <- base::sys.calls
[09:31:05.528]             `[[` <- base::`[[`
[09:31:05.528]             `+` <- base::`+`
[09:31:05.528]             `<<-` <- base::`<<-`
[09:31:05.528]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.528]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.528]                   3L)]
[09:31:05.528]             }
[09:31:05.528]             function(cond) {
[09:31:05.528]                 is_error <- inherits(cond, "error")
[09:31:05.528]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.528]                   NULL)
[09:31:05.528]                 if (is_error) {
[09:31:05.528]                   sessionInformation <- function() {
[09:31:05.528]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.528]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.528]                       search = base::search(), system = base::Sys.info())
[09:31:05.528]                   }
[09:31:05.528]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.528]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.528]                     cond$call), session = sessionInformation(), 
[09:31:05.528]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.528]                   signalCondition(cond)
[09:31:05.528]                 }
[09:31:05.528]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.528]                 "immediateCondition"))) {
[09:31:05.528]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.528]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.528]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.528]                   if (TRUE && !signal) {
[09:31:05.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.528]                     {
[09:31:05.528]                       inherits <- base::inherits
[09:31:05.528]                       invokeRestart <- base::invokeRestart
[09:31:05.528]                       is.null <- base::is.null
[09:31:05.528]                       muffled <- FALSE
[09:31:05.528]                       if (inherits(cond, "message")) {
[09:31:05.528]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.528]                         if (muffled) 
[09:31:05.528]                           invokeRestart("muffleMessage")
[09:31:05.528]                       }
[09:31:05.528]                       else if (inherits(cond, "warning")) {
[09:31:05.528]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.528]                         if (muffled) 
[09:31:05.528]                           invokeRestart("muffleWarning")
[09:31:05.528]                       }
[09:31:05.528]                       else if (inherits(cond, "condition")) {
[09:31:05.528]                         if (!is.null(pattern)) {
[09:31:05.528]                           computeRestarts <- base::computeRestarts
[09:31:05.528]                           grepl <- base::grepl
[09:31:05.528]                           restarts <- computeRestarts(cond)
[09:31:05.528]                           for (restart in restarts) {
[09:31:05.528]                             name <- restart$name
[09:31:05.528]                             if (is.null(name)) 
[09:31:05.528]                               next
[09:31:05.528]                             if (!grepl(pattern, name)) 
[09:31:05.528]                               next
[09:31:05.528]                             invokeRestart(restart)
[09:31:05.528]                             muffled <- TRUE
[09:31:05.528]                             break
[09:31:05.528]                           }
[09:31:05.528]                         }
[09:31:05.528]                       }
[09:31:05.528]                       invisible(muffled)
[09:31:05.528]                     }
[09:31:05.528]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.528]                   }
[09:31:05.528]                 }
[09:31:05.528]                 else {
[09:31:05.528]                   if (TRUE) {
[09:31:05.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.528]                     {
[09:31:05.528]                       inherits <- base::inherits
[09:31:05.528]                       invokeRestart <- base::invokeRestart
[09:31:05.528]                       is.null <- base::is.null
[09:31:05.528]                       muffled <- FALSE
[09:31:05.528]                       if (inherits(cond, "message")) {
[09:31:05.528]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.528]                         if (muffled) 
[09:31:05.528]                           invokeRestart("muffleMessage")
[09:31:05.528]                       }
[09:31:05.528]                       else if (inherits(cond, "warning")) {
[09:31:05.528]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.528]                         if (muffled) 
[09:31:05.528]                           invokeRestart("muffleWarning")
[09:31:05.528]                       }
[09:31:05.528]                       else if (inherits(cond, "condition")) {
[09:31:05.528]                         if (!is.null(pattern)) {
[09:31:05.528]                           computeRestarts <- base::computeRestarts
[09:31:05.528]                           grepl <- base::grepl
[09:31:05.528]                           restarts <- computeRestarts(cond)
[09:31:05.528]                           for (restart in restarts) {
[09:31:05.528]                             name <- restart$name
[09:31:05.528]                             if (is.null(name)) 
[09:31:05.528]                               next
[09:31:05.528]                             if (!grepl(pattern, name)) 
[09:31:05.528]                               next
[09:31:05.528]                             invokeRestart(restart)
[09:31:05.528]                             muffled <- TRUE
[09:31:05.528]                             break
[09:31:05.528]                           }
[09:31:05.528]                         }
[09:31:05.528]                       }
[09:31:05.528]                       invisible(muffled)
[09:31:05.528]                     }
[09:31:05.528]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.528]                   }
[09:31:05.528]                 }
[09:31:05.528]             }
[09:31:05.528]         }))
[09:31:05.528]     }, error = function(ex) {
[09:31:05.528]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.528]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.528]                 ...future.rng), started = ...future.startTime, 
[09:31:05.528]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.528]             version = "1.8"), class = "FutureResult")
[09:31:05.528]     }, finally = {
[09:31:05.528]         if (!identical(...future.workdir, getwd())) 
[09:31:05.528]             setwd(...future.workdir)
[09:31:05.528]         {
[09:31:05.528]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.528]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.528]             }
[09:31:05.528]             base::options(...future.oldOptions)
[09:31:05.528]             if (.Platform$OS.type == "windows") {
[09:31:05.528]                 old_names <- names(...future.oldEnvVars)
[09:31:05.528]                 envs <- base::Sys.getenv()
[09:31:05.528]                 names <- names(envs)
[09:31:05.528]                 common <- intersect(names, old_names)
[09:31:05.528]                 added <- setdiff(names, old_names)
[09:31:05.528]                 removed <- setdiff(old_names, names)
[09:31:05.528]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.528]                   envs[common]]
[09:31:05.528]                 NAMES <- toupper(changed)
[09:31:05.528]                 args <- list()
[09:31:05.528]                 for (kk in seq_along(NAMES)) {
[09:31:05.528]                   name <- changed[[kk]]
[09:31:05.528]                   NAME <- NAMES[[kk]]
[09:31:05.528]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.528]                     next
[09:31:05.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.528]                 }
[09:31:05.528]                 NAMES <- toupper(added)
[09:31:05.528]                 for (kk in seq_along(NAMES)) {
[09:31:05.528]                   name <- added[[kk]]
[09:31:05.528]                   NAME <- NAMES[[kk]]
[09:31:05.528]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.528]                     next
[09:31:05.528]                   args[[name]] <- ""
[09:31:05.528]                 }
[09:31:05.528]                 NAMES <- toupper(removed)
[09:31:05.528]                 for (kk in seq_along(NAMES)) {
[09:31:05.528]                   name <- removed[[kk]]
[09:31:05.528]                   NAME <- NAMES[[kk]]
[09:31:05.528]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.528]                     next
[09:31:05.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.528]                 }
[09:31:05.528]                 if (length(args) > 0) 
[09:31:05.528]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.528]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.528]             }
[09:31:05.528]             else {
[09:31:05.528]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.528]             }
[09:31:05.528]             {
[09:31:05.528]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.528]                   0L) {
[09:31:05.528]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.528]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.528]                   base::options(opts)
[09:31:05.528]                 }
[09:31:05.528]                 {
[09:31:05.528]                   {
[09:31:05.528]                     NULL
[09:31:05.528]                     RNGkind("Mersenne-Twister")
[09:31:05.528]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:05.528]                       inherits = FALSE)
[09:31:05.528]                   }
[09:31:05.528]                   options(future.plan = NULL)
[09:31:05.528]                   if (is.na(NA_character_)) 
[09:31:05.528]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.528]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.528]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.528]                     .init = FALSE)
[09:31:05.528]                 }
[09:31:05.528]             }
[09:31:05.528]         }
[09:31:05.528]     })
[09:31:05.528]     if (TRUE) {
[09:31:05.528]         base::sink(type = "output", split = FALSE)
[09:31:05.528]         if (TRUE) {
[09:31:05.528]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.528]         }
[09:31:05.528]         else {
[09:31:05.528]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.528]         }
[09:31:05.528]         base::close(...future.stdout)
[09:31:05.528]         ...future.stdout <- NULL
[09:31:05.528]     }
[09:31:05.528]     ...future.result$conditions <- ...future.conditions
[09:31:05.528]     ...future.result$finished <- base::Sys.time()
[09:31:05.528]     ...future.result
[09:31:05.528] }
[09:31:05.530] plan(): Setting new future strategy stack:
[09:31:05.530] List of future strategies:
[09:31:05.530] 1. sequential:
[09:31:05.530]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.530]    - tweaked: FALSE
[09:31:05.530]    - call: NULL
[09:31:05.531] plan(): nbrOfWorkers() = 1
[09:31:05.532] plan(): Setting new future strategy stack:
[09:31:05.532] List of future strategies:
[09:31:05.532] 1. sequential:
[09:31:05.532]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.532]    - tweaked: FALSE
[09:31:05.532]    - call: future::plan("sequential")
[09:31:05.532] plan(): nbrOfWorkers() = 1
[09:31:05.533] SequentialFuture started (and completed)
[09:31:05.533] - Launch lazy future ... done
[09:31:05.533] run() for ‘SequentialFuture’ ... done
Future assignment evaluated
b = 2
> 
> ## The expression/value of 'a' is resolved at this point,
> ## because a delayed assignment (promise) was used.
> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1
> 
> stopifnot(identical(a, 1))
> stopifnot(identical(b, 2))
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE
> 
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** futureAssign() with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     ## Potential task name clashes
+     u <- new.env()
+     v <- new.env()
+     futureAssign("a", { 2 }, assign.env = u)
+     futureAssign("a", { 4 }, assign.env = v)
+     
+     cat(sprintf("u$a = %s\n", u$a))
+     cat(sprintf("v$a = %s\n", v$a))
+     
+     stopifnot(identical(u$a, 2))
+     stopifnot(identical(v$a, 4))
+     
+     
+     ## Global variables
+     a <- 1
+     futureAssign("b", { 2 * a })
+     a <- 2
+     stopifnot(b == 2)
+ 
+     ## Explicit lazy evaluation
+     for (lazy in c(FALSE, TRUE)) {
+       a <- 1
+       f <- futureAssign("b", { 2 * a }, lazy = lazy)
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+       
+       ## Set 'lazy' via disposable option
+       options(future.disposable = list(lazy = lazy))
+       a <- 1
+       f <- futureAssign("b", { 2 * a })
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+     }
+ 
+     message(sprintf("*** futureAssign() with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[09:31:05.558] plan(): Setting new future strategy stack:
[09:31:05.558] List of future strategies:
[09:31:05.558] 1. sequential:
[09:31:05.558]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.558]    - tweaked: FALSE
[09:31:05.558]    - call: plan(strategy)
[09:31:05.568] plan(): nbrOfWorkers() = 1
[09:31:05.568] getGlobalsAndPackages() ...
[09:31:05.569] Searching for globals...
[09:31:05.570] - globals found: [1] ‘{’
[09:31:05.570] Searching for globals ... DONE
[09:31:05.570] Resolving globals: FALSE
[09:31:05.570] 
[09:31:05.570] 
[09:31:05.570] getGlobalsAndPackages() ... DONE
[09:31:05.571] run() for ‘Future’ ...
[09:31:05.571] - state: ‘created’
[09:31:05.571] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:05.571] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:05.571] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:05.571]   - Field: ‘label’
[09:31:05.571]   - Field: ‘local’
[09:31:05.572]   - Field: ‘owner’
[09:31:05.572]   - Field: ‘envir’
[09:31:05.572]   - Field: ‘packages’
[09:31:05.572]   - Field: ‘gc’
[09:31:05.572]   - Field: ‘conditions’
[09:31:05.572]   - Field: ‘expr’
[09:31:05.572]   - Field: ‘uuid’
[09:31:05.572]   - Field: ‘seed’
[09:31:05.572]   - Field: ‘version’
[09:31:05.572]   - Field: ‘result’
[09:31:05.572]   - Field: ‘asynchronous’
[09:31:05.572]   - Field: ‘calls’
[09:31:05.573]   - Field: ‘globals’
[09:31:05.573]   - Field: ‘stdout’
[09:31:05.573]   - Field: ‘earlySignal’
[09:31:05.573]   - Field: ‘lazy’
[09:31:05.573]   - Field: ‘state’
[09:31:05.573] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:05.573] - Launch lazy future ...
[09:31:05.573] Packages needed by the future expression (n = 0): <none>
[09:31:05.573] Packages needed by future strategies (n = 0): <none>
[09:31:05.574] {
[09:31:05.574]     {
[09:31:05.574]         {
[09:31:05.574]             ...future.startTime <- base::Sys.time()
[09:31:05.574]             {
[09:31:05.574]                 {
[09:31:05.574]                   {
[09:31:05.574]                     base::local({
[09:31:05.574]                       has_future <- base::requireNamespace("future", 
[09:31:05.574]                         quietly = TRUE)
[09:31:05.574]                       if (has_future) {
[09:31:05.574]                         ns <- base::getNamespace("future")
[09:31:05.574]                         version <- ns[[".package"]][["version"]]
[09:31:05.574]                         if (is.null(version)) 
[09:31:05.574]                           version <- utils::packageVersion("future")
[09:31:05.574]                       }
[09:31:05.574]                       else {
[09:31:05.574]                         version <- NULL
[09:31:05.574]                       }
[09:31:05.574]                       if (!has_future || version < "1.8.0") {
[09:31:05.574]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.574]                           "", base::R.version$version.string), 
[09:31:05.574]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:05.574]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.574]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.574]                             "release", "version")], collapse = " "), 
[09:31:05.574]                           hostname = base::Sys.info()[["nodename"]])
[09:31:05.574]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.574]                           info)
[09:31:05.574]                         info <- base::paste(info, collapse = "; ")
[09:31:05.574]                         if (!has_future) {
[09:31:05.574]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.574]                             info)
[09:31:05.574]                         }
[09:31:05.574]                         else {
[09:31:05.574]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.574]                             info, version)
[09:31:05.574]                         }
[09:31:05.574]                         base::stop(msg)
[09:31:05.574]                       }
[09:31:05.574]                     })
[09:31:05.574]                   }
[09:31:05.574]                   ...future.strategy.old <- future::plan("list")
[09:31:05.574]                   options(future.plan = NULL)
[09:31:05.574]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.574]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.574]                 }
[09:31:05.574]                 ...future.workdir <- getwd()
[09:31:05.574]             }
[09:31:05.574]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.574]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.574]         }
[09:31:05.574]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.574]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.574]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.574]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.574]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.574]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.574]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.574]             base::names(...future.oldOptions))
[09:31:05.574]     }
[09:31:05.574]     if (FALSE) {
[09:31:05.574]     }
[09:31:05.574]     else {
[09:31:05.574]         if (TRUE) {
[09:31:05.574]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.574]                 open = "w")
[09:31:05.574]         }
[09:31:05.574]         else {
[09:31:05.574]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.574]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.574]         }
[09:31:05.574]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.574]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.574]             base::sink(type = "output", split = FALSE)
[09:31:05.574]             base::close(...future.stdout)
[09:31:05.574]         }, add = TRUE)
[09:31:05.574]     }
[09:31:05.574]     ...future.frame <- base::sys.nframe()
[09:31:05.574]     ...future.conditions <- base::list()
[09:31:05.574]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.574]     if (FALSE) {
[09:31:05.574]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.574]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.574]     }
[09:31:05.574]     ...future.result <- base::tryCatch({
[09:31:05.574]         base::withCallingHandlers({
[09:31:05.574]             ...future.value <- base::withVisible(base::local({
[09:31:05.574]                 2
[09:31:05.574]             }))
[09:31:05.574]             future::FutureResult(value = ...future.value$value, 
[09:31:05.574]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.574]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.574]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.574]                     ...future.globalenv.names))
[09:31:05.574]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.574]         }, condition = base::local({
[09:31:05.574]             c <- base::c
[09:31:05.574]             inherits <- base::inherits
[09:31:05.574]             invokeRestart <- base::invokeRestart
[09:31:05.574]             length <- base::length
[09:31:05.574]             list <- base::list
[09:31:05.574]             seq.int <- base::seq.int
[09:31:05.574]             signalCondition <- base::signalCondition
[09:31:05.574]             sys.calls <- base::sys.calls
[09:31:05.574]             `[[` <- base::`[[`
[09:31:05.574]             `+` <- base::`+`
[09:31:05.574]             `<<-` <- base::`<<-`
[09:31:05.574]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.574]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.574]                   3L)]
[09:31:05.574]             }
[09:31:05.574]             function(cond) {
[09:31:05.574]                 is_error <- inherits(cond, "error")
[09:31:05.574]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.574]                   NULL)
[09:31:05.574]                 if (is_error) {
[09:31:05.574]                   sessionInformation <- function() {
[09:31:05.574]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.574]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.574]                       search = base::search(), system = base::Sys.info())
[09:31:05.574]                   }
[09:31:05.574]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.574]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.574]                     cond$call), session = sessionInformation(), 
[09:31:05.574]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.574]                   signalCondition(cond)
[09:31:05.574]                 }
[09:31:05.574]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.574]                 "immediateCondition"))) {
[09:31:05.574]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.574]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.574]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.574]                   if (TRUE && !signal) {
[09:31:05.574]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.574]                     {
[09:31:05.574]                       inherits <- base::inherits
[09:31:05.574]                       invokeRestart <- base::invokeRestart
[09:31:05.574]                       is.null <- base::is.null
[09:31:05.574]                       muffled <- FALSE
[09:31:05.574]                       if (inherits(cond, "message")) {
[09:31:05.574]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.574]                         if (muffled) 
[09:31:05.574]                           invokeRestart("muffleMessage")
[09:31:05.574]                       }
[09:31:05.574]                       else if (inherits(cond, "warning")) {
[09:31:05.574]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.574]                         if (muffled) 
[09:31:05.574]                           invokeRestart("muffleWarning")
[09:31:05.574]                       }
[09:31:05.574]                       else if (inherits(cond, "condition")) {
[09:31:05.574]                         if (!is.null(pattern)) {
[09:31:05.574]                           computeRestarts <- base::computeRestarts
[09:31:05.574]                           grepl <- base::grepl
[09:31:05.574]                           restarts <- computeRestarts(cond)
[09:31:05.574]                           for (restart in restarts) {
[09:31:05.574]                             name <- restart$name
[09:31:05.574]                             if (is.null(name)) 
[09:31:05.574]                               next
[09:31:05.574]                             if (!grepl(pattern, name)) 
[09:31:05.574]                               next
[09:31:05.574]                             invokeRestart(restart)
[09:31:05.574]                             muffled <- TRUE
[09:31:05.574]                             break
[09:31:05.574]                           }
[09:31:05.574]                         }
[09:31:05.574]                       }
[09:31:05.574]                       invisible(muffled)
[09:31:05.574]                     }
[09:31:05.574]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.574]                   }
[09:31:05.574]                 }
[09:31:05.574]                 else {
[09:31:05.574]                   if (TRUE) {
[09:31:05.574]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.574]                     {
[09:31:05.574]                       inherits <- base::inherits
[09:31:05.574]                       invokeRestart <- base::invokeRestart
[09:31:05.574]                       is.null <- base::is.null
[09:31:05.574]                       muffled <- FALSE
[09:31:05.574]                       if (inherits(cond, "message")) {
[09:31:05.574]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.574]                         if (muffled) 
[09:31:05.574]                           invokeRestart("muffleMessage")
[09:31:05.574]                       }
[09:31:05.574]                       else if (inherits(cond, "warning")) {
[09:31:05.574]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.574]                         if (muffled) 
[09:31:05.574]                           invokeRestart("muffleWarning")
[09:31:05.574]                       }
[09:31:05.574]                       else if (inherits(cond, "condition")) {
[09:31:05.574]                         if (!is.null(pattern)) {
[09:31:05.574]                           computeRestarts <- base::computeRestarts
[09:31:05.574]                           grepl <- base::grepl
[09:31:05.574]                           restarts <- computeRestarts(cond)
[09:31:05.574]                           for (restart in restarts) {
[09:31:05.574]                             name <- restart$name
[09:31:05.574]                             if (is.null(name)) 
[09:31:05.574]                               next
[09:31:05.574]                             if (!grepl(pattern, name)) 
[09:31:05.574]                               next
[09:31:05.574]                             invokeRestart(restart)
[09:31:05.574]                             muffled <- TRUE
[09:31:05.574]                             break
[09:31:05.574]                           }
[09:31:05.574]                         }
[09:31:05.574]                       }
[09:31:05.574]                       invisible(muffled)
[09:31:05.574]                     }
[09:31:05.574]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.574]                   }
[09:31:05.574]                 }
[09:31:05.574]             }
[09:31:05.574]         }))
[09:31:05.574]     }, error = function(ex) {
[09:31:05.574]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.574]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.574]                 ...future.rng), started = ...future.startTime, 
[09:31:05.574]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.574]             version = "1.8"), class = "FutureResult")
[09:31:05.574]     }, finally = {
[09:31:05.574]         if (!identical(...future.workdir, getwd())) 
[09:31:05.574]             setwd(...future.workdir)
[09:31:05.574]         {
[09:31:05.574]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.574]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.574]             }
[09:31:05.574]             base::options(...future.oldOptions)
[09:31:05.574]             if (.Platform$OS.type == "windows") {
[09:31:05.574]                 old_names <- names(...future.oldEnvVars)
[09:31:05.574]                 envs <- base::Sys.getenv()
[09:31:05.574]                 names <- names(envs)
[09:31:05.574]                 common <- intersect(names, old_names)
[09:31:05.574]                 added <- setdiff(names, old_names)
[09:31:05.574]                 removed <- setdiff(old_names, names)
[09:31:05.574]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.574]                   envs[common]]
[09:31:05.574]                 NAMES <- toupper(changed)
[09:31:05.574]                 args <- list()
[09:31:05.574]                 for (kk in seq_along(NAMES)) {
[09:31:05.574]                   name <- changed[[kk]]
[09:31:05.574]                   NAME <- NAMES[[kk]]
[09:31:05.574]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.574]                     next
[09:31:05.574]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.574]                 }
[09:31:05.574]                 NAMES <- toupper(added)
[09:31:05.574]                 for (kk in seq_along(NAMES)) {
[09:31:05.574]                   name <- added[[kk]]
[09:31:05.574]                   NAME <- NAMES[[kk]]
[09:31:05.574]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.574]                     next
[09:31:05.574]                   args[[name]] <- ""
[09:31:05.574]                 }
[09:31:05.574]                 NAMES <- toupper(removed)
[09:31:05.574]                 for (kk in seq_along(NAMES)) {
[09:31:05.574]                   name <- removed[[kk]]
[09:31:05.574]                   NAME <- NAMES[[kk]]
[09:31:05.574]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.574]                     next
[09:31:05.574]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.574]                 }
[09:31:05.574]                 if (length(args) > 0) 
[09:31:05.574]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.574]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.574]             }
[09:31:05.574]             else {
[09:31:05.574]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.574]             }
[09:31:05.574]             {
[09:31:05.574]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.574]                   0L) {
[09:31:05.574]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.574]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.574]                   base::options(opts)
[09:31:05.574]                 }
[09:31:05.574]                 {
[09:31:05.574]                   {
[09:31:05.574]                     NULL
[09:31:05.574]                     RNGkind("Mersenne-Twister")
[09:31:05.574]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:05.574]                       inherits = FALSE)
[09:31:05.574]                   }
[09:31:05.574]                   options(future.plan = NULL)
[09:31:05.574]                   if (is.na(NA_character_)) 
[09:31:05.574]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.574]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.574]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.574]                     .init = FALSE)
[09:31:05.574]                 }
[09:31:05.574]             }
[09:31:05.574]         }
[09:31:05.574]     })
[09:31:05.574]     if (TRUE) {
[09:31:05.574]         base::sink(type = "output", split = FALSE)
[09:31:05.574]         if (TRUE) {
[09:31:05.574]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.574]         }
[09:31:05.574]         else {
[09:31:05.574]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.574]         }
[09:31:05.574]         base::close(...future.stdout)
[09:31:05.574]         ...future.stdout <- NULL
[09:31:05.574]     }
[09:31:05.574]     ...future.result$conditions <- ...future.conditions
[09:31:05.574]     ...future.result$finished <- base::Sys.time()
[09:31:05.574]     ...future.result
[09:31:05.574] }
[09:31:05.575] plan(): Setting new future strategy stack:
[09:31:05.575] List of future strategies:
[09:31:05.575] 1. sequential:
[09:31:05.575]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.575]    - tweaked: FALSE
[09:31:05.575]    - call: NULL
[09:31:05.576] plan(): nbrOfWorkers() = 1
[09:31:05.577] plan(): Setting new future strategy stack:
[09:31:05.577] List of future strategies:
[09:31:05.577] 1. sequential:
[09:31:05.577]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.577]    - tweaked: FALSE
[09:31:05.577]    - call: plan(strategy)
[09:31:05.577] plan(): nbrOfWorkers() = 1
[09:31:05.577] SequentialFuture started (and completed)
[09:31:05.577] - Launch lazy future ... done
[09:31:05.577] run() for ‘SequentialFuture’ ... done
[09:31:05.578] getGlobalsAndPackages() ...
[09:31:05.578] Searching for globals...
[09:31:05.578] - globals found: [1] ‘{’
[09:31:05.578] Searching for globals ... DONE
[09:31:05.578] Resolving globals: FALSE
[09:31:05.579] 
[09:31:05.579] 
[09:31:05.579] getGlobalsAndPackages() ... DONE
[09:31:05.579] run() for ‘Future’ ...
[09:31:05.579] - state: ‘created’
[09:31:05.579] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:05.579] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:05.579] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:05.580]   - Field: ‘label’
[09:31:05.580]   - Field: ‘local’
[09:31:05.580]   - Field: ‘owner’
[09:31:05.580]   - Field: ‘envir’
[09:31:05.580]   - Field: ‘packages’
[09:31:05.580]   - Field: ‘gc’
[09:31:05.580]   - Field: ‘conditions’
[09:31:05.580]   - Field: ‘expr’
[09:31:05.580]   - Field: ‘uuid’
[09:31:05.580]   - Field: ‘seed’
[09:31:05.580]   - Field: ‘version’
[09:31:05.581]   - Field: ‘result’
[09:31:05.581]   - Field: ‘asynchronous’
[09:31:05.581]   - Field: ‘calls’
[09:31:05.581]   - Field: ‘globals’
[09:31:05.581]   - Field: ‘stdout’
[09:31:05.581]   - Field: ‘earlySignal’
[09:31:05.581]   - Field: ‘lazy’
[09:31:05.581]   - Field: ‘state’
[09:31:05.581] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:05.581] - Launch lazy future ...
[09:31:05.581] Packages needed by the future expression (n = 0): <none>
[09:31:05.582] Packages needed by future strategies (n = 0): <none>
[09:31:05.582] {
[09:31:05.582]     {
[09:31:05.582]         {
[09:31:05.582]             ...future.startTime <- base::Sys.time()
[09:31:05.582]             {
[09:31:05.582]                 {
[09:31:05.582]                   {
[09:31:05.582]                     base::local({
[09:31:05.582]                       has_future <- base::requireNamespace("future", 
[09:31:05.582]                         quietly = TRUE)
[09:31:05.582]                       if (has_future) {
[09:31:05.582]                         ns <- base::getNamespace("future")
[09:31:05.582]                         version <- ns[[".package"]][["version"]]
[09:31:05.582]                         if (is.null(version)) 
[09:31:05.582]                           version <- utils::packageVersion("future")
[09:31:05.582]                       }
[09:31:05.582]                       else {
[09:31:05.582]                         version <- NULL
[09:31:05.582]                       }
[09:31:05.582]                       if (!has_future || version < "1.8.0") {
[09:31:05.582]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.582]                           "", base::R.version$version.string), 
[09:31:05.582]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:05.582]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.582]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.582]                             "release", "version")], collapse = " "), 
[09:31:05.582]                           hostname = base::Sys.info()[["nodename"]])
[09:31:05.582]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.582]                           info)
[09:31:05.582]                         info <- base::paste(info, collapse = "; ")
[09:31:05.582]                         if (!has_future) {
[09:31:05.582]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.582]                             info)
[09:31:05.582]                         }
[09:31:05.582]                         else {
[09:31:05.582]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.582]                             info, version)
[09:31:05.582]                         }
[09:31:05.582]                         base::stop(msg)
[09:31:05.582]                       }
[09:31:05.582]                     })
[09:31:05.582]                   }
[09:31:05.582]                   ...future.strategy.old <- future::plan("list")
[09:31:05.582]                   options(future.plan = NULL)
[09:31:05.582]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.582]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.582]                 }
[09:31:05.582]                 ...future.workdir <- getwd()
[09:31:05.582]             }
[09:31:05.582]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.582]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.582]         }
[09:31:05.582]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.582]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.582]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.582]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.582]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.582]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.582]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.582]             base::names(...future.oldOptions))
[09:31:05.582]     }
[09:31:05.582]     if (FALSE) {
[09:31:05.582]     }
[09:31:05.582]     else {
[09:31:05.582]         if (TRUE) {
[09:31:05.582]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.582]                 open = "w")
[09:31:05.582]         }
[09:31:05.582]         else {
[09:31:05.582]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.582]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.582]         }
[09:31:05.582]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.582]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.582]             base::sink(type = "output", split = FALSE)
[09:31:05.582]             base::close(...future.stdout)
[09:31:05.582]         }, add = TRUE)
[09:31:05.582]     }
[09:31:05.582]     ...future.frame <- base::sys.nframe()
[09:31:05.582]     ...future.conditions <- base::list()
[09:31:05.582]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.582]     if (FALSE) {
[09:31:05.582]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.582]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.582]     }
[09:31:05.582]     ...future.result <- base::tryCatch({
[09:31:05.582]         base::withCallingHandlers({
[09:31:05.582]             ...future.value <- base::withVisible(base::local({
[09:31:05.582]                 4
[09:31:05.582]             }))
[09:31:05.582]             future::FutureResult(value = ...future.value$value, 
[09:31:05.582]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.582]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.582]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.582]                     ...future.globalenv.names))
[09:31:05.582]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.582]         }, condition = base::local({
[09:31:05.582]             c <- base::c
[09:31:05.582]             inherits <- base::inherits
[09:31:05.582]             invokeRestart <- base::invokeRestart
[09:31:05.582]             length <- base::length
[09:31:05.582]             list <- base::list
[09:31:05.582]             seq.int <- base::seq.int
[09:31:05.582]             signalCondition <- base::signalCondition
[09:31:05.582]             sys.calls <- base::sys.calls
[09:31:05.582]             `[[` <- base::`[[`
[09:31:05.582]             `+` <- base::`+`
[09:31:05.582]             `<<-` <- base::`<<-`
[09:31:05.582]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.582]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.582]                   3L)]
[09:31:05.582]             }
[09:31:05.582]             function(cond) {
[09:31:05.582]                 is_error <- inherits(cond, "error")
[09:31:05.582]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.582]                   NULL)
[09:31:05.582]                 if (is_error) {
[09:31:05.582]                   sessionInformation <- function() {
[09:31:05.582]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.582]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.582]                       search = base::search(), system = base::Sys.info())
[09:31:05.582]                   }
[09:31:05.582]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.582]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.582]                     cond$call), session = sessionInformation(), 
[09:31:05.582]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.582]                   signalCondition(cond)
[09:31:05.582]                 }
[09:31:05.582]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.582]                 "immediateCondition"))) {
[09:31:05.582]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.582]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.582]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.582]                   if (TRUE && !signal) {
[09:31:05.582]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.582]                     {
[09:31:05.582]                       inherits <- base::inherits
[09:31:05.582]                       invokeRestart <- base::invokeRestart
[09:31:05.582]                       is.null <- base::is.null
[09:31:05.582]                       muffled <- FALSE
[09:31:05.582]                       if (inherits(cond, "message")) {
[09:31:05.582]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.582]                         if (muffled) 
[09:31:05.582]                           invokeRestart("muffleMessage")
[09:31:05.582]                       }
[09:31:05.582]                       else if (inherits(cond, "warning")) {
[09:31:05.582]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.582]                         if (muffled) 
[09:31:05.582]                           invokeRestart("muffleWarning")
[09:31:05.582]                       }
[09:31:05.582]                       else if (inherits(cond, "condition")) {
[09:31:05.582]                         if (!is.null(pattern)) {
[09:31:05.582]                           computeRestarts <- base::computeRestarts
[09:31:05.582]                           grepl <- base::grepl
[09:31:05.582]                           restarts <- computeRestarts(cond)
[09:31:05.582]                           for (restart in restarts) {
[09:31:05.582]                             name <- restart$name
[09:31:05.582]                             if (is.null(name)) 
[09:31:05.582]                               next
[09:31:05.582]                             if (!grepl(pattern, name)) 
[09:31:05.582]                               next
[09:31:05.582]                             invokeRestart(restart)
[09:31:05.582]                             muffled <- TRUE
[09:31:05.582]                             break
[09:31:05.582]                           }
[09:31:05.582]                         }
[09:31:05.582]                       }
[09:31:05.582]                       invisible(muffled)
[09:31:05.582]                     }
[09:31:05.582]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.582]                   }
[09:31:05.582]                 }
[09:31:05.582]                 else {
[09:31:05.582]                   if (TRUE) {
[09:31:05.582]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.582]                     {
[09:31:05.582]                       inherits <- base::inherits
[09:31:05.582]                       invokeRestart <- base::invokeRestart
[09:31:05.582]                       is.null <- base::is.null
[09:31:05.582]                       muffled <- FALSE
[09:31:05.582]                       if (inherits(cond, "message")) {
[09:31:05.582]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.582]                         if (muffled) 
[09:31:05.582]                           invokeRestart("muffleMessage")
[09:31:05.582]                       }
[09:31:05.582]                       else if (inherits(cond, "warning")) {
[09:31:05.582]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.582]                         if (muffled) 
[09:31:05.582]                           invokeRestart("muffleWarning")
[09:31:05.582]                       }
[09:31:05.582]                       else if (inherits(cond, "condition")) {
[09:31:05.582]                         if (!is.null(pattern)) {
[09:31:05.582]                           computeRestarts <- base::computeRestarts
[09:31:05.582]                           grepl <- base::grepl
[09:31:05.582]                           restarts <- computeRestarts(cond)
[09:31:05.582]                           for (restart in restarts) {
[09:31:05.582]                             name <- restart$name
[09:31:05.582]                             if (is.null(name)) 
[09:31:05.582]                               next
[09:31:05.582]                             if (!grepl(pattern, name)) 
[09:31:05.582]                               next
[09:31:05.582]                             invokeRestart(restart)
[09:31:05.582]                             muffled <- TRUE
[09:31:05.582]                             break
[09:31:05.582]                           }
[09:31:05.582]                         }
[09:31:05.582]                       }
[09:31:05.582]                       invisible(muffled)
[09:31:05.582]                     }
[09:31:05.582]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.582]                   }
[09:31:05.582]                 }
[09:31:05.582]             }
[09:31:05.582]         }))
[09:31:05.582]     }, error = function(ex) {
[09:31:05.582]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.582]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.582]                 ...future.rng), started = ...future.startTime, 
[09:31:05.582]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.582]             version = "1.8"), class = "FutureResult")
[09:31:05.582]     }, finally = {
[09:31:05.582]         if (!identical(...future.workdir, getwd())) 
[09:31:05.582]             setwd(...future.workdir)
[09:31:05.582]         {
[09:31:05.582]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.582]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.582]             }
[09:31:05.582]             base::options(...future.oldOptions)
[09:31:05.582]             if (.Platform$OS.type == "windows") {
[09:31:05.582]                 old_names <- names(...future.oldEnvVars)
[09:31:05.582]                 envs <- base::Sys.getenv()
[09:31:05.582]                 names <- names(envs)
[09:31:05.582]                 common <- intersect(names, old_names)
[09:31:05.582]                 added <- setdiff(names, old_names)
[09:31:05.582]                 removed <- setdiff(old_names, names)
[09:31:05.582]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.582]                   envs[common]]
[09:31:05.582]                 NAMES <- toupper(changed)
[09:31:05.582]                 args <- list()
[09:31:05.582]                 for (kk in seq_along(NAMES)) {
[09:31:05.582]                   name <- changed[[kk]]
[09:31:05.582]                   NAME <- NAMES[[kk]]
[09:31:05.582]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.582]                     next
[09:31:05.582]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.582]                 }
[09:31:05.582]                 NAMES <- toupper(added)
[09:31:05.582]                 for (kk in seq_along(NAMES)) {
[09:31:05.582]                   name <- added[[kk]]
[09:31:05.582]                   NAME <- NAMES[[kk]]
[09:31:05.582]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.582]                     next
[09:31:05.582]                   args[[name]] <- ""
[09:31:05.582]                 }
[09:31:05.582]                 NAMES <- toupper(removed)
[09:31:05.582]                 for (kk in seq_along(NAMES)) {
[09:31:05.582]                   name <- removed[[kk]]
[09:31:05.582]                   NAME <- NAMES[[kk]]
[09:31:05.582]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.582]                     next
[09:31:05.582]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.582]                 }
[09:31:05.582]                 if (length(args) > 0) 
[09:31:05.582]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.582]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.582]             }
[09:31:05.582]             else {
[09:31:05.582]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.582]             }
[09:31:05.582]             {
[09:31:05.582]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.582]                   0L) {
[09:31:05.582]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.582]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.582]                   base::options(opts)
[09:31:05.582]                 }
[09:31:05.582]                 {
[09:31:05.582]                   {
[09:31:05.582]                     NULL
[09:31:05.582]                     RNGkind("Mersenne-Twister")
[09:31:05.582]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:05.582]                       inherits = FALSE)
[09:31:05.582]                   }
[09:31:05.582]                   options(future.plan = NULL)
[09:31:05.582]                   if (is.na(NA_character_)) 
[09:31:05.582]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.582]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.582]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.582]                     .init = FALSE)
[09:31:05.582]                 }
[09:31:05.582]             }
[09:31:05.582]         }
[09:31:05.582]     })
[09:31:05.582]     if (TRUE) {
[09:31:05.582]         base::sink(type = "output", split = FALSE)
[09:31:05.582]         if (TRUE) {
[09:31:05.582]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.582]         }
[09:31:05.582]         else {
[09:31:05.582]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.582]         }
[09:31:05.582]         base::close(...future.stdout)
[09:31:05.582]         ...future.stdout <- NULL
[09:31:05.582]     }
[09:31:05.582]     ...future.result$conditions <- ...future.conditions
[09:31:05.582]     ...future.result$finished <- base::Sys.time()
[09:31:05.582]     ...future.result
[09:31:05.582] }
[09:31:05.584] plan(): Setting new future strategy stack:
[09:31:05.584] List of future strategies:
[09:31:05.584] 1. sequential:
[09:31:05.584]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.584]    - tweaked: FALSE
[09:31:05.584]    - call: NULL
[09:31:05.584] plan(): nbrOfWorkers() = 1
[09:31:05.585] plan(): Setting new future strategy stack:
[09:31:05.585] List of future strategies:
[09:31:05.585] 1. sequential:
[09:31:05.585]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.585]    - tweaked: FALSE
[09:31:05.585]    - call: plan(strategy)
[09:31:05.585] plan(): nbrOfWorkers() = 1
[09:31:05.585] SequentialFuture started (and completed)
[09:31:05.586] - Launch lazy future ... done
[09:31:05.586] run() for ‘SequentialFuture’ ... done
u$a = 2
v$a = 4
[09:31:05.586] getGlobalsAndPackages() ...
[09:31:05.586] Searching for globals...
[09:31:05.587] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:05.587] Searching for globals ... DONE
[09:31:05.587] Resolving globals: FALSE
[09:31:05.588] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:05.588] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:05.588] - globals: [1] ‘a’
[09:31:05.588] 
[09:31:05.588] getGlobalsAndPackages() ... DONE
[09:31:05.589] run() for ‘Future’ ...
[09:31:05.589] - state: ‘created’
[09:31:05.589] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:05.589] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:05.589] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:05.589]   - Field: ‘label’
[09:31:05.589]   - Field: ‘local’
[09:31:05.589]   - Field: ‘owner’
[09:31:05.589]   - Field: ‘envir’
[09:31:05.590]   - Field: ‘packages’
[09:31:05.590]   - Field: ‘gc’
[09:31:05.590]   - Field: ‘conditions’
[09:31:05.590]   - Field: ‘expr’
[09:31:05.590]   - Field: ‘uuid’
[09:31:05.590]   - Field: ‘seed’
[09:31:05.590]   - Field: ‘version’
[09:31:05.590]   - Field: ‘result’
[09:31:05.590]   - Field: ‘asynchronous’
[09:31:05.590]   - Field: ‘calls’
[09:31:05.590]   - Field: ‘globals’
[09:31:05.590]   - Field: ‘stdout’
[09:31:05.591]   - Field: ‘earlySignal’
[09:31:05.591]   - Field: ‘lazy’
[09:31:05.591]   - Field: ‘state’
[09:31:05.591] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:05.591] - Launch lazy future ...
[09:31:05.591] Packages needed by the future expression (n = 0): <none>
[09:31:05.591] Packages needed by future strategies (n = 0): <none>
[09:31:05.591] {
[09:31:05.591]     {
[09:31:05.591]         {
[09:31:05.591]             ...future.startTime <- base::Sys.time()
[09:31:05.591]             {
[09:31:05.591]                 {
[09:31:05.591]                   {
[09:31:05.591]                     base::local({
[09:31:05.591]                       has_future <- base::requireNamespace("future", 
[09:31:05.591]                         quietly = TRUE)
[09:31:05.591]                       if (has_future) {
[09:31:05.591]                         ns <- base::getNamespace("future")
[09:31:05.591]                         version <- ns[[".package"]][["version"]]
[09:31:05.591]                         if (is.null(version)) 
[09:31:05.591]                           version <- utils::packageVersion("future")
[09:31:05.591]                       }
[09:31:05.591]                       else {
[09:31:05.591]                         version <- NULL
[09:31:05.591]                       }
[09:31:05.591]                       if (!has_future || version < "1.8.0") {
[09:31:05.591]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.591]                           "", base::R.version$version.string), 
[09:31:05.591]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:05.591]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.591]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.591]                             "release", "version")], collapse = " "), 
[09:31:05.591]                           hostname = base::Sys.info()[["nodename"]])
[09:31:05.591]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.591]                           info)
[09:31:05.591]                         info <- base::paste(info, collapse = "; ")
[09:31:05.591]                         if (!has_future) {
[09:31:05.591]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.591]                             info)
[09:31:05.591]                         }
[09:31:05.591]                         else {
[09:31:05.591]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.591]                             info, version)
[09:31:05.591]                         }
[09:31:05.591]                         base::stop(msg)
[09:31:05.591]                       }
[09:31:05.591]                     })
[09:31:05.591]                   }
[09:31:05.591]                   ...future.strategy.old <- future::plan("list")
[09:31:05.591]                   options(future.plan = NULL)
[09:31:05.591]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.591]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.591]                 }
[09:31:05.591]                 ...future.workdir <- getwd()
[09:31:05.591]             }
[09:31:05.591]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.591]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.591]         }
[09:31:05.591]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.591]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.591]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.591]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.591]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.591]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.591]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.591]             base::names(...future.oldOptions))
[09:31:05.591]     }
[09:31:05.591]     if (FALSE) {
[09:31:05.591]     }
[09:31:05.591]     else {
[09:31:05.591]         if (TRUE) {
[09:31:05.591]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.591]                 open = "w")
[09:31:05.591]         }
[09:31:05.591]         else {
[09:31:05.591]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.591]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.591]         }
[09:31:05.591]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.591]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.591]             base::sink(type = "output", split = FALSE)
[09:31:05.591]             base::close(...future.stdout)
[09:31:05.591]         }, add = TRUE)
[09:31:05.591]     }
[09:31:05.591]     ...future.frame <- base::sys.nframe()
[09:31:05.591]     ...future.conditions <- base::list()
[09:31:05.591]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.591]     if (FALSE) {
[09:31:05.591]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.591]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.591]     }
[09:31:05.591]     ...future.result <- base::tryCatch({
[09:31:05.591]         base::withCallingHandlers({
[09:31:05.591]             ...future.value <- base::withVisible(base::local({
[09:31:05.591]                 2 * a
[09:31:05.591]             }))
[09:31:05.591]             future::FutureResult(value = ...future.value$value, 
[09:31:05.591]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.591]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.591]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.591]                     ...future.globalenv.names))
[09:31:05.591]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.591]         }, condition = base::local({
[09:31:05.591]             c <- base::c
[09:31:05.591]             inherits <- base::inherits
[09:31:05.591]             invokeRestart <- base::invokeRestart
[09:31:05.591]             length <- base::length
[09:31:05.591]             list <- base::list
[09:31:05.591]             seq.int <- base::seq.int
[09:31:05.591]             signalCondition <- base::signalCondition
[09:31:05.591]             sys.calls <- base::sys.calls
[09:31:05.591]             `[[` <- base::`[[`
[09:31:05.591]             `+` <- base::`+`
[09:31:05.591]             `<<-` <- base::`<<-`
[09:31:05.591]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.591]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.591]                   3L)]
[09:31:05.591]             }
[09:31:05.591]             function(cond) {
[09:31:05.591]                 is_error <- inherits(cond, "error")
[09:31:05.591]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.591]                   NULL)
[09:31:05.591]                 if (is_error) {
[09:31:05.591]                   sessionInformation <- function() {
[09:31:05.591]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.591]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.591]                       search = base::search(), system = base::Sys.info())
[09:31:05.591]                   }
[09:31:05.591]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.591]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.591]                     cond$call), session = sessionInformation(), 
[09:31:05.591]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.591]                   signalCondition(cond)
[09:31:05.591]                 }
[09:31:05.591]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.591]                 "immediateCondition"))) {
[09:31:05.591]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.591]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.591]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.591]                   if (TRUE && !signal) {
[09:31:05.591]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.591]                     {
[09:31:05.591]                       inherits <- base::inherits
[09:31:05.591]                       invokeRestart <- base::invokeRestart
[09:31:05.591]                       is.null <- base::is.null
[09:31:05.591]                       muffled <- FALSE
[09:31:05.591]                       if (inherits(cond, "message")) {
[09:31:05.591]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.591]                         if (muffled) 
[09:31:05.591]                           invokeRestart("muffleMessage")
[09:31:05.591]                       }
[09:31:05.591]                       else if (inherits(cond, "warning")) {
[09:31:05.591]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.591]                         if (muffled) 
[09:31:05.591]                           invokeRestart("muffleWarning")
[09:31:05.591]                       }
[09:31:05.591]                       else if (inherits(cond, "condition")) {
[09:31:05.591]                         if (!is.null(pattern)) {
[09:31:05.591]                           computeRestarts <- base::computeRestarts
[09:31:05.591]                           grepl <- base::grepl
[09:31:05.591]                           restarts <- computeRestarts(cond)
[09:31:05.591]                           for (restart in restarts) {
[09:31:05.591]                             name <- restart$name
[09:31:05.591]                             if (is.null(name)) 
[09:31:05.591]                               next
[09:31:05.591]                             if (!grepl(pattern, name)) 
[09:31:05.591]                               next
[09:31:05.591]                             invokeRestart(restart)
[09:31:05.591]                             muffled <- TRUE
[09:31:05.591]                             break
[09:31:05.591]                           }
[09:31:05.591]                         }
[09:31:05.591]                       }
[09:31:05.591]                       invisible(muffled)
[09:31:05.591]                     }
[09:31:05.591]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.591]                   }
[09:31:05.591]                 }
[09:31:05.591]                 else {
[09:31:05.591]                   if (TRUE) {
[09:31:05.591]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.591]                     {
[09:31:05.591]                       inherits <- base::inherits
[09:31:05.591]                       invokeRestart <- base::invokeRestart
[09:31:05.591]                       is.null <- base::is.null
[09:31:05.591]                       muffled <- FALSE
[09:31:05.591]                       if (inherits(cond, "message")) {
[09:31:05.591]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.591]                         if (muffled) 
[09:31:05.591]                           invokeRestart("muffleMessage")
[09:31:05.591]                       }
[09:31:05.591]                       else if (inherits(cond, "warning")) {
[09:31:05.591]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.591]                         if (muffled) 
[09:31:05.591]                           invokeRestart("muffleWarning")
[09:31:05.591]                       }
[09:31:05.591]                       else if (inherits(cond, "condition")) {
[09:31:05.591]                         if (!is.null(pattern)) {
[09:31:05.591]                           computeRestarts <- base::computeRestarts
[09:31:05.591]                           grepl <- base::grepl
[09:31:05.591]                           restarts <- computeRestarts(cond)
[09:31:05.591]                           for (restart in restarts) {
[09:31:05.591]                             name <- restart$name
[09:31:05.591]                             if (is.null(name)) 
[09:31:05.591]                               next
[09:31:05.591]                             if (!grepl(pattern, name)) 
[09:31:05.591]                               next
[09:31:05.591]                             invokeRestart(restart)
[09:31:05.591]                             muffled <- TRUE
[09:31:05.591]                             break
[09:31:05.591]                           }
[09:31:05.591]                         }
[09:31:05.591]                       }
[09:31:05.591]                       invisible(muffled)
[09:31:05.591]                     }
[09:31:05.591]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.591]                   }
[09:31:05.591]                 }
[09:31:05.591]             }
[09:31:05.591]         }))
[09:31:05.591]     }, error = function(ex) {
[09:31:05.591]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.591]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.591]                 ...future.rng), started = ...future.startTime, 
[09:31:05.591]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.591]             version = "1.8"), class = "FutureResult")
[09:31:05.591]     }, finally = {
[09:31:05.591]         if (!identical(...future.workdir, getwd())) 
[09:31:05.591]             setwd(...future.workdir)
[09:31:05.591]         {
[09:31:05.591]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.591]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.591]             }
[09:31:05.591]             base::options(...future.oldOptions)
[09:31:05.591]             if (.Platform$OS.type == "windows") {
[09:31:05.591]                 old_names <- names(...future.oldEnvVars)
[09:31:05.591]                 envs <- base::Sys.getenv()
[09:31:05.591]                 names <- names(envs)
[09:31:05.591]                 common <- intersect(names, old_names)
[09:31:05.591]                 added <- setdiff(names, old_names)
[09:31:05.591]                 removed <- setdiff(old_names, names)
[09:31:05.591]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.591]                   envs[common]]
[09:31:05.591]                 NAMES <- toupper(changed)
[09:31:05.591]                 args <- list()
[09:31:05.591]                 for (kk in seq_along(NAMES)) {
[09:31:05.591]                   name <- changed[[kk]]
[09:31:05.591]                   NAME <- NAMES[[kk]]
[09:31:05.591]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.591]                     next
[09:31:05.591]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.591]                 }
[09:31:05.591]                 NAMES <- toupper(added)
[09:31:05.591]                 for (kk in seq_along(NAMES)) {
[09:31:05.591]                   name <- added[[kk]]
[09:31:05.591]                   NAME <- NAMES[[kk]]
[09:31:05.591]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.591]                     next
[09:31:05.591]                   args[[name]] <- ""
[09:31:05.591]                 }
[09:31:05.591]                 NAMES <- toupper(removed)
[09:31:05.591]                 for (kk in seq_along(NAMES)) {
[09:31:05.591]                   name <- removed[[kk]]
[09:31:05.591]                   NAME <- NAMES[[kk]]
[09:31:05.591]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.591]                     next
[09:31:05.591]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.591]                 }
[09:31:05.591]                 if (length(args) > 0) 
[09:31:05.591]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.591]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.591]             }
[09:31:05.591]             else {
[09:31:05.591]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.591]             }
[09:31:05.591]             {
[09:31:05.591]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.591]                   0L) {
[09:31:05.591]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.591]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.591]                   base::options(opts)
[09:31:05.591]                 }
[09:31:05.591]                 {
[09:31:05.591]                   {
[09:31:05.591]                     NULL
[09:31:05.591]                     RNGkind("Mersenne-Twister")
[09:31:05.591]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:05.591]                       inherits = FALSE)
[09:31:05.591]                   }
[09:31:05.591]                   options(future.plan = NULL)
[09:31:05.591]                   if (is.na(NA_character_)) 
[09:31:05.591]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.591]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.591]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.591]                     .init = FALSE)
[09:31:05.591]                 }
[09:31:05.591]             }
[09:31:05.591]         }
[09:31:05.591]     })
[09:31:05.591]     if (TRUE) {
[09:31:05.591]         base::sink(type = "output", split = FALSE)
[09:31:05.591]         if (TRUE) {
[09:31:05.591]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.591]         }
[09:31:05.591]         else {
[09:31:05.591]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.591]         }
[09:31:05.591]         base::close(...future.stdout)
[09:31:05.591]         ...future.stdout <- NULL
[09:31:05.591]     }
[09:31:05.591]     ...future.result$conditions <- ...future.conditions
[09:31:05.591]     ...future.result$finished <- base::Sys.time()
[09:31:05.591]     ...future.result
[09:31:05.591] }
[09:31:05.593] assign_globals() ...
[09:31:05.593] List of 1
[09:31:05.593]  $ a: num 1
[09:31:05.593]  - attr(*, "where")=List of 1
[09:31:05.593]   ..$ a:<environment: R_EmptyEnv> 
[09:31:05.593]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:05.593]  - attr(*, "resolved")= logi FALSE
[09:31:05.593]  - attr(*, "total_size")= num 56
[09:31:05.593]  - attr(*, "already-done")= logi TRUE
[09:31:05.597] - copied ‘a’ to environment
[09:31:05.598] assign_globals() ... done
[09:31:05.598] plan(): Setting new future strategy stack:
[09:31:05.598] List of future strategies:
[09:31:05.598] 1. sequential:
[09:31:05.598]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.598]    - tweaked: FALSE
[09:31:05.598]    - call: NULL
[09:31:05.598] plan(): nbrOfWorkers() = 1
[09:31:05.599] plan(): Setting new future strategy stack:
[09:31:05.599] List of future strategies:
[09:31:05.599] 1. sequential:
[09:31:05.599]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.599]    - tweaked: FALSE
[09:31:05.599]    - call: plan(strategy)
[09:31:05.599] plan(): nbrOfWorkers() = 1
[09:31:05.600] SequentialFuture started (and completed)
[09:31:05.600] - Launch lazy future ... done
[09:31:05.600] run() for ‘SequentialFuture’ ... done
[09:31:05.600] getGlobalsAndPackages() ...
[09:31:05.600] Searching for globals...
[09:31:05.602] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:05.602] Searching for globals ... DONE
[09:31:05.602] Resolving globals: FALSE
[09:31:05.602] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:05.603] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:05.603] - globals: [1] ‘a’
[09:31:05.603] 
[09:31:05.603] getGlobalsAndPackages() ... DONE
[09:31:05.603] run() for ‘Future’ ...
[09:31:05.603] - state: ‘created’
[09:31:05.603] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:05.604] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:05.604] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:05.604]   - Field: ‘label’
[09:31:05.604]   - Field: ‘local’
[09:31:05.604]   - Field: ‘owner’
[09:31:05.604]   - Field: ‘envir’
[09:31:05.604]   - Field: ‘packages’
[09:31:05.604]   - Field: ‘gc’
[09:31:05.604]   - Field: ‘conditions’
[09:31:05.605]   - Field: ‘expr’
[09:31:05.605]   - Field: ‘uuid’
[09:31:05.605]   - Field: ‘seed’
[09:31:05.605]   - Field: ‘version’
[09:31:05.605]   - Field: ‘result’
[09:31:05.605]   - Field: ‘asynchronous’
[09:31:05.605]   - Field: ‘calls’
[09:31:05.605]   - Field: ‘globals’
[09:31:05.605]   - Field: ‘stdout’
[09:31:05.605]   - Field: ‘earlySignal’
[09:31:05.605]   - Field: ‘lazy’
[09:31:05.605]   - Field: ‘state’
[09:31:05.606] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:05.606] - Launch lazy future ...
[09:31:05.606] Packages needed by the future expression (n = 0): <none>
[09:31:05.606] Packages needed by future strategies (n = 0): <none>
[09:31:05.606] {
[09:31:05.606]     {
[09:31:05.606]         {
[09:31:05.606]             ...future.startTime <- base::Sys.time()
[09:31:05.606]             {
[09:31:05.606]                 {
[09:31:05.606]                   {
[09:31:05.606]                     base::local({
[09:31:05.606]                       has_future <- base::requireNamespace("future", 
[09:31:05.606]                         quietly = TRUE)
[09:31:05.606]                       if (has_future) {
[09:31:05.606]                         ns <- base::getNamespace("future")
[09:31:05.606]                         version <- ns[[".package"]][["version"]]
[09:31:05.606]                         if (is.null(version)) 
[09:31:05.606]                           version <- utils::packageVersion("future")
[09:31:05.606]                       }
[09:31:05.606]                       else {
[09:31:05.606]                         version <- NULL
[09:31:05.606]                       }
[09:31:05.606]                       if (!has_future || version < "1.8.0") {
[09:31:05.606]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.606]                           "", base::R.version$version.string), 
[09:31:05.606]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:05.606]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.606]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.606]                             "release", "version")], collapse = " "), 
[09:31:05.606]                           hostname = base::Sys.info()[["nodename"]])
[09:31:05.606]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.606]                           info)
[09:31:05.606]                         info <- base::paste(info, collapse = "; ")
[09:31:05.606]                         if (!has_future) {
[09:31:05.606]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.606]                             info)
[09:31:05.606]                         }
[09:31:05.606]                         else {
[09:31:05.606]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.606]                             info, version)
[09:31:05.606]                         }
[09:31:05.606]                         base::stop(msg)
[09:31:05.606]                       }
[09:31:05.606]                     })
[09:31:05.606]                   }
[09:31:05.606]                   ...future.strategy.old <- future::plan("list")
[09:31:05.606]                   options(future.plan = NULL)
[09:31:05.606]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.606]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.606]                 }
[09:31:05.606]                 ...future.workdir <- getwd()
[09:31:05.606]             }
[09:31:05.606]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.606]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.606]         }
[09:31:05.606]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.606]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.606]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.606]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.606]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.606]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.606]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.606]             base::names(...future.oldOptions))
[09:31:05.606]     }
[09:31:05.606]     if (FALSE) {
[09:31:05.606]     }
[09:31:05.606]     else {
[09:31:05.606]         if (TRUE) {
[09:31:05.606]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.606]                 open = "w")
[09:31:05.606]         }
[09:31:05.606]         else {
[09:31:05.606]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.606]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.606]         }
[09:31:05.606]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.606]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.606]             base::sink(type = "output", split = FALSE)
[09:31:05.606]             base::close(...future.stdout)
[09:31:05.606]         }, add = TRUE)
[09:31:05.606]     }
[09:31:05.606]     ...future.frame <- base::sys.nframe()
[09:31:05.606]     ...future.conditions <- base::list()
[09:31:05.606]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.606]     if (FALSE) {
[09:31:05.606]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.606]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.606]     }
[09:31:05.606]     ...future.result <- base::tryCatch({
[09:31:05.606]         base::withCallingHandlers({
[09:31:05.606]             ...future.value <- base::withVisible(base::local({
[09:31:05.606]                 2 * a
[09:31:05.606]             }))
[09:31:05.606]             future::FutureResult(value = ...future.value$value, 
[09:31:05.606]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.606]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.606]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.606]                     ...future.globalenv.names))
[09:31:05.606]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.606]         }, condition = base::local({
[09:31:05.606]             c <- base::c
[09:31:05.606]             inherits <- base::inherits
[09:31:05.606]             invokeRestart <- base::invokeRestart
[09:31:05.606]             length <- base::length
[09:31:05.606]             list <- base::list
[09:31:05.606]             seq.int <- base::seq.int
[09:31:05.606]             signalCondition <- base::signalCondition
[09:31:05.606]             sys.calls <- base::sys.calls
[09:31:05.606]             `[[` <- base::`[[`
[09:31:05.606]             `+` <- base::`+`
[09:31:05.606]             `<<-` <- base::`<<-`
[09:31:05.606]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.606]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.606]                   3L)]
[09:31:05.606]             }
[09:31:05.606]             function(cond) {
[09:31:05.606]                 is_error <- inherits(cond, "error")
[09:31:05.606]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.606]                   NULL)
[09:31:05.606]                 if (is_error) {
[09:31:05.606]                   sessionInformation <- function() {
[09:31:05.606]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.606]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.606]                       search = base::search(), system = base::Sys.info())
[09:31:05.606]                   }
[09:31:05.606]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.606]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.606]                     cond$call), session = sessionInformation(), 
[09:31:05.606]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.606]                   signalCondition(cond)
[09:31:05.606]                 }
[09:31:05.606]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.606]                 "immediateCondition"))) {
[09:31:05.606]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.606]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.606]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.606]                   if (TRUE && !signal) {
[09:31:05.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.606]                     {
[09:31:05.606]                       inherits <- base::inherits
[09:31:05.606]                       invokeRestart <- base::invokeRestart
[09:31:05.606]                       is.null <- base::is.null
[09:31:05.606]                       muffled <- FALSE
[09:31:05.606]                       if (inherits(cond, "message")) {
[09:31:05.606]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.606]                         if (muffled) 
[09:31:05.606]                           invokeRestart("muffleMessage")
[09:31:05.606]                       }
[09:31:05.606]                       else if (inherits(cond, "warning")) {
[09:31:05.606]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.606]                         if (muffled) 
[09:31:05.606]                           invokeRestart("muffleWarning")
[09:31:05.606]                       }
[09:31:05.606]                       else if (inherits(cond, "condition")) {
[09:31:05.606]                         if (!is.null(pattern)) {
[09:31:05.606]                           computeRestarts <- base::computeRestarts
[09:31:05.606]                           grepl <- base::grepl
[09:31:05.606]                           restarts <- computeRestarts(cond)
[09:31:05.606]                           for (restart in restarts) {
[09:31:05.606]                             name <- restart$name
[09:31:05.606]                             if (is.null(name)) 
[09:31:05.606]                               next
[09:31:05.606]                             if (!grepl(pattern, name)) 
[09:31:05.606]                               next
[09:31:05.606]                             invokeRestart(restart)
[09:31:05.606]                             muffled <- TRUE
[09:31:05.606]                             break
[09:31:05.606]                           }
[09:31:05.606]                         }
[09:31:05.606]                       }
[09:31:05.606]                       invisible(muffled)
[09:31:05.606]                     }
[09:31:05.606]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.606]                   }
[09:31:05.606]                 }
[09:31:05.606]                 else {
[09:31:05.606]                   if (TRUE) {
[09:31:05.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.606]                     {
[09:31:05.606]                       inherits <- base::inherits
[09:31:05.606]                       invokeRestart <- base::invokeRestart
[09:31:05.606]                       is.null <- base::is.null
[09:31:05.606]                       muffled <- FALSE
[09:31:05.606]                       if (inherits(cond, "message")) {
[09:31:05.606]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.606]                         if (muffled) 
[09:31:05.606]                           invokeRestart("muffleMessage")
[09:31:05.606]                       }
[09:31:05.606]                       else if (inherits(cond, "warning")) {
[09:31:05.606]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.606]                         if (muffled) 
[09:31:05.606]                           invokeRestart("muffleWarning")
[09:31:05.606]                       }
[09:31:05.606]                       else if (inherits(cond, "condition")) {
[09:31:05.606]                         if (!is.null(pattern)) {
[09:31:05.606]                           computeRestarts <- base::computeRestarts
[09:31:05.606]                           grepl <- base::grepl
[09:31:05.606]                           restarts <- computeRestarts(cond)
[09:31:05.606]                           for (restart in restarts) {
[09:31:05.606]                             name <- restart$name
[09:31:05.606]                             if (is.null(name)) 
[09:31:05.606]                               next
[09:31:05.606]                             if (!grepl(pattern, name)) 
[09:31:05.606]                               next
[09:31:05.606]                             invokeRestart(restart)
[09:31:05.606]                             muffled <- TRUE
[09:31:05.606]                             break
[09:31:05.606]                           }
[09:31:05.606]                         }
[09:31:05.606]                       }
[09:31:05.606]                       invisible(muffled)
[09:31:05.606]                     }
[09:31:05.606]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.606]                   }
[09:31:05.606]                 }
[09:31:05.606]             }
[09:31:05.606]         }))
[09:31:05.606]     }, error = function(ex) {
[09:31:05.606]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.606]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.606]                 ...future.rng), started = ...future.startTime, 
[09:31:05.606]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.606]             version = "1.8"), class = "FutureResult")
[09:31:05.606]     }, finally = {
[09:31:05.606]         if (!identical(...future.workdir, getwd())) 
[09:31:05.606]             setwd(...future.workdir)
[09:31:05.606]         {
[09:31:05.606]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.606]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.606]             }
[09:31:05.606]             base::options(...future.oldOptions)
[09:31:05.606]             if (.Platform$OS.type == "windows") {
[09:31:05.606]                 old_names <- names(...future.oldEnvVars)
[09:31:05.606]                 envs <- base::Sys.getenv()
[09:31:05.606]                 names <- names(envs)
[09:31:05.606]                 common <- intersect(names, old_names)
[09:31:05.606]                 added <- setdiff(names, old_names)
[09:31:05.606]                 removed <- setdiff(old_names, names)
[09:31:05.606]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.606]                   envs[common]]
[09:31:05.606]                 NAMES <- toupper(changed)
[09:31:05.606]                 args <- list()
[09:31:05.606]                 for (kk in seq_along(NAMES)) {
[09:31:05.606]                   name <- changed[[kk]]
[09:31:05.606]                   NAME <- NAMES[[kk]]
[09:31:05.606]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.606]                     next
[09:31:05.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.606]                 }
[09:31:05.606]                 NAMES <- toupper(added)
[09:31:05.606]                 for (kk in seq_along(NAMES)) {
[09:31:05.606]                   name <- added[[kk]]
[09:31:05.606]                   NAME <- NAMES[[kk]]
[09:31:05.606]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.606]                     next
[09:31:05.606]                   args[[name]] <- ""
[09:31:05.606]                 }
[09:31:05.606]                 NAMES <- toupper(removed)
[09:31:05.606]                 for (kk in seq_along(NAMES)) {
[09:31:05.606]                   name <- removed[[kk]]
[09:31:05.606]                   NAME <- NAMES[[kk]]
[09:31:05.606]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.606]                     next
[09:31:05.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.606]                 }
[09:31:05.606]                 if (length(args) > 0) 
[09:31:05.606]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.606]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.606]             }
[09:31:05.606]             else {
[09:31:05.606]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.606]             }
[09:31:05.606]             {
[09:31:05.606]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.606]                   0L) {
[09:31:05.606]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.606]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.606]                   base::options(opts)
[09:31:05.606]                 }
[09:31:05.606]                 {
[09:31:05.606]                   {
[09:31:05.606]                     NULL
[09:31:05.606]                     RNGkind("Mersenne-Twister")
[09:31:05.606]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:05.606]                       inherits = FALSE)
[09:31:05.606]                   }
[09:31:05.606]                   options(future.plan = NULL)
[09:31:05.606]                   if (is.na(NA_character_)) 
[09:31:05.606]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.606]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.606]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.606]                     .init = FALSE)
[09:31:05.606]                 }
[09:31:05.606]             }
[09:31:05.606]         }
[09:31:05.606]     })
[09:31:05.606]     if (TRUE) {
[09:31:05.606]         base::sink(type = "output", split = FALSE)
[09:31:05.606]         if (TRUE) {
[09:31:05.606]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.606]         }
[09:31:05.606]         else {
[09:31:05.606]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.606]         }
[09:31:05.606]         base::close(...future.stdout)
[09:31:05.606]         ...future.stdout <- NULL
[09:31:05.606]     }
[09:31:05.606]     ...future.result$conditions <- ...future.conditions
[09:31:05.606]     ...future.result$finished <- base::Sys.time()
[09:31:05.606]     ...future.result
[09:31:05.606] }
[09:31:05.608] assign_globals() ...
[09:31:05.608] List of 1
[09:31:05.608]  $ a: num 1
[09:31:05.608]  - attr(*, "where")=List of 1
[09:31:05.608]   ..$ a:<environment: R_EmptyEnv> 
[09:31:05.608]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:05.608]  - attr(*, "resolved")= logi FALSE
[09:31:05.608]  - attr(*, "total_size")= num 56
[09:31:05.608]  - attr(*, "already-done")= logi TRUE
[09:31:05.610] - copied ‘a’ to environment
[09:31:05.610] assign_globals() ... done
[09:31:05.610] plan(): Setting new future strategy stack:
[09:31:05.610] List of future strategies:
[09:31:05.610] 1. sequential:
[09:31:05.610]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.610]    - tweaked: FALSE
[09:31:05.610]    - call: NULL
[09:31:05.611] plan(): nbrOfWorkers() = 1
[09:31:05.611] plan(): Setting new future strategy stack:
[09:31:05.612] List of future strategies:
[09:31:05.612] 1. sequential:
[09:31:05.612]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.612]    - tweaked: FALSE
[09:31:05.612]    - call: plan(strategy)
[09:31:05.612] plan(): nbrOfWorkers() = 1
[09:31:05.612] SequentialFuture started (and completed)
[09:31:05.612] - Launch lazy future ... done
[09:31:05.612] run() for ‘SequentialFuture’ ... done
[09:31:05.613] getGlobalsAndPackages() ...
[09:31:05.613] Searching for globals...
[09:31:05.613] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:05.614] Searching for globals ... DONE
[09:31:05.614] Resolving globals: FALSE
[09:31:05.614] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:05.614] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:05.614] - globals: [1] ‘a’
[09:31:05.614] 
[09:31:05.615] getGlobalsAndPackages() ... DONE
[09:31:05.615] run() for ‘Future’ ...
[09:31:05.615] - state: ‘created’
[09:31:05.615] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:05.615] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:05.615] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:05.615]   - Field: ‘label’
[09:31:05.615]   - Field: ‘local’
[09:31:05.615]   - Field: ‘owner’
[09:31:05.616]   - Field: ‘envir’
[09:31:05.616]   - Field: ‘packages’
[09:31:05.616]   - Field: ‘gc’
[09:31:05.616]   - Field: ‘conditions’
[09:31:05.616]   - Field: ‘expr’
[09:31:05.616]   - Field: ‘uuid’
[09:31:05.616]   - Field: ‘seed’
[09:31:05.616]   - Field: ‘version’
[09:31:05.616]   - Field: ‘result’
[09:31:05.616]   - Field: ‘asynchronous’
[09:31:05.616]   - Field: ‘calls’
[09:31:05.617]   - Field: ‘globals’
[09:31:05.617]   - Field: ‘stdout’
[09:31:05.617]   - Field: ‘earlySignal’
[09:31:05.617]   - Field: ‘lazy’
[09:31:05.617]   - Field: ‘state’
[09:31:05.617] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:05.617] - Launch lazy future ...
[09:31:05.617] Packages needed by the future expression (n = 0): <none>
[09:31:05.617] Packages needed by future strategies (n = 0): <none>
[09:31:05.618] {
[09:31:05.618]     {
[09:31:05.618]         {
[09:31:05.618]             ...future.startTime <- base::Sys.time()
[09:31:05.618]             {
[09:31:05.618]                 {
[09:31:05.618]                   {
[09:31:05.618]                     base::local({
[09:31:05.618]                       has_future <- base::requireNamespace("future", 
[09:31:05.618]                         quietly = TRUE)
[09:31:05.618]                       if (has_future) {
[09:31:05.618]                         ns <- base::getNamespace("future")
[09:31:05.618]                         version <- ns[[".package"]][["version"]]
[09:31:05.618]                         if (is.null(version)) 
[09:31:05.618]                           version <- utils::packageVersion("future")
[09:31:05.618]                       }
[09:31:05.618]                       else {
[09:31:05.618]                         version <- NULL
[09:31:05.618]                       }
[09:31:05.618]                       if (!has_future || version < "1.8.0") {
[09:31:05.618]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.618]                           "", base::R.version$version.string), 
[09:31:05.618]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:05.618]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.618]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.618]                             "release", "version")], collapse = " "), 
[09:31:05.618]                           hostname = base::Sys.info()[["nodename"]])
[09:31:05.618]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.618]                           info)
[09:31:05.618]                         info <- base::paste(info, collapse = "; ")
[09:31:05.618]                         if (!has_future) {
[09:31:05.618]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.618]                             info)
[09:31:05.618]                         }
[09:31:05.618]                         else {
[09:31:05.618]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.618]                             info, version)
[09:31:05.618]                         }
[09:31:05.618]                         base::stop(msg)
[09:31:05.618]                       }
[09:31:05.618]                     })
[09:31:05.618]                   }
[09:31:05.618]                   ...future.strategy.old <- future::plan("list")
[09:31:05.618]                   options(future.plan = NULL)
[09:31:05.618]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.618]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.618]                 }
[09:31:05.618]                 ...future.workdir <- getwd()
[09:31:05.618]             }
[09:31:05.618]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.618]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.618]         }
[09:31:05.618]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.618]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.618]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.618]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.618]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.618]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.618]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.618]             base::names(...future.oldOptions))
[09:31:05.618]     }
[09:31:05.618]     if (FALSE) {
[09:31:05.618]     }
[09:31:05.618]     else {
[09:31:05.618]         if (TRUE) {
[09:31:05.618]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.618]                 open = "w")
[09:31:05.618]         }
[09:31:05.618]         else {
[09:31:05.618]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.618]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.618]         }
[09:31:05.618]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.618]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.618]             base::sink(type = "output", split = FALSE)
[09:31:05.618]             base::close(...future.stdout)
[09:31:05.618]         }, add = TRUE)
[09:31:05.618]     }
[09:31:05.618]     ...future.frame <- base::sys.nframe()
[09:31:05.618]     ...future.conditions <- base::list()
[09:31:05.618]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.618]     if (FALSE) {
[09:31:05.618]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.618]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.618]     }
[09:31:05.618]     ...future.result <- base::tryCatch({
[09:31:05.618]         base::withCallingHandlers({
[09:31:05.618]             ...future.value <- base::withVisible(base::local({
[09:31:05.618]                 2 * a
[09:31:05.618]             }))
[09:31:05.618]             future::FutureResult(value = ...future.value$value, 
[09:31:05.618]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.618]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.618]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.618]                     ...future.globalenv.names))
[09:31:05.618]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.618]         }, condition = base::local({
[09:31:05.618]             c <- base::c
[09:31:05.618]             inherits <- base::inherits
[09:31:05.618]             invokeRestart <- base::invokeRestart
[09:31:05.618]             length <- base::length
[09:31:05.618]             list <- base::list
[09:31:05.618]             seq.int <- base::seq.int
[09:31:05.618]             signalCondition <- base::signalCondition
[09:31:05.618]             sys.calls <- base::sys.calls
[09:31:05.618]             `[[` <- base::`[[`
[09:31:05.618]             `+` <- base::`+`
[09:31:05.618]             `<<-` <- base::`<<-`
[09:31:05.618]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.618]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.618]                   3L)]
[09:31:05.618]             }
[09:31:05.618]             function(cond) {
[09:31:05.618]                 is_error <- inherits(cond, "error")
[09:31:05.618]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.618]                   NULL)
[09:31:05.618]                 if (is_error) {
[09:31:05.618]                   sessionInformation <- function() {
[09:31:05.618]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.618]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.618]                       search = base::search(), system = base::Sys.info())
[09:31:05.618]                   }
[09:31:05.618]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.618]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.618]                     cond$call), session = sessionInformation(), 
[09:31:05.618]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.618]                   signalCondition(cond)
[09:31:05.618]                 }
[09:31:05.618]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.618]                 "immediateCondition"))) {
[09:31:05.618]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.618]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.618]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.618]                   if (TRUE && !signal) {
[09:31:05.618]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.618]                     {
[09:31:05.618]                       inherits <- base::inherits
[09:31:05.618]                       invokeRestart <- base::invokeRestart
[09:31:05.618]                       is.null <- base::is.null
[09:31:05.618]                       muffled <- FALSE
[09:31:05.618]                       if (inherits(cond, "message")) {
[09:31:05.618]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.618]                         if (muffled) 
[09:31:05.618]                           invokeRestart("muffleMessage")
[09:31:05.618]                       }
[09:31:05.618]                       else if (inherits(cond, "warning")) {
[09:31:05.618]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.618]                         if (muffled) 
[09:31:05.618]                           invokeRestart("muffleWarning")
[09:31:05.618]                       }
[09:31:05.618]                       else if (inherits(cond, "condition")) {
[09:31:05.618]                         if (!is.null(pattern)) {
[09:31:05.618]                           computeRestarts <- base::computeRestarts
[09:31:05.618]                           grepl <- base::grepl
[09:31:05.618]                           restarts <- computeRestarts(cond)
[09:31:05.618]                           for (restart in restarts) {
[09:31:05.618]                             name <- restart$name
[09:31:05.618]                             if (is.null(name)) 
[09:31:05.618]                               next
[09:31:05.618]                             if (!grepl(pattern, name)) 
[09:31:05.618]                               next
[09:31:05.618]                             invokeRestart(restart)
[09:31:05.618]                             muffled <- TRUE
[09:31:05.618]                             break
[09:31:05.618]                           }
[09:31:05.618]                         }
[09:31:05.618]                       }
[09:31:05.618]                       invisible(muffled)
[09:31:05.618]                     }
[09:31:05.618]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.618]                   }
[09:31:05.618]                 }
[09:31:05.618]                 else {
[09:31:05.618]                   if (TRUE) {
[09:31:05.618]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.618]                     {
[09:31:05.618]                       inherits <- base::inherits
[09:31:05.618]                       invokeRestart <- base::invokeRestart
[09:31:05.618]                       is.null <- base::is.null
[09:31:05.618]                       muffled <- FALSE
[09:31:05.618]                       if (inherits(cond, "message")) {
[09:31:05.618]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.618]                         if (muffled) 
[09:31:05.618]                           invokeRestart("muffleMessage")
[09:31:05.618]                       }
[09:31:05.618]                       else if (inherits(cond, "warning")) {
[09:31:05.618]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.618]                         if (muffled) 
[09:31:05.618]                           invokeRestart("muffleWarning")
[09:31:05.618]                       }
[09:31:05.618]                       else if (inherits(cond, "condition")) {
[09:31:05.618]                         if (!is.null(pattern)) {
[09:31:05.618]                           computeRestarts <- base::computeRestarts
[09:31:05.618]                           grepl <- base::grepl
[09:31:05.618]                           restarts <- computeRestarts(cond)
[09:31:05.618]                           for (restart in restarts) {
[09:31:05.618]                             name <- restart$name
[09:31:05.618]                             if (is.null(name)) 
[09:31:05.618]                               next
[09:31:05.618]                             if (!grepl(pattern, name)) 
[09:31:05.618]                               next
[09:31:05.618]                             invokeRestart(restart)
[09:31:05.618]                             muffled <- TRUE
[09:31:05.618]                             break
[09:31:05.618]                           }
[09:31:05.618]                         }
[09:31:05.618]                       }
[09:31:05.618]                       invisible(muffled)
[09:31:05.618]                     }
[09:31:05.618]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.618]                   }
[09:31:05.618]                 }
[09:31:05.618]             }
[09:31:05.618]         }))
[09:31:05.618]     }, error = function(ex) {
[09:31:05.618]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.618]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.618]                 ...future.rng), started = ...future.startTime, 
[09:31:05.618]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.618]             version = "1.8"), class = "FutureResult")
[09:31:05.618]     }, finally = {
[09:31:05.618]         if (!identical(...future.workdir, getwd())) 
[09:31:05.618]             setwd(...future.workdir)
[09:31:05.618]         {
[09:31:05.618]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.618]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.618]             }
[09:31:05.618]             base::options(...future.oldOptions)
[09:31:05.618]             if (.Platform$OS.type == "windows") {
[09:31:05.618]                 old_names <- names(...future.oldEnvVars)
[09:31:05.618]                 envs <- base::Sys.getenv()
[09:31:05.618]                 names <- names(envs)
[09:31:05.618]                 common <- intersect(names, old_names)
[09:31:05.618]                 added <- setdiff(names, old_names)
[09:31:05.618]                 removed <- setdiff(old_names, names)
[09:31:05.618]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.618]                   envs[common]]
[09:31:05.618]                 NAMES <- toupper(changed)
[09:31:05.618]                 args <- list()
[09:31:05.618]                 for (kk in seq_along(NAMES)) {
[09:31:05.618]                   name <- changed[[kk]]
[09:31:05.618]                   NAME <- NAMES[[kk]]
[09:31:05.618]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.618]                     next
[09:31:05.618]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.618]                 }
[09:31:05.618]                 NAMES <- toupper(added)
[09:31:05.618]                 for (kk in seq_along(NAMES)) {
[09:31:05.618]                   name <- added[[kk]]
[09:31:05.618]                   NAME <- NAMES[[kk]]
[09:31:05.618]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.618]                     next
[09:31:05.618]                   args[[name]] <- ""
[09:31:05.618]                 }
[09:31:05.618]                 NAMES <- toupper(removed)
[09:31:05.618]                 for (kk in seq_along(NAMES)) {
[09:31:05.618]                   name <- removed[[kk]]
[09:31:05.618]                   NAME <- NAMES[[kk]]
[09:31:05.618]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.618]                     next
[09:31:05.618]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.618]                 }
[09:31:05.618]                 if (length(args) > 0) 
[09:31:05.618]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.618]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.618]             }
[09:31:05.618]             else {
[09:31:05.618]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.618]             }
[09:31:05.618]             {
[09:31:05.618]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.618]                   0L) {
[09:31:05.618]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.618]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.618]                   base::options(opts)
[09:31:05.618]                 }
[09:31:05.618]                 {
[09:31:05.618]                   {
[09:31:05.618]                     NULL
[09:31:05.618]                     RNGkind("Mersenne-Twister")
[09:31:05.618]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:05.618]                       inherits = FALSE)
[09:31:05.618]                   }
[09:31:05.618]                   options(future.plan = NULL)
[09:31:05.618]                   if (is.na(NA_character_)) 
[09:31:05.618]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.618]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.618]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.618]                     .init = FALSE)
[09:31:05.618]                 }
[09:31:05.618]             }
[09:31:05.618]         }
[09:31:05.618]     })
[09:31:05.618]     if (TRUE) {
[09:31:05.618]         base::sink(type = "output", split = FALSE)
[09:31:05.618]         if (TRUE) {
[09:31:05.618]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.618]         }
[09:31:05.618]         else {
[09:31:05.618]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.618]         }
[09:31:05.618]         base::close(...future.stdout)
[09:31:05.618]         ...future.stdout <- NULL
[09:31:05.618]     }
[09:31:05.618]     ...future.result$conditions <- ...future.conditions
[09:31:05.618]     ...future.result$finished <- base::Sys.time()
[09:31:05.618]     ...future.result
[09:31:05.618] }
[09:31:05.619] assign_globals() ...
[09:31:05.619] List of 1
[09:31:05.619]  $ a: num 1
[09:31:05.619]  - attr(*, "where")=List of 1
[09:31:05.619]   ..$ a:<environment: R_EmptyEnv> 
[09:31:05.619]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:05.619]  - attr(*, "resolved")= logi FALSE
[09:31:05.619]  - attr(*, "total_size")= num 56
[09:31:05.619]  - attr(*, "already-done")= logi TRUE
[09:31:05.621] - copied ‘a’ to environment
[09:31:05.622] assign_globals() ... done
[09:31:05.622] plan(): Setting new future strategy stack:
[09:31:05.622] List of future strategies:
[09:31:05.622] 1. sequential:
[09:31:05.622]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.622]    - tweaked: FALSE
[09:31:05.622]    - call: NULL
[09:31:05.622] plan(): nbrOfWorkers() = 1
[09:31:05.623] plan(): Setting new future strategy stack:
[09:31:05.623] List of future strategies:
[09:31:05.623] 1. sequential:
[09:31:05.623]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.623]    - tweaked: FALSE
[09:31:05.623]    - call: plan(strategy)
[09:31:05.623] plan(): nbrOfWorkers() = 1
[09:31:05.623] SequentialFuture started (and completed)
[09:31:05.624] - Launch lazy future ... done
[09:31:05.624] run() for ‘SequentialFuture’ ... done
[09:31:05.624] getGlobalsAndPackages() ...
[09:31:05.624] Searching for globals...
[09:31:05.625] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:05.625] Searching for globals ... DONE
[09:31:05.625] Resolving globals: FALSE
[09:31:05.625] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:05.626] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:05.626] - globals: [1] ‘a’
[09:31:05.626] 
[09:31:05.626] getGlobalsAndPackages() ... DONE
[09:31:05.626] run() for ‘Future’ ...
[09:31:05.626] - state: ‘created’
[09:31:05.626] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:05.627] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:05.627] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:05.627]   - Field: ‘label’
[09:31:05.627]   - Field: ‘local’
[09:31:05.627]   - Field: ‘owner’
[09:31:05.627]   - Field: ‘envir’
[09:31:05.627]   - Field: ‘packages’
[09:31:05.627]   - Field: ‘gc’
[09:31:05.627]   - Field: ‘conditions’
[09:31:05.627]   - Field: ‘expr’
[09:31:05.627]   - Field: ‘uuid’
[09:31:05.628]   - Field: ‘seed’
[09:31:05.628]   - Field: ‘version’
[09:31:05.628]   - Field: ‘result’
[09:31:05.628]   - Field: ‘asynchronous’
[09:31:05.628]   - Field: ‘calls’
[09:31:05.628]   - Field: ‘globals’
[09:31:05.628]   - Field: ‘stdout’
[09:31:05.628]   - Field: ‘earlySignal’
[09:31:05.628]   - Field: ‘lazy’
[09:31:05.628]   - Field: ‘state’
[09:31:05.628] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:05.628] - Launch lazy future ...
[09:31:05.629] Packages needed by the future expression (n = 0): <none>
[09:31:05.629] Packages needed by future strategies (n = 0): <none>
[09:31:05.630] {
[09:31:05.630]     {
[09:31:05.630]         {
[09:31:05.630]             ...future.startTime <- base::Sys.time()
[09:31:05.630]             {
[09:31:05.630]                 {
[09:31:05.630]                   {
[09:31:05.630]                     base::local({
[09:31:05.630]                       has_future <- base::requireNamespace("future", 
[09:31:05.630]                         quietly = TRUE)
[09:31:05.630]                       if (has_future) {
[09:31:05.630]                         ns <- base::getNamespace("future")
[09:31:05.630]                         version <- ns[[".package"]][["version"]]
[09:31:05.630]                         if (is.null(version)) 
[09:31:05.630]                           version <- utils::packageVersion("future")
[09:31:05.630]                       }
[09:31:05.630]                       else {
[09:31:05.630]                         version <- NULL
[09:31:05.630]                       }
[09:31:05.630]                       if (!has_future || version < "1.8.0") {
[09:31:05.630]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.630]                           "", base::R.version$version.string), 
[09:31:05.630]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:05.630]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.630]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.630]                             "release", "version")], collapse = " "), 
[09:31:05.630]                           hostname = base::Sys.info()[["nodename"]])
[09:31:05.630]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.630]                           info)
[09:31:05.630]                         info <- base::paste(info, collapse = "; ")
[09:31:05.630]                         if (!has_future) {
[09:31:05.630]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.630]                             info)
[09:31:05.630]                         }
[09:31:05.630]                         else {
[09:31:05.630]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.630]                             info, version)
[09:31:05.630]                         }
[09:31:05.630]                         base::stop(msg)
[09:31:05.630]                       }
[09:31:05.630]                     })
[09:31:05.630]                   }
[09:31:05.630]                   ...future.strategy.old <- future::plan("list")
[09:31:05.630]                   options(future.plan = NULL)
[09:31:05.630]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.630]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.630]                 }
[09:31:05.630]                 ...future.workdir <- getwd()
[09:31:05.630]             }
[09:31:05.630]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.630]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.630]         }
[09:31:05.630]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.630]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.630]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.630]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.630]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.630]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.630]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.630]             base::names(...future.oldOptions))
[09:31:05.630]     }
[09:31:05.630]     if (FALSE) {
[09:31:05.630]     }
[09:31:05.630]     else {
[09:31:05.630]         if (TRUE) {
[09:31:05.630]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.630]                 open = "w")
[09:31:05.630]         }
[09:31:05.630]         else {
[09:31:05.630]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.630]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.630]         }
[09:31:05.630]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.630]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.630]             base::sink(type = "output", split = FALSE)
[09:31:05.630]             base::close(...future.stdout)
[09:31:05.630]         }, add = TRUE)
[09:31:05.630]     }
[09:31:05.630]     ...future.frame <- base::sys.nframe()
[09:31:05.630]     ...future.conditions <- base::list()
[09:31:05.630]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.630]     if (FALSE) {
[09:31:05.630]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.630]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.630]     }
[09:31:05.630]     ...future.result <- base::tryCatch({
[09:31:05.630]         base::withCallingHandlers({
[09:31:05.630]             ...future.value <- base::withVisible(base::local({
[09:31:05.630]                 2 * a
[09:31:05.630]             }))
[09:31:05.630]             future::FutureResult(value = ...future.value$value, 
[09:31:05.630]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.630]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.630]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.630]                     ...future.globalenv.names))
[09:31:05.630]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.630]         }, condition = base::local({
[09:31:05.630]             c <- base::c
[09:31:05.630]             inherits <- base::inherits
[09:31:05.630]             invokeRestart <- base::invokeRestart
[09:31:05.630]             length <- base::length
[09:31:05.630]             list <- base::list
[09:31:05.630]             seq.int <- base::seq.int
[09:31:05.630]             signalCondition <- base::signalCondition
[09:31:05.630]             sys.calls <- base::sys.calls
[09:31:05.630]             `[[` <- base::`[[`
[09:31:05.630]             `+` <- base::`+`
[09:31:05.630]             `<<-` <- base::`<<-`
[09:31:05.630]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.630]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.630]                   3L)]
[09:31:05.630]             }
[09:31:05.630]             function(cond) {
[09:31:05.630]                 is_error <- inherits(cond, "error")
[09:31:05.630]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.630]                   NULL)
[09:31:05.630]                 if (is_error) {
[09:31:05.630]                   sessionInformation <- function() {
[09:31:05.630]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.630]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.630]                       search = base::search(), system = base::Sys.info())
[09:31:05.630]                   }
[09:31:05.630]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.630]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.630]                     cond$call), session = sessionInformation(), 
[09:31:05.630]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.630]                   signalCondition(cond)
[09:31:05.630]                 }
[09:31:05.630]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.630]                 "immediateCondition"))) {
[09:31:05.630]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.630]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.630]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.630]                   if (TRUE && !signal) {
[09:31:05.630]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.630]                     {
[09:31:05.630]                       inherits <- base::inherits
[09:31:05.630]                       invokeRestart <- base::invokeRestart
[09:31:05.630]                       is.null <- base::is.null
[09:31:05.630]                       muffled <- FALSE
[09:31:05.630]                       if (inherits(cond, "message")) {
[09:31:05.630]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.630]                         if (muffled) 
[09:31:05.630]                           invokeRestart("muffleMessage")
[09:31:05.630]                       }
[09:31:05.630]                       else if (inherits(cond, "warning")) {
[09:31:05.630]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.630]                         if (muffled) 
[09:31:05.630]                           invokeRestart("muffleWarning")
[09:31:05.630]                       }
[09:31:05.630]                       else if (inherits(cond, "condition")) {
[09:31:05.630]                         if (!is.null(pattern)) {
[09:31:05.630]                           computeRestarts <- base::computeRestarts
[09:31:05.630]                           grepl <- base::grepl
[09:31:05.630]                           restarts <- computeRestarts(cond)
[09:31:05.630]                           for (restart in restarts) {
[09:31:05.630]                             name <- restart$name
[09:31:05.630]                             if (is.null(name)) 
[09:31:05.630]                               next
[09:31:05.630]                             if (!grepl(pattern, name)) 
[09:31:05.630]                               next
[09:31:05.630]                             invokeRestart(restart)
[09:31:05.630]                             muffled <- TRUE
[09:31:05.630]                             break
[09:31:05.630]                           }
[09:31:05.630]                         }
[09:31:05.630]                       }
[09:31:05.630]                       invisible(muffled)
[09:31:05.630]                     }
[09:31:05.630]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.630]                   }
[09:31:05.630]                 }
[09:31:05.630]                 else {
[09:31:05.630]                   if (TRUE) {
[09:31:05.630]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.630]                     {
[09:31:05.630]                       inherits <- base::inherits
[09:31:05.630]                       invokeRestart <- base::invokeRestart
[09:31:05.630]                       is.null <- base::is.null
[09:31:05.630]                       muffled <- FALSE
[09:31:05.630]                       if (inherits(cond, "message")) {
[09:31:05.630]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.630]                         if (muffled) 
[09:31:05.630]                           invokeRestart("muffleMessage")
[09:31:05.630]                       }
[09:31:05.630]                       else if (inherits(cond, "warning")) {
[09:31:05.630]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.630]                         if (muffled) 
[09:31:05.630]                           invokeRestart("muffleWarning")
[09:31:05.630]                       }
[09:31:05.630]                       else if (inherits(cond, "condition")) {
[09:31:05.630]                         if (!is.null(pattern)) {
[09:31:05.630]                           computeRestarts <- base::computeRestarts
[09:31:05.630]                           grepl <- base::grepl
[09:31:05.630]                           restarts <- computeRestarts(cond)
[09:31:05.630]                           for (restart in restarts) {
[09:31:05.630]                             name <- restart$name
[09:31:05.630]                             if (is.null(name)) 
[09:31:05.630]                               next
[09:31:05.630]                             if (!grepl(pattern, name)) 
[09:31:05.630]                               next
[09:31:05.630]                             invokeRestart(restart)
[09:31:05.630]                             muffled <- TRUE
[09:31:05.630]                             break
[09:31:05.630]                           }
[09:31:05.630]                         }
[09:31:05.630]                       }
[09:31:05.630]                       invisible(muffled)
[09:31:05.630]                     }
[09:31:05.630]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.630]                   }
[09:31:05.630]                 }
[09:31:05.630]             }
[09:31:05.630]         }))
[09:31:05.630]     }, error = function(ex) {
[09:31:05.630]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.630]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.630]                 ...future.rng), started = ...future.startTime, 
[09:31:05.630]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.630]             version = "1.8"), class = "FutureResult")
[09:31:05.630]     }, finally = {
[09:31:05.630]         if (!identical(...future.workdir, getwd())) 
[09:31:05.630]             setwd(...future.workdir)
[09:31:05.630]         {
[09:31:05.630]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.630]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.630]             }
[09:31:05.630]             base::options(...future.oldOptions)
[09:31:05.630]             if (.Platform$OS.type == "windows") {
[09:31:05.630]                 old_names <- names(...future.oldEnvVars)
[09:31:05.630]                 envs <- base::Sys.getenv()
[09:31:05.630]                 names <- names(envs)
[09:31:05.630]                 common <- intersect(names, old_names)
[09:31:05.630]                 added <- setdiff(names, old_names)
[09:31:05.630]                 removed <- setdiff(old_names, names)
[09:31:05.630]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.630]                   envs[common]]
[09:31:05.630]                 NAMES <- toupper(changed)
[09:31:05.630]                 args <- list()
[09:31:05.630]                 for (kk in seq_along(NAMES)) {
[09:31:05.630]                   name <- changed[[kk]]
[09:31:05.630]                   NAME <- NAMES[[kk]]
[09:31:05.630]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.630]                     next
[09:31:05.630]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.630]                 }
[09:31:05.630]                 NAMES <- toupper(added)
[09:31:05.630]                 for (kk in seq_along(NAMES)) {
[09:31:05.630]                   name <- added[[kk]]
[09:31:05.630]                   NAME <- NAMES[[kk]]
[09:31:05.630]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.630]                     next
[09:31:05.630]                   args[[name]] <- ""
[09:31:05.630]                 }
[09:31:05.630]                 NAMES <- toupper(removed)
[09:31:05.630]                 for (kk in seq_along(NAMES)) {
[09:31:05.630]                   name <- removed[[kk]]
[09:31:05.630]                   NAME <- NAMES[[kk]]
[09:31:05.630]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.630]                     next
[09:31:05.630]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.630]                 }
[09:31:05.630]                 if (length(args) > 0) 
[09:31:05.630]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.630]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.630]             }
[09:31:05.630]             else {
[09:31:05.630]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.630]             }
[09:31:05.630]             {
[09:31:05.630]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.630]                   0L) {
[09:31:05.630]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.630]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.630]                   base::options(opts)
[09:31:05.630]                 }
[09:31:05.630]                 {
[09:31:05.630]                   {
[09:31:05.630]                     NULL
[09:31:05.630]                     RNGkind("Mersenne-Twister")
[09:31:05.630]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:05.630]                       inherits = FALSE)
[09:31:05.630]                   }
[09:31:05.630]                   options(future.plan = NULL)
[09:31:05.630]                   if (is.na(NA_character_)) 
[09:31:05.630]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.630]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.630]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.630]                     .init = FALSE)
[09:31:05.630]                 }
[09:31:05.630]             }
[09:31:05.630]         }
[09:31:05.630]     })
[09:31:05.630]     if (TRUE) {
[09:31:05.630]         base::sink(type = "output", split = FALSE)
[09:31:05.630]         if (TRUE) {
[09:31:05.630]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.630]         }
[09:31:05.630]         else {
[09:31:05.630]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.630]         }
[09:31:05.630]         base::close(...future.stdout)
[09:31:05.630]         ...future.stdout <- NULL
[09:31:05.630]     }
[09:31:05.630]     ...future.result$conditions <- ...future.conditions
[09:31:05.630]     ...future.result$finished <- base::Sys.time()
[09:31:05.630]     ...future.result
[09:31:05.630] }
[09:31:05.631] assign_globals() ...
[09:31:05.632] List of 1
[09:31:05.632]  $ a: num 1
[09:31:05.632]  - attr(*, "where")=List of 1
[09:31:05.632]   ..$ a:<environment: R_EmptyEnv> 
[09:31:05.632]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:05.632]  - attr(*, "resolved")= logi FALSE
[09:31:05.632]  - attr(*, "total_size")= num 56
[09:31:05.632]  - attr(*, "already-done")= logi TRUE
[09:31:05.634] - copied ‘a’ to environment
[09:31:05.634] assign_globals() ... done
[09:31:05.634] plan(): Setting new future strategy stack:
[09:31:05.634] List of future strategies:
[09:31:05.634] 1. sequential:
[09:31:05.634]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.634]    - tweaked: FALSE
[09:31:05.634]    - call: NULL
[09:31:05.635] plan(): nbrOfWorkers() = 1
[09:31:05.635] plan(): Setting new future strategy stack:
[09:31:05.635] List of future strategies:
[09:31:05.635] 1. sequential:
[09:31:05.635]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.635]    - tweaked: FALSE
[09:31:05.635]    - call: plan(strategy)
[09:31:05.636] plan(): nbrOfWorkers() = 1
[09:31:05.636] SequentialFuture started (and completed)
[09:31:05.636] - Launch lazy future ... done
[09:31:05.636] run() for ‘SequentialFuture’ ... done
[09:31:05.636] getGlobalsAndPackages() ...
[09:31:05.636] Searching for globals...
[09:31:05.637] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:05.637] Searching for globals ... DONE
[09:31:05.637] Resolving globals: FALSE
[09:31:05.638] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:05.638] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:05.638] - globals: [1] ‘a’
[09:31:05.638] 
[09:31:05.638] getGlobalsAndPackages() ... DONE
[09:31:05.639] run() for ‘Future’ ...
[09:31:05.639] - state: ‘created’
[09:31:05.639] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:05.639] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:05.639] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:05.639]   - Field: ‘label’
[09:31:05.639]   - Field: ‘local’
[09:31:05.640]   - Field: ‘owner’
[09:31:05.640]   - Field: ‘envir’
[09:31:05.640]   - Field: ‘packages’
[09:31:05.640]   - Field: ‘gc’
[09:31:05.640]   - Field: ‘conditions’
[09:31:05.640]   - Field: ‘expr’
[09:31:05.640]   - Field: ‘uuid’
[09:31:05.640]   - Field: ‘seed’
[09:31:05.640]   - Field: ‘version’
[09:31:05.640]   - Field: ‘result’
[09:31:05.640]   - Field: ‘asynchronous’
[09:31:05.641]   - Field: ‘calls’
[09:31:05.641]   - Field: ‘globals’
[09:31:05.641]   - Field: ‘stdout’
[09:31:05.641]   - Field: ‘earlySignal’
[09:31:05.641]   - Field: ‘lazy’
[09:31:05.641]   - Field: ‘state’
[09:31:05.641] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:05.641] - Launch lazy future ...
[09:31:05.641] Packages needed by the future expression (n = 0): <none>
[09:31:05.641] Packages needed by future strategies (n = 0): <none>
[09:31:05.642] {
[09:31:05.642]     {
[09:31:05.642]         {
[09:31:05.642]             ...future.startTime <- base::Sys.time()
[09:31:05.642]             {
[09:31:05.642]                 {
[09:31:05.642]                   {
[09:31:05.642]                     base::local({
[09:31:05.642]                       has_future <- base::requireNamespace("future", 
[09:31:05.642]                         quietly = TRUE)
[09:31:05.642]                       if (has_future) {
[09:31:05.642]                         ns <- base::getNamespace("future")
[09:31:05.642]                         version <- ns[[".package"]][["version"]]
[09:31:05.642]                         if (is.null(version)) 
[09:31:05.642]                           version <- utils::packageVersion("future")
[09:31:05.642]                       }
[09:31:05.642]                       else {
[09:31:05.642]                         version <- NULL
[09:31:05.642]                       }
[09:31:05.642]                       if (!has_future || version < "1.8.0") {
[09:31:05.642]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.642]                           "", base::R.version$version.string), 
[09:31:05.642]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:05.642]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.642]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.642]                             "release", "version")], collapse = " "), 
[09:31:05.642]                           hostname = base::Sys.info()[["nodename"]])
[09:31:05.642]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.642]                           info)
[09:31:05.642]                         info <- base::paste(info, collapse = "; ")
[09:31:05.642]                         if (!has_future) {
[09:31:05.642]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.642]                             info)
[09:31:05.642]                         }
[09:31:05.642]                         else {
[09:31:05.642]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.642]                             info, version)
[09:31:05.642]                         }
[09:31:05.642]                         base::stop(msg)
[09:31:05.642]                       }
[09:31:05.642]                     })
[09:31:05.642]                   }
[09:31:05.642]                   ...future.strategy.old <- future::plan("list")
[09:31:05.642]                   options(future.plan = NULL)
[09:31:05.642]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.642]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.642]                 }
[09:31:05.642]                 ...future.workdir <- getwd()
[09:31:05.642]             }
[09:31:05.642]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.642]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.642]         }
[09:31:05.642]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.642]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.642]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.642]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.642]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.642]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.642]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.642]             base::names(...future.oldOptions))
[09:31:05.642]     }
[09:31:05.642]     if (FALSE) {
[09:31:05.642]     }
[09:31:05.642]     else {
[09:31:05.642]         if (TRUE) {
[09:31:05.642]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.642]                 open = "w")
[09:31:05.642]         }
[09:31:05.642]         else {
[09:31:05.642]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.642]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.642]         }
[09:31:05.642]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.642]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.642]             base::sink(type = "output", split = FALSE)
[09:31:05.642]             base::close(...future.stdout)
[09:31:05.642]         }, add = TRUE)
[09:31:05.642]     }
[09:31:05.642]     ...future.frame <- base::sys.nframe()
[09:31:05.642]     ...future.conditions <- base::list()
[09:31:05.642]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.642]     if (FALSE) {
[09:31:05.642]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.642]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.642]     }
[09:31:05.642]     ...future.result <- base::tryCatch({
[09:31:05.642]         base::withCallingHandlers({
[09:31:05.642]             ...future.value <- base::withVisible(base::local({
[09:31:05.642]                 2 * a
[09:31:05.642]             }))
[09:31:05.642]             future::FutureResult(value = ...future.value$value, 
[09:31:05.642]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.642]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.642]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.642]                     ...future.globalenv.names))
[09:31:05.642]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.642]         }, condition = base::local({
[09:31:05.642]             c <- base::c
[09:31:05.642]             inherits <- base::inherits
[09:31:05.642]             invokeRestart <- base::invokeRestart
[09:31:05.642]             length <- base::length
[09:31:05.642]             list <- base::list
[09:31:05.642]             seq.int <- base::seq.int
[09:31:05.642]             signalCondition <- base::signalCondition
[09:31:05.642]             sys.calls <- base::sys.calls
[09:31:05.642]             `[[` <- base::`[[`
[09:31:05.642]             `+` <- base::`+`
[09:31:05.642]             `<<-` <- base::`<<-`
[09:31:05.642]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.642]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.642]                   3L)]
[09:31:05.642]             }
[09:31:05.642]             function(cond) {
[09:31:05.642]                 is_error <- inherits(cond, "error")
[09:31:05.642]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.642]                   NULL)
[09:31:05.642]                 if (is_error) {
[09:31:05.642]                   sessionInformation <- function() {
[09:31:05.642]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.642]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.642]                       search = base::search(), system = base::Sys.info())
[09:31:05.642]                   }
[09:31:05.642]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.642]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.642]                     cond$call), session = sessionInformation(), 
[09:31:05.642]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.642]                   signalCondition(cond)
[09:31:05.642]                 }
[09:31:05.642]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.642]                 "immediateCondition"))) {
[09:31:05.642]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.642]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.642]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.642]                   if (TRUE && !signal) {
[09:31:05.642]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.642]                     {
[09:31:05.642]                       inherits <- base::inherits
[09:31:05.642]                       invokeRestart <- base::invokeRestart
[09:31:05.642]                       is.null <- base::is.null
[09:31:05.642]                       muffled <- FALSE
[09:31:05.642]                       if (inherits(cond, "message")) {
[09:31:05.642]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.642]                         if (muffled) 
[09:31:05.642]                           invokeRestart("muffleMessage")
[09:31:05.642]                       }
[09:31:05.642]                       else if (inherits(cond, "warning")) {
[09:31:05.642]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.642]                         if (muffled) 
[09:31:05.642]                           invokeRestart("muffleWarning")
[09:31:05.642]                       }
[09:31:05.642]                       else if (inherits(cond, "condition")) {
[09:31:05.642]                         if (!is.null(pattern)) {
[09:31:05.642]                           computeRestarts <- base::computeRestarts
[09:31:05.642]                           grepl <- base::grepl
[09:31:05.642]                           restarts <- computeRestarts(cond)
[09:31:05.642]                           for (restart in restarts) {
[09:31:05.642]                             name <- restart$name
[09:31:05.642]                             if (is.null(name)) 
[09:31:05.642]                               next
[09:31:05.642]                             if (!grepl(pattern, name)) 
[09:31:05.642]                               next
[09:31:05.642]                             invokeRestart(restart)
[09:31:05.642]                             muffled <- TRUE
[09:31:05.642]                             break
[09:31:05.642]                           }
[09:31:05.642]                         }
[09:31:05.642]                       }
[09:31:05.642]                       invisible(muffled)
[09:31:05.642]                     }
[09:31:05.642]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.642]                   }
[09:31:05.642]                 }
[09:31:05.642]                 else {
[09:31:05.642]                   if (TRUE) {
[09:31:05.642]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.642]                     {
[09:31:05.642]                       inherits <- base::inherits
[09:31:05.642]                       invokeRestart <- base::invokeRestart
[09:31:05.642]                       is.null <- base::is.null
[09:31:05.642]                       muffled <- FALSE
[09:31:05.642]                       if (inherits(cond, "message")) {
[09:31:05.642]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.642]                         if (muffled) 
[09:31:05.642]                           invokeRestart("muffleMessage")
[09:31:05.642]                       }
[09:31:05.642]                       else if (inherits(cond, "warning")) {
[09:31:05.642]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.642]                         if (muffled) 
[09:31:05.642]                           invokeRestart("muffleWarning")
[09:31:05.642]                       }
[09:31:05.642]                       else if (inherits(cond, "condition")) {
[09:31:05.642]                         if (!is.null(pattern)) {
[09:31:05.642]                           computeRestarts <- base::computeRestarts
[09:31:05.642]                           grepl <- base::grepl
[09:31:05.642]                           restarts <- computeRestarts(cond)
[09:31:05.642]                           for (restart in restarts) {
[09:31:05.642]                             name <- restart$name
[09:31:05.642]                             if (is.null(name)) 
[09:31:05.642]                               next
[09:31:05.642]                             if (!grepl(pattern, name)) 
[09:31:05.642]                               next
[09:31:05.642]                             invokeRestart(restart)
[09:31:05.642]                             muffled <- TRUE
[09:31:05.642]                             break
[09:31:05.642]                           }
[09:31:05.642]                         }
[09:31:05.642]                       }
[09:31:05.642]                       invisible(muffled)
[09:31:05.642]                     }
[09:31:05.642]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.642]                   }
[09:31:05.642]                 }
[09:31:05.642]             }
[09:31:05.642]         }))
[09:31:05.642]     }, error = function(ex) {
[09:31:05.642]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.642]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.642]                 ...future.rng), started = ...future.startTime, 
[09:31:05.642]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.642]             version = "1.8"), class = "FutureResult")
[09:31:05.642]     }, finally = {
[09:31:05.642]         if (!identical(...future.workdir, getwd())) 
[09:31:05.642]             setwd(...future.workdir)
[09:31:05.642]         {
[09:31:05.642]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.642]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.642]             }
[09:31:05.642]             base::options(...future.oldOptions)
[09:31:05.642]             if (.Platform$OS.type == "windows") {
[09:31:05.642]                 old_names <- names(...future.oldEnvVars)
[09:31:05.642]                 envs <- base::Sys.getenv()
[09:31:05.642]                 names <- names(envs)
[09:31:05.642]                 common <- intersect(names, old_names)
[09:31:05.642]                 added <- setdiff(names, old_names)
[09:31:05.642]                 removed <- setdiff(old_names, names)
[09:31:05.642]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.642]                   envs[common]]
[09:31:05.642]                 NAMES <- toupper(changed)
[09:31:05.642]                 args <- list()
[09:31:05.642]                 for (kk in seq_along(NAMES)) {
[09:31:05.642]                   name <- changed[[kk]]
[09:31:05.642]                   NAME <- NAMES[[kk]]
[09:31:05.642]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.642]                     next
[09:31:05.642]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.642]                 }
[09:31:05.642]                 NAMES <- toupper(added)
[09:31:05.642]                 for (kk in seq_along(NAMES)) {
[09:31:05.642]                   name <- added[[kk]]
[09:31:05.642]                   NAME <- NAMES[[kk]]
[09:31:05.642]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.642]                     next
[09:31:05.642]                   args[[name]] <- ""
[09:31:05.642]                 }
[09:31:05.642]                 NAMES <- toupper(removed)
[09:31:05.642]                 for (kk in seq_along(NAMES)) {
[09:31:05.642]                   name <- removed[[kk]]
[09:31:05.642]                   NAME <- NAMES[[kk]]
[09:31:05.642]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.642]                     next
[09:31:05.642]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.642]                 }
[09:31:05.642]                 if (length(args) > 0) 
[09:31:05.642]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.642]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.642]             }
[09:31:05.642]             else {
[09:31:05.642]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.642]             }
[09:31:05.642]             {
[09:31:05.642]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.642]                   0L) {
[09:31:05.642]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.642]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.642]                   base::options(opts)
[09:31:05.642]                 }
[09:31:05.642]                 {
[09:31:05.642]                   {
[09:31:05.642]                     NULL
[09:31:05.642]                     RNGkind("Mersenne-Twister")
[09:31:05.642]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:05.642]                       inherits = FALSE)
[09:31:05.642]                   }
[09:31:05.642]                   options(future.plan = NULL)
[09:31:05.642]                   if (is.na(NA_character_)) 
[09:31:05.642]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.642]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.642]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.642]                     .init = FALSE)
[09:31:05.642]                 }
[09:31:05.642]             }
[09:31:05.642]         }
[09:31:05.642]     })
[09:31:05.642]     if (TRUE) {
[09:31:05.642]         base::sink(type = "output", split = FALSE)
[09:31:05.642]         if (TRUE) {
[09:31:05.642]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.642]         }
[09:31:05.642]         else {
[09:31:05.642]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.642]         }
[09:31:05.642]         base::close(...future.stdout)
[09:31:05.642]         ...future.stdout <- NULL
[09:31:05.642]     }
[09:31:05.642]     ...future.result$conditions <- ...future.conditions
[09:31:05.642]     ...future.result$finished <- base::Sys.time()
[09:31:05.642]     ...future.result
[09:31:05.642] }
[09:31:05.643] assign_globals() ...
[09:31:05.643] List of 1
[09:31:05.643]  $ a: num 1
[09:31:05.643]  - attr(*, "where")=List of 1
[09:31:05.643]   ..$ a:<environment: R_EmptyEnv> 
[09:31:05.643]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:05.643]  - attr(*, "resolved")= logi FALSE
[09:31:05.643]  - attr(*, "total_size")= num 56
[09:31:05.643]  - attr(*, "already-done")= logi TRUE
[09:31:05.646] - copied ‘a’ to environment
[09:31:05.646] assign_globals() ... done
[09:31:05.646] plan(): Setting new future strategy stack:
[09:31:05.646] List of future strategies:
[09:31:05.646] 1. sequential:
[09:31:05.646]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.646]    - tweaked: FALSE
[09:31:05.646]    - call: NULL
[09:31:05.646] plan(): nbrOfWorkers() = 1
[09:31:05.647] plan(): Setting new future strategy stack:
[09:31:05.647] List of future strategies:
[09:31:05.647] 1. sequential:
[09:31:05.647]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.647]    - tweaked: FALSE
[09:31:05.647]    - call: plan(strategy)
[09:31:05.647] plan(): nbrOfWorkers() = 1
[09:31:05.648] SequentialFuture started (and completed)
[09:31:05.648] - Launch lazy future ... done
[09:31:05.648] run() for ‘SequentialFuture’ ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[09:31:05.653] plan(): Setting new future strategy stack:
[09:31:05.653] List of future strategies:
[09:31:05.653] 1. multicore:
[09:31:05.653]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:05.653]    - tweaked: FALSE
[09:31:05.653]    - call: plan(strategy)
[09:31:05.657] plan(): nbrOfWorkers() = 2
[09:31:05.657] getGlobalsAndPackages() ...
[09:31:05.657] Searching for globals...
[09:31:05.658] - globals found: [1] ‘{’
[09:31:05.658] Searching for globals ... DONE
[09:31:05.658] Resolving globals: FALSE
[09:31:05.658] 
[09:31:05.658] 
[09:31:05.658] getGlobalsAndPackages() ... DONE
[09:31:05.659] run() for ‘Future’ ...
[09:31:05.659] - state: ‘created’
[09:31:05.659] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:05.663] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:05.663] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:05.663]   - Field: ‘label’
[09:31:05.663]   - Field: ‘local’
[09:31:05.664]   - Field: ‘owner’
[09:31:05.664]   - Field: ‘envir’
[09:31:05.664]   - Field: ‘workers’
[09:31:05.664]   - Field: ‘packages’
[09:31:05.664]   - Field: ‘gc’
[09:31:05.664]   - Field: ‘job’
[09:31:05.664]   - Field: ‘conditions’
[09:31:05.664]   - Field: ‘expr’
[09:31:05.664]   - Field: ‘uuid’
[09:31:05.664]   - Field: ‘seed’
[09:31:05.664]   - Field: ‘version’
[09:31:05.665]   - Field: ‘result’
[09:31:05.665]   - Field: ‘asynchronous’
[09:31:05.665]   - Field: ‘calls’
[09:31:05.665]   - Field: ‘globals’
[09:31:05.665]   - Field: ‘stdout’
[09:31:05.665]   - Field: ‘earlySignal’
[09:31:05.665]   - Field: ‘lazy’
[09:31:05.665]   - Field: ‘state’
[09:31:05.665] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:05.665] - Launch lazy future ...
[09:31:05.666] Packages needed by the future expression (n = 0): <none>
[09:31:05.666] Packages needed by future strategies (n = 0): <none>
[09:31:05.667] {
[09:31:05.667]     {
[09:31:05.667]         {
[09:31:05.667]             ...future.startTime <- base::Sys.time()
[09:31:05.667]             {
[09:31:05.667]                 {
[09:31:05.667]                   {
[09:31:05.667]                     {
[09:31:05.667]                       base::local({
[09:31:05.667]                         has_future <- base::requireNamespace("future", 
[09:31:05.667]                           quietly = TRUE)
[09:31:05.667]                         if (has_future) {
[09:31:05.667]                           ns <- base::getNamespace("future")
[09:31:05.667]                           version <- ns[[".package"]][["version"]]
[09:31:05.667]                           if (is.null(version)) 
[09:31:05.667]                             version <- utils::packageVersion("future")
[09:31:05.667]                         }
[09:31:05.667]                         else {
[09:31:05.667]                           version <- NULL
[09:31:05.667]                         }
[09:31:05.667]                         if (!has_future || version < "1.8.0") {
[09:31:05.667]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.667]                             "", base::R.version$version.string), 
[09:31:05.667]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:05.667]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.667]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.667]                               "release", "version")], collapse = " "), 
[09:31:05.667]                             hostname = base::Sys.info()[["nodename"]])
[09:31:05.667]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.667]                             info)
[09:31:05.667]                           info <- base::paste(info, collapse = "; ")
[09:31:05.667]                           if (!has_future) {
[09:31:05.667]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.667]                               info)
[09:31:05.667]                           }
[09:31:05.667]                           else {
[09:31:05.667]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.667]                               info, version)
[09:31:05.667]                           }
[09:31:05.667]                           base::stop(msg)
[09:31:05.667]                         }
[09:31:05.667]                       })
[09:31:05.667]                     }
[09:31:05.667]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.667]                     base::options(mc.cores = 1L)
[09:31:05.667]                   }
[09:31:05.667]                   ...future.strategy.old <- future::plan("list")
[09:31:05.667]                   options(future.plan = NULL)
[09:31:05.667]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.667]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.667]                 }
[09:31:05.667]                 ...future.workdir <- getwd()
[09:31:05.667]             }
[09:31:05.667]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.667]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.667]         }
[09:31:05.667]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.667]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.667]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.667]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.667]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.667]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.667]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.667]             base::names(...future.oldOptions))
[09:31:05.667]     }
[09:31:05.667]     if (FALSE) {
[09:31:05.667]     }
[09:31:05.667]     else {
[09:31:05.667]         if (TRUE) {
[09:31:05.667]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.667]                 open = "w")
[09:31:05.667]         }
[09:31:05.667]         else {
[09:31:05.667]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.667]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.667]         }
[09:31:05.667]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.667]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.667]             base::sink(type = "output", split = FALSE)
[09:31:05.667]             base::close(...future.stdout)
[09:31:05.667]         }, add = TRUE)
[09:31:05.667]     }
[09:31:05.667]     ...future.frame <- base::sys.nframe()
[09:31:05.667]     ...future.conditions <- base::list()
[09:31:05.667]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.667]     if (FALSE) {
[09:31:05.667]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.667]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.667]     }
[09:31:05.667]     ...future.result <- base::tryCatch({
[09:31:05.667]         base::withCallingHandlers({
[09:31:05.667]             ...future.value <- base::withVisible(base::local({
[09:31:05.667]                 withCallingHandlers({
[09:31:05.667]                   {
[09:31:05.667]                     2
[09:31:05.667]                   }
[09:31:05.667]                 }, immediateCondition = function(cond) {
[09:31:05.667]                   save_rds <- function (object, pathname, ...) 
[09:31:05.667]                   {
[09:31:05.667]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:05.667]                     if (file_test("-f", pathname_tmp)) {
[09:31:05.667]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.667]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:05.667]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.667]                         fi_tmp[["mtime"]])
[09:31:05.667]                     }
[09:31:05.667]                     tryCatch({
[09:31:05.667]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:05.667]                     }, error = function(ex) {
[09:31:05.667]                       msg <- conditionMessage(ex)
[09:31:05.667]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.667]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:05.667]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.667]                         fi_tmp[["mtime"]], msg)
[09:31:05.667]                       ex$message <- msg
[09:31:05.667]                       stop(ex)
[09:31:05.667]                     })
[09:31:05.667]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:05.667]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:05.667]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:05.667]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.667]                       fi <- file.info(pathname)
[09:31:05.667]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:05.667]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.667]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:05.667]                         fi[["size"]], fi[["mtime"]])
[09:31:05.667]                       stop(msg)
[09:31:05.667]                     }
[09:31:05.667]                     invisible(pathname)
[09:31:05.667]                   }
[09:31:05.667]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:05.667]                     rootPath = tempdir()) 
[09:31:05.667]                   {
[09:31:05.667]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:05.667]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:05.667]                       tmpdir = path, fileext = ".rds")
[09:31:05.667]                     save_rds(obj, file)
[09:31:05.667]                   }
[09:31:05.667]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9U63Nd/.future/immediateConditions")
[09:31:05.667]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.667]                   {
[09:31:05.667]                     inherits <- base::inherits
[09:31:05.667]                     invokeRestart <- base::invokeRestart
[09:31:05.667]                     is.null <- base::is.null
[09:31:05.667]                     muffled <- FALSE
[09:31:05.667]                     if (inherits(cond, "message")) {
[09:31:05.667]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.667]                       if (muffled) 
[09:31:05.667]                         invokeRestart("muffleMessage")
[09:31:05.667]                     }
[09:31:05.667]                     else if (inherits(cond, "warning")) {
[09:31:05.667]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.667]                       if (muffled) 
[09:31:05.667]                         invokeRestart("muffleWarning")
[09:31:05.667]                     }
[09:31:05.667]                     else if (inherits(cond, "condition")) {
[09:31:05.667]                       if (!is.null(pattern)) {
[09:31:05.667]                         computeRestarts <- base::computeRestarts
[09:31:05.667]                         grepl <- base::grepl
[09:31:05.667]                         restarts <- computeRestarts(cond)
[09:31:05.667]                         for (restart in restarts) {
[09:31:05.667]                           name <- restart$name
[09:31:05.667]                           if (is.null(name)) 
[09:31:05.667]                             next
[09:31:05.667]                           if (!grepl(pattern, name)) 
[09:31:05.667]                             next
[09:31:05.667]                           invokeRestart(restart)
[09:31:05.667]                           muffled <- TRUE
[09:31:05.667]                           break
[09:31:05.667]                         }
[09:31:05.667]                       }
[09:31:05.667]                     }
[09:31:05.667]                     invisible(muffled)
[09:31:05.667]                   }
[09:31:05.667]                   muffleCondition(cond)
[09:31:05.667]                 })
[09:31:05.667]             }))
[09:31:05.667]             future::FutureResult(value = ...future.value$value, 
[09:31:05.667]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.667]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.667]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.667]                     ...future.globalenv.names))
[09:31:05.667]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.667]         }, condition = base::local({
[09:31:05.667]             c <- base::c
[09:31:05.667]             inherits <- base::inherits
[09:31:05.667]             invokeRestart <- base::invokeRestart
[09:31:05.667]             length <- base::length
[09:31:05.667]             list <- base::list
[09:31:05.667]             seq.int <- base::seq.int
[09:31:05.667]             signalCondition <- base::signalCondition
[09:31:05.667]             sys.calls <- base::sys.calls
[09:31:05.667]             `[[` <- base::`[[`
[09:31:05.667]             `+` <- base::`+`
[09:31:05.667]             `<<-` <- base::`<<-`
[09:31:05.667]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.667]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.667]                   3L)]
[09:31:05.667]             }
[09:31:05.667]             function(cond) {
[09:31:05.667]                 is_error <- inherits(cond, "error")
[09:31:05.667]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.667]                   NULL)
[09:31:05.667]                 if (is_error) {
[09:31:05.667]                   sessionInformation <- function() {
[09:31:05.667]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.667]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.667]                       search = base::search(), system = base::Sys.info())
[09:31:05.667]                   }
[09:31:05.667]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.667]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.667]                     cond$call), session = sessionInformation(), 
[09:31:05.667]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.667]                   signalCondition(cond)
[09:31:05.667]                 }
[09:31:05.667]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.667]                 "immediateCondition"))) {
[09:31:05.667]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.667]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.667]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.667]                   if (TRUE && !signal) {
[09:31:05.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.667]                     {
[09:31:05.667]                       inherits <- base::inherits
[09:31:05.667]                       invokeRestart <- base::invokeRestart
[09:31:05.667]                       is.null <- base::is.null
[09:31:05.667]                       muffled <- FALSE
[09:31:05.667]                       if (inherits(cond, "message")) {
[09:31:05.667]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.667]                         if (muffled) 
[09:31:05.667]                           invokeRestart("muffleMessage")
[09:31:05.667]                       }
[09:31:05.667]                       else if (inherits(cond, "warning")) {
[09:31:05.667]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.667]                         if (muffled) 
[09:31:05.667]                           invokeRestart("muffleWarning")
[09:31:05.667]                       }
[09:31:05.667]                       else if (inherits(cond, "condition")) {
[09:31:05.667]                         if (!is.null(pattern)) {
[09:31:05.667]                           computeRestarts <- base::computeRestarts
[09:31:05.667]                           grepl <- base::grepl
[09:31:05.667]                           restarts <- computeRestarts(cond)
[09:31:05.667]                           for (restart in restarts) {
[09:31:05.667]                             name <- restart$name
[09:31:05.667]                             if (is.null(name)) 
[09:31:05.667]                               next
[09:31:05.667]                             if (!grepl(pattern, name)) 
[09:31:05.667]                               next
[09:31:05.667]                             invokeRestart(restart)
[09:31:05.667]                             muffled <- TRUE
[09:31:05.667]                             break
[09:31:05.667]                           }
[09:31:05.667]                         }
[09:31:05.667]                       }
[09:31:05.667]                       invisible(muffled)
[09:31:05.667]                     }
[09:31:05.667]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.667]                   }
[09:31:05.667]                 }
[09:31:05.667]                 else {
[09:31:05.667]                   if (TRUE) {
[09:31:05.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.667]                     {
[09:31:05.667]                       inherits <- base::inherits
[09:31:05.667]                       invokeRestart <- base::invokeRestart
[09:31:05.667]                       is.null <- base::is.null
[09:31:05.667]                       muffled <- FALSE
[09:31:05.667]                       if (inherits(cond, "message")) {
[09:31:05.667]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.667]                         if (muffled) 
[09:31:05.667]                           invokeRestart("muffleMessage")
[09:31:05.667]                       }
[09:31:05.667]                       else if (inherits(cond, "warning")) {
[09:31:05.667]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.667]                         if (muffled) 
[09:31:05.667]                           invokeRestart("muffleWarning")
[09:31:05.667]                       }
[09:31:05.667]                       else if (inherits(cond, "condition")) {
[09:31:05.667]                         if (!is.null(pattern)) {
[09:31:05.667]                           computeRestarts <- base::computeRestarts
[09:31:05.667]                           grepl <- base::grepl
[09:31:05.667]                           restarts <- computeRestarts(cond)
[09:31:05.667]                           for (restart in restarts) {
[09:31:05.667]                             name <- restart$name
[09:31:05.667]                             if (is.null(name)) 
[09:31:05.667]                               next
[09:31:05.667]                             if (!grepl(pattern, name)) 
[09:31:05.667]                               next
[09:31:05.667]                             invokeRestart(restart)
[09:31:05.667]                             muffled <- TRUE
[09:31:05.667]                             break
[09:31:05.667]                           }
[09:31:05.667]                         }
[09:31:05.667]                       }
[09:31:05.667]                       invisible(muffled)
[09:31:05.667]                     }
[09:31:05.667]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.667]                   }
[09:31:05.667]                 }
[09:31:05.667]             }
[09:31:05.667]         }))
[09:31:05.667]     }, error = function(ex) {
[09:31:05.667]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.667]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.667]                 ...future.rng), started = ...future.startTime, 
[09:31:05.667]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.667]             version = "1.8"), class = "FutureResult")
[09:31:05.667]     }, finally = {
[09:31:05.667]         if (!identical(...future.workdir, getwd())) 
[09:31:05.667]             setwd(...future.workdir)
[09:31:05.667]         {
[09:31:05.667]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.667]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.667]             }
[09:31:05.667]             base::options(...future.oldOptions)
[09:31:05.667]             if (.Platform$OS.type == "windows") {
[09:31:05.667]                 old_names <- names(...future.oldEnvVars)
[09:31:05.667]                 envs <- base::Sys.getenv()
[09:31:05.667]                 names <- names(envs)
[09:31:05.667]                 common <- intersect(names, old_names)
[09:31:05.667]                 added <- setdiff(names, old_names)
[09:31:05.667]                 removed <- setdiff(old_names, names)
[09:31:05.667]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.667]                   envs[common]]
[09:31:05.667]                 NAMES <- toupper(changed)
[09:31:05.667]                 args <- list()
[09:31:05.667]                 for (kk in seq_along(NAMES)) {
[09:31:05.667]                   name <- changed[[kk]]
[09:31:05.667]                   NAME <- NAMES[[kk]]
[09:31:05.667]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.667]                     next
[09:31:05.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.667]                 }
[09:31:05.667]                 NAMES <- toupper(added)
[09:31:05.667]                 for (kk in seq_along(NAMES)) {
[09:31:05.667]                   name <- added[[kk]]
[09:31:05.667]                   NAME <- NAMES[[kk]]
[09:31:05.667]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.667]                     next
[09:31:05.667]                   args[[name]] <- ""
[09:31:05.667]                 }
[09:31:05.667]                 NAMES <- toupper(removed)
[09:31:05.667]                 for (kk in seq_along(NAMES)) {
[09:31:05.667]                   name <- removed[[kk]]
[09:31:05.667]                   NAME <- NAMES[[kk]]
[09:31:05.667]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.667]                     next
[09:31:05.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.667]                 }
[09:31:05.667]                 if (length(args) > 0) 
[09:31:05.667]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.667]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.667]             }
[09:31:05.667]             else {
[09:31:05.667]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.667]             }
[09:31:05.667]             {
[09:31:05.667]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.667]                   0L) {
[09:31:05.667]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.667]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.667]                   base::options(opts)
[09:31:05.667]                 }
[09:31:05.667]                 {
[09:31:05.667]                   {
[09:31:05.667]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.667]                     NULL
[09:31:05.667]                   }
[09:31:05.667]                   options(future.plan = NULL)
[09:31:05.667]                   if (is.na(NA_character_)) 
[09:31:05.667]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.667]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.667]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.667]                     .init = FALSE)
[09:31:05.667]                 }
[09:31:05.667]             }
[09:31:05.667]         }
[09:31:05.667]     })
[09:31:05.667]     if (TRUE) {
[09:31:05.667]         base::sink(type = "output", split = FALSE)
[09:31:05.667]         if (TRUE) {
[09:31:05.667]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.667]         }
[09:31:05.667]         else {
[09:31:05.667]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.667]         }
[09:31:05.667]         base::close(...future.stdout)
[09:31:05.667]         ...future.stdout <- NULL
[09:31:05.667]     }
[09:31:05.667]     ...future.result$conditions <- ...future.conditions
[09:31:05.667]     ...future.result$finished <- base::Sys.time()
[09:31:05.667]     ...future.result
[09:31:05.667] }
[09:31:05.669] requestCore(): workers = 2
[09:31:05.672] MulticoreFuture started
[09:31:05.672] - Launch lazy future ... done
[09:31:05.672] plan(): Setting new future strategy stack:
[09:31:05.672] run() for ‘MulticoreFuture’ ... done
[09:31:05.673] getGlobalsAndPackages() ...
[09:31:05.673] Searching for globals...
[09:31:05.673] List of future strategies:
[09:31:05.673] 1. sequential:
[09:31:05.673]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.673]    - tweaked: FALSE
[09:31:05.673]    - call: NULL
[09:31:05.674] plan(): nbrOfWorkers() = 1
[09:31:05.675] - globals found: [1] ‘{’
[09:31:05.675] Searching for globals ... DONE
[09:31:05.675] plan(): Setting new future strategy stack:
[09:31:05.675] Resolving globals: FALSE
[09:31:05.676] List of future strategies:
[09:31:05.676] 1. multicore:
[09:31:05.676]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:05.676]    - tweaked: FALSE
[09:31:05.676]    - call: plan(strategy)
[09:31:05.676] 
[09:31:05.676] 
[09:31:05.676] getGlobalsAndPackages() ... DONE
[09:31:05.677] run() for ‘Future’ ...
[09:31:05.677] - state: ‘created’
[09:31:05.677] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:05.680] plan(): nbrOfWorkers() = 2
[09:31:05.682] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:05.682] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:05.682]   - Field: ‘label’
[09:31:05.682]   - Field: ‘local’
[09:31:05.683]   - Field: ‘owner’
[09:31:05.683]   - Field: ‘envir’
[09:31:05.683]   - Field: ‘workers’
[09:31:05.683]   - Field: ‘packages’
[09:31:05.683]   - Field: ‘gc’
[09:31:05.683]   - Field: ‘job’
[09:31:05.683]   - Field: ‘conditions’
[09:31:05.684]   - Field: ‘expr’
[09:31:05.684]   - Field: ‘uuid’
[09:31:05.684]   - Field: ‘seed’
[09:31:05.684]   - Field: ‘version’
[09:31:05.684]   - Field: ‘result’
[09:31:05.684]   - Field: ‘asynchronous’
[09:31:05.684]   - Field: ‘calls’
[09:31:05.685]   - Field: ‘globals’
[09:31:05.685]   - Field: ‘stdout’
[09:31:05.685]   - Field: ‘earlySignal’
[09:31:05.685]   - Field: ‘lazy’
[09:31:05.685]   - Field: ‘state’
[09:31:05.685] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:05.685] - Launch lazy future ...
[09:31:05.686] Packages needed by the future expression (n = 0): <none>
[09:31:05.686] Packages needed by future strategies (n = 0): <none>
[09:31:05.687] {
[09:31:05.687]     {
[09:31:05.687]         {
[09:31:05.687]             ...future.startTime <- base::Sys.time()
[09:31:05.687]             {
[09:31:05.687]                 {
[09:31:05.687]                   {
[09:31:05.687]                     {
[09:31:05.687]                       base::local({
[09:31:05.687]                         has_future <- base::requireNamespace("future", 
[09:31:05.687]                           quietly = TRUE)
[09:31:05.687]                         if (has_future) {
[09:31:05.687]                           ns <- base::getNamespace("future")
[09:31:05.687]                           version <- ns[[".package"]][["version"]]
[09:31:05.687]                           if (is.null(version)) 
[09:31:05.687]                             version <- utils::packageVersion("future")
[09:31:05.687]                         }
[09:31:05.687]                         else {
[09:31:05.687]                           version <- NULL
[09:31:05.687]                         }
[09:31:05.687]                         if (!has_future || version < "1.8.0") {
[09:31:05.687]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.687]                             "", base::R.version$version.string), 
[09:31:05.687]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:05.687]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.687]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.687]                               "release", "version")], collapse = " "), 
[09:31:05.687]                             hostname = base::Sys.info()[["nodename"]])
[09:31:05.687]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.687]                             info)
[09:31:05.687]                           info <- base::paste(info, collapse = "; ")
[09:31:05.687]                           if (!has_future) {
[09:31:05.687]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.687]                               info)
[09:31:05.687]                           }
[09:31:05.687]                           else {
[09:31:05.687]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.687]                               info, version)
[09:31:05.687]                           }
[09:31:05.687]                           base::stop(msg)
[09:31:05.687]                         }
[09:31:05.687]                       })
[09:31:05.687]                     }
[09:31:05.687]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.687]                     base::options(mc.cores = 1L)
[09:31:05.687]                   }
[09:31:05.687]                   ...future.strategy.old <- future::plan("list")
[09:31:05.687]                   options(future.plan = NULL)
[09:31:05.687]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.687]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.687]                 }
[09:31:05.687]                 ...future.workdir <- getwd()
[09:31:05.687]             }
[09:31:05.687]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.687]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.687]         }
[09:31:05.687]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.687]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.687]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.687]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.687]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.687]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.687]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.687]             base::names(...future.oldOptions))
[09:31:05.687]     }
[09:31:05.687]     if (FALSE) {
[09:31:05.687]     }
[09:31:05.687]     else {
[09:31:05.687]         if (TRUE) {
[09:31:05.687]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.687]                 open = "w")
[09:31:05.687]         }
[09:31:05.687]         else {
[09:31:05.687]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.687]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.687]         }
[09:31:05.687]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.687]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.687]             base::sink(type = "output", split = FALSE)
[09:31:05.687]             base::close(...future.stdout)
[09:31:05.687]         }, add = TRUE)
[09:31:05.687]     }
[09:31:05.687]     ...future.frame <- base::sys.nframe()
[09:31:05.687]     ...future.conditions <- base::list()
[09:31:05.687]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.687]     if (FALSE) {
[09:31:05.687]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.687]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.687]     }
[09:31:05.687]     ...future.result <- base::tryCatch({
[09:31:05.687]         base::withCallingHandlers({
[09:31:05.687]             ...future.value <- base::withVisible(base::local({
[09:31:05.687]                 withCallingHandlers({
[09:31:05.687]                   {
[09:31:05.687]                     4
[09:31:05.687]                   }
[09:31:05.687]                 }, immediateCondition = function(cond) {
[09:31:05.687]                   save_rds <- function (object, pathname, ...) 
[09:31:05.687]                   {
[09:31:05.687]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:05.687]                     if (file_test("-f", pathname_tmp)) {
[09:31:05.687]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.687]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:05.687]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.687]                         fi_tmp[["mtime"]])
[09:31:05.687]                     }
[09:31:05.687]                     tryCatch({
[09:31:05.687]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:05.687]                     }, error = function(ex) {
[09:31:05.687]                       msg <- conditionMessage(ex)
[09:31:05.687]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.687]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:05.687]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.687]                         fi_tmp[["mtime"]], msg)
[09:31:05.687]                       ex$message <- msg
[09:31:05.687]                       stop(ex)
[09:31:05.687]                     })
[09:31:05.687]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:05.687]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:05.687]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:05.687]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.687]                       fi <- file.info(pathname)
[09:31:05.687]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:05.687]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.687]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:05.687]                         fi[["size"]], fi[["mtime"]])
[09:31:05.687]                       stop(msg)
[09:31:05.687]                     }
[09:31:05.687]                     invisible(pathname)
[09:31:05.687]                   }
[09:31:05.687]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:05.687]                     rootPath = tempdir()) 
[09:31:05.687]                   {
[09:31:05.687]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:05.687]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:05.687]                       tmpdir = path, fileext = ".rds")
[09:31:05.687]                     save_rds(obj, file)
[09:31:05.687]                   }
[09:31:05.687]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9U63Nd/.future/immediateConditions")
[09:31:05.687]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.687]                   {
[09:31:05.687]                     inherits <- base::inherits
[09:31:05.687]                     invokeRestart <- base::invokeRestart
[09:31:05.687]                     is.null <- base::is.null
[09:31:05.687]                     muffled <- FALSE
[09:31:05.687]                     if (inherits(cond, "message")) {
[09:31:05.687]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.687]                       if (muffled) 
[09:31:05.687]                         invokeRestart("muffleMessage")
[09:31:05.687]                     }
[09:31:05.687]                     else if (inherits(cond, "warning")) {
[09:31:05.687]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.687]                       if (muffled) 
[09:31:05.687]                         invokeRestart("muffleWarning")
[09:31:05.687]                     }
[09:31:05.687]                     else if (inherits(cond, "condition")) {
[09:31:05.687]                       if (!is.null(pattern)) {
[09:31:05.687]                         computeRestarts <- base::computeRestarts
[09:31:05.687]                         grepl <- base::grepl
[09:31:05.687]                         restarts <- computeRestarts(cond)
[09:31:05.687]                         for (restart in restarts) {
[09:31:05.687]                           name <- restart$name
[09:31:05.687]                           if (is.null(name)) 
[09:31:05.687]                             next
[09:31:05.687]                           if (!grepl(pattern, name)) 
[09:31:05.687]                             next
[09:31:05.687]                           invokeRestart(restart)
[09:31:05.687]                           muffled <- TRUE
[09:31:05.687]                           break
[09:31:05.687]                         }
[09:31:05.687]                       }
[09:31:05.687]                     }
[09:31:05.687]                     invisible(muffled)
[09:31:05.687]                   }
[09:31:05.687]                   muffleCondition(cond)
[09:31:05.687]                 })
[09:31:05.687]             }))
[09:31:05.687]             future::FutureResult(value = ...future.value$value, 
[09:31:05.687]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.687]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.687]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.687]                     ...future.globalenv.names))
[09:31:05.687]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.687]         }, condition = base::local({
[09:31:05.687]             c <- base::c
[09:31:05.687]             inherits <- base::inherits
[09:31:05.687]             invokeRestart <- base::invokeRestart
[09:31:05.687]             length <- base::length
[09:31:05.687]             list <- base::list
[09:31:05.687]             seq.int <- base::seq.int
[09:31:05.687]             signalCondition <- base::signalCondition
[09:31:05.687]             sys.calls <- base::sys.calls
[09:31:05.687]             `[[` <- base::`[[`
[09:31:05.687]             `+` <- base::`+`
[09:31:05.687]             `<<-` <- base::`<<-`
[09:31:05.687]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.687]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.687]                   3L)]
[09:31:05.687]             }
[09:31:05.687]             function(cond) {
[09:31:05.687]                 is_error <- inherits(cond, "error")
[09:31:05.687]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.687]                   NULL)
[09:31:05.687]                 if (is_error) {
[09:31:05.687]                   sessionInformation <- function() {
[09:31:05.687]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.687]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.687]                       search = base::search(), system = base::Sys.info())
[09:31:05.687]                   }
[09:31:05.687]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.687]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.687]                     cond$call), session = sessionInformation(), 
[09:31:05.687]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.687]                   signalCondition(cond)
[09:31:05.687]                 }
[09:31:05.687]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.687]                 "immediateCondition"))) {
[09:31:05.687]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.687]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.687]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.687]                   if (TRUE && !signal) {
[09:31:05.687]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.687]                     {
[09:31:05.687]                       inherits <- base::inherits
[09:31:05.687]                       invokeRestart <- base::invokeRestart
[09:31:05.687]                       is.null <- base::is.null
[09:31:05.687]                       muffled <- FALSE
[09:31:05.687]                       if (inherits(cond, "message")) {
[09:31:05.687]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.687]                         if (muffled) 
[09:31:05.687]                           invokeRestart("muffleMessage")
[09:31:05.687]                       }
[09:31:05.687]                       else if (inherits(cond, "warning")) {
[09:31:05.687]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.687]                         if (muffled) 
[09:31:05.687]                           invokeRestart("muffleWarning")
[09:31:05.687]                       }
[09:31:05.687]                       else if (inherits(cond, "condition")) {
[09:31:05.687]                         if (!is.null(pattern)) {
[09:31:05.687]                           computeRestarts <- base::computeRestarts
[09:31:05.687]                           grepl <- base::grepl
[09:31:05.687]                           restarts <- computeRestarts(cond)
[09:31:05.687]                           for (restart in restarts) {
[09:31:05.687]                             name <- restart$name
[09:31:05.687]                             if (is.null(name)) 
[09:31:05.687]                               next
[09:31:05.687]                             if (!grepl(pattern, name)) 
[09:31:05.687]                               next
[09:31:05.687]                             invokeRestart(restart)
[09:31:05.687]                             muffled <- TRUE
[09:31:05.687]                             break
[09:31:05.687]                           }
[09:31:05.687]                         }
[09:31:05.687]                       }
[09:31:05.687]                       invisible(muffled)
[09:31:05.687]                     }
[09:31:05.687]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.687]                   }
[09:31:05.687]                 }
[09:31:05.687]                 else {
[09:31:05.687]                   if (TRUE) {
[09:31:05.687]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.687]                     {
[09:31:05.687]                       inherits <- base::inherits
[09:31:05.687]                       invokeRestart <- base::invokeRestart
[09:31:05.687]                       is.null <- base::is.null
[09:31:05.687]                       muffled <- FALSE
[09:31:05.687]                       if (inherits(cond, "message")) {
[09:31:05.687]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.687]                         if (muffled) 
[09:31:05.687]                           invokeRestart("muffleMessage")
[09:31:05.687]                       }
[09:31:05.687]                       else if (inherits(cond, "warning")) {
[09:31:05.687]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.687]                         if (muffled) 
[09:31:05.687]                           invokeRestart("muffleWarning")
[09:31:05.687]                       }
[09:31:05.687]                       else if (inherits(cond, "condition")) {
[09:31:05.687]                         if (!is.null(pattern)) {
[09:31:05.687]                           computeRestarts <- base::computeRestarts
[09:31:05.687]                           grepl <- base::grepl
[09:31:05.687]                           restarts <- computeRestarts(cond)
[09:31:05.687]                           for (restart in restarts) {
[09:31:05.687]                             name <- restart$name
[09:31:05.687]                             if (is.null(name)) 
[09:31:05.687]                               next
[09:31:05.687]                             if (!grepl(pattern, name)) 
[09:31:05.687]                               next
[09:31:05.687]                             invokeRestart(restart)
[09:31:05.687]                             muffled <- TRUE
[09:31:05.687]                             break
[09:31:05.687]                           }
[09:31:05.687]                         }
[09:31:05.687]                       }
[09:31:05.687]                       invisible(muffled)
[09:31:05.687]                     }
[09:31:05.687]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.687]                   }
[09:31:05.687]                 }
[09:31:05.687]             }
[09:31:05.687]         }))
[09:31:05.687]     }, error = function(ex) {
[09:31:05.687]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.687]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.687]                 ...future.rng), started = ...future.startTime, 
[09:31:05.687]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.687]             version = "1.8"), class = "FutureResult")
[09:31:05.687]     }, finally = {
[09:31:05.687]         if (!identical(...future.workdir, getwd())) 
[09:31:05.687]             setwd(...future.workdir)
[09:31:05.687]         {
[09:31:05.687]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.687]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.687]             }
[09:31:05.687]             base::options(...future.oldOptions)
[09:31:05.687]             if (.Platform$OS.type == "windows") {
[09:31:05.687]                 old_names <- names(...future.oldEnvVars)
[09:31:05.687]                 envs <- base::Sys.getenv()
[09:31:05.687]                 names <- names(envs)
[09:31:05.687]                 common <- intersect(names, old_names)
[09:31:05.687]                 added <- setdiff(names, old_names)
[09:31:05.687]                 removed <- setdiff(old_names, names)
[09:31:05.687]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.687]                   envs[common]]
[09:31:05.687]                 NAMES <- toupper(changed)
[09:31:05.687]                 args <- list()
[09:31:05.687]                 for (kk in seq_along(NAMES)) {
[09:31:05.687]                   name <- changed[[kk]]
[09:31:05.687]                   NAME <- NAMES[[kk]]
[09:31:05.687]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.687]                     next
[09:31:05.687]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.687]                 }
[09:31:05.687]                 NAMES <- toupper(added)
[09:31:05.687]                 for (kk in seq_along(NAMES)) {
[09:31:05.687]                   name <- added[[kk]]
[09:31:05.687]                   NAME <- NAMES[[kk]]
[09:31:05.687]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.687]                     next
[09:31:05.687]                   args[[name]] <- ""
[09:31:05.687]                 }
[09:31:05.687]                 NAMES <- toupper(removed)
[09:31:05.687]                 for (kk in seq_along(NAMES)) {
[09:31:05.687]                   name <- removed[[kk]]
[09:31:05.687]                   NAME <- NAMES[[kk]]
[09:31:05.687]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.687]                     next
[09:31:05.687]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.687]                 }
[09:31:05.687]                 if (length(args) > 0) 
[09:31:05.687]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.687]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.687]             }
[09:31:05.687]             else {
[09:31:05.687]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.687]             }
[09:31:05.687]             {
[09:31:05.687]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.687]                   0L) {
[09:31:05.687]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.687]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.687]                   base::options(opts)
[09:31:05.687]                 }
[09:31:05.687]                 {
[09:31:05.687]                   {
[09:31:05.687]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.687]                     NULL
[09:31:05.687]                   }
[09:31:05.687]                   options(future.plan = NULL)
[09:31:05.687]                   if (is.na(NA_character_)) 
[09:31:05.687]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.687]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.687]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.687]                     .init = FALSE)
[09:31:05.687]                 }
[09:31:05.687]             }
[09:31:05.687]         }
[09:31:05.687]     })
[09:31:05.687]     if (TRUE) {
[09:31:05.687]         base::sink(type = "output", split = FALSE)
[09:31:05.687]         if (TRUE) {
[09:31:05.687]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.687]         }
[09:31:05.687]         else {
[09:31:05.687]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.687]         }
[09:31:05.687]         base::close(...future.stdout)
[09:31:05.687]         ...future.stdout <- NULL
[09:31:05.687]     }
[09:31:05.687]     ...future.result$conditions <- ...future.conditions
[09:31:05.687]     ...future.result$finished <- base::Sys.time()
[09:31:05.687]     ...future.result
[09:31:05.687] }
[09:31:05.690] requestCore(): workers = 2
[09:31:05.695] MulticoreFuture started
[09:31:05.696] - Launch lazy future ... done
[09:31:05.696] run() for ‘MulticoreFuture’ ... done
[09:31:05.697] plan(): Setting new future strategy stack:
[09:31:05.697] result() for MulticoreFuture ...
[09:31:05.697] List of future strategies:
[09:31:05.697] 1. sequential:
[09:31:05.697]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.697]    - tweaked: FALSE
[09:31:05.697]    - call: NULL
[09:31:05.698] plan(): nbrOfWorkers() = 1
[09:31:05.699] result() for MulticoreFuture ...
[09:31:05.700] result() for MulticoreFuture ... done
[09:31:05.700] result() for MulticoreFuture ... done
[09:31:05.700] plan(): Setting new future strategy stack:
[09:31:05.700] result() for MulticoreFuture ...
[09:31:05.700] result() for MulticoreFuture ... done
u$a = 2
[09:31:05.700] result() for MulticoreFuture ...
[09:31:05.700] List of future strategies:
[09:31:05.700] 1. multicore:
[09:31:05.700]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:05.700]    - tweaked: FALSE
[09:31:05.700]    - call: plan(strategy)
[09:31:05.705] plan(): nbrOfWorkers() = 2
[09:31:05.706] result() for MulticoreFuture ...
[09:31:05.706] result() for MulticoreFuture ... done
[09:31:05.706] result() for MulticoreFuture ... done
[09:31:05.706] result() for MulticoreFuture ...
[09:31:05.706] result() for MulticoreFuture ... done
v$a = 4
[09:31:05.707] getGlobalsAndPackages() ...
[09:31:05.707] Searching for globals...
[09:31:05.708] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:05.708] Searching for globals ... DONE
[09:31:05.708] Resolving globals: FALSE
[09:31:05.709] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:05.709] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:05.709] - globals: [1] ‘a’
[09:31:05.709] 
[09:31:05.710] getGlobalsAndPackages() ... DONE
[09:31:05.710] run() for ‘Future’ ...
[09:31:05.710] - state: ‘created’
[09:31:05.710] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:05.714] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:05.715] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:05.715]   - Field: ‘label’
[09:31:05.715]   - Field: ‘local’
[09:31:05.715]   - Field: ‘owner’
[09:31:05.715]   - Field: ‘envir’
[09:31:05.715]   - Field: ‘workers’
[09:31:05.715]   - Field: ‘packages’
[09:31:05.716]   - Field: ‘gc’
[09:31:05.716]   - Field: ‘job’
[09:31:05.716]   - Field: ‘conditions’
[09:31:05.716]   - Field: ‘expr’
[09:31:05.716]   - Field: ‘uuid’
[09:31:05.716]   - Field: ‘seed’
[09:31:05.716]   - Field: ‘version’
[09:31:05.716]   - Field: ‘result’
[09:31:05.717]   - Field: ‘asynchronous’
[09:31:05.717]   - Field: ‘calls’
[09:31:05.717]   - Field: ‘globals’
[09:31:05.717]   - Field: ‘stdout’
[09:31:05.717]   - Field: ‘earlySignal’
[09:31:05.717]   - Field: ‘lazy’
[09:31:05.717]   - Field: ‘state’
[09:31:05.717] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:05.717] - Launch lazy future ...
[09:31:05.718] Packages needed by the future expression (n = 0): <none>
[09:31:05.718] Packages needed by future strategies (n = 0): <none>
[09:31:05.718] {
[09:31:05.718]     {
[09:31:05.718]         {
[09:31:05.718]             ...future.startTime <- base::Sys.time()
[09:31:05.718]             {
[09:31:05.718]                 {
[09:31:05.718]                   {
[09:31:05.718]                     {
[09:31:05.718]                       base::local({
[09:31:05.718]                         has_future <- base::requireNamespace("future", 
[09:31:05.718]                           quietly = TRUE)
[09:31:05.718]                         if (has_future) {
[09:31:05.718]                           ns <- base::getNamespace("future")
[09:31:05.718]                           version <- ns[[".package"]][["version"]]
[09:31:05.718]                           if (is.null(version)) 
[09:31:05.718]                             version <- utils::packageVersion("future")
[09:31:05.718]                         }
[09:31:05.718]                         else {
[09:31:05.718]                           version <- NULL
[09:31:05.718]                         }
[09:31:05.718]                         if (!has_future || version < "1.8.0") {
[09:31:05.718]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.718]                             "", base::R.version$version.string), 
[09:31:05.718]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:05.718]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.718]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.718]                               "release", "version")], collapse = " "), 
[09:31:05.718]                             hostname = base::Sys.info()[["nodename"]])
[09:31:05.718]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.718]                             info)
[09:31:05.718]                           info <- base::paste(info, collapse = "; ")
[09:31:05.718]                           if (!has_future) {
[09:31:05.718]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.718]                               info)
[09:31:05.718]                           }
[09:31:05.718]                           else {
[09:31:05.718]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.718]                               info, version)
[09:31:05.718]                           }
[09:31:05.718]                           base::stop(msg)
[09:31:05.718]                         }
[09:31:05.718]                       })
[09:31:05.718]                     }
[09:31:05.718]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.718]                     base::options(mc.cores = 1L)
[09:31:05.718]                   }
[09:31:05.718]                   ...future.strategy.old <- future::plan("list")
[09:31:05.718]                   options(future.plan = NULL)
[09:31:05.718]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.718]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.718]                 }
[09:31:05.718]                 ...future.workdir <- getwd()
[09:31:05.718]             }
[09:31:05.718]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.718]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.718]         }
[09:31:05.718]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.718]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.718]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.718]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.718]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.718]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.718]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.718]             base::names(...future.oldOptions))
[09:31:05.718]     }
[09:31:05.718]     if (FALSE) {
[09:31:05.718]     }
[09:31:05.718]     else {
[09:31:05.718]         if (TRUE) {
[09:31:05.718]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.718]                 open = "w")
[09:31:05.718]         }
[09:31:05.718]         else {
[09:31:05.718]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.718]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.718]         }
[09:31:05.718]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.718]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.718]             base::sink(type = "output", split = FALSE)
[09:31:05.718]             base::close(...future.stdout)
[09:31:05.718]         }, add = TRUE)
[09:31:05.718]     }
[09:31:05.718]     ...future.frame <- base::sys.nframe()
[09:31:05.718]     ...future.conditions <- base::list()
[09:31:05.718]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.718]     if (FALSE) {
[09:31:05.718]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.718]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.718]     }
[09:31:05.718]     ...future.result <- base::tryCatch({
[09:31:05.718]         base::withCallingHandlers({
[09:31:05.718]             ...future.value <- base::withVisible(base::local({
[09:31:05.718]                 withCallingHandlers({
[09:31:05.718]                   {
[09:31:05.718]                     2 * a
[09:31:05.718]                   }
[09:31:05.718]                 }, immediateCondition = function(cond) {
[09:31:05.718]                   save_rds <- function (object, pathname, ...) 
[09:31:05.718]                   {
[09:31:05.718]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:05.718]                     if (file_test("-f", pathname_tmp)) {
[09:31:05.718]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.718]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:05.718]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.718]                         fi_tmp[["mtime"]])
[09:31:05.718]                     }
[09:31:05.718]                     tryCatch({
[09:31:05.718]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:05.718]                     }, error = function(ex) {
[09:31:05.718]                       msg <- conditionMessage(ex)
[09:31:05.718]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.718]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:05.718]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.718]                         fi_tmp[["mtime"]], msg)
[09:31:05.718]                       ex$message <- msg
[09:31:05.718]                       stop(ex)
[09:31:05.718]                     })
[09:31:05.718]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:05.718]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:05.718]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:05.718]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.718]                       fi <- file.info(pathname)
[09:31:05.718]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:05.718]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.718]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:05.718]                         fi[["size"]], fi[["mtime"]])
[09:31:05.718]                       stop(msg)
[09:31:05.718]                     }
[09:31:05.718]                     invisible(pathname)
[09:31:05.718]                   }
[09:31:05.718]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:05.718]                     rootPath = tempdir()) 
[09:31:05.718]                   {
[09:31:05.718]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:05.718]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:05.718]                       tmpdir = path, fileext = ".rds")
[09:31:05.718]                     save_rds(obj, file)
[09:31:05.718]                   }
[09:31:05.718]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9U63Nd/.future/immediateConditions")
[09:31:05.718]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.718]                   {
[09:31:05.718]                     inherits <- base::inherits
[09:31:05.718]                     invokeRestart <- base::invokeRestart
[09:31:05.718]                     is.null <- base::is.null
[09:31:05.718]                     muffled <- FALSE
[09:31:05.718]                     if (inherits(cond, "message")) {
[09:31:05.718]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.718]                       if (muffled) 
[09:31:05.718]                         invokeRestart("muffleMessage")
[09:31:05.718]                     }
[09:31:05.718]                     else if (inherits(cond, "warning")) {
[09:31:05.718]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.718]                       if (muffled) 
[09:31:05.718]                         invokeRestart("muffleWarning")
[09:31:05.718]                     }
[09:31:05.718]                     else if (inherits(cond, "condition")) {
[09:31:05.718]                       if (!is.null(pattern)) {
[09:31:05.718]                         computeRestarts <- base::computeRestarts
[09:31:05.718]                         grepl <- base::grepl
[09:31:05.718]                         restarts <- computeRestarts(cond)
[09:31:05.718]                         for (restart in restarts) {
[09:31:05.718]                           name <- restart$name
[09:31:05.718]                           if (is.null(name)) 
[09:31:05.718]                             next
[09:31:05.718]                           if (!grepl(pattern, name)) 
[09:31:05.718]                             next
[09:31:05.718]                           invokeRestart(restart)
[09:31:05.718]                           muffled <- TRUE
[09:31:05.718]                           break
[09:31:05.718]                         }
[09:31:05.718]                       }
[09:31:05.718]                     }
[09:31:05.718]                     invisible(muffled)
[09:31:05.718]                   }
[09:31:05.718]                   muffleCondition(cond)
[09:31:05.718]                 })
[09:31:05.718]             }))
[09:31:05.718]             future::FutureResult(value = ...future.value$value, 
[09:31:05.718]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.718]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.718]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.718]                     ...future.globalenv.names))
[09:31:05.718]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.718]         }, condition = base::local({
[09:31:05.718]             c <- base::c
[09:31:05.718]             inherits <- base::inherits
[09:31:05.718]             invokeRestart <- base::invokeRestart
[09:31:05.718]             length <- base::length
[09:31:05.718]             list <- base::list
[09:31:05.718]             seq.int <- base::seq.int
[09:31:05.718]             signalCondition <- base::signalCondition
[09:31:05.718]             sys.calls <- base::sys.calls
[09:31:05.718]             `[[` <- base::`[[`
[09:31:05.718]             `+` <- base::`+`
[09:31:05.718]             `<<-` <- base::`<<-`
[09:31:05.718]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.718]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.718]                   3L)]
[09:31:05.718]             }
[09:31:05.718]             function(cond) {
[09:31:05.718]                 is_error <- inherits(cond, "error")
[09:31:05.718]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.718]                   NULL)
[09:31:05.718]                 if (is_error) {
[09:31:05.718]                   sessionInformation <- function() {
[09:31:05.718]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.718]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.718]                       search = base::search(), system = base::Sys.info())
[09:31:05.718]                   }
[09:31:05.718]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.718]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.718]                     cond$call), session = sessionInformation(), 
[09:31:05.718]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.718]                   signalCondition(cond)
[09:31:05.718]                 }
[09:31:05.718]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.718]                 "immediateCondition"))) {
[09:31:05.718]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.718]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.718]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.718]                   if (TRUE && !signal) {
[09:31:05.718]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.718]                     {
[09:31:05.718]                       inherits <- base::inherits
[09:31:05.718]                       invokeRestart <- base::invokeRestart
[09:31:05.718]                       is.null <- base::is.null
[09:31:05.718]                       muffled <- FALSE
[09:31:05.718]                       if (inherits(cond, "message")) {
[09:31:05.718]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.718]                         if (muffled) 
[09:31:05.718]                           invokeRestart("muffleMessage")
[09:31:05.718]                       }
[09:31:05.718]                       else if (inherits(cond, "warning")) {
[09:31:05.718]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.718]                         if (muffled) 
[09:31:05.718]                           invokeRestart("muffleWarning")
[09:31:05.718]                       }
[09:31:05.718]                       else if (inherits(cond, "condition")) {
[09:31:05.718]                         if (!is.null(pattern)) {
[09:31:05.718]                           computeRestarts <- base::computeRestarts
[09:31:05.718]                           grepl <- base::grepl
[09:31:05.718]                           restarts <- computeRestarts(cond)
[09:31:05.718]                           for (restart in restarts) {
[09:31:05.718]                             name <- restart$name
[09:31:05.718]                             if (is.null(name)) 
[09:31:05.718]                               next
[09:31:05.718]                             if (!grepl(pattern, name)) 
[09:31:05.718]                               next
[09:31:05.718]                             invokeRestart(restart)
[09:31:05.718]                             muffled <- TRUE
[09:31:05.718]                             break
[09:31:05.718]                           }
[09:31:05.718]                         }
[09:31:05.718]                       }
[09:31:05.718]                       invisible(muffled)
[09:31:05.718]                     }
[09:31:05.718]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.718]                   }
[09:31:05.718]                 }
[09:31:05.718]                 else {
[09:31:05.718]                   if (TRUE) {
[09:31:05.718]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.718]                     {
[09:31:05.718]                       inherits <- base::inherits
[09:31:05.718]                       invokeRestart <- base::invokeRestart
[09:31:05.718]                       is.null <- base::is.null
[09:31:05.718]                       muffled <- FALSE
[09:31:05.718]                       if (inherits(cond, "message")) {
[09:31:05.718]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.718]                         if (muffled) 
[09:31:05.718]                           invokeRestart("muffleMessage")
[09:31:05.718]                       }
[09:31:05.718]                       else if (inherits(cond, "warning")) {
[09:31:05.718]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.718]                         if (muffled) 
[09:31:05.718]                           invokeRestart("muffleWarning")
[09:31:05.718]                       }
[09:31:05.718]                       else if (inherits(cond, "condition")) {
[09:31:05.718]                         if (!is.null(pattern)) {
[09:31:05.718]                           computeRestarts <- base::computeRestarts
[09:31:05.718]                           grepl <- base::grepl
[09:31:05.718]                           restarts <- computeRestarts(cond)
[09:31:05.718]                           for (restart in restarts) {
[09:31:05.718]                             name <- restart$name
[09:31:05.718]                             if (is.null(name)) 
[09:31:05.718]                               next
[09:31:05.718]                             if (!grepl(pattern, name)) 
[09:31:05.718]                               next
[09:31:05.718]                             invokeRestart(restart)
[09:31:05.718]                             muffled <- TRUE
[09:31:05.718]                             break
[09:31:05.718]                           }
[09:31:05.718]                         }
[09:31:05.718]                       }
[09:31:05.718]                       invisible(muffled)
[09:31:05.718]                     }
[09:31:05.718]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.718]                   }
[09:31:05.718]                 }
[09:31:05.718]             }
[09:31:05.718]         }))
[09:31:05.718]     }, error = function(ex) {
[09:31:05.718]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.718]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.718]                 ...future.rng), started = ...future.startTime, 
[09:31:05.718]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.718]             version = "1.8"), class = "FutureResult")
[09:31:05.718]     }, finally = {
[09:31:05.718]         if (!identical(...future.workdir, getwd())) 
[09:31:05.718]             setwd(...future.workdir)
[09:31:05.718]         {
[09:31:05.718]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.718]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.718]             }
[09:31:05.718]             base::options(...future.oldOptions)
[09:31:05.718]             if (.Platform$OS.type == "windows") {
[09:31:05.718]                 old_names <- names(...future.oldEnvVars)
[09:31:05.718]                 envs <- base::Sys.getenv()
[09:31:05.718]                 names <- names(envs)
[09:31:05.718]                 common <- intersect(names, old_names)
[09:31:05.718]                 added <- setdiff(names, old_names)
[09:31:05.718]                 removed <- setdiff(old_names, names)
[09:31:05.718]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.718]                   envs[common]]
[09:31:05.718]                 NAMES <- toupper(changed)
[09:31:05.718]                 args <- list()
[09:31:05.718]                 for (kk in seq_along(NAMES)) {
[09:31:05.718]                   name <- changed[[kk]]
[09:31:05.718]                   NAME <- NAMES[[kk]]
[09:31:05.718]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.718]                     next
[09:31:05.718]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.718]                 }
[09:31:05.718]                 NAMES <- toupper(added)
[09:31:05.718]                 for (kk in seq_along(NAMES)) {
[09:31:05.718]                   name <- added[[kk]]
[09:31:05.718]                   NAME <- NAMES[[kk]]
[09:31:05.718]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.718]                     next
[09:31:05.718]                   args[[name]] <- ""
[09:31:05.718]                 }
[09:31:05.718]                 NAMES <- toupper(removed)
[09:31:05.718]                 for (kk in seq_along(NAMES)) {
[09:31:05.718]                   name <- removed[[kk]]
[09:31:05.718]                   NAME <- NAMES[[kk]]
[09:31:05.718]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.718]                     next
[09:31:05.718]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.718]                 }
[09:31:05.718]                 if (length(args) > 0) 
[09:31:05.718]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.718]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.718]             }
[09:31:05.718]             else {
[09:31:05.718]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.718]             }
[09:31:05.718]             {
[09:31:05.718]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.718]                   0L) {
[09:31:05.718]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.718]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.718]                   base::options(opts)
[09:31:05.718]                 }
[09:31:05.718]                 {
[09:31:05.718]                   {
[09:31:05.718]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.718]                     NULL
[09:31:05.718]                   }
[09:31:05.718]                   options(future.plan = NULL)
[09:31:05.718]                   if (is.na(NA_character_)) 
[09:31:05.718]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.718]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.718]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.718]                     .init = FALSE)
[09:31:05.718]                 }
[09:31:05.718]             }
[09:31:05.718]         }
[09:31:05.718]     })
[09:31:05.718]     if (TRUE) {
[09:31:05.718]         base::sink(type = "output", split = FALSE)
[09:31:05.718]         if (TRUE) {
[09:31:05.718]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.718]         }
[09:31:05.718]         else {
[09:31:05.718]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.718]         }
[09:31:05.718]         base::close(...future.stdout)
[09:31:05.718]         ...future.stdout <- NULL
[09:31:05.718]     }
[09:31:05.718]     ...future.result$conditions <- ...future.conditions
[09:31:05.718]     ...future.result$finished <- base::Sys.time()
[09:31:05.718]     ...future.result
[09:31:05.718] }
[09:31:05.721] assign_globals() ...
[09:31:05.721] List of 1
[09:31:05.721]  $ a: num 1
[09:31:05.721]  - attr(*, "where")=List of 1
[09:31:05.721]   ..$ a:<environment: R_EmptyEnv> 
[09:31:05.721]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:05.721]  - attr(*, "resolved")= logi FALSE
[09:31:05.721]  - attr(*, "total_size")= num 56
[09:31:05.721]  - attr(*, "already-done")= logi TRUE
[09:31:05.726] - copied ‘a’ to environment
[09:31:05.727] assign_globals() ... done
[09:31:05.727] requestCore(): workers = 2
[09:31:05.728] MulticoreFuture started
[09:31:05.729] - Launch lazy future ... done
[09:31:05.729] run() for ‘MulticoreFuture’ ... done
[09:31:05.729] result() for MulticoreFuture ...
[09:31:05.729] plan(): Setting new future strategy stack:
[09:31:05.730] List of future strategies:
[09:31:05.730] 1. sequential:
[09:31:05.730]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.730]    - tweaked: FALSE
[09:31:05.730]    - call: NULL
[09:31:05.731] plan(): nbrOfWorkers() = 1
[09:31:05.733] plan(): Setting new future strategy stack:
[09:31:05.733] List of future strategies:
[09:31:05.733] 1. multicore:
[09:31:05.733]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:05.733]    - tweaked: FALSE
[09:31:05.733]    - call: plan(strategy)
[09:31:05.738] plan(): nbrOfWorkers() = 2
[09:31:05.739] result() for MulticoreFuture ...
[09:31:05.739] result() for MulticoreFuture ... done
[09:31:05.739] result() for MulticoreFuture ... done
[09:31:05.739] result() for MulticoreFuture ...
[09:31:05.739] result() for MulticoreFuture ... done
[09:31:05.740] getGlobalsAndPackages() ...
[09:31:05.740] Searching for globals...
[09:31:05.741] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:05.741] Searching for globals ... DONE
[09:31:05.741] Resolving globals: FALSE
[09:31:05.742] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:05.742] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:05.742] - globals: [1] ‘a’
[09:31:05.743] 
[09:31:05.743] getGlobalsAndPackages() ... DONE
[09:31:05.743] run() for ‘Future’ ...
[09:31:05.743] - state: ‘created’
[09:31:05.743] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:05.747] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:05.747] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:05.747]   - Field: ‘label’
[09:31:05.747]   - Field: ‘local’
[09:31:05.748]   - Field: ‘owner’
[09:31:05.748]   - Field: ‘envir’
[09:31:05.748]   - Field: ‘workers’
[09:31:05.748]   - Field: ‘packages’
[09:31:05.748]   - Field: ‘gc’
[09:31:05.748]   - Field: ‘job’
[09:31:05.748]   - Field: ‘conditions’
[09:31:05.748]   - Field: ‘expr’
[09:31:05.749]   - Field: ‘uuid’
[09:31:05.749]   - Field: ‘seed’
[09:31:05.749]   - Field: ‘version’
[09:31:05.749]   - Field: ‘result’
[09:31:05.749]   - Field: ‘asynchronous’
[09:31:05.749]   - Field: ‘calls’
[09:31:05.749]   - Field: ‘globals’
[09:31:05.749]   - Field: ‘stdout’
[09:31:05.749]   - Field: ‘earlySignal’
[09:31:05.749]   - Field: ‘lazy’
[09:31:05.750]   - Field: ‘state’
[09:31:05.750] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:05.750] - Launch lazy future ...
[09:31:05.750] Packages needed by the future expression (n = 0): <none>
[09:31:05.750] Packages needed by future strategies (n = 0): <none>
[09:31:05.751] {
[09:31:05.751]     {
[09:31:05.751]         {
[09:31:05.751]             ...future.startTime <- base::Sys.time()
[09:31:05.751]             {
[09:31:05.751]                 {
[09:31:05.751]                   {
[09:31:05.751]                     {
[09:31:05.751]                       base::local({
[09:31:05.751]                         has_future <- base::requireNamespace("future", 
[09:31:05.751]                           quietly = TRUE)
[09:31:05.751]                         if (has_future) {
[09:31:05.751]                           ns <- base::getNamespace("future")
[09:31:05.751]                           version <- ns[[".package"]][["version"]]
[09:31:05.751]                           if (is.null(version)) 
[09:31:05.751]                             version <- utils::packageVersion("future")
[09:31:05.751]                         }
[09:31:05.751]                         else {
[09:31:05.751]                           version <- NULL
[09:31:05.751]                         }
[09:31:05.751]                         if (!has_future || version < "1.8.0") {
[09:31:05.751]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.751]                             "", base::R.version$version.string), 
[09:31:05.751]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:05.751]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.751]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.751]                               "release", "version")], collapse = " "), 
[09:31:05.751]                             hostname = base::Sys.info()[["nodename"]])
[09:31:05.751]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.751]                             info)
[09:31:05.751]                           info <- base::paste(info, collapse = "; ")
[09:31:05.751]                           if (!has_future) {
[09:31:05.751]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.751]                               info)
[09:31:05.751]                           }
[09:31:05.751]                           else {
[09:31:05.751]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.751]                               info, version)
[09:31:05.751]                           }
[09:31:05.751]                           base::stop(msg)
[09:31:05.751]                         }
[09:31:05.751]                       })
[09:31:05.751]                     }
[09:31:05.751]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.751]                     base::options(mc.cores = 1L)
[09:31:05.751]                   }
[09:31:05.751]                   ...future.strategy.old <- future::plan("list")
[09:31:05.751]                   options(future.plan = NULL)
[09:31:05.751]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.751]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.751]                 }
[09:31:05.751]                 ...future.workdir <- getwd()
[09:31:05.751]             }
[09:31:05.751]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.751]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.751]         }
[09:31:05.751]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.751]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.751]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.751]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.751]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.751]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.751]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.751]             base::names(...future.oldOptions))
[09:31:05.751]     }
[09:31:05.751]     if (FALSE) {
[09:31:05.751]     }
[09:31:05.751]     else {
[09:31:05.751]         if (TRUE) {
[09:31:05.751]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.751]                 open = "w")
[09:31:05.751]         }
[09:31:05.751]         else {
[09:31:05.751]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.751]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.751]         }
[09:31:05.751]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.751]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.751]             base::sink(type = "output", split = FALSE)
[09:31:05.751]             base::close(...future.stdout)
[09:31:05.751]         }, add = TRUE)
[09:31:05.751]     }
[09:31:05.751]     ...future.frame <- base::sys.nframe()
[09:31:05.751]     ...future.conditions <- base::list()
[09:31:05.751]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.751]     if (FALSE) {
[09:31:05.751]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.751]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.751]     }
[09:31:05.751]     ...future.result <- base::tryCatch({
[09:31:05.751]         base::withCallingHandlers({
[09:31:05.751]             ...future.value <- base::withVisible(base::local({
[09:31:05.751]                 withCallingHandlers({
[09:31:05.751]                   {
[09:31:05.751]                     2 * a
[09:31:05.751]                   }
[09:31:05.751]                 }, immediateCondition = function(cond) {
[09:31:05.751]                   save_rds <- function (object, pathname, ...) 
[09:31:05.751]                   {
[09:31:05.751]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:05.751]                     if (file_test("-f", pathname_tmp)) {
[09:31:05.751]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.751]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:05.751]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.751]                         fi_tmp[["mtime"]])
[09:31:05.751]                     }
[09:31:05.751]                     tryCatch({
[09:31:05.751]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:05.751]                     }, error = function(ex) {
[09:31:05.751]                       msg <- conditionMessage(ex)
[09:31:05.751]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.751]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:05.751]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.751]                         fi_tmp[["mtime"]], msg)
[09:31:05.751]                       ex$message <- msg
[09:31:05.751]                       stop(ex)
[09:31:05.751]                     })
[09:31:05.751]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:05.751]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:05.751]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:05.751]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.751]                       fi <- file.info(pathname)
[09:31:05.751]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:05.751]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.751]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:05.751]                         fi[["size"]], fi[["mtime"]])
[09:31:05.751]                       stop(msg)
[09:31:05.751]                     }
[09:31:05.751]                     invisible(pathname)
[09:31:05.751]                   }
[09:31:05.751]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:05.751]                     rootPath = tempdir()) 
[09:31:05.751]                   {
[09:31:05.751]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:05.751]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:05.751]                       tmpdir = path, fileext = ".rds")
[09:31:05.751]                     save_rds(obj, file)
[09:31:05.751]                   }
[09:31:05.751]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9U63Nd/.future/immediateConditions")
[09:31:05.751]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.751]                   {
[09:31:05.751]                     inherits <- base::inherits
[09:31:05.751]                     invokeRestart <- base::invokeRestart
[09:31:05.751]                     is.null <- base::is.null
[09:31:05.751]                     muffled <- FALSE
[09:31:05.751]                     if (inherits(cond, "message")) {
[09:31:05.751]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.751]                       if (muffled) 
[09:31:05.751]                         invokeRestart("muffleMessage")
[09:31:05.751]                     }
[09:31:05.751]                     else if (inherits(cond, "warning")) {
[09:31:05.751]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.751]                       if (muffled) 
[09:31:05.751]                         invokeRestart("muffleWarning")
[09:31:05.751]                     }
[09:31:05.751]                     else if (inherits(cond, "condition")) {
[09:31:05.751]                       if (!is.null(pattern)) {
[09:31:05.751]                         computeRestarts <- base::computeRestarts
[09:31:05.751]                         grepl <- base::grepl
[09:31:05.751]                         restarts <- computeRestarts(cond)
[09:31:05.751]                         for (restart in restarts) {
[09:31:05.751]                           name <- restart$name
[09:31:05.751]                           if (is.null(name)) 
[09:31:05.751]                             next
[09:31:05.751]                           if (!grepl(pattern, name)) 
[09:31:05.751]                             next
[09:31:05.751]                           invokeRestart(restart)
[09:31:05.751]                           muffled <- TRUE
[09:31:05.751]                           break
[09:31:05.751]                         }
[09:31:05.751]                       }
[09:31:05.751]                     }
[09:31:05.751]                     invisible(muffled)
[09:31:05.751]                   }
[09:31:05.751]                   muffleCondition(cond)
[09:31:05.751]                 })
[09:31:05.751]             }))
[09:31:05.751]             future::FutureResult(value = ...future.value$value, 
[09:31:05.751]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.751]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.751]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.751]                     ...future.globalenv.names))
[09:31:05.751]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.751]         }, condition = base::local({
[09:31:05.751]             c <- base::c
[09:31:05.751]             inherits <- base::inherits
[09:31:05.751]             invokeRestart <- base::invokeRestart
[09:31:05.751]             length <- base::length
[09:31:05.751]             list <- base::list
[09:31:05.751]             seq.int <- base::seq.int
[09:31:05.751]             signalCondition <- base::signalCondition
[09:31:05.751]             sys.calls <- base::sys.calls
[09:31:05.751]             `[[` <- base::`[[`
[09:31:05.751]             `+` <- base::`+`
[09:31:05.751]             `<<-` <- base::`<<-`
[09:31:05.751]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.751]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.751]                   3L)]
[09:31:05.751]             }
[09:31:05.751]             function(cond) {
[09:31:05.751]                 is_error <- inherits(cond, "error")
[09:31:05.751]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.751]                   NULL)
[09:31:05.751]                 if (is_error) {
[09:31:05.751]                   sessionInformation <- function() {
[09:31:05.751]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.751]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.751]                       search = base::search(), system = base::Sys.info())
[09:31:05.751]                   }
[09:31:05.751]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.751]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.751]                     cond$call), session = sessionInformation(), 
[09:31:05.751]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.751]                   signalCondition(cond)
[09:31:05.751]                 }
[09:31:05.751]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.751]                 "immediateCondition"))) {
[09:31:05.751]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.751]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.751]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.751]                   if (TRUE && !signal) {
[09:31:05.751]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.751]                     {
[09:31:05.751]                       inherits <- base::inherits
[09:31:05.751]                       invokeRestart <- base::invokeRestart
[09:31:05.751]                       is.null <- base::is.null
[09:31:05.751]                       muffled <- FALSE
[09:31:05.751]                       if (inherits(cond, "message")) {
[09:31:05.751]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.751]                         if (muffled) 
[09:31:05.751]                           invokeRestart("muffleMessage")
[09:31:05.751]                       }
[09:31:05.751]                       else if (inherits(cond, "warning")) {
[09:31:05.751]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.751]                         if (muffled) 
[09:31:05.751]                           invokeRestart("muffleWarning")
[09:31:05.751]                       }
[09:31:05.751]                       else if (inherits(cond, "condition")) {
[09:31:05.751]                         if (!is.null(pattern)) {
[09:31:05.751]                           computeRestarts <- base::computeRestarts
[09:31:05.751]                           grepl <- base::grepl
[09:31:05.751]                           restarts <- computeRestarts(cond)
[09:31:05.751]                           for (restart in restarts) {
[09:31:05.751]                             name <- restart$name
[09:31:05.751]                             if (is.null(name)) 
[09:31:05.751]                               next
[09:31:05.751]                             if (!grepl(pattern, name)) 
[09:31:05.751]                               next
[09:31:05.751]                             invokeRestart(restart)
[09:31:05.751]                             muffled <- TRUE
[09:31:05.751]                             break
[09:31:05.751]                           }
[09:31:05.751]                         }
[09:31:05.751]                       }
[09:31:05.751]                       invisible(muffled)
[09:31:05.751]                     }
[09:31:05.751]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.751]                   }
[09:31:05.751]                 }
[09:31:05.751]                 else {
[09:31:05.751]                   if (TRUE) {
[09:31:05.751]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.751]                     {
[09:31:05.751]                       inherits <- base::inherits
[09:31:05.751]                       invokeRestart <- base::invokeRestart
[09:31:05.751]                       is.null <- base::is.null
[09:31:05.751]                       muffled <- FALSE
[09:31:05.751]                       if (inherits(cond, "message")) {
[09:31:05.751]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.751]                         if (muffled) 
[09:31:05.751]                           invokeRestart("muffleMessage")
[09:31:05.751]                       }
[09:31:05.751]                       else if (inherits(cond, "warning")) {
[09:31:05.751]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.751]                         if (muffled) 
[09:31:05.751]                           invokeRestart("muffleWarning")
[09:31:05.751]                       }
[09:31:05.751]                       else if (inherits(cond, "condition")) {
[09:31:05.751]                         if (!is.null(pattern)) {
[09:31:05.751]                           computeRestarts <- base::computeRestarts
[09:31:05.751]                           grepl <- base::grepl
[09:31:05.751]                           restarts <- computeRestarts(cond)
[09:31:05.751]                           for (restart in restarts) {
[09:31:05.751]                             name <- restart$name
[09:31:05.751]                             if (is.null(name)) 
[09:31:05.751]                               next
[09:31:05.751]                             if (!grepl(pattern, name)) 
[09:31:05.751]                               next
[09:31:05.751]                             invokeRestart(restart)
[09:31:05.751]                             muffled <- TRUE
[09:31:05.751]                             break
[09:31:05.751]                           }
[09:31:05.751]                         }
[09:31:05.751]                       }
[09:31:05.751]                       invisible(muffled)
[09:31:05.751]                     }
[09:31:05.751]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.751]                   }
[09:31:05.751]                 }
[09:31:05.751]             }
[09:31:05.751]         }))
[09:31:05.751]     }, error = function(ex) {
[09:31:05.751]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.751]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.751]                 ...future.rng), started = ...future.startTime, 
[09:31:05.751]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.751]             version = "1.8"), class = "FutureResult")
[09:31:05.751]     }, finally = {
[09:31:05.751]         if (!identical(...future.workdir, getwd())) 
[09:31:05.751]             setwd(...future.workdir)
[09:31:05.751]         {
[09:31:05.751]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.751]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.751]             }
[09:31:05.751]             base::options(...future.oldOptions)
[09:31:05.751]             if (.Platform$OS.type == "windows") {
[09:31:05.751]                 old_names <- names(...future.oldEnvVars)
[09:31:05.751]                 envs <- base::Sys.getenv()
[09:31:05.751]                 names <- names(envs)
[09:31:05.751]                 common <- intersect(names, old_names)
[09:31:05.751]                 added <- setdiff(names, old_names)
[09:31:05.751]                 removed <- setdiff(old_names, names)
[09:31:05.751]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.751]                   envs[common]]
[09:31:05.751]                 NAMES <- toupper(changed)
[09:31:05.751]                 args <- list()
[09:31:05.751]                 for (kk in seq_along(NAMES)) {
[09:31:05.751]                   name <- changed[[kk]]
[09:31:05.751]                   NAME <- NAMES[[kk]]
[09:31:05.751]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.751]                     next
[09:31:05.751]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.751]                 }
[09:31:05.751]                 NAMES <- toupper(added)
[09:31:05.751]                 for (kk in seq_along(NAMES)) {
[09:31:05.751]                   name <- added[[kk]]
[09:31:05.751]                   NAME <- NAMES[[kk]]
[09:31:05.751]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.751]                     next
[09:31:05.751]                   args[[name]] <- ""
[09:31:05.751]                 }
[09:31:05.751]                 NAMES <- toupper(removed)
[09:31:05.751]                 for (kk in seq_along(NAMES)) {
[09:31:05.751]                   name <- removed[[kk]]
[09:31:05.751]                   NAME <- NAMES[[kk]]
[09:31:05.751]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.751]                     next
[09:31:05.751]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.751]                 }
[09:31:05.751]                 if (length(args) > 0) 
[09:31:05.751]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.751]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.751]             }
[09:31:05.751]             else {
[09:31:05.751]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.751]             }
[09:31:05.751]             {
[09:31:05.751]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.751]                   0L) {
[09:31:05.751]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.751]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.751]                   base::options(opts)
[09:31:05.751]                 }
[09:31:05.751]                 {
[09:31:05.751]                   {
[09:31:05.751]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.751]                     NULL
[09:31:05.751]                   }
[09:31:05.751]                   options(future.plan = NULL)
[09:31:05.751]                   if (is.na(NA_character_)) 
[09:31:05.751]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.751]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.751]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.751]                     .init = FALSE)
[09:31:05.751]                 }
[09:31:05.751]             }
[09:31:05.751]         }
[09:31:05.751]     })
[09:31:05.751]     if (TRUE) {
[09:31:05.751]         base::sink(type = "output", split = FALSE)
[09:31:05.751]         if (TRUE) {
[09:31:05.751]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.751]         }
[09:31:05.751]         else {
[09:31:05.751]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.751]         }
[09:31:05.751]         base::close(...future.stdout)
[09:31:05.751]         ...future.stdout <- NULL
[09:31:05.751]     }
[09:31:05.751]     ...future.result$conditions <- ...future.conditions
[09:31:05.751]     ...future.result$finished <- base::Sys.time()
[09:31:05.751]     ...future.result
[09:31:05.751] }
[09:31:05.753] assign_globals() ...
[09:31:05.753] List of 1
[09:31:05.753]  $ a: num 1
[09:31:05.753]  - attr(*, "where")=List of 1
[09:31:05.753]   ..$ a:<environment: R_EmptyEnv> 
[09:31:05.753]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:05.753]  - attr(*, "resolved")= logi FALSE
[09:31:05.753]  - attr(*, "total_size")= num 56
[09:31:05.753]  - attr(*, "already-done")= logi TRUE
[09:31:05.756] - copied ‘a’ to environment
[09:31:05.756] assign_globals() ... done
[09:31:05.757] requestCore(): workers = 2
[09:31:05.758] MulticoreFuture started
[09:31:05.759] - Launch lazy future ... done
[09:31:05.759] run() for ‘MulticoreFuture’ ... done
[09:31:05.759] result() for MulticoreFuture ...
[09:31:05.759] plan(): Setting new future strategy stack:
[09:31:05.760] List of future strategies:
[09:31:05.760] 1. sequential:
[09:31:05.760]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.760]    - tweaked: FALSE
[09:31:05.760]    - call: NULL
[09:31:05.761] plan(): nbrOfWorkers() = 1
[09:31:05.762] plan(): Setting new future strategy stack:
[09:31:05.762] List of future strategies:
[09:31:05.762] 1. multicore:
[09:31:05.762]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:05.762]    - tweaked: FALSE
[09:31:05.762]    - call: plan(strategy)
[09:31:05.767] plan(): nbrOfWorkers() = 2
[09:31:05.768] result() for MulticoreFuture ...
[09:31:05.768] result() for MulticoreFuture ... done
[09:31:05.769] result() for MulticoreFuture ... done
[09:31:05.769] result() for MulticoreFuture ...
[09:31:05.769] result() for MulticoreFuture ... done
[09:31:05.769] getGlobalsAndPackages() ...
[09:31:05.769] Searching for globals...
[09:31:05.770] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:05.771] Searching for globals ... DONE
[09:31:05.771] Resolving globals: FALSE
[09:31:05.771] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:05.772] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:05.772] - globals: [1] ‘a’
[09:31:05.772] 
[09:31:05.772] getGlobalsAndPackages() ... DONE
[09:31:05.772] run() for ‘Future’ ...
[09:31:05.773] - state: ‘created’
[09:31:05.773] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:05.777] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:05.777] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:05.777]   - Field: ‘label’
[09:31:05.777]   - Field: ‘local’
[09:31:05.777]   - Field: ‘owner’
[09:31:05.777]   - Field: ‘envir’
[09:31:05.777]   - Field: ‘workers’
[09:31:05.778]   - Field: ‘packages’
[09:31:05.778]   - Field: ‘gc’
[09:31:05.778]   - Field: ‘job’
[09:31:05.778]   - Field: ‘conditions’
[09:31:05.778]   - Field: ‘expr’
[09:31:05.778]   - Field: ‘uuid’
[09:31:05.778]   - Field: ‘seed’
[09:31:05.778]   - Field: ‘version’
[09:31:05.778]   - Field: ‘result’
[09:31:05.779]   - Field: ‘asynchronous’
[09:31:05.779]   - Field: ‘calls’
[09:31:05.779]   - Field: ‘globals’
[09:31:05.779]   - Field: ‘stdout’
[09:31:05.779]   - Field: ‘earlySignal’
[09:31:05.779]   - Field: ‘lazy’
[09:31:05.779]   - Field: ‘state’
[09:31:05.779] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:05.779] - Launch lazy future ...
[09:31:05.780] Packages needed by the future expression (n = 0): <none>
[09:31:05.780] Packages needed by future strategies (n = 0): <none>
[09:31:05.780] {
[09:31:05.780]     {
[09:31:05.780]         {
[09:31:05.780]             ...future.startTime <- base::Sys.time()
[09:31:05.780]             {
[09:31:05.780]                 {
[09:31:05.780]                   {
[09:31:05.780]                     {
[09:31:05.780]                       base::local({
[09:31:05.780]                         has_future <- base::requireNamespace("future", 
[09:31:05.780]                           quietly = TRUE)
[09:31:05.780]                         if (has_future) {
[09:31:05.780]                           ns <- base::getNamespace("future")
[09:31:05.780]                           version <- ns[[".package"]][["version"]]
[09:31:05.780]                           if (is.null(version)) 
[09:31:05.780]                             version <- utils::packageVersion("future")
[09:31:05.780]                         }
[09:31:05.780]                         else {
[09:31:05.780]                           version <- NULL
[09:31:05.780]                         }
[09:31:05.780]                         if (!has_future || version < "1.8.0") {
[09:31:05.780]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.780]                             "", base::R.version$version.string), 
[09:31:05.780]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:05.780]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.780]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.780]                               "release", "version")], collapse = " "), 
[09:31:05.780]                             hostname = base::Sys.info()[["nodename"]])
[09:31:05.780]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.780]                             info)
[09:31:05.780]                           info <- base::paste(info, collapse = "; ")
[09:31:05.780]                           if (!has_future) {
[09:31:05.780]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.780]                               info)
[09:31:05.780]                           }
[09:31:05.780]                           else {
[09:31:05.780]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.780]                               info, version)
[09:31:05.780]                           }
[09:31:05.780]                           base::stop(msg)
[09:31:05.780]                         }
[09:31:05.780]                       })
[09:31:05.780]                     }
[09:31:05.780]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.780]                     base::options(mc.cores = 1L)
[09:31:05.780]                   }
[09:31:05.780]                   ...future.strategy.old <- future::plan("list")
[09:31:05.780]                   options(future.plan = NULL)
[09:31:05.780]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.780]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.780]                 }
[09:31:05.780]                 ...future.workdir <- getwd()
[09:31:05.780]             }
[09:31:05.780]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.780]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.780]         }
[09:31:05.780]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.780]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.780]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.780]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.780]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.780]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.780]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.780]             base::names(...future.oldOptions))
[09:31:05.780]     }
[09:31:05.780]     if (FALSE) {
[09:31:05.780]     }
[09:31:05.780]     else {
[09:31:05.780]         if (TRUE) {
[09:31:05.780]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.780]                 open = "w")
[09:31:05.780]         }
[09:31:05.780]         else {
[09:31:05.780]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.780]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.780]         }
[09:31:05.780]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.780]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.780]             base::sink(type = "output", split = FALSE)
[09:31:05.780]             base::close(...future.stdout)
[09:31:05.780]         }, add = TRUE)
[09:31:05.780]     }
[09:31:05.780]     ...future.frame <- base::sys.nframe()
[09:31:05.780]     ...future.conditions <- base::list()
[09:31:05.780]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.780]     if (FALSE) {
[09:31:05.780]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.780]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.780]     }
[09:31:05.780]     ...future.result <- base::tryCatch({
[09:31:05.780]         base::withCallingHandlers({
[09:31:05.780]             ...future.value <- base::withVisible(base::local({
[09:31:05.780]                 withCallingHandlers({
[09:31:05.780]                   {
[09:31:05.780]                     2 * a
[09:31:05.780]                   }
[09:31:05.780]                 }, immediateCondition = function(cond) {
[09:31:05.780]                   save_rds <- function (object, pathname, ...) 
[09:31:05.780]                   {
[09:31:05.780]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:05.780]                     if (file_test("-f", pathname_tmp)) {
[09:31:05.780]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.780]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:05.780]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.780]                         fi_tmp[["mtime"]])
[09:31:05.780]                     }
[09:31:05.780]                     tryCatch({
[09:31:05.780]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:05.780]                     }, error = function(ex) {
[09:31:05.780]                       msg <- conditionMessage(ex)
[09:31:05.780]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.780]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:05.780]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.780]                         fi_tmp[["mtime"]], msg)
[09:31:05.780]                       ex$message <- msg
[09:31:05.780]                       stop(ex)
[09:31:05.780]                     })
[09:31:05.780]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:05.780]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:05.780]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:05.780]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.780]                       fi <- file.info(pathname)
[09:31:05.780]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:05.780]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.780]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:05.780]                         fi[["size"]], fi[["mtime"]])
[09:31:05.780]                       stop(msg)
[09:31:05.780]                     }
[09:31:05.780]                     invisible(pathname)
[09:31:05.780]                   }
[09:31:05.780]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:05.780]                     rootPath = tempdir()) 
[09:31:05.780]                   {
[09:31:05.780]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:05.780]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:05.780]                       tmpdir = path, fileext = ".rds")
[09:31:05.780]                     save_rds(obj, file)
[09:31:05.780]                   }
[09:31:05.780]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9U63Nd/.future/immediateConditions")
[09:31:05.780]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.780]                   {
[09:31:05.780]                     inherits <- base::inherits
[09:31:05.780]                     invokeRestart <- base::invokeRestart
[09:31:05.780]                     is.null <- base::is.null
[09:31:05.780]                     muffled <- FALSE
[09:31:05.780]                     if (inherits(cond, "message")) {
[09:31:05.780]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.780]                       if (muffled) 
[09:31:05.780]                         invokeRestart("muffleMessage")
[09:31:05.780]                     }
[09:31:05.780]                     else if (inherits(cond, "warning")) {
[09:31:05.780]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.780]                       if (muffled) 
[09:31:05.780]                         invokeRestart("muffleWarning")
[09:31:05.780]                     }
[09:31:05.780]                     else if (inherits(cond, "condition")) {
[09:31:05.780]                       if (!is.null(pattern)) {
[09:31:05.780]                         computeRestarts <- base::computeRestarts
[09:31:05.780]                         grepl <- base::grepl
[09:31:05.780]                         restarts <- computeRestarts(cond)
[09:31:05.780]                         for (restart in restarts) {
[09:31:05.780]                           name <- restart$name
[09:31:05.780]                           if (is.null(name)) 
[09:31:05.780]                             next
[09:31:05.780]                           if (!grepl(pattern, name)) 
[09:31:05.780]                             next
[09:31:05.780]                           invokeRestart(restart)
[09:31:05.780]                           muffled <- TRUE
[09:31:05.780]                           break
[09:31:05.780]                         }
[09:31:05.780]                       }
[09:31:05.780]                     }
[09:31:05.780]                     invisible(muffled)
[09:31:05.780]                   }
[09:31:05.780]                   muffleCondition(cond)
[09:31:05.780]                 })
[09:31:05.780]             }))
[09:31:05.780]             future::FutureResult(value = ...future.value$value, 
[09:31:05.780]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.780]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.780]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.780]                     ...future.globalenv.names))
[09:31:05.780]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.780]         }, condition = base::local({
[09:31:05.780]             c <- base::c
[09:31:05.780]             inherits <- base::inherits
[09:31:05.780]             invokeRestart <- base::invokeRestart
[09:31:05.780]             length <- base::length
[09:31:05.780]             list <- base::list
[09:31:05.780]             seq.int <- base::seq.int
[09:31:05.780]             signalCondition <- base::signalCondition
[09:31:05.780]             sys.calls <- base::sys.calls
[09:31:05.780]             `[[` <- base::`[[`
[09:31:05.780]             `+` <- base::`+`
[09:31:05.780]             `<<-` <- base::`<<-`
[09:31:05.780]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.780]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.780]                   3L)]
[09:31:05.780]             }
[09:31:05.780]             function(cond) {
[09:31:05.780]                 is_error <- inherits(cond, "error")
[09:31:05.780]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.780]                   NULL)
[09:31:05.780]                 if (is_error) {
[09:31:05.780]                   sessionInformation <- function() {
[09:31:05.780]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.780]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.780]                       search = base::search(), system = base::Sys.info())
[09:31:05.780]                   }
[09:31:05.780]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.780]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.780]                     cond$call), session = sessionInformation(), 
[09:31:05.780]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.780]                   signalCondition(cond)
[09:31:05.780]                 }
[09:31:05.780]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.780]                 "immediateCondition"))) {
[09:31:05.780]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.780]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.780]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.780]                   if (TRUE && !signal) {
[09:31:05.780]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.780]                     {
[09:31:05.780]                       inherits <- base::inherits
[09:31:05.780]                       invokeRestart <- base::invokeRestart
[09:31:05.780]                       is.null <- base::is.null
[09:31:05.780]                       muffled <- FALSE
[09:31:05.780]                       if (inherits(cond, "message")) {
[09:31:05.780]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.780]                         if (muffled) 
[09:31:05.780]                           invokeRestart("muffleMessage")
[09:31:05.780]                       }
[09:31:05.780]                       else if (inherits(cond, "warning")) {
[09:31:05.780]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.780]                         if (muffled) 
[09:31:05.780]                           invokeRestart("muffleWarning")
[09:31:05.780]                       }
[09:31:05.780]                       else if (inherits(cond, "condition")) {
[09:31:05.780]                         if (!is.null(pattern)) {
[09:31:05.780]                           computeRestarts <- base::computeRestarts
[09:31:05.780]                           grepl <- base::grepl
[09:31:05.780]                           restarts <- computeRestarts(cond)
[09:31:05.780]                           for (restart in restarts) {
[09:31:05.780]                             name <- restart$name
[09:31:05.780]                             if (is.null(name)) 
[09:31:05.780]                               next
[09:31:05.780]                             if (!grepl(pattern, name)) 
[09:31:05.780]                               next
[09:31:05.780]                             invokeRestart(restart)
[09:31:05.780]                             muffled <- TRUE
[09:31:05.780]                             break
[09:31:05.780]                           }
[09:31:05.780]                         }
[09:31:05.780]                       }
[09:31:05.780]                       invisible(muffled)
[09:31:05.780]                     }
[09:31:05.780]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.780]                   }
[09:31:05.780]                 }
[09:31:05.780]                 else {
[09:31:05.780]                   if (TRUE) {
[09:31:05.780]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.780]                     {
[09:31:05.780]                       inherits <- base::inherits
[09:31:05.780]                       invokeRestart <- base::invokeRestart
[09:31:05.780]                       is.null <- base::is.null
[09:31:05.780]                       muffled <- FALSE
[09:31:05.780]                       if (inherits(cond, "message")) {
[09:31:05.780]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.780]                         if (muffled) 
[09:31:05.780]                           invokeRestart("muffleMessage")
[09:31:05.780]                       }
[09:31:05.780]                       else if (inherits(cond, "warning")) {
[09:31:05.780]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.780]                         if (muffled) 
[09:31:05.780]                           invokeRestart("muffleWarning")
[09:31:05.780]                       }
[09:31:05.780]                       else if (inherits(cond, "condition")) {
[09:31:05.780]                         if (!is.null(pattern)) {
[09:31:05.780]                           computeRestarts <- base::computeRestarts
[09:31:05.780]                           grepl <- base::grepl
[09:31:05.780]                           restarts <- computeRestarts(cond)
[09:31:05.780]                           for (restart in restarts) {
[09:31:05.780]                             name <- restart$name
[09:31:05.780]                             if (is.null(name)) 
[09:31:05.780]                               next
[09:31:05.780]                             if (!grepl(pattern, name)) 
[09:31:05.780]                               next
[09:31:05.780]                             invokeRestart(restart)
[09:31:05.780]                             muffled <- TRUE
[09:31:05.780]                             break
[09:31:05.780]                           }
[09:31:05.780]                         }
[09:31:05.780]                       }
[09:31:05.780]                       invisible(muffled)
[09:31:05.780]                     }
[09:31:05.780]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.780]                   }
[09:31:05.780]                 }
[09:31:05.780]             }
[09:31:05.780]         }))
[09:31:05.780]     }, error = function(ex) {
[09:31:05.780]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.780]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.780]                 ...future.rng), started = ...future.startTime, 
[09:31:05.780]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.780]             version = "1.8"), class = "FutureResult")
[09:31:05.780]     }, finally = {
[09:31:05.780]         if (!identical(...future.workdir, getwd())) 
[09:31:05.780]             setwd(...future.workdir)
[09:31:05.780]         {
[09:31:05.780]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.780]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.780]             }
[09:31:05.780]             base::options(...future.oldOptions)
[09:31:05.780]             if (.Platform$OS.type == "windows") {
[09:31:05.780]                 old_names <- names(...future.oldEnvVars)
[09:31:05.780]                 envs <- base::Sys.getenv()
[09:31:05.780]                 names <- names(envs)
[09:31:05.780]                 common <- intersect(names, old_names)
[09:31:05.780]                 added <- setdiff(names, old_names)
[09:31:05.780]                 removed <- setdiff(old_names, names)
[09:31:05.780]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.780]                   envs[common]]
[09:31:05.780]                 NAMES <- toupper(changed)
[09:31:05.780]                 args <- list()
[09:31:05.780]                 for (kk in seq_along(NAMES)) {
[09:31:05.780]                   name <- changed[[kk]]
[09:31:05.780]                   NAME <- NAMES[[kk]]
[09:31:05.780]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.780]                     next
[09:31:05.780]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.780]                 }
[09:31:05.780]                 NAMES <- toupper(added)
[09:31:05.780]                 for (kk in seq_along(NAMES)) {
[09:31:05.780]                   name <- added[[kk]]
[09:31:05.780]                   NAME <- NAMES[[kk]]
[09:31:05.780]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.780]                     next
[09:31:05.780]                   args[[name]] <- ""
[09:31:05.780]                 }
[09:31:05.780]                 NAMES <- toupper(removed)
[09:31:05.780]                 for (kk in seq_along(NAMES)) {
[09:31:05.780]                   name <- removed[[kk]]
[09:31:05.780]                   NAME <- NAMES[[kk]]
[09:31:05.780]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.780]                     next
[09:31:05.780]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.780]                 }
[09:31:05.780]                 if (length(args) > 0) 
[09:31:05.780]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.780]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.780]             }
[09:31:05.780]             else {
[09:31:05.780]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.780]             }
[09:31:05.780]             {
[09:31:05.780]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.780]                   0L) {
[09:31:05.780]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.780]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.780]                   base::options(opts)
[09:31:05.780]                 }
[09:31:05.780]                 {
[09:31:05.780]                   {
[09:31:05.780]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.780]                     NULL
[09:31:05.780]                   }
[09:31:05.780]                   options(future.plan = NULL)
[09:31:05.780]                   if (is.na(NA_character_)) 
[09:31:05.780]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.780]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.780]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.780]                     .init = FALSE)
[09:31:05.780]                 }
[09:31:05.780]             }
[09:31:05.780]         }
[09:31:05.780]     })
[09:31:05.780]     if (TRUE) {
[09:31:05.780]         base::sink(type = "output", split = FALSE)
[09:31:05.780]         if (TRUE) {
[09:31:05.780]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.780]         }
[09:31:05.780]         else {
[09:31:05.780]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.780]         }
[09:31:05.780]         base::close(...future.stdout)
[09:31:05.780]         ...future.stdout <- NULL
[09:31:05.780]     }
[09:31:05.780]     ...future.result$conditions <- ...future.conditions
[09:31:05.780]     ...future.result$finished <- base::Sys.time()
[09:31:05.780]     ...future.result
[09:31:05.780] }
[09:31:05.783] assign_globals() ...
[09:31:05.783] List of 1
[09:31:05.783]  $ a: num 1
[09:31:05.783]  - attr(*, "where")=List of 1
[09:31:05.783]   ..$ a:<environment: R_EmptyEnv> 
[09:31:05.783]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:05.783]  - attr(*, "resolved")= logi FALSE
[09:31:05.783]  - attr(*, "total_size")= num 56
[09:31:05.783]  - attr(*, "already-done")= logi TRUE
[09:31:05.786] - copied ‘a’ to environment
[09:31:05.786] assign_globals() ... done
[09:31:05.786] requestCore(): workers = 2
[09:31:05.788] MulticoreFuture started
[09:31:05.788] - Launch lazy future ... done
[09:31:05.788] run() for ‘MulticoreFuture’ ... done
[09:31:05.789] result() for MulticoreFuture ...
[09:31:05.789] plan(): Setting new future strategy stack:
[09:31:05.789] List of future strategies:
[09:31:05.789] 1. sequential:
[09:31:05.789]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.789]    - tweaked: FALSE
[09:31:05.789]    - call: NULL
[09:31:05.790] plan(): nbrOfWorkers() = 1
[09:31:05.796] plan(): Setting new future strategy stack:
[09:31:05.797] List of future strategies:
[09:31:05.797] 1. multicore:
[09:31:05.797]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:05.797]    - tweaked: FALSE
[09:31:05.797]    - call: plan(strategy)
[09:31:05.802] plan(): nbrOfWorkers() = 2
[09:31:05.802] result() for MulticoreFuture ...
[09:31:05.805] result() for MulticoreFuture ... done
[09:31:05.805] result() for MulticoreFuture ... done
[09:31:05.805] result() for MulticoreFuture ...
[09:31:05.806] result() for MulticoreFuture ... done
[09:31:05.806] getGlobalsAndPackages() ...
[09:31:05.806] Searching for globals...
[09:31:05.807] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:05.808] Searching for globals ... DONE
[09:31:05.808] Resolving globals: FALSE
[09:31:05.808] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:05.809] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:05.809] - globals: [1] ‘a’
[09:31:05.809] 
[09:31:05.809] getGlobalsAndPackages() ... DONE
[09:31:05.809] run() for ‘Future’ ...
[09:31:05.810] - state: ‘created’
[09:31:05.810] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:05.814] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:05.814] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:05.814]   - Field: ‘label’
[09:31:05.814]   - Field: ‘local’
[09:31:05.814]   - Field: ‘owner’
[09:31:05.814]   - Field: ‘envir’
[09:31:05.814]   - Field: ‘workers’
[09:31:05.815]   - Field: ‘packages’
[09:31:05.815]   - Field: ‘gc’
[09:31:05.815]   - Field: ‘job’
[09:31:05.815]   - Field: ‘conditions’
[09:31:05.815]   - Field: ‘expr’
[09:31:05.815]   - Field: ‘uuid’
[09:31:05.815]   - Field: ‘seed’
[09:31:05.815]   - Field: ‘version’
[09:31:05.815]   - Field: ‘result’
[09:31:05.816]   - Field: ‘asynchronous’
[09:31:05.816]   - Field: ‘calls’
[09:31:05.816]   - Field: ‘globals’
[09:31:05.816]   - Field: ‘stdout’
[09:31:05.816]   - Field: ‘earlySignal’
[09:31:05.816]   - Field: ‘lazy’
[09:31:05.816]   - Field: ‘state’
[09:31:05.816] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:05.816] - Launch lazy future ...
[09:31:05.817] Packages needed by the future expression (n = 0): <none>
[09:31:05.817] Packages needed by future strategies (n = 0): <none>
[09:31:05.817] {
[09:31:05.817]     {
[09:31:05.817]         {
[09:31:05.817]             ...future.startTime <- base::Sys.time()
[09:31:05.817]             {
[09:31:05.817]                 {
[09:31:05.817]                   {
[09:31:05.817]                     {
[09:31:05.817]                       base::local({
[09:31:05.817]                         has_future <- base::requireNamespace("future", 
[09:31:05.817]                           quietly = TRUE)
[09:31:05.817]                         if (has_future) {
[09:31:05.817]                           ns <- base::getNamespace("future")
[09:31:05.817]                           version <- ns[[".package"]][["version"]]
[09:31:05.817]                           if (is.null(version)) 
[09:31:05.817]                             version <- utils::packageVersion("future")
[09:31:05.817]                         }
[09:31:05.817]                         else {
[09:31:05.817]                           version <- NULL
[09:31:05.817]                         }
[09:31:05.817]                         if (!has_future || version < "1.8.0") {
[09:31:05.817]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.817]                             "", base::R.version$version.string), 
[09:31:05.817]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:05.817]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.817]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.817]                               "release", "version")], collapse = " "), 
[09:31:05.817]                             hostname = base::Sys.info()[["nodename"]])
[09:31:05.817]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.817]                             info)
[09:31:05.817]                           info <- base::paste(info, collapse = "; ")
[09:31:05.817]                           if (!has_future) {
[09:31:05.817]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.817]                               info)
[09:31:05.817]                           }
[09:31:05.817]                           else {
[09:31:05.817]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.817]                               info, version)
[09:31:05.817]                           }
[09:31:05.817]                           base::stop(msg)
[09:31:05.817]                         }
[09:31:05.817]                       })
[09:31:05.817]                     }
[09:31:05.817]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.817]                     base::options(mc.cores = 1L)
[09:31:05.817]                   }
[09:31:05.817]                   ...future.strategy.old <- future::plan("list")
[09:31:05.817]                   options(future.plan = NULL)
[09:31:05.817]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.817]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.817]                 }
[09:31:05.817]                 ...future.workdir <- getwd()
[09:31:05.817]             }
[09:31:05.817]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.817]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.817]         }
[09:31:05.817]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.817]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.817]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.817]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.817]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.817]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.817]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.817]             base::names(...future.oldOptions))
[09:31:05.817]     }
[09:31:05.817]     if (FALSE) {
[09:31:05.817]     }
[09:31:05.817]     else {
[09:31:05.817]         if (TRUE) {
[09:31:05.817]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.817]                 open = "w")
[09:31:05.817]         }
[09:31:05.817]         else {
[09:31:05.817]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.817]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.817]         }
[09:31:05.817]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.817]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.817]             base::sink(type = "output", split = FALSE)
[09:31:05.817]             base::close(...future.stdout)
[09:31:05.817]         }, add = TRUE)
[09:31:05.817]     }
[09:31:05.817]     ...future.frame <- base::sys.nframe()
[09:31:05.817]     ...future.conditions <- base::list()
[09:31:05.817]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.817]     if (FALSE) {
[09:31:05.817]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.817]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.817]     }
[09:31:05.817]     ...future.result <- base::tryCatch({
[09:31:05.817]         base::withCallingHandlers({
[09:31:05.817]             ...future.value <- base::withVisible(base::local({
[09:31:05.817]                 withCallingHandlers({
[09:31:05.817]                   {
[09:31:05.817]                     2 * a
[09:31:05.817]                   }
[09:31:05.817]                 }, immediateCondition = function(cond) {
[09:31:05.817]                   save_rds <- function (object, pathname, ...) 
[09:31:05.817]                   {
[09:31:05.817]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:05.817]                     if (file_test("-f", pathname_tmp)) {
[09:31:05.817]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.817]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:05.817]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.817]                         fi_tmp[["mtime"]])
[09:31:05.817]                     }
[09:31:05.817]                     tryCatch({
[09:31:05.817]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:05.817]                     }, error = function(ex) {
[09:31:05.817]                       msg <- conditionMessage(ex)
[09:31:05.817]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.817]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:05.817]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.817]                         fi_tmp[["mtime"]], msg)
[09:31:05.817]                       ex$message <- msg
[09:31:05.817]                       stop(ex)
[09:31:05.817]                     })
[09:31:05.817]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:05.817]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:05.817]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:05.817]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.817]                       fi <- file.info(pathname)
[09:31:05.817]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:05.817]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.817]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:05.817]                         fi[["size"]], fi[["mtime"]])
[09:31:05.817]                       stop(msg)
[09:31:05.817]                     }
[09:31:05.817]                     invisible(pathname)
[09:31:05.817]                   }
[09:31:05.817]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:05.817]                     rootPath = tempdir()) 
[09:31:05.817]                   {
[09:31:05.817]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:05.817]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:05.817]                       tmpdir = path, fileext = ".rds")
[09:31:05.817]                     save_rds(obj, file)
[09:31:05.817]                   }
[09:31:05.817]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9U63Nd/.future/immediateConditions")
[09:31:05.817]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.817]                   {
[09:31:05.817]                     inherits <- base::inherits
[09:31:05.817]                     invokeRestart <- base::invokeRestart
[09:31:05.817]                     is.null <- base::is.null
[09:31:05.817]                     muffled <- FALSE
[09:31:05.817]                     if (inherits(cond, "message")) {
[09:31:05.817]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.817]                       if (muffled) 
[09:31:05.817]                         invokeRestart("muffleMessage")
[09:31:05.817]                     }
[09:31:05.817]                     else if (inherits(cond, "warning")) {
[09:31:05.817]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.817]                       if (muffled) 
[09:31:05.817]                         invokeRestart("muffleWarning")
[09:31:05.817]                     }
[09:31:05.817]                     else if (inherits(cond, "condition")) {
[09:31:05.817]                       if (!is.null(pattern)) {
[09:31:05.817]                         computeRestarts <- base::computeRestarts
[09:31:05.817]                         grepl <- base::grepl
[09:31:05.817]                         restarts <- computeRestarts(cond)
[09:31:05.817]                         for (restart in restarts) {
[09:31:05.817]                           name <- restart$name
[09:31:05.817]                           if (is.null(name)) 
[09:31:05.817]                             next
[09:31:05.817]                           if (!grepl(pattern, name)) 
[09:31:05.817]                             next
[09:31:05.817]                           invokeRestart(restart)
[09:31:05.817]                           muffled <- TRUE
[09:31:05.817]                           break
[09:31:05.817]                         }
[09:31:05.817]                       }
[09:31:05.817]                     }
[09:31:05.817]                     invisible(muffled)
[09:31:05.817]                   }
[09:31:05.817]                   muffleCondition(cond)
[09:31:05.817]                 })
[09:31:05.817]             }))
[09:31:05.817]             future::FutureResult(value = ...future.value$value, 
[09:31:05.817]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.817]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.817]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.817]                     ...future.globalenv.names))
[09:31:05.817]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.817]         }, condition = base::local({
[09:31:05.817]             c <- base::c
[09:31:05.817]             inherits <- base::inherits
[09:31:05.817]             invokeRestart <- base::invokeRestart
[09:31:05.817]             length <- base::length
[09:31:05.817]             list <- base::list
[09:31:05.817]             seq.int <- base::seq.int
[09:31:05.817]             signalCondition <- base::signalCondition
[09:31:05.817]             sys.calls <- base::sys.calls
[09:31:05.817]             `[[` <- base::`[[`
[09:31:05.817]             `+` <- base::`+`
[09:31:05.817]             `<<-` <- base::`<<-`
[09:31:05.817]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.817]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.817]                   3L)]
[09:31:05.817]             }
[09:31:05.817]             function(cond) {
[09:31:05.817]                 is_error <- inherits(cond, "error")
[09:31:05.817]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.817]                   NULL)
[09:31:05.817]                 if (is_error) {
[09:31:05.817]                   sessionInformation <- function() {
[09:31:05.817]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.817]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.817]                       search = base::search(), system = base::Sys.info())
[09:31:05.817]                   }
[09:31:05.817]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.817]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.817]                     cond$call), session = sessionInformation(), 
[09:31:05.817]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.817]                   signalCondition(cond)
[09:31:05.817]                 }
[09:31:05.817]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.817]                 "immediateCondition"))) {
[09:31:05.817]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.817]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.817]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.817]                   if (TRUE && !signal) {
[09:31:05.817]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.817]                     {
[09:31:05.817]                       inherits <- base::inherits
[09:31:05.817]                       invokeRestart <- base::invokeRestart
[09:31:05.817]                       is.null <- base::is.null
[09:31:05.817]                       muffled <- FALSE
[09:31:05.817]                       if (inherits(cond, "message")) {
[09:31:05.817]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.817]                         if (muffled) 
[09:31:05.817]                           invokeRestart("muffleMessage")
[09:31:05.817]                       }
[09:31:05.817]                       else if (inherits(cond, "warning")) {
[09:31:05.817]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.817]                         if (muffled) 
[09:31:05.817]                           invokeRestart("muffleWarning")
[09:31:05.817]                       }
[09:31:05.817]                       else if (inherits(cond, "condition")) {
[09:31:05.817]                         if (!is.null(pattern)) {
[09:31:05.817]                           computeRestarts <- base::computeRestarts
[09:31:05.817]                           grepl <- base::grepl
[09:31:05.817]                           restarts <- computeRestarts(cond)
[09:31:05.817]                           for (restart in restarts) {
[09:31:05.817]                             name <- restart$name
[09:31:05.817]                             if (is.null(name)) 
[09:31:05.817]                               next
[09:31:05.817]                             if (!grepl(pattern, name)) 
[09:31:05.817]                               next
[09:31:05.817]                             invokeRestart(restart)
[09:31:05.817]                             muffled <- TRUE
[09:31:05.817]                             break
[09:31:05.817]                           }
[09:31:05.817]                         }
[09:31:05.817]                       }
[09:31:05.817]                       invisible(muffled)
[09:31:05.817]                     }
[09:31:05.817]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.817]                   }
[09:31:05.817]                 }
[09:31:05.817]                 else {
[09:31:05.817]                   if (TRUE) {
[09:31:05.817]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.817]                     {
[09:31:05.817]                       inherits <- base::inherits
[09:31:05.817]                       invokeRestart <- base::invokeRestart
[09:31:05.817]                       is.null <- base::is.null
[09:31:05.817]                       muffled <- FALSE
[09:31:05.817]                       if (inherits(cond, "message")) {
[09:31:05.817]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.817]                         if (muffled) 
[09:31:05.817]                           invokeRestart("muffleMessage")
[09:31:05.817]                       }
[09:31:05.817]                       else if (inherits(cond, "warning")) {
[09:31:05.817]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.817]                         if (muffled) 
[09:31:05.817]                           invokeRestart("muffleWarning")
[09:31:05.817]                       }
[09:31:05.817]                       else if (inherits(cond, "condition")) {
[09:31:05.817]                         if (!is.null(pattern)) {
[09:31:05.817]                           computeRestarts <- base::computeRestarts
[09:31:05.817]                           grepl <- base::grepl
[09:31:05.817]                           restarts <- computeRestarts(cond)
[09:31:05.817]                           for (restart in restarts) {
[09:31:05.817]                             name <- restart$name
[09:31:05.817]                             if (is.null(name)) 
[09:31:05.817]                               next
[09:31:05.817]                             if (!grepl(pattern, name)) 
[09:31:05.817]                               next
[09:31:05.817]                             invokeRestart(restart)
[09:31:05.817]                             muffled <- TRUE
[09:31:05.817]                             break
[09:31:05.817]                           }
[09:31:05.817]                         }
[09:31:05.817]                       }
[09:31:05.817]                       invisible(muffled)
[09:31:05.817]                     }
[09:31:05.817]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.817]                   }
[09:31:05.817]                 }
[09:31:05.817]             }
[09:31:05.817]         }))
[09:31:05.817]     }, error = function(ex) {
[09:31:05.817]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.817]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.817]                 ...future.rng), started = ...future.startTime, 
[09:31:05.817]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.817]             version = "1.8"), class = "FutureResult")
[09:31:05.817]     }, finally = {
[09:31:05.817]         if (!identical(...future.workdir, getwd())) 
[09:31:05.817]             setwd(...future.workdir)
[09:31:05.817]         {
[09:31:05.817]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.817]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.817]             }
[09:31:05.817]             base::options(...future.oldOptions)
[09:31:05.817]             if (.Platform$OS.type == "windows") {
[09:31:05.817]                 old_names <- names(...future.oldEnvVars)
[09:31:05.817]                 envs <- base::Sys.getenv()
[09:31:05.817]                 names <- names(envs)
[09:31:05.817]                 common <- intersect(names, old_names)
[09:31:05.817]                 added <- setdiff(names, old_names)
[09:31:05.817]                 removed <- setdiff(old_names, names)
[09:31:05.817]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.817]                   envs[common]]
[09:31:05.817]                 NAMES <- toupper(changed)
[09:31:05.817]                 args <- list()
[09:31:05.817]                 for (kk in seq_along(NAMES)) {
[09:31:05.817]                   name <- changed[[kk]]
[09:31:05.817]                   NAME <- NAMES[[kk]]
[09:31:05.817]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.817]                     next
[09:31:05.817]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.817]                 }
[09:31:05.817]                 NAMES <- toupper(added)
[09:31:05.817]                 for (kk in seq_along(NAMES)) {
[09:31:05.817]                   name <- added[[kk]]
[09:31:05.817]                   NAME <- NAMES[[kk]]
[09:31:05.817]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.817]                     next
[09:31:05.817]                   args[[name]] <- ""
[09:31:05.817]                 }
[09:31:05.817]                 NAMES <- toupper(removed)
[09:31:05.817]                 for (kk in seq_along(NAMES)) {
[09:31:05.817]                   name <- removed[[kk]]
[09:31:05.817]                   NAME <- NAMES[[kk]]
[09:31:05.817]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.817]                     next
[09:31:05.817]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.817]                 }
[09:31:05.817]                 if (length(args) > 0) 
[09:31:05.817]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.817]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.817]             }
[09:31:05.817]             else {
[09:31:05.817]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.817]             }
[09:31:05.817]             {
[09:31:05.817]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.817]                   0L) {
[09:31:05.817]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.817]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.817]                   base::options(opts)
[09:31:05.817]                 }
[09:31:05.817]                 {
[09:31:05.817]                   {
[09:31:05.817]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.817]                     NULL
[09:31:05.817]                   }
[09:31:05.817]                   options(future.plan = NULL)
[09:31:05.817]                   if (is.na(NA_character_)) 
[09:31:05.817]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.817]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.817]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.817]                     .init = FALSE)
[09:31:05.817]                 }
[09:31:05.817]             }
[09:31:05.817]         }
[09:31:05.817]     })
[09:31:05.817]     if (TRUE) {
[09:31:05.817]         base::sink(type = "output", split = FALSE)
[09:31:05.817]         if (TRUE) {
[09:31:05.817]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.817]         }
[09:31:05.817]         else {
[09:31:05.817]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.817]         }
[09:31:05.817]         base::close(...future.stdout)
[09:31:05.817]         ...future.stdout <- NULL
[09:31:05.817]     }
[09:31:05.817]     ...future.result$conditions <- ...future.conditions
[09:31:05.817]     ...future.result$finished <- base::Sys.time()
[09:31:05.817]     ...future.result
[09:31:05.817] }
[09:31:05.820] assign_globals() ...
[09:31:05.820] List of 1
[09:31:05.820]  $ a: num 1
[09:31:05.820]  - attr(*, "where")=List of 1
[09:31:05.820]   ..$ a:<environment: R_EmptyEnv> 
[09:31:05.820]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:05.820]  - attr(*, "resolved")= logi FALSE
[09:31:05.820]  - attr(*, "total_size")= num 56
[09:31:05.820]  - attr(*, "already-done")= logi TRUE
[09:31:05.823] - copied ‘a’ to environment
[09:31:05.823] assign_globals() ... done
[09:31:05.823] requestCore(): workers = 2
[09:31:05.825] MulticoreFuture started
[09:31:05.825] - Launch lazy future ... done
[09:31:05.825] run() for ‘MulticoreFuture’ ... done
[09:31:05.825] result() for MulticoreFuture ...
[09:31:05.826] plan(): Setting new future strategy stack:
[09:31:05.826] List of future strategies:
[09:31:05.826] 1. sequential:
[09:31:05.826]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.826]    - tweaked: FALSE
[09:31:05.826]    - call: NULL
[09:31:05.827] plan(): nbrOfWorkers() = 1
[09:31:05.829] plan(): Setting new future strategy stack:
[09:31:05.829] List of future strategies:
[09:31:05.829] 1. multicore:
[09:31:05.829]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:05.829]    - tweaked: FALSE
[09:31:05.829]    - call: plan(strategy)
[09:31:05.834] plan(): nbrOfWorkers() = 2
[09:31:05.835] result() for MulticoreFuture ...
[09:31:05.835] result() for MulticoreFuture ... done
[09:31:05.835] result() for MulticoreFuture ... done
[09:31:05.835] result() for MulticoreFuture ...
[09:31:05.835] result() for MulticoreFuture ... done
[09:31:05.836] getGlobalsAndPackages() ...
[09:31:05.836] Searching for globals...
[09:31:05.837] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:05.837] Searching for globals ... DONE
[09:31:05.837] Resolving globals: FALSE
[09:31:05.838] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:05.838] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:05.838] - globals: [1] ‘a’
[09:31:05.839] 
[09:31:05.839] getGlobalsAndPackages() ... DONE
[09:31:05.839] run() for ‘Future’ ...
[09:31:05.839] - state: ‘created’
[09:31:05.839] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:05.843] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:05.843] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:05.843]   - Field: ‘label’
[09:31:05.844]   - Field: ‘local’
[09:31:05.844]   - Field: ‘owner’
[09:31:05.844]   - Field: ‘envir’
[09:31:05.844]   - Field: ‘workers’
[09:31:05.844]   - Field: ‘packages’
[09:31:05.844]   - Field: ‘gc’
[09:31:05.844]   - Field: ‘job’
[09:31:05.844]   - Field: ‘conditions’
[09:31:05.844]   - Field: ‘expr’
[09:31:05.845]   - Field: ‘uuid’
[09:31:05.845]   - Field: ‘seed’
[09:31:05.845]   - Field: ‘version’
[09:31:05.845]   - Field: ‘result’
[09:31:05.845]   - Field: ‘asynchronous’
[09:31:05.845]   - Field: ‘calls’
[09:31:05.845]   - Field: ‘globals’
[09:31:05.845]   - Field: ‘stdout’
[09:31:05.845]   - Field: ‘earlySignal’
[09:31:05.846]   - Field: ‘lazy’
[09:31:05.846]   - Field: ‘state’
[09:31:05.846] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:05.846] - Launch lazy future ...
[09:31:05.846] Packages needed by the future expression (n = 0): <none>
[09:31:05.846] Packages needed by future strategies (n = 0): <none>
[09:31:05.847] {
[09:31:05.847]     {
[09:31:05.847]         {
[09:31:05.847]             ...future.startTime <- base::Sys.time()
[09:31:05.847]             {
[09:31:05.847]                 {
[09:31:05.847]                   {
[09:31:05.847]                     {
[09:31:05.847]                       base::local({
[09:31:05.847]                         has_future <- base::requireNamespace("future", 
[09:31:05.847]                           quietly = TRUE)
[09:31:05.847]                         if (has_future) {
[09:31:05.847]                           ns <- base::getNamespace("future")
[09:31:05.847]                           version <- ns[[".package"]][["version"]]
[09:31:05.847]                           if (is.null(version)) 
[09:31:05.847]                             version <- utils::packageVersion("future")
[09:31:05.847]                         }
[09:31:05.847]                         else {
[09:31:05.847]                           version <- NULL
[09:31:05.847]                         }
[09:31:05.847]                         if (!has_future || version < "1.8.0") {
[09:31:05.847]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.847]                             "", base::R.version$version.string), 
[09:31:05.847]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:05.847]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.847]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.847]                               "release", "version")], collapse = " "), 
[09:31:05.847]                             hostname = base::Sys.info()[["nodename"]])
[09:31:05.847]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.847]                             info)
[09:31:05.847]                           info <- base::paste(info, collapse = "; ")
[09:31:05.847]                           if (!has_future) {
[09:31:05.847]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.847]                               info)
[09:31:05.847]                           }
[09:31:05.847]                           else {
[09:31:05.847]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.847]                               info, version)
[09:31:05.847]                           }
[09:31:05.847]                           base::stop(msg)
[09:31:05.847]                         }
[09:31:05.847]                       })
[09:31:05.847]                     }
[09:31:05.847]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.847]                     base::options(mc.cores = 1L)
[09:31:05.847]                   }
[09:31:05.847]                   ...future.strategy.old <- future::plan("list")
[09:31:05.847]                   options(future.plan = NULL)
[09:31:05.847]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.847]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.847]                 }
[09:31:05.847]                 ...future.workdir <- getwd()
[09:31:05.847]             }
[09:31:05.847]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.847]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.847]         }
[09:31:05.847]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.847]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.847]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.847]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.847]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.847]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.847]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.847]             base::names(...future.oldOptions))
[09:31:05.847]     }
[09:31:05.847]     if (FALSE) {
[09:31:05.847]     }
[09:31:05.847]     else {
[09:31:05.847]         if (TRUE) {
[09:31:05.847]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.847]                 open = "w")
[09:31:05.847]         }
[09:31:05.847]         else {
[09:31:05.847]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.847]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.847]         }
[09:31:05.847]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.847]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.847]             base::sink(type = "output", split = FALSE)
[09:31:05.847]             base::close(...future.stdout)
[09:31:05.847]         }, add = TRUE)
[09:31:05.847]     }
[09:31:05.847]     ...future.frame <- base::sys.nframe()
[09:31:05.847]     ...future.conditions <- base::list()
[09:31:05.847]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.847]     if (FALSE) {
[09:31:05.847]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.847]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.847]     }
[09:31:05.847]     ...future.result <- base::tryCatch({
[09:31:05.847]         base::withCallingHandlers({
[09:31:05.847]             ...future.value <- base::withVisible(base::local({
[09:31:05.847]                 withCallingHandlers({
[09:31:05.847]                   {
[09:31:05.847]                     2 * a
[09:31:05.847]                   }
[09:31:05.847]                 }, immediateCondition = function(cond) {
[09:31:05.847]                   save_rds <- function (object, pathname, ...) 
[09:31:05.847]                   {
[09:31:05.847]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:05.847]                     if (file_test("-f", pathname_tmp)) {
[09:31:05.847]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.847]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:05.847]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.847]                         fi_tmp[["mtime"]])
[09:31:05.847]                     }
[09:31:05.847]                     tryCatch({
[09:31:05.847]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:05.847]                     }, error = function(ex) {
[09:31:05.847]                       msg <- conditionMessage(ex)
[09:31:05.847]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.847]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:05.847]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.847]                         fi_tmp[["mtime"]], msg)
[09:31:05.847]                       ex$message <- msg
[09:31:05.847]                       stop(ex)
[09:31:05.847]                     })
[09:31:05.847]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:05.847]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:05.847]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:05.847]                       fi_tmp <- file.info(pathname_tmp)
[09:31:05.847]                       fi <- file.info(pathname)
[09:31:05.847]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:05.847]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:05.847]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:05.847]                         fi[["size"]], fi[["mtime"]])
[09:31:05.847]                       stop(msg)
[09:31:05.847]                     }
[09:31:05.847]                     invisible(pathname)
[09:31:05.847]                   }
[09:31:05.847]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:05.847]                     rootPath = tempdir()) 
[09:31:05.847]                   {
[09:31:05.847]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:05.847]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:05.847]                       tmpdir = path, fileext = ".rds")
[09:31:05.847]                     save_rds(obj, file)
[09:31:05.847]                   }
[09:31:05.847]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9U63Nd/.future/immediateConditions")
[09:31:05.847]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.847]                   {
[09:31:05.847]                     inherits <- base::inherits
[09:31:05.847]                     invokeRestart <- base::invokeRestart
[09:31:05.847]                     is.null <- base::is.null
[09:31:05.847]                     muffled <- FALSE
[09:31:05.847]                     if (inherits(cond, "message")) {
[09:31:05.847]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.847]                       if (muffled) 
[09:31:05.847]                         invokeRestart("muffleMessage")
[09:31:05.847]                     }
[09:31:05.847]                     else if (inherits(cond, "warning")) {
[09:31:05.847]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.847]                       if (muffled) 
[09:31:05.847]                         invokeRestart("muffleWarning")
[09:31:05.847]                     }
[09:31:05.847]                     else if (inherits(cond, "condition")) {
[09:31:05.847]                       if (!is.null(pattern)) {
[09:31:05.847]                         computeRestarts <- base::computeRestarts
[09:31:05.847]                         grepl <- base::grepl
[09:31:05.847]                         restarts <- computeRestarts(cond)
[09:31:05.847]                         for (restart in restarts) {
[09:31:05.847]                           name <- restart$name
[09:31:05.847]                           if (is.null(name)) 
[09:31:05.847]                             next
[09:31:05.847]                           if (!grepl(pattern, name)) 
[09:31:05.847]                             next
[09:31:05.847]                           invokeRestart(restart)
[09:31:05.847]                           muffled <- TRUE
[09:31:05.847]                           break
[09:31:05.847]                         }
[09:31:05.847]                       }
[09:31:05.847]                     }
[09:31:05.847]                     invisible(muffled)
[09:31:05.847]                   }
[09:31:05.847]                   muffleCondition(cond)
[09:31:05.847]                 })
[09:31:05.847]             }))
[09:31:05.847]             future::FutureResult(value = ...future.value$value, 
[09:31:05.847]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.847]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.847]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.847]                     ...future.globalenv.names))
[09:31:05.847]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.847]         }, condition = base::local({
[09:31:05.847]             c <- base::c
[09:31:05.847]             inherits <- base::inherits
[09:31:05.847]             invokeRestart <- base::invokeRestart
[09:31:05.847]             length <- base::length
[09:31:05.847]             list <- base::list
[09:31:05.847]             seq.int <- base::seq.int
[09:31:05.847]             signalCondition <- base::signalCondition
[09:31:05.847]             sys.calls <- base::sys.calls
[09:31:05.847]             `[[` <- base::`[[`
[09:31:05.847]             `+` <- base::`+`
[09:31:05.847]             `<<-` <- base::`<<-`
[09:31:05.847]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.847]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.847]                   3L)]
[09:31:05.847]             }
[09:31:05.847]             function(cond) {
[09:31:05.847]                 is_error <- inherits(cond, "error")
[09:31:05.847]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.847]                   NULL)
[09:31:05.847]                 if (is_error) {
[09:31:05.847]                   sessionInformation <- function() {
[09:31:05.847]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.847]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.847]                       search = base::search(), system = base::Sys.info())
[09:31:05.847]                   }
[09:31:05.847]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.847]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.847]                     cond$call), session = sessionInformation(), 
[09:31:05.847]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.847]                   signalCondition(cond)
[09:31:05.847]                 }
[09:31:05.847]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.847]                 "immediateCondition"))) {
[09:31:05.847]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.847]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.847]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.847]                   if (TRUE && !signal) {
[09:31:05.847]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.847]                     {
[09:31:05.847]                       inherits <- base::inherits
[09:31:05.847]                       invokeRestart <- base::invokeRestart
[09:31:05.847]                       is.null <- base::is.null
[09:31:05.847]                       muffled <- FALSE
[09:31:05.847]                       if (inherits(cond, "message")) {
[09:31:05.847]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.847]                         if (muffled) 
[09:31:05.847]                           invokeRestart("muffleMessage")
[09:31:05.847]                       }
[09:31:05.847]                       else if (inherits(cond, "warning")) {
[09:31:05.847]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.847]                         if (muffled) 
[09:31:05.847]                           invokeRestart("muffleWarning")
[09:31:05.847]                       }
[09:31:05.847]                       else if (inherits(cond, "condition")) {
[09:31:05.847]                         if (!is.null(pattern)) {
[09:31:05.847]                           computeRestarts <- base::computeRestarts
[09:31:05.847]                           grepl <- base::grepl
[09:31:05.847]                           restarts <- computeRestarts(cond)
[09:31:05.847]                           for (restart in restarts) {
[09:31:05.847]                             name <- restart$name
[09:31:05.847]                             if (is.null(name)) 
[09:31:05.847]                               next
[09:31:05.847]                             if (!grepl(pattern, name)) 
[09:31:05.847]                               next
[09:31:05.847]                             invokeRestart(restart)
[09:31:05.847]                             muffled <- TRUE
[09:31:05.847]                             break
[09:31:05.847]                           }
[09:31:05.847]                         }
[09:31:05.847]                       }
[09:31:05.847]                       invisible(muffled)
[09:31:05.847]                     }
[09:31:05.847]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.847]                   }
[09:31:05.847]                 }
[09:31:05.847]                 else {
[09:31:05.847]                   if (TRUE) {
[09:31:05.847]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.847]                     {
[09:31:05.847]                       inherits <- base::inherits
[09:31:05.847]                       invokeRestart <- base::invokeRestart
[09:31:05.847]                       is.null <- base::is.null
[09:31:05.847]                       muffled <- FALSE
[09:31:05.847]                       if (inherits(cond, "message")) {
[09:31:05.847]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.847]                         if (muffled) 
[09:31:05.847]                           invokeRestart("muffleMessage")
[09:31:05.847]                       }
[09:31:05.847]                       else if (inherits(cond, "warning")) {
[09:31:05.847]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.847]                         if (muffled) 
[09:31:05.847]                           invokeRestart("muffleWarning")
[09:31:05.847]                       }
[09:31:05.847]                       else if (inherits(cond, "condition")) {
[09:31:05.847]                         if (!is.null(pattern)) {
[09:31:05.847]                           computeRestarts <- base::computeRestarts
[09:31:05.847]                           grepl <- base::grepl
[09:31:05.847]                           restarts <- computeRestarts(cond)
[09:31:05.847]                           for (restart in restarts) {
[09:31:05.847]                             name <- restart$name
[09:31:05.847]                             if (is.null(name)) 
[09:31:05.847]                               next
[09:31:05.847]                             if (!grepl(pattern, name)) 
[09:31:05.847]                               next
[09:31:05.847]                             invokeRestart(restart)
[09:31:05.847]                             muffled <- TRUE
[09:31:05.847]                             break
[09:31:05.847]                           }
[09:31:05.847]                         }
[09:31:05.847]                       }
[09:31:05.847]                       invisible(muffled)
[09:31:05.847]                     }
[09:31:05.847]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.847]                   }
[09:31:05.847]                 }
[09:31:05.847]             }
[09:31:05.847]         }))
[09:31:05.847]     }, error = function(ex) {
[09:31:05.847]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.847]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.847]                 ...future.rng), started = ...future.startTime, 
[09:31:05.847]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.847]             version = "1.8"), class = "FutureResult")
[09:31:05.847]     }, finally = {
[09:31:05.847]         if (!identical(...future.workdir, getwd())) 
[09:31:05.847]             setwd(...future.workdir)
[09:31:05.847]         {
[09:31:05.847]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.847]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.847]             }
[09:31:05.847]             base::options(...future.oldOptions)
[09:31:05.847]             if (.Platform$OS.type == "windows") {
[09:31:05.847]                 old_names <- names(...future.oldEnvVars)
[09:31:05.847]                 envs <- base::Sys.getenv()
[09:31:05.847]                 names <- names(envs)
[09:31:05.847]                 common <- intersect(names, old_names)
[09:31:05.847]                 added <- setdiff(names, old_names)
[09:31:05.847]                 removed <- setdiff(old_names, names)
[09:31:05.847]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.847]                   envs[common]]
[09:31:05.847]                 NAMES <- toupper(changed)
[09:31:05.847]                 args <- list()
[09:31:05.847]                 for (kk in seq_along(NAMES)) {
[09:31:05.847]                   name <- changed[[kk]]
[09:31:05.847]                   NAME <- NAMES[[kk]]
[09:31:05.847]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.847]                     next
[09:31:05.847]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.847]                 }
[09:31:05.847]                 NAMES <- toupper(added)
[09:31:05.847]                 for (kk in seq_along(NAMES)) {
[09:31:05.847]                   name <- added[[kk]]
[09:31:05.847]                   NAME <- NAMES[[kk]]
[09:31:05.847]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.847]                     next
[09:31:05.847]                   args[[name]] <- ""
[09:31:05.847]                 }
[09:31:05.847]                 NAMES <- toupper(removed)
[09:31:05.847]                 for (kk in seq_along(NAMES)) {
[09:31:05.847]                   name <- removed[[kk]]
[09:31:05.847]                   NAME <- NAMES[[kk]]
[09:31:05.847]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.847]                     next
[09:31:05.847]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.847]                 }
[09:31:05.847]                 if (length(args) > 0) 
[09:31:05.847]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.847]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.847]             }
[09:31:05.847]             else {
[09:31:05.847]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.847]             }
[09:31:05.847]             {
[09:31:05.847]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.847]                   0L) {
[09:31:05.847]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.847]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.847]                   base::options(opts)
[09:31:05.847]                 }
[09:31:05.847]                 {
[09:31:05.847]                   {
[09:31:05.847]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.847]                     NULL
[09:31:05.847]                   }
[09:31:05.847]                   options(future.plan = NULL)
[09:31:05.847]                   if (is.na(NA_character_)) 
[09:31:05.847]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.847]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.847]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.847]                     .init = FALSE)
[09:31:05.847]                 }
[09:31:05.847]             }
[09:31:05.847]         }
[09:31:05.847]     })
[09:31:05.847]     if (TRUE) {
[09:31:05.847]         base::sink(type = "output", split = FALSE)
[09:31:05.847]         if (TRUE) {
[09:31:05.847]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.847]         }
[09:31:05.847]         else {
[09:31:05.847]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.847]         }
[09:31:05.847]         base::close(...future.stdout)
[09:31:05.847]         ...future.stdout <- NULL
[09:31:05.847]     }
[09:31:05.847]     ...future.result$conditions <- ...future.conditions
[09:31:05.847]     ...future.result$finished <- base::Sys.time()
[09:31:05.847]     ...future.result
[09:31:05.847] }
[09:31:05.849] assign_globals() ...
[09:31:05.849] List of 1
[09:31:05.849]  $ a: num 1
[09:31:05.849]  - attr(*, "where")=List of 1
[09:31:05.849]   ..$ a:<environment: R_EmptyEnv> 
[09:31:05.849]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:05.849]  - attr(*, "resolved")= logi FALSE
[09:31:05.849]  - attr(*, "total_size")= num 56
[09:31:05.849]  - attr(*, "already-done")= logi TRUE
[09:31:05.852] - copied ‘a’ to environment
[09:31:05.852] assign_globals() ... done
[09:31:05.853] requestCore(): workers = 2
[09:31:05.854] MulticoreFuture started
[09:31:05.855] - Launch lazy future ... done
[09:31:05.855] run() for ‘MulticoreFuture’ ... done
[09:31:05.855] result() for MulticoreFuture ...
[09:31:05.855] plan(): Setting new future strategy stack:
[09:31:05.856] List of future strategies:
[09:31:05.856] 1. sequential:
[09:31:05.856]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.856]    - tweaked: FALSE
[09:31:05.856]    - call: NULL
[09:31:05.857] plan(): nbrOfWorkers() = 1
[09:31:05.858] plan(): Setting new future strategy stack:
[09:31:05.859] List of future strategies:
[09:31:05.859] 1. multicore:
[09:31:05.859]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:05.859]    - tweaked: FALSE
[09:31:05.859]    - call: plan(strategy)
[09:31:05.863] plan(): nbrOfWorkers() = 2
[09:31:05.864] result() for MulticoreFuture ...
[09:31:05.864] result() for MulticoreFuture ... done
[09:31:05.865] result() for MulticoreFuture ... done
[09:31:05.865] result() for MulticoreFuture ...
[09:31:05.865] result() for MulticoreFuture ... done
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[09:31:05.866] plan(): Setting new future strategy stack:
[09:31:05.866] List of future strategies:
[09:31:05.866] 1. multisession:
[09:31:05.866]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:05.866]    - tweaked: FALSE
[09:31:05.866]    - call: plan(strategy)
[09:31:05.866] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:31:05.866] multisession:
[09:31:05.866] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:05.866] - tweaked: FALSE
[09:31:05.866] - call: plan(strategy)
[09:31:05.875] getGlobalsAndPackages() ...
[09:31:05.876] Not searching for globals
[09:31:05.876] - globals: [0] <none>
[09:31:05.876] getGlobalsAndPackages() ... DONE
[09:31:05.877] [local output] makeClusterPSOCK() ...
[09:31:05.919] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:31:05.921] [local output] Base port: 11725
[09:31:05.921] [local output] Getting setup options for 2 cluster nodes ...
[09:31:05.921] [local output]  - Node 1 of 2 ...
[09:31:05.921] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:05.922] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp9U63Nd/worker.rank=1.parallelly.parent=41434.a1da76c6dfe2.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp9U63Nd/worker.rank=1.parallelly.parent=41434.a1da76c6dfe2.pid")'’
[09:31:06.107] - Possible to infer worker's PID: TRUE
[09:31:06.107] [local output] Rscript port: 11725

[09:31:06.108] [local output]  - Node 2 of 2 ...
[09:31:06.108] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:06.109] [local output] Rscript port: 11725

[09:31:06.109] [local output] Getting setup options for 2 cluster nodes ... done
[09:31:06.109] [local output]  - Parallel setup requested for some PSOCK nodes
[09:31:06.110] [local output] Setting up PSOCK nodes in parallel
[09:31:06.110] List of 36
[09:31:06.110]  $ worker          : chr "localhost"
[09:31:06.110]   ..- attr(*, "localhost")= logi TRUE
[09:31:06.110]  $ master          : chr "localhost"
[09:31:06.110]  $ port            : int 11725
[09:31:06.110]  $ connectTimeout  : num 120
[09:31:06.110]  $ timeout         : num 2592000
[09:31:06.110]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:31:06.110]  $ homogeneous     : logi TRUE
[09:31:06.110]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:31:06.110]  $ rscript_envs    : NULL
[09:31:06.110]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:06.110]  $ rscript_startup : NULL
[09:31:06.110]  $ rscript_sh      : chr "sh"
[09:31:06.110]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:06.110]  $ methods         : logi TRUE
[09:31:06.110]  $ socketOptions   : chr "no-delay"
[09:31:06.110]  $ useXDR          : logi FALSE
[09:31:06.110]  $ outfile         : chr "/dev/null"
[09:31:06.110]  $ renice          : int NA
[09:31:06.110]  $ rshcmd          : NULL
[09:31:06.110]  $ user            : chr(0) 
[09:31:06.110]  $ revtunnel       : logi FALSE
[09:31:06.110]  $ rshlogfile      : NULL
[09:31:06.110]  $ rshopts         : chr(0) 
[09:31:06.110]  $ rank            : int 1
[09:31:06.110]  $ manual          : logi FALSE
[09:31:06.110]  $ dryrun          : logi FALSE
[09:31:06.110]  $ quiet           : logi FALSE
[09:31:06.110]  $ setup_strategy  : chr "parallel"
[09:31:06.110]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:06.110]  $ pidfile         : chr "/tmp/Rtmp9U63Nd/worker.rank=1.parallelly.parent=41434.a1da76c6dfe2.pid"
[09:31:06.110]  $ rshcmd_label    : NULL
[09:31:06.110]  $ rsh_call        : NULL
[09:31:06.110]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:06.110]  $ localMachine    : logi TRUE
[09:31:06.110]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:31:06.110]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:31:06.110]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:31:06.110]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:31:06.110]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:31:06.110]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:31:06.110]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:31:06.110]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:31:06.110]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:31:06.110]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:31:06.110]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:31:06.110]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:31:06.110]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:31:06.110]  $ arguments       :List of 28
[09:31:06.110]   ..$ worker          : chr "localhost"
[09:31:06.110]   ..$ master          : NULL
[09:31:06.110]   ..$ port            : int 11725
[09:31:06.110]   ..$ connectTimeout  : num 120
[09:31:06.110]   ..$ timeout         : num 2592000
[09:31:06.110]   ..$ rscript         : NULL
[09:31:06.110]   ..$ homogeneous     : NULL
[09:31:06.110]   ..$ rscript_args    : NULL
[09:31:06.110]   ..$ rscript_envs    : NULL
[09:31:06.110]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:06.110]   ..$ rscript_startup : NULL
[09:31:06.110]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:31:06.110]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:06.110]   ..$ methods         : logi TRUE
[09:31:06.110]   ..$ socketOptions   : chr "no-delay"
[09:31:06.110]   ..$ useXDR          : logi FALSE
[09:31:06.110]   ..$ outfile         : chr "/dev/null"
[09:31:06.110]   ..$ renice          : int NA
[09:31:06.110]   ..$ rshcmd          : NULL
[09:31:06.110]   ..$ user            : NULL
[09:31:06.110]   ..$ revtunnel       : logi NA
[09:31:06.110]   ..$ rshlogfile      : NULL
[09:31:06.110]   ..$ rshopts         : NULL
[09:31:06.110]   ..$ rank            : int 1
[09:31:06.110]   ..$ manual          : logi FALSE
[09:31:06.110]   ..$ dryrun          : logi FALSE
[09:31:06.110]   ..$ quiet           : logi FALSE
[09:31:06.110]   ..$ setup_strategy  : chr "parallel"
[09:31:06.110]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:31:06.126] [local output] System call to launch all workers:
[09:31:06.126] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp9U63Nd/worker.rank=1.parallelly.parent=41434.a1da76c6dfe2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11725 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:31:06.126] [local output] Starting PSOCK main server
[09:31:06.132] [local output] Workers launched
[09:31:06.132] [local output] Waiting for workers to connect back
[09:31:06.132]  - [local output] 0 workers out of 2 ready
[09:31:06.367]  - [local output] 0 workers out of 2 ready
[09:31:06.367]  - [local output] 1 workers out of 2 ready
[09:31:06.376]  - [local output] 1 workers out of 2 ready
[09:31:06.377]  - [local output] 2 workers out of 2 ready
[09:31:06.377] [local output] Launching of workers completed
[09:31:06.377] [local output] Collecting session information from workers
[09:31:06.378] [local output]  - Worker #1 of 2
[09:31:06.378] [local output]  - Worker #2 of 2
[09:31:06.378] [local output] makeClusterPSOCK() ... done
[09:31:06.391] Packages needed by the future expression (n = 0): <none>
[09:31:06.391] Packages needed by future strategies (n = 0): <none>
[09:31:06.391] {
[09:31:06.391]     {
[09:31:06.391]         {
[09:31:06.391]             ...future.startTime <- base::Sys.time()
[09:31:06.391]             {
[09:31:06.391]                 {
[09:31:06.391]                   {
[09:31:06.391]                     {
[09:31:06.391]                       base::local({
[09:31:06.391]                         has_future <- base::requireNamespace("future", 
[09:31:06.391]                           quietly = TRUE)
[09:31:06.391]                         if (has_future) {
[09:31:06.391]                           ns <- base::getNamespace("future")
[09:31:06.391]                           version <- ns[[".package"]][["version"]]
[09:31:06.391]                           if (is.null(version)) 
[09:31:06.391]                             version <- utils::packageVersion("future")
[09:31:06.391]                         }
[09:31:06.391]                         else {
[09:31:06.391]                           version <- NULL
[09:31:06.391]                         }
[09:31:06.391]                         if (!has_future || version < "1.8.0") {
[09:31:06.391]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:06.391]                             "", base::R.version$version.string), 
[09:31:06.391]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:06.391]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:06.391]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:06.391]                               "release", "version")], collapse = " "), 
[09:31:06.391]                             hostname = base::Sys.info()[["nodename"]])
[09:31:06.391]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:06.391]                             info)
[09:31:06.391]                           info <- base::paste(info, collapse = "; ")
[09:31:06.391]                           if (!has_future) {
[09:31:06.391]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:06.391]                               info)
[09:31:06.391]                           }
[09:31:06.391]                           else {
[09:31:06.391]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:06.391]                               info, version)
[09:31:06.391]                           }
[09:31:06.391]                           base::stop(msg)
[09:31:06.391]                         }
[09:31:06.391]                       })
[09:31:06.391]                     }
[09:31:06.391]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:06.391]                     base::options(mc.cores = 1L)
[09:31:06.391]                   }
[09:31:06.391]                   ...future.strategy.old <- future::plan("list")
[09:31:06.391]                   options(future.plan = NULL)
[09:31:06.391]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.391]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:06.391]                 }
[09:31:06.391]                 ...future.workdir <- getwd()
[09:31:06.391]             }
[09:31:06.391]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:06.391]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:06.391]         }
[09:31:06.391]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:06.391]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:06.391]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:06.391]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:06.391]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:06.391]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:06.391]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:06.391]             base::names(...future.oldOptions))
[09:31:06.391]     }
[09:31:06.391]     if (FALSE) {
[09:31:06.391]     }
[09:31:06.391]     else {
[09:31:06.391]         if (TRUE) {
[09:31:06.391]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:06.391]                 open = "w")
[09:31:06.391]         }
[09:31:06.391]         else {
[09:31:06.391]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:06.391]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:06.391]         }
[09:31:06.391]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:06.391]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:06.391]             base::sink(type = "output", split = FALSE)
[09:31:06.391]             base::close(...future.stdout)
[09:31:06.391]         }, add = TRUE)
[09:31:06.391]     }
[09:31:06.391]     ...future.frame <- base::sys.nframe()
[09:31:06.391]     ...future.conditions <- base::list()
[09:31:06.391]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:06.391]     if (FALSE) {
[09:31:06.391]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:06.391]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:06.391]     }
[09:31:06.391]     ...future.result <- base::tryCatch({
[09:31:06.391]         base::withCallingHandlers({
[09:31:06.391]             ...future.value <- base::withVisible(base::local({
[09:31:06.391]                 ...future.makeSendCondition <- base::local({
[09:31:06.391]                   sendCondition <- NULL
[09:31:06.391]                   function(frame = 1L) {
[09:31:06.391]                     if (is.function(sendCondition)) 
[09:31:06.391]                       return(sendCondition)
[09:31:06.391]                     ns <- getNamespace("parallel")
[09:31:06.391]                     if (exists("sendData", mode = "function", 
[09:31:06.391]                       envir = ns)) {
[09:31:06.391]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:06.391]                         envir = ns)
[09:31:06.391]                       envir <- sys.frame(frame)
[09:31:06.391]                       master <- NULL
[09:31:06.391]                       while (!identical(envir, .GlobalEnv) && 
[09:31:06.391]                         !identical(envir, emptyenv())) {
[09:31:06.391]                         if (exists("master", mode = "list", envir = envir, 
[09:31:06.391]                           inherits = FALSE)) {
[09:31:06.391]                           master <- get("master", mode = "list", 
[09:31:06.391]                             envir = envir, inherits = FALSE)
[09:31:06.391]                           if (inherits(master, c("SOCKnode", 
[09:31:06.391]                             "SOCK0node"))) {
[09:31:06.391]                             sendCondition <<- function(cond) {
[09:31:06.391]                               data <- list(type = "VALUE", value = cond, 
[09:31:06.391]                                 success = TRUE)
[09:31:06.391]                               parallel_sendData(master, data)
[09:31:06.391]                             }
[09:31:06.391]                             return(sendCondition)
[09:31:06.391]                           }
[09:31:06.391]                         }
[09:31:06.391]                         frame <- frame + 1L
[09:31:06.391]                         envir <- sys.frame(frame)
[09:31:06.391]                       }
[09:31:06.391]                     }
[09:31:06.391]                     sendCondition <<- function(cond) NULL
[09:31:06.391]                   }
[09:31:06.391]                 })
[09:31:06.391]                 withCallingHandlers({
[09:31:06.391]                   NA
[09:31:06.391]                 }, immediateCondition = function(cond) {
[09:31:06.391]                   sendCondition <- ...future.makeSendCondition()
[09:31:06.391]                   sendCondition(cond)
[09:31:06.391]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.391]                   {
[09:31:06.391]                     inherits <- base::inherits
[09:31:06.391]                     invokeRestart <- base::invokeRestart
[09:31:06.391]                     is.null <- base::is.null
[09:31:06.391]                     muffled <- FALSE
[09:31:06.391]                     if (inherits(cond, "message")) {
[09:31:06.391]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:06.391]                       if (muffled) 
[09:31:06.391]                         invokeRestart("muffleMessage")
[09:31:06.391]                     }
[09:31:06.391]                     else if (inherits(cond, "warning")) {
[09:31:06.391]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:06.391]                       if (muffled) 
[09:31:06.391]                         invokeRestart("muffleWarning")
[09:31:06.391]                     }
[09:31:06.391]                     else if (inherits(cond, "condition")) {
[09:31:06.391]                       if (!is.null(pattern)) {
[09:31:06.391]                         computeRestarts <- base::computeRestarts
[09:31:06.391]                         grepl <- base::grepl
[09:31:06.391]                         restarts <- computeRestarts(cond)
[09:31:06.391]                         for (restart in restarts) {
[09:31:06.391]                           name <- restart$name
[09:31:06.391]                           if (is.null(name)) 
[09:31:06.391]                             next
[09:31:06.391]                           if (!grepl(pattern, name)) 
[09:31:06.391]                             next
[09:31:06.391]                           invokeRestart(restart)
[09:31:06.391]                           muffled <- TRUE
[09:31:06.391]                           break
[09:31:06.391]                         }
[09:31:06.391]                       }
[09:31:06.391]                     }
[09:31:06.391]                     invisible(muffled)
[09:31:06.391]                   }
[09:31:06.391]                   muffleCondition(cond)
[09:31:06.391]                 })
[09:31:06.391]             }))
[09:31:06.391]             future::FutureResult(value = ...future.value$value, 
[09:31:06.391]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.391]                   ...future.rng), globalenv = if (FALSE) 
[09:31:06.391]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:06.391]                     ...future.globalenv.names))
[09:31:06.391]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:06.391]         }, condition = base::local({
[09:31:06.391]             c <- base::c
[09:31:06.391]             inherits <- base::inherits
[09:31:06.391]             invokeRestart <- base::invokeRestart
[09:31:06.391]             length <- base::length
[09:31:06.391]             list <- base::list
[09:31:06.391]             seq.int <- base::seq.int
[09:31:06.391]             signalCondition <- base::signalCondition
[09:31:06.391]             sys.calls <- base::sys.calls
[09:31:06.391]             `[[` <- base::`[[`
[09:31:06.391]             `+` <- base::`+`
[09:31:06.391]             `<<-` <- base::`<<-`
[09:31:06.391]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:06.391]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:06.391]                   3L)]
[09:31:06.391]             }
[09:31:06.391]             function(cond) {
[09:31:06.391]                 is_error <- inherits(cond, "error")
[09:31:06.391]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:06.391]                   NULL)
[09:31:06.391]                 if (is_error) {
[09:31:06.391]                   sessionInformation <- function() {
[09:31:06.391]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:06.391]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:06.391]                       search = base::search(), system = base::Sys.info())
[09:31:06.391]                   }
[09:31:06.391]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.391]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:06.391]                     cond$call), session = sessionInformation(), 
[09:31:06.391]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:06.391]                   signalCondition(cond)
[09:31:06.391]                 }
[09:31:06.391]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:06.391]                 "immediateCondition"))) {
[09:31:06.391]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:06.391]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.391]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:06.391]                   if (TRUE && !signal) {
[09:31:06.391]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.391]                     {
[09:31:06.391]                       inherits <- base::inherits
[09:31:06.391]                       invokeRestart <- base::invokeRestart
[09:31:06.391]                       is.null <- base::is.null
[09:31:06.391]                       muffled <- FALSE
[09:31:06.391]                       if (inherits(cond, "message")) {
[09:31:06.391]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.391]                         if (muffled) 
[09:31:06.391]                           invokeRestart("muffleMessage")
[09:31:06.391]                       }
[09:31:06.391]                       else if (inherits(cond, "warning")) {
[09:31:06.391]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.391]                         if (muffled) 
[09:31:06.391]                           invokeRestart("muffleWarning")
[09:31:06.391]                       }
[09:31:06.391]                       else if (inherits(cond, "condition")) {
[09:31:06.391]                         if (!is.null(pattern)) {
[09:31:06.391]                           computeRestarts <- base::computeRestarts
[09:31:06.391]                           grepl <- base::grepl
[09:31:06.391]                           restarts <- computeRestarts(cond)
[09:31:06.391]                           for (restart in restarts) {
[09:31:06.391]                             name <- restart$name
[09:31:06.391]                             if (is.null(name)) 
[09:31:06.391]                               next
[09:31:06.391]                             if (!grepl(pattern, name)) 
[09:31:06.391]                               next
[09:31:06.391]                             invokeRestart(restart)
[09:31:06.391]                             muffled <- TRUE
[09:31:06.391]                             break
[09:31:06.391]                           }
[09:31:06.391]                         }
[09:31:06.391]                       }
[09:31:06.391]                       invisible(muffled)
[09:31:06.391]                     }
[09:31:06.391]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.391]                   }
[09:31:06.391]                 }
[09:31:06.391]                 else {
[09:31:06.391]                   if (TRUE) {
[09:31:06.391]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.391]                     {
[09:31:06.391]                       inherits <- base::inherits
[09:31:06.391]                       invokeRestart <- base::invokeRestart
[09:31:06.391]                       is.null <- base::is.null
[09:31:06.391]                       muffled <- FALSE
[09:31:06.391]                       if (inherits(cond, "message")) {
[09:31:06.391]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.391]                         if (muffled) 
[09:31:06.391]                           invokeRestart("muffleMessage")
[09:31:06.391]                       }
[09:31:06.391]                       else if (inherits(cond, "warning")) {
[09:31:06.391]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.391]                         if (muffled) 
[09:31:06.391]                           invokeRestart("muffleWarning")
[09:31:06.391]                       }
[09:31:06.391]                       else if (inherits(cond, "condition")) {
[09:31:06.391]                         if (!is.null(pattern)) {
[09:31:06.391]                           computeRestarts <- base::computeRestarts
[09:31:06.391]                           grepl <- base::grepl
[09:31:06.391]                           restarts <- computeRestarts(cond)
[09:31:06.391]                           for (restart in restarts) {
[09:31:06.391]                             name <- restart$name
[09:31:06.391]                             if (is.null(name)) 
[09:31:06.391]                               next
[09:31:06.391]                             if (!grepl(pattern, name)) 
[09:31:06.391]                               next
[09:31:06.391]                             invokeRestart(restart)
[09:31:06.391]                             muffled <- TRUE
[09:31:06.391]                             break
[09:31:06.391]                           }
[09:31:06.391]                         }
[09:31:06.391]                       }
[09:31:06.391]                       invisible(muffled)
[09:31:06.391]                     }
[09:31:06.391]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.391]                   }
[09:31:06.391]                 }
[09:31:06.391]             }
[09:31:06.391]         }))
[09:31:06.391]     }, error = function(ex) {
[09:31:06.391]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:06.391]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.391]                 ...future.rng), started = ...future.startTime, 
[09:31:06.391]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:06.391]             version = "1.8"), class = "FutureResult")
[09:31:06.391]     }, finally = {
[09:31:06.391]         if (!identical(...future.workdir, getwd())) 
[09:31:06.391]             setwd(...future.workdir)
[09:31:06.391]         {
[09:31:06.391]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:06.391]                 ...future.oldOptions$nwarnings <- NULL
[09:31:06.391]             }
[09:31:06.391]             base::options(...future.oldOptions)
[09:31:06.391]             if (.Platform$OS.type == "windows") {
[09:31:06.391]                 old_names <- names(...future.oldEnvVars)
[09:31:06.391]                 envs <- base::Sys.getenv()
[09:31:06.391]                 names <- names(envs)
[09:31:06.391]                 common <- intersect(names, old_names)
[09:31:06.391]                 added <- setdiff(names, old_names)
[09:31:06.391]                 removed <- setdiff(old_names, names)
[09:31:06.391]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:06.391]                   envs[common]]
[09:31:06.391]                 NAMES <- toupper(changed)
[09:31:06.391]                 args <- list()
[09:31:06.391]                 for (kk in seq_along(NAMES)) {
[09:31:06.391]                   name <- changed[[kk]]
[09:31:06.391]                   NAME <- NAMES[[kk]]
[09:31:06.391]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.391]                     next
[09:31:06.391]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.391]                 }
[09:31:06.391]                 NAMES <- toupper(added)
[09:31:06.391]                 for (kk in seq_along(NAMES)) {
[09:31:06.391]                   name <- added[[kk]]
[09:31:06.391]                   NAME <- NAMES[[kk]]
[09:31:06.391]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.391]                     next
[09:31:06.391]                   args[[name]] <- ""
[09:31:06.391]                 }
[09:31:06.391]                 NAMES <- toupper(removed)
[09:31:06.391]                 for (kk in seq_along(NAMES)) {
[09:31:06.391]                   name <- removed[[kk]]
[09:31:06.391]                   NAME <- NAMES[[kk]]
[09:31:06.391]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.391]                     next
[09:31:06.391]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.391]                 }
[09:31:06.391]                 if (length(args) > 0) 
[09:31:06.391]                   base::do.call(base::Sys.setenv, args = args)
[09:31:06.391]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:06.391]             }
[09:31:06.391]             else {
[09:31:06.391]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:06.391]             }
[09:31:06.391]             {
[09:31:06.391]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:06.391]                   0L) {
[09:31:06.391]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:06.391]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:06.391]                   base::options(opts)
[09:31:06.391]                 }
[09:31:06.391]                 {
[09:31:06.391]                   {
[09:31:06.391]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:06.391]                     NULL
[09:31:06.391]                   }
[09:31:06.391]                   options(future.plan = NULL)
[09:31:06.391]                   if (is.na(NA_character_)) 
[09:31:06.391]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.391]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:06.391]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:06.391]                     .init = FALSE)
[09:31:06.391]                 }
[09:31:06.391]             }
[09:31:06.391]         }
[09:31:06.391]     })
[09:31:06.391]     if (TRUE) {
[09:31:06.391]         base::sink(type = "output", split = FALSE)
[09:31:06.391]         if (TRUE) {
[09:31:06.391]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:06.391]         }
[09:31:06.391]         else {
[09:31:06.391]             ...future.result["stdout"] <- base::list(NULL)
[09:31:06.391]         }
[09:31:06.391]         base::close(...future.stdout)
[09:31:06.391]         ...future.stdout <- NULL
[09:31:06.391]     }
[09:31:06.391]     ...future.result$conditions <- ...future.conditions
[09:31:06.391]     ...future.result$finished <- base::Sys.time()
[09:31:06.391]     ...future.result
[09:31:06.391] }
[09:31:06.443] MultisessionFuture started
[09:31:06.443] result() for ClusterFuture ...
[09:31:06.444] receiveMessageFromWorker() for ClusterFuture ...
[09:31:06.444] - Validating connection of MultisessionFuture
[09:31:06.475] - received message: FutureResult
[09:31:06.476] - Received FutureResult
[09:31:06.476] - Erased future from FutureRegistry
[09:31:06.476] result() for ClusterFuture ...
[09:31:06.476] - result already collected: FutureResult
[09:31:06.476] result() for ClusterFuture ... done
[09:31:06.476] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:06.476] result() for ClusterFuture ... done
[09:31:06.476] result() for ClusterFuture ...
[09:31:06.477] - result already collected: FutureResult
[09:31:06.477] result() for ClusterFuture ... done
[09:31:06.477] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:31:06.481] plan(): nbrOfWorkers() = 2
[09:31:06.481] getGlobalsAndPackages() ...
[09:31:06.481] Searching for globals...
[09:31:06.482] - globals found: [1] ‘{’
[09:31:06.482] Searching for globals ... DONE
[09:31:06.482] Resolving globals: FALSE
[09:31:06.483] 
[09:31:06.483] 
[09:31:06.483] getGlobalsAndPackages() ... DONE
[09:31:06.483] run() for ‘Future’ ...
[09:31:06.483] - state: ‘created’
[09:31:06.483] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:06.497] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:06.498] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:06.498]   - Field: ‘node’
[09:31:06.498]   - Field: ‘label’
[09:31:06.498]   - Field: ‘local’
[09:31:06.498]   - Field: ‘owner’
[09:31:06.498]   - Field: ‘envir’
[09:31:06.498]   - Field: ‘workers’
[09:31:06.498]   - Field: ‘packages’
[09:31:06.498]   - Field: ‘gc’
[09:31:06.499]   - Field: ‘conditions’
[09:31:06.499]   - Field: ‘persistent’
[09:31:06.499]   - Field: ‘expr’
[09:31:06.499]   - Field: ‘uuid’
[09:31:06.499]   - Field: ‘seed’
[09:31:06.499]   - Field: ‘version’
[09:31:06.499]   - Field: ‘result’
[09:31:06.499]   - Field: ‘asynchronous’
[09:31:06.499]   - Field: ‘calls’
[09:31:06.500]   - Field: ‘globals’
[09:31:06.500]   - Field: ‘stdout’
[09:31:06.500]   - Field: ‘earlySignal’
[09:31:06.500]   - Field: ‘lazy’
[09:31:06.500]   - Field: ‘state’
[09:31:06.500] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:06.500] - Launch lazy future ...
[09:31:06.501] Packages needed by the future expression (n = 0): <none>
[09:31:06.501] Packages needed by future strategies (n = 0): <none>
[09:31:06.501] {
[09:31:06.501]     {
[09:31:06.501]         {
[09:31:06.501]             ...future.startTime <- base::Sys.time()
[09:31:06.501]             {
[09:31:06.501]                 {
[09:31:06.501]                   {
[09:31:06.501]                     {
[09:31:06.501]                       base::local({
[09:31:06.501]                         has_future <- base::requireNamespace("future", 
[09:31:06.501]                           quietly = TRUE)
[09:31:06.501]                         if (has_future) {
[09:31:06.501]                           ns <- base::getNamespace("future")
[09:31:06.501]                           version <- ns[[".package"]][["version"]]
[09:31:06.501]                           if (is.null(version)) 
[09:31:06.501]                             version <- utils::packageVersion("future")
[09:31:06.501]                         }
[09:31:06.501]                         else {
[09:31:06.501]                           version <- NULL
[09:31:06.501]                         }
[09:31:06.501]                         if (!has_future || version < "1.8.0") {
[09:31:06.501]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:06.501]                             "", base::R.version$version.string), 
[09:31:06.501]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:06.501]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:06.501]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:06.501]                               "release", "version")], collapse = " "), 
[09:31:06.501]                             hostname = base::Sys.info()[["nodename"]])
[09:31:06.501]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:06.501]                             info)
[09:31:06.501]                           info <- base::paste(info, collapse = "; ")
[09:31:06.501]                           if (!has_future) {
[09:31:06.501]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:06.501]                               info)
[09:31:06.501]                           }
[09:31:06.501]                           else {
[09:31:06.501]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:06.501]                               info, version)
[09:31:06.501]                           }
[09:31:06.501]                           base::stop(msg)
[09:31:06.501]                         }
[09:31:06.501]                       })
[09:31:06.501]                     }
[09:31:06.501]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:06.501]                     base::options(mc.cores = 1L)
[09:31:06.501]                   }
[09:31:06.501]                   ...future.strategy.old <- future::plan("list")
[09:31:06.501]                   options(future.plan = NULL)
[09:31:06.501]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.501]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:06.501]                 }
[09:31:06.501]                 ...future.workdir <- getwd()
[09:31:06.501]             }
[09:31:06.501]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:06.501]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:06.501]         }
[09:31:06.501]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:06.501]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:06.501]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:06.501]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:06.501]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:06.501]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:06.501]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:06.501]             base::names(...future.oldOptions))
[09:31:06.501]     }
[09:31:06.501]     if (FALSE) {
[09:31:06.501]     }
[09:31:06.501]     else {
[09:31:06.501]         if (TRUE) {
[09:31:06.501]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:06.501]                 open = "w")
[09:31:06.501]         }
[09:31:06.501]         else {
[09:31:06.501]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:06.501]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:06.501]         }
[09:31:06.501]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:06.501]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:06.501]             base::sink(type = "output", split = FALSE)
[09:31:06.501]             base::close(...future.stdout)
[09:31:06.501]         }, add = TRUE)
[09:31:06.501]     }
[09:31:06.501]     ...future.frame <- base::sys.nframe()
[09:31:06.501]     ...future.conditions <- base::list()
[09:31:06.501]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:06.501]     if (FALSE) {
[09:31:06.501]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:06.501]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:06.501]     }
[09:31:06.501]     ...future.result <- base::tryCatch({
[09:31:06.501]         base::withCallingHandlers({
[09:31:06.501]             ...future.value <- base::withVisible(base::local({
[09:31:06.501]                 ...future.makeSendCondition <- base::local({
[09:31:06.501]                   sendCondition <- NULL
[09:31:06.501]                   function(frame = 1L) {
[09:31:06.501]                     if (is.function(sendCondition)) 
[09:31:06.501]                       return(sendCondition)
[09:31:06.501]                     ns <- getNamespace("parallel")
[09:31:06.501]                     if (exists("sendData", mode = "function", 
[09:31:06.501]                       envir = ns)) {
[09:31:06.501]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:06.501]                         envir = ns)
[09:31:06.501]                       envir <- sys.frame(frame)
[09:31:06.501]                       master <- NULL
[09:31:06.501]                       while (!identical(envir, .GlobalEnv) && 
[09:31:06.501]                         !identical(envir, emptyenv())) {
[09:31:06.501]                         if (exists("master", mode = "list", envir = envir, 
[09:31:06.501]                           inherits = FALSE)) {
[09:31:06.501]                           master <- get("master", mode = "list", 
[09:31:06.501]                             envir = envir, inherits = FALSE)
[09:31:06.501]                           if (inherits(master, c("SOCKnode", 
[09:31:06.501]                             "SOCK0node"))) {
[09:31:06.501]                             sendCondition <<- function(cond) {
[09:31:06.501]                               data <- list(type = "VALUE", value = cond, 
[09:31:06.501]                                 success = TRUE)
[09:31:06.501]                               parallel_sendData(master, data)
[09:31:06.501]                             }
[09:31:06.501]                             return(sendCondition)
[09:31:06.501]                           }
[09:31:06.501]                         }
[09:31:06.501]                         frame <- frame + 1L
[09:31:06.501]                         envir <- sys.frame(frame)
[09:31:06.501]                       }
[09:31:06.501]                     }
[09:31:06.501]                     sendCondition <<- function(cond) NULL
[09:31:06.501]                   }
[09:31:06.501]                 })
[09:31:06.501]                 withCallingHandlers({
[09:31:06.501]                   {
[09:31:06.501]                     2
[09:31:06.501]                   }
[09:31:06.501]                 }, immediateCondition = function(cond) {
[09:31:06.501]                   sendCondition <- ...future.makeSendCondition()
[09:31:06.501]                   sendCondition(cond)
[09:31:06.501]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.501]                   {
[09:31:06.501]                     inherits <- base::inherits
[09:31:06.501]                     invokeRestart <- base::invokeRestart
[09:31:06.501]                     is.null <- base::is.null
[09:31:06.501]                     muffled <- FALSE
[09:31:06.501]                     if (inherits(cond, "message")) {
[09:31:06.501]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:06.501]                       if (muffled) 
[09:31:06.501]                         invokeRestart("muffleMessage")
[09:31:06.501]                     }
[09:31:06.501]                     else if (inherits(cond, "warning")) {
[09:31:06.501]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:06.501]                       if (muffled) 
[09:31:06.501]                         invokeRestart("muffleWarning")
[09:31:06.501]                     }
[09:31:06.501]                     else if (inherits(cond, "condition")) {
[09:31:06.501]                       if (!is.null(pattern)) {
[09:31:06.501]                         computeRestarts <- base::computeRestarts
[09:31:06.501]                         grepl <- base::grepl
[09:31:06.501]                         restarts <- computeRestarts(cond)
[09:31:06.501]                         for (restart in restarts) {
[09:31:06.501]                           name <- restart$name
[09:31:06.501]                           if (is.null(name)) 
[09:31:06.501]                             next
[09:31:06.501]                           if (!grepl(pattern, name)) 
[09:31:06.501]                             next
[09:31:06.501]                           invokeRestart(restart)
[09:31:06.501]                           muffled <- TRUE
[09:31:06.501]                           break
[09:31:06.501]                         }
[09:31:06.501]                       }
[09:31:06.501]                     }
[09:31:06.501]                     invisible(muffled)
[09:31:06.501]                   }
[09:31:06.501]                   muffleCondition(cond)
[09:31:06.501]                 })
[09:31:06.501]             }))
[09:31:06.501]             future::FutureResult(value = ...future.value$value, 
[09:31:06.501]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.501]                   ...future.rng), globalenv = if (FALSE) 
[09:31:06.501]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:06.501]                     ...future.globalenv.names))
[09:31:06.501]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:06.501]         }, condition = base::local({
[09:31:06.501]             c <- base::c
[09:31:06.501]             inherits <- base::inherits
[09:31:06.501]             invokeRestart <- base::invokeRestart
[09:31:06.501]             length <- base::length
[09:31:06.501]             list <- base::list
[09:31:06.501]             seq.int <- base::seq.int
[09:31:06.501]             signalCondition <- base::signalCondition
[09:31:06.501]             sys.calls <- base::sys.calls
[09:31:06.501]             `[[` <- base::`[[`
[09:31:06.501]             `+` <- base::`+`
[09:31:06.501]             `<<-` <- base::`<<-`
[09:31:06.501]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:06.501]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:06.501]                   3L)]
[09:31:06.501]             }
[09:31:06.501]             function(cond) {
[09:31:06.501]                 is_error <- inherits(cond, "error")
[09:31:06.501]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:06.501]                   NULL)
[09:31:06.501]                 if (is_error) {
[09:31:06.501]                   sessionInformation <- function() {
[09:31:06.501]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:06.501]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:06.501]                       search = base::search(), system = base::Sys.info())
[09:31:06.501]                   }
[09:31:06.501]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.501]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:06.501]                     cond$call), session = sessionInformation(), 
[09:31:06.501]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:06.501]                   signalCondition(cond)
[09:31:06.501]                 }
[09:31:06.501]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:06.501]                 "immediateCondition"))) {
[09:31:06.501]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:06.501]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.501]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:06.501]                   if (TRUE && !signal) {
[09:31:06.501]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.501]                     {
[09:31:06.501]                       inherits <- base::inherits
[09:31:06.501]                       invokeRestart <- base::invokeRestart
[09:31:06.501]                       is.null <- base::is.null
[09:31:06.501]                       muffled <- FALSE
[09:31:06.501]                       if (inherits(cond, "message")) {
[09:31:06.501]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.501]                         if (muffled) 
[09:31:06.501]                           invokeRestart("muffleMessage")
[09:31:06.501]                       }
[09:31:06.501]                       else if (inherits(cond, "warning")) {
[09:31:06.501]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.501]                         if (muffled) 
[09:31:06.501]                           invokeRestart("muffleWarning")
[09:31:06.501]                       }
[09:31:06.501]                       else if (inherits(cond, "condition")) {
[09:31:06.501]                         if (!is.null(pattern)) {
[09:31:06.501]                           computeRestarts <- base::computeRestarts
[09:31:06.501]                           grepl <- base::grepl
[09:31:06.501]                           restarts <- computeRestarts(cond)
[09:31:06.501]                           for (restart in restarts) {
[09:31:06.501]                             name <- restart$name
[09:31:06.501]                             if (is.null(name)) 
[09:31:06.501]                               next
[09:31:06.501]                             if (!grepl(pattern, name)) 
[09:31:06.501]                               next
[09:31:06.501]                             invokeRestart(restart)
[09:31:06.501]                             muffled <- TRUE
[09:31:06.501]                             break
[09:31:06.501]                           }
[09:31:06.501]                         }
[09:31:06.501]                       }
[09:31:06.501]                       invisible(muffled)
[09:31:06.501]                     }
[09:31:06.501]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.501]                   }
[09:31:06.501]                 }
[09:31:06.501]                 else {
[09:31:06.501]                   if (TRUE) {
[09:31:06.501]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.501]                     {
[09:31:06.501]                       inherits <- base::inherits
[09:31:06.501]                       invokeRestart <- base::invokeRestart
[09:31:06.501]                       is.null <- base::is.null
[09:31:06.501]                       muffled <- FALSE
[09:31:06.501]                       if (inherits(cond, "message")) {
[09:31:06.501]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.501]                         if (muffled) 
[09:31:06.501]                           invokeRestart("muffleMessage")
[09:31:06.501]                       }
[09:31:06.501]                       else if (inherits(cond, "warning")) {
[09:31:06.501]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.501]                         if (muffled) 
[09:31:06.501]                           invokeRestart("muffleWarning")
[09:31:06.501]                       }
[09:31:06.501]                       else if (inherits(cond, "condition")) {
[09:31:06.501]                         if (!is.null(pattern)) {
[09:31:06.501]                           computeRestarts <- base::computeRestarts
[09:31:06.501]                           grepl <- base::grepl
[09:31:06.501]                           restarts <- computeRestarts(cond)
[09:31:06.501]                           for (restart in restarts) {
[09:31:06.501]                             name <- restart$name
[09:31:06.501]                             if (is.null(name)) 
[09:31:06.501]                               next
[09:31:06.501]                             if (!grepl(pattern, name)) 
[09:31:06.501]                               next
[09:31:06.501]                             invokeRestart(restart)
[09:31:06.501]                             muffled <- TRUE
[09:31:06.501]                             break
[09:31:06.501]                           }
[09:31:06.501]                         }
[09:31:06.501]                       }
[09:31:06.501]                       invisible(muffled)
[09:31:06.501]                     }
[09:31:06.501]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.501]                   }
[09:31:06.501]                 }
[09:31:06.501]             }
[09:31:06.501]         }))
[09:31:06.501]     }, error = function(ex) {
[09:31:06.501]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:06.501]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.501]                 ...future.rng), started = ...future.startTime, 
[09:31:06.501]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:06.501]             version = "1.8"), class = "FutureResult")
[09:31:06.501]     }, finally = {
[09:31:06.501]         if (!identical(...future.workdir, getwd())) 
[09:31:06.501]             setwd(...future.workdir)
[09:31:06.501]         {
[09:31:06.501]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:06.501]                 ...future.oldOptions$nwarnings <- NULL
[09:31:06.501]             }
[09:31:06.501]             base::options(...future.oldOptions)
[09:31:06.501]             if (.Platform$OS.type == "windows") {
[09:31:06.501]                 old_names <- names(...future.oldEnvVars)
[09:31:06.501]                 envs <- base::Sys.getenv()
[09:31:06.501]                 names <- names(envs)
[09:31:06.501]                 common <- intersect(names, old_names)
[09:31:06.501]                 added <- setdiff(names, old_names)
[09:31:06.501]                 removed <- setdiff(old_names, names)
[09:31:06.501]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:06.501]                   envs[common]]
[09:31:06.501]                 NAMES <- toupper(changed)
[09:31:06.501]                 args <- list()
[09:31:06.501]                 for (kk in seq_along(NAMES)) {
[09:31:06.501]                   name <- changed[[kk]]
[09:31:06.501]                   NAME <- NAMES[[kk]]
[09:31:06.501]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.501]                     next
[09:31:06.501]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.501]                 }
[09:31:06.501]                 NAMES <- toupper(added)
[09:31:06.501]                 for (kk in seq_along(NAMES)) {
[09:31:06.501]                   name <- added[[kk]]
[09:31:06.501]                   NAME <- NAMES[[kk]]
[09:31:06.501]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.501]                     next
[09:31:06.501]                   args[[name]] <- ""
[09:31:06.501]                 }
[09:31:06.501]                 NAMES <- toupper(removed)
[09:31:06.501]                 for (kk in seq_along(NAMES)) {
[09:31:06.501]                   name <- removed[[kk]]
[09:31:06.501]                   NAME <- NAMES[[kk]]
[09:31:06.501]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.501]                     next
[09:31:06.501]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.501]                 }
[09:31:06.501]                 if (length(args) > 0) 
[09:31:06.501]                   base::do.call(base::Sys.setenv, args = args)
[09:31:06.501]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:06.501]             }
[09:31:06.501]             else {
[09:31:06.501]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:06.501]             }
[09:31:06.501]             {
[09:31:06.501]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:06.501]                   0L) {
[09:31:06.501]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:06.501]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:06.501]                   base::options(opts)
[09:31:06.501]                 }
[09:31:06.501]                 {
[09:31:06.501]                   {
[09:31:06.501]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:06.501]                     NULL
[09:31:06.501]                   }
[09:31:06.501]                   options(future.plan = NULL)
[09:31:06.501]                   if (is.na(NA_character_)) 
[09:31:06.501]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.501]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:06.501]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:06.501]                     .init = FALSE)
[09:31:06.501]                 }
[09:31:06.501]             }
[09:31:06.501]         }
[09:31:06.501]     })
[09:31:06.501]     if (TRUE) {
[09:31:06.501]         base::sink(type = "output", split = FALSE)
[09:31:06.501]         if (TRUE) {
[09:31:06.501]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:06.501]         }
[09:31:06.501]         else {
[09:31:06.501]             ...future.result["stdout"] <- base::list(NULL)
[09:31:06.501]         }
[09:31:06.501]         base::close(...future.stdout)
[09:31:06.501]         ...future.stdout <- NULL
[09:31:06.501]     }
[09:31:06.501]     ...future.result$conditions <- ...future.conditions
[09:31:06.501]     ...future.result$finished <- base::Sys.time()
[09:31:06.501]     ...future.result
[09:31:06.501] }
[09:31:06.504] MultisessionFuture started
[09:31:06.505] - Launch lazy future ... done
[09:31:06.505] run() for ‘MultisessionFuture’ ... done
[09:31:06.505] getGlobalsAndPackages() ...
[09:31:06.505] Searching for globals...
[09:31:06.506] - globals found: [1] ‘{’
[09:31:06.506] Searching for globals ... DONE
[09:31:06.506] Resolving globals: FALSE
[09:31:06.506] 
[09:31:06.506] 
[09:31:06.506] getGlobalsAndPackages() ... DONE
[09:31:06.507] run() for ‘Future’ ...
[09:31:06.507] - state: ‘created’
[09:31:06.507] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:06.521] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:06.521] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:06.521]   - Field: ‘node’
[09:31:06.521]   - Field: ‘label’
[09:31:06.522]   - Field: ‘local’
[09:31:06.522]   - Field: ‘owner’
[09:31:06.522]   - Field: ‘envir’
[09:31:06.522]   - Field: ‘workers’
[09:31:06.522]   - Field: ‘packages’
[09:31:06.522]   - Field: ‘gc’
[09:31:06.522]   - Field: ‘conditions’
[09:31:06.522]   - Field: ‘persistent’
[09:31:06.522]   - Field: ‘expr’
[09:31:06.522]   - Field: ‘uuid’
[09:31:06.523]   - Field: ‘seed’
[09:31:06.523]   - Field: ‘version’
[09:31:06.523]   - Field: ‘result’
[09:31:06.523]   - Field: ‘asynchronous’
[09:31:06.523]   - Field: ‘calls’
[09:31:06.523]   - Field: ‘globals’
[09:31:06.523]   - Field: ‘stdout’
[09:31:06.523]   - Field: ‘earlySignal’
[09:31:06.523]   - Field: ‘lazy’
[09:31:06.524]   - Field: ‘state’
[09:31:06.524] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:06.524] - Launch lazy future ...
[09:31:06.524] Packages needed by the future expression (n = 0): <none>
[09:31:06.524] Packages needed by future strategies (n = 0): <none>
[09:31:06.525] {
[09:31:06.525]     {
[09:31:06.525]         {
[09:31:06.525]             ...future.startTime <- base::Sys.time()
[09:31:06.525]             {
[09:31:06.525]                 {
[09:31:06.525]                   {
[09:31:06.525]                     {
[09:31:06.525]                       base::local({
[09:31:06.525]                         has_future <- base::requireNamespace("future", 
[09:31:06.525]                           quietly = TRUE)
[09:31:06.525]                         if (has_future) {
[09:31:06.525]                           ns <- base::getNamespace("future")
[09:31:06.525]                           version <- ns[[".package"]][["version"]]
[09:31:06.525]                           if (is.null(version)) 
[09:31:06.525]                             version <- utils::packageVersion("future")
[09:31:06.525]                         }
[09:31:06.525]                         else {
[09:31:06.525]                           version <- NULL
[09:31:06.525]                         }
[09:31:06.525]                         if (!has_future || version < "1.8.0") {
[09:31:06.525]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:06.525]                             "", base::R.version$version.string), 
[09:31:06.525]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:06.525]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:06.525]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:06.525]                               "release", "version")], collapse = " "), 
[09:31:06.525]                             hostname = base::Sys.info()[["nodename"]])
[09:31:06.525]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:06.525]                             info)
[09:31:06.525]                           info <- base::paste(info, collapse = "; ")
[09:31:06.525]                           if (!has_future) {
[09:31:06.525]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:06.525]                               info)
[09:31:06.525]                           }
[09:31:06.525]                           else {
[09:31:06.525]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:06.525]                               info, version)
[09:31:06.525]                           }
[09:31:06.525]                           base::stop(msg)
[09:31:06.525]                         }
[09:31:06.525]                       })
[09:31:06.525]                     }
[09:31:06.525]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:06.525]                     base::options(mc.cores = 1L)
[09:31:06.525]                   }
[09:31:06.525]                   ...future.strategy.old <- future::plan("list")
[09:31:06.525]                   options(future.plan = NULL)
[09:31:06.525]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.525]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:06.525]                 }
[09:31:06.525]                 ...future.workdir <- getwd()
[09:31:06.525]             }
[09:31:06.525]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:06.525]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:06.525]         }
[09:31:06.525]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:06.525]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:06.525]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:06.525]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:06.525]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:06.525]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:06.525]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:06.525]             base::names(...future.oldOptions))
[09:31:06.525]     }
[09:31:06.525]     if (FALSE) {
[09:31:06.525]     }
[09:31:06.525]     else {
[09:31:06.525]         if (TRUE) {
[09:31:06.525]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:06.525]                 open = "w")
[09:31:06.525]         }
[09:31:06.525]         else {
[09:31:06.525]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:06.525]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:06.525]         }
[09:31:06.525]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:06.525]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:06.525]             base::sink(type = "output", split = FALSE)
[09:31:06.525]             base::close(...future.stdout)
[09:31:06.525]         }, add = TRUE)
[09:31:06.525]     }
[09:31:06.525]     ...future.frame <- base::sys.nframe()
[09:31:06.525]     ...future.conditions <- base::list()
[09:31:06.525]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:06.525]     if (FALSE) {
[09:31:06.525]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:06.525]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:06.525]     }
[09:31:06.525]     ...future.result <- base::tryCatch({
[09:31:06.525]         base::withCallingHandlers({
[09:31:06.525]             ...future.value <- base::withVisible(base::local({
[09:31:06.525]                 ...future.makeSendCondition <- base::local({
[09:31:06.525]                   sendCondition <- NULL
[09:31:06.525]                   function(frame = 1L) {
[09:31:06.525]                     if (is.function(sendCondition)) 
[09:31:06.525]                       return(sendCondition)
[09:31:06.525]                     ns <- getNamespace("parallel")
[09:31:06.525]                     if (exists("sendData", mode = "function", 
[09:31:06.525]                       envir = ns)) {
[09:31:06.525]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:06.525]                         envir = ns)
[09:31:06.525]                       envir <- sys.frame(frame)
[09:31:06.525]                       master <- NULL
[09:31:06.525]                       while (!identical(envir, .GlobalEnv) && 
[09:31:06.525]                         !identical(envir, emptyenv())) {
[09:31:06.525]                         if (exists("master", mode = "list", envir = envir, 
[09:31:06.525]                           inherits = FALSE)) {
[09:31:06.525]                           master <- get("master", mode = "list", 
[09:31:06.525]                             envir = envir, inherits = FALSE)
[09:31:06.525]                           if (inherits(master, c("SOCKnode", 
[09:31:06.525]                             "SOCK0node"))) {
[09:31:06.525]                             sendCondition <<- function(cond) {
[09:31:06.525]                               data <- list(type = "VALUE", value = cond, 
[09:31:06.525]                                 success = TRUE)
[09:31:06.525]                               parallel_sendData(master, data)
[09:31:06.525]                             }
[09:31:06.525]                             return(sendCondition)
[09:31:06.525]                           }
[09:31:06.525]                         }
[09:31:06.525]                         frame <- frame + 1L
[09:31:06.525]                         envir <- sys.frame(frame)
[09:31:06.525]                       }
[09:31:06.525]                     }
[09:31:06.525]                     sendCondition <<- function(cond) NULL
[09:31:06.525]                   }
[09:31:06.525]                 })
[09:31:06.525]                 withCallingHandlers({
[09:31:06.525]                   {
[09:31:06.525]                     4
[09:31:06.525]                   }
[09:31:06.525]                 }, immediateCondition = function(cond) {
[09:31:06.525]                   sendCondition <- ...future.makeSendCondition()
[09:31:06.525]                   sendCondition(cond)
[09:31:06.525]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.525]                   {
[09:31:06.525]                     inherits <- base::inherits
[09:31:06.525]                     invokeRestart <- base::invokeRestart
[09:31:06.525]                     is.null <- base::is.null
[09:31:06.525]                     muffled <- FALSE
[09:31:06.525]                     if (inherits(cond, "message")) {
[09:31:06.525]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:06.525]                       if (muffled) 
[09:31:06.525]                         invokeRestart("muffleMessage")
[09:31:06.525]                     }
[09:31:06.525]                     else if (inherits(cond, "warning")) {
[09:31:06.525]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:06.525]                       if (muffled) 
[09:31:06.525]                         invokeRestart("muffleWarning")
[09:31:06.525]                     }
[09:31:06.525]                     else if (inherits(cond, "condition")) {
[09:31:06.525]                       if (!is.null(pattern)) {
[09:31:06.525]                         computeRestarts <- base::computeRestarts
[09:31:06.525]                         grepl <- base::grepl
[09:31:06.525]                         restarts <- computeRestarts(cond)
[09:31:06.525]                         for (restart in restarts) {
[09:31:06.525]                           name <- restart$name
[09:31:06.525]                           if (is.null(name)) 
[09:31:06.525]                             next
[09:31:06.525]                           if (!grepl(pattern, name)) 
[09:31:06.525]                             next
[09:31:06.525]                           invokeRestart(restart)
[09:31:06.525]                           muffled <- TRUE
[09:31:06.525]                           break
[09:31:06.525]                         }
[09:31:06.525]                       }
[09:31:06.525]                     }
[09:31:06.525]                     invisible(muffled)
[09:31:06.525]                   }
[09:31:06.525]                   muffleCondition(cond)
[09:31:06.525]                 })
[09:31:06.525]             }))
[09:31:06.525]             future::FutureResult(value = ...future.value$value, 
[09:31:06.525]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.525]                   ...future.rng), globalenv = if (FALSE) 
[09:31:06.525]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:06.525]                     ...future.globalenv.names))
[09:31:06.525]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:06.525]         }, condition = base::local({
[09:31:06.525]             c <- base::c
[09:31:06.525]             inherits <- base::inherits
[09:31:06.525]             invokeRestart <- base::invokeRestart
[09:31:06.525]             length <- base::length
[09:31:06.525]             list <- base::list
[09:31:06.525]             seq.int <- base::seq.int
[09:31:06.525]             signalCondition <- base::signalCondition
[09:31:06.525]             sys.calls <- base::sys.calls
[09:31:06.525]             `[[` <- base::`[[`
[09:31:06.525]             `+` <- base::`+`
[09:31:06.525]             `<<-` <- base::`<<-`
[09:31:06.525]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:06.525]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:06.525]                   3L)]
[09:31:06.525]             }
[09:31:06.525]             function(cond) {
[09:31:06.525]                 is_error <- inherits(cond, "error")
[09:31:06.525]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:06.525]                   NULL)
[09:31:06.525]                 if (is_error) {
[09:31:06.525]                   sessionInformation <- function() {
[09:31:06.525]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:06.525]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:06.525]                       search = base::search(), system = base::Sys.info())
[09:31:06.525]                   }
[09:31:06.525]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.525]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:06.525]                     cond$call), session = sessionInformation(), 
[09:31:06.525]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:06.525]                   signalCondition(cond)
[09:31:06.525]                 }
[09:31:06.525]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:06.525]                 "immediateCondition"))) {
[09:31:06.525]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:06.525]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.525]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:06.525]                   if (TRUE && !signal) {
[09:31:06.525]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.525]                     {
[09:31:06.525]                       inherits <- base::inherits
[09:31:06.525]                       invokeRestart <- base::invokeRestart
[09:31:06.525]                       is.null <- base::is.null
[09:31:06.525]                       muffled <- FALSE
[09:31:06.525]                       if (inherits(cond, "message")) {
[09:31:06.525]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.525]                         if (muffled) 
[09:31:06.525]                           invokeRestart("muffleMessage")
[09:31:06.525]                       }
[09:31:06.525]                       else if (inherits(cond, "warning")) {
[09:31:06.525]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.525]                         if (muffled) 
[09:31:06.525]                           invokeRestart("muffleWarning")
[09:31:06.525]                       }
[09:31:06.525]                       else if (inherits(cond, "condition")) {
[09:31:06.525]                         if (!is.null(pattern)) {
[09:31:06.525]                           computeRestarts <- base::computeRestarts
[09:31:06.525]                           grepl <- base::grepl
[09:31:06.525]                           restarts <- computeRestarts(cond)
[09:31:06.525]                           for (restart in restarts) {
[09:31:06.525]                             name <- restart$name
[09:31:06.525]                             if (is.null(name)) 
[09:31:06.525]                               next
[09:31:06.525]                             if (!grepl(pattern, name)) 
[09:31:06.525]                               next
[09:31:06.525]                             invokeRestart(restart)
[09:31:06.525]                             muffled <- TRUE
[09:31:06.525]                             break
[09:31:06.525]                           }
[09:31:06.525]                         }
[09:31:06.525]                       }
[09:31:06.525]                       invisible(muffled)
[09:31:06.525]                     }
[09:31:06.525]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.525]                   }
[09:31:06.525]                 }
[09:31:06.525]                 else {
[09:31:06.525]                   if (TRUE) {
[09:31:06.525]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.525]                     {
[09:31:06.525]                       inherits <- base::inherits
[09:31:06.525]                       invokeRestart <- base::invokeRestart
[09:31:06.525]                       is.null <- base::is.null
[09:31:06.525]                       muffled <- FALSE
[09:31:06.525]                       if (inherits(cond, "message")) {
[09:31:06.525]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.525]                         if (muffled) 
[09:31:06.525]                           invokeRestart("muffleMessage")
[09:31:06.525]                       }
[09:31:06.525]                       else if (inherits(cond, "warning")) {
[09:31:06.525]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.525]                         if (muffled) 
[09:31:06.525]                           invokeRestart("muffleWarning")
[09:31:06.525]                       }
[09:31:06.525]                       else if (inherits(cond, "condition")) {
[09:31:06.525]                         if (!is.null(pattern)) {
[09:31:06.525]                           computeRestarts <- base::computeRestarts
[09:31:06.525]                           grepl <- base::grepl
[09:31:06.525]                           restarts <- computeRestarts(cond)
[09:31:06.525]                           for (restart in restarts) {
[09:31:06.525]                             name <- restart$name
[09:31:06.525]                             if (is.null(name)) 
[09:31:06.525]                               next
[09:31:06.525]                             if (!grepl(pattern, name)) 
[09:31:06.525]                               next
[09:31:06.525]                             invokeRestart(restart)
[09:31:06.525]                             muffled <- TRUE
[09:31:06.525]                             break
[09:31:06.525]                           }
[09:31:06.525]                         }
[09:31:06.525]                       }
[09:31:06.525]                       invisible(muffled)
[09:31:06.525]                     }
[09:31:06.525]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.525]                   }
[09:31:06.525]                 }
[09:31:06.525]             }
[09:31:06.525]         }))
[09:31:06.525]     }, error = function(ex) {
[09:31:06.525]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:06.525]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.525]                 ...future.rng), started = ...future.startTime, 
[09:31:06.525]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:06.525]             version = "1.8"), class = "FutureResult")
[09:31:06.525]     }, finally = {
[09:31:06.525]         if (!identical(...future.workdir, getwd())) 
[09:31:06.525]             setwd(...future.workdir)
[09:31:06.525]         {
[09:31:06.525]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:06.525]                 ...future.oldOptions$nwarnings <- NULL
[09:31:06.525]             }
[09:31:06.525]             base::options(...future.oldOptions)
[09:31:06.525]             if (.Platform$OS.type == "windows") {
[09:31:06.525]                 old_names <- names(...future.oldEnvVars)
[09:31:06.525]                 envs <- base::Sys.getenv()
[09:31:06.525]                 names <- names(envs)
[09:31:06.525]                 common <- intersect(names, old_names)
[09:31:06.525]                 added <- setdiff(names, old_names)
[09:31:06.525]                 removed <- setdiff(old_names, names)
[09:31:06.525]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:06.525]                   envs[common]]
[09:31:06.525]                 NAMES <- toupper(changed)
[09:31:06.525]                 args <- list()
[09:31:06.525]                 for (kk in seq_along(NAMES)) {
[09:31:06.525]                   name <- changed[[kk]]
[09:31:06.525]                   NAME <- NAMES[[kk]]
[09:31:06.525]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.525]                     next
[09:31:06.525]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.525]                 }
[09:31:06.525]                 NAMES <- toupper(added)
[09:31:06.525]                 for (kk in seq_along(NAMES)) {
[09:31:06.525]                   name <- added[[kk]]
[09:31:06.525]                   NAME <- NAMES[[kk]]
[09:31:06.525]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.525]                     next
[09:31:06.525]                   args[[name]] <- ""
[09:31:06.525]                 }
[09:31:06.525]                 NAMES <- toupper(removed)
[09:31:06.525]                 for (kk in seq_along(NAMES)) {
[09:31:06.525]                   name <- removed[[kk]]
[09:31:06.525]                   NAME <- NAMES[[kk]]
[09:31:06.525]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.525]                     next
[09:31:06.525]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.525]                 }
[09:31:06.525]                 if (length(args) > 0) 
[09:31:06.525]                   base::do.call(base::Sys.setenv, args = args)
[09:31:06.525]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:06.525]             }
[09:31:06.525]             else {
[09:31:06.525]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:06.525]             }
[09:31:06.525]             {
[09:31:06.525]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:06.525]                   0L) {
[09:31:06.525]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:06.525]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:06.525]                   base::options(opts)
[09:31:06.525]                 }
[09:31:06.525]                 {
[09:31:06.525]                   {
[09:31:06.525]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:06.525]                     NULL
[09:31:06.525]                   }
[09:31:06.525]                   options(future.plan = NULL)
[09:31:06.525]                   if (is.na(NA_character_)) 
[09:31:06.525]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.525]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:06.525]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:06.525]                     .init = FALSE)
[09:31:06.525]                 }
[09:31:06.525]             }
[09:31:06.525]         }
[09:31:06.525]     })
[09:31:06.525]     if (TRUE) {
[09:31:06.525]         base::sink(type = "output", split = FALSE)
[09:31:06.525]         if (TRUE) {
[09:31:06.525]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:06.525]         }
[09:31:06.525]         else {
[09:31:06.525]             ...future.result["stdout"] <- base::list(NULL)
[09:31:06.525]         }
[09:31:06.525]         base::close(...future.stdout)
[09:31:06.525]         ...future.stdout <- NULL
[09:31:06.525]     }
[09:31:06.525]     ...future.result$conditions <- ...future.conditions
[09:31:06.525]     ...future.result$finished <- base::Sys.time()
[09:31:06.525]     ...future.result
[09:31:06.525] }
[09:31:06.576] MultisessionFuture started
[09:31:06.577] - Launch lazy future ... done
[09:31:06.577] run() for ‘MultisessionFuture’ ... done
[09:31:06.577] result() for ClusterFuture ...
[09:31:06.577] receiveMessageFromWorker() for ClusterFuture ...
[09:31:06.577] - Validating connection of MultisessionFuture
[09:31:06.578] - received message: FutureResult
[09:31:06.578] - Received FutureResult
[09:31:06.578] - Erased future from FutureRegistry
[09:31:06.578] result() for ClusterFuture ...
[09:31:06.578] - result already collected: FutureResult
[09:31:06.578] result() for ClusterFuture ... done
[09:31:06.578] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:06.578] result() for ClusterFuture ... done
[09:31:06.578] result() for ClusterFuture ...
[09:31:06.579] - result already collected: FutureResult
[09:31:06.579] result() for ClusterFuture ... done
u$a = 2
[09:31:06.579] result() for ClusterFuture ...
[09:31:06.579] receiveMessageFromWorker() for ClusterFuture ...
[09:31:06.579] - Validating connection of MultisessionFuture
[09:31:06.608] - received message: FutureResult
[09:31:06.608] - Received FutureResult
[09:31:06.608] - Erased future from FutureRegistry
[09:31:06.608] result() for ClusterFuture ...
[09:31:06.608] - result already collected: FutureResult
[09:31:06.609] result() for ClusterFuture ... done
[09:31:06.609] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:06.609] result() for ClusterFuture ... done
[09:31:06.609] result() for ClusterFuture ...
[09:31:06.609] - result already collected: FutureResult
[09:31:06.609] result() for ClusterFuture ... done
v$a = 4
[09:31:06.609] getGlobalsAndPackages() ...
[09:31:06.609] Searching for globals...
[09:31:06.611] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:06.611] Searching for globals ... DONE
[09:31:06.611] Resolving globals: FALSE
[09:31:06.611] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:06.612] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:06.612] - globals: [1] ‘a’
[09:31:06.612] 
[09:31:06.612] getGlobalsAndPackages() ... DONE
[09:31:06.612] run() for ‘Future’ ...
[09:31:06.613] - state: ‘created’
[09:31:06.613] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:06.627] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:06.627] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:06.627]   - Field: ‘node’
[09:31:06.628]   - Field: ‘label’
[09:31:06.628]   - Field: ‘local’
[09:31:06.628]   - Field: ‘owner’
[09:31:06.628]   - Field: ‘envir’
[09:31:06.628]   - Field: ‘workers’
[09:31:06.628]   - Field: ‘packages’
[09:31:06.628]   - Field: ‘gc’
[09:31:06.628]   - Field: ‘conditions’
[09:31:06.628]   - Field: ‘persistent’
[09:31:06.629]   - Field: ‘expr’
[09:31:06.629]   - Field: ‘uuid’
[09:31:06.629]   - Field: ‘seed’
[09:31:06.629]   - Field: ‘version’
[09:31:06.629]   - Field: ‘result’
[09:31:06.629]   - Field: ‘asynchronous’
[09:31:06.629]   - Field: ‘calls’
[09:31:06.629]   - Field: ‘globals’
[09:31:06.629]   - Field: ‘stdout’
[09:31:06.630]   - Field: ‘earlySignal’
[09:31:06.630]   - Field: ‘lazy’
[09:31:06.630]   - Field: ‘state’
[09:31:06.630] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:06.630] - Launch lazy future ...
[09:31:06.630] Packages needed by the future expression (n = 0): <none>
[09:31:06.630] Packages needed by future strategies (n = 0): <none>
[09:31:06.631] {
[09:31:06.631]     {
[09:31:06.631]         {
[09:31:06.631]             ...future.startTime <- base::Sys.time()
[09:31:06.631]             {
[09:31:06.631]                 {
[09:31:06.631]                   {
[09:31:06.631]                     {
[09:31:06.631]                       base::local({
[09:31:06.631]                         has_future <- base::requireNamespace("future", 
[09:31:06.631]                           quietly = TRUE)
[09:31:06.631]                         if (has_future) {
[09:31:06.631]                           ns <- base::getNamespace("future")
[09:31:06.631]                           version <- ns[[".package"]][["version"]]
[09:31:06.631]                           if (is.null(version)) 
[09:31:06.631]                             version <- utils::packageVersion("future")
[09:31:06.631]                         }
[09:31:06.631]                         else {
[09:31:06.631]                           version <- NULL
[09:31:06.631]                         }
[09:31:06.631]                         if (!has_future || version < "1.8.0") {
[09:31:06.631]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:06.631]                             "", base::R.version$version.string), 
[09:31:06.631]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:06.631]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:06.631]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:06.631]                               "release", "version")], collapse = " "), 
[09:31:06.631]                             hostname = base::Sys.info()[["nodename"]])
[09:31:06.631]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:06.631]                             info)
[09:31:06.631]                           info <- base::paste(info, collapse = "; ")
[09:31:06.631]                           if (!has_future) {
[09:31:06.631]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:06.631]                               info)
[09:31:06.631]                           }
[09:31:06.631]                           else {
[09:31:06.631]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:06.631]                               info, version)
[09:31:06.631]                           }
[09:31:06.631]                           base::stop(msg)
[09:31:06.631]                         }
[09:31:06.631]                       })
[09:31:06.631]                     }
[09:31:06.631]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:06.631]                     base::options(mc.cores = 1L)
[09:31:06.631]                   }
[09:31:06.631]                   ...future.strategy.old <- future::plan("list")
[09:31:06.631]                   options(future.plan = NULL)
[09:31:06.631]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.631]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:06.631]                 }
[09:31:06.631]                 ...future.workdir <- getwd()
[09:31:06.631]             }
[09:31:06.631]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:06.631]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:06.631]         }
[09:31:06.631]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:06.631]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:06.631]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:06.631]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:06.631]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:06.631]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:06.631]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:06.631]             base::names(...future.oldOptions))
[09:31:06.631]     }
[09:31:06.631]     if (FALSE) {
[09:31:06.631]     }
[09:31:06.631]     else {
[09:31:06.631]         if (TRUE) {
[09:31:06.631]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:06.631]                 open = "w")
[09:31:06.631]         }
[09:31:06.631]         else {
[09:31:06.631]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:06.631]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:06.631]         }
[09:31:06.631]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:06.631]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:06.631]             base::sink(type = "output", split = FALSE)
[09:31:06.631]             base::close(...future.stdout)
[09:31:06.631]         }, add = TRUE)
[09:31:06.631]     }
[09:31:06.631]     ...future.frame <- base::sys.nframe()
[09:31:06.631]     ...future.conditions <- base::list()
[09:31:06.631]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:06.631]     if (FALSE) {
[09:31:06.631]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:06.631]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:06.631]     }
[09:31:06.631]     ...future.result <- base::tryCatch({
[09:31:06.631]         base::withCallingHandlers({
[09:31:06.631]             ...future.value <- base::withVisible(base::local({
[09:31:06.631]                 ...future.makeSendCondition <- base::local({
[09:31:06.631]                   sendCondition <- NULL
[09:31:06.631]                   function(frame = 1L) {
[09:31:06.631]                     if (is.function(sendCondition)) 
[09:31:06.631]                       return(sendCondition)
[09:31:06.631]                     ns <- getNamespace("parallel")
[09:31:06.631]                     if (exists("sendData", mode = "function", 
[09:31:06.631]                       envir = ns)) {
[09:31:06.631]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:06.631]                         envir = ns)
[09:31:06.631]                       envir <- sys.frame(frame)
[09:31:06.631]                       master <- NULL
[09:31:06.631]                       while (!identical(envir, .GlobalEnv) && 
[09:31:06.631]                         !identical(envir, emptyenv())) {
[09:31:06.631]                         if (exists("master", mode = "list", envir = envir, 
[09:31:06.631]                           inherits = FALSE)) {
[09:31:06.631]                           master <- get("master", mode = "list", 
[09:31:06.631]                             envir = envir, inherits = FALSE)
[09:31:06.631]                           if (inherits(master, c("SOCKnode", 
[09:31:06.631]                             "SOCK0node"))) {
[09:31:06.631]                             sendCondition <<- function(cond) {
[09:31:06.631]                               data <- list(type = "VALUE", value = cond, 
[09:31:06.631]                                 success = TRUE)
[09:31:06.631]                               parallel_sendData(master, data)
[09:31:06.631]                             }
[09:31:06.631]                             return(sendCondition)
[09:31:06.631]                           }
[09:31:06.631]                         }
[09:31:06.631]                         frame <- frame + 1L
[09:31:06.631]                         envir <- sys.frame(frame)
[09:31:06.631]                       }
[09:31:06.631]                     }
[09:31:06.631]                     sendCondition <<- function(cond) NULL
[09:31:06.631]                   }
[09:31:06.631]                 })
[09:31:06.631]                 withCallingHandlers({
[09:31:06.631]                   {
[09:31:06.631]                     2 * a
[09:31:06.631]                   }
[09:31:06.631]                 }, immediateCondition = function(cond) {
[09:31:06.631]                   sendCondition <- ...future.makeSendCondition()
[09:31:06.631]                   sendCondition(cond)
[09:31:06.631]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.631]                   {
[09:31:06.631]                     inherits <- base::inherits
[09:31:06.631]                     invokeRestart <- base::invokeRestart
[09:31:06.631]                     is.null <- base::is.null
[09:31:06.631]                     muffled <- FALSE
[09:31:06.631]                     if (inherits(cond, "message")) {
[09:31:06.631]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:06.631]                       if (muffled) 
[09:31:06.631]                         invokeRestart("muffleMessage")
[09:31:06.631]                     }
[09:31:06.631]                     else if (inherits(cond, "warning")) {
[09:31:06.631]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:06.631]                       if (muffled) 
[09:31:06.631]                         invokeRestart("muffleWarning")
[09:31:06.631]                     }
[09:31:06.631]                     else if (inherits(cond, "condition")) {
[09:31:06.631]                       if (!is.null(pattern)) {
[09:31:06.631]                         computeRestarts <- base::computeRestarts
[09:31:06.631]                         grepl <- base::grepl
[09:31:06.631]                         restarts <- computeRestarts(cond)
[09:31:06.631]                         for (restart in restarts) {
[09:31:06.631]                           name <- restart$name
[09:31:06.631]                           if (is.null(name)) 
[09:31:06.631]                             next
[09:31:06.631]                           if (!grepl(pattern, name)) 
[09:31:06.631]                             next
[09:31:06.631]                           invokeRestart(restart)
[09:31:06.631]                           muffled <- TRUE
[09:31:06.631]                           break
[09:31:06.631]                         }
[09:31:06.631]                       }
[09:31:06.631]                     }
[09:31:06.631]                     invisible(muffled)
[09:31:06.631]                   }
[09:31:06.631]                   muffleCondition(cond)
[09:31:06.631]                 })
[09:31:06.631]             }))
[09:31:06.631]             future::FutureResult(value = ...future.value$value, 
[09:31:06.631]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.631]                   ...future.rng), globalenv = if (FALSE) 
[09:31:06.631]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:06.631]                     ...future.globalenv.names))
[09:31:06.631]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:06.631]         }, condition = base::local({
[09:31:06.631]             c <- base::c
[09:31:06.631]             inherits <- base::inherits
[09:31:06.631]             invokeRestart <- base::invokeRestart
[09:31:06.631]             length <- base::length
[09:31:06.631]             list <- base::list
[09:31:06.631]             seq.int <- base::seq.int
[09:31:06.631]             signalCondition <- base::signalCondition
[09:31:06.631]             sys.calls <- base::sys.calls
[09:31:06.631]             `[[` <- base::`[[`
[09:31:06.631]             `+` <- base::`+`
[09:31:06.631]             `<<-` <- base::`<<-`
[09:31:06.631]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:06.631]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:06.631]                   3L)]
[09:31:06.631]             }
[09:31:06.631]             function(cond) {
[09:31:06.631]                 is_error <- inherits(cond, "error")
[09:31:06.631]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:06.631]                   NULL)
[09:31:06.631]                 if (is_error) {
[09:31:06.631]                   sessionInformation <- function() {
[09:31:06.631]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:06.631]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:06.631]                       search = base::search(), system = base::Sys.info())
[09:31:06.631]                   }
[09:31:06.631]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.631]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:06.631]                     cond$call), session = sessionInformation(), 
[09:31:06.631]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:06.631]                   signalCondition(cond)
[09:31:06.631]                 }
[09:31:06.631]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:06.631]                 "immediateCondition"))) {
[09:31:06.631]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:06.631]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.631]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:06.631]                   if (TRUE && !signal) {
[09:31:06.631]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.631]                     {
[09:31:06.631]                       inherits <- base::inherits
[09:31:06.631]                       invokeRestart <- base::invokeRestart
[09:31:06.631]                       is.null <- base::is.null
[09:31:06.631]                       muffled <- FALSE
[09:31:06.631]                       if (inherits(cond, "message")) {
[09:31:06.631]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.631]                         if (muffled) 
[09:31:06.631]                           invokeRestart("muffleMessage")
[09:31:06.631]                       }
[09:31:06.631]                       else if (inherits(cond, "warning")) {
[09:31:06.631]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.631]                         if (muffled) 
[09:31:06.631]                           invokeRestart("muffleWarning")
[09:31:06.631]                       }
[09:31:06.631]                       else if (inherits(cond, "condition")) {
[09:31:06.631]                         if (!is.null(pattern)) {
[09:31:06.631]                           computeRestarts <- base::computeRestarts
[09:31:06.631]                           grepl <- base::grepl
[09:31:06.631]                           restarts <- computeRestarts(cond)
[09:31:06.631]                           for (restart in restarts) {
[09:31:06.631]                             name <- restart$name
[09:31:06.631]                             if (is.null(name)) 
[09:31:06.631]                               next
[09:31:06.631]                             if (!grepl(pattern, name)) 
[09:31:06.631]                               next
[09:31:06.631]                             invokeRestart(restart)
[09:31:06.631]                             muffled <- TRUE
[09:31:06.631]                             break
[09:31:06.631]                           }
[09:31:06.631]                         }
[09:31:06.631]                       }
[09:31:06.631]                       invisible(muffled)
[09:31:06.631]                     }
[09:31:06.631]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.631]                   }
[09:31:06.631]                 }
[09:31:06.631]                 else {
[09:31:06.631]                   if (TRUE) {
[09:31:06.631]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.631]                     {
[09:31:06.631]                       inherits <- base::inherits
[09:31:06.631]                       invokeRestart <- base::invokeRestart
[09:31:06.631]                       is.null <- base::is.null
[09:31:06.631]                       muffled <- FALSE
[09:31:06.631]                       if (inherits(cond, "message")) {
[09:31:06.631]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.631]                         if (muffled) 
[09:31:06.631]                           invokeRestart("muffleMessage")
[09:31:06.631]                       }
[09:31:06.631]                       else if (inherits(cond, "warning")) {
[09:31:06.631]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.631]                         if (muffled) 
[09:31:06.631]                           invokeRestart("muffleWarning")
[09:31:06.631]                       }
[09:31:06.631]                       else if (inherits(cond, "condition")) {
[09:31:06.631]                         if (!is.null(pattern)) {
[09:31:06.631]                           computeRestarts <- base::computeRestarts
[09:31:06.631]                           grepl <- base::grepl
[09:31:06.631]                           restarts <- computeRestarts(cond)
[09:31:06.631]                           for (restart in restarts) {
[09:31:06.631]                             name <- restart$name
[09:31:06.631]                             if (is.null(name)) 
[09:31:06.631]                               next
[09:31:06.631]                             if (!grepl(pattern, name)) 
[09:31:06.631]                               next
[09:31:06.631]                             invokeRestart(restart)
[09:31:06.631]                             muffled <- TRUE
[09:31:06.631]                             break
[09:31:06.631]                           }
[09:31:06.631]                         }
[09:31:06.631]                       }
[09:31:06.631]                       invisible(muffled)
[09:31:06.631]                     }
[09:31:06.631]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.631]                   }
[09:31:06.631]                 }
[09:31:06.631]             }
[09:31:06.631]         }))
[09:31:06.631]     }, error = function(ex) {
[09:31:06.631]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:06.631]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.631]                 ...future.rng), started = ...future.startTime, 
[09:31:06.631]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:06.631]             version = "1.8"), class = "FutureResult")
[09:31:06.631]     }, finally = {
[09:31:06.631]         if (!identical(...future.workdir, getwd())) 
[09:31:06.631]             setwd(...future.workdir)
[09:31:06.631]         {
[09:31:06.631]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:06.631]                 ...future.oldOptions$nwarnings <- NULL
[09:31:06.631]             }
[09:31:06.631]             base::options(...future.oldOptions)
[09:31:06.631]             if (.Platform$OS.type == "windows") {
[09:31:06.631]                 old_names <- names(...future.oldEnvVars)
[09:31:06.631]                 envs <- base::Sys.getenv()
[09:31:06.631]                 names <- names(envs)
[09:31:06.631]                 common <- intersect(names, old_names)
[09:31:06.631]                 added <- setdiff(names, old_names)
[09:31:06.631]                 removed <- setdiff(old_names, names)
[09:31:06.631]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:06.631]                   envs[common]]
[09:31:06.631]                 NAMES <- toupper(changed)
[09:31:06.631]                 args <- list()
[09:31:06.631]                 for (kk in seq_along(NAMES)) {
[09:31:06.631]                   name <- changed[[kk]]
[09:31:06.631]                   NAME <- NAMES[[kk]]
[09:31:06.631]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.631]                     next
[09:31:06.631]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.631]                 }
[09:31:06.631]                 NAMES <- toupper(added)
[09:31:06.631]                 for (kk in seq_along(NAMES)) {
[09:31:06.631]                   name <- added[[kk]]
[09:31:06.631]                   NAME <- NAMES[[kk]]
[09:31:06.631]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.631]                     next
[09:31:06.631]                   args[[name]] <- ""
[09:31:06.631]                 }
[09:31:06.631]                 NAMES <- toupper(removed)
[09:31:06.631]                 for (kk in seq_along(NAMES)) {
[09:31:06.631]                   name <- removed[[kk]]
[09:31:06.631]                   NAME <- NAMES[[kk]]
[09:31:06.631]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.631]                     next
[09:31:06.631]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.631]                 }
[09:31:06.631]                 if (length(args) > 0) 
[09:31:06.631]                   base::do.call(base::Sys.setenv, args = args)
[09:31:06.631]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:06.631]             }
[09:31:06.631]             else {
[09:31:06.631]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:06.631]             }
[09:31:06.631]             {
[09:31:06.631]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:06.631]                   0L) {
[09:31:06.631]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:06.631]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:06.631]                   base::options(opts)
[09:31:06.631]                 }
[09:31:06.631]                 {
[09:31:06.631]                   {
[09:31:06.631]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:06.631]                     NULL
[09:31:06.631]                   }
[09:31:06.631]                   options(future.plan = NULL)
[09:31:06.631]                   if (is.na(NA_character_)) 
[09:31:06.631]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.631]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:06.631]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:06.631]                     .init = FALSE)
[09:31:06.631]                 }
[09:31:06.631]             }
[09:31:06.631]         }
[09:31:06.631]     })
[09:31:06.631]     if (TRUE) {
[09:31:06.631]         base::sink(type = "output", split = FALSE)
[09:31:06.631]         if (TRUE) {
[09:31:06.631]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:06.631]         }
[09:31:06.631]         else {
[09:31:06.631]             ...future.result["stdout"] <- base::list(NULL)
[09:31:06.631]         }
[09:31:06.631]         base::close(...future.stdout)
[09:31:06.631]         ...future.stdout <- NULL
[09:31:06.631]     }
[09:31:06.631]     ...future.result$conditions <- ...future.conditions
[09:31:06.631]     ...future.result$finished <- base::Sys.time()
[09:31:06.631]     ...future.result
[09:31:06.631] }
[09:31:06.634] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[09:31:06.634] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[09:31:06.634] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[09:31:06.635] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[09:31:06.635] MultisessionFuture started
[09:31:06.635] - Launch lazy future ... done
[09:31:06.635] run() for ‘MultisessionFuture’ ... done
[09:31:06.636] result() for ClusterFuture ...
[09:31:06.636] receiveMessageFromWorker() for ClusterFuture ...
[09:31:06.636] - Validating connection of MultisessionFuture
[09:31:06.640] - received message: FutureResult
[09:31:06.640] - Received FutureResult
[09:31:06.640] - Erased future from FutureRegistry
[09:31:06.641] result() for ClusterFuture ...
[09:31:06.641] - result already collected: FutureResult
[09:31:06.641] result() for ClusterFuture ... done
[09:31:06.641] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:06.641] result() for ClusterFuture ... done
[09:31:06.641] result() for ClusterFuture ...
[09:31:06.641] - result already collected: FutureResult
[09:31:06.641] result() for ClusterFuture ... done
[09:31:06.642] getGlobalsAndPackages() ...
[09:31:06.642] Searching for globals...
[09:31:06.643] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:06.643] Searching for globals ... DONE
[09:31:06.643] Resolving globals: FALSE
[09:31:06.644] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:06.644] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:06.644] - globals: [1] ‘a’
[09:31:06.644] 
[09:31:06.644] getGlobalsAndPackages() ... DONE
[09:31:06.645] run() for ‘Future’ ...
[09:31:06.645] - state: ‘created’
[09:31:06.645] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:06.660] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:06.661] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:06.661]   - Field: ‘node’
[09:31:06.661]   - Field: ‘label’
[09:31:06.661]   - Field: ‘local’
[09:31:06.661]   - Field: ‘owner’
[09:31:06.661]   - Field: ‘envir’
[09:31:06.661]   - Field: ‘workers’
[09:31:06.661]   - Field: ‘packages’
[09:31:06.661]   - Field: ‘gc’
[09:31:06.661]   - Field: ‘conditions’
[09:31:06.661]   - Field: ‘persistent’
[09:31:06.662]   - Field: ‘expr’
[09:31:06.662]   - Field: ‘uuid’
[09:31:06.662]   - Field: ‘seed’
[09:31:06.662]   - Field: ‘version’
[09:31:06.662]   - Field: ‘result’
[09:31:06.662]   - Field: ‘asynchronous’
[09:31:06.662]   - Field: ‘calls’
[09:31:06.662]   - Field: ‘globals’
[09:31:06.662]   - Field: ‘stdout’
[09:31:06.662]   - Field: ‘earlySignal’
[09:31:06.662]   - Field: ‘lazy’
[09:31:06.663]   - Field: ‘state’
[09:31:06.663] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:06.663] - Launch lazy future ...
[09:31:06.663] Packages needed by the future expression (n = 0): <none>
[09:31:06.663] Packages needed by future strategies (n = 0): <none>
[09:31:06.663] {
[09:31:06.663]     {
[09:31:06.663]         {
[09:31:06.663]             ...future.startTime <- base::Sys.time()
[09:31:06.663]             {
[09:31:06.663]                 {
[09:31:06.663]                   {
[09:31:06.663]                     {
[09:31:06.663]                       base::local({
[09:31:06.663]                         has_future <- base::requireNamespace("future", 
[09:31:06.663]                           quietly = TRUE)
[09:31:06.663]                         if (has_future) {
[09:31:06.663]                           ns <- base::getNamespace("future")
[09:31:06.663]                           version <- ns[[".package"]][["version"]]
[09:31:06.663]                           if (is.null(version)) 
[09:31:06.663]                             version <- utils::packageVersion("future")
[09:31:06.663]                         }
[09:31:06.663]                         else {
[09:31:06.663]                           version <- NULL
[09:31:06.663]                         }
[09:31:06.663]                         if (!has_future || version < "1.8.0") {
[09:31:06.663]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:06.663]                             "", base::R.version$version.string), 
[09:31:06.663]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:06.663]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:06.663]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:06.663]                               "release", "version")], collapse = " "), 
[09:31:06.663]                             hostname = base::Sys.info()[["nodename"]])
[09:31:06.663]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:06.663]                             info)
[09:31:06.663]                           info <- base::paste(info, collapse = "; ")
[09:31:06.663]                           if (!has_future) {
[09:31:06.663]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:06.663]                               info)
[09:31:06.663]                           }
[09:31:06.663]                           else {
[09:31:06.663]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:06.663]                               info, version)
[09:31:06.663]                           }
[09:31:06.663]                           base::stop(msg)
[09:31:06.663]                         }
[09:31:06.663]                       })
[09:31:06.663]                     }
[09:31:06.663]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:06.663]                     base::options(mc.cores = 1L)
[09:31:06.663]                   }
[09:31:06.663]                   ...future.strategy.old <- future::plan("list")
[09:31:06.663]                   options(future.plan = NULL)
[09:31:06.663]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.663]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:06.663]                 }
[09:31:06.663]                 ...future.workdir <- getwd()
[09:31:06.663]             }
[09:31:06.663]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:06.663]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:06.663]         }
[09:31:06.663]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:06.663]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:06.663]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:06.663]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:06.663]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:06.663]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:06.663]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:06.663]             base::names(...future.oldOptions))
[09:31:06.663]     }
[09:31:06.663]     if (FALSE) {
[09:31:06.663]     }
[09:31:06.663]     else {
[09:31:06.663]         if (TRUE) {
[09:31:06.663]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:06.663]                 open = "w")
[09:31:06.663]         }
[09:31:06.663]         else {
[09:31:06.663]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:06.663]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:06.663]         }
[09:31:06.663]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:06.663]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:06.663]             base::sink(type = "output", split = FALSE)
[09:31:06.663]             base::close(...future.stdout)
[09:31:06.663]         }, add = TRUE)
[09:31:06.663]     }
[09:31:06.663]     ...future.frame <- base::sys.nframe()
[09:31:06.663]     ...future.conditions <- base::list()
[09:31:06.663]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:06.663]     if (FALSE) {
[09:31:06.663]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:06.663]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:06.663]     }
[09:31:06.663]     ...future.result <- base::tryCatch({
[09:31:06.663]         base::withCallingHandlers({
[09:31:06.663]             ...future.value <- base::withVisible(base::local({
[09:31:06.663]                 ...future.makeSendCondition <- base::local({
[09:31:06.663]                   sendCondition <- NULL
[09:31:06.663]                   function(frame = 1L) {
[09:31:06.663]                     if (is.function(sendCondition)) 
[09:31:06.663]                       return(sendCondition)
[09:31:06.663]                     ns <- getNamespace("parallel")
[09:31:06.663]                     if (exists("sendData", mode = "function", 
[09:31:06.663]                       envir = ns)) {
[09:31:06.663]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:06.663]                         envir = ns)
[09:31:06.663]                       envir <- sys.frame(frame)
[09:31:06.663]                       master <- NULL
[09:31:06.663]                       while (!identical(envir, .GlobalEnv) && 
[09:31:06.663]                         !identical(envir, emptyenv())) {
[09:31:06.663]                         if (exists("master", mode = "list", envir = envir, 
[09:31:06.663]                           inherits = FALSE)) {
[09:31:06.663]                           master <- get("master", mode = "list", 
[09:31:06.663]                             envir = envir, inherits = FALSE)
[09:31:06.663]                           if (inherits(master, c("SOCKnode", 
[09:31:06.663]                             "SOCK0node"))) {
[09:31:06.663]                             sendCondition <<- function(cond) {
[09:31:06.663]                               data <- list(type = "VALUE", value = cond, 
[09:31:06.663]                                 success = TRUE)
[09:31:06.663]                               parallel_sendData(master, data)
[09:31:06.663]                             }
[09:31:06.663]                             return(sendCondition)
[09:31:06.663]                           }
[09:31:06.663]                         }
[09:31:06.663]                         frame <- frame + 1L
[09:31:06.663]                         envir <- sys.frame(frame)
[09:31:06.663]                       }
[09:31:06.663]                     }
[09:31:06.663]                     sendCondition <<- function(cond) NULL
[09:31:06.663]                   }
[09:31:06.663]                 })
[09:31:06.663]                 withCallingHandlers({
[09:31:06.663]                   {
[09:31:06.663]                     2 * a
[09:31:06.663]                   }
[09:31:06.663]                 }, immediateCondition = function(cond) {
[09:31:06.663]                   sendCondition <- ...future.makeSendCondition()
[09:31:06.663]                   sendCondition(cond)
[09:31:06.663]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.663]                   {
[09:31:06.663]                     inherits <- base::inherits
[09:31:06.663]                     invokeRestart <- base::invokeRestart
[09:31:06.663]                     is.null <- base::is.null
[09:31:06.663]                     muffled <- FALSE
[09:31:06.663]                     if (inherits(cond, "message")) {
[09:31:06.663]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:06.663]                       if (muffled) 
[09:31:06.663]                         invokeRestart("muffleMessage")
[09:31:06.663]                     }
[09:31:06.663]                     else if (inherits(cond, "warning")) {
[09:31:06.663]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:06.663]                       if (muffled) 
[09:31:06.663]                         invokeRestart("muffleWarning")
[09:31:06.663]                     }
[09:31:06.663]                     else if (inherits(cond, "condition")) {
[09:31:06.663]                       if (!is.null(pattern)) {
[09:31:06.663]                         computeRestarts <- base::computeRestarts
[09:31:06.663]                         grepl <- base::grepl
[09:31:06.663]                         restarts <- computeRestarts(cond)
[09:31:06.663]                         for (restart in restarts) {
[09:31:06.663]                           name <- restart$name
[09:31:06.663]                           if (is.null(name)) 
[09:31:06.663]                             next
[09:31:06.663]                           if (!grepl(pattern, name)) 
[09:31:06.663]                             next
[09:31:06.663]                           invokeRestart(restart)
[09:31:06.663]                           muffled <- TRUE
[09:31:06.663]                           break
[09:31:06.663]                         }
[09:31:06.663]                       }
[09:31:06.663]                     }
[09:31:06.663]                     invisible(muffled)
[09:31:06.663]                   }
[09:31:06.663]                   muffleCondition(cond)
[09:31:06.663]                 })
[09:31:06.663]             }))
[09:31:06.663]             future::FutureResult(value = ...future.value$value, 
[09:31:06.663]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.663]                   ...future.rng), globalenv = if (FALSE) 
[09:31:06.663]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:06.663]                     ...future.globalenv.names))
[09:31:06.663]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:06.663]         }, condition = base::local({
[09:31:06.663]             c <- base::c
[09:31:06.663]             inherits <- base::inherits
[09:31:06.663]             invokeRestart <- base::invokeRestart
[09:31:06.663]             length <- base::length
[09:31:06.663]             list <- base::list
[09:31:06.663]             seq.int <- base::seq.int
[09:31:06.663]             signalCondition <- base::signalCondition
[09:31:06.663]             sys.calls <- base::sys.calls
[09:31:06.663]             `[[` <- base::`[[`
[09:31:06.663]             `+` <- base::`+`
[09:31:06.663]             `<<-` <- base::`<<-`
[09:31:06.663]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:06.663]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:06.663]                   3L)]
[09:31:06.663]             }
[09:31:06.663]             function(cond) {
[09:31:06.663]                 is_error <- inherits(cond, "error")
[09:31:06.663]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:06.663]                   NULL)
[09:31:06.663]                 if (is_error) {
[09:31:06.663]                   sessionInformation <- function() {
[09:31:06.663]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:06.663]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:06.663]                       search = base::search(), system = base::Sys.info())
[09:31:06.663]                   }
[09:31:06.663]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.663]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:06.663]                     cond$call), session = sessionInformation(), 
[09:31:06.663]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:06.663]                   signalCondition(cond)
[09:31:06.663]                 }
[09:31:06.663]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:06.663]                 "immediateCondition"))) {
[09:31:06.663]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:06.663]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.663]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:06.663]                   if (TRUE && !signal) {
[09:31:06.663]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.663]                     {
[09:31:06.663]                       inherits <- base::inherits
[09:31:06.663]                       invokeRestart <- base::invokeRestart
[09:31:06.663]                       is.null <- base::is.null
[09:31:06.663]                       muffled <- FALSE
[09:31:06.663]                       if (inherits(cond, "message")) {
[09:31:06.663]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.663]                         if (muffled) 
[09:31:06.663]                           invokeRestart("muffleMessage")
[09:31:06.663]                       }
[09:31:06.663]                       else if (inherits(cond, "warning")) {
[09:31:06.663]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.663]                         if (muffled) 
[09:31:06.663]                           invokeRestart("muffleWarning")
[09:31:06.663]                       }
[09:31:06.663]                       else if (inherits(cond, "condition")) {
[09:31:06.663]                         if (!is.null(pattern)) {
[09:31:06.663]                           computeRestarts <- base::computeRestarts
[09:31:06.663]                           grepl <- base::grepl
[09:31:06.663]                           restarts <- computeRestarts(cond)
[09:31:06.663]                           for (restart in restarts) {
[09:31:06.663]                             name <- restart$name
[09:31:06.663]                             if (is.null(name)) 
[09:31:06.663]                               next
[09:31:06.663]                             if (!grepl(pattern, name)) 
[09:31:06.663]                               next
[09:31:06.663]                             invokeRestart(restart)
[09:31:06.663]                             muffled <- TRUE
[09:31:06.663]                             break
[09:31:06.663]                           }
[09:31:06.663]                         }
[09:31:06.663]                       }
[09:31:06.663]                       invisible(muffled)
[09:31:06.663]                     }
[09:31:06.663]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.663]                   }
[09:31:06.663]                 }
[09:31:06.663]                 else {
[09:31:06.663]                   if (TRUE) {
[09:31:06.663]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.663]                     {
[09:31:06.663]                       inherits <- base::inherits
[09:31:06.663]                       invokeRestart <- base::invokeRestart
[09:31:06.663]                       is.null <- base::is.null
[09:31:06.663]                       muffled <- FALSE
[09:31:06.663]                       if (inherits(cond, "message")) {
[09:31:06.663]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.663]                         if (muffled) 
[09:31:06.663]                           invokeRestart("muffleMessage")
[09:31:06.663]                       }
[09:31:06.663]                       else if (inherits(cond, "warning")) {
[09:31:06.663]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.663]                         if (muffled) 
[09:31:06.663]                           invokeRestart("muffleWarning")
[09:31:06.663]                       }
[09:31:06.663]                       else if (inherits(cond, "condition")) {
[09:31:06.663]                         if (!is.null(pattern)) {
[09:31:06.663]                           computeRestarts <- base::computeRestarts
[09:31:06.663]                           grepl <- base::grepl
[09:31:06.663]                           restarts <- computeRestarts(cond)
[09:31:06.663]                           for (restart in restarts) {
[09:31:06.663]                             name <- restart$name
[09:31:06.663]                             if (is.null(name)) 
[09:31:06.663]                               next
[09:31:06.663]                             if (!grepl(pattern, name)) 
[09:31:06.663]                               next
[09:31:06.663]                             invokeRestart(restart)
[09:31:06.663]                             muffled <- TRUE
[09:31:06.663]                             break
[09:31:06.663]                           }
[09:31:06.663]                         }
[09:31:06.663]                       }
[09:31:06.663]                       invisible(muffled)
[09:31:06.663]                     }
[09:31:06.663]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.663]                   }
[09:31:06.663]                 }
[09:31:06.663]             }
[09:31:06.663]         }))
[09:31:06.663]     }, error = function(ex) {
[09:31:06.663]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:06.663]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.663]                 ...future.rng), started = ...future.startTime, 
[09:31:06.663]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:06.663]             version = "1.8"), class = "FutureResult")
[09:31:06.663]     }, finally = {
[09:31:06.663]         if (!identical(...future.workdir, getwd())) 
[09:31:06.663]             setwd(...future.workdir)
[09:31:06.663]         {
[09:31:06.663]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:06.663]                 ...future.oldOptions$nwarnings <- NULL
[09:31:06.663]             }
[09:31:06.663]             base::options(...future.oldOptions)
[09:31:06.663]             if (.Platform$OS.type == "windows") {
[09:31:06.663]                 old_names <- names(...future.oldEnvVars)
[09:31:06.663]                 envs <- base::Sys.getenv()
[09:31:06.663]                 names <- names(envs)
[09:31:06.663]                 common <- intersect(names, old_names)
[09:31:06.663]                 added <- setdiff(names, old_names)
[09:31:06.663]                 removed <- setdiff(old_names, names)
[09:31:06.663]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:06.663]                   envs[common]]
[09:31:06.663]                 NAMES <- toupper(changed)
[09:31:06.663]                 args <- list()
[09:31:06.663]                 for (kk in seq_along(NAMES)) {
[09:31:06.663]                   name <- changed[[kk]]
[09:31:06.663]                   NAME <- NAMES[[kk]]
[09:31:06.663]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.663]                     next
[09:31:06.663]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.663]                 }
[09:31:06.663]                 NAMES <- toupper(added)
[09:31:06.663]                 for (kk in seq_along(NAMES)) {
[09:31:06.663]                   name <- added[[kk]]
[09:31:06.663]                   NAME <- NAMES[[kk]]
[09:31:06.663]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.663]                     next
[09:31:06.663]                   args[[name]] <- ""
[09:31:06.663]                 }
[09:31:06.663]                 NAMES <- toupper(removed)
[09:31:06.663]                 for (kk in seq_along(NAMES)) {
[09:31:06.663]                   name <- removed[[kk]]
[09:31:06.663]                   NAME <- NAMES[[kk]]
[09:31:06.663]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.663]                     next
[09:31:06.663]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.663]                 }
[09:31:06.663]                 if (length(args) > 0) 
[09:31:06.663]                   base::do.call(base::Sys.setenv, args = args)
[09:31:06.663]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:06.663]             }
[09:31:06.663]             else {
[09:31:06.663]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:06.663]             }
[09:31:06.663]             {
[09:31:06.663]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:06.663]                   0L) {
[09:31:06.663]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:06.663]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:06.663]                   base::options(opts)
[09:31:06.663]                 }
[09:31:06.663]                 {
[09:31:06.663]                   {
[09:31:06.663]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:06.663]                     NULL
[09:31:06.663]                   }
[09:31:06.663]                   options(future.plan = NULL)
[09:31:06.663]                   if (is.na(NA_character_)) 
[09:31:06.663]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.663]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:06.663]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:06.663]                     .init = FALSE)
[09:31:06.663]                 }
[09:31:06.663]             }
[09:31:06.663]         }
[09:31:06.663]     })
[09:31:06.663]     if (TRUE) {
[09:31:06.663]         base::sink(type = "output", split = FALSE)
[09:31:06.663]         if (TRUE) {
[09:31:06.663]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:06.663]         }
[09:31:06.663]         else {
[09:31:06.663]             ...future.result["stdout"] <- base::list(NULL)
[09:31:06.663]         }
[09:31:06.663]         base::close(...future.stdout)
[09:31:06.663]         ...future.stdout <- NULL
[09:31:06.663]     }
[09:31:06.663]     ...future.result$conditions <- ...future.conditions
[09:31:06.663]     ...future.result$finished <- base::Sys.time()
[09:31:06.663]     ...future.result
[09:31:06.663] }
[09:31:06.666] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[09:31:06.666] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[09:31:06.666] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[09:31:06.667] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[09:31:06.667] MultisessionFuture started
[09:31:06.667] - Launch lazy future ... done
[09:31:06.667] run() for ‘MultisessionFuture’ ... done
[09:31:06.668] result() for ClusterFuture ...
[09:31:06.668] receiveMessageFromWorker() for ClusterFuture ...
[09:31:06.668] - Validating connection of MultisessionFuture
[09:31:06.669] - received message: FutureResult
[09:31:06.669] - Received FutureResult
[09:31:06.669] - Erased future from FutureRegistry
[09:31:06.669] result() for ClusterFuture ...
[09:31:06.669] - result already collected: FutureResult
[09:31:06.669] result() for ClusterFuture ... done
[09:31:06.669] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:06.670] result() for ClusterFuture ... done
[09:31:06.670] result() for ClusterFuture ...
[09:31:06.670] - result already collected: FutureResult
[09:31:06.670] result() for ClusterFuture ... done
[09:31:06.670] getGlobalsAndPackages() ...
[09:31:06.670] Searching for globals...
[09:31:06.671] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:06.671] Searching for globals ... DONE
[09:31:06.671] Resolving globals: FALSE
[09:31:06.671] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:06.672] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:06.672] - globals: [1] ‘a’
[09:31:06.672] 
[09:31:06.672] getGlobalsAndPackages() ... DONE
[09:31:06.672] run() for ‘Future’ ...
[09:31:06.672] - state: ‘created’
[09:31:06.672] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:06.686] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:06.686] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:06.686]   - Field: ‘node’
[09:31:06.686]   - Field: ‘label’
[09:31:06.686]   - Field: ‘local’
[09:31:06.686]   - Field: ‘owner’
[09:31:06.686]   - Field: ‘envir’
[09:31:06.686]   - Field: ‘workers’
[09:31:06.686]   - Field: ‘packages’
[09:31:06.687]   - Field: ‘gc’
[09:31:06.687]   - Field: ‘conditions’
[09:31:06.687]   - Field: ‘persistent’
[09:31:06.687]   - Field: ‘expr’
[09:31:06.687]   - Field: ‘uuid’
[09:31:06.687]   - Field: ‘seed’
[09:31:06.687]   - Field: ‘version’
[09:31:06.687]   - Field: ‘result’
[09:31:06.687]   - Field: ‘asynchronous’
[09:31:06.687]   - Field: ‘calls’
[09:31:06.687]   - Field: ‘globals’
[09:31:06.688]   - Field: ‘stdout’
[09:31:06.688]   - Field: ‘earlySignal’
[09:31:06.688]   - Field: ‘lazy’
[09:31:06.688]   - Field: ‘state’
[09:31:06.688] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:06.688] - Launch lazy future ...
[09:31:06.688] Packages needed by the future expression (n = 0): <none>
[09:31:06.688] Packages needed by future strategies (n = 0): <none>
[09:31:06.689] {
[09:31:06.689]     {
[09:31:06.689]         {
[09:31:06.689]             ...future.startTime <- base::Sys.time()
[09:31:06.689]             {
[09:31:06.689]                 {
[09:31:06.689]                   {
[09:31:06.689]                     {
[09:31:06.689]                       base::local({
[09:31:06.689]                         has_future <- base::requireNamespace("future", 
[09:31:06.689]                           quietly = TRUE)
[09:31:06.689]                         if (has_future) {
[09:31:06.689]                           ns <- base::getNamespace("future")
[09:31:06.689]                           version <- ns[[".package"]][["version"]]
[09:31:06.689]                           if (is.null(version)) 
[09:31:06.689]                             version <- utils::packageVersion("future")
[09:31:06.689]                         }
[09:31:06.689]                         else {
[09:31:06.689]                           version <- NULL
[09:31:06.689]                         }
[09:31:06.689]                         if (!has_future || version < "1.8.0") {
[09:31:06.689]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:06.689]                             "", base::R.version$version.string), 
[09:31:06.689]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:06.689]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:06.689]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:06.689]                               "release", "version")], collapse = " "), 
[09:31:06.689]                             hostname = base::Sys.info()[["nodename"]])
[09:31:06.689]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:06.689]                             info)
[09:31:06.689]                           info <- base::paste(info, collapse = "; ")
[09:31:06.689]                           if (!has_future) {
[09:31:06.689]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:06.689]                               info)
[09:31:06.689]                           }
[09:31:06.689]                           else {
[09:31:06.689]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:06.689]                               info, version)
[09:31:06.689]                           }
[09:31:06.689]                           base::stop(msg)
[09:31:06.689]                         }
[09:31:06.689]                       })
[09:31:06.689]                     }
[09:31:06.689]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:06.689]                     base::options(mc.cores = 1L)
[09:31:06.689]                   }
[09:31:06.689]                   ...future.strategy.old <- future::plan("list")
[09:31:06.689]                   options(future.plan = NULL)
[09:31:06.689]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.689]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:06.689]                 }
[09:31:06.689]                 ...future.workdir <- getwd()
[09:31:06.689]             }
[09:31:06.689]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:06.689]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:06.689]         }
[09:31:06.689]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:06.689]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:06.689]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:06.689]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:06.689]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:06.689]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:06.689]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:06.689]             base::names(...future.oldOptions))
[09:31:06.689]     }
[09:31:06.689]     if (FALSE) {
[09:31:06.689]     }
[09:31:06.689]     else {
[09:31:06.689]         if (TRUE) {
[09:31:06.689]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:06.689]                 open = "w")
[09:31:06.689]         }
[09:31:06.689]         else {
[09:31:06.689]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:06.689]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:06.689]         }
[09:31:06.689]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:06.689]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:06.689]             base::sink(type = "output", split = FALSE)
[09:31:06.689]             base::close(...future.stdout)
[09:31:06.689]         }, add = TRUE)
[09:31:06.689]     }
[09:31:06.689]     ...future.frame <- base::sys.nframe()
[09:31:06.689]     ...future.conditions <- base::list()
[09:31:06.689]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:06.689]     if (FALSE) {
[09:31:06.689]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:06.689]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:06.689]     }
[09:31:06.689]     ...future.result <- base::tryCatch({
[09:31:06.689]         base::withCallingHandlers({
[09:31:06.689]             ...future.value <- base::withVisible(base::local({
[09:31:06.689]                 ...future.makeSendCondition <- base::local({
[09:31:06.689]                   sendCondition <- NULL
[09:31:06.689]                   function(frame = 1L) {
[09:31:06.689]                     if (is.function(sendCondition)) 
[09:31:06.689]                       return(sendCondition)
[09:31:06.689]                     ns <- getNamespace("parallel")
[09:31:06.689]                     if (exists("sendData", mode = "function", 
[09:31:06.689]                       envir = ns)) {
[09:31:06.689]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:06.689]                         envir = ns)
[09:31:06.689]                       envir <- sys.frame(frame)
[09:31:06.689]                       master <- NULL
[09:31:06.689]                       while (!identical(envir, .GlobalEnv) && 
[09:31:06.689]                         !identical(envir, emptyenv())) {
[09:31:06.689]                         if (exists("master", mode = "list", envir = envir, 
[09:31:06.689]                           inherits = FALSE)) {
[09:31:06.689]                           master <- get("master", mode = "list", 
[09:31:06.689]                             envir = envir, inherits = FALSE)
[09:31:06.689]                           if (inherits(master, c("SOCKnode", 
[09:31:06.689]                             "SOCK0node"))) {
[09:31:06.689]                             sendCondition <<- function(cond) {
[09:31:06.689]                               data <- list(type = "VALUE", value = cond, 
[09:31:06.689]                                 success = TRUE)
[09:31:06.689]                               parallel_sendData(master, data)
[09:31:06.689]                             }
[09:31:06.689]                             return(sendCondition)
[09:31:06.689]                           }
[09:31:06.689]                         }
[09:31:06.689]                         frame <- frame + 1L
[09:31:06.689]                         envir <- sys.frame(frame)
[09:31:06.689]                       }
[09:31:06.689]                     }
[09:31:06.689]                     sendCondition <<- function(cond) NULL
[09:31:06.689]                   }
[09:31:06.689]                 })
[09:31:06.689]                 withCallingHandlers({
[09:31:06.689]                   {
[09:31:06.689]                     2 * a
[09:31:06.689]                   }
[09:31:06.689]                 }, immediateCondition = function(cond) {
[09:31:06.689]                   sendCondition <- ...future.makeSendCondition()
[09:31:06.689]                   sendCondition(cond)
[09:31:06.689]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.689]                   {
[09:31:06.689]                     inherits <- base::inherits
[09:31:06.689]                     invokeRestart <- base::invokeRestart
[09:31:06.689]                     is.null <- base::is.null
[09:31:06.689]                     muffled <- FALSE
[09:31:06.689]                     if (inherits(cond, "message")) {
[09:31:06.689]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:06.689]                       if (muffled) 
[09:31:06.689]                         invokeRestart("muffleMessage")
[09:31:06.689]                     }
[09:31:06.689]                     else if (inherits(cond, "warning")) {
[09:31:06.689]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:06.689]                       if (muffled) 
[09:31:06.689]                         invokeRestart("muffleWarning")
[09:31:06.689]                     }
[09:31:06.689]                     else if (inherits(cond, "condition")) {
[09:31:06.689]                       if (!is.null(pattern)) {
[09:31:06.689]                         computeRestarts <- base::computeRestarts
[09:31:06.689]                         grepl <- base::grepl
[09:31:06.689]                         restarts <- computeRestarts(cond)
[09:31:06.689]                         for (restart in restarts) {
[09:31:06.689]                           name <- restart$name
[09:31:06.689]                           if (is.null(name)) 
[09:31:06.689]                             next
[09:31:06.689]                           if (!grepl(pattern, name)) 
[09:31:06.689]                             next
[09:31:06.689]                           invokeRestart(restart)
[09:31:06.689]                           muffled <- TRUE
[09:31:06.689]                           break
[09:31:06.689]                         }
[09:31:06.689]                       }
[09:31:06.689]                     }
[09:31:06.689]                     invisible(muffled)
[09:31:06.689]                   }
[09:31:06.689]                   muffleCondition(cond)
[09:31:06.689]                 })
[09:31:06.689]             }))
[09:31:06.689]             future::FutureResult(value = ...future.value$value, 
[09:31:06.689]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.689]                   ...future.rng), globalenv = if (FALSE) 
[09:31:06.689]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:06.689]                     ...future.globalenv.names))
[09:31:06.689]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:06.689]         }, condition = base::local({
[09:31:06.689]             c <- base::c
[09:31:06.689]             inherits <- base::inherits
[09:31:06.689]             invokeRestart <- base::invokeRestart
[09:31:06.689]             length <- base::length
[09:31:06.689]             list <- base::list
[09:31:06.689]             seq.int <- base::seq.int
[09:31:06.689]             signalCondition <- base::signalCondition
[09:31:06.689]             sys.calls <- base::sys.calls
[09:31:06.689]             `[[` <- base::`[[`
[09:31:06.689]             `+` <- base::`+`
[09:31:06.689]             `<<-` <- base::`<<-`
[09:31:06.689]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:06.689]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:06.689]                   3L)]
[09:31:06.689]             }
[09:31:06.689]             function(cond) {
[09:31:06.689]                 is_error <- inherits(cond, "error")
[09:31:06.689]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:06.689]                   NULL)
[09:31:06.689]                 if (is_error) {
[09:31:06.689]                   sessionInformation <- function() {
[09:31:06.689]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:06.689]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:06.689]                       search = base::search(), system = base::Sys.info())
[09:31:06.689]                   }
[09:31:06.689]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.689]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:06.689]                     cond$call), session = sessionInformation(), 
[09:31:06.689]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:06.689]                   signalCondition(cond)
[09:31:06.689]                 }
[09:31:06.689]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:06.689]                 "immediateCondition"))) {
[09:31:06.689]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:06.689]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.689]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:06.689]                   if (TRUE && !signal) {
[09:31:06.689]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.689]                     {
[09:31:06.689]                       inherits <- base::inherits
[09:31:06.689]                       invokeRestart <- base::invokeRestart
[09:31:06.689]                       is.null <- base::is.null
[09:31:06.689]                       muffled <- FALSE
[09:31:06.689]                       if (inherits(cond, "message")) {
[09:31:06.689]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.689]                         if (muffled) 
[09:31:06.689]                           invokeRestart("muffleMessage")
[09:31:06.689]                       }
[09:31:06.689]                       else if (inherits(cond, "warning")) {
[09:31:06.689]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.689]                         if (muffled) 
[09:31:06.689]                           invokeRestart("muffleWarning")
[09:31:06.689]                       }
[09:31:06.689]                       else if (inherits(cond, "condition")) {
[09:31:06.689]                         if (!is.null(pattern)) {
[09:31:06.689]                           computeRestarts <- base::computeRestarts
[09:31:06.689]                           grepl <- base::grepl
[09:31:06.689]                           restarts <- computeRestarts(cond)
[09:31:06.689]                           for (restart in restarts) {
[09:31:06.689]                             name <- restart$name
[09:31:06.689]                             if (is.null(name)) 
[09:31:06.689]                               next
[09:31:06.689]                             if (!grepl(pattern, name)) 
[09:31:06.689]                               next
[09:31:06.689]                             invokeRestart(restart)
[09:31:06.689]                             muffled <- TRUE
[09:31:06.689]                             break
[09:31:06.689]                           }
[09:31:06.689]                         }
[09:31:06.689]                       }
[09:31:06.689]                       invisible(muffled)
[09:31:06.689]                     }
[09:31:06.689]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.689]                   }
[09:31:06.689]                 }
[09:31:06.689]                 else {
[09:31:06.689]                   if (TRUE) {
[09:31:06.689]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.689]                     {
[09:31:06.689]                       inherits <- base::inherits
[09:31:06.689]                       invokeRestart <- base::invokeRestart
[09:31:06.689]                       is.null <- base::is.null
[09:31:06.689]                       muffled <- FALSE
[09:31:06.689]                       if (inherits(cond, "message")) {
[09:31:06.689]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.689]                         if (muffled) 
[09:31:06.689]                           invokeRestart("muffleMessage")
[09:31:06.689]                       }
[09:31:06.689]                       else if (inherits(cond, "warning")) {
[09:31:06.689]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.689]                         if (muffled) 
[09:31:06.689]                           invokeRestart("muffleWarning")
[09:31:06.689]                       }
[09:31:06.689]                       else if (inherits(cond, "condition")) {
[09:31:06.689]                         if (!is.null(pattern)) {
[09:31:06.689]                           computeRestarts <- base::computeRestarts
[09:31:06.689]                           grepl <- base::grepl
[09:31:06.689]                           restarts <- computeRestarts(cond)
[09:31:06.689]                           for (restart in restarts) {
[09:31:06.689]                             name <- restart$name
[09:31:06.689]                             if (is.null(name)) 
[09:31:06.689]                               next
[09:31:06.689]                             if (!grepl(pattern, name)) 
[09:31:06.689]                               next
[09:31:06.689]                             invokeRestart(restart)
[09:31:06.689]                             muffled <- TRUE
[09:31:06.689]                             break
[09:31:06.689]                           }
[09:31:06.689]                         }
[09:31:06.689]                       }
[09:31:06.689]                       invisible(muffled)
[09:31:06.689]                     }
[09:31:06.689]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.689]                   }
[09:31:06.689]                 }
[09:31:06.689]             }
[09:31:06.689]         }))
[09:31:06.689]     }, error = function(ex) {
[09:31:06.689]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:06.689]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.689]                 ...future.rng), started = ...future.startTime, 
[09:31:06.689]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:06.689]             version = "1.8"), class = "FutureResult")
[09:31:06.689]     }, finally = {
[09:31:06.689]         if (!identical(...future.workdir, getwd())) 
[09:31:06.689]             setwd(...future.workdir)
[09:31:06.689]         {
[09:31:06.689]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:06.689]                 ...future.oldOptions$nwarnings <- NULL
[09:31:06.689]             }
[09:31:06.689]             base::options(...future.oldOptions)
[09:31:06.689]             if (.Platform$OS.type == "windows") {
[09:31:06.689]                 old_names <- names(...future.oldEnvVars)
[09:31:06.689]                 envs <- base::Sys.getenv()
[09:31:06.689]                 names <- names(envs)
[09:31:06.689]                 common <- intersect(names, old_names)
[09:31:06.689]                 added <- setdiff(names, old_names)
[09:31:06.689]                 removed <- setdiff(old_names, names)
[09:31:06.689]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:06.689]                   envs[common]]
[09:31:06.689]                 NAMES <- toupper(changed)
[09:31:06.689]                 args <- list()
[09:31:06.689]                 for (kk in seq_along(NAMES)) {
[09:31:06.689]                   name <- changed[[kk]]
[09:31:06.689]                   NAME <- NAMES[[kk]]
[09:31:06.689]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.689]                     next
[09:31:06.689]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.689]                 }
[09:31:06.689]                 NAMES <- toupper(added)
[09:31:06.689]                 for (kk in seq_along(NAMES)) {
[09:31:06.689]                   name <- added[[kk]]
[09:31:06.689]                   NAME <- NAMES[[kk]]
[09:31:06.689]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.689]                     next
[09:31:06.689]                   args[[name]] <- ""
[09:31:06.689]                 }
[09:31:06.689]                 NAMES <- toupper(removed)
[09:31:06.689]                 for (kk in seq_along(NAMES)) {
[09:31:06.689]                   name <- removed[[kk]]
[09:31:06.689]                   NAME <- NAMES[[kk]]
[09:31:06.689]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.689]                     next
[09:31:06.689]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.689]                 }
[09:31:06.689]                 if (length(args) > 0) 
[09:31:06.689]                   base::do.call(base::Sys.setenv, args = args)
[09:31:06.689]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:06.689]             }
[09:31:06.689]             else {
[09:31:06.689]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:06.689]             }
[09:31:06.689]             {
[09:31:06.689]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:06.689]                   0L) {
[09:31:06.689]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:06.689]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:06.689]                   base::options(opts)
[09:31:06.689]                 }
[09:31:06.689]                 {
[09:31:06.689]                   {
[09:31:06.689]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:06.689]                     NULL
[09:31:06.689]                   }
[09:31:06.689]                   options(future.plan = NULL)
[09:31:06.689]                   if (is.na(NA_character_)) 
[09:31:06.689]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.689]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:06.689]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:06.689]                     .init = FALSE)
[09:31:06.689]                 }
[09:31:06.689]             }
[09:31:06.689]         }
[09:31:06.689]     })
[09:31:06.689]     if (TRUE) {
[09:31:06.689]         base::sink(type = "output", split = FALSE)
[09:31:06.689]         if (TRUE) {
[09:31:06.689]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:06.689]         }
[09:31:06.689]         else {
[09:31:06.689]             ...future.result["stdout"] <- base::list(NULL)
[09:31:06.689]         }
[09:31:06.689]         base::close(...future.stdout)
[09:31:06.689]         ...future.stdout <- NULL
[09:31:06.689]     }
[09:31:06.689]     ...future.result$conditions <- ...future.conditions
[09:31:06.689]     ...future.result$finished <- base::Sys.time()
[09:31:06.689]     ...future.result
[09:31:06.689] }
[09:31:06.691] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[09:31:06.691] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[09:31:06.692] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[09:31:06.692] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[09:31:06.692] MultisessionFuture started
[09:31:06.692] - Launch lazy future ... done
[09:31:06.692] run() for ‘MultisessionFuture’ ... done
[09:31:06.693] result() for ClusterFuture ...
[09:31:06.693] receiveMessageFromWorker() for ClusterFuture ...
[09:31:06.693] - Validating connection of MultisessionFuture
[09:31:06.694] - received message: FutureResult
[09:31:06.694] - Received FutureResult
[09:31:06.694] - Erased future from FutureRegistry
[09:31:06.694] result() for ClusterFuture ...
[09:31:06.694] - result already collected: FutureResult
[09:31:06.694] result() for ClusterFuture ... done
[09:31:06.694] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:06.694] result() for ClusterFuture ... done
[09:31:06.694] result() for ClusterFuture ...
[09:31:06.694] - result already collected: FutureResult
[09:31:06.694] result() for ClusterFuture ... done
[09:31:06.695] getGlobalsAndPackages() ...
[09:31:06.695] Searching for globals...
[09:31:06.695] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:06.696] Searching for globals ... DONE
[09:31:06.696] Resolving globals: FALSE
[09:31:06.696] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:06.696] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:06.696] - globals: [1] ‘a’
[09:31:06.697] 
[09:31:06.697] getGlobalsAndPackages() ... DONE
[09:31:06.697] run() for ‘Future’ ...
[09:31:06.697] - state: ‘created’
[09:31:06.697] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:06.711] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:06.711] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:06.711]   - Field: ‘node’
[09:31:06.711]   - Field: ‘label’
[09:31:06.711]   - Field: ‘local’
[09:31:06.711]   - Field: ‘owner’
[09:31:06.712]   - Field: ‘envir’
[09:31:06.712]   - Field: ‘workers’
[09:31:06.712]   - Field: ‘packages’
[09:31:06.712]   - Field: ‘gc’
[09:31:06.712]   - Field: ‘conditions’
[09:31:06.712]   - Field: ‘persistent’
[09:31:06.712]   - Field: ‘expr’
[09:31:06.712]   - Field: ‘uuid’
[09:31:06.712]   - Field: ‘seed’
[09:31:06.712]   - Field: ‘version’
[09:31:06.712]   - Field: ‘result’
[09:31:06.713]   - Field: ‘asynchronous’
[09:31:06.713]   - Field: ‘calls’
[09:31:06.713]   - Field: ‘globals’
[09:31:06.713]   - Field: ‘stdout’
[09:31:06.713]   - Field: ‘earlySignal’
[09:31:06.713]   - Field: ‘lazy’
[09:31:06.713]   - Field: ‘state’
[09:31:06.713] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:06.713] - Launch lazy future ...
[09:31:06.713] Packages needed by the future expression (n = 0): <none>
[09:31:06.714] Packages needed by future strategies (n = 0): <none>
[09:31:06.714] {
[09:31:06.714]     {
[09:31:06.714]         {
[09:31:06.714]             ...future.startTime <- base::Sys.time()
[09:31:06.714]             {
[09:31:06.714]                 {
[09:31:06.714]                   {
[09:31:06.714]                     {
[09:31:06.714]                       base::local({
[09:31:06.714]                         has_future <- base::requireNamespace("future", 
[09:31:06.714]                           quietly = TRUE)
[09:31:06.714]                         if (has_future) {
[09:31:06.714]                           ns <- base::getNamespace("future")
[09:31:06.714]                           version <- ns[[".package"]][["version"]]
[09:31:06.714]                           if (is.null(version)) 
[09:31:06.714]                             version <- utils::packageVersion("future")
[09:31:06.714]                         }
[09:31:06.714]                         else {
[09:31:06.714]                           version <- NULL
[09:31:06.714]                         }
[09:31:06.714]                         if (!has_future || version < "1.8.0") {
[09:31:06.714]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:06.714]                             "", base::R.version$version.string), 
[09:31:06.714]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:06.714]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:06.714]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:06.714]                               "release", "version")], collapse = " "), 
[09:31:06.714]                             hostname = base::Sys.info()[["nodename"]])
[09:31:06.714]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:06.714]                             info)
[09:31:06.714]                           info <- base::paste(info, collapse = "; ")
[09:31:06.714]                           if (!has_future) {
[09:31:06.714]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:06.714]                               info)
[09:31:06.714]                           }
[09:31:06.714]                           else {
[09:31:06.714]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:06.714]                               info, version)
[09:31:06.714]                           }
[09:31:06.714]                           base::stop(msg)
[09:31:06.714]                         }
[09:31:06.714]                       })
[09:31:06.714]                     }
[09:31:06.714]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:06.714]                     base::options(mc.cores = 1L)
[09:31:06.714]                   }
[09:31:06.714]                   ...future.strategy.old <- future::plan("list")
[09:31:06.714]                   options(future.plan = NULL)
[09:31:06.714]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.714]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:06.714]                 }
[09:31:06.714]                 ...future.workdir <- getwd()
[09:31:06.714]             }
[09:31:06.714]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:06.714]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:06.714]         }
[09:31:06.714]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:06.714]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:06.714]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:06.714]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:06.714]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:06.714]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:06.714]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:06.714]             base::names(...future.oldOptions))
[09:31:06.714]     }
[09:31:06.714]     if (FALSE) {
[09:31:06.714]     }
[09:31:06.714]     else {
[09:31:06.714]         if (TRUE) {
[09:31:06.714]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:06.714]                 open = "w")
[09:31:06.714]         }
[09:31:06.714]         else {
[09:31:06.714]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:06.714]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:06.714]         }
[09:31:06.714]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:06.714]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:06.714]             base::sink(type = "output", split = FALSE)
[09:31:06.714]             base::close(...future.stdout)
[09:31:06.714]         }, add = TRUE)
[09:31:06.714]     }
[09:31:06.714]     ...future.frame <- base::sys.nframe()
[09:31:06.714]     ...future.conditions <- base::list()
[09:31:06.714]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:06.714]     if (FALSE) {
[09:31:06.714]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:06.714]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:06.714]     }
[09:31:06.714]     ...future.result <- base::tryCatch({
[09:31:06.714]         base::withCallingHandlers({
[09:31:06.714]             ...future.value <- base::withVisible(base::local({
[09:31:06.714]                 ...future.makeSendCondition <- base::local({
[09:31:06.714]                   sendCondition <- NULL
[09:31:06.714]                   function(frame = 1L) {
[09:31:06.714]                     if (is.function(sendCondition)) 
[09:31:06.714]                       return(sendCondition)
[09:31:06.714]                     ns <- getNamespace("parallel")
[09:31:06.714]                     if (exists("sendData", mode = "function", 
[09:31:06.714]                       envir = ns)) {
[09:31:06.714]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:06.714]                         envir = ns)
[09:31:06.714]                       envir <- sys.frame(frame)
[09:31:06.714]                       master <- NULL
[09:31:06.714]                       while (!identical(envir, .GlobalEnv) && 
[09:31:06.714]                         !identical(envir, emptyenv())) {
[09:31:06.714]                         if (exists("master", mode = "list", envir = envir, 
[09:31:06.714]                           inherits = FALSE)) {
[09:31:06.714]                           master <- get("master", mode = "list", 
[09:31:06.714]                             envir = envir, inherits = FALSE)
[09:31:06.714]                           if (inherits(master, c("SOCKnode", 
[09:31:06.714]                             "SOCK0node"))) {
[09:31:06.714]                             sendCondition <<- function(cond) {
[09:31:06.714]                               data <- list(type = "VALUE", value = cond, 
[09:31:06.714]                                 success = TRUE)
[09:31:06.714]                               parallel_sendData(master, data)
[09:31:06.714]                             }
[09:31:06.714]                             return(sendCondition)
[09:31:06.714]                           }
[09:31:06.714]                         }
[09:31:06.714]                         frame <- frame + 1L
[09:31:06.714]                         envir <- sys.frame(frame)
[09:31:06.714]                       }
[09:31:06.714]                     }
[09:31:06.714]                     sendCondition <<- function(cond) NULL
[09:31:06.714]                   }
[09:31:06.714]                 })
[09:31:06.714]                 withCallingHandlers({
[09:31:06.714]                   {
[09:31:06.714]                     2 * a
[09:31:06.714]                   }
[09:31:06.714]                 }, immediateCondition = function(cond) {
[09:31:06.714]                   sendCondition <- ...future.makeSendCondition()
[09:31:06.714]                   sendCondition(cond)
[09:31:06.714]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.714]                   {
[09:31:06.714]                     inherits <- base::inherits
[09:31:06.714]                     invokeRestart <- base::invokeRestart
[09:31:06.714]                     is.null <- base::is.null
[09:31:06.714]                     muffled <- FALSE
[09:31:06.714]                     if (inherits(cond, "message")) {
[09:31:06.714]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:06.714]                       if (muffled) 
[09:31:06.714]                         invokeRestart("muffleMessage")
[09:31:06.714]                     }
[09:31:06.714]                     else if (inherits(cond, "warning")) {
[09:31:06.714]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:06.714]                       if (muffled) 
[09:31:06.714]                         invokeRestart("muffleWarning")
[09:31:06.714]                     }
[09:31:06.714]                     else if (inherits(cond, "condition")) {
[09:31:06.714]                       if (!is.null(pattern)) {
[09:31:06.714]                         computeRestarts <- base::computeRestarts
[09:31:06.714]                         grepl <- base::grepl
[09:31:06.714]                         restarts <- computeRestarts(cond)
[09:31:06.714]                         for (restart in restarts) {
[09:31:06.714]                           name <- restart$name
[09:31:06.714]                           if (is.null(name)) 
[09:31:06.714]                             next
[09:31:06.714]                           if (!grepl(pattern, name)) 
[09:31:06.714]                             next
[09:31:06.714]                           invokeRestart(restart)
[09:31:06.714]                           muffled <- TRUE
[09:31:06.714]                           break
[09:31:06.714]                         }
[09:31:06.714]                       }
[09:31:06.714]                     }
[09:31:06.714]                     invisible(muffled)
[09:31:06.714]                   }
[09:31:06.714]                   muffleCondition(cond)
[09:31:06.714]                 })
[09:31:06.714]             }))
[09:31:06.714]             future::FutureResult(value = ...future.value$value, 
[09:31:06.714]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.714]                   ...future.rng), globalenv = if (FALSE) 
[09:31:06.714]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:06.714]                     ...future.globalenv.names))
[09:31:06.714]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:06.714]         }, condition = base::local({
[09:31:06.714]             c <- base::c
[09:31:06.714]             inherits <- base::inherits
[09:31:06.714]             invokeRestart <- base::invokeRestart
[09:31:06.714]             length <- base::length
[09:31:06.714]             list <- base::list
[09:31:06.714]             seq.int <- base::seq.int
[09:31:06.714]             signalCondition <- base::signalCondition
[09:31:06.714]             sys.calls <- base::sys.calls
[09:31:06.714]             `[[` <- base::`[[`
[09:31:06.714]             `+` <- base::`+`
[09:31:06.714]             `<<-` <- base::`<<-`
[09:31:06.714]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:06.714]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:06.714]                   3L)]
[09:31:06.714]             }
[09:31:06.714]             function(cond) {
[09:31:06.714]                 is_error <- inherits(cond, "error")
[09:31:06.714]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:06.714]                   NULL)
[09:31:06.714]                 if (is_error) {
[09:31:06.714]                   sessionInformation <- function() {
[09:31:06.714]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:06.714]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:06.714]                       search = base::search(), system = base::Sys.info())
[09:31:06.714]                   }
[09:31:06.714]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.714]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:06.714]                     cond$call), session = sessionInformation(), 
[09:31:06.714]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:06.714]                   signalCondition(cond)
[09:31:06.714]                 }
[09:31:06.714]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:06.714]                 "immediateCondition"))) {
[09:31:06.714]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:06.714]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.714]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:06.714]                   if (TRUE && !signal) {
[09:31:06.714]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.714]                     {
[09:31:06.714]                       inherits <- base::inherits
[09:31:06.714]                       invokeRestart <- base::invokeRestart
[09:31:06.714]                       is.null <- base::is.null
[09:31:06.714]                       muffled <- FALSE
[09:31:06.714]                       if (inherits(cond, "message")) {
[09:31:06.714]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.714]                         if (muffled) 
[09:31:06.714]                           invokeRestart("muffleMessage")
[09:31:06.714]                       }
[09:31:06.714]                       else if (inherits(cond, "warning")) {
[09:31:06.714]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.714]                         if (muffled) 
[09:31:06.714]                           invokeRestart("muffleWarning")
[09:31:06.714]                       }
[09:31:06.714]                       else if (inherits(cond, "condition")) {
[09:31:06.714]                         if (!is.null(pattern)) {
[09:31:06.714]                           computeRestarts <- base::computeRestarts
[09:31:06.714]                           grepl <- base::grepl
[09:31:06.714]                           restarts <- computeRestarts(cond)
[09:31:06.714]                           for (restart in restarts) {
[09:31:06.714]                             name <- restart$name
[09:31:06.714]                             if (is.null(name)) 
[09:31:06.714]                               next
[09:31:06.714]                             if (!grepl(pattern, name)) 
[09:31:06.714]                               next
[09:31:06.714]                             invokeRestart(restart)
[09:31:06.714]                             muffled <- TRUE
[09:31:06.714]                             break
[09:31:06.714]                           }
[09:31:06.714]                         }
[09:31:06.714]                       }
[09:31:06.714]                       invisible(muffled)
[09:31:06.714]                     }
[09:31:06.714]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.714]                   }
[09:31:06.714]                 }
[09:31:06.714]                 else {
[09:31:06.714]                   if (TRUE) {
[09:31:06.714]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.714]                     {
[09:31:06.714]                       inherits <- base::inherits
[09:31:06.714]                       invokeRestart <- base::invokeRestart
[09:31:06.714]                       is.null <- base::is.null
[09:31:06.714]                       muffled <- FALSE
[09:31:06.714]                       if (inherits(cond, "message")) {
[09:31:06.714]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.714]                         if (muffled) 
[09:31:06.714]                           invokeRestart("muffleMessage")
[09:31:06.714]                       }
[09:31:06.714]                       else if (inherits(cond, "warning")) {
[09:31:06.714]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.714]                         if (muffled) 
[09:31:06.714]                           invokeRestart("muffleWarning")
[09:31:06.714]                       }
[09:31:06.714]                       else if (inherits(cond, "condition")) {
[09:31:06.714]                         if (!is.null(pattern)) {
[09:31:06.714]                           computeRestarts <- base::computeRestarts
[09:31:06.714]                           grepl <- base::grepl
[09:31:06.714]                           restarts <- computeRestarts(cond)
[09:31:06.714]                           for (restart in restarts) {
[09:31:06.714]                             name <- restart$name
[09:31:06.714]                             if (is.null(name)) 
[09:31:06.714]                               next
[09:31:06.714]                             if (!grepl(pattern, name)) 
[09:31:06.714]                               next
[09:31:06.714]                             invokeRestart(restart)
[09:31:06.714]                             muffled <- TRUE
[09:31:06.714]                             break
[09:31:06.714]                           }
[09:31:06.714]                         }
[09:31:06.714]                       }
[09:31:06.714]                       invisible(muffled)
[09:31:06.714]                     }
[09:31:06.714]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.714]                   }
[09:31:06.714]                 }
[09:31:06.714]             }
[09:31:06.714]         }))
[09:31:06.714]     }, error = function(ex) {
[09:31:06.714]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:06.714]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.714]                 ...future.rng), started = ...future.startTime, 
[09:31:06.714]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:06.714]             version = "1.8"), class = "FutureResult")
[09:31:06.714]     }, finally = {
[09:31:06.714]         if (!identical(...future.workdir, getwd())) 
[09:31:06.714]             setwd(...future.workdir)
[09:31:06.714]         {
[09:31:06.714]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:06.714]                 ...future.oldOptions$nwarnings <- NULL
[09:31:06.714]             }
[09:31:06.714]             base::options(...future.oldOptions)
[09:31:06.714]             if (.Platform$OS.type == "windows") {
[09:31:06.714]                 old_names <- names(...future.oldEnvVars)
[09:31:06.714]                 envs <- base::Sys.getenv()
[09:31:06.714]                 names <- names(envs)
[09:31:06.714]                 common <- intersect(names, old_names)
[09:31:06.714]                 added <- setdiff(names, old_names)
[09:31:06.714]                 removed <- setdiff(old_names, names)
[09:31:06.714]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:06.714]                   envs[common]]
[09:31:06.714]                 NAMES <- toupper(changed)
[09:31:06.714]                 args <- list()
[09:31:06.714]                 for (kk in seq_along(NAMES)) {
[09:31:06.714]                   name <- changed[[kk]]
[09:31:06.714]                   NAME <- NAMES[[kk]]
[09:31:06.714]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.714]                     next
[09:31:06.714]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.714]                 }
[09:31:06.714]                 NAMES <- toupper(added)
[09:31:06.714]                 for (kk in seq_along(NAMES)) {
[09:31:06.714]                   name <- added[[kk]]
[09:31:06.714]                   NAME <- NAMES[[kk]]
[09:31:06.714]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.714]                     next
[09:31:06.714]                   args[[name]] <- ""
[09:31:06.714]                 }
[09:31:06.714]                 NAMES <- toupper(removed)
[09:31:06.714]                 for (kk in seq_along(NAMES)) {
[09:31:06.714]                   name <- removed[[kk]]
[09:31:06.714]                   NAME <- NAMES[[kk]]
[09:31:06.714]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.714]                     next
[09:31:06.714]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.714]                 }
[09:31:06.714]                 if (length(args) > 0) 
[09:31:06.714]                   base::do.call(base::Sys.setenv, args = args)
[09:31:06.714]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:06.714]             }
[09:31:06.714]             else {
[09:31:06.714]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:06.714]             }
[09:31:06.714]             {
[09:31:06.714]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:06.714]                   0L) {
[09:31:06.714]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:06.714]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:06.714]                   base::options(opts)
[09:31:06.714]                 }
[09:31:06.714]                 {
[09:31:06.714]                   {
[09:31:06.714]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:06.714]                     NULL
[09:31:06.714]                   }
[09:31:06.714]                   options(future.plan = NULL)
[09:31:06.714]                   if (is.na(NA_character_)) 
[09:31:06.714]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.714]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:06.714]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:06.714]                     .init = FALSE)
[09:31:06.714]                 }
[09:31:06.714]             }
[09:31:06.714]         }
[09:31:06.714]     })
[09:31:06.714]     if (TRUE) {
[09:31:06.714]         base::sink(type = "output", split = FALSE)
[09:31:06.714]         if (TRUE) {
[09:31:06.714]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:06.714]         }
[09:31:06.714]         else {
[09:31:06.714]             ...future.result["stdout"] <- base::list(NULL)
[09:31:06.714]         }
[09:31:06.714]         base::close(...future.stdout)
[09:31:06.714]         ...future.stdout <- NULL
[09:31:06.714]     }
[09:31:06.714]     ...future.result$conditions <- ...future.conditions
[09:31:06.714]     ...future.result$finished <- base::Sys.time()
[09:31:06.714]     ...future.result
[09:31:06.714] }
[09:31:06.716] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[09:31:06.717] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[09:31:06.717] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[09:31:06.717] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[09:31:06.718] MultisessionFuture started
[09:31:06.718] - Launch lazy future ... done
[09:31:06.718] run() for ‘MultisessionFuture’ ... done
[09:31:06.718] result() for ClusterFuture ...
[09:31:06.718] receiveMessageFromWorker() for ClusterFuture ...
[09:31:06.718] - Validating connection of MultisessionFuture
[09:31:06.719] - received message: FutureResult
[09:31:06.719] - Received FutureResult
[09:31:06.720] - Erased future from FutureRegistry
[09:31:06.720] result() for ClusterFuture ...
[09:31:06.720] - result already collected: FutureResult
[09:31:06.720] result() for ClusterFuture ... done
[09:31:06.720] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:06.720] result() for ClusterFuture ... done
[09:31:06.720] result() for ClusterFuture ...
[09:31:06.720] - result already collected: FutureResult
[09:31:06.720] result() for ClusterFuture ... done
[09:31:06.720] getGlobalsAndPackages() ...
[09:31:06.721] Searching for globals...
[09:31:06.721] - globals found: [3] ‘{’, ‘*’, ‘a’
[09:31:06.721] Searching for globals ... DONE
[09:31:06.722] Resolving globals: FALSE
[09:31:06.722] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:06.722] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:06.722] - globals: [1] ‘a’
[09:31:06.722] 
[09:31:06.723] getGlobalsAndPackages() ... DONE
[09:31:06.723] run() for ‘Future’ ...
[09:31:06.723] - state: ‘created’
[09:31:06.723] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:06.736] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:06.736] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:06.736]   - Field: ‘node’
[09:31:06.736]   - Field: ‘label’
[09:31:06.736]   - Field: ‘local’
[09:31:06.737]   - Field: ‘owner’
[09:31:06.737]   - Field: ‘envir’
[09:31:06.737]   - Field: ‘workers’
[09:31:06.737]   - Field: ‘packages’
[09:31:06.737]   - Field: ‘gc’
[09:31:06.737]   - Field: ‘conditions’
[09:31:06.737]   - Field: ‘persistent’
[09:31:06.737]   - Field: ‘expr’
[09:31:06.737]   - Field: ‘uuid’
[09:31:06.737]   - Field: ‘seed’
[09:31:06.737]   - Field: ‘version’
[09:31:06.738]   - Field: ‘result’
[09:31:06.738]   - Field: ‘asynchronous’
[09:31:06.738]   - Field: ‘calls’
[09:31:06.738]   - Field: ‘globals’
[09:31:06.738]   - Field: ‘stdout’
[09:31:06.738]   - Field: ‘earlySignal’
[09:31:06.738]   - Field: ‘lazy’
[09:31:06.738]   - Field: ‘state’
[09:31:06.738] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:06.738] - Launch lazy future ...
[09:31:06.739] Packages needed by the future expression (n = 0): <none>
[09:31:06.739] Packages needed by future strategies (n = 0): <none>
[09:31:06.739] {
[09:31:06.739]     {
[09:31:06.739]         {
[09:31:06.739]             ...future.startTime <- base::Sys.time()
[09:31:06.739]             {
[09:31:06.739]                 {
[09:31:06.739]                   {
[09:31:06.739]                     {
[09:31:06.739]                       base::local({
[09:31:06.739]                         has_future <- base::requireNamespace("future", 
[09:31:06.739]                           quietly = TRUE)
[09:31:06.739]                         if (has_future) {
[09:31:06.739]                           ns <- base::getNamespace("future")
[09:31:06.739]                           version <- ns[[".package"]][["version"]]
[09:31:06.739]                           if (is.null(version)) 
[09:31:06.739]                             version <- utils::packageVersion("future")
[09:31:06.739]                         }
[09:31:06.739]                         else {
[09:31:06.739]                           version <- NULL
[09:31:06.739]                         }
[09:31:06.739]                         if (!has_future || version < "1.8.0") {
[09:31:06.739]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:06.739]                             "", base::R.version$version.string), 
[09:31:06.739]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:06.739]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:06.739]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:06.739]                               "release", "version")], collapse = " "), 
[09:31:06.739]                             hostname = base::Sys.info()[["nodename"]])
[09:31:06.739]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:06.739]                             info)
[09:31:06.739]                           info <- base::paste(info, collapse = "; ")
[09:31:06.739]                           if (!has_future) {
[09:31:06.739]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:06.739]                               info)
[09:31:06.739]                           }
[09:31:06.739]                           else {
[09:31:06.739]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:06.739]                               info, version)
[09:31:06.739]                           }
[09:31:06.739]                           base::stop(msg)
[09:31:06.739]                         }
[09:31:06.739]                       })
[09:31:06.739]                     }
[09:31:06.739]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:06.739]                     base::options(mc.cores = 1L)
[09:31:06.739]                   }
[09:31:06.739]                   ...future.strategy.old <- future::plan("list")
[09:31:06.739]                   options(future.plan = NULL)
[09:31:06.739]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.739]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:06.739]                 }
[09:31:06.739]                 ...future.workdir <- getwd()
[09:31:06.739]             }
[09:31:06.739]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:06.739]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:06.739]         }
[09:31:06.739]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:06.739]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:06.739]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:06.739]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:06.739]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:06.739]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:06.739]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:06.739]             base::names(...future.oldOptions))
[09:31:06.739]     }
[09:31:06.739]     if (FALSE) {
[09:31:06.739]     }
[09:31:06.739]     else {
[09:31:06.739]         if (TRUE) {
[09:31:06.739]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:06.739]                 open = "w")
[09:31:06.739]         }
[09:31:06.739]         else {
[09:31:06.739]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:06.739]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:06.739]         }
[09:31:06.739]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:06.739]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:06.739]             base::sink(type = "output", split = FALSE)
[09:31:06.739]             base::close(...future.stdout)
[09:31:06.739]         }, add = TRUE)
[09:31:06.739]     }
[09:31:06.739]     ...future.frame <- base::sys.nframe()
[09:31:06.739]     ...future.conditions <- base::list()
[09:31:06.739]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:06.739]     if (FALSE) {
[09:31:06.739]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:06.739]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:06.739]     }
[09:31:06.739]     ...future.result <- base::tryCatch({
[09:31:06.739]         base::withCallingHandlers({
[09:31:06.739]             ...future.value <- base::withVisible(base::local({
[09:31:06.739]                 ...future.makeSendCondition <- base::local({
[09:31:06.739]                   sendCondition <- NULL
[09:31:06.739]                   function(frame = 1L) {
[09:31:06.739]                     if (is.function(sendCondition)) 
[09:31:06.739]                       return(sendCondition)
[09:31:06.739]                     ns <- getNamespace("parallel")
[09:31:06.739]                     if (exists("sendData", mode = "function", 
[09:31:06.739]                       envir = ns)) {
[09:31:06.739]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:06.739]                         envir = ns)
[09:31:06.739]                       envir <- sys.frame(frame)
[09:31:06.739]                       master <- NULL
[09:31:06.739]                       while (!identical(envir, .GlobalEnv) && 
[09:31:06.739]                         !identical(envir, emptyenv())) {
[09:31:06.739]                         if (exists("master", mode = "list", envir = envir, 
[09:31:06.739]                           inherits = FALSE)) {
[09:31:06.739]                           master <- get("master", mode = "list", 
[09:31:06.739]                             envir = envir, inherits = FALSE)
[09:31:06.739]                           if (inherits(master, c("SOCKnode", 
[09:31:06.739]                             "SOCK0node"))) {
[09:31:06.739]                             sendCondition <<- function(cond) {
[09:31:06.739]                               data <- list(type = "VALUE", value = cond, 
[09:31:06.739]                                 success = TRUE)
[09:31:06.739]                               parallel_sendData(master, data)
[09:31:06.739]                             }
[09:31:06.739]                             return(sendCondition)
[09:31:06.739]                           }
[09:31:06.739]                         }
[09:31:06.739]                         frame <- frame + 1L
[09:31:06.739]                         envir <- sys.frame(frame)
[09:31:06.739]                       }
[09:31:06.739]                     }
[09:31:06.739]                     sendCondition <<- function(cond) NULL
[09:31:06.739]                   }
[09:31:06.739]                 })
[09:31:06.739]                 withCallingHandlers({
[09:31:06.739]                   {
[09:31:06.739]                     2 * a
[09:31:06.739]                   }
[09:31:06.739]                 }, immediateCondition = function(cond) {
[09:31:06.739]                   sendCondition <- ...future.makeSendCondition()
[09:31:06.739]                   sendCondition(cond)
[09:31:06.739]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.739]                   {
[09:31:06.739]                     inherits <- base::inherits
[09:31:06.739]                     invokeRestart <- base::invokeRestart
[09:31:06.739]                     is.null <- base::is.null
[09:31:06.739]                     muffled <- FALSE
[09:31:06.739]                     if (inherits(cond, "message")) {
[09:31:06.739]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:06.739]                       if (muffled) 
[09:31:06.739]                         invokeRestart("muffleMessage")
[09:31:06.739]                     }
[09:31:06.739]                     else if (inherits(cond, "warning")) {
[09:31:06.739]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:06.739]                       if (muffled) 
[09:31:06.739]                         invokeRestart("muffleWarning")
[09:31:06.739]                     }
[09:31:06.739]                     else if (inherits(cond, "condition")) {
[09:31:06.739]                       if (!is.null(pattern)) {
[09:31:06.739]                         computeRestarts <- base::computeRestarts
[09:31:06.739]                         grepl <- base::grepl
[09:31:06.739]                         restarts <- computeRestarts(cond)
[09:31:06.739]                         for (restart in restarts) {
[09:31:06.739]                           name <- restart$name
[09:31:06.739]                           if (is.null(name)) 
[09:31:06.739]                             next
[09:31:06.739]                           if (!grepl(pattern, name)) 
[09:31:06.739]                             next
[09:31:06.739]                           invokeRestart(restart)
[09:31:06.739]                           muffled <- TRUE
[09:31:06.739]                           break
[09:31:06.739]                         }
[09:31:06.739]                       }
[09:31:06.739]                     }
[09:31:06.739]                     invisible(muffled)
[09:31:06.739]                   }
[09:31:06.739]                   muffleCondition(cond)
[09:31:06.739]                 })
[09:31:06.739]             }))
[09:31:06.739]             future::FutureResult(value = ...future.value$value, 
[09:31:06.739]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.739]                   ...future.rng), globalenv = if (FALSE) 
[09:31:06.739]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:06.739]                     ...future.globalenv.names))
[09:31:06.739]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:06.739]         }, condition = base::local({
[09:31:06.739]             c <- base::c
[09:31:06.739]             inherits <- base::inherits
[09:31:06.739]             invokeRestart <- base::invokeRestart
[09:31:06.739]             length <- base::length
[09:31:06.739]             list <- base::list
[09:31:06.739]             seq.int <- base::seq.int
[09:31:06.739]             signalCondition <- base::signalCondition
[09:31:06.739]             sys.calls <- base::sys.calls
[09:31:06.739]             `[[` <- base::`[[`
[09:31:06.739]             `+` <- base::`+`
[09:31:06.739]             `<<-` <- base::`<<-`
[09:31:06.739]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:06.739]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:06.739]                   3L)]
[09:31:06.739]             }
[09:31:06.739]             function(cond) {
[09:31:06.739]                 is_error <- inherits(cond, "error")
[09:31:06.739]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:06.739]                   NULL)
[09:31:06.739]                 if (is_error) {
[09:31:06.739]                   sessionInformation <- function() {
[09:31:06.739]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:06.739]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:06.739]                       search = base::search(), system = base::Sys.info())
[09:31:06.739]                   }
[09:31:06.739]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.739]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:06.739]                     cond$call), session = sessionInformation(), 
[09:31:06.739]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:06.739]                   signalCondition(cond)
[09:31:06.739]                 }
[09:31:06.739]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:06.739]                 "immediateCondition"))) {
[09:31:06.739]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:06.739]                   ...future.conditions[[length(...future.conditions) + 
[09:31:06.739]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:06.739]                   if (TRUE && !signal) {
[09:31:06.739]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.739]                     {
[09:31:06.739]                       inherits <- base::inherits
[09:31:06.739]                       invokeRestart <- base::invokeRestart
[09:31:06.739]                       is.null <- base::is.null
[09:31:06.739]                       muffled <- FALSE
[09:31:06.739]                       if (inherits(cond, "message")) {
[09:31:06.739]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.739]                         if (muffled) 
[09:31:06.739]                           invokeRestart("muffleMessage")
[09:31:06.739]                       }
[09:31:06.739]                       else if (inherits(cond, "warning")) {
[09:31:06.739]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.739]                         if (muffled) 
[09:31:06.739]                           invokeRestart("muffleWarning")
[09:31:06.739]                       }
[09:31:06.739]                       else if (inherits(cond, "condition")) {
[09:31:06.739]                         if (!is.null(pattern)) {
[09:31:06.739]                           computeRestarts <- base::computeRestarts
[09:31:06.739]                           grepl <- base::grepl
[09:31:06.739]                           restarts <- computeRestarts(cond)
[09:31:06.739]                           for (restart in restarts) {
[09:31:06.739]                             name <- restart$name
[09:31:06.739]                             if (is.null(name)) 
[09:31:06.739]                               next
[09:31:06.739]                             if (!grepl(pattern, name)) 
[09:31:06.739]                               next
[09:31:06.739]                             invokeRestart(restart)
[09:31:06.739]                             muffled <- TRUE
[09:31:06.739]                             break
[09:31:06.739]                           }
[09:31:06.739]                         }
[09:31:06.739]                       }
[09:31:06.739]                       invisible(muffled)
[09:31:06.739]                     }
[09:31:06.739]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.739]                   }
[09:31:06.739]                 }
[09:31:06.739]                 else {
[09:31:06.739]                   if (TRUE) {
[09:31:06.739]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:06.739]                     {
[09:31:06.739]                       inherits <- base::inherits
[09:31:06.739]                       invokeRestart <- base::invokeRestart
[09:31:06.739]                       is.null <- base::is.null
[09:31:06.739]                       muffled <- FALSE
[09:31:06.739]                       if (inherits(cond, "message")) {
[09:31:06.739]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:06.739]                         if (muffled) 
[09:31:06.739]                           invokeRestart("muffleMessage")
[09:31:06.739]                       }
[09:31:06.739]                       else if (inherits(cond, "warning")) {
[09:31:06.739]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:06.739]                         if (muffled) 
[09:31:06.739]                           invokeRestart("muffleWarning")
[09:31:06.739]                       }
[09:31:06.739]                       else if (inherits(cond, "condition")) {
[09:31:06.739]                         if (!is.null(pattern)) {
[09:31:06.739]                           computeRestarts <- base::computeRestarts
[09:31:06.739]                           grepl <- base::grepl
[09:31:06.739]                           restarts <- computeRestarts(cond)
[09:31:06.739]                           for (restart in restarts) {
[09:31:06.739]                             name <- restart$name
[09:31:06.739]                             if (is.null(name)) 
[09:31:06.739]                               next
[09:31:06.739]                             if (!grepl(pattern, name)) 
[09:31:06.739]                               next
[09:31:06.739]                             invokeRestart(restart)
[09:31:06.739]                             muffled <- TRUE
[09:31:06.739]                             break
[09:31:06.739]                           }
[09:31:06.739]                         }
[09:31:06.739]                       }
[09:31:06.739]                       invisible(muffled)
[09:31:06.739]                     }
[09:31:06.739]                     muffleCondition(cond, pattern = "^muffle")
[09:31:06.739]                   }
[09:31:06.739]                 }
[09:31:06.739]             }
[09:31:06.739]         }))
[09:31:06.739]     }, error = function(ex) {
[09:31:06.739]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:06.739]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:06.739]                 ...future.rng), started = ...future.startTime, 
[09:31:06.739]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:06.739]             version = "1.8"), class = "FutureResult")
[09:31:06.739]     }, finally = {
[09:31:06.739]         if (!identical(...future.workdir, getwd())) 
[09:31:06.739]             setwd(...future.workdir)
[09:31:06.739]         {
[09:31:06.739]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:06.739]                 ...future.oldOptions$nwarnings <- NULL
[09:31:06.739]             }
[09:31:06.739]             base::options(...future.oldOptions)
[09:31:06.739]             if (.Platform$OS.type == "windows") {
[09:31:06.739]                 old_names <- names(...future.oldEnvVars)
[09:31:06.739]                 envs <- base::Sys.getenv()
[09:31:06.739]                 names <- names(envs)
[09:31:06.739]                 common <- intersect(names, old_names)
[09:31:06.739]                 added <- setdiff(names, old_names)
[09:31:06.739]                 removed <- setdiff(old_names, names)
[09:31:06.739]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:06.739]                   envs[common]]
[09:31:06.739]                 NAMES <- toupper(changed)
[09:31:06.739]                 args <- list()
[09:31:06.739]                 for (kk in seq_along(NAMES)) {
[09:31:06.739]                   name <- changed[[kk]]
[09:31:06.739]                   NAME <- NAMES[[kk]]
[09:31:06.739]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.739]                     next
[09:31:06.739]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.739]                 }
[09:31:06.739]                 NAMES <- toupper(added)
[09:31:06.739]                 for (kk in seq_along(NAMES)) {
[09:31:06.739]                   name <- added[[kk]]
[09:31:06.739]                   NAME <- NAMES[[kk]]
[09:31:06.739]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.739]                     next
[09:31:06.739]                   args[[name]] <- ""
[09:31:06.739]                 }
[09:31:06.739]                 NAMES <- toupper(removed)
[09:31:06.739]                 for (kk in seq_along(NAMES)) {
[09:31:06.739]                   name <- removed[[kk]]
[09:31:06.739]                   NAME <- NAMES[[kk]]
[09:31:06.739]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:06.739]                     next
[09:31:06.739]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:06.739]                 }
[09:31:06.739]                 if (length(args) > 0) 
[09:31:06.739]                   base::do.call(base::Sys.setenv, args = args)
[09:31:06.739]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:06.739]             }
[09:31:06.739]             else {
[09:31:06.739]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:06.739]             }
[09:31:06.739]             {
[09:31:06.739]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:06.739]                   0L) {
[09:31:06.739]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:06.739]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:06.739]                   base::options(opts)
[09:31:06.739]                 }
[09:31:06.739]                 {
[09:31:06.739]                   {
[09:31:06.739]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:06.739]                     NULL
[09:31:06.739]                   }
[09:31:06.739]                   options(future.plan = NULL)
[09:31:06.739]                   if (is.na(NA_character_)) 
[09:31:06.739]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:06.739]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:06.739]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:06.739]                     .init = FALSE)
[09:31:06.739]                 }
[09:31:06.739]             }
[09:31:06.739]         }
[09:31:06.739]     })
[09:31:06.739]     if (TRUE) {
[09:31:06.739]         base::sink(type = "output", split = FALSE)
[09:31:06.739]         if (TRUE) {
[09:31:06.739]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:06.739]         }
[09:31:06.739]         else {
[09:31:06.739]             ...future.result["stdout"] <- base::list(NULL)
[09:31:06.739]         }
[09:31:06.739]         base::close(...future.stdout)
[09:31:06.739]         ...future.stdout <- NULL
[09:31:06.739]     }
[09:31:06.739]     ...future.result$conditions <- ...future.conditions
[09:31:06.739]     ...future.result$finished <- base::Sys.time()
[09:31:06.739]     ...future.result
[09:31:06.739] }
[09:31:06.742] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[09:31:06.742] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[09:31:06.742] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[09:31:06.742] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[09:31:06.743] MultisessionFuture started
[09:31:06.743] - Launch lazy future ... done
[09:31:06.743] run() for ‘MultisessionFuture’ ... done
[09:31:06.743] result() for ClusterFuture ...
[09:31:06.743] receiveMessageFromWorker() for ClusterFuture ...
[09:31:06.743] - Validating connection of MultisessionFuture
[09:31:06.744] - received message: FutureResult
[09:31:06.744] - Received FutureResult
[09:31:06.745] - Erased future from FutureRegistry
[09:31:06.745] result() for ClusterFuture ...
[09:31:06.745] - result already collected: FutureResult
[09:31:06.745] result() for ClusterFuture ... done
[09:31:06.745] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:06.745] result() for ClusterFuture ... done
[09:31:06.745] result() for ClusterFuture ...
[09:31:06.745] - result already collected: FutureResult
[09:31:06.745] result() for ClusterFuture ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE
> 
> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
> 
> source("incl/end.R")
[09:31:06.746] plan(): Setting new future strategy stack:
[09:31:06.746] List of future strategies:
[09:31:06.746] 1. FutureStrategy:
[09:31:06.746]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:06.746]    - tweaked: FALSE
[09:31:06.746]    - call: future::plan(oplan)
[09:31:06.747] plan(): nbrOfWorkers() = 1
> 
