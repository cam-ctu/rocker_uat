
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:39:27.116] plan(): Setting new future strategy stack:
[17:39:27.117] List of future strategies:
[17:39:27.117] 1. sequential:
[17:39:27.117]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.117]    - tweaked: FALSE
[17:39:27.117]    - call: future::plan("sequential")
[17:39:27.128] plan(): nbrOfWorkers() = 1
> 
> message("*** futureAssign() ...")
*** futureAssign() ...
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...
> 
> delayedAssign("a", {
+   cat("Delayed assignment evaluated\n")
+   1
+ })
> 
> futureAssign("b", {
+   cat("Future assignment evaluated\n")
+   2
+ }, lazy = TRUE)
[17:39:27.142] getGlobalsAndPackages() ...
[17:39:27.142] Searching for globals...
[17:39:27.149] - globals found: [2] ‘{’, ‘cat’
[17:39:27.149] Searching for globals ... DONE
[17:39:27.149] Resolving globals: FALSE
[17:39:27.149] 
[17:39:27.149] 
[17:39:27.150] getGlobalsAndPackages() ... DONE
> 
> ## Because "lazy future" is used, the expression/value
> ## for 'b' will not be resolved at the point.  For other
> ## types of futures, it may already have been resolved
> cat(sprintf("b = %s\n", b))
[17:39:27.151] run() for ‘Future’ ...
[17:39:27.151] - state: ‘created’
[17:39:27.151] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:27.151] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:27.151] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:27.151]   - Field: ‘label’
[17:39:27.151]   - Field: ‘local’
[17:39:27.152]   - Field: ‘owner’
[17:39:27.152]   - Field: ‘envir’
[17:39:27.152]   - Field: ‘packages’
[17:39:27.152]   - Field: ‘gc’
[17:39:27.152]   - Field: ‘conditions’
[17:39:27.152]   - Field: ‘expr’
[17:39:27.152]   - Field: ‘uuid’
[17:39:27.152]   - Field: ‘seed’
[17:39:27.152]   - Field: ‘version’
[17:39:27.152]   - Field: ‘result’
[17:39:27.153]   - Field: ‘asynchronous’
[17:39:27.153]   - Field: ‘calls’
[17:39:27.153]   - Field: ‘globals’
[17:39:27.153]   - Field: ‘stdout’
[17:39:27.153]   - Field: ‘earlySignal’
[17:39:27.153]   - Field: ‘lazy’
[17:39:27.153]   - Field: ‘state’
[17:39:27.153] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:27.153] - Launch lazy future ...
[17:39:27.154] Packages needed by the future expression (n = 0): <none>
[17:39:27.154] Packages needed by future strategies (n = 0): <none>
[17:39:27.155] {
[17:39:27.155]     {
[17:39:27.155]         {
[17:39:27.155]             ...future.startTime <- base::Sys.time()
[17:39:27.155]             {
[17:39:27.155]                 {
[17:39:27.155]                   {
[17:39:27.155]                     base::local({
[17:39:27.155]                       has_future <- base::requireNamespace("future", 
[17:39:27.155]                         quietly = TRUE)
[17:39:27.155]                       if (has_future) {
[17:39:27.155]                         ns <- base::getNamespace("future")
[17:39:27.155]                         version <- ns[[".package"]][["version"]]
[17:39:27.155]                         if (is.null(version)) 
[17:39:27.155]                           version <- utils::packageVersion("future")
[17:39:27.155]                       }
[17:39:27.155]                       else {
[17:39:27.155]                         version <- NULL
[17:39:27.155]                       }
[17:39:27.155]                       if (!has_future || version < "1.8.0") {
[17:39:27.155]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.155]                           "", base::R.version$version.string), 
[17:39:27.155]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:27.155]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.155]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.155]                             "release", "version")], collapse = " "), 
[17:39:27.155]                           hostname = base::Sys.info()[["nodename"]])
[17:39:27.155]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.155]                           info)
[17:39:27.155]                         info <- base::paste(info, collapse = "; ")
[17:39:27.155]                         if (!has_future) {
[17:39:27.155]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.155]                             info)
[17:39:27.155]                         }
[17:39:27.155]                         else {
[17:39:27.155]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.155]                             info, version)
[17:39:27.155]                         }
[17:39:27.155]                         base::stop(msg)
[17:39:27.155]                       }
[17:39:27.155]                     })
[17:39:27.155]                   }
[17:39:27.155]                   ...future.strategy.old <- future::plan("list")
[17:39:27.155]                   options(future.plan = NULL)
[17:39:27.155]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.155]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.155]                 }
[17:39:27.155]                 ...future.workdir <- getwd()
[17:39:27.155]             }
[17:39:27.155]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.155]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.155]         }
[17:39:27.155]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.155]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.155]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.155]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.155]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.155]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.155]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.155]             base::names(...future.oldOptions))
[17:39:27.155]     }
[17:39:27.155]     if (FALSE) {
[17:39:27.155]     }
[17:39:27.155]     else {
[17:39:27.155]         if (TRUE) {
[17:39:27.155]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.155]                 open = "w")
[17:39:27.155]         }
[17:39:27.155]         else {
[17:39:27.155]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.155]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.155]         }
[17:39:27.155]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.155]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.155]             base::sink(type = "output", split = FALSE)
[17:39:27.155]             base::close(...future.stdout)
[17:39:27.155]         }, add = TRUE)
[17:39:27.155]     }
[17:39:27.155]     ...future.frame <- base::sys.nframe()
[17:39:27.155]     ...future.conditions <- base::list()
[17:39:27.155]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.155]     if (FALSE) {
[17:39:27.155]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.155]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.155]     }
[17:39:27.155]     ...future.result <- base::tryCatch({
[17:39:27.155]         base::withCallingHandlers({
[17:39:27.155]             ...future.value <- base::withVisible(base::local({
[17:39:27.155]                 cat("Future assignment evaluated\n")
[17:39:27.155]                 2
[17:39:27.155]             }))
[17:39:27.155]             future::FutureResult(value = ...future.value$value, 
[17:39:27.155]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.155]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.155]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.155]                     ...future.globalenv.names))
[17:39:27.155]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.155]         }, condition = base::local({
[17:39:27.155]             c <- base::c
[17:39:27.155]             inherits <- base::inherits
[17:39:27.155]             invokeRestart <- base::invokeRestart
[17:39:27.155]             length <- base::length
[17:39:27.155]             list <- base::list
[17:39:27.155]             seq.int <- base::seq.int
[17:39:27.155]             signalCondition <- base::signalCondition
[17:39:27.155]             sys.calls <- base::sys.calls
[17:39:27.155]             `[[` <- base::`[[`
[17:39:27.155]             `+` <- base::`+`
[17:39:27.155]             `<<-` <- base::`<<-`
[17:39:27.155]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.155]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.155]                   3L)]
[17:39:27.155]             }
[17:39:27.155]             function(cond) {
[17:39:27.155]                 is_error <- inherits(cond, "error")
[17:39:27.155]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.155]                   NULL)
[17:39:27.155]                 if (is_error) {
[17:39:27.155]                   sessionInformation <- function() {
[17:39:27.155]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.155]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.155]                       search = base::search(), system = base::Sys.info())
[17:39:27.155]                   }
[17:39:27.155]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.155]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.155]                     cond$call), session = sessionInformation(), 
[17:39:27.155]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.155]                   signalCondition(cond)
[17:39:27.155]                 }
[17:39:27.155]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.155]                 "immediateCondition"))) {
[17:39:27.155]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.155]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.155]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.155]                   if (TRUE && !signal) {
[17:39:27.155]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.155]                     {
[17:39:27.155]                       inherits <- base::inherits
[17:39:27.155]                       invokeRestart <- base::invokeRestart
[17:39:27.155]                       is.null <- base::is.null
[17:39:27.155]                       muffled <- FALSE
[17:39:27.155]                       if (inherits(cond, "message")) {
[17:39:27.155]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.155]                         if (muffled) 
[17:39:27.155]                           invokeRestart("muffleMessage")
[17:39:27.155]                       }
[17:39:27.155]                       else if (inherits(cond, "warning")) {
[17:39:27.155]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.155]                         if (muffled) 
[17:39:27.155]                           invokeRestart("muffleWarning")
[17:39:27.155]                       }
[17:39:27.155]                       else if (inherits(cond, "condition")) {
[17:39:27.155]                         if (!is.null(pattern)) {
[17:39:27.155]                           computeRestarts <- base::computeRestarts
[17:39:27.155]                           grepl <- base::grepl
[17:39:27.155]                           restarts <- computeRestarts(cond)
[17:39:27.155]                           for (restart in restarts) {
[17:39:27.155]                             name <- restart$name
[17:39:27.155]                             if (is.null(name)) 
[17:39:27.155]                               next
[17:39:27.155]                             if (!grepl(pattern, name)) 
[17:39:27.155]                               next
[17:39:27.155]                             invokeRestart(restart)
[17:39:27.155]                             muffled <- TRUE
[17:39:27.155]                             break
[17:39:27.155]                           }
[17:39:27.155]                         }
[17:39:27.155]                       }
[17:39:27.155]                       invisible(muffled)
[17:39:27.155]                     }
[17:39:27.155]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.155]                   }
[17:39:27.155]                 }
[17:39:27.155]                 else {
[17:39:27.155]                   if (TRUE) {
[17:39:27.155]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.155]                     {
[17:39:27.155]                       inherits <- base::inherits
[17:39:27.155]                       invokeRestart <- base::invokeRestart
[17:39:27.155]                       is.null <- base::is.null
[17:39:27.155]                       muffled <- FALSE
[17:39:27.155]                       if (inherits(cond, "message")) {
[17:39:27.155]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.155]                         if (muffled) 
[17:39:27.155]                           invokeRestart("muffleMessage")
[17:39:27.155]                       }
[17:39:27.155]                       else if (inherits(cond, "warning")) {
[17:39:27.155]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.155]                         if (muffled) 
[17:39:27.155]                           invokeRestart("muffleWarning")
[17:39:27.155]                       }
[17:39:27.155]                       else if (inherits(cond, "condition")) {
[17:39:27.155]                         if (!is.null(pattern)) {
[17:39:27.155]                           computeRestarts <- base::computeRestarts
[17:39:27.155]                           grepl <- base::grepl
[17:39:27.155]                           restarts <- computeRestarts(cond)
[17:39:27.155]                           for (restart in restarts) {
[17:39:27.155]                             name <- restart$name
[17:39:27.155]                             if (is.null(name)) 
[17:39:27.155]                               next
[17:39:27.155]                             if (!grepl(pattern, name)) 
[17:39:27.155]                               next
[17:39:27.155]                             invokeRestart(restart)
[17:39:27.155]                             muffled <- TRUE
[17:39:27.155]                             break
[17:39:27.155]                           }
[17:39:27.155]                         }
[17:39:27.155]                       }
[17:39:27.155]                       invisible(muffled)
[17:39:27.155]                     }
[17:39:27.155]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.155]                   }
[17:39:27.155]                 }
[17:39:27.155]             }
[17:39:27.155]         }))
[17:39:27.155]     }, error = function(ex) {
[17:39:27.155]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.155]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.155]                 ...future.rng), started = ...future.startTime, 
[17:39:27.155]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.155]             version = "1.8"), class = "FutureResult")
[17:39:27.155]     }, finally = {
[17:39:27.155]         if (!identical(...future.workdir, getwd())) 
[17:39:27.155]             setwd(...future.workdir)
[17:39:27.155]         {
[17:39:27.155]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.155]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.155]             }
[17:39:27.155]             base::options(...future.oldOptions)
[17:39:27.155]             if (.Platform$OS.type == "windows") {
[17:39:27.155]                 old_names <- names(...future.oldEnvVars)
[17:39:27.155]                 envs <- base::Sys.getenv()
[17:39:27.155]                 names <- names(envs)
[17:39:27.155]                 common <- intersect(names, old_names)
[17:39:27.155]                 added <- setdiff(names, old_names)
[17:39:27.155]                 removed <- setdiff(old_names, names)
[17:39:27.155]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.155]                   envs[common]]
[17:39:27.155]                 NAMES <- toupper(changed)
[17:39:27.155]                 args <- list()
[17:39:27.155]                 for (kk in seq_along(NAMES)) {
[17:39:27.155]                   name <- changed[[kk]]
[17:39:27.155]                   NAME <- NAMES[[kk]]
[17:39:27.155]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.155]                     next
[17:39:27.155]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.155]                 }
[17:39:27.155]                 NAMES <- toupper(added)
[17:39:27.155]                 for (kk in seq_along(NAMES)) {
[17:39:27.155]                   name <- added[[kk]]
[17:39:27.155]                   NAME <- NAMES[[kk]]
[17:39:27.155]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.155]                     next
[17:39:27.155]                   args[[name]] <- ""
[17:39:27.155]                 }
[17:39:27.155]                 NAMES <- toupper(removed)
[17:39:27.155]                 for (kk in seq_along(NAMES)) {
[17:39:27.155]                   name <- removed[[kk]]
[17:39:27.155]                   NAME <- NAMES[[kk]]
[17:39:27.155]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.155]                     next
[17:39:27.155]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.155]                 }
[17:39:27.155]                 if (length(args) > 0) 
[17:39:27.155]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.155]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.155]             }
[17:39:27.155]             else {
[17:39:27.155]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.155]             }
[17:39:27.155]             {
[17:39:27.155]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.155]                   0L) {
[17:39:27.155]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.155]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.155]                   base::options(opts)
[17:39:27.155]                 }
[17:39:27.155]                 {
[17:39:27.155]                   {
[17:39:27.155]                     NULL
[17:39:27.155]                     RNGkind("Mersenne-Twister")
[17:39:27.155]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:27.155]                       inherits = FALSE)
[17:39:27.155]                   }
[17:39:27.155]                   options(future.plan = NULL)
[17:39:27.155]                   if (is.na(NA_character_)) 
[17:39:27.155]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.155]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.155]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.155]                     .init = FALSE)
[17:39:27.155]                 }
[17:39:27.155]             }
[17:39:27.155]         }
[17:39:27.155]     })
[17:39:27.155]     if (TRUE) {
[17:39:27.155]         base::sink(type = "output", split = FALSE)
[17:39:27.155]         if (TRUE) {
[17:39:27.155]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.155]         }
[17:39:27.155]         else {
[17:39:27.155]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.155]         }
[17:39:27.155]         base::close(...future.stdout)
[17:39:27.155]         ...future.stdout <- NULL
[17:39:27.155]     }
[17:39:27.155]     ...future.result$conditions <- ...future.conditions
[17:39:27.155]     ...future.result$finished <- base::Sys.time()
[17:39:27.155]     ...future.result
[17:39:27.155] }
[17:39:27.157] plan(): Setting new future strategy stack:
[17:39:27.157] List of future strategies:
[17:39:27.157] 1. sequential:
[17:39:27.157]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.157]    - tweaked: FALSE
[17:39:27.157]    - call: NULL
[17:39:27.157] plan(): nbrOfWorkers() = 1
[17:39:27.159] plan(): Setting new future strategy stack:
[17:39:27.159] List of future strategies:
[17:39:27.159] 1. sequential:
[17:39:27.159]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.159]    - tweaked: FALSE
[17:39:27.159]    - call: future::plan("sequential")
[17:39:27.159] plan(): nbrOfWorkers() = 1
[17:39:27.159] SequentialFuture started (and completed)
[17:39:27.160] - Launch lazy future ... done
[17:39:27.160] run() for ‘SequentialFuture’ ... done
Future assignment evaluated
b = 2
> 
> ## The expression/value of 'a' is resolved at this point,
> ## because a delayed assignment (promise) was used.
> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1
> 
> stopifnot(identical(a, 1))
> stopifnot(identical(b, 2))
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE
> 
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** futureAssign() with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     ## Potential task name clashes
+     u <- new.env()
+     v <- new.env()
+     futureAssign("a", { 2 }, assign.env = u)
+     futureAssign("a", { 4 }, assign.env = v)
+     
+     cat(sprintf("u$a = %s\n", u$a))
+     cat(sprintf("v$a = %s\n", v$a))
+     
+     stopifnot(identical(u$a, 2))
+     stopifnot(identical(v$a, 4))
+     
+     
+     ## Global variables
+     a <- 1
+     futureAssign("b", { 2 * a })
+     a <- 2
+     stopifnot(b == 2)
+ 
+     ## Explicit lazy evaluation
+     for (lazy in c(FALSE, TRUE)) {
+       a <- 1
+       f <- futureAssign("b", { 2 * a }, lazy = lazy)
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+       
+       ## Set 'lazy' via disposable option
+       options(future.disposable = list(lazy = lazy))
+       a <- 1
+       f <- futureAssign("b", { 2 * a })
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+     }
+ 
+     message(sprintf("*** futureAssign() with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[17:39:27.187] plan(): Setting new future strategy stack:
[17:39:27.187] List of future strategies:
[17:39:27.187] 1. sequential:
[17:39:27.187]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.187]    - tweaked: FALSE
[17:39:27.187]    - call: plan(strategy)
[17:39:27.198] plan(): nbrOfWorkers() = 1
[17:39:27.198] getGlobalsAndPackages() ...
[17:39:27.200] Searching for globals...
[17:39:27.200] - globals found: [1] ‘{’
[17:39:27.200] Searching for globals ... DONE
[17:39:27.200] Resolving globals: FALSE
[17:39:27.201] 
[17:39:27.201] 
[17:39:27.201] getGlobalsAndPackages() ... DONE
[17:39:27.201] run() for ‘Future’ ...
[17:39:27.201] - state: ‘created’
[17:39:27.201] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:27.202] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:27.202] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:27.202]   - Field: ‘label’
[17:39:27.202]   - Field: ‘local’
[17:39:27.202]   - Field: ‘owner’
[17:39:27.202]   - Field: ‘envir’
[17:39:27.202]   - Field: ‘packages’
[17:39:27.202]   - Field: ‘gc’
[17:39:27.202]   - Field: ‘conditions’
[17:39:27.202]   - Field: ‘expr’
[17:39:27.203]   - Field: ‘uuid’
[17:39:27.203]   - Field: ‘seed’
[17:39:27.203]   - Field: ‘version’
[17:39:27.203]   - Field: ‘result’
[17:39:27.203]   - Field: ‘asynchronous’
[17:39:27.203]   - Field: ‘calls’
[17:39:27.203]   - Field: ‘globals’
[17:39:27.203]   - Field: ‘stdout’
[17:39:27.203]   - Field: ‘earlySignal’
[17:39:27.203]   - Field: ‘lazy’
[17:39:27.203]   - Field: ‘state’
[17:39:27.204] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:27.204] - Launch lazy future ...
[17:39:27.204] Packages needed by the future expression (n = 0): <none>
[17:39:27.204] Packages needed by future strategies (n = 0): <none>
[17:39:27.204] {
[17:39:27.204]     {
[17:39:27.204]         {
[17:39:27.204]             ...future.startTime <- base::Sys.time()
[17:39:27.204]             {
[17:39:27.204]                 {
[17:39:27.204]                   {
[17:39:27.204]                     base::local({
[17:39:27.204]                       has_future <- base::requireNamespace("future", 
[17:39:27.204]                         quietly = TRUE)
[17:39:27.204]                       if (has_future) {
[17:39:27.204]                         ns <- base::getNamespace("future")
[17:39:27.204]                         version <- ns[[".package"]][["version"]]
[17:39:27.204]                         if (is.null(version)) 
[17:39:27.204]                           version <- utils::packageVersion("future")
[17:39:27.204]                       }
[17:39:27.204]                       else {
[17:39:27.204]                         version <- NULL
[17:39:27.204]                       }
[17:39:27.204]                       if (!has_future || version < "1.8.0") {
[17:39:27.204]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.204]                           "", base::R.version$version.string), 
[17:39:27.204]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:27.204]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.204]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.204]                             "release", "version")], collapse = " "), 
[17:39:27.204]                           hostname = base::Sys.info()[["nodename"]])
[17:39:27.204]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.204]                           info)
[17:39:27.204]                         info <- base::paste(info, collapse = "; ")
[17:39:27.204]                         if (!has_future) {
[17:39:27.204]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.204]                             info)
[17:39:27.204]                         }
[17:39:27.204]                         else {
[17:39:27.204]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.204]                             info, version)
[17:39:27.204]                         }
[17:39:27.204]                         base::stop(msg)
[17:39:27.204]                       }
[17:39:27.204]                     })
[17:39:27.204]                   }
[17:39:27.204]                   ...future.strategy.old <- future::plan("list")
[17:39:27.204]                   options(future.plan = NULL)
[17:39:27.204]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.204]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.204]                 }
[17:39:27.204]                 ...future.workdir <- getwd()
[17:39:27.204]             }
[17:39:27.204]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.204]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.204]         }
[17:39:27.204]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.204]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.204]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.204]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.204]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.204]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.204]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.204]             base::names(...future.oldOptions))
[17:39:27.204]     }
[17:39:27.204]     if (FALSE) {
[17:39:27.204]     }
[17:39:27.204]     else {
[17:39:27.204]         if (TRUE) {
[17:39:27.204]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.204]                 open = "w")
[17:39:27.204]         }
[17:39:27.204]         else {
[17:39:27.204]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.204]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.204]         }
[17:39:27.204]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.204]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.204]             base::sink(type = "output", split = FALSE)
[17:39:27.204]             base::close(...future.stdout)
[17:39:27.204]         }, add = TRUE)
[17:39:27.204]     }
[17:39:27.204]     ...future.frame <- base::sys.nframe()
[17:39:27.204]     ...future.conditions <- base::list()
[17:39:27.204]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.204]     if (FALSE) {
[17:39:27.204]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.204]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.204]     }
[17:39:27.204]     ...future.result <- base::tryCatch({
[17:39:27.204]         base::withCallingHandlers({
[17:39:27.204]             ...future.value <- base::withVisible(base::local({
[17:39:27.204]                 2
[17:39:27.204]             }))
[17:39:27.204]             future::FutureResult(value = ...future.value$value, 
[17:39:27.204]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.204]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.204]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.204]                     ...future.globalenv.names))
[17:39:27.204]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.204]         }, condition = base::local({
[17:39:27.204]             c <- base::c
[17:39:27.204]             inherits <- base::inherits
[17:39:27.204]             invokeRestart <- base::invokeRestart
[17:39:27.204]             length <- base::length
[17:39:27.204]             list <- base::list
[17:39:27.204]             seq.int <- base::seq.int
[17:39:27.204]             signalCondition <- base::signalCondition
[17:39:27.204]             sys.calls <- base::sys.calls
[17:39:27.204]             `[[` <- base::`[[`
[17:39:27.204]             `+` <- base::`+`
[17:39:27.204]             `<<-` <- base::`<<-`
[17:39:27.204]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.204]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.204]                   3L)]
[17:39:27.204]             }
[17:39:27.204]             function(cond) {
[17:39:27.204]                 is_error <- inherits(cond, "error")
[17:39:27.204]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.204]                   NULL)
[17:39:27.204]                 if (is_error) {
[17:39:27.204]                   sessionInformation <- function() {
[17:39:27.204]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.204]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.204]                       search = base::search(), system = base::Sys.info())
[17:39:27.204]                   }
[17:39:27.204]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.204]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.204]                     cond$call), session = sessionInformation(), 
[17:39:27.204]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.204]                   signalCondition(cond)
[17:39:27.204]                 }
[17:39:27.204]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.204]                 "immediateCondition"))) {
[17:39:27.204]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.204]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.204]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.204]                   if (TRUE && !signal) {
[17:39:27.204]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.204]                     {
[17:39:27.204]                       inherits <- base::inherits
[17:39:27.204]                       invokeRestart <- base::invokeRestart
[17:39:27.204]                       is.null <- base::is.null
[17:39:27.204]                       muffled <- FALSE
[17:39:27.204]                       if (inherits(cond, "message")) {
[17:39:27.204]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.204]                         if (muffled) 
[17:39:27.204]                           invokeRestart("muffleMessage")
[17:39:27.204]                       }
[17:39:27.204]                       else if (inherits(cond, "warning")) {
[17:39:27.204]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.204]                         if (muffled) 
[17:39:27.204]                           invokeRestart("muffleWarning")
[17:39:27.204]                       }
[17:39:27.204]                       else if (inherits(cond, "condition")) {
[17:39:27.204]                         if (!is.null(pattern)) {
[17:39:27.204]                           computeRestarts <- base::computeRestarts
[17:39:27.204]                           grepl <- base::grepl
[17:39:27.204]                           restarts <- computeRestarts(cond)
[17:39:27.204]                           for (restart in restarts) {
[17:39:27.204]                             name <- restart$name
[17:39:27.204]                             if (is.null(name)) 
[17:39:27.204]                               next
[17:39:27.204]                             if (!grepl(pattern, name)) 
[17:39:27.204]                               next
[17:39:27.204]                             invokeRestart(restart)
[17:39:27.204]                             muffled <- TRUE
[17:39:27.204]                             break
[17:39:27.204]                           }
[17:39:27.204]                         }
[17:39:27.204]                       }
[17:39:27.204]                       invisible(muffled)
[17:39:27.204]                     }
[17:39:27.204]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.204]                   }
[17:39:27.204]                 }
[17:39:27.204]                 else {
[17:39:27.204]                   if (TRUE) {
[17:39:27.204]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.204]                     {
[17:39:27.204]                       inherits <- base::inherits
[17:39:27.204]                       invokeRestart <- base::invokeRestart
[17:39:27.204]                       is.null <- base::is.null
[17:39:27.204]                       muffled <- FALSE
[17:39:27.204]                       if (inherits(cond, "message")) {
[17:39:27.204]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.204]                         if (muffled) 
[17:39:27.204]                           invokeRestart("muffleMessage")
[17:39:27.204]                       }
[17:39:27.204]                       else if (inherits(cond, "warning")) {
[17:39:27.204]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.204]                         if (muffled) 
[17:39:27.204]                           invokeRestart("muffleWarning")
[17:39:27.204]                       }
[17:39:27.204]                       else if (inherits(cond, "condition")) {
[17:39:27.204]                         if (!is.null(pattern)) {
[17:39:27.204]                           computeRestarts <- base::computeRestarts
[17:39:27.204]                           grepl <- base::grepl
[17:39:27.204]                           restarts <- computeRestarts(cond)
[17:39:27.204]                           for (restart in restarts) {
[17:39:27.204]                             name <- restart$name
[17:39:27.204]                             if (is.null(name)) 
[17:39:27.204]                               next
[17:39:27.204]                             if (!grepl(pattern, name)) 
[17:39:27.204]                               next
[17:39:27.204]                             invokeRestart(restart)
[17:39:27.204]                             muffled <- TRUE
[17:39:27.204]                             break
[17:39:27.204]                           }
[17:39:27.204]                         }
[17:39:27.204]                       }
[17:39:27.204]                       invisible(muffled)
[17:39:27.204]                     }
[17:39:27.204]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.204]                   }
[17:39:27.204]                 }
[17:39:27.204]             }
[17:39:27.204]         }))
[17:39:27.204]     }, error = function(ex) {
[17:39:27.204]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.204]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.204]                 ...future.rng), started = ...future.startTime, 
[17:39:27.204]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.204]             version = "1.8"), class = "FutureResult")
[17:39:27.204]     }, finally = {
[17:39:27.204]         if (!identical(...future.workdir, getwd())) 
[17:39:27.204]             setwd(...future.workdir)
[17:39:27.204]         {
[17:39:27.204]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.204]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.204]             }
[17:39:27.204]             base::options(...future.oldOptions)
[17:39:27.204]             if (.Platform$OS.type == "windows") {
[17:39:27.204]                 old_names <- names(...future.oldEnvVars)
[17:39:27.204]                 envs <- base::Sys.getenv()
[17:39:27.204]                 names <- names(envs)
[17:39:27.204]                 common <- intersect(names, old_names)
[17:39:27.204]                 added <- setdiff(names, old_names)
[17:39:27.204]                 removed <- setdiff(old_names, names)
[17:39:27.204]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.204]                   envs[common]]
[17:39:27.204]                 NAMES <- toupper(changed)
[17:39:27.204]                 args <- list()
[17:39:27.204]                 for (kk in seq_along(NAMES)) {
[17:39:27.204]                   name <- changed[[kk]]
[17:39:27.204]                   NAME <- NAMES[[kk]]
[17:39:27.204]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.204]                     next
[17:39:27.204]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.204]                 }
[17:39:27.204]                 NAMES <- toupper(added)
[17:39:27.204]                 for (kk in seq_along(NAMES)) {
[17:39:27.204]                   name <- added[[kk]]
[17:39:27.204]                   NAME <- NAMES[[kk]]
[17:39:27.204]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.204]                     next
[17:39:27.204]                   args[[name]] <- ""
[17:39:27.204]                 }
[17:39:27.204]                 NAMES <- toupper(removed)
[17:39:27.204]                 for (kk in seq_along(NAMES)) {
[17:39:27.204]                   name <- removed[[kk]]
[17:39:27.204]                   NAME <- NAMES[[kk]]
[17:39:27.204]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.204]                     next
[17:39:27.204]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.204]                 }
[17:39:27.204]                 if (length(args) > 0) 
[17:39:27.204]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.204]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.204]             }
[17:39:27.204]             else {
[17:39:27.204]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.204]             }
[17:39:27.204]             {
[17:39:27.204]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.204]                   0L) {
[17:39:27.204]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.204]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.204]                   base::options(opts)
[17:39:27.204]                 }
[17:39:27.204]                 {
[17:39:27.204]                   {
[17:39:27.204]                     NULL
[17:39:27.204]                     RNGkind("Mersenne-Twister")
[17:39:27.204]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:27.204]                       inherits = FALSE)
[17:39:27.204]                   }
[17:39:27.204]                   options(future.plan = NULL)
[17:39:27.204]                   if (is.na(NA_character_)) 
[17:39:27.204]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.204]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.204]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.204]                     .init = FALSE)
[17:39:27.204]                 }
[17:39:27.204]             }
[17:39:27.204]         }
[17:39:27.204]     })
[17:39:27.204]     if (TRUE) {
[17:39:27.204]         base::sink(type = "output", split = FALSE)
[17:39:27.204]         if (TRUE) {
[17:39:27.204]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.204]         }
[17:39:27.204]         else {
[17:39:27.204]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.204]         }
[17:39:27.204]         base::close(...future.stdout)
[17:39:27.204]         ...future.stdout <- NULL
[17:39:27.204]     }
[17:39:27.204]     ...future.result$conditions <- ...future.conditions
[17:39:27.204]     ...future.result$finished <- base::Sys.time()
[17:39:27.204]     ...future.result
[17:39:27.204] }
[17:39:27.206] plan(): Setting new future strategy stack:
[17:39:27.206] List of future strategies:
[17:39:27.206] 1. sequential:
[17:39:27.206]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.206]    - tweaked: FALSE
[17:39:27.206]    - call: NULL
[17:39:27.207] plan(): nbrOfWorkers() = 1
[17:39:27.207] plan(): Setting new future strategy stack:
[17:39:27.207] List of future strategies:
[17:39:27.207] 1. sequential:
[17:39:27.207]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.207]    - tweaked: FALSE
[17:39:27.207]    - call: plan(strategy)
[17:39:27.208] plan(): nbrOfWorkers() = 1
[17:39:27.208] SequentialFuture started (and completed)
[17:39:27.208] - Launch lazy future ... done
[17:39:27.208] run() for ‘SequentialFuture’ ... done
[17:39:27.208] getGlobalsAndPackages() ...
[17:39:27.209] Searching for globals...
[17:39:27.209] - globals found: [1] ‘{’
[17:39:27.209] Searching for globals ... DONE
[17:39:27.209] Resolving globals: FALSE
[17:39:27.210] 
[17:39:27.210] 
[17:39:27.210] getGlobalsAndPackages() ... DONE
[17:39:27.210] run() for ‘Future’ ...
[17:39:27.210] - state: ‘created’
[17:39:27.210] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:27.210] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:27.210] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:27.211]   - Field: ‘label’
[17:39:27.211]   - Field: ‘local’
[17:39:27.211]   - Field: ‘owner’
[17:39:27.211]   - Field: ‘envir’
[17:39:27.211]   - Field: ‘packages’
[17:39:27.211]   - Field: ‘gc’
[17:39:27.211]   - Field: ‘conditions’
[17:39:27.211]   - Field: ‘expr’
[17:39:27.211]   - Field: ‘uuid’
[17:39:27.211]   - Field: ‘seed’
[17:39:27.211]   - Field: ‘version’
[17:39:27.212]   - Field: ‘result’
[17:39:27.212]   - Field: ‘asynchronous’
[17:39:27.212]   - Field: ‘calls’
[17:39:27.212]   - Field: ‘globals’
[17:39:27.212]   - Field: ‘stdout’
[17:39:27.212]   - Field: ‘earlySignal’
[17:39:27.212]   - Field: ‘lazy’
[17:39:27.212]   - Field: ‘state’
[17:39:27.212] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:27.212] - Launch lazy future ...
[17:39:27.213] Packages needed by the future expression (n = 0): <none>
[17:39:27.213] Packages needed by future strategies (n = 0): <none>
[17:39:27.213] {
[17:39:27.213]     {
[17:39:27.213]         {
[17:39:27.213]             ...future.startTime <- base::Sys.time()
[17:39:27.213]             {
[17:39:27.213]                 {
[17:39:27.213]                   {
[17:39:27.213]                     base::local({
[17:39:27.213]                       has_future <- base::requireNamespace("future", 
[17:39:27.213]                         quietly = TRUE)
[17:39:27.213]                       if (has_future) {
[17:39:27.213]                         ns <- base::getNamespace("future")
[17:39:27.213]                         version <- ns[[".package"]][["version"]]
[17:39:27.213]                         if (is.null(version)) 
[17:39:27.213]                           version <- utils::packageVersion("future")
[17:39:27.213]                       }
[17:39:27.213]                       else {
[17:39:27.213]                         version <- NULL
[17:39:27.213]                       }
[17:39:27.213]                       if (!has_future || version < "1.8.0") {
[17:39:27.213]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.213]                           "", base::R.version$version.string), 
[17:39:27.213]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:27.213]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.213]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.213]                             "release", "version")], collapse = " "), 
[17:39:27.213]                           hostname = base::Sys.info()[["nodename"]])
[17:39:27.213]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.213]                           info)
[17:39:27.213]                         info <- base::paste(info, collapse = "; ")
[17:39:27.213]                         if (!has_future) {
[17:39:27.213]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.213]                             info)
[17:39:27.213]                         }
[17:39:27.213]                         else {
[17:39:27.213]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.213]                             info, version)
[17:39:27.213]                         }
[17:39:27.213]                         base::stop(msg)
[17:39:27.213]                       }
[17:39:27.213]                     })
[17:39:27.213]                   }
[17:39:27.213]                   ...future.strategy.old <- future::plan("list")
[17:39:27.213]                   options(future.plan = NULL)
[17:39:27.213]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.213]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.213]                 }
[17:39:27.213]                 ...future.workdir <- getwd()
[17:39:27.213]             }
[17:39:27.213]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.213]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.213]         }
[17:39:27.213]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.213]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.213]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.213]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.213]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.213]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.213]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.213]             base::names(...future.oldOptions))
[17:39:27.213]     }
[17:39:27.213]     if (FALSE) {
[17:39:27.213]     }
[17:39:27.213]     else {
[17:39:27.213]         if (TRUE) {
[17:39:27.213]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.213]                 open = "w")
[17:39:27.213]         }
[17:39:27.213]         else {
[17:39:27.213]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.213]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.213]         }
[17:39:27.213]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.213]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.213]             base::sink(type = "output", split = FALSE)
[17:39:27.213]             base::close(...future.stdout)
[17:39:27.213]         }, add = TRUE)
[17:39:27.213]     }
[17:39:27.213]     ...future.frame <- base::sys.nframe()
[17:39:27.213]     ...future.conditions <- base::list()
[17:39:27.213]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.213]     if (FALSE) {
[17:39:27.213]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.213]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.213]     }
[17:39:27.213]     ...future.result <- base::tryCatch({
[17:39:27.213]         base::withCallingHandlers({
[17:39:27.213]             ...future.value <- base::withVisible(base::local({
[17:39:27.213]                 4
[17:39:27.213]             }))
[17:39:27.213]             future::FutureResult(value = ...future.value$value, 
[17:39:27.213]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.213]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.213]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.213]                     ...future.globalenv.names))
[17:39:27.213]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.213]         }, condition = base::local({
[17:39:27.213]             c <- base::c
[17:39:27.213]             inherits <- base::inherits
[17:39:27.213]             invokeRestart <- base::invokeRestart
[17:39:27.213]             length <- base::length
[17:39:27.213]             list <- base::list
[17:39:27.213]             seq.int <- base::seq.int
[17:39:27.213]             signalCondition <- base::signalCondition
[17:39:27.213]             sys.calls <- base::sys.calls
[17:39:27.213]             `[[` <- base::`[[`
[17:39:27.213]             `+` <- base::`+`
[17:39:27.213]             `<<-` <- base::`<<-`
[17:39:27.213]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.213]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.213]                   3L)]
[17:39:27.213]             }
[17:39:27.213]             function(cond) {
[17:39:27.213]                 is_error <- inherits(cond, "error")
[17:39:27.213]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.213]                   NULL)
[17:39:27.213]                 if (is_error) {
[17:39:27.213]                   sessionInformation <- function() {
[17:39:27.213]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.213]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.213]                       search = base::search(), system = base::Sys.info())
[17:39:27.213]                   }
[17:39:27.213]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.213]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.213]                     cond$call), session = sessionInformation(), 
[17:39:27.213]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.213]                   signalCondition(cond)
[17:39:27.213]                 }
[17:39:27.213]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.213]                 "immediateCondition"))) {
[17:39:27.213]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.213]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.213]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.213]                   if (TRUE && !signal) {
[17:39:27.213]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.213]                     {
[17:39:27.213]                       inherits <- base::inherits
[17:39:27.213]                       invokeRestart <- base::invokeRestart
[17:39:27.213]                       is.null <- base::is.null
[17:39:27.213]                       muffled <- FALSE
[17:39:27.213]                       if (inherits(cond, "message")) {
[17:39:27.213]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.213]                         if (muffled) 
[17:39:27.213]                           invokeRestart("muffleMessage")
[17:39:27.213]                       }
[17:39:27.213]                       else if (inherits(cond, "warning")) {
[17:39:27.213]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.213]                         if (muffled) 
[17:39:27.213]                           invokeRestart("muffleWarning")
[17:39:27.213]                       }
[17:39:27.213]                       else if (inherits(cond, "condition")) {
[17:39:27.213]                         if (!is.null(pattern)) {
[17:39:27.213]                           computeRestarts <- base::computeRestarts
[17:39:27.213]                           grepl <- base::grepl
[17:39:27.213]                           restarts <- computeRestarts(cond)
[17:39:27.213]                           for (restart in restarts) {
[17:39:27.213]                             name <- restart$name
[17:39:27.213]                             if (is.null(name)) 
[17:39:27.213]                               next
[17:39:27.213]                             if (!grepl(pattern, name)) 
[17:39:27.213]                               next
[17:39:27.213]                             invokeRestart(restart)
[17:39:27.213]                             muffled <- TRUE
[17:39:27.213]                             break
[17:39:27.213]                           }
[17:39:27.213]                         }
[17:39:27.213]                       }
[17:39:27.213]                       invisible(muffled)
[17:39:27.213]                     }
[17:39:27.213]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.213]                   }
[17:39:27.213]                 }
[17:39:27.213]                 else {
[17:39:27.213]                   if (TRUE) {
[17:39:27.213]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.213]                     {
[17:39:27.213]                       inherits <- base::inherits
[17:39:27.213]                       invokeRestart <- base::invokeRestart
[17:39:27.213]                       is.null <- base::is.null
[17:39:27.213]                       muffled <- FALSE
[17:39:27.213]                       if (inherits(cond, "message")) {
[17:39:27.213]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.213]                         if (muffled) 
[17:39:27.213]                           invokeRestart("muffleMessage")
[17:39:27.213]                       }
[17:39:27.213]                       else if (inherits(cond, "warning")) {
[17:39:27.213]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.213]                         if (muffled) 
[17:39:27.213]                           invokeRestart("muffleWarning")
[17:39:27.213]                       }
[17:39:27.213]                       else if (inherits(cond, "condition")) {
[17:39:27.213]                         if (!is.null(pattern)) {
[17:39:27.213]                           computeRestarts <- base::computeRestarts
[17:39:27.213]                           grepl <- base::grepl
[17:39:27.213]                           restarts <- computeRestarts(cond)
[17:39:27.213]                           for (restart in restarts) {
[17:39:27.213]                             name <- restart$name
[17:39:27.213]                             if (is.null(name)) 
[17:39:27.213]                               next
[17:39:27.213]                             if (!grepl(pattern, name)) 
[17:39:27.213]                               next
[17:39:27.213]                             invokeRestart(restart)
[17:39:27.213]                             muffled <- TRUE
[17:39:27.213]                             break
[17:39:27.213]                           }
[17:39:27.213]                         }
[17:39:27.213]                       }
[17:39:27.213]                       invisible(muffled)
[17:39:27.213]                     }
[17:39:27.213]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.213]                   }
[17:39:27.213]                 }
[17:39:27.213]             }
[17:39:27.213]         }))
[17:39:27.213]     }, error = function(ex) {
[17:39:27.213]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.213]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.213]                 ...future.rng), started = ...future.startTime, 
[17:39:27.213]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.213]             version = "1.8"), class = "FutureResult")
[17:39:27.213]     }, finally = {
[17:39:27.213]         if (!identical(...future.workdir, getwd())) 
[17:39:27.213]             setwd(...future.workdir)
[17:39:27.213]         {
[17:39:27.213]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.213]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.213]             }
[17:39:27.213]             base::options(...future.oldOptions)
[17:39:27.213]             if (.Platform$OS.type == "windows") {
[17:39:27.213]                 old_names <- names(...future.oldEnvVars)
[17:39:27.213]                 envs <- base::Sys.getenv()
[17:39:27.213]                 names <- names(envs)
[17:39:27.213]                 common <- intersect(names, old_names)
[17:39:27.213]                 added <- setdiff(names, old_names)
[17:39:27.213]                 removed <- setdiff(old_names, names)
[17:39:27.213]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.213]                   envs[common]]
[17:39:27.213]                 NAMES <- toupper(changed)
[17:39:27.213]                 args <- list()
[17:39:27.213]                 for (kk in seq_along(NAMES)) {
[17:39:27.213]                   name <- changed[[kk]]
[17:39:27.213]                   NAME <- NAMES[[kk]]
[17:39:27.213]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.213]                     next
[17:39:27.213]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.213]                 }
[17:39:27.213]                 NAMES <- toupper(added)
[17:39:27.213]                 for (kk in seq_along(NAMES)) {
[17:39:27.213]                   name <- added[[kk]]
[17:39:27.213]                   NAME <- NAMES[[kk]]
[17:39:27.213]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.213]                     next
[17:39:27.213]                   args[[name]] <- ""
[17:39:27.213]                 }
[17:39:27.213]                 NAMES <- toupper(removed)
[17:39:27.213]                 for (kk in seq_along(NAMES)) {
[17:39:27.213]                   name <- removed[[kk]]
[17:39:27.213]                   NAME <- NAMES[[kk]]
[17:39:27.213]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.213]                     next
[17:39:27.213]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.213]                 }
[17:39:27.213]                 if (length(args) > 0) 
[17:39:27.213]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.213]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.213]             }
[17:39:27.213]             else {
[17:39:27.213]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.213]             }
[17:39:27.213]             {
[17:39:27.213]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.213]                   0L) {
[17:39:27.213]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.213]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.213]                   base::options(opts)
[17:39:27.213]                 }
[17:39:27.213]                 {
[17:39:27.213]                   {
[17:39:27.213]                     NULL
[17:39:27.213]                     RNGkind("Mersenne-Twister")
[17:39:27.213]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:27.213]                       inherits = FALSE)
[17:39:27.213]                   }
[17:39:27.213]                   options(future.plan = NULL)
[17:39:27.213]                   if (is.na(NA_character_)) 
[17:39:27.213]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.213]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.213]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.213]                     .init = FALSE)
[17:39:27.213]                 }
[17:39:27.213]             }
[17:39:27.213]         }
[17:39:27.213]     })
[17:39:27.213]     if (TRUE) {
[17:39:27.213]         base::sink(type = "output", split = FALSE)
[17:39:27.213]         if (TRUE) {
[17:39:27.213]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.213]         }
[17:39:27.213]         else {
[17:39:27.213]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.213]         }
[17:39:27.213]         base::close(...future.stdout)
[17:39:27.213]         ...future.stdout <- NULL
[17:39:27.213]     }
[17:39:27.213]     ...future.result$conditions <- ...future.conditions
[17:39:27.213]     ...future.result$finished <- base::Sys.time()
[17:39:27.213]     ...future.result
[17:39:27.213] }
[17:39:27.215] plan(): Setting new future strategy stack:
[17:39:27.215] List of future strategies:
[17:39:27.215] 1. sequential:
[17:39:27.215]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.215]    - tweaked: FALSE
[17:39:27.215]    - call: NULL
[17:39:27.215] plan(): nbrOfWorkers() = 1
[17:39:27.216] plan(): Setting new future strategy stack:
[17:39:27.216] List of future strategies:
[17:39:27.216] 1. sequential:
[17:39:27.216]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.216]    - tweaked: FALSE
[17:39:27.216]    - call: plan(strategy)
[17:39:27.216] plan(): nbrOfWorkers() = 1
[17:39:27.217] SequentialFuture started (and completed)
[17:39:27.217] - Launch lazy future ... done
[17:39:27.217] run() for ‘SequentialFuture’ ... done
u$a = 2
v$a = 4
[17:39:27.217] getGlobalsAndPackages() ...
[17:39:27.217] Searching for globals...
[17:39:27.218] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:27.218] Searching for globals ... DONE
[17:39:27.218] Resolving globals: FALSE
[17:39:27.219] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:27.219] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:27.219] - globals: [1] ‘a’
[17:39:27.220] 
[17:39:27.220] getGlobalsAndPackages() ... DONE
[17:39:27.220] run() for ‘Future’ ...
[17:39:27.220] - state: ‘created’
[17:39:27.220] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:27.220] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:27.220] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:27.221]   - Field: ‘label’
[17:39:27.221]   - Field: ‘local’
[17:39:27.221]   - Field: ‘owner’
[17:39:27.221]   - Field: ‘envir’
[17:39:27.221]   - Field: ‘packages’
[17:39:27.221]   - Field: ‘gc’
[17:39:27.221]   - Field: ‘conditions’
[17:39:27.221]   - Field: ‘expr’
[17:39:27.221]   - Field: ‘uuid’
[17:39:27.221]   - Field: ‘seed’
[17:39:27.221]   - Field: ‘version’
[17:39:27.222]   - Field: ‘result’
[17:39:27.222]   - Field: ‘asynchronous’
[17:39:27.222]   - Field: ‘calls’
[17:39:27.222]   - Field: ‘globals’
[17:39:27.222]   - Field: ‘stdout’
[17:39:27.222]   - Field: ‘earlySignal’
[17:39:27.222]   - Field: ‘lazy’
[17:39:27.222]   - Field: ‘state’
[17:39:27.222] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:27.222] - Launch lazy future ...
[17:39:27.222] Packages needed by the future expression (n = 0): <none>
[17:39:27.223] Packages needed by future strategies (n = 0): <none>
[17:39:27.223] {
[17:39:27.223]     {
[17:39:27.223]         {
[17:39:27.223]             ...future.startTime <- base::Sys.time()
[17:39:27.223]             {
[17:39:27.223]                 {
[17:39:27.223]                   {
[17:39:27.223]                     base::local({
[17:39:27.223]                       has_future <- base::requireNamespace("future", 
[17:39:27.223]                         quietly = TRUE)
[17:39:27.223]                       if (has_future) {
[17:39:27.223]                         ns <- base::getNamespace("future")
[17:39:27.223]                         version <- ns[[".package"]][["version"]]
[17:39:27.223]                         if (is.null(version)) 
[17:39:27.223]                           version <- utils::packageVersion("future")
[17:39:27.223]                       }
[17:39:27.223]                       else {
[17:39:27.223]                         version <- NULL
[17:39:27.223]                       }
[17:39:27.223]                       if (!has_future || version < "1.8.0") {
[17:39:27.223]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.223]                           "", base::R.version$version.string), 
[17:39:27.223]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:27.223]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.223]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.223]                             "release", "version")], collapse = " "), 
[17:39:27.223]                           hostname = base::Sys.info()[["nodename"]])
[17:39:27.223]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.223]                           info)
[17:39:27.223]                         info <- base::paste(info, collapse = "; ")
[17:39:27.223]                         if (!has_future) {
[17:39:27.223]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.223]                             info)
[17:39:27.223]                         }
[17:39:27.223]                         else {
[17:39:27.223]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.223]                             info, version)
[17:39:27.223]                         }
[17:39:27.223]                         base::stop(msg)
[17:39:27.223]                       }
[17:39:27.223]                     })
[17:39:27.223]                   }
[17:39:27.223]                   ...future.strategy.old <- future::plan("list")
[17:39:27.223]                   options(future.plan = NULL)
[17:39:27.223]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.223]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.223]                 }
[17:39:27.223]                 ...future.workdir <- getwd()
[17:39:27.223]             }
[17:39:27.223]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.223]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.223]         }
[17:39:27.223]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.223]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.223]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.223]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.223]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.223]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.223]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.223]             base::names(...future.oldOptions))
[17:39:27.223]     }
[17:39:27.223]     if (FALSE) {
[17:39:27.223]     }
[17:39:27.223]     else {
[17:39:27.223]         if (TRUE) {
[17:39:27.223]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.223]                 open = "w")
[17:39:27.223]         }
[17:39:27.223]         else {
[17:39:27.223]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.223]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.223]         }
[17:39:27.223]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.223]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.223]             base::sink(type = "output", split = FALSE)
[17:39:27.223]             base::close(...future.stdout)
[17:39:27.223]         }, add = TRUE)
[17:39:27.223]     }
[17:39:27.223]     ...future.frame <- base::sys.nframe()
[17:39:27.223]     ...future.conditions <- base::list()
[17:39:27.223]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.223]     if (FALSE) {
[17:39:27.223]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.223]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.223]     }
[17:39:27.223]     ...future.result <- base::tryCatch({
[17:39:27.223]         base::withCallingHandlers({
[17:39:27.223]             ...future.value <- base::withVisible(base::local({
[17:39:27.223]                 2 * a
[17:39:27.223]             }))
[17:39:27.223]             future::FutureResult(value = ...future.value$value, 
[17:39:27.223]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.223]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.223]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.223]                     ...future.globalenv.names))
[17:39:27.223]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.223]         }, condition = base::local({
[17:39:27.223]             c <- base::c
[17:39:27.223]             inherits <- base::inherits
[17:39:27.223]             invokeRestart <- base::invokeRestart
[17:39:27.223]             length <- base::length
[17:39:27.223]             list <- base::list
[17:39:27.223]             seq.int <- base::seq.int
[17:39:27.223]             signalCondition <- base::signalCondition
[17:39:27.223]             sys.calls <- base::sys.calls
[17:39:27.223]             `[[` <- base::`[[`
[17:39:27.223]             `+` <- base::`+`
[17:39:27.223]             `<<-` <- base::`<<-`
[17:39:27.223]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.223]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.223]                   3L)]
[17:39:27.223]             }
[17:39:27.223]             function(cond) {
[17:39:27.223]                 is_error <- inherits(cond, "error")
[17:39:27.223]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.223]                   NULL)
[17:39:27.223]                 if (is_error) {
[17:39:27.223]                   sessionInformation <- function() {
[17:39:27.223]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.223]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.223]                       search = base::search(), system = base::Sys.info())
[17:39:27.223]                   }
[17:39:27.223]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.223]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.223]                     cond$call), session = sessionInformation(), 
[17:39:27.223]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.223]                   signalCondition(cond)
[17:39:27.223]                 }
[17:39:27.223]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.223]                 "immediateCondition"))) {
[17:39:27.223]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.223]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.223]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.223]                   if (TRUE && !signal) {
[17:39:27.223]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.223]                     {
[17:39:27.223]                       inherits <- base::inherits
[17:39:27.223]                       invokeRestart <- base::invokeRestart
[17:39:27.223]                       is.null <- base::is.null
[17:39:27.223]                       muffled <- FALSE
[17:39:27.223]                       if (inherits(cond, "message")) {
[17:39:27.223]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.223]                         if (muffled) 
[17:39:27.223]                           invokeRestart("muffleMessage")
[17:39:27.223]                       }
[17:39:27.223]                       else if (inherits(cond, "warning")) {
[17:39:27.223]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.223]                         if (muffled) 
[17:39:27.223]                           invokeRestart("muffleWarning")
[17:39:27.223]                       }
[17:39:27.223]                       else if (inherits(cond, "condition")) {
[17:39:27.223]                         if (!is.null(pattern)) {
[17:39:27.223]                           computeRestarts <- base::computeRestarts
[17:39:27.223]                           grepl <- base::grepl
[17:39:27.223]                           restarts <- computeRestarts(cond)
[17:39:27.223]                           for (restart in restarts) {
[17:39:27.223]                             name <- restart$name
[17:39:27.223]                             if (is.null(name)) 
[17:39:27.223]                               next
[17:39:27.223]                             if (!grepl(pattern, name)) 
[17:39:27.223]                               next
[17:39:27.223]                             invokeRestart(restart)
[17:39:27.223]                             muffled <- TRUE
[17:39:27.223]                             break
[17:39:27.223]                           }
[17:39:27.223]                         }
[17:39:27.223]                       }
[17:39:27.223]                       invisible(muffled)
[17:39:27.223]                     }
[17:39:27.223]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.223]                   }
[17:39:27.223]                 }
[17:39:27.223]                 else {
[17:39:27.223]                   if (TRUE) {
[17:39:27.223]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.223]                     {
[17:39:27.223]                       inherits <- base::inherits
[17:39:27.223]                       invokeRestart <- base::invokeRestart
[17:39:27.223]                       is.null <- base::is.null
[17:39:27.223]                       muffled <- FALSE
[17:39:27.223]                       if (inherits(cond, "message")) {
[17:39:27.223]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.223]                         if (muffled) 
[17:39:27.223]                           invokeRestart("muffleMessage")
[17:39:27.223]                       }
[17:39:27.223]                       else if (inherits(cond, "warning")) {
[17:39:27.223]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.223]                         if (muffled) 
[17:39:27.223]                           invokeRestart("muffleWarning")
[17:39:27.223]                       }
[17:39:27.223]                       else if (inherits(cond, "condition")) {
[17:39:27.223]                         if (!is.null(pattern)) {
[17:39:27.223]                           computeRestarts <- base::computeRestarts
[17:39:27.223]                           grepl <- base::grepl
[17:39:27.223]                           restarts <- computeRestarts(cond)
[17:39:27.223]                           for (restart in restarts) {
[17:39:27.223]                             name <- restart$name
[17:39:27.223]                             if (is.null(name)) 
[17:39:27.223]                               next
[17:39:27.223]                             if (!grepl(pattern, name)) 
[17:39:27.223]                               next
[17:39:27.223]                             invokeRestart(restart)
[17:39:27.223]                             muffled <- TRUE
[17:39:27.223]                             break
[17:39:27.223]                           }
[17:39:27.223]                         }
[17:39:27.223]                       }
[17:39:27.223]                       invisible(muffled)
[17:39:27.223]                     }
[17:39:27.223]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.223]                   }
[17:39:27.223]                 }
[17:39:27.223]             }
[17:39:27.223]         }))
[17:39:27.223]     }, error = function(ex) {
[17:39:27.223]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.223]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.223]                 ...future.rng), started = ...future.startTime, 
[17:39:27.223]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.223]             version = "1.8"), class = "FutureResult")
[17:39:27.223]     }, finally = {
[17:39:27.223]         if (!identical(...future.workdir, getwd())) 
[17:39:27.223]             setwd(...future.workdir)
[17:39:27.223]         {
[17:39:27.223]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.223]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.223]             }
[17:39:27.223]             base::options(...future.oldOptions)
[17:39:27.223]             if (.Platform$OS.type == "windows") {
[17:39:27.223]                 old_names <- names(...future.oldEnvVars)
[17:39:27.223]                 envs <- base::Sys.getenv()
[17:39:27.223]                 names <- names(envs)
[17:39:27.223]                 common <- intersect(names, old_names)
[17:39:27.223]                 added <- setdiff(names, old_names)
[17:39:27.223]                 removed <- setdiff(old_names, names)
[17:39:27.223]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.223]                   envs[common]]
[17:39:27.223]                 NAMES <- toupper(changed)
[17:39:27.223]                 args <- list()
[17:39:27.223]                 for (kk in seq_along(NAMES)) {
[17:39:27.223]                   name <- changed[[kk]]
[17:39:27.223]                   NAME <- NAMES[[kk]]
[17:39:27.223]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.223]                     next
[17:39:27.223]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.223]                 }
[17:39:27.223]                 NAMES <- toupper(added)
[17:39:27.223]                 for (kk in seq_along(NAMES)) {
[17:39:27.223]                   name <- added[[kk]]
[17:39:27.223]                   NAME <- NAMES[[kk]]
[17:39:27.223]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.223]                     next
[17:39:27.223]                   args[[name]] <- ""
[17:39:27.223]                 }
[17:39:27.223]                 NAMES <- toupper(removed)
[17:39:27.223]                 for (kk in seq_along(NAMES)) {
[17:39:27.223]                   name <- removed[[kk]]
[17:39:27.223]                   NAME <- NAMES[[kk]]
[17:39:27.223]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.223]                     next
[17:39:27.223]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.223]                 }
[17:39:27.223]                 if (length(args) > 0) 
[17:39:27.223]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.223]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.223]             }
[17:39:27.223]             else {
[17:39:27.223]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.223]             }
[17:39:27.223]             {
[17:39:27.223]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.223]                   0L) {
[17:39:27.223]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.223]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.223]                   base::options(opts)
[17:39:27.223]                 }
[17:39:27.223]                 {
[17:39:27.223]                   {
[17:39:27.223]                     NULL
[17:39:27.223]                     RNGkind("Mersenne-Twister")
[17:39:27.223]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:27.223]                       inherits = FALSE)
[17:39:27.223]                   }
[17:39:27.223]                   options(future.plan = NULL)
[17:39:27.223]                   if (is.na(NA_character_)) 
[17:39:27.223]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.223]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.223]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.223]                     .init = FALSE)
[17:39:27.223]                 }
[17:39:27.223]             }
[17:39:27.223]         }
[17:39:27.223]     })
[17:39:27.223]     if (TRUE) {
[17:39:27.223]         base::sink(type = "output", split = FALSE)
[17:39:27.223]         if (TRUE) {
[17:39:27.223]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.223]         }
[17:39:27.223]         else {
[17:39:27.223]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.223]         }
[17:39:27.223]         base::close(...future.stdout)
[17:39:27.223]         ...future.stdout <- NULL
[17:39:27.223]     }
[17:39:27.223]     ...future.result$conditions <- ...future.conditions
[17:39:27.223]     ...future.result$finished <- base::Sys.time()
[17:39:27.223]     ...future.result
[17:39:27.223] }
[17:39:27.225] assign_globals() ...
[17:39:27.225] List of 1
[17:39:27.225]  $ a: num 1
[17:39:27.225]  - attr(*, "where")=List of 1
[17:39:27.225]   ..$ a:<environment: R_EmptyEnv> 
[17:39:27.225]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:27.225]  - attr(*, "resolved")= logi FALSE
[17:39:27.225]  - attr(*, "total_size")= num 56
[17:39:27.225]  - attr(*, "already-done")= logi TRUE
[17:39:27.229] - copied ‘a’ to environment
[17:39:27.229] assign_globals() ... done
[17:39:27.229] plan(): Setting new future strategy stack:
[17:39:27.230] List of future strategies:
[17:39:27.230] 1. sequential:
[17:39:27.230]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.230]    - tweaked: FALSE
[17:39:27.230]    - call: NULL
[17:39:27.230] plan(): nbrOfWorkers() = 1
[17:39:27.231] plan(): Setting new future strategy stack:
[17:39:27.231] List of future strategies:
[17:39:27.231] 1. sequential:
[17:39:27.231]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.231]    - tweaked: FALSE
[17:39:27.231]    - call: plan(strategy)
[17:39:27.231] plan(): nbrOfWorkers() = 1
[17:39:27.231] SequentialFuture started (and completed)
[17:39:27.231] - Launch lazy future ... done
[17:39:27.231] run() for ‘SequentialFuture’ ... done
[17:39:27.232] getGlobalsAndPackages() ...
[17:39:27.232] Searching for globals...
[17:39:27.234] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:27.234] Searching for globals ... DONE
[17:39:27.234] Resolving globals: FALSE
[17:39:27.235] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:27.235] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:27.235] - globals: [1] ‘a’
[17:39:27.235] 
[17:39:27.235] getGlobalsAndPackages() ... DONE
[17:39:27.236] run() for ‘Future’ ...
[17:39:27.236] - state: ‘created’
[17:39:27.236] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:27.236] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:27.236] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:27.236]   - Field: ‘label’
[17:39:27.236]   - Field: ‘local’
[17:39:27.236]   - Field: ‘owner’
[17:39:27.237]   - Field: ‘envir’
[17:39:27.237]   - Field: ‘packages’
[17:39:27.237]   - Field: ‘gc’
[17:39:27.237]   - Field: ‘conditions’
[17:39:27.237]   - Field: ‘expr’
[17:39:27.237]   - Field: ‘uuid’
[17:39:27.237]   - Field: ‘seed’
[17:39:27.237]   - Field: ‘version’
[17:39:27.237]   - Field: ‘result’
[17:39:27.237]   - Field: ‘asynchronous’
[17:39:27.237]   - Field: ‘calls’
[17:39:27.238]   - Field: ‘globals’
[17:39:27.238]   - Field: ‘stdout’
[17:39:27.238]   - Field: ‘earlySignal’
[17:39:27.238]   - Field: ‘lazy’
[17:39:27.238]   - Field: ‘state’
[17:39:27.238] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:27.238] - Launch lazy future ...
[17:39:27.238] Packages needed by the future expression (n = 0): <none>
[17:39:27.238] Packages needed by future strategies (n = 0): <none>
[17:39:27.239] {
[17:39:27.239]     {
[17:39:27.239]         {
[17:39:27.239]             ...future.startTime <- base::Sys.time()
[17:39:27.239]             {
[17:39:27.239]                 {
[17:39:27.239]                   {
[17:39:27.239]                     base::local({
[17:39:27.239]                       has_future <- base::requireNamespace("future", 
[17:39:27.239]                         quietly = TRUE)
[17:39:27.239]                       if (has_future) {
[17:39:27.239]                         ns <- base::getNamespace("future")
[17:39:27.239]                         version <- ns[[".package"]][["version"]]
[17:39:27.239]                         if (is.null(version)) 
[17:39:27.239]                           version <- utils::packageVersion("future")
[17:39:27.239]                       }
[17:39:27.239]                       else {
[17:39:27.239]                         version <- NULL
[17:39:27.239]                       }
[17:39:27.239]                       if (!has_future || version < "1.8.0") {
[17:39:27.239]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.239]                           "", base::R.version$version.string), 
[17:39:27.239]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:27.239]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.239]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.239]                             "release", "version")], collapse = " "), 
[17:39:27.239]                           hostname = base::Sys.info()[["nodename"]])
[17:39:27.239]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.239]                           info)
[17:39:27.239]                         info <- base::paste(info, collapse = "; ")
[17:39:27.239]                         if (!has_future) {
[17:39:27.239]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.239]                             info)
[17:39:27.239]                         }
[17:39:27.239]                         else {
[17:39:27.239]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.239]                             info, version)
[17:39:27.239]                         }
[17:39:27.239]                         base::stop(msg)
[17:39:27.239]                       }
[17:39:27.239]                     })
[17:39:27.239]                   }
[17:39:27.239]                   ...future.strategy.old <- future::plan("list")
[17:39:27.239]                   options(future.plan = NULL)
[17:39:27.239]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.239]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.239]                 }
[17:39:27.239]                 ...future.workdir <- getwd()
[17:39:27.239]             }
[17:39:27.239]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.239]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.239]         }
[17:39:27.239]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.239]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.239]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.239]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.239]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.239]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.239]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.239]             base::names(...future.oldOptions))
[17:39:27.239]     }
[17:39:27.239]     if (FALSE) {
[17:39:27.239]     }
[17:39:27.239]     else {
[17:39:27.239]         if (TRUE) {
[17:39:27.239]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.239]                 open = "w")
[17:39:27.239]         }
[17:39:27.239]         else {
[17:39:27.239]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.239]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.239]         }
[17:39:27.239]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.239]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.239]             base::sink(type = "output", split = FALSE)
[17:39:27.239]             base::close(...future.stdout)
[17:39:27.239]         }, add = TRUE)
[17:39:27.239]     }
[17:39:27.239]     ...future.frame <- base::sys.nframe()
[17:39:27.239]     ...future.conditions <- base::list()
[17:39:27.239]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.239]     if (FALSE) {
[17:39:27.239]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.239]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.239]     }
[17:39:27.239]     ...future.result <- base::tryCatch({
[17:39:27.239]         base::withCallingHandlers({
[17:39:27.239]             ...future.value <- base::withVisible(base::local({
[17:39:27.239]                 2 * a
[17:39:27.239]             }))
[17:39:27.239]             future::FutureResult(value = ...future.value$value, 
[17:39:27.239]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.239]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.239]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.239]                     ...future.globalenv.names))
[17:39:27.239]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.239]         }, condition = base::local({
[17:39:27.239]             c <- base::c
[17:39:27.239]             inherits <- base::inherits
[17:39:27.239]             invokeRestart <- base::invokeRestart
[17:39:27.239]             length <- base::length
[17:39:27.239]             list <- base::list
[17:39:27.239]             seq.int <- base::seq.int
[17:39:27.239]             signalCondition <- base::signalCondition
[17:39:27.239]             sys.calls <- base::sys.calls
[17:39:27.239]             `[[` <- base::`[[`
[17:39:27.239]             `+` <- base::`+`
[17:39:27.239]             `<<-` <- base::`<<-`
[17:39:27.239]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.239]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.239]                   3L)]
[17:39:27.239]             }
[17:39:27.239]             function(cond) {
[17:39:27.239]                 is_error <- inherits(cond, "error")
[17:39:27.239]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.239]                   NULL)
[17:39:27.239]                 if (is_error) {
[17:39:27.239]                   sessionInformation <- function() {
[17:39:27.239]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.239]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.239]                       search = base::search(), system = base::Sys.info())
[17:39:27.239]                   }
[17:39:27.239]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.239]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.239]                     cond$call), session = sessionInformation(), 
[17:39:27.239]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.239]                   signalCondition(cond)
[17:39:27.239]                 }
[17:39:27.239]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.239]                 "immediateCondition"))) {
[17:39:27.239]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.239]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.239]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.239]                   if (TRUE && !signal) {
[17:39:27.239]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.239]                     {
[17:39:27.239]                       inherits <- base::inherits
[17:39:27.239]                       invokeRestart <- base::invokeRestart
[17:39:27.239]                       is.null <- base::is.null
[17:39:27.239]                       muffled <- FALSE
[17:39:27.239]                       if (inherits(cond, "message")) {
[17:39:27.239]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.239]                         if (muffled) 
[17:39:27.239]                           invokeRestart("muffleMessage")
[17:39:27.239]                       }
[17:39:27.239]                       else if (inherits(cond, "warning")) {
[17:39:27.239]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.239]                         if (muffled) 
[17:39:27.239]                           invokeRestart("muffleWarning")
[17:39:27.239]                       }
[17:39:27.239]                       else if (inherits(cond, "condition")) {
[17:39:27.239]                         if (!is.null(pattern)) {
[17:39:27.239]                           computeRestarts <- base::computeRestarts
[17:39:27.239]                           grepl <- base::grepl
[17:39:27.239]                           restarts <- computeRestarts(cond)
[17:39:27.239]                           for (restart in restarts) {
[17:39:27.239]                             name <- restart$name
[17:39:27.239]                             if (is.null(name)) 
[17:39:27.239]                               next
[17:39:27.239]                             if (!grepl(pattern, name)) 
[17:39:27.239]                               next
[17:39:27.239]                             invokeRestart(restart)
[17:39:27.239]                             muffled <- TRUE
[17:39:27.239]                             break
[17:39:27.239]                           }
[17:39:27.239]                         }
[17:39:27.239]                       }
[17:39:27.239]                       invisible(muffled)
[17:39:27.239]                     }
[17:39:27.239]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.239]                   }
[17:39:27.239]                 }
[17:39:27.239]                 else {
[17:39:27.239]                   if (TRUE) {
[17:39:27.239]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.239]                     {
[17:39:27.239]                       inherits <- base::inherits
[17:39:27.239]                       invokeRestart <- base::invokeRestart
[17:39:27.239]                       is.null <- base::is.null
[17:39:27.239]                       muffled <- FALSE
[17:39:27.239]                       if (inherits(cond, "message")) {
[17:39:27.239]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.239]                         if (muffled) 
[17:39:27.239]                           invokeRestart("muffleMessage")
[17:39:27.239]                       }
[17:39:27.239]                       else if (inherits(cond, "warning")) {
[17:39:27.239]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.239]                         if (muffled) 
[17:39:27.239]                           invokeRestart("muffleWarning")
[17:39:27.239]                       }
[17:39:27.239]                       else if (inherits(cond, "condition")) {
[17:39:27.239]                         if (!is.null(pattern)) {
[17:39:27.239]                           computeRestarts <- base::computeRestarts
[17:39:27.239]                           grepl <- base::grepl
[17:39:27.239]                           restarts <- computeRestarts(cond)
[17:39:27.239]                           for (restart in restarts) {
[17:39:27.239]                             name <- restart$name
[17:39:27.239]                             if (is.null(name)) 
[17:39:27.239]                               next
[17:39:27.239]                             if (!grepl(pattern, name)) 
[17:39:27.239]                               next
[17:39:27.239]                             invokeRestart(restart)
[17:39:27.239]                             muffled <- TRUE
[17:39:27.239]                             break
[17:39:27.239]                           }
[17:39:27.239]                         }
[17:39:27.239]                       }
[17:39:27.239]                       invisible(muffled)
[17:39:27.239]                     }
[17:39:27.239]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.239]                   }
[17:39:27.239]                 }
[17:39:27.239]             }
[17:39:27.239]         }))
[17:39:27.239]     }, error = function(ex) {
[17:39:27.239]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.239]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.239]                 ...future.rng), started = ...future.startTime, 
[17:39:27.239]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.239]             version = "1.8"), class = "FutureResult")
[17:39:27.239]     }, finally = {
[17:39:27.239]         if (!identical(...future.workdir, getwd())) 
[17:39:27.239]             setwd(...future.workdir)
[17:39:27.239]         {
[17:39:27.239]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.239]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.239]             }
[17:39:27.239]             base::options(...future.oldOptions)
[17:39:27.239]             if (.Platform$OS.type == "windows") {
[17:39:27.239]                 old_names <- names(...future.oldEnvVars)
[17:39:27.239]                 envs <- base::Sys.getenv()
[17:39:27.239]                 names <- names(envs)
[17:39:27.239]                 common <- intersect(names, old_names)
[17:39:27.239]                 added <- setdiff(names, old_names)
[17:39:27.239]                 removed <- setdiff(old_names, names)
[17:39:27.239]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.239]                   envs[common]]
[17:39:27.239]                 NAMES <- toupper(changed)
[17:39:27.239]                 args <- list()
[17:39:27.239]                 for (kk in seq_along(NAMES)) {
[17:39:27.239]                   name <- changed[[kk]]
[17:39:27.239]                   NAME <- NAMES[[kk]]
[17:39:27.239]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.239]                     next
[17:39:27.239]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.239]                 }
[17:39:27.239]                 NAMES <- toupper(added)
[17:39:27.239]                 for (kk in seq_along(NAMES)) {
[17:39:27.239]                   name <- added[[kk]]
[17:39:27.239]                   NAME <- NAMES[[kk]]
[17:39:27.239]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.239]                     next
[17:39:27.239]                   args[[name]] <- ""
[17:39:27.239]                 }
[17:39:27.239]                 NAMES <- toupper(removed)
[17:39:27.239]                 for (kk in seq_along(NAMES)) {
[17:39:27.239]                   name <- removed[[kk]]
[17:39:27.239]                   NAME <- NAMES[[kk]]
[17:39:27.239]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.239]                     next
[17:39:27.239]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.239]                 }
[17:39:27.239]                 if (length(args) > 0) 
[17:39:27.239]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.239]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.239]             }
[17:39:27.239]             else {
[17:39:27.239]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.239]             }
[17:39:27.239]             {
[17:39:27.239]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.239]                   0L) {
[17:39:27.239]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.239]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.239]                   base::options(opts)
[17:39:27.239]                 }
[17:39:27.239]                 {
[17:39:27.239]                   {
[17:39:27.239]                     NULL
[17:39:27.239]                     RNGkind("Mersenne-Twister")
[17:39:27.239]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:27.239]                       inherits = FALSE)
[17:39:27.239]                   }
[17:39:27.239]                   options(future.plan = NULL)
[17:39:27.239]                   if (is.na(NA_character_)) 
[17:39:27.239]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.239]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.239]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.239]                     .init = FALSE)
[17:39:27.239]                 }
[17:39:27.239]             }
[17:39:27.239]         }
[17:39:27.239]     })
[17:39:27.239]     if (TRUE) {
[17:39:27.239]         base::sink(type = "output", split = FALSE)
[17:39:27.239]         if (TRUE) {
[17:39:27.239]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.239]         }
[17:39:27.239]         else {
[17:39:27.239]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.239]         }
[17:39:27.239]         base::close(...future.stdout)
[17:39:27.239]         ...future.stdout <- NULL
[17:39:27.239]     }
[17:39:27.239]     ...future.result$conditions <- ...future.conditions
[17:39:27.239]     ...future.result$finished <- base::Sys.time()
[17:39:27.239]     ...future.result
[17:39:27.239] }
[17:39:27.240] assign_globals() ...
[17:39:27.240] List of 1
[17:39:27.240]  $ a: num 1
[17:39:27.240]  - attr(*, "where")=List of 1
[17:39:27.240]   ..$ a:<environment: R_EmptyEnv> 
[17:39:27.240]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:27.240]  - attr(*, "resolved")= logi FALSE
[17:39:27.240]  - attr(*, "total_size")= num 56
[17:39:27.240]  - attr(*, "already-done")= logi TRUE
[17:39:27.243] - copied ‘a’ to environment
[17:39:27.243] assign_globals() ... done
[17:39:27.243] plan(): Setting new future strategy stack:
[17:39:27.243] List of future strategies:
[17:39:27.243] 1. sequential:
[17:39:27.243]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.243]    - tweaked: FALSE
[17:39:27.243]    - call: NULL
[17:39:27.244] plan(): nbrOfWorkers() = 1
[17:39:27.244] plan(): Setting new future strategy stack:
[17:39:27.244] List of future strategies:
[17:39:27.244] 1. sequential:
[17:39:27.244]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.244]    - tweaked: FALSE
[17:39:27.244]    - call: plan(strategy)
[17:39:27.245] plan(): nbrOfWorkers() = 1
[17:39:27.245] SequentialFuture started (and completed)
[17:39:27.245] - Launch lazy future ... done
[17:39:27.245] run() for ‘SequentialFuture’ ... done
[17:39:27.246] getGlobalsAndPackages() ...
[17:39:27.246] Searching for globals...
[17:39:27.246] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:27.246] Searching for globals ... DONE
[17:39:27.247] Resolving globals: FALSE
[17:39:27.247] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:27.247] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:27.247] - globals: [1] ‘a’
[17:39:27.247] 
[17:39:27.248] getGlobalsAndPackages() ... DONE
[17:39:27.248] run() for ‘Future’ ...
[17:39:27.248] - state: ‘created’
[17:39:27.248] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:27.248] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:27.248] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:27.248]   - Field: ‘label’
[17:39:27.249]   - Field: ‘local’
[17:39:27.249]   - Field: ‘owner’
[17:39:27.249]   - Field: ‘envir’
[17:39:27.249]   - Field: ‘packages’
[17:39:27.249]   - Field: ‘gc’
[17:39:27.249]   - Field: ‘conditions’
[17:39:27.249]   - Field: ‘expr’
[17:39:27.249]   - Field: ‘uuid’
[17:39:27.249]   - Field: ‘seed’
[17:39:27.249]   - Field: ‘version’
[17:39:27.249]   - Field: ‘result’
[17:39:27.250]   - Field: ‘asynchronous’
[17:39:27.250]   - Field: ‘calls’
[17:39:27.250]   - Field: ‘globals’
[17:39:27.250]   - Field: ‘stdout’
[17:39:27.250]   - Field: ‘earlySignal’
[17:39:27.250]   - Field: ‘lazy’
[17:39:27.250]   - Field: ‘state’
[17:39:27.250] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:27.250] - Launch lazy future ...
[17:39:27.250] Packages needed by the future expression (n = 0): <none>
[17:39:27.251] Packages needed by future strategies (n = 0): <none>
[17:39:27.251] {
[17:39:27.251]     {
[17:39:27.251]         {
[17:39:27.251]             ...future.startTime <- base::Sys.time()
[17:39:27.251]             {
[17:39:27.251]                 {
[17:39:27.251]                   {
[17:39:27.251]                     base::local({
[17:39:27.251]                       has_future <- base::requireNamespace("future", 
[17:39:27.251]                         quietly = TRUE)
[17:39:27.251]                       if (has_future) {
[17:39:27.251]                         ns <- base::getNamespace("future")
[17:39:27.251]                         version <- ns[[".package"]][["version"]]
[17:39:27.251]                         if (is.null(version)) 
[17:39:27.251]                           version <- utils::packageVersion("future")
[17:39:27.251]                       }
[17:39:27.251]                       else {
[17:39:27.251]                         version <- NULL
[17:39:27.251]                       }
[17:39:27.251]                       if (!has_future || version < "1.8.0") {
[17:39:27.251]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.251]                           "", base::R.version$version.string), 
[17:39:27.251]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:27.251]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.251]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.251]                             "release", "version")], collapse = " "), 
[17:39:27.251]                           hostname = base::Sys.info()[["nodename"]])
[17:39:27.251]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.251]                           info)
[17:39:27.251]                         info <- base::paste(info, collapse = "; ")
[17:39:27.251]                         if (!has_future) {
[17:39:27.251]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.251]                             info)
[17:39:27.251]                         }
[17:39:27.251]                         else {
[17:39:27.251]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.251]                             info, version)
[17:39:27.251]                         }
[17:39:27.251]                         base::stop(msg)
[17:39:27.251]                       }
[17:39:27.251]                     })
[17:39:27.251]                   }
[17:39:27.251]                   ...future.strategy.old <- future::plan("list")
[17:39:27.251]                   options(future.plan = NULL)
[17:39:27.251]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.251]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.251]                 }
[17:39:27.251]                 ...future.workdir <- getwd()
[17:39:27.251]             }
[17:39:27.251]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.251]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.251]         }
[17:39:27.251]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.251]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.251]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.251]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.251]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.251]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.251]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.251]             base::names(...future.oldOptions))
[17:39:27.251]     }
[17:39:27.251]     if (FALSE) {
[17:39:27.251]     }
[17:39:27.251]     else {
[17:39:27.251]         if (TRUE) {
[17:39:27.251]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.251]                 open = "w")
[17:39:27.251]         }
[17:39:27.251]         else {
[17:39:27.251]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.251]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.251]         }
[17:39:27.251]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.251]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.251]             base::sink(type = "output", split = FALSE)
[17:39:27.251]             base::close(...future.stdout)
[17:39:27.251]         }, add = TRUE)
[17:39:27.251]     }
[17:39:27.251]     ...future.frame <- base::sys.nframe()
[17:39:27.251]     ...future.conditions <- base::list()
[17:39:27.251]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.251]     if (FALSE) {
[17:39:27.251]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.251]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.251]     }
[17:39:27.251]     ...future.result <- base::tryCatch({
[17:39:27.251]         base::withCallingHandlers({
[17:39:27.251]             ...future.value <- base::withVisible(base::local({
[17:39:27.251]                 2 * a
[17:39:27.251]             }))
[17:39:27.251]             future::FutureResult(value = ...future.value$value, 
[17:39:27.251]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.251]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.251]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.251]                     ...future.globalenv.names))
[17:39:27.251]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.251]         }, condition = base::local({
[17:39:27.251]             c <- base::c
[17:39:27.251]             inherits <- base::inherits
[17:39:27.251]             invokeRestart <- base::invokeRestart
[17:39:27.251]             length <- base::length
[17:39:27.251]             list <- base::list
[17:39:27.251]             seq.int <- base::seq.int
[17:39:27.251]             signalCondition <- base::signalCondition
[17:39:27.251]             sys.calls <- base::sys.calls
[17:39:27.251]             `[[` <- base::`[[`
[17:39:27.251]             `+` <- base::`+`
[17:39:27.251]             `<<-` <- base::`<<-`
[17:39:27.251]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.251]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.251]                   3L)]
[17:39:27.251]             }
[17:39:27.251]             function(cond) {
[17:39:27.251]                 is_error <- inherits(cond, "error")
[17:39:27.251]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.251]                   NULL)
[17:39:27.251]                 if (is_error) {
[17:39:27.251]                   sessionInformation <- function() {
[17:39:27.251]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.251]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.251]                       search = base::search(), system = base::Sys.info())
[17:39:27.251]                   }
[17:39:27.251]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.251]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.251]                     cond$call), session = sessionInformation(), 
[17:39:27.251]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.251]                   signalCondition(cond)
[17:39:27.251]                 }
[17:39:27.251]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.251]                 "immediateCondition"))) {
[17:39:27.251]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.251]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.251]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.251]                   if (TRUE && !signal) {
[17:39:27.251]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.251]                     {
[17:39:27.251]                       inherits <- base::inherits
[17:39:27.251]                       invokeRestart <- base::invokeRestart
[17:39:27.251]                       is.null <- base::is.null
[17:39:27.251]                       muffled <- FALSE
[17:39:27.251]                       if (inherits(cond, "message")) {
[17:39:27.251]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.251]                         if (muffled) 
[17:39:27.251]                           invokeRestart("muffleMessage")
[17:39:27.251]                       }
[17:39:27.251]                       else if (inherits(cond, "warning")) {
[17:39:27.251]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.251]                         if (muffled) 
[17:39:27.251]                           invokeRestart("muffleWarning")
[17:39:27.251]                       }
[17:39:27.251]                       else if (inherits(cond, "condition")) {
[17:39:27.251]                         if (!is.null(pattern)) {
[17:39:27.251]                           computeRestarts <- base::computeRestarts
[17:39:27.251]                           grepl <- base::grepl
[17:39:27.251]                           restarts <- computeRestarts(cond)
[17:39:27.251]                           for (restart in restarts) {
[17:39:27.251]                             name <- restart$name
[17:39:27.251]                             if (is.null(name)) 
[17:39:27.251]                               next
[17:39:27.251]                             if (!grepl(pattern, name)) 
[17:39:27.251]                               next
[17:39:27.251]                             invokeRestart(restart)
[17:39:27.251]                             muffled <- TRUE
[17:39:27.251]                             break
[17:39:27.251]                           }
[17:39:27.251]                         }
[17:39:27.251]                       }
[17:39:27.251]                       invisible(muffled)
[17:39:27.251]                     }
[17:39:27.251]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.251]                   }
[17:39:27.251]                 }
[17:39:27.251]                 else {
[17:39:27.251]                   if (TRUE) {
[17:39:27.251]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.251]                     {
[17:39:27.251]                       inherits <- base::inherits
[17:39:27.251]                       invokeRestart <- base::invokeRestart
[17:39:27.251]                       is.null <- base::is.null
[17:39:27.251]                       muffled <- FALSE
[17:39:27.251]                       if (inherits(cond, "message")) {
[17:39:27.251]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.251]                         if (muffled) 
[17:39:27.251]                           invokeRestart("muffleMessage")
[17:39:27.251]                       }
[17:39:27.251]                       else if (inherits(cond, "warning")) {
[17:39:27.251]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.251]                         if (muffled) 
[17:39:27.251]                           invokeRestart("muffleWarning")
[17:39:27.251]                       }
[17:39:27.251]                       else if (inherits(cond, "condition")) {
[17:39:27.251]                         if (!is.null(pattern)) {
[17:39:27.251]                           computeRestarts <- base::computeRestarts
[17:39:27.251]                           grepl <- base::grepl
[17:39:27.251]                           restarts <- computeRestarts(cond)
[17:39:27.251]                           for (restart in restarts) {
[17:39:27.251]                             name <- restart$name
[17:39:27.251]                             if (is.null(name)) 
[17:39:27.251]                               next
[17:39:27.251]                             if (!grepl(pattern, name)) 
[17:39:27.251]                               next
[17:39:27.251]                             invokeRestart(restart)
[17:39:27.251]                             muffled <- TRUE
[17:39:27.251]                             break
[17:39:27.251]                           }
[17:39:27.251]                         }
[17:39:27.251]                       }
[17:39:27.251]                       invisible(muffled)
[17:39:27.251]                     }
[17:39:27.251]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.251]                   }
[17:39:27.251]                 }
[17:39:27.251]             }
[17:39:27.251]         }))
[17:39:27.251]     }, error = function(ex) {
[17:39:27.251]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.251]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.251]                 ...future.rng), started = ...future.startTime, 
[17:39:27.251]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.251]             version = "1.8"), class = "FutureResult")
[17:39:27.251]     }, finally = {
[17:39:27.251]         if (!identical(...future.workdir, getwd())) 
[17:39:27.251]             setwd(...future.workdir)
[17:39:27.251]         {
[17:39:27.251]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.251]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.251]             }
[17:39:27.251]             base::options(...future.oldOptions)
[17:39:27.251]             if (.Platform$OS.type == "windows") {
[17:39:27.251]                 old_names <- names(...future.oldEnvVars)
[17:39:27.251]                 envs <- base::Sys.getenv()
[17:39:27.251]                 names <- names(envs)
[17:39:27.251]                 common <- intersect(names, old_names)
[17:39:27.251]                 added <- setdiff(names, old_names)
[17:39:27.251]                 removed <- setdiff(old_names, names)
[17:39:27.251]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.251]                   envs[common]]
[17:39:27.251]                 NAMES <- toupper(changed)
[17:39:27.251]                 args <- list()
[17:39:27.251]                 for (kk in seq_along(NAMES)) {
[17:39:27.251]                   name <- changed[[kk]]
[17:39:27.251]                   NAME <- NAMES[[kk]]
[17:39:27.251]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.251]                     next
[17:39:27.251]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.251]                 }
[17:39:27.251]                 NAMES <- toupper(added)
[17:39:27.251]                 for (kk in seq_along(NAMES)) {
[17:39:27.251]                   name <- added[[kk]]
[17:39:27.251]                   NAME <- NAMES[[kk]]
[17:39:27.251]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.251]                     next
[17:39:27.251]                   args[[name]] <- ""
[17:39:27.251]                 }
[17:39:27.251]                 NAMES <- toupper(removed)
[17:39:27.251]                 for (kk in seq_along(NAMES)) {
[17:39:27.251]                   name <- removed[[kk]]
[17:39:27.251]                   NAME <- NAMES[[kk]]
[17:39:27.251]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.251]                     next
[17:39:27.251]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.251]                 }
[17:39:27.251]                 if (length(args) > 0) 
[17:39:27.251]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.251]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.251]             }
[17:39:27.251]             else {
[17:39:27.251]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.251]             }
[17:39:27.251]             {
[17:39:27.251]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.251]                   0L) {
[17:39:27.251]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.251]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.251]                   base::options(opts)
[17:39:27.251]                 }
[17:39:27.251]                 {
[17:39:27.251]                   {
[17:39:27.251]                     NULL
[17:39:27.251]                     RNGkind("Mersenne-Twister")
[17:39:27.251]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:27.251]                       inherits = FALSE)
[17:39:27.251]                   }
[17:39:27.251]                   options(future.plan = NULL)
[17:39:27.251]                   if (is.na(NA_character_)) 
[17:39:27.251]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.251]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.251]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.251]                     .init = FALSE)
[17:39:27.251]                 }
[17:39:27.251]             }
[17:39:27.251]         }
[17:39:27.251]     })
[17:39:27.251]     if (TRUE) {
[17:39:27.251]         base::sink(type = "output", split = FALSE)
[17:39:27.251]         if (TRUE) {
[17:39:27.251]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.251]         }
[17:39:27.251]         else {
[17:39:27.251]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.251]         }
[17:39:27.251]         base::close(...future.stdout)
[17:39:27.251]         ...future.stdout <- NULL
[17:39:27.251]     }
[17:39:27.251]     ...future.result$conditions <- ...future.conditions
[17:39:27.251]     ...future.result$finished <- base::Sys.time()
[17:39:27.251]     ...future.result
[17:39:27.251] }
[17:39:27.253] assign_globals() ...
[17:39:27.253] List of 1
[17:39:27.253]  $ a: num 1
[17:39:27.253]  - attr(*, "where")=List of 1
[17:39:27.253]   ..$ a:<environment: R_EmptyEnv> 
[17:39:27.253]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:27.253]  - attr(*, "resolved")= logi FALSE
[17:39:27.253]  - attr(*, "total_size")= num 56
[17:39:27.253]  - attr(*, "already-done")= logi TRUE
[17:39:27.255] - copied ‘a’ to environment
[17:39:27.255] assign_globals() ... done
[17:39:27.255] plan(): Setting new future strategy stack:
[17:39:27.255] List of future strategies:
[17:39:27.255] 1. sequential:
[17:39:27.255]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.255]    - tweaked: FALSE
[17:39:27.255]    - call: NULL
[17:39:27.256] plan(): nbrOfWorkers() = 1
[17:39:27.256] plan(): Setting new future strategy stack:
[17:39:27.257] List of future strategies:
[17:39:27.257] 1. sequential:
[17:39:27.257]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.257]    - tweaked: FALSE
[17:39:27.257]    - call: plan(strategy)
[17:39:27.257] plan(): nbrOfWorkers() = 1
[17:39:27.257] SequentialFuture started (and completed)
[17:39:27.257] - Launch lazy future ... done
[17:39:27.257] run() for ‘SequentialFuture’ ... done
[17:39:27.258] getGlobalsAndPackages() ...
[17:39:27.258] Searching for globals...
[17:39:27.258] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:27.259] Searching for globals ... DONE
[17:39:27.259] Resolving globals: FALSE
[17:39:27.259] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:27.259] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:27.259] - globals: [1] ‘a’
[17:39:27.260] 
[17:39:27.260] getGlobalsAndPackages() ... DONE
[17:39:27.260] run() for ‘Future’ ...
[17:39:27.260] - state: ‘created’
[17:39:27.260] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:27.260] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:27.260] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:27.261]   - Field: ‘label’
[17:39:27.261]   - Field: ‘local’
[17:39:27.261]   - Field: ‘owner’
[17:39:27.261]   - Field: ‘envir’
[17:39:27.261]   - Field: ‘packages’
[17:39:27.261]   - Field: ‘gc’
[17:39:27.261]   - Field: ‘conditions’
[17:39:27.261]   - Field: ‘expr’
[17:39:27.261]   - Field: ‘uuid’
[17:39:27.261]   - Field: ‘seed’
[17:39:27.261]   - Field: ‘version’
[17:39:27.262]   - Field: ‘result’
[17:39:27.262]   - Field: ‘asynchronous’
[17:39:27.262]   - Field: ‘calls’
[17:39:27.262]   - Field: ‘globals’
[17:39:27.262]   - Field: ‘stdout’
[17:39:27.262]   - Field: ‘earlySignal’
[17:39:27.262]   - Field: ‘lazy’
[17:39:27.262]   - Field: ‘state’
[17:39:27.262] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:27.262] - Launch lazy future ...
[17:39:27.263] Packages needed by the future expression (n = 0): <none>
[17:39:27.263] Packages needed by future strategies (n = 0): <none>
[17:39:27.264] {
[17:39:27.264]     {
[17:39:27.264]         {
[17:39:27.264]             ...future.startTime <- base::Sys.time()
[17:39:27.264]             {
[17:39:27.264]                 {
[17:39:27.264]                   {
[17:39:27.264]                     base::local({
[17:39:27.264]                       has_future <- base::requireNamespace("future", 
[17:39:27.264]                         quietly = TRUE)
[17:39:27.264]                       if (has_future) {
[17:39:27.264]                         ns <- base::getNamespace("future")
[17:39:27.264]                         version <- ns[[".package"]][["version"]]
[17:39:27.264]                         if (is.null(version)) 
[17:39:27.264]                           version <- utils::packageVersion("future")
[17:39:27.264]                       }
[17:39:27.264]                       else {
[17:39:27.264]                         version <- NULL
[17:39:27.264]                       }
[17:39:27.264]                       if (!has_future || version < "1.8.0") {
[17:39:27.264]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.264]                           "", base::R.version$version.string), 
[17:39:27.264]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:27.264]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.264]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.264]                             "release", "version")], collapse = " "), 
[17:39:27.264]                           hostname = base::Sys.info()[["nodename"]])
[17:39:27.264]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.264]                           info)
[17:39:27.264]                         info <- base::paste(info, collapse = "; ")
[17:39:27.264]                         if (!has_future) {
[17:39:27.264]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.264]                             info)
[17:39:27.264]                         }
[17:39:27.264]                         else {
[17:39:27.264]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.264]                             info, version)
[17:39:27.264]                         }
[17:39:27.264]                         base::stop(msg)
[17:39:27.264]                       }
[17:39:27.264]                     })
[17:39:27.264]                   }
[17:39:27.264]                   ...future.strategy.old <- future::plan("list")
[17:39:27.264]                   options(future.plan = NULL)
[17:39:27.264]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.264]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.264]                 }
[17:39:27.264]                 ...future.workdir <- getwd()
[17:39:27.264]             }
[17:39:27.264]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.264]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.264]         }
[17:39:27.264]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.264]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.264]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.264]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.264]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.264]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.264]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.264]             base::names(...future.oldOptions))
[17:39:27.264]     }
[17:39:27.264]     if (FALSE) {
[17:39:27.264]     }
[17:39:27.264]     else {
[17:39:27.264]         if (TRUE) {
[17:39:27.264]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.264]                 open = "w")
[17:39:27.264]         }
[17:39:27.264]         else {
[17:39:27.264]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.264]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.264]         }
[17:39:27.264]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.264]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.264]             base::sink(type = "output", split = FALSE)
[17:39:27.264]             base::close(...future.stdout)
[17:39:27.264]         }, add = TRUE)
[17:39:27.264]     }
[17:39:27.264]     ...future.frame <- base::sys.nframe()
[17:39:27.264]     ...future.conditions <- base::list()
[17:39:27.264]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.264]     if (FALSE) {
[17:39:27.264]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.264]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.264]     }
[17:39:27.264]     ...future.result <- base::tryCatch({
[17:39:27.264]         base::withCallingHandlers({
[17:39:27.264]             ...future.value <- base::withVisible(base::local({
[17:39:27.264]                 2 * a
[17:39:27.264]             }))
[17:39:27.264]             future::FutureResult(value = ...future.value$value, 
[17:39:27.264]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.264]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.264]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.264]                     ...future.globalenv.names))
[17:39:27.264]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.264]         }, condition = base::local({
[17:39:27.264]             c <- base::c
[17:39:27.264]             inherits <- base::inherits
[17:39:27.264]             invokeRestart <- base::invokeRestart
[17:39:27.264]             length <- base::length
[17:39:27.264]             list <- base::list
[17:39:27.264]             seq.int <- base::seq.int
[17:39:27.264]             signalCondition <- base::signalCondition
[17:39:27.264]             sys.calls <- base::sys.calls
[17:39:27.264]             `[[` <- base::`[[`
[17:39:27.264]             `+` <- base::`+`
[17:39:27.264]             `<<-` <- base::`<<-`
[17:39:27.264]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.264]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.264]                   3L)]
[17:39:27.264]             }
[17:39:27.264]             function(cond) {
[17:39:27.264]                 is_error <- inherits(cond, "error")
[17:39:27.264]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.264]                   NULL)
[17:39:27.264]                 if (is_error) {
[17:39:27.264]                   sessionInformation <- function() {
[17:39:27.264]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.264]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.264]                       search = base::search(), system = base::Sys.info())
[17:39:27.264]                   }
[17:39:27.264]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.264]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.264]                     cond$call), session = sessionInformation(), 
[17:39:27.264]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.264]                   signalCondition(cond)
[17:39:27.264]                 }
[17:39:27.264]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.264]                 "immediateCondition"))) {
[17:39:27.264]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.264]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.264]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.264]                   if (TRUE && !signal) {
[17:39:27.264]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.264]                     {
[17:39:27.264]                       inherits <- base::inherits
[17:39:27.264]                       invokeRestart <- base::invokeRestart
[17:39:27.264]                       is.null <- base::is.null
[17:39:27.264]                       muffled <- FALSE
[17:39:27.264]                       if (inherits(cond, "message")) {
[17:39:27.264]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.264]                         if (muffled) 
[17:39:27.264]                           invokeRestart("muffleMessage")
[17:39:27.264]                       }
[17:39:27.264]                       else if (inherits(cond, "warning")) {
[17:39:27.264]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.264]                         if (muffled) 
[17:39:27.264]                           invokeRestart("muffleWarning")
[17:39:27.264]                       }
[17:39:27.264]                       else if (inherits(cond, "condition")) {
[17:39:27.264]                         if (!is.null(pattern)) {
[17:39:27.264]                           computeRestarts <- base::computeRestarts
[17:39:27.264]                           grepl <- base::grepl
[17:39:27.264]                           restarts <- computeRestarts(cond)
[17:39:27.264]                           for (restart in restarts) {
[17:39:27.264]                             name <- restart$name
[17:39:27.264]                             if (is.null(name)) 
[17:39:27.264]                               next
[17:39:27.264]                             if (!grepl(pattern, name)) 
[17:39:27.264]                               next
[17:39:27.264]                             invokeRestart(restart)
[17:39:27.264]                             muffled <- TRUE
[17:39:27.264]                             break
[17:39:27.264]                           }
[17:39:27.264]                         }
[17:39:27.264]                       }
[17:39:27.264]                       invisible(muffled)
[17:39:27.264]                     }
[17:39:27.264]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.264]                   }
[17:39:27.264]                 }
[17:39:27.264]                 else {
[17:39:27.264]                   if (TRUE) {
[17:39:27.264]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.264]                     {
[17:39:27.264]                       inherits <- base::inherits
[17:39:27.264]                       invokeRestart <- base::invokeRestart
[17:39:27.264]                       is.null <- base::is.null
[17:39:27.264]                       muffled <- FALSE
[17:39:27.264]                       if (inherits(cond, "message")) {
[17:39:27.264]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.264]                         if (muffled) 
[17:39:27.264]                           invokeRestart("muffleMessage")
[17:39:27.264]                       }
[17:39:27.264]                       else if (inherits(cond, "warning")) {
[17:39:27.264]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.264]                         if (muffled) 
[17:39:27.264]                           invokeRestart("muffleWarning")
[17:39:27.264]                       }
[17:39:27.264]                       else if (inherits(cond, "condition")) {
[17:39:27.264]                         if (!is.null(pattern)) {
[17:39:27.264]                           computeRestarts <- base::computeRestarts
[17:39:27.264]                           grepl <- base::grepl
[17:39:27.264]                           restarts <- computeRestarts(cond)
[17:39:27.264]                           for (restart in restarts) {
[17:39:27.264]                             name <- restart$name
[17:39:27.264]                             if (is.null(name)) 
[17:39:27.264]                               next
[17:39:27.264]                             if (!grepl(pattern, name)) 
[17:39:27.264]                               next
[17:39:27.264]                             invokeRestart(restart)
[17:39:27.264]                             muffled <- TRUE
[17:39:27.264]                             break
[17:39:27.264]                           }
[17:39:27.264]                         }
[17:39:27.264]                       }
[17:39:27.264]                       invisible(muffled)
[17:39:27.264]                     }
[17:39:27.264]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.264]                   }
[17:39:27.264]                 }
[17:39:27.264]             }
[17:39:27.264]         }))
[17:39:27.264]     }, error = function(ex) {
[17:39:27.264]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.264]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.264]                 ...future.rng), started = ...future.startTime, 
[17:39:27.264]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.264]             version = "1.8"), class = "FutureResult")
[17:39:27.264]     }, finally = {
[17:39:27.264]         if (!identical(...future.workdir, getwd())) 
[17:39:27.264]             setwd(...future.workdir)
[17:39:27.264]         {
[17:39:27.264]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.264]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.264]             }
[17:39:27.264]             base::options(...future.oldOptions)
[17:39:27.264]             if (.Platform$OS.type == "windows") {
[17:39:27.264]                 old_names <- names(...future.oldEnvVars)
[17:39:27.264]                 envs <- base::Sys.getenv()
[17:39:27.264]                 names <- names(envs)
[17:39:27.264]                 common <- intersect(names, old_names)
[17:39:27.264]                 added <- setdiff(names, old_names)
[17:39:27.264]                 removed <- setdiff(old_names, names)
[17:39:27.264]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.264]                   envs[common]]
[17:39:27.264]                 NAMES <- toupper(changed)
[17:39:27.264]                 args <- list()
[17:39:27.264]                 for (kk in seq_along(NAMES)) {
[17:39:27.264]                   name <- changed[[kk]]
[17:39:27.264]                   NAME <- NAMES[[kk]]
[17:39:27.264]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.264]                     next
[17:39:27.264]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.264]                 }
[17:39:27.264]                 NAMES <- toupper(added)
[17:39:27.264]                 for (kk in seq_along(NAMES)) {
[17:39:27.264]                   name <- added[[kk]]
[17:39:27.264]                   NAME <- NAMES[[kk]]
[17:39:27.264]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.264]                     next
[17:39:27.264]                   args[[name]] <- ""
[17:39:27.264]                 }
[17:39:27.264]                 NAMES <- toupper(removed)
[17:39:27.264]                 for (kk in seq_along(NAMES)) {
[17:39:27.264]                   name <- removed[[kk]]
[17:39:27.264]                   NAME <- NAMES[[kk]]
[17:39:27.264]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.264]                     next
[17:39:27.264]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.264]                 }
[17:39:27.264]                 if (length(args) > 0) 
[17:39:27.264]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.264]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.264]             }
[17:39:27.264]             else {
[17:39:27.264]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.264]             }
[17:39:27.264]             {
[17:39:27.264]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.264]                   0L) {
[17:39:27.264]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.264]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.264]                   base::options(opts)
[17:39:27.264]                 }
[17:39:27.264]                 {
[17:39:27.264]                   {
[17:39:27.264]                     NULL
[17:39:27.264]                     RNGkind("Mersenne-Twister")
[17:39:27.264]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:27.264]                       inherits = FALSE)
[17:39:27.264]                   }
[17:39:27.264]                   options(future.plan = NULL)
[17:39:27.264]                   if (is.na(NA_character_)) 
[17:39:27.264]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.264]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.264]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.264]                     .init = FALSE)
[17:39:27.264]                 }
[17:39:27.264]             }
[17:39:27.264]         }
[17:39:27.264]     })
[17:39:27.264]     if (TRUE) {
[17:39:27.264]         base::sink(type = "output", split = FALSE)
[17:39:27.264]         if (TRUE) {
[17:39:27.264]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.264]         }
[17:39:27.264]         else {
[17:39:27.264]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.264]         }
[17:39:27.264]         base::close(...future.stdout)
[17:39:27.264]         ...future.stdout <- NULL
[17:39:27.264]     }
[17:39:27.264]     ...future.result$conditions <- ...future.conditions
[17:39:27.264]     ...future.result$finished <- base::Sys.time()
[17:39:27.264]     ...future.result
[17:39:27.264] }
[17:39:27.266] assign_globals() ...
[17:39:27.266] List of 1
[17:39:27.266]  $ a: num 1
[17:39:27.266]  - attr(*, "where")=List of 1
[17:39:27.266]   ..$ a:<environment: R_EmptyEnv> 
[17:39:27.266]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:27.266]  - attr(*, "resolved")= logi FALSE
[17:39:27.266]  - attr(*, "total_size")= num 56
[17:39:27.266]  - attr(*, "already-done")= logi TRUE
[17:39:27.268] - copied ‘a’ to environment
[17:39:27.269] assign_globals() ... done
[17:39:27.269] plan(): Setting new future strategy stack:
[17:39:27.269] List of future strategies:
[17:39:27.269] 1. sequential:
[17:39:27.269]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.269]    - tweaked: FALSE
[17:39:27.269]    - call: NULL
[17:39:27.269] plan(): nbrOfWorkers() = 1
[17:39:27.270] plan(): Setting new future strategy stack:
[17:39:27.270] List of future strategies:
[17:39:27.270] 1. sequential:
[17:39:27.270]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.270]    - tweaked: FALSE
[17:39:27.270]    - call: plan(strategy)
[17:39:27.271] plan(): nbrOfWorkers() = 1
[17:39:27.271] SequentialFuture started (and completed)
[17:39:27.271] - Launch lazy future ... done
[17:39:27.271] run() for ‘SequentialFuture’ ... done
[17:39:27.271] getGlobalsAndPackages() ...
[17:39:27.271] Searching for globals...
[17:39:27.272] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:27.272] Searching for globals ... DONE
[17:39:27.272] Resolving globals: FALSE
[17:39:27.273] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:27.273] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:27.273] - globals: [1] ‘a’
[17:39:27.273] 
[17:39:27.273] getGlobalsAndPackages() ... DONE
[17:39:27.273] run() for ‘Future’ ...
[17:39:27.273] - state: ‘created’
[17:39:27.274] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:27.274] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:27.274] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:27.274]   - Field: ‘label’
[17:39:27.274]   - Field: ‘local’
[17:39:27.274]   - Field: ‘owner’
[17:39:27.274]   - Field: ‘envir’
[17:39:27.274]   - Field: ‘packages’
[17:39:27.275]   - Field: ‘gc’
[17:39:27.275]   - Field: ‘conditions’
[17:39:27.275]   - Field: ‘expr’
[17:39:27.275]   - Field: ‘uuid’
[17:39:27.275]   - Field: ‘seed’
[17:39:27.275]   - Field: ‘version’
[17:39:27.275]   - Field: ‘result’
[17:39:27.275]   - Field: ‘asynchronous’
[17:39:27.275]   - Field: ‘calls’
[17:39:27.275]   - Field: ‘globals’
[17:39:27.276]   - Field: ‘stdout’
[17:39:27.276]   - Field: ‘earlySignal’
[17:39:27.276]   - Field: ‘lazy’
[17:39:27.276]   - Field: ‘state’
[17:39:27.276] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:27.276] - Launch lazy future ...
[17:39:27.276] Packages needed by the future expression (n = 0): <none>
[17:39:27.276] Packages needed by future strategies (n = 0): <none>
[17:39:27.277] {
[17:39:27.277]     {
[17:39:27.277]         {
[17:39:27.277]             ...future.startTime <- base::Sys.time()
[17:39:27.277]             {
[17:39:27.277]                 {
[17:39:27.277]                   {
[17:39:27.277]                     base::local({
[17:39:27.277]                       has_future <- base::requireNamespace("future", 
[17:39:27.277]                         quietly = TRUE)
[17:39:27.277]                       if (has_future) {
[17:39:27.277]                         ns <- base::getNamespace("future")
[17:39:27.277]                         version <- ns[[".package"]][["version"]]
[17:39:27.277]                         if (is.null(version)) 
[17:39:27.277]                           version <- utils::packageVersion("future")
[17:39:27.277]                       }
[17:39:27.277]                       else {
[17:39:27.277]                         version <- NULL
[17:39:27.277]                       }
[17:39:27.277]                       if (!has_future || version < "1.8.0") {
[17:39:27.277]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.277]                           "", base::R.version$version.string), 
[17:39:27.277]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:27.277]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.277]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.277]                             "release", "version")], collapse = " "), 
[17:39:27.277]                           hostname = base::Sys.info()[["nodename"]])
[17:39:27.277]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.277]                           info)
[17:39:27.277]                         info <- base::paste(info, collapse = "; ")
[17:39:27.277]                         if (!has_future) {
[17:39:27.277]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.277]                             info)
[17:39:27.277]                         }
[17:39:27.277]                         else {
[17:39:27.277]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.277]                             info, version)
[17:39:27.277]                         }
[17:39:27.277]                         base::stop(msg)
[17:39:27.277]                       }
[17:39:27.277]                     })
[17:39:27.277]                   }
[17:39:27.277]                   ...future.strategy.old <- future::plan("list")
[17:39:27.277]                   options(future.plan = NULL)
[17:39:27.277]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.277]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.277]                 }
[17:39:27.277]                 ...future.workdir <- getwd()
[17:39:27.277]             }
[17:39:27.277]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.277]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.277]         }
[17:39:27.277]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.277]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.277]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.277]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.277]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.277]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.277]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.277]             base::names(...future.oldOptions))
[17:39:27.277]     }
[17:39:27.277]     if (FALSE) {
[17:39:27.277]     }
[17:39:27.277]     else {
[17:39:27.277]         if (TRUE) {
[17:39:27.277]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.277]                 open = "w")
[17:39:27.277]         }
[17:39:27.277]         else {
[17:39:27.277]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.277]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.277]         }
[17:39:27.277]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.277]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.277]             base::sink(type = "output", split = FALSE)
[17:39:27.277]             base::close(...future.stdout)
[17:39:27.277]         }, add = TRUE)
[17:39:27.277]     }
[17:39:27.277]     ...future.frame <- base::sys.nframe()
[17:39:27.277]     ...future.conditions <- base::list()
[17:39:27.277]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.277]     if (FALSE) {
[17:39:27.277]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.277]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.277]     }
[17:39:27.277]     ...future.result <- base::tryCatch({
[17:39:27.277]         base::withCallingHandlers({
[17:39:27.277]             ...future.value <- base::withVisible(base::local({
[17:39:27.277]                 2 * a
[17:39:27.277]             }))
[17:39:27.277]             future::FutureResult(value = ...future.value$value, 
[17:39:27.277]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.277]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.277]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.277]                     ...future.globalenv.names))
[17:39:27.277]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.277]         }, condition = base::local({
[17:39:27.277]             c <- base::c
[17:39:27.277]             inherits <- base::inherits
[17:39:27.277]             invokeRestart <- base::invokeRestart
[17:39:27.277]             length <- base::length
[17:39:27.277]             list <- base::list
[17:39:27.277]             seq.int <- base::seq.int
[17:39:27.277]             signalCondition <- base::signalCondition
[17:39:27.277]             sys.calls <- base::sys.calls
[17:39:27.277]             `[[` <- base::`[[`
[17:39:27.277]             `+` <- base::`+`
[17:39:27.277]             `<<-` <- base::`<<-`
[17:39:27.277]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.277]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.277]                   3L)]
[17:39:27.277]             }
[17:39:27.277]             function(cond) {
[17:39:27.277]                 is_error <- inherits(cond, "error")
[17:39:27.277]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.277]                   NULL)
[17:39:27.277]                 if (is_error) {
[17:39:27.277]                   sessionInformation <- function() {
[17:39:27.277]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.277]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.277]                       search = base::search(), system = base::Sys.info())
[17:39:27.277]                   }
[17:39:27.277]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.277]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.277]                     cond$call), session = sessionInformation(), 
[17:39:27.277]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.277]                   signalCondition(cond)
[17:39:27.277]                 }
[17:39:27.277]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.277]                 "immediateCondition"))) {
[17:39:27.277]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.277]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.277]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.277]                   if (TRUE && !signal) {
[17:39:27.277]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.277]                     {
[17:39:27.277]                       inherits <- base::inherits
[17:39:27.277]                       invokeRestart <- base::invokeRestart
[17:39:27.277]                       is.null <- base::is.null
[17:39:27.277]                       muffled <- FALSE
[17:39:27.277]                       if (inherits(cond, "message")) {
[17:39:27.277]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.277]                         if (muffled) 
[17:39:27.277]                           invokeRestart("muffleMessage")
[17:39:27.277]                       }
[17:39:27.277]                       else if (inherits(cond, "warning")) {
[17:39:27.277]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.277]                         if (muffled) 
[17:39:27.277]                           invokeRestart("muffleWarning")
[17:39:27.277]                       }
[17:39:27.277]                       else if (inherits(cond, "condition")) {
[17:39:27.277]                         if (!is.null(pattern)) {
[17:39:27.277]                           computeRestarts <- base::computeRestarts
[17:39:27.277]                           grepl <- base::grepl
[17:39:27.277]                           restarts <- computeRestarts(cond)
[17:39:27.277]                           for (restart in restarts) {
[17:39:27.277]                             name <- restart$name
[17:39:27.277]                             if (is.null(name)) 
[17:39:27.277]                               next
[17:39:27.277]                             if (!grepl(pattern, name)) 
[17:39:27.277]                               next
[17:39:27.277]                             invokeRestart(restart)
[17:39:27.277]                             muffled <- TRUE
[17:39:27.277]                             break
[17:39:27.277]                           }
[17:39:27.277]                         }
[17:39:27.277]                       }
[17:39:27.277]                       invisible(muffled)
[17:39:27.277]                     }
[17:39:27.277]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.277]                   }
[17:39:27.277]                 }
[17:39:27.277]                 else {
[17:39:27.277]                   if (TRUE) {
[17:39:27.277]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.277]                     {
[17:39:27.277]                       inherits <- base::inherits
[17:39:27.277]                       invokeRestart <- base::invokeRestart
[17:39:27.277]                       is.null <- base::is.null
[17:39:27.277]                       muffled <- FALSE
[17:39:27.277]                       if (inherits(cond, "message")) {
[17:39:27.277]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.277]                         if (muffled) 
[17:39:27.277]                           invokeRestart("muffleMessage")
[17:39:27.277]                       }
[17:39:27.277]                       else if (inherits(cond, "warning")) {
[17:39:27.277]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.277]                         if (muffled) 
[17:39:27.277]                           invokeRestart("muffleWarning")
[17:39:27.277]                       }
[17:39:27.277]                       else if (inherits(cond, "condition")) {
[17:39:27.277]                         if (!is.null(pattern)) {
[17:39:27.277]                           computeRestarts <- base::computeRestarts
[17:39:27.277]                           grepl <- base::grepl
[17:39:27.277]                           restarts <- computeRestarts(cond)
[17:39:27.277]                           for (restart in restarts) {
[17:39:27.277]                             name <- restart$name
[17:39:27.277]                             if (is.null(name)) 
[17:39:27.277]                               next
[17:39:27.277]                             if (!grepl(pattern, name)) 
[17:39:27.277]                               next
[17:39:27.277]                             invokeRestart(restart)
[17:39:27.277]                             muffled <- TRUE
[17:39:27.277]                             break
[17:39:27.277]                           }
[17:39:27.277]                         }
[17:39:27.277]                       }
[17:39:27.277]                       invisible(muffled)
[17:39:27.277]                     }
[17:39:27.277]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.277]                   }
[17:39:27.277]                 }
[17:39:27.277]             }
[17:39:27.277]         }))
[17:39:27.277]     }, error = function(ex) {
[17:39:27.277]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.277]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.277]                 ...future.rng), started = ...future.startTime, 
[17:39:27.277]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.277]             version = "1.8"), class = "FutureResult")
[17:39:27.277]     }, finally = {
[17:39:27.277]         if (!identical(...future.workdir, getwd())) 
[17:39:27.277]             setwd(...future.workdir)
[17:39:27.277]         {
[17:39:27.277]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.277]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.277]             }
[17:39:27.277]             base::options(...future.oldOptions)
[17:39:27.277]             if (.Platform$OS.type == "windows") {
[17:39:27.277]                 old_names <- names(...future.oldEnvVars)
[17:39:27.277]                 envs <- base::Sys.getenv()
[17:39:27.277]                 names <- names(envs)
[17:39:27.277]                 common <- intersect(names, old_names)
[17:39:27.277]                 added <- setdiff(names, old_names)
[17:39:27.277]                 removed <- setdiff(old_names, names)
[17:39:27.277]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.277]                   envs[common]]
[17:39:27.277]                 NAMES <- toupper(changed)
[17:39:27.277]                 args <- list()
[17:39:27.277]                 for (kk in seq_along(NAMES)) {
[17:39:27.277]                   name <- changed[[kk]]
[17:39:27.277]                   NAME <- NAMES[[kk]]
[17:39:27.277]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.277]                     next
[17:39:27.277]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.277]                 }
[17:39:27.277]                 NAMES <- toupper(added)
[17:39:27.277]                 for (kk in seq_along(NAMES)) {
[17:39:27.277]                   name <- added[[kk]]
[17:39:27.277]                   NAME <- NAMES[[kk]]
[17:39:27.277]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.277]                     next
[17:39:27.277]                   args[[name]] <- ""
[17:39:27.277]                 }
[17:39:27.277]                 NAMES <- toupper(removed)
[17:39:27.277]                 for (kk in seq_along(NAMES)) {
[17:39:27.277]                   name <- removed[[kk]]
[17:39:27.277]                   NAME <- NAMES[[kk]]
[17:39:27.277]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.277]                     next
[17:39:27.277]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.277]                 }
[17:39:27.277]                 if (length(args) > 0) 
[17:39:27.277]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.277]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.277]             }
[17:39:27.277]             else {
[17:39:27.277]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.277]             }
[17:39:27.277]             {
[17:39:27.277]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.277]                   0L) {
[17:39:27.277]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.277]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.277]                   base::options(opts)
[17:39:27.277]                 }
[17:39:27.277]                 {
[17:39:27.277]                   {
[17:39:27.277]                     NULL
[17:39:27.277]                     RNGkind("Mersenne-Twister")
[17:39:27.277]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:27.277]                       inherits = FALSE)
[17:39:27.277]                   }
[17:39:27.277]                   options(future.plan = NULL)
[17:39:27.277]                   if (is.na(NA_character_)) 
[17:39:27.277]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.277]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.277]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.277]                     .init = FALSE)
[17:39:27.277]                 }
[17:39:27.277]             }
[17:39:27.277]         }
[17:39:27.277]     })
[17:39:27.277]     if (TRUE) {
[17:39:27.277]         base::sink(type = "output", split = FALSE)
[17:39:27.277]         if (TRUE) {
[17:39:27.277]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.277]         }
[17:39:27.277]         else {
[17:39:27.277]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.277]         }
[17:39:27.277]         base::close(...future.stdout)
[17:39:27.277]         ...future.stdout <- NULL
[17:39:27.277]     }
[17:39:27.277]     ...future.result$conditions <- ...future.conditions
[17:39:27.277]     ...future.result$finished <- base::Sys.time()
[17:39:27.277]     ...future.result
[17:39:27.277] }
[17:39:27.278] assign_globals() ...
[17:39:27.278] List of 1
[17:39:27.278]  $ a: num 1
[17:39:27.278]  - attr(*, "where")=List of 1
[17:39:27.278]   ..$ a:<environment: R_EmptyEnv> 
[17:39:27.278]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:27.278]  - attr(*, "resolved")= logi FALSE
[17:39:27.278]  - attr(*, "total_size")= num 56
[17:39:27.278]  - attr(*, "already-done")= logi TRUE
[17:39:27.281] - copied ‘a’ to environment
[17:39:27.281] assign_globals() ... done
[17:39:27.281] plan(): Setting new future strategy stack:
[17:39:27.281] List of future strategies:
[17:39:27.281] 1. sequential:
[17:39:27.281]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.281]    - tweaked: FALSE
[17:39:27.281]    - call: NULL
[17:39:27.281] plan(): nbrOfWorkers() = 1
[17:39:27.282] plan(): Setting new future strategy stack:
[17:39:27.282] List of future strategies:
[17:39:27.282] 1. sequential:
[17:39:27.282]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.282]    - tweaked: FALSE
[17:39:27.282]    - call: plan(strategy)
[17:39:27.283] plan(): nbrOfWorkers() = 1
[17:39:27.283] SequentialFuture started (and completed)
[17:39:27.283] - Launch lazy future ... done
[17:39:27.283] run() for ‘SequentialFuture’ ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[17:39:27.288] plan(): Setting new future strategy stack:
[17:39:27.288] List of future strategies:
[17:39:27.288] 1. multicore:
[17:39:27.288]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:27.288]    - tweaked: FALSE
[17:39:27.288]    - call: plan(strategy)
[17:39:27.292] plan(): nbrOfWorkers() = 2
[17:39:27.293] getGlobalsAndPackages() ...
[17:39:27.293] Searching for globals...
[17:39:27.293] - globals found: [1] ‘{’
[17:39:27.294] Searching for globals ... DONE
[17:39:27.294] Resolving globals: FALSE
[17:39:27.294] 
[17:39:27.294] 
[17:39:27.294] getGlobalsAndPackages() ... DONE
[17:39:27.294] run() for ‘Future’ ...
[17:39:27.295] - state: ‘created’
[17:39:27.295] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:27.300] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:27.300] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:27.300]   - Field: ‘label’
[17:39:27.300]   - Field: ‘local’
[17:39:27.300]   - Field: ‘owner’
[17:39:27.300]   - Field: ‘envir’
[17:39:27.301]   - Field: ‘workers’
[17:39:27.301]   - Field: ‘packages’
[17:39:27.301]   - Field: ‘gc’
[17:39:27.301]   - Field: ‘job’
[17:39:27.301]   - Field: ‘conditions’
[17:39:27.301]   - Field: ‘expr’
[17:39:27.301]   - Field: ‘uuid’
[17:39:27.301]   - Field: ‘seed’
[17:39:27.301]   - Field: ‘version’
[17:39:27.301]   - Field: ‘result’
[17:39:27.302]   - Field: ‘asynchronous’
[17:39:27.302]   - Field: ‘calls’
[17:39:27.302]   - Field: ‘globals’
[17:39:27.302]   - Field: ‘stdout’
[17:39:27.302]   - Field: ‘earlySignal’
[17:39:27.302]   - Field: ‘lazy’
[17:39:27.302]   - Field: ‘state’
[17:39:27.302] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:27.302] - Launch lazy future ...
[17:39:27.303] Packages needed by the future expression (n = 0): <none>
[17:39:27.303] Packages needed by future strategies (n = 0): <none>
[17:39:27.304] {
[17:39:27.304]     {
[17:39:27.304]         {
[17:39:27.304]             ...future.startTime <- base::Sys.time()
[17:39:27.304]             {
[17:39:27.304]                 {
[17:39:27.304]                   {
[17:39:27.304]                     {
[17:39:27.304]                       base::local({
[17:39:27.304]                         has_future <- base::requireNamespace("future", 
[17:39:27.304]                           quietly = TRUE)
[17:39:27.304]                         if (has_future) {
[17:39:27.304]                           ns <- base::getNamespace("future")
[17:39:27.304]                           version <- ns[[".package"]][["version"]]
[17:39:27.304]                           if (is.null(version)) 
[17:39:27.304]                             version <- utils::packageVersion("future")
[17:39:27.304]                         }
[17:39:27.304]                         else {
[17:39:27.304]                           version <- NULL
[17:39:27.304]                         }
[17:39:27.304]                         if (!has_future || version < "1.8.0") {
[17:39:27.304]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.304]                             "", base::R.version$version.string), 
[17:39:27.304]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:27.304]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.304]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.304]                               "release", "version")], collapse = " "), 
[17:39:27.304]                             hostname = base::Sys.info()[["nodename"]])
[17:39:27.304]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.304]                             info)
[17:39:27.304]                           info <- base::paste(info, collapse = "; ")
[17:39:27.304]                           if (!has_future) {
[17:39:27.304]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.304]                               info)
[17:39:27.304]                           }
[17:39:27.304]                           else {
[17:39:27.304]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.304]                               info, version)
[17:39:27.304]                           }
[17:39:27.304]                           base::stop(msg)
[17:39:27.304]                         }
[17:39:27.304]                       })
[17:39:27.304]                     }
[17:39:27.304]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:27.304]                     base::options(mc.cores = 1L)
[17:39:27.304]                   }
[17:39:27.304]                   ...future.strategy.old <- future::plan("list")
[17:39:27.304]                   options(future.plan = NULL)
[17:39:27.304]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.304]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.304]                 }
[17:39:27.304]                 ...future.workdir <- getwd()
[17:39:27.304]             }
[17:39:27.304]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.304]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.304]         }
[17:39:27.304]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.304]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.304]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.304]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.304]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.304]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.304]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.304]             base::names(...future.oldOptions))
[17:39:27.304]     }
[17:39:27.304]     if (FALSE) {
[17:39:27.304]     }
[17:39:27.304]     else {
[17:39:27.304]         if (TRUE) {
[17:39:27.304]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.304]                 open = "w")
[17:39:27.304]         }
[17:39:27.304]         else {
[17:39:27.304]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.304]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.304]         }
[17:39:27.304]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.304]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.304]             base::sink(type = "output", split = FALSE)
[17:39:27.304]             base::close(...future.stdout)
[17:39:27.304]         }, add = TRUE)
[17:39:27.304]     }
[17:39:27.304]     ...future.frame <- base::sys.nframe()
[17:39:27.304]     ...future.conditions <- base::list()
[17:39:27.304]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.304]     if (FALSE) {
[17:39:27.304]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.304]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.304]     }
[17:39:27.304]     ...future.result <- base::tryCatch({
[17:39:27.304]         base::withCallingHandlers({
[17:39:27.304]             ...future.value <- base::withVisible(base::local({
[17:39:27.304]                 withCallingHandlers({
[17:39:27.304]                   {
[17:39:27.304]                     2
[17:39:27.304]                   }
[17:39:27.304]                 }, immediateCondition = function(cond) {
[17:39:27.304]                   save_rds <- function (object, pathname, ...) 
[17:39:27.304]                   {
[17:39:27.304]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:27.304]                     if (file_test("-f", pathname_tmp)) {
[17:39:27.304]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.304]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:27.304]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.304]                         fi_tmp[["mtime"]])
[17:39:27.304]                     }
[17:39:27.304]                     tryCatch({
[17:39:27.304]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:27.304]                     }, error = function(ex) {
[17:39:27.304]                       msg <- conditionMessage(ex)
[17:39:27.304]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.304]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:27.304]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.304]                         fi_tmp[["mtime"]], msg)
[17:39:27.304]                       ex$message <- msg
[17:39:27.304]                       stop(ex)
[17:39:27.304]                     })
[17:39:27.304]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:27.304]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:27.304]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:27.304]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.304]                       fi <- file.info(pathname)
[17:39:27.304]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:27.304]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.304]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:27.304]                         fi[["size"]], fi[["mtime"]])
[17:39:27.304]                       stop(msg)
[17:39:27.304]                     }
[17:39:27.304]                     invisible(pathname)
[17:39:27.304]                   }
[17:39:27.304]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:27.304]                     rootPath = tempdir()) 
[17:39:27.304]                   {
[17:39:27.304]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:27.304]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:27.304]                       tmpdir = path, fileext = ".rds")
[17:39:27.304]                     save_rds(obj, file)
[17:39:27.304]                   }
[17:39:27.304]                   saveImmediateCondition(cond, path = "/tmp/RtmpuISvVj/.future/immediateConditions")
[17:39:27.304]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.304]                   {
[17:39:27.304]                     inherits <- base::inherits
[17:39:27.304]                     invokeRestart <- base::invokeRestart
[17:39:27.304]                     is.null <- base::is.null
[17:39:27.304]                     muffled <- FALSE
[17:39:27.304]                     if (inherits(cond, "message")) {
[17:39:27.304]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:27.304]                       if (muffled) 
[17:39:27.304]                         invokeRestart("muffleMessage")
[17:39:27.304]                     }
[17:39:27.304]                     else if (inherits(cond, "warning")) {
[17:39:27.304]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:27.304]                       if (muffled) 
[17:39:27.304]                         invokeRestart("muffleWarning")
[17:39:27.304]                     }
[17:39:27.304]                     else if (inherits(cond, "condition")) {
[17:39:27.304]                       if (!is.null(pattern)) {
[17:39:27.304]                         computeRestarts <- base::computeRestarts
[17:39:27.304]                         grepl <- base::grepl
[17:39:27.304]                         restarts <- computeRestarts(cond)
[17:39:27.304]                         for (restart in restarts) {
[17:39:27.304]                           name <- restart$name
[17:39:27.304]                           if (is.null(name)) 
[17:39:27.304]                             next
[17:39:27.304]                           if (!grepl(pattern, name)) 
[17:39:27.304]                             next
[17:39:27.304]                           invokeRestart(restart)
[17:39:27.304]                           muffled <- TRUE
[17:39:27.304]                           break
[17:39:27.304]                         }
[17:39:27.304]                       }
[17:39:27.304]                     }
[17:39:27.304]                     invisible(muffled)
[17:39:27.304]                   }
[17:39:27.304]                   muffleCondition(cond)
[17:39:27.304]                 })
[17:39:27.304]             }))
[17:39:27.304]             future::FutureResult(value = ...future.value$value, 
[17:39:27.304]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.304]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.304]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.304]                     ...future.globalenv.names))
[17:39:27.304]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.304]         }, condition = base::local({
[17:39:27.304]             c <- base::c
[17:39:27.304]             inherits <- base::inherits
[17:39:27.304]             invokeRestart <- base::invokeRestart
[17:39:27.304]             length <- base::length
[17:39:27.304]             list <- base::list
[17:39:27.304]             seq.int <- base::seq.int
[17:39:27.304]             signalCondition <- base::signalCondition
[17:39:27.304]             sys.calls <- base::sys.calls
[17:39:27.304]             `[[` <- base::`[[`
[17:39:27.304]             `+` <- base::`+`
[17:39:27.304]             `<<-` <- base::`<<-`
[17:39:27.304]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.304]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.304]                   3L)]
[17:39:27.304]             }
[17:39:27.304]             function(cond) {
[17:39:27.304]                 is_error <- inherits(cond, "error")
[17:39:27.304]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.304]                   NULL)
[17:39:27.304]                 if (is_error) {
[17:39:27.304]                   sessionInformation <- function() {
[17:39:27.304]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.304]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.304]                       search = base::search(), system = base::Sys.info())
[17:39:27.304]                   }
[17:39:27.304]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.304]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.304]                     cond$call), session = sessionInformation(), 
[17:39:27.304]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.304]                   signalCondition(cond)
[17:39:27.304]                 }
[17:39:27.304]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.304]                 "immediateCondition"))) {
[17:39:27.304]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.304]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.304]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.304]                   if (TRUE && !signal) {
[17:39:27.304]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.304]                     {
[17:39:27.304]                       inherits <- base::inherits
[17:39:27.304]                       invokeRestart <- base::invokeRestart
[17:39:27.304]                       is.null <- base::is.null
[17:39:27.304]                       muffled <- FALSE
[17:39:27.304]                       if (inherits(cond, "message")) {
[17:39:27.304]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.304]                         if (muffled) 
[17:39:27.304]                           invokeRestart("muffleMessage")
[17:39:27.304]                       }
[17:39:27.304]                       else if (inherits(cond, "warning")) {
[17:39:27.304]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.304]                         if (muffled) 
[17:39:27.304]                           invokeRestart("muffleWarning")
[17:39:27.304]                       }
[17:39:27.304]                       else if (inherits(cond, "condition")) {
[17:39:27.304]                         if (!is.null(pattern)) {
[17:39:27.304]                           computeRestarts <- base::computeRestarts
[17:39:27.304]                           grepl <- base::grepl
[17:39:27.304]                           restarts <- computeRestarts(cond)
[17:39:27.304]                           for (restart in restarts) {
[17:39:27.304]                             name <- restart$name
[17:39:27.304]                             if (is.null(name)) 
[17:39:27.304]                               next
[17:39:27.304]                             if (!grepl(pattern, name)) 
[17:39:27.304]                               next
[17:39:27.304]                             invokeRestart(restart)
[17:39:27.304]                             muffled <- TRUE
[17:39:27.304]                             break
[17:39:27.304]                           }
[17:39:27.304]                         }
[17:39:27.304]                       }
[17:39:27.304]                       invisible(muffled)
[17:39:27.304]                     }
[17:39:27.304]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.304]                   }
[17:39:27.304]                 }
[17:39:27.304]                 else {
[17:39:27.304]                   if (TRUE) {
[17:39:27.304]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.304]                     {
[17:39:27.304]                       inherits <- base::inherits
[17:39:27.304]                       invokeRestart <- base::invokeRestart
[17:39:27.304]                       is.null <- base::is.null
[17:39:27.304]                       muffled <- FALSE
[17:39:27.304]                       if (inherits(cond, "message")) {
[17:39:27.304]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.304]                         if (muffled) 
[17:39:27.304]                           invokeRestart("muffleMessage")
[17:39:27.304]                       }
[17:39:27.304]                       else if (inherits(cond, "warning")) {
[17:39:27.304]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.304]                         if (muffled) 
[17:39:27.304]                           invokeRestart("muffleWarning")
[17:39:27.304]                       }
[17:39:27.304]                       else if (inherits(cond, "condition")) {
[17:39:27.304]                         if (!is.null(pattern)) {
[17:39:27.304]                           computeRestarts <- base::computeRestarts
[17:39:27.304]                           grepl <- base::grepl
[17:39:27.304]                           restarts <- computeRestarts(cond)
[17:39:27.304]                           for (restart in restarts) {
[17:39:27.304]                             name <- restart$name
[17:39:27.304]                             if (is.null(name)) 
[17:39:27.304]                               next
[17:39:27.304]                             if (!grepl(pattern, name)) 
[17:39:27.304]                               next
[17:39:27.304]                             invokeRestart(restart)
[17:39:27.304]                             muffled <- TRUE
[17:39:27.304]                             break
[17:39:27.304]                           }
[17:39:27.304]                         }
[17:39:27.304]                       }
[17:39:27.304]                       invisible(muffled)
[17:39:27.304]                     }
[17:39:27.304]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.304]                   }
[17:39:27.304]                 }
[17:39:27.304]             }
[17:39:27.304]         }))
[17:39:27.304]     }, error = function(ex) {
[17:39:27.304]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.304]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.304]                 ...future.rng), started = ...future.startTime, 
[17:39:27.304]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.304]             version = "1.8"), class = "FutureResult")
[17:39:27.304]     }, finally = {
[17:39:27.304]         if (!identical(...future.workdir, getwd())) 
[17:39:27.304]             setwd(...future.workdir)
[17:39:27.304]         {
[17:39:27.304]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.304]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.304]             }
[17:39:27.304]             base::options(...future.oldOptions)
[17:39:27.304]             if (.Platform$OS.type == "windows") {
[17:39:27.304]                 old_names <- names(...future.oldEnvVars)
[17:39:27.304]                 envs <- base::Sys.getenv()
[17:39:27.304]                 names <- names(envs)
[17:39:27.304]                 common <- intersect(names, old_names)
[17:39:27.304]                 added <- setdiff(names, old_names)
[17:39:27.304]                 removed <- setdiff(old_names, names)
[17:39:27.304]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.304]                   envs[common]]
[17:39:27.304]                 NAMES <- toupper(changed)
[17:39:27.304]                 args <- list()
[17:39:27.304]                 for (kk in seq_along(NAMES)) {
[17:39:27.304]                   name <- changed[[kk]]
[17:39:27.304]                   NAME <- NAMES[[kk]]
[17:39:27.304]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.304]                     next
[17:39:27.304]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.304]                 }
[17:39:27.304]                 NAMES <- toupper(added)
[17:39:27.304]                 for (kk in seq_along(NAMES)) {
[17:39:27.304]                   name <- added[[kk]]
[17:39:27.304]                   NAME <- NAMES[[kk]]
[17:39:27.304]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.304]                     next
[17:39:27.304]                   args[[name]] <- ""
[17:39:27.304]                 }
[17:39:27.304]                 NAMES <- toupper(removed)
[17:39:27.304]                 for (kk in seq_along(NAMES)) {
[17:39:27.304]                   name <- removed[[kk]]
[17:39:27.304]                   NAME <- NAMES[[kk]]
[17:39:27.304]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.304]                     next
[17:39:27.304]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.304]                 }
[17:39:27.304]                 if (length(args) > 0) 
[17:39:27.304]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.304]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.304]             }
[17:39:27.304]             else {
[17:39:27.304]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.304]             }
[17:39:27.304]             {
[17:39:27.304]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.304]                   0L) {
[17:39:27.304]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.304]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.304]                   base::options(opts)
[17:39:27.304]                 }
[17:39:27.304]                 {
[17:39:27.304]                   {
[17:39:27.304]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:27.304]                     NULL
[17:39:27.304]                   }
[17:39:27.304]                   options(future.plan = NULL)
[17:39:27.304]                   if (is.na(NA_character_)) 
[17:39:27.304]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.304]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.304]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.304]                     .init = FALSE)
[17:39:27.304]                 }
[17:39:27.304]             }
[17:39:27.304]         }
[17:39:27.304]     })
[17:39:27.304]     if (TRUE) {
[17:39:27.304]         base::sink(type = "output", split = FALSE)
[17:39:27.304]         if (TRUE) {
[17:39:27.304]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.304]         }
[17:39:27.304]         else {
[17:39:27.304]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.304]         }
[17:39:27.304]         base::close(...future.stdout)
[17:39:27.304]         ...future.stdout <- NULL
[17:39:27.304]     }
[17:39:27.304]     ...future.result$conditions <- ...future.conditions
[17:39:27.304]     ...future.result$finished <- base::Sys.time()
[17:39:27.304]     ...future.result
[17:39:27.304] }
[17:39:27.306] requestCore(): workers = 2
[17:39:27.309] MulticoreFuture started
[17:39:27.309] - Launch lazy future ... done
[17:39:27.310] run() for ‘MulticoreFuture’ ... done
[17:39:27.310] plan(): Setting new future strategy stack:
[17:39:27.310] getGlobalsAndPackages() ...
[17:39:27.310] Searching for globals...
[17:39:27.310] List of future strategies:
[17:39:27.310] 1. sequential:
[17:39:27.310]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.310]    - tweaked: FALSE
[17:39:27.310]    - call: NULL
[17:39:27.311] plan(): nbrOfWorkers() = 1
[17:39:27.312] - globals found: [1] ‘{’
[17:39:27.313] Searching for globals ... DONE
[17:39:27.313] Resolving globals: FALSE
[17:39:27.313] plan(): Setting new future strategy stack:
[17:39:27.313] List of future strategies:
[17:39:27.313] 1. multicore:
[17:39:27.313]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:27.313]    - tweaked: FALSE
[17:39:27.313]    - call: plan(strategy)
[17:39:27.313] 
[17:39:27.314] 
[17:39:27.314] getGlobalsAndPackages() ... DONE
[17:39:27.314] run() for ‘Future’ ...
[17:39:27.314] - state: ‘created’
[17:39:27.315] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:27.318] plan(): nbrOfWorkers() = 2
[17:39:27.319] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:27.319] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:27.320]   - Field: ‘label’
[17:39:27.320]   - Field: ‘local’
[17:39:27.320]   - Field: ‘owner’
[17:39:27.320]   - Field: ‘envir’
[17:39:27.320]   - Field: ‘workers’
[17:39:27.320]   - Field: ‘packages’
[17:39:27.321]   - Field: ‘gc’
[17:39:27.321]   - Field: ‘job’
[17:39:27.321]   - Field: ‘conditions’
[17:39:27.321]   - Field: ‘expr’
[17:39:27.321]   - Field: ‘uuid’
[17:39:27.321]   - Field: ‘seed’
[17:39:27.321]   - Field: ‘version’
[17:39:27.322]   - Field: ‘result’
[17:39:27.322]   - Field: ‘asynchronous’
[17:39:27.322]   - Field: ‘calls’
[17:39:27.322]   - Field: ‘globals’
[17:39:27.322]   - Field: ‘stdout’
[17:39:27.322]   - Field: ‘earlySignal’
[17:39:27.322]   - Field: ‘lazy’
[17:39:27.323]   - Field: ‘state’
[17:39:27.323] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:27.323] - Launch lazy future ...
[17:39:27.323] Packages needed by the future expression (n = 0): <none>
[17:39:27.323] Packages needed by future strategies (n = 0): <none>
[17:39:27.324] {
[17:39:27.324]     {
[17:39:27.324]         {
[17:39:27.324]             ...future.startTime <- base::Sys.time()
[17:39:27.324]             {
[17:39:27.324]                 {
[17:39:27.324]                   {
[17:39:27.324]                     {
[17:39:27.324]                       base::local({
[17:39:27.324]                         has_future <- base::requireNamespace("future", 
[17:39:27.324]                           quietly = TRUE)
[17:39:27.324]                         if (has_future) {
[17:39:27.324]                           ns <- base::getNamespace("future")
[17:39:27.324]                           version <- ns[[".package"]][["version"]]
[17:39:27.324]                           if (is.null(version)) 
[17:39:27.324]                             version <- utils::packageVersion("future")
[17:39:27.324]                         }
[17:39:27.324]                         else {
[17:39:27.324]                           version <- NULL
[17:39:27.324]                         }
[17:39:27.324]                         if (!has_future || version < "1.8.0") {
[17:39:27.324]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.324]                             "", base::R.version$version.string), 
[17:39:27.324]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:27.324]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.324]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.324]                               "release", "version")], collapse = " "), 
[17:39:27.324]                             hostname = base::Sys.info()[["nodename"]])
[17:39:27.324]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.324]                             info)
[17:39:27.324]                           info <- base::paste(info, collapse = "; ")
[17:39:27.324]                           if (!has_future) {
[17:39:27.324]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.324]                               info)
[17:39:27.324]                           }
[17:39:27.324]                           else {
[17:39:27.324]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.324]                               info, version)
[17:39:27.324]                           }
[17:39:27.324]                           base::stop(msg)
[17:39:27.324]                         }
[17:39:27.324]                       })
[17:39:27.324]                     }
[17:39:27.324]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:27.324]                     base::options(mc.cores = 1L)
[17:39:27.324]                   }
[17:39:27.324]                   ...future.strategy.old <- future::plan("list")
[17:39:27.324]                   options(future.plan = NULL)
[17:39:27.324]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.324]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.324]                 }
[17:39:27.324]                 ...future.workdir <- getwd()
[17:39:27.324]             }
[17:39:27.324]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.324]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.324]         }
[17:39:27.324]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.324]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.324]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.324]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.324]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.324]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.324]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.324]             base::names(...future.oldOptions))
[17:39:27.324]     }
[17:39:27.324]     if (FALSE) {
[17:39:27.324]     }
[17:39:27.324]     else {
[17:39:27.324]         if (TRUE) {
[17:39:27.324]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.324]                 open = "w")
[17:39:27.324]         }
[17:39:27.324]         else {
[17:39:27.324]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.324]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.324]         }
[17:39:27.324]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.324]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.324]             base::sink(type = "output", split = FALSE)
[17:39:27.324]             base::close(...future.stdout)
[17:39:27.324]         }, add = TRUE)
[17:39:27.324]     }
[17:39:27.324]     ...future.frame <- base::sys.nframe()
[17:39:27.324]     ...future.conditions <- base::list()
[17:39:27.324]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.324]     if (FALSE) {
[17:39:27.324]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.324]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.324]     }
[17:39:27.324]     ...future.result <- base::tryCatch({
[17:39:27.324]         base::withCallingHandlers({
[17:39:27.324]             ...future.value <- base::withVisible(base::local({
[17:39:27.324]                 withCallingHandlers({
[17:39:27.324]                   {
[17:39:27.324]                     4
[17:39:27.324]                   }
[17:39:27.324]                 }, immediateCondition = function(cond) {
[17:39:27.324]                   save_rds <- function (object, pathname, ...) 
[17:39:27.324]                   {
[17:39:27.324]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:27.324]                     if (file_test("-f", pathname_tmp)) {
[17:39:27.324]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.324]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:27.324]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.324]                         fi_tmp[["mtime"]])
[17:39:27.324]                     }
[17:39:27.324]                     tryCatch({
[17:39:27.324]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:27.324]                     }, error = function(ex) {
[17:39:27.324]                       msg <- conditionMessage(ex)
[17:39:27.324]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.324]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:27.324]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.324]                         fi_tmp[["mtime"]], msg)
[17:39:27.324]                       ex$message <- msg
[17:39:27.324]                       stop(ex)
[17:39:27.324]                     })
[17:39:27.324]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:27.324]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:27.324]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:27.324]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.324]                       fi <- file.info(pathname)
[17:39:27.324]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:27.324]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.324]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:27.324]                         fi[["size"]], fi[["mtime"]])
[17:39:27.324]                       stop(msg)
[17:39:27.324]                     }
[17:39:27.324]                     invisible(pathname)
[17:39:27.324]                   }
[17:39:27.324]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:27.324]                     rootPath = tempdir()) 
[17:39:27.324]                   {
[17:39:27.324]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:27.324]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:27.324]                       tmpdir = path, fileext = ".rds")
[17:39:27.324]                     save_rds(obj, file)
[17:39:27.324]                   }
[17:39:27.324]                   saveImmediateCondition(cond, path = "/tmp/RtmpuISvVj/.future/immediateConditions")
[17:39:27.324]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.324]                   {
[17:39:27.324]                     inherits <- base::inherits
[17:39:27.324]                     invokeRestart <- base::invokeRestart
[17:39:27.324]                     is.null <- base::is.null
[17:39:27.324]                     muffled <- FALSE
[17:39:27.324]                     if (inherits(cond, "message")) {
[17:39:27.324]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:27.324]                       if (muffled) 
[17:39:27.324]                         invokeRestart("muffleMessage")
[17:39:27.324]                     }
[17:39:27.324]                     else if (inherits(cond, "warning")) {
[17:39:27.324]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:27.324]                       if (muffled) 
[17:39:27.324]                         invokeRestart("muffleWarning")
[17:39:27.324]                     }
[17:39:27.324]                     else if (inherits(cond, "condition")) {
[17:39:27.324]                       if (!is.null(pattern)) {
[17:39:27.324]                         computeRestarts <- base::computeRestarts
[17:39:27.324]                         grepl <- base::grepl
[17:39:27.324]                         restarts <- computeRestarts(cond)
[17:39:27.324]                         for (restart in restarts) {
[17:39:27.324]                           name <- restart$name
[17:39:27.324]                           if (is.null(name)) 
[17:39:27.324]                             next
[17:39:27.324]                           if (!grepl(pattern, name)) 
[17:39:27.324]                             next
[17:39:27.324]                           invokeRestart(restart)
[17:39:27.324]                           muffled <- TRUE
[17:39:27.324]                           break
[17:39:27.324]                         }
[17:39:27.324]                       }
[17:39:27.324]                     }
[17:39:27.324]                     invisible(muffled)
[17:39:27.324]                   }
[17:39:27.324]                   muffleCondition(cond)
[17:39:27.324]                 })
[17:39:27.324]             }))
[17:39:27.324]             future::FutureResult(value = ...future.value$value, 
[17:39:27.324]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.324]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.324]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.324]                     ...future.globalenv.names))
[17:39:27.324]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.324]         }, condition = base::local({
[17:39:27.324]             c <- base::c
[17:39:27.324]             inherits <- base::inherits
[17:39:27.324]             invokeRestart <- base::invokeRestart
[17:39:27.324]             length <- base::length
[17:39:27.324]             list <- base::list
[17:39:27.324]             seq.int <- base::seq.int
[17:39:27.324]             signalCondition <- base::signalCondition
[17:39:27.324]             sys.calls <- base::sys.calls
[17:39:27.324]             `[[` <- base::`[[`
[17:39:27.324]             `+` <- base::`+`
[17:39:27.324]             `<<-` <- base::`<<-`
[17:39:27.324]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.324]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.324]                   3L)]
[17:39:27.324]             }
[17:39:27.324]             function(cond) {
[17:39:27.324]                 is_error <- inherits(cond, "error")
[17:39:27.324]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.324]                   NULL)
[17:39:27.324]                 if (is_error) {
[17:39:27.324]                   sessionInformation <- function() {
[17:39:27.324]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.324]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.324]                       search = base::search(), system = base::Sys.info())
[17:39:27.324]                   }
[17:39:27.324]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.324]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.324]                     cond$call), session = sessionInformation(), 
[17:39:27.324]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.324]                   signalCondition(cond)
[17:39:27.324]                 }
[17:39:27.324]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.324]                 "immediateCondition"))) {
[17:39:27.324]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.324]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.324]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.324]                   if (TRUE && !signal) {
[17:39:27.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.324]                     {
[17:39:27.324]                       inherits <- base::inherits
[17:39:27.324]                       invokeRestart <- base::invokeRestart
[17:39:27.324]                       is.null <- base::is.null
[17:39:27.324]                       muffled <- FALSE
[17:39:27.324]                       if (inherits(cond, "message")) {
[17:39:27.324]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.324]                         if (muffled) 
[17:39:27.324]                           invokeRestart("muffleMessage")
[17:39:27.324]                       }
[17:39:27.324]                       else if (inherits(cond, "warning")) {
[17:39:27.324]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.324]                         if (muffled) 
[17:39:27.324]                           invokeRestart("muffleWarning")
[17:39:27.324]                       }
[17:39:27.324]                       else if (inherits(cond, "condition")) {
[17:39:27.324]                         if (!is.null(pattern)) {
[17:39:27.324]                           computeRestarts <- base::computeRestarts
[17:39:27.324]                           grepl <- base::grepl
[17:39:27.324]                           restarts <- computeRestarts(cond)
[17:39:27.324]                           for (restart in restarts) {
[17:39:27.324]                             name <- restart$name
[17:39:27.324]                             if (is.null(name)) 
[17:39:27.324]                               next
[17:39:27.324]                             if (!grepl(pattern, name)) 
[17:39:27.324]                               next
[17:39:27.324]                             invokeRestart(restart)
[17:39:27.324]                             muffled <- TRUE
[17:39:27.324]                             break
[17:39:27.324]                           }
[17:39:27.324]                         }
[17:39:27.324]                       }
[17:39:27.324]                       invisible(muffled)
[17:39:27.324]                     }
[17:39:27.324]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.324]                   }
[17:39:27.324]                 }
[17:39:27.324]                 else {
[17:39:27.324]                   if (TRUE) {
[17:39:27.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.324]                     {
[17:39:27.324]                       inherits <- base::inherits
[17:39:27.324]                       invokeRestart <- base::invokeRestart
[17:39:27.324]                       is.null <- base::is.null
[17:39:27.324]                       muffled <- FALSE
[17:39:27.324]                       if (inherits(cond, "message")) {
[17:39:27.324]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.324]                         if (muffled) 
[17:39:27.324]                           invokeRestart("muffleMessage")
[17:39:27.324]                       }
[17:39:27.324]                       else if (inherits(cond, "warning")) {
[17:39:27.324]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.324]                         if (muffled) 
[17:39:27.324]                           invokeRestart("muffleWarning")
[17:39:27.324]                       }
[17:39:27.324]                       else if (inherits(cond, "condition")) {
[17:39:27.324]                         if (!is.null(pattern)) {
[17:39:27.324]                           computeRestarts <- base::computeRestarts
[17:39:27.324]                           grepl <- base::grepl
[17:39:27.324]                           restarts <- computeRestarts(cond)
[17:39:27.324]                           for (restart in restarts) {
[17:39:27.324]                             name <- restart$name
[17:39:27.324]                             if (is.null(name)) 
[17:39:27.324]                               next
[17:39:27.324]                             if (!grepl(pattern, name)) 
[17:39:27.324]                               next
[17:39:27.324]                             invokeRestart(restart)
[17:39:27.324]                             muffled <- TRUE
[17:39:27.324]                             break
[17:39:27.324]                           }
[17:39:27.324]                         }
[17:39:27.324]                       }
[17:39:27.324]                       invisible(muffled)
[17:39:27.324]                     }
[17:39:27.324]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.324]                   }
[17:39:27.324]                 }
[17:39:27.324]             }
[17:39:27.324]         }))
[17:39:27.324]     }, error = function(ex) {
[17:39:27.324]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.324]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.324]                 ...future.rng), started = ...future.startTime, 
[17:39:27.324]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.324]             version = "1.8"), class = "FutureResult")
[17:39:27.324]     }, finally = {
[17:39:27.324]         if (!identical(...future.workdir, getwd())) 
[17:39:27.324]             setwd(...future.workdir)
[17:39:27.324]         {
[17:39:27.324]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.324]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.324]             }
[17:39:27.324]             base::options(...future.oldOptions)
[17:39:27.324]             if (.Platform$OS.type == "windows") {
[17:39:27.324]                 old_names <- names(...future.oldEnvVars)
[17:39:27.324]                 envs <- base::Sys.getenv()
[17:39:27.324]                 names <- names(envs)
[17:39:27.324]                 common <- intersect(names, old_names)
[17:39:27.324]                 added <- setdiff(names, old_names)
[17:39:27.324]                 removed <- setdiff(old_names, names)
[17:39:27.324]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.324]                   envs[common]]
[17:39:27.324]                 NAMES <- toupper(changed)
[17:39:27.324]                 args <- list()
[17:39:27.324]                 for (kk in seq_along(NAMES)) {
[17:39:27.324]                   name <- changed[[kk]]
[17:39:27.324]                   NAME <- NAMES[[kk]]
[17:39:27.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.324]                     next
[17:39:27.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.324]                 }
[17:39:27.324]                 NAMES <- toupper(added)
[17:39:27.324]                 for (kk in seq_along(NAMES)) {
[17:39:27.324]                   name <- added[[kk]]
[17:39:27.324]                   NAME <- NAMES[[kk]]
[17:39:27.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.324]                     next
[17:39:27.324]                   args[[name]] <- ""
[17:39:27.324]                 }
[17:39:27.324]                 NAMES <- toupper(removed)
[17:39:27.324]                 for (kk in seq_along(NAMES)) {
[17:39:27.324]                   name <- removed[[kk]]
[17:39:27.324]                   NAME <- NAMES[[kk]]
[17:39:27.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.324]                     next
[17:39:27.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.324]                 }
[17:39:27.324]                 if (length(args) > 0) 
[17:39:27.324]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.324]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.324]             }
[17:39:27.324]             else {
[17:39:27.324]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.324]             }
[17:39:27.324]             {
[17:39:27.324]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.324]                   0L) {
[17:39:27.324]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.324]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.324]                   base::options(opts)
[17:39:27.324]                 }
[17:39:27.324]                 {
[17:39:27.324]                   {
[17:39:27.324]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:27.324]                     NULL
[17:39:27.324]                   }
[17:39:27.324]                   options(future.plan = NULL)
[17:39:27.324]                   if (is.na(NA_character_)) 
[17:39:27.324]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.324]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.324]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.324]                     .init = FALSE)
[17:39:27.324]                 }
[17:39:27.324]             }
[17:39:27.324]         }
[17:39:27.324]     })
[17:39:27.324]     if (TRUE) {
[17:39:27.324]         base::sink(type = "output", split = FALSE)
[17:39:27.324]         if (TRUE) {
[17:39:27.324]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.324]         }
[17:39:27.324]         else {
[17:39:27.324]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.324]         }
[17:39:27.324]         base::close(...future.stdout)
[17:39:27.324]         ...future.stdout <- NULL
[17:39:27.324]     }
[17:39:27.324]     ...future.result$conditions <- ...future.conditions
[17:39:27.324]     ...future.result$finished <- base::Sys.time()
[17:39:27.324]     ...future.result
[17:39:27.324] }
[17:39:27.327] requestCore(): workers = 2
[17:39:27.333] MulticoreFuture started
[17:39:27.334] - Launch lazy future ... done
[17:39:27.334] run() for ‘MulticoreFuture’ ... done
[17:39:27.334] plan(): Setting new future strategy stack:
[17:39:27.335] result() for MulticoreFuture ...
[17:39:27.335] List of future strategies:
[17:39:27.335] 1. sequential:
[17:39:27.335]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.335]    - tweaked: FALSE
[17:39:27.335]    - call: NULL
[17:39:27.336] plan(): nbrOfWorkers() = 1
[17:39:27.337] result() for MulticoreFuture ...
[17:39:27.338] result() for MulticoreFuture ... done
[17:39:27.338] result() for MulticoreFuture ... done
[17:39:27.338] plan(): Setting new future strategy stack:
[17:39:27.338] result() for MulticoreFuture ...
[17:39:27.338] result() for MulticoreFuture ... done
u$a = 2
[17:39:27.338] result() for MulticoreFuture ...
[17:39:27.338] List of future strategies:
[17:39:27.338] 1. multicore:
[17:39:27.338]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:27.338]    - tweaked: FALSE
[17:39:27.338]    - call: plan(strategy)
[17:39:27.343] plan(): nbrOfWorkers() = 2
[17:39:27.344] result() for MulticoreFuture ...
[17:39:27.344] result() for MulticoreFuture ... done
[17:39:27.344] result() for MulticoreFuture ... done
[17:39:27.345] result() for MulticoreFuture ...
[17:39:27.345] result() for MulticoreFuture ... done
v$a = 4
[17:39:27.345] getGlobalsAndPackages() ...
[17:39:27.345] Searching for globals...
[17:39:27.346] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:27.347] Searching for globals ... DONE
[17:39:27.347] Resolving globals: FALSE
[17:39:27.347] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:27.348] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:27.348] - globals: [1] ‘a’
[17:39:27.348] 
[17:39:27.348] getGlobalsAndPackages() ... DONE
[17:39:27.349] run() for ‘Future’ ...
[17:39:27.349] - state: ‘created’
[17:39:27.349] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:27.353] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:27.353] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:27.353]   - Field: ‘label’
[17:39:27.353]   - Field: ‘local’
[17:39:27.353]   - Field: ‘owner’
[17:39:27.353]   - Field: ‘envir’
[17:39:27.354]   - Field: ‘workers’
[17:39:27.354]   - Field: ‘packages’
[17:39:27.354]   - Field: ‘gc’
[17:39:27.354]   - Field: ‘job’
[17:39:27.354]   - Field: ‘conditions’
[17:39:27.354]   - Field: ‘expr’
[17:39:27.354]   - Field: ‘uuid’
[17:39:27.354]   - Field: ‘seed’
[17:39:27.354]   - Field: ‘version’
[17:39:27.355]   - Field: ‘result’
[17:39:27.355]   - Field: ‘asynchronous’
[17:39:27.355]   - Field: ‘calls’
[17:39:27.355]   - Field: ‘globals’
[17:39:27.355]   - Field: ‘stdout’
[17:39:27.355]   - Field: ‘earlySignal’
[17:39:27.355]   - Field: ‘lazy’
[17:39:27.355]   - Field: ‘state’
[17:39:27.355] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:27.356] - Launch lazy future ...
[17:39:27.356] Packages needed by the future expression (n = 0): <none>
[17:39:27.356] Packages needed by future strategies (n = 0): <none>
[17:39:27.357] {
[17:39:27.357]     {
[17:39:27.357]         {
[17:39:27.357]             ...future.startTime <- base::Sys.time()
[17:39:27.357]             {
[17:39:27.357]                 {
[17:39:27.357]                   {
[17:39:27.357]                     {
[17:39:27.357]                       base::local({
[17:39:27.357]                         has_future <- base::requireNamespace("future", 
[17:39:27.357]                           quietly = TRUE)
[17:39:27.357]                         if (has_future) {
[17:39:27.357]                           ns <- base::getNamespace("future")
[17:39:27.357]                           version <- ns[[".package"]][["version"]]
[17:39:27.357]                           if (is.null(version)) 
[17:39:27.357]                             version <- utils::packageVersion("future")
[17:39:27.357]                         }
[17:39:27.357]                         else {
[17:39:27.357]                           version <- NULL
[17:39:27.357]                         }
[17:39:27.357]                         if (!has_future || version < "1.8.0") {
[17:39:27.357]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.357]                             "", base::R.version$version.string), 
[17:39:27.357]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:27.357]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.357]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.357]                               "release", "version")], collapse = " "), 
[17:39:27.357]                             hostname = base::Sys.info()[["nodename"]])
[17:39:27.357]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.357]                             info)
[17:39:27.357]                           info <- base::paste(info, collapse = "; ")
[17:39:27.357]                           if (!has_future) {
[17:39:27.357]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.357]                               info)
[17:39:27.357]                           }
[17:39:27.357]                           else {
[17:39:27.357]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.357]                               info, version)
[17:39:27.357]                           }
[17:39:27.357]                           base::stop(msg)
[17:39:27.357]                         }
[17:39:27.357]                       })
[17:39:27.357]                     }
[17:39:27.357]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:27.357]                     base::options(mc.cores = 1L)
[17:39:27.357]                   }
[17:39:27.357]                   ...future.strategy.old <- future::plan("list")
[17:39:27.357]                   options(future.plan = NULL)
[17:39:27.357]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.357]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.357]                 }
[17:39:27.357]                 ...future.workdir <- getwd()
[17:39:27.357]             }
[17:39:27.357]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.357]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.357]         }
[17:39:27.357]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.357]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.357]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.357]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.357]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.357]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.357]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.357]             base::names(...future.oldOptions))
[17:39:27.357]     }
[17:39:27.357]     if (FALSE) {
[17:39:27.357]     }
[17:39:27.357]     else {
[17:39:27.357]         if (TRUE) {
[17:39:27.357]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.357]                 open = "w")
[17:39:27.357]         }
[17:39:27.357]         else {
[17:39:27.357]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.357]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.357]         }
[17:39:27.357]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.357]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.357]             base::sink(type = "output", split = FALSE)
[17:39:27.357]             base::close(...future.stdout)
[17:39:27.357]         }, add = TRUE)
[17:39:27.357]     }
[17:39:27.357]     ...future.frame <- base::sys.nframe()
[17:39:27.357]     ...future.conditions <- base::list()
[17:39:27.357]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.357]     if (FALSE) {
[17:39:27.357]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.357]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.357]     }
[17:39:27.357]     ...future.result <- base::tryCatch({
[17:39:27.357]         base::withCallingHandlers({
[17:39:27.357]             ...future.value <- base::withVisible(base::local({
[17:39:27.357]                 withCallingHandlers({
[17:39:27.357]                   {
[17:39:27.357]                     2 * a
[17:39:27.357]                   }
[17:39:27.357]                 }, immediateCondition = function(cond) {
[17:39:27.357]                   save_rds <- function (object, pathname, ...) 
[17:39:27.357]                   {
[17:39:27.357]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:27.357]                     if (file_test("-f", pathname_tmp)) {
[17:39:27.357]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.357]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:27.357]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.357]                         fi_tmp[["mtime"]])
[17:39:27.357]                     }
[17:39:27.357]                     tryCatch({
[17:39:27.357]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:27.357]                     }, error = function(ex) {
[17:39:27.357]                       msg <- conditionMessage(ex)
[17:39:27.357]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.357]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:27.357]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.357]                         fi_tmp[["mtime"]], msg)
[17:39:27.357]                       ex$message <- msg
[17:39:27.357]                       stop(ex)
[17:39:27.357]                     })
[17:39:27.357]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:27.357]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:27.357]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:27.357]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.357]                       fi <- file.info(pathname)
[17:39:27.357]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:27.357]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.357]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:27.357]                         fi[["size"]], fi[["mtime"]])
[17:39:27.357]                       stop(msg)
[17:39:27.357]                     }
[17:39:27.357]                     invisible(pathname)
[17:39:27.357]                   }
[17:39:27.357]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:27.357]                     rootPath = tempdir()) 
[17:39:27.357]                   {
[17:39:27.357]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:27.357]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:27.357]                       tmpdir = path, fileext = ".rds")
[17:39:27.357]                     save_rds(obj, file)
[17:39:27.357]                   }
[17:39:27.357]                   saveImmediateCondition(cond, path = "/tmp/RtmpuISvVj/.future/immediateConditions")
[17:39:27.357]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.357]                   {
[17:39:27.357]                     inherits <- base::inherits
[17:39:27.357]                     invokeRestart <- base::invokeRestart
[17:39:27.357]                     is.null <- base::is.null
[17:39:27.357]                     muffled <- FALSE
[17:39:27.357]                     if (inherits(cond, "message")) {
[17:39:27.357]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:27.357]                       if (muffled) 
[17:39:27.357]                         invokeRestart("muffleMessage")
[17:39:27.357]                     }
[17:39:27.357]                     else if (inherits(cond, "warning")) {
[17:39:27.357]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:27.357]                       if (muffled) 
[17:39:27.357]                         invokeRestart("muffleWarning")
[17:39:27.357]                     }
[17:39:27.357]                     else if (inherits(cond, "condition")) {
[17:39:27.357]                       if (!is.null(pattern)) {
[17:39:27.357]                         computeRestarts <- base::computeRestarts
[17:39:27.357]                         grepl <- base::grepl
[17:39:27.357]                         restarts <- computeRestarts(cond)
[17:39:27.357]                         for (restart in restarts) {
[17:39:27.357]                           name <- restart$name
[17:39:27.357]                           if (is.null(name)) 
[17:39:27.357]                             next
[17:39:27.357]                           if (!grepl(pattern, name)) 
[17:39:27.357]                             next
[17:39:27.357]                           invokeRestart(restart)
[17:39:27.357]                           muffled <- TRUE
[17:39:27.357]                           break
[17:39:27.357]                         }
[17:39:27.357]                       }
[17:39:27.357]                     }
[17:39:27.357]                     invisible(muffled)
[17:39:27.357]                   }
[17:39:27.357]                   muffleCondition(cond)
[17:39:27.357]                 })
[17:39:27.357]             }))
[17:39:27.357]             future::FutureResult(value = ...future.value$value, 
[17:39:27.357]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.357]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.357]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.357]                     ...future.globalenv.names))
[17:39:27.357]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.357]         }, condition = base::local({
[17:39:27.357]             c <- base::c
[17:39:27.357]             inherits <- base::inherits
[17:39:27.357]             invokeRestart <- base::invokeRestart
[17:39:27.357]             length <- base::length
[17:39:27.357]             list <- base::list
[17:39:27.357]             seq.int <- base::seq.int
[17:39:27.357]             signalCondition <- base::signalCondition
[17:39:27.357]             sys.calls <- base::sys.calls
[17:39:27.357]             `[[` <- base::`[[`
[17:39:27.357]             `+` <- base::`+`
[17:39:27.357]             `<<-` <- base::`<<-`
[17:39:27.357]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.357]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.357]                   3L)]
[17:39:27.357]             }
[17:39:27.357]             function(cond) {
[17:39:27.357]                 is_error <- inherits(cond, "error")
[17:39:27.357]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.357]                   NULL)
[17:39:27.357]                 if (is_error) {
[17:39:27.357]                   sessionInformation <- function() {
[17:39:27.357]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.357]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.357]                       search = base::search(), system = base::Sys.info())
[17:39:27.357]                   }
[17:39:27.357]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.357]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.357]                     cond$call), session = sessionInformation(), 
[17:39:27.357]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.357]                   signalCondition(cond)
[17:39:27.357]                 }
[17:39:27.357]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.357]                 "immediateCondition"))) {
[17:39:27.357]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.357]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.357]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.357]                   if (TRUE && !signal) {
[17:39:27.357]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.357]                     {
[17:39:27.357]                       inherits <- base::inherits
[17:39:27.357]                       invokeRestart <- base::invokeRestart
[17:39:27.357]                       is.null <- base::is.null
[17:39:27.357]                       muffled <- FALSE
[17:39:27.357]                       if (inherits(cond, "message")) {
[17:39:27.357]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.357]                         if (muffled) 
[17:39:27.357]                           invokeRestart("muffleMessage")
[17:39:27.357]                       }
[17:39:27.357]                       else if (inherits(cond, "warning")) {
[17:39:27.357]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.357]                         if (muffled) 
[17:39:27.357]                           invokeRestart("muffleWarning")
[17:39:27.357]                       }
[17:39:27.357]                       else if (inherits(cond, "condition")) {
[17:39:27.357]                         if (!is.null(pattern)) {
[17:39:27.357]                           computeRestarts <- base::computeRestarts
[17:39:27.357]                           grepl <- base::grepl
[17:39:27.357]                           restarts <- computeRestarts(cond)
[17:39:27.357]                           for (restart in restarts) {
[17:39:27.357]                             name <- restart$name
[17:39:27.357]                             if (is.null(name)) 
[17:39:27.357]                               next
[17:39:27.357]                             if (!grepl(pattern, name)) 
[17:39:27.357]                               next
[17:39:27.357]                             invokeRestart(restart)
[17:39:27.357]                             muffled <- TRUE
[17:39:27.357]                             break
[17:39:27.357]                           }
[17:39:27.357]                         }
[17:39:27.357]                       }
[17:39:27.357]                       invisible(muffled)
[17:39:27.357]                     }
[17:39:27.357]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.357]                   }
[17:39:27.357]                 }
[17:39:27.357]                 else {
[17:39:27.357]                   if (TRUE) {
[17:39:27.357]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.357]                     {
[17:39:27.357]                       inherits <- base::inherits
[17:39:27.357]                       invokeRestart <- base::invokeRestart
[17:39:27.357]                       is.null <- base::is.null
[17:39:27.357]                       muffled <- FALSE
[17:39:27.357]                       if (inherits(cond, "message")) {
[17:39:27.357]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.357]                         if (muffled) 
[17:39:27.357]                           invokeRestart("muffleMessage")
[17:39:27.357]                       }
[17:39:27.357]                       else if (inherits(cond, "warning")) {
[17:39:27.357]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.357]                         if (muffled) 
[17:39:27.357]                           invokeRestart("muffleWarning")
[17:39:27.357]                       }
[17:39:27.357]                       else if (inherits(cond, "condition")) {
[17:39:27.357]                         if (!is.null(pattern)) {
[17:39:27.357]                           computeRestarts <- base::computeRestarts
[17:39:27.357]                           grepl <- base::grepl
[17:39:27.357]                           restarts <- computeRestarts(cond)
[17:39:27.357]                           for (restart in restarts) {
[17:39:27.357]                             name <- restart$name
[17:39:27.357]                             if (is.null(name)) 
[17:39:27.357]                               next
[17:39:27.357]                             if (!grepl(pattern, name)) 
[17:39:27.357]                               next
[17:39:27.357]                             invokeRestart(restart)
[17:39:27.357]                             muffled <- TRUE
[17:39:27.357]                             break
[17:39:27.357]                           }
[17:39:27.357]                         }
[17:39:27.357]                       }
[17:39:27.357]                       invisible(muffled)
[17:39:27.357]                     }
[17:39:27.357]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.357]                   }
[17:39:27.357]                 }
[17:39:27.357]             }
[17:39:27.357]         }))
[17:39:27.357]     }, error = function(ex) {
[17:39:27.357]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.357]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.357]                 ...future.rng), started = ...future.startTime, 
[17:39:27.357]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.357]             version = "1.8"), class = "FutureResult")
[17:39:27.357]     }, finally = {
[17:39:27.357]         if (!identical(...future.workdir, getwd())) 
[17:39:27.357]             setwd(...future.workdir)
[17:39:27.357]         {
[17:39:27.357]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.357]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.357]             }
[17:39:27.357]             base::options(...future.oldOptions)
[17:39:27.357]             if (.Platform$OS.type == "windows") {
[17:39:27.357]                 old_names <- names(...future.oldEnvVars)
[17:39:27.357]                 envs <- base::Sys.getenv()
[17:39:27.357]                 names <- names(envs)
[17:39:27.357]                 common <- intersect(names, old_names)
[17:39:27.357]                 added <- setdiff(names, old_names)
[17:39:27.357]                 removed <- setdiff(old_names, names)
[17:39:27.357]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.357]                   envs[common]]
[17:39:27.357]                 NAMES <- toupper(changed)
[17:39:27.357]                 args <- list()
[17:39:27.357]                 for (kk in seq_along(NAMES)) {
[17:39:27.357]                   name <- changed[[kk]]
[17:39:27.357]                   NAME <- NAMES[[kk]]
[17:39:27.357]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.357]                     next
[17:39:27.357]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.357]                 }
[17:39:27.357]                 NAMES <- toupper(added)
[17:39:27.357]                 for (kk in seq_along(NAMES)) {
[17:39:27.357]                   name <- added[[kk]]
[17:39:27.357]                   NAME <- NAMES[[kk]]
[17:39:27.357]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.357]                     next
[17:39:27.357]                   args[[name]] <- ""
[17:39:27.357]                 }
[17:39:27.357]                 NAMES <- toupper(removed)
[17:39:27.357]                 for (kk in seq_along(NAMES)) {
[17:39:27.357]                   name <- removed[[kk]]
[17:39:27.357]                   NAME <- NAMES[[kk]]
[17:39:27.357]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.357]                     next
[17:39:27.357]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.357]                 }
[17:39:27.357]                 if (length(args) > 0) 
[17:39:27.357]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.357]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.357]             }
[17:39:27.357]             else {
[17:39:27.357]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.357]             }
[17:39:27.357]             {
[17:39:27.357]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.357]                   0L) {
[17:39:27.357]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.357]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.357]                   base::options(opts)
[17:39:27.357]                 }
[17:39:27.357]                 {
[17:39:27.357]                   {
[17:39:27.357]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:27.357]                     NULL
[17:39:27.357]                   }
[17:39:27.357]                   options(future.plan = NULL)
[17:39:27.357]                   if (is.na(NA_character_)) 
[17:39:27.357]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.357]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.357]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.357]                     .init = FALSE)
[17:39:27.357]                 }
[17:39:27.357]             }
[17:39:27.357]         }
[17:39:27.357]     })
[17:39:27.357]     if (TRUE) {
[17:39:27.357]         base::sink(type = "output", split = FALSE)
[17:39:27.357]         if (TRUE) {
[17:39:27.357]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.357]         }
[17:39:27.357]         else {
[17:39:27.357]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.357]         }
[17:39:27.357]         base::close(...future.stdout)
[17:39:27.357]         ...future.stdout <- NULL
[17:39:27.357]     }
[17:39:27.357]     ...future.result$conditions <- ...future.conditions
[17:39:27.357]     ...future.result$finished <- base::Sys.time()
[17:39:27.357]     ...future.result
[17:39:27.357] }
[17:39:27.359] assign_globals() ...
[17:39:27.359] List of 1
[17:39:27.359]  $ a: num 1
[17:39:27.359]  - attr(*, "where")=List of 1
[17:39:27.359]   ..$ a:<environment: R_EmptyEnv> 
[17:39:27.359]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:27.359]  - attr(*, "resolved")= logi FALSE
[17:39:27.359]  - attr(*, "total_size")= num 56
[17:39:27.359]  - attr(*, "already-done")= logi TRUE
[17:39:27.365] - copied ‘a’ to environment
[17:39:27.365] assign_globals() ... done
[17:39:27.365] requestCore(): workers = 2
[17:39:27.367] MulticoreFuture started
[17:39:27.368] - Launch lazy future ... done
[17:39:27.368] run() for ‘MulticoreFuture’ ... done
[17:39:27.368] result() for MulticoreFuture ...
[17:39:27.368] plan(): Setting new future strategy stack:
[17:39:27.369] List of future strategies:
[17:39:27.369] 1. sequential:
[17:39:27.369]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.369]    - tweaked: FALSE
[17:39:27.369]    - call: NULL
[17:39:27.370] plan(): nbrOfWorkers() = 1
[17:39:27.372] plan(): Setting new future strategy stack:
[17:39:27.372] List of future strategies:
[17:39:27.372] 1. multicore:
[17:39:27.372]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:27.372]    - tweaked: FALSE
[17:39:27.372]    - call: plan(strategy)
[17:39:27.378] plan(): nbrOfWorkers() = 2
[17:39:27.378] result() for MulticoreFuture ...
[17:39:27.379] result() for MulticoreFuture ... done
[17:39:27.379] result() for MulticoreFuture ... done
[17:39:27.379] result() for MulticoreFuture ...
[17:39:27.379] result() for MulticoreFuture ... done
[17:39:27.379] getGlobalsAndPackages() ...
[17:39:27.379] Searching for globals...
[17:39:27.381] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:27.381] Searching for globals ... DONE
[17:39:27.381] Resolving globals: FALSE
[17:39:27.382] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:27.382] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:27.382] - globals: [1] ‘a’
[17:39:27.382] 
[17:39:27.382] getGlobalsAndPackages() ... DONE
[17:39:27.383] run() for ‘Future’ ...
[17:39:27.383] - state: ‘created’
[17:39:27.383] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:27.387] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:27.387] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:27.387]   - Field: ‘label’
[17:39:27.387]   - Field: ‘local’
[17:39:27.387]   - Field: ‘owner’
[17:39:27.388]   - Field: ‘envir’
[17:39:27.388]   - Field: ‘workers’
[17:39:27.388]   - Field: ‘packages’
[17:39:27.388]   - Field: ‘gc’
[17:39:27.388]   - Field: ‘job’
[17:39:27.388]   - Field: ‘conditions’
[17:39:27.388]   - Field: ‘expr’
[17:39:27.388]   - Field: ‘uuid’
[17:39:27.389]   - Field: ‘seed’
[17:39:27.389]   - Field: ‘version’
[17:39:27.389]   - Field: ‘result’
[17:39:27.389]   - Field: ‘asynchronous’
[17:39:27.389]   - Field: ‘calls’
[17:39:27.389]   - Field: ‘globals’
[17:39:27.389]   - Field: ‘stdout’
[17:39:27.389]   - Field: ‘earlySignal’
[17:39:27.389]   - Field: ‘lazy’
[17:39:27.390]   - Field: ‘state’
[17:39:27.390] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:27.390] - Launch lazy future ...
[17:39:27.390] Packages needed by the future expression (n = 0): <none>
[17:39:27.390] Packages needed by future strategies (n = 0): <none>
[17:39:27.391] {
[17:39:27.391]     {
[17:39:27.391]         {
[17:39:27.391]             ...future.startTime <- base::Sys.time()
[17:39:27.391]             {
[17:39:27.391]                 {
[17:39:27.391]                   {
[17:39:27.391]                     {
[17:39:27.391]                       base::local({
[17:39:27.391]                         has_future <- base::requireNamespace("future", 
[17:39:27.391]                           quietly = TRUE)
[17:39:27.391]                         if (has_future) {
[17:39:27.391]                           ns <- base::getNamespace("future")
[17:39:27.391]                           version <- ns[[".package"]][["version"]]
[17:39:27.391]                           if (is.null(version)) 
[17:39:27.391]                             version <- utils::packageVersion("future")
[17:39:27.391]                         }
[17:39:27.391]                         else {
[17:39:27.391]                           version <- NULL
[17:39:27.391]                         }
[17:39:27.391]                         if (!has_future || version < "1.8.0") {
[17:39:27.391]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.391]                             "", base::R.version$version.string), 
[17:39:27.391]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:27.391]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.391]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.391]                               "release", "version")], collapse = " "), 
[17:39:27.391]                             hostname = base::Sys.info()[["nodename"]])
[17:39:27.391]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.391]                             info)
[17:39:27.391]                           info <- base::paste(info, collapse = "; ")
[17:39:27.391]                           if (!has_future) {
[17:39:27.391]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.391]                               info)
[17:39:27.391]                           }
[17:39:27.391]                           else {
[17:39:27.391]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.391]                               info, version)
[17:39:27.391]                           }
[17:39:27.391]                           base::stop(msg)
[17:39:27.391]                         }
[17:39:27.391]                       })
[17:39:27.391]                     }
[17:39:27.391]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:27.391]                     base::options(mc.cores = 1L)
[17:39:27.391]                   }
[17:39:27.391]                   ...future.strategy.old <- future::plan("list")
[17:39:27.391]                   options(future.plan = NULL)
[17:39:27.391]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.391]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.391]                 }
[17:39:27.391]                 ...future.workdir <- getwd()
[17:39:27.391]             }
[17:39:27.391]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.391]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.391]         }
[17:39:27.391]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.391]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.391]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.391]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.391]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.391]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.391]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.391]             base::names(...future.oldOptions))
[17:39:27.391]     }
[17:39:27.391]     if (FALSE) {
[17:39:27.391]     }
[17:39:27.391]     else {
[17:39:27.391]         if (TRUE) {
[17:39:27.391]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.391]                 open = "w")
[17:39:27.391]         }
[17:39:27.391]         else {
[17:39:27.391]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.391]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.391]         }
[17:39:27.391]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.391]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.391]             base::sink(type = "output", split = FALSE)
[17:39:27.391]             base::close(...future.stdout)
[17:39:27.391]         }, add = TRUE)
[17:39:27.391]     }
[17:39:27.391]     ...future.frame <- base::sys.nframe()
[17:39:27.391]     ...future.conditions <- base::list()
[17:39:27.391]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.391]     if (FALSE) {
[17:39:27.391]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.391]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.391]     }
[17:39:27.391]     ...future.result <- base::tryCatch({
[17:39:27.391]         base::withCallingHandlers({
[17:39:27.391]             ...future.value <- base::withVisible(base::local({
[17:39:27.391]                 withCallingHandlers({
[17:39:27.391]                   {
[17:39:27.391]                     2 * a
[17:39:27.391]                   }
[17:39:27.391]                 }, immediateCondition = function(cond) {
[17:39:27.391]                   save_rds <- function (object, pathname, ...) 
[17:39:27.391]                   {
[17:39:27.391]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:27.391]                     if (file_test("-f", pathname_tmp)) {
[17:39:27.391]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.391]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:27.391]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.391]                         fi_tmp[["mtime"]])
[17:39:27.391]                     }
[17:39:27.391]                     tryCatch({
[17:39:27.391]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:27.391]                     }, error = function(ex) {
[17:39:27.391]                       msg <- conditionMessage(ex)
[17:39:27.391]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.391]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:27.391]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.391]                         fi_tmp[["mtime"]], msg)
[17:39:27.391]                       ex$message <- msg
[17:39:27.391]                       stop(ex)
[17:39:27.391]                     })
[17:39:27.391]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:27.391]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:27.391]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:27.391]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.391]                       fi <- file.info(pathname)
[17:39:27.391]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:27.391]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.391]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:27.391]                         fi[["size"]], fi[["mtime"]])
[17:39:27.391]                       stop(msg)
[17:39:27.391]                     }
[17:39:27.391]                     invisible(pathname)
[17:39:27.391]                   }
[17:39:27.391]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:27.391]                     rootPath = tempdir()) 
[17:39:27.391]                   {
[17:39:27.391]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:27.391]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:27.391]                       tmpdir = path, fileext = ".rds")
[17:39:27.391]                     save_rds(obj, file)
[17:39:27.391]                   }
[17:39:27.391]                   saveImmediateCondition(cond, path = "/tmp/RtmpuISvVj/.future/immediateConditions")
[17:39:27.391]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.391]                   {
[17:39:27.391]                     inherits <- base::inherits
[17:39:27.391]                     invokeRestart <- base::invokeRestart
[17:39:27.391]                     is.null <- base::is.null
[17:39:27.391]                     muffled <- FALSE
[17:39:27.391]                     if (inherits(cond, "message")) {
[17:39:27.391]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:27.391]                       if (muffled) 
[17:39:27.391]                         invokeRestart("muffleMessage")
[17:39:27.391]                     }
[17:39:27.391]                     else if (inherits(cond, "warning")) {
[17:39:27.391]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:27.391]                       if (muffled) 
[17:39:27.391]                         invokeRestart("muffleWarning")
[17:39:27.391]                     }
[17:39:27.391]                     else if (inherits(cond, "condition")) {
[17:39:27.391]                       if (!is.null(pattern)) {
[17:39:27.391]                         computeRestarts <- base::computeRestarts
[17:39:27.391]                         grepl <- base::grepl
[17:39:27.391]                         restarts <- computeRestarts(cond)
[17:39:27.391]                         for (restart in restarts) {
[17:39:27.391]                           name <- restart$name
[17:39:27.391]                           if (is.null(name)) 
[17:39:27.391]                             next
[17:39:27.391]                           if (!grepl(pattern, name)) 
[17:39:27.391]                             next
[17:39:27.391]                           invokeRestart(restart)
[17:39:27.391]                           muffled <- TRUE
[17:39:27.391]                           break
[17:39:27.391]                         }
[17:39:27.391]                       }
[17:39:27.391]                     }
[17:39:27.391]                     invisible(muffled)
[17:39:27.391]                   }
[17:39:27.391]                   muffleCondition(cond)
[17:39:27.391]                 })
[17:39:27.391]             }))
[17:39:27.391]             future::FutureResult(value = ...future.value$value, 
[17:39:27.391]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.391]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.391]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.391]                     ...future.globalenv.names))
[17:39:27.391]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.391]         }, condition = base::local({
[17:39:27.391]             c <- base::c
[17:39:27.391]             inherits <- base::inherits
[17:39:27.391]             invokeRestart <- base::invokeRestart
[17:39:27.391]             length <- base::length
[17:39:27.391]             list <- base::list
[17:39:27.391]             seq.int <- base::seq.int
[17:39:27.391]             signalCondition <- base::signalCondition
[17:39:27.391]             sys.calls <- base::sys.calls
[17:39:27.391]             `[[` <- base::`[[`
[17:39:27.391]             `+` <- base::`+`
[17:39:27.391]             `<<-` <- base::`<<-`
[17:39:27.391]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.391]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.391]                   3L)]
[17:39:27.391]             }
[17:39:27.391]             function(cond) {
[17:39:27.391]                 is_error <- inherits(cond, "error")
[17:39:27.391]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.391]                   NULL)
[17:39:27.391]                 if (is_error) {
[17:39:27.391]                   sessionInformation <- function() {
[17:39:27.391]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.391]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.391]                       search = base::search(), system = base::Sys.info())
[17:39:27.391]                   }
[17:39:27.391]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.391]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.391]                     cond$call), session = sessionInformation(), 
[17:39:27.391]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.391]                   signalCondition(cond)
[17:39:27.391]                 }
[17:39:27.391]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.391]                 "immediateCondition"))) {
[17:39:27.391]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.391]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.391]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.391]                   if (TRUE && !signal) {
[17:39:27.391]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.391]                     {
[17:39:27.391]                       inherits <- base::inherits
[17:39:27.391]                       invokeRestart <- base::invokeRestart
[17:39:27.391]                       is.null <- base::is.null
[17:39:27.391]                       muffled <- FALSE
[17:39:27.391]                       if (inherits(cond, "message")) {
[17:39:27.391]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.391]                         if (muffled) 
[17:39:27.391]                           invokeRestart("muffleMessage")
[17:39:27.391]                       }
[17:39:27.391]                       else if (inherits(cond, "warning")) {
[17:39:27.391]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.391]                         if (muffled) 
[17:39:27.391]                           invokeRestart("muffleWarning")
[17:39:27.391]                       }
[17:39:27.391]                       else if (inherits(cond, "condition")) {
[17:39:27.391]                         if (!is.null(pattern)) {
[17:39:27.391]                           computeRestarts <- base::computeRestarts
[17:39:27.391]                           grepl <- base::grepl
[17:39:27.391]                           restarts <- computeRestarts(cond)
[17:39:27.391]                           for (restart in restarts) {
[17:39:27.391]                             name <- restart$name
[17:39:27.391]                             if (is.null(name)) 
[17:39:27.391]                               next
[17:39:27.391]                             if (!grepl(pattern, name)) 
[17:39:27.391]                               next
[17:39:27.391]                             invokeRestart(restart)
[17:39:27.391]                             muffled <- TRUE
[17:39:27.391]                             break
[17:39:27.391]                           }
[17:39:27.391]                         }
[17:39:27.391]                       }
[17:39:27.391]                       invisible(muffled)
[17:39:27.391]                     }
[17:39:27.391]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.391]                   }
[17:39:27.391]                 }
[17:39:27.391]                 else {
[17:39:27.391]                   if (TRUE) {
[17:39:27.391]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.391]                     {
[17:39:27.391]                       inherits <- base::inherits
[17:39:27.391]                       invokeRestart <- base::invokeRestart
[17:39:27.391]                       is.null <- base::is.null
[17:39:27.391]                       muffled <- FALSE
[17:39:27.391]                       if (inherits(cond, "message")) {
[17:39:27.391]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.391]                         if (muffled) 
[17:39:27.391]                           invokeRestart("muffleMessage")
[17:39:27.391]                       }
[17:39:27.391]                       else if (inherits(cond, "warning")) {
[17:39:27.391]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.391]                         if (muffled) 
[17:39:27.391]                           invokeRestart("muffleWarning")
[17:39:27.391]                       }
[17:39:27.391]                       else if (inherits(cond, "condition")) {
[17:39:27.391]                         if (!is.null(pattern)) {
[17:39:27.391]                           computeRestarts <- base::computeRestarts
[17:39:27.391]                           grepl <- base::grepl
[17:39:27.391]                           restarts <- computeRestarts(cond)
[17:39:27.391]                           for (restart in restarts) {
[17:39:27.391]                             name <- restart$name
[17:39:27.391]                             if (is.null(name)) 
[17:39:27.391]                               next
[17:39:27.391]                             if (!grepl(pattern, name)) 
[17:39:27.391]                               next
[17:39:27.391]                             invokeRestart(restart)
[17:39:27.391]                             muffled <- TRUE
[17:39:27.391]                             break
[17:39:27.391]                           }
[17:39:27.391]                         }
[17:39:27.391]                       }
[17:39:27.391]                       invisible(muffled)
[17:39:27.391]                     }
[17:39:27.391]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.391]                   }
[17:39:27.391]                 }
[17:39:27.391]             }
[17:39:27.391]         }))
[17:39:27.391]     }, error = function(ex) {
[17:39:27.391]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.391]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.391]                 ...future.rng), started = ...future.startTime, 
[17:39:27.391]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.391]             version = "1.8"), class = "FutureResult")
[17:39:27.391]     }, finally = {
[17:39:27.391]         if (!identical(...future.workdir, getwd())) 
[17:39:27.391]             setwd(...future.workdir)
[17:39:27.391]         {
[17:39:27.391]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.391]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.391]             }
[17:39:27.391]             base::options(...future.oldOptions)
[17:39:27.391]             if (.Platform$OS.type == "windows") {
[17:39:27.391]                 old_names <- names(...future.oldEnvVars)
[17:39:27.391]                 envs <- base::Sys.getenv()
[17:39:27.391]                 names <- names(envs)
[17:39:27.391]                 common <- intersect(names, old_names)
[17:39:27.391]                 added <- setdiff(names, old_names)
[17:39:27.391]                 removed <- setdiff(old_names, names)
[17:39:27.391]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.391]                   envs[common]]
[17:39:27.391]                 NAMES <- toupper(changed)
[17:39:27.391]                 args <- list()
[17:39:27.391]                 for (kk in seq_along(NAMES)) {
[17:39:27.391]                   name <- changed[[kk]]
[17:39:27.391]                   NAME <- NAMES[[kk]]
[17:39:27.391]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.391]                     next
[17:39:27.391]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.391]                 }
[17:39:27.391]                 NAMES <- toupper(added)
[17:39:27.391]                 for (kk in seq_along(NAMES)) {
[17:39:27.391]                   name <- added[[kk]]
[17:39:27.391]                   NAME <- NAMES[[kk]]
[17:39:27.391]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.391]                     next
[17:39:27.391]                   args[[name]] <- ""
[17:39:27.391]                 }
[17:39:27.391]                 NAMES <- toupper(removed)
[17:39:27.391]                 for (kk in seq_along(NAMES)) {
[17:39:27.391]                   name <- removed[[kk]]
[17:39:27.391]                   NAME <- NAMES[[kk]]
[17:39:27.391]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.391]                     next
[17:39:27.391]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.391]                 }
[17:39:27.391]                 if (length(args) > 0) 
[17:39:27.391]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.391]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.391]             }
[17:39:27.391]             else {
[17:39:27.391]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.391]             }
[17:39:27.391]             {
[17:39:27.391]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.391]                   0L) {
[17:39:27.391]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.391]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.391]                   base::options(opts)
[17:39:27.391]                 }
[17:39:27.391]                 {
[17:39:27.391]                   {
[17:39:27.391]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:27.391]                     NULL
[17:39:27.391]                   }
[17:39:27.391]                   options(future.plan = NULL)
[17:39:27.391]                   if (is.na(NA_character_)) 
[17:39:27.391]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.391]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.391]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.391]                     .init = FALSE)
[17:39:27.391]                 }
[17:39:27.391]             }
[17:39:27.391]         }
[17:39:27.391]     })
[17:39:27.391]     if (TRUE) {
[17:39:27.391]         base::sink(type = "output", split = FALSE)
[17:39:27.391]         if (TRUE) {
[17:39:27.391]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.391]         }
[17:39:27.391]         else {
[17:39:27.391]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.391]         }
[17:39:27.391]         base::close(...future.stdout)
[17:39:27.391]         ...future.stdout <- NULL
[17:39:27.391]     }
[17:39:27.391]     ...future.result$conditions <- ...future.conditions
[17:39:27.391]     ...future.result$finished <- base::Sys.time()
[17:39:27.391]     ...future.result
[17:39:27.391] }
[17:39:27.393] assign_globals() ...
[17:39:27.394] List of 1
[17:39:27.394]  $ a: num 1
[17:39:27.394]  - attr(*, "where")=List of 1
[17:39:27.394]   ..$ a:<environment: R_EmptyEnv> 
[17:39:27.394]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:27.394]  - attr(*, "resolved")= logi FALSE
[17:39:27.394]  - attr(*, "total_size")= num 56
[17:39:27.394]  - attr(*, "already-done")= logi TRUE
[17:39:27.397] - copied ‘a’ to environment
[17:39:27.397] assign_globals() ... done
[17:39:27.397] requestCore(): workers = 2
[17:39:27.399] MulticoreFuture started
[17:39:27.399] - Launch lazy future ... done
[17:39:27.399] run() for ‘MulticoreFuture’ ... done
[17:39:27.400] result() for MulticoreFuture ...
[17:39:27.400] plan(): Setting new future strategy stack:
[17:39:27.400] List of future strategies:
[17:39:27.400] 1. sequential:
[17:39:27.400]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.400]    - tweaked: FALSE
[17:39:27.400]    - call: NULL
[17:39:27.401] plan(): nbrOfWorkers() = 1
[17:39:27.403] plan(): Setting new future strategy stack:
[17:39:27.403] List of future strategies:
[17:39:27.403] 1. multicore:
[17:39:27.403]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:27.403]    - tweaked: FALSE
[17:39:27.403]    - call: plan(strategy)
[17:39:27.408] plan(): nbrOfWorkers() = 2
[17:39:27.409] result() for MulticoreFuture ...
[17:39:27.409] result() for MulticoreFuture ... done
[17:39:27.409] result() for MulticoreFuture ... done
[17:39:27.410] result() for MulticoreFuture ...
[17:39:27.410] result() for MulticoreFuture ... done
[17:39:27.410] getGlobalsAndPackages() ...
[17:39:27.410] Searching for globals...
[17:39:27.411] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:27.411] Searching for globals ... DONE
[17:39:27.412] Resolving globals: FALSE
[17:39:27.412] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:27.413] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:27.413] - globals: [1] ‘a’
[17:39:27.413] 
[17:39:27.413] getGlobalsAndPackages() ... DONE
[17:39:27.413] run() for ‘Future’ ...
[17:39:27.413] - state: ‘created’
[17:39:27.414] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:27.418] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:27.418] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:27.418]   - Field: ‘label’
[17:39:27.418]   - Field: ‘local’
[17:39:27.418]   - Field: ‘owner’
[17:39:27.418]   - Field: ‘envir’
[17:39:27.418]   - Field: ‘workers’
[17:39:27.418]   - Field: ‘packages’
[17:39:27.419]   - Field: ‘gc’
[17:39:27.419]   - Field: ‘job’
[17:39:27.419]   - Field: ‘conditions’
[17:39:27.419]   - Field: ‘expr’
[17:39:27.419]   - Field: ‘uuid’
[17:39:27.419]   - Field: ‘seed’
[17:39:27.419]   - Field: ‘version’
[17:39:27.419]   - Field: ‘result’
[17:39:27.419]   - Field: ‘asynchronous’
[17:39:27.420]   - Field: ‘calls’
[17:39:27.420]   - Field: ‘globals’
[17:39:27.420]   - Field: ‘stdout’
[17:39:27.420]   - Field: ‘earlySignal’
[17:39:27.420]   - Field: ‘lazy’
[17:39:27.420]   - Field: ‘state’
[17:39:27.420] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:27.420] - Launch lazy future ...
[17:39:27.421] Packages needed by the future expression (n = 0): <none>
[17:39:27.421] Packages needed by future strategies (n = 0): <none>
[17:39:27.421] {
[17:39:27.421]     {
[17:39:27.421]         {
[17:39:27.421]             ...future.startTime <- base::Sys.time()
[17:39:27.421]             {
[17:39:27.421]                 {
[17:39:27.421]                   {
[17:39:27.421]                     {
[17:39:27.421]                       base::local({
[17:39:27.421]                         has_future <- base::requireNamespace("future", 
[17:39:27.421]                           quietly = TRUE)
[17:39:27.421]                         if (has_future) {
[17:39:27.421]                           ns <- base::getNamespace("future")
[17:39:27.421]                           version <- ns[[".package"]][["version"]]
[17:39:27.421]                           if (is.null(version)) 
[17:39:27.421]                             version <- utils::packageVersion("future")
[17:39:27.421]                         }
[17:39:27.421]                         else {
[17:39:27.421]                           version <- NULL
[17:39:27.421]                         }
[17:39:27.421]                         if (!has_future || version < "1.8.0") {
[17:39:27.421]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.421]                             "", base::R.version$version.string), 
[17:39:27.421]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:27.421]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.421]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.421]                               "release", "version")], collapse = " "), 
[17:39:27.421]                             hostname = base::Sys.info()[["nodename"]])
[17:39:27.421]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.421]                             info)
[17:39:27.421]                           info <- base::paste(info, collapse = "; ")
[17:39:27.421]                           if (!has_future) {
[17:39:27.421]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.421]                               info)
[17:39:27.421]                           }
[17:39:27.421]                           else {
[17:39:27.421]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.421]                               info, version)
[17:39:27.421]                           }
[17:39:27.421]                           base::stop(msg)
[17:39:27.421]                         }
[17:39:27.421]                       })
[17:39:27.421]                     }
[17:39:27.421]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:27.421]                     base::options(mc.cores = 1L)
[17:39:27.421]                   }
[17:39:27.421]                   ...future.strategy.old <- future::plan("list")
[17:39:27.421]                   options(future.plan = NULL)
[17:39:27.421]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.421]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.421]                 }
[17:39:27.421]                 ...future.workdir <- getwd()
[17:39:27.421]             }
[17:39:27.421]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.421]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.421]         }
[17:39:27.421]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.421]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.421]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.421]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.421]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.421]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.421]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.421]             base::names(...future.oldOptions))
[17:39:27.421]     }
[17:39:27.421]     if (FALSE) {
[17:39:27.421]     }
[17:39:27.421]     else {
[17:39:27.421]         if (TRUE) {
[17:39:27.421]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.421]                 open = "w")
[17:39:27.421]         }
[17:39:27.421]         else {
[17:39:27.421]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.421]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.421]         }
[17:39:27.421]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.421]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.421]             base::sink(type = "output", split = FALSE)
[17:39:27.421]             base::close(...future.stdout)
[17:39:27.421]         }, add = TRUE)
[17:39:27.421]     }
[17:39:27.421]     ...future.frame <- base::sys.nframe()
[17:39:27.421]     ...future.conditions <- base::list()
[17:39:27.421]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.421]     if (FALSE) {
[17:39:27.421]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.421]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.421]     }
[17:39:27.421]     ...future.result <- base::tryCatch({
[17:39:27.421]         base::withCallingHandlers({
[17:39:27.421]             ...future.value <- base::withVisible(base::local({
[17:39:27.421]                 withCallingHandlers({
[17:39:27.421]                   {
[17:39:27.421]                     2 * a
[17:39:27.421]                   }
[17:39:27.421]                 }, immediateCondition = function(cond) {
[17:39:27.421]                   save_rds <- function (object, pathname, ...) 
[17:39:27.421]                   {
[17:39:27.421]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:27.421]                     if (file_test("-f", pathname_tmp)) {
[17:39:27.421]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.421]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:27.421]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.421]                         fi_tmp[["mtime"]])
[17:39:27.421]                     }
[17:39:27.421]                     tryCatch({
[17:39:27.421]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:27.421]                     }, error = function(ex) {
[17:39:27.421]                       msg <- conditionMessage(ex)
[17:39:27.421]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.421]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:27.421]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.421]                         fi_tmp[["mtime"]], msg)
[17:39:27.421]                       ex$message <- msg
[17:39:27.421]                       stop(ex)
[17:39:27.421]                     })
[17:39:27.421]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:27.421]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:27.421]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:27.421]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.421]                       fi <- file.info(pathname)
[17:39:27.421]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:27.421]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.421]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:27.421]                         fi[["size"]], fi[["mtime"]])
[17:39:27.421]                       stop(msg)
[17:39:27.421]                     }
[17:39:27.421]                     invisible(pathname)
[17:39:27.421]                   }
[17:39:27.421]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:27.421]                     rootPath = tempdir()) 
[17:39:27.421]                   {
[17:39:27.421]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:27.421]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:27.421]                       tmpdir = path, fileext = ".rds")
[17:39:27.421]                     save_rds(obj, file)
[17:39:27.421]                   }
[17:39:27.421]                   saveImmediateCondition(cond, path = "/tmp/RtmpuISvVj/.future/immediateConditions")
[17:39:27.421]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.421]                   {
[17:39:27.421]                     inherits <- base::inherits
[17:39:27.421]                     invokeRestart <- base::invokeRestart
[17:39:27.421]                     is.null <- base::is.null
[17:39:27.421]                     muffled <- FALSE
[17:39:27.421]                     if (inherits(cond, "message")) {
[17:39:27.421]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:27.421]                       if (muffled) 
[17:39:27.421]                         invokeRestart("muffleMessage")
[17:39:27.421]                     }
[17:39:27.421]                     else if (inherits(cond, "warning")) {
[17:39:27.421]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:27.421]                       if (muffled) 
[17:39:27.421]                         invokeRestart("muffleWarning")
[17:39:27.421]                     }
[17:39:27.421]                     else if (inherits(cond, "condition")) {
[17:39:27.421]                       if (!is.null(pattern)) {
[17:39:27.421]                         computeRestarts <- base::computeRestarts
[17:39:27.421]                         grepl <- base::grepl
[17:39:27.421]                         restarts <- computeRestarts(cond)
[17:39:27.421]                         for (restart in restarts) {
[17:39:27.421]                           name <- restart$name
[17:39:27.421]                           if (is.null(name)) 
[17:39:27.421]                             next
[17:39:27.421]                           if (!grepl(pattern, name)) 
[17:39:27.421]                             next
[17:39:27.421]                           invokeRestart(restart)
[17:39:27.421]                           muffled <- TRUE
[17:39:27.421]                           break
[17:39:27.421]                         }
[17:39:27.421]                       }
[17:39:27.421]                     }
[17:39:27.421]                     invisible(muffled)
[17:39:27.421]                   }
[17:39:27.421]                   muffleCondition(cond)
[17:39:27.421]                 })
[17:39:27.421]             }))
[17:39:27.421]             future::FutureResult(value = ...future.value$value, 
[17:39:27.421]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.421]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.421]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.421]                     ...future.globalenv.names))
[17:39:27.421]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.421]         }, condition = base::local({
[17:39:27.421]             c <- base::c
[17:39:27.421]             inherits <- base::inherits
[17:39:27.421]             invokeRestart <- base::invokeRestart
[17:39:27.421]             length <- base::length
[17:39:27.421]             list <- base::list
[17:39:27.421]             seq.int <- base::seq.int
[17:39:27.421]             signalCondition <- base::signalCondition
[17:39:27.421]             sys.calls <- base::sys.calls
[17:39:27.421]             `[[` <- base::`[[`
[17:39:27.421]             `+` <- base::`+`
[17:39:27.421]             `<<-` <- base::`<<-`
[17:39:27.421]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.421]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.421]                   3L)]
[17:39:27.421]             }
[17:39:27.421]             function(cond) {
[17:39:27.421]                 is_error <- inherits(cond, "error")
[17:39:27.421]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.421]                   NULL)
[17:39:27.421]                 if (is_error) {
[17:39:27.421]                   sessionInformation <- function() {
[17:39:27.421]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.421]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.421]                       search = base::search(), system = base::Sys.info())
[17:39:27.421]                   }
[17:39:27.421]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.421]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.421]                     cond$call), session = sessionInformation(), 
[17:39:27.421]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.421]                   signalCondition(cond)
[17:39:27.421]                 }
[17:39:27.421]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.421]                 "immediateCondition"))) {
[17:39:27.421]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.421]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.421]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.421]                   if (TRUE && !signal) {
[17:39:27.421]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.421]                     {
[17:39:27.421]                       inherits <- base::inherits
[17:39:27.421]                       invokeRestart <- base::invokeRestart
[17:39:27.421]                       is.null <- base::is.null
[17:39:27.421]                       muffled <- FALSE
[17:39:27.421]                       if (inherits(cond, "message")) {
[17:39:27.421]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.421]                         if (muffled) 
[17:39:27.421]                           invokeRestart("muffleMessage")
[17:39:27.421]                       }
[17:39:27.421]                       else if (inherits(cond, "warning")) {
[17:39:27.421]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.421]                         if (muffled) 
[17:39:27.421]                           invokeRestart("muffleWarning")
[17:39:27.421]                       }
[17:39:27.421]                       else if (inherits(cond, "condition")) {
[17:39:27.421]                         if (!is.null(pattern)) {
[17:39:27.421]                           computeRestarts <- base::computeRestarts
[17:39:27.421]                           grepl <- base::grepl
[17:39:27.421]                           restarts <- computeRestarts(cond)
[17:39:27.421]                           for (restart in restarts) {
[17:39:27.421]                             name <- restart$name
[17:39:27.421]                             if (is.null(name)) 
[17:39:27.421]                               next
[17:39:27.421]                             if (!grepl(pattern, name)) 
[17:39:27.421]                               next
[17:39:27.421]                             invokeRestart(restart)
[17:39:27.421]                             muffled <- TRUE
[17:39:27.421]                             break
[17:39:27.421]                           }
[17:39:27.421]                         }
[17:39:27.421]                       }
[17:39:27.421]                       invisible(muffled)
[17:39:27.421]                     }
[17:39:27.421]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.421]                   }
[17:39:27.421]                 }
[17:39:27.421]                 else {
[17:39:27.421]                   if (TRUE) {
[17:39:27.421]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.421]                     {
[17:39:27.421]                       inherits <- base::inherits
[17:39:27.421]                       invokeRestart <- base::invokeRestart
[17:39:27.421]                       is.null <- base::is.null
[17:39:27.421]                       muffled <- FALSE
[17:39:27.421]                       if (inherits(cond, "message")) {
[17:39:27.421]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.421]                         if (muffled) 
[17:39:27.421]                           invokeRestart("muffleMessage")
[17:39:27.421]                       }
[17:39:27.421]                       else if (inherits(cond, "warning")) {
[17:39:27.421]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.421]                         if (muffled) 
[17:39:27.421]                           invokeRestart("muffleWarning")
[17:39:27.421]                       }
[17:39:27.421]                       else if (inherits(cond, "condition")) {
[17:39:27.421]                         if (!is.null(pattern)) {
[17:39:27.421]                           computeRestarts <- base::computeRestarts
[17:39:27.421]                           grepl <- base::grepl
[17:39:27.421]                           restarts <- computeRestarts(cond)
[17:39:27.421]                           for (restart in restarts) {
[17:39:27.421]                             name <- restart$name
[17:39:27.421]                             if (is.null(name)) 
[17:39:27.421]                               next
[17:39:27.421]                             if (!grepl(pattern, name)) 
[17:39:27.421]                               next
[17:39:27.421]                             invokeRestart(restart)
[17:39:27.421]                             muffled <- TRUE
[17:39:27.421]                             break
[17:39:27.421]                           }
[17:39:27.421]                         }
[17:39:27.421]                       }
[17:39:27.421]                       invisible(muffled)
[17:39:27.421]                     }
[17:39:27.421]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.421]                   }
[17:39:27.421]                 }
[17:39:27.421]             }
[17:39:27.421]         }))
[17:39:27.421]     }, error = function(ex) {
[17:39:27.421]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.421]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.421]                 ...future.rng), started = ...future.startTime, 
[17:39:27.421]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.421]             version = "1.8"), class = "FutureResult")
[17:39:27.421]     }, finally = {
[17:39:27.421]         if (!identical(...future.workdir, getwd())) 
[17:39:27.421]             setwd(...future.workdir)
[17:39:27.421]         {
[17:39:27.421]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.421]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.421]             }
[17:39:27.421]             base::options(...future.oldOptions)
[17:39:27.421]             if (.Platform$OS.type == "windows") {
[17:39:27.421]                 old_names <- names(...future.oldEnvVars)
[17:39:27.421]                 envs <- base::Sys.getenv()
[17:39:27.421]                 names <- names(envs)
[17:39:27.421]                 common <- intersect(names, old_names)
[17:39:27.421]                 added <- setdiff(names, old_names)
[17:39:27.421]                 removed <- setdiff(old_names, names)
[17:39:27.421]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.421]                   envs[common]]
[17:39:27.421]                 NAMES <- toupper(changed)
[17:39:27.421]                 args <- list()
[17:39:27.421]                 for (kk in seq_along(NAMES)) {
[17:39:27.421]                   name <- changed[[kk]]
[17:39:27.421]                   NAME <- NAMES[[kk]]
[17:39:27.421]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.421]                     next
[17:39:27.421]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.421]                 }
[17:39:27.421]                 NAMES <- toupper(added)
[17:39:27.421]                 for (kk in seq_along(NAMES)) {
[17:39:27.421]                   name <- added[[kk]]
[17:39:27.421]                   NAME <- NAMES[[kk]]
[17:39:27.421]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.421]                     next
[17:39:27.421]                   args[[name]] <- ""
[17:39:27.421]                 }
[17:39:27.421]                 NAMES <- toupper(removed)
[17:39:27.421]                 for (kk in seq_along(NAMES)) {
[17:39:27.421]                   name <- removed[[kk]]
[17:39:27.421]                   NAME <- NAMES[[kk]]
[17:39:27.421]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.421]                     next
[17:39:27.421]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.421]                 }
[17:39:27.421]                 if (length(args) > 0) 
[17:39:27.421]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.421]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.421]             }
[17:39:27.421]             else {
[17:39:27.421]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.421]             }
[17:39:27.421]             {
[17:39:27.421]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.421]                   0L) {
[17:39:27.421]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.421]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.421]                   base::options(opts)
[17:39:27.421]                 }
[17:39:27.421]                 {
[17:39:27.421]                   {
[17:39:27.421]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:27.421]                     NULL
[17:39:27.421]                   }
[17:39:27.421]                   options(future.plan = NULL)
[17:39:27.421]                   if (is.na(NA_character_)) 
[17:39:27.421]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.421]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.421]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.421]                     .init = FALSE)
[17:39:27.421]                 }
[17:39:27.421]             }
[17:39:27.421]         }
[17:39:27.421]     })
[17:39:27.421]     if (TRUE) {
[17:39:27.421]         base::sink(type = "output", split = FALSE)
[17:39:27.421]         if (TRUE) {
[17:39:27.421]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.421]         }
[17:39:27.421]         else {
[17:39:27.421]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.421]         }
[17:39:27.421]         base::close(...future.stdout)
[17:39:27.421]         ...future.stdout <- NULL
[17:39:27.421]     }
[17:39:27.421]     ...future.result$conditions <- ...future.conditions
[17:39:27.421]     ...future.result$finished <- base::Sys.time()
[17:39:27.421]     ...future.result
[17:39:27.421] }
[17:39:27.424] assign_globals() ...
[17:39:27.424] List of 1
[17:39:27.424]  $ a: num 1
[17:39:27.424]  - attr(*, "where")=List of 1
[17:39:27.424]   ..$ a:<environment: R_EmptyEnv> 
[17:39:27.424]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:27.424]  - attr(*, "resolved")= logi FALSE
[17:39:27.424]  - attr(*, "total_size")= num 56
[17:39:27.424]  - attr(*, "already-done")= logi TRUE
[17:39:27.427] - copied ‘a’ to environment
[17:39:27.427] assign_globals() ... done
[17:39:27.427] requestCore(): workers = 2
[17:39:27.429] MulticoreFuture started
[17:39:27.429] - Launch lazy future ... done
[17:39:27.430] run() for ‘MulticoreFuture’ ... done
[17:39:27.430] result() for MulticoreFuture ...
[17:39:27.430] plan(): Setting new future strategy stack:
[17:39:27.430] List of future strategies:
[17:39:27.430] 1. sequential:
[17:39:27.430]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.430]    - tweaked: FALSE
[17:39:27.430]    - call: NULL
[17:39:27.431] plan(): nbrOfWorkers() = 1
[17:39:27.438] plan(): Setting new future strategy stack:
[17:39:27.438] List of future strategies:
[17:39:27.438] 1. multicore:
[17:39:27.438]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:27.438]    - tweaked: FALSE
[17:39:27.438]    - call: plan(strategy)
[17:39:27.443] plan(): nbrOfWorkers() = 2
[17:39:27.444] result() for MulticoreFuture ...
[17:39:27.447] result() for MulticoreFuture ... done
[17:39:27.447] result() for MulticoreFuture ... done
[17:39:27.447] result() for MulticoreFuture ...
[17:39:27.447] result() for MulticoreFuture ... done
[17:39:27.447] getGlobalsAndPackages() ...
[17:39:27.448] Searching for globals...
[17:39:27.449] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:27.449] Searching for globals ... DONE
[17:39:27.449] Resolving globals: FALSE
[17:39:27.450] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:27.450] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:27.450] - globals: [1] ‘a’
[17:39:27.451] 
[17:39:27.451] getGlobalsAndPackages() ... DONE
[17:39:27.451] run() for ‘Future’ ...
[17:39:27.451] - state: ‘created’
[17:39:27.451] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:27.456] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:27.456] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:27.456]   - Field: ‘label’
[17:39:27.456]   - Field: ‘local’
[17:39:27.456]   - Field: ‘owner’
[17:39:27.456]   - Field: ‘envir’
[17:39:27.457]   - Field: ‘workers’
[17:39:27.457]   - Field: ‘packages’
[17:39:27.457]   - Field: ‘gc’
[17:39:27.457]   - Field: ‘job’
[17:39:27.457]   - Field: ‘conditions’
[17:39:27.457]   - Field: ‘expr’
[17:39:27.457]   - Field: ‘uuid’
[17:39:27.457]   - Field: ‘seed’
[17:39:27.458]   - Field: ‘version’
[17:39:27.458]   - Field: ‘result’
[17:39:27.458]   - Field: ‘asynchronous’
[17:39:27.458]   - Field: ‘calls’
[17:39:27.458]   - Field: ‘globals’
[17:39:27.458]   - Field: ‘stdout’
[17:39:27.458]   - Field: ‘earlySignal’
[17:39:27.458]   - Field: ‘lazy’
[17:39:27.458]   - Field: ‘state’
[17:39:27.459] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:27.459] - Launch lazy future ...
[17:39:27.459] Packages needed by the future expression (n = 0): <none>
[17:39:27.459] Packages needed by future strategies (n = 0): <none>
[17:39:27.460] {
[17:39:27.460]     {
[17:39:27.460]         {
[17:39:27.460]             ...future.startTime <- base::Sys.time()
[17:39:27.460]             {
[17:39:27.460]                 {
[17:39:27.460]                   {
[17:39:27.460]                     {
[17:39:27.460]                       base::local({
[17:39:27.460]                         has_future <- base::requireNamespace("future", 
[17:39:27.460]                           quietly = TRUE)
[17:39:27.460]                         if (has_future) {
[17:39:27.460]                           ns <- base::getNamespace("future")
[17:39:27.460]                           version <- ns[[".package"]][["version"]]
[17:39:27.460]                           if (is.null(version)) 
[17:39:27.460]                             version <- utils::packageVersion("future")
[17:39:27.460]                         }
[17:39:27.460]                         else {
[17:39:27.460]                           version <- NULL
[17:39:27.460]                         }
[17:39:27.460]                         if (!has_future || version < "1.8.0") {
[17:39:27.460]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.460]                             "", base::R.version$version.string), 
[17:39:27.460]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:27.460]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.460]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.460]                               "release", "version")], collapse = " "), 
[17:39:27.460]                             hostname = base::Sys.info()[["nodename"]])
[17:39:27.460]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.460]                             info)
[17:39:27.460]                           info <- base::paste(info, collapse = "; ")
[17:39:27.460]                           if (!has_future) {
[17:39:27.460]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.460]                               info)
[17:39:27.460]                           }
[17:39:27.460]                           else {
[17:39:27.460]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.460]                               info, version)
[17:39:27.460]                           }
[17:39:27.460]                           base::stop(msg)
[17:39:27.460]                         }
[17:39:27.460]                       })
[17:39:27.460]                     }
[17:39:27.460]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:27.460]                     base::options(mc.cores = 1L)
[17:39:27.460]                   }
[17:39:27.460]                   ...future.strategy.old <- future::plan("list")
[17:39:27.460]                   options(future.plan = NULL)
[17:39:27.460]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.460]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.460]                 }
[17:39:27.460]                 ...future.workdir <- getwd()
[17:39:27.460]             }
[17:39:27.460]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.460]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.460]         }
[17:39:27.460]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.460]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.460]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.460]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.460]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.460]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.460]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.460]             base::names(...future.oldOptions))
[17:39:27.460]     }
[17:39:27.460]     if (FALSE) {
[17:39:27.460]     }
[17:39:27.460]     else {
[17:39:27.460]         if (TRUE) {
[17:39:27.460]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.460]                 open = "w")
[17:39:27.460]         }
[17:39:27.460]         else {
[17:39:27.460]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.460]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.460]         }
[17:39:27.460]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.460]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.460]             base::sink(type = "output", split = FALSE)
[17:39:27.460]             base::close(...future.stdout)
[17:39:27.460]         }, add = TRUE)
[17:39:27.460]     }
[17:39:27.460]     ...future.frame <- base::sys.nframe()
[17:39:27.460]     ...future.conditions <- base::list()
[17:39:27.460]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.460]     if (FALSE) {
[17:39:27.460]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.460]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.460]     }
[17:39:27.460]     ...future.result <- base::tryCatch({
[17:39:27.460]         base::withCallingHandlers({
[17:39:27.460]             ...future.value <- base::withVisible(base::local({
[17:39:27.460]                 withCallingHandlers({
[17:39:27.460]                   {
[17:39:27.460]                     2 * a
[17:39:27.460]                   }
[17:39:27.460]                 }, immediateCondition = function(cond) {
[17:39:27.460]                   save_rds <- function (object, pathname, ...) 
[17:39:27.460]                   {
[17:39:27.460]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:27.460]                     if (file_test("-f", pathname_tmp)) {
[17:39:27.460]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.460]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:27.460]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.460]                         fi_tmp[["mtime"]])
[17:39:27.460]                     }
[17:39:27.460]                     tryCatch({
[17:39:27.460]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:27.460]                     }, error = function(ex) {
[17:39:27.460]                       msg <- conditionMessage(ex)
[17:39:27.460]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.460]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:27.460]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.460]                         fi_tmp[["mtime"]], msg)
[17:39:27.460]                       ex$message <- msg
[17:39:27.460]                       stop(ex)
[17:39:27.460]                     })
[17:39:27.460]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:27.460]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:27.460]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:27.460]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.460]                       fi <- file.info(pathname)
[17:39:27.460]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:27.460]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.460]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:27.460]                         fi[["size"]], fi[["mtime"]])
[17:39:27.460]                       stop(msg)
[17:39:27.460]                     }
[17:39:27.460]                     invisible(pathname)
[17:39:27.460]                   }
[17:39:27.460]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:27.460]                     rootPath = tempdir()) 
[17:39:27.460]                   {
[17:39:27.460]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:27.460]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:27.460]                       tmpdir = path, fileext = ".rds")
[17:39:27.460]                     save_rds(obj, file)
[17:39:27.460]                   }
[17:39:27.460]                   saveImmediateCondition(cond, path = "/tmp/RtmpuISvVj/.future/immediateConditions")
[17:39:27.460]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.460]                   {
[17:39:27.460]                     inherits <- base::inherits
[17:39:27.460]                     invokeRestart <- base::invokeRestart
[17:39:27.460]                     is.null <- base::is.null
[17:39:27.460]                     muffled <- FALSE
[17:39:27.460]                     if (inherits(cond, "message")) {
[17:39:27.460]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:27.460]                       if (muffled) 
[17:39:27.460]                         invokeRestart("muffleMessage")
[17:39:27.460]                     }
[17:39:27.460]                     else if (inherits(cond, "warning")) {
[17:39:27.460]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:27.460]                       if (muffled) 
[17:39:27.460]                         invokeRestart("muffleWarning")
[17:39:27.460]                     }
[17:39:27.460]                     else if (inherits(cond, "condition")) {
[17:39:27.460]                       if (!is.null(pattern)) {
[17:39:27.460]                         computeRestarts <- base::computeRestarts
[17:39:27.460]                         grepl <- base::grepl
[17:39:27.460]                         restarts <- computeRestarts(cond)
[17:39:27.460]                         for (restart in restarts) {
[17:39:27.460]                           name <- restart$name
[17:39:27.460]                           if (is.null(name)) 
[17:39:27.460]                             next
[17:39:27.460]                           if (!grepl(pattern, name)) 
[17:39:27.460]                             next
[17:39:27.460]                           invokeRestart(restart)
[17:39:27.460]                           muffled <- TRUE
[17:39:27.460]                           break
[17:39:27.460]                         }
[17:39:27.460]                       }
[17:39:27.460]                     }
[17:39:27.460]                     invisible(muffled)
[17:39:27.460]                   }
[17:39:27.460]                   muffleCondition(cond)
[17:39:27.460]                 })
[17:39:27.460]             }))
[17:39:27.460]             future::FutureResult(value = ...future.value$value, 
[17:39:27.460]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.460]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.460]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.460]                     ...future.globalenv.names))
[17:39:27.460]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.460]         }, condition = base::local({
[17:39:27.460]             c <- base::c
[17:39:27.460]             inherits <- base::inherits
[17:39:27.460]             invokeRestart <- base::invokeRestart
[17:39:27.460]             length <- base::length
[17:39:27.460]             list <- base::list
[17:39:27.460]             seq.int <- base::seq.int
[17:39:27.460]             signalCondition <- base::signalCondition
[17:39:27.460]             sys.calls <- base::sys.calls
[17:39:27.460]             `[[` <- base::`[[`
[17:39:27.460]             `+` <- base::`+`
[17:39:27.460]             `<<-` <- base::`<<-`
[17:39:27.460]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.460]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.460]                   3L)]
[17:39:27.460]             }
[17:39:27.460]             function(cond) {
[17:39:27.460]                 is_error <- inherits(cond, "error")
[17:39:27.460]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.460]                   NULL)
[17:39:27.460]                 if (is_error) {
[17:39:27.460]                   sessionInformation <- function() {
[17:39:27.460]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.460]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.460]                       search = base::search(), system = base::Sys.info())
[17:39:27.460]                   }
[17:39:27.460]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.460]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.460]                     cond$call), session = sessionInformation(), 
[17:39:27.460]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.460]                   signalCondition(cond)
[17:39:27.460]                 }
[17:39:27.460]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.460]                 "immediateCondition"))) {
[17:39:27.460]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.460]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.460]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.460]                   if (TRUE && !signal) {
[17:39:27.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.460]                     {
[17:39:27.460]                       inherits <- base::inherits
[17:39:27.460]                       invokeRestart <- base::invokeRestart
[17:39:27.460]                       is.null <- base::is.null
[17:39:27.460]                       muffled <- FALSE
[17:39:27.460]                       if (inherits(cond, "message")) {
[17:39:27.460]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.460]                         if (muffled) 
[17:39:27.460]                           invokeRestart("muffleMessage")
[17:39:27.460]                       }
[17:39:27.460]                       else if (inherits(cond, "warning")) {
[17:39:27.460]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.460]                         if (muffled) 
[17:39:27.460]                           invokeRestart("muffleWarning")
[17:39:27.460]                       }
[17:39:27.460]                       else if (inherits(cond, "condition")) {
[17:39:27.460]                         if (!is.null(pattern)) {
[17:39:27.460]                           computeRestarts <- base::computeRestarts
[17:39:27.460]                           grepl <- base::grepl
[17:39:27.460]                           restarts <- computeRestarts(cond)
[17:39:27.460]                           for (restart in restarts) {
[17:39:27.460]                             name <- restart$name
[17:39:27.460]                             if (is.null(name)) 
[17:39:27.460]                               next
[17:39:27.460]                             if (!grepl(pattern, name)) 
[17:39:27.460]                               next
[17:39:27.460]                             invokeRestart(restart)
[17:39:27.460]                             muffled <- TRUE
[17:39:27.460]                             break
[17:39:27.460]                           }
[17:39:27.460]                         }
[17:39:27.460]                       }
[17:39:27.460]                       invisible(muffled)
[17:39:27.460]                     }
[17:39:27.460]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.460]                   }
[17:39:27.460]                 }
[17:39:27.460]                 else {
[17:39:27.460]                   if (TRUE) {
[17:39:27.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.460]                     {
[17:39:27.460]                       inherits <- base::inherits
[17:39:27.460]                       invokeRestart <- base::invokeRestart
[17:39:27.460]                       is.null <- base::is.null
[17:39:27.460]                       muffled <- FALSE
[17:39:27.460]                       if (inherits(cond, "message")) {
[17:39:27.460]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.460]                         if (muffled) 
[17:39:27.460]                           invokeRestart("muffleMessage")
[17:39:27.460]                       }
[17:39:27.460]                       else if (inherits(cond, "warning")) {
[17:39:27.460]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.460]                         if (muffled) 
[17:39:27.460]                           invokeRestart("muffleWarning")
[17:39:27.460]                       }
[17:39:27.460]                       else if (inherits(cond, "condition")) {
[17:39:27.460]                         if (!is.null(pattern)) {
[17:39:27.460]                           computeRestarts <- base::computeRestarts
[17:39:27.460]                           grepl <- base::grepl
[17:39:27.460]                           restarts <- computeRestarts(cond)
[17:39:27.460]                           for (restart in restarts) {
[17:39:27.460]                             name <- restart$name
[17:39:27.460]                             if (is.null(name)) 
[17:39:27.460]                               next
[17:39:27.460]                             if (!grepl(pattern, name)) 
[17:39:27.460]                               next
[17:39:27.460]                             invokeRestart(restart)
[17:39:27.460]                             muffled <- TRUE
[17:39:27.460]                             break
[17:39:27.460]                           }
[17:39:27.460]                         }
[17:39:27.460]                       }
[17:39:27.460]                       invisible(muffled)
[17:39:27.460]                     }
[17:39:27.460]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.460]                   }
[17:39:27.460]                 }
[17:39:27.460]             }
[17:39:27.460]         }))
[17:39:27.460]     }, error = function(ex) {
[17:39:27.460]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.460]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.460]                 ...future.rng), started = ...future.startTime, 
[17:39:27.460]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.460]             version = "1.8"), class = "FutureResult")
[17:39:27.460]     }, finally = {
[17:39:27.460]         if (!identical(...future.workdir, getwd())) 
[17:39:27.460]             setwd(...future.workdir)
[17:39:27.460]         {
[17:39:27.460]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.460]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.460]             }
[17:39:27.460]             base::options(...future.oldOptions)
[17:39:27.460]             if (.Platform$OS.type == "windows") {
[17:39:27.460]                 old_names <- names(...future.oldEnvVars)
[17:39:27.460]                 envs <- base::Sys.getenv()
[17:39:27.460]                 names <- names(envs)
[17:39:27.460]                 common <- intersect(names, old_names)
[17:39:27.460]                 added <- setdiff(names, old_names)
[17:39:27.460]                 removed <- setdiff(old_names, names)
[17:39:27.460]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.460]                   envs[common]]
[17:39:27.460]                 NAMES <- toupper(changed)
[17:39:27.460]                 args <- list()
[17:39:27.460]                 for (kk in seq_along(NAMES)) {
[17:39:27.460]                   name <- changed[[kk]]
[17:39:27.460]                   NAME <- NAMES[[kk]]
[17:39:27.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.460]                     next
[17:39:27.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.460]                 }
[17:39:27.460]                 NAMES <- toupper(added)
[17:39:27.460]                 for (kk in seq_along(NAMES)) {
[17:39:27.460]                   name <- added[[kk]]
[17:39:27.460]                   NAME <- NAMES[[kk]]
[17:39:27.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.460]                     next
[17:39:27.460]                   args[[name]] <- ""
[17:39:27.460]                 }
[17:39:27.460]                 NAMES <- toupper(removed)
[17:39:27.460]                 for (kk in seq_along(NAMES)) {
[17:39:27.460]                   name <- removed[[kk]]
[17:39:27.460]                   NAME <- NAMES[[kk]]
[17:39:27.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.460]                     next
[17:39:27.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.460]                 }
[17:39:27.460]                 if (length(args) > 0) 
[17:39:27.460]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.460]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.460]             }
[17:39:27.460]             else {
[17:39:27.460]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.460]             }
[17:39:27.460]             {
[17:39:27.460]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.460]                   0L) {
[17:39:27.460]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.460]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.460]                   base::options(opts)
[17:39:27.460]                 }
[17:39:27.460]                 {
[17:39:27.460]                   {
[17:39:27.460]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:27.460]                     NULL
[17:39:27.460]                   }
[17:39:27.460]                   options(future.plan = NULL)
[17:39:27.460]                   if (is.na(NA_character_)) 
[17:39:27.460]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.460]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.460]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.460]                     .init = FALSE)
[17:39:27.460]                 }
[17:39:27.460]             }
[17:39:27.460]         }
[17:39:27.460]     })
[17:39:27.460]     if (TRUE) {
[17:39:27.460]         base::sink(type = "output", split = FALSE)
[17:39:27.460]         if (TRUE) {
[17:39:27.460]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.460]         }
[17:39:27.460]         else {
[17:39:27.460]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.460]         }
[17:39:27.460]         base::close(...future.stdout)
[17:39:27.460]         ...future.stdout <- NULL
[17:39:27.460]     }
[17:39:27.460]     ...future.result$conditions <- ...future.conditions
[17:39:27.460]     ...future.result$finished <- base::Sys.time()
[17:39:27.460]     ...future.result
[17:39:27.460] }
[17:39:27.462] assign_globals() ...
[17:39:27.462] List of 1
[17:39:27.462]  $ a: num 1
[17:39:27.462]  - attr(*, "where")=List of 1
[17:39:27.462]   ..$ a:<environment: R_EmptyEnv> 
[17:39:27.462]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:27.462]  - attr(*, "resolved")= logi FALSE
[17:39:27.462]  - attr(*, "total_size")= num 56
[17:39:27.462]  - attr(*, "already-done")= logi TRUE
[17:39:27.465] - copied ‘a’ to environment
[17:39:27.465] assign_globals() ... done
[17:39:27.465] requestCore(): workers = 2
[17:39:27.467] MulticoreFuture started
[17:39:27.468] - Launch lazy future ... done
[17:39:27.468] run() for ‘MulticoreFuture’ ... done
[17:39:27.468] result() for MulticoreFuture ...
[17:39:27.469] plan(): Setting new future strategy stack:
[17:39:27.469] List of future strategies:
[17:39:27.469] 1. sequential:
[17:39:27.469]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.469]    - tweaked: FALSE
[17:39:27.469]    - call: NULL
[17:39:27.470] plan(): nbrOfWorkers() = 1
[17:39:27.472] plan(): Setting new future strategy stack:
[17:39:27.472] List of future strategies:
[17:39:27.472] 1. multicore:
[17:39:27.472]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:27.472]    - tweaked: FALSE
[17:39:27.472]    - call: plan(strategy)
[17:39:27.477] plan(): nbrOfWorkers() = 2
[17:39:27.478] result() for MulticoreFuture ...
[17:39:27.478] result() for MulticoreFuture ... done
[17:39:27.479] result() for MulticoreFuture ... done
[17:39:27.479] result() for MulticoreFuture ...
[17:39:27.479] result() for MulticoreFuture ... done
[17:39:27.479] getGlobalsAndPackages() ...
[17:39:27.479] Searching for globals...
[17:39:27.481] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:27.481] Searching for globals ... DONE
[17:39:27.481] Resolving globals: FALSE
[17:39:27.481] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:27.482] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:27.482] - globals: [1] ‘a’
[17:39:27.482] 
[17:39:27.482] getGlobalsAndPackages() ... DONE
[17:39:27.483] run() for ‘Future’ ...
[17:39:27.483] - state: ‘created’
[17:39:27.483] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:27.487] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:27.487] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:27.487]   - Field: ‘label’
[17:39:27.487]   - Field: ‘local’
[17:39:27.488]   - Field: ‘owner’
[17:39:27.488]   - Field: ‘envir’
[17:39:27.488]   - Field: ‘workers’
[17:39:27.488]   - Field: ‘packages’
[17:39:27.488]   - Field: ‘gc’
[17:39:27.488]   - Field: ‘job’
[17:39:27.488]   - Field: ‘conditions’
[17:39:27.488]   - Field: ‘expr’
[17:39:27.488]   - Field: ‘uuid’
[17:39:27.489]   - Field: ‘seed’
[17:39:27.489]   - Field: ‘version’
[17:39:27.489]   - Field: ‘result’
[17:39:27.489]   - Field: ‘asynchronous’
[17:39:27.489]   - Field: ‘calls’
[17:39:27.489]   - Field: ‘globals’
[17:39:27.489]   - Field: ‘stdout’
[17:39:27.489]   - Field: ‘earlySignal’
[17:39:27.489]   - Field: ‘lazy’
[17:39:27.490]   - Field: ‘state’
[17:39:27.490] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:27.490] - Launch lazy future ...
[17:39:27.490] Packages needed by the future expression (n = 0): <none>
[17:39:27.490] Packages needed by future strategies (n = 0): <none>
[17:39:27.491] {
[17:39:27.491]     {
[17:39:27.491]         {
[17:39:27.491]             ...future.startTime <- base::Sys.time()
[17:39:27.491]             {
[17:39:27.491]                 {
[17:39:27.491]                   {
[17:39:27.491]                     {
[17:39:27.491]                       base::local({
[17:39:27.491]                         has_future <- base::requireNamespace("future", 
[17:39:27.491]                           quietly = TRUE)
[17:39:27.491]                         if (has_future) {
[17:39:27.491]                           ns <- base::getNamespace("future")
[17:39:27.491]                           version <- ns[[".package"]][["version"]]
[17:39:27.491]                           if (is.null(version)) 
[17:39:27.491]                             version <- utils::packageVersion("future")
[17:39:27.491]                         }
[17:39:27.491]                         else {
[17:39:27.491]                           version <- NULL
[17:39:27.491]                         }
[17:39:27.491]                         if (!has_future || version < "1.8.0") {
[17:39:27.491]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:27.491]                             "", base::R.version$version.string), 
[17:39:27.491]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:27.491]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:27.491]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:27.491]                               "release", "version")], collapse = " "), 
[17:39:27.491]                             hostname = base::Sys.info()[["nodename"]])
[17:39:27.491]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:27.491]                             info)
[17:39:27.491]                           info <- base::paste(info, collapse = "; ")
[17:39:27.491]                           if (!has_future) {
[17:39:27.491]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:27.491]                               info)
[17:39:27.491]                           }
[17:39:27.491]                           else {
[17:39:27.491]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:27.491]                               info, version)
[17:39:27.491]                           }
[17:39:27.491]                           base::stop(msg)
[17:39:27.491]                         }
[17:39:27.491]                       })
[17:39:27.491]                     }
[17:39:27.491]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:27.491]                     base::options(mc.cores = 1L)
[17:39:27.491]                   }
[17:39:27.491]                   ...future.strategy.old <- future::plan("list")
[17:39:27.491]                   options(future.plan = NULL)
[17:39:27.491]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.491]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:27.491]                 }
[17:39:27.491]                 ...future.workdir <- getwd()
[17:39:27.491]             }
[17:39:27.491]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:27.491]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:27.491]         }
[17:39:27.491]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:27.491]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:27.491]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:27.491]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:27.491]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:27.491]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:27.491]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:27.491]             base::names(...future.oldOptions))
[17:39:27.491]     }
[17:39:27.491]     if (FALSE) {
[17:39:27.491]     }
[17:39:27.491]     else {
[17:39:27.491]         if (TRUE) {
[17:39:27.491]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:27.491]                 open = "w")
[17:39:27.491]         }
[17:39:27.491]         else {
[17:39:27.491]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:27.491]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:27.491]         }
[17:39:27.491]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:27.491]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:27.491]             base::sink(type = "output", split = FALSE)
[17:39:27.491]             base::close(...future.stdout)
[17:39:27.491]         }, add = TRUE)
[17:39:27.491]     }
[17:39:27.491]     ...future.frame <- base::sys.nframe()
[17:39:27.491]     ...future.conditions <- base::list()
[17:39:27.491]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:27.491]     if (FALSE) {
[17:39:27.491]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:27.491]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:27.491]     }
[17:39:27.491]     ...future.result <- base::tryCatch({
[17:39:27.491]         base::withCallingHandlers({
[17:39:27.491]             ...future.value <- base::withVisible(base::local({
[17:39:27.491]                 withCallingHandlers({
[17:39:27.491]                   {
[17:39:27.491]                     2 * a
[17:39:27.491]                   }
[17:39:27.491]                 }, immediateCondition = function(cond) {
[17:39:27.491]                   save_rds <- function (object, pathname, ...) 
[17:39:27.491]                   {
[17:39:27.491]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:27.491]                     if (file_test("-f", pathname_tmp)) {
[17:39:27.491]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.491]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:27.491]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.491]                         fi_tmp[["mtime"]])
[17:39:27.491]                     }
[17:39:27.491]                     tryCatch({
[17:39:27.491]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:27.491]                     }, error = function(ex) {
[17:39:27.491]                       msg <- conditionMessage(ex)
[17:39:27.491]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.491]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:27.491]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.491]                         fi_tmp[["mtime"]], msg)
[17:39:27.491]                       ex$message <- msg
[17:39:27.491]                       stop(ex)
[17:39:27.491]                     })
[17:39:27.491]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:27.491]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:27.491]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:27.491]                       fi_tmp <- file.info(pathname_tmp)
[17:39:27.491]                       fi <- file.info(pathname)
[17:39:27.491]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:27.491]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:27.491]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:27.491]                         fi[["size"]], fi[["mtime"]])
[17:39:27.491]                       stop(msg)
[17:39:27.491]                     }
[17:39:27.491]                     invisible(pathname)
[17:39:27.491]                   }
[17:39:27.491]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:27.491]                     rootPath = tempdir()) 
[17:39:27.491]                   {
[17:39:27.491]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:27.491]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:27.491]                       tmpdir = path, fileext = ".rds")
[17:39:27.491]                     save_rds(obj, file)
[17:39:27.491]                   }
[17:39:27.491]                   saveImmediateCondition(cond, path = "/tmp/RtmpuISvVj/.future/immediateConditions")
[17:39:27.491]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.491]                   {
[17:39:27.491]                     inherits <- base::inherits
[17:39:27.491]                     invokeRestart <- base::invokeRestart
[17:39:27.491]                     is.null <- base::is.null
[17:39:27.491]                     muffled <- FALSE
[17:39:27.491]                     if (inherits(cond, "message")) {
[17:39:27.491]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:27.491]                       if (muffled) 
[17:39:27.491]                         invokeRestart("muffleMessage")
[17:39:27.491]                     }
[17:39:27.491]                     else if (inherits(cond, "warning")) {
[17:39:27.491]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:27.491]                       if (muffled) 
[17:39:27.491]                         invokeRestart("muffleWarning")
[17:39:27.491]                     }
[17:39:27.491]                     else if (inherits(cond, "condition")) {
[17:39:27.491]                       if (!is.null(pattern)) {
[17:39:27.491]                         computeRestarts <- base::computeRestarts
[17:39:27.491]                         grepl <- base::grepl
[17:39:27.491]                         restarts <- computeRestarts(cond)
[17:39:27.491]                         for (restart in restarts) {
[17:39:27.491]                           name <- restart$name
[17:39:27.491]                           if (is.null(name)) 
[17:39:27.491]                             next
[17:39:27.491]                           if (!grepl(pattern, name)) 
[17:39:27.491]                             next
[17:39:27.491]                           invokeRestart(restart)
[17:39:27.491]                           muffled <- TRUE
[17:39:27.491]                           break
[17:39:27.491]                         }
[17:39:27.491]                       }
[17:39:27.491]                     }
[17:39:27.491]                     invisible(muffled)
[17:39:27.491]                   }
[17:39:27.491]                   muffleCondition(cond)
[17:39:27.491]                 })
[17:39:27.491]             }))
[17:39:27.491]             future::FutureResult(value = ...future.value$value, 
[17:39:27.491]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.491]                   ...future.rng), globalenv = if (FALSE) 
[17:39:27.491]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:27.491]                     ...future.globalenv.names))
[17:39:27.491]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:27.491]         }, condition = base::local({
[17:39:27.491]             c <- base::c
[17:39:27.491]             inherits <- base::inherits
[17:39:27.491]             invokeRestart <- base::invokeRestart
[17:39:27.491]             length <- base::length
[17:39:27.491]             list <- base::list
[17:39:27.491]             seq.int <- base::seq.int
[17:39:27.491]             signalCondition <- base::signalCondition
[17:39:27.491]             sys.calls <- base::sys.calls
[17:39:27.491]             `[[` <- base::`[[`
[17:39:27.491]             `+` <- base::`+`
[17:39:27.491]             `<<-` <- base::`<<-`
[17:39:27.491]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:27.491]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:27.491]                   3L)]
[17:39:27.491]             }
[17:39:27.491]             function(cond) {
[17:39:27.491]                 is_error <- inherits(cond, "error")
[17:39:27.491]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:27.491]                   NULL)
[17:39:27.491]                 if (is_error) {
[17:39:27.491]                   sessionInformation <- function() {
[17:39:27.491]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:27.491]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:27.491]                       search = base::search(), system = base::Sys.info())
[17:39:27.491]                   }
[17:39:27.491]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.491]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:27.491]                     cond$call), session = sessionInformation(), 
[17:39:27.491]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:27.491]                   signalCondition(cond)
[17:39:27.491]                 }
[17:39:27.491]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:27.491]                 "immediateCondition"))) {
[17:39:27.491]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:27.491]                   ...future.conditions[[length(...future.conditions) + 
[17:39:27.491]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:27.491]                   if (TRUE && !signal) {
[17:39:27.491]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.491]                     {
[17:39:27.491]                       inherits <- base::inherits
[17:39:27.491]                       invokeRestart <- base::invokeRestart
[17:39:27.491]                       is.null <- base::is.null
[17:39:27.491]                       muffled <- FALSE
[17:39:27.491]                       if (inherits(cond, "message")) {
[17:39:27.491]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.491]                         if (muffled) 
[17:39:27.491]                           invokeRestart("muffleMessage")
[17:39:27.491]                       }
[17:39:27.491]                       else if (inherits(cond, "warning")) {
[17:39:27.491]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.491]                         if (muffled) 
[17:39:27.491]                           invokeRestart("muffleWarning")
[17:39:27.491]                       }
[17:39:27.491]                       else if (inherits(cond, "condition")) {
[17:39:27.491]                         if (!is.null(pattern)) {
[17:39:27.491]                           computeRestarts <- base::computeRestarts
[17:39:27.491]                           grepl <- base::grepl
[17:39:27.491]                           restarts <- computeRestarts(cond)
[17:39:27.491]                           for (restart in restarts) {
[17:39:27.491]                             name <- restart$name
[17:39:27.491]                             if (is.null(name)) 
[17:39:27.491]                               next
[17:39:27.491]                             if (!grepl(pattern, name)) 
[17:39:27.491]                               next
[17:39:27.491]                             invokeRestart(restart)
[17:39:27.491]                             muffled <- TRUE
[17:39:27.491]                             break
[17:39:27.491]                           }
[17:39:27.491]                         }
[17:39:27.491]                       }
[17:39:27.491]                       invisible(muffled)
[17:39:27.491]                     }
[17:39:27.491]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.491]                   }
[17:39:27.491]                 }
[17:39:27.491]                 else {
[17:39:27.491]                   if (TRUE) {
[17:39:27.491]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:27.491]                     {
[17:39:27.491]                       inherits <- base::inherits
[17:39:27.491]                       invokeRestart <- base::invokeRestart
[17:39:27.491]                       is.null <- base::is.null
[17:39:27.491]                       muffled <- FALSE
[17:39:27.491]                       if (inherits(cond, "message")) {
[17:39:27.491]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:27.491]                         if (muffled) 
[17:39:27.491]                           invokeRestart("muffleMessage")
[17:39:27.491]                       }
[17:39:27.491]                       else if (inherits(cond, "warning")) {
[17:39:27.491]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:27.491]                         if (muffled) 
[17:39:27.491]                           invokeRestart("muffleWarning")
[17:39:27.491]                       }
[17:39:27.491]                       else if (inherits(cond, "condition")) {
[17:39:27.491]                         if (!is.null(pattern)) {
[17:39:27.491]                           computeRestarts <- base::computeRestarts
[17:39:27.491]                           grepl <- base::grepl
[17:39:27.491]                           restarts <- computeRestarts(cond)
[17:39:27.491]                           for (restart in restarts) {
[17:39:27.491]                             name <- restart$name
[17:39:27.491]                             if (is.null(name)) 
[17:39:27.491]                               next
[17:39:27.491]                             if (!grepl(pattern, name)) 
[17:39:27.491]                               next
[17:39:27.491]                             invokeRestart(restart)
[17:39:27.491]                             muffled <- TRUE
[17:39:27.491]                             break
[17:39:27.491]                           }
[17:39:27.491]                         }
[17:39:27.491]                       }
[17:39:27.491]                       invisible(muffled)
[17:39:27.491]                     }
[17:39:27.491]                     muffleCondition(cond, pattern = "^muffle")
[17:39:27.491]                   }
[17:39:27.491]                 }
[17:39:27.491]             }
[17:39:27.491]         }))
[17:39:27.491]     }, error = function(ex) {
[17:39:27.491]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:27.491]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:27.491]                 ...future.rng), started = ...future.startTime, 
[17:39:27.491]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:27.491]             version = "1.8"), class = "FutureResult")
[17:39:27.491]     }, finally = {
[17:39:27.491]         if (!identical(...future.workdir, getwd())) 
[17:39:27.491]             setwd(...future.workdir)
[17:39:27.491]         {
[17:39:27.491]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:27.491]                 ...future.oldOptions$nwarnings <- NULL
[17:39:27.491]             }
[17:39:27.491]             base::options(...future.oldOptions)
[17:39:27.491]             if (.Platform$OS.type == "windows") {
[17:39:27.491]                 old_names <- names(...future.oldEnvVars)
[17:39:27.491]                 envs <- base::Sys.getenv()
[17:39:27.491]                 names <- names(envs)
[17:39:27.491]                 common <- intersect(names, old_names)
[17:39:27.491]                 added <- setdiff(names, old_names)
[17:39:27.491]                 removed <- setdiff(old_names, names)
[17:39:27.491]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:27.491]                   envs[common]]
[17:39:27.491]                 NAMES <- toupper(changed)
[17:39:27.491]                 args <- list()
[17:39:27.491]                 for (kk in seq_along(NAMES)) {
[17:39:27.491]                   name <- changed[[kk]]
[17:39:27.491]                   NAME <- NAMES[[kk]]
[17:39:27.491]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.491]                     next
[17:39:27.491]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.491]                 }
[17:39:27.491]                 NAMES <- toupper(added)
[17:39:27.491]                 for (kk in seq_along(NAMES)) {
[17:39:27.491]                   name <- added[[kk]]
[17:39:27.491]                   NAME <- NAMES[[kk]]
[17:39:27.491]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.491]                     next
[17:39:27.491]                   args[[name]] <- ""
[17:39:27.491]                 }
[17:39:27.491]                 NAMES <- toupper(removed)
[17:39:27.491]                 for (kk in seq_along(NAMES)) {
[17:39:27.491]                   name <- removed[[kk]]
[17:39:27.491]                   NAME <- NAMES[[kk]]
[17:39:27.491]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:27.491]                     next
[17:39:27.491]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:27.491]                 }
[17:39:27.491]                 if (length(args) > 0) 
[17:39:27.491]                   base::do.call(base::Sys.setenv, args = args)
[17:39:27.491]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:27.491]             }
[17:39:27.491]             else {
[17:39:27.491]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:27.491]             }
[17:39:27.491]             {
[17:39:27.491]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:27.491]                   0L) {
[17:39:27.491]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:27.491]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:27.491]                   base::options(opts)
[17:39:27.491]                 }
[17:39:27.491]                 {
[17:39:27.491]                   {
[17:39:27.491]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:27.491]                     NULL
[17:39:27.491]                   }
[17:39:27.491]                   options(future.plan = NULL)
[17:39:27.491]                   if (is.na(NA_character_)) 
[17:39:27.491]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:27.491]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:27.491]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:27.491]                     .init = FALSE)
[17:39:27.491]                 }
[17:39:27.491]             }
[17:39:27.491]         }
[17:39:27.491]     })
[17:39:27.491]     if (TRUE) {
[17:39:27.491]         base::sink(type = "output", split = FALSE)
[17:39:27.491]         if (TRUE) {
[17:39:27.491]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:27.491]         }
[17:39:27.491]         else {
[17:39:27.491]             ...future.result["stdout"] <- base::list(NULL)
[17:39:27.491]         }
[17:39:27.491]         base::close(...future.stdout)
[17:39:27.491]         ...future.stdout <- NULL
[17:39:27.491]     }
[17:39:27.491]     ...future.result$conditions <- ...future.conditions
[17:39:27.491]     ...future.result$finished <- base::Sys.time()
[17:39:27.491]     ...future.result
[17:39:27.491] }
[17:39:27.493] assign_globals() ...
[17:39:27.494] List of 1
[17:39:27.494]  $ a: num 1
[17:39:27.494]  - attr(*, "where")=List of 1
[17:39:27.494]   ..$ a:<environment: R_EmptyEnv> 
[17:39:27.494]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:27.494]  - attr(*, "resolved")= logi FALSE
[17:39:27.494]  - attr(*, "total_size")= num 56
[17:39:27.494]  - attr(*, "already-done")= logi TRUE
[17:39:27.497] - copied ‘a’ to environment
[17:39:27.497] assign_globals() ... done
[17:39:27.497] requestCore(): workers = 2
[17:39:27.499] MulticoreFuture started
[17:39:27.500] - Launch lazy future ... done
[17:39:27.500] run() for ‘MulticoreFuture’ ... done
[17:39:27.500] plan(): Setting new future strategy stack:
[17:39:27.500] result() for MulticoreFuture ...
[17:39:27.500] List of future strategies:
[17:39:27.500] 1. sequential:
[17:39:27.500]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:27.500]    - tweaked: FALSE
[17:39:27.500]    - call: NULL
[17:39:27.501] plan(): nbrOfWorkers() = 1
[17:39:27.503] plan(): Setting new future strategy stack:
[17:39:27.503] List of future strategies:
[17:39:27.503] 1. multicore:
[17:39:27.503]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:27.503]    - tweaked: FALSE
[17:39:27.503]    - call: plan(strategy)
[17:39:27.509] plan(): nbrOfWorkers() = 2
[17:39:27.509] result() for MulticoreFuture ...
[17:39:27.510] result() for MulticoreFuture ... done
[17:39:27.510] result() for MulticoreFuture ... done
[17:39:27.510] result() for MulticoreFuture ...
[17:39:27.510] result() for MulticoreFuture ... done
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[17:39:27.511] plan(): Setting new future strategy stack:
[17:39:27.511] List of future strategies:
[17:39:27.511] 1. multisession:
[17:39:27.511]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:27.511]    - tweaked: FALSE
[17:39:27.511]    - call: plan(strategy)
[17:39:27.511] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:39:27.512] multisession:
[17:39:27.512] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:27.512] - tweaked: FALSE
[17:39:27.512] - call: plan(strategy)
[17:39:27.521] getGlobalsAndPackages() ...
[17:39:27.521] Not searching for globals
[17:39:27.522] - globals: [0] <none>
[17:39:27.522] getGlobalsAndPackages() ... DONE
[17:39:27.522] [local output] makeClusterPSOCK() ...
[17:39:27.570] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:39:27.571] [local output] Base port: 11662
[17:39:27.571] [local output] Getting setup options for 2 cluster nodes ...
[17:39:27.571] [local output]  - Node 1 of 2 ...
[17:39:27.572] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:27.572] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpuISvVj/worker.rank=1.parallelly.parent=41437.a1dd78c78dc1.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpuISvVj/worker.rank=1.parallelly.parent=41437.a1dd78c78dc1.pid")'’
[17:39:27.771] - Possible to infer worker's PID: TRUE
[17:39:27.771] [local output] Rscript port: 11662

[17:39:27.771] [local output]  - Node 2 of 2 ...
[17:39:27.772] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:27.772] [local output] Rscript port: 11662

[17:39:27.773] [local output] Getting setup options for 2 cluster nodes ... done
[17:39:27.773] [local output]  - Parallel setup requested for some PSOCK nodes
[17:39:27.773] [local output] Setting up PSOCK nodes in parallel
[17:39:27.774] List of 36
[17:39:27.774]  $ worker          : chr "localhost"
[17:39:27.774]   ..- attr(*, "localhost")= logi TRUE
[17:39:27.774]  $ master          : chr "localhost"
[17:39:27.774]  $ port            : int 11662
[17:39:27.774]  $ connectTimeout  : num 120
[17:39:27.774]  $ timeout         : num 2592000
[17:39:27.774]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:39:27.774]  $ homogeneous     : logi TRUE
[17:39:27.774]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:39:27.774]  $ rscript_envs    : NULL
[17:39:27.774]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:27.774]  $ rscript_startup : NULL
[17:39:27.774]  $ rscript_sh      : chr "sh"
[17:39:27.774]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:27.774]  $ methods         : logi TRUE
[17:39:27.774]  $ socketOptions   : chr "no-delay"
[17:39:27.774]  $ useXDR          : logi FALSE
[17:39:27.774]  $ outfile         : chr "/dev/null"
[17:39:27.774]  $ renice          : int NA
[17:39:27.774]  $ rshcmd          : NULL
[17:39:27.774]  $ user            : chr(0) 
[17:39:27.774]  $ revtunnel       : logi FALSE
[17:39:27.774]  $ rshlogfile      : NULL
[17:39:27.774]  $ rshopts         : chr(0) 
[17:39:27.774]  $ rank            : int 1
[17:39:27.774]  $ manual          : logi FALSE
[17:39:27.774]  $ dryrun          : logi FALSE
[17:39:27.774]  $ quiet           : logi FALSE
[17:39:27.774]  $ setup_strategy  : chr "parallel"
[17:39:27.774]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:27.774]  $ pidfile         : chr "/tmp/RtmpuISvVj/worker.rank=1.parallelly.parent=41437.a1dd78c78dc1.pid"
[17:39:27.774]  $ rshcmd_label    : NULL
[17:39:27.774]  $ rsh_call        : NULL
[17:39:27.774]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:27.774]  $ localMachine    : logi TRUE
[17:39:27.774]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:39:27.774]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:39:27.774]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:39:27.774]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:39:27.774]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:39:27.774]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:39:27.774]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:39:27.774]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:39:27.774]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:39:27.774]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:39:27.774]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:39:27.774]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:39:27.774]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:39:27.774]  $ arguments       :List of 28
[17:39:27.774]   ..$ worker          : chr "localhost"
[17:39:27.774]   ..$ master          : NULL
[17:39:27.774]   ..$ port            : int 11662
[17:39:27.774]   ..$ connectTimeout  : num 120
[17:39:27.774]   ..$ timeout         : num 2592000
[17:39:27.774]   ..$ rscript         : NULL
[17:39:27.774]   ..$ homogeneous     : NULL
[17:39:27.774]   ..$ rscript_args    : NULL
[17:39:27.774]   ..$ rscript_envs    : NULL
[17:39:27.774]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:27.774]   ..$ rscript_startup : NULL
[17:39:27.774]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:39:27.774]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:27.774]   ..$ methods         : logi TRUE
[17:39:27.774]   ..$ socketOptions   : chr "no-delay"
[17:39:27.774]   ..$ useXDR          : logi FALSE
[17:39:27.774]   ..$ outfile         : chr "/dev/null"
[17:39:27.774]   ..$ renice          : int NA
[17:39:27.774]   ..$ rshcmd          : NULL
[17:39:27.774]   ..$ user            : NULL
[17:39:27.774]   ..$ revtunnel       : logi NA
[17:39:27.774]   ..$ rshlogfile      : NULL
[17:39:27.774]   ..$ rshopts         : NULL
[17:39:27.774]   ..$ rank            : int 1
[17:39:27.774]   ..$ manual          : logi FALSE
[17:39:27.774]   ..$ dryrun          : logi FALSE
[17:39:27.774]   ..$ quiet           : logi FALSE
[17:39:27.774]   ..$ setup_strategy  : chr "parallel"
[17:39:27.774]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:39:27.791] [local output] System call to launch all workers:
[17:39:27.791] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpuISvVj/worker.rank=1.parallelly.parent=41437.a1dd78c78dc1.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11662 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:39:27.791] [local output] Starting PSOCK main server
[17:39:27.797] [local output] Workers launched
[17:39:27.797] [local output] Waiting for workers to connect back
[17:39:27.797]  - [local output] 0 workers out of 2 ready
[17:39:28.060]  - [local output] 0 workers out of 2 ready
[17:39:28.061]  - [local output] 1 workers out of 2 ready
[17:39:28.062]  - [local output] 1 workers out of 2 ready
[17:39:28.062]  - [local output] 2 workers out of 2 ready
[17:39:28.062] [local output] Launching of workers completed
[17:39:28.063] [local output] Collecting session information from workers
[17:39:28.063] [local output]  - Worker #1 of 2
[17:39:28.064] [local output]  - Worker #2 of 2
[17:39:28.064] [local output] makeClusterPSOCK() ... done
[17:39:28.077] Packages needed by the future expression (n = 0): <none>
[17:39:28.077] Packages needed by future strategies (n = 0): <none>
[17:39:28.077] {
[17:39:28.077]     {
[17:39:28.077]         {
[17:39:28.077]             ...future.startTime <- base::Sys.time()
[17:39:28.077]             {
[17:39:28.077]                 {
[17:39:28.077]                   {
[17:39:28.077]                     {
[17:39:28.077]                       base::local({
[17:39:28.077]                         has_future <- base::requireNamespace("future", 
[17:39:28.077]                           quietly = TRUE)
[17:39:28.077]                         if (has_future) {
[17:39:28.077]                           ns <- base::getNamespace("future")
[17:39:28.077]                           version <- ns[[".package"]][["version"]]
[17:39:28.077]                           if (is.null(version)) 
[17:39:28.077]                             version <- utils::packageVersion("future")
[17:39:28.077]                         }
[17:39:28.077]                         else {
[17:39:28.077]                           version <- NULL
[17:39:28.077]                         }
[17:39:28.077]                         if (!has_future || version < "1.8.0") {
[17:39:28.077]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:28.077]                             "", base::R.version$version.string), 
[17:39:28.077]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:28.077]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:28.077]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:28.077]                               "release", "version")], collapse = " "), 
[17:39:28.077]                             hostname = base::Sys.info()[["nodename"]])
[17:39:28.077]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:28.077]                             info)
[17:39:28.077]                           info <- base::paste(info, collapse = "; ")
[17:39:28.077]                           if (!has_future) {
[17:39:28.077]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:28.077]                               info)
[17:39:28.077]                           }
[17:39:28.077]                           else {
[17:39:28.077]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:28.077]                               info, version)
[17:39:28.077]                           }
[17:39:28.077]                           base::stop(msg)
[17:39:28.077]                         }
[17:39:28.077]                       })
[17:39:28.077]                     }
[17:39:28.077]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:28.077]                     base::options(mc.cores = 1L)
[17:39:28.077]                   }
[17:39:28.077]                   ...future.strategy.old <- future::plan("list")
[17:39:28.077]                   options(future.plan = NULL)
[17:39:28.077]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.077]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:28.077]                 }
[17:39:28.077]                 ...future.workdir <- getwd()
[17:39:28.077]             }
[17:39:28.077]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:28.077]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:28.077]         }
[17:39:28.077]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:28.077]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:28.077]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:28.077]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:28.077]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:28.077]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:28.077]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:28.077]             base::names(...future.oldOptions))
[17:39:28.077]     }
[17:39:28.077]     if (FALSE) {
[17:39:28.077]     }
[17:39:28.077]     else {
[17:39:28.077]         if (TRUE) {
[17:39:28.077]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:28.077]                 open = "w")
[17:39:28.077]         }
[17:39:28.077]         else {
[17:39:28.077]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:28.077]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:28.077]         }
[17:39:28.077]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:28.077]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:28.077]             base::sink(type = "output", split = FALSE)
[17:39:28.077]             base::close(...future.stdout)
[17:39:28.077]         }, add = TRUE)
[17:39:28.077]     }
[17:39:28.077]     ...future.frame <- base::sys.nframe()
[17:39:28.077]     ...future.conditions <- base::list()
[17:39:28.077]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:28.077]     if (FALSE) {
[17:39:28.077]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:28.077]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:28.077]     }
[17:39:28.077]     ...future.result <- base::tryCatch({
[17:39:28.077]         base::withCallingHandlers({
[17:39:28.077]             ...future.value <- base::withVisible(base::local({
[17:39:28.077]                 ...future.makeSendCondition <- base::local({
[17:39:28.077]                   sendCondition <- NULL
[17:39:28.077]                   function(frame = 1L) {
[17:39:28.077]                     if (is.function(sendCondition)) 
[17:39:28.077]                       return(sendCondition)
[17:39:28.077]                     ns <- getNamespace("parallel")
[17:39:28.077]                     if (exists("sendData", mode = "function", 
[17:39:28.077]                       envir = ns)) {
[17:39:28.077]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:28.077]                         envir = ns)
[17:39:28.077]                       envir <- sys.frame(frame)
[17:39:28.077]                       master <- NULL
[17:39:28.077]                       while (!identical(envir, .GlobalEnv) && 
[17:39:28.077]                         !identical(envir, emptyenv())) {
[17:39:28.077]                         if (exists("master", mode = "list", envir = envir, 
[17:39:28.077]                           inherits = FALSE)) {
[17:39:28.077]                           master <- get("master", mode = "list", 
[17:39:28.077]                             envir = envir, inherits = FALSE)
[17:39:28.077]                           if (inherits(master, c("SOCKnode", 
[17:39:28.077]                             "SOCK0node"))) {
[17:39:28.077]                             sendCondition <<- function(cond) {
[17:39:28.077]                               data <- list(type = "VALUE", value = cond, 
[17:39:28.077]                                 success = TRUE)
[17:39:28.077]                               parallel_sendData(master, data)
[17:39:28.077]                             }
[17:39:28.077]                             return(sendCondition)
[17:39:28.077]                           }
[17:39:28.077]                         }
[17:39:28.077]                         frame <- frame + 1L
[17:39:28.077]                         envir <- sys.frame(frame)
[17:39:28.077]                       }
[17:39:28.077]                     }
[17:39:28.077]                     sendCondition <<- function(cond) NULL
[17:39:28.077]                   }
[17:39:28.077]                 })
[17:39:28.077]                 withCallingHandlers({
[17:39:28.077]                   NA
[17:39:28.077]                 }, immediateCondition = function(cond) {
[17:39:28.077]                   sendCondition <- ...future.makeSendCondition()
[17:39:28.077]                   sendCondition(cond)
[17:39:28.077]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.077]                   {
[17:39:28.077]                     inherits <- base::inherits
[17:39:28.077]                     invokeRestart <- base::invokeRestart
[17:39:28.077]                     is.null <- base::is.null
[17:39:28.077]                     muffled <- FALSE
[17:39:28.077]                     if (inherits(cond, "message")) {
[17:39:28.077]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:28.077]                       if (muffled) 
[17:39:28.077]                         invokeRestart("muffleMessage")
[17:39:28.077]                     }
[17:39:28.077]                     else if (inherits(cond, "warning")) {
[17:39:28.077]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:28.077]                       if (muffled) 
[17:39:28.077]                         invokeRestart("muffleWarning")
[17:39:28.077]                     }
[17:39:28.077]                     else if (inherits(cond, "condition")) {
[17:39:28.077]                       if (!is.null(pattern)) {
[17:39:28.077]                         computeRestarts <- base::computeRestarts
[17:39:28.077]                         grepl <- base::grepl
[17:39:28.077]                         restarts <- computeRestarts(cond)
[17:39:28.077]                         for (restart in restarts) {
[17:39:28.077]                           name <- restart$name
[17:39:28.077]                           if (is.null(name)) 
[17:39:28.077]                             next
[17:39:28.077]                           if (!grepl(pattern, name)) 
[17:39:28.077]                             next
[17:39:28.077]                           invokeRestart(restart)
[17:39:28.077]                           muffled <- TRUE
[17:39:28.077]                           break
[17:39:28.077]                         }
[17:39:28.077]                       }
[17:39:28.077]                     }
[17:39:28.077]                     invisible(muffled)
[17:39:28.077]                   }
[17:39:28.077]                   muffleCondition(cond)
[17:39:28.077]                 })
[17:39:28.077]             }))
[17:39:28.077]             future::FutureResult(value = ...future.value$value, 
[17:39:28.077]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.077]                   ...future.rng), globalenv = if (FALSE) 
[17:39:28.077]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:28.077]                     ...future.globalenv.names))
[17:39:28.077]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:28.077]         }, condition = base::local({
[17:39:28.077]             c <- base::c
[17:39:28.077]             inherits <- base::inherits
[17:39:28.077]             invokeRestart <- base::invokeRestart
[17:39:28.077]             length <- base::length
[17:39:28.077]             list <- base::list
[17:39:28.077]             seq.int <- base::seq.int
[17:39:28.077]             signalCondition <- base::signalCondition
[17:39:28.077]             sys.calls <- base::sys.calls
[17:39:28.077]             `[[` <- base::`[[`
[17:39:28.077]             `+` <- base::`+`
[17:39:28.077]             `<<-` <- base::`<<-`
[17:39:28.077]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:28.077]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:28.077]                   3L)]
[17:39:28.077]             }
[17:39:28.077]             function(cond) {
[17:39:28.077]                 is_error <- inherits(cond, "error")
[17:39:28.077]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:28.077]                   NULL)
[17:39:28.077]                 if (is_error) {
[17:39:28.077]                   sessionInformation <- function() {
[17:39:28.077]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:28.077]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:28.077]                       search = base::search(), system = base::Sys.info())
[17:39:28.077]                   }
[17:39:28.077]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.077]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:28.077]                     cond$call), session = sessionInformation(), 
[17:39:28.077]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:28.077]                   signalCondition(cond)
[17:39:28.077]                 }
[17:39:28.077]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:28.077]                 "immediateCondition"))) {
[17:39:28.077]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:28.077]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.077]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:28.077]                   if (TRUE && !signal) {
[17:39:28.077]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.077]                     {
[17:39:28.077]                       inherits <- base::inherits
[17:39:28.077]                       invokeRestart <- base::invokeRestart
[17:39:28.077]                       is.null <- base::is.null
[17:39:28.077]                       muffled <- FALSE
[17:39:28.077]                       if (inherits(cond, "message")) {
[17:39:28.077]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.077]                         if (muffled) 
[17:39:28.077]                           invokeRestart("muffleMessage")
[17:39:28.077]                       }
[17:39:28.077]                       else if (inherits(cond, "warning")) {
[17:39:28.077]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.077]                         if (muffled) 
[17:39:28.077]                           invokeRestart("muffleWarning")
[17:39:28.077]                       }
[17:39:28.077]                       else if (inherits(cond, "condition")) {
[17:39:28.077]                         if (!is.null(pattern)) {
[17:39:28.077]                           computeRestarts <- base::computeRestarts
[17:39:28.077]                           grepl <- base::grepl
[17:39:28.077]                           restarts <- computeRestarts(cond)
[17:39:28.077]                           for (restart in restarts) {
[17:39:28.077]                             name <- restart$name
[17:39:28.077]                             if (is.null(name)) 
[17:39:28.077]                               next
[17:39:28.077]                             if (!grepl(pattern, name)) 
[17:39:28.077]                               next
[17:39:28.077]                             invokeRestart(restart)
[17:39:28.077]                             muffled <- TRUE
[17:39:28.077]                             break
[17:39:28.077]                           }
[17:39:28.077]                         }
[17:39:28.077]                       }
[17:39:28.077]                       invisible(muffled)
[17:39:28.077]                     }
[17:39:28.077]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.077]                   }
[17:39:28.077]                 }
[17:39:28.077]                 else {
[17:39:28.077]                   if (TRUE) {
[17:39:28.077]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.077]                     {
[17:39:28.077]                       inherits <- base::inherits
[17:39:28.077]                       invokeRestart <- base::invokeRestart
[17:39:28.077]                       is.null <- base::is.null
[17:39:28.077]                       muffled <- FALSE
[17:39:28.077]                       if (inherits(cond, "message")) {
[17:39:28.077]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.077]                         if (muffled) 
[17:39:28.077]                           invokeRestart("muffleMessage")
[17:39:28.077]                       }
[17:39:28.077]                       else if (inherits(cond, "warning")) {
[17:39:28.077]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.077]                         if (muffled) 
[17:39:28.077]                           invokeRestart("muffleWarning")
[17:39:28.077]                       }
[17:39:28.077]                       else if (inherits(cond, "condition")) {
[17:39:28.077]                         if (!is.null(pattern)) {
[17:39:28.077]                           computeRestarts <- base::computeRestarts
[17:39:28.077]                           grepl <- base::grepl
[17:39:28.077]                           restarts <- computeRestarts(cond)
[17:39:28.077]                           for (restart in restarts) {
[17:39:28.077]                             name <- restart$name
[17:39:28.077]                             if (is.null(name)) 
[17:39:28.077]                               next
[17:39:28.077]                             if (!grepl(pattern, name)) 
[17:39:28.077]                               next
[17:39:28.077]                             invokeRestart(restart)
[17:39:28.077]                             muffled <- TRUE
[17:39:28.077]                             break
[17:39:28.077]                           }
[17:39:28.077]                         }
[17:39:28.077]                       }
[17:39:28.077]                       invisible(muffled)
[17:39:28.077]                     }
[17:39:28.077]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.077]                   }
[17:39:28.077]                 }
[17:39:28.077]             }
[17:39:28.077]         }))
[17:39:28.077]     }, error = function(ex) {
[17:39:28.077]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:28.077]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.077]                 ...future.rng), started = ...future.startTime, 
[17:39:28.077]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:28.077]             version = "1.8"), class = "FutureResult")
[17:39:28.077]     }, finally = {
[17:39:28.077]         if (!identical(...future.workdir, getwd())) 
[17:39:28.077]             setwd(...future.workdir)
[17:39:28.077]         {
[17:39:28.077]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:28.077]                 ...future.oldOptions$nwarnings <- NULL
[17:39:28.077]             }
[17:39:28.077]             base::options(...future.oldOptions)
[17:39:28.077]             if (.Platform$OS.type == "windows") {
[17:39:28.077]                 old_names <- names(...future.oldEnvVars)
[17:39:28.077]                 envs <- base::Sys.getenv()
[17:39:28.077]                 names <- names(envs)
[17:39:28.077]                 common <- intersect(names, old_names)
[17:39:28.077]                 added <- setdiff(names, old_names)
[17:39:28.077]                 removed <- setdiff(old_names, names)
[17:39:28.077]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:28.077]                   envs[common]]
[17:39:28.077]                 NAMES <- toupper(changed)
[17:39:28.077]                 args <- list()
[17:39:28.077]                 for (kk in seq_along(NAMES)) {
[17:39:28.077]                   name <- changed[[kk]]
[17:39:28.077]                   NAME <- NAMES[[kk]]
[17:39:28.077]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.077]                     next
[17:39:28.077]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.077]                 }
[17:39:28.077]                 NAMES <- toupper(added)
[17:39:28.077]                 for (kk in seq_along(NAMES)) {
[17:39:28.077]                   name <- added[[kk]]
[17:39:28.077]                   NAME <- NAMES[[kk]]
[17:39:28.077]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.077]                     next
[17:39:28.077]                   args[[name]] <- ""
[17:39:28.077]                 }
[17:39:28.077]                 NAMES <- toupper(removed)
[17:39:28.077]                 for (kk in seq_along(NAMES)) {
[17:39:28.077]                   name <- removed[[kk]]
[17:39:28.077]                   NAME <- NAMES[[kk]]
[17:39:28.077]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.077]                     next
[17:39:28.077]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.077]                 }
[17:39:28.077]                 if (length(args) > 0) 
[17:39:28.077]                   base::do.call(base::Sys.setenv, args = args)
[17:39:28.077]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:28.077]             }
[17:39:28.077]             else {
[17:39:28.077]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:28.077]             }
[17:39:28.077]             {
[17:39:28.077]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:28.077]                   0L) {
[17:39:28.077]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:28.077]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:28.077]                   base::options(opts)
[17:39:28.077]                 }
[17:39:28.077]                 {
[17:39:28.077]                   {
[17:39:28.077]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:28.077]                     NULL
[17:39:28.077]                   }
[17:39:28.077]                   options(future.plan = NULL)
[17:39:28.077]                   if (is.na(NA_character_)) 
[17:39:28.077]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.077]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:28.077]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:28.077]                     .init = FALSE)
[17:39:28.077]                 }
[17:39:28.077]             }
[17:39:28.077]         }
[17:39:28.077]     })
[17:39:28.077]     if (TRUE) {
[17:39:28.077]         base::sink(type = "output", split = FALSE)
[17:39:28.077]         if (TRUE) {
[17:39:28.077]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:28.077]         }
[17:39:28.077]         else {
[17:39:28.077]             ...future.result["stdout"] <- base::list(NULL)
[17:39:28.077]         }
[17:39:28.077]         base::close(...future.stdout)
[17:39:28.077]         ...future.stdout <- NULL
[17:39:28.077]     }
[17:39:28.077]     ...future.result$conditions <- ...future.conditions
[17:39:28.077]     ...future.result$finished <- base::Sys.time()
[17:39:28.077]     ...future.result
[17:39:28.077] }
[17:39:28.129] MultisessionFuture started
[17:39:28.130] result() for ClusterFuture ...
[17:39:28.130] receiveMessageFromWorker() for ClusterFuture ...
[17:39:28.130] - Validating connection of MultisessionFuture
[17:39:28.162] - received message: FutureResult
[17:39:28.162] - Received FutureResult
[17:39:28.162] - Erased future from FutureRegistry
[17:39:28.162] result() for ClusterFuture ...
[17:39:28.163] - result already collected: FutureResult
[17:39:28.163] result() for ClusterFuture ... done
[17:39:28.163] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:28.163] result() for ClusterFuture ... done
[17:39:28.163] result() for ClusterFuture ...
[17:39:28.163] - result already collected: FutureResult
[17:39:28.163] result() for ClusterFuture ... done
[17:39:28.163] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:39:28.168] plan(): nbrOfWorkers() = 2
[17:39:28.168] getGlobalsAndPackages() ...
[17:39:28.168] Searching for globals...
[17:39:28.169] - globals found: [1] ‘{’
[17:39:28.169] Searching for globals ... DONE
[17:39:28.169] Resolving globals: FALSE
[17:39:28.169] 
[17:39:28.169] 
[17:39:28.170] getGlobalsAndPackages() ... DONE
[17:39:28.170] run() for ‘Future’ ...
[17:39:28.170] - state: ‘created’
[17:39:28.170] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:28.185] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:28.185] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:28.185]   - Field: ‘node’
[17:39:28.185]   - Field: ‘label’
[17:39:28.186]   - Field: ‘local’
[17:39:28.186]   - Field: ‘owner’
[17:39:28.186]   - Field: ‘envir’
[17:39:28.186]   - Field: ‘workers’
[17:39:28.186]   - Field: ‘packages’
[17:39:28.186]   - Field: ‘gc’
[17:39:28.186]   - Field: ‘conditions’
[17:39:28.186]   - Field: ‘persistent’
[17:39:28.186]   - Field: ‘expr’
[17:39:28.186]   - Field: ‘uuid’
[17:39:28.187]   - Field: ‘seed’
[17:39:28.187]   - Field: ‘version’
[17:39:28.187]   - Field: ‘result’
[17:39:28.187]   - Field: ‘asynchronous’
[17:39:28.187]   - Field: ‘calls’
[17:39:28.187]   - Field: ‘globals’
[17:39:28.187]   - Field: ‘stdout’
[17:39:28.187]   - Field: ‘earlySignal’
[17:39:28.187]   - Field: ‘lazy’
[17:39:28.188]   - Field: ‘state’
[17:39:28.188] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:28.188] - Launch lazy future ...
[17:39:28.188] Packages needed by the future expression (n = 0): <none>
[17:39:28.188] Packages needed by future strategies (n = 0): <none>
[17:39:28.189] {
[17:39:28.189]     {
[17:39:28.189]         {
[17:39:28.189]             ...future.startTime <- base::Sys.time()
[17:39:28.189]             {
[17:39:28.189]                 {
[17:39:28.189]                   {
[17:39:28.189]                     {
[17:39:28.189]                       base::local({
[17:39:28.189]                         has_future <- base::requireNamespace("future", 
[17:39:28.189]                           quietly = TRUE)
[17:39:28.189]                         if (has_future) {
[17:39:28.189]                           ns <- base::getNamespace("future")
[17:39:28.189]                           version <- ns[[".package"]][["version"]]
[17:39:28.189]                           if (is.null(version)) 
[17:39:28.189]                             version <- utils::packageVersion("future")
[17:39:28.189]                         }
[17:39:28.189]                         else {
[17:39:28.189]                           version <- NULL
[17:39:28.189]                         }
[17:39:28.189]                         if (!has_future || version < "1.8.0") {
[17:39:28.189]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:28.189]                             "", base::R.version$version.string), 
[17:39:28.189]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:28.189]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:28.189]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:28.189]                               "release", "version")], collapse = " "), 
[17:39:28.189]                             hostname = base::Sys.info()[["nodename"]])
[17:39:28.189]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:28.189]                             info)
[17:39:28.189]                           info <- base::paste(info, collapse = "; ")
[17:39:28.189]                           if (!has_future) {
[17:39:28.189]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:28.189]                               info)
[17:39:28.189]                           }
[17:39:28.189]                           else {
[17:39:28.189]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:28.189]                               info, version)
[17:39:28.189]                           }
[17:39:28.189]                           base::stop(msg)
[17:39:28.189]                         }
[17:39:28.189]                       })
[17:39:28.189]                     }
[17:39:28.189]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:28.189]                     base::options(mc.cores = 1L)
[17:39:28.189]                   }
[17:39:28.189]                   ...future.strategy.old <- future::plan("list")
[17:39:28.189]                   options(future.plan = NULL)
[17:39:28.189]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.189]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:28.189]                 }
[17:39:28.189]                 ...future.workdir <- getwd()
[17:39:28.189]             }
[17:39:28.189]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:28.189]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:28.189]         }
[17:39:28.189]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:28.189]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:28.189]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:28.189]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:28.189]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:28.189]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:28.189]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:28.189]             base::names(...future.oldOptions))
[17:39:28.189]     }
[17:39:28.189]     if (FALSE) {
[17:39:28.189]     }
[17:39:28.189]     else {
[17:39:28.189]         if (TRUE) {
[17:39:28.189]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:28.189]                 open = "w")
[17:39:28.189]         }
[17:39:28.189]         else {
[17:39:28.189]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:28.189]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:28.189]         }
[17:39:28.189]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:28.189]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:28.189]             base::sink(type = "output", split = FALSE)
[17:39:28.189]             base::close(...future.stdout)
[17:39:28.189]         }, add = TRUE)
[17:39:28.189]     }
[17:39:28.189]     ...future.frame <- base::sys.nframe()
[17:39:28.189]     ...future.conditions <- base::list()
[17:39:28.189]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:28.189]     if (FALSE) {
[17:39:28.189]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:28.189]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:28.189]     }
[17:39:28.189]     ...future.result <- base::tryCatch({
[17:39:28.189]         base::withCallingHandlers({
[17:39:28.189]             ...future.value <- base::withVisible(base::local({
[17:39:28.189]                 ...future.makeSendCondition <- base::local({
[17:39:28.189]                   sendCondition <- NULL
[17:39:28.189]                   function(frame = 1L) {
[17:39:28.189]                     if (is.function(sendCondition)) 
[17:39:28.189]                       return(sendCondition)
[17:39:28.189]                     ns <- getNamespace("parallel")
[17:39:28.189]                     if (exists("sendData", mode = "function", 
[17:39:28.189]                       envir = ns)) {
[17:39:28.189]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:28.189]                         envir = ns)
[17:39:28.189]                       envir <- sys.frame(frame)
[17:39:28.189]                       master <- NULL
[17:39:28.189]                       while (!identical(envir, .GlobalEnv) && 
[17:39:28.189]                         !identical(envir, emptyenv())) {
[17:39:28.189]                         if (exists("master", mode = "list", envir = envir, 
[17:39:28.189]                           inherits = FALSE)) {
[17:39:28.189]                           master <- get("master", mode = "list", 
[17:39:28.189]                             envir = envir, inherits = FALSE)
[17:39:28.189]                           if (inherits(master, c("SOCKnode", 
[17:39:28.189]                             "SOCK0node"))) {
[17:39:28.189]                             sendCondition <<- function(cond) {
[17:39:28.189]                               data <- list(type = "VALUE", value = cond, 
[17:39:28.189]                                 success = TRUE)
[17:39:28.189]                               parallel_sendData(master, data)
[17:39:28.189]                             }
[17:39:28.189]                             return(sendCondition)
[17:39:28.189]                           }
[17:39:28.189]                         }
[17:39:28.189]                         frame <- frame + 1L
[17:39:28.189]                         envir <- sys.frame(frame)
[17:39:28.189]                       }
[17:39:28.189]                     }
[17:39:28.189]                     sendCondition <<- function(cond) NULL
[17:39:28.189]                   }
[17:39:28.189]                 })
[17:39:28.189]                 withCallingHandlers({
[17:39:28.189]                   {
[17:39:28.189]                     2
[17:39:28.189]                   }
[17:39:28.189]                 }, immediateCondition = function(cond) {
[17:39:28.189]                   sendCondition <- ...future.makeSendCondition()
[17:39:28.189]                   sendCondition(cond)
[17:39:28.189]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.189]                   {
[17:39:28.189]                     inherits <- base::inherits
[17:39:28.189]                     invokeRestart <- base::invokeRestart
[17:39:28.189]                     is.null <- base::is.null
[17:39:28.189]                     muffled <- FALSE
[17:39:28.189]                     if (inherits(cond, "message")) {
[17:39:28.189]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:28.189]                       if (muffled) 
[17:39:28.189]                         invokeRestart("muffleMessage")
[17:39:28.189]                     }
[17:39:28.189]                     else if (inherits(cond, "warning")) {
[17:39:28.189]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:28.189]                       if (muffled) 
[17:39:28.189]                         invokeRestart("muffleWarning")
[17:39:28.189]                     }
[17:39:28.189]                     else if (inherits(cond, "condition")) {
[17:39:28.189]                       if (!is.null(pattern)) {
[17:39:28.189]                         computeRestarts <- base::computeRestarts
[17:39:28.189]                         grepl <- base::grepl
[17:39:28.189]                         restarts <- computeRestarts(cond)
[17:39:28.189]                         for (restart in restarts) {
[17:39:28.189]                           name <- restart$name
[17:39:28.189]                           if (is.null(name)) 
[17:39:28.189]                             next
[17:39:28.189]                           if (!grepl(pattern, name)) 
[17:39:28.189]                             next
[17:39:28.189]                           invokeRestart(restart)
[17:39:28.189]                           muffled <- TRUE
[17:39:28.189]                           break
[17:39:28.189]                         }
[17:39:28.189]                       }
[17:39:28.189]                     }
[17:39:28.189]                     invisible(muffled)
[17:39:28.189]                   }
[17:39:28.189]                   muffleCondition(cond)
[17:39:28.189]                 })
[17:39:28.189]             }))
[17:39:28.189]             future::FutureResult(value = ...future.value$value, 
[17:39:28.189]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.189]                   ...future.rng), globalenv = if (FALSE) 
[17:39:28.189]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:28.189]                     ...future.globalenv.names))
[17:39:28.189]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:28.189]         }, condition = base::local({
[17:39:28.189]             c <- base::c
[17:39:28.189]             inherits <- base::inherits
[17:39:28.189]             invokeRestart <- base::invokeRestart
[17:39:28.189]             length <- base::length
[17:39:28.189]             list <- base::list
[17:39:28.189]             seq.int <- base::seq.int
[17:39:28.189]             signalCondition <- base::signalCondition
[17:39:28.189]             sys.calls <- base::sys.calls
[17:39:28.189]             `[[` <- base::`[[`
[17:39:28.189]             `+` <- base::`+`
[17:39:28.189]             `<<-` <- base::`<<-`
[17:39:28.189]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:28.189]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:28.189]                   3L)]
[17:39:28.189]             }
[17:39:28.189]             function(cond) {
[17:39:28.189]                 is_error <- inherits(cond, "error")
[17:39:28.189]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:28.189]                   NULL)
[17:39:28.189]                 if (is_error) {
[17:39:28.189]                   sessionInformation <- function() {
[17:39:28.189]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:28.189]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:28.189]                       search = base::search(), system = base::Sys.info())
[17:39:28.189]                   }
[17:39:28.189]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.189]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:28.189]                     cond$call), session = sessionInformation(), 
[17:39:28.189]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:28.189]                   signalCondition(cond)
[17:39:28.189]                 }
[17:39:28.189]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:28.189]                 "immediateCondition"))) {
[17:39:28.189]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:28.189]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.189]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:28.189]                   if (TRUE && !signal) {
[17:39:28.189]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.189]                     {
[17:39:28.189]                       inherits <- base::inherits
[17:39:28.189]                       invokeRestart <- base::invokeRestart
[17:39:28.189]                       is.null <- base::is.null
[17:39:28.189]                       muffled <- FALSE
[17:39:28.189]                       if (inherits(cond, "message")) {
[17:39:28.189]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.189]                         if (muffled) 
[17:39:28.189]                           invokeRestart("muffleMessage")
[17:39:28.189]                       }
[17:39:28.189]                       else if (inherits(cond, "warning")) {
[17:39:28.189]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.189]                         if (muffled) 
[17:39:28.189]                           invokeRestart("muffleWarning")
[17:39:28.189]                       }
[17:39:28.189]                       else if (inherits(cond, "condition")) {
[17:39:28.189]                         if (!is.null(pattern)) {
[17:39:28.189]                           computeRestarts <- base::computeRestarts
[17:39:28.189]                           grepl <- base::grepl
[17:39:28.189]                           restarts <- computeRestarts(cond)
[17:39:28.189]                           for (restart in restarts) {
[17:39:28.189]                             name <- restart$name
[17:39:28.189]                             if (is.null(name)) 
[17:39:28.189]                               next
[17:39:28.189]                             if (!grepl(pattern, name)) 
[17:39:28.189]                               next
[17:39:28.189]                             invokeRestart(restart)
[17:39:28.189]                             muffled <- TRUE
[17:39:28.189]                             break
[17:39:28.189]                           }
[17:39:28.189]                         }
[17:39:28.189]                       }
[17:39:28.189]                       invisible(muffled)
[17:39:28.189]                     }
[17:39:28.189]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.189]                   }
[17:39:28.189]                 }
[17:39:28.189]                 else {
[17:39:28.189]                   if (TRUE) {
[17:39:28.189]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.189]                     {
[17:39:28.189]                       inherits <- base::inherits
[17:39:28.189]                       invokeRestart <- base::invokeRestart
[17:39:28.189]                       is.null <- base::is.null
[17:39:28.189]                       muffled <- FALSE
[17:39:28.189]                       if (inherits(cond, "message")) {
[17:39:28.189]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.189]                         if (muffled) 
[17:39:28.189]                           invokeRestart("muffleMessage")
[17:39:28.189]                       }
[17:39:28.189]                       else if (inherits(cond, "warning")) {
[17:39:28.189]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.189]                         if (muffled) 
[17:39:28.189]                           invokeRestart("muffleWarning")
[17:39:28.189]                       }
[17:39:28.189]                       else if (inherits(cond, "condition")) {
[17:39:28.189]                         if (!is.null(pattern)) {
[17:39:28.189]                           computeRestarts <- base::computeRestarts
[17:39:28.189]                           grepl <- base::grepl
[17:39:28.189]                           restarts <- computeRestarts(cond)
[17:39:28.189]                           for (restart in restarts) {
[17:39:28.189]                             name <- restart$name
[17:39:28.189]                             if (is.null(name)) 
[17:39:28.189]                               next
[17:39:28.189]                             if (!grepl(pattern, name)) 
[17:39:28.189]                               next
[17:39:28.189]                             invokeRestart(restart)
[17:39:28.189]                             muffled <- TRUE
[17:39:28.189]                             break
[17:39:28.189]                           }
[17:39:28.189]                         }
[17:39:28.189]                       }
[17:39:28.189]                       invisible(muffled)
[17:39:28.189]                     }
[17:39:28.189]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.189]                   }
[17:39:28.189]                 }
[17:39:28.189]             }
[17:39:28.189]         }))
[17:39:28.189]     }, error = function(ex) {
[17:39:28.189]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:28.189]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.189]                 ...future.rng), started = ...future.startTime, 
[17:39:28.189]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:28.189]             version = "1.8"), class = "FutureResult")
[17:39:28.189]     }, finally = {
[17:39:28.189]         if (!identical(...future.workdir, getwd())) 
[17:39:28.189]             setwd(...future.workdir)
[17:39:28.189]         {
[17:39:28.189]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:28.189]                 ...future.oldOptions$nwarnings <- NULL
[17:39:28.189]             }
[17:39:28.189]             base::options(...future.oldOptions)
[17:39:28.189]             if (.Platform$OS.type == "windows") {
[17:39:28.189]                 old_names <- names(...future.oldEnvVars)
[17:39:28.189]                 envs <- base::Sys.getenv()
[17:39:28.189]                 names <- names(envs)
[17:39:28.189]                 common <- intersect(names, old_names)
[17:39:28.189]                 added <- setdiff(names, old_names)
[17:39:28.189]                 removed <- setdiff(old_names, names)
[17:39:28.189]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:28.189]                   envs[common]]
[17:39:28.189]                 NAMES <- toupper(changed)
[17:39:28.189]                 args <- list()
[17:39:28.189]                 for (kk in seq_along(NAMES)) {
[17:39:28.189]                   name <- changed[[kk]]
[17:39:28.189]                   NAME <- NAMES[[kk]]
[17:39:28.189]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.189]                     next
[17:39:28.189]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.189]                 }
[17:39:28.189]                 NAMES <- toupper(added)
[17:39:28.189]                 for (kk in seq_along(NAMES)) {
[17:39:28.189]                   name <- added[[kk]]
[17:39:28.189]                   NAME <- NAMES[[kk]]
[17:39:28.189]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.189]                     next
[17:39:28.189]                   args[[name]] <- ""
[17:39:28.189]                 }
[17:39:28.189]                 NAMES <- toupper(removed)
[17:39:28.189]                 for (kk in seq_along(NAMES)) {
[17:39:28.189]                   name <- removed[[kk]]
[17:39:28.189]                   NAME <- NAMES[[kk]]
[17:39:28.189]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.189]                     next
[17:39:28.189]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.189]                 }
[17:39:28.189]                 if (length(args) > 0) 
[17:39:28.189]                   base::do.call(base::Sys.setenv, args = args)
[17:39:28.189]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:28.189]             }
[17:39:28.189]             else {
[17:39:28.189]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:28.189]             }
[17:39:28.189]             {
[17:39:28.189]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:28.189]                   0L) {
[17:39:28.189]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:28.189]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:28.189]                   base::options(opts)
[17:39:28.189]                 }
[17:39:28.189]                 {
[17:39:28.189]                   {
[17:39:28.189]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:28.189]                     NULL
[17:39:28.189]                   }
[17:39:28.189]                   options(future.plan = NULL)
[17:39:28.189]                   if (is.na(NA_character_)) 
[17:39:28.189]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.189]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:28.189]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:28.189]                     .init = FALSE)
[17:39:28.189]                 }
[17:39:28.189]             }
[17:39:28.189]         }
[17:39:28.189]     })
[17:39:28.189]     if (TRUE) {
[17:39:28.189]         base::sink(type = "output", split = FALSE)
[17:39:28.189]         if (TRUE) {
[17:39:28.189]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:28.189]         }
[17:39:28.189]         else {
[17:39:28.189]             ...future.result["stdout"] <- base::list(NULL)
[17:39:28.189]         }
[17:39:28.189]         base::close(...future.stdout)
[17:39:28.189]         ...future.stdout <- NULL
[17:39:28.189]     }
[17:39:28.189]     ...future.result$conditions <- ...future.conditions
[17:39:28.189]     ...future.result$finished <- base::Sys.time()
[17:39:28.189]     ...future.result
[17:39:28.189] }
[17:39:28.192] MultisessionFuture started
[17:39:28.193] - Launch lazy future ... done
[17:39:28.193] run() for ‘MultisessionFuture’ ... done
[17:39:28.193] getGlobalsAndPackages() ...
[17:39:28.193] Searching for globals...
[17:39:28.194] - globals found: [1] ‘{’
[17:39:28.195] Searching for globals ... DONE
[17:39:28.195] Resolving globals: FALSE
[17:39:28.195] 
[17:39:28.195] 
[17:39:28.195] getGlobalsAndPackages() ... DONE
[17:39:28.196] run() for ‘Future’ ...
[17:39:28.196] - state: ‘created’
[17:39:28.196] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:28.211] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:28.211] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:28.211]   - Field: ‘node’
[17:39:28.211]   - Field: ‘label’
[17:39:28.211]   - Field: ‘local’
[17:39:28.211]   - Field: ‘owner’
[17:39:28.211]   - Field: ‘envir’
[17:39:28.212]   - Field: ‘workers’
[17:39:28.212]   - Field: ‘packages’
[17:39:28.212]   - Field: ‘gc’
[17:39:28.212]   - Field: ‘conditions’
[17:39:28.212]   - Field: ‘persistent’
[17:39:28.212]   - Field: ‘expr’
[17:39:28.212]   - Field: ‘uuid’
[17:39:28.212]   - Field: ‘seed’
[17:39:28.213]   - Field: ‘version’
[17:39:28.213]   - Field: ‘result’
[17:39:28.213]   - Field: ‘asynchronous’
[17:39:28.213]   - Field: ‘calls’
[17:39:28.213]   - Field: ‘globals’
[17:39:28.213]   - Field: ‘stdout’
[17:39:28.213]   - Field: ‘earlySignal’
[17:39:28.213]   - Field: ‘lazy’
[17:39:28.213]   - Field: ‘state’
[17:39:28.214] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:28.214] - Launch lazy future ...
[17:39:28.214] Packages needed by the future expression (n = 0): <none>
[17:39:28.214] Packages needed by future strategies (n = 0): <none>
[17:39:28.215] {
[17:39:28.215]     {
[17:39:28.215]         {
[17:39:28.215]             ...future.startTime <- base::Sys.time()
[17:39:28.215]             {
[17:39:28.215]                 {
[17:39:28.215]                   {
[17:39:28.215]                     {
[17:39:28.215]                       base::local({
[17:39:28.215]                         has_future <- base::requireNamespace("future", 
[17:39:28.215]                           quietly = TRUE)
[17:39:28.215]                         if (has_future) {
[17:39:28.215]                           ns <- base::getNamespace("future")
[17:39:28.215]                           version <- ns[[".package"]][["version"]]
[17:39:28.215]                           if (is.null(version)) 
[17:39:28.215]                             version <- utils::packageVersion("future")
[17:39:28.215]                         }
[17:39:28.215]                         else {
[17:39:28.215]                           version <- NULL
[17:39:28.215]                         }
[17:39:28.215]                         if (!has_future || version < "1.8.0") {
[17:39:28.215]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:28.215]                             "", base::R.version$version.string), 
[17:39:28.215]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:28.215]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:28.215]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:28.215]                               "release", "version")], collapse = " "), 
[17:39:28.215]                             hostname = base::Sys.info()[["nodename"]])
[17:39:28.215]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:28.215]                             info)
[17:39:28.215]                           info <- base::paste(info, collapse = "; ")
[17:39:28.215]                           if (!has_future) {
[17:39:28.215]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:28.215]                               info)
[17:39:28.215]                           }
[17:39:28.215]                           else {
[17:39:28.215]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:28.215]                               info, version)
[17:39:28.215]                           }
[17:39:28.215]                           base::stop(msg)
[17:39:28.215]                         }
[17:39:28.215]                       })
[17:39:28.215]                     }
[17:39:28.215]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:28.215]                     base::options(mc.cores = 1L)
[17:39:28.215]                   }
[17:39:28.215]                   ...future.strategy.old <- future::plan("list")
[17:39:28.215]                   options(future.plan = NULL)
[17:39:28.215]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.215]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:28.215]                 }
[17:39:28.215]                 ...future.workdir <- getwd()
[17:39:28.215]             }
[17:39:28.215]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:28.215]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:28.215]         }
[17:39:28.215]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:28.215]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:28.215]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:28.215]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:28.215]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:28.215]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:28.215]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:28.215]             base::names(...future.oldOptions))
[17:39:28.215]     }
[17:39:28.215]     if (FALSE) {
[17:39:28.215]     }
[17:39:28.215]     else {
[17:39:28.215]         if (TRUE) {
[17:39:28.215]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:28.215]                 open = "w")
[17:39:28.215]         }
[17:39:28.215]         else {
[17:39:28.215]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:28.215]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:28.215]         }
[17:39:28.215]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:28.215]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:28.215]             base::sink(type = "output", split = FALSE)
[17:39:28.215]             base::close(...future.stdout)
[17:39:28.215]         }, add = TRUE)
[17:39:28.215]     }
[17:39:28.215]     ...future.frame <- base::sys.nframe()
[17:39:28.215]     ...future.conditions <- base::list()
[17:39:28.215]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:28.215]     if (FALSE) {
[17:39:28.215]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:28.215]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:28.215]     }
[17:39:28.215]     ...future.result <- base::tryCatch({
[17:39:28.215]         base::withCallingHandlers({
[17:39:28.215]             ...future.value <- base::withVisible(base::local({
[17:39:28.215]                 ...future.makeSendCondition <- base::local({
[17:39:28.215]                   sendCondition <- NULL
[17:39:28.215]                   function(frame = 1L) {
[17:39:28.215]                     if (is.function(sendCondition)) 
[17:39:28.215]                       return(sendCondition)
[17:39:28.215]                     ns <- getNamespace("parallel")
[17:39:28.215]                     if (exists("sendData", mode = "function", 
[17:39:28.215]                       envir = ns)) {
[17:39:28.215]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:28.215]                         envir = ns)
[17:39:28.215]                       envir <- sys.frame(frame)
[17:39:28.215]                       master <- NULL
[17:39:28.215]                       while (!identical(envir, .GlobalEnv) && 
[17:39:28.215]                         !identical(envir, emptyenv())) {
[17:39:28.215]                         if (exists("master", mode = "list", envir = envir, 
[17:39:28.215]                           inherits = FALSE)) {
[17:39:28.215]                           master <- get("master", mode = "list", 
[17:39:28.215]                             envir = envir, inherits = FALSE)
[17:39:28.215]                           if (inherits(master, c("SOCKnode", 
[17:39:28.215]                             "SOCK0node"))) {
[17:39:28.215]                             sendCondition <<- function(cond) {
[17:39:28.215]                               data <- list(type = "VALUE", value = cond, 
[17:39:28.215]                                 success = TRUE)
[17:39:28.215]                               parallel_sendData(master, data)
[17:39:28.215]                             }
[17:39:28.215]                             return(sendCondition)
[17:39:28.215]                           }
[17:39:28.215]                         }
[17:39:28.215]                         frame <- frame + 1L
[17:39:28.215]                         envir <- sys.frame(frame)
[17:39:28.215]                       }
[17:39:28.215]                     }
[17:39:28.215]                     sendCondition <<- function(cond) NULL
[17:39:28.215]                   }
[17:39:28.215]                 })
[17:39:28.215]                 withCallingHandlers({
[17:39:28.215]                   {
[17:39:28.215]                     4
[17:39:28.215]                   }
[17:39:28.215]                 }, immediateCondition = function(cond) {
[17:39:28.215]                   sendCondition <- ...future.makeSendCondition()
[17:39:28.215]                   sendCondition(cond)
[17:39:28.215]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.215]                   {
[17:39:28.215]                     inherits <- base::inherits
[17:39:28.215]                     invokeRestart <- base::invokeRestart
[17:39:28.215]                     is.null <- base::is.null
[17:39:28.215]                     muffled <- FALSE
[17:39:28.215]                     if (inherits(cond, "message")) {
[17:39:28.215]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:28.215]                       if (muffled) 
[17:39:28.215]                         invokeRestart("muffleMessage")
[17:39:28.215]                     }
[17:39:28.215]                     else if (inherits(cond, "warning")) {
[17:39:28.215]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:28.215]                       if (muffled) 
[17:39:28.215]                         invokeRestart("muffleWarning")
[17:39:28.215]                     }
[17:39:28.215]                     else if (inherits(cond, "condition")) {
[17:39:28.215]                       if (!is.null(pattern)) {
[17:39:28.215]                         computeRestarts <- base::computeRestarts
[17:39:28.215]                         grepl <- base::grepl
[17:39:28.215]                         restarts <- computeRestarts(cond)
[17:39:28.215]                         for (restart in restarts) {
[17:39:28.215]                           name <- restart$name
[17:39:28.215]                           if (is.null(name)) 
[17:39:28.215]                             next
[17:39:28.215]                           if (!grepl(pattern, name)) 
[17:39:28.215]                             next
[17:39:28.215]                           invokeRestart(restart)
[17:39:28.215]                           muffled <- TRUE
[17:39:28.215]                           break
[17:39:28.215]                         }
[17:39:28.215]                       }
[17:39:28.215]                     }
[17:39:28.215]                     invisible(muffled)
[17:39:28.215]                   }
[17:39:28.215]                   muffleCondition(cond)
[17:39:28.215]                 })
[17:39:28.215]             }))
[17:39:28.215]             future::FutureResult(value = ...future.value$value, 
[17:39:28.215]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.215]                   ...future.rng), globalenv = if (FALSE) 
[17:39:28.215]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:28.215]                     ...future.globalenv.names))
[17:39:28.215]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:28.215]         }, condition = base::local({
[17:39:28.215]             c <- base::c
[17:39:28.215]             inherits <- base::inherits
[17:39:28.215]             invokeRestart <- base::invokeRestart
[17:39:28.215]             length <- base::length
[17:39:28.215]             list <- base::list
[17:39:28.215]             seq.int <- base::seq.int
[17:39:28.215]             signalCondition <- base::signalCondition
[17:39:28.215]             sys.calls <- base::sys.calls
[17:39:28.215]             `[[` <- base::`[[`
[17:39:28.215]             `+` <- base::`+`
[17:39:28.215]             `<<-` <- base::`<<-`
[17:39:28.215]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:28.215]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:28.215]                   3L)]
[17:39:28.215]             }
[17:39:28.215]             function(cond) {
[17:39:28.215]                 is_error <- inherits(cond, "error")
[17:39:28.215]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:28.215]                   NULL)
[17:39:28.215]                 if (is_error) {
[17:39:28.215]                   sessionInformation <- function() {
[17:39:28.215]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:28.215]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:28.215]                       search = base::search(), system = base::Sys.info())
[17:39:28.215]                   }
[17:39:28.215]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.215]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:28.215]                     cond$call), session = sessionInformation(), 
[17:39:28.215]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:28.215]                   signalCondition(cond)
[17:39:28.215]                 }
[17:39:28.215]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:28.215]                 "immediateCondition"))) {
[17:39:28.215]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:28.215]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.215]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:28.215]                   if (TRUE && !signal) {
[17:39:28.215]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.215]                     {
[17:39:28.215]                       inherits <- base::inherits
[17:39:28.215]                       invokeRestart <- base::invokeRestart
[17:39:28.215]                       is.null <- base::is.null
[17:39:28.215]                       muffled <- FALSE
[17:39:28.215]                       if (inherits(cond, "message")) {
[17:39:28.215]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.215]                         if (muffled) 
[17:39:28.215]                           invokeRestart("muffleMessage")
[17:39:28.215]                       }
[17:39:28.215]                       else if (inherits(cond, "warning")) {
[17:39:28.215]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.215]                         if (muffled) 
[17:39:28.215]                           invokeRestart("muffleWarning")
[17:39:28.215]                       }
[17:39:28.215]                       else if (inherits(cond, "condition")) {
[17:39:28.215]                         if (!is.null(pattern)) {
[17:39:28.215]                           computeRestarts <- base::computeRestarts
[17:39:28.215]                           grepl <- base::grepl
[17:39:28.215]                           restarts <- computeRestarts(cond)
[17:39:28.215]                           for (restart in restarts) {
[17:39:28.215]                             name <- restart$name
[17:39:28.215]                             if (is.null(name)) 
[17:39:28.215]                               next
[17:39:28.215]                             if (!grepl(pattern, name)) 
[17:39:28.215]                               next
[17:39:28.215]                             invokeRestart(restart)
[17:39:28.215]                             muffled <- TRUE
[17:39:28.215]                             break
[17:39:28.215]                           }
[17:39:28.215]                         }
[17:39:28.215]                       }
[17:39:28.215]                       invisible(muffled)
[17:39:28.215]                     }
[17:39:28.215]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.215]                   }
[17:39:28.215]                 }
[17:39:28.215]                 else {
[17:39:28.215]                   if (TRUE) {
[17:39:28.215]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.215]                     {
[17:39:28.215]                       inherits <- base::inherits
[17:39:28.215]                       invokeRestart <- base::invokeRestart
[17:39:28.215]                       is.null <- base::is.null
[17:39:28.215]                       muffled <- FALSE
[17:39:28.215]                       if (inherits(cond, "message")) {
[17:39:28.215]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.215]                         if (muffled) 
[17:39:28.215]                           invokeRestart("muffleMessage")
[17:39:28.215]                       }
[17:39:28.215]                       else if (inherits(cond, "warning")) {
[17:39:28.215]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.215]                         if (muffled) 
[17:39:28.215]                           invokeRestart("muffleWarning")
[17:39:28.215]                       }
[17:39:28.215]                       else if (inherits(cond, "condition")) {
[17:39:28.215]                         if (!is.null(pattern)) {
[17:39:28.215]                           computeRestarts <- base::computeRestarts
[17:39:28.215]                           grepl <- base::grepl
[17:39:28.215]                           restarts <- computeRestarts(cond)
[17:39:28.215]                           for (restart in restarts) {
[17:39:28.215]                             name <- restart$name
[17:39:28.215]                             if (is.null(name)) 
[17:39:28.215]                               next
[17:39:28.215]                             if (!grepl(pattern, name)) 
[17:39:28.215]                               next
[17:39:28.215]                             invokeRestart(restart)
[17:39:28.215]                             muffled <- TRUE
[17:39:28.215]                             break
[17:39:28.215]                           }
[17:39:28.215]                         }
[17:39:28.215]                       }
[17:39:28.215]                       invisible(muffled)
[17:39:28.215]                     }
[17:39:28.215]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.215]                   }
[17:39:28.215]                 }
[17:39:28.215]             }
[17:39:28.215]         }))
[17:39:28.215]     }, error = function(ex) {
[17:39:28.215]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:28.215]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.215]                 ...future.rng), started = ...future.startTime, 
[17:39:28.215]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:28.215]             version = "1.8"), class = "FutureResult")
[17:39:28.215]     }, finally = {
[17:39:28.215]         if (!identical(...future.workdir, getwd())) 
[17:39:28.215]             setwd(...future.workdir)
[17:39:28.215]         {
[17:39:28.215]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:28.215]                 ...future.oldOptions$nwarnings <- NULL
[17:39:28.215]             }
[17:39:28.215]             base::options(...future.oldOptions)
[17:39:28.215]             if (.Platform$OS.type == "windows") {
[17:39:28.215]                 old_names <- names(...future.oldEnvVars)
[17:39:28.215]                 envs <- base::Sys.getenv()
[17:39:28.215]                 names <- names(envs)
[17:39:28.215]                 common <- intersect(names, old_names)
[17:39:28.215]                 added <- setdiff(names, old_names)
[17:39:28.215]                 removed <- setdiff(old_names, names)
[17:39:28.215]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:28.215]                   envs[common]]
[17:39:28.215]                 NAMES <- toupper(changed)
[17:39:28.215]                 args <- list()
[17:39:28.215]                 for (kk in seq_along(NAMES)) {
[17:39:28.215]                   name <- changed[[kk]]
[17:39:28.215]                   NAME <- NAMES[[kk]]
[17:39:28.215]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.215]                     next
[17:39:28.215]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.215]                 }
[17:39:28.215]                 NAMES <- toupper(added)
[17:39:28.215]                 for (kk in seq_along(NAMES)) {
[17:39:28.215]                   name <- added[[kk]]
[17:39:28.215]                   NAME <- NAMES[[kk]]
[17:39:28.215]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.215]                     next
[17:39:28.215]                   args[[name]] <- ""
[17:39:28.215]                 }
[17:39:28.215]                 NAMES <- toupper(removed)
[17:39:28.215]                 for (kk in seq_along(NAMES)) {
[17:39:28.215]                   name <- removed[[kk]]
[17:39:28.215]                   NAME <- NAMES[[kk]]
[17:39:28.215]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.215]                     next
[17:39:28.215]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.215]                 }
[17:39:28.215]                 if (length(args) > 0) 
[17:39:28.215]                   base::do.call(base::Sys.setenv, args = args)
[17:39:28.215]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:28.215]             }
[17:39:28.215]             else {
[17:39:28.215]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:28.215]             }
[17:39:28.215]             {
[17:39:28.215]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:28.215]                   0L) {
[17:39:28.215]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:28.215]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:28.215]                   base::options(opts)
[17:39:28.215]                 }
[17:39:28.215]                 {
[17:39:28.215]                   {
[17:39:28.215]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:28.215]                     NULL
[17:39:28.215]                   }
[17:39:28.215]                   options(future.plan = NULL)
[17:39:28.215]                   if (is.na(NA_character_)) 
[17:39:28.215]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.215]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:28.215]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:28.215]                     .init = FALSE)
[17:39:28.215]                 }
[17:39:28.215]             }
[17:39:28.215]         }
[17:39:28.215]     })
[17:39:28.215]     if (TRUE) {
[17:39:28.215]         base::sink(type = "output", split = FALSE)
[17:39:28.215]         if (TRUE) {
[17:39:28.215]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:28.215]         }
[17:39:28.215]         else {
[17:39:28.215]             ...future.result["stdout"] <- base::list(NULL)
[17:39:28.215]         }
[17:39:28.215]         base::close(...future.stdout)
[17:39:28.215]         ...future.stdout <- NULL
[17:39:28.215]     }
[17:39:28.215]     ...future.result$conditions <- ...future.conditions
[17:39:28.215]     ...future.result$finished <- base::Sys.time()
[17:39:28.215]     ...future.result
[17:39:28.215] }
[17:39:28.268] MultisessionFuture started
[17:39:28.268] - Launch lazy future ... done
[17:39:28.268] run() for ‘MultisessionFuture’ ... done
[17:39:28.268] result() for ClusterFuture ...
[17:39:28.268] receiveMessageFromWorker() for ClusterFuture ...
[17:39:28.269] - Validating connection of MultisessionFuture
[17:39:28.269] - received message: FutureResult
[17:39:28.269] - Received FutureResult
[17:39:28.269] - Erased future from FutureRegistry
[17:39:28.269] result() for ClusterFuture ...
[17:39:28.269] - result already collected: FutureResult
[17:39:28.269] result() for ClusterFuture ... done
[17:39:28.270] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:28.270] result() for ClusterFuture ... done
[17:39:28.270] result() for ClusterFuture ...
[17:39:28.270] - result already collected: FutureResult
[17:39:28.270] result() for ClusterFuture ... done
u$a = 2
[17:39:28.270] result() for ClusterFuture ...
[17:39:28.270] receiveMessageFromWorker() for ClusterFuture ...
[17:39:28.270] - Validating connection of MultisessionFuture
[17:39:28.300] - received message: FutureResult
[17:39:28.300] - Received FutureResult
[17:39:28.301] - Erased future from FutureRegistry
[17:39:28.301] result() for ClusterFuture ...
[17:39:28.301] - result already collected: FutureResult
[17:39:28.301] result() for ClusterFuture ... done
[17:39:28.301] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:28.301] result() for ClusterFuture ... done
[17:39:28.301] result() for ClusterFuture ...
[17:39:28.302] - result already collected: FutureResult
[17:39:28.302] result() for ClusterFuture ... done
v$a = 4
[17:39:28.302] getGlobalsAndPackages() ...
[17:39:28.302] Searching for globals...
[17:39:28.303] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:28.303] Searching for globals ... DONE
[17:39:28.303] Resolving globals: FALSE
[17:39:28.304] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:28.304] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:28.305] - globals: [1] ‘a’
[17:39:28.305] 
[17:39:28.305] getGlobalsAndPackages() ... DONE
[17:39:28.305] run() for ‘Future’ ...
[17:39:28.305] - state: ‘created’
[17:39:28.305] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:28.320] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:28.320] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:28.320]   - Field: ‘node’
[17:39:28.321]   - Field: ‘label’
[17:39:28.321]   - Field: ‘local’
[17:39:28.321]   - Field: ‘owner’
[17:39:28.321]   - Field: ‘envir’
[17:39:28.321]   - Field: ‘workers’
[17:39:28.321]   - Field: ‘packages’
[17:39:28.321]   - Field: ‘gc’
[17:39:28.321]   - Field: ‘conditions’
[17:39:28.321]   - Field: ‘persistent’
[17:39:28.321]   - Field: ‘expr’
[17:39:28.322]   - Field: ‘uuid’
[17:39:28.322]   - Field: ‘seed’
[17:39:28.322]   - Field: ‘version’
[17:39:28.322]   - Field: ‘result’
[17:39:28.322]   - Field: ‘asynchronous’
[17:39:28.322]   - Field: ‘calls’
[17:39:28.322]   - Field: ‘globals’
[17:39:28.322]   - Field: ‘stdout’
[17:39:28.322]   - Field: ‘earlySignal’
[17:39:28.323]   - Field: ‘lazy’
[17:39:28.323]   - Field: ‘state’
[17:39:28.323] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:28.323] - Launch lazy future ...
[17:39:28.323] Packages needed by the future expression (n = 0): <none>
[17:39:28.323] Packages needed by future strategies (n = 0): <none>
[17:39:28.324] {
[17:39:28.324]     {
[17:39:28.324]         {
[17:39:28.324]             ...future.startTime <- base::Sys.time()
[17:39:28.324]             {
[17:39:28.324]                 {
[17:39:28.324]                   {
[17:39:28.324]                     {
[17:39:28.324]                       base::local({
[17:39:28.324]                         has_future <- base::requireNamespace("future", 
[17:39:28.324]                           quietly = TRUE)
[17:39:28.324]                         if (has_future) {
[17:39:28.324]                           ns <- base::getNamespace("future")
[17:39:28.324]                           version <- ns[[".package"]][["version"]]
[17:39:28.324]                           if (is.null(version)) 
[17:39:28.324]                             version <- utils::packageVersion("future")
[17:39:28.324]                         }
[17:39:28.324]                         else {
[17:39:28.324]                           version <- NULL
[17:39:28.324]                         }
[17:39:28.324]                         if (!has_future || version < "1.8.0") {
[17:39:28.324]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:28.324]                             "", base::R.version$version.string), 
[17:39:28.324]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:28.324]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:28.324]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:28.324]                               "release", "version")], collapse = " "), 
[17:39:28.324]                             hostname = base::Sys.info()[["nodename"]])
[17:39:28.324]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:28.324]                             info)
[17:39:28.324]                           info <- base::paste(info, collapse = "; ")
[17:39:28.324]                           if (!has_future) {
[17:39:28.324]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:28.324]                               info)
[17:39:28.324]                           }
[17:39:28.324]                           else {
[17:39:28.324]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:28.324]                               info, version)
[17:39:28.324]                           }
[17:39:28.324]                           base::stop(msg)
[17:39:28.324]                         }
[17:39:28.324]                       })
[17:39:28.324]                     }
[17:39:28.324]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:28.324]                     base::options(mc.cores = 1L)
[17:39:28.324]                   }
[17:39:28.324]                   ...future.strategy.old <- future::plan("list")
[17:39:28.324]                   options(future.plan = NULL)
[17:39:28.324]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.324]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:28.324]                 }
[17:39:28.324]                 ...future.workdir <- getwd()
[17:39:28.324]             }
[17:39:28.324]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:28.324]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:28.324]         }
[17:39:28.324]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:28.324]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:28.324]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:28.324]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:28.324]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:28.324]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:28.324]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:28.324]             base::names(...future.oldOptions))
[17:39:28.324]     }
[17:39:28.324]     if (FALSE) {
[17:39:28.324]     }
[17:39:28.324]     else {
[17:39:28.324]         if (TRUE) {
[17:39:28.324]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:28.324]                 open = "w")
[17:39:28.324]         }
[17:39:28.324]         else {
[17:39:28.324]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:28.324]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:28.324]         }
[17:39:28.324]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:28.324]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:28.324]             base::sink(type = "output", split = FALSE)
[17:39:28.324]             base::close(...future.stdout)
[17:39:28.324]         }, add = TRUE)
[17:39:28.324]     }
[17:39:28.324]     ...future.frame <- base::sys.nframe()
[17:39:28.324]     ...future.conditions <- base::list()
[17:39:28.324]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:28.324]     if (FALSE) {
[17:39:28.324]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:28.324]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:28.324]     }
[17:39:28.324]     ...future.result <- base::tryCatch({
[17:39:28.324]         base::withCallingHandlers({
[17:39:28.324]             ...future.value <- base::withVisible(base::local({
[17:39:28.324]                 ...future.makeSendCondition <- base::local({
[17:39:28.324]                   sendCondition <- NULL
[17:39:28.324]                   function(frame = 1L) {
[17:39:28.324]                     if (is.function(sendCondition)) 
[17:39:28.324]                       return(sendCondition)
[17:39:28.324]                     ns <- getNamespace("parallel")
[17:39:28.324]                     if (exists("sendData", mode = "function", 
[17:39:28.324]                       envir = ns)) {
[17:39:28.324]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:28.324]                         envir = ns)
[17:39:28.324]                       envir <- sys.frame(frame)
[17:39:28.324]                       master <- NULL
[17:39:28.324]                       while (!identical(envir, .GlobalEnv) && 
[17:39:28.324]                         !identical(envir, emptyenv())) {
[17:39:28.324]                         if (exists("master", mode = "list", envir = envir, 
[17:39:28.324]                           inherits = FALSE)) {
[17:39:28.324]                           master <- get("master", mode = "list", 
[17:39:28.324]                             envir = envir, inherits = FALSE)
[17:39:28.324]                           if (inherits(master, c("SOCKnode", 
[17:39:28.324]                             "SOCK0node"))) {
[17:39:28.324]                             sendCondition <<- function(cond) {
[17:39:28.324]                               data <- list(type = "VALUE", value = cond, 
[17:39:28.324]                                 success = TRUE)
[17:39:28.324]                               parallel_sendData(master, data)
[17:39:28.324]                             }
[17:39:28.324]                             return(sendCondition)
[17:39:28.324]                           }
[17:39:28.324]                         }
[17:39:28.324]                         frame <- frame + 1L
[17:39:28.324]                         envir <- sys.frame(frame)
[17:39:28.324]                       }
[17:39:28.324]                     }
[17:39:28.324]                     sendCondition <<- function(cond) NULL
[17:39:28.324]                   }
[17:39:28.324]                 })
[17:39:28.324]                 withCallingHandlers({
[17:39:28.324]                   {
[17:39:28.324]                     2 * a
[17:39:28.324]                   }
[17:39:28.324]                 }, immediateCondition = function(cond) {
[17:39:28.324]                   sendCondition <- ...future.makeSendCondition()
[17:39:28.324]                   sendCondition(cond)
[17:39:28.324]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.324]                   {
[17:39:28.324]                     inherits <- base::inherits
[17:39:28.324]                     invokeRestart <- base::invokeRestart
[17:39:28.324]                     is.null <- base::is.null
[17:39:28.324]                     muffled <- FALSE
[17:39:28.324]                     if (inherits(cond, "message")) {
[17:39:28.324]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:28.324]                       if (muffled) 
[17:39:28.324]                         invokeRestart("muffleMessage")
[17:39:28.324]                     }
[17:39:28.324]                     else if (inherits(cond, "warning")) {
[17:39:28.324]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:28.324]                       if (muffled) 
[17:39:28.324]                         invokeRestart("muffleWarning")
[17:39:28.324]                     }
[17:39:28.324]                     else if (inherits(cond, "condition")) {
[17:39:28.324]                       if (!is.null(pattern)) {
[17:39:28.324]                         computeRestarts <- base::computeRestarts
[17:39:28.324]                         grepl <- base::grepl
[17:39:28.324]                         restarts <- computeRestarts(cond)
[17:39:28.324]                         for (restart in restarts) {
[17:39:28.324]                           name <- restart$name
[17:39:28.324]                           if (is.null(name)) 
[17:39:28.324]                             next
[17:39:28.324]                           if (!grepl(pattern, name)) 
[17:39:28.324]                             next
[17:39:28.324]                           invokeRestart(restart)
[17:39:28.324]                           muffled <- TRUE
[17:39:28.324]                           break
[17:39:28.324]                         }
[17:39:28.324]                       }
[17:39:28.324]                     }
[17:39:28.324]                     invisible(muffled)
[17:39:28.324]                   }
[17:39:28.324]                   muffleCondition(cond)
[17:39:28.324]                 })
[17:39:28.324]             }))
[17:39:28.324]             future::FutureResult(value = ...future.value$value, 
[17:39:28.324]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.324]                   ...future.rng), globalenv = if (FALSE) 
[17:39:28.324]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:28.324]                     ...future.globalenv.names))
[17:39:28.324]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:28.324]         }, condition = base::local({
[17:39:28.324]             c <- base::c
[17:39:28.324]             inherits <- base::inherits
[17:39:28.324]             invokeRestart <- base::invokeRestart
[17:39:28.324]             length <- base::length
[17:39:28.324]             list <- base::list
[17:39:28.324]             seq.int <- base::seq.int
[17:39:28.324]             signalCondition <- base::signalCondition
[17:39:28.324]             sys.calls <- base::sys.calls
[17:39:28.324]             `[[` <- base::`[[`
[17:39:28.324]             `+` <- base::`+`
[17:39:28.324]             `<<-` <- base::`<<-`
[17:39:28.324]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:28.324]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:28.324]                   3L)]
[17:39:28.324]             }
[17:39:28.324]             function(cond) {
[17:39:28.324]                 is_error <- inherits(cond, "error")
[17:39:28.324]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:28.324]                   NULL)
[17:39:28.324]                 if (is_error) {
[17:39:28.324]                   sessionInformation <- function() {
[17:39:28.324]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:28.324]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:28.324]                       search = base::search(), system = base::Sys.info())
[17:39:28.324]                   }
[17:39:28.324]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.324]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:28.324]                     cond$call), session = sessionInformation(), 
[17:39:28.324]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:28.324]                   signalCondition(cond)
[17:39:28.324]                 }
[17:39:28.324]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:28.324]                 "immediateCondition"))) {
[17:39:28.324]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:28.324]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.324]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:28.324]                   if (TRUE && !signal) {
[17:39:28.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.324]                     {
[17:39:28.324]                       inherits <- base::inherits
[17:39:28.324]                       invokeRestart <- base::invokeRestart
[17:39:28.324]                       is.null <- base::is.null
[17:39:28.324]                       muffled <- FALSE
[17:39:28.324]                       if (inherits(cond, "message")) {
[17:39:28.324]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.324]                         if (muffled) 
[17:39:28.324]                           invokeRestart("muffleMessage")
[17:39:28.324]                       }
[17:39:28.324]                       else if (inherits(cond, "warning")) {
[17:39:28.324]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.324]                         if (muffled) 
[17:39:28.324]                           invokeRestart("muffleWarning")
[17:39:28.324]                       }
[17:39:28.324]                       else if (inherits(cond, "condition")) {
[17:39:28.324]                         if (!is.null(pattern)) {
[17:39:28.324]                           computeRestarts <- base::computeRestarts
[17:39:28.324]                           grepl <- base::grepl
[17:39:28.324]                           restarts <- computeRestarts(cond)
[17:39:28.324]                           for (restart in restarts) {
[17:39:28.324]                             name <- restart$name
[17:39:28.324]                             if (is.null(name)) 
[17:39:28.324]                               next
[17:39:28.324]                             if (!grepl(pattern, name)) 
[17:39:28.324]                               next
[17:39:28.324]                             invokeRestart(restart)
[17:39:28.324]                             muffled <- TRUE
[17:39:28.324]                             break
[17:39:28.324]                           }
[17:39:28.324]                         }
[17:39:28.324]                       }
[17:39:28.324]                       invisible(muffled)
[17:39:28.324]                     }
[17:39:28.324]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.324]                   }
[17:39:28.324]                 }
[17:39:28.324]                 else {
[17:39:28.324]                   if (TRUE) {
[17:39:28.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.324]                     {
[17:39:28.324]                       inherits <- base::inherits
[17:39:28.324]                       invokeRestart <- base::invokeRestart
[17:39:28.324]                       is.null <- base::is.null
[17:39:28.324]                       muffled <- FALSE
[17:39:28.324]                       if (inherits(cond, "message")) {
[17:39:28.324]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.324]                         if (muffled) 
[17:39:28.324]                           invokeRestart("muffleMessage")
[17:39:28.324]                       }
[17:39:28.324]                       else if (inherits(cond, "warning")) {
[17:39:28.324]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.324]                         if (muffled) 
[17:39:28.324]                           invokeRestart("muffleWarning")
[17:39:28.324]                       }
[17:39:28.324]                       else if (inherits(cond, "condition")) {
[17:39:28.324]                         if (!is.null(pattern)) {
[17:39:28.324]                           computeRestarts <- base::computeRestarts
[17:39:28.324]                           grepl <- base::grepl
[17:39:28.324]                           restarts <- computeRestarts(cond)
[17:39:28.324]                           for (restart in restarts) {
[17:39:28.324]                             name <- restart$name
[17:39:28.324]                             if (is.null(name)) 
[17:39:28.324]                               next
[17:39:28.324]                             if (!grepl(pattern, name)) 
[17:39:28.324]                               next
[17:39:28.324]                             invokeRestart(restart)
[17:39:28.324]                             muffled <- TRUE
[17:39:28.324]                             break
[17:39:28.324]                           }
[17:39:28.324]                         }
[17:39:28.324]                       }
[17:39:28.324]                       invisible(muffled)
[17:39:28.324]                     }
[17:39:28.324]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.324]                   }
[17:39:28.324]                 }
[17:39:28.324]             }
[17:39:28.324]         }))
[17:39:28.324]     }, error = function(ex) {
[17:39:28.324]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:28.324]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.324]                 ...future.rng), started = ...future.startTime, 
[17:39:28.324]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:28.324]             version = "1.8"), class = "FutureResult")
[17:39:28.324]     }, finally = {
[17:39:28.324]         if (!identical(...future.workdir, getwd())) 
[17:39:28.324]             setwd(...future.workdir)
[17:39:28.324]         {
[17:39:28.324]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:28.324]                 ...future.oldOptions$nwarnings <- NULL
[17:39:28.324]             }
[17:39:28.324]             base::options(...future.oldOptions)
[17:39:28.324]             if (.Platform$OS.type == "windows") {
[17:39:28.324]                 old_names <- names(...future.oldEnvVars)
[17:39:28.324]                 envs <- base::Sys.getenv()
[17:39:28.324]                 names <- names(envs)
[17:39:28.324]                 common <- intersect(names, old_names)
[17:39:28.324]                 added <- setdiff(names, old_names)
[17:39:28.324]                 removed <- setdiff(old_names, names)
[17:39:28.324]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:28.324]                   envs[common]]
[17:39:28.324]                 NAMES <- toupper(changed)
[17:39:28.324]                 args <- list()
[17:39:28.324]                 for (kk in seq_along(NAMES)) {
[17:39:28.324]                   name <- changed[[kk]]
[17:39:28.324]                   NAME <- NAMES[[kk]]
[17:39:28.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.324]                     next
[17:39:28.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.324]                 }
[17:39:28.324]                 NAMES <- toupper(added)
[17:39:28.324]                 for (kk in seq_along(NAMES)) {
[17:39:28.324]                   name <- added[[kk]]
[17:39:28.324]                   NAME <- NAMES[[kk]]
[17:39:28.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.324]                     next
[17:39:28.324]                   args[[name]] <- ""
[17:39:28.324]                 }
[17:39:28.324]                 NAMES <- toupper(removed)
[17:39:28.324]                 for (kk in seq_along(NAMES)) {
[17:39:28.324]                   name <- removed[[kk]]
[17:39:28.324]                   NAME <- NAMES[[kk]]
[17:39:28.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.324]                     next
[17:39:28.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.324]                 }
[17:39:28.324]                 if (length(args) > 0) 
[17:39:28.324]                   base::do.call(base::Sys.setenv, args = args)
[17:39:28.324]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:28.324]             }
[17:39:28.324]             else {
[17:39:28.324]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:28.324]             }
[17:39:28.324]             {
[17:39:28.324]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:28.324]                   0L) {
[17:39:28.324]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:28.324]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:28.324]                   base::options(opts)
[17:39:28.324]                 }
[17:39:28.324]                 {
[17:39:28.324]                   {
[17:39:28.324]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:28.324]                     NULL
[17:39:28.324]                   }
[17:39:28.324]                   options(future.plan = NULL)
[17:39:28.324]                   if (is.na(NA_character_)) 
[17:39:28.324]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.324]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:28.324]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:28.324]                     .init = FALSE)
[17:39:28.324]                 }
[17:39:28.324]             }
[17:39:28.324]         }
[17:39:28.324]     })
[17:39:28.324]     if (TRUE) {
[17:39:28.324]         base::sink(type = "output", split = FALSE)
[17:39:28.324]         if (TRUE) {
[17:39:28.324]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:28.324]         }
[17:39:28.324]         else {
[17:39:28.324]             ...future.result["stdout"] <- base::list(NULL)
[17:39:28.324]         }
[17:39:28.324]         base::close(...future.stdout)
[17:39:28.324]         ...future.stdout <- NULL
[17:39:28.324]     }
[17:39:28.324]     ...future.result$conditions <- ...future.conditions
[17:39:28.324]     ...future.result$finished <- base::Sys.time()
[17:39:28.324]     ...future.result
[17:39:28.324] }
[17:39:28.327] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:39:28.327] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:39:28.328] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:39:28.328] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:39:28.328] MultisessionFuture started
[17:39:28.328] - Launch lazy future ... done
[17:39:28.329] run() for ‘MultisessionFuture’ ... done
[17:39:28.329] result() for ClusterFuture ...
[17:39:28.329] receiveMessageFromWorker() for ClusterFuture ...
[17:39:28.329] - Validating connection of MultisessionFuture
[17:39:28.333] - received message: FutureResult
[17:39:28.334] - Received FutureResult
[17:39:28.334] - Erased future from FutureRegistry
[17:39:28.334] result() for ClusterFuture ...
[17:39:28.334] - result already collected: FutureResult
[17:39:28.334] result() for ClusterFuture ... done
[17:39:28.334] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:28.334] result() for ClusterFuture ... done
[17:39:28.334] result() for ClusterFuture ...
[17:39:28.335] - result already collected: FutureResult
[17:39:28.335] result() for ClusterFuture ... done
[17:39:28.335] getGlobalsAndPackages() ...
[17:39:28.335] Searching for globals...
[17:39:28.336] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:28.336] Searching for globals ... DONE
[17:39:28.336] Resolving globals: FALSE
[17:39:28.337] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:28.337] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:28.337] - globals: [1] ‘a’
[17:39:28.338] 
[17:39:28.338] getGlobalsAndPackages() ... DONE
[17:39:28.338] run() for ‘Future’ ...
[17:39:28.338] - state: ‘created’
[17:39:28.338] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:28.354] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:28.354] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:28.354]   - Field: ‘node’
[17:39:28.355]   - Field: ‘label’
[17:39:28.355]   - Field: ‘local’
[17:39:28.355]   - Field: ‘owner’
[17:39:28.355]   - Field: ‘envir’
[17:39:28.355]   - Field: ‘workers’
[17:39:28.355]   - Field: ‘packages’
[17:39:28.355]   - Field: ‘gc’
[17:39:28.355]   - Field: ‘conditions’
[17:39:28.355]   - Field: ‘persistent’
[17:39:28.355]   - Field: ‘expr’
[17:39:28.355]   - Field: ‘uuid’
[17:39:28.356]   - Field: ‘seed’
[17:39:28.356]   - Field: ‘version’
[17:39:28.356]   - Field: ‘result’
[17:39:28.356]   - Field: ‘asynchronous’
[17:39:28.356]   - Field: ‘calls’
[17:39:28.356]   - Field: ‘globals’
[17:39:28.356]   - Field: ‘stdout’
[17:39:28.356]   - Field: ‘earlySignal’
[17:39:28.356]   - Field: ‘lazy’
[17:39:28.356]   - Field: ‘state’
[17:39:28.356] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:28.357] - Launch lazy future ...
[17:39:28.357] Packages needed by the future expression (n = 0): <none>
[17:39:28.357] Packages needed by future strategies (n = 0): <none>
[17:39:28.357] {
[17:39:28.357]     {
[17:39:28.357]         {
[17:39:28.357]             ...future.startTime <- base::Sys.time()
[17:39:28.357]             {
[17:39:28.357]                 {
[17:39:28.357]                   {
[17:39:28.357]                     {
[17:39:28.357]                       base::local({
[17:39:28.357]                         has_future <- base::requireNamespace("future", 
[17:39:28.357]                           quietly = TRUE)
[17:39:28.357]                         if (has_future) {
[17:39:28.357]                           ns <- base::getNamespace("future")
[17:39:28.357]                           version <- ns[[".package"]][["version"]]
[17:39:28.357]                           if (is.null(version)) 
[17:39:28.357]                             version <- utils::packageVersion("future")
[17:39:28.357]                         }
[17:39:28.357]                         else {
[17:39:28.357]                           version <- NULL
[17:39:28.357]                         }
[17:39:28.357]                         if (!has_future || version < "1.8.0") {
[17:39:28.357]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:28.357]                             "", base::R.version$version.string), 
[17:39:28.357]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:28.357]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:28.357]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:28.357]                               "release", "version")], collapse = " "), 
[17:39:28.357]                             hostname = base::Sys.info()[["nodename"]])
[17:39:28.357]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:28.357]                             info)
[17:39:28.357]                           info <- base::paste(info, collapse = "; ")
[17:39:28.357]                           if (!has_future) {
[17:39:28.357]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:28.357]                               info)
[17:39:28.357]                           }
[17:39:28.357]                           else {
[17:39:28.357]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:28.357]                               info, version)
[17:39:28.357]                           }
[17:39:28.357]                           base::stop(msg)
[17:39:28.357]                         }
[17:39:28.357]                       })
[17:39:28.357]                     }
[17:39:28.357]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:28.357]                     base::options(mc.cores = 1L)
[17:39:28.357]                   }
[17:39:28.357]                   ...future.strategy.old <- future::plan("list")
[17:39:28.357]                   options(future.plan = NULL)
[17:39:28.357]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.357]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:28.357]                 }
[17:39:28.357]                 ...future.workdir <- getwd()
[17:39:28.357]             }
[17:39:28.357]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:28.357]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:28.357]         }
[17:39:28.357]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:28.357]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:28.357]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:28.357]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:28.357]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:28.357]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:28.357]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:28.357]             base::names(...future.oldOptions))
[17:39:28.357]     }
[17:39:28.357]     if (FALSE) {
[17:39:28.357]     }
[17:39:28.357]     else {
[17:39:28.357]         if (TRUE) {
[17:39:28.357]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:28.357]                 open = "w")
[17:39:28.357]         }
[17:39:28.357]         else {
[17:39:28.357]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:28.357]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:28.357]         }
[17:39:28.357]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:28.357]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:28.357]             base::sink(type = "output", split = FALSE)
[17:39:28.357]             base::close(...future.stdout)
[17:39:28.357]         }, add = TRUE)
[17:39:28.357]     }
[17:39:28.357]     ...future.frame <- base::sys.nframe()
[17:39:28.357]     ...future.conditions <- base::list()
[17:39:28.357]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:28.357]     if (FALSE) {
[17:39:28.357]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:28.357]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:28.357]     }
[17:39:28.357]     ...future.result <- base::tryCatch({
[17:39:28.357]         base::withCallingHandlers({
[17:39:28.357]             ...future.value <- base::withVisible(base::local({
[17:39:28.357]                 ...future.makeSendCondition <- base::local({
[17:39:28.357]                   sendCondition <- NULL
[17:39:28.357]                   function(frame = 1L) {
[17:39:28.357]                     if (is.function(sendCondition)) 
[17:39:28.357]                       return(sendCondition)
[17:39:28.357]                     ns <- getNamespace("parallel")
[17:39:28.357]                     if (exists("sendData", mode = "function", 
[17:39:28.357]                       envir = ns)) {
[17:39:28.357]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:28.357]                         envir = ns)
[17:39:28.357]                       envir <- sys.frame(frame)
[17:39:28.357]                       master <- NULL
[17:39:28.357]                       while (!identical(envir, .GlobalEnv) && 
[17:39:28.357]                         !identical(envir, emptyenv())) {
[17:39:28.357]                         if (exists("master", mode = "list", envir = envir, 
[17:39:28.357]                           inherits = FALSE)) {
[17:39:28.357]                           master <- get("master", mode = "list", 
[17:39:28.357]                             envir = envir, inherits = FALSE)
[17:39:28.357]                           if (inherits(master, c("SOCKnode", 
[17:39:28.357]                             "SOCK0node"))) {
[17:39:28.357]                             sendCondition <<- function(cond) {
[17:39:28.357]                               data <- list(type = "VALUE", value = cond, 
[17:39:28.357]                                 success = TRUE)
[17:39:28.357]                               parallel_sendData(master, data)
[17:39:28.357]                             }
[17:39:28.357]                             return(sendCondition)
[17:39:28.357]                           }
[17:39:28.357]                         }
[17:39:28.357]                         frame <- frame + 1L
[17:39:28.357]                         envir <- sys.frame(frame)
[17:39:28.357]                       }
[17:39:28.357]                     }
[17:39:28.357]                     sendCondition <<- function(cond) NULL
[17:39:28.357]                   }
[17:39:28.357]                 })
[17:39:28.357]                 withCallingHandlers({
[17:39:28.357]                   {
[17:39:28.357]                     2 * a
[17:39:28.357]                   }
[17:39:28.357]                 }, immediateCondition = function(cond) {
[17:39:28.357]                   sendCondition <- ...future.makeSendCondition()
[17:39:28.357]                   sendCondition(cond)
[17:39:28.357]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.357]                   {
[17:39:28.357]                     inherits <- base::inherits
[17:39:28.357]                     invokeRestart <- base::invokeRestart
[17:39:28.357]                     is.null <- base::is.null
[17:39:28.357]                     muffled <- FALSE
[17:39:28.357]                     if (inherits(cond, "message")) {
[17:39:28.357]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:28.357]                       if (muffled) 
[17:39:28.357]                         invokeRestart("muffleMessage")
[17:39:28.357]                     }
[17:39:28.357]                     else if (inherits(cond, "warning")) {
[17:39:28.357]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:28.357]                       if (muffled) 
[17:39:28.357]                         invokeRestart("muffleWarning")
[17:39:28.357]                     }
[17:39:28.357]                     else if (inherits(cond, "condition")) {
[17:39:28.357]                       if (!is.null(pattern)) {
[17:39:28.357]                         computeRestarts <- base::computeRestarts
[17:39:28.357]                         grepl <- base::grepl
[17:39:28.357]                         restarts <- computeRestarts(cond)
[17:39:28.357]                         for (restart in restarts) {
[17:39:28.357]                           name <- restart$name
[17:39:28.357]                           if (is.null(name)) 
[17:39:28.357]                             next
[17:39:28.357]                           if (!grepl(pattern, name)) 
[17:39:28.357]                             next
[17:39:28.357]                           invokeRestart(restart)
[17:39:28.357]                           muffled <- TRUE
[17:39:28.357]                           break
[17:39:28.357]                         }
[17:39:28.357]                       }
[17:39:28.357]                     }
[17:39:28.357]                     invisible(muffled)
[17:39:28.357]                   }
[17:39:28.357]                   muffleCondition(cond)
[17:39:28.357]                 })
[17:39:28.357]             }))
[17:39:28.357]             future::FutureResult(value = ...future.value$value, 
[17:39:28.357]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.357]                   ...future.rng), globalenv = if (FALSE) 
[17:39:28.357]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:28.357]                     ...future.globalenv.names))
[17:39:28.357]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:28.357]         }, condition = base::local({
[17:39:28.357]             c <- base::c
[17:39:28.357]             inherits <- base::inherits
[17:39:28.357]             invokeRestart <- base::invokeRestart
[17:39:28.357]             length <- base::length
[17:39:28.357]             list <- base::list
[17:39:28.357]             seq.int <- base::seq.int
[17:39:28.357]             signalCondition <- base::signalCondition
[17:39:28.357]             sys.calls <- base::sys.calls
[17:39:28.357]             `[[` <- base::`[[`
[17:39:28.357]             `+` <- base::`+`
[17:39:28.357]             `<<-` <- base::`<<-`
[17:39:28.357]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:28.357]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:28.357]                   3L)]
[17:39:28.357]             }
[17:39:28.357]             function(cond) {
[17:39:28.357]                 is_error <- inherits(cond, "error")
[17:39:28.357]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:28.357]                   NULL)
[17:39:28.357]                 if (is_error) {
[17:39:28.357]                   sessionInformation <- function() {
[17:39:28.357]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:28.357]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:28.357]                       search = base::search(), system = base::Sys.info())
[17:39:28.357]                   }
[17:39:28.357]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.357]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:28.357]                     cond$call), session = sessionInformation(), 
[17:39:28.357]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:28.357]                   signalCondition(cond)
[17:39:28.357]                 }
[17:39:28.357]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:28.357]                 "immediateCondition"))) {
[17:39:28.357]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:28.357]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.357]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:28.357]                   if (TRUE && !signal) {
[17:39:28.357]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.357]                     {
[17:39:28.357]                       inherits <- base::inherits
[17:39:28.357]                       invokeRestart <- base::invokeRestart
[17:39:28.357]                       is.null <- base::is.null
[17:39:28.357]                       muffled <- FALSE
[17:39:28.357]                       if (inherits(cond, "message")) {
[17:39:28.357]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.357]                         if (muffled) 
[17:39:28.357]                           invokeRestart("muffleMessage")
[17:39:28.357]                       }
[17:39:28.357]                       else if (inherits(cond, "warning")) {
[17:39:28.357]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.357]                         if (muffled) 
[17:39:28.357]                           invokeRestart("muffleWarning")
[17:39:28.357]                       }
[17:39:28.357]                       else if (inherits(cond, "condition")) {
[17:39:28.357]                         if (!is.null(pattern)) {
[17:39:28.357]                           computeRestarts <- base::computeRestarts
[17:39:28.357]                           grepl <- base::grepl
[17:39:28.357]                           restarts <- computeRestarts(cond)
[17:39:28.357]                           for (restart in restarts) {
[17:39:28.357]                             name <- restart$name
[17:39:28.357]                             if (is.null(name)) 
[17:39:28.357]                               next
[17:39:28.357]                             if (!grepl(pattern, name)) 
[17:39:28.357]                               next
[17:39:28.357]                             invokeRestart(restart)
[17:39:28.357]                             muffled <- TRUE
[17:39:28.357]                             break
[17:39:28.357]                           }
[17:39:28.357]                         }
[17:39:28.357]                       }
[17:39:28.357]                       invisible(muffled)
[17:39:28.357]                     }
[17:39:28.357]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.357]                   }
[17:39:28.357]                 }
[17:39:28.357]                 else {
[17:39:28.357]                   if (TRUE) {
[17:39:28.357]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.357]                     {
[17:39:28.357]                       inherits <- base::inherits
[17:39:28.357]                       invokeRestart <- base::invokeRestart
[17:39:28.357]                       is.null <- base::is.null
[17:39:28.357]                       muffled <- FALSE
[17:39:28.357]                       if (inherits(cond, "message")) {
[17:39:28.357]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.357]                         if (muffled) 
[17:39:28.357]                           invokeRestart("muffleMessage")
[17:39:28.357]                       }
[17:39:28.357]                       else if (inherits(cond, "warning")) {
[17:39:28.357]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.357]                         if (muffled) 
[17:39:28.357]                           invokeRestart("muffleWarning")
[17:39:28.357]                       }
[17:39:28.357]                       else if (inherits(cond, "condition")) {
[17:39:28.357]                         if (!is.null(pattern)) {
[17:39:28.357]                           computeRestarts <- base::computeRestarts
[17:39:28.357]                           grepl <- base::grepl
[17:39:28.357]                           restarts <- computeRestarts(cond)
[17:39:28.357]                           for (restart in restarts) {
[17:39:28.357]                             name <- restart$name
[17:39:28.357]                             if (is.null(name)) 
[17:39:28.357]                               next
[17:39:28.357]                             if (!grepl(pattern, name)) 
[17:39:28.357]                               next
[17:39:28.357]                             invokeRestart(restart)
[17:39:28.357]                             muffled <- TRUE
[17:39:28.357]                             break
[17:39:28.357]                           }
[17:39:28.357]                         }
[17:39:28.357]                       }
[17:39:28.357]                       invisible(muffled)
[17:39:28.357]                     }
[17:39:28.357]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.357]                   }
[17:39:28.357]                 }
[17:39:28.357]             }
[17:39:28.357]         }))
[17:39:28.357]     }, error = function(ex) {
[17:39:28.357]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:28.357]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.357]                 ...future.rng), started = ...future.startTime, 
[17:39:28.357]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:28.357]             version = "1.8"), class = "FutureResult")
[17:39:28.357]     }, finally = {
[17:39:28.357]         if (!identical(...future.workdir, getwd())) 
[17:39:28.357]             setwd(...future.workdir)
[17:39:28.357]         {
[17:39:28.357]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:28.357]                 ...future.oldOptions$nwarnings <- NULL
[17:39:28.357]             }
[17:39:28.357]             base::options(...future.oldOptions)
[17:39:28.357]             if (.Platform$OS.type == "windows") {
[17:39:28.357]                 old_names <- names(...future.oldEnvVars)
[17:39:28.357]                 envs <- base::Sys.getenv()
[17:39:28.357]                 names <- names(envs)
[17:39:28.357]                 common <- intersect(names, old_names)
[17:39:28.357]                 added <- setdiff(names, old_names)
[17:39:28.357]                 removed <- setdiff(old_names, names)
[17:39:28.357]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:28.357]                   envs[common]]
[17:39:28.357]                 NAMES <- toupper(changed)
[17:39:28.357]                 args <- list()
[17:39:28.357]                 for (kk in seq_along(NAMES)) {
[17:39:28.357]                   name <- changed[[kk]]
[17:39:28.357]                   NAME <- NAMES[[kk]]
[17:39:28.357]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.357]                     next
[17:39:28.357]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.357]                 }
[17:39:28.357]                 NAMES <- toupper(added)
[17:39:28.357]                 for (kk in seq_along(NAMES)) {
[17:39:28.357]                   name <- added[[kk]]
[17:39:28.357]                   NAME <- NAMES[[kk]]
[17:39:28.357]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.357]                     next
[17:39:28.357]                   args[[name]] <- ""
[17:39:28.357]                 }
[17:39:28.357]                 NAMES <- toupper(removed)
[17:39:28.357]                 for (kk in seq_along(NAMES)) {
[17:39:28.357]                   name <- removed[[kk]]
[17:39:28.357]                   NAME <- NAMES[[kk]]
[17:39:28.357]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.357]                     next
[17:39:28.357]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.357]                 }
[17:39:28.357]                 if (length(args) > 0) 
[17:39:28.357]                   base::do.call(base::Sys.setenv, args = args)
[17:39:28.357]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:28.357]             }
[17:39:28.357]             else {
[17:39:28.357]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:28.357]             }
[17:39:28.357]             {
[17:39:28.357]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:28.357]                   0L) {
[17:39:28.357]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:28.357]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:28.357]                   base::options(opts)
[17:39:28.357]                 }
[17:39:28.357]                 {
[17:39:28.357]                   {
[17:39:28.357]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:28.357]                     NULL
[17:39:28.357]                   }
[17:39:28.357]                   options(future.plan = NULL)
[17:39:28.357]                   if (is.na(NA_character_)) 
[17:39:28.357]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.357]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:28.357]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:28.357]                     .init = FALSE)
[17:39:28.357]                 }
[17:39:28.357]             }
[17:39:28.357]         }
[17:39:28.357]     })
[17:39:28.357]     if (TRUE) {
[17:39:28.357]         base::sink(type = "output", split = FALSE)
[17:39:28.357]         if (TRUE) {
[17:39:28.357]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:28.357]         }
[17:39:28.357]         else {
[17:39:28.357]             ...future.result["stdout"] <- base::list(NULL)
[17:39:28.357]         }
[17:39:28.357]         base::close(...future.stdout)
[17:39:28.357]         ...future.stdout <- NULL
[17:39:28.357]     }
[17:39:28.357]     ...future.result$conditions <- ...future.conditions
[17:39:28.357]     ...future.result$finished <- base::Sys.time()
[17:39:28.357]     ...future.result
[17:39:28.357] }
[17:39:28.360] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:39:28.360] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:39:28.360] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:39:28.361] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:39:28.361] MultisessionFuture started
[17:39:28.361] - Launch lazy future ... done
[17:39:28.361] run() for ‘MultisessionFuture’ ... done
[17:39:28.361] result() for ClusterFuture ...
[17:39:28.361] receiveMessageFromWorker() for ClusterFuture ...
[17:39:28.362] - Validating connection of MultisessionFuture
[17:39:28.363] - received message: FutureResult
[17:39:28.363] - Received FutureResult
[17:39:28.363] - Erased future from FutureRegistry
[17:39:28.363] result() for ClusterFuture ...
[17:39:28.363] - result already collected: FutureResult
[17:39:28.363] result() for ClusterFuture ... done
[17:39:28.363] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:28.363] result() for ClusterFuture ... done
[17:39:28.363] result() for ClusterFuture ...
[17:39:28.363] - result already collected: FutureResult
[17:39:28.363] result() for ClusterFuture ... done
[17:39:28.364] getGlobalsAndPackages() ...
[17:39:28.364] Searching for globals...
[17:39:28.365] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:28.365] Searching for globals ... DONE
[17:39:28.365] Resolving globals: FALSE
[17:39:28.365] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:28.366] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:28.366] - globals: [1] ‘a’
[17:39:28.366] 
[17:39:28.366] getGlobalsAndPackages() ... DONE
[17:39:28.366] run() for ‘Future’ ...
[17:39:28.366] - state: ‘created’
[17:39:28.366] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:28.380] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:28.380] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:28.381]   - Field: ‘node’
[17:39:28.381]   - Field: ‘label’
[17:39:28.381]   - Field: ‘local’
[17:39:28.381]   - Field: ‘owner’
[17:39:28.381]   - Field: ‘envir’
[17:39:28.381]   - Field: ‘workers’
[17:39:28.381]   - Field: ‘packages’
[17:39:28.381]   - Field: ‘gc’
[17:39:28.381]   - Field: ‘conditions’
[17:39:28.381]   - Field: ‘persistent’
[17:39:28.381]   - Field: ‘expr’
[17:39:28.382]   - Field: ‘uuid’
[17:39:28.382]   - Field: ‘seed’
[17:39:28.382]   - Field: ‘version’
[17:39:28.382]   - Field: ‘result’
[17:39:28.382]   - Field: ‘asynchronous’
[17:39:28.382]   - Field: ‘calls’
[17:39:28.382]   - Field: ‘globals’
[17:39:28.382]   - Field: ‘stdout’
[17:39:28.382]   - Field: ‘earlySignal’
[17:39:28.382]   - Field: ‘lazy’
[17:39:28.382]   - Field: ‘state’
[17:39:28.383] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:28.383] - Launch lazy future ...
[17:39:28.383] Packages needed by the future expression (n = 0): <none>
[17:39:28.383] Packages needed by future strategies (n = 0): <none>
[17:39:28.383] {
[17:39:28.383]     {
[17:39:28.383]         {
[17:39:28.383]             ...future.startTime <- base::Sys.time()
[17:39:28.383]             {
[17:39:28.383]                 {
[17:39:28.383]                   {
[17:39:28.383]                     {
[17:39:28.383]                       base::local({
[17:39:28.383]                         has_future <- base::requireNamespace("future", 
[17:39:28.383]                           quietly = TRUE)
[17:39:28.383]                         if (has_future) {
[17:39:28.383]                           ns <- base::getNamespace("future")
[17:39:28.383]                           version <- ns[[".package"]][["version"]]
[17:39:28.383]                           if (is.null(version)) 
[17:39:28.383]                             version <- utils::packageVersion("future")
[17:39:28.383]                         }
[17:39:28.383]                         else {
[17:39:28.383]                           version <- NULL
[17:39:28.383]                         }
[17:39:28.383]                         if (!has_future || version < "1.8.0") {
[17:39:28.383]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:28.383]                             "", base::R.version$version.string), 
[17:39:28.383]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:28.383]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:28.383]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:28.383]                               "release", "version")], collapse = " "), 
[17:39:28.383]                             hostname = base::Sys.info()[["nodename"]])
[17:39:28.383]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:28.383]                             info)
[17:39:28.383]                           info <- base::paste(info, collapse = "; ")
[17:39:28.383]                           if (!has_future) {
[17:39:28.383]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:28.383]                               info)
[17:39:28.383]                           }
[17:39:28.383]                           else {
[17:39:28.383]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:28.383]                               info, version)
[17:39:28.383]                           }
[17:39:28.383]                           base::stop(msg)
[17:39:28.383]                         }
[17:39:28.383]                       })
[17:39:28.383]                     }
[17:39:28.383]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:28.383]                     base::options(mc.cores = 1L)
[17:39:28.383]                   }
[17:39:28.383]                   ...future.strategy.old <- future::plan("list")
[17:39:28.383]                   options(future.plan = NULL)
[17:39:28.383]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.383]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:28.383]                 }
[17:39:28.383]                 ...future.workdir <- getwd()
[17:39:28.383]             }
[17:39:28.383]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:28.383]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:28.383]         }
[17:39:28.383]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:28.383]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:28.383]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:28.383]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:28.383]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:28.383]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:28.383]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:28.383]             base::names(...future.oldOptions))
[17:39:28.383]     }
[17:39:28.383]     if (FALSE) {
[17:39:28.383]     }
[17:39:28.383]     else {
[17:39:28.383]         if (TRUE) {
[17:39:28.383]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:28.383]                 open = "w")
[17:39:28.383]         }
[17:39:28.383]         else {
[17:39:28.383]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:28.383]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:28.383]         }
[17:39:28.383]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:28.383]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:28.383]             base::sink(type = "output", split = FALSE)
[17:39:28.383]             base::close(...future.stdout)
[17:39:28.383]         }, add = TRUE)
[17:39:28.383]     }
[17:39:28.383]     ...future.frame <- base::sys.nframe()
[17:39:28.383]     ...future.conditions <- base::list()
[17:39:28.383]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:28.383]     if (FALSE) {
[17:39:28.383]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:28.383]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:28.383]     }
[17:39:28.383]     ...future.result <- base::tryCatch({
[17:39:28.383]         base::withCallingHandlers({
[17:39:28.383]             ...future.value <- base::withVisible(base::local({
[17:39:28.383]                 ...future.makeSendCondition <- base::local({
[17:39:28.383]                   sendCondition <- NULL
[17:39:28.383]                   function(frame = 1L) {
[17:39:28.383]                     if (is.function(sendCondition)) 
[17:39:28.383]                       return(sendCondition)
[17:39:28.383]                     ns <- getNamespace("parallel")
[17:39:28.383]                     if (exists("sendData", mode = "function", 
[17:39:28.383]                       envir = ns)) {
[17:39:28.383]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:28.383]                         envir = ns)
[17:39:28.383]                       envir <- sys.frame(frame)
[17:39:28.383]                       master <- NULL
[17:39:28.383]                       while (!identical(envir, .GlobalEnv) && 
[17:39:28.383]                         !identical(envir, emptyenv())) {
[17:39:28.383]                         if (exists("master", mode = "list", envir = envir, 
[17:39:28.383]                           inherits = FALSE)) {
[17:39:28.383]                           master <- get("master", mode = "list", 
[17:39:28.383]                             envir = envir, inherits = FALSE)
[17:39:28.383]                           if (inherits(master, c("SOCKnode", 
[17:39:28.383]                             "SOCK0node"))) {
[17:39:28.383]                             sendCondition <<- function(cond) {
[17:39:28.383]                               data <- list(type = "VALUE", value = cond, 
[17:39:28.383]                                 success = TRUE)
[17:39:28.383]                               parallel_sendData(master, data)
[17:39:28.383]                             }
[17:39:28.383]                             return(sendCondition)
[17:39:28.383]                           }
[17:39:28.383]                         }
[17:39:28.383]                         frame <- frame + 1L
[17:39:28.383]                         envir <- sys.frame(frame)
[17:39:28.383]                       }
[17:39:28.383]                     }
[17:39:28.383]                     sendCondition <<- function(cond) NULL
[17:39:28.383]                   }
[17:39:28.383]                 })
[17:39:28.383]                 withCallingHandlers({
[17:39:28.383]                   {
[17:39:28.383]                     2 * a
[17:39:28.383]                   }
[17:39:28.383]                 }, immediateCondition = function(cond) {
[17:39:28.383]                   sendCondition <- ...future.makeSendCondition()
[17:39:28.383]                   sendCondition(cond)
[17:39:28.383]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.383]                   {
[17:39:28.383]                     inherits <- base::inherits
[17:39:28.383]                     invokeRestart <- base::invokeRestart
[17:39:28.383]                     is.null <- base::is.null
[17:39:28.383]                     muffled <- FALSE
[17:39:28.383]                     if (inherits(cond, "message")) {
[17:39:28.383]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:28.383]                       if (muffled) 
[17:39:28.383]                         invokeRestart("muffleMessage")
[17:39:28.383]                     }
[17:39:28.383]                     else if (inherits(cond, "warning")) {
[17:39:28.383]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:28.383]                       if (muffled) 
[17:39:28.383]                         invokeRestart("muffleWarning")
[17:39:28.383]                     }
[17:39:28.383]                     else if (inherits(cond, "condition")) {
[17:39:28.383]                       if (!is.null(pattern)) {
[17:39:28.383]                         computeRestarts <- base::computeRestarts
[17:39:28.383]                         grepl <- base::grepl
[17:39:28.383]                         restarts <- computeRestarts(cond)
[17:39:28.383]                         for (restart in restarts) {
[17:39:28.383]                           name <- restart$name
[17:39:28.383]                           if (is.null(name)) 
[17:39:28.383]                             next
[17:39:28.383]                           if (!grepl(pattern, name)) 
[17:39:28.383]                             next
[17:39:28.383]                           invokeRestart(restart)
[17:39:28.383]                           muffled <- TRUE
[17:39:28.383]                           break
[17:39:28.383]                         }
[17:39:28.383]                       }
[17:39:28.383]                     }
[17:39:28.383]                     invisible(muffled)
[17:39:28.383]                   }
[17:39:28.383]                   muffleCondition(cond)
[17:39:28.383]                 })
[17:39:28.383]             }))
[17:39:28.383]             future::FutureResult(value = ...future.value$value, 
[17:39:28.383]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.383]                   ...future.rng), globalenv = if (FALSE) 
[17:39:28.383]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:28.383]                     ...future.globalenv.names))
[17:39:28.383]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:28.383]         }, condition = base::local({
[17:39:28.383]             c <- base::c
[17:39:28.383]             inherits <- base::inherits
[17:39:28.383]             invokeRestart <- base::invokeRestart
[17:39:28.383]             length <- base::length
[17:39:28.383]             list <- base::list
[17:39:28.383]             seq.int <- base::seq.int
[17:39:28.383]             signalCondition <- base::signalCondition
[17:39:28.383]             sys.calls <- base::sys.calls
[17:39:28.383]             `[[` <- base::`[[`
[17:39:28.383]             `+` <- base::`+`
[17:39:28.383]             `<<-` <- base::`<<-`
[17:39:28.383]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:28.383]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:28.383]                   3L)]
[17:39:28.383]             }
[17:39:28.383]             function(cond) {
[17:39:28.383]                 is_error <- inherits(cond, "error")
[17:39:28.383]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:28.383]                   NULL)
[17:39:28.383]                 if (is_error) {
[17:39:28.383]                   sessionInformation <- function() {
[17:39:28.383]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:28.383]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:28.383]                       search = base::search(), system = base::Sys.info())
[17:39:28.383]                   }
[17:39:28.383]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.383]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:28.383]                     cond$call), session = sessionInformation(), 
[17:39:28.383]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:28.383]                   signalCondition(cond)
[17:39:28.383]                 }
[17:39:28.383]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:28.383]                 "immediateCondition"))) {
[17:39:28.383]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:28.383]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.383]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:28.383]                   if (TRUE && !signal) {
[17:39:28.383]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.383]                     {
[17:39:28.383]                       inherits <- base::inherits
[17:39:28.383]                       invokeRestart <- base::invokeRestart
[17:39:28.383]                       is.null <- base::is.null
[17:39:28.383]                       muffled <- FALSE
[17:39:28.383]                       if (inherits(cond, "message")) {
[17:39:28.383]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.383]                         if (muffled) 
[17:39:28.383]                           invokeRestart("muffleMessage")
[17:39:28.383]                       }
[17:39:28.383]                       else if (inherits(cond, "warning")) {
[17:39:28.383]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.383]                         if (muffled) 
[17:39:28.383]                           invokeRestart("muffleWarning")
[17:39:28.383]                       }
[17:39:28.383]                       else if (inherits(cond, "condition")) {
[17:39:28.383]                         if (!is.null(pattern)) {
[17:39:28.383]                           computeRestarts <- base::computeRestarts
[17:39:28.383]                           grepl <- base::grepl
[17:39:28.383]                           restarts <- computeRestarts(cond)
[17:39:28.383]                           for (restart in restarts) {
[17:39:28.383]                             name <- restart$name
[17:39:28.383]                             if (is.null(name)) 
[17:39:28.383]                               next
[17:39:28.383]                             if (!grepl(pattern, name)) 
[17:39:28.383]                               next
[17:39:28.383]                             invokeRestart(restart)
[17:39:28.383]                             muffled <- TRUE
[17:39:28.383]                             break
[17:39:28.383]                           }
[17:39:28.383]                         }
[17:39:28.383]                       }
[17:39:28.383]                       invisible(muffled)
[17:39:28.383]                     }
[17:39:28.383]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.383]                   }
[17:39:28.383]                 }
[17:39:28.383]                 else {
[17:39:28.383]                   if (TRUE) {
[17:39:28.383]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.383]                     {
[17:39:28.383]                       inherits <- base::inherits
[17:39:28.383]                       invokeRestart <- base::invokeRestart
[17:39:28.383]                       is.null <- base::is.null
[17:39:28.383]                       muffled <- FALSE
[17:39:28.383]                       if (inherits(cond, "message")) {
[17:39:28.383]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.383]                         if (muffled) 
[17:39:28.383]                           invokeRestart("muffleMessage")
[17:39:28.383]                       }
[17:39:28.383]                       else if (inherits(cond, "warning")) {
[17:39:28.383]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.383]                         if (muffled) 
[17:39:28.383]                           invokeRestart("muffleWarning")
[17:39:28.383]                       }
[17:39:28.383]                       else if (inherits(cond, "condition")) {
[17:39:28.383]                         if (!is.null(pattern)) {
[17:39:28.383]                           computeRestarts <- base::computeRestarts
[17:39:28.383]                           grepl <- base::grepl
[17:39:28.383]                           restarts <- computeRestarts(cond)
[17:39:28.383]                           for (restart in restarts) {
[17:39:28.383]                             name <- restart$name
[17:39:28.383]                             if (is.null(name)) 
[17:39:28.383]                               next
[17:39:28.383]                             if (!grepl(pattern, name)) 
[17:39:28.383]                               next
[17:39:28.383]                             invokeRestart(restart)
[17:39:28.383]                             muffled <- TRUE
[17:39:28.383]                             break
[17:39:28.383]                           }
[17:39:28.383]                         }
[17:39:28.383]                       }
[17:39:28.383]                       invisible(muffled)
[17:39:28.383]                     }
[17:39:28.383]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.383]                   }
[17:39:28.383]                 }
[17:39:28.383]             }
[17:39:28.383]         }))
[17:39:28.383]     }, error = function(ex) {
[17:39:28.383]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:28.383]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.383]                 ...future.rng), started = ...future.startTime, 
[17:39:28.383]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:28.383]             version = "1.8"), class = "FutureResult")
[17:39:28.383]     }, finally = {
[17:39:28.383]         if (!identical(...future.workdir, getwd())) 
[17:39:28.383]             setwd(...future.workdir)
[17:39:28.383]         {
[17:39:28.383]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:28.383]                 ...future.oldOptions$nwarnings <- NULL
[17:39:28.383]             }
[17:39:28.383]             base::options(...future.oldOptions)
[17:39:28.383]             if (.Platform$OS.type == "windows") {
[17:39:28.383]                 old_names <- names(...future.oldEnvVars)
[17:39:28.383]                 envs <- base::Sys.getenv()
[17:39:28.383]                 names <- names(envs)
[17:39:28.383]                 common <- intersect(names, old_names)
[17:39:28.383]                 added <- setdiff(names, old_names)
[17:39:28.383]                 removed <- setdiff(old_names, names)
[17:39:28.383]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:28.383]                   envs[common]]
[17:39:28.383]                 NAMES <- toupper(changed)
[17:39:28.383]                 args <- list()
[17:39:28.383]                 for (kk in seq_along(NAMES)) {
[17:39:28.383]                   name <- changed[[kk]]
[17:39:28.383]                   NAME <- NAMES[[kk]]
[17:39:28.383]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.383]                     next
[17:39:28.383]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.383]                 }
[17:39:28.383]                 NAMES <- toupper(added)
[17:39:28.383]                 for (kk in seq_along(NAMES)) {
[17:39:28.383]                   name <- added[[kk]]
[17:39:28.383]                   NAME <- NAMES[[kk]]
[17:39:28.383]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.383]                     next
[17:39:28.383]                   args[[name]] <- ""
[17:39:28.383]                 }
[17:39:28.383]                 NAMES <- toupper(removed)
[17:39:28.383]                 for (kk in seq_along(NAMES)) {
[17:39:28.383]                   name <- removed[[kk]]
[17:39:28.383]                   NAME <- NAMES[[kk]]
[17:39:28.383]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.383]                     next
[17:39:28.383]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.383]                 }
[17:39:28.383]                 if (length(args) > 0) 
[17:39:28.383]                   base::do.call(base::Sys.setenv, args = args)
[17:39:28.383]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:28.383]             }
[17:39:28.383]             else {
[17:39:28.383]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:28.383]             }
[17:39:28.383]             {
[17:39:28.383]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:28.383]                   0L) {
[17:39:28.383]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:28.383]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:28.383]                   base::options(opts)
[17:39:28.383]                 }
[17:39:28.383]                 {
[17:39:28.383]                   {
[17:39:28.383]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:28.383]                     NULL
[17:39:28.383]                   }
[17:39:28.383]                   options(future.plan = NULL)
[17:39:28.383]                   if (is.na(NA_character_)) 
[17:39:28.383]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.383]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:28.383]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:28.383]                     .init = FALSE)
[17:39:28.383]                 }
[17:39:28.383]             }
[17:39:28.383]         }
[17:39:28.383]     })
[17:39:28.383]     if (TRUE) {
[17:39:28.383]         base::sink(type = "output", split = FALSE)
[17:39:28.383]         if (TRUE) {
[17:39:28.383]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:28.383]         }
[17:39:28.383]         else {
[17:39:28.383]             ...future.result["stdout"] <- base::list(NULL)
[17:39:28.383]         }
[17:39:28.383]         base::close(...future.stdout)
[17:39:28.383]         ...future.stdout <- NULL
[17:39:28.383]     }
[17:39:28.383]     ...future.result$conditions <- ...future.conditions
[17:39:28.383]     ...future.result$finished <- base::Sys.time()
[17:39:28.383]     ...future.result
[17:39:28.383] }
[17:39:28.386] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:39:28.386] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:39:28.387] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:39:28.387] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:39:28.387] MultisessionFuture started
[17:39:28.387] - Launch lazy future ... done
[17:39:28.387] run() for ‘MultisessionFuture’ ... done
[17:39:28.388] result() for ClusterFuture ...
[17:39:28.388] receiveMessageFromWorker() for ClusterFuture ...
[17:39:28.388] - Validating connection of MultisessionFuture
[17:39:28.389] - received message: FutureResult
[17:39:28.389] - Received FutureResult
[17:39:28.389] - Erased future from FutureRegistry
[17:39:28.390] result() for ClusterFuture ...
[17:39:28.390] - result already collected: FutureResult
[17:39:28.390] result() for ClusterFuture ... done
[17:39:28.390] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:28.390] result() for ClusterFuture ... done
[17:39:28.390] result() for ClusterFuture ...
[17:39:28.390] - result already collected: FutureResult
[17:39:28.390] result() for ClusterFuture ... done
[17:39:28.390] getGlobalsAndPackages() ...
[17:39:28.390] Searching for globals...
[17:39:28.391] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:28.391] Searching for globals ... DONE
[17:39:28.391] Resolving globals: FALSE
[17:39:28.392] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:28.392] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:28.392] - globals: [1] ‘a’
[17:39:28.392] 
[17:39:28.393] getGlobalsAndPackages() ... DONE
[17:39:28.393] run() for ‘Future’ ...
[17:39:28.393] - state: ‘created’
[17:39:28.393] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:28.407] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:28.407] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:28.407]   - Field: ‘node’
[17:39:28.407]   - Field: ‘label’
[17:39:28.407]   - Field: ‘local’
[17:39:28.407]   - Field: ‘owner’
[17:39:28.407]   - Field: ‘envir’
[17:39:28.407]   - Field: ‘workers’
[17:39:28.407]   - Field: ‘packages’
[17:39:28.408]   - Field: ‘gc’
[17:39:28.408]   - Field: ‘conditions’
[17:39:28.408]   - Field: ‘persistent’
[17:39:28.408]   - Field: ‘expr’
[17:39:28.408]   - Field: ‘uuid’
[17:39:28.408]   - Field: ‘seed’
[17:39:28.408]   - Field: ‘version’
[17:39:28.408]   - Field: ‘result’
[17:39:28.408]   - Field: ‘asynchronous’
[17:39:28.408]   - Field: ‘calls’
[17:39:28.408]   - Field: ‘globals’
[17:39:28.409]   - Field: ‘stdout’
[17:39:28.409]   - Field: ‘earlySignal’
[17:39:28.409]   - Field: ‘lazy’
[17:39:28.409]   - Field: ‘state’
[17:39:28.409] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:28.409] - Launch lazy future ...
[17:39:28.409] Packages needed by the future expression (n = 0): <none>
[17:39:28.409] Packages needed by future strategies (n = 0): <none>
[17:39:28.410] {
[17:39:28.410]     {
[17:39:28.410]         {
[17:39:28.410]             ...future.startTime <- base::Sys.time()
[17:39:28.410]             {
[17:39:28.410]                 {
[17:39:28.410]                   {
[17:39:28.410]                     {
[17:39:28.410]                       base::local({
[17:39:28.410]                         has_future <- base::requireNamespace("future", 
[17:39:28.410]                           quietly = TRUE)
[17:39:28.410]                         if (has_future) {
[17:39:28.410]                           ns <- base::getNamespace("future")
[17:39:28.410]                           version <- ns[[".package"]][["version"]]
[17:39:28.410]                           if (is.null(version)) 
[17:39:28.410]                             version <- utils::packageVersion("future")
[17:39:28.410]                         }
[17:39:28.410]                         else {
[17:39:28.410]                           version <- NULL
[17:39:28.410]                         }
[17:39:28.410]                         if (!has_future || version < "1.8.0") {
[17:39:28.410]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:28.410]                             "", base::R.version$version.string), 
[17:39:28.410]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:28.410]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:28.410]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:28.410]                               "release", "version")], collapse = " "), 
[17:39:28.410]                             hostname = base::Sys.info()[["nodename"]])
[17:39:28.410]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:28.410]                             info)
[17:39:28.410]                           info <- base::paste(info, collapse = "; ")
[17:39:28.410]                           if (!has_future) {
[17:39:28.410]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:28.410]                               info)
[17:39:28.410]                           }
[17:39:28.410]                           else {
[17:39:28.410]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:28.410]                               info, version)
[17:39:28.410]                           }
[17:39:28.410]                           base::stop(msg)
[17:39:28.410]                         }
[17:39:28.410]                       })
[17:39:28.410]                     }
[17:39:28.410]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:28.410]                     base::options(mc.cores = 1L)
[17:39:28.410]                   }
[17:39:28.410]                   ...future.strategy.old <- future::plan("list")
[17:39:28.410]                   options(future.plan = NULL)
[17:39:28.410]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.410]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:28.410]                 }
[17:39:28.410]                 ...future.workdir <- getwd()
[17:39:28.410]             }
[17:39:28.410]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:28.410]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:28.410]         }
[17:39:28.410]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:28.410]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:28.410]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:28.410]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:28.410]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:28.410]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:28.410]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:28.410]             base::names(...future.oldOptions))
[17:39:28.410]     }
[17:39:28.410]     if (FALSE) {
[17:39:28.410]     }
[17:39:28.410]     else {
[17:39:28.410]         if (TRUE) {
[17:39:28.410]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:28.410]                 open = "w")
[17:39:28.410]         }
[17:39:28.410]         else {
[17:39:28.410]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:28.410]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:28.410]         }
[17:39:28.410]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:28.410]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:28.410]             base::sink(type = "output", split = FALSE)
[17:39:28.410]             base::close(...future.stdout)
[17:39:28.410]         }, add = TRUE)
[17:39:28.410]     }
[17:39:28.410]     ...future.frame <- base::sys.nframe()
[17:39:28.410]     ...future.conditions <- base::list()
[17:39:28.410]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:28.410]     if (FALSE) {
[17:39:28.410]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:28.410]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:28.410]     }
[17:39:28.410]     ...future.result <- base::tryCatch({
[17:39:28.410]         base::withCallingHandlers({
[17:39:28.410]             ...future.value <- base::withVisible(base::local({
[17:39:28.410]                 ...future.makeSendCondition <- base::local({
[17:39:28.410]                   sendCondition <- NULL
[17:39:28.410]                   function(frame = 1L) {
[17:39:28.410]                     if (is.function(sendCondition)) 
[17:39:28.410]                       return(sendCondition)
[17:39:28.410]                     ns <- getNamespace("parallel")
[17:39:28.410]                     if (exists("sendData", mode = "function", 
[17:39:28.410]                       envir = ns)) {
[17:39:28.410]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:28.410]                         envir = ns)
[17:39:28.410]                       envir <- sys.frame(frame)
[17:39:28.410]                       master <- NULL
[17:39:28.410]                       while (!identical(envir, .GlobalEnv) && 
[17:39:28.410]                         !identical(envir, emptyenv())) {
[17:39:28.410]                         if (exists("master", mode = "list", envir = envir, 
[17:39:28.410]                           inherits = FALSE)) {
[17:39:28.410]                           master <- get("master", mode = "list", 
[17:39:28.410]                             envir = envir, inherits = FALSE)
[17:39:28.410]                           if (inherits(master, c("SOCKnode", 
[17:39:28.410]                             "SOCK0node"))) {
[17:39:28.410]                             sendCondition <<- function(cond) {
[17:39:28.410]                               data <- list(type = "VALUE", value = cond, 
[17:39:28.410]                                 success = TRUE)
[17:39:28.410]                               parallel_sendData(master, data)
[17:39:28.410]                             }
[17:39:28.410]                             return(sendCondition)
[17:39:28.410]                           }
[17:39:28.410]                         }
[17:39:28.410]                         frame <- frame + 1L
[17:39:28.410]                         envir <- sys.frame(frame)
[17:39:28.410]                       }
[17:39:28.410]                     }
[17:39:28.410]                     sendCondition <<- function(cond) NULL
[17:39:28.410]                   }
[17:39:28.410]                 })
[17:39:28.410]                 withCallingHandlers({
[17:39:28.410]                   {
[17:39:28.410]                     2 * a
[17:39:28.410]                   }
[17:39:28.410]                 }, immediateCondition = function(cond) {
[17:39:28.410]                   sendCondition <- ...future.makeSendCondition()
[17:39:28.410]                   sendCondition(cond)
[17:39:28.410]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.410]                   {
[17:39:28.410]                     inherits <- base::inherits
[17:39:28.410]                     invokeRestart <- base::invokeRestart
[17:39:28.410]                     is.null <- base::is.null
[17:39:28.410]                     muffled <- FALSE
[17:39:28.410]                     if (inherits(cond, "message")) {
[17:39:28.410]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:28.410]                       if (muffled) 
[17:39:28.410]                         invokeRestart("muffleMessage")
[17:39:28.410]                     }
[17:39:28.410]                     else if (inherits(cond, "warning")) {
[17:39:28.410]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:28.410]                       if (muffled) 
[17:39:28.410]                         invokeRestart("muffleWarning")
[17:39:28.410]                     }
[17:39:28.410]                     else if (inherits(cond, "condition")) {
[17:39:28.410]                       if (!is.null(pattern)) {
[17:39:28.410]                         computeRestarts <- base::computeRestarts
[17:39:28.410]                         grepl <- base::grepl
[17:39:28.410]                         restarts <- computeRestarts(cond)
[17:39:28.410]                         for (restart in restarts) {
[17:39:28.410]                           name <- restart$name
[17:39:28.410]                           if (is.null(name)) 
[17:39:28.410]                             next
[17:39:28.410]                           if (!grepl(pattern, name)) 
[17:39:28.410]                             next
[17:39:28.410]                           invokeRestart(restart)
[17:39:28.410]                           muffled <- TRUE
[17:39:28.410]                           break
[17:39:28.410]                         }
[17:39:28.410]                       }
[17:39:28.410]                     }
[17:39:28.410]                     invisible(muffled)
[17:39:28.410]                   }
[17:39:28.410]                   muffleCondition(cond)
[17:39:28.410]                 })
[17:39:28.410]             }))
[17:39:28.410]             future::FutureResult(value = ...future.value$value, 
[17:39:28.410]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.410]                   ...future.rng), globalenv = if (FALSE) 
[17:39:28.410]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:28.410]                     ...future.globalenv.names))
[17:39:28.410]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:28.410]         }, condition = base::local({
[17:39:28.410]             c <- base::c
[17:39:28.410]             inherits <- base::inherits
[17:39:28.410]             invokeRestart <- base::invokeRestart
[17:39:28.410]             length <- base::length
[17:39:28.410]             list <- base::list
[17:39:28.410]             seq.int <- base::seq.int
[17:39:28.410]             signalCondition <- base::signalCondition
[17:39:28.410]             sys.calls <- base::sys.calls
[17:39:28.410]             `[[` <- base::`[[`
[17:39:28.410]             `+` <- base::`+`
[17:39:28.410]             `<<-` <- base::`<<-`
[17:39:28.410]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:28.410]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:28.410]                   3L)]
[17:39:28.410]             }
[17:39:28.410]             function(cond) {
[17:39:28.410]                 is_error <- inherits(cond, "error")
[17:39:28.410]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:28.410]                   NULL)
[17:39:28.410]                 if (is_error) {
[17:39:28.410]                   sessionInformation <- function() {
[17:39:28.410]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:28.410]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:28.410]                       search = base::search(), system = base::Sys.info())
[17:39:28.410]                   }
[17:39:28.410]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.410]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:28.410]                     cond$call), session = sessionInformation(), 
[17:39:28.410]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:28.410]                   signalCondition(cond)
[17:39:28.410]                 }
[17:39:28.410]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:28.410]                 "immediateCondition"))) {
[17:39:28.410]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:28.410]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.410]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:28.410]                   if (TRUE && !signal) {
[17:39:28.410]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.410]                     {
[17:39:28.410]                       inherits <- base::inherits
[17:39:28.410]                       invokeRestart <- base::invokeRestart
[17:39:28.410]                       is.null <- base::is.null
[17:39:28.410]                       muffled <- FALSE
[17:39:28.410]                       if (inherits(cond, "message")) {
[17:39:28.410]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.410]                         if (muffled) 
[17:39:28.410]                           invokeRestart("muffleMessage")
[17:39:28.410]                       }
[17:39:28.410]                       else if (inherits(cond, "warning")) {
[17:39:28.410]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.410]                         if (muffled) 
[17:39:28.410]                           invokeRestart("muffleWarning")
[17:39:28.410]                       }
[17:39:28.410]                       else if (inherits(cond, "condition")) {
[17:39:28.410]                         if (!is.null(pattern)) {
[17:39:28.410]                           computeRestarts <- base::computeRestarts
[17:39:28.410]                           grepl <- base::grepl
[17:39:28.410]                           restarts <- computeRestarts(cond)
[17:39:28.410]                           for (restart in restarts) {
[17:39:28.410]                             name <- restart$name
[17:39:28.410]                             if (is.null(name)) 
[17:39:28.410]                               next
[17:39:28.410]                             if (!grepl(pattern, name)) 
[17:39:28.410]                               next
[17:39:28.410]                             invokeRestart(restart)
[17:39:28.410]                             muffled <- TRUE
[17:39:28.410]                             break
[17:39:28.410]                           }
[17:39:28.410]                         }
[17:39:28.410]                       }
[17:39:28.410]                       invisible(muffled)
[17:39:28.410]                     }
[17:39:28.410]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.410]                   }
[17:39:28.410]                 }
[17:39:28.410]                 else {
[17:39:28.410]                   if (TRUE) {
[17:39:28.410]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.410]                     {
[17:39:28.410]                       inherits <- base::inherits
[17:39:28.410]                       invokeRestart <- base::invokeRestart
[17:39:28.410]                       is.null <- base::is.null
[17:39:28.410]                       muffled <- FALSE
[17:39:28.410]                       if (inherits(cond, "message")) {
[17:39:28.410]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.410]                         if (muffled) 
[17:39:28.410]                           invokeRestart("muffleMessage")
[17:39:28.410]                       }
[17:39:28.410]                       else if (inherits(cond, "warning")) {
[17:39:28.410]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.410]                         if (muffled) 
[17:39:28.410]                           invokeRestart("muffleWarning")
[17:39:28.410]                       }
[17:39:28.410]                       else if (inherits(cond, "condition")) {
[17:39:28.410]                         if (!is.null(pattern)) {
[17:39:28.410]                           computeRestarts <- base::computeRestarts
[17:39:28.410]                           grepl <- base::grepl
[17:39:28.410]                           restarts <- computeRestarts(cond)
[17:39:28.410]                           for (restart in restarts) {
[17:39:28.410]                             name <- restart$name
[17:39:28.410]                             if (is.null(name)) 
[17:39:28.410]                               next
[17:39:28.410]                             if (!grepl(pattern, name)) 
[17:39:28.410]                               next
[17:39:28.410]                             invokeRestart(restart)
[17:39:28.410]                             muffled <- TRUE
[17:39:28.410]                             break
[17:39:28.410]                           }
[17:39:28.410]                         }
[17:39:28.410]                       }
[17:39:28.410]                       invisible(muffled)
[17:39:28.410]                     }
[17:39:28.410]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.410]                   }
[17:39:28.410]                 }
[17:39:28.410]             }
[17:39:28.410]         }))
[17:39:28.410]     }, error = function(ex) {
[17:39:28.410]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:28.410]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.410]                 ...future.rng), started = ...future.startTime, 
[17:39:28.410]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:28.410]             version = "1.8"), class = "FutureResult")
[17:39:28.410]     }, finally = {
[17:39:28.410]         if (!identical(...future.workdir, getwd())) 
[17:39:28.410]             setwd(...future.workdir)
[17:39:28.410]         {
[17:39:28.410]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:28.410]                 ...future.oldOptions$nwarnings <- NULL
[17:39:28.410]             }
[17:39:28.410]             base::options(...future.oldOptions)
[17:39:28.410]             if (.Platform$OS.type == "windows") {
[17:39:28.410]                 old_names <- names(...future.oldEnvVars)
[17:39:28.410]                 envs <- base::Sys.getenv()
[17:39:28.410]                 names <- names(envs)
[17:39:28.410]                 common <- intersect(names, old_names)
[17:39:28.410]                 added <- setdiff(names, old_names)
[17:39:28.410]                 removed <- setdiff(old_names, names)
[17:39:28.410]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:28.410]                   envs[common]]
[17:39:28.410]                 NAMES <- toupper(changed)
[17:39:28.410]                 args <- list()
[17:39:28.410]                 for (kk in seq_along(NAMES)) {
[17:39:28.410]                   name <- changed[[kk]]
[17:39:28.410]                   NAME <- NAMES[[kk]]
[17:39:28.410]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.410]                     next
[17:39:28.410]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.410]                 }
[17:39:28.410]                 NAMES <- toupper(added)
[17:39:28.410]                 for (kk in seq_along(NAMES)) {
[17:39:28.410]                   name <- added[[kk]]
[17:39:28.410]                   NAME <- NAMES[[kk]]
[17:39:28.410]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.410]                     next
[17:39:28.410]                   args[[name]] <- ""
[17:39:28.410]                 }
[17:39:28.410]                 NAMES <- toupper(removed)
[17:39:28.410]                 for (kk in seq_along(NAMES)) {
[17:39:28.410]                   name <- removed[[kk]]
[17:39:28.410]                   NAME <- NAMES[[kk]]
[17:39:28.410]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.410]                     next
[17:39:28.410]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.410]                 }
[17:39:28.410]                 if (length(args) > 0) 
[17:39:28.410]                   base::do.call(base::Sys.setenv, args = args)
[17:39:28.410]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:28.410]             }
[17:39:28.410]             else {
[17:39:28.410]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:28.410]             }
[17:39:28.410]             {
[17:39:28.410]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:28.410]                   0L) {
[17:39:28.410]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:28.410]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:28.410]                   base::options(opts)
[17:39:28.410]                 }
[17:39:28.410]                 {
[17:39:28.410]                   {
[17:39:28.410]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:28.410]                     NULL
[17:39:28.410]                   }
[17:39:28.410]                   options(future.plan = NULL)
[17:39:28.410]                   if (is.na(NA_character_)) 
[17:39:28.410]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.410]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:28.410]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:28.410]                     .init = FALSE)
[17:39:28.410]                 }
[17:39:28.410]             }
[17:39:28.410]         }
[17:39:28.410]     })
[17:39:28.410]     if (TRUE) {
[17:39:28.410]         base::sink(type = "output", split = FALSE)
[17:39:28.410]         if (TRUE) {
[17:39:28.410]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:28.410]         }
[17:39:28.410]         else {
[17:39:28.410]             ...future.result["stdout"] <- base::list(NULL)
[17:39:28.410]         }
[17:39:28.410]         base::close(...future.stdout)
[17:39:28.410]         ...future.stdout <- NULL
[17:39:28.410]     }
[17:39:28.410]     ...future.result$conditions <- ...future.conditions
[17:39:28.410]     ...future.result$finished <- base::Sys.time()
[17:39:28.410]     ...future.result
[17:39:28.410] }
[17:39:28.412] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:39:28.412] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:39:28.413] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:39:28.413] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:39:28.413] MultisessionFuture started
[17:39:28.413] - Launch lazy future ... done
[17:39:28.413] run() for ‘MultisessionFuture’ ... done
[17:39:28.414] result() for ClusterFuture ...
[17:39:28.414] receiveMessageFromWorker() for ClusterFuture ...
[17:39:28.414] - Validating connection of MultisessionFuture
[17:39:28.415] - received message: FutureResult
[17:39:28.415] - Received FutureResult
[17:39:28.415] - Erased future from FutureRegistry
[17:39:28.415] result() for ClusterFuture ...
[17:39:28.415] - result already collected: FutureResult
[17:39:28.415] result() for ClusterFuture ... done
[17:39:28.415] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:28.415] result() for ClusterFuture ... done
[17:39:28.416] result() for ClusterFuture ...
[17:39:28.416] - result already collected: FutureResult
[17:39:28.416] result() for ClusterFuture ... done
[17:39:28.416] getGlobalsAndPackages() ...
[17:39:28.416] Searching for globals...
[17:39:28.417] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:39:28.417] Searching for globals ... DONE
[17:39:28.417] Resolving globals: FALSE
[17:39:28.417] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:28.418] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:28.418] - globals: [1] ‘a’
[17:39:28.418] 
[17:39:28.418] getGlobalsAndPackages() ... DONE
[17:39:28.418] run() for ‘Future’ ...
[17:39:28.418] - state: ‘created’
[17:39:28.419] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:28.432] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:28.433] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:28.433]   - Field: ‘node’
[17:39:28.433]   - Field: ‘label’
[17:39:28.433]   - Field: ‘local’
[17:39:28.433]   - Field: ‘owner’
[17:39:28.433]   - Field: ‘envir’
[17:39:28.433]   - Field: ‘workers’
[17:39:28.433]   - Field: ‘packages’
[17:39:28.433]   - Field: ‘gc’
[17:39:28.434]   - Field: ‘conditions’
[17:39:28.434]   - Field: ‘persistent’
[17:39:28.434]   - Field: ‘expr’
[17:39:28.434]   - Field: ‘uuid’
[17:39:28.434]   - Field: ‘seed’
[17:39:28.434]   - Field: ‘version’
[17:39:28.434]   - Field: ‘result’
[17:39:28.434]   - Field: ‘asynchronous’
[17:39:28.434]   - Field: ‘calls’
[17:39:28.434]   - Field: ‘globals’
[17:39:28.434]   - Field: ‘stdout’
[17:39:28.435]   - Field: ‘earlySignal’
[17:39:28.435]   - Field: ‘lazy’
[17:39:28.435]   - Field: ‘state’
[17:39:28.435] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:28.435] - Launch lazy future ...
[17:39:28.435] Packages needed by the future expression (n = 0): <none>
[17:39:28.435] Packages needed by future strategies (n = 0): <none>
[17:39:28.436] {
[17:39:28.436]     {
[17:39:28.436]         {
[17:39:28.436]             ...future.startTime <- base::Sys.time()
[17:39:28.436]             {
[17:39:28.436]                 {
[17:39:28.436]                   {
[17:39:28.436]                     {
[17:39:28.436]                       base::local({
[17:39:28.436]                         has_future <- base::requireNamespace("future", 
[17:39:28.436]                           quietly = TRUE)
[17:39:28.436]                         if (has_future) {
[17:39:28.436]                           ns <- base::getNamespace("future")
[17:39:28.436]                           version <- ns[[".package"]][["version"]]
[17:39:28.436]                           if (is.null(version)) 
[17:39:28.436]                             version <- utils::packageVersion("future")
[17:39:28.436]                         }
[17:39:28.436]                         else {
[17:39:28.436]                           version <- NULL
[17:39:28.436]                         }
[17:39:28.436]                         if (!has_future || version < "1.8.0") {
[17:39:28.436]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:28.436]                             "", base::R.version$version.string), 
[17:39:28.436]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:28.436]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:28.436]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:28.436]                               "release", "version")], collapse = " "), 
[17:39:28.436]                             hostname = base::Sys.info()[["nodename"]])
[17:39:28.436]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:28.436]                             info)
[17:39:28.436]                           info <- base::paste(info, collapse = "; ")
[17:39:28.436]                           if (!has_future) {
[17:39:28.436]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:28.436]                               info)
[17:39:28.436]                           }
[17:39:28.436]                           else {
[17:39:28.436]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:28.436]                               info, version)
[17:39:28.436]                           }
[17:39:28.436]                           base::stop(msg)
[17:39:28.436]                         }
[17:39:28.436]                       })
[17:39:28.436]                     }
[17:39:28.436]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:28.436]                     base::options(mc.cores = 1L)
[17:39:28.436]                   }
[17:39:28.436]                   ...future.strategy.old <- future::plan("list")
[17:39:28.436]                   options(future.plan = NULL)
[17:39:28.436]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.436]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:28.436]                 }
[17:39:28.436]                 ...future.workdir <- getwd()
[17:39:28.436]             }
[17:39:28.436]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:28.436]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:28.436]         }
[17:39:28.436]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:28.436]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:28.436]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:28.436]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:28.436]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:28.436]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:28.436]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:28.436]             base::names(...future.oldOptions))
[17:39:28.436]     }
[17:39:28.436]     if (FALSE) {
[17:39:28.436]     }
[17:39:28.436]     else {
[17:39:28.436]         if (TRUE) {
[17:39:28.436]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:28.436]                 open = "w")
[17:39:28.436]         }
[17:39:28.436]         else {
[17:39:28.436]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:28.436]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:28.436]         }
[17:39:28.436]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:28.436]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:28.436]             base::sink(type = "output", split = FALSE)
[17:39:28.436]             base::close(...future.stdout)
[17:39:28.436]         }, add = TRUE)
[17:39:28.436]     }
[17:39:28.436]     ...future.frame <- base::sys.nframe()
[17:39:28.436]     ...future.conditions <- base::list()
[17:39:28.436]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:28.436]     if (FALSE) {
[17:39:28.436]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:28.436]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:28.436]     }
[17:39:28.436]     ...future.result <- base::tryCatch({
[17:39:28.436]         base::withCallingHandlers({
[17:39:28.436]             ...future.value <- base::withVisible(base::local({
[17:39:28.436]                 ...future.makeSendCondition <- base::local({
[17:39:28.436]                   sendCondition <- NULL
[17:39:28.436]                   function(frame = 1L) {
[17:39:28.436]                     if (is.function(sendCondition)) 
[17:39:28.436]                       return(sendCondition)
[17:39:28.436]                     ns <- getNamespace("parallel")
[17:39:28.436]                     if (exists("sendData", mode = "function", 
[17:39:28.436]                       envir = ns)) {
[17:39:28.436]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:28.436]                         envir = ns)
[17:39:28.436]                       envir <- sys.frame(frame)
[17:39:28.436]                       master <- NULL
[17:39:28.436]                       while (!identical(envir, .GlobalEnv) && 
[17:39:28.436]                         !identical(envir, emptyenv())) {
[17:39:28.436]                         if (exists("master", mode = "list", envir = envir, 
[17:39:28.436]                           inherits = FALSE)) {
[17:39:28.436]                           master <- get("master", mode = "list", 
[17:39:28.436]                             envir = envir, inherits = FALSE)
[17:39:28.436]                           if (inherits(master, c("SOCKnode", 
[17:39:28.436]                             "SOCK0node"))) {
[17:39:28.436]                             sendCondition <<- function(cond) {
[17:39:28.436]                               data <- list(type = "VALUE", value = cond, 
[17:39:28.436]                                 success = TRUE)
[17:39:28.436]                               parallel_sendData(master, data)
[17:39:28.436]                             }
[17:39:28.436]                             return(sendCondition)
[17:39:28.436]                           }
[17:39:28.436]                         }
[17:39:28.436]                         frame <- frame + 1L
[17:39:28.436]                         envir <- sys.frame(frame)
[17:39:28.436]                       }
[17:39:28.436]                     }
[17:39:28.436]                     sendCondition <<- function(cond) NULL
[17:39:28.436]                   }
[17:39:28.436]                 })
[17:39:28.436]                 withCallingHandlers({
[17:39:28.436]                   {
[17:39:28.436]                     2 * a
[17:39:28.436]                   }
[17:39:28.436]                 }, immediateCondition = function(cond) {
[17:39:28.436]                   sendCondition <- ...future.makeSendCondition()
[17:39:28.436]                   sendCondition(cond)
[17:39:28.436]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.436]                   {
[17:39:28.436]                     inherits <- base::inherits
[17:39:28.436]                     invokeRestart <- base::invokeRestart
[17:39:28.436]                     is.null <- base::is.null
[17:39:28.436]                     muffled <- FALSE
[17:39:28.436]                     if (inherits(cond, "message")) {
[17:39:28.436]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:28.436]                       if (muffled) 
[17:39:28.436]                         invokeRestart("muffleMessage")
[17:39:28.436]                     }
[17:39:28.436]                     else if (inherits(cond, "warning")) {
[17:39:28.436]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:28.436]                       if (muffled) 
[17:39:28.436]                         invokeRestart("muffleWarning")
[17:39:28.436]                     }
[17:39:28.436]                     else if (inherits(cond, "condition")) {
[17:39:28.436]                       if (!is.null(pattern)) {
[17:39:28.436]                         computeRestarts <- base::computeRestarts
[17:39:28.436]                         grepl <- base::grepl
[17:39:28.436]                         restarts <- computeRestarts(cond)
[17:39:28.436]                         for (restart in restarts) {
[17:39:28.436]                           name <- restart$name
[17:39:28.436]                           if (is.null(name)) 
[17:39:28.436]                             next
[17:39:28.436]                           if (!grepl(pattern, name)) 
[17:39:28.436]                             next
[17:39:28.436]                           invokeRestart(restart)
[17:39:28.436]                           muffled <- TRUE
[17:39:28.436]                           break
[17:39:28.436]                         }
[17:39:28.436]                       }
[17:39:28.436]                     }
[17:39:28.436]                     invisible(muffled)
[17:39:28.436]                   }
[17:39:28.436]                   muffleCondition(cond)
[17:39:28.436]                 })
[17:39:28.436]             }))
[17:39:28.436]             future::FutureResult(value = ...future.value$value, 
[17:39:28.436]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.436]                   ...future.rng), globalenv = if (FALSE) 
[17:39:28.436]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:28.436]                     ...future.globalenv.names))
[17:39:28.436]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:28.436]         }, condition = base::local({
[17:39:28.436]             c <- base::c
[17:39:28.436]             inherits <- base::inherits
[17:39:28.436]             invokeRestart <- base::invokeRestart
[17:39:28.436]             length <- base::length
[17:39:28.436]             list <- base::list
[17:39:28.436]             seq.int <- base::seq.int
[17:39:28.436]             signalCondition <- base::signalCondition
[17:39:28.436]             sys.calls <- base::sys.calls
[17:39:28.436]             `[[` <- base::`[[`
[17:39:28.436]             `+` <- base::`+`
[17:39:28.436]             `<<-` <- base::`<<-`
[17:39:28.436]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:28.436]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:28.436]                   3L)]
[17:39:28.436]             }
[17:39:28.436]             function(cond) {
[17:39:28.436]                 is_error <- inherits(cond, "error")
[17:39:28.436]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:28.436]                   NULL)
[17:39:28.436]                 if (is_error) {
[17:39:28.436]                   sessionInformation <- function() {
[17:39:28.436]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:28.436]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:28.436]                       search = base::search(), system = base::Sys.info())
[17:39:28.436]                   }
[17:39:28.436]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.436]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:28.436]                     cond$call), session = sessionInformation(), 
[17:39:28.436]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:28.436]                   signalCondition(cond)
[17:39:28.436]                 }
[17:39:28.436]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:28.436]                 "immediateCondition"))) {
[17:39:28.436]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:28.436]                   ...future.conditions[[length(...future.conditions) + 
[17:39:28.436]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:28.436]                   if (TRUE && !signal) {
[17:39:28.436]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.436]                     {
[17:39:28.436]                       inherits <- base::inherits
[17:39:28.436]                       invokeRestart <- base::invokeRestart
[17:39:28.436]                       is.null <- base::is.null
[17:39:28.436]                       muffled <- FALSE
[17:39:28.436]                       if (inherits(cond, "message")) {
[17:39:28.436]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.436]                         if (muffled) 
[17:39:28.436]                           invokeRestart("muffleMessage")
[17:39:28.436]                       }
[17:39:28.436]                       else if (inherits(cond, "warning")) {
[17:39:28.436]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.436]                         if (muffled) 
[17:39:28.436]                           invokeRestart("muffleWarning")
[17:39:28.436]                       }
[17:39:28.436]                       else if (inherits(cond, "condition")) {
[17:39:28.436]                         if (!is.null(pattern)) {
[17:39:28.436]                           computeRestarts <- base::computeRestarts
[17:39:28.436]                           grepl <- base::grepl
[17:39:28.436]                           restarts <- computeRestarts(cond)
[17:39:28.436]                           for (restart in restarts) {
[17:39:28.436]                             name <- restart$name
[17:39:28.436]                             if (is.null(name)) 
[17:39:28.436]                               next
[17:39:28.436]                             if (!grepl(pattern, name)) 
[17:39:28.436]                               next
[17:39:28.436]                             invokeRestart(restart)
[17:39:28.436]                             muffled <- TRUE
[17:39:28.436]                             break
[17:39:28.436]                           }
[17:39:28.436]                         }
[17:39:28.436]                       }
[17:39:28.436]                       invisible(muffled)
[17:39:28.436]                     }
[17:39:28.436]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.436]                   }
[17:39:28.436]                 }
[17:39:28.436]                 else {
[17:39:28.436]                   if (TRUE) {
[17:39:28.436]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:28.436]                     {
[17:39:28.436]                       inherits <- base::inherits
[17:39:28.436]                       invokeRestart <- base::invokeRestart
[17:39:28.436]                       is.null <- base::is.null
[17:39:28.436]                       muffled <- FALSE
[17:39:28.436]                       if (inherits(cond, "message")) {
[17:39:28.436]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:28.436]                         if (muffled) 
[17:39:28.436]                           invokeRestart("muffleMessage")
[17:39:28.436]                       }
[17:39:28.436]                       else if (inherits(cond, "warning")) {
[17:39:28.436]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:28.436]                         if (muffled) 
[17:39:28.436]                           invokeRestart("muffleWarning")
[17:39:28.436]                       }
[17:39:28.436]                       else if (inherits(cond, "condition")) {
[17:39:28.436]                         if (!is.null(pattern)) {
[17:39:28.436]                           computeRestarts <- base::computeRestarts
[17:39:28.436]                           grepl <- base::grepl
[17:39:28.436]                           restarts <- computeRestarts(cond)
[17:39:28.436]                           for (restart in restarts) {
[17:39:28.436]                             name <- restart$name
[17:39:28.436]                             if (is.null(name)) 
[17:39:28.436]                               next
[17:39:28.436]                             if (!grepl(pattern, name)) 
[17:39:28.436]                               next
[17:39:28.436]                             invokeRestart(restart)
[17:39:28.436]                             muffled <- TRUE
[17:39:28.436]                             break
[17:39:28.436]                           }
[17:39:28.436]                         }
[17:39:28.436]                       }
[17:39:28.436]                       invisible(muffled)
[17:39:28.436]                     }
[17:39:28.436]                     muffleCondition(cond, pattern = "^muffle")
[17:39:28.436]                   }
[17:39:28.436]                 }
[17:39:28.436]             }
[17:39:28.436]         }))
[17:39:28.436]     }, error = function(ex) {
[17:39:28.436]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:28.436]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:28.436]                 ...future.rng), started = ...future.startTime, 
[17:39:28.436]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:28.436]             version = "1.8"), class = "FutureResult")
[17:39:28.436]     }, finally = {
[17:39:28.436]         if (!identical(...future.workdir, getwd())) 
[17:39:28.436]             setwd(...future.workdir)
[17:39:28.436]         {
[17:39:28.436]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:28.436]                 ...future.oldOptions$nwarnings <- NULL
[17:39:28.436]             }
[17:39:28.436]             base::options(...future.oldOptions)
[17:39:28.436]             if (.Platform$OS.type == "windows") {
[17:39:28.436]                 old_names <- names(...future.oldEnvVars)
[17:39:28.436]                 envs <- base::Sys.getenv()
[17:39:28.436]                 names <- names(envs)
[17:39:28.436]                 common <- intersect(names, old_names)
[17:39:28.436]                 added <- setdiff(names, old_names)
[17:39:28.436]                 removed <- setdiff(old_names, names)
[17:39:28.436]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:28.436]                   envs[common]]
[17:39:28.436]                 NAMES <- toupper(changed)
[17:39:28.436]                 args <- list()
[17:39:28.436]                 for (kk in seq_along(NAMES)) {
[17:39:28.436]                   name <- changed[[kk]]
[17:39:28.436]                   NAME <- NAMES[[kk]]
[17:39:28.436]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.436]                     next
[17:39:28.436]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.436]                 }
[17:39:28.436]                 NAMES <- toupper(added)
[17:39:28.436]                 for (kk in seq_along(NAMES)) {
[17:39:28.436]                   name <- added[[kk]]
[17:39:28.436]                   NAME <- NAMES[[kk]]
[17:39:28.436]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.436]                     next
[17:39:28.436]                   args[[name]] <- ""
[17:39:28.436]                 }
[17:39:28.436]                 NAMES <- toupper(removed)
[17:39:28.436]                 for (kk in seq_along(NAMES)) {
[17:39:28.436]                   name <- removed[[kk]]
[17:39:28.436]                   NAME <- NAMES[[kk]]
[17:39:28.436]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:28.436]                     next
[17:39:28.436]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:28.436]                 }
[17:39:28.436]                 if (length(args) > 0) 
[17:39:28.436]                   base::do.call(base::Sys.setenv, args = args)
[17:39:28.436]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:28.436]             }
[17:39:28.436]             else {
[17:39:28.436]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:28.436]             }
[17:39:28.436]             {
[17:39:28.436]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:28.436]                   0L) {
[17:39:28.436]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:28.436]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:28.436]                   base::options(opts)
[17:39:28.436]                 }
[17:39:28.436]                 {
[17:39:28.436]                   {
[17:39:28.436]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:28.436]                     NULL
[17:39:28.436]                   }
[17:39:28.436]                   options(future.plan = NULL)
[17:39:28.436]                   if (is.na(NA_character_)) 
[17:39:28.436]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:28.436]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:28.436]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:28.436]                     .init = FALSE)
[17:39:28.436]                 }
[17:39:28.436]             }
[17:39:28.436]         }
[17:39:28.436]     })
[17:39:28.436]     if (TRUE) {
[17:39:28.436]         base::sink(type = "output", split = FALSE)
[17:39:28.436]         if (TRUE) {
[17:39:28.436]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:28.436]         }
[17:39:28.436]         else {
[17:39:28.436]             ...future.result["stdout"] <- base::list(NULL)
[17:39:28.436]         }
[17:39:28.436]         base::close(...future.stdout)
[17:39:28.436]         ...future.stdout <- NULL
[17:39:28.436]     }
[17:39:28.436]     ...future.result$conditions <- ...future.conditions
[17:39:28.436]     ...future.result$finished <- base::Sys.time()
[17:39:28.436]     ...future.result
[17:39:28.436] }
[17:39:28.438] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:39:28.439] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:39:28.439] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:39:28.439] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:39:28.440] MultisessionFuture started
[17:39:28.440] - Launch lazy future ... done
[17:39:28.440] run() for ‘MultisessionFuture’ ... done
[17:39:28.440] result() for ClusterFuture ...
[17:39:28.440] receiveMessageFromWorker() for ClusterFuture ...
[17:39:28.441] - Validating connection of MultisessionFuture
[17:39:28.442] - received message: FutureResult
[17:39:28.442] - Received FutureResult
[17:39:28.442] - Erased future from FutureRegistry
[17:39:28.442] result() for ClusterFuture ...
[17:39:28.442] - result already collected: FutureResult
[17:39:28.442] result() for ClusterFuture ... done
[17:39:28.442] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:28.442] result() for ClusterFuture ... done
[17:39:28.443] result() for ClusterFuture ...
[17:39:28.443] - result already collected: FutureResult
[17:39:28.443] result() for ClusterFuture ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE
> 
> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
> 
> source("incl/end.R")
[17:39:28.444] plan(): Setting new future strategy stack:
[17:39:28.444] List of future strategies:
[17:39:28.444] 1. FutureStrategy:
[17:39:28.444]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:28.444]    - tweaked: FALSE
[17:39:28.444]    - call: future::plan(oplan)
[17:39:28.445] plan(): nbrOfWorkers() = 1
> 
