
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:31:42.150] plan(): Setting new future strategy stack:
[09:31:42.151] List of future strategies:
[09:31:42.151] 1. sequential:
[09:31:42.151]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:42.151]    - tweaked: FALSE
[09:31:42.151]    - call: future::plan("sequential")
[09:31:42.161] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[09:31:42.176] plan(): Setting new future strategy stack:
[09:31:42.176] List of future strategies:
[09:31:42.176] 1. multisession:
[09:31:42.176]    - args: function (..., workers = 2L, envir = parent.frame())
[09:31:42.176]    - tweaked: TRUE
[09:31:42.176]    - call: plan(multisession, workers = 2L)
[09:31:42.186] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:31:42.186] multisession:
[09:31:42.186] - args: function (..., workers = 2L, envir = parent.frame())
[09:31:42.186] - tweaked: TRUE
[09:31:42.186] - call: plan(multisession, workers = 2L)
[09:31:42.188] getGlobalsAndPackages() ...
[09:31:42.188] Not searching for globals
[09:31:42.188] - globals: [0] <none>
[09:31:42.188] getGlobalsAndPackages() ... DONE
[09:31:42.189] [local output] makeClusterPSOCK() ...
[09:31:42.219] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:31:42.220] [local output] Base port: 11473
[09:31:42.220] [local output] Getting setup options for 2 cluster nodes ...
[09:31:42.220] [local output]  - Node 1 of 2 ...
[09:31:42.221] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:42.221] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDZICi4/worker.rank=1.parallelly.parent=45192.b0885e3fae4f.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpDZICi4/worker.rank=1.parallelly.parent=45192.b0885e3fae4f.pid")'’
[09:31:42.404] - Possible to infer worker's PID: TRUE
[09:31:42.405] [local output] Rscript port: 11473

[09:31:42.405] [local output]  - Node 2 of 2 ...
[09:31:42.405] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:42.406] [local output] Rscript port: 11473

[09:31:42.406] [local output] Getting setup options for 2 cluster nodes ... done
[09:31:42.406] [local output]  - Parallel setup requested for some PSOCK nodes
[09:31:42.407] [local output] Setting up PSOCK nodes in parallel
[09:31:42.407] List of 36
[09:31:42.407]  $ worker          : chr "localhost"
[09:31:42.407]   ..- attr(*, "localhost")= logi TRUE
[09:31:42.407]  $ master          : chr "localhost"
[09:31:42.407]  $ port            : int 11473
[09:31:42.407]  $ connectTimeout  : num 120
[09:31:42.407]  $ timeout         : num 2592000
[09:31:42.407]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:31:42.407]  $ homogeneous     : logi TRUE
[09:31:42.407]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:31:42.407]  $ rscript_envs    : NULL
[09:31:42.407]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:42.407]  $ rscript_startup : NULL
[09:31:42.407]  $ rscript_sh      : chr "sh"
[09:31:42.407]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:42.407]  $ methods         : logi TRUE
[09:31:42.407]  $ socketOptions   : chr "no-delay"
[09:31:42.407]  $ useXDR          : logi FALSE
[09:31:42.407]  $ outfile         : chr "/dev/null"
[09:31:42.407]  $ renice          : int NA
[09:31:42.407]  $ rshcmd          : NULL
[09:31:42.407]  $ user            : chr(0) 
[09:31:42.407]  $ revtunnel       : logi FALSE
[09:31:42.407]  $ rshlogfile      : NULL
[09:31:42.407]  $ rshopts         : chr(0) 
[09:31:42.407]  $ rank            : int 1
[09:31:42.407]  $ manual          : logi FALSE
[09:31:42.407]  $ dryrun          : logi FALSE
[09:31:42.407]  $ quiet           : logi FALSE
[09:31:42.407]  $ setup_strategy  : chr "parallel"
[09:31:42.407]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:42.407]  $ pidfile         : chr "/tmp/RtmpDZICi4/worker.rank=1.parallelly.parent=45192.b0885e3fae4f.pid"
[09:31:42.407]  $ rshcmd_label    : NULL
[09:31:42.407]  $ rsh_call        : NULL
[09:31:42.407]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:42.407]  $ localMachine    : logi TRUE
[09:31:42.407]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:31:42.407]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:31:42.407]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:31:42.407]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:31:42.407]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:31:42.407]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:31:42.407]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:31:42.407]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:31:42.407]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:31:42.407]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:31:42.407]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:31:42.407]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:31:42.407]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:31:42.407]  $ arguments       :List of 28
[09:31:42.407]   ..$ worker          : chr "localhost"
[09:31:42.407]   ..$ master          : NULL
[09:31:42.407]   ..$ port            : int 11473
[09:31:42.407]   ..$ connectTimeout  : num 120
[09:31:42.407]   ..$ timeout         : num 2592000
[09:31:42.407]   ..$ rscript         : NULL
[09:31:42.407]   ..$ homogeneous     : NULL
[09:31:42.407]   ..$ rscript_args    : NULL
[09:31:42.407]   ..$ rscript_envs    : NULL
[09:31:42.407]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:42.407]   ..$ rscript_startup : NULL
[09:31:42.407]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:31:42.407]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:42.407]   ..$ methods         : logi TRUE
[09:31:42.407]   ..$ socketOptions   : chr "no-delay"
[09:31:42.407]   ..$ useXDR          : logi FALSE
[09:31:42.407]   ..$ outfile         : chr "/dev/null"
[09:31:42.407]   ..$ renice          : int NA
[09:31:42.407]   ..$ rshcmd          : NULL
[09:31:42.407]   ..$ user            : NULL
[09:31:42.407]   ..$ revtunnel       : logi NA
[09:31:42.407]   ..$ rshlogfile      : NULL
[09:31:42.407]   ..$ rshopts         : NULL
[09:31:42.407]   ..$ rank            : int 1
[09:31:42.407]   ..$ manual          : logi FALSE
[09:31:42.407]   ..$ dryrun          : logi FALSE
[09:31:42.407]   ..$ quiet           : logi FALSE
[09:31:42.407]   ..$ setup_strategy  : chr "parallel"
[09:31:42.407]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:31:42.426] [local output] System call to launch all workers:
[09:31:42.426] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDZICi4/worker.rank=1.parallelly.parent=45192.b0885e3fae4f.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11473 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:31:42.426] [local output] Starting PSOCK main server
[09:31:42.432] [local output] Workers launched
[09:31:42.432] [local output] Waiting for workers to connect back
[09:31:42.432]  - [local output] 0 workers out of 2 ready
[09:31:42.674]  - [local output] 0 workers out of 2 ready
[09:31:42.675]  - [local output] 1 workers out of 2 ready
[09:31:42.675]  - [local output] 2 workers out of 2 ready
[09:31:42.675] [local output] Launching of workers completed
[09:31:42.676] [local output] Collecting session information from workers
[09:31:42.676] [local output]  - Worker #1 of 2
[09:31:42.677] [local output]  - Worker #2 of 2
[09:31:42.677] [local output] makeClusterPSOCK() ... done
[09:31:42.689] Packages needed by the future expression (n = 0): <none>
[09:31:42.689] Packages needed by future strategies (n = 0): <none>
[09:31:42.690] {
[09:31:42.690]     {
[09:31:42.690]         {
[09:31:42.690]             ...future.startTime <- base::Sys.time()
[09:31:42.690]             {
[09:31:42.690]                 {
[09:31:42.690]                   {
[09:31:42.690]                     {
[09:31:42.690]                       base::local({
[09:31:42.690]                         has_future <- base::requireNamespace("future", 
[09:31:42.690]                           quietly = TRUE)
[09:31:42.690]                         if (has_future) {
[09:31:42.690]                           ns <- base::getNamespace("future")
[09:31:42.690]                           version <- ns[[".package"]][["version"]]
[09:31:42.690]                           if (is.null(version)) 
[09:31:42.690]                             version <- utils::packageVersion("future")
[09:31:42.690]                         }
[09:31:42.690]                         else {
[09:31:42.690]                           version <- NULL
[09:31:42.690]                         }
[09:31:42.690]                         if (!has_future || version < "1.8.0") {
[09:31:42.690]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:42.690]                             "", base::R.version$version.string), 
[09:31:42.690]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:42.690]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:42.690]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:42.690]                               "release", "version")], collapse = " "), 
[09:31:42.690]                             hostname = base::Sys.info()[["nodename"]])
[09:31:42.690]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:42.690]                             info)
[09:31:42.690]                           info <- base::paste(info, collapse = "; ")
[09:31:42.690]                           if (!has_future) {
[09:31:42.690]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:42.690]                               info)
[09:31:42.690]                           }
[09:31:42.690]                           else {
[09:31:42.690]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:42.690]                               info, version)
[09:31:42.690]                           }
[09:31:42.690]                           base::stop(msg)
[09:31:42.690]                         }
[09:31:42.690]                       })
[09:31:42.690]                     }
[09:31:42.690]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:42.690]                     base::options(mc.cores = 1L)
[09:31:42.690]                   }
[09:31:42.690]                   ...future.strategy.old <- future::plan("list")
[09:31:42.690]                   options(future.plan = NULL)
[09:31:42.690]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:42.690]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:42.690]                 }
[09:31:42.690]                 ...future.workdir <- getwd()
[09:31:42.690]             }
[09:31:42.690]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:42.690]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:42.690]         }
[09:31:42.690]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:42.690]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:42.690]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:42.690]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:42.690]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:42.690]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:42.690]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:42.690]             base::names(...future.oldOptions))
[09:31:42.690]     }
[09:31:42.690]     if (FALSE) {
[09:31:42.690]     }
[09:31:42.690]     else {
[09:31:42.690]         if (TRUE) {
[09:31:42.690]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:42.690]                 open = "w")
[09:31:42.690]         }
[09:31:42.690]         else {
[09:31:42.690]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:42.690]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:42.690]         }
[09:31:42.690]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:42.690]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:42.690]             base::sink(type = "output", split = FALSE)
[09:31:42.690]             base::close(...future.stdout)
[09:31:42.690]         }, add = TRUE)
[09:31:42.690]     }
[09:31:42.690]     ...future.frame <- base::sys.nframe()
[09:31:42.690]     ...future.conditions <- base::list()
[09:31:42.690]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:42.690]     if (FALSE) {
[09:31:42.690]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:42.690]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:42.690]     }
[09:31:42.690]     ...future.result <- base::tryCatch({
[09:31:42.690]         base::withCallingHandlers({
[09:31:42.690]             ...future.value <- base::withVisible(base::local({
[09:31:42.690]                 ...future.makeSendCondition <- base::local({
[09:31:42.690]                   sendCondition <- NULL
[09:31:42.690]                   function(frame = 1L) {
[09:31:42.690]                     if (is.function(sendCondition)) 
[09:31:42.690]                       return(sendCondition)
[09:31:42.690]                     ns <- getNamespace("parallel")
[09:31:42.690]                     if (exists("sendData", mode = "function", 
[09:31:42.690]                       envir = ns)) {
[09:31:42.690]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:42.690]                         envir = ns)
[09:31:42.690]                       envir <- sys.frame(frame)
[09:31:42.690]                       master <- NULL
[09:31:42.690]                       while (!identical(envir, .GlobalEnv) && 
[09:31:42.690]                         !identical(envir, emptyenv())) {
[09:31:42.690]                         if (exists("master", mode = "list", envir = envir, 
[09:31:42.690]                           inherits = FALSE)) {
[09:31:42.690]                           master <- get("master", mode = "list", 
[09:31:42.690]                             envir = envir, inherits = FALSE)
[09:31:42.690]                           if (inherits(master, c("SOCKnode", 
[09:31:42.690]                             "SOCK0node"))) {
[09:31:42.690]                             sendCondition <<- function(cond) {
[09:31:42.690]                               data <- list(type = "VALUE", value = cond, 
[09:31:42.690]                                 success = TRUE)
[09:31:42.690]                               parallel_sendData(master, data)
[09:31:42.690]                             }
[09:31:42.690]                             return(sendCondition)
[09:31:42.690]                           }
[09:31:42.690]                         }
[09:31:42.690]                         frame <- frame + 1L
[09:31:42.690]                         envir <- sys.frame(frame)
[09:31:42.690]                       }
[09:31:42.690]                     }
[09:31:42.690]                     sendCondition <<- function(cond) NULL
[09:31:42.690]                   }
[09:31:42.690]                 })
[09:31:42.690]                 withCallingHandlers({
[09:31:42.690]                   NA
[09:31:42.690]                 }, immediateCondition = function(cond) {
[09:31:42.690]                   sendCondition <- ...future.makeSendCondition()
[09:31:42.690]                   sendCondition(cond)
[09:31:42.690]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.690]                   {
[09:31:42.690]                     inherits <- base::inherits
[09:31:42.690]                     invokeRestart <- base::invokeRestart
[09:31:42.690]                     is.null <- base::is.null
[09:31:42.690]                     muffled <- FALSE
[09:31:42.690]                     if (inherits(cond, "message")) {
[09:31:42.690]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:42.690]                       if (muffled) 
[09:31:42.690]                         invokeRestart("muffleMessage")
[09:31:42.690]                     }
[09:31:42.690]                     else if (inherits(cond, "warning")) {
[09:31:42.690]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:42.690]                       if (muffled) 
[09:31:42.690]                         invokeRestart("muffleWarning")
[09:31:42.690]                     }
[09:31:42.690]                     else if (inherits(cond, "condition")) {
[09:31:42.690]                       if (!is.null(pattern)) {
[09:31:42.690]                         computeRestarts <- base::computeRestarts
[09:31:42.690]                         grepl <- base::grepl
[09:31:42.690]                         restarts <- computeRestarts(cond)
[09:31:42.690]                         for (restart in restarts) {
[09:31:42.690]                           name <- restart$name
[09:31:42.690]                           if (is.null(name)) 
[09:31:42.690]                             next
[09:31:42.690]                           if (!grepl(pattern, name)) 
[09:31:42.690]                             next
[09:31:42.690]                           invokeRestart(restart)
[09:31:42.690]                           muffled <- TRUE
[09:31:42.690]                           break
[09:31:42.690]                         }
[09:31:42.690]                       }
[09:31:42.690]                     }
[09:31:42.690]                     invisible(muffled)
[09:31:42.690]                   }
[09:31:42.690]                   muffleCondition(cond)
[09:31:42.690]                 })
[09:31:42.690]             }))
[09:31:42.690]             future::FutureResult(value = ...future.value$value, 
[09:31:42.690]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:42.690]                   ...future.rng), globalenv = if (FALSE) 
[09:31:42.690]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:42.690]                     ...future.globalenv.names))
[09:31:42.690]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:42.690]         }, condition = base::local({
[09:31:42.690]             c <- base::c
[09:31:42.690]             inherits <- base::inherits
[09:31:42.690]             invokeRestart <- base::invokeRestart
[09:31:42.690]             length <- base::length
[09:31:42.690]             list <- base::list
[09:31:42.690]             seq.int <- base::seq.int
[09:31:42.690]             signalCondition <- base::signalCondition
[09:31:42.690]             sys.calls <- base::sys.calls
[09:31:42.690]             `[[` <- base::`[[`
[09:31:42.690]             `+` <- base::`+`
[09:31:42.690]             `<<-` <- base::`<<-`
[09:31:42.690]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:42.690]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:42.690]                   3L)]
[09:31:42.690]             }
[09:31:42.690]             function(cond) {
[09:31:42.690]                 is_error <- inherits(cond, "error")
[09:31:42.690]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:42.690]                   NULL)
[09:31:42.690]                 if (is_error) {
[09:31:42.690]                   sessionInformation <- function() {
[09:31:42.690]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:42.690]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:42.690]                       search = base::search(), system = base::Sys.info())
[09:31:42.690]                   }
[09:31:42.690]                   ...future.conditions[[length(...future.conditions) + 
[09:31:42.690]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:42.690]                     cond$call), session = sessionInformation(), 
[09:31:42.690]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:42.690]                   signalCondition(cond)
[09:31:42.690]                 }
[09:31:42.690]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:42.690]                 "immediateCondition"))) {
[09:31:42.690]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:42.690]                   ...future.conditions[[length(...future.conditions) + 
[09:31:42.690]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:42.690]                   if (TRUE && !signal) {
[09:31:42.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.690]                     {
[09:31:42.690]                       inherits <- base::inherits
[09:31:42.690]                       invokeRestart <- base::invokeRestart
[09:31:42.690]                       is.null <- base::is.null
[09:31:42.690]                       muffled <- FALSE
[09:31:42.690]                       if (inherits(cond, "message")) {
[09:31:42.690]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:42.690]                         if (muffled) 
[09:31:42.690]                           invokeRestart("muffleMessage")
[09:31:42.690]                       }
[09:31:42.690]                       else if (inherits(cond, "warning")) {
[09:31:42.690]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:42.690]                         if (muffled) 
[09:31:42.690]                           invokeRestart("muffleWarning")
[09:31:42.690]                       }
[09:31:42.690]                       else if (inherits(cond, "condition")) {
[09:31:42.690]                         if (!is.null(pattern)) {
[09:31:42.690]                           computeRestarts <- base::computeRestarts
[09:31:42.690]                           grepl <- base::grepl
[09:31:42.690]                           restarts <- computeRestarts(cond)
[09:31:42.690]                           for (restart in restarts) {
[09:31:42.690]                             name <- restart$name
[09:31:42.690]                             if (is.null(name)) 
[09:31:42.690]                               next
[09:31:42.690]                             if (!grepl(pattern, name)) 
[09:31:42.690]                               next
[09:31:42.690]                             invokeRestart(restart)
[09:31:42.690]                             muffled <- TRUE
[09:31:42.690]                             break
[09:31:42.690]                           }
[09:31:42.690]                         }
[09:31:42.690]                       }
[09:31:42.690]                       invisible(muffled)
[09:31:42.690]                     }
[09:31:42.690]                     muffleCondition(cond, pattern = "^muffle")
[09:31:42.690]                   }
[09:31:42.690]                 }
[09:31:42.690]                 else {
[09:31:42.690]                   if (TRUE) {
[09:31:42.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.690]                     {
[09:31:42.690]                       inherits <- base::inherits
[09:31:42.690]                       invokeRestart <- base::invokeRestart
[09:31:42.690]                       is.null <- base::is.null
[09:31:42.690]                       muffled <- FALSE
[09:31:42.690]                       if (inherits(cond, "message")) {
[09:31:42.690]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:42.690]                         if (muffled) 
[09:31:42.690]                           invokeRestart("muffleMessage")
[09:31:42.690]                       }
[09:31:42.690]                       else if (inherits(cond, "warning")) {
[09:31:42.690]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:42.690]                         if (muffled) 
[09:31:42.690]                           invokeRestart("muffleWarning")
[09:31:42.690]                       }
[09:31:42.690]                       else if (inherits(cond, "condition")) {
[09:31:42.690]                         if (!is.null(pattern)) {
[09:31:42.690]                           computeRestarts <- base::computeRestarts
[09:31:42.690]                           grepl <- base::grepl
[09:31:42.690]                           restarts <- computeRestarts(cond)
[09:31:42.690]                           for (restart in restarts) {
[09:31:42.690]                             name <- restart$name
[09:31:42.690]                             if (is.null(name)) 
[09:31:42.690]                               next
[09:31:42.690]                             if (!grepl(pattern, name)) 
[09:31:42.690]                               next
[09:31:42.690]                             invokeRestart(restart)
[09:31:42.690]                             muffled <- TRUE
[09:31:42.690]                             break
[09:31:42.690]                           }
[09:31:42.690]                         }
[09:31:42.690]                       }
[09:31:42.690]                       invisible(muffled)
[09:31:42.690]                     }
[09:31:42.690]                     muffleCondition(cond, pattern = "^muffle")
[09:31:42.690]                   }
[09:31:42.690]                 }
[09:31:42.690]             }
[09:31:42.690]         }))
[09:31:42.690]     }, error = function(ex) {
[09:31:42.690]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:42.690]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:42.690]                 ...future.rng), started = ...future.startTime, 
[09:31:42.690]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:42.690]             version = "1.8"), class = "FutureResult")
[09:31:42.690]     }, finally = {
[09:31:42.690]         if (!identical(...future.workdir, getwd())) 
[09:31:42.690]             setwd(...future.workdir)
[09:31:42.690]         {
[09:31:42.690]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:42.690]                 ...future.oldOptions$nwarnings <- NULL
[09:31:42.690]             }
[09:31:42.690]             base::options(...future.oldOptions)
[09:31:42.690]             if (.Platform$OS.type == "windows") {
[09:31:42.690]                 old_names <- names(...future.oldEnvVars)
[09:31:42.690]                 envs <- base::Sys.getenv()
[09:31:42.690]                 names <- names(envs)
[09:31:42.690]                 common <- intersect(names, old_names)
[09:31:42.690]                 added <- setdiff(names, old_names)
[09:31:42.690]                 removed <- setdiff(old_names, names)
[09:31:42.690]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:42.690]                   envs[common]]
[09:31:42.690]                 NAMES <- toupper(changed)
[09:31:42.690]                 args <- list()
[09:31:42.690]                 for (kk in seq_along(NAMES)) {
[09:31:42.690]                   name <- changed[[kk]]
[09:31:42.690]                   NAME <- NAMES[[kk]]
[09:31:42.690]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.690]                     next
[09:31:42.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:42.690]                 }
[09:31:42.690]                 NAMES <- toupper(added)
[09:31:42.690]                 for (kk in seq_along(NAMES)) {
[09:31:42.690]                   name <- added[[kk]]
[09:31:42.690]                   NAME <- NAMES[[kk]]
[09:31:42.690]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.690]                     next
[09:31:42.690]                   args[[name]] <- ""
[09:31:42.690]                 }
[09:31:42.690]                 NAMES <- toupper(removed)
[09:31:42.690]                 for (kk in seq_along(NAMES)) {
[09:31:42.690]                   name <- removed[[kk]]
[09:31:42.690]                   NAME <- NAMES[[kk]]
[09:31:42.690]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.690]                     next
[09:31:42.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:42.690]                 }
[09:31:42.690]                 if (length(args) > 0) 
[09:31:42.690]                   base::do.call(base::Sys.setenv, args = args)
[09:31:42.690]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:42.690]             }
[09:31:42.690]             else {
[09:31:42.690]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:42.690]             }
[09:31:42.690]             {
[09:31:42.690]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:42.690]                   0L) {
[09:31:42.690]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:42.690]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:42.690]                   base::options(opts)
[09:31:42.690]                 }
[09:31:42.690]                 {
[09:31:42.690]                   {
[09:31:42.690]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:42.690]                     NULL
[09:31:42.690]                   }
[09:31:42.690]                   options(future.plan = NULL)
[09:31:42.690]                   if (is.na(NA_character_)) 
[09:31:42.690]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:42.690]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:42.690]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:42.690]                     .init = FALSE)
[09:31:42.690]                 }
[09:31:42.690]             }
[09:31:42.690]         }
[09:31:42.690]     })
[09:31:42.690]     if (TRUE) {
[09:31:42.690]         base::sink(type = "output", split = FALSE)
[09:31:42.690]         if (TRUE) {
[09:31:42.690]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:42.690]         }
[09:31:42.690]         else {
[09:31:42.690]             ...future.result["stdout"] <- base::list(NULL)
[09:31:42.690]         }
[09:31:42.690]         base::close(...future.stdout)
[09:31:42.690]         ...future.stdout <- NULL
[09:31:42.690]     }
[09:31:42.690]     ...future.result$conditions <- ...future.conditions
[09:31:42.690]     ...future.result$finished <- base::Sys.time()
[09:31:42.690]     ...future.result
[09:31:42.690] }
[09:31:42.741] MultisessionFuture started
[09:31:42.742] result() for ClusterFuture ...
[09:31:42.742] receiveMessageFromWorker() for ClusterFuture ...
[09:31:42.742] - Validating connection of MultisessionFuture
[09:31:42.773] - received message: FutureResult
[09:31:42.773] - Received FutureResult
[09:31:42.775] - Erased future from FutureRegistry
[09:31:42.776] result() for ClusterFuture ...
[09:31:42.776] - result already collected: FutureResult
[09:31:42.776] result() for ClusterFuture ... done
[09:31:42.776] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:42.776] result() for ClusterFuture ... done
[09:31:42.776] result() for ClusterFuture ...
[09:31:42.776] - result already collected: FutureResult
[09:31:42.776] result() for ClusterFuture ... done
[09:31:42.777] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:31:42.777] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: a0403ee1-376b-4f68-5d85-a423f35d110f
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[09:31:42.777] getGlobalsAndPackages() ...
[09:31:42.778] Searching for globals...
[09:31:42.785] - globals found: [2] ‘{’, ‘:::’
[09:31:42.785] Searching for globals ... DONE
[09:31:42.785] Resolving globals: FALSE
[09:31:42.786] 
[09:31:42.786] 
[09:31:42.786] getGlobalsAndPackages() ... DONE
[09:31:42.787] run() for ‘Future’ ...
[09:31:42.787] - state: ‘created’
[09:31:42.787] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:42.798] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:42.798] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:42.798]   - Field: ‘node’
[09:31:42.798]   - Field: ‘label’
[09:31:42.799]   - Field: ‘local’
[09:31:42.799]   - Field: ‘owner’
[09:31:42.799]   - Field: ‘envir’
[09:31:42.799]   - Field: ‘workers’
[09:31:42.799]   - Field: ‘packages’
[09:31:42.799]   - Field: ‘gc’
[09:31:42.799]   - Field: ‘conditions’
[09:31:42.799]   - Field: ‘persistent’
[09:31:42.799]   - Field: ‘expr’
[09:31:42.799]   - Field: ‘uuid’
[09:31:42.800]   - Field: ‘seed’
[09:31:42.800]   - Field: ‘version’
[09:31:42.800]   - Field: ‘result’
[09:31:42.800]   - Field: ‘asynchronous’
[09:31:42.800]   - Field: ‘calls’
[09:31:42.800]   - Field: ‘globals’
[09:31:42.800]   - Field: ‘stdout’
[09:31:42.800]   - Field: ‘earlySignal’
[09:31:42.801]   - Field: ‘lazy’
[09:31:42.801]   - Field: ‘state’
[09:31:42.801] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:42.801] - Launch lazy future ...
[09:31:42.801] Packages needed by the future expression (n = 0): <none>
[09:31:42.801] Packages needed by future strategies (n = 0): <none>
[09:31:42.802] {
[09:31:42.802]     {
[09:31:42.802]         {
[09:31:42.802]             ...future.startTime <- base::Sys.time()
[09:31:42.802]             {
[09:31:42.802]                 {
[09:31:42.802]                   {
[09:31:42.802]                     {
[09:31:42.802]                       base::local({
[09:31:42.802]                         has_future <- base::requireNamespace("future", 
[09:31:42.802]                           quietly = TRUE)
[09:31:42.802]                         if (has_future) {
[09:31:42.802]                           ns <- base::getNamespace("future")
[09:31:42.802]                           version <- ns[[".package"]][["version"]]
[09:31:42.802]                           if (is.null(version)) 
[09:31:42.802]                             version <- utils::packageVersion("future")
[09:31:42.802]                         }
[09:31:42.802]                         else {
[09:31:42.802]                           version <- NULL
[09:31:42.802]                         }
[09:31:42.802]                         if (!has_future || version < "1.8.0") {
[09:31:42.802]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:42.802]                             "", base::R.version$version.string), 
[09:31:42.802]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:42.802]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:42.802]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:42.802]                               "release", "version")], collapse = " "), 
[09:31:42.802]                             hostname = base::Sys.info()[["nodename"]])
[09:31:42.802]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:42.802]                             info)
[09:31:42.802]                           info <- base::paste(info, collapse = "; ")
[09:31:42.802]                           if (!has_future) {
[09:31:42.802]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:42.802]                               info)
[09:31:42.802]                           }
[09:31:42.802]                           else {
[09:31:42.802]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:42.802]                               info, version)
[09:31:42.802]                           }
[09:31:42.802]                           base::stop(msg)
[09:31:42.802]                         }
[09:31:42.802]                       })
[09:31:42.802]                     }
[09:31:42.802]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:42.802]                     base::options(mc.cores = 1L)
[09:31:42.802]                   }
[09:31:42.802]                   ...future.strategy.old <- future::plan("list")
[09:31:42.802]                   options(future.plan = NULL)
[09:31:42.802]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:42.802]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:42.802]                 }
[09:31:42.802]                 ...future.workdir <- getwd()
[09:31:42.802]             }
[09:31:42.802]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:42.802]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:42.802]         }
[09:31:42.802]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:42.802]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:42.802]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:42.802]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:42.802]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:42.802]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:42.802]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:42.802]             base::names(...future.oldOptions))
[09:31:42.802]     }
[09:31:42.802]     if (FALSE) {
[09:31:42.802]     }
[09:31:42.802]     else {
[09:31:42.802]         if (TRUE) {
[09:31:42.802]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:42.802]                 open = "w")
[09:31:42.802]         }
[09:31:42.802]         else {
[09:31:42.802]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:42.802]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:42.802]         }
[09:31:42.802]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:42.802]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:42.802]             base::sink(type = "output", split = FALSE)
[09:31:42.802]             base::close(...future.stdout)
[09:31:42.802]         }, add = TRUE)
[09:31:42.802]     }
[09:31:42.802]     ...future.frame <- base::sys.nframe()
[09:31:42.802]     ...future.conditions <- base::list()
[09:31:42.802]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:42.802]     if (FALSE) {
[09:31:42.802]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:42.802]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:42.802]     }
[09:31:42.802]     ...future.result <- base::tryCatch({
[09:31:42.802]         base::withCallingHandlers({
[09:31:42.802]             ...future.value <- base::withVisible(base::local({
[09:31:42.802]                 ...future.makeSendCondition <- base::local({
[09:31:42.802]                   sendCondition <- NULL
[09:31:42.802]                   function(frame = 1L) {
[09:31:42.802]                     if (is.function(sendCondition)) 
[09:31:42.802]                       return(sendCondition)
[09:31:42.802]                     ns <- getNamespace("parallel")
[09:31:42.802]                     if (exists("sendData", mode = "function", 
[09:31:42.802]                       envir = ns)) {
[09:31:42.802]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:42.802]                         envir = ns)
[09:31:42.802]                       envir <- sys.frame(frame)
[09:31:42.802]                       master <- NULL
[09:31:42.802]                       while (!identical(envir, .GlobalEnv) && 
[09:31:42.802]                         !identical(envir, emptyenv())) {
[09:31:42.802]                         if (exists("master", mode = "list", envir = envir, 
[09:31:42.802]                           inherits = FALSE)) {
[09:31:42.802]                           master <- get("master", mode = "list", 
[09:31:42.802]                             envir = envir, inherits = FALSE)
[09:31:42.802]                           if (inherits(master, c("SOCKnode", 
[09:31:42.802]                             "SOCK0node"))) {
[09:31:42.802]                             sendCondition <<- function(cond) {
[09:31:42.802]                               data <- list(type = "VALUE", value = cond, 
[09:31:42.802]                                 success = TRUE)
[09:31:42.802]                               parallel_sendData(master, data)
[09:31:42.802]                             }
[09:31:42.802]                             return(sendCondition)
[09:31:42.802]                           }
[09:31:42.802]                         }
[09:31:42.802]                         frame <- frame + 1L
[09:31:42.802]                         envir <- sys.frame(frame)
[09:31:42.802]                       }
[09:31:42.802]                     }
[09:31:42.802]                     sendCondition <<- function(cond) NULL
[09:31:42.802]                   }
[09:31:42.802]                 })
[09:31:42.802]                 withCallingHandlers({
[09:31:42.802]                   {
[09:31:42.802]                     future:::session_uuid(attributes = TRUE)
[09:31:42.802]                   }
[09:31:42.802]                 }, immediateCondition = function(cond) {
[09:31:42.802]                   sendCondition <- ...future.makeSendCondition()
[09:31:42.802]                   sendCondition(cond)
[09:31:42.802]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.802]                   {
[09:31:42.802]                     inherits <- base::inherits
[09:31:42.802]                     invokeRestart <- base::invokeRestart
[09:31:42.802]                     is.null <- base::is.null
[09:31:42.802]                     muffled <- FALSE
[09:31:42.802]                     if (inherits(cond, "message")) {
[09:31:42.802]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:42.802]                       if (muffled) 
[09:31:42.802]                         invokeRestart("muffleMessage")
[09:31:42.802]                     }
[09:31:42.802]                     else if (inherits(cond, "warning")) {
[09:31:42.802]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:42.802]                       if (muffled) 
[09:31:42.802]                         invokeRestart("muffleWarning")
[09:31:42.802]                     }
[09:31:42.802]                     else if (inherits(cond, "condition")) {
[09:31:42.802]                       if (!is.null(pattern)) {
[09:31:42.802]                         computeRestarts <- base::computeRestarts
[09:31:42.802]                         grepl <- base::grepl
[09:31:42.802]                         restarts <- computeRestarts(cond)
[09:31:42.802]                         for (restart in restarts) {
[09:31:42.802]                           name <- restart$name
[09:31:42.802]                           if (is.null(name)) 
[09:31:42.802]                             next
[09:31:42.802]                           if (!grepl(pattern, name)) 
[09:31:42.802]                             next
[09:31:42.802]                           invokeRestart(restart)
[09:31:42.802]                           muffled <- TRUE
[09:31:42.802]                           break
[09:31:42.802]                         }
[09:31:42.802]                       }
[09:31:42.802]                     }
[09:31:42.802]                     invisible(muffled)
[09:31:42.802]                   }
[09:31:42.802]                   muffleCondition(cond)
[09:31:42.802]                 })
[09:31:42.802]             }))
[09:31:42.802]             future::FutureResult(value = ...future.value$value, 
[09:31:42.802]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:42.802]                   ...future.rng), globalenv = if (FALSE) 
[09:31:42.802]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:42.802]                     ...future.globalenv.names))
[09:31:42.802]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:42.802]         }, condition = base::local({
[09:31:42.802]             c <- base::c
[09:31:42.802]             inherits <- base::inherits
[09:31:42.802]             invokeRestart <- base::invokeRestart
[09:31:42.802]             length <- base::length
[09:31:42.802]             list <- base::list
[09:31:42.802]             seq.int <- base::seq.int
[09:31:42.802]             signalCondition <- base::signalCondition
[09:31:42.802]             sys.calls <- base::sys.calls
[09:31:42.802]             `[[` <- base::`[[`
[09:31:42.802]             `+` <- base::`+`
[09:31:42.802]             `<<-` <- base::`<<-`
[09:31:42.802]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:42.802]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:42.802]                   3L)]
[09:31:42.802]             }
[09:31:42.802]             function(cond) {
[09:31:42.802]                 is_error <- inherits(cond, "error")
[09:31:42.802]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:42.802]                   NULL)
[09:31:42.802]                 if (is_error) {
[09:31:42.802]                   sessionInformation <- function() {
[09:31:42.802]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:42.802]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:42.802]                       search = base::search(), system = base::Sys.info())
[09:31:42.802]                   }
[09:31:42.802]                   ...future.conditions[[length(...future.conditions) + 
[09:31:42.802]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:42.802]                     cond$call), session = sessionInformation(), 
[09:31:42.802]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:42.802]                   signalCondition(cond)
[09:31:42.802]                 }
[09:31:42.802]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:42.802]                 "immediateCondition"))) {
[09:31:42.802]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:42.802]                   ...future.conditions[[length(...future.conditions) + 
[09:31:42.802]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:42.802]                   if (TRUE && !signal) {
[09:31:42.802]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.802]                     {
[09:31:42.802]                       inherits <- base::inherits
[09:31:42.802]                       invokeRestart <- base::invokeRestart
[09:31:42.802]                       is.null <- base::is.null
[09:31:42.802]                       muffled <- FALSE
[09:31:42.802]                       if (inherits(cond, "message")) {
[09:31:42.802]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:42.802]                         if (muffled) 
[09:31:42.802]                           invokeRestart("muffleMessage")
[09:31:42.802]                       }
[09:31:42.802]                       else if (inherits(cond, "warning")) {
[09:31:42.802]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:42.802]                         if (muffled) 
[09:31:42.802]                           invokeRestart("muffleWarning")
[09:31:42.802]                       }
[09:31:42.802]                       else if (inherits(cond, "condition")) {
[09:31:42.802]                         if (!is.null(pattern)) {
[09:31:42.802]                           computeRestarts <- base::computeRestarts
[09:31:42.802]                           grepl <- base::grepl
[09:31:42.802]                           restarts <- computeRestarts(cond)
[09:31:42.802]                           for (restart in restarts) {
[09:31:42.802]                             name <- restart$name
[09:31:42.802]                             if (is.null(name)) 
[09:31:42.802]                               next
[09:31:42.802]                             if (!grepl(pattern, name)) 
[09:31:42.802]                               next
[09:31:42.802]                             invokeRestart(restart)
[09:31:42.802]                             muffled <- TRUE
[09:31:42.802]                             break
[09:31:42.802]                           }
[09:31:42.802]                         }
[09:31:42.802]                       }
[09:31:42.802]                       invisible(muffled)
[09:31:42.802]                     }
[09:31:42.802]                     muffleCondition(cond, pattern = "^muffle")
[09:31:42.802]                   }
[09:31:42.802]                 }
[09:31:42.802]                 else {
[09:31:42.802]                   if (TRUE) {
[09:31:42.802]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.802]                     {
[09:31:42.802]                       inherits <- base::inherits
[09:31:42.802]                       invokeRestart <- base::invokeRestart
[09:31:42.802]                       is.null <- base::is.null
[09:31:42.802]                       muffled <- FALSE
[09:31:42.802]                       if (inherits(cond, "message")) {
[09:31:42.802]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:42.802]                         if (muffled) 
[09:31:42.802]                           invokeRestart("muffleMessage")
[09:31:42.802]                       }
[09:31:42.802]                       else if (inherits(cond, "warning")) {
[09:31:42.802]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:42.802]                         if (muffled) 
[09:31:42.802]                           invokeRestart("muffleWarning")
[09:31:42.802]                       }
[09:31:42.802]                       else if (inherits(cond, "condition")) {
[09:31:42.802]                         if (!is.null(pattern)) {
[09:31:42.802]                           computeRestarts <- base::computeRestarts
[09:31:42.802]                           grepl <- base::grepl
[09:31:42.802]                           restarts <- computeRestarts(cond)
[09:31:42.802]                           for (restart in restarts) {
[09:31:42.802]                             name <- restart$name
[09:31:42.802]                             if (is.null(name)) 
[09:31:42.802]                               next
[09:31:42.802]                             if (!grepl(pattern, name)) 
[09:31:42.802]                               next
[09:31:42.802]                             invokeRestart(restart)
[09:31:42.802]                             muffled <- TRUE
[09:31:42.802]                             break
[09:31:42.802]                           }
[09:31:42.802]                         }
[09:31:42.802]                       }
[09:31:42.802]                       invisible(muffled)
[09:31:42.802]                     }
[09:31:42.802]                     muffleCondition(cond, pattern = "^muffle")
[09:31:42.802]                   }
[09:31:42.802]                 }
[09:31:42.802]             }
[09:31:42.802]         }))
[09:31:42.802]     }, error = function(ex) {
[09:31:42.802]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:42.802]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:42.802]                 ...future.rng), started = ...future.startTime, 
[09:31:42.802]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:42.802]             version = "1.8"), class = "FutureResult")
[09:31:42.802]     }, finally = {
[09:31:42.802]         if (!identical(...future.workdir, getwd())) 
[09:31:42.802]             setwd(...future.workdir)
[09:31:42.802]         {
[09:31:42.802]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:42.802]                 ...future.oldOptions$nwarnings <- NULL
[09:31:42.802]             }
[09:31:42.802]             base::options(...future.oldOptions)
[09:31:42.802]             if (.Platform$OS.type == "windows") {
[09:31:42.802]                 old_names <- names(...future.oldEnvVars)
[09:31:42.802]                 envs <- base::Sys.getenv()
[09:31:42.802]                 names <- names(envs)
[09:31:42.802]                 common <- intersect(names, old_names)
[09:31:42.802]                 added <- setdiff(names, old_names)
[09:31:42.802]                 removed <- setdiff(old_names, names)
[09:31:42.802]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:42.802]                   envs[common]]
[09:31:42.802]                 NAMES <- toupper(changed)
[09:31:42.802]                 args <- list()
[09:31:42.802]                 for (kk in seq_along(NAMES)) {
[09:31:42.802]                   name <- changed[[kk]]
[09:31:42.802]                   NAME <- NAMES[[kk]]
[09:31:42.802]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.802]                     next
[09:31:42.802]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:42.802]                 }
[09:31:42.802]                 NAMES <- toupper(added)
[09:31:42.802]                 for (kk in seq_along(NAMES)) {
[09:31:42.802]                   name <- added[[kk]]
[09:31:42.802]                   NAME <- NAMES[[kk]]
[09:31:42.802]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.802]                     next
[09:31:42.802]                   args[[name]] <- ""
[09:31:42.802]                 }
[09:31:42.802]                 NAMES <- toupper(removed)
[09:31:42.802]                 for (kk in seq_along(NAMES)) {
[09:31:42.802]                   name <- removed[[kk]]
[09:31:42.802]                   NAME <- NAMES[[kk]]
[09:31:42.802]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.802]                     next
[09:31:42.802]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:42.802]                 }
[09:31:42.802]                 if (length(args) > 0) 
[09:31:42.802]                   base::do.call(base::Sys.setenv, args = args)
[09:31:42.802]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:42.802]             }
[09:31:42.802]             else {
[09:31:42.802]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:42.802]             }
[09:31:42.802]             {
[09:31:42.802]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:42.802]                   0L) {
[09:31:42.802]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:42.802]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:42.802]                   base::options(opts)
[09:31:42.802]                 }
[09:31:42.802]                 {
[09:31:42.802]                   {
[09:31:42.802]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:42.802]                     NULL
[09:31:42.802]                   }
[09:31:42.802]                   options(future.plan = NULL)
[09:31:42.802]                   if (is.na(NA_character_)) 
[09:31:42.802]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:42.802]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:42.802]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:42.802]                     .init = FALSE)
[09:31:42.802]                 }
[09:31:42.802]             }
[09:31:42.802]         }
[09:31:42.802]     })
[09:31:42.802]     if (TRUE) {
[09:31:42.802]         base::sink(type = "output", split = FALSE)
[09:31:42.802]         if (TRUE) {
[09:31:42.802]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:42.802]         }
[09:31:42.802]         else {
[09:31:42.802]             ...future.result["stdout"] <- base::list(NULL)
[09:31:42.802]         }
[09:31:42.802]         base::close(...future.stdout)
[09:31:42.802]         ...future.stdout <- NULL
[09:31:42.802]     }
[09:31:42.802]     ...future.result$conditions <- ...future.conditions
[09:31:42.802]     ...future.result$finished <- base::Sys.time()
[09:31:42.802]     ...future.result
[09:31:42.802] }
[09:31:42.805] MultisessionFuture started
[09:31:42.805] - Launch lazy future ... done
[09:31:42.806] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[09:31:42.806] result() for ClusterFuture ...
[09:31:42.806] receiveMessageFromWorker() for ClusterFuture ...
[09:31:42.806] - Validating connection of MultisessionFuture
[09:31:42.807] - received message: FutureResult
[09:31:42.807] - Received FutureResult
[09:31:42.807] - Erased future from FutureRegistry
[09:31:42.807] result() for ClusterFuture ...
[09:31:42.807] - result already collected: FutureResult
[09:31:42.807] result() for ClusterFuture ... done
[09:31:42.807] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:42.808] result() for ClusterFuture ... done
[09:31:42.808] result() for ClusterFuture ...
[09:31:42.808] - result already collected: FutureResult
[09:31:42.808] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: 715fbd9c-9cf8-9539-4214-49f87fb37c9c
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[09:31:42.808] getGlobalsAndPackages() ...
[09:31:42.808] Searching for globals...
[09:31:42.809] - globals found: [2] ‘{’, ‘:::’
[09:31:42.810] Searching for globals ... DONE
[09:31:42.810] Resolving globals: FALSE
[09:31:42.810] 
[09:31:42.810] 
[09:31:42.810] getGlobalsAndPackages() ... DONE
[09:31:42.810] run() for ‘Future’ ...
[09:31:42.811] - state: ‘created’
[09:31:42.811] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:42.822] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:42.822] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:42.822]   - Field: ‘node’
[09:31:42.822]   - Field: ‘label’
[09:31:42.822]   - Field: ‘local’
[09:31:42.822]   - Field: ‘owner’
[09:31:42.822]   - Field: ‘envir’
[09:31:42.822]   - Field: ‘workers’
[09:31:42.822]   - Field: ‘packages’
[09:31:42.823]   - Field: ‘gc’
[09:31:42.823]   - Field: ‘conditions’
[09:31:42.823]   - Field: ‘persistent’
[09:31:42.823]   - Field: ‘expr’
[09:31:42.823]   - Field: ‘uuid’
[09:31:42.823]   - Field: ‘seed’
[09:31:42.826]   - Field: ‘version’
[09:31:42.826]   - Field: ‘result’
[09:31:42.826]   - Field: ‘asynchronous’
[09:31:42.826]   - Field: ‘calls’
[09:31:42.826]   - Field: ‘globals’
[09:31:42.827]   - Field: ‘stdout’
[09:31:42.827]   - Field: ‘earlySignal’
[09:31:42.827]   - Field: ‘lazy’
[09:31:42.827]   - Field: ‘state’
[09:31:42.827] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:42.827] - Launch lazy future ...
[09:31:42.827] Packages needed by the future expression (n = 0): <none>
[09:31:42.827] Packages needed by future strategies (n = 0): <none>
[09:31:42.828] {
[09:31:42.828]     {
[09:31:42.828]         {
[09:31:42.828]             ...future.startTime <- base::Sys.time()
[09:31:42.828]             {
[09:31:42.828]                 {
[09:31:42.828]                   {
[09:31:42.828]                     {
[09:31:42.828]                       base::local({
[09:31:42.828]                         has_future <- base::requireNamespace("future", 
[09:31:42.828]                           quietly = TRUE)
[09:31:42.828]                         if (has_future) {
[09:31:42.828]                           ns <- base::getNamespace("future")
[09:31:42.828]                           version <- ns[[".package"]][["version"]]
[09:31:42.828]                           if (is.null(version)) 
[09:31:42.828]                             version <- utils::packageVersion("future")
[09:31:42.828]                         }
[09:31:42.828]                         else {
[09:31:42.828]                           version <- NULL
[09:31:42.828]                         }
[09:31:42.828]                         if (!has_future || version < "1.8.0") {
[09:31:42.828]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:42.828]                             "", base::R.version$version.string), 
[09:31:42.828]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:42.828]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:42.828]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:42.828]                               "release", "version")], collapse = " "), 
[09:31:42.828]                             hostname = base::Sys.info()[["nodename"]])
[09:31:42.828]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:42.828]                             info)
[09:31:42.828]                           info <- base::paste(info, collapse = "; ")
[09:31:42.828]                           if (!has_future) {
[09:31:42.828]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:42.828]                               info)
[09:31:42.828]                           }
[09:31:42.828]                           else {
[09:31:42.828]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:42.828]                               info, version)
[09:31:42.828]                           }
[09:31:42.828]                           base::stop(msg)
[09:31:42.828]                         }
[09:31:42.828]                       })
[09:31:42.828]                     }
[09:31:42.828]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:42.828]                     base::options(mc.cores = 1L)
[09:31:42.828]                   }
[09:31:42.828]                   ...future.strategy.old <- future::plan("list")
[09:31:42.828]                   options(future.plan = NULL)
[09:31:42.828]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:42.828]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:42.828]                 }
[09:31:42.828]                 ...future.workdir <- getwd()
[09:31:42.828]             }
[09:31:42.828]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:42.828]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:42.828]         }
[09:31:42.828]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:42.828]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:42.828]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:42.828]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:42.828]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:42.828]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:42.828]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:42.828]             base::names(...future.oldOptions))
[09:31:42.828]     }
[09:31:42.828]     if (FALSE) {
[09:31:42.828]     }
[09:31:42.828]     else {
[09:31:42.828]         if (TRUE) {
[09:31:42.828]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:42.828]                 open = "w")
[09:31:42.828]         }
[09:31:42.828]         else {
[09:31:42.828]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:42.828]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:42.828]         }
[09:31:42.828]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:42.828]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:42.828]             base::sink(type = "output", split = FALSE)
[09:31:42.828]             base::close(...future.stdout)
[09:31:42.828]         }, add = TRUE)
[09:31:42.828]     }
[09:31:42.828]     ...future.frame <- base::sys.nframe()
[09:31:42.828]     ...future.conditions <- base::list()
[09:31:42.828]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:42.828]     if (FALSE) {
[09:31:42.828]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:42.828]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:42.828]     }
[09:31:42.828]     ...future.result <- base::tryCatch({
[09:31:42.828]         base::withCallingHandlers({
[09:31:42.828]             ...future.value <- base::withVisible(base::local({
[09:31:42.828]                 ...future.makeSendCondition <- base::local({
[09:31:42.828]                   sendCondition <- NULL
[09:31:42.828]                   function(frame = 1L) {
[09:31:42.828]                     if (is.function(sendCondition)) 
[09:31:42.828]                       return(sendCondition)
[09:31:42.828]                     ns <- getNamespace("parallel")
[09:31:42.828]                     if (exists("sendData", mode = "function", 
[09:31:42.828]                       envir = ns)) {
[09:31:42.828]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:42.828]                         envir = ns)
[09:31:42.828]                       envir <- sys.frame(frame)
[09:31:42.828]                       master <- NULL
[09:31:42.828]                       while (!identical(envir, .GlobalEnv) && 
[09:31:42.828]                         !identical(envir, emptyenv())) {
[09:31:42.828]                         if (exists("master", mode = "list", envir = envir, 
[09:31:42.828]                           inherits = FALSE)) {
[09:31:42.828]                           master <- get("master", mode = "list", 
[09:31:42.828]                             envir = envir, inherits = FALSE)
[09:31:42.828]                           if (inherits(master, c("SOCKnode", 
[09:31:42.828]                             "SOCK0node"))) {
[09:31:42.828]                             sendCondition <<- function(cond) {
[09:31:42.828]                               data <- list(type = "VALUE", value = cond, 
[09:31:42.828]                                 success = TRUE)
[09:31:42.828]                               parallel_sendData(master, data)
[09:31:42.828]                             }
[09:31:42.828]                             return(sendCondition)
[09:31:42.828]                           }
[09:31:42.828]                         }
[09:31:42.828]                         frame <- frame + 1L
[09:31:42.828]                         envir <- sys.frame(frame)
[09:31:42.828]                       }
[09:31:42.828]                     }
[09:31:42.828]                     sendCondition <<- function(cond) NULL
[09:31:42.828]                   }
[09:31:42.828]                 })
[09:31:42.828]                 withCallingHandlers({
[09:31:42.828]                   {
[09:31:42.828]                     future:::session_uuid(attributes = TRUE)
[09:31:42.828]                   }
[09:31:42.828]                 }, immediateCondition = function(cond) {
[09:31:42.828]                   sendCondition <- ...future.makeSendCondition()
[09:31:42.828]                   sendCondition(cond)
[09:31:42.828]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.828]                   {
[09:31:42.828]                     inherits <- base::inherits
[09:31:42.828]                     invokeRestart <- base::invokeRestart
[09:31:42.828]                     is.null <- base::is.null
[09:31:42.828]                     muffled <- FALSE
[09:31:42.828]                     if (inherits(cond, "message")) {
[09:31:42.828]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:42.828]                       if (muffled) 
[09:31:42.828]                         invokeRestart("muffleMessage")
[09:31:42.828]                     }
[09:31:42.828]                     else if (inherits(cond, "warning")) {
[09:31:42.828]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:42.828]                       if (muffled) 
[09:31:42.828]                         invokeRestart("muffleWarning")
[09:31:42.828]                     }
[09:31:42.828]                     else if (inherits(cond, "condition")) {
[09:31:42.828]                       if (!is.null(pattern)) {
[09:31:42.828]                         computeRestarts <- base::computeRestarts
[09:31:42.828]                         grepl <- base::grepl
[09:31:42.828]                         restarts <- computeRestarts(cond)
[09:31:42.828]                         for (restart in restarts) {
[09:31:42.828]                           name <- restart$name
[09:31:42.828]                           if (is.null(name)) 
[09:31:42.828]                             next
[09:31:42.828]                           if (!grepl(pattern, name)) 
[09:31:42.828]                             next
[09:31:42.828]                           invokeRestart(restart)
[09:31:42.828]                           muffled <- TRUE
[09:31:42.828]                           break
[09:31:42.828]                         }
[09:31:42.828]                       }
[09:31:42.828]                     }
[09:31:42.828]                     invisible(muffled)
[09:31:42.828]                   }
[09:31:42.828]                   muffleCondition(cond)
[09:31:42.828]                 })
[09:31:42.828]             }))
[09:31:42.828]             future::FutureResult(value = ...future.value$value, 
[09:31:42.828]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:42.828]                   ...future.rng), globalenv = if (FALSE) 
[09:31:42.828]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:42.828]                     ...future.globalenv.names))
[09:31:42.828]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:42.828]         }, condition = base::local({
[09:31:42.828]             c <- base::c
[09:31:42.828]             inherits <- base::inherits
[09:31:42.828]             invokeRestart <- base::invokeRestart
[09:31:42.828]             length <- base::length
[09:31:42.828]             list <- base::list
[09:31:42.828]             seq.int <- base::seq.int
[09:31:42.828]             signalCondition <- base::signalCondition
[09:31:42.828]             sys.calls <- base::sys.calls
[09:31:42.828]             `[[` <- base::`[[`
[09:31:42.828]             `+` <- base::`+`
[09:31:42.828]             `<<-` <- base::`<<-`
[09:31:42.828]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:42.828]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:42.828]                   3L)]
[09:31:42.828]             }
[09:31:42.828]             function(cond) {
[09:31:42.828]                 is_error <- inherits(cond, "error")
[09:31:42.828]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:42.828]                   NULL)
[09:31:42.828]                 if (is_error) {
[09:31:42.828]                   sessionInformation <- function() {
[09:31:42.828]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:42.828]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:42.828]                       search = base::search(), system = base::Sys.info())
[09:31:42.828]                   }
[09:31:42.828]                   ...future.conditions[[length(...future.conditions) + 
[09:31:42.828]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:42.828]                     cond$call), session = sessionInformation(), 
[09:31:42.828]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:42.828]                   signalCondition(cond)
[09:31:42.828]                 }
[09:31:42.828]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:42.828]                 "immediateCondition"))) {
[09:31:42.828]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:42.828]                   ...future.conditions[[length(...future.conditions) + 
[09:31:42.828]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:42.828]                   if (TRUE && !signal) {
[09:31:42.828]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.828]                     {
[09:31:42.828]                       inherits <- base::inherits
[09:31:42.828]                       invokeRestart <- base::invokeRestart
[09:31:42.828]                       is.null <- base::is.null
[09:31:42.828]                       muffled <- FALSE
[09:31:42.828]                       if (inherits(cond, "message")) {
[09:31:42.828]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:42.828]                         if (muffled) 
[09:31:42.828]                           invokeRestart("muffleMessage")
[09:31:42.828]                       }
[09:31:42.828]                       else if (inherits(cond, "warning")) {
[09:31:42.828]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:42.828]                         if (muffled) 
[09:31:42.828]                           invokeRestart("muffleWarning")
[09:31:42.828]                       }
[09:31:42.828]                       else if (inherits(cond, "condition")) {
[09:31:42.828]                         if (!is.null(pattern)) {
[09:31:42.828]                           computeRestarts <- base::computeRestarts
[09:31:42.828]                           grepl <- base::grepl
[09:31:42.828]                           restarts <- computeRestarts(cond)
[09:31:42.828]                           for (restart in restarts) {
[09:31:42.828]                             name <- restart$name
[09:31:42.828]                             if (is.null(name)) 
[09:31:42.828]                               next
[09:31:42.828]                             if (!grepl(pattern, name)) 
[09:31:42.828]                               next
[09:31:42.828]                             invokeRestart(restart)
[09:31:42.828]                             muffled <- TRUE
[09:31:42.828]                             break
[09:31:42.828]                           }
[09:31:42.828]                         }
[09:31:42.828]                       }
[09:31:42.828]                       invisible(muffled)
[09:31:42.828]                     }
[09:31:42.828]                     muffleCondition(cond, pattern = "^muffle")
[09:31:42.828]                   }
[09:31:42.828]                 }
[09:31:42.828]                 else {
[09:31:42.828]                   if (TRUE) {
[09:31:42.828]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.828]                     {
[09:31:42.828]                       inherits <- base::inherits
[09:31:42.828]                       invokeRestart <- base::invokeRestart
[09:31:42.828]                       is.null <- base::is.null
[09:31:42.828]                       muffled <- FALSE
[09:31:42.828]                       if (inherits(cond, "message")) {
[09:31:42.828]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:42.828]                         if (muffled) 
[09:31:42.828]                           invokeRestart("muffleMessage")
[09:31:42.828]                       }
[09:31:42.828]                       else if (inherits(cond, "warning")) {
[09:31:42.828]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:42.828]                         if (muffled) 
[09:31:42.828]                           invokeRestart("muffleWarning")
[09:31:42.828]                       }
[09:31:42.828]                       else if (inherits(cond, "condition")) {
[09:31:42.828]                         if (!is.null(pattern)) {
[09:31:42.828]                           computeRestarts <- base::computeRestarts
[09:31:42.828]                           grepl <- base::grepl
[09:31:42.828]                           restarts <- computeRestarts(cond)
[09:31:42.828]                           for (restart in restarts) {
[09:31:42.828]                             name <- restart$name
[09:31:42.828]                             if (is.null(name)) 
[09:31:42.828]                               next
[09:31:42.828]                             if (!grepl(pattern, name)) 
[09:31:42.828]                               next
[09:31:42.828]                             invokeRestart(restart)
[09:31:42.828]                             muffled <- TRUE
[09:31:42.828]                             break
[09:31:42.828]                           }
[09:31:42.828]                         }
[09:31:42.828]                       }
[09:31:42.828]                       invisible(muffled)
[09:31:42.828]                     }
[09:31:42.828]                     muffleCondition(cond, pattern = "^muffle")
[09:31:42.828]                   }
[09:31:42.828]                 }
[09:31:42.828]             }
[09:31:42.828]         }))
[09:31:42.828]     }, error = function(ex) {
[09:31:42.828]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:42.828]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:42.828]                 ...future.rng), started = ...future.startTime, 
[09:31:42.828]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:42.828]             version = "1.8"), class = "FutureResult")
[09:31:42.828]     }, finally = {
[09:31:42.828]         if (!identical(...future.workdir, getwd())) 
[09:31:42.828]             setwd(...future.workdir)
[09:31:42.828]         {
[09:31:42.828]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:42.828]                 ...future.oldOptions$nwarnings <- NULL
[09:31:42.828]             }
[09:31:42.828]             base::options(...future.oldOptions)
[09:31:42.828]             if (.Platform$OS.type == "windows") {
[09:31:42.828]                 old_names <- names(...future.oldEnvVars)
[09:31:42.828]                 envs <- base::Sys.getenv()
[09:31:42.828]                 names <- names(envs)
[09:31:42.828]                 common <- intersect(names, old_names)
[09:31:42.828]                 added <- setdiff(names, old_names)
[09:31:42.828]                 removed <- setdiff(old_names, names)
[09:31:42.828]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:42.828]                   envs[common]]
[09:31:42.828]                 NAMES <- toupper(changed)
[09:31:42.828]                 args <- list()
[09:31:42.828]                 for (kk in seq_along(NAMES)) {
[09:31:42.828]                   name <- changed[[kk]]
[09:31:42.828]                   NAME <- NAMES[[kk]]
[09:31:42.828]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.828]                     next
[09:31:42.828]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:42.828]                 }
[09:31:42.828]                 NAMES <- toupper(added)
[09:31:42.828]                 for (kk in seq_along(NAMES)) {
[09:31:42.828]                   name <- added[[kk]]
[09:31:42.828]                   NAME <- NAMES[[kk]]
[09:31:42.828]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.828]                     next
[09:31:42.828]                   args[[name]] <- ""
[09:31:42.828]                 }
[09:31:42.828]                 NAMES <- toupper(removed)
[09:31:42.828]                 for (kk in seq_along(NAMES)) {
[09:31:42.828]                   name <- removed[[kk]]
[09:31:42.828]                   NAME <- NAMES[[kk]]
[09:31:42.828]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.828]                     next
[09:31:42.828]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:42.828]                 }
[09:31:42.828]                 if (length(args) > 0) 
[09:31:42.828]                   base::do.call(base::Sys.setenv, args = args)
[09:31:42.828]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:42.828]             }
[09:31:42.828]             else {
[09:31:42.828]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:42.828]             }
[09:31:42.828]             {
[09:31:42.828]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:42.828]                   0L) {
[09:31:42.828]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:42.828]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:42.828]                   base::options(opts)
[09:31:42.828]                 }
[09:31:42.828]                 {
[09:31:42.828]                   {
[09:31:42.828]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:42.828]                     NULL
[09:31:42.828]                   }
[09:31:42.828]                   options(future.plan = NULL)
[09:31:42.828]                   if (is.na(NA_character_)) 
[09:31:42.828]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:42.828]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:42.828]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:42.828]                     .init = FALSE)
[09:31:42.828]                 }
[09:31:42.828]             }
[09:31:42.828]         }
[09:31:42.828]     })
[09:31:42.828]     if (TRUE) {
[09:31:42.828]         base::sink(type = "output", split = FALSE)
[09:31:42.828]         if (TRUE) {
[09:31:42.828]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:42.828]         }
[09:31:42.828]         else {
[09:31:42.828]             ...future.result["stdout"] <- base::list(NULL)
[09:31:42.828]         }
[09:31:42.828]         base::close(...future.stdout)
[09:31:42.828]         ...future.stdout <- NULL
[09:31:42.828]     }
[09:31:42.828]     ...future.result$conditions <- ...future.conditions
[09:31:42.828]     ...future.result$finished <- base::Sys.time()
[09:31:42.828]     ...future.result
[09:31:42.828] }
[09:31:42.831] MultisessionFuture started
[09:31:42.831] - Launch lazy future ... done
[09:31:42.831] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[09:31:42.831] result() for ClusterFuture ...
[09:31:42.831] receiveMessageFromWorker() for ClusterFuture ...
[09:31:42.831] - Validating connection of MultisessionFuture
[09:31:42.836] - received message: FutureResult
[09:31:42.836] - Received FutureResult
[09:31:42.836] - Erased future from FutureRegistry
[09:31:42.836] result() for ClusterFuture ...
[09:31:42.836] - result already collected: FutureResult
[09:31:42.836] result() for ClusterFuture ... done
[09:31:42.836] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:42.836] result() for ClusterFuture ... done
[09:31:42.836] result() for ClusterFuture ...
[09:31:42.836] - result already collected: FutureResult
[09:31:42.837] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: 715fbd9c-9cf8-9539-4214-49f87fb37c9c
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[09:31:42.837] getGlobalsAndPackages() ...
[09:31:42.837] Searching for globals...
[09:31:42.838] - globals found: [3] ‘{’, ‘$’, ‘f1’
[09:31:42.838] Searching for globals ... DONE
[09:31:42.838] Resolving globals: FALSE
[09:31:42.841] The total size of the 1 globals is 1.56 MiB (1638048 bytes)
[09:31:42.841] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[09:31:42.841] - globals: [1] ‘f1’
[09:31:42.841] 
[09:31:42.841] getGlobalsAndPackages() ... DONE
[09:31:42.842] run() for ‘Future’ ...
[09:31:42.842] - state: ‘created’
[09:31:42.842] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:42.852] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:42.852] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:42.852]   - Field: ‘node’
[09:31:42.852]   - Field: ‘label’
[09:31:42.852]   - Field: ‘local’
[09:31:42.853]   - Field: ‘owner’
[09:31:42.853]   - Field: ‘envir’
[09:31:42.853]   - Field: ‘workers’
[09:31:42.853]   - Field: ‘packages’
[09:31:42.853]   - Field: ‘gc’
[09:31:42.853]   - Field: ‘conditions’
[09:31:42.853]   - Field: ‘persistent’
[09:31:42.853]   - Field: ‘expr’
[09:31:42.853]   - Field: ‘uuid’
[09:31:42.853]   - Field: ‘seed’
[09:31:42.853]   - Field: ‘version’
[09:31:42.854]   - Field: ‘result’
[09:31:42.854]   - Field: ‘asynchronous’
[09:31:42.854]   - Field: ‘calls’
[09:31:42.854]   - Field: ‘globals’
[09:31:42.854]   - Field: ‘stdout’
[09:31:42.854]   - Field: ‘earlySignal’
[09:31:42.854]   - Field: ‘lazy’
[09:31:42.854]   - Field: ‘state’
[09:31:42.854] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:42.854] - Launch lazy future ...
[09:31:42.855] Packages needed by the future expression (n = 0): <none>
[09:31:42.855] Packages needed by future strategies (n = 0): <none>
[09:31:42.855] {
[09:31:42.855]     {
[09:31:42.855]         {
[09:31:42.855]             ...future.startTime <- base::Sys.time()
[09:31:42.855]             {
[09:31:42.855]                 {
[09:31:42.855]                   {
[09:31:42.855]                     {
[09:31:42.855]                       base::local({
[09:31:42.855]                         has_future <- base::requireNamespace("future", 
[09:31:42.855]                           quietly = TRUE)
[09:31:42.855]                         if (has_future) {
[09:31:42.855]                           ns <- base::getNamespace("future")
[09:31:42.855]                           version <- ns[[".package"]][["version"]]
[09:31:42.855]                           if (is.null(version)) 
[09:31:42.855]                             version <- utils::packageVersion("future")
[09:31:42.855]                         }
[09:31:42.855]                         else {
[09:31:42.855]                           version <- NULL
[09:31:42.855]                         }
[09:31:42.855]                         if (!has_future || version < "1.8.0") {
[09:31:42.855]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:42.855]                             "", base::R.version$version.string), 
[09:31:42.855]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:42.855]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:42.855]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:42.855]                               "release", "version")], collapse = " "), 
[09:31:42.855]                             hostname = base::Sys.info()[["nodename"]])
[09:31:42.855]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:42.855]                             info)
[09:31:42.855]                           info <- base::paste(info, collapse = "; ")
[09:31:42.855]                           if (!has_future) {
[09:31:42.855]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:42.855]                               info)
[09:31:42.855]                           }
[09:31:42.855]                           else {
[09:31:42.855]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:42.855]                               info, version)
[09:31:42.855]                           }
[09:31:42.855]                           base::stop(msg)
[09:31:42.855]                         }
[09:31:42.855]                       })
[09:31:42.855]                     }
[09:31:42.855]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:42.855]                     base::options(mc.cores = 1L)
[09:31:42.855]                   }
[09:31:42.855]                   ...future.strategy.old <- future::plan("list")
[09:31:42.855]                   options(future.plan = NULL)
[09:31:42.855]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:42.855]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:42.855]                 }
[09:31:42.855]                 ...future.workdir <- getwd()
[09:31:42.855]             }
[09:31:42.855]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:42.855]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:42.855]         }
[09:31:42.855]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:42.855]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:42.855]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:42.855]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:42.855]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:42.855]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:42.855]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:42.855]             base::names(...future.oldOptions))
[09:31:42.855]     }
[09:31:42.855]     if (FALSE) {
[09:31:42.855]     }
[09:31:42.855]     else {
[09:31:42.855]         if (TRUE) {
[09:31:42.855]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:42.855]                 open = "w")
[09:31:42.855]         }
[09:31:42.855]         else {
[09:31:42.855]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:42.855]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:42.855]         }
[09:31:42.855]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:42.855]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:42.855]             base::sink(type = "output", split = FALSE)
[09:31:42.855]             base::close(...future.stdout)
[09:31:42.855]         }, add = TRUE)
[09:31:42.855]     }
[09:31:42.855]     ...future.frame <- base::sys.nframe()
[09:31:42.855]     ...future.conditions <- base::list()
[09:31:42.855]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:42.855]     if (FALSE) {
[09:31:42.855]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:42.855]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:42.855]     }
[09:31:42.855]     ...future.result <- base::tryCatch({
[09:31:42.855]         base::withCallingHandlers({
[09:31:42.855]             ...future.value <- base::withVisible(base::local({
[09:31:42.855]                 ...future.makeSendCondition <- base::local({
[09:31:42.855]                   sendCondition <- NULL
[09:31:42.855]                   function(frame = 1L) {
[09:31:42.855]                     if (is.function(sendCondition)) 
[09:31:42.855]                       return(sendCondition)
[09:31:42.855]                     ns <- getNamespace("parallel")
[09:31:42.855]                     if (exists("sendData", mode = "function", 
[09:31:42.855]                       envir = ns)) {
[09:31:42.855]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:42.855]                         envir = ns)
[09:31:42.855]                       envir <- sys.frame(frame)
[09:31:42.855]                       master <- NULL
[09:31:42.855]                       while (!identical(envir, .GlobalEnv) && 
[09:31:42.855]                         !identical(envir, emptyenv())) {
[09:31:42.855]                         if (exists("master", mode = "list", envir = envir, 
[09:31:42.855]                           inherits = FALSE)) {
[09:31:42.855]                           master <- get("master", mode = "list", 
[09:31:42.855]                             envir = envir, inherits = FALSE)
[09:31:42.855]                           if (inherits(master, c("SOCKnode", 
[09:31:42.855]                             "SOCK0node"))) {
[09:31:42.855]                             sendCondition <<- function(cond) {
[09:31:42.855]                               data <- list(type = "VALUE", value = cond, 
[09:31:42.855]                                 success = TRUE)
[09:31:42.855]                               parallel_sendData(master, data)
[09:31:42.855]                             }
[09:31:42.855]                             return(sendCondition)
[09:31:42.855]                           }
[09:31:42.855]                         }
[09:31:42.855]                         frame <- frame + 1L
[09:31:42.855]                         envir <- sys.frame(frame)
[09:31:42.855]                       }
[09:31:42.855]                     }
[09:31:42.855]                     sendCondition <<- function(cond) NULL
[09:31:42.855]                   }
[09:31:42.855]                 })
[09:31:42.855]                 withCallingHandlers({
[09:31:42.855]                   {
[09:31:42.855]                     f1$owner
[09:31:42.855]                   }
[09:31:42.855]                 }, immediateCondition = function(cond) {
[09:31:42.855]                   sendCondition <- ...future.makeSendCondition()
[09:31:42.855]                   sendCondition(cond)
[09:31:42.855]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.855]                   {
[09:31:42.855]                     inherits <- base::inherits
[09:31:42.855]                     invokeRestart <- base::invokeRestart
[09:31:42.855]                     is.null <- base::is.null
[09:31:42.855]                     muffled <- FALSE
[09:31:42.855]                     if (inherits(cond, "message")) {
[09:31:42.855]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:42.855]                       if (muffled) 
[09:31:42.855]                         invokeRestart("muffleMessage")
[09:31:42.855]                     }
[09:31:42.855]                     else if (inherits(cond, "warning")) {
[09:31:42.855]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:42.855]                       if (muffled) 
[09:31:42.855]                         invokeRestart("muffleWarning")
[09:31:42.855]                     }
[09:31:42.855]                     else if (inherits(cond, "condition")) {
[09:31:42.855]                       if (!is.null(pattern)) {
[09:31:42.855]                         computeRestarts <- base::computeRestarts
[09:31:42.855]                         grepl <- base::grepl
[09:31:42.855]                         restarts <- computeRestarts(cond)
[09:31:42.855]                         for (restart in restarts) {
[09:31:42.855]                           name <- restart$name
[09:31:42.855]                           if (is.null(name)) 
[09:31:42.855]                             next
[09:31:42.855]                           if (!grepl(pattern, name)) 
[09:31:42.855]                             next
[09:31:42.855]                           invokeRestart(restart)
[09:31:42.855]                           muffled <- TRUE
[09:31:42.855]                           break
[09:31:42.855]                         }
[09:31:42.855]                       }
[09:31:42.855]                     }
[09:31:42.855]                     invisible(muffled)
[09:31:42.855]                   }
[09:31:42.855]                   muffleCondition(cond)
[09:31:42.855]                 })
[09:31:42.855]             }))
[09:31:42.855]             future::FutureResult(value = ...future.value$value, 
[09:31:42.855]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:42.855]                   ...future.rng), globalenv = if (FALSE) 
[09:31:42.855]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:42.855]                     ...future.globalenv.names))
[09:31:42.855]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:42.855]         }, condition = base::local({
[09:31:42.855]             c <- base::c
[09:31:42.855]             inherits <- base::inherits
[09:31:42.855]             invokeRestart <- base::invokeRestart
[09:31:42.855]             length <- base::length
[09:31:42.855]             list <- base::list
[09:31:42.855]             seq.int <- base::seq.int
[09:31:42.855]             signalCondition <- base::signalCondition
[09:31:42.855]             sys.calls <- base::sys.calls
[09:31:42.855]             `[[` <- base::`[[`
[09:31:42.855]             `+` <- base::`+`
[09:31:42.855]             `<<-` <- base::`<<-`
[09:31:42.855]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:42.855]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:42.855]                   3L)]
[09:31:42.855]             }
[09:31:42.855]             function(cond) {
[09:31:42.855]                 is_error <- inherits(cond, "error")
[09:31:42.855]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:42.855]                   NULL)
[09:31:42.855]                 if (is_error) {
[09:31:42.855]                   sessionInformation <- function() {
[09:31:42.855]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:42.855]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:42.855]                       search = base::search(), system = base::Sys.info())
[09:31:42.855]                   }
[09:31:42.855]                   ...future.conditions[[length(...future.conditions) + 
[09:31:42.855]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:42.855]                     cond$call), session = sessionInformation(), 
[09:31:42.855]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:42.855]                   signalCondition(cond)
[09:31:42.855]                 }
[09:31:42.855]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:42.855]                 "immediateCondition"))) {
[09:31:42.855]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:42.855]                   ...future.conditions[[length(...future.conditions) + 
[09:31:42.855]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:42.855]                   if (TRUE && !signal) {
[09:31:42.855]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.855]                     {
[09:31:42.855]                       inherits <- base::inherits
[09:31:42.855]                       invokeRestart <- base::invokeRestart
[09:31:42.855]                       is.null <- base::is.null
[09:31:42.855]                       muffled <- FALSE
[09:31:42.855]                       if (inherits(cond, "message")) {
[09:31:42.855]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:42.855]                         if (muffled) 
[09:31:42.855]                           invokeRestart("muffleMessage")
[09:31:42.855]                       }
[09:31:42.855]                       else if (inherits(cond, "warning")) {
[09:31:42.855]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:42.855]                         if (muffled) 
[09:31:42.855]                           invokeRestart("muffleWarning")
[09:31:42.855]                       }
[09:31:42.855]                       else if (inherits(cond, "condition")) {
[09:31:42.855]                         if (!is.null(pattern)) {
[09:31:42.855]                           computeRestarts <- base::computeRestarts
[09:31:42.855]                           grepl <- base::grepl
[09:31:42.855]                           restarts <- computeRestarts(cond)
[09:31:42.855]                           for (restart in restarts) {
[09:31:42.855]                             name <- restart$name
[09:31:42.855]                             if (is.null(name)) 
[09:31:42.855]                               next
[09:31:42.855]                             if (!grepl(pattern, name)) 
[09:31:42.855]                               next
[09:31:42.855]                             invokeRestart(restart)
[09:31:42.855]                             muffled <- TRUE
[09:31:42.855]                             break
[09:31:42.855]                           }
[09:31:42.855]                         }
[09:31:42.855]                       }
[09:31:42.855]                       invisible(muffled)
[09:31:42.855]                     }
[09:31:42.855]                     muffleCondition(cond, pattern = "^muffle")
[09:31:42.855]                   }
[09:31:42.855]                 }
[09:31:42.855]                 else {
[09:31:42.855]                   if (TRUE) {
[09:31:42.855]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.855]                     {
[09:31:42.855]                       inherits <- base::inherits
[09:31:42.855]                       invokeRestart <- base::invokeRestart
[09:31:42.855]                       is.null <- base::is.null
[09:31:42.855]                       muffled <- FALSE
[09:31:42.855]                       if (inherits(cond, "message")) {
[09:31:42.855]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:42.855]                         if (muffled) 
[09:31:42.855]                           invokeRestart("muffleMessage")
[09:31:42.855]                       }
[09:31:42.855]                       else if (inherits(cond, "warning")) {
[09:31:42.855]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:42.855]                         if (muffled) 
[09:31:42.855]                           invokeRestart("muffleWarning")
[09:31:42.855]                       }
[09:31:42.855]                       else if (inherits(cond, "condition")) {
[09:31:42.855]                         if (!is.null(pattern)) {
[09:31:42.855]                           computeRestarts <- base::computeRestarts
[09:31:42.855]                           grepl <- base::grepl
[09:31:42.855]                           restarts <- computeRestarts(cond)
[09:31:42.855]                           for (restart in restarts) {
[09:31:42.855]                             name <- restart$name
[09:31:42.855]                             if (is.null(name)) 
[09:31:42.855]                               next
[09:31:42.855]                             if (!grepl(pattern, name)) 
[09:31:42.855]                               next
[09:31:42.855]                             invokeRestart(restart)
[09:31:42.855]                             muffled <- TRUE
[09:31:42.855]                             break
[09:31:42.855]                           }
[09:31:42.855]                         }
[09:31:42.855]                       }
[09:31:42.855]                       invisible(muffled)
[09:31:42.855]                     }
[09:31:42.855]                     muffleCondition(cond, pattern = "^muffle")
[09:31:42.855]                   }
[09:31:42.855]                 }
[09:31:42.855]             }
[09:31:42.855]         }))
[09:31:42.855]     }, error = function(ex) {
[09:31:42.855]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:42.855]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:42.855]                 ...future.rng), started = ...future.startTime, 
[09:31:42.855]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:42.855]             version = "1.8"), class = "FutureResult")
[09:31:42.855]     }, finally = {
[09:31:42.855]         if (!identical(...future.workdir, getwd())) 
[09:31:42.855]             setwd(...future.workdir)
[09:31:42.855]         {
[09:31:42.855]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:42.855]                 ...future.oldOptions$nwarnings <- NULL
[09:31:42.855]             }
[09:31:42.855]             base::options(...future.oldOptions)
[09:31:42.855]             if (.Platform$OS.type == "windows") {
[09:31:42.855]                 old_names <- names(...future.oldEnvVars)
[09:31:42.855]                 envs <- base::Sys.getenv()
[09:31:42.855]                 names <- names(envs)
[09:31:42.855]                 common <- intersect(names, old_names)
[09:31:42.855]                 added <- setdiff(names, old_names)
[09:31:42.855]                 removed <- setdiff(old_names, names)
[09:31:42.855]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:42.855]                   envs[common]]
[09:31:42.855]                 NAMES <- toupper(changed)
[09:31:42.855]                 args <- list()
[09:31:42.855]                 for (kk in seq_along(NAMES)) {
[09:31:42.855]                   name <- changed[[kk]]
[09:31:42.855]                   NAME <- NAMES[[kk]]
[09:31:42.855]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.855]                     next
[09:31:42.855]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:42.855]                 }
[09:31:42.855]                 NAMES <- toupper(added)
[09:31:42.855]                 for (kk in seq_along(NAMES)) {
[09:31:42.855]                   name <- added[[kk]]
[09:31:42.855]                   NAME <- NAMES[[kk]]
[09:31:42.855]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.855]                     next
[09:31:42.855]                   args[[name]] <- ""
[09:31:42.855]                 }
[09:31:42.855]                 NAMES <- toupper(removed)
[09:31:42.855]                 for (kk in seq_along(NAMES)) {
[09:31:42.855]                   name <- removed[[kk]]
[09:31:42.855]                   NAME <- NAMES[[kk]]
[09:31:42.855]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.855]                     next
[09:31:42.855]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:42.855]                 }
[09:31:42.855]                 if (length(args) > 0) 
[09:31:42.855]                   base::do.call(base::Sys.setenv, args = args)
[09:31:42.855]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:42.855]             }
[09:31:42.855]             else {
[09:31:42.855]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:42.855]             }
[09:31:42.855]             {
[09:31:42.855]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:42.855]                   0L) {
[09:31:42.855]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:42.855]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:42.855]                   base::options(opts)
[09:31:42.855]                 }
[09:31:42.855]                 {
[09:31:42.855]                   {
[09:31:42.855]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:42.855]                     NULL
[09:31:42.855]                   }
[09:31:42.855]                   options(future.plan = NULL)
[09:31:42.855]                   if (is.na(NA_character_)) 
[09:31:42.855]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:42.855]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:42.855]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:42.855]                     .init = FALSE)
[09:31:42.855]                 }
[09:31:42.855]             }
[09:31:42.855]         }
[09:31:42.855]     })
[09:31:42.855]     if (TRUE) {
[09:31:42.855]         base::sink(type = "output", split = FALSE)
[09:31:42.855]         if (TRUE) {
[09:31:42.855]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:42.855]         }
[09:31:42.855]         else {
[09:31:42.855]             ...future.result["stdout"] <- base::list(NULL)
[09:31:42.855]         }
[09:31:42.855]         base::close(...future.stdout)
[09:31:42.855]         ...future.stdout <- NULL
[09:31:42.855]     }
[09:31:42.855]     ...future.result$conditions <- ...future.conditions
[09:31:42.855]     ...future.result$finished <- base::Sys.time()
[09:31:42.855]     ...future.result
[09:31:42.855] }
[09:31:42.858] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[09:31:42.860] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[09:31:42.912] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[09:31:42.912] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[09:31:42.913] MultisessionFuture started
[09:31:42.913] - Launch lazy future ... done
[09:31:42.913] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[09:31:42.913] result() for ClusterFuture ...
[09:31:42.913] receiveMessageFromWorker() for ClusterFuture ...
[09:31:42.914] - Validating connection of MultisessionFuture
[09:31:42.958] - received message: FutureResult
[09:31:42.958] - Received FutureResult
[09:31:42.958] - Erased future from FutureRegistry
[09:31:42.958] result() for ClusterFuture ...
[09:31:42.958] - result already collected: FutureResult
[09:31:42.958] result() for ClusterFuture ... done
[09:31:42.958] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:42.958] result() for ClusterFuture ... done
[09:31:42.958] result() for ClusterFuture ...
[09:31:42.958] - result already collected: FutureResult
[09:31:42.959] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: a0403ee1-376b-4f68-5d85-a423f35d110f
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[09:31:42.959] getGlobalsAndPackages() ...
[09:31:42.959] Searching for globals...
[09:31:42.960] - globals found: [3] ‘{’, ‘$’, ‘f1’
[09:31:42.960] Searching for globals ... DONE
[09:31:42.960] Resolving globals: FALSE
[09:31:42.962] The total size of the 1 globals is 1.56 MiB (1640984 bytes)
[09:31:42.962] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[09:31:42.963] - globals: [1] ‘f1’
[09:31:42.963] 
[09:31:42.963] getGlobalsAndPackages() ... DONE
[09:31:42.963] run() for ‘Future’ ...
[09:31:42.963] - state: ‘created’
[09:31:42.963] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:42.974] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:42.974] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:42.974]   - Field: ‘node’
[09:31:42.974]   - Field: ‘label’
[09:31:42.974]   - Field: ‘local’
[09:31:42.974]   - Field: ‘owner’
[09:31:42.974]   - Field: ‘envir’
[09:31:42.974]   - Field: ‘workers’
[09:31:42.974]   - Field: ‘packages’
[09:31:42.974]   - Field: ‘gc’
[09:31:42.974]   - Field: ‘conditions’
[09:31:42.975]   - Field: ‘persistent’
[09:31:42.975]   - Field: ‘expr’
[09:31:42.975]   - Field: ‘uuid’
[09:31:42.975]   - Field: ‘seed’
[09:31:42.975]   - Field: ‘version’
[09:31:42.975]   - Field: ‘result’
[09:31:42.975]   - Field: ‘asynchronous’
[09:31:42.975]   - Field: ‘calls’
[09:31:42.975]   - Field: ‘globals’
[09:31:42.975]   - Field: ‘stdout’
[09:31:42.975]   - Field: ‘earlySignal’
[09:31:42.976]   - Field: ‘lazy’
[09:31:42.976]   - Field: ‘state’
[09:31:42.976] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:42.976] - Launch lazy future ...
[09:31:42.976] Packages needed by the future expression (n = 0): <none>
[09:31:42.976] Packages needed by future strategies (n = 0): <none>
[09:31:42.977] {
[09:31:42.977]     {
[09:31:42.977]         {
[09:31:42.977]             ...future.startTime <- base::Sys.time()
[09:31:42.977]             {
[09:31:42.977]                 {
[09:31:42.977]                   {
[09:31:42.977]                     {
[09:31:42.977]                       base::local({
[09:31:42.977]                         has_future <- base::requireNamespace("future", 
[09:31:42.977]                           quietly = TRUE)
[09:31:42.977]                         if (has_future) {
[09:31:42.977]                           ns <- base::getNamespace("future")
[09:31:42.977]                           version <- ns[[".package"]][["version"]]
[09:31:42.977]                           if (is.null(version)) 
[09:31:42.977]                             version <- utils::packageVersion("future")
[09:31:42.977]                         }
[09:31:42.977]                         else {
[09:31:42.977]                           version <- NULL
[09:31:42.977]                         }
[09:31:42.977]                         if (!has_future || version < "1.8.0") {
[09:31:42.977]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:42.977]                             "", base::R.version$version.string), 
[09:31:42.977]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:42.977]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:42.977]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:42.977]                               "release", "version")], collapse = " "), 
[09:31:42.977]                             hostname = base::Sys.info()[["nodename"]])
[09:31:42.977]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:42.977]                             info)
[09:31:42.977]                           info <- base::paste(info, collapse = "; ")
[09:31:42.977]                           if (!has_future) {
[09:31:42.977]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:42.977]                               info)
[09:31:42.977]                           }
[09:31:42.977]                           else {
[09:31:42.977]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:42.977]                               info, version)
[09:31:42.977]                           }
[09:31:42.977]                           base::stop(msg)
[09:31:42.977]                         }
[09:31:42.977]                       })
[09:31:42.977]                     }
[09:31:42.977]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:42.977]                     base::options(mc.cores = 1L)
[09:31:42.977]                   }
[09:31:42.977]                   ...future.strategy.old <- future::plan("list")
[09:31:42.977]                   options(future.plan = NULL)
[09:31:42.977]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:42.977]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:42.977]                 }
[09:31:42.977]                 ...future.workdir <- getwd()
[09:31:42.977]             }
[09:31:42.977]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:42.977]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:42.977]         }
[09:31:42.977]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:42.977]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:42.977]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:42.977]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:42.977]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:42.977]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:42.977]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:42.977]             base::names(...future.oldOptions))
[09:31:42.977]     }
[09:31:42.977]     if (FALSE) {
[09:31:42.977]     }
[09:31:42.977]     else {
[09:31:42.977]         if (TRUE) {
[09:31:42.977]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:42.977]                 open = "w")
[09:31:42.977]         }
[09:31:42.977]         else {
[09:31:42.977]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:42.977]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:42.977]         }
[09:31:42.977]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:42.977]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:42.977]             base::sink(type = "output", split = FALSE)
[09:31:42.977]             base::close(...future.stdout)
[09:31:42.977]         }, add = TRUE)
[09:31:42.977]     }
[09:31:42.977]     ...future.frame <- base::sys.nframe()
[09:31:42.977]     ...future.conditions <- base::list()
[09:31:42.977]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:42.977]     if (FALSE) {
[09:31:42.977]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:42.977]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:42.977]     }
[09:31:42.977]     ...future.result <- base::tryCatch({
[09:31:42.977]         base::withCallingHandlers({
[09:31:42.977]             ...future.value <- base::withVisible(base::local({
[09:31:42.977]                 ...future.makeSendCondition <- base::local({
[09:31:42.977]                   sendCondition <- NULL
[09:31:42.977]                   function(frame = 1L) {
[09:31:42.977]                     if (is.function(sendCondition)) 
[09:31:42.977]                       return(sendCondition)
[09:31:42.977]                     ns <- getNamespace("parallel")
[09:31:42.977]                     if (exists("sendData", mode = "function", 
[09:31:42.977]                       envir = ns)) {
[09:31:42.977]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:42.977]                         envir = ns)
[09:31:42.977]                       envir <- sys.frame(frame)
[09:31:42.977]                       master <- NULL
[09:31:42.977]                       while (!identical(envir, .GlobalEnv) && 
[09:31:42.977]                         !identical(envir, emptyenv())) {
[09:31:42.977]                         if (exists("master", mode = "list", envir = envir, 
[09:31:42.977]                           inherits = FALSE)) {
[09:31:42.977]                           master <- get("master", mode = "list", 
[09:31:42.977]                             envir = envir, inherits = FALSE)
[09:31:42.977]                           if (inherits(master, c("SOCKnode", 
[09:31:42.977]                             "SOCK0node"))) {
[09:31:42.977]                             sendCondition <<- function(cond) {
[09:31:42.977]                               data <- list(type = "VALUE", value = cond, 
[09:31:42.977]                                 success = TRUE)
[09:31:42.977]                               parallel_sendData(master, data)
[09:31:42.977]                             }
[09:31:42.977]                             return(sendCondition)
[09:31:42.977]                           }
[09:31:42.977]                         }
[09:31:42.977]                         frame <- frame + 1L
[09:31:42.977]                         envir <- sys.frame(frame)
[09:31:42.977]                       }
[09:31:42.977]                     }
[09:31:42.977]                     sendCondition <<- function(cond) NULL
[09:31:42.977]                   }
[09:31:42.977]                 })
[09:31:42.977]                 withCallingHandlers({
[09:31:42.977]                   {
[09:31:42.977]                     f1$owner
[09:31:42.977]                   }
[09:31:42.977]                 }, immediateCondition = function(cond) {
[09:31:42.977]                   sendCondition <- ...future.makeSendCondition()
[09:31:42.977]                   sendCondition(cond)
[09:31:42.977]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.977]                   {
[09:31:42.977]                     inherits <- base::inherits
[09:31:42.977]                     invokeRestart <- base::invokeRestart
[09:31:42.977]                     is.null <- base::is.null
[09:31:42.977]                     muffled <- FALSE
[09:31:42.977]                     if (inherits(cond, "message")) {
[09:31:42.977]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:42.977]                       if (muffled) 
[09:31:42.977]                         invokeRestart("muffleMessage")
[09:31:42.977]                     }
[09:31:42.977]                     else if (inherits(cond, "warning")) {
[09:31:42.977]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:42.977]                       if (muffled) 
[09:31:42.977]                         invokeRestart("muffleWarning")
[09:31:42.977]                     }
[09:31:42.977]                     else if (inherits(cond, "condition")) {
[09:31:42.977]                       if (!is.null(pattern)) {
[09:31:42.977]                         computeRestarts <- base::computeRestarts
[09:31:42.977]                         grepl <- base::grepl
[09:31:42.977]                         restarts <- computeRestarts(cond)
[09:31:42.977]                         for (restart in restarts) {
[09:31:42.977]                           name <- restart$name
[09:31:42.977]                           if (is.null(name)) 
[09:31:42.977]                             next
[09:31:42.977]                           if (!grepl(pattern, name)) 
[09:31:42.977]                             next
[09:31:42.977]                           invokeRestart(restart)
[09:31:42.977]                           muffled <- TRUE
[09:31:42.977]                           break
[09:31:42.977]                         }
[09:31:42.977]                       }
[09:31:42.977]                     }
[09:31:42.977]                     invisible(muffled)
[09:31:42.977]                   }
[09:31:42.977]                   muffleCondition(cond)
[09:31:42.977]                 })
[09:31:42.977]             }))
[09:31:42.977]             future::FutureResult(value = ...future.value$value, 
[09:31:42.977]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:42.977]                   ...future.rng), globalenv = if (FALSE) 
[09:31:42.977]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:42.977]                     ...future.globalenv.names))
[09:31:42.977]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:42.977]         }, condition = base::local({
[09:31:42.977]             c <- base::c
[09:31:42.977]             inherits <- base::inherits
[09:31:42.977]             invokeRestart <- base::invokeRestart
[09:31:42.977]             length <- base::length
[09:31:42.977]             list <- base::list
[09:31:42.977]             seq.int <- base::seq.int
[09:31:42.977]             signalCondition <- base::signalCondition
[09:31:42.977]             sys.calls <- base::sys.calls
[09:31:42.977]             `[[` <- base::`[[`
[09:31:42.977]             `+` <- base::`+`
[09:31:42.977]             `<<-` <- base::`<<-`
[09:31:42.977]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:42.977]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:42.977]                   3L)]
[09:31:42.977]             }
[09:31:42.977]             function(cond) {
[09:31:42.977]                 is_error <- inherits(cond, "error")
[09:31:42.977]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:42.977]                   NULL)
[09:31:42.977]                 if (is_error) {
[09:31:42.977]                   sessionInformation <- function() {
[09:31:42.977]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:42.977]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:42.977]                       search = base::search(), system = base::Sys.info())
[09:31:42.977]                   }
[09:31:42.977]                   ...future.conditions[[length(...future.conditions) + 
[09:31:42.977]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:42.977]                     cond$call), session = sessionInformation(), 
[09:31:42.977]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:42.977]                   signalCondition(cond)
[09:31:42.977]                 }
[09:31:42.977]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:42.977]                 "immediateCondition"))) {
[09:31:42.977]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:42.977]                   ...future.conditions[[length(...future.conditions) + 
[09:31:42.977]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:42.977]                   if (TRUE && !signal) {
[09:31:42.977]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.977]                     {
[09:31:42.977]                       inherits <- base::inherits
[09:31:42.977]                       invokeRestart <- base::invokeRestart
[09:31:42.977]                       is.null <- base::is.null
[09:31:42.977]                       muffled <- FALSE
[09:31:42.977]                       if (inherits(cond, "message")) {
[09:31:42.977]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:42.977]                         if (muffled) 
[09:31:42.977]                           invokeRestart("muffleMessage")
[09:31:42.977]                       }
[09:31:42.977]                       else if (inherits(cond, "warning")) {
[09:31:42.977]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:42.977]                         if (muffled) 
[09:31:42.977]                           invokeRestart("muffleWarning")
[09:31:42.977]                       }
[09:31:42.977]                       else if (inherits(cond, "condition")) {
[09:31:42.977]                         if (!is.null(pattern)) {
[09:31:42.977]                           computeRestarts <- base::computeRestarts
[09:31:42.977]                           grepl <- base::grepl
[09:31:42.977]                           restarts <- computeRestarts(cond)
[09:31:42.977]                           for (restart in restarts) {
[09:31:42.977]                             name <- restart$name
[09:31:42.977]                             if (is.null(name)) 
[09:31:42.977]                               next
[09:31:42.977]                             if (!grepl(pattern, name)) 
[09:31:42.977]                               next
[09:31:42.977]                             invokeRestart(restart)
[09:31:42.977]                             muffled <- TRUE
[09:31:42.977]                             break
[09:31:42.977]                           }
[09:31:42.977]                         }
[09:31:42.977]                       }
[09:31:42.977]                       invisible(muffled)
[09:31:42.977]                     }
[09:31:42.977]                     muffleCondition(cond, pattern = "^muffle")
[09:31:42.977]                   }
[09:31:42.977]                 }
[09:31:42.977]                 else {
[09:31:42.977]                   if (TRUE) {
[09:31:42.977]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:42.977]                     {
[09:31:42.977]                       inherits <- base::inherits
[09:31:42.977]                       invokeRestart <- base::invokeRestart
[09:31:42.977]                       is.null <- base::is.null
[09:31:42.977]                       muffled <- FALSE
[09:31:42.977]                       if (inherits(cond, "message")) {
[09:31:42.977]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:42.977]                         if (muffled) 
[09:31:42.977]                           invokeRestart("muffleMessage")
[09:31:42.977]                       }
[09:31:42.977]                       else if (inherits(cond, "warning")) {
[09:31:42.977]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:42.977]                         if (muffled) 
[09:31:42.977]                           invokeRestart("muffleWarning")
[09:31:42.977]                       }
[09:31:42.977]                       else if (inherits(cond, "condition")) {
[09:31:42.977]                         if (!is.null(pattern)) {
[09:31:42.977]                           computeRestarts <- base::computeRestarts
[09:31:42.977]                           grepl <- base::grepl
[09:31:42.977]                           restarts <- computeRestarts(cond)
[09:31:42.977]                           for (restart in restarts) {
[09:31:42.977]                             name <- restart$name
[09:31:42.977]                             if (is.null(name)) 
[09:31:42.977]                               next
[09:31:42.977]                             if (!grepl(pattern, name)) 
[09:31:42.977]                               next
[09:31:42.977]                             invokeRestart(restart)
[09:31:42.977]                             muffled <- TRUE
[09:31:42.977]                             break
[09:31:42.977]                           }
[09:31:42.977]                         }
[09:31:42.977]                       }
[09:31:42.977]                       invisible(muffled)
[09:31:42.977]                     }
[09:31:42.977]                     muffleCondition(cond, pattern = "^muffle")
[09:31:42.977]                   }
[09:31:42.977]                 }
[09:31:42.977]             }
[09:31:42.977]         }))
[09:31:42.977]     }, error = function(ex) {
[09:31:42.977]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:42.977]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:42.977]                 ...future.rng), started = ...future.startTime, 
[09:31:42.977]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:42.977]             version = "1.8"), class = "FutureResult")
[09:31:42.977]     }, finally = {
[09:31:42.977]         if (!identical(...future.workdir, getwd())) 
[09:31:42.977]             setwd(...future.workdir)
[09:31:42.977]         {
[09:31:42.977]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:42.977]                 ...future.oldOptions$nwarnings <- NULL
[09:31:42.977]             }
[09:31:42.977]             base::options(...future.oldOptions)
[09:31:42.977]             if (.Platform$OS.type == "windows") {
[09:31:42.977]                 old_names <- names(...future.oldEnvVars)
[09:31:42.977]                 envs <- base::Sys.getenv()
[09:31:42.977]                 names <- names(envs)
[09:31:42.977]                 common <- intersect(names, old_names)
[09:31:42.977]                 added <- setdiff(names, old_names)
[09:31:42.977]                 removed <- setdiff(old_names, names)
[09:31:42.977]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:42.977]                   envs[common]]
[09:31:42.977]                 NAMES <- toupper(changed)
[09:31:42.977]                 args <- list()
[09:31:42.977]                 for (kk in seq_along(NAMES)) {
[09:31:42.977]                   name <- changed[[kk]]
[09:31:42.977]                   NAME <- NAMES[[kk]]
[09:31:42.977]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.977]                     next
[09:31:42.977]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:42.977]                 }
[09:31:42.977]                 NAMES <- toupper(added)
[09:31:42.977]                 for (kk in seq_along(NAMES)) {
[09:31:42.977]                   name <- added[[kk]]
[09:31:42.977]                   NAME <- NAMES[[kk]]
[09:31:42.977]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.977]                     next
[09:31:42.977]                   args[[name]] <- ""
[09:31:42.977]                 }
[09:31:42.977]                 NAMES <- toupper(removed)
[09:31:42.977]                 for (kk in seq_along(NAMES)) {
[09:31:42.977]                   name <- removed[[kk]]
[09:31:42.977]                   NAME <- NAMES[[kk]]
[09:31:42.977]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:42.977]                     next
[09:31:42.977]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:42.977]                 }
[09:31:42.977]                 if (length(args) > 0) 
[09:31:42.977]                   base::do.call(base::Sys.setenv, args = args)
[09:31:42.977]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:42.977]             }
[09:31:42.977]             else {
[09:31:42.977]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:42.977]             }
[09:31:42.977]             {
[09:31:42.977]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:42.977]                   0L) {
[09:31:42.977]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:42.977]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:42.977]                   base::options(opts)
[09:31:42.977]                 }
[09:31:42.977]                 {
[09:31:42.977]                   {
[09:31:42.977]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:42.977]                     NULL
[09:31:42.977]                   }
[09:31:42.977]                   options(future.plan = NULL)
[09:31:42.977]                   if (is.na(NA_character_)) 
[09:31:42.977]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:42.977]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:42.977]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:42.977]                     .init = FALSE)
[09:31:42.977]                 }
[09:31:42.977]             }
[09:31:42.977]         }
[09:31:42.977]     })
[09:31:42.977]     if (TRUE) {
[09:31:42.977]         base::sink(type = "output", split = FALSE)
[09:31:42.977]         if (TRUE) {
[09:31:42.977]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:42.977]         }
[09:31:42.977]         else {
[09:31:42.977]             ...future.result["stdout"] <- base::list(NULL)
[09:31:42.977]         }
[09:31:42.977]         base::close(...future.stdout)
[09:31:42.977]         ...future.stdout <- NULL
[09:31:42.977]     }
[09:31:42.977]     ...future.result$conditions <- ...future.conditions
[09:31:42.977]     ...future.result$finished <- base::Sys.time()
[09:31:42.977]     ...future.result
[09:31:42.977] }
[09:31:42.979] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[09:31:42.981] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[09:31:43.032] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[09:31:43.032] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[09:31:43.033] MultisessionFuture started
[09:31:43.033] - Launch lazy future ... done
[09:31:43.033] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[09:31:43.033] result() for ClusterFuture ...
[09:31:43.033] receiveMessageFromWorker() for ClusterFuture ...
[09:31:43.033] - Validating connection of MultisessionFuture
[09:31:43.077] - received message: FutureResult
[09:31:43.078] - Received FutureResult
[09:31:43.078] - Erased future from FutureRegistry
[09:31:43.078] result() for ClusterFuture ...
[09:31:43.078] - result already collected: FutureResult
[09:31:43.078] result() for ClusterFuture ... done
[09:31:43.078] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:43.078] result() for ClusterFuture ... done
[09:31:43.078] result() for ClusterFuture ...
[09:31:43.078] - result already collected: FutureResult
[09:31:43.079] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: a0403ee1-376b-4f68-5d85-a423f35d110f
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[09:31:43.079] getGlobalsAndPackages() ...
[09:31:43.079] Searching for globals...
[09:31:43.080] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[09:31:43.081] Searching for globals ... DONE
[09:31:43.081] Resolving globals: FALSE
[09:31:43.083] The total size of the 1 globals is 1.57 MiB (1643920 bytes)
[09:31:43.083] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.57 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.57 MiB of class ‘environment’)
[09:31:43.083] - globals: [1] ‘f1’
[09:31:43.083] 
[09:31:43.083] getGlobalsAndPackages() ... DONE
[09:31:43.084] run() for ‘Future’ ...
[09:31:43.084] - state: ‘created’
[09:31:43.084] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:43.094] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:43.094] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:43.094]   - Field: ‘node’
[09:31:43.094]   - Field: ‘label’
[09:31:43.094]   - Field: ‘local’
[09:31:43.095]   - Field: ‘owner’
[09:31:43.095]   - Field: ‘envir’
[09:31:43.095]   - Field: ‘workers’
[09:31:43.095]   - Field: ‘packages’
[09:31:43.095]   - Field: ‘gc’
[09:31:43.095]   - Field: ‘conditions’
[09:31:43.095]   - Field: ‘persistent’
[09:31:43.095]   - Field: ‘expr’
[09:31:43.095]   - Field: ‘uuid’
[09:31:43.095]   - Field: ‘seed’
[09:31:43.095]   - Field: ‘version’
[09:31:43.096]   - Field: ‘result’
[09:31:43.096]   - Field: ‘asynchronous’
[09:31:43.096]   - Field: ‘calls’
[09:31:43.096]   - Field: ‘globals’
[09:31:43.096]   - Field: ‘stdout’
[09:31:43.096]   - Field: ‘earlySignal’
[09:31:43.096]   - Field: ‘lazy’
[09:31:43.096]   - Field: ‘state’
[09:31:43.096] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:43.096] - Launch lazy future ...
[09:31:43.097] Packages needed by the future expression (n = 0): <none>
[09:31:43.097] Packages needed by future strategies (n = 0): <none>
[09:31:43.097] {
[09:31:43.097]     {
[09:31:43.097]         {
[09:31:43.097]             ...future.startTime <- base::Sys.time()
[09:31:43.097]             {
[09:31:43.097]                 {
[09:31:43.097]                   {
[09:31:43.097]                     {
[09:31:43.097]                       base::local({
[09:31:43.097]                         has_future <- base::requireNamespace("future", 
[09:31:43.097]                           quietly = TRUE)
[09:31:43.097]                         if (has_future) {
[09:31:43.097]                           ns <- base::getNamespace("future")
[09:31:43.097]                           version <- ns[[".package"]][["version"]]
[09:31:43.097]                           if (is.null(version)) 
[09:31:43.097]                             version <- utils::packageVersion("future")
[09:31:43.097]                         }
[09:31:43.097]                         else {
[09:31:43.097]                           version <- NULL
[09:31:43.097]                         }
[09:31:43.097]                         if (!has_future || version < "1.8.0") {
[09:31:43.097]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:43.097]                             "", base::R.version$version.string), 
[09:31:43.097]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:43.097]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:43.097]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:43.097]                               "release", "version")], collapse = " "), 
[09:31:43.097]                             hostname = base::Sys.info()[["nodename"]])
[09:31:43.097]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:43.097]                             info)
[09:31:43.097]                           info <- base::paste(info, collapse = "; ")
[09:31:43.097]                           if (!has_future) {
[09:31:43.097]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:43.097]                               info)
[09:31:43.097]                           }
[09:31:43.097]                           else {
[09:31:43.097]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:43.097]                               info, version)
[09:31:43.097]                           }
[09:31:43.097]                           base::stop(msg)
[09:31:43.097]                         }
[09:31:43.097]                       })
[09:31:43.097]                     }
[09:31:43.097]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:43.097]                     base::options(mc.cores = 1L)
[09:31:43.097]                   }
[09:31:43.097]                   ...future.strategy.old <- future::plan("list")
[09:31:43.097]                   options(future.plan = NULL)
[09:31:43.097]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:43.097]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:43.097]                 }
[09:31:43.097]                 ...future.workdir <- getwd()
[09:31:43.097]             }
[09:31:43.097]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:43.097]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:43.097]         }
[09:31:43.097]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:43.097]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:43.097]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:43.097]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:43.097]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:43.097]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:43.097]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:43.097]             base::names(...future.oldOptions))
[09:31:43.097]     }
[09:31:43.097]     if (FALSE) {
[09:31:43.097]     }
[09:31:43.097]     else {
[09:31:43.097]         if (TRUE) {
[09:31:43.097]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:43.097]                 open = "w")
[09:31:43.097]         }
[09:31:43.097]         else {
[09:31:43.097]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:43.097]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:43.097]         }
[09:31:43.097]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:43.097]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:43.097]             base::sink(type = "output", split = FALSE)
[09:31:43.097]             base::close(...future.stdout)
[09:31:43.097]         }, add = TRUE)
[09:31:43.097]     }
[09:31:43.097]     ...future.frame <- base::sys.nframe()
[09:31:43.097]     ...future.conditions <- base::list()
[09:31:43.097]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:43.097]     if (FALSE) {
[09:31:43.097]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:43.097]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:43.097]     }
[09:31:43.097]     ...future.result <- base::tryCatch({
[09:31:43.097]         base::withCallingHandlers({
[09:31:43.097]             ...future.value <- base::withVisible(base::local({
[09:31:43.097]                 ...future.makeSendCondition <- base::local({
[09:31:43.097]                   sendCondition <- NULL
[09:31:43.097]                   function(frame = 1L) {
[09:31:43.097]                     if (is.function(sendCondition)) 
[09:31:43.097]                       return(sendCondition)
[09:31:43.097]                     ns <- getNamespace("parallel")
[09:31:43.097]                     if (exists("sendData", mode = "function", 
[09:31:43.097]                       envir = ns)) {
[09:31:43.097]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:43.097]                         envir = ns)
[09:31:43.097]                       envir <- sys.frame(frame)
[09:31:43.097]                       master <- NULL
[09:31:43.097]                       while (!identical(envir, .GlobalEnv) && 
[09:31:43.097]                         !identical(envir, emptyenv())) {
[09:31:43.097]                         if (exists("master", mode = "list", envir = envir, 
[09:31:43.097]                           inherits = FALSE)) {
[09:31:43.097]                           master <- get("master", mode = "list", 
[09:31:43.097]                             envir = envir, inherits = FALSE)
[09:31:43.097]                           if (inherits(master, c("SOCKnode", 
[09:31:43.097]                             "SOCK0node"))) {
[09:31:43.097]                             sendCondition <<- function(cond) {
[09:31:43.097]                               data <- list(type = "VALUE", value = cond, 
[09:31:43.097]                                 success = TRUE)
[09:31:43.097]                               parallel_sendData(master, data)
[09:31:43.097]                             }
[09:31:43.097]                             return(sendCondition)
[09:31:43.097]                           }
[09:31:43.097]                         }
[09:31:43.097]                         frame <- frame + 1L
[09:31:43.097]                         envir <- sys.frame(frame)
[09:31:43.097]                       }
[09:31:43.097]                     }
[09:31:43.097]                     sendCondition <<- function(cond) NULL
[09:31:43.097]                   }
[09:31:43.097]                 })
[09:31:43.097]                 withCallingHandlers({
[09:31:43.097]                   {
[09:31:43.097]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[09:31:43.097]                     "not-owner"
[09:31:43.097]                   }
[09:31:43.097]                 }, immediateCondition = function(cond) {
[09:31:43.097]                   sendCondition <- ...future.makeSendCondition()
[09:31:43.097]                   sendCondition(cond)
[09:31:43.097]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:43.097]                   {
[09:31:43.097]                     inherits <- base::inherits
[09:31:43.097]                     invokeRestart <- base::invokeRestart
[09:31:43.097]                     is.null <- base::is.null
[09:31:43.097]                     muffled <- FALSE
[09:31:43.097]                     if (inherits(cond, "message")) {
[09:31:43.097]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:43.097]                       if (muffled) 
[09:31:43.097]                         invokeRestart("muffleMessage")
[09:31:43.097]                     }
[09:31:43.097]                     else if (inherits(cond, "warning")) {
[09:31:43.097]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:43.097]                       if (muffled) 
[09:31:43.097]                         invokeRestart("muffleWarning")
[09:31:43.097]                     }
[09:31:43.097]                     else if (inherits(cond, "condition")) {
[09:31:43.097]                       if (!is.null(pattern)) {
[09:31:43.097]                         computeRestarts <- base::computeRestarts
[09:31:43.097]                         grepl <- base::grepl
[09:31:43.097]                         restarts <- computeRestarts(cond)
[09:31:43.097]                         for (restart in restarts) {
[09:31:43.097]                           name <- restart$name
[09:31:43.097]                           if (is.null(name)) 
[09:31:43.097]                             next
[09:31:43.097]                           if (!grepl(pattern, name)) 
[09:31:43.097]                             next
[09:31:43.097]                           invokeRestart(restart)
[09:31:43.097]                           muffled <- TRUE
[09:31:43.097]                           break
[09:31:43.097]                         }
[09:31:43.097]                       }
[09:31:43.097]                     }
[09:31:43.097]                     invisible(muffled)
[09:31:43.097]                   }
[09:31:43.097]                   muffleCondition(cond)
[09:31:43.097]                 })
[09:31:43.097]             }))
[09:31:43.097]             future::FutureResult(value = ...future.value$value, 
[09:31:43.097]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:43.097]                   ...future.rng), globalenv = if (FALSE) 
[09:31:43.097]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:43.097]                     ...future.globalenv.names))
[09:31:43.097]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:43.097]         }, condition = base::local({
[09:31:43.097]             c <- base::c
[09:31:43.097]             inherits <- base::inherits
[09:31:43.097]             invokeRestart <- base::invokeRestart
[09:31:43.097]             length <- base::length
[09:31:43.097]             list <- base::list
[09:31:43.097]             seq.int <- base::seq.int
[09:31:43.097]             signalCondition <- base::signalCondition
[09:31:43.097]             sys.calls <- base::sys.calls
[09:31:43.097]             `[[` <- base::`[[`
[09:31:43.097]             `+` <- base::`+`
[09:31:43.097]             `<<-` <- base::`<<-`
[09:31:43.097]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:43.097]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:43.097]                   3L)]
[09:31:43.097]             }
[09:31:43.097]             function(cond) {
[09:31:43.097]                 is_error <- inherits(cond, "error")
[09:31:43.097]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:43.097]                   NULL)
[09:31:43.097]                 if (is_error) {
[09:31:43.097]                   sessionInformation <- function() {
[09:31:43.097]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:43.097]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:43.097]                       search = base::search(), system = base::Sys.info())
[09:31:43.097]                   }
[09:31:43.097]                   ...future.conditions[[length(...future.conditions) + 
[09:31:43.097]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:43.097]                     cond$call), session = sessionInformation(), 
[09:31:43.097]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:43.097]                   signalCondition(cond)
[09:31:43.097]                 }
[09:31:43.097]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:43.097]                 "immediateCondition"))) {
[09:31:43.097]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:43.097]                   ...future.conditions[[length(...future.conditions) + 
[09:31:43.097]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:43.097]                   if (TRUE && !signal) {
[09:31:43.097]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:43.097]                     {
[09:31:43.097]                       inherits <- base::inherits
[09:31:43.097]                       invokeRestart <- base::invokeRestart
[09:31:43.097]                       is.null <- base::is.null
[09:31:43.097]                       muffled <- FALSE
[09:31:43.097]                       if (inherits(cond, "message")) {
[09:31:43.097]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:43.097]                         if (muffled) 
[09:31:43.097]                           invokeRestart("muffleMessage")
[09:31:43.097]                       }
[09:31:43.097]                       else if (inherits(cond, "warning")) {
[09:31:43.097]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:43.097]                         if (muffled) 
[09:31:43.097]                           invokeRestart("muffleWarning")
[09:31:43.097]                       }
[09:31:43.097]                       else if (inherits(cond, "condition")) {
[09:31:43.097]                         if (!is.null(pattern)) {
[09:31:43.097]                           computeRestarts <- base::computeRestarts
[09:31:43.097]                           grepl <- base::grepl
[09:31:43.097]                           restarts <- computeRestarts(cond)
[09:31:43.097]                           for (restart in restarts) {
[09:31:43.097]                             name <- restart$name
[09:31:43.097]                             if (is.null(name)) 
[09:31:43.097]                               next
[09:31:43.097]                             if (!grepl(pattern, name)) 
[09:31:43.097]                               next
[09:31:43.097]                             invokeRestart(restart)
[09:31:43.097]                             muffled <- TRUE
[09:31:43.097]                             break
[09:31:43.097]                           }
[09:31:43.097]                         }
[09:31:43.097]                       }
[09:31:43.097]                       invisible(muffled)
[09:31:43.097]                     }
[09:31:43.097]                     muffleCondition(cond, pattern = "^muffle")
[09:31:43.097]                   }
[09:31:43.097]                 }
[09:31:43.097]                 else {
[09:31:43.097]                   if (TRUE) {
[09:31:43.097]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:43.097]                     {
[09:31:43.097]                       inherits <- base::inherits
[09:31:43.097]                       invokeRestart <- base::invokeRestart
[09:31:43.097]                       is.null <- base::is.null
[09:31:43.097]                       muffled <- FALSE
[09:31:43.097]                       if (inherits(cond, "message")) {
[09:31:43.097]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:43.097]                         if (muffled) 
[09:31:43.097]                           invokeRestart("muffleMessage")
[09:31:43.097]                       }
[09:31:43.097]                       else if (inherits(cond, "warning")) {
[09:31:43.097]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:43.097]                         if (muffled) 
[09:31:43.097]                           invokeRestart("muffleWarning")
[09:31:43.097]                       }
[09:31:43.097]                       else if (inherits(cond, "condition")) {
[09:31:43.097]                         if (!is.null(pattern)) {
[09:31:43.097]                           computeRestarts <- base::computeRestarts
[09:31:43.097]                           grepl <- base::grepl
[09:31:43.097]                           restarts <- computeRestarts(cond)
[09:31:43.097]                           for (restart in restarts) {
[09:31:43.097]                             name <- restart$name
[09:31:43.097]                             if (is.null(name)) 
[09:31:43.097]                               next
[09:31:43.097]                             if (!grepl(pattern, name)) 
[09:31:43.097]                               next
[09:31:43.097]                             invokeRestart(restart)
[09:31:43.097]                             muffled <- TRUE
[09:31:43.097]                             break
[09:31:43.097]                           }
[09:31:43.097]                         }
[09:31:43.097]                       }
[09:31:43.097]                       invisible(muffled)
[09:31:43.097]                     }
[09:31:43.097]                     muffleCondition(cond, pattern = "^muffle")
[09:31:43.097]                   }
[09:31:43.097]                 }
[09:31:43.097]             }
[09:31:43.097]         }))
[09:31:43.097]     }, error = function(ex) {
[09:31:43.097]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:43.097]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:43.097]                 ...future.rng), started = ...future.startTime, 
[09:31:43.097]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:43.097]             version = "1.8"), class = "FutureResult")
[09:31:43.097]     }, finally = {
[09:31:43.097]         if (!identical(...future.workdir, getwd())) 
[09:31:43.097]             setwd(...future.workdir)
[09:31:43.097]         {
[09:31:43.097]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:43.097]                 ...future.oldOptions$nwarnings <- NULL
[09:31:43.097]             }
[09:31:43.097]             base::options(...future.oldOptions)
[09:31:43.097]             if (.Platform$OS.type == "windows") {
[09:31:43.097]                 old_names <- names(...future.oldEnvVars)
[09:31:43.097]                 envs <- base::Sys.getenv()
[09:31:43.097]                 names <- names(envs)
[09:31:43.097]                 common <- intersect(names, old_names)
[09:31:43.097]                 added <- setdiff(names, old_names)
[09:31:43.097]                 removed <- setdiff(old_names, names)
[09:31:43.097]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:43.097]                   envs[common]]
[09:31:43.097]                 NAMES <- toupper(changed)
[09:31:43.097]                 args <- list()
[09:31:43.097]                 for (kk in seq_along(NAMES)) {
[09:31:43.097]                   name <- changed[[kk]]
[09:31:43.097]                   NAME <- NAMES[[kk]]
[09:31:43.097]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:43.097]                     next
[09:31:43.097]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:43.097]                 }
[09:31:43.097]                 NAMES <- toupper(added)
[09:31:43.097]                 for (kk in seq_along(NAMES)) {
[09:31:43.097]                   name <- added[[kk]]
[09:31:43.097]                   NAME <- NAMES[[kk]]
[09:31:43.097]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:43.097]                     next
[09:31:43.097]                   args[[name]] <- ""
[09:31:43.097]                 }
[09:31:43.097]                 NAMES <- toupper(removed)
[09:31:43.097]                 for (kk in seq_along(NAMES)) {
[09:31:43.097]                   name <- removed[[kk]]
[09:31:43.097]                   NAME <- NAMES[[kk]]
[09:31:43.097]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:43.097]                     next
[09:31:43.097]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:43.097]                 }
[09:31:43.097]                 if (length(args) > 0) 
[09:31:43.097]                   base::do.call(base::Sys.setenv, args = args)
[09:31:43.097]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:43.097]             }
[09:31:43.097]             else {
[09:31:43.097]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:43.097]             }
[09:31:43.097]             {
[09:31:43.097]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:43.097]                   0L) {
[09:31:43.097]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:43.097]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:43.097]                   base::options(opts)
[09:31:43.097]                 }
[09:31:43.097]                 {
[09:31:43.097]                   {
[09:31:43.097]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:43.097]                     NULL
[09:31:43.097]                   }
[09:31:43.097]                   options(future.plan = NULL)
[09:31:43.097]                   if (is.na(NA_character_)) 
[09:31:43.097]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:43.097]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:43.097]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:43.097]                     .init = FALSE)
[09:31:43.097]                 }
[09:31:43.097]             }
[09:31:43.097]         }
[09:31:43.097]     })
[09:31:43.097]     if (TRUE) {
[09:31:43.097]         base::sink(type = "output", split = FALSE)
[09:31:43.097]         if (TRUE) {
[09:31:43.097]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:43.097]         }
[09:31:43.097]         else {
[09:31:43.097]             ...future.result["stdout"] <- base::list(NULL)
[09:31:43.097]         }
[09:31:43.097]         base::close(...future.stdout)
[09:31:43.097]         ...future.stdout <- NULL
[09:31:43.097]     }
[09:31:43.097]     ...future.result$conditions <- ...future.conditions
[09:31:43.097]     ...future.result$finished <- base::Sys.time()
[09:31:43.097]     ...future.result
[09:31:43.097] }
[09:31:43.100] Exporting 1 global objects (1.57 MiB) to cluster node #1 ...
[09:31:43.101] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ...
[09:31:43.156] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ... DONE
[09:31:43.156] Exporting 1 global objects (1.57 MiB) to cluster node #1 ... DONE
[09:31:43.157] MultisessionFuture started
[09:31:43.157] - Launch lazy future ... done
[09:31:43.157] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[09:31:43.157] result() for ClusterFuture ...
[09:31:43.157] receiveMessageFromWorker() for ClusterFuture ...
[09:31:43.157] - Validating connection of MultisessionFuture
[09:31:43.201] - received message: FutureResult
[09:31:43.202] - Received FutureResult
[09:31:43.202] - Erased future from FutureRegistry
[09:31:43.202] result() for ClusterFuture ...
[09:31:43.202] - result already collected: FutureResult
[09:31:43.202] result() for ClusterFuture ... done
[09:31:43.202] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:43.202] result() for ClusterFuture ... done
[09:31:43.202] result() for ClusterFuture ...
[09:31:43.202] - result already collected: FutureResult
[09:31:43.202] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[09:31:43.203] getGlobalsAndPackages() ...
[09:31:43.203] Searching for globals...
[09:31:43.203] - globals found: [1] ‘{’
[09:31:43.204] Searching for globals ... DONE
[09:31:43.204] Resolving globals: FALSE
[09:31:43.204] 
[09:31:43.204] 
[09:31:43.204] getGlobalsAndPackages() ... DONE
[09:31:43.204] run() for ‘Future’ ...
[09:31:43.204] - state: ‘created’
[09:31:43.205] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:43.215] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:43.215] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:43.215]   - Field: ‘node’
[09:31:43.215]   - Field: ‘label’
[09:31:43.215]   - Field: ‘local’
[09:31:43.216]   - Field: ‘owner’
[09:31:43.216]   - Field: ‘envir’
[09:31:43.216]   - Field: ‘workers’
[09:31:43.216]   - Field: ‘packages’
[09:31:43.216]   - Field: ‘gc’
[09:31:43.216]   - Field: ‘conditions’
[09:31:43.216]   - Field: ‘persistent’
[09:31:43.216]   - Field: ‘expr’
[09:31:43.216]   - Field: ‘uuid’
[09:31:43.216]   - Field: ‘seed’
[09:31:43.216]   - Field: ‘version’
[09:31:43.217]   - Field: ‘result’
[09:31:43.217]   - Field: ‘asynchronous’
[09:31:43.217]   - Field: ‘calls’
[09:31:43.217]   - Field: ‘globals’
[09:31:43.217]   - Field: ‘stdout’
[09:31:43.217]   - Field: ‘earlySignal’
[09:31:43.217]   - Field: ‘lazy’
[09:31:43.217]   - Field: ‘state’
[09:31:43.217] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:43.217] - Launch lazy future ...
[09:31:43.218] Packages needed by the future expression (n = 0): <none>
[09:31:43.218] Packages needed by future strategies (n = 0): <none>
[09:31:43.218] {
[09:31:43.218]     {
[09:31:43.218]         {
[09:31:43.218]             ...future.startTime <- base::Sys.time()
[09:31:43.218]             {
[09:31:43.218]                 {
[09:31:43.218]                   {
[09:31:43.218]                     {
[09:31:43.218]                       base::local({
[09:31:43.218]                         has_future <- base::requireNamespace("future", 
[09:31:43.218]                           quietly = TRUE)
[09:31:43.218]                         if (has_future) {
[09:31:43.218]                           ns <- base::getNamespace("future")
[09:31:43.218]                           version <- ns[[".package"]][["version"]]
[09:31:43.218]                           if (is.null(version)) 
[09:31:43.218]                             version <- utils::packageVersion("future")
[09:31:43.218]                         }
[09:31:43.218]                         else {
[09:31:43.218]                           version <- NULL
[09:31:43.218]                         }
[09:31:43.218]                         if (!has_future || version < "1.8.0") {
[09:31:43.218]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:43.218]                             "", base::R.version$version.string), 
[09:31:43.218]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:43.218]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:43.218]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:43.218]                               "release", "version")], collapse = " "), 
[09:31:43.218]                             hostname = base::Sys.info()[["nodename"]])
[09:31:43.218]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:43.218]                             info)
[09:31:43.218]                           info <- base::paste(info, collapse = "; ")
[09:31:43.218]                           if (!has_future) {
[09:31:43.218]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:43.218]                               info)
[09:31:43.218]                           }
[09:31:43.218]                           else {
[09:31:43.218]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:43.218]                               info, version)
[09:31:43.218]                           }
[09:31:43.218]                           base::stop(msg)
[09:31:43.218]                         }
[09:31:43.218]                       })
[09:31:43.218]                     }
[09:31:43.218]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:43.218]                     base::options(mc.cores = 1L)
[09:31:43.218]                   }
[09:31:43.218]                   ...future.strategy.old <- future::plan("list")
[09:31:43.218]                   options(future.plan = NULL)
[09:31:43.218]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:43.218]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:43.218]                 }
[09:31:43.218]                 ...future.workdir <- getwd()
[09:31:43.218]             }
[09:31:43.218]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:43.218]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:43.218]         }
[09:31:43.218]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:43.218]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:43.218]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:43.218]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:43.218]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:43.218]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:43.218]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:43.218]             base::names(...future.oldOptions))
[09:31:43.218]     }
[09:31:43.218]     if (FALSE) {
[09:31:43.218]     }
[09:31:43.218]     else {
[09:31:43.218]         if (TRUE) {
[09:31:43.218]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:43.218]                 open = "w")
[09:31:43.218]         }
[09:31:43.218]         else {
[09:31:43.218]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:43.218]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:43.218]         }
[09:31:43.218]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:43.218]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:43.218]             base::sink(type = "output", split = FALSE)
[09:31:43.218]             base::close(...future.stdout)
[09:31:43.218]         }, add = TRUE)
[09:31:43.218]     }
[09:31:43.218]     ...future.frame <- base::sys.nframe()
[09:31:43.218]     ...future.conditions <- base::list()
[09:31:43.218]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:43.218]     if (FALSE) {
[09:31:43.218]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:43.218]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:43.218]     }
[09:31:43.218]     ...future.result <- base::tryCatch({
[09:31:43.218]         base::withCallingHandlers({
[09:31:43.218]             ...future.value <- base::withVisible(base::local({
[09:31:43.218]                 ...future.makeSendCondition <- base::local({
[09:31:43.218]                   sendCondition <- NULL
[09:31:43.218]                   function(frame = 1L) {
[09:31:43.218]                     if (is.function(sendCondition)) 
[09:31:43.218]                       return(sendCondition)
[09:31:43.218]                     ns <- getNamespace("parallel")
[09:31:43.218]                     if (exists("sendData", mode = "function", 
[09:31:43.218]                       envir = ns)) {
[09:31:43.218]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:43.218]                         envir = ns)
[09:31:43.218]                       envir <- sys.frame(frame)
[09:31:43.218]                       master <- NULL
[09:31:43.218]                       while (!identical(envir, .GlobalEnv) && 
[09:31:43.218]                         !identical(envir, emptyenv())) {
[09:31:43.218]                         if (exists("master", mode = "list", envir = envir, 
[09:31:43.218]                           inherits = FALSE)) {
[09:31:43.218]                           master <- get("master", mode = "list", 
[09:31:43.218]                             envir = envir, inherits = FALSE)
[09:31:43.218]                           if (inherits(master, c("SOCKnode", 
[09:31:43.218]                             "SOCK0node"))) {
[09:31:43.218]                             sendCondition <<- function(cond) {
[09:31:43.218]                               data <- list(type = "VALUE", value = cond, 
[09:31:43.218]                                 success = TRUE)
[09:31:43.218]                               parallel_sendData(master, data)
[09:31:43.218]                             }
[09:31:43.218]                             return(sendCondition)
[09:31:43.218]                           }
[09:31:43.218]                         }
[09:31:43.218]                         frame <- frame + 1L
[09:31:43.218]                         envir <- sys.frame(frame)
[09:31:43.218]                       }
[09:31:43.218]                     }
[09:31:43.218]                     sendCondition <<- function(cond) NULL
[09:31:43.218]                   }
[09:31:43.218]                 })
[09:31:43.218]                 withCallingHandlers({
[09:31:43.218]                   {
[09:31:43.218]                     42L
[09:31:43.218]                   }
[09:31:43.218]                 }, immediateCondition = function(cond) {
[09:31:43.218]                   sendCondition <- ...future.makeSendCondition()
[09:31:43.218]                   sendCondition(cond)
[09:31:43.218]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:43.218]                   {
[09:31:43.218]                     inherits <- base::inherits
[09:31:43.218]                     invokeRestart <- base::invokeRestart
[09:31:43.218]                     is.null <- base::is.null
[09:31:43.218]                     muffled <- FALSE
[09:31:43.218]                     if (inherits(cond, "message")) {
[09:31:43.218]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:43.218]                       if (muffled) 
[09:31:43.218]                         invokeRestart("muffleMessage")
[09:31:43.218]                     }
[09:31:43.218]                     else if (inherits(cond, "warning")) {
[09:31:43.218]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:43.218]                       if (muffled) 
[09:31:43.218]                         invokeRestart("muffleWarning")
[09:31:43.218]                     }
[09:31:43.218]                     else if (inherits(cond, "condition")) {
[09:31:43.218]                       if (!is.null(pattern)) {
[09:31:43.218]                         computeRestarts <- base::computeRestarts
[09:31:43.218]                         grepl <- base::grepl
[09:31:43.218]                         restarts <- computeRestarts(cond)
[09:31:43.218]                         for (restart in restarts) {
[09:31:43.218]                           name <- restart$name
[09:31:43.218]                           if (is.null(name)) 
[09:31:43.218]                             next
[09:31:43.218]                           if (!grepl(pattern, name)) 
[09:31:43.218]                             next
[09:31:43.218]                           invokeRestart(restart)
[09:31:43.218]                           muffled <- TRUE
[09:31:43.218]                           break
[09:31:43.218]                         }
[09:31:43.218]                       }
[09:31:43.218]                     }
[09:31:43.218]                     invisible(muffled)
[09:31:43.218]                   }
[09:31:43.218]                   muffleCondition(cond)
[09:31:43.218]                 })
[09:31:43.218]             }))
[09:31:43.218]             future::FutureResult(value = ...future.value$value, 
[09:31:43.218]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:43.218]                   ...future.rng), globalenv = if (FALSE) 
[09:31:43.218]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:43.218]                     ...future.globalenv.names))
[09:31:43.218]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:43.218]         }, condition = base::local({
[09:31:43.218]             c <- base::c
[09:31:43.218]             inherits <- base::inherits
[09:31:43.218]             invokeRestart <- base::invokeRestart
[09:31:43.218]             length <- base::length
[09:31:43.218]             list <- base::list
[09:31:43.218]             seq.int <- base::seq.int
[09:31:43.218]             signalCondition <- base::signalCondition
[09:31:43.218]             sys.calls <- base::sys.calls
[09:31:43.218]             `[[` <- base::`[[`
[09:31:43.218]             `+` <- base::`+`
[09:31:43.218]             `<<-` <- base::`<<-`
[09:31:43.218]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:43.218]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:43.218]                   3L)]
[09:31:43.218]             }
[09:31:43.218]             function(cond) {
[09:31:43.218]                 is_error <- inherits(cond, "error")
[09:31:43.218]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:43.218]                   NULL)
[09:31:43.218]                 if (is_error) {
[09:31:43.218]                   sessionInformation <- function() {
[09:31:43.218]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:43.218]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:43.218]                       search = base::search(), system = base::Sys.info())
[09:31:43.218]                   }
[09:31:43.218]                   ...future.conditions[[length(...future.conditions) + 
[09:31:43.218]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:43.218]                     cond$call), session = sessionInformation(), 
[09:31:43.218]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:43.218]                   signalCondition(cond)
[09:31:43.218]                 }
[09:31:43.218]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:43.218]                 "immediateCondition"))) {
[09:31:43.218]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:43.218]                   ...future.conditions[[length(...future.conditions) + 
[09:31:43.218]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:43.218]                   if (TRUE && !signal) {
[09:31:43.218]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:43.218]                     {
[09:31:43.218]                       inherits <- base::inherits
[09:31:43.218]                       invokeRestart <- base::invokeRestart
[09:31:43.218]                       is.null <- base::is.null
[09:31:43.218]                       muffled <- FALSE
[09:31:43.218]                       if (inherits(cond, "message")) {
[09:31:43.218]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:43.218]                         if (muffled) 
[09:31:43.218]                           invokeRestart("muffleMessage")
[09:31:43.218]                       }
[09:31:43.218]                       else if (inherits(cond, "warning")) {
[09:31:43.218]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:43.218]                         if (muffled) 
[09:31:43.218]                           invokeRestart("muffleWarning")
[09:31:43.218]                       }
[09:31:43.218]                       else if (inherits(cond, "condition")) {
[09:31:43.218]                         if (!is.null(pattern)) {
[09:31:43.218]                           computeRestarts <- base::computeRestarts
[09:31:43.218]                           grepl <- base::grepl
[09:31:43.218]                           restarts <- computeRestarts(cond)
[09:31:43.218]                           for (restart in restarts) {
[09:31:43.218]                             name <- restart$name
[09:31:43.218]                             if (is.null(name)) 
[09:31:43.218]                               next
[09:31:43.218]                             if (!grepl(pattern, name)) 
[09:31:43.218]                               next
[09:31:43.218]                             invokeRestart(restart)
[09:31:43.218]                             muffled <- TRUE
[09:31:43.218]                             break
[09:31:43.218]                           }
[09:31:43.218]                         }
[09:31:43.218]                       }
[09:31:43.218]                       invisible(muffled)
[09:31:43.218]                     }
[09:31:43.218]                     muffleCondition(cond, pattern = "^muffle")
[09:31:43.218]                   }
[09:31:43.218]                 }
[09:31:43.218]                 else {
[09:31:43.218]                   if (TRUE) {
[09:31:43.218]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:43.218]                     {
[09:31:43.218]                       inherits <- base::inherits
[09:31:43.218]                       invokeRestart <- base::invokeRestart
[09:31:43.218]                       is.null <- base::is.null
[09:31:43.218]                       muffled <- FALSE
[09:31:43.218]                       if (inherits(cond, "message")) {
[09:31:43.218]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:43.218]                         if (muffled) 
[09:31:43.218]                           invokeRestart("muffleMessage")
[09:31:43.218]                       }
[09:31:43.218]                       else if (inherits(cond, "warning")) {
[09:31:43.218]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:43.218]                         if (muffled) 
[09:31:43.218]                           invokeRestart("muffleWarning")
[09:31:43.218]                       }
[09:31:43.218]                       else if (inherits(cond, "condition")) {
[09:31:43.218]                         if (!is.null(pattern)) {
[09:31:43.218]                           computeRestarts <- base::computeRestarts
[09:31:43.218]                           grepl <- base::grepl
[09:31:43.218]                           restarts <- computeRestarts(cond)
[09:31:43.218]                           for (restart in restarts) {
[09:31:43.218]                             name <- restart$name
[09:31:43.218]                             if (is.null(name)) 
[09:31:43.218]                               next
[09:31:43.218]                             if (!grepl(pattern, name)) 
[09:31:43.218]                               next
[09:31:43.218]                             invokeRestart(restart)
[09:31:43.218]                             muffled <- TRUE
[09:31:43.218]                             break
[09:31:43.218]                           }
[09:31:43.218]                         }
[09:31:43.218]                       }
[09:31:43.218]                       invisible(muffled)
[09:31:43.218]                     }
[09:31:43.218]                     muffleCondition(cond, pattern = "^muffle")
[09:31:43.218]                   }
[09:31:43.218]                 }
[09:31:43.218]             }
[09:31:43.218]         }))
[09:31:43.218]     }, error = function(ex) {
[09:31:43.218]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:43.218]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:43.218]                 ...future.rng), started = ...future.startTime, 
[09:31:43.218]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:43.218]             version = "1.8"), class = "FutureResult")
[09:31:43.218]     }, finally = {
[09:31:43.218]         if (!identical(...future.workdir, getwd())) 
[09:31:43.218]             setwd(...future.workdir)
[09:31:43.218]         {
[09:31:43.218]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:43.218]                 ...future.oldOptions$nwarnings <- NULL
[09:31:43.218]             }
[09:31:43.218]             base::options(...future.oldOptions)
[09:31:43.218]             if (.Platform$OS.type == "windows") {
[09:31:43.218]                 old_names <- names(...future.oldEnvVars)
[09:31:43.218]                 envs <- base::Sys.getenv()
[09:31:43.218]                 names <- names(envs)
[09:31:43.218]                 common <- intersect(names, old_names)
[09:31:43.218]                 added <- setdiff(names, old_names)
[09:31:43.218]                 removed <- setdiff(old_names, names)
[09:31:43.218]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:43.218]                   envs[common]]
[09:31:43.218]                 NAMES <- toupper(changed)
[09:31:43.218]                 args <- list()
[09:31:43.218]                 for (kk in seq_along(NAMES)) {
[09:31:43.218]                   name <- changed[[kk]]
[09:31:43.218]                   NAME <- NAMES[[kk]]
[09:31:43.218]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:43.218]                     next
[09:31:43.218]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:43.218]                 }
[09:31:43.218]                 NAMES <- toupper(added)
[09:31:43.218]                 for (kk in seq_along(NAMES)) {
[09:31:43.218]                   name <- added[[kk]]
[09:31:43.218]                   NAME <- NAMES[[kk]]
[09:31:43.218]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:43.218]                     next
[09:31:43.218]                   args[[name]] <- ""
[09:31:43.218]                 }
[09:31:43.218]                 NAMES <- toupper(removed)
[09:31:43.218]                 for (kk in seq_along(NAMES)) {
[09:31:43.218]                   name <- removed[[kk]]
[09:31:43.218]                   NAME <- NAMES[[kk]]
[09:31:43.218]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:43.218]                     next
[09:31:43.218]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:43.218]                 }
[09:31:43.218]                 if (length(args) > 0) 
[09:31:43.218]                   base::do.call(base::Sys.setenv, args = args)
[09:31:43.218]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:43.218]             }
[09:31:43.218]             else {
[09:31:43.218]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:43.218]             }
[09:31:43.218]             {
[09:31:43.218]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:43.218]                   0L) {
[09:31:43.218]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:43.218]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:43.218]                   base::options(opts)
[09:31:43.218]                 }
[09:31:43.218]                 {
[09:31:43.218]                   {
[09:31:43.218]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:43.218]                     NULL
[09:31:43.218]                   }
[09:31:43.218]                   options(future.plan = NULL)
[09:31:43.218]                   if (is.na(NA_character_)) 
[09:31:43.218]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:43.218]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:43.218]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:43.218]                     .init = FALSE)
[09:31:43.218]                 }
[09:31:43.218]             }
[09:31:43.218]         }
[09:31:43.218]     })
[09:31:43.218]     if (TRUE) {
[09:31:43.218]         base::sink(type = "output", split = FALSE)
[09:31:43.218]         if (TRUE) {
[09:31:43.218]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:43.218]         }
[09:31:43.218]         else {
[09:31:43.218]             ...future.result["stdout"] <- base::list(NULL)
[09:31:43.218]         }
[09:31:43.218]         base::close(...future.stdout)
[09:31:43.218]         ...future.stdout <- NULL
[09:31:43.218]     }
[09:31:43.218]     ...future.result$conditions <- ...future.conditions
[09:31:43.218]     ...future.result$finished <- base::Sys.time()
[09:31:43.218]     ...future.result
[09:31:43.218] }
[09:31:43.221] MultisessionFuture started
[09:31:43.221] - Launch lazy future ... done
[09:31:43.221] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[09:31:43.221] getGlobalsAndPackages() ...
[09:31:43.222] Searching for globals...
[09:31:43.222] - globals found: [3] ‘{’, ‘value’, ‘f1’
[09:31:43.222] Searching for globals ... DONE
[09:31:43.222] Resolving globals: FALSE
[09:31:43.224] The total size of the 1 globals is 1.56 MiB (1636072 bytes)
[09:31:43.225] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[09:31:43.225] - globals: [1] ‘f1’
[09:31:43.225] - packages: [1] ‘future’
[09:31:43.225] getGlobalsAndPackages() ... DONE
[09:31:43.225] run() for ‘Future’ ...
[09:31:43.225] - state: ‘created’
[09:31:43.226] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:43.236] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:43.236] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:43.236]   - Field: ‘node’
[09:31:43.237]   - Field: ‘label’
[09:31:43.237]   - Field: ‘local’
[09:31:43.237]   - Field: ‘owner’
[09:31:43.237]   - Field: ‘envir’
[09:31:43.237]   - Field: ‘workers’
[09:31:43.237]   - Field: ‘packages’
[09:31:43.237]   - Field: ‘gc’
[09:31:43.237]   - Field: ‘conditions’
[09:31:43.237]   - Field: ‘persistent’
[09:31:43.237]   - Field: ‘expr’
[09:31:43.237]   - Field: ‘uuid’
[09:31:43.238]   - Field: ‘seed’
[09:31:43.238]   - Field: ‘version’
[09:31:43.238]   - Field: ‘result’
[09:31:43.238]   - Field: ‘asynchronous’
[09:31:43.238]   - Field: ‘calls’
[09:31:43.238]   - Field: ‘globals’
[09:31:43.238]   - Field: ‘stdout’
[09:31:43.238]   - Field: ‘earlySignal’
[09:31:43.238]   - Field: ‘lazy’
[09:31:43.238]   - Field: ‘state’
[09:31:43.238] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:43.238] - Launch lazy future ...
[09:31:43.239] Packages needed by the future expression (n = 1): ‘future’
[09:31:43.239] Packages needed by future strategies (n = 0): <none>
[09:31:43.239] {
[09:31:43.239]     {
[09:31:43.239]         {
[09:31:43.239]             ...future.startTime <- base::Sys.time()
[09:31:43.239]             {
[09:31:43.239]                 {
[09:31:43.239]                   {
[09:31:43.239]                     {
[09:31:43.239]                       {
[09:31:43.239]                         base::local({
[09:31:43.239]                           has_future <- base::requireNamespace("future", 
[09:31:43.239]                             quietly = TRUE)
[09:31:43.239]                           if (has_future) {
[09:31:43.239]                             ns <- base::getNamespace("future")
[09:31:43.239]                             version <- ns[[".package"]][["version"]]
[09:31:43.239]                             if (is.null(version)) 
[09:31:43.239]                               version <- utils::packageVersion("future")
[09:31:43.239]                           }
[09:31:43.239]                           else {
[09:31:43.239]                             version <- NULL
[09:31:43.239]                           }
[09:31:43.239]                           if (!has_future || version < "1.8.0") {
[09:31:43.239]                             info <- base::c(r_version = base::gsub("R version ", 
[09:31:43.239]                               "", base::R.version$version.string), 
[09:31:43.239]                               platform = base::sprintf("%s (%s-bit)", 
[09:31:43.239]                                 base::R.version$platform, 8 * 
[09:31:43.239]                                   base::.Machine$sizeof.pointer), 
[09:31:43.239]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:43.239]                                 "release", "version")], collapse = " "), 
[09:31:43.239]                               hostname = base::Sys.info()[["nodename"]])
[09:31:43.239]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:31:43.239]                               info)
[09:31:43.239]                             info <- base::paste(info, collapse = "; ")
[09:31:43.239]                             if (!has_future) {
[09:31:43.239]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:43.239]                                 info)
[09:31:43.239]                             }
[09:31:43.239]                             else {
[09:31:43.239]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:43.239]                                 info, version)
[09:31:43.239]                             }
[09:31:43.239]                             base::stop(msg)
[09:31:43.239]                           }
[09:31:43.239]                         })
[09:31:43.239]                       }
[09:31:43.239]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:43.239]                       base::options(mc.cores = 1L)
[09:31:43.239]                     }
[09:31:43.239]                     base::local({
[09:31:43.239]                       for (pkg in "future") {
[09:31:43.239]                         base::loadNamespace(pkg)
[09:31:43.239]                         base::library(pkg, character.only = TRUE)
[09:31:43.239]                       }
[09:31:43.239]                     })
[09:31:43.239]                   }
[09:31:43.239]                   ...future.strategy.old <- future::plan("list")
[09:31:43.239]                   options(future.plan = NULL)
[09:31:43.239]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:43.239]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:43.239]                 }
[09:31:43.239]                 ...future.workdir <- getwd()
[09:31:43.239]             }
[09:31:43.239]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:43.239]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:43.239]         }
[09:31:43.239]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:43.239]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:43.239]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:43.239]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:43.239]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:43.239]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:43.239]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:43.239]             base::names(...future.oldOptions))
[09:31:43.239]     }
[09:31:43.239]     if (FALSE) {
[09:31:43.239]     }
[09:31:43.239]     else {
[09:31:43.239]         if (TRUE) {
[09:31:43.239]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:43.239]                 open = "w")
[09:31:43.239]         }
[09:31:43.239]         else {
[09:31:43.239]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:43.239]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:43.239]         }
[09:31:43.239]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:43.239]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:43.239]             base::sink(type = "output", split = FALSE)
[09:31:43.239]             base::close(...future.stdout)
[09:31:43.239]         }, add = TRUE)
[09:31:43.239]     }
[09:31:43.239]     ...future.frame <- base::sys.nframe()
[09:31:43.239]     ...future.conditions <- base::list()
[09:31:43.239]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:43.239]     if (FALSE) {
[09:31:43.239]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:43.239]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:43.239]     }
[09:31:43.239]     ...future.result <- base::tryCatch({
[09:31:43.239]         base::withCallingHandlers({
[09:31:43.239]             ...future.value <- base::withVisible(base::local({
[09:31:43.239]                 ...future.makeSendCondition <- base::local({
[09:31:43.239]                   sendCondition <- NULL
[09:31:43.239]                   function(frame = 1L) {
[09:31:43.239]                     if (is.function(sendCondition)) 
[09:31:43.239]                       return(sendCondition)
[09:31:43.239]                     ns <- getNamespace("parallel")
[09:31:43.239]                     if (exists("sendData", mode = "function", 
[09:31:43.239]                       envir = ns)) {
[09:31:43.239]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:43.239]                         envir = ns)
[09:31:43.239]                       envir <- sys.frame(frame)
[09:31:43.239]                       master <- NULL
[09:31:43.239]                       while (!identical(envir, .GlobalEnv) && 
[09:31:43.239]                         !identical(envir, emptyenv())) {
[09:31:43.239]                         if (exists("master", mode = "list", envir = envir, 
[09:31:43.239]                           inherits = FALSE)) {
[09:31:43.239]                           master <- get("master", mode = "list", 
[09:31:43.239]                             envir = envir, inherits = FALSE)
[09:31:43.239]                           if (inherits(master, c("SOCKnode", 
[09:31:43.239]                             "SOCK0node"))) {
[09:31:43.239]                             sendCondition <<- function(cond) {
[09:31:43.239]                               data <- list(type = "VALUE", value = cond, 
[09:31:43.239]                                 success = TRUE)
[09:31:43.239]                               parallel_sendData(master, data)
[09:31:43.239]                             }
[09:31:43.239]                             return(sendCondition)
[09:31:43.239]                           }
[09:31:43.239]                         }
[09:31:43.239]                         frame <- frame + 1L
[09:31:43.239]                         envir <- sys.frame(frame)
[09:31:43.239]                       }
[09:31:43.239]                     }
[09:31:43.239]                     sendCondition <<- function(cond) NULL
[09:31:43.239]                   }
[09:31:43.239]                 })
[09:31:43.239]                 withCallingHandlers({
[09:31:43.239]                   {
[09:31:43.239]                     value(f1)
[09:31:43.239]                   }
[09:31:43.239]                 }, immediateCondition = function(cond) {
[09:31:43.239]                   sendCondition <- ...future.makeSendCondition()
[09:31:43.239]                   sendCondition(cond)
[09:31:43.239]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:43.239]                   {
[09:31:43.239]                     inherits <- base::inherits
[09:31:43.239]                     invokeRestart <- base::invokeRestart
[09:31:43.239]                     is.null <- base::is.null
[09:31:43.239]                     muffled <- FALSE
[09:31:43.239]                     if (inherits(cond, "message")) {
[09:31:43.239]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:43.239]                       if (muffled) 
[09:31:43.239]                         invokeRestart("muffleMessage")
[09:31:43.239]                     }
[09:31:43.239]                     else if (inherits(cond, "warning")) {
[09:31:43.239]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:43.239]                       if (muffled) 
[09:31:43.239]                         invokeRestart("muffleWarning")
[09:31:43.239]                     }
[09:31:43.239]                     else if (inherits(cond, "condition")) {
[09:31:43.239]                       if (!is.null(pattern)) {
[09:31:43.239]                         computeRestarts <- base::computeRestarts
[09:31:43.239]                         grepl <- base::grepl
[09:31:43.239]                         restarts <- computeRestarts(cond)
[09:31:43.239]                         for (restart in restarts) {
[09:31:43.239]                           name <- restart$name
[09:31:43.239]                           if (is.null(name)) 
[09:31:43.239]                             next
[09:31:43.239]                           if (!grepl(pattern, name)) 
[09:31:43.239]                             next
[09:31:43.239]                           invokeRestart(restart)
[09:31:43.239]                           muffled <- TRUE
[09:31:43.239]                           break
[09:31:43.239]                         }
[09:31:43.239]                       }
[09:31:43.239]                     }
[09:31:43.239]                     invisible(muffled)
[09:31:43.239]                   }
[09:31:43.239]                   muffleCondition(cond)
[09:31:43.239]                 })
[09:31:43.239]             }))
[09:31:43.239]             future::FutureResult(value = ...future.value$value, 
[09:31:43.239]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:43.239]                   ...future.rng), globalenv = if (FALSE) 
[09:31:43.239]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:43.239]                     ...future.globalenv.names))
[09:31:43.239]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:43.239]         }, condition = base::local({
[09:31:43.239]             c <- base::c
[09:31:43.239]             inherits <- base::inherits
[09:31:43.239]             invokeRestart <- base::invokeRestart
[09:31:43.239]             length <- base::length
[09:31:43.239]             list <- base::list
[09:31:43.239]             seq.int <- base::seq.int
[09:31:43.239]             signalCondition <- base::signalCondition
[09:31:43.239]             sys.calls <- base::sys.calls
[09:31:43.239]             `[[` <- base::`[[`
[09:31:43.239]             `+` <- base::`+`
[09:31:43.239]             `<<-` <- base::`<<-`
[09:31:43.239]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:43.239]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:43.239]                   3L)]
[09:31:43.239]             }
[09:31:43.239]             function(cond) {
[09:31:43.239]                 is_error <- inherits(cond, "error")
[09:31:43.239]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:43.239]                   NULL)
[09:31:43.239]                 if (is_error) {
[09:31:43.239]                   sessionInformation <- function() {
[09:31:43.239]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:43.239]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:43.239]                       search = base::search(), system = base::Sys.info())
[09:31:43.239]                   }
[09:31:43.239]                   ...future.conditions[[length(...future.conditions) + 
[09:31:43.239]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:43.239]                     cond$call), session = sessionInformation(), 
[09:31:43.239]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:43.239]                   signalCondition(cond)
[09:31:43.239]                 }
[09:31:43.239]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:43.239]                 "immediateCondition"))) {
[09:31:43.239]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:43.239]                   ...future.conditions[[length(...future.conditions) + 
[09:31:43.239]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:43.239]                   if (TRUE && !signal) {
[09:31:43.239]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:43.239]                     {
[09:31:43.239]                       inherits <- base::inherits
[09:31:43.239]                       invokeRestart <- base::invokeRestart
[09:31:43.239]                       is.null <- base::is.null
[09:31:43.239]                       muffled <- FALSE
[09:31:43.239]                       if (inherits(cond, "message")) {
[09:31:43.239]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:43.239]                         if (muffled) 
[09:31:43.239]                           invokeRestart("muffleMessage")
[09:31:43.239]                       }
[09:31:43.239]                       else if (inherits(cond, "warning")) {
[09:31:43.239]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:43.239]                         if (muffled) 
[09:31:43.239]                           invokeRestart("muffleWarning")
[09:31:43.239]                       }
[09:31:43.239]                       else if (inherits(cond, "condition")) {
[09:31:43.239]                         if (!is.null(pattern)) {
[09:31:43.239]                           computeRestarts <- base::computeRestarts
[09:31:43.239]                           grepl <- base::grepl
[09:31:43.239]                           restarts <- computeRestarts(cond)
[09:31:43.239]                           for (restart in restarts) {
[09:31:43.239]                             name <- restart$name
[09:31:43.239]                             if (is.null(name)) 
[09:31:43.239]                               next
[09:31:43.239]                             if (!grepl(pattern, name)) 
[09:31:43.239]                               next
[09:31:43.239]                             invokeRestart(restart)
[09:31:43.239]                             muffled <- TRUE
[09:31:43.239]                             break
[09:31:43.239]                           }
[09:31:43.239]                         }
[09:31:43.239]                       }
[09:31:43.239]                       invisible(muffled)
[09:31:43.239]                     }
[09:31:43.239]                     muffleCondition(cond, pattern = "^muffle")
[09:31:43.239]                   }
[09:31:43.239]                 }
[09:31:43.239]                 else {
[09:31:43.239]                   if (TRUE) {
[09:31:43.239]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:43.239]                     {
[09:31:43.239]                       inherits <- base::inherits
[09:31:43.239]                       invokeRestart <- base::invokeRestart
[09:31:43.239]                       is.null <- base::is.null
[09:31:43.239]                       muffled <- FALSE
[09:31:43.239]                       if (inherits(cond, "message")) {
[09:31:43.239]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:43.239]                         if (muffled) 
[09:31:43.239]                           invokeRestart("muffleMessage")
[09:31:43.239]                       }
[09:31:43.239]                       else if (inherits(cond, "warning")) {
[09:31:43.239]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:43.239]                         if (muffled) 
[09:31:43.239]                           invokeRestart("muffleWarning")
[09:31:43.239]                       }
[09:31:43.239]                       else if (inherits(cond, "condition")) {
[09:31:43.239]                         if (!is.null(pattern)) {
[09:31:43.239]                           computeRestarts <- base::computeRestarts
[09:31:43.239]                           grepl <- base::grepl
[09:31:43.239]                           restarts <- computeRestarts(cond)
[09:31:43.239]                           for (restart in restarts) {
[09:31:43.239]                             name <- restart$name
[09:31:43.239]                             if (is.null(name)) 
[09:31:43.239]                               next
[09:31:43.239]                             if (!grepl(pattern, name)) 
[09:31:43.239]                               next
[09:31:43.239]                             invokeRestart(restart)
[09:31:43.239]                             muffled <- TRUE
[09:31:43.239]                             break
[09:31:43.239]                           }
[09:31:43.239]                         }
[09:31:43.239]                       }
[09:31:43.239]                       invisible(muffled)
[09:31:43.239]                     }
[09:31:43.239]                     muffleCondition(cond, pattern = "^muffle")
[09:31:43.239]                   }
[09:31:43.239]                 }
[09:31:43.239]             }
[09:31:43.239]         }))
[09:31:43.239]     }, error = function(ex) {
[09:31:43.239]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:43.239]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:43.239]                 ...future.rng), started = ...future.startTime, 
[09:31:43.239]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:43.239]             version = "1.8"), class = "FutureResult")
[09:31:43.239]     }, finally = {
[09:31:43.239]         if (!identical(...future.workdir, getwd())) 
[09:31:43.239]             setwd(...future.workdir)
[09:31:43.239]         {
[09:31:43.239]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:43.239]                 ...future.oldOptions$nwarnings <- NULL
[09:31:43.239]             }
[09:31:43.239]             base::options(...future.oldOptions)
[09:31:43.239]             if (.Platform$OS.type == "windows") {
[09:31:43.239]                 old_names <- names(...future.oldEnvVars)
[09:31:43.239]                 envs <- base::Sys.getenv()
[09:31:43.239]                 names <- names(envs)
[09:31:43.239]                 common <- intersect(names, old_names)
[09:31:43.239]                 added <- setdiff(names, old_names)
[09:31:43.239]                 removed <- setdiff(old_names, names)
[09:31:43.239]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:43.239]                   envs[common]]
[09:31:43.239]                 NAMES <- toupper(changed)
[09:31:43.239]                 args <- list()
[09:31:43.239]                 for (kk in seq_along(NAMES)) {
[09:31:43.239]                   name <- changed[[kk]]
[09:31:43.239]                   NAME <- NAMES[[kk]]
[09:31:43.239]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:43.239]                     next
[09:31:43.239]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:43.239]                 }
[09:31:43.239]                 NAMES <- toupper(added)
[09:31:43.239]                 for (kk in seq_along(NAMES)) {
[09:31:43.239]                   name <- added[[kk]]
[09:31:43.239]                   NAME <- NAMES[[kk]]
[09:31:43.239]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:43.239]                     next
[09:31:43.239]                   args[[name]] <- ""
[09:31:43.239]                 }
[09:31:43.239]                 NAMES <- toupper(removed)
[09:31:43.239]                 for (kk in seq_along(NAMES)) {
[09:31:43.239]                   name <- removed[[kk]]
[09:31:43.239]                   NAME <- NAMES[[kk]]
[09:31:43.239]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:43.239]                     next
[09:31:43.239]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:43.239]                 }
[09:31:43.239]                 if (length(args) > 0) 
[09:31:43.239]                   base::do.call(base::Sys.setenv, args = args)
[09:31:43.239]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:43.239]             }
[09:31:43.239]             else {
[09:31:43.239]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:43.239]             }
[09:31:43.239]             {
[09:31:43.239]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:43.239]                   0L) {
[09:31:43.239]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:43.239]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:43.239]                   base::options(opts)
[09:31:43.239]                 }
[09:31:43.239]                 {
[09:31:43.239]                   {
[09:31:43.239]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:43.239]                     NULL
[09:31:43.239]                   }
[09:31:43.239]                   options(future.plan = NULL)
[09:31:43.239]                   if (is.na(NA_character_)) 
[09:31:43.239]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:43.239]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:43.239]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:43.239]                     .init = FALSE)
[09:31:43.239]                 }
[09:31:43.239]             }
[09:31:43.239]         }
[09:31:43.239]     })
[09:31:43.239]     if (TRUE) {
[09:31:43.239]         base::sink(type = "output", split = FALSE)
[09:31:43.239]         if (TRUE) {
[09:31:43.239]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:43.239]         }
[09:31:43.239]         else {
[09:31:43.239]             ...future.result["stdout"] <- base::list(NULL)
[09:31:43.239]         }
[09:31:43.239]         base::close(...future.stdout)
[09:31:43.239]         ...future.stdout <- NULL
[09:31:43.239]     }
[09:31:43.239]     ...future.result$conditions <- ...future.conditions
[09:31:43.239]     ...future.result$finished <- base::Sys.time()
[09:31:43.239]     ...future.result
[09:31:43.239] }
[09:31:43.291] Exporting 1 global objects (1.56 MiB) to cluster node #2 ...
[09:31:43.293] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ...
[09:31:43.304] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ... DONE
[09:31:43.304] Exporting 1 global objects (1.56 MiB) to cluster node #2 ... DONE
[09:31:43.304] MultisessionFuture started
[09:31:43.304] - Launch lazy future ... done
[09:31:43.304] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.56 MiB (MultisessionFuture ‘f1’ of 1.56 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: a0403ee1-376b-4f68-5d85-a423f35d110f
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[09:31:43.321] result() for ClusterFuture ...
[09:31:43.321] receiveMessageFromWorker() for ClusterFuture ...
[09:31:43.321] - Validating connection of MultisessionFuture
[09:31:43.398] - received message: FutureResult
[09:31:43.398] - Received FutureResult
[09:31:43.398] - Erased future from FutureRegistry
[09:31:43.398] result() for ClusterFuture ...
[09:31:43.398] - result already collected: FutureResult
[09:31:43.398] result() for ClusterFuture ... done
[09:31:43.398] signalConditions() ...
[09:31:43.399]  - include = ‘immediateCondition’
[09:31:43.399]  - exclude = 
[09:31:43.399]  - resignal = FALSE
[09:31:43.399]  - Number of conditions: 1
[09:31:43.399] signalConditions() ... done
[09:31:43.399] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:43.399] result() for ClusterFuture ... done
[09:31:43.399] result() for ClusterFuture ...
[09:31:43.399] - result already collected: FutureResult
[09:31:43.399] result() for ClusterFuture ... done
[09:31:43.399] signalConditions() ...
[09:31:43.399]  - include = ‘immediateCondition’
[09:31:43.400]  - exclude = 
[09:31:43.400]  - resignal = FALSE
[09:31:43.400]  - Number of conditions: 1
[09:31:43.400] signalConditions() ... done
[09:31:43.400] Future state: ‘finished’
[09:31:43.400] result() for ClusterFuture ...
[09:31:43.400] - result already collected: FutureResult
[09:31:43.400] result() for ClusterFuture ... done
[09:31:43.400] signalConditions() ...
[09:31:43.400]  - include = ‘condition’
[09:31:43.400]  - exclude = ‘immediateCondition’
[09:31:43.401]  - resignal = TRUE
[09:31:43.401]  - Number of conditions: 1
[09:31:43.401]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[09:31:43.401] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (a0403ee1-376b-4f68-5d85-a423f35d110f; pid 45192 on 8f1daa72e372) that created it, not by any other R processes (765e4cea-e0a6-e2f7-39e1-839166ea54c4; pid 45246 on 8f1daa72e372): {; 42L; }>


Future UUID: 90cadc6d-ec1c-07dc-a6d7-8e5145c4e4cc


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: a0403ee1-376b-4f68-5d85-a423f35d110f
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[09:31:43.402] result() for ClusterFuture ...
[09:31:43.402] receiveMessageFromWorker() for ClusterFuture ...
[09:31:43.402] - Validating connection of MultisessionFuture
[09:31:43.402] - received message: FutureResult
[09:31:43.402] - Received FutureResult
[09:31:43.402] - Erased future from FutureRegistry
[09:31:43.402] result() for ClusterFuture ...
[09:31:43.403] - result already collected: FutureResult
[09:31:43.403] result() for ClusterFuture ... done
[09:31:43.403] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:43.403] result() for ClusterFuture ... done
[09:31:43.403] result() for ClusterFuture ...
[09:31:43.403] - result already collected: FutureResult
[09:31:43.403] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[09:31:43.404] plan(): Setting new future strategy stack:
[09:31:43.404] List of future strategies:
[09:31:43.404] 1. FutureStrategy:
[09:31:43.404]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:43.404]    - tweaked: FALSE
[09:31:43.404]    - call: future::plan(oplan)
[09:31:43.405] plan(): nbrOfWorkers() = 1
> 
