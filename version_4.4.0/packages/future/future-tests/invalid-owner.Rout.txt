
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:40:04.793] plan(): Setting new future strategy stack:
[17:40:04.794] List of future strategies:
[17:40:04.794] 1. sequential:
[17:40:04.794]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:04.794]    - tweaked: FALSE
[17:40:04.794]    - call: future::plan("sequential")
[17:40:04.805] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[17:40:04.819] plan(): Setting new future strategy stack:
[17:40:04.819] List of future strategies:
[17:40:04.819] 1. multisession:
[17:40:04.819]    - args: function (..., workers = 2L, envir = parent.frame())
[17:40:04.819]    - tweaked: TRUE
[17:40:04.819]    - call: plan(multisession, workers = 2L)
[17:40:04.830] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:40:04.830] multisession:
[17:40:04.830] - args: function (..., workers = 2L, envir = parent.frame())
[17:40:04.830] - tweaked: TRUE
[17:40:04.830] - call: plan(multisession, workers = 2L)
[17:40:04.831] getGlobalsAndPackages() ...
[17:40:04.831] Not searching for globals
[17:40:04.831] - globals: [0] <none>
[17:40:04.831] getGlobalsAndPackages() ... DONE
[17:40:04.832] [local output] makeClusterPSOCK() ...
[17:40:04.861] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:40:04.862] [local output] Base port: 11067
[17:40:04.863] [local output] Getting setup options for 2 cluster nodes ...
[17:40:04.863] [local output]  - Node 1 of 2 ...
[17:40:04.863] [local output] localMachine=TRUE => revtunnel=FALSE

[17:40:04.864] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp0wuN63/worker.rank=1.parallelly.parent=45195.b08b761cb919.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp0wuN63/worker.rank=1.parallelly.parent=45195.b08b761cb919.pid")'’
[17:40:05.052] - Possible to infer worker's PID: TRUE
[17:40:05.052] [local output] Rscript port: 11067

[17:40:05.053] [local output]  - Node 2 of 2 ...
[17:40:05.053] [local output] localMachine=TRUE => revtunnel=FALSE

[17:40:05.054] [local output] Rscript port: 11067

[17:40:05.054] [local output] Getting setup options for 2 cluster nodes ... done
[17:40:05.054] [local output]  - Parallel setup requested for some PSOCK nodes
[17:40:05.055] [local output] Setting up PSOCK nodes in parallel
[17:40:05.055] List of 36
[17:40:05.055]  $ worker          : chr "localhost"
[17:40:05.055]   ..- attr(*, "localhost")= logi TRUE
[17:40:05.055]  $ master          : chr "localhost"
[17:40:05.055]  $ port            : int 11067
[17:40:05.055]  $ connectTimeout  : num 120
[17:40:05.055]  $ timeout         : num 2592000
[17:40:05.055]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:40:05.055]  $ homogeneous     : logi TRUE
[17:40:05.055]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:40:05.055]  $ rscript_envs    : NULL
[17:40:05.055]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:40:05.055]  $ rscript_startup : NULL
[17:40:05.055]  $ rscript_sh      : chr "sh"
[17:40:05.055]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:40:05.055]  $ methods         : logi TRUE
[17:40:05.055]  $ socketOptions   : chr "no-delay"
[17:40:05.055]  $ useXDR          : logi FALSE
[17:40:05.055]  $ outfile         : chr "/dev/null"
[17:40:05.055]  $ renice          : int NA
[17:40:05.055]  $ rshcmd          : NULL
[17:40:05.055]  $ user            : chr(0) 
[17:40:05.055]  $ revtunnel       : logi FALSE
[17:40:05.055]  $ rshlogfile      : NULL
[17:40:05.055]  $ rshopts         : chr(0) 
[17:40:05.055]  $ rank            : int 1
[17:40:05.055]  $ manual          : logi FALSE
[17:40:05.055]  $ dryrun          : logi FALSE
[17:40:05.055]  $ quiet           : logi FALSE
[17:40:05.055]  $ setup_strategy  : chr "parallel"
[17:40:05.055]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:40:05.055]  $ pidfile         : chr "/tmp/Rtmp0wuN63/worker.rank=1.parallelly.parent=45195.b08b761cb919.pid"
[17:40:05.055]  $ rshcmd_label    : NULL
[17:40:05.055]  $ rsh_call        : NULL
[17:40:05.055]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:40:05.055]  $ localMachine    : logi TRUE
[17:40:05.055]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:40:05.055]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:40:05.055]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:40:05.055]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:40:05.055]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:40:05.055]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:40:05.055]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:40:05.055]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:40:05.055]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:40:05.055]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:40:05.055]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:40:05.055]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:40:05.055]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:40:05.055]  $ arguments       :List of 28
[17:40:05.055]   ..$ worker          : chr "localhost"
[17:40:05.055]   ..$ master          : NULL
[17:40:05.055]   ..$ port            : int 11067
[17:40:05.055]   ..$ connectTimeout  : num 120
[17:40:05.055]   ..$ timeout         : num 2592000
[17:40:05.055]   ..$ rscript         : NULL
[17:40:05.055]   ..$ homogeneous     : NULL
[17:40:05.055]   ..$ rscript_args    : NULL
[17:40:05.055]   ..$ rscript_envs    : NULL
[17:40:05.055]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:40:05.055]   ..$ rscript_startup : NULL
[17:40:05.055]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:40:05.055]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:40:05.055]   ..$ methods         : logi TRUE
[17:40:05.055]   ..$ socketOptions   : chr "no-delay"
[17:40:05.055]   ..$ useXDR          : logi FALSE
[17:40:05.055]   ..$ outfile         : chr "/dev/null"
[17:40:05.055]   ..$ renice          : int NA
[17:40:05.055]   ..$ rshcmd          : NULL
[17:40:05.055]   ..$ user            : NULL
[17:40:05.055]   ..$ revtunnel       : logi NA
[17:40:05.055]   ..$ rshlogfile      : NULL
[17:40:05.055]   ..$ rshopts         : NULL
[17:40:05.055]   ..$ rank            : int 1
[17:40:05.055]   ..$ manual          : logi FALSE
[17:40:05.055]   ..$ dryrun          : logi FALSE
[17:40:05.055]   ..$ quiet           : logi FALSE
[17:40:05.055]   ..$ setup_strategy  : chr "parallel"
[17:40:05.055]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:40:05.073] [local output] System call to launch all workers:
[17:40:05.073] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp0wuN63/worker.rank=1.parallelly.parent=45195.b08b761cb919.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11067 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:40:05.074] [local output] Starting PSOCK main server
[17:40:05.079] [local output] Workers launched
[17:40:05.079] [local output] Waiting for workers to connect back
[17:40:05.080]  - [local output] 0 workers out of 2 ready
[17:40:05.315]  - [local output] 0 workers out of 2 ready
[17:40:05.315]  - [local output] 1 workers out of 2 ready
[17:40:05.316]  - [local output] 2 workers out of 2 ready
[17:40:05.316] [local output] Launching of workers completed
[17:40:05.316] [local output] Collecting session information from workers
[17:40:05.317] [local output]  - Worker #1 of 2
[17:40:05.317] [local output]  - Worker #2 of 2
[17:40:05.317] [local output] makeClusterPSOCK() ... done
[17:40:05.329] Packages needed by the future expression (n = 0): <none>
[17:40:05.329] Packages needed by future strategies (n = 0): <none>
[17:40:05.330] {
[17:40:05.330]     {
[17:40:05.330]         {
[17:40:05.330]             ...future.startTime <- base::Sys.time()
[17:40:05.330]             {
[17:40:05.330]                 {
[17:40:05.330]                   {
[17:40:05.330]                     {
[17:40:05.330]                       base::local({
[17:40:05.330]                         has_future <- base::requireNamespace("future", 
[17:40:05.330]                           quietly = TRUE)
[17:40:05.330]                         if (has_future) {
[17:40:05.330]                           ns <- base::getNamespace("future")
[17:40:05.330]                           version <- ns[[".package"]][["version"]]
[17:40:05.330]                           if (is.null(version)) 
[17:40:05.330]                             version <- utils::packageVersion("future")
[17:40:05.330]                         }
[17:40:05.330]                         else {
[17:40:05.330]                           version <- NULL
[17:40:05.330]                         }
[17:40:05.330]                         if (!has_future || version < "1.8.0") {
[17:40:05.330]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:05.330]                             "", base::R.version$version.string), 
[17:40:05.330]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:05.330]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:05.330]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:05.330]                               "release", "version")], collapse = " "), 
[17:40:05.330]                             hostname = base::Sys.info()[["nodename"]])
[17:40:05.330]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:05.330]                             info)
[17:40:05.330]                           info <- base::paste(info, collapse = "; ")
[17:40:05.330]                           if (!has_future) {
[17:40:05.330]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:05.330]                               info)
[17:40:05.330]                           }
[17:40:05.330]                           else {
[17:40:05.330]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:05.330]                               info, version)
[17:40:05.330]                           }
[17:40:05.330]                           base::stop(msg)
[17:40:05.330]                         }
[17:40:05.330]                       })
[17:40:05.330]                     }
[17:40:05.330]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:05.330]                     base::options(mc.cores = 1L)
[17:40:05.330]                   }
[17:40:05.330]                   ...future.strategy.old <- future::plan("list")
[17:40:05.330]                   options(future.plan = NULL)
[17:40:05.330]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.330]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:05.330]                 }
[17:40:05.330]                 ...future.workdir <- getwd()
[17:40:05.330]             }
[17:40:05.330]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:05.330]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:05.330]         }
[17:40:05.330]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:05.330]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:05.330]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:05.330]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:05.330]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:05.330]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:05.330]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:05.330]             base::names(...future.oldOptions))
[17:40:05.330]     }
[17:40:05.330]     if (FALSE) {
[17:40:05.330]     }
[17:40:05.330]     else {
[17:40:05.330]         if (TRUE) {
[17:40:05.330]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:05.330]                 open = "w")
[17:40:05.330]         }
[17:40:05.330]         else {
[17:40:05.330]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:05.330]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:05.330]         }
[17:40:05.330]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:05.330]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:05.330]             base::sink(type = "output", split = FALSE)
[17:40:05.330]             base::close(...future.stdout)
[17:40:05.330]         }, add = TRUE)
[17:40:05.330]     }
[17:40:05.330]     ...future.frame <- base::sys.nframe()
[17:40:05.330]     ...future.conditions <- base::list()
[17:40:05.330]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:05.330]     if (FALSE) {
[17:40:05.330]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:05.330]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:05.330]     }
[17:40:05.330]     ...future.result <- base::tryCatch({
[17:40:05.330]         base::withCallingHandlers({
[17:40:05.330]             ...future.value <- base::withVisible(base::local({
[17:40:05.330]                 ...future.makeSendCondition <- base::local({
[17:40:05.330]                   sendCondition <- NULL
[17:40:05.330]                   function(frame = 1L) {
[17:40:05.330]                     if (is.function(sendCondition)) 
[17:40:05.330]                       return(sendCondition)
[17:40:05.330]                     ns <- getNamespace("parallel")
[17:40:05.330]                     if (exists("sendData", mode = "function", 
[17:40:05.330]                       envir = ns)) {
[17:40:05.330]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:05.330]                         envir = ns)
[17:40:05.330]                       envir <- sys.frame(frame)
[17:40:05.330]                       master <- NULL
[17:40:05.330]                       while (!identical(envir, .GlobalEnv) && 
[17:40:05.330]                         !identical(envir, emptyenv())) {
[17:40:05.330]                         if (exists("master", mode = "list", envir = envir, 
[17:40:05.330]                           inherits = FALSE)) {
[17:40:05.330]                           master <- get("master", mode = "list", 
[17:40:05.330]                             envir = envir, inherits = FALSE)
[17:40:05.330]                           if (inherits(master, c("SOCKnode", 
[17:40:05.330]                             "SOCK0node"))) {
[17:40:05.330]                             sendCondition <<- function(cond) {
[17:40:05.330]                               data <- list(type = "VALUE", value = cond, 
[17:40:05.330]                                 success = TRUE)
[17:40:05.330]                               parallel_sendData(master, data)
[17:40:05.330]                             }
[17:40:05.330]                             return(sendCondition)
[17:40:05.330]                           }
[17:40:05.330]                         }
[17:40:05.330]                         frame <- frame + 1L
[17:40:05.330]                         envir <- sys.frame(frame)
[17:40:05.330]                       }
[17:40:05.330]                     }
[17:40:05.330]                     sendCondition <<- function(cond) NULL
[17:40:05.330]                   }
[17:40:05.330]                 })
[17:40:05.330]                 withCallingHandlers({
[17:40:05.330]                   NA
[17:40:05.330]                 }, immediateCondition = function(cond) {
[17:40:05.330]                   sendCondition <- ...future.makeSendCondition()
[17:40:05.330]                   sendCondition(cond)
[17:40:05.330]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.330]                   {
[17:40:05.330]                     inherits <- base::inherits
[17:40:05.330]                     invokeRestart <- base::invokeRestart
[17:40:05.330]                     is.null <- base::is.null
[17:40:05.330]                     muffled <- FALSE
[17:40:05.330]                     if (inherits(cond, "message")) {
[17:40:05.330]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:05.330]                       if (muffled) 
[17:40:05.330]                         invokeRestart("muffleMessage")
[17:40:05.330]                     }
[17:40:05.330]                     else if (inherits(cond, "warning")) {
[17:40:05.330]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:05.330]                       if (muffled) 
[17:40:05.330]                         invokeRestart("muffleWarning")
[17:40:05.330]                     }
[17:40:05.330]                     else if (inherits(cond, "condition")) {
[17:40:05.330]                       if (!is.null(pattern)) {
[17:40:05.330]                         computeRestarts <- base::computeRestarts
[17:40:05.330]                         grepl <- base::grepl
[17:40:05.330]                         restarts <- computeRestarts(cond)
[17:40:05.330]                         for (restart in restarts) {
[17:40:05.330]                           name <- restart$name
[17:40:05.330]                           if (is.null(name)) 
[17:40:05.330]                             next
[17:40:05.330]                           if (!grepl(pattern, name)) 
[17:40:05.330]                             next
[17:40:05.330]                           invokeRestart(restart)
[17:40:05.330]                           muffled <- TRUE
[17:40:05.330]                           break
[17:40:05.330]                         }
[17:40:05.330]                       }
[17:40:05.330]                     }
[17:40:05.330]                     invisible(muffled)
[17:40:05.330]                   }
[17:40:05.330]                   muffleCondition(cond)
[17:40:05.330]                 })
[17:40:05.330]             }))
[17:40:05.330]             future::FutureResult(value = ...future.value$value, 
[17:40:05.330]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.330]                   ...future.rng), globalenv = if (FALSE) 
[17:40:05.330]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:05.330]                     ...future.globalenv.names))
[17:40:05.330]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:05.330]         }, condition = base::local({
[17:40:05.330]             c <- base::c
[17:40:05.330]             inherits <- base::inherits
[17:40:05.330]             invokeRestart <- base::invokeRestart
[17:40:05.330]             length <- base::length
[17:40:05.330]             list <- base::list
[17:40:05.330]             seq.int <- base::seq.int
[17:40:05.330]             signalCondition <- base::signalCondition
[17:40:05.330]             sys.calls <- base::sys.calls
[17:40:05.330]             `[[` <- base::`[[`
[17:40:05.330]             `+` <- base::`+`
[17:40:05.330]             `<<-` <- base::`<<-`
[17:40:05.330]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:05.330]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:05.330]                   3L)]
[17:40:05.330]             }
[17:40:05.330]             function(cond) {
[17:40:05.330]                 is_error <- inherits(cond, "error")
[17:40:05.330]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:05.330]                   NULL)
[17:40:05.330]                 if (is_error) {
[17:40:05.330]                   sessionInformation <- function() {
[17:40:05.330]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:05.330]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:05.330]                       search = base::search(), system = base::Sys.info())
[17:40:05.330]                   }
[17:40:05.330]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.330]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:05.330]                     cond$call), session = sessionInformation(), 
[17:40:05.330]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:05.330]                   signalCondition(cond)
[17:40:05.330]                 }
[17:40:05.330]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:05.330]                 "immediateCondition"))) {
[17:40:05.330]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:05.330]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.330]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:05.330]                   if (TRUE && !signal) {
[17:40:05.330]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.330]                     {
[17:40:05.330]                       inherits <- base::inherits
[17:40:05.330]                       invokeRestart <- base::invokeRestart
[17:40:05.330]                       is.null <- base::is.null
[17:40:05.330]                       muffled <- FALSE
[17:40:05.330]                       if (inherits(cond, "message")) {
[17:40:05.330]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.330]                         if (muffled) 
[17:40:05.330]                           invokeRestart("muffleMessage")
[17:40:05.330]                       }
[17:40:05.330]                       else if (inherits(cond, "warning")) {
[17:40:05.330]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.330]                         if (muffled) 
[17:40:05.330]                           invokeRestart("muffleWarning")
[17:40:05.330]                       }
[17:40:05.330]                       else if (inherits(cond, "condition")) {
[17:40:05.330]                         if (!is.null(pattern)) {
[17:40:05.330]                           computeRestarts <- base::computeRestarts
[17:40:05.330]                           grepl <- base::grepl
[17:40:05.330]                           restarts <- computeRestarts(cond)
[17:40:05.330]                           for (restart in restarts) {
[17:40:05.330]                             name <- restart$name
[17:40:05.330]                             if (is.null(name)) 
[17:40:05.330]                               next
[17:40:05.330]                             if (!grepl(pattern, name)) 
[17:40:05.330]                               next
[17:40:05.330]                             invokeRestart(restart)
[17:40:05.330]                             muffled <- TRUE
[17:40:05.330]                             break
[17:40:05.330]                           }
[17:40:05.330]                         }
[17:40:05.330]                       }
[17:40:05.330]                       invisible(muffled)
[17:40:05.330]                     }
[17:40:05.330]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.330]                   }
[17:40:05.330]                 }
[17:40:05.330]                 else {
[17:40:05.330]                   if (TRUE) {
[17:40:05.330]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.330]                     {
[17:40:05.330]                       inherits <- base::inherits
[17:40:05.330]                       invokeRestart <- base::invokeRestart
[17:40:05.330]                       is.null <- base::is.null
[17:40:05.330]                       muffled <- FALSE
[17:40:05.330]                       if (inherits(cond, "message")) {
[17:40:05.330]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.330]                         if (muffled) 
[17:40:05.330]                           invokeRestart("muffleMessage")
[17:40:05.330]                       }
[17:40:05.330]                       else if (inherits(cond, "warning")) {
[17:40:05.330]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.330]                         if (muffled) 
[17:40:05.330]                           invokeRestart("muffleWarning")
[17:40:05.330]                       }
[17:40:05.330]                       else if (inherits(cond, "condition")) {
[17:40:05.330]                         if (!is.null(pattern)) {
[17:40:05.330]                           computeRestarts <- base::computeRestarts
[17:40:05.330]                           grepl <- base::grepl
[17:40:05.330]                           restarts <- computeRestarts(cond)
[17:40:05.330]                           for (restart in restarts) {
[17:40:05.330]                             name <- restart$name
[17:40:05.330]                             if (is.null(name)) 
[17:40:05.330]                               next
[17:40:05.330]                             if (!grepl(pattern, name)) 
[17:40:05.330]                               next
[17:40:05.330]                             invokeRestart(restart)
[17:40:05.330]                             muffled <- TRUE
[17:40:05.330]                             break
[17:40:05.330]                           }
[17:40:05.330]                         }
[17:40:05.330]                       }
[17:40:05.330]                       invisible(muffled)
[17:40:05.330]                     }
[17:40:05.330]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.330]                   }
[17:40:05.330]                 }
[17:40:05.330]             }
[17:40:05.330]         }))
[17:40:05.330]     }, error = function(ex) {
[17:40:05.330]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:05.330]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.330]                 ...future.rng), started = ...future.startTime, 
[17:40:05.330]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:05.330]             version = "1.8"), class = "FutureResult")
[17:40:05.330]     }, finally = {
[17:40:05.330]         if (!identical(...future.workdir, getwd())) 
[17:40:05.330]             setwd(...future.workdir)
[17:40:05.330]         {
[17:40:05.330]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:05.330]                 ...future.oldOptions$nwarnings <- NULL
[17:40:05.330]             }
[17:40:05.330]             base::options(...future.oldOptions)
[17:40:05.330]             if (.Platform$OS.type == "windows") {
[17:40:05.330]                 old_names <- names(...future.oldEnvVars)
[17:40:05.330]                 envs <- base::Sys.getenv()
[17:40:05.330]                 names <- names(envs)
[17:40:05.330]                 common <- intersect(names, old_names)
[17:40:05.330]                 added <- setdiff(names, old_names)
[17:40:05.330]                 removed <- setdiff(old_names, names)
[17:40:05.330]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:05.330]                   envs[common]]
[17:40:05.330]                 NAMES <- toupper(changed)
[17:40:05.330]                 args <- list()
[17:40:05.330]                 for (kk in seq_along(NAMES)) {
[17:40:05.330]                   name <- changed[[kk]]
[17:40:05.330]                   NAME <- NAMES[[kk]]
[17:40:05.330]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.330]                     next
[17:40:05.330]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.330]                 }
[17:40:05.330]                 NAMES <- toupper(added)
[17:40:05.330]                 for (kk in seq_along(NAMES)) {
[17:40:05.330]                   name <- added[[kk]]
[17:40:05.330]                   NAME <- NAMES[[kk]]
[17:40:05.330]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.330]                     next
[17:40:05.330]                   args[[name]] <- ""
[17:40:05.330]                 }
[17:40:05.330]                 NAMES <- toupper(removed)
[17:40:05.330]                 for (kk in seq_along(NAMES)) {
[17:40:05.330]                   name <- removed[[kk]]
[17:40:05.330]                   NAME <- NAMES[[kk]]
[17:40:05.330]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.330]                     next
[17:40:05.330]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.330]                 }
[17:40:05.330]                 if (length(args) > 0) 
[17:40:05.330]                   base::do.call(base::Sys.setenv, args = args)
[17:40:05.330]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:05.330]             }
[17:40:05.330]             else {
[17:40:05.330]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:05.330]             }
[17:40:05.330]             {
[17:40:05.330]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:05.330]                   0L) {
[17:40:05.330]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:05.330]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:05.330]                   base::options(opts)
[17:40:05.330]                 }
[17:40:05.330]                 {
[17:40:05.330]                   {
[17:40:05.330]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:05.330]                     NULL
[17:40:05.330]                   }
[17:40:05.330]                   options(future.plan = NULL)
[17:40:05.330]                   if (is.na(NA_character_)) 
[17:40:05.330]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.330]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:05.330]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:05.330]                     .init = FALSE)
[17:40:05.330]                 }
[17:40:05.330]             }
[17:40:05.330]         }
[17:40:05.330]     })
[17:40:05.330]     if (TRUE) {
[17:40:05.330]         base::sink(type = "output", split = FALSE)
[17:40:05.330]         if (TRUE) {
[17:40:05.330]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:05.330]         }
[17:40:05.330]         else {
[17:40:05.330]             ...future.result["stdout"] <- base::list(NULL)
[17:40:05.330]         }
[17:40:05.330]         base::close(...future.stdout)
[17:40:05.330]         ...future.stdout <- NULL
[17:40:05.330]     }
[17:40:05.330]     ...future.result$conditions <- ...future.conditions
[17:40:05.330]     ...future.result$finished <- base::Sys.time()
[17:40:05.330]     ...future.result
[17:40:05.330] }
[17:40:05.381] MultisessionFuture started
[17:40:05.382] result() for ClusterFuture ...
[17:40:05.383] receiveMessageFromWorker() for ClusterFuture ...
[17:40:05.383] - Validating connection of MultisessionFuture
[17:40:05.414] - received message: FutureResult
[17:40:05.414] - Received FutureResult
[17:40:05.416] - Erased future from FutureRegistry
[17:40:05.417] result() for ClusterFuture ...
[17:40:05.417] - result already collected: FutureResult
[17:40:05.417] result() for ClusterFuture ... done
[17:40:05.417] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:05.417] result() for ClusterFuture ... done
[17:40:05.417] result() for ClusterFuture ...
[17:40:05.417] - result already collected: FutureResult
[17:40:05.417] result() for ClusterFuture ... done
[17:40:05.417] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:40:05.418] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: b28994a1-f639-ebfc-1ce2-bc31158b6db5
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[17:40:05.418] getGlobalsAndPackages() ...
[17:40:05.418] Searching for globals...
[17:40:05.426] - globals found: [2] ‘{’, ‘:::’
[17:40:05.426] Searching for globals ... DONE
[17:40:05.426] Resolving globals: FALSE
[17:40:05.427] 
[17:40:05.427] 
[17:40:05.427] getGlobalsAndPackages() ... DONE
[17:40:05.428] run() for ‘Future’ ...
[17:40:05.428] - state: ‘created’
[17:40:05.428] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:05.439] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:05.439] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:05.439]   - Field: ‘node’
[17:40:05.439]   - Field: ‘label’
[17:40:05.439]   - Field: ‘local’
[17:40:05.440]   - Field: ‘owner’
[17:40:05.440]   - Field: ‘envir’
[17:40:05.440]   - Field: ‘workers’
[17:40:05.440]   - Field: ‘packages’
[17:40:05.440]   - Field: ‘gc’
[17:40:05.440]   - Field: ‘conditions’
[17:40:05.440]   - Field: ‘persistent’
[17:40:05.440]   - Field: ‘expr’
[17:40:05.440]   - Field: ‘uuid’
[17:40:05.440]   - Field: ‘seed’
[17:40:05.441]   - Field: ‘version’
[17:40:05.441]   - Field: ‘result’
[17:40:05.441]   - Field: ‘asynchronous’
[17:40:05.441]   - Field: ‘calls’
[17:40:05.441]   - Field: ‘globals’
[17:40:05.441]   - Field: ‘stdout’
[17:40:05.441]   - Field: ‘earlySignal’
[17:40:05.441]   - Field: ‘lazy’
[17:40:05.441]   - Field: ‘state’
[17:40:05.442] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:05.442] - Launch lazy future ...
[17:40:05.442] Packages needed by the future expression (n = 0): <none>
[17:40:05.442] Packages needed by future strategies (n = 0): <none>
[17:40:05.443] {
[17:40:05.443]     {
[17:40:05.443]         {
[17:40:05.443]             ...future.startTime <- base::Sys.time()
[17:40:05.443]             {
[17:40:05.443]                 {
[17:40:05.443]                   {
[17:40:05.443]                     {
[17:40:05.443]                       base::local({
[17:40:05.443]                         has_future <- base::requireNamespace("future", 
[17:40:05.443]                           quietly = TRUE)
[17:40:05.443]                         if (has_future) {
[17:40:05.443]                           ns <- base::getNamespace("future")
[17:40:05.443]                           version <- ns[[".package"]][["version"]]
[17:40:05.443]                           if (is.null(version)) 
[17:40:05.443]                             version <- utils::packageVersion("future")
[17:40:05.443]                         }
[17:40:05.443]                         else {
[17:40:05.443]                           version <- NULL
[17:40:05.443]                         }
[17:40:05.443]                         if (!has_future || version < "1.8.0") {
[17:40:05.443]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:05.443]                             "", base::R.version$version.string), 
[17:40:05.443]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:05.443]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:05.443]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:05.443]                               "release", "version")], collapse = " "), 
[17:40:05.443]                             hostname = base::Sys.info()[["nodename"]])
[17:40:05.443]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:05.443]                             info)
[17:40:05.443]                           info <- base::paste(info, collapse = "; ")
[17:40:05.443]                           if (!has_future) {
[17:40:05.443]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:05.443]                               info)
[17:40:05.443]                           }
[17:40:05.443]                           else {
[17:40:05.443]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:05.443]                               info, version)
[17:40:05.443]                           }
[17:40:05.443]                           base::stop(msg)
[17:40:05.443]                         }
[17:40:05.443]                       })
[17:40:05.443]                     }
[17:40:05.443]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:05.443]                     base::options(mc.cores = 1L)
[17:40:05.443]                   }
[17:40:05.443]                   ...future.strategy.old <- future::plan("list")
[17:40:05.443]                   options(future.plan = NULL)
[17:40:05.443]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.443]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:05.443]                 }
[17:40:05.443]                 ...future.workdir <- getwd()
[17:40:05.443]             }
[17:40:05.443]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:05.443]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:05.443]         }
[17:40:05.443]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:05.443]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:05.443]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:05.443]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:05.443]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:05.443]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:05.443]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:05.443]             base::names(...future.oldOptions))
[17:40:05.443]     }
[17:40:05.443]     if (FALSE) {
[17:40:05.443]     }
[17:40:05.443]     else {
[17:40:05.443]         if (TRUE) {
[17:40:05.443]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:05.443]                 open = "w")
[17:40:05.443]         }
[17:40:05.443]         else {
[17:40:05.443]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:05.443]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:05.443]         }
[17:40:05.443]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:05.443]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:05.443]             base::sink(type = "output", split = FALSE)
[17:40:05.443]             base::close(...future.stdout)
[17:40:05.443]         }, add = TRUE)
[17:40:05.443]     }
[17:40:05.443]     ...future.frame <- base::sys.nframe()
[17:40:05.443]     ...future.conditions <- base::list()
[17:40:05.443]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:05.443]     if (FALSE) {
[17:40:05.443]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:05.443]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:05.443]     }
[17:40:05.443]     ...future.result <- base::tryCatch({
[17:40:05.443]         base::withCallingHandlers({
[17:40:05.443]             ...future.value <- base::withVisible(base::local({
[17:40:05.443]                 ...future.makeSendCondition <- base::local({
[17:40:05.443]                   sendCondition <- NULL
[17:40:05.443]                   function(frame = 1L) {
[17:40:05.443]                     if (is.function(sendCondition)) 
[17:40:05.443]                       return(sendCondition)
[17:40:05.443]                     ns <- getNamespace("parallel")
[17:40:05.443]                     if (exists("sendData", mode = "function", 
[17:40:05.443]                       envir = ns)) {
[17:40:05.443]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:05.443]                         envir = ns)
[17:40:05.443]                       envir <- sys.frame(frame)
[17:40:05.443]                       master <- NULL
[17:40:05.443]                       while (!identical(envir, .GlobalEnv) && 
[17:40:05.443]                         !identical(envir, emptyenv())) {
[17:40:05.443]                         if (exists("master", mode = "list", envir = envir, 
[17:40:05.443]                           inherits = FALSE)) {
[17:40:05.443]                           master <- get("master", mode = "list", 
[17:40:05.443]                             envir = envir, inherits = FALSE)
[17:40:05.443]                           if (inherits(master, c("SOCKnode", 
[17:40:05.443]                             "SOCK0node"))) {
[17:40:05.443]                             sendCondition <<- function(cond) {
[17:40:05.443]                               data <- list(type = "VALUE", value = cond, 
[17:40:05.443]                                 success = TRUE)
[17:40:05.443]                               parallel_sendData(master, data)
[17:40:05.443]                             }
[17:40:05.443]                             return(sendCondition)
[17:40:05.443]                           }
[17:40:05.443]                         }
[17:40:05.443]                         frame <- frame + 1L
[17:40:05.443]                         envir <- sys.frame(frame)
[17:40:05.443]                       }
[17:40:05.443]                     }
[17:40:05.443]                     sendCondition <<- function(cond) NULL
[17:40:05.443]                   }
[17:40:05.443]                 })
[17:40:05.443]                 withCallingHandlers({
[17:40:05.443]                   {
[17:40:05.443]                     future:::session_uuid(attributes = TRUE)
[17:40:05.443]                   }
[17:40:05.443]                 }, immediateCondition = function(cond) {
[17:40:05.443]                   sendCondition <- ...future.makeSendCondition()
[17:40:05.443]                   sendCondition(cond)
[17:40:05.443]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.443]                   {
[17:40:05.443]                     inherits <- base::inherits
[17:40:05.443]                     invokeRestart <- base::invokeRestart
[17:40:05.443]                     is.null <- base::is.null
[17:40:05.443]                     muffled <- FALSE
[17:40:05.443]                     if (inherits(cond, "message")) {
[17:40:05.443]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:05.443]                       if (muffled) 
[17:40:05.443]                         invokeRestart("muffleMessage")
[17:40:05.443]                     }
[17:40:05.443]                     else if (inherits(cond, "warning")) {
[17:40:05.443]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:05.443]                       if (muffled) 
[17:40:05.443]                         invokeRestart("muffleWarning")
[17:40:05.443]                     }
[17:40:05.443]                     else if (inherits(cond, "condition")) {
[17:40:05.443]                       if (!is.null(pattern)) {
[17:40:05.443]                         computeRestarts <- base::computeRestarts
[17:40:05.443]                         grepl <- base::grepl
[17:40:05.443]                         restarts <- computeRestarts(cond)
[17:40:05.443]                         for (restart in restarts) {
[17:40:05.443]                           name <- restart$name
[17:40:05.443]                           if (is.null(name)) 
[17:40:05.443]                             next
[17:40:05.443]                           if (!grepl(pattern, name)) 
[17:40:05.443]                             next
[17:40:05.443]                           invokeRestart(restart)
[17:40:05.443]                           muffled <- TRUE
[17:40:05.443]                           break
[17:40:05.443]                         }
[17:40:05.443]                       }
[17:40:05.443]                     }
[17:40:05.443]                     invisible(muffled)
[17:40:05.443]                   }
[17:40:05.443]                   muffleCondition(cond)
[17:40:05.443]                 })
[17:40:05.443]             }))
[17:40:05.443]             future::FutureResult(value = ...future.value$value, 
[17:40:05.443]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.443]                   ...future.rng), globalenv = if (FALSE) 
[17:40:05.443]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:05.443]                     ...future.globalenv.names))
[17:40:05.443]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:05.443]         }, condition = base::local({
[17:40:05.443]             c <- base::c
[17:40:05.443]             inherits <- base::inherits
[17:40:05.443]             invokeRestart <- base::invokeRestart
[17:40:05.443]             length <- base::length
[17:40:05.443]             list <- base::list
[17:40:05.443]             seq.int <- base::seq.int
[17:40:05.443]             signalCondition <- base::signalCondition
[17:40:05.443]             sys.calls <- base::sys.calls
[17:40:05.443]             `[[` <- base::`[[`
[17:40:05.443]             `+` <- base::`+`
[17:40:05.443]             `<<-` <- base::`<<-`
[17:40:05.443]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:05.443]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:05.443]                   3L)]
[17:40:05.443]             }
[17:40:05.443]             function(cond) {
[17:40:05.443]                 is_error <- inherits(cond, "error")
[17:40:05.443]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:05.443]                   NULL)
[17:40:05.443]                 if (is_error) {
[17:40:05.443]                   sessionInformation <- function() {
[17:40:05.443]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:05.443]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:05.443]                       search = base::search(), system = base::Sys.info())
[17:40:05.443]                   }
[17:40:05.443]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.443]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:05.443]                     cond$call), session = sessionInformation(), 
[17:40:05.443]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:05.443]                   signalCondition(cond)
[17:40:05.443]                 }
[17:40:05.443]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:05.443]                 "immediateCondition"))) {
[17:40:05.443]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:05.443]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.443]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:05.443]                   if (TRUE && !signal) {
[17:40:05.443]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.443]                     {
[17:40:05.443]                       inherits <- base::inherits
[17:40:05.443]                       invokeRestart <- base::invokeRestart
[17:40:05.443]                       is.null <- base::is.null
[17:40:05.443]                       muffled <- FALSE
[17:40:05.443]                       if (inherits(cond, "message")) {
[17:40:05.443]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.443]                         if (muffled) 
[17:40:05.443]                           invokeRestart("muffleMessage")
[17:40:05.443]                       }
[17:40:05.443]                       else if (inherits(cond, "warning")) {
[17:40:05.443]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.443]                         if (muffled) 
[17:40:05.443]                           invokeRestart("muffleWarning")
[17:40:05.443]                       }
[17:40:05.443]                       else if (inherits(cond, "condition")) {
[17:40:05.443]                         if (!is.null(pattern)) {
[17:40:05.443]                           computeRestarts <- base::computeRestarts
[17:40:05.443]                           grepl <- base::grepl
[17:40:05.443]                           restarts <- computeRestarts(cond)
[17:40:05.443]                           for (restart in restarts) {
[17:40:05.443]                             name <- restart$name
[17:40:05.443]                             if (is.null(name)) 
[17:40:05.443]                               next
[17:40:05.443]                             if (!grepl(pattern, name)) 
[17:40:05.443]                               next
[17:40:05.443]                             invokeRestart(restart)
[17:40:05.443]                             muffled <- TRUE
[17:40:05.443]                             break
[17:40:05.443]                           }
[17:40:05.443]                         }
[17:40:05.443]                       }
[17:40:05.443]                       invisible(muffled)
[17:40:05.443]                     }
[17:40:05.443]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.443]                   }
[17:40:05.443]                 }
[17:40:05.443]                 else {
[17:40:05.443]                   if (TRUE) {
[17:40:05.443]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.443]                     {
[17:40:05.443]                       inherits <- base::inherits
[17:40:05.443]                       invokeRestart <- base::invokeRestart
[17:40:05.443]                       is.null <- base::is.null
[17:40:05.443]                       muffled <- FALSE
[17:40:05.443]                       if (inherits(cond, "message")) {
[17:40:05.443]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.443]                         if (muffled) 
[17:40:05.443]                           invokeRestart("muffleMessage")
[17:40:05.443]                       }
[17:40:05.443]                       else if (inherits(cond, "warning")) {
[17:40:05.443]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.443]                         if (muffled) 
[17:40:05.443]                           invokeRestart("muffleWarning")
[17:40:05.443]                       }
[17:40:05.443]                       else if (inherits(cond, "condition")) {
[17:40:05.443]                         if (!is.null(pattern)) {
[17:40:05.443]                           computeRestarts <- base::computeRestarts
[17:40:05.443]                           grepl <- base::grepl
[17:40:05.443]                           restarts <- computeRestarts(cond)
[17:40:05.443]                           for (restart in restarts) {
[17:40:05.443]                             name <- restart$name
[17:40:05.443]                             if (is.null(name)) 
[17:40:05.443]                               next
[17:40:05.443]                             if (!grepl(pattern, name)) 
[17:40:05.443]                               next
[17:40:05.443]                             invokeRestart(restart)
[17:40:05.443]                             muffled <- TRUE
[17:40:05.443]                             break
[17:40:05.443]                           }
[17:40:05.443]                         }
[17:40:05.443]                       }
[17:40:05.443]                       invisible(muffled)
[17:40:05.443]                     }
[17:40:05.443]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.443]                   }
[17:40:05.443]                 }
[17:40:05.443]             }
[17:40:05.443]         }))
[17:40:05.443]     }, error = function(ex) {
[17:40:05.443]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:05.443]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.443]                 ...future.rng), started = ...future.startTime, 
[17:40:05.443]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:05.443]             version = "1.8"), class = "FutureResult")
[17:40:05.443]     }, finally = {
[17:40:05.443]         if (!identical(...future.workdir, getwd())) 
[17:40:05.443]             setwd(...future.workdir)
[17:40:05.443]         {
[17:40:05.443]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:05.443]                 ...future.oldOptions$nwarnings <- NULL
[17:40:05.443]             }
[17:40:05.443]             base::options(...future.oldOptions)
[17:40:05.443]             if (.Platform$OS.type == "windows") {
[17:40:05.443]                 old_names <- names(...future.oldEnvVars)
[17:40:05.443]                 envs <- base::Sys.getenv()
[17:40:05.443]                 names <- names(envs)
[17:40:05.443]                 common <- intersect(names, old_names)
[17:40:05.443]                 added <- setdiff(names, old_names)
[17:40:05.443]                 removed <- setdiff(old_names, names)
[17:40:05.443]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:05.443]                   envs[common]]
[17:40:05.443]                 NAMES <- toupper(changed)
[17:40:05.443]                 args <- list()
[17:40:05.443]                 for (kk in seq_along(NAMES)) {
[17:40:05.443]                   name <- changed[[kk]]
[17:40:05.443]                   NAME <- NAMES[[kk]]
[17:40:05.443]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.443]                     next
[17:40:05.443]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.443]                 }
[17:40:05.443]                 NAMES <- toupper(added)
[17:40:05.443]                 for (kk in seq_along(NAMES)) {
[17:40:05.443]                   name <- added[[kk]]
[17:40:05.443]                   NAME <- NAMES[[kk]]
[17:40:05.443]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.443]                     next
[17:40:05.443]                   args[[name]] <- ""
[17:40:05.443]                 }
[17:40:05.443]                 NAMES <- toupper(removed)
[17:40:05.443]                 for (kk in seq_along(NAMES)) {
[17:40:05.443]                   name <- removed[[kk]]
[17:40:05.443]                   NAME <- NAMES[[kk]]
[17:40:05.443]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.443]                     next
[17:40:05.443]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.443]                 }
[17:40:05.443]                 if (length(args) > 0) 
[17:40:05.443]                   base::do.call(base::Sys.setenv, args = args)
[17:40:05.443]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:05.443]             }
[17:40:05.443]             else {
[17:40:05.443]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:05.443]             }
[17:40:05.443]             {
[17:40:05.443]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:05.443]                   0L) {
[17:40:05.443]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:05.443]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:05.443]                   base::options(opts)
[17:40:05.443]                 }
[17:40:05.443]                 {
[17:40:05.443]                   {
[17:40:05.443]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:05.443]                     NULL
[17:40:05.443]                   }
[17:40:05.443]                   options(future.plan = NULL)
[17:40:05.443]                   if (is.na(NA_character_)) 
[17:40:05.443]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.443]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:05.443]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:05.443]                     .init = FALSE)
[17:40:05.443]                 }
[17:40:05.443]             }
[17:40:05.443]         }
[17:40:05.443]     })
[17:40:05.443]     if (TRUE) {
[17:40:05.443]         base::sink(type = "output", split = FALSE)
[17:40:05.443]         if (TRUE) {
[17:40:05.443]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:05.443]         }
[17:40:05.443]         else {
[17:40:05.443]             ...future.result["stdout"] <- base::list(NULL)
[17:40:05.443]         }
[17:40:05.443]         base::close(...future.stdout)
[17:40:05.443]         ...future.stdout <- NULL
[17:40:05.443]     }
[17:40:05.443]     ...future.result$conditions <- ...future.conditions
[17:40:05.443]     ...future.result$finished <- base::Sys.time()
[17:40:05.443]     ...future.result
[17:40:05.443] }
[17:40:05.446] MultisessionFuture started
[17:40:05.446] - Launch lazy future ... done
[17:40:05.446] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[17:40:05.447] result() for ClusterFuture ...
[17:40:05.447] receiveMessageFromWorker() for ClusterFuture ...
[17:40:05.447] - Validating connection of MultisessionFuture
[17:40:05.448] - received message: FutureResult
[17:40:05.448] - Received FutureResult
[17:40:05.448] - Erased future from FutureRegistry
[17:40:05.449] result() for ClusterFuture ...
[17:40:05.449] - result already collected: FutureResult
[17:40:05.449] result() for ClusterFuture ... done
[17:40:05.449] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:05.449] result() for ClusterFuture ... done
[17:40:05.449] result() for ClusterFuture ...
[17:40:05.449] - result already collected: FutureResult
[17:40:05.449] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: 6e45a5a7-34ca-673e-22bd-1bda26e03f25
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[17:40:05.450] getGlobalsAndPackages() ...
[17:40:05.450] Searching for globals...
[17:40:05.451] - globals found: [2] ‘{’, ‘:::’
[17:40:05.451] Searching for globals ... DONE
[17:40:05.451] Resolving globals: FALSE
[17:40:05.451] 
[17:40:05.451] 
[17:40:05.452] getGlobalsAndPackages() ... DONE
[17:40:05.452] run() for ‘Future’ ...
[17:40:05.452] - state: ‘created’
[17:40:05.452] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:05.463] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:05.463] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:05.463]   - Field: ‘node’
[17:40:05.463]   - Field: ‘label’
[17:40:05.464]   - Field: ‘local’
[17:40:05.464]   - Field: ‘owner’
[17:40:05.464]   - Field: ‘envir’
[17:40:05.464]   - Field: ‘workers’
[17:40:05.464]   - Field: ‘packages’
[17:40:05.464]   - Field: ‘gc’
[17:40:05.464]   - Field: ‘conditions’
[17:40:05.464]   - Field: ‘persistent’
[17:40:05.464]   - Field: ‘expr’
[17:40:05.464]   - Field: ‘uuid’
[17:40:05.465]   - Field: ‘seed’
[17:40:05.467]   - Field: ‘version’
[17:40:05.468]   - Field: ‘result’
[17:40:05.468]   - Field: ‘asynchronous’
[17:40:05.468]   - Field: ‘calls’
[17:40:05.468]   - Field: ‘globals’
[17:40:05.468]   - Field: ‘stdout’
[17:40:05.468]   - Field: ‘earlySignal’
[17:40:05.468]   - Field: ‘lazy’
[17:40:05.468]   - Field: ‘state’
[17:40:05.468] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:05.468] - Launch lazy future ...
[17:40:05.469] Packages needed by the future expression (n = 0): <none>
[17:40:05.469] Packages needed by future strategies (n = 0): <none>
[17:40:05.469] {
[17:40:05.469]     {
[17:40:05.469]         {
[17:40:05.469]             ...future.startTime <- base::Sys.time()
[17:40:05.469]             {
[17:40:05.469]                 {
[17:40:05.469]                   {
[17:40:05.469]                     {
[17:40:05.469]                       base::local({
[17:40:05.469]                         has_future <- base::requireNamespace("future", 
[17:40:05.469]                           quietly = TRUE)
[17:40:05.469]                         if (has_future) {
[17:40:05.469]                           ns <- base::getNamespace("future")
[17:40:05.469]                           version <- ns[[".package"]][["version"]]
[17:40:05.469]                           if (is.null(version)) 
[17:40:05.469]                             version <- utils::packageVersion("future")
[17:40:05.469]                         }
[17:40:05.469]                         else {
[17:40:05.469]                           version <- NULL
[17:40:05.469]                         }
[17:40:05.469]                         if (!has_future || version < "1.8.0") {
[17:40:05.469]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:05.469]                             "", base::R.version$version.string), 
[17:40:05.469]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:05.469]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:05.469]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:05.469]                               "release", "version")], collapse = " "), 
[17:40:05.469]                             hostname = base::Sys.info()[["nodename"]])
[17:40:05.469]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:05.469]                             info)
[17:40:05.469]                           info <- base::paste(info, collapse = "; ")
[17:40:05.469]                           if (!has_future) {
[17:40:05.469]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:05.469]                               info)
[17:40:05.469]                           }
[17:40:05.469]                           else {
[17:40:05.469]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:05.469]                               info, version)
[17:40:05.469]                           }
[17:40:05.469]                           base::stop(msg)
[17:40:05.469]                         }
[17:40:05.469]                       })
[17:40:05.469]                     }
[17:40:05.469]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:05.469]                     base::options(mc.cores = 1L)
[17:40:05.469]                   }
[17:40:05.469]                   ...future.strategy.old <- future::plan("list")
[17:40:05.469]                   options(future.plan = NULL)
[17:40:05.469]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.469]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:05.469]                 }
[17:40:05.469]                 ...future.workdir <- getwd()
[17:40:05.469]             }
[17:40:05.469]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:05.469]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:05.469]         }
[17:40:05.469]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:05.469]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:05.469]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:05.469]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:05.469]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:05.469]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:05.469]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:05.469]             base::names(...future.oldOptions))
[17:40:05.469]     }
[17:40:05.469]     if (FALSE) {
[17:40:05.469]     }
[17:40:05.469]     else {
[17:40:05.469]         if (TRUE) {
[17:40:05.469]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:05.469]                 open = "w")
[17:40:05.469]         }
[17:40:05.469]         else {
[17:40:05.469]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:05.469]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:05.469]         }
[17:40:05.469]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:05.469]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:05.469]             base::sink(type = "output", split = FALSE)
[17:40:05.469]             base::close(...future.stdout)
[17:40:05.469]         }, add = TRUE)
[17:40:05.469]     }
[17:40:05.469]     ...future.frame <- base::sys.nframe()
[17:40:05.469]     ...future.conditions <- base::list()
[17:40:05.469]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:05.469]     if (FALSE) {
[17:40:05.469]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:05.469]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:05.469]     }
[17:40:05.469]     ...future.result <- base::tryCatch({
[17:40:05.469]         base::withCallingHandlers({
[17:40:05.469]             ...future.value <- base::withVisible(base::local({
[17:40:05.469]                 ...future.makeSendCondition <- base::local({
[17:40:05.469]                   sendCondition <- NULL
[17:40:05.469]                   function(frame = 1L) {
[17:40:05.469]                     if (is.function(sendCondition)) 
[17:40:05.469]                       return(sendCondition)
[17:40:05.469]                     ns <- getNamespace("parallel")
[17:40:05.469]                     if (exists("sendData", mode = "function", 
[17:40:05.469]                       envir = ns)) {
[17:40:05.469]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:05.469]                         envir = ns)
[17:40:05.469]                       envir <- sys.frame(frame)
[17:40:05.469]                       master <- NULL
[17:40:05.469]                       while (!identical(envir, .GlobalEnv) && 
[17:40:05.469]                         !identical(envir, emptyenv())) {
[17:40:05.469]                         if (exists("master", mode = "list", envir = envir, 
[17:40:05.469]                           inherits = FALSE)) {
[17:40:05.469]                           master <- get("master", mode = "list", 
[17:40:05.469]                             envir = envir, inherits = FALSE)
[17:40:05.469]                           if (inherits(master, c("SOCKnode", 
[17:40:05.469]                             "SOCK0node"))) {
[17:40:05.469]                             sendCondition <<- function(cond) {
[17:40:05.469]                               data <- list(type = "VALUE", value = cond, 
[17:40:05.469]                                 success = TRUE)
[17:40:05.469]                               parallel_sendData(master, data)
[17:40:05.469]                             }
[17:40:05.469]                             return(sendCondition)
[17:40:05.469]                           }
[17:40:05.469]                         }
[17:40:05.469]                         frame <- frame + 1L
[17:40:05.469]                         envir <- sys.frame(frame)
[17:40:05.469]                       }
[17:40:05.469]                     }
[17:40:05.469]                     sendCondition <<- function(cond) NULL
[17:40:05.469]                   }
[17:40:05.469]                 })
[17:40:05.469]                 withCallingHandlers({
[17:40:05.469]                   {
[17:40:05.469]                     future:::session_uuid(attributes = TRUE)
[17:40:05.469]                   }
[17:40:05.469]                 }, immediateCondition = function(cond) {
[17:40:05.469]                   sendCondition <- ...future.makeSendCondition()
[17:40:05.469]                   sendCondition(cond)
[17:40:05.469]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.469]                   {
[17:40:05.469]                     inherits <- base::inherits
[17:40:05.469]                     invokeRestart <- base::invokeRestart
[17:40:05.469]                     is.null <- base::is.null
[17:40:05.469]                     muffled <- FALSE
[17:40:05.469]                     if (inherits(cond, "message")) {
[17:40:05.469]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:05.469]                       if (muffled) 
[17:40:05.469]                         invokeRestart("muffleMessage")
[17:40:05.469]                     }
[17:40:05.469]                     else if (inherits(cond, "warning")) {
[17:40:05.469]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:05.469]                       if (muffled) 
[17:40:05.469]                         invokeRestart("muffleWarning")
[17:40:05.469]                     }
[17:40:05.469]                     else if (inherits(cond, "condition")) {
[17:40:05.469]                       if (!is.null(pattern)) {
[17:40:05.469]                         computeRestarts <- base::computeRestarts
[17:40:05.469]                         grepl <- base::grepl
[17:40:05.469]                         restarts <- computeRestarts(cond)
[17:40:05.469]                         for (restart in restarts) {
[17:40:05.469]                           name <- restart$name
[17:40:05.469]                           if (is.null(name)) 
[17:40:05.469]                             next
[17:40:05.469]                           if (!grepl(pattern, name)) 
[17:40:05.469]                             next
[17:40:05.469]                           invokeRestart(restart)
[17:40:05.469]                           muffled <- TRUE
[17:40:05.469]                           break
[17:40:05.469]                         }
[17:40:05.469]                       }
[17:40:05.469]                     }
[17:40:05.469]                     invisible(muffled)
[17:40:05.469]                   }
[17:40:05.469]                   muffleCondition(cond)
[17:40:05.469]                 })
[17:40:05.469]             }))
[17:40:05.469]             future::FutureResult(value = ...future.value$value, 
[17:40:05.469]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.469]                   ...future.rng), globalenv = if (FALSE) 
[17:40:05.469]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:05.469]                     ...future.globalenv.names))
[17:40:05.469]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:05.469]         }, condition = base::local({
[17:40:05.469]             c <- base::c
[17:40:05.469]             inherits <- base::inherits
[17:40:05.469]             invokeRestart <- base::invokeRestart
[17:40:05.469]             length <- base::length
[17:40:05.469]             list <- base::list
[17:40:05.469]             seq.int <- base::seq.int
[17:40:05.469]             signalCondition <- base::signalCondition
[17:40:05.469]             sys.calls <- base::sys.calls
[17:40:05.469]             `[[` <- base::`[[`
[17:40:05.469]             `+` <- base::`+`
[17:40:05.469]             `<<-` <- base::`<<-`
[17:40:05.469]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:05.469]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:05.469]                   3L)]
[17:40:05.469]             }
[17:40:05.469]             function(cond) {
[17:40:05.469]                 is_error <- inherits(cond, "error")
[17:40:05.469]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:05.469]                   NULL)
[17:40:05.469]                 if (is_error) {
[17:40:05.469]                   sessionInformation <- function() {
[17:40:05.469]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:05.469]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:05.469]                       search = base::search(), system = base::Sys.info())
[17:40:05.469]                   }
[17:40:05.469]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.469]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:05.469]                     cond$call), session = sessionInformation(), 
[17:40:05.469]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:05.469]                   signalCondition(cond)
[17:40:05.469]                 }
[17:40:05.469]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:05.469]                 "immediateCondition"))) {
[17:40:05.469]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:05.469]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.469]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:05.469]                   if (TRUE && !signal) {
[17:40:05.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.469]                     {
[17:40:05.469]                       inherits <- base::inherits
[17:40:05.469]                       invokeRestart <- base::invokeRestart
[17:40:05.469]                       is.null <- base::is.null
[17:40:05.469]                       muffled <- FALSE
[17:40:05.469]                       if (inherits(cond, "message")) {
[17:40:05.469]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.469]                         if (muffled) 
[17:40:05.469]                           invokeRestart("muffleMessage")
[17:40:05.469]                       }
[17:40:05.469]                       else if (inherits(cond, "warning")) {
[17:40:05.469]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.469]                         if (muffled) 
[17:40:05.469]                           invokeRestart("muffleWarning")
[17:40:05.469]                       }
[17:40:05.469]                       else if (inherits(cond, "condition")) {
[17:40:05.469]                         if (!is.null(pattern)) {
[17:40:05.469]                           computeRestarts <- base::computeRestarts
[17:40:05.469]                           grepl <- base::grepl
[17:40:05.469]                           restarts <- computeRestarts(cond)
[17:40:05.469]                           for (restart in restarts) {
[17:40:05.469]                             name <- restart$name
[17:40:05.469]                             if (is.null(name)) 
[17:40:05.469]                               next
[17:40:05.469]                             if (!grepl(pattern, name)) 
[17:40:05.469]                               next
[17:40:05.469]                             invokeRestart(restart)
[17:40:05.469]                             muffled <- TRUE
[17:40:05.469]                             break
[17:40:05.469]                           }
[17:40:05.469]                         }
[17:40:05.469]                       }
[17:40:05.469]                       invisible(muffled)
[17:40:05.469]                     }
[17:40:05.469]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.469]                   }
[17:40:05.469]                 }
[17:40:05.469]                 else {
[17:40:05.469]                   if (TRUE) {
[17:40:05.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.469]                     {
[17:40:05.469]                       inherits <- base::inherits
[17:40:05.469]                       invokeRestart <- base::invokeRestart
[17:40:05.469]                       is.null <- base::is.null
[17:40:05.469]                       muffled <- FALSE
[17:40:05.469]                       if (inherits(cond, "message")) {
[17:40:05.469]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.469]                         if (muffled) 
[17:40:05.469]                           invokeRestart("muffleMessage")
[17:40:05.469]                       }
[17:40:05.469]                       else if (inherits(cond, "warning")) {
[17:40:05.469]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.469]                         if (muffled) 
[17:40:05.469]                           invokeRestart("muffleWarning")
[17:40:05.469]                       }
[17:40:05.469]                       else if (inherits(cond, "condition")) {
[17:40:05.469]                         if (!is.null(pattern)) {
[17:40:05.469]                           computeRestarts <- base::computeRestarts
[17:40:05.469]                           grepl <- base::grepl
[17:40:05.469]                           restarts <- computeRestarts(cond)
[17:40:05.469]                           for (restart in restarts) {
[17:40:05.469]                             name <- restart$name
[17:40:05.469]                             if (is.null(name)) 
[17:40:05.469]                               next
[17:40:05.469]                             if (!grepl(pattern, name)) 
[17:40:05.469]                               next
[17:40:05.469]                             invokeRestart(restart)
[17:40:05.469]                             muffled <- TRUE
[17:40:05.469]                             break
[17:40:05.469]                           }
[17:40:05.469]                         }
[17:40:05.469]                       }
[17:40:05.469]                       invisible(muffled)
[17:40:05.469]                     }
[17:40:05.469]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.469]                   }
[17:40:05.469]                 }
[17:40:05.469]             }
[17:40:05.469]         }))
[17:40:05.469]     }, error = function(ex) {
[17:40:05.469]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:05.469]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.469]                 ...future.rng), started = ...future.startTime, 
[17:40:05.469]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:05.469]             version = "1.8"), class = "FutureResult")
[17:40:05.469]     }, finally = {
[17:40:05.469]         if (!identical(...future.workdir, getwd())) 
[17:40:05.469]             setwd(...future.workdir)
[17:40:05.469]         {
[17:40:05.469]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:05.469]                 ...future.oldOptions$nwarnings <- NULL
[17:40:05.469]             }
[17:40:05.469]             base::options(...future.oldOptions)
[17:40:05.469]             if (.Platform$OS.type == "windows") {
[17:40:05.469]                 old_names <- names(...future.oldEnvVars)
[17:40:05.469]                 envs <- base::Sys.getenv()
[17:40:05.469]                 names <- names(envs)
[17:40:05.469]                 common <- intersect(names, old_names)
[17:40:05.469]                 added <- setdiff(names, old_names)
[17:40:05.469]                 removed <- setdiff(old_names, names)
[17:40:05.469]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:05.469]                   envs[common]]
[17:40:05.469]                 NAMES <- toupper(changed)
[17:40:05.469]                 args <- list()
[17:40:05.469]                 for (kk in seq_along(NAMES)) {
[17:40:05.469]                   name <- changed[[kk]]
[17:40:05.469]                   NAME <- NAMES[[kk]]
[17:40:05.469]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.469]                     next
[17:40:05.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.469]                 }
[17:40:05.469]                 NAMES <- toupper(added)
[17:40:05.469]                 for (kk in seq_along(NAMES)) {
[17:40:05.469]                   name <- added[[kk]]
[17:40:05.469]                   NAME <- NAMES[[kk]]
[17:40:05.469]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.469]                     next
[17:40:05.469]                   args[[name]] <- ""
[17:40:05.469]                 }
[17:40:05.469]                 NAMES <- toupper(removed)
[17:40:05.469]                 for (kk in seq_along(NAMES)) {
[17:40:05.469]                   name <- removed[[kk]]
[17:40:05.469]                   NAME <- NAMES[[kk]]
[17:40:05.469]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.469]                     next
[17:40:05.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.469]                 }
[17:40:05.469]                 if (length(args) > 0) 
[17:40:05.469]                   base::do.call(base::Sys.setenv, args = args)
[17:40:05.469]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:05.469]             }
[17:40:05.469]             else {
[17:40:05.469]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:05.469]             }
[17:40:05.469]             {
[17:40:05.469]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:05.469]                   0L) {
[17:40:05.469]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:05.469]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:05.469]                   base::options(opts)
[17:40:05.469]                 }
[17:40:05.469]                 {
[17:40:05.469]                   {
[17:40:05.469]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:05.469]                     NULL
[17:40:05.469]                   }
[17:40:05.469]                   options(future.plan = NULL)
[17:40:05.469]                   if (is.na(NA_character_)) 
[17:40:05.469]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.469]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:05.469]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:05.469]                     .init = FALSE)
[17:40:05.469]                 }
[17:40:05.469]             }
[17:40:05.469]         }
[17:40:05.469]     })
[17:40:05.469]     if (TRUE) {
[17:40:05.469]         base::sink(type = "output", split = FALSE)
[17:40:05.469]         if (TRUE) {
[17:40:05.469]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:05.469]         }
[17:40:05.469]         else {
[17:40:05.469]             ...future.result["stdout"] <- base::list(NULL)
[17:40:05.469]         }
[17:40:05.469]         base::close(...future.stdout)
[17:40:05.469]         ...future.stdout <- NULL
[17:40:05.469]     }
[17:40:05.469]     ...future.result$conditions <- ...future.conditions
[17:40:05.469]     ...future.result$finished <- base::Sys.time()
[17:40:05.469]     ...future.result
[17:40:05.469] }
[17:40:05.472] MultisessionFuture started
[17:40:05.472] - Launch lazy future ... done
[17:40:05.472] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[17:40:05.473] result() for ClusterFuture ...
[17:40:05.473] receiveMessageFromWorker() for ClusterFuture ...
[17:40:05.473] - Validating connection of MultisessionFuture
[17:40:05.477] - received message: FutureResult
[17:40:05.477] - Received FutureResult
[17:40:05.477] - Erased future from FutureRegistry
[17:40:05.478] result() for ClusterFuture ...
[17:40:05.478] - result already collected: FutureResult
[17:40:05.478] result() for ClusterFuture ... done
[17:40:05.478] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:05.478] result() for ClusterFuture ... done
[17:40:05.478] result() for ClusterFuture ...
[17:40:05.478] - result already collected: FutureResult
[17:40:05.478] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: 6e45a5a7-34ca-673e-22bd-1bda26e03f25
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[17:40:05.478] getGlobalsAndPackages() ...
[17:40:05.479] Searching for globals...
[17:40:05.479] - globals found: [3] ‘{’, ‘$’, ‘f1’
[17:40:05.480] Searching for globals ... DONE
[17:40:05.480] Resolving globals: FALSE
[17:40:05.482] The total size of the 1 globals is 1.56 MiB (1638048 bytes)
[17:40:05.483] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[17:40:05.483] - globals: [1] ‘f1’
[17:40:05.483] 
[17:40:05.483] getGlobalsAndPackages() ... DONE
[17:40:05.483] run() for ‘Future’ ...
[17:40:05.483] - state: ‘created’
[17:40:05.483] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:05.493] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:05.494] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:05.494]   - Field: ‘node’
[17:40:05.494]   - Field: ‘label’
[17:40:05.494]   - Field: ‘local’
[17:40:05.494]   - Field: ‘owner’
[17:40:05.494]   - Field: ‘envir’
[17:40:05.494]   - Field: ‘workers’
[17:40:05.494]   - Field: ‘packages’
[17:40:05.494]   - Field: ‘gc’
[17:40:05.494]   - Field: ‘conditions’
[17:40:05.494]   - Field: ‘persistent’
[17:40:05.495]   - Field: ‘expr’
[17:40:05.495]   - Field: ‘uuid’
[17:40:05.495]   - Field: ‘seed’
[17:40:05.495]   - Field: ‘version’
[17:40:05.495]   - Field: ‘result’
[17:40:05.495]   - Field: ‘asynchronous’
[17:40:05.495]   - Field: ‘calls’
[17:40:05.495]   - Field: ‘globals’
[17:40:05.495]   - Field: ‘stdout’
[17:40:05.495]   - Field: ‘earlySignal’
[17:40:05.495]   - Field: ‘lazy’
[17:40:05.495]   - Field: ‘state’
[17:40:05.496] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:05.496] - Launch lazy future ...
[17:40:05.496] Packages needed by the future expression (n = 0): <none>
[17:40:05.496] Packages needed by future strategies (n = 0): <none>
[17:40:05.496] {
[17:40:05.496]     {
[17:40:05.496]         {
[17:40:05.496]             ...future.startTime <- base::Sys.time()
[17:40:05.496]             {
[17:40:05.496]                 {
[17:40:05.496]                   {
[17:40:05.496]                     {
[17:40:05.496]                       base::local({
[17:40:05.496]                         has_future <- base::requireNamespace("future", 
[17:40:05.496]                           quietly = TRUE)
[17:40:05.496]                         if (has_future) {
[17:40:05.496]                           ns <- base::getNamespace("future")
[17:40:05.496]                           version <- ns[[".package"]][["version"]]
[17:40:05.496]                           if (is.null(version)) 
[17:40:05.496]                             version <- utils::packageVersion("future")
[17:40:05.496]                         }
[17:40:05.496]                         else {
[17:40:05.496]                           version <- NULL
[17:40:05.496]                         }
[17:40:05.496]                         if (!has_future || version < "1.8.0") {
[17:40:05.496]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:05.496]                             "", base::R.version$version.string), 
[17:40:05.496]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:05.496]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:05.496]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:05.496]                               "release", "version")], collapse = " "), 
[17:40:05.496]                             hostname = base::Sys.info()[["nodename"]])
[17:40:05.496]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:05.496]                             info)
[17:40:05.496]                           info <- base::paste(info, collapse = "; ")
[17:40:05.496]                           if (!has_future) {
[17:40:05.496]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:05.496]                               info)
[17:40:05.496]                           }
[17:40:05.496]                           else {
[17:40:05.496]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:05.496]                               info, version)
[17:40:05.496]                           }
[17:40:05.496]                           base::stop(msg)
[17:40:05.496]                         }
[17:40:05.496]                       })
[17:40:05.496]                     }
[17:40:05.496]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:05.496]                     base::options(mc.cores = 1L)
[17:40:05.496]                   }
[17:40:05.496]                   ...future.strategy.old <- future::plan("list")
[17:40:05.496]                   options(future.plan = NULL)
[17:40:05.496]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.496]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:05.496]                 }
[17:40:05.496]                 ...future.workdir <- getwd()
[17:40:05.496]             }
[17:40:05.496]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:05.496]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:05.496]         }
[17:40:05.496]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:05.496]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:05.496]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:05.496]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:05.496]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:05.496]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:05.496]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:05.496]             base::names(...future.oldOptions))
[17:40:05.496]     }
[17:40:05.496]     if (FALSE) {
[17:40:05.496]     }
[17:40:05.496]     else {
[17:40:05.496]         if (TRUE) {
[17:40:05.496]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:05.496]                 open = "w")
[17:40:05.496]         }
[17:40:05.496]         else {
[17:40:05.496]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:05.496]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:05.496]         }
[17:40:05.496]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:05.496]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:05.496]             base::sink(type = "output", split = FALSE)
[17:40:05.496]             base::close(...future.stdout)
[17:40:05.496]         }, add = TRUE)
[17:40:05.496]     }
[17:40:05.496]     ...future.frame <- base::sys.nframe()
[17:40:05.496]     ...future.conditions <- base::list()
[17:40:05.496]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:05.496]     if (FALSE) {
[17:40:05.496]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:05.496]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:05.496]     }
[17:40:05.496]     ...future.result <- base::tryCatch({
[17:40:05.496]         base::withCallingHandlers({
[17:40:05.496]             ...future.value <- base::withVisible(base::local({
[17:40:05.496]                 ...future.makeSendCondition <- base::local({
[17:40:05.496]                   sendCondition <- NULL
[17:40:05.496]                   function(frame = 1L) {
[17:40:05.496]                     if (is.function(sendCondition)) 
[17:40:05.496]                       return(sendCondition)
[17:40:05.496]                     ns <- getNamespace("parallel")
[17:40:05.496]                     if (exists("sendData", mode = "function", 
[17:40:05.496]                       envir = ns)) {
[17:40:05.496]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:05.496]                         envir = ns)
[17:40:05.496]                       envir <- sys.frame(frame)
[17:40:05.496]                       master <- NULL
[17:40:05.496]                       while (!identical(envir, .GlobalEnv) && 
[17:40:05.496]                         !identical(envir, emptyenv())) {
[17:40:05.496]                         if (exists("master", mode = "list", envir = envir, 
[17:40:05.496]                           inherits = FALSE)) {
[17:40:05.496]                           master <- get("master", mode = "list", 
[17:40:05.496]                             envir = envir, inherits = FALSE)
[17:40:05.496]                           if (inherits(master, c("SOCKnode", 
[17:40:05.496]                             "SOCK0node"))) {
[17:40:05.496]                             sendCondition <<- function(cond) {
[17:40:05.496]                               data <- list(type = "VALUE", value = cond, 
[17:40:05.496]                                 success = TRUE)
[17:40:05.496]                               parallel_sendData(master, data)
[17:40:05.496]                             }
[17:40:05.496]                             return(sendCondition)
[17:40:05.496]                           }
[17:40:05.496]                         }
[17:40:05.496]                         frame <- frame + 1L
[17:40:05.496]                         envir <- sys.frame(frame)
[17:40:05.496]                       }
[17:40:05.496]                     }
[17:40:05.496]                     sendCondition <<- function(cond) NULL
[17:40:05.496]                   }
[17:40:05.496]                 })
[17:40:05.496]                 withCallingHandlers({
[17:40:05.496]                   {
[17:40:05.496]                     f1$owner
[17:40:05.496]                   }
[17:40:05.496]                 }, immediateCondition = function(cond) {
[17:40:05.496]                   sendCondition <- ...future.makeSendCondition()
[17:40:05.496]                   sendCondition(cond)
[17:40:05.496]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.496]                   {
[17:40:05.496]                     inherits <- base::inherits
[17:40:05.496]                     invokeRestart <- base::invokeRestart
[17:40:05.496]                     is.null <- base::is.null
[17:40:05.496]                     muffled <- FALSE
[17:40:05.496]                     if (inherits(cond, "message")) {
[17:40:05.496]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:05.496]                       if (muffled) 
[17:40:05.496]                         invokeRestart("muffleMessage")
[17:40:05.496]                     }
[17:40:05.496]                     else if (inherits(cond, "warning")) {
[17:40:05.496]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:05.496]                       if (muffled) 
[17:40:05.496]                         invokeRestart("muffleWarning")
[17:40:05.496]                     }
[17:40:05.496]                     else if (inherits(cond, "condition")) {
[17:40:05.496]                       if (!is.null(pattern)) {
[17:40:05.496]                         computeRestarts <- base::computeRestarts
[17:40:05.496]                         grepl <- base::grepl
[17:40:05.496]                         restarts <- computeRestarts(cond)
[17:40:05.496]                         for (restart in restarts) {
[17:40:05.496]                           name <- restart$name
[17:40:05.496]                           if (is.null(name)) 
[17:40:05.496]                             next
[17:40:05.496]                           if (!grepl(pattern, name)) 
[17:40:05.496]                             next
[17:40:05.496]                           invokeRestart(restart)
[17:40:05.496]                           muffled <- TRUE
[17:40:05.496]                           break
[17:40:05.496]                         }
[17:40:05.496]                       }
[17:40:05.496]                     }
[17:40:05.496]                     invisible(muffled)
[17:40:05.496]                   }
[17:40:05.496]                   muffleCondition(cond)
[17:40:05.496]                 })
[17:40:05.496]             }))
[17:40:05.496]             future::FutureResult(value = ...future.value$value, 
[17:40:05.496]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.496]                   ...future.rng), globalenv = if (FALSE) 
[17:40:05.496]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:05.496]                     ...future.globalenv.names))
[17:40:05.496]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:05.496]         }, condition = base::local({
[17:40:05.496]             c <- base::c
[17:40:05.496]             inherits <- base::inherits
[17:40:05.496]             invokeRestart <- base::invokeRestart
[17:40:05.496]             length <- base::length
[17:40:05.496]             list <- base::list
[17:40:05.496]             seq.int <- base::seq.int
[17:40:05.496]             signalCondition <- base::signalCondition
[17:40:05.496]             sys.calls <- base::sys.calls
[17:40:05.496]             `[[` <- base::`[[`
[17:40:05.496]             `+` <- base::`+`
[17:40:05.496]             `<<-` <- base::`<<-`
[17:40:05.496]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:05.496]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:05.496]                   3L)]
[17:40:05.496]             }
[17:40:05.496]             function(cond) {
[17:40:05.496]                 is_error <- inherits(cond, "error")
[17:40:05.496]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:05.496]                   NULL)
[17:40:05.496]                 if (is_error) {
[17:40:05.496]                   sessionInformation <- function() {
[17:40:05.496]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:05.496]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:05.496]                       search = base::search(), system = base::Sys.info())
[17:40:05.496]                   }
[17:40:05.496]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.496]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:05.496]                     cond$call), session = sessionInformation(), 
[17:40:05.496]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:05.496]                   signalCondition(cond)
[17:40:05.496]                 }
[17:40:05.496]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:05.496]                 "immediateCondition"))) {
[17:40:05.496]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:05.496]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.496]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:05.496]                   if (TRUE && !signal) {
[17:40:05.496]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.496]                     {
[17:40:05.496]                       inherits <- base::inherits
[17:40:05.496]                       invokeRestart <- base::invokeRestart
[17:40:05.496]                       is.null <- base::is.null
[17:40:05.496]                       muffled <- FALSE
[17:40:05.496]                       if (inherits(cond, "message")) {
[17:40:05.496]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.496]                         if (muffled) 
[17:40:05.496]                           invokeRestart("muffleMessage")
[17:40:05.496]                       }
[17:40:05.496]                       else if (inherits(cond, "warning")) {
[17:40:05.496]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.496]                         if (muffled) 
[17:40:05.496]                           invokeRestart("muffleWarning")
[17:40:05.496]                       }
[17:40:05.496]                       else if (inherits(cond, "condition")) {
[17:40:05.496]                         if (!is.null(pattern)) {
[17:40:05.496]                           computeRestarts <- base::computeRestarts
[17:40:05.496]                           grepl <- base::grepl
[17:40:05.496]                           restarts <- computeRestarts(cond)
[17:40:05.496]                           for (restart in restarts) {
[17:40:05.496]                             name <- restart$name
[17:40:05.496]                             if (is.null(name)) 
[17:40:05.496]                               next
[17:40:05.496]                             if (!grepl(pattern, name)) 
[17:40:05.496]                               next
[17:40:05.496]                             invokeRestart(restart)
[17:40:05.496]                             muffled <- TRUE
[17:40:05.496]                             break
[17:40:05.496]                           }
[17:40:05.496]                         }
[17:40:05.496]                       }
[17:40:05.496]                       invisible(muffled)
[17:40:05.496]                     }
[17:40:05.496]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.496]                   }
[17:40:05.496]                 }
[17:40:05.496]                 else {
[17:40:05.496]                   if (TRUE) {
[17:40:05.496]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.496]                     {
[17:40:05.496]                       inherits <- base::inherits
[17:40:05.496]                       invokeRestart <- base::invokeRestart
[17:40:05.496]                       is.null <- base::is.null
[17:40:05.496]                       muffled <- FALSE
[17:40:05.496]                       if (inherits(cond, "message")) {
[17:40:05.496]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.496]                         if (muffled) 
[17:40:05.496]                           invokeRestart("muffleMessage")
[17:40:05.496]                       }
[17:40:05.496]                       else if (inherits(cond, "warning")) {
[17:40:05.496]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.496]                         if (muffled) 
[17:40:05.496]                           invokeRestart("muffleWarning")
[17:40:05.496]                       }
[17:40:05.496]                       else if (inherits(cond, "condition")) {
[17:40:05.496]                         if (!is.null(pattern)) {
[17:40:05.496]                           computeRestarts <- base::computeRestarts
[17:40:05.496]                           grepl <- base::grepl
[17:40:05.496]                           restarts <- computeRestarts(cond)
[17:40:05.496]                           for (restart in restarts) {
[17:40:05.496]                             name <- restart$name
[17:40:05.496]                             if (is.null(name)) 
[17:40:05.496]                               next
[17:40:05.496]                             if (!grepl(pattern, name)) 
[17:40:05.496]                               next
[17:40:05.496]                             invokeRestart(restart)
[17:40:05.496]                             muffled <- TRUE
[17:40:05.496]                             break
[17:40:05.496]                           }
[17:40:05.496]                         }
[17:40:05.496]                       }
[17:40:05.496]                       invisible(muffled)
[17:40:05.496]                     }
[17:40:05.496]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.496]                   }
[17:40:05.496]                 }
[17:40:05.496]             }
[17:40:05.496]         }))
[17:40:05.496]     }, error = function(ex) {
[17:40:05.496]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:05.496]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.496]                 ...future.rng), started = ...future.startTime, 
[17:40:05.496]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:05.496]             version = "1.8"), class = "FutureResult")
[17:40:05.496]     }, finally = {
[17:40:05.496]         if (!identical(...future.workdir, getwd())) 
[17:40:05.496]             setwd(...future.workdir)
[17:40:05.496]         {
[17:40:05.496]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:05.496]                 ...future.oldOptions$nwarnings <- NULL
[17:40:05.496]             }
[17:40:05.496]             base::options(...future.oldOptions)
[17:40:05.496]             if (.Platform$OS.type == "windows") {
[17:40:05.496]                 old_names <- names(...future.oldEnvVars)
[17:40:05.496]                 envs <- base::Sys.getenv()
[17:40:05.496]                 names <- names(envs)
[17:40:05.496]                 common <- intersect(names, old_names)
[17:40:05.496]                 added <- setdiff(names, old_names)
[17:40:05.496]                 removed <- setdiff(old_names, names)
[17:40:05.496]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:05.496]                   envs[common]]
[17:40:05.496]                 NAMES <- toupper(changed)
[17:40:05.496]                 args <- list()
[17:40:05.496]                 for (kk in seq_along(NAMES)) {
[17:40:05.496]                   name <- changed[[kk]]
[17:40:05.496]                   NAME <- NAMES[[kk]]
[17:40:05.496]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.496]                     next
[17:40:05.496]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.496]                 }
[17:40:05.496]                 NAMES <- toupper(added)
[17:40:05.496]                 for (kk in seq_along(NAMES)) {
[17:40:05.496]                   name <- added[[kk]]
[17:40:05.496]                   NAME <- NAMES[[kk]]
[17:40:05.496]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.496]                     next
[17:40:05.496]                   args[[name]] <- ""
[17:40:05.496]                 }
[17:40:05.496]                 NAMES <- toupper(removed)
[17:40:05.496]                 for (kk in seq_along(NAMES)) {
[17:40:05.496]                   name <- removed[[kk]]
[17:40:05.496]                   NAME <- NAMES[[kk]]
[17:40:05.496]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.496]                     next
[17:40:05.496]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.496]                 }
[17:40:05.496]                 if (length(args) > 0) 
[17:40:05.496]                   base::do.call(base::Sys.setenv, args = args)
[17:40:05.496]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:05.496]             }
[17:40:05.496]             else {
[17:40:05.496]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:05.496]             }
[17:40:05.496]             {
[17:40:05.496]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:05.496]                   0L) {
[17:40:05.496]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:05.496]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:05.496]                   base::options(opts)
[17:40:05.496]                 }
[17:40:05.496]                 {
[17:40:05.496]                   {
[17:40:05.496]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:05.496]                     NULL
[17:40:05.496]                   }
[17:40:05.496]                   options(future.plan = NULL)
[17:40:05.496]                   if (is.na(NA_character_)) 
[17:40:05.496]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.496]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:05.496]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:05.496]                     .init = FALSE)
[17:40:05.496]                 }
[17:40:05.496]             }
[17:40:05.496]         }
[17:40:05.496]     })
[17:40:05.496]     if (TRUE) {
[17:40:05.496]         base::sink(type = "output", split = FALSE)
[17:40:05.496]         if (TRUE) {
[17:40:05.496]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:05.496]         }
[17:40:05.496]         else {
[17:40:05.496]             ...future.result["stdout"] <- base::list(NULL)
[17:40:05.496]         }
[17:40:05.496]         base::close(...future.stdout)
[17:40:05.496]         ...future.stdout <- NULL
[17:40:05.496]     }
[17:40:05.496]     ...future.result$conditions <- ...future.conditions
[17:40:05.496]     ...future.result$finished <- base::Sys.time()
[17:40:05.496]     ...future.result
[17:40:05.496] }
[17:40:05.499] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[17:40:05.501] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[17:40:05.553] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[17:40:05.553] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[17:40:05.553] MultisessionFuture started
[17:40:05.553] - Launch lazy future ... done
[17:40:05.554] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[17:40:05.554] result() for ClusterFuture ...
[17:40:05.554] receiveMessageFromWorker() for ClusterFuture ...
[17:40:05.554] - Validating connection of MultisessionFuture
[17:40:05.598] - received message: FutureResult
[17:40:05.598] - Received FutureResult
[17:40:05.598] - Erased future from FutureRegistry
[17:40:05.598] result() for ClusterFuture ...
[17:40:05.598] - result already collected: FutureResult
[17:40:05.599] result() for ClusterFuture ... done
[17:40:05.599] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:05.599] result() for ClusterFuture ... done
[17:40:05.599] result() for ClusterFuture ...
[17:40:05.599] - result already collected: FutureResult
[17:40:05.599] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: b28994a1-f639-ebfc-1ce2-bc31158b6db5
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[17:40:05.599] getGlobalsAndPackages() ...
[17:40:05.599] Searching for globals...
[17:40:05.600] - globals found: [3] ‘{’, ‘$’, ‘f1’
[17:40:05.600] Searching for globals ... DONE
[17:40:05.600] Resolving globals: FALSE
[17:40:05.602] The total size of the 1 globals is 1.56 MiB (1640984 bytes)
[17:40:05.603] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[17:40:05.603] - globals: [1] ‘f1’
[17:40:05.603] 
[17:40:05.603] getGlobalsAndPackages() ... DONE
[17:40:05.603] run() for ‘Future’ ...
[17:40:05.603] - state: ‘created’
[17:40:05.604] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:05.614] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:05.614] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:05.614]   - Field: ‘node’
[17:40:05.614]   - Field: ‘label’
[17:40:05.614]   - Field: ‘local’
[17:40:05.614]   - Field: ‘owner’
[17:40:05.614]   - Field: ‘envir’
[17:40:05.614]   - Field: ‘workers’
[17:40:05.614]   - Field: ‘packages’
[17:40:05.615]   - Field: ‘gc’
[17:40:05.615]   - Field: ‘conditions’
[17:40:05.615]   - Field: ‘persistent’
[17:40:05.615]   - Field: ‘expr’
[17:40:05.615]   - Field: ‘uuid’
[17:40:05.615]   - Field: ‘seed’
[17:40:05.615]   - Field: ‘version’
[17:40:05.615]   - Field: ‘result’
[17:40:05.615]   - Field: ‘asynchronous’
[17:40:05.615]   - Field: ‘calls’
[17:40:05.615]   - Field: ‘globals’
[17:40:05.616]   - Field: ‘stdout’
[17:40:05.616]   - Field: ‘earlySignal’
[17:40:05.616]   - Field: ‘lazy’
[17:40:05.616]   - Field: ‘state’
[17:40:05.616] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:05.616] - Launch lazy future ...
[17:40:05.616] Packages needed by the future expression (n = 0): <none>
[17:40:05.616] Packages needed by future strategies (n = 0): <none>
[17:40:05.617] {
[17:40:05.617]     {
[17:40:05.617]         {
[17:40:05.617]             ...future.startTime <- base::Sys.time()
[17:40:05.617]             {
[17:40:05.617]                 {
[17:40:05.617]                   {
[17:40:05.617]                     {
[17:40:05.617]                       base::local({
[17:40:05.617]                         has_future <- base::requireNamespace("future", 
[17:40:05.617]                           quietly = TRUE)
[17:40:05.617]                         if (has_future) {
[17:40:05.617]                           ns <- base::getNamespace("future")
[17:40:05.617]                           version <- ns[[".package"]][["version"]]
[17:40:05.617]                           if (is.null(version)) 
[17:40:05.617]                             version <- utils::packageVersion("future")
[17:40:05.617]                         }
[17:40:05.617]                         else {
[17:40:05.617]                           version <- NULL
[17:40:05.617]                         }
[17:40:05.617]                         if (!has_future || version < "1.8.0") {
[17:40:05.617]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:05.617]                             "", base::R.version$version.string), 
[17:40:05.617]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:05.617]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:05.617]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:05.617]                               "release", "version")], collapse = " "), 
[17:40:05.617]                             hostname = base::Sys.info()[["nodename"]])
[17:40:05.617]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:05.617]                             info)
[17:40:05.617]                           info <- base::paste(info, collapse = "; ")
[17:40:05.617]                           if (!has_future) {
[17:40:05.617]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:05.617]                               info)
[17:40:05.617]                           }
[17:40:05.617]                           else {
[17:40:05.617]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:05.617]                               info, version)
[17:40:05.617]                           }
[17:40:05.617]                           base::stop(msg)
[17:40:05.617]                         }
[17:40:05.617]                       })
[17:40:05.617]                     }
[17:40:05.617]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:05.617]                     base::options(mc.cores = 1L)
[17:40:05.617]                   }
[17:40:05.617]                   ...future.strategy.old <- future::plan("list")
[17:40:05.617]                   options(future.plan = NULL)
[17:40:05.617]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.617]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:05.617]                 }
[17:40:05.617]                 ...future.workdir <- getwd()
[17:40:05.617]             }
[17:40:05.617]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:05.617]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:05.617]         }
[17:40:05.617]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:05.617]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:05.617]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:05.617]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:05.617]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:05.617]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:05.617]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:05.617]             base::names(...future.oldOptions))
[17:40:05.617]     }
[17:40:05.617]     if (FALSE) {
[17:40:05.617]     }
[17:40:05.617]     else {
[17:40:05.617]         if (TRUE) {
[17:40:05.617]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:05.617]                 open = "w")
[17:40:05.617]         }
[17:40:05.617]         else {
[17:40:05.617]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:05.617]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:05.617]         }
[17:40:05.617]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:05.617]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:05.617]             base::sink(type = "output", split = FALSE)
[17:40:05.617]             base::close(...future.stdout)
[17:40:05.617]         }, add = TRUE)
[17:40:05.617]     }
[17:40:05.617]     ...future.frame <- base::sys.nframe()
[17:40:05.617]     ...future.conditions <- base::list()
[17:40:05.617]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:05.617]     if (FALSE) {
[17:40:05.617]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:05.617]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:05.617]     }
[17:40:05.617]     ...future.result <- base::tryCatch({
[17:40:05.617]         base::withCallingHandlers({
[17:40:05.617]             ...future.value <- base::withVisible(base::local({
[17:40:05.617]                 ...future.makeSendCondition <- base::local({
[17:40:05.617]                   sendCondition <- NULL
[17:40:05.617]                   function(frame = 1L) {
[17:40:05.617]                     if (is.function(sendCondition)) 
[17:40:05.617]                       return(sendCondition)
[17:40:05.617]                     ns <- getNamespace("parallel")
[17:40:05.617]                     if (exists("sendData", mode = "function", 
[17:40:05.617]                       envir = ns)) {
[17:40:05.617]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:05.617]                         envir = ns)
[17:40:05.617]                       envir <- sys.frame(frame)
[17:40:05.617]                       master <- NULL
[17:40:05.617]                       while (!identical(envir, .GlobalEnv) && 
[17:40:05.617]                         !identical(envir, emptyenv())) {
[17:40:05.617]                         if (exists("master", mode = "list", envir = envir, 
[17:40:05.617]                           inherits = FALSE)) {
[17:40:05.617]                           master <- get("master", mode = "list", 
[17:40:05.617]                             envir = envir, inherits = FALSE)
[17:40:05.617]                           if (inherits(master, c("SOCKnode", 
[17:40:05.617]                             "SOCK0node"))) {
[17:40:05.617]                             sendCondition <<- function(cond) {
[17:40:05.617]                               data <- list(type = "VALUE", value = cond, 
[17:40:05.617]                                 success = TRUE)
[17:40:05.617]                               parallel_sendData(master, data)
[17:40:05.617]                             }
[17:40:05.617]                             return(sendCondition)
[17:40:05.617]                           }
[17:40:05.617]                         }
[17:40:05.617]                         frame <- frame + 1L
[17:40:05.617]                         envir <- sys.frame(frame)
[17:40:05.617]                       }
[17:40:05.617]                     }
[17:40:05.617]                     sendCondition <<- function(cond) NULL
[17:40:05.617]                   }
[17:40:05.617]                 })
[17:40:05.617]                 withCallingHandlers({
[17:40:05.617]                   {
[17:40:05.617]                     f1$owner
[17:40:05.617]                   }
[17:40:05.617]                 }, immediateCondition = function(cond) {
[17:40:05.617]                   sendCondition <- ...future.makeSendCondition()
[17:40:05.617]                   sendCondition(cond)
[17:40:05.617]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.617]                   {
[17:40:05.617]                     inherits <- base::inherits
[17:40:05.617]                     invokeRestart <- base::invokeRestart
[17:40:05.617]                     is.null <- base::is.null
[17:40:05.617]                     muffled <- FALSE
[17:40:05.617]                     if (inherits(cond, "message")) {
[17:40:05.617]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:05.617]                       if (muffled) 
[17:40:05.617]                         invokeRestart("muffleMessage")
[17:40:05.617]                     }
[17:40:05.617]                     else if (inherits(cond, "warning")) {
[17:40:05.617]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:05.617]                       if (muffled) 
[17:40:05.617]                         invokeRestart("muffleWarning")
[17:40:05.617]                     }
[17:40:05.617]                     else if (inherits(cond, "condition")) {
[17:40:05.617]                       if (!is.null(pattern)) {
[17:40:05.617]                         computeRestarts <- base::computeRestarts
[17:40:05.617]                         grepl <- base::grepl
[17:40:05.617]                         restarts <- computeRestarts(cond)
[17:40:05.617]                         for (restart in restarts) {
[17:40:05.617]                           name <- restart$name
[17:40:05.617]                           if (is.null(name)) 
[17:40:05.617]                             next
[17:40:05.617]                           if (!grepl(pattern, name)) 
[17:40:05.617]                             next
[17:40:05.617]                           invokeRestart(restart)
[17:40:05.617]                           muffled <- TRUE
[17:40:05.617]                           break
[17:40:05.617]                         }
[17:40:05.617]                       }
[17:40:05.617]                     }
[17:40:05.617]                     invisible(muffled)
[17:40:05.617]                   }
[17:40:05.617]                   muffleCondition(cond)
[17:40:05.617]                 })
[17:40:05.617]             }))
[17:40:05.617]             future::FutureResult(value = ...future.value$value, 
[17:40:05.617]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.617]                   ...future.rng), globalenv = if (FALSE) 
[17:40:05.617]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:05.617]                     ...future.globalenv.names))
[17:40:05.617]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:05.617]         }, condition = base::local({
[17:40:05.617]             c <- base::c
[17:40:05.617]             inherits <- base::inherits
[17:40:05.617]             invokeRestart <- base::invokeRestart
[17:40:05.617]             length <- base::length
[17:40:05.617]             list <- base::list
[17:40:05.617]             seq.int <- base::seq.int
[17:40:05.617]             signalCondition <- base::signalCondition
[17:40:05.617]             sys.calls <- base::sys.calls
[17:40:05.617]             `[[` <- base::`[[`
[17:40:05.617]             `+` <- base::`+`
[17:40:05.617]             `<<-` <- base::`<<-`
[17:40:05.617]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:05.617]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:05.617]                   3L)]
[17:40:05.617]             }
[17:40:05.617]             function(cond) {
[17:40:05.617]                 is_error <- inherits(cond, "error")
[17:40:05.617]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:05.617]                   NULL)
[17:40:05.617]                 if (is_error) {
[17:40:05.617]                   sessionInformation <- function() {
[17:40:05.617]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:05.617]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:05.617]                       search = base::search(), system = base::Sys.info())
[17:40:05.617]                   }
[17:40:05.617]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.617]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:05.617]                     cond$call), session = sessionInformation(), 
[17:40:05.617]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:05.617]                   signalCondition(cond)
[17:40:05.617]                 }
[17:40:05.617]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:05.617]                 "immediateCondition"))) {
[17:40:05.617]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:05.617]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.617]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:05.617]                   if (TRUE && !signal) {
[17:40:05.617]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.617]                     {
[17:40:05.617]                       inherits <- base::inherits
[17:40:05.617]                       invokeRestart <- base::invokeRestart
[17:40:05.617]                       is.null <- base::is.null
[17:40:05.617]                       muffled <- FALSE
[17:40:05.617]                       if (inherits(cond, "message")) {
[17:40:05.617]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.617]                         if (muffled) 
[17:40:05.617]                           invokeRestart("muffleMessage")
[17:40:05.617]                       }
[17:40:05.617]                       else if (inherits(cond, "warning")) {
[17:40:05.617]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.617]                         if (muffled) 
[17:40:05.617]                           invokeRestart("muffleWarning")
[17:40:05.617]                       }
[17:40:05.617]                       else if (inherits(cond, "condition")) {
[17:40:05.617]                         if (!is.null(pattern)) {
[17:40:05.617]                           computeRestarts <- base::computeRestarts
[17:40:05.617]                           grepl <- base::grepl
[17:40:05.617]                           restarts <- computeRestarts(cond)
[17:40:05.617]                           for (restart in restarts) {
[17:40:05.617]                             name <- restart$name
[17:40:05.617]                             if (is.null(name)) 
[17:40:05.617]                               next
[17:40:05.617]                             if (!grepl(pattern, name)) 
[17:40:05.617]                               next
[17:40:05.617]                             invokeRestart(restart)
[17:40:05.617]                             muffled <- TRUE
[17:40:05.617]                             break
[17:40:05.617]                           }
[17:40:05.617]                         }
[17:40:05.617]                       }
[17:40:05.617]                       invisible(muffled)
[17:40:05.617]                     }
[17:40:05.617]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.617]                   }
[17:40:05.617]                 }
[17:40:05.617]                 else {
[17:40:05.617]                   if (TRUE) {
[17:40:05.617]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.617]                     {
[17:40:05.617]                       inherits <- base::inherits
[17:40:05.617]                       invokeRestart <- base::invokeRestart
[17:40:05.617]                       is.null <- base::is.null
[17:40:05.617]                       muffled <- FALSE
[17:40:05.617]                       if (inherits(cond, "message")) {
[17:40:05.617]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.617]                         if (muffled) 
[17:40:05.617]                           invokeRestart("muffleMessage")
[17:40:05.617]                       }
[17:40:05.617]                       else if (inherits(cond, "warning")) {
[17:40:05.617]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.617]                         if (muffled) 
[17:40:05.617]                           invokeRestart("muffleWarning")
[17:40:05.617]                       }
[17:40:05.617]                       else if (inherits(cond, "condition")) {
[17:40:05.617]                         if (!is.null(pattern)) {
[17:40:05.617]                           computeRestarts <- base::computeRestarts
[17:40:05.617]                           grepl <- base::grepl
[17:40:05.617]                           restarts <- computeRestarts(cond)
[17:40:05.617]                           for (restart in restarts) {
[17:40:05.617]                             name <- restart$name
[17:40:05.617]                             if (is.null(name)) 
[17:40:05.617]                               next
[17:40:05.617]                             if (!grepl(pattern, name)) 
[17:40:05.617]                               next
[17:40:05.617]                             invokeRestart(restart)
[17:40:05.617]                             muffled <- TRUE
[17:40:05.617]                             break
[17:40:05.617]                           }
[17:40:05.617]                         }
[17:40:05.617]                       }
[17:40:05.617]                       invisible(muffled)
[17:40:05.617]                     }
[17:40:05.617]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.617]                   }
[17:40:05.617]                 }
[17:40:05.617]             }
[17:40:05.617]         }))
[17:40:05.617]     }, error = function(ex) {
[17:40:05.617]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:05.617]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.617]                 ...future.rng), started = ...future.startTime, 
[17:40:05.617]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:05.617]             version = "1.8"), class = "FutureResult")
[17:40:05.617]     }, finally = {
[17:40:05.617]         if (!identical(...future.workdir, getwd())) 
[17:40:05.617]             setwd(...future.workdir)
[17:40:05.617]         {
[17:40:05.617]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:05.617]                 ...future.oldOptions$nwarnings <- NULL
[17:40:05.617]             }
[17:40:05.617]             base::options(...future.oldOptions)
[17:40:05.617]             if (.Platform$OS.type == "windows") {
[17:40:05.617]                 old_names <- names(...future.oldEnvVars)
[17:40:05.617]                 envs <- base::Sys.getenv()
[17:40:05.617]                 names <- names(envs)
[17:40:05.617]                 common <- intersect(names, old_names)
[17:40:05.617]                 added <- setdiff(names, old_names)
[17:40:05.617]                 removed <- setdiff(old_names, names)
[17:40:05.617]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:05.617]                   envs[common]]
[17:40:05.617]                 NAMES <- toupper(changed)
[17:40:05.617]                 args <- list()
[17:40:05.617]                 for (kk in seq_along(NAMES)) {
[17:40:05.617]                   name <- changed[[kk]]
[17:40:05.617]                   NAME <- NAMES[[kk]]
[17:40:05.617]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.617]                     next
[17:40:05.617]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.617]                 }
[17:40:05.617]                 NAMES <- toupper(added)
[17:40:05.617]                 for (kk in seq_along(NAMES)) {
[17:40:05.617]                   name <- added[[kk]]
[17:40:05.617]                   NAME <- NAMES[[kk]]
[17:40:05.617]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.617]                     next
[17:40:05.617]                   args[[name]] <- ""
[17:40:05.617]                 }
[17:40:05.617]                 NAMES <- toupper(removed)
[17:40:05.617]                 for (kk in seq_along(NAMES)) {
[17:40:05.617]                   name <- removed[[kk]]
[17:40:05.617]                   NAME <- NAMES[[kk]]
[17:40:05.617]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.617]                     next
[17:40:05.617]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.617]                 }
[17:40:05.617]                 if (length(args) > 0) 
[17:40:05.617]                   base::do.call(base::Sys.setenv, args = args)
[17:40:05.617]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:05.617]             }
[17:40:05.617]             else {
[17:40:05.617]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:05.617]             }
[17:40:05.617]             {
[17:40:05.617]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:05.617]                   0L) {
[17:40:05.617]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:05.617]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:05.617]                   base::options(opts)
[17:40:05.617]                 }
[17:40:05.617]                 {
[17:40:05.617]                   {
[17:40:05.617]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:05.617]                     NULL
[17:40:05.617]                   }
[17:40:05.617]                   options(future.plan = NULL)
[17:40:05.617]                   if (is.na(NA_character_)) 
[17:40:05.617]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.617]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:05.617]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:05.617]                     .init = FALSE)
[17:40:05.617]                 }
[17:40:05.617]             }
[17:40:05.617]         }
[17:40:05.617]     })
[17:40:05.617]     if (TRUE) {
[17:40:05.617]         base::sink(type = "output", split = FALSE)
[17:40:05.617]         if (TRUE) {
[17:40:05.617]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:05.617]         }
[17:40:05.617]         else {
[17:40:05.617]             ...future.result["stdout"] <- base::list(NULL)
[17:40:05.617]         }
[17:40:05.617]         base::close(...future.stdout)
[17:40:05.617]         ...future.stdout <- NULL
[17:40:05.617]     }
[17:40:05.617]     ...future.result$conditions <- ...future.conditions
[17:40:05.617]     ...future.result$finished <- base::Sys.time()
[17:40:05.617]     ...future.result
[17:40:05.617] }
[17:40:05.619] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[17:40:05.621] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[17:40:05.673] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[17:40:05.673] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[17:40:05.673] MultisessionFuture started
[17:40:05.673] - Launch lazy future ... done
[17:40:05.674] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[17:40:05.674] result() for ClusterFuture ...
[17:40:05.674] receiveMessageFromWorker() for ClusterFuture ...
[17:40:05.674] - Validating connection of MultisessionFuture
[17:40:05.718] - received message: FutureResult
[17:40:05.718] - Received FutureResult
[17:40:05.719] - Erased future from FutureRegistry
[17:40:05.719] result() for ClusterFuture ...
[17:40:05.719] - result already collected: FutureResult
[17:40:05.719] result() for ClusterFuture ... done
[17:40:05.719] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:05.719] result() for ClusterFuture ... done
[17:40:05.719] result() for ClusterFuture ...
[17:40:05.719] - result already collected: FutureResult
[17:40:05.719] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: b28994a1-f639-ebfc-1ce2-bc31158b6db5
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[17:40:05.720] getGlobalsAndPackages() ...
[17:40:05.720] Searching for globals...
[17:40:05.721] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[17:40:05.721] Searching for globals ... DONE
[17:40:05.721] Resolving globals: FALSE
[17:40:05.724] The total size of the 1 globals is 1.57 MiB (1643920 bytes)
[17:40:05.724] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.57 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.57 MiB of class ‘environment’)
[17:40:05.724] - globals: [1] ‘f1’
[17:40:05.724] 
[17:40:05.724] getGlobalsAndPackages() ... DONE
[17:40:05.725] run() for ‘Future’ ...
[17:40:05.725] - state: ‘created’
[17:40:05.725] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:05.735] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:05.736] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:05.736]   - Field: ‘node’
[17:40:05.736]   - Field: ‘label’
[17:40:05.736]   - Field: ‘local’
[17:40:05.736]   - Field: ‘owner’
[17:40:05.736]   - Field: ‘envir’
[17:40:05.736]   - Field: ‘workers’
[17:40:05.736]   - Field: ‘packages’
[17:40:05.736]   - Field: ‘gc’
[17:40:05.736]   - Field: ‘conditions’
[17:40:05.737]   - Field: ‘persistent’
[17:40:05.737]   - Field: ‘expr’
[17:40:05.737]   - Field: ‘uuid’
[17:40:05.737]   - Field: ‘seed’
[17:40:05.737]   - Field: ‘version’
[17:40:05.737]   - Field: ‘result’
[17:40:05.737]   - Field: ‘asynchronous’
[17:40:05.737]   - Field: ‘calls’
[17:40:05.737]   - Field: ‘globals’
[17:40:05.737]   - Field: ‘stdout’
[17:40:05.737]   - Field: ‘earlySignal’
[17:40:05.738]   - Field: ‘lazy’
[17:40:05.738]   - Field: ‘state’
[17:40:05.738] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:05.738] - Launch lazy future ...
[17:40:05.738] Packages needed by the future expression (n = 0): <none>
[17:40:05.738] Packages needed by future strategies (n = 0): <none>
[17:40:05.739] {
[17:40:05.739]     {
[17:40:05.739]         {
[17:40:05.739]             ...future.startTime <- base::Sys.time()
[17:40:05.739]             {
[17:40:05.739]                 {
[17:40:05.739]                   {
[17:40:05.739]                     {
[17:40:05.739]                       base::local({
[17:40:05.739]                         has_future <- base::requireNamespace("future", 
[17:40:05.739]                           quietly = TRUE)
[17:40:05.739]                         if (has_future) {
[17:40:05.739]                           ns <- base::getNamespace("future")
[17:40:05.739]                           version <- ns[[".package"]][["version"]]
[17:40:05.739]                           if (is.null(version)) 
[17:40:05.739]                             version <- utils::packageVersion("future")
[17:40:05.739]                         }
[17:40:05.739]                         else {
[17:40:05.739]                           version <- NULL
[17:40:05.739]                         }
[17:40:05.739]                         if (!has_future || version < "1.8.0") {
[17:40:05.739]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:05.739]                             "", base::R.version$version.string), 
[17:40:05.739]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:05.739]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:05.739]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:05.739]                               "release", "version")], collapse = " "), 
[17:40:05.739]                             hostname = base::Sys.info()[["nodename"]])
[17:40:05.739]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:05.739]                             info)
[17:40:05.739]                           info <- base::paste(info, collapse = "; ")
[17:40:05.739]                           if (!has_future) {
[17:40:05.739]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:05.739]                               info)
[17:40:05.739]                           }
[17:40:05.739]                           else {
[17:40:05.739]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:05.739]                               info, version)
[17:40:05.739]                           }
[17:40:05.739]                           base::stop(msg)
[17:40:05.739]                         }
[17:40:05.739]                       })
[17:40:05.739]                     }
[17:40:05.739]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:05.739]                     base::options(mc.cores = 1L)
[17:40:05.739]                   }
[17:40:05.739]                   ...future.strategy.old <- future::plan("list")
[17:40:05.739]                   options(future.plan = NULL)
[17:40:05.739]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.739]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:05.739]                 }
[17:40:05.739]                 ...future.workdir <- getwd()
[17:40:05.739]             }
[17:40:05.739]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:05.739]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:05.739]         }
[17:40:05.739]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:05.739]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:05.739]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:05.739]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:05.739]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:05.739]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:05.739]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:05.739]             base::names(...future.oldOptions))
[17:40:05.739]     }
[17:40:05.739]     if (FALSE) {
[17:40:05.739]     }
[17:40:05.739]     else {
[17:40:05.739]         if (TRUE) {
[17:40:05.739]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:05.739]                 open = "w")
[17:40:05.739]         }
[17:40:05.739]         else {
[17:40:05.739]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:05.739]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:05.739]         }
[17:40:05.739]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:05.739]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:05.739]             base::sink(type = "output", split = FALSE)
[17:40:05.739]             base::close(...future.stdout)
[17:40:05.739]         }, add = TRUE)
[17:40:05.739]     }
[17:40:05.739]     ...future.frame <- base::sys.nframe()
[17:40:05.739]     ...future.conditions <- base::list()
[17:40:05.739]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:05.739]     if (FALSE) {
[17:40:05.739]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:05.739]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:05.739]     }
[17:40:05.739]     ...future.result <- base::tryCatch({
[17:40:05.739]         base::withCallingHandlers({
[17:40:05.739]             ...future.value <- base::withVisible(base::local({
[17:40:05.739]                 ...future.makeSendCondition <- base::local({
[17:40:05.739]                   sendCondition <- NULL
[17:40:05.739]                   function(frame = 1L) {
[17:40:05.739]                     if (is.function(sendCondition)) 
[17:40:05.739]                       return(sendCondition)
[17:40:05.739]                     ns <- getNamespace("parallel")
[17:40:05.739]                     if (exists("sendData", mode = "function", 
[17:40:05.739]                       envir = ns)) {
[17:40:05.739]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:05.739]                         envir = ns)
[17:40:05.739]                       envir <- sys.frame(frame)
[17:40:05.739]                       master <- NULL
[17:40:05.739]                       while (!identical(envir, .GlobalEnv) && 
[17:40:05.739]                         !identical(envir, emptyenv())) {
[17:40:05.739]                         if (exists("master", mode = "list", envir = envir, 
[17:40:05.739]                           inherits = FALSE)) {
[17:40:05.739]                           master <- get("master", mode = "list", 
[17:40:05.739]                             envir = envir, inherits = FALSE)
[17:40:05.739]                           if (inherits(master, c("SOCKnode", 
[17:40:05.739]                             "SOCK0node"))) {
[17:40:05.739]                             sendCondition <<- function(cond) {
[17:40:05.739]                               data <- list(type = "VALUE", value = cond, 
[17:40:05.739]                                 success = TRUE)
[17:40:05.739]                               parallel_sendData(master, data)
[17:40:05.739]                             }
[17:40:05.739]                             return(sendCondition)
[17:40:05.739]                           }
[17:40:05.739]                         }
[17:40:05.739]                         frame <- frame + 1L
[17:40:05.739]                         envir <- sys.frame(frame)
[17:40:05.739]                       }
[17:40:05.739]                     }
[17:40:05.739]                     sendCondition <<- function(cond) NULL
[17:40:05.739]                   }
[17:40:05.739]                 })
[17:40:05.739]                 withCallingHandlers({
[17:40:05.739]                   {
[17:40:05.739]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[17:40:05.739]                     "not-owner"
[17:40:05.739]                   }
[17:40:05.739]                 }, immediateCondition = function(cond) {
[17:40:05.739]                   sendCondition <- ...future.makeSendCondition()
[17:40:05.739]                   sendCondition(cond)
[17:40:05.739]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.739]                   {
[17:40:05.739]                     inherits <- base::inherits
[17:40:05.739]                     invokeRestart <- base::invokeRestart
[17:40:05.739]                     is.null <- base::is.null
[17:40:05.739]                     muffled <- FALSE
[17:40:05.739]                     if (inherits(cond, "message")) {
[17:40:05.739]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:05.739]                       if (muffled) 
[17:40:05.739]                         invokeRestart("muffleMessage")
[17:40:05.739]                     }
[17:40:05.739]                     else if (inherits(cond, "warning")) {
[17:40:05.739]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:05.739]                       if (muffled) 
[17:40:05.739]                         invokeRestart("muffleWarning")
[17:40:05.739]                     }
[17:40:05.739]                     else if (inherits(cond, "condition")) {
[17:40:05.739]                       if (!is.null(pattern)) {
[17:40:05.739]                         computeRestarts <- base::computeRestarts
[17:40:05.739]                         grepl <- base::grepl
[17:40:05.739]                         restarts <- computeRestarts(cond)
[17:40:05.739]                         for (restart in restarts) {
[17:40:05.739]                           name <- restart$name
[17:40:05.739]                           if (is.null(name)) 
[17:40:05.739]                             next
[17:40:05.739]                           if (!grepl(pattern, name)) 
[17:40:05.739]                             next
[17:40:05.739]                           invokeRestart(restart)
[17:40:05.739]                           muffled <- TRUE
[17:40:05.739]                           break
[17:40:05.739]                         }
[17:40:05.739]                       }
[17:40:05.739]                     }
[17:40:05.739]                     invisible(muffled)
[17:40:05.739]                   }
[17:40:05.739]                   muffleCondition(cond)
[17:40:05.739]                 })
[17:40:05.739]             }))
[17:40:05.739]             future::FutureResult(value = ...future.value$value, 
[17:40:05.739]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.739]                   ...future.rng), globalenv = if (FALSE) 
[17:40:05.739]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:05.739]                     ...future.globalenv.names))
[17:40:05.739]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:05.739]         }, condition = base::local({
[17:40:05.739]             c <- base::c
[17:40:05.739]             inherits <- base::inherits
[17:40:05.739]             invokeRestart <- base::invokeRestart
[17:40:05.739]             length <- base::length
[17:40:05.739]             list <- base::list
[17:40:05.739]             seq.int <- base::seq.int
[17:40:05.739]             signalCondition <- base::signalCondition
[17:40:05.739]             sys.calls <- base::sys.calls
[17:40:05.739]             `[[` <- base::`[[`
[17:40:05.739]             `+` <- base::`+`
[17:40:05.739]             `<<-` <- base::`<<-`
[17:40:05.739]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:05.739]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:05.739]                   3L)]
[17:40:05.739]             }
[17:40:05.739]             function(cond) {
[17:40:05.739]                 is_error <- inherits(cond, "error")
[17:40:05.739]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:05.739]                   NULL)
[17:40:05.739]                 if (is_error) {
[17:40:05.739]                   sessionInformation <- function() {
[17:40:05.739]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:05.739]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:05.739]                       search = base::search(), system = base::Sys.info())
[17:40:05.739]                   }
[17:40:05.739]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.739]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:05.739]                     cond$call), session = sessionInformation(), 
[17:40:05.739]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:05.739]                   signalCondition(cond)
[17:40:05.739]                 }
[17:40:05.739]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:05.739]                 "immediateCondition"))) {
[17:40:05.739]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:05.739]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.739]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:05.739]                   if (TRUE && !signal) {
[17:40:05.739]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.739]                     {
[17:40:05.739]                       inherits <- base::inherits
[17:40:05.739]                       invokeRestart <- base::invokeRestart
[17:40:05.739]                       is.null <- base::is.null
[17:40:05.739]                       muffled <- FALSE
[17:40:05.739]                       if (inherits(cond, "message")) {
[17:40:05.739]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.739]                         if (muffled) 
[17:40:05.739]                           invokeRestart("muffleMessage")
[17:40:05.739]                       }
[17:40:05.739]                       else if (inherits(cond, "warning")) {
[17:40:05.739]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.739]                         if (muffled) 
[17:40:05.739]                           invokeRestart("muffleWarning")
[17:40:05.739]                       }
[17:40:05.739]                       else if (inherits(cond, "condition")) {
[17:40:05.739]                         if (!is.null(pattern)) {
[17:40:05.739]                           computeRestarts <- base::computeRestarts
[17:40:05.739]                           grepl <- base::grepl
[17:40:05.739]                           restarts <- computeRestarts(cond)
[17:40:05.739]                           for (restart in restarts) {
[17:40:05.739]                             name <- restart$name
[17:40:05.739]                             if (is.null(name)) 
[17:40:05.739]                               next
[17:40:05.739]                             if (!grepl(pattern, name)) 
[17:40:05.739]                               next
[17:40:05.739]                             invokeRestart(restart)
[17:40:05.739]                             muffled <- TRUE
[17:40:05.739]                             break
[17:40:05.739]                           }
[17:40:05.739]                         }
[17:40:05.739]                       }
[17:40:05.739]                       invisible(muffled)
[17:40:05.739]                     }
[17:40:05.739]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.739]                   }
[17:40:05.739]                 }
[17:40:05.739]                 else {
[17:40:05.739]                   if (TRUE) {
[17:40:05.739]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.739]                     {
[17:40:05.739]                       inherits <- base::inherits
[17:40:05.739]                       invokeRestart <- base::invokeRestart
[17:40:05.739]                       is.null <- base::is.null
[17:40:05.739]                       muffled <- FALSE
[17:40:05.739]                       if (inherits(cond, "message")) {
[17:40:05.739]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.739]                         if (muffled) 
[17:40:05.739]                           invokeRestart("muffleMessage")
[17:40:05.739]                       }
[17:40:05.739]                       else if (inherits(cond, "warning")) {
[17:40:05.739]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.739]                         if (muffled) 
[17:40:05.739]                           invokeRestart("muffleWarning")
[17:40:05.739]                       }
[17:40:05.739]                       else if (inherits(cond, "condition")) {
[17:40:05.739]                         if (!is.null(pattern)) {
[17:40:05.739]                           computeRestarts <- base::computeRestarts
[17:40:05.739]                           grepl <- base::grepl
[17:40:05.739]                           restarts <- computeRestarts(cond)
[17:40:05.739]                           for (restart in restarts) {
[17:40:05.739]                             name <- restart$name
[17:40:05.739]                             if (is.null(name)) 
[17:40:05.739]                               next
[17:40:05.739]                             if (!grepl(pattern, name)) 
[17:40:05.739]                               next
[17:40:05.739]                             invokeRestart(restart)
[17:40:05.739]                             muffled <- TRUE
[17:40:05.739]                             break
[17:40:05.739]                           }
[17:40:05.739]                         }
[17:40:05.739]                       }
[17:40:05.739]                       invisible(muffled)
[17:40:05.739]                     }
[17:40:05.739]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.739]                   }
[17:40:05.739]                 }
[17:40:05.739]             }
[17:40:05.739]         }))
[17:40:05.739]     }, error = function(ex) {
[17:40:05.739]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:05.739]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.739]                 ...future.rng), started = ...future.startTime, 
[17:40:05.739]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:05.739]             version = "1.8"), class = "FutureResult")
[17:40:05.739]     }, finally = {
[17:40:05.739]         if (!identical(...future.workdir, getwd())) 
[17:40:05.739]             setwd(...future.workdir)
[17:40:05.739]         {
[17:40:05.739]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:05.739]                 ...future.oldOptions$nwarnings <- NULL
[17:40:05.739]             }
[17:40:05.739]             base::options(...future.oldOptions)
[17:40:05.739]             if (.Platform$OS.type == "windows") {
[17:40:05.739]                 old_names <- names(...future.oldEnvVars)
[17:40:05.739]                 envs <- base::Sys.getenv()
[17:40:05.739]                 names <- names(envs)
[17:40:05.739]                 common <- intersect(names, old_names)
[17:40:05.739]                 added <- setdiff(names, old_names)
[17:40:05.739]                 removed <- setdiff(old_names, names)
[17:40:05.739]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:05.739]                   envs[common]]
[17:40:05.739]                 NAMES <- toupper(changed)
[17:40:05.739]                 args <- list()
[17:40:05.739]                 for (kk in seq_along(NAMES)) {
[17:40:05.739]                   name <- changed[[kk]]
[17:40:05.739]                   NAME <- NAMES[[kk]]
[17:40:05.739]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.739]                     next
[17:40:05.739]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.739]                 }
[17:40:05.739]                 NAMES <- toupper(added)
[17:40:05.739]                 for (kk in seq_along(NAMES)) {
[17:40:05.739]                   name <- added[[kk]]
[17:40:05.739]                   NAME <- NAMES[[kk]]
[17:40:05.739]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.739]                     next
[17:40:05.739]                   args[[name]] <- ""
[17:40:05.739]                 }
[17:40:05.739]                 NAMES <- toupper(removed)
[17:40:05.739]                 for (kk in seq_along(NAMES)) {
[17:40:05.739]                   name <- removed[[kk]]
[17:40:05.739]                   NAME <- NAMES[[kk]]
[17:40:05.739]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.739]                     next
[17:40:05.739]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.739]                 }
[17:40:05.739]                 if (length(args) > 0) 
[17:40:05.739]                   base::do.call(base::Sys.setenv, args = args)
[17:40:05.739]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:05.739]             }
[17:40:05.739]             else {
[17:40:05.739]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:05.739]             }
[17:40:05.739]             {
[17:40:05.739]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:05.739]                   0L) {
[17:40:05.739]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:05.739]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:05.739]                   base::options(opts)
[17:40:05.739]                 }
[17:40:05.739]                 {
[17:40:05.739]                   {
[17:40:05.739]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:05.739]                     NULL
[17:40:05.739]                   }
[17:40:05.739]                   options(future.plan = NULL)
[17:40:05.739]                   if (is.na(NA_character_)) 
[17:40:05.739]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.739]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:05.739]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:05.739]                     .init = FALSE)
[17:40:05.739]                 }
[17:40:05.739]             }
[17:40:05.739]         }
[17:40:05.739]     })
[17:40:05.739]     if (TRUE) {
[17:40:05.739]         base::sink(type = "output", split = FALSE)
[17:40:05.739]         if (TRUE) {
[17:40:05.739]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:05.739]         }
[17:40:05.739]         else {
[17:40:05.739]             ...future.result["stdout"] <- base::list(NULL)
[17:40:05.739]         }
[17:40:05.739]         base::close(...future.stdout)
[17:40:05.739]         ...future.stdout <- NULL
[17:40:05.739]     }
[17:40:05.739]     ...future.result$conditions <- ...future.conditions
[17:40:05.739]     ...future.result$finished <- base::Sys.time()
[17:40:05.739]     ...future.result
[17:40:05.739] }
[17:40:05.741] Exporting 1 global objects (1.57 MiB) to cluster node #1 ...
[17:40:05.743] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ...
[17:40:05.797] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ... DONE
[17:40:05.797] Exporting 1 global objects (1.57 MiB) to cluster node #1 ... DONE
[17:40:05.798] MultisessionFuture started
[17:40:05.798] - Launch lazy future ... done
[17:40:05.798] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[17:40:05.798] result() for ClusterFuture ...
[17:40:05.798] receiveMessageFromWorker() for ClusterFuture ...
[17:40:05.798] - Validating connection of MultisessionFuture
[17:40:05.842] - received message: FutureResult
[17:40:05.842] - Received FutureResult
[17:40:05.842] - Erased future from FutureRegistry
[17:40:05.843] result() for ClusterFuture ...
[17:40:05.843] - result already collected: FutureResult
[17:40:05.843] result() for ClusterFuture ... done
[17:40:05.843] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:05.843] result() for ClusterFuture ... done
[17:40:05.843] result() for ClusterFuture ...
[17:40:05.843] - result already collected: FutureResult
[17:40:05.843] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[17:40:05.844] getGlobalsAndPackages() ...
[17:40:05.844] Searching for globals...
[17:40:05.844] - globals found: [1] ‘{’
[17:40:05.844] Searching for globals ... DONE
[17:40:05.845] Resolving globals: FALSE
[17:40:05.845] 
[17:40:05.845] 
[17:40:05.845] getGlobalsAndPackages() ... DONE
[17:40:05.845] run() for ‘Future’ ...
[17:40:05.845] - state: ‘created’
[17:40:05.846] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:05.856] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:05.856] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:05.856]   - Field: ‘node’
[17:40:05.856]   - Field: ‘label’
[17:40:05.856]   - Field: ‘local’
[17:40:05.857]   - Field: ‘owner’
[17:40:05.857]   - Field: ‘envir’
[17:40:05.857]   - Field: ‘workers’
[17:40:05.857]   - Field: ‘packages’
[17:40:05.857]   - Field: ‘gc’
[17:40:05.857]   - Field: ‘conditions’
[17:40:05.857]   - Field: ‘persistent’
[17:40:05.857]   - Field: ‘expr’
[17:40:05.857]   - Field: ‘uuid’
[17:40:05.857]   - Field: ‘seed’
[17:40:05.858]   - Field: ‘version’
[17:40:05.858]   - Field: ‘result’
[17:40:05.858]   - Field: ‘asynchronous’
[17:40:05.858]   - Field: ‘calls’
[17:40:05.858]   - Field: ‘globals’
[17:40:05.858]   - Field: ‘stdout’
[17:40:05.858]   - Field: ‘earlySignal’
[17:40:05.858]   - Field: ‘lazy’
[17:40:05.858]   - Field: ‘state’
[17:40:05.858] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:05.859] - Launch lazy future ...
[17:40:05.859] Packages needed by the future expression (n = 0): <none>
[17:40:05.859] Packages needed by future strategies (n = 0): <none>
[17:40:05.859] {
[17:40:05.859]     {
[17:40:05.859]         {
[17:40:05.859]             ...future.startTime <- base::Sys.time()
[17:40:05.859]             {
[17:40:05.859]                 {
[17:40:05.859]                   {
[17:40:05.859]                     {
[17:40:05.859]                       base::local({
[17:40:05.859]                         has_future <- base::requireNamespace("future", 
[17:40:05.859]                           quietly = TRUE)
[17:40:05.859]                         if (has_future) {
[17:40:05.859]                           ns <- base::getNamespace("future")
[17:40:05.859]                           version <- ns[[".package"]][["version"]]
[17:40:05.859]                           if (is.null(version)) 
[17:40:05.859]                             version <- utils::packageVersion("future")
[17:40:05.859]                         }
[17:40:05.859]                         else {
[17:40:05.859]                           version <- NULL
[17:40:05.859]                         }
[17:40:05.859]                         if (!has_future || version < "1.8.0") {
[17:40:05.859]                           info <- base::c(r_version = base::gsub("R version ", 
[17:40:05.859]                             "", base::R.version$version.string), 
[17:40:05.859]                             platform = base::sprintf("%s (%s-bit)", 
[17:40:05.859]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:40:05.859]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:05.859]                               "release", "version")], collapse = " "), 
[17:40:05.859]                             hostname = base::Sys.info()[["nodename"]])
[17:40:05.859]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:40:05.859]                             info)
[17:40:05.859]                           info <- base::paste(info, collapse = "; ")
[17:40:05.859]                           if (!has_future) {
[17:40:05.859]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:05.859]                               info)
[17:40:05.859]                           }
[17:40:05.859]                           else {
[17:40:05.859]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:05.859]                               info, version)
[17:40:05.859]                           }
[17:40:05.859]                           base::stop(msg)
[17:40:05.859]                         }
[17:40:05.859]                       })
[17:40:05.859]                     }
[17:40:05.859]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:05.859]                     base::options(mc.cores = 1L)
[17:40:05.859]                   }
[17:40:05.859]                   ...future.strategy.old <- future::plan("list")
[17:40:05.859]                   options(future.plan = NULL)
[17:40:05.859]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.859]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:05.859]                 }
[17:40:05.859]                 ...future.workdir <- getwd()
[17:40:05.859]             }
[17:40:05.859]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:05.859]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:05.859]         }
[17:40:05.859]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:05.859]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:05.859]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:05.859]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:05.859]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:05.859]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:05.859]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:05.859]             base::names(...future.oldOptions))
[17:40:05.859]     }
[17:40:05.859]     if (FALSE) {
[17:40:05.859]     }
[17:40:05.859]     else {
[17:40:05.859]         if (TRUE) {
[17:40:05.859]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:05.859]                 open = "w")
[17:40:05.859]         }
[17:40:05.859]         else {
[17:40:05.859]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:05.859]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:05.859]         }
[17:40:05.859]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:05.859]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:05.859]             base::sink(type = "output", split = FALSE)
[17:40:05.859]             base::close(...future.stdout)
[17:40:05.859]         }, add = TRUE)
[17:40:05.859]     }
[17:40:05.859]     ...future.frame <- base::sys.nframe()
[17:40:05.859]     ...future.conditions <- base::list()
[17:40:05.859]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:05.859]     if (FALSE) {
[17:40:05.859]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:05.859]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:05.859]     }
[17:40:05.859]     ...future.result <- base::tryCatch({
[17:40:05.859]         base::withCallingHandlers({
[17:40:05.859]             ...future.value <- base::withVisible(base::local({
[17:40:05.859]                 ...future.makeSendCondition <- base::local({
[17:40:05.859]                   sendCondition <- NULL
[17:40:05.859]                   function(frame = 1L) {
[17:40:05.859]                     if (is.function(sendCondition)) 
[17:40:05.859]                       return(sendCondition)
[17:40:05.859]                     ns <- getNamespace("parallel")
[17:40:05.859]                     if (exists("sendData", mode = "function", 
[17:40:05.859]                       envir = ns)) {
[17:40:05.859]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:05.859]                         envir = ns)
[17:40:05.859]                       envir <- sys.frame(frame)
[17:40:05.859]                       master <- NULL
[17:40:05.859]                       while (!identical(envir, .GlobalEnv) && 
[17:40:05.859]                         !identical(envir, emptyenv())) {
[17:40:05.859]                         if (exists("master", mode = "list", envir = envir, 
[17:40:05.859]                           inherits = FALSE)) {
[17:40:05.859]                           master <- get("master", mode = "list", 
[17:40:05.859]                             envir = envir, inherits = FALSE)
[17:40:05.859]                           if (inherits(master, c("SOCKnode", 
[17:40:05.859]                             "SOCK0node"))) {
[17:40:05.859]                             sendCondition <<- function(cond) {
[17:40:05.859]                               data <- list(type = "VALUE", value = cond, 
[17:40:05.859]                                 success = TRUE)
[17:40:05.859]                               parallel_sendData(master, data)
[17:40:05.859]                             }
[17:40:05.859]                             return(sendCondition)
[17:40:05.859]                           }
[17:40:05.859]                         }
[17:40:05.859]                         frame <- frame + 1L
[17:40:05.859]                         envir <- sys.frame(frame)
[17:40:05.859]                       }
[17:40:05.859]                     }
[17:40:05.859]                     sendCondition <<- function(cond) NULL
[17:40:05.859]                   }
[17:40:05.859]                 })
[17:40:05.859]                 withCallingHandlers({
[17:40:05.859]                   {
[17:40:05.859]                     42L
[17:40:05.859]                   }
[17:40:05.859]                 }, immediateCondition = function(cond) {
[17:40:05.859]                   sendCondition <- ...future.makeSendCondition()
[17:40:05.859]                   sendCondition(cond)
[17:40:05.859]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.859]                   {
[17:40:05.859]                     inherits <- base::inherits
[17:40:05.859]                     invokeRestart <- base::invokeRestart
[17:40:05.859]                     is.null <- base::is.null
[17:40:05.859]                     muffled <- FALSE
[17:40:05.859]                     if (inherits(cond, "message")) {
[17:40:05.859]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:05.859]                       if (muffled) 
[17:40:05.859]                         invokeRestart("muffleMessage")
[17:40:05.859]                     }
[17:40:05.859]                     else if (inherits(cond, "warning")) {
[17:40:05.859]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:05.859]                       if (muffled) 
[17:40:05.859]                         invokeRestart("muffleWarning")
[17:40:05.859]                     }
[17:40:05.859]                     else if (inherits(cond, "condition")) {
[17:40:05.859]                       if (!is.null(pattern)) {
[17:40:05.859]                         computeRestarts <- base::computeRestarts
[17:40:05.859]                         grepl <- base::grepl
[17:40:05.859]                         restarts <- computeRestarts(cond)
[17:40:05.859]                         for (restart in restarts) {
[17:40:05.859]                           name <- restart$name
[17:40:05.859]                           if (is.null(name)) 
[17:40:05.859]                             next
[17:40:05.859]                           if (!grepl(pattern, name)) 
[17:40:05.859]                             next
[17:40:05.859]                           invokeRestart(restart)
[17:40:05.859]                           muffled <- TRUE
[17:40:05.859]                           break
[17:40:05.859]                         }
[17:40:05.859]                       }
[17:40:05.859]                     }
[17:40:05.859]                     invisible(muffled)
[17:40:05.859]                   }
[17:40:05.859]                   muffleCondition(cond)
[17:40:05.859]                 })
[17:40:05.859]             }))
[17:40:05.859]             future::FutureResult(value = ...future.value$value, 
[17:40:05.859]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.859]                   ...future.rng), globalenv = if (FALSE) 
[17:40:05.859]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:05.859]                     ...future.globalenv.names))
[17:40:05.859]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:05.859]         }, condition = base::local({
[17:40:05.859]             c <- base::c
[17:40:05.859]             inherits <- base::inherits
[17:40:05.859]             invokeRestart <- base::invokeRestart
[17:40:05.859]             length <- base::length
[17:40:05.859]             list <- base::list
[17:40:05.859]             seq.int <- base::seq.int
[17:40:05.859]             signalCondition <- base::signalCondition
[17:40:05.859]             sys.calls <- base::sys.calls
[17:40:05.859]             `[[` <- base::`[[`
[17:40:05.859]             `+` <- base::`+`
[17:40:05.859]             `<<-` <- base::`<<-`
[17:40:05.859]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:05.859]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:05.859]                   3L)]
[17:40:05.859]             }
[17:40:05.859]             function(cond) {
[17:40:05.859]                 is_error <- inherits(cond, "error")
[17:40:05.859]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:05.859]                   NULL)
[17:40:05.859]                 if (is_error) {
[17:40:05.859]                   sessionInformation <- function() {
[17:40:05.859]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:05.859]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:05.859]                       search = base::search(), system = base::Sys.info())
[17:40:05.859]                   }
[17:40:05.859]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.859]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:05.859]                     cond$call), session = sessionInformation(), 
[17:40:05.859]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:05.859]                   signalCondition(cond)
[17:40:05.859]                 }
[17:40:05.859]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:05.859]                 "immediateCondition"))) {
[17:40:05.859]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:05.859]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.859]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:05.859]                   if (TRUE && !signal) {
[17:40:05.859]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.859]                     {
[17:40:05.859]                       inherits <- base::inherits
[17:40:05.859]                       invokeRestart <- base::invokeRestart
[17:40:05.859]                       is.null <- base::is.null
[17:40:05.859]                       muffled <- FALSE
[17:40:05.859]                       if (inherits(cond, "message")) {
[17:40:05.859]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.859]                         if (muffled) 
[17:40:05.859]                           invokeRestart("muffleMessage")
[17:40:05.859]                       }
[17:40:05.859]                       else if (inherits(cond, "warning")) {
[17:40:05.859]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.859]                         if (muffled) 
[17:40:05.859]                           invokeRestart("muffleWarning")
[17:40:05.859]                       }
[17:40:05.859]                       else if (inherits(cond, "condition")) {
[17:40:05.859]                         if (!is.null(pattern)) {
[17:40:05.859]                           computeRestarts <- base::computeRestarts
[17:40:05.859]                           grepl <- base::grepl
[17:40:05.859]                           restarts <- computeRestarts(cond)
[17:40:05.859]                           for (restart in restarts) {
[17:40:05.859]                             name <- restart$name
[17:40:05.859]                             if (is.null(name)) 
[17:40:05.859]                               next
[17:40:05.859]                             if (!grepl(pattern, name)) 
[17:40:05.859]                               next
[17:40:05.859]                             invokeRestart(restart)
[17:40:05.859]                             muffled <- TRUE
[17:40:05.859]                             break
[17:40:05.859]                           }
[17:40:05.859]                         }
[17:40:05.859]                       }
[17:40:05.859]                       invisible(muffled)
[17:40:05.859]                     }
[17:40:05.859]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.859]                   }
[17:40:05.859]                 }
[17:40:05.859]                 else {
[17:40:05.859]                   if (TRUE) {
[17:40:05.859]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.859]                     {
[17:40:05.859]                       inherits <- base::inherits
[17:40:05.859]                       invokeRestart <- base::invokeRestart
[17:40:05.859]                       is.null <- base::is.null
[17:40:05.859]                       muffled <- FALSE
[17:40:05.859]                       if (inherits(cond, "message")) {
[17:40:05.859]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.859]                         if (muffled) 
[17:40:05.859]                           invokeRestart("muffleMessage")
[17:40:05.859]                       }
[17:40:05.859]                       else if (inherits(cond, "warning")) {
[17:40:05.859]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.859]                         if (muffled) 
[17:40:05.859]                           invokeRestart("muffleWarning")
[17:40:05.859]                       }
[17:40:05.859]                       else if (inherits(cond, "condition")) {
[17:40:05.859]                         if (!is.null(pattern)) {
[17:40:05.859]                           computeRestarts <- base::computeRestarts
[17:40:05.859]                           grepl <- base::grepl
[17:40:05.859]                           restarts <- computeRestarts(cond)
[17:40:05.859]                           for (restart in restarts) {
[17:40:05.859]                             name <- restart$name
[17:40:05.859]                             if (is.null(name)) 
[17:40:05.859]                               next
[17:40:05.859]                             if (!grepl(pattern, name)) 
[17:40:05.859]                               next
[17:40:05.859]                             invokeRestart(restart)
[17:40:05.859]                             muffled <- TRUE
[17:40:05.859]                             break
[17:40:05.859]                           }
[17:40:05.859]                         }
[17:40:05.859]                       }
[17:40:05.859]                       invisible(muffled)
[17:40:05.859]                     }
[17:40:05.859]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.859]                   }
[17:40:05.859]                 }
[17:40:05.859]             }
[17:40:05.859]         }))
[17:40:05.859]     }, error = function(ex) {
[17:40:05.859]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:05.859]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.859]                 ...future.rng), started = ...future.startTime, 
[17:40:05.859]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:05.859]             version = "1.8"), class = "FutureResult")
[17:40:05.859]     }, finally = {
[17:40:05.859]         if (!identical(...future.workdir, getwd())) 
[17:40:05.859]             setwd(...future.workdir)
[17:40:05.859]         {
[17:40:05.859]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:05.859]                 ...future.oldOptions$nwarnings <- NULL
[17:40:05.859]             }
[17:40:05.859]             base::options(...future.oldOptions)
[17:40:05.859]             if (.Platform$OS.type == "windows") {
[17:40:05.859]                 old_names <- names(...future.oldEnvVars)
[17:40:05.859]                 envs <- base::Sys.getenv()
[17:40:05.859]                 names <- names(envs)
[17:40:05.859]                 common <- intersect(names, old_names)
[17:40:05.859]                 added <- setdiff(names, old_names)
[17:40:05.859]                 removed <- setdiff(old_names, names)
[17:40:05.859]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:05.859]                   envs[common]]
[17:40:05.859]                 NAMES <- toupper(changed)
[17:40:05.859]                 args <- list()
[17:40:05.859]                 for (kk in seq_along(NAMES)) {
[17:40:05.859]                   name <- changed[[kk]]
[17:40:05.859]                   NAME <- NAMES[[kk]]
[17:40:05.859]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.859]                     next
[17:40:05.859]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.859]                 }
[17:40:05.859]                 NAMES <- toupper(added)
[17:40:05.859]                 for (kk in seq_along(NAMES)) {
[17:40:05.859]                   name <- added[[kk]]
[17:40:05.859]                   NAME <- NAMES[[kk]]
[17:40:05.859]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.859]                     next
[17:40:05.859]                   args[[name]] <- ""
[17:40:05.859]                 }
[17:40:05.859]                 NAMES <- toupper(removed)
[17:40:05.859]                 for (kk in seq_along(NAMES)) {
[17:40:05.859]                   name <- removed[[kk]]
[17:40:05.859]                   NAME <- NAMES[[kk]]
[17:40:05.859]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.859]                     next
[17:40:05.859]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.859]                 }
[17:40:05.859]                 if (length(args) > 0) 
[17:40:05.859]                   base::do.call(base::Sys.setenv, args = args)
[17:40:05.859]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:05.859]             }
[17:40:05.859]             else {
[17:40:05.859]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:05.859]             }
[17:40:05.859]             {
[17:40:05.859]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:05.859]                   0L) {
[17:40:05.859]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:05.859]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:05.859]                   base::options(opts)
[17:40:05.859]                 }
[17:40:05.859]                 {
[17:40:05.859]                   {
[17:40:05.859]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:05.859]                     NULL
[17:40:05.859]                   }
[17:40:05.859]                   options(future.plan = NULL)
[17:40:05.859]                   if (is.na(NA_character_)) 
[17:40:05.859]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.859]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:05.859]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:05.859]                     .init = FALSE)
[17:40:05.859]                 }
[17:40:05.859]             }
[17:40:05.859]         }
[17:40:05.859]     })
[17:40:05.859]     if (TRUE) {
[17:40:05.859]         base::sink(type = "output", split = FALSE)
[17:40:05.859]         if (TRUE) {
[17:40:05.859]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:05.859]         }
[17:40:05.859]         else {
[17:40:05.859]             ...future.result["stdout"] <- base::list(NULL)
[17:40:05.859]         }
[17:40:05.859]         base::close(...future.stdout)
[17:40:05.859]         ...future.stdout <- NULL
[17:40:05.859]     }
[17:40:05.859]     ...future.result$conditions <- ...future.conditions
[17:40:05.859]     ...future.result$finished <- base::Sys.time()
[17:40:05.859]     ...future.result
[17:40:05.859] }
[17:40:05.862] MultisessionFuture started
[17:40:05.862] - Launch lazy future ... done
[17:40:05.862] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[17:40:05.863] getGlobalsAndPackages() ...
[17:40:05.863] Searching for globals...
[17:40:05.864] - globals found: [3] ‘{’, ‘value’, ‘f1’
[17:40:05.864] Searching for globals ... DONE
[17:40:05.864] Resolving globals: FALSE
[17:40:05.866] The total size of the 1 globals is 1.56 MiB (1636072 bytes)
[17:40:05.866] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[17:40:05.866] - globals: [1] ‘f1’
[17:40:05.867] - packages: [1] ‘future’
[17:40:05.867] getGlobalsAndPackages() ... DONE
[17:40:05.867] run() for ‘Future’ ...
[17:40:05.867] - state: ‘created’
[17:40:05.867] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:40:05.878] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:40:05.878] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:40:05.878]   - Field: ‘node’
[17:40:05.878]   - Field: ‘label’
[17:40:05.878]   - Field: ‘local’
[17:40:05.878]   - Field: ‘owner’
[17:40:05.878]   - Field: ‘envir’
[17:40:05.878]   - Field: ‘workers’
[17:40:05.878]   - Field: ‘packages’
[17:40:05.878]   - Field: ‘gc’
[17:40:05.879]   - Field: ‘conditions’
[17:40:05.879]   - Field: ‘persistent’
[17:40:05.879]   - Field: ‘expr’
[17:40:05.879]   - Field: ‘uuid’
[17:40:05.879]   - Field: ‘seed’
[17:40:05.879]   - Field: ‘version’
[17:40:05.879]   - Field: ‘result’
[17:40:05.879]   - Field: ‘asynchronous’
[17:40:05.879]   - Field: ‘calls’
[17:40:05.879]   - Field: ‘globals’
[17:40:05.879]   - Field: ‘stdout’
[17:40:05.880]   - Field: ‘earlySignal’
[17:40:05.880]   - Field: ‘lazy’
[17:40:05.880]   - Field: ‘state’
[17:40:05.880] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:40:05.880] - Launch lazy future ...
[17:40:05.880] Packages needed by the future expression (n = 1): ‘future’
[17:40:05.880] Packages needed by future strategies (n = 0): <none>
[17:40:05.881] {
[17:40:05.881]     {
[17:40:05.881]         {
[17:40:05.881]             ...future.startTime <- base::Sys.time()
[17:40:05.881]             {
[17:40:05.881]                 {
[17:40:05.881]                   {
[17:40:05.881]                     {
[17:40:05.881]                       {
[17:40:05.881]                         base::local({
[17:40:05.881]                           has_future <- base::requireNamespace("future", 
[17:40:05.881]                             quietly = TRUE)
[17:40:05.881]                           if (has_future) {
[17:40:05.881]                             ns <- base::getNamespace("future")
[17:40:05.881]                             version <- ns[[".package"]][["version"]]
[17:40:05.881]                             if (is.null(version)) 
[17:40:05.881]                               version <- utils::packageVersion("future")
[17:40:05.881]                           }
[17:40:05.881]                           else {
[17:40:05.881]                             version <- NULL
[17:40:05.881]                           }
[17:40:05.881]                           if (!has_future || version < "1.8.0") {
[17:40:05.881]                             info <- base::c(r_version = base::gsub("R version ", 
[17:40:05.881]                               "", base::R.version$version.string), 
[17:40:05.881]                               platform = base::sprintf("%s (%s-bit)", 
[17:40:05.881]                                 base::R.version$platform, 8 * 
[17:40:05.881]                                   base::.Machine$sizeof.pointer), 
[17:40:05.881]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:40:05.881]                                 "release", "version")], collapse = " "), 
[17:40:05.881]                               hostname = base::Sys.info()[["nodename"]])
[17:40:05.881]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:40:05.881]                               info)
[17:40:05.881]                             info <- base::paste(info, collapse = "; ")
[17:40:05.881]                             if (!has_future) {
[17:40:05.881]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:40:05.881]                                 info)
[17:40:05.881]                             }
[17:40:05.881]                             else {
[17:40:05.881]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:40:05.881]                                 info, version)
[17:40:05.881]                             }
[17:40:05.881]                             base::stop(msg)
[17:40:05.881]                           }
[17:40:05.881]                         })
[17:40:05.881]                       }
[17:40:05.881]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:40:05.881]                       base::options(mc.cores = 1L)
[17:40:05.881]                     }
[17:40:05.881]                     base::local({
[17:40:05.881]                       for (pkg in "future") {
[17:40:05.881]                         base::loadNamespace(pkg)
[17:40:05.881]                         base::library(pkg, character.only = TRUE)
[17:40:05.881]                       }
[17:40:05.881]                     })
[17:40:05.881]                   }
[17:40:05.881]                   ...future.strategy.old <- future::plan("list")
[17:40:05.881]                   options(future.plan = NULL)
[17:40:05.881]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.881]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:40:05.881]                 }
[17:40:05.881]                 ...future.workdir <- getwd()
[17:40:05.881]             }
[17:40:05.881]             ...future.oldOptions <- base::as.list(base::.Options)
[17:40:05.881]             ...future.oldEnvVars <- base::Sys.getenv()
[17:40:05.881]         }
[17:40:05.881]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:40:05.881]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:40:05.881]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:40:05.881]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:40:05.881]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:40:05.881]             future.stdout.windows.reencode = NULL, width = 80L)
[17:40:05.881]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:40:05.881]             base::names(...future.oldOptions))
[17:40:05.881]     }
[17:40:05.881]     if (FALSE) {
[17:40:05.881]     }
[17:40:05.881]     else {
[17:40:05.881]         if (TRUE) {
[17:40:05.881]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:40:05.881]                 open = "w")
[17:40:05.881]         }
[17:40:05.881]         else {
[17:40:05.881]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:40:05.881]                 windows = "NUL", "/dev/null"), open = "w")
[17:40:05.881]         }
[17:40:05.881]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:40:05.881]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:40:05.881]             base::sink(type = "output", split = FALSE)
[17:40:05.881]             base::close(...future.stdout)
[17:40:05.881]         }, add = TRUE)
[17:40:05.881]     }
[17:40:05.881]     ...future.frame <- base::sys.nframe()
[17:40:05.881]     ...future.conditions <- base::list()
[17:40:05.881]     ...future.rng <- base::globalenv()$.Random.seed
[17:40:05.881]     if (FALSE) {
[17:40:05.881]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:40:05.881]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:40:05.881]     }
[17:40:05.881]     ...future.result <- base::tryCatch({
[17:40:05.881]         base::withCallingHandlers({
[17:40:05.881]             ...future.value <- base::withVisible(base::local({
[17:40:05.881]                 ...future.makeSendCondition <- base::local({
[17:40:05.881]                   sendCondition <- NULL
[17:40:05.881]                   function(frame = 1L) {
[17:40:05.881]                     if (is.function(sendCondition)) 
[17:40:05.881]                       return(sendCondition)
[17:40:05.881]                     ns <- getNamespace("parallel")
[17:40:05.881]                     if (exists("sendData", mode = "function", 
[17:40:05.881]                       envir = ns)) {
[17:40:05.881]                       parallel_sendData <- get("sendData", mode = "function", 
[17:40:05.881]                         envir = ns)
[17:40:05.881]                       envir <- sys.frame(frame)
[17:40:05.881]                       master <- NULL
[17:40:05.881]                       while (!identical(envir, .GlobalEnv) && 
[17:40:05.881]                         !identical(envir, emptyenv())) {
[17:40:05.881]                         if (exists("master", mode = "list", envir = envir, 
[17:40:05.881]                           inherits = FALSE)) {
[17:40:05.881]                           master <- get("master", mode = "list", 
[17:40:05.881]                             envir = envir, inherits = FALSE)
[17:40:05.881]                           if (inherits(master, c("SOCKnode", 
[17:40:05.881]                             "SOCK0node"))) {
[17:40:05.881]                             sendCondition <<- function(cond) {
[17:40:05.881]                               data <- list(type = "VALUE", value = cond, 
[17:40:05.881]                                 success = TRUE)
[17:40:05.881]                               parallel_sendData(master, data)
[17:40:05.881]                             }
[17:40:05.881]                             return(sendCondition)
[17:40:05.881]                           }
[17:40:05.881]                         }
[17:40:05.881]                         frame <- frame + 1L
[17:40:05.881]                         envir <- sys.frame(frame)
[17:40:05.881]                       }
[17:40:05.881]                     }
[17:40:05.881]                     sendCondition <<- function(cond) NULL
[17:40:05.881]                   }
[17:40:05.881]                 })
[17:40:05.881]                 withCallingHandlers({
[17:40:05.881]                   {
[17:40:05.881]                     value(f1)
[17:40:05.881]                   }
[17:40:05.881]                 }, immediateCondition = function(cond) {
[17:40:05.881]                   sendCondition <- ...future.makeSendCondition()
[17:40:05.881]                   sendCondition(cond)
[17:40:05.881]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.881]                   {
[17:40:05.881]                     inherits <- base::inherits
[17:40:05.881]                     invokeRestart <- base::invokeRestart
[17:40:05.881]                     is.null <- base::is.null
[17:40:05.881]                     muffled <- FALSE
[17:40:05.881]                     if (inherits(cond, "message")) {
[17:40:05.881]                       muffled <- grepl(pattern, "muffleMessage")
[17:40:05.881]                       if (muffled) 
[17:40:05.881]                         invokeRestart("muffleMessage")
[17:40:05.881]                     }
[17:40:05.881]                     else if (inherits(cond, "warning")) {
[17:40:05.881]                       muffled <- grepl(pattern, "muffleWarning")
[17:40:05.881]                       if (muffled) 
[17:40:05.881]                         invokeRestart("muffleWarning")
[17:40:05.881]                     }
[17:40:05.881]                     else if (inherits(cond, "condition")) {
[17:40:05.881]                       if (!is.null(pattern)) {
[17:40:05.881]                         computeRestarts <- base::computeRestarts
[17:40:05.881]                         grepl <- base::grepl
[17:40:05.881]                         restarts <- computeRestarts(cond)
[17:40:05.881]                         for (restart in restarts) {
[17:40:05.881]                           name <- restart$name
[17:40:05.881]                           if (is.null(name)) 
[17:40:05.881]                             next
[17:40:05.881]                           if (!grepl(pattern, name)) 
[17:40:05.881]                             next
[17:40:05.881]                           invokeRestart(restart)
[17:40:05.881]                           muffled <- TRUE
[17:40:05.881]                           break
[17:40:05.881]                         }
[17:40:05.881]                       }
[17:40:05.881]                     }
[17:40:05.881]                     invisible(muffled)
[17:40:05.881]                   }
[17:40:05.881]                   muffleCondition(cond)
[17:40:05.881]                 })
[17:40:05.881]             }))
[17:40:05.881]             future::FutureResult(value = ...future.value$value, 
[17:40:05.881]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.881]                   ...future.rng), globalenv = if (FALSE) 
[17:40:05.881]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:40:05.881]                     ...future.globalenv.names))
[17:40:05.881]                 else NULL, started = ...future.startTime, version = "1.8")
[17:40:05.881]         }, condition = base::local({
[17:40:05.881]             c <- base::c
[17:40:05.881]             inherits <- base::inherits
[17:40:05.881]             invokeRestart <- base::invokeRestart
[17:40:05.881]             length <- base::length
[17:40:05.881]             list <- base::list
[17:40:05.881]             seq.int <- base::seq.int
[17:40:05.881]             signalCondition <- base::signalCondition
[17:40:05.881]             sys.calls <- base::sys.calls
[17:40:05.881]             `[[` <- base::`[[`
[17:40:05.881]             `+` <- base::`+`
[17:40:05.881]             `<<-` <- base::`<<-`
[17:40:05.881]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:40:05.881]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:40:05.881]                   3L)]
[17:40:05.881]             }
[17:40:05.881]             function(cond) {
[17:40:05.881]                 is_error <- inherits(cond, "error")
[17:40:05.881]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:40:05.881]                   NULL)
[17:40:05.881]                 if (is_error) {
[17:40:05.881]                   sessionInformation <- function() {
[17:40:05.881]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:40:05.881]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:40:05.881]                       search = base::search(), system = base::Sys.info())
[17:40:05.881]                   }
[17:40:05.881]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.881]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:40:05.881]                     cond$call), session = sessionInformation(), 
[17:40:05.881]                     timestamp = base::Sys.time(), signaled = 0L)
[17:40:05.881]                   signalCondition(cond)
[17:40:05.881]                 }
[17:40:05.881]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:40:05.881]                 "immediateCondition"))) {
[17:40:05.881]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:40:05.881]                   ...future.conditions[[length(...future.conditions) + 
[17:40:05.881]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:40:05.881]                   if (TRUE && !signal) {
[17:40:05.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.881]                     {
[17:40:05.881]                       inherits <- base::inherits
[17:40:05.881]                       invokeRestart <- base::invokeRestart
[17:40:05.881]                       is.null <- base::is.null
[17:40:05.881]                       muffled <- FALSE
[17:40:05.881]                       if (inherits(cond, "message")) {
[17:40:05.881]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.881]                         if (muffled) 
[17:40:05.881]                           invokeRestart("muffleMessage")
[17:40:05.881]                       }
[17:40:05.881]                       else if (inherits(cond, "warning")) {
[17:40:05.881]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.881]                         if (muffled) 
[17:40:05.881]                           invokeRestart("muffleWarning")
[17:40:05.881]                       }
[17:40:05.881]                       else if (inherits(cond, "condition")) {
[17:40:05.881]                         if (!is.null(pattern)) {
[17:40:05.881]                           computeRestarts <- base::computeRestarts
[17:40:05.881]                           grepl <- base::grepl
[17:40:05.881]                           restarts <- computeRestarts(cond)
[17:40:05.881]                           for (restart in restarts) {
[17:40:05.881]                             name <- restart$name
[17:40:05.881]                             if (is.null(name)) 
[17:40:05.881]                               next
[17:40:05.881]                             if (!grepl(pattern, name)) 
[17:40:05.881]                               next
[17:40:05.881]                             invokeRestart(restart)
[17:40:05.881]                             muffled <- TRUE
[17:40:05.881]                             break
[17:40:05.881]                           }
[17:40:05.881]                         }
[17:40:05.881]                       }
[17:40:05.881]                       invisible(muffled)
[17:40:05.881]                     }
[17:40:05.881]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.881]                   }
[17:40:05.881]                 }
[17:40:05.881]                 else {
[17:40:05.881]                   if (TRUE) {
[17:40:05.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:40:05.881]                     {
[17:40:05.881]                       inherits <- base::inherits
[17:40:05.881]                       invokeRestart <- base::invokeRestart
[17:40:05.881]                       is.null <- base::is.null
[17:40:05.881]                       muffled <- FALSE
[17:40:05.881]                       if (inherits(cond, "message")) {
[17:40:05.881]                         muffled <- grepl(pattern, "muffleMessage")
[17:40:05.881]                         if (muffled) 
[17:40:05.881]                           invokeRestart("muffleMessage")
[17:40:05.881]                       }
[17:40:05.881]                       else if (inherits(cond, "warning")) {
[17:40:05.881]                         muffled <- grepl(pattern, "muffleWarning")
[17:40:05.881]                         if (muffled) 
[17:40:05.881]                           invokeRestart("muffleWarning")
[17:40:05.881]                       }
[17:40:05.881]                       else if (inherits(cond, "condition")) {
[17:40:05.881]                         if (!is.null(pattern)) {
[17:40:05.881]                           computeRestarts <- base::computeRestarts
[17:40:05.881]                           grepl <- base::grepl
[17:40:05.881]                           restarts <- computeRestarts(cond)
[17:40:05.881]                           for (restart in restarts) {
[17:40:05.881]                             name <- restart$name
[17:40:05.881]                             if (is.null(name)) 
[17:40:05.881]                               next
[17:40:05.881]                             if (!grepl(pattern, name)) 
[17:40:05.881]                               next
[17:40:05.881]                             invokeRestart(restart)
[17:40:05.881]                             muffled <- TRUE
[17:40:05.881]                             break
[17:40:05.881]                           }
[17:40:05.881]                         }
[17:40:05.881]                       }
[17:40:05.881]                       invisible(muffled)
[17:40:05.881]                     }
[17:40:05.881]                     muffleCondition(cond, pattern = "^muffle")
[17:40:05.881]                   }
[17:40:05.881]                 }
[17:40:05.881]             }
[17:40:05.881]         }))
[17:40:05.881]     }, error = function(ex) {
[17:40:05.881]         base::structure(base::list(value = NULL, visible = NULL, 
[17:40:05.881]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:40:05.881]                 ...future.rng), started = ...future.startTime, 
[17:40:05.881]             finished = Sys.time(), session_uuid = NA_character_, 
[17:40:05.881]             version = "1.8"), class = "FutureResult")
[17:40:05.881]     }, finally = {
[17:40:05.881]         if (!identical(...future.workdir, getwd())) 
[17:40:05.881]             setwd(...future.workdir)
[17:40:05.881]         {
[17:40:05.881]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:40:05.881]                 ...future.oldOptions$nwarnings <- NULL
[17:40:05.881]             }
[17:40:05.881]             base::options(...future.oldOptions)
[17:40:05.881]             if (.Platform$OS.type == "windows") {
[17:40:05.881]                 old_names <- names(...future.oldEnvVars)
[17:40:05.881]                 envs <- base::Sys.getenv()
[17:40:05.881]                 names <- names(envs)
[17:40:05.881]                 common <- intersect(names, old_names)
[17:40:05.881]                 added <- setdiff(names, old_names)
[17:40:05.881]                 removed <- setdiff(old_names, names)
[17:40:05.881]                 changed <- common[...future.oldEnvVars[common] != 
[17:40:05.881]                   envs[common]]
[17:40:05.881]                 NAMES <- toupper(changed)
[17:40:05.881]                 args <- list()
[17:40:05.881]                 for (kk in seq_along(NAMES)) {
[17:40:05.881]                   name <- changed[[kk]]
[17:40:05.881]                   NAME <- NAMES[[kk]]
[17:40:05.881]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.881]                     next
[17:40:05.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.881]                 }
[17:40:05.881]                 NAMES <- toupper(added)
[17:40:05.881]                 for (kk in seq_along(NAMES)) {
[17:40:05.881]                   name <- added[[kk]]
[17:40:05.881]                   NAME <- NAMES[[kk]]
[17:40:05.881]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.881]                     next
[17:40:05.881]                   args[[name]] <- ""
[17:40:05.881]                 }
[17:40:05.881]                 NAMES <- toupper(removed)
[17:40:05.881]                 for (kk in seq_along(NAMES)) {
[17:40:05.881]                   name <- removed[[kk]]
[17:40:05.881]                   NAME <- NAMES[[kk]]
[17:40:05.881]                   if (name != NAME && is.element(NAME, old_names)) 
[17:40:05.881]                     next
[17:40:05.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:40:05.881]                 }
[17:40:05.881]                 if (length(args) > 0) 
[17:40:05.881]                   base::do.call(base::Sys.setenv, args = args)
[17:40:05.881]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:40:05.881]             }
[17:40:05.881]             else {
[17:40:05.881]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:40:05.881]             }
[17:40:05.881]             {
[17:40:05.881]                 if (base::length(...future.futureOptionsAdded) > 
[17:40:05.881]                   0L) {
[17:40:05.881]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:40:05.881]                   base::names(opts) <- ...future.futureOptionsAdded
[17:40:05.881]                   base::options(opts)
[17:40:05.881]                 }
[17:40:05.881]                 {
[17:40:05.881]                   {
[17:40:05.881]                     base::options(mc.cores = ...future.mc.cores.old)
[17:40:05.881]                     NULL
[17:40:05.881]                   }
[17:40:05.881]                   options(future.plan = NULL)
[17:40:05.881]                   if (is.na(NA_character_)) 
[17:40:05.881]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:40:05.881]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:40:05.881]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:40:05.881]                     .init = FALSE)
[17:40:05.881]                 }
[17:40:05.881]             }
[17:40:05.881]         }
[17:40:05.881]     })
[17:40:05.881]     if (TRUE) {
[17:40:05.881]         base::sink(type = "output", split = FALSE)
[17:40:05.881]         if (TRUE) {
[17:40:05.881]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:40:05.881]         }
[17:40:05.881]         else {
[17:40:05.881]             ...future.result["stdout"] <- base::list(NULL)
[17:40:05.881]         }
[17:40:05.881]         base::close(...future.stdout)
[17:40:05.881]         ...future.stdout <- NULL
[17:40:05.881]     }
[17:40:05.881]     ...future.result$conditions <- ...future.conditions
[17:40:05.881]     ...future.result$finished <- base::Sys.time()
[17:40:05.881]     ...future.result
[17:40:05.881] }
[17:40:05.931] Exporting 1 global objects (1.56 MiB) to cluster node #2 ...
[17:40:05.933] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ...
[17:40:05.944] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ... DONE
[17:40:05.944] Exporting 1 global objects (1.56 MiB) to cluster node #2 ... DONE
[17:40:05.944] MultisessionFuture started
[17:40:05.944] - Launch lazy future ... done
[17:40:05.945] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.56 MiB (MultisessionFuture ‘f1’ of 1.56 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: b28994a1-f639-ebfc-1ce2-bc31158b6db5
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[17:40:05.961] result() for ClusterFuture ...
[17:40:05.961] receiveMessageFromWorker() for ClusterFuture ...
[17:40:05.961] - Validating connection of MultisessionFuture
[17:40:06.035] - received message: FutureResult
[17:40:06.035] - Received FutureResult
[17:40:06.035] - Erased future from FutureRegistry
[17:40:06.035] result() for ClusterFuture ...
[17:40:06.035] - result already collected: FutureResult
[17:40:06.035] result() for ClusterFuture ... done
[17:40:06.036] signalConditions() ...
[17:40:06.036]  - include = ‘immediateCondition’
[17:40:06.036]  - exclude = 
[17:40:06.036]  - resignal = FALSE
[17:40:06.036]  - Number of conditions: 1
[17:40:06.036] signalConditions() ... done
[17:40:06.036] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:06.036] result() for ClusterFuture ... done
[17:40:06.036] result() for ClusterFuture ...
[17:40:06.036] - result already collected: FutureResult
[17:40:06.036] result() for ClusterFuture ... done
[17:40:06.037] signalConditions() ...
[17:40:06.037]  - include = ‘immediateCondition’
[17:40:06.037]  - exclude = 
[17:40:06.037]  - resignal = FALSE
[17:40:06.037]  - Number of conditions: 1
[17:40:06.037] signalConditions() ... done
[17:40:06.037] Future state: ‘finished’
[17:40:06.037] result() for ClusterFuture ...
[17:40:06.037] - result already collected: FutureResult
[17:40:06.037] result() for ClusterFuture ... done
[17:40:06.037] signalConditions() ...
[17:40:06.037]  - include = ‘condition’
[17:40:06.038]  - exclude = ‘immediateCondition’
[17:40:06.038]  - resignal = TRUE
[17:40:06.038]  - Number of conditions: 1
[17:40:06.038]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[17:40:06.038] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (b28994a1-f639-ebfc-1ce2-bc31158b6db5; pid 45195 on 3fe59e189152) that created it, not by any other R processes (be931dab-dd5b-ad08-fe99-973912de50e9; pid 45248 on 3fe59e189152): {; 42L; }>


Future UUID: d5fa8488-7931-c0f8-e05e-ec3780c50056


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: b28994a1-f639-ebfc-1ce2-bc31158b6db5
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[17:40:06.039] result() for ClusterFuture ...
[17:40:06.039] receiveMessageFromWorker() for ClusterFuture ...
[17:40:06.039] - Validating connection of MultisessionFuture
[17:40:06.039] - received message: FutureResult
[17:40:06.039] - Received FutureResult
[17:40:06.039] - Erased future from FutureRegistry
[17:40:06.040] result() for ClusterFuture ...
[17:40:06.040] - result already collected: FutureResult
[17:40:06.040] result() for ClusterFuture ... done
[17:40:06.040] receiveMessageFromWorker() for ClusterFuture ... done
[17:40:06.040] result() for ClusterFuture ... done
[17:40:06.040] result() for ClusterFuture ...
[17:40:06.040] - result already collected: FutureResult
[17:40:06.040] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[17:40:06.041] plan(): Setting new future strategy stack:
[17:40:06.041] List of future strategies:
[17:40:06.041] 1. FutureStrategy:
[17:40:06.041]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:40:06.041]    - tweaked: FALSE
[17:40:06.041]    - call: future::plan(oplan)
[17:40:06.042] plan(): nbrOfWorkers() = 1
> 
