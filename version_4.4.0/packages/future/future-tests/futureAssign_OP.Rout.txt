
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:39:25.054] plan(): Setting new future strategy stack:
[17:39:25.054] List of future strategies:
[17:39:25.054] 1. sequential:
[17:39:25.054]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.054]    - tweaked: FALSE
[17:39:25.054]    - call: future::plan("sequential")
[17:39:25.066] plan(): nbrOfWorkers() = 1
> 
> message("*** %<-% ...")
*** %<-% ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** %%<-%% with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     rm(list = intersect(c("x", "y"), ls()))
+ 
+     message("** Future evaluation without globals")
+     v1 %<-% { x <- 1 }
+     stopifnot(!exists("x", inherits = FALSE), identical(v1, 1))
+ 
+     message("** Future evaluation with globals")
+     a <- 2
+     v2 %<-% { x <- a }
+     stopifnot(!exists("x", inherits = FALSE), identical(v2, a))
+ 
+     message("** Future evaluation with errors")
+     v3 %<-% {
+       x <- 3
+       stop("Woops!")
+       x
+     }
+     stopifnot(!exists("x", inherits = FALSE))
+     res <- tryCatch(identical(v3, 3), error = identity)
+     stopifnot(inherits(res, "error"))
+ 
+ 
+     y <- listenv::listenv()
+     for (ii in 1:3) {
+       y[[ii]] %<-% {
+         if (ii %% 2 == 0) stop("Woops!")
+         ii
+       }
+     }
+     res <- tryCatch(as.list(y), error = identity)
+     stopifnot(inherits(res, "error"))
+     z <- y[c(1, 3)]
+     z <- unlist(z)
+     stopifnot(all(z == c(1, 3)))
+     res <- tryCatch(y[[2]], error = identity)
+     stopifnot(inherits(res, "error"))
+     res <- tryCatch(y[1:2], error = identity)
+     stopifnot(inherits(res, "error"))
+ 
+ 
+     message("** Future evaluation with a poor-man's \"progress bar\"")
+     v4 %<-% {
+       cat("Processing: ")
+       for (ii in 1:10) { cat(".") }
+       cat(" [100%]\n")
+       4
+     }
+ 
+ 
+     message("** Collecting results")
+     printf("v1 = %s\n", v1)
+     stopifnot(v1 == 1)
+ 
+     printf("v2 = %s\n", v2)
+     stopifnot(v2 == a)
+ 
+     stopifnot(tryCatch({
+       printf("v3 = %s\n", v3)
+     }, error = function(ex) {
+       printf("v3: <%s> (as expect)\n", class(ex)[1])
+       TRUE
+     }))
+ 
+     printf("v4 = %s\n", v4)
+     #stopifnot(v4 == 4)
+ 
+ 
+     message("** Left-to-right and right-to-left future assignments")
+     c %<-% 1
+     printf("c = %s\n", c)
+     1 %->% d
+     printf("d = %s\n", d)
+     stopifnot(d == c)
+ 
+ 
+ 
+     message("** Nested future assignments")
+     a %<-% {
+       b <- 1
+       c %<-% 2
+       3 -> d
+       4 %->% e
+       b + c + d + e
+     }
+     printf("a = %s\n", a)
+     stopifnot(a == 10)
+ 
+     { a + 1 } %->% b
+     printf("b = %s\n", b)
+     stopifnot(b == a + 1)
+ 
+     message(sprintf("*** %%<-%% with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** %<-% with ‘sequential’ futures ...
[17:39:25.124] plan(): Setting new future strategy stack:
[17:39:25.125] List of future strategies:
[17:39:25.125] 1. sequential:
[17:39:25.125]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.125]    - tweaked: FALSE
[17:39:25.125]    - call: plan(strategy)
[17:39:25.137] plan(): nbrOfWorkers() = 1
** Future evaluation without globals
[17:39:25.139] getGlobalsAndPackages() ...
[17:39:25.139] Searching for globals...
[17:39:25.144] - globals found: [2] ‘{’, ‘<-’
[17:39:25.144] Searching for globals ... DONE
[17:39:25.144] Resolving globals: FALSE
[17:39:25.144] 
[17:39:25.144] 
[17:39:25.145] getGlobalsAndPackages() ... DONE
[17:39:25.145] run() for ‘Future’ ...
[17:39:25.145] - state: ‘created’
[17:39:25.146] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.146] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.146] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.146]   - Field: ‘label’
[17:39:25.146]   - Field: ‘local’
[17:39:25.146]   - Field: ‘owner’
[17:39:25.146]   - Field: ‘envir’
[17:39:25.146]   - Field: ‘packages’
[17:39:25.147]   - Field: ‘gc’
[17:39:25.147]   - Field: ‘conditions’
[17:39:25.147]   - Field: ‘expr’
[17:39:25.147]   - Field: ‘uuid’
[17:39:25.147]   - Field: ‘seed’
[17:39:25.147]   - Field: ‘version’
[17:39:25.147]   - Field: ‘result’
[17:39:25.147]   - Field: ‘asynchronous’
[17:39:25.147]   - Field: ‘calls’
[17:39:25.147]   - Field: ‘globals’
[17:39:25.147]   - Field: ‘stdout’
[17:39:25.147]   - Field: ‘earlySignal’
[17:39:25.148]   - Field: ‘lazy’
[17:39:25.148]   - Field: ‘state’
[17:39:25.148] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.148] - Launch lazy future ...
[17:39:25.149] Packages needed by the future expression (n = 0): <none>
[17:39:25.149] Packages needed by future strategies (n = 0): <none>
[17:39:25.149] {
[17:39:25.149]     {
[17:39:25.149]         {
[17:39:25.149]             ...future.startTime <- base::Sys.time()
[17:39:25.149]             {
[17:39:25.149]                 {
[17:39:25.149]                   {
[17:39:25.149]                     base::local({
[17:39:25.149]                       has_future <- base::requireNamespace("future", 
[17:39:25.149]                         quietly = TRUE)
[17:39:25.149]                       if (has_future) {
[17:39:25.149]                         ns <- base::getNamespace("future")
[17:39:25.149]                         version <- ns[[".package"]][["version"]]
[17:39:25.149]                         if (is.null(version)) 
[17:39:25.149]                           version <- utils::packageVersion("future")
[17:39:25.149]                       }
[17:39:25.149]                       else {
[17:39:25.149]                         version <- NULL
[17:39:25.149]                       }
[17:39:25.149]                       if (!has_future || version < "1.8.0") {
[17:39:25.149]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.149]                           "", base::R.version$version.string), 
[17:39:25.149]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.149]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.149]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.149]                             "release", "version")], collapse = " "), 
[17:39:25.149]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.149]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.149]                           info)
[17:39:25.149]                         info <- base::paste(info, collapse = "; ")
[17:39:25.149]                         if (!has_future) {
[17:39:25.149]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.149]                             info)
[17:39:25.149]                         }
[17:39:25.149]                         else {
[17:39:25.149]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.149]                             info, version)
[17:39:25.149]                         }
[17:39:25.149]                         base::stop(msg)
[17:39:25.149]                       }
[17:39:25.149]                     })
[17:39:25.149]                   }
[17:39:25.149]                   ...future.strategy.old <- future::plan("list")
[17:39:25.149]                   options(future.plan = NULL)
[17:39:25.149]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.149]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.149]                 }
[17:39:25.149]                 ...future.workdir <- getwd()
[17:39:25.149]             }
[17:39:25.149]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.149]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.149]         }
[17:39:25.149]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.149]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.149]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.149]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.149]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.149]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.149]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.149]             base::names(...future.oldOptions))
[17:39:25.149]     }
[17:39:25.149]     if (FALSE) {
[17:39:25.149]     }
[17:39:25.149]     else {
[17:39:25.149]         if (TRUE) {
[17:39:25.149]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.149]                 open = "w")
[17:39:25.149]         }
[17:39:25.149]         else {
[17:39:25.149]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.149]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.149]         }
[17:39:25.149]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.149]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.149]             base::sink(type = "output", split = FALSE)
[17:39:25.149]             base::close(...future.stdout)
[17:39:25.149]         }, add = TRUE)
[17:39:25.149]     }
[17:39:25.149]     ...future.frame <- base::sys.nframe()
[17:39:25.149]     ...future.conditions <- base::list()
[17:39:25.149]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.149]     if (FALSE) {
[17:39:25.149]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.149]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.149]     }
[17:39:25.149]     ...future.result <- base::tryCatch({
[17:39:25.149]         base::withCallingHandlers({
[17:39:25.149]             ...future.value <- base::withVisible(base::local({
[17:39:25.149]                 x <- 1
[17:39:25.149]             }))
[17:39:25.149]             future::FutureResult(value = ...future.value$value, 
[17:39:25.149]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.149]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.149]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.149]                     ...future.globalenv.names))
[17:39:25.149]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.149]         }, condition = base::local({
[17:39:25.149]             c <- base::c
[17:39:25.149]             inherits <- base::inherits
[17:39:25.149]             invokeRestart <- base::invokeRestart
[17:39:25.149]             length <- base::length
[17:39:25.149]             list <- base::list
[17:39:25.149]             seq.int <- base::seq.int
[17:39:25.149]             signalCondition <- base::signalCondition
[17:39:25.149]             sys.calls <- base::sys.calls
[17:39:25.149]             `[[` <- base::`[[`
[17:39:25.149]             `+` <- base::`+`
[17:39:25.149]             `<<-` <- base::`<<-`
[17:39:25.149]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.149]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.149]                   3L)]
[17:39:25.149]             }
[17:39:25.149]             function(cond) {
[17:39:25.149]                 is_error <- inherits(cond, "error")
[17:39:25.149]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.149]                   NULL)
[17:39:25.149]                 if (is_error) {
[17:39:25.149]                   sessionInformation <- function() {
[17:39:25.149]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.149]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.149]                       search = base::search(), system = base::Sys.info())
[17:39:25.149]                   }
[17:39:25.149]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.149]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.149]                     cond$call), session = sessionInformation(), 
[17:39:25.149]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.149]                   signalCondition(cond)
[17:39:25.149]                 }
[17:39:25.149]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.149]                 "immediateCondition"))) {
[17:39:25.149]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.149]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.149]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.149]                   if (TRUE && !signal) {
[17:39:25.149]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.149]                     {
[17:39:25.149]                       inherits <- base::inherits
[17:39:25.149]                       invokeRestart <- base::invokeRestart
[17:39:25.149]                       is.null <- base::is.null
[17:39:25.149]                       muffled <- FALSE
[17:39:25.149]                       if (inherits(cond, "message")) {
[17:39:25.149]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.149]                         if (muffled) 
[17:39:25.149]                           invokeRestart("muffleMessage")
[17:39:25.149]                       }
[17:39:25.149]                       else if (inherits(cond, "warning")) {
[17:39:25.149]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.149]                         if (muffled) 
[17:39:25.149]                           invokeRestart("muffleWarning")
[17:39:25.149]                       }
[17:39:25.149]                       else if (inherits(cond, "condition")) {
[17:39:25.149]                         if (!is.null(pattern)) {
[17:39:25.149]                           computeRestarts <- base::computeRestarts
[17:39:25.149]                           grepl <- base::grepl
[17:39:25.149]                           restarts <- computeRestarts(cond)
[17:39:25.149]                           for (restart in restarts) {
[17:39:25.149]                             name <- restart$name
[17:39:25.149]                             if (is.null(name)) 
[17:39:25.149]                               next
[17:39:25.149]                             if (!grepl(pattern, name)) 
[17:39:25.149]                               next
[17:39:25.149]                             invokeRestart(restart)
[17:39:25.149]                             muffled <- TRUE
[17:39:25.149]                             break
[17:39:25.149]                           }
[17:39:25.149]                         }
[17:39:25.149]                       }
[17:39:25.149]                       invisible(muffled)
[17:39:25.149]                     }
[17:39:25.149]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.149]                   }
[17:39:25.149]                 }
[17:39:25.149]                 else {
[17:39:25.149]                   if (TRUE) {
[17:39:25.149]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.149]                     {
[17:39:25.149]                       inherits <- base::inherits
[17:39:25.149]                       invokeRestart <- base::invokeRestart
[17:39:25.149]                       is.null <- base::is.null
[17:39:25.149]                       muffled <- FALSE
[17:39:25.149]                       if (inherits(cond, "message")) {
[17:39:25.149]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.149]                         if (muffled) 
[17:39:25.149]                           invokeRestart("muffleMessage")
[17:39:25.149]                       }
[17:39:25.149]                       else if (inherits(cond, "warning")) {
[17:39:25.149]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.149]                         if (muffled) 
[17:39:25.149]                           invokeRestart("muffleWarning")
[17:39:25.149]                       }
[17:39:25.149]                       else if (inherits(cond, "condition")) {
[17:39:25.149]                         if (!is.null(pattern)) {
[17:39:25.149]                           computeRestarts <- base::computeRestarts
[17:39:25.149]                           grepl <- base::grepl
[17:39:25.149]                           restarts <- computeRestarts(cond)
[17:39:25.149]                           for (restart in restarts) {
[17:39:25.149]                             name <- restart$name
[17:39:25.149]                             if (is.null(name)) 
[17:39:25.149]                               next
[17:39:25.149]                             if (!grepl(pattern, name)) 
[17:39:25.149]                               next
[17:39:25.149]                             invokeRestart(restart)
[17:39:25.149]                             muffled <- TRUE
[17:39:25.149]                             break
[17:39:25.149]                           }
[17:39:25.149]                         }
[17:39:25.149]                       }
[17:39:25.149]                       invisible(muffled)
[17:39:25.149]                     }
[17:39:25.149]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.149]                   }
[17:39:25.149]                 }
[17:39:25.149]             }
[17:39:25.149]         }))
[17:39:25.149]     }, error = function(ex) {
[17:39:25.149]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.149]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.149]                 ...future.rng), started = ...future.startTime, 
[17:39:25.149]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.149]             version = "1.8"), class = "FutureResult")
[17:39:25.149]     }, finally = {
[17:39:25.149]         if (!identical(...future.workdir, getwd())) 
[17:39:25.149]             setwd(...future.workdir)
[17:39:25.149]         {
[17:39:25.149]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.149]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.149]             }
[17:39:25.149]             base::options(...future.oldOptions)
[17:39:25.149]             if (.Platform$OS.type == "windows") {
[17:39:25.149]                 old_names <- names(...future.oldEnvVars)
[17:39:25.149]                 envs <- base::Sys.getenv()
[17:39:25.149]                 names <- names(envs)
[17:39:25.149]                 common <- intersect(names, old_names)
[17:39:25.149]                 added <- setdiff(names, old_names)
[17:39:25.149]                 removed <- setdiff(old_names, names)
[17:39:25.149]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.149]                   envs[common]]
[17:39:25.149]                 NAMES <- toupper(changed)
[17:39:25.149]                 args <- list()
[17:39:25.149]                 for (kk in seq_along(NAMES)) {
[17:39:25.149]                   name <- changed[[kk]]
[17:39:25.149]                   NAME <- NAMES[[kk]]
[17:39:25.149]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.149]                     next
[17:39:25.149]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.149]                 }
[17:39:25.149]                 NAMES <- toupper(added)
[17:39:25.149]                 for (kk in seq_along(NAMES)) {
[17:39:25.149]                   name <- added[[kk]]
[17:39:25.149]                   NAME <- NAMES[[kk]]
[17:39:25.149]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.149]                     next
[17:39:25.149]                   args[[name]] <- ""
[17:39:25.149]                 }
[17:39:25.149]                 NAMES <- toupper(removed)
[17:39:25.149]                 for (kk in seq_along(NAMES)) {
[17:39:25.149]                   name <- removed[[kk]]
[17:39:25.149]                   NAME <- NAMES[[kk]]
[17:39:25.149]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.149]                     next
[17:39:25.149]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.149]                 }
[17:39:25.149]                 if (length(args) > 0) 
[17:39:25.149]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.149]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.149]             }
[17:39:25.149]             else {
[17:39:25.149]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.149]             }
[17:39:25.149]             {
[17:39:25.149]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.149]                   0L) {
[17:39:25.149]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.149]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.149]                   base::options(opts)
[17:39:25.149]                 }
[17:39:25.149]                 {
[17:39:25.149]                   {
[17:39:25.149]                     NULL
[17:39:25.149]                     RNGkind("Mersenne-Twister")
[17:39:25.149]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.149]                       inherits = FALSE)
[17:39:25.149]                   }
[17:39:25.149]                   options(future.plan = NULL)
[17:39:25.149]                   if (is.na(NA_character_)) 
[17:39:25.149]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.149]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.149]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.149]                     .init = FALSE)
[17:39:25.149]                 }
[17:39:25.149]             }
[17:39:25.149]         }
[17:39:25.149]     })
[17:39:25.149]     if (TRUE) {
[17:39:25.149]         base::sink(type = "output", split = FALSE)
[17:39:25.149]         if (TRUE) {
[17:39:25.149]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.149]         }
[17:39:25.149]         else {
[17:39:25.149]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.149]         }
[17:39:25.149]         base::close(...future.stdout)
[17:39:25.149]         ...future.stdout <- NULL
[17:39:25.149]     }
[17:39:25.149]     ...future.result$conditions <- ...future.conditions
[17:39:25.149]     ...future.result$finished <- base::Sys.time()
[17:39:25.149]     ...future.result
[17:39:25.149] }
[17:39:25.152] plan(): Setting new future strategy stack:
[17:39:25.152] List of future strategies:
[17:39:25.152] 1. sequential:
[17:39:25.152]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.152]    - tweaked: FALSE
[17:39:25.152]    - call: NULL
[17:39:25.153] plan(): nbrOfWorkers() = 1
[17:39:25.154] plan(): Setting new future strategy stack:
[17:39:25.154] List of future strategies:
[17:39:25.154] 1. sequential:
[17:39:25.154]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.154]    - tweaked: FALSE
[17:39:25.154]    - call: plan(strategy)
[17:39:25.155] plan(): nbrOfWorkers() = 1
[17:39:25.155] SequentialFuture started (and completed)
[17:39:25.155] - Launch lazy future ... done
[17:39:25.155] run() for ‘SequentialFuture’ ... done
** Future evaluation with globals
[17:39:25.156] getGlobalsAndPackages() ...
[17:39:25.156] Searching for globals...
[17:39:25.157] - globals found: [3] ‘{’, ‘<-’, ‘a’
[17:39:25.157] Searching for globals ... DONE
[17:39:25.157] Resolving globals: FALSE
[17:39:25.158] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:25.158] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:25.159] - globals: [1] ‘a’
[17:39:25.159] 
[17:39:25.159] getGlobalsAndPackages() ... DONE
[17:39:25.159] run() for ‘Future’ ...
[17:39:25.159] - state: ‘created’
[17:39:25.159] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.159] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.160] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.160]   - Field: ‘label’
[17:39:25.160]   - Field: ‘local’
[17:39:25.160]   - Field: ‘owner’
[17:39:25.160]   - Field: ‘envir’
[17:39:25.160]   - Field: ‘packages’
[17:39:25.160]   - Field: ‘gc’
[17:39:25.160]   - Field: ‘conditions’
[17:39:25.160]   - Field: ‘expr’
[17:39:25.160]   - Field: ‘uuid’
[17:39:25.161]   - Field: ‘seed’
[17:39:25.161]   - Field: ‘version’
[17:39:25.161]   - Field: ‘result’
[17:39:25.161]   - Field: ‘asynchronous’
[17:39:25.161]   - Field: ‘calls’
[17:39:25.161]   - Field: ‘globals’
[17:39:25.161]   - Field: ‘stdout’
[17:39:25.161]   - Field: ‘earlySignal’
[17:39:25.161]   - Field: ‘lazy’
[17:39:25.161]   - Field: ‘state’
[17:39:25.161] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.162] - Launch lazy future ...
[17:39:25.162] Packages needed by the future expression (n = 0): <none>
[17:39:25.162] Packages needed by future strategies (n = 0): <none>
[17:39:25.162] {
[17:39:25.162]     {
[17:39:25.162]         {
[17:39:25.162]             ...future.startTime <- base::Sys.time()
[17:39:25.162]             {
[17:39:25.162]                 {
[17:39:25.162]                   {
[17:39:25.162]                     base::local({
[17:39:25.162]                       has_future <- base::requireNamespace("future", 
[17:39:25.162]                         quietly = TRUE)
[17:39:25.162]                       if (has_future) {
[17:39:25.162]                         ns <- base::getNamespace("future")
[17:39:25.162]                         version <- ns[[".package"]][["version"]]
[17:39:25.162]                         if (is.null(version)) 
[17:39:25.162]                           version <- utils::packageVersion("future")
[17:39:25.162]                       }
[17:39:25.162]                       else {
[17:39:25.162]                         version <- NULL
[17:39:25.162]                       }
[17:39:25.162]                       if (!has_future || version < "1.8.0") {
[17:39:25.162]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.162]                           "", base::R.version$version.string), 
[17:39:25.162]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.162]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.162]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.162]                             "release", "version")], collapse = " "), 
[17:39:25.162]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.162]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.162]                           info)
[17:39:25.162]                         info <- base::paste(info, collapse = "; ")
[17:39:25.162]                         if (!has_future) {
[17:39:25.162]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.162]                             info)
[17:39:25.162]                         }
[17:39:25.162]                         else {
[17:39:25.162]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.162]                             info, version)
[17:39:25.162]                         }
[17:39:25.162]                         base::stop(msg)
[17:39:25.162]                       }
[17:39:25.162]                     })
[17:39:25.162]                   }
[17:39:25.162]                   ...future.strategy.old <- future::plan("list")
[17:39:25.162]                   options(future.plan = NULL)
[17:39:25.162]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.162]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.162]                 }
[17:39:25.162]                 ...future.workdir <- getwd()
[17:39:25.162]             }
[17:39:25.162]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.162]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.162]         }
[17:39:25.162]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.162]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.162]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.162]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.162]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.162]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.162]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.162]             base::names(...future.oldOptions))
[17:39:25.162]     }
[17:39:25.162]     if (FALSE) {
[17:39:25.162]     }
[17:39:25.162]     else {
[17:39:25.162]         if (TRUE) {
[17:39:25.162]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.162]                 open = "w")
[17:39:25.162]         }
[17:39:25.162]         else {
[17:39:25.162]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.162]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.162]         }
[17:39:25.162]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.162]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.162]             base::sink(type = "output", split = FALSE)
[17:39:25.162]             base::close(...future.stdout)
[17:39:25.162]         }, add = TRUE)
[17:39:25.162]     }
[17:39:25.162]     ...future.frame <- base::sys.nframe()
[17:39:25.162]     ...future.conditions <- base::list()
[17:39:25.162]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.162]     if (FALSE) {
[17:39:25.162]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.162]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.162]     }
[17:39:25.162]     ...future.result <- base::tryCatch({
[17:39:25.162]         base::withCallingHandlers({
[17:39:25.162]             ...future.value <- base::withVisible(base::local({
[17:39:25.162]                 x <- a
[17:39:25.162]             }))
[17:39:25.162]             future::FutureResult(value = ...future.value$value, 
[17:39:25.162]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.162]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.162]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.162]                     ...future.globalenv.names))
[17:39:25.162]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.162]         }, condition = base::local({
[17:39:25.162]             c <- base::c
[17:39:25.162]             inherits <- base::inherits
[17:39:25.162]             invokeRestart <- base::invokeRestart
[17:39:25.162]             length <- base::length
[17:39:25.162]             list <- base::list
[17:39:25.162]             seq.int <- base::seq.int
[17:39:25.162]             signalCondition <- base::signalCondition
[17:39:25.162]             sys.calls <- base::sys.calls
[17:39:25.162]             `[[` <- base::`[[`
[17:39:25.162]             `+` <- base::`+`
[17:39:25.162]             `<<-` <- base::`<<-`
[17:39:25.162]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.162]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.162]                   3L)]
[17:39:25.162]             }
[17:39:25.162]             function(cond) {
[17:39:25.162]                 is_error <- inherits(cond, "error")
[17:39:25.162]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.162]                   NULL)
[17:39:25.162]                 if (is_error) {
[17:39:25.162]                   sessionInformation <- function() {
[17:39:25.162]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.162]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.162]                       search = base::search(), system = base::Sys.info())
[17:39:25.162]                   }
[17:39:25.162]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.162]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.162]                     cond$call), session = sessionInformation(), 
[17:39:25.162]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.162]                   signalCondition(cond)
[17:39:25.162]                 }
[17:39:25.162]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.162]                 "immediateCondition"))) {
[17:39:25.162]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.162]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.162]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.162]                   if (TRUE && !signal) {
[17:39:25.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.162]                     {
[17:39:25.162]                       inherits <- base::inherits
[17:39:25.162]                       invokeRestart <- base::invokeRestart
[17:39:25.162]                       is.null <- base::is.null
[17:39:25.162]                       muffled <- FALSE
[17:39:25.162]                       if (inherits(cond, "message")) {
[17:39:25.162]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.162]                         if (muffled) 
[17:39:25.162]                           invokeRestart("muffleMessage")
[17:39:25.162]                       }
[17:39:25.162]                       else if (inherits(cond, "warning")) {
[17:39:25.162]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.162]                         if (muffled) 
[17:39:25.162]                           invokeRestart("muffleWarning")
[17:39:25.162]                       }
[17:39:25.162]                       else if (inherits(cond, "condition")) {
[17:39:25.162]                         if (!is.null(pattern)) {
[17:39:25.162]                           computeRestarts <- base::computeRestarts
[17:39:25.162]                           grepl <- base::grepl
[17:39:25.162]                           restarts <- computeRestarts(cond)
[17:39:25.162]                           for (restart in restarts) {
[17:39:25.162]                             name <- restart$name
[17:39:25.162]                             if (is.null(name)) 
[17:39:25.162]                               next
[17:39:25.162]                             if (!grepl(pattern, name)) 
[17:39:25.162]                               next
[17:39:25.162]                             invokeRestart(restart)
[17:39:25.162]                             muffled <- TRUE
[17:39:25.162]                             break
[17:39:25.162]                           }
[17:39:25.162]                         }
[17:39:25.162]                       }
[17:39:25.162]                       invisible(muffled)
[17:39:25.162]                     }
[17:39:25.162]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.162]                   }
[17:39:25.162]                 }
[17:39:25.162]                 else {
[17:39:25.162]                   if (TRUE) {
[17:39:25.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.162]                     {
[17:39:25.162]                       inherits <- base::inherits
[17:39:25.162]                       invokeRestart <- base::invokeRestart
[17:39:25.162]                       is.null <- base::is.null
[17:39:25.162]                       muffled <- FALSE
[17:39:25.162]                       if (inherits(cond, "message")) {
[17:39:25.162]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.162]                         if (muffled) 
[17:39:25.162]                           invokeRestart("muffleMessage")
[17:39:25.162]                       }
[17:39:25.162]                       else if (inherits(cond, "warning")) {
[17:39:25.162]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.162]                         if (muffled) 
[17:39:25.162]                           invokeRestart("muffleWarning")
[17:39:25.162]                       }
[17:39:25.162]                       else if (inherits(cond, "condition")) {
[17:39:25.162]                         if (!is.null(pattern)) {
[17:39:25.162]                           computeRestarts <- base::computeRestarts
[17:39:25.162]                           grepl <- base::grepl
[17:39:25.162]                           restarts <- computeRestarts(cond)
[17:39:25.162]                           for (restart in restarts) {
[17:39:25.162]                             name <- restart$name
[17:39:25.162]                             if (is.null(name)) 
[17:39:25.162]                               next
[17:39:25.162]                             if (!grepl(pattern, name)) 
[17:39:25.162]                               next
[17:39:25.162]                             invokeRestart(restart)
[17:39:25.162]                             muffled <- TRUE
[17:39:25.162]                             break
[17:39:25.162]                           }
[17:39:25.162]                         }
[17:39:25.162]                       }
[17:39:25.162]                       invisible(muffled)
[17:39:25.162]                     }
[17:39:25.162]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.162]                   }
[17:39:25.162]                 }
[17:39:25.162]             }
[17:39:25.162]         }))
[17:39:25.162]     }, error = function(ex) {
[17:39:25.162]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.162]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.162]                 ...future.rng), started = ...future.startTime, 
[17:39:25.162]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.162]             version = "1.8"), class = "FutureResult")
[17:39:25.162]     }, finally = {
[17:39:25.162]         if (!identical(...future.workdir, getwd())) 
[17:39:25.162]             setwd(...future.workdir)
[17:39:25.162]         {
[17:39:25.162]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.162]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.162]             }
[17:39:25.162]             base::options(...future.oldOptions)
[17:39:25.162]             if (.Platform$OS.type == "windows") {
[17:39:25.162]                 old_names <- names(...future.oldEnvVars)
[17:39:25.162]                 envs <- base::Sys.getenv()
[17:39:25.162]                 names <- names(envs)
[17:39:25.162]                 common <- intersect(names, old_names)
[17:39:25.162]                 added <- setdiff(names, old_names)
[17:39:25.162]                 removed <- setdiff(old_names, names)
[17:39:25.162]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.162]                   envs[common]]
[17:39:25.162]                 NAMES <- toupper(changed)
[17:39:25.162]                 args <- list()
[17:39:25.162]                 for (kk in seq_along(NAMES)) {
[17:39:25.162]                   name <- changed[[kk]]
[17:39:25.162]                   NAME <- NAMES[[kk]]
[17:39:25.162]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.162]                     next
[17:39:25.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.162]                 }
[17:39:25.162]                 NAMES <- toupper(added)
[17:39:25.162]                 for (kk in seq_along(NAMES)) {
[17:39:25.162]                   name <- added[[kk]]
[17:39:25.162]                   NAME <- NAMES[[kk]]
[17:39:25.162]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.162]                     next
[17:39:25.162]                   args[[name]] <- ""
[17:39:25.162]                 }
[17:39:25.162]                 NAMES <- toupper(removed)
[17:39:25.162]                 for (kk in seq_along(NAMES)) {
[17:39:25.162]                   name <- removed[[kk]]
[17:39:25.162]                   NAME <- NAMES[[kk]]
[17:39:25.162]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.162]                     next
[17:39:25.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.162]                 }
[17:39:25.162]                 if (length(args) > 0) 
[17:39:25.162]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.162]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.162]             }
[17:39:25.162]             else {
[17:39:25.162]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.162]             }
[17:39:25.162]             {
[17:39:25.162]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.162]                   0L) {
[17:39:25.162]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.162]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.162]                   base::options(opts)
[17:39:25.162]                 }
[17:39:25.162]                 {
[17:39:25.162]                   {
[17:39:25.162]                     NULL
[17:39:25.162]                     RNGkind("Mersenne-Twister")
[17:39:25.162]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.162]                       inherits = FALSE)
[17:39:25.162]                   }
[17:39:25.162]                   options(future.plan = NULL)
[17:39:25.162]                   if (is.na(NA_character_)) 
[17:39:25.162]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.162]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.162]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.162]                     .init = FALSE)
[17:39:25.162]                 }
[17:39:25.162]             }
[17:39:25.162]         }
[17:39:25.162]     })
[17:39:25.162]     if (TRUE) {
[17:39:25.162]         base::sink(type = "output", split = FALSE)
[17:39:25.162]         if (TRUE) {
[17:39:25.162]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.162]         }
[17:39:25.162]         else {
[17:39:25.162]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.162]         }
[17:39:25.162]         base::close(...future.stdout)
[17:39:25.162]         ...future.stdout <- NULL
[17:39:25.162]     }
[17:39:25.162]     ...future.result$conditions <- ...future.conditions
[17:39:25.162]     ...future.result$finished <- base::Sys.time()
[17:39:25.162]     ...future.result
[17:39:25.162] }
[17:39:25.164] assign_globals() ...
[17:39:25.164] List of 1
[17:39:25.164]  $ a: num 2
[17:39:25.164]  - attr(*, "where")=List of 1
[17:39:25.164]   ..$ a:<environment: R_EmptyEnv> 
[17:39:25.164]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:25.164]  - attr(*, "resolved")= logi FALSE
[17:39:25.164]  - attr(*, "total_size")= num 56
[17:39:25.164]  - attr(*, "already-done")= logi TRUE
[17:39:25.169] - copied ‘a’ to environment
[17:39:25.169] assign_globals() ... done
[17:39:25.169] plan(): Setting new future strategy stack:
[17:39:25.169] List of future strategies:
[17:39:25.169] 1. sequential:
[17:39:25.169]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.169]    - tweaked: FALSE
[17:39:25.169]    - call: NULL
[17:39:25.170] plan(): nbrOfWorkers() = 1
[17:39:25.170] plan(): Setting new future strategy stack:
[17:39:25.170] List of future strategies:
[17:39:25.170] 1. sequential:
[17:39:25.170]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.170]    - tweaked: FALSE
[17:39:25.170]    - call: plan(strategy)
[17:39:25.171] plan(): nbrOfWorkers() = 1
[17:39:25.171] SequentialFuture started (and completed)
[17:39:25.171] - Launch lazy future ... done
[17:39:25.171] run() for ‘SequentialFuture’ ... done
** Future evaluation with errors
[17:39:25.172] getGlobalsAndPackages() ...
[17:39:25.172] Searching for globals...
[17:39:25.178] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[17:39:25.178] Searching for globals ... DONE
[17:39:25.179] Resolving globals: FALSE
[17:39:25.179] 
[17:39:25.179] 
[17:39:25.179] getGlobalsAndPackages() ... DONE
[17:39:25.179] run() for ‘Future’ ...
[17:39:25.179] - state: ‘created’
[17:39:25.180] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.180] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.180] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.180]   - Field: ‘label’
[17:39:25.180]   - Field: ‘local’
[17:39:25.180]   - Field: ‘owner’
[17:39:25.180]   - Field: ‘envir’
[17:39:25.180]   - Field: ‘packages’
[17:39:25.181]   - Field: ‘gc’
[17:39:25.181]   - Field: ‘conditions’
[17:39:25.181]   - Field: ‘expr’
[17:39:25.181]   - Field: ‘uuid’
[17:39:25.181]   - Field: ‘seed’
[17:39:25.181]   - Field: ‘version’
[17:39:25.181]   - Field: ‘result’
[17:39:25.181]   - Field: ‘asynchronous’
[17:39:25.181]   - Field: ‘calls’
[17:39:25.181]   - Field: ‘globals’
[17:39:25.181]   - Field: ‘stdout’
[17:39:25.182]   - Field: ‘earlySignal’
[17:39:25.182]   - Field: ‘lazy’
[17:39:25.182]   - Field: ‘state’
[17:39:25.182] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.182] - Launch lazy future ...
[17:39:25.182] Packages needed by the future expression (n = 0): <none>
[17:39:25.182] Packages needed by future strategies (n = 0): <none>
[17:39:25.183] {
[17:39:25.183]     {
[17:39:25.183]         {
[17:39:25.183]             ...future.startTime <- base::Sys.time()
[17:39:25.183]             {
[17:39:25.183]                 {
[17:39:25.183]                   {
[17:39:25.183]                     base::local({
[17:39:25.183]                       has_future <- base::requireNamespace("future", 
[17:39:25.183]                         quietly = TRUE)
[17:39:25.183]                       if (has_future) {
[17:39:25.183]                         ns <- base::getNamespace("future")
[17:39:25.183]                         version <- ns[[".package"]][["version"]]
[17:39:25.183]                         if (is.null(version)) 
[17:39:25.183]                           version <- utils::packageVersion("future")
[17:39:25.183]                       }
[17:39:25.183]                       else {
[17:39:25.183]                         version <- NULL
[17:39:25.183]                       }
[17:39:25.183]                       if (!has_future || version < "1.8.0") {
[17:39:25.183]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.183]                           "", base::R.version$version.string), 
[17:39:25.183]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.183]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.183]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.183]                             "release", "version")], collapse = " "), 
[17:39:25.183]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.183]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.183]                           info)
[17:39:25.183]                         info <- base::paste(info, collapse = "; ")
[17:39:25.183]                         if (!has_future) {
[17:39:25.183]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.183]                             info)
[17:39:25.183]                         }
[17:39:25.183]                         else {
[17:39:25.183]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.183]                             info, version)
[17:39:25.183]                         }
[17:39:25.183]                         base::stop(msg)
[17:39:25.183]                       }
[17:39:25.183]                     })
[17:39:25.183]                   }
[17:39:25.183]                   ...future.strategy.old <- future::plan("list")
[17:39:25.183]                   options(future.plan = NULL)
[17:39:25.183]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.183]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.183]                 }
[17:39:25.183]                 ...future.workdir <- getwd()
[17:39:25.183]             }
[17:39:25.183]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.183]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.183]         }
[17:39:25.183]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.183]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.183]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.183]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.183]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.183]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.183]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.183]             base::names(...future.oldOptions))
[17:39:25.183]     }
[17:39:25.183]     if (FALSE) {
[17:39:25.183]     }
[17:39:25.183]     else {
[17:39:25.183]         if (TRUE) {
[17:39:25.183]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.183]                 open = "w")
[17:39:25.183]         }
[17:39:25.183]         else {
[17:39:25.183]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.183]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.183]         }
[17:39:25.183]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.183]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.183]             base::sink(type = "output", split = FALSE)
[17:39:25.183]             base::close(...future.stdout)
[17:39:25.183]         }, add = TRUE)
[17:39:25.183]     }
[17:39:25.183]     ...future.frame <- base::sys.nframe()
[17:39:25.183]     ...future.conditions <- base::list()
[17:39:25.183]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.183]     if (FALSE) {
[17:39:25.183]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.183]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.183]     }
[17:39:25.183]     ...future.result <- base::tryCatch({
[17:39:25.183]         base::withCallingHandlers({
[17:39:25.183]             ...future.value <- base::withVisible(base::local({
[17:39:25.183]                 x <- 3
[17:39:25.183]                 stop("Woops!")
[17:39:25.183]                 x
[17:39:25.183]             }))
[17:39:25.183]             future::FutureResult(value = ...future.value$value, 
[17:39:25.183]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.183]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.183]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.183]                     ...future.globalenv.names))
[17:39:25.183]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.183]         }, condition = base::local({
[17:39:25.183]             c <- base::c
[17:39:25.183]             inherits <- base::inherits
[17:39:25.183]             invokeRestart <- base::invokeRestart
[17:39:25.183]             length <- base::length
[17:39:25.183]             list <- base::list
[17:39:25.183]             seq.int <- base::seq.int
[17:39:25.183]             signalCondition <- base::signalCondition
[17:39:25.183]             sys.calls <- base::sys.calls
[17:39:25.183]             `[[` <- base::`[[`
[17:39:25.183]             `+` <- base::`+`
[17:39:25.183]             `<<-` <- base::`<<-`
[17:39:25.183]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.183]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.183]                   3L)]
[17:39:25.183]             }
[17:39:25.183]             function(cond) {
[17:39:25.183]                 is_error <- inherits(cond, "error")
[17:39:25.183]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.183]                   NULL)
[17:39:25.183]                 if (is_error) {
[17:39:25.183]                   sessionInformation <- function() {
[17:39:25.183]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.183]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.183]                       search = base::search(), system = base::Sys.info())
[17:39:25.183]                   }
[17:39:25.183]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.183]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.183]                     cond$call), session = sessionInformation(), 
[17:39:25.183]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.183]                   signalCondition(cond)
[17:39:25.183]                 }
[17:39:25.183]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.183]                 "immediateCondition"))) {
[17:39:25.183]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.183]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.183]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.183]                   if (TRUE && !signal) {
[17:39:25.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.183]                     {
[17:39:25.183]                       inherits <- base::inherits
[17:39:25.183]                       invokeRestart <- base::invokeRestart
[17:39:25.183]                       is.null <- base::is.null
[17:39:25.183]                       muffled <- FALSE
[17:39:25.183]                       if (inherits(cond, "message")) {
[17:39:25.183]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.183]                         if (muffled) 
[17:39:25.183]                           invokeRestart("muffleMessage")
[17:39:25.183]                       }
[17:39:25.183]                       else if (inherits(cond, "warning")) {
[17:39:25.183]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.183]                         if (muffled) 
[17:39:25.183]                           invokeRestart("muffleWarning")
[17:39:25.183]                       }
[17:39:25.183]                       else if (inherits(cond, "condition")) {
[17:39:25.183]                         if (!is.null(pattern)) {
[17:39:25.183]                           computeRestarts <- base::computeRestarts
[17:39:25.183]                           grepl <- base::grepl
[17:39:25.183]                           restarts <- computeRestarts(cond)
[17:39:25.183]                           for (restart in restarts) {
[17:39:25.183]                             name <- restart$name
[17:39:25.183]                             if (is.null(name)) 
[17:39:25.183]                               next
[17:39:25.183]                             if (!grepl(pattern, name)) 
[17:39:25.183]                               next
[17:39:25.183]                             invokeRestart(restart)
[17:39:25.183]                             muffled <- TRUE
[17:39:25.183]                             break
[17:39:25.183]                           }
[17:39:25.183]                         }
[17:39:25.183]                       }
[17:39:25.183]                       invisible(muffled)
[17:39:25.183]                     }
[17:39:25.183]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.183]                   }
[17:39:25.183]                 }
[17:39:25.183]                 else {
[17:39:25.183]                   if (TRUE) {
[17:39:25.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.183]                     {
[17:39:25.183]                       inherits <- base::inherits
[17:39:25.183]                       invokeRestart <- base::invokeRestart
[17:39:25.183]                       is.null <- base::is.null
[17:39:25.183]                       muffled <- FALSE
[17:39:25.183]                       if (inherits(cond, "message")) {
[17:39:25.183]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.183]                         if (muffled) 
[17:39:25.183]                           invokeRestart("muffleMessage")
[17:39:25.183]                       }
[17:39:25.183]                       else if (inherits(cond, "warning")) {
[17:39:25.183]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.183]                         if (muffled) 
[17:39:25.183]                           invokeRestart("muffleWarning")
[17:39:25.183]                       }
[17:39:25.183]                       else if (inherits(cond, "condition")) {
[17:39:25.183]                         if (!is.null(pattern)) {
[17:39:25.183]                           computeRestarts <- base::computeRestarts
[17:39:25.183]                           grepl <- base::grepl
[17:39:25.183]                           restarts <- computeRestarts(cond)
[17:39:25.183]                           for (restart in restarts) {
[17:39:25.183]                             name <- restart$name
[17:39:25.183]                             if (is.null(name)) 
[17:39:25.183]                               next
[17:39:25.183]                             if (!grepl(pattern, name)) 
[17:39:25.183]                               next
[17:39:25.183]                             invokeRestart(restart)
[17:39:25.183]                             muffled <- TRUE
[17:39:25.183]                             break
[17:39:25.183]                           }
[17:39:25.183]                         }
[17:39:25.183]                       }
[17:39:25.183]                       invisible(muffled)
[17:39:25.183]                     }
[17:39:25.183]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.183]                   }
[17:39:25.183]                 }
[17:39:25.183]             }
[17:39:25.183]         }))
[17:39:25.183]     }, error = function(ex) {
[17:39:25.183]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.183]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.183]                 ...future.rng), started = ...future.startTime, 
[17:39:25.183]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.183]             version = "1.8"), class = "FutureResult")
[17:39:25.183]     }, finally = {
[17:39:25.183]         if (!identical(...future.workdir, getwd())) 
[17:39:25.183]             setwd(...future.workdir)
[17:39:25.183]         {
[17:39:25.183]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.183]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.183]             }
[17:39:25.183]             base::options(...future.oldOptions)
[17:39:25.183]             if (.Platform$OS.type == "windows") {
[17:39:25.183]                 old_names <- names(...future.oldEnvVars)
[17:39:25.183]                 envs <- base::Sys.getenv()
[17:39:25.183]                 names <- names(envs)
[17:39:25.183]                 common <- intersect(names, old_names)
[17:39:25.183]                 added <- setdiff(names, old_names)
[17:39:25.183]                 removed <- setdiff(old_names, names)
[17:39:25.183]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.183]                   envs[common]]
[17:39:25.183]                 NAMES <- toupper(changed)
[17:39:25.183]                 args <- list()
[17:39:25.183]                 for (kk in seq_along(NAMES)) {
[17:39:25.183]                   name <- changed[[kk]]
[17:39:25.183]                   NAME <- NAMES[[kk]]
[17:39:25.183]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.183]                     next
[17:39:25.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.183]                 }
[17:39:25.183]                 NAMES <- toupper(added)
[17:39:25.183]                 for (kk in seq_along(NAMES)) {
[17:39:25.183]                   name <- added[[kk]]
[17:39:25.183]                   NAME <- NAMES[[kk]]
[17:39:25.183]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.183]                     next
[17:39:25.183]                   args[[name]] <- ""
[17:39:25.183]                 }
[17:39:25.183]                 NAMES <- toupper(removed)
[17:39:25.183]                 for (kk in seq_along(NAMES)) {
[17:39:25.183]                   name <- removed[[kk]]
[17:39:25.183]                   NAME <- NAMES[[kk]]
[17:39:25.183]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.183]                     next
[17:39:25.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.183]                 }
[17:39:25.183]                 if (length(args) > 0) 
[17:39:25.183]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.183]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.183]             }
[17:39:25.183]             else {
[17:39:25.183]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.183]             }
[17:39:25.183]             {
[17:39:25.183]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.183]                   0L) {
[17:39:25.183]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.183]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.183]                   base::options(opts)
[17:39:25.183]                 }
[17:39:25.183]                 {
[17:39:25.183]                   {
[17:39:25.183]                     NULL
[17:39:25.183]                     RNGkind("Mersenne-Twister")
[17:39:25.183]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.183]                       inherits = FALSE)
[17:39:25.183]                   }
[17:39:25.183]                   options(future.plan = NULL)
[17:39:25.183]                   if (is.na(NA_character_)) 
[17:39:25.183]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.183]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.183]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.183]                     .init = FALSE)
[17:39:25.183]                 }
[17:39:25.183]             }
[17:39:25.183]         }
[17:39:25.183]     })
[17:39:25.183]     if (TRUE) {
[17:39:25.183]         base::sink(type = "output", split = FALSE)
[17:39:25.183]         if (TRUE) {
[17:39:25.183]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.183]         }
[17:39:25.183]         else {
[17:39:25.183]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.183]         }
[17:39:25.183]         base::close(...future.stdout)
[17:39:25.183]         ...future.stdout <- NULL
[17:39:25.183]     }
[17:39:25.183]     ...future.result$conditions <- ...future.conditions
[17:39:25.183]     ...future.result$finished <- base::Sys.time()
[17:39:25.183]     ...future.result
[17:39:25.183] }
[17:39:25.184] plan(): Setting new future strategy stack:
[17:39:25.184] List of future strategies:
[17:39:25.184] 1. sequential:
[17:39:25.184]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.184]    - tweaked: FALSE
[17:39:25.184]    - call: NULL
[17:39:25.185] plan(): nbrOfWorkers() = 1
[17:39:25.186] plan(): Setting new future strategy stack:
[17:39:25.186] List of future strategies:
[17:39:25.186] 1. sequential:
[17:39:25.186]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.186]    - tweaked: FALSE
[17:39:25.186]    - call: plan(strategy)
[17:39:25.186] plan(): nbrOfWorkers() = 1
[17:39:25.186] SequentialFuture started (and completed)
[17:39:25.187] signalConditions() ...
[17:39:25.187]  - include = ‘immediateCondition’
[17:39:25.187]  - exclude = 
[17:39:25.187]  - resignal = FALSE
[17:39:25.187]  - Number of conditions: 1
[17:39:25.187] signalConditions() ... done
[17:39:25.187] - Launch lazy future ... done
[17:39:25.187] run() for ‘SequentialFuture’ ... done
[17:39:25.187] signalConditions() ...
[17:39:25.188]  - include = ‘immediateCondition’
[17:39:25.188]  - exclude = 
[17:39:25.188]  - resignal = FALSE
[17:39:25.188]  - Number of conditions: 1
[17:39:25.188] signalConditions() ... done
[17:39:25.188] Future state: ‘finished’
[17:39:25.188] signalConditions() ...
[17:39:25.188]  - include = ‘condition’
[17:39:25.188]  - exclude = ‘immediateCondition’
[17:39:25.188]  - resignal = TRUE
[17:39:25.188]  - Number of conditions: 1
[17:39:25.189]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:25.189] signalConditions() ... done
[17:39:25.189] getGlobalsAndPackages() ...
[17:39:25.189] Searching for globals...
[17:39:25.191] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:39:25.191] Searching for globals ... DONE
[17:39:25.191] Resolving globals: FALSE
[17:39:25.192] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:25.192] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:39:25.192] - globals: [1] ‘ii’
[17:39:25.192] 
[17:39:25.192] getGlobalsAndPackages() ... DONE
[17:39:25.193] run() for ‘Future’ ...
[17:39:25.193] - state: ‘created’
[17:39:25.193] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.193] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.193] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.193]   - Field: ‘label’
[17:39:25.193]   - Field: ‘local’
[17:39:25.194]   - Field: ‘owner’
[17:39:25.194]   - Field: ‘envir’
[17:39:25.194]   - Field: ‘packages’
[17:39:25.194]   - Field: ‘gc’
[17:39:25.194]   - Field: ‘conditions’
[17:39:25.194]   - Field: ‘expr’
[17:39:25.194]   - Field: ‘uuid’
[17:39:25.194]   - Field: ‘seed’
[17:39:25.194]   - Field: ‘version’
[17:39:25.194]   - Field: ‘result’
[17:39:25.194]   - Field: ‘asynchronous’
[17:39:25.195]   - Field: ‘calls’
[17:39:25.195]   - Field: ‘globals’
[17:39:25.195]   - Field: ‘stdout’
[17:39:25.195]   - Field: ‘earlySignal’
[17:39:25.195]   - Field: ‘lazy’
[17:39:25.195]   - Field: ‘state’
[17:39:25.195] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.195] - Launch lazy future ...
[17:39:25.195] Packages needed by the future expression (n = 0): <none>
[17:39:25.195] Packages needed by future strategies (n = 0): <none>
[17:39:25.196] {
[17:39:25.196]     {
[17:39:25.196]         {
[17:39:25.196]             ...future.startTime <- base::Sys.time()
[17:39:25.196]             {
[17:39:25.196]                 {
[17:39:25.196]                   {
[17:39:25.196]                     base::local({
[17:39:25.196]                       has_future <- base::requireNamespace("future", 
[17:39:25.196]                         quietly = TRUE)
[17:39:25.196]                       if (has_future) {
[17:39:25.196]                         ns <- base::getNamespace("future")
[17:39:25.196]                         version <- ns[[".package"]][["version"]]
[17:39:25.196]                         if (is.null(version)) 
[17:39:25.196]                           version <- utils::packageVersion("future")
[17:39:25.196]                       }
[17:39:25.196]                       else {
[17:39:25.196]                         version <- NULL
[17:39:25.196]                       }
[17:39:25.196]                       if (!has_future || version < "1.8.0") {
[17:39:25.196]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.196]                           "", base::R.version$version.string), 
[17:39:25.196]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.196]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.196]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.196]                             "release", "version")], collapse = " "), 
[17:39:25.196]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.196]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.196]                           info)
[17:39:25.196]                         info <- base::paste(info, collapse = "; ")
[17:39:25.196]                         if (!has_future) {
[17:39:25.196]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.196]                             info)
[17:39:25.196]                         }
[17:39:25.196]                         else {
[17:39:25.196]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.196]                             info, version)
[17:39:25.196]                         }
[17:39:25.196]                         base::stop(msg)
[17:39:25.196]                       }
[17:39:25.196]                     })
[17:39:25.196]                   }
[17:39:25.196]                   ...future.strategy.old <- future::plan("list")
[17:39:25.196]                   options(future.plan = NULL)
[17:39:25.196]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.196]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.196]                 }
[17:39:25.196]                 ...future.workdir <- getwd()
[17:39:25.196]             }
[17:39:25.196]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.196]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.196]         }
[17:39:25.196]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.196]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.196]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.196]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.196]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.196]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.196]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.196]             base::names(...future.oldOptions))
[17:39:25.196]     }
[17:39:25.196]     if (FALSE) {
[17:39:25.196]     }
[17:39:25.196]     else {
[17:39:25.196]         if (TRUE) {
[17:39:25.196]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.196]                 open = "w")
[17:39:25.196]         }
[17:39:25.196]         else {
[17:39:25.196]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.196]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.196]         }
[17:39:25.196]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.196]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.196]             base::sink(type = "output", split = FALSE)
[17:39:25.196]             base::close(...future.stdout)
[17:39:25.196]         }, add = TRUE)
[17:39:25.196]     }
[17:39:25.196]     ...future.frame <- base::sys.nframe()
[17:39:25.196]     ...future.conditions <- base::list()
[17:39:25.196]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.196]     if (FALSE) {
[17:39:25.196]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.196]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.196]     }
[17:39:25.196]     ...future.result <- base::tryCatch({
[17:39:25.196]         base::withCallingHandlers({
[17:39:25.196]             ...future.value <- base::withVisible(base::local({
[17:39:25.196]                 if (ii%%2 == 0) 
[17:39:25.196]                   stop("Woops!")
[17:39:25.196]                 ii
[17:39:25.196]             }))
[17:39:25.196]             future::FutureResult(value = ...future.value$value, 
[17:39:25.196]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.196]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.196]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.196]                     ...future.globalenv.names))
[17:39:25.196]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.196]         }, condition = base::local({
[17:39:25.196]             c <- base::c
[17:39:25.196]             inherits <- base::inherits
[17:39:25.196]             invokeRestart <- base::invokeRestart
[17:39:25.196]             length <- base::length
[17:39:25.196]             list <- base::list
[17:39:25.196]             seq.int <- base::seq.int
[17:39:25.196]             signalCondition <- base::signalCondition
[17:39:25.196]             sys.calls <- base::sys.calls
[17:39:25.196]             `[[` <- base::`[[`
[17:39:25.196]             `+` <- base::`+`
[17:39:25.196]             `<<-` <- base::`<<-`
[17:39:25.196]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.196]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.196]                   3L)]
[17:39:25.196]             }
[17:39:25.196]             function(cond) {
[17:39:25.196]                 is_error <- inherits(cond, "error")
[17:39:25.196]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.196]                   NULL)
[17:39:25.196]                 if (is_error) {
[17:39:25.196]                   sessionInformation <- function() {
[17:39:25.196]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.196]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.196]                       search = base::search(), system = base::Sys.info())
[17:39:25.196]                   }
[17:39:25.196]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.196]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.196]                     cond$call), session = sessionInformation(), 
[17:39:25.196]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.196]                   signalCondition(cond)
[17:39:25.196]                 }
[17:39:25.196]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.196]                 "immediateCondition"))) {
[17:39:25.196]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.196]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.196]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.196]                   if (TRUE && !signal) {
[17:39:25.196]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.196]                     {
[17:39:25.196]                       inherits <- base::inherits
[17:39:25.196]                       invokeRestart <- base::invokeRestart
[17:39:25.196]                       is.null <- base::is.null
[17:39:25.196]                       muffled <- FALSE
[17:39:25.196]                       if (inherits(cond, "message")) {
[17:39:25.196]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.196]                         if (muffled) 
[17:39:25.196]                           invokeRestart("muffleMessage")
[17:39:25.196]                       }
[17:39:25.196]                       else if (inherits(cond, "warning")) {
[17:39:25.196]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.196]                         if (muffled) 
[17:39:25.196]                           invokeRestart("muffleWarning")
[17:39:25.196]                       }
[17:39:25.196]                       else if (inherits(cond, "condition")) {
[17:39:25.196]                         if (!is.null(pattern)) {
[17:39:25.196]                           computeRestarts <- base::computeRestarts
[17:39:25.196]                           grepl <- base::grepl
[17:39:25.196]                           restarts <- computeRestarts(cond)
[17:39:25.196]                           for (restart in restarts) {
[17:39:25.196]                             name <- restart$name
[17:39:25.196]                             if (is.null(name)) 
[17:39:25.196]                               next
[17:39:25.196]                             if (!grepl(pattern, name)) 
[17:39:25.196]                               next
[17:39:25.196]                             invokeRestart(restart)
[17:39:25.196]                             muffled <- TRUE
[17:39:25.196]                             break
[17:39:25.196]                           }
[17:39:25.196]                         }
[17:39:25.196]                       }
[17:39:25.196]                       invisible(muffled)
[17:39:25.196]                     }
[17:39:25.196]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.196]                   }
[17:39:25.196]                 }
[17:39:25.196]                 else {
[17:39:25.196]                   if (TRUE) {
[17:39:25.196]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.196]                     {
[17:39:25.196]                       inherits <- base::inherits
[17:39:25.196]                       invokeRestart <- base::invokeRestart
[17:39:25.196]                       is.null <- base::is.null
[17:39:25.196]                       muffled <- FALSE
[17:39:25.196]                       if (inherits(cond, "message")) {
[17:39:25.196]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.196]                         if (muffled) 
[17:39:25.196]                           invokeRestart("muffleMessage")
[17:39:25.196]                       }
[17:39:25.196]                       else if (inherits(cond, "warning")) {
[17:39:25.196]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.196]                         if (muffled) 
[17:39:25.196]                           invokeRestart("muffleWarning")
[17:39:25.196]                       }
[17:39:25.196]                       else if (inherits(cond, "condition")) {
[17:39:25.196]                         if (!is.null(pattern)) {
[17:39:25.196]                           computeRestarts <- base::computeRestarts
[17:39:25.196]                           grepl <- base::grepl
[17:39:25.196]                           restarts <- computeRestarts(cond)
[17:39:25.196]                           for (restart in restarts) {
[17:39:25.196]                             name <- restart$name
[17:39:25.196]                             if (is.null(name)) 
[17:39:25.196]                               next
[17:39:25.196]                             if (!grepl(pattern, name)) 
[17:39:25.196]                               next
[17:39:25.196]                             invokeRestart(restart)
[17:39:25.196]                             muffled <- TRUE
[17:39:25.196]                             break
[17:39:25.196]                           }
[17:39:25.196]                         }
[17:39:25.196]                       }
[17:39:25.196]                       invisible(muffled)
[17:39:25.196]                     }
[17:39:25.196]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.196]                   }
[17:39:25.196]                 }
[17:39:25.196]             }
[17:39:25.196]         }))
[17:39:25.196]     }, error = function(ex) {
[17:39:25.196]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.196]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.196]                 ...future.rng), started = ...future.startTime, 
[17:39:25.196]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.196]             version = "1.8"), class = "FutureResult")
[17:39:25.196]     }, finally = {
[17:39:25.196]         if (!identical(...future.workdir, getwd())) 
[17:39:25.196]             setwd(...future.workdir)
[17:39:25.196]         {
[17:39:25.196]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.196]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.196]             }
[17:39:25.196]             base::options(...future.oldOptions)
[17:39:25.196]             if (.Platform$OS.type == "windows") {
[17:39:25.196]                 old_names <- names(...future.oldEnvVars)
[17:39:25.196]                 envs <- base::Sys.getenv()
[17:39:25.196]                 names <- names(envs)
[17:39:25.196]                 common <- intersect(names, old_names)
[17:39:25.196]                 added <- setdiff(names, old_names)
[17:39:25.196]                 removed <- setdiff(old_names, names)
[17:39:25.196]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.196]                   envs[common]]
[17:39:25.196]                 NAMES <- toupper(changed)
[17:39:25.196]                 args <- list()
[17:39:25.196]                 for (kk in seq_along(NAMES)) {
[17:39:25.196]                   name <- changed[[kk]]
[17:39:25.196]                   NAME <- NAMES[[kk]]
[17:39:25.196]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.196]                     next
[17:39:25.196]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.196]                 }
[17:39:25.196]                 NAMES <- toupper(added)
[17:39:25.196]                 for (kk in seq_along(NAMES)) {
[17:39:25.196]                   name <- added[[kk]]
[17:39:25.196]                   NAME <- NAMES[[kk]]
[17:39:25.196]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.196]                     next
[17:39:25.196]                   args[[name]] <- ""
[17:39:25.196]                 }
[17:39:25.196]                 NAMES <- toupper(removed)
[17:39:25.196]                 for (kk in seq_along(NAMES)) {
[17:39:25.196]                   name <- removed[[kk]]
[17:39:25.196]                   NAME <- NAMES[[kk]]
[17:39:25.196]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.196]                     next
[17:39:25.196]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.196]                 }
[17:39:25.196]                 if (length(args) > 0) 
[17:39:25.196]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.196]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.196]             }
[17:39:25.196]             else {
[17:39:25.196]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.196]             }
[17:39:25.196]             {
[17:39:25.196]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.196]                   0L) {
[17:39:25.196]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.196]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.196]                   base::options(opts)
[17:39:25.196]                 }
[17:39:25.196]                 {
[17:39:25.196]                   {
[17:39:25.196]                     NULL
[17:39:25.196]                     RNGkind("Mersenne-Twister")
[17:39:25.196]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.196]                       inherits = FALSE)
[17:39:25.196]                   }
[17:39:25.196]                   options(future.plan = NULL)
[17:39:25.196]                   if (is.na(NA_character_)) 
[17:39:25.196]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.196]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.196]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.196]                     .init = FALSE)
[17:39:25.196]                 }
[17:39:25.196]             }
[17:39:25.196]         }
[17:39:25.196]     })
[17:39:25.196]     if (TRUE) {
[17:39:25.196]         base::sink(type = "output", split = FALSE)
[17:39:25.196]         if (TRUE) {
[17:39:25.196]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.196]         }
[17:39:25.196]         else {
[17:39:25.196]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.196]         }
[17:39:25.196]         base::close(...future.stdout)
[17:39:25.196]         ...future.stdout <- NULL
[17:39:25.196]     }
[17:39:25.196]     ...future.result$conditions <- ...future.conditions
[17:39:25.196]     ...future.result$finished <- base::Sys.time()
[17:39:25.196]     ...future.result
[17:39:25.196] }
[17:39:25.197] assign_globals() ...
[17:39:25.198] List of 1
[17:39:25.198]  $ ii: int 1
[17:39:25.198]  - attr(*, "where")=List of 1
[17:39:25.198]   ..$ ii:<environment: R_EmptyEnv> 
[17:39:25.198]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:25.198]  - attr(*, "resolved")= logi FALSE
[17:39:25.198]  - attr(*, "total_size")= num 56
[17:39:25.198]  - attr(*, "already-done")= logi TRUE
[17:39:25.200] - copied ‘ii’ to environment
[17:39:25.200] assign_globals() ... done
[17:39:25.200] plan(): Setting new future strategy stack:
[17:39:25.200] List of future strategies:
[17:39:25.200] 1. sequential:
[17:39:25.200]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.200]    - tweaked: FALSE
[17:39:25.200]    - call: NULL
[17:39:25.201] plan(): nbrOfWorkers() = 1
[17:39:25.202] plan(): Setting new future strategy stack:
[17:39:25.202] List of future strategies:
[17:39:25.202] 1. sequential:
[17:39:25.202]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.202]    - tweaked: FALSE
[17:39:25.202]    - call: plan(strategy)
[17:39:25.202] plan(): nbrOfWorkers() = 1
[17:39:25.202] SequentialFuture started (and completed)
[17:39:25.202] - Launch lazy future ... done
[17:39:25.202] run() for ‘SequentialFuture’ ... done
[17:39:25.203] getGlobalsAndPackages() ...
[17:39:25.203] Searching for globals...
[17:39:25.204] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:39:25.204] Searching for globals ... DONE
[17:39:25.204] Resolving globals: FALSE
[17:39:25.205] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:25.205] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:39:25.205] - globals: [1] ‘ii’
[17:39:25.205] 
[17:39:25.207] getGlobalsAndPackages() ... DONE
[17:39:25.207] run() for ‘Future’ ...
[17:39:25.207] - state: ‘created’
[17:39:25.208] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.208] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.208] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.208]   - Field: ‘label’
[17:39:25.208]   - Field: ‘local’
[17:39:25.208]   - Field: ‘owner’
[17:39:25.208]   - Field: ‘envir’
[17:39:25.209]   - Field: ‘packages’
[17:39:25.209]   - Field: ‘gc’
[17:39:25.209]   - Field: ‘conditions’
[17:39:25.209]   - Field: ‘expr’
[17:39:25.209]   - Field: ‘uuid’
[17:39:25.209]   - Field: ‘seed’
[17:39:25.209]   - Field: ‘version’
[17:39:25.209]   - Field: ‘result’
[17:39:25.209]   - Field: ‘asynchronous’
[17:39:25.209]   - Field: ‘calls’
[17:39:25.209]   - Field: ‘globals’
[17:39:25.210]   - Field: ‘stdout’
[17:39:25.210]   - Field: ‘earlySignal’
[17:39:25.210]   - Field: ‘lazy’
[17:39:25.210]   - Field: ‘state’
[17:39:25.210] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.210] - Launch lazy future ...
[17:39:25.210] Packages needed by the future expression (n = 0): <none>
[17:39:25.210] Packages needed by future strategies (n = 0): <none>
[17:39:25.211] {
[17:39:25.211]     {
[17:39:25.211]         {
[17:39:25.211]             ...future.startTime <- base::Sys.time()
[17:39:25.211]             {
[17:39:25.211]                 {
[17:39:25.211]                   {
[17:39:25.211]                     base::local({
[17:39:25.211]                       has_future <- base::requireNamespace("future", 
[17:39:25.211]                         quietly = TRUE)
[17:39:25.211]                       if (has_future) {
[17:39:25.211]                         ns <- base::getNamespace("future")
[17:39:25.211]                         version <- ns[[".package"]][["version"]]
[17:39:25.211]                         if (is.null(version)) 
[17:39:25.211]                           version <- utils::packageVersion("future")
[17:39:25.211]                       }
[17:39:25.211]                       else {
[17:39:25.211]                         version <- NULL
[17:39:25.211]                       }
[17:39:25.211]                       if (!has_future || version < "1.8.0") {
[17:39:25.211]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.211]                           "", base::R.version$version.string), 
[17:39:25.211]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.211]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.211]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.211]                             "release", "version")], collapse = " "), 
[17:39:25.211]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.211]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.211]                           info)
[17:39:25.211]                         info <- base::paste(info, collapse = "; ")
[17:39:25.211]                         if (!has_future) {
[17:39:25.211]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.211]                             info)
[17:39:25.211]                         }
[17:39:25.211]                         else {
[17:39:25.211]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.211]                             info, version)
[17:39:25.211]                         }
[17:39:25.211]                         base::stop(msg)
[17:39:25.211]                       }
[17:39:25.211]                     })
[17:39:25.211]                   }
[17:39:25.211]                   ...future.strategy.old <- future::plan("list")
[17:39:25.211]                   options(future.plan = NULL)
[17:39:25.211]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.211]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.211]                 }
[17:39:25.211]                 ...future.workdir <- getwd()
[17:39:25.211]             }
[17:39:25.211]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.211]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.211]         }
[17:39:25.211]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.211]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.211]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.211]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.211]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.211]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.211]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.211]             base::names(...future.oldOptions))
[17:39:25.211]     }
[17:39:25.211]     if (FALSE) {
[17:39:25.211]     }
[17:39:25.211]     else {
[17:39:25.211]         if (TRUE) {
[17:39:25.211]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.211]                 open = "w")
[17:39:25.211]         }
[17:39:25.211]         else {
[17:39:25.211]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.211]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.211]         }
[17:39:25.211]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.211]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.211]             base::sink(type = "output", split = FALSE)
[17:39:25.211]             base::close(...future.stdout)
[17:39:25.211]         }, add = TRUE)
[17:39:25.211]     }
[17:39:25.211]     ...future.frame <- base::sys.nframe()
[17:39:25.211]     ...future.conditions <- base::list()
[17:39:25.211]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.211]     if (FALSE) {
[17:39:25.211]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.211]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.211]     }
[17:39:25.211]     ...future.result <- base::tryCatch({
[17:39:25.211]         base::withCallingHandlers({
[17:39:25.211]             ...future.value <- base::withVisible(base::local({
[17:39:25.211]                 if (ii%%2 == 0) 
[17:39:25.211]                   stop("Woops!")
[17:39:25.211]                 ii
[17:39:25.211]             }))
[17:39:25.211]             future::FutureResult(value = ...future.value$value, 
[17:39:25.211]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.211]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.211]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.211]                     ...future.globalenv.names))
[17:39:25.211]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.211]         }, condition = base::local({
[17:39:25.211]             c <- base::c
[17:39:25.211]             inherits <- base::inherits
[17:39:25.211]             invokeRestart <- base::invokeRestart
[17:39:25.211]             length <- base::length
[17:39:25.211]             list <- base::list
[17:39:25.211]             seq.int <- base::seq.int
[17:39:25.211]             signalCondition <- base::signalCondition
[17:39:25.211]             sys.calls <- base::sys.calls
[17:39:25.211]             `[[` <- base::`[[`
[17:39:25.211]             `+` <- base::`+`
[17:39:25.211]             `<<-` <- base::`<<-`
[17:39:25.211]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.211]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.211]                   3L)]
[17:39:25.211]             }
[17:39:25.211]             function(cond) {
[17:39:25.211]                 is_error <- inherits(cond, "error")
[17:39:25.211]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.211]                   NULL)
[17:39:25.211]                 if (is_error) {
[17:39:25.211]                   sessionInformation <- function() {
[17:39:25.211]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.211]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.211]                       search = base::search(), system = base::Sys.info())
[17:39:25.211]                   }
[17:39:25.211]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.211]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.211]                     cond$call), session = sessionInformation(), 
[17:39:25.211]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.211]                   signalCondition(cond)
[17:39:25.211]                 }
[17:39:25.211]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.211]                 "immediateCondition"))) {
[17:39:25.211]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.211]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.211]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.211]                   if (TRUE && !signal) {
[17:39:25.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.211]                     {
[17:39:25.211]                       inherits <- base::inherits
[17:39:25.211]                       invokeRestart <- base::invokeRestart
[17:39:25.211]                       is.null <- base::is.null
[17:39:25.211]                       muffled <- FALSE
[17:39:25.211]                       if (inherits(cond, "message")) {
[17:39:25.211]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.211]                         if (muffled) 
[17:39:25.211]                           invokeRestart("muffleMessage")
[17:39:25.211]                       }
[17:39:25.211]                       else if (inherits(cond, "warning")) {
[17:39:25.211]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.211]                         if (muffled) 
[17:39:25.211]                           invokeRestart("muffleWarning")
[17:39:25.211]                       }
[17:39:25.211]                       else if (inherits(cond, "condition")) {
[17:39:25.211]                         if (!is.null(pattern)) {
[17:39:25.211]                           computeRestarts <- base::computeRestarts
[17:39:25.211]                           grepl <- base::grepl
[17:39:25.211]                           restarts <- computeRestarts(cond)
[17:39:25.211]                           for (restart in restarts) {
[17:39:25.211]                             name <- restart$name
[17:39:25.211]                             if (is.null(name)) 
[17:39:25.211]                               next
[17:39:25.211]                             if (!grepl(pattern, name)) 
[17:39:25.211]                               next
[17:39:25.211]                             invokeRestart(restart)
[17:39:25.211]                             muffled <- TRUE
[17:39:25.211]                             break
[17:39:25.211]                           }
[17:39:25.211]                         }
[17:39:25.211]                       }
[17:39:25.211]                       invisible(muffled)
[17:39:25.211]                     }
[17:39:25.211]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.211]                   }
[17:39:25.211]                 }
[17:39:25.211]                 else {
[17:39:25.211]                   if (TRUE) {
[17:39:25.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.211]                     {
[17:39:25.211]                       inherits <- base::inherits
[17:39:25.211]                       invokeRestart <- base::invokeRestart
[17:39:25.211]                       is.null <- base::is.null
[17:39:25.211]                       muffled <- FALSE
[17:39:25.211]                       if (inherits(cond, "message")) {
[17:39:25.211]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.211]                         if (muffled) 
[17:39:25.211]                           invokeRestart("muffleMessage")
[17:39:25.211]                       }
[17:39:25.211]                       else if (inherits(cond, "warning")) {
[17:39:25.211]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.211]                         if (muffled) 
[17:39:25.211]                           invokeRestart("muffleWarning")
[17:39:25.211]                       }
[17:39:25.211]                       else if (inherits(cond, "condition")) {
[17:39:25.211]                         if (!is.null(pattern)) {
[17:39:25.211]                           computeRestarts <- base::computeRestarts
[17:39:25.211]                           grepl <- base::grepl
[17:39:25.211]                           restarts <- computeRestarts(cond)
[17:39:25.211]                           for (restart in restarts) {
[17:39:25.211]                             name <- restart$name
[17:39:25.211]                             if (is.null(name)) 
[17:39:25.211]                               next
[17:39:25.211]                             if (!grepl(pattern, name)) 
[17:39:25.211]                               next
[17:39:25.211]                             invokeRestart(restart)
[17:39:25.211]                             muffled <- TRUE
[17:39:25.211]                             break
[17:39:25.211]                           }
[17:39:25.211]                         }
[17:39:25.211]                       }
[17:39:25.211]                       invisible(muffled)
[17:39:25.211]                     }
[17:39:25.211]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.211]                   }
[17:39:25.211]                 }
[17:39:25.211]             }
[17:39:25.211]         }))
[17:39:25.211]     }, error = function(ex) {
[17:39:25.211]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.211]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.211]                 ...future.rng), started = ...future.startTime, 
[17:39:25.211]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.211]             version = "1.8"), class = "FutureResult")
[17:39:25.211]     }, finally = {
[17:39:25.211]         if (!identical(...future.workdir, getwd())) 
[17:39:25.211]             setwd(...future.workdir)
[17:39:25.211]         {
[17:39:25.211]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.211]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.211]             }
[17:39:25.211]             base::options(...future.oldOptions)
[17:39:25.211]             if (.Platform$OS.type == "windows") {
[17:39:25.211]                 old_names <- names(...future.oldEnvVars)
[17:39:25.211]                 envs <- base::Sys.getenv()
[17:39:25.211]                 names <- names(envs)
[17:39:25.211]                 common <- intersect(names, old_names)
[17:39:25.211]                 added <- setdiff(names, old_names)
[17:39:25.211]                 removed <- setdiff(old_names, names)
[17:39:25.211]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.211]                   envs[common]]
[17:39:25.211]                 NAMES <- toupper(changed)
[17:39:25.211]                 args <- list()
[17:39:25.211]                 for (kk in seq_along(NAMES)) {
[17:39:25.211]                   name <- changed[[kk]]
[17:39:25.211]                   NAME <- NAMES[[kk]]
[17:39:25.211]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.211]                     next
[17:39:25.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.211]                 }
[17:39:25.211]                 NAMES <- toupper(added)
[17:39:25.211]                 for (kk in seq_along(NAMES)) {
[17:39:25.211]                   name <- added[[kk]]
[17:39:25.211]                   NAME <- NAMES[[kk]]
[17:39:25.211]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.211]                     next
[17:39:25.211]                   args[[name]] <- ""
[17:39:25.211]                 }
[17:39:25.211]                 NAMES <- toupper(removed)
[17:39:25.211]                 for (kk in seq_along(NAMES)) {
[17:39:25.211]                   name <- removed[[kk]]
[17:39:25.211]                   NAME <- NAMES[[kk]]
[17:39:25.211]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.211]                     next
[17:39:25.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.211]                 }
[17:39:25.211]                 if (length(args) > 0) 
[17:39:25.211]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.211]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.211]             }
[17:39:25.211]             else {
[17:39:25.211]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.211]             }
[17:39:25.211]             {
[17:39:25.211]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.211]                   0L) {
[17:39:25.211]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.211]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.211]                   base::options(opts)
[17:39:25.211]                 }
[17:39:25.211]                 {
[17:39:25.211]                   {
[17:39:25.211]                     NULL
[17:39:25.211]                     RNGkind("Mersenne-Twister")
[17:39:25.211]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.211]                       inherits = FALSE)
[17:39:25.211]                   }
[17:39:25.211]                   options(future.plan = NULL)
[17:39:25.211]                   if (is.na(NA_character_)) 
[17:39:25.211]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.211]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.211]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.211]                     .init = FALSE)
[17:39:25.211]                 }
[17:39:25.211]             }
[17:39:25.211]         }
[17:39:25.211]     })
[17:39:25.211]     if (TRUE) {
[17:39:25.211]         base::sink(type = "output", split = FALSE)
[17:39:25.211]         if (TRUE) {
[17:39:25.211]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.211]         }
[17:39:25.211]         else {
[17:39:25.211]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.211]         }
[17:39:25.211]         base::close(...future.stdout)
[17:39:25.211]         ...future.stdout <- NULL
[17:39:25.211]     }
[17:39:25.211]     ...future.result$conditions <- ...future.conditions
[17:39:25.211]     ...future.result$finished <- base::Sys.time()
[17:39:25.211]     ...future.result
[17:39:25.211] }
[17:39:25.212] assign_globals() ...
[17:39:25.212] List of 1
[17:39:25.212]  $ ii: int 2
[17:39:25.212]  - attr(*, "where")=List of 1
[17:39:25.212]   ..$ ii:<environment: R_EmptyEnv> 
[17:39:25.212]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:25.212]  - attr(*, "resolved")= logi FALSE
[17:39:25.212]  - attr(*, "total_size")= num 56
[17:39:25.212]  - attr(*, "already-done")= logi TRUE
[17:39:25.215] - copied ‘ii’ to environment
[17:39:25.215] assign_globals() ... done
[17:39:25.215] plan(): Setting new future strategy stack:
[17:39:25.215] List of future strategies:
[17:39:25.215] 1. sequential:
[17:39:25.215]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.215]    - tweaked: FALSE
[17:39:25.215]    - call: NULL
[17:39:25.216] plan(): nbrOfWorkers() = 1
[17:39:25.217] plan(): Setting new future strategy stack:
[17:39:25.217] List of future strategies:
[17:39:25.217] 1. sequential:
[17:39:25.217]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.217]    - tweaked: FALSE
[17:39:25.217]    - call: plan(strategy)
[17:39:25.217] plan(): nbrOfWorkers() = 1
[17:39:25.217] SequentialFuture started (and completed)
[17:39:25.217] signalConditions() ...
[17:39:25.218]  - include = ‘immediateCondition’
[17:39:25.218]  - exclude = 
[17:39:25.218]  - resignal = FALSE
[17:39:25.218]  - Number of conditions: 1
[17:39:25.218] signalConditions() ... done
[17:39:25.218] - Launch lazy future ... done
[17:39:25.218] run() for ‘SequentialFuture’ ... done
[17:39:25.218] getGlobalsAndPackages() ...
[17:39:25.219] Searching for globals...
[17:39:25.220] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:39:25.220] Searching for globals ... DONE
[17:39:25.220] Resolving globals: FALSE
[17:39:25.221] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:25.221] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:39:25.221] - globals: [1] ‘ii’
[17:39:25.221] 
[17:39:25.221] getGlobalsAndPackages() ... DONE
[17:39:25.222] run() for ‘Future’ ...
[17:39:25.222] - state: ‘created’
[17:39:25.222] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.222] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.222] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.222]   - Field: ‘label’
[17:39:25.222]   - Field: ‘local’
[17:39:25.223]   - Field: ‘owner’
[17:39:25.223]   - Field: ‘envir’
[17:39:25.223]   - Field: ‘packages’
[17:39:25.223]   - Field: ‘gc’
[17:39:25.223]   - Field: ‘conditions’
[17:39:25.223]   - Field: ‘expr’
[17:39:25.223]   - Field: ‘uuid’
[17:39:25.223]   - Field: ‘seed’
[17:39:25.223]   - Field: ‘version’
[17:39:25.223]   - Field: ‘result’
[17:39:25.223]   - Field: ‘asynchronous’
[17:39:25.224]   - Field: ‘calls’
[17:39:25.224]   - Field: ‘globals’
[17:39:25.224]   - Field: ‘stdout’
[17:39:25.224]   - Field: ‘earlySignal’
[17:39:25.224]   - Field: ‘lazy’
[17:39:25.224]   - Field: ‘state’
[17:39:25.224] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.224] - Launch lazy future ...
[17:39:25.224] Packages needed by the future expression (n = 0): <none>
[17:39:25.224] Packages needed by future strategies (n = 0): <none>
[17:39:25.225] {
[17:39:25.225]     {
[17:39:25.225]         {
[17:39:25.225]             ...future.startTime <- base::Sys.time()
[17:39:25.225]             {
[17:39:25.225]                 {
[17:39:25.225]                   {
[17:39:25.225]                     base::local({
[17:39:25.225]                       has_future <- base::requireNamespace("future", 
[17:39:25.225]                         quietly = TRUE)
[17:39:25.225]                       if (has_future) {
[17:39:25.225]                         ns <- base::getNamespace("future")
[17:39:25.225]                         version <- ns[[".package"]][["version"]]
[17:39:25.225]                         if (is.null(version)) 
[17:39:25.225]                           version <- utils::packageVersion("future")
[17:39:25.225]                       }
[17:39:25.225]                       else {
[17:39:25.225]                         version <- NULL
[17:39:25.225]                       }
[17:39:25.225]                       if (!has_future || version < "1.8.0") {
[17:39:25.225]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.225]                           "", base::R.version$version.string), 
[17:39:25.225]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.225]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.225]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.225]                             "release", "version")], collapse = " "), 
[17:39:25.225]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.225]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.225]                           info)
[17:39:25.225]                         info <- base::paste(info, collapse = "; ")
[17:39:25.225]                         if (!has_future) {
[17:39:25.225]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.225]                             info)
[17:39:25.225]                         }
[17:39:25.225]                         else {
[17:39:25.225]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.225]                             info, version)
[17:39:25.225]                         }
[17:39:25.225]                         base::stop(msg)
[17:39:25.225]                       }
[17:39:25.225]                     })
[17:39:25.225]                   }
[17:39:25.225]                   ...future.strategy.old <- future::plan("list")
[17:39:25.225]                   options(future.plan = NULL)
[17:39:25.225]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.225]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.225]                 }
[17:39:25.225]                 ...future.workdir <- getwd()
[17:39:25.225]             }
[17:39:25.225]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.225]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.225]         }
[17:39:25.225]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.225]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.225]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.225]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.225]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.225]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.225]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.225]             base::names(...future.oldOptions))
[17:39:25.225]     }
[17:39:25.225]     if (FALSE) {
[17:39:25.225]     }
[17:39:25.225]     else {
[17:39:25.225]         if (TRUE) {
[17:39:25.225]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.225]                 open = "w")
[17:39:25.225]         }
[17:39:25.225]         else {
[17:39:25.225]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.225]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.225]         }
[17:39:25.225]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.225]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.225]             base::sink(type = "output", split = FALSE)
[17:39:25.225]             base::close(...future.stdout)
[17:39:25.225]         }, add = TRUE)
[17:39:25.225]     }
[17:39:25.225]     ...future.frame <- base::sys.nframe()
[17:39:25.225]     ...future.conditions <- base::list()
[17:39:25.225]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.225]     if (FALSE) {
[17:39:25.225]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.225]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.225]     }
[17:39:25.225]     ...future.result <- base::tryCatch({
[17:39:25.225]         base::withCallingHandlers({
[17:39:25.225]             ...future.value <- base::withVisible(base::local({
[17:39:25.225]                 if (ii%%2 == 0) 
[17:39:25.225]                   stop("Woops!")
[17:39:25.225]                 ii
[17:39:25.225]             }))
[17:39:25.225]             future::FutureResult(value = ...future.value$value, 
[17:39:25.225]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.225]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.225]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.225]                     ...future.globalenv.names))
[17:39:25.225]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.225]         }, condition = base::local({
[17:39:25.225]             c <- base::c
[17:39:25.225]             inherits <- base::inherits
[17:39:25.225]             invokeRestart <- base::invokeRestart
[17:39:25.225]             length <- base::length
[17:39:25.225]             list <- base::list
[17:39:25.225]             seq.int <- base::seq.int
[17:39:25.225]             signalCondition <- base::signalCondition
[17:39:25.225]             sys.calls <- base::sys.calls
[17:39:25.225]             `[[` <- base::`[[`
[17:39:25.225]             `+` <- base::`+`
[17:39:25.225]             `<<-` <- base::`<<-`
[17:39:25.225]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.225]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.225]                   3L)]
[17:39:25.225]             }
[17:39:25.225]             function(cond) {
[17:39:25.225]                 is_error <- inherits(cond, "error")
[17:39:25.225]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.225]                   NULL)
[17:39:25.225]                 if (is_error) {
[17:39:25.225]                   sessionInformation <- function() {
[17:39:25.225]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.225]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.225]                       search = base::search(), system = base::Sys.info())
[17:39:25.225]                   }
[17:39:25.225]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.225]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.225]                     cond$call), session = sessionInformation(), 
[17:39:25.225]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.225]                   signalCondition(cond)
[17:39:25.225]                 }
[17:39:25.225]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.225]                 "immediateCondition"))) {
[17:39:25.225]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.225]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.225]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.225]                   if (TRUE && !signal) {
[17:39:25.225]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.225]                     {
[17:39:25.225]                       inherits <- base::inherits
[17:39:25.225]                       invokeRestart <- base::invokeRestart
[17:39:25.225]                       is.null <- base::is.null
[17:39:25.225]                       muffled <- FALSE
[17:39:25.225]                       if (inherits(cond, "message")) {
[17:39:25.225]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.225]                         if (muffled) 
[17:39:25.225]                           invokeRestart("muffleMessage")
[17:39:25.225]                       }
[17:39:25.225]                       else if (inherits(cond, "warning")) {
[17:39:25.225]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.225]                         if (muffled) 
[17:39:25.225]                           invokeRestart("muffleWarning")
[17:39:25.225]                       }
[17:39:25.225]                       else if (inherits(cond, "condition")) {
[17:39:25.225]                         if (!is.null(pattern)) {
[17:39:25.225]                           computeRestarts <- base::computeRestarts
[17:39:25.225]                           grepl <- base::grepl
[17:39:25.225]                           restarts <- computeRestarts(cond)
[17:39:25.225]                           for (restart in restarts) {
[17:39:25.225]                             name <- restart$name
[17:39:25.225]                             if (is.null(name)) 
[17:39:25.225]                               next
[17:39:25.225]                             if (!grepl(pattern, name)) 
[17:39:25.225]                               next
[17:39:25.225]                             invokeRestart(restart)
[17:39:25.225]                             muffled <- TRUE
[17:39:25.225]                             break
[17:39:25.225]                           }
[17:39:25.225]                         }
[17:39:25.225]                       }
[17:39:25.225]                       invisible(muffled)
[17:39:25.225]                     }
[17:39:25.225]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.225]                   }
[17:39:25.225]                 }
[17:39:25.225]                 else {
[17:39:25.225]                   if (TRUE) {
[17:39:25.225]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.225]                     {
[17:39:25.225]                       inherits <- base::inherits
[17:39:25.225]                       invokeRestart <- base::invokeRestart
[17:39:25.225]                       is.null <- base::is.null
[17:39:25.225]                       muffled <- FALSE
[17:39:25.225]                       if (inherits(cond, "message")) {
[17:39:25.225]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.225]                         if (muffled) 
[17:39:25.225]                           invokeRestart("muffleMessage")
[17:39:25.225]                       }
[17:39:25.225]                       else if (inherits(cond, "warning")) {
[17:39:25.225]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.225]                         if (muffled) 
[17:39:25.225]                           invokeRestart("muffleWarning")
[17:39:25.225]                       }
[17:39:25.225]                       else if (inherits(cond, "condition")) {
[17:39:25.225]                         if (!is.null(pattern)) {
[17:39:25.225]                           computeRestarts <- base::computeRestarts
[17:39:25.225]                           grepl <- base::grepl
[17:39:25.225]                           restarts <- computeRestarts(cond)
[17:39:25.225]                           for (restart in restarts) {
[17:39:25.225]                             name <- restart$name
[17:39:25.225]                             if (is.null(name)) 
[17:39:25.225]                               next
[17:39:25.225]                             if (!grepl(pattern, name)) 
[17:39:25.225]                               next
[17:39:25.225]                             invokeRestart(restart)
[17:39:25.225]                             muffled <- TRUE
[17:39:25.225]                             break
[17:39:25.225]                           }
[17:39:25.225]                         }
[17:39:25.225]                       }
[17:39:25.225]                       invisible(muffled)
[17:39:25.225]                     }
[17:39:25.225]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.225]                   }
[17:39:25.225]                 }
[17:39:25.225]             }
[17:39:25.225]         }))
[17:39:25.225]     }, error = function(ex) {
[17:39:25.225]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.225]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.225]                 ...future.rng), started = ...future.startTime, 
[17:39:25.225]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.225]             version = "1.8"), class = "FutureResult")
[17:39:25.225]     }, finally = {
[17:39:25.225]         if (!identical(...future.workdir, getwd())) 
[17:39:25.225]             setwd(...future.workdir)
[17:39:25.225]         {
[17:39:25.225]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.225]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.225]             }
[17:39:25.225]             base::options(...future.oldOptions)
[17:39:25.225]             if (.Platform$OS.type == "windows") {
[17:39:25.225]                 old_names <- names(...future.oldEnvVars)
[17:39:25.225]                 envs <- base::Sys.getenv()
[17:39:25.225]                 names <- names(envs)
[17:39:25.225]                 common <- intersect(names, old_names)
[17:39:25.225]                 added <- setdiff(names, old_names)
[17:39:25.225]                 removed <- setdiff(old_names, names)
[17:39:25.225]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.225]                   envs[common]]
[17:39:25.225]                 NAMES <- toupper(changed)
[17:39:25.225]                 args <- list()
[17:39:25.225]                 for (kk in seq_along(NAMES)) {
[17:39:25.225]                   name <- changed[[kk]]
[17:39:25.225]                   NAME <- NAMES[[kk]]
[17:39:25.225]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.225]                     next
[17:39:25.225]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.225]                 }
[17:39:25.225]                 NAMES <- toupper(added)
[17:39:25.225]                 for (kk in seq_along(NAMES)) {
[17:39:25.225]                   name <- added[[kk]]
[17:39:25.225]                   NAME <- NAMES[[kk]]
[17:39:25.225]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.225]                     next
[17:39:25.225]                   args[[name]] <- ""
[17:39:25.225]                 }
[17:39:25.225]                 NAMES <- toupper(removed)
[17:39:25.225]                 for (kk in seq_along(NAMES)) {
[17:39:25.225]                   name <- removed[[kk]]
[17:39:25.225]                   NAME <- NAMES[[kk]]
[17:39:25.225]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.225]                     next
[17:39:25.225]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.225]                 }
[17:39:25.225]                 if (length(args) > 0) 
[17:39:25.225]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.225]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.225]             }
[17:39:25.225]             else {
[17:39:25.225]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.225]             }
[17:39:25.225]             {
[17:39:25.225]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.225]                   0L) {
[17:39:25.225]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.225]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.225]                   base::options(opts)
[17:39:25.225]                 }
[17:39:25.225]                 {
[17:39:25.225]                   {
[17:39:25.225]                     NULL
[17:39:25.225]                     RNGkind("Mersenne-Twister")
[17:39:25.225]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.225]                       inherits = FALSE)
[17:39:25.225]                   }
[17:39:25.225]                   options(future.plan = NULL)
[17:39:25.225]                   if (is.na(NA_character_)) 
[17:39:25.225]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.225]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.225]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.225]                     .init = FALSE)
[17:39:25.225]                 }
[17:39:25.225]             }
[17:39:25.225]         }
[17:39:25.225]     })
[17:39:25.225]     if (TRUE) {
[17:39:25.225]         base::sink(type = "output", split = FALSE)
[17:39:25.225]         if (TRUE) {
[17:39:25.225]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.225]         }
[17:39:25.225]         else {
[17:39:25.225]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.225]         }
[17:39:25.225]         base::close(...future.stdout)
[17:39:25.225]         ...future.stdout <- NULL
[17:39:25.225]     }
[17:39:25.225]     ...future.result$conditions <- ...future.conditions
[17:39:25.225]     ...future.result$finished <- base::Sys.time()
[17:39:25.225]     ...future.result
[17:39:25.225] }
[17:39:25.226] assign_globals() ...
[17:39:25.227] List of 1
[17:39:25.227]  $ ii: int 3
[17:39:25.227]  - attr(*, "where")=List of 1
[17:39:25.227]   ..$ ii:<environment: R_EmptyEnv> 
[17:39:25.227]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:25.227]  - attr(*, "resolved")= logi FALSE
[17:39:25.227]  - attr(*, "total_size")= num 56
[17:39:25.227]  - attr(*, "already-done")= logi TRUE
[17:39:25.229] - copied ‘ii’ to environment
[17:39:25.229] assign_globals() ... done
[17:39:25.229] plan(): Setting new future strategy stack:
[17:39:25.229] List of future strategies:
[17:39:25.229] 1. sequential:
[17:39:25.229]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.229]    - tweaked: FALSE
[17:39:25.229]    - call: NULL
[17:39:25.230] plan(): nbrOfWorkers() = 1
[17:39:25.231] plan(): Setting new future strategy stack:
[17:39:25.231] List of future strategies:
[17:39:25.231] 1. sequential:
[17:39:25.231]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.231]    - tweaked: FALSE
[17:39:25.231]    - call: plan(strategy)
[17:39:25.231] plan(): nbrOfWorkers() = 1
[17:39:25.231] SequentialFuture started (and completed)
[17:39:25.231] - Launch lazy future ... done
[17:39:25.231] run() for ‘SequentialFuture’ ... done
[17:39:25.232] signalConditions() ...
[17:39:25.232]  - include = ‘immediateCondition’
[17:39:25.232]  - exclude = 
[17:39:25.232]  - resignal = FALSE
[17:39:25.232]  - Number of conditions: 1
[17:39:25.232] signalConditions() ... done
[17:39:25.232] Future state: ‘finished’
[17:39:25.233] signalConditions() ...
[17:39:25.233]  - include = ‘condition’
[17:39:25.233]  - exclude = ‘immediateCondition’
[17:39:25.233]  - resignal = TRUE
[17:39:25.233]  - Number of conditions: 1
[17:39:25.233]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:25.233] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[17:39:25.234] signalConditions() ...
[17:39:25.234]  - include = ‘immediateCondition’
[17:39:25.234]  - exclude = 
[17:39:25.234]  - resignal = FALSE
[17:39:25.235]  - Number of conditions: 1
[17:39:25.235] signalConditions() ... done
[17:39:25.235] Future state: ‘finished’
[17:39:25.235] signalConditions() ...
[17:39:25.235]  - include = ‘condition’
[17:39:25.235]  - exclude = ‘immediateCondition’
[17:39:25.235]  - resignal = TRUE
[17:39:25.235]  - Number of conditions: 1
[17:39:25.235]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:25.235] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[17:39:25.236] signalConditions() ...
[17:39:25.238]  - include = ‘immediateCondition’
[17:39:25.238]  - exclude = 
[17:39:25.238]  - resignal = FALSE
[17:39:25.238]  - Number of conditions: 1
[17:39:25.238] signalConditions() ... done
[17:39:25.238] Future state: ‘finished’
[17:39:25.238] signalConditions() ...
[17:39:25.238]  - include = ‘condition’
[17:39:25.238]  - exclude = ‘immediateCondition’
[17:39:25.239]  - resignal = TRUE
[17:39:25.239]  - Number of conditions: 1
[17:39:25.239]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:25.239] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[17:39:25.239] getGlobalsAndPackages() ...
[17:39:25.239] Searching for globals...
[17:39:25.241] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[17:39:25.241] Searching for globals ... DONE
[17:39:25.241] Resolving globals: FALSE
[17:39:25.242] 
[17:39:25.242] 
[17:39:25.242] getGlobalsAndPackages() ... DONE
[17:39:25.242] run() for ‘Future’ ...
[17:39:25.242] - state: ‘created’
[17:39:25.242] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.243] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.243] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.243]   - Field: ‘label’
[17:39:25.243]   - Field: ‘local’
[17:39:25.243]   - Field: ‘owner’
[17:39:25.243]   - Field: ‘envir’
[17:39:25.243]   - Field: ‘packages’
[17:39:25.243]   - Field: ‘gc’
[17:39:25.243]   - Field: ‘conditions’
[17:39:25.244]   - Field: ‘expr’
[17:39:25.244]   - Field: ‘uuid’
[17:39:25.244]   - Field: ‘seed’
[17:39:25.244]   - Field: ‘version’
[17:39:25.244]   - Field: ‘result’
[17:39:25.244]   - Field: ‘asynchronous’
[17:39:25.244]   - Field: ‘calls’
[17:39:25.244]   - Field: ‘globals’
[17:39:25.244]   - Field: ‘stdout’
[17:39:25.244]   - Field: ‘earlySignal’
[17:39:25.244]   - Field: ‘lazy’
[17:39:25.245]   - Field: ‘state’
[17:39:25.245] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.245] - Launch lazy future ...
[17:39:25.245] Packages needed by the future expression (n = 0): <none>
[17:39:25.245] Packages needed by future strategies (n = 0): <none>
[17:39:25.245] {
[17:39:25.245]     {
[17:39:25.245]         {
[17:39:25.245]             ...future.startTime <- base::Sys.time()
[17:39:25.245]             {
[17:39:25.245]                 {
[17:39:25.245]                   {
[17:39:25.245]                     base::local({
[17:39:25.245]                       has_future <- base::requireNamespace("future", 
[17:39:25.245]                         quietly = TRUE)
[17:39:25.245]                       if (has_future) {
[17:39:25.245]                         ns <- base::getNamespace("future")
[17:39:25.245]                         version <- ns[[".package"]][["version"]]
[17:39:25.245]                         if (is.null(version)) 
[17:39:25.245]                           version <- utils::packageVersion("future")
[17:39:25.245]                       }
[17:39:25.245]                       else {
[17:39:25.245]                         version <- NULL
[17:39:25.245]                       }
[17:39:25.245]                       if (!has_future || version < "1.8.0") {
[17:39:25.245]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.245]                           "", base::R.version$version.string), 
[17:39:25.245]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.245]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.245]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.245]                             "release", "version")], collapse = " "), 
[17:39:25.245]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.245]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.245]                           info)
[17:39:25.245]                         info <- base::paste(info, collapse = "; ")
[17:39:25.245]                         if (!has_future) {
[17:39:25.245]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.245]                             info)
[17:39:25.245]                         }
[17:39:25.245]                         else {
[17:39:25.245]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.245]                             info, version)
[17:39:25.245]                         }
[17:39:25.245]                         base::stop(msg)
[17:39:25.245]                       }
[17:39:25.245]                     })
[17:39:25.245]                   }
[17:39:25.245]                   ...future.strategy.old <- future::plan("list")
[17:39:25.245]                   options(future.plan = NULL)
[17:39:25.245]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.245]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.245]                 }
[17:39:25.245]                 ...future.workdir <- getwd()
[17:39:25.245]             }
[17:39:25.245]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.245]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.245]         }
[17:39:25.245]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.245]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.245]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.245]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.245]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.245]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.245]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.245]             base::names(...future.oldOptions))
[17:39:25.245]     }
[17:39:25.245]     if (FALSE) {
[17:39:25.245]     }
[17:39:25.245]     else {
[17:39:25.245]         if (TRUE) {
[17:39:25.245]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.245]                 open = "w")
[17:39:25.245]         }
[17:39:25.245]         else {
[17:39:25.245]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.245]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.245]         }
[17:39:25.245]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.245]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.245]             base::sink(type = "output", split = FALSE)
[17:39:25.245]             base::close(...future.stdout)
[17:39:25.245]         }, add = TRUE)
[17:39:25.245]     }
[17:39:25.245]     ...future.frame <- base::sys.nframe()
[17:39:25.245]     ...future.conditions <- base::list()
[17:39:25.245]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.245]     if (FALSE) {
[17:39:25.245]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.245]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.245]     }
[17:39:25.245]     ...future.result <- base::tryCatch({
[17:39:25.245]         base::withCallingHandlers({
[17:39:25.245]             ...future.value <- base::withVisible(base::local({
[17:39:25.245]                 cat("Processing: ")
[17:39:25.245]                 for (ii in 1:10) {
[17:39:25.245]                   cat(".")
[17:39:25.245]                 }
[17:39:25.245]                 cat(" [100%]\n")
[17:39:25.245]                 4
[17:39:25.245]             }))
[17:39:25.245]             future::FutureResult(value = ...future.value$value, 
[17:39:25.245]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.245]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.245]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.245]                     ...future.globalenv.names))
[17:39:25.245]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.245]         }, condition = base::local({
[17:39:25.245]             c <- base::c
[17:39:25.245]             inherits <- base::inherits
[17:39:25.245]             invokeRestart <- base::invokeRestart
[17:39:25.245]             length <- base::length
[17:39:25.245]             list <- base::list
[17:39:25.245]             seq.int <- base::seq.int
[17:39:25.245]             signalCondition <- base::signalCondition
[17:39:25.245]             sys.calls <- base::sys.calls
[17:39:25.245]             `[[` <- base::`[[`
[17:39:25.245]             `+` <- base::`+`
[17:39:25.245]             `<<-` <- base::`<<-`
[17:39:25.245]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.245]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.245]                   3L)]
[17:39:25.245]             }
[17:39:25.245]             function(cond) {
[17:39:25.245]                 is_error <- inherits(cond, "error")
[17:39:25.245]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.245]                   NULL)
[17:39:25.245]                 if (is_error) {
[17:39:25.245]                   sessionInformation <- function() {
[17:39:25.245]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.245]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.245]                       search = base::search(), system = base::Sys.info())
[17:39:25.245]                   }
[17:39:25.245]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.245]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.245]                     cond$call), session = sessionInformation(), 
[17:39:25.245]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.245]                   signalCondition(cond)
[17:39:25.245]                 }
[17:39:25.245]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.245]                 "immediateCondition"))) {
[17:39:25.245]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.245]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.245]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.245]                   if (TRUE && !signal) {
[17:39:25.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.245]                     {
[17:39:25.245]                       inherits <- base::inherits
[17:39:25.245]                       invokeRestart <- base::invokeRestart
[17:39:25.245]                       is.null <- base::is.null
[17:39:25.245]                       muffled <- FALSE
[17:39:25.245]                       if (inherits(cond, "message")) {
[17:39:25.245]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.245]                         if (muffled) 
[17:39:25.245]                           invokeRestart("muffleMessage")
[17:39:25.245]                       }
[17:39:25.245]                       else if (inherits(cond, "warning")) {
[17:39:25.245]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.245]                         if (muffled) 
[17:39:25.245]                           invokeRestart("muffleWarning")
[17:39:25.245]                       }
[17:39:25.245]                       else if (inherits(cond, "condition")) {
[17:39:25.245]                         if (!is.null(pattern)) {
[17:39:25.245]                           computeRestarts <- base::computeRestarts
[17:39:25.245]                           grepl <- base::grepl
[17:39:25.245]                           restarts <- computeRestarts(cond)
[17:39:25.245]                           for (restart in restarts) {
[17:39:25.245]                             name <- restart$name
[17:39:25.245]                             if (is.null(name)) 
[17:39:25.245]                               next
[17:39:25.245]                             if (!grepl(pattern, name)) 
[17:39:25.245]                               next
[17:39:25.245]                             invokeRestart(restart)
[17:39:25.245]                             muffled <- TRUE
[17:39:25.245]                             break
[17:39:25.245]                           }
[17:39:25.245]                         }
[17:39:25.245]                       }
[17:39:25.245]                       invisible(muffled)
[17:39:25.245]                     }
[17:39:25.245]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.245]                   }
[17:39:25.245]                 }
[17:39:25.245]                 else {
[17:39:25.245]                   if (TRUE) {
[17:39:25.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.245]                     {
[17:39:25.245]                       inherits <- base::inherits
[17:39:25.245]                       invokeRestart <- base::invokeRestart
[17:39:25.245]                       is.null <- base::is.null
[17:39:25.245]                       muffled <- FALSE
[17:39:25.245]                       if (inherits(cond, "message")) {
[17:39:25.245]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.245]                         if (muffled) 
[17:39:25.245]                           invokeRestart("muffleMessage")
[17:39:25.245]                       }
[17:39:25.245]                       else if (inherits(cond, "warning")) {
[17:39:25.245]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.245]                         if (muffled) 
[17:39:25.245]                           invokeRestart("muffleWarning")
[17:39:25.245]                       }
[17:39:25.245]                       else if (inherits(cond, "condition")) {
[17:39:25.245]                         if (!is.null(pattern)) {
[17:39:25.245]                           computeRestarts <- base::computeRestarts
[17:39:25.245]                           grepl <- base::grepl
[17:39:25.245]                           restarts <- computeRestarts(cond)
[17:39:25.245]                           for (restart in restarts) {
[17:39:25.245]                             name <- restart$name
[17:39:25.245]                             if (is.null(name)) 
[17:39:25.245]                               next
[17:39:25.245]                             if (!grepl(pattern, name)) 
[17:39:25.245]                               next
[17:39:25.245]                             invokeRestart(restart)
[17:39:25.245]                             muffled <- TRUE
[17:39:25.245]                             break
[17:39:25.245]                           }
[17:39:25.245]                         }
[17:39:25.245]                       }
[17:39:25.245]                       invisible(muffled)
[17:39:25.245]                     }
[17:39:25.245]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.245]                   }
[17:39:25.245]                 }
[17:39:25.245]             }
[17:39:25.245]         }))
[17:39:25.245]     }, error = function(ex) {
[17:39:25.245]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.245]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.245]                 ...future.rng), started = ...future.startTime, 
[17:39:25.245]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.245]             version = "1.8"), class = "FutureResult")
[17:39:25.245]     }, finally = {
[17:39:25.245]         if (!identical(...future.workdir, getwd())) 
[17:39:25.245]             setwd(...future.workdir)
[17:39:25.245]         {
[17:39:25.245]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.245]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.245]             }
[17:39:25.245]             base::options(...future.oldOptions)
[17:39:25.245]             if (.Platform$OS.type == "windows") {
[17:39:25.245]                 old_names <- names(...future.oldEnvVars)
[17:39:25.245]                 envs <- base::Sys.getenv()
[17:39:25.245]                 names <- names(envs)
[17:39:25.245]                 common <- intersect(names, old_names)
[17:39:25.245]                 added <- setdiff(names, old_names)
[17:39:25.245]                 removed <- setdiff(old_names, names)
[17:39:25.245]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.245]                   envs[common]]
[17:39:25.245]                 NAMES <- toupper(changed)
[17:39:25.245]                 args <- list()
[17:39:25.245]                 for (kk in seq_along(NAMES)) {
[17:39:25.245]                   name <- changed[[kk]]
[17:39:25.245]                   NAME <- NAMES[[kk]]
[17:39:25.245]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.245]                     next
[17:39:25.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.245]                 }
[17:39:25.245]                 NAMES <- toupper(added)
[17:39:25.245]                 for (kk in seq_along(NAMES)) {
[17:39:25.245]                   name <- added[[kk]]
[17:39:25.245]                   NAME <- NAMES[[kk]]
[17:39:25.245]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.245]                     next
[17:39:25.245]                   args[[name]] <- ""
[17:39:25.245]                 }
[17:39:25.245]                 NAMES <- toupper(removed)
[17:39:25.245]                 for (kk in seq_along(NAMES)) {
[17:39:25.245]                   name <- removed[[kk]]
[17:39:25.245]                   NAME <- NAMES[[kk]]
[17:39:25.245]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.245]                     next
[17:39:25.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.245]                 }
[17:39:25.245]                 if (length(args) > 0) 
[17:39:25.245]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.245]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.245]             }
[17:39:25.245]             else {
[17:39:25.245]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.245]             }
[17:39:25.245]             {
[17:39:25.245]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.245]                   0L) {
[17:39:25.245]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.245]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.245]                   base::options(opts)
[17:39:25.245]                 }
[17:39:25.245]                 {
[17:39:25.245]                   {
[17:39:25.245]                     NULL
[17:39:25.245]                     RNGkind("Mersenne-Twister")
[17:39:25.245]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.245]                       inherits = FALSE)
[17:39:25.245]                   }
[17:39:25.245]                   options(future.plan = NULL)
[17:39:25.245]                   if (is.na(NA_character_)) 
[17:39:25.245]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.245]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.245]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.245]                     .init = FALSE)
[17:39:25.245]                 }
[17:39:25.245]             }
[17:39:25.245]         }
[17:39:25.245]     })
[17:39:25.245]     if (TRUE) {
[17:39:25.245]         base::sink(type = "output", split = FALSE)
[17:39:25.245]         if (TRUE) {
[17:39:25.245]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.245]         }
[17:39:25.245]         else {
[17:39:25.245]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.245]         }
[17:39:25.245]         base::close(...future.stdout)
[17:39:25.245]         ...future.stdout <- NULL
[17:39:25.245]     }
[17:39:25.245]     ...future.result$conditions <- ...future.conditions
[17:39:25.245]     ...future.result$finished <- base::Sys.time()
[17:39:25.245]     ...future.result
[17:39:25.245] }
[17:39:25.247] plan(): Setting new future strategy stack:
[17:39:25.247] List of future strategies:
[17:39:25.247] 1. sequential:
[17:39:25.247]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.247]    - tweaked: FALSE
[17:39:25.247]    - call: NULL
[17:39:25.248] plan(): nbrOfWorkers() = 1
[17:39:25.248] plan(): Setting new future strategy stack:
[17:39:25.249] List of future strategies:
[17:39:25.249] 1. sequential:
[17:39:25.249]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.249]    - tweaked: FALSE
[17:39:25.249]    - call: plan(strategy)
[17:39:25.249] plan(): nbrOfWorkers() = 1
[17:39:25.249] SequentialFuture started (and completed)
[17:39:25.249] - Launch lazy future ... done
[17:39:25.249] run() for ‘SequentialFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[17:39:25.251] signalConditions() ...
[17:39:25.251]  - include = ‘immediateCondition’
[17:39:25.251]  - exclude = 
[17:39:25.251]  - resignal = FALSE
[17:39:25.251]  - Number of conditions: 1
[17:39:25.251] signalConditions() ... done
[17:39:25.251] Future state: ‘finished’
[17:39:25.251] signalConditions() ...
[17:39:25.252]  - include = ‘condition’
[17:39:25.252]  - exclude = ‘immediateCondition’
[17:39:25.252]  - resignal = TRUE
[17:39:25.252]  - Number of conditions: 1
[17:39:25.252]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:25.252] signalConditions() ... done
v3: <simpleError> (as expect)
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[17:39:25.252] getGlobalsAndPackages() ...
[17:39:25.253] Searching for globals...
[17:39:25.253] 
[17:39:25.253] Searching for globals ... DONE
[17:39:25.253] - globals: [0] <none>
[17:39:25.253] getGlobalsAndPackages() ... DONE
[17:39:25.253] run() for ‘Future’ ...
[17:39:25.253] - state: ‘created’
[17:39:25.254] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.254] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.254] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.254]   - Field: ‘label’
[17:39:25.254]   - Field: ‘local’
[17:39:25.254]   - Field: ‘owner’
[17:39:25.254]   - Field: ‘envir’
[17:39:25.254]   - Field: ‘packages’
[17:39:25.254]   - Field: ‘gc’
[17:39:25.255]   - Field: ‘conditions’
[17:39:25.255]   - Field: ‘expr’
[17:39:25.255]   - Field: ‘uuid’
[17:39:25.255]   - Field: ‘seed’
[17:39:25.255]   - Field: ‘version’
[17:39:25.255]   - Field: ‘result’
[17:39:25.255]   - Field: ‘asynchronous’
[17:39:25.255]   - Field: ‘calls’
[17:39:25.255]   - Field: ‘globals’
[17:39:25.255]   - Field: ‘stdout’
[17:39:25.255]   - Field: ‘earlySignal’
[17:39:25.255]   - Field: ‘lazy’
[17:39:25.256]   - Field: ‘state’
[17:39:25.256] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.256] - Launch lazy future ...
[17:39:25.256] Packages needed by the future expression (n = 0): <none>
[17:39:25.256] Packages needed by future strategies (n = 0): <none>
[17:39:25.256] {
[17:39:25.256]     {
[17:39:25.256]         {
[17:39:25.256]             ...future.startTime <- base::Sys.time()
[17:39:25.256]             {
[17:39:25.256]                 {
[17:39:25.256]                   {
[17:39:25.256]                     base::local({
[17:39:25.256]                       has_future <- base::requireNamespace("future", 
[17:39:25.256]                         quietly = TRUE)
[17:39:25.256]                       if (has_future) {
[17:39:25.256]                         ns <- base::getNamespace("future")
[17:39:25.256]                         version <- ns[[".package"]][["version"]]
[17:39:25.256]                         if (is.null(version)) 
[17:39:25.256]                           version <- utils::packageVersion("future")
[17:39:25.256]                       }
[17:39:25.256]                       else {
[17:39:25.256]                         version <- NULL
[17:39:25.256]                       }
[17:39:25.256]                       if (!has_future || version < "1.8.0") {
[17:39:25.256]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.256]                           "", base::R.version$version.string), 
[17:39:25.256]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.256]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.256]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.256]                             "release", "version")], collapse = " "), 
[17:39:25.256]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.256]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.256]                           info)
[17:39:25.256]                         info <- base::paste(info, collapse = "; ")
[17:39:25.256]                         if (!has_future) {
[17:39:25.256]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.256]                             info)
[17:39:25.256]                         }
[17:39:25.256]                         else {
[17:39:25.256]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.256]                             info, version)
[17:39:25.256]                         }
[17:39:25.256]                         base::stop(msg)
[17:39:25.256]                       }
[17:39:25.256]                     })
[17:39:25.256]                   }
[17:39:25.256]                   ...future.strategy.old <- future::plan("list")
[17:39:25.256]                   options(future.plan = NULL)
[17:39:25.256]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.256]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.256]                 }
[17:39:25.256]                 ...future.workdir <- getwd()
[17:39:25.256]             }
[17:39:25.256]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.256]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.256]         }
[17:39:25.256]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.256]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.256]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.256]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.256]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.256]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.256]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.256]             base::names(...future.oldOptions))
[17:39:25.256]     }
[17:39:25.256]     if (FALSE) {
[17:39:25.256]     }
[17:39:25.256]     else {
[17:39:25.256]         if (TRUE) {
[17:39:25.256]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.256]                 open = "w")
[17:39:25.256]         }
[17:39:25.256]         else {
[17:39:25.256]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.256]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.256]         }
[17:39:25.256]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.256]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.256]             base::sink(type = "output", split = FALSE)
[17:39:25.256]             base::close(...future.stdout)
[17:39:25.256]         }, add = TRUE)
[17:39:25.256]     }
[17:39:25.256]     ...future.frame <- base::sys.nframe()
[17:39:25.256]     ...future.conditions <- base::list()
[17:39:25.256]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.256]     if (FALSE) {
[17:39:25.256]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.256]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.256]     }
[17:39:25.256]     ...future.result <- base::tryCatch({
[17:39:25.256]         base::withCallingHandlers({
[17:39:25.256]             ...future.value <- base::withVisible(base::local(1))
[17:39:25.256]             future::FutureResult(value = ...future.value$value, 
[17:39:25.256]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.256]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.256]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.256]                     ...future.globalenv.names))
[17:39:25.256]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.256]         }, condition = base::local({
[17:39:25.256]             c <- base::c
[17:39:25.256]             inherits <- base::inherits
[17:39:25.256]             invokeRestart <- base::invokeRestart
[17:39:25.256]             length <- base::length
[17:39:25.256]             list <- base::list
[17:39:25.256]             seq.int <- base::seq.int
[17:39:25.256]             signalCondition <- base::signalCondition
[17:39:25.256]             sys.calls <- base::sys.calls
[17:39:25.256]             `[[` <- base::`[[`
[17:39:25.256]             `+` <- base::`+`
[17:39:25.256]             `<<-` <- base::`<<-`
[17:39:25.256]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.256]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.256]                   3L)]
[17:39:25.256]             }
[17:39:25.256]             function(cond) {
[17:39:25.256]                 is_error <- inherits(cond, "error")
[17:39:25.256]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.256]                   NULL)
[17:39:25.256]                 if (is_error) {
[17:39:25.256]                   sessionInformation <- function() {
[17:39:25.256]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.256]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.256]                       search = base::search(), system = base::Sys.info())
[17:39:25.256]                   }
[17:39:25.256]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.256]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.256]                     cond$call), session = sessionInformation(), 
[17:39:25.256]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.256]                   signalCondition(cond)
[17:39:25.256]                 }
[17:39:25.256]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.256]                 "immediateCondition"))) {
[17:39:25.256]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.256]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.256]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.256]                   if (TRUE && !signal) {
[17:39:25.256]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.256]                     {
[17:39:25.256]                       inherits <- base::inherits
[17:39:25.256]                       invokeRestart <- base::invokeRestart
[17:39:25.256]                       is.null <- base::is.null
[17:39:25.256]                       muffled <- FALSE
[17:39:25.256]                       if (inherits(cond, "message")) {
[17:39:25.256]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.256]                         if (muffled) 
[17:39:25.256]                           invokeRestart("muffleMessage")
[17:39:25.256]                       }
[17:39:25.256]                       else if (inherits(cond, "warning")) {
[17:39:25.256]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.256]                         if (muffled) 
[17:39:25.256]                           invokeRestart("muffleWarning")
[17:39:25.256]                       }
[17:39:25.256]                       else if (inherits(cond, "condition")) {
[17:39:25.256]                         if (!is.null(pattern)) {
[17:39:25.256]                           computeRestarts <- base::computeRestarts
[17:39:25.256]                           grepl <- base::grepl
[17:39:25.256]                           restarts <- computeRestarts(cond)
[17:39:25.256]                           for (restart in restarts) {
[17:39:25.256]                             name <- restart$name
[17:39:25.256]                             if (is.null(name)) 
[17:39:25.256]                               next
[17:39:25.256]                             if (!grepl(pattern, name)) 
[17:39:25.256]                               next
[17:39:25.256]                             invokeRestart(restart)
[17:39:25.256]                             muffled <- TRUE
[17:39:25.256]                             break
[17:39:25.256]                           }
[17:39:25.256]                         }
[17:39:25.256]                       }
[17:39:25.256]                       invisible(muffled)
[17:39:25.256]                     }
[17:39:25.256]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.256]                   }
[17:39:25.256]                 }
[17:39:25.256]                 else {
[17:39:25.256]                   if (TRUE) {
[17:39:25.256]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.256]                     {
[17:39:25.256]                       inherits <- base::inherits
[17:39:25.256]                       invokeRestart <- base::invokeRestart
[17:39:25.256]                       is.null <- base::is.null
[17:39:25.256]                       muffled <- FALSE
[17:39:25.256]                       if (inherits(cond, "message")) {
[17:39:25.256]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.256]                         if (muffled) 
[17:39:25.256]                           invokeRestart("muffleMessage")
[17:39:25.256]                       }
[17:39:25.256]                       else if (inherits(cond, "warning")) {
[17:39:25.256]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.256]                         if (muffled) 
[17:39:25.256]                           invokeRestart("muffleWarning")
[17:39:25.256]                       }
[17:39:25.256]                       else if (inherits(cond, "condition")) {
[17:39:25.256]                         if (!is.null(pattern)) {
[17:39:25.256]                           computeRestarts <- base::computeRestarts
[17:39:25.256]                           grepl <- base::grepl
[17:39:25.256]                           restarts <- computeRestarts(cond)
[17:39:25.256]                           for (restart in restarts) {
[17:39:25.256]                             name <- restart$name
[17:39:25.256]                             if (is.null(name)) 
[17:39:25.256]                               next
[17:39:25.256]                             if (!grepl(pattern, name)) 
[17:39:25.256]                               next
[17:39:25.256]                             invokeRestart(restart)
[17:39:25.256]                             muffled <- TRUE
[17:39:25.256]                             break
[17:39:25.256]                           }
[17:39:25.256]                         }
[17:39:25.256]                       }
[17:39:25.256]                       invisible(muffled)
[17:39:25.256]                     }
[17:39:25.256]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.256]                   }
[17:39:25.256]                 }
[17:39:25.256]             }
[17:39:25.256]         }))
[17:39:25.256]     }, error = function(ex) {
[17:39:25.256]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.256]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.256]                 ...future.rng), started = ...future.startTime, 
[17:39:25.256]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.256]             version = "1.8"), class = "FutureResult")
[17:39:25.256]     }, finally = {
[17:39:25.256]         if (!identical(...future.workdir, getwd())) 
[17:39:25.256]             setwd(...future.workdir)
[17:39:25.256]         {
[17:39:25.256]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.256]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.256]             }
[17:39:25.256]             base::options(...future.oldOptions)
[17:39:25.256]             if (.Platform$OS.type == "windows") {
[17:39:25.256]                 old_names <- names(...future.oldEnvVars)
[17:39:25.256]                 envs <- base::Sys.getenv()
[17:39:25.256]                 names <- names(envs)
[17:39:25.256]                 common <- intersect(names, old_names)
[17:39:25.256]                 added <- setdiff(names, old_names)
[17:39:25.256]                 removed <- setdiff(old_names, names)
[17:39:25.256]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.256]                   envs[common]]
[17:39:25.256]                 NAMES <- toupper(changed)
[17:39:25.256]                 args <- list()
[17:39:25.256]                 for (kk in seq_along(NAMES)) {
[17:39:25.256]                   name <- changed[[kk]]
[17:39:25.256]                   NAME <- NAMES[[kk]]
[17:39:25.256]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.256]                     next
[17:39:25.256]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.256]                 }
[17:39:25.256]                 NAMES <- toupper(added)
[17:39:25.256]                 for (kk in seq_along(NAMES)) {
[17:39:25.256]                   name <- added[[kk]]
[17:39:25.256]                   NAME <- NAMES[[kk]]
[17:39:25.256]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.256]                     next
[17:39:25.256]                   args[[name]] <- ""
[17:39:25.256]                 }
[17:39:25.256]                 NAMES <- toupper(removed)
[17:39:25.256]                 for (kk in seq_along(NAMES)) {
[17:39:25.256]                   name <- removed[[kk]]
[17:39:25.256]                   NAME <- NAMES[[kk]]
[17:39:25.256]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.256]                     next
[17:39:25.256]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.256]                 }
[17:39:25.256]                 if (length(args) > 0) 
[17:39:25.256]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.256]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.256]             }
[17:39:25.256]             else {
[17:39:25.256]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.256]             }
[17:39:25.256]             {
[17:39:25.256]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.256]                   0L) {
[17:39:25.256]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.256]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.256]                   base::options(opts)
[17:39:25.256]                 }
[17:39:25.256]                 {
[17:39:25.256]                   {
[17:39:25.256]                     NULL
[17:39:25.256]                     RNGkind("Mersenne-Twister")
[17:39:25.256]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.256]                       inherits = FALSE)
[17:39:25.256]                   }
[17:39:25.256]                   options(future.plan = NULL)
[17:39:25.256]                   if (is.na(NA_character_)) 
[17:39:25.256]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.256]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.256]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.256]                     .init = FALSE)
[17:39:25.256]                 }
[17:39:25.256]             }
[17:39:25.256]         }
[17:39:25.256]     })
[17:39:25.256]     if (TRUE) {
[17:39:25.256]         base::sink(type = "output", split = FALSE)
[17:39:25.256]         if (TRUE) {
[17:39:25.256]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.256]         }
[17:39:25.256]         else {
[17:39:25.256]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.256]         }
[17:39:25.256]         base::close(...future.stdout)
[17:39:25.256]         ...future.stdout <- NULL
[17:39:25.256]     }
[17:39:25.256]     ...future.result$conditions <- ...future.conditions
[17:39:25.256]     ...future.result$finished <- base::Sys.time()
[17:39:25.256]     ...future.result
[17:39:25.256] }
[17:39:25.258] plan(): Setting new future strategy stack:
[17:39:25.258] List of future strategies:
[17:39:25.258] 1. sequential:
[17:39:25.258]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.258]    - tweaked: FALSE
[17:39:25.258]    - call: NULL
[17:39:25.259] plan(): nbrOfWorkers() = 1
[17:39:25.259] plan(): Setting new future strategy stack:
[17:39:25.259] List of future strategies:
[17:39:25.259] 1. sequential:
[17:39:25.259]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.259]    - tweaked: FALSE
[17:39:25.259]    - call: plan(strategy)
[17:39:25.260] plan(): nbrOfWorkers() = 1
[17:39:25.260] SequentialFuture started (and completed)
[17:39:25.260] - Launch lazy future ... done
[17:39:25.260] run() for ‘SequentialFuture’ ... done
c = 1
[17:39:25.261] getGlobalsAndPackages() ...
[17:39:25.261] Searching for globals...
[17:39:25.261] 
[17:39:25.261] Searching for globals ... DONE
[17:39:25.261] - globals: [0] <none>
[17:39:25.261] getGlobalsAndPackages() ... DONE
[17:39:25.261] run() for ‘Future’ ...
[17:39:25.262] - state: ‘created’
[17:39:25.262] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.262] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.262] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.262]   - Field: ‘label’
[17:39:25.262]   - Field: ‘local’
[17:39:25.262]   - Field: ‘owner’
[17:39:25.262]   - Field: ‘envir’
[17:39:25.263]   - Field: ‘packages’
[17:39:25.263]   - Field: ‘gc’
[17:39:25.263]   - Field: ‘conditions’
[17:39:25.263]   - Field: ‘expr’
[17:39:25.263]   - Field: ‘uuid’
[17:39:25.263]   - Field: ‘seed’
[17:39:25.263]   - Field: ‘version’
[17:39:25.263]   - Field: ‘result’
[17:39:25.263]   - Field: ‘asynchronous’
[17:39:25.263]   - Field: ‘calls’
[17:39:25.263]   - Field: ‘globals’
[17:39:25.263]   - Field: ‘stdout’
[17:39:25.264]   - Field: ‘earlySignal’
[17:39:25.264]   - Field: ‘lazy’
[17:39:25.264]   - Field: ‘state’
[17:39:25.264] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.264] - Launch lazy future ...
[17:39:25.264] Packages needed by the future expression (n = 0): <none>
[17:39:25.264] Packages needed by future strategies (n = 0): <none>
[17:39:25.265] {
[17:39:25.265]     {
[17:39:25.265]         {
[17:39:25.265]             ...future.startTime <- base::Sys.time()
[17:39:25.265]             {
[17:39:25.265]                 {
[17:39:25.265]                   {
[17:39:25.265]                     base::local({
[17:39:25.265]                       has_future <- base::requireNamespace("future", 
[17:39:25.265]                         quietly = TRUE)
[17:39:25.265]                       if (has_future) {
[17:39:25.265]                         ns <- base::getNamespace("future")
[17:39:25.265]                         version <- ns[[".package"]][["version"]]
[17:39:25.265]                         if (is.null(version)) 
[17:39:25.265]                           version <- utils::packageVersion("future")
[17:39:25.265]                       }
[17:39:25.265]                       else {
[17:39:25.265]                         version <- NULL
[17:39:25.265]                       }
[17:39:25.265]                       if (!has_future || version < "1.8.0") {
[17:39:25.265]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.265]                           "", base::R.version$version.string), 
[17:39:25.265]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.265]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.265]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.265]                             "release", "version")], collapse = " "), 
[17:39:25.265]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.265]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.265]                           info)
[17:39:25.265]                         info <- base::paste(info, collapse = "; ")
[17:39:25.265]                         if (!has_future) {
[17:39:25.265]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.265]                             info)
[17:39:25.265]                         }
[17:39:25.265]                         else {
[17:39:25.265]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.265]                             info, version)
[17:39:25.265]                         }
[17:39:25.265]                         base::stop(msg)
[17:39:25.265]                       }
[17:39:25.265]                     })
[17:39:25.265]                   }
[17:39:25.265]                   ...future.strategy.old <- future::plan("list")
[17:39:25.265]                   options(future.plan = NULL)
[17:39:25.265]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.265]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.265]                 }
[17:39:25.265]                 ...future.workdir <- getwd()
[17:39:25.265]             }
[17:39:25.265]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.265]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.265]         }
[17:39:25.265]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.265]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.265]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.265]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.265]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.265]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.265]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.265]             base::names(...future.oldOptions))
[17:39:25.265]     }
[17:39:25.265]     if (FALSE) {
[17:39:25.265]     }
[17:39:25.265]     else {
[17:39:25.265]         if (TRUE) {
[17:39:25.265]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.265]                 open = "w")
[17:39:25.265]         }
[17:39:25.265]         else {
[17:39:25.265]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.265]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.265]         }
[17:39:25.265]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.265]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.265]             base::sink(type = "output", split = FALSE)
[17:39:25.265]             base::close(...future.stdout)
[17:39:25.265]         }, add = TRUE)
[17:39:25.265]     }
[17:39:25.265]     ...future.frame <- base::sys.nframe()
[17:39:25.265]     ...future.conditions <- base::list()
[17:39:25.265]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.265]     if (FALSE) {
[17:39:25.265]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.265]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.265]     }
[17:39:25.265]     ...future.result <- base::tryCatch({
[17:39:25.265]         base::withCallingHandlers({
[17:39:25.265]             ...future.value <- base::withVisible(base::local(1))
[17:39:25.265]             future::FutureResult(value = ...future.value$value, 
[17:39:25.265]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.265]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.265]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.265]                     ...future.globalenv.names))
[17:39:25.265]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.265]         }, condition = base::local({
[17:39:25.265]             c <- base::c
[17:39:25.265]             inherits <- base::inherits
[17:39:25.265]             invokeRestart <- base::invokeRestart
[17:39:25.265]             length <- base::length
[17:39:25.265]             list <- base::list
[17:39:25.265]             seq.int <- base::seq.int
[17:39:25.265]             signalCondition <- base::signalCondition
[17:39:25.265]             sys.calls <- base::sys.calls
[17:39:25.265]             `[[` <- base::`[[`
[17:39:25.265]             `+` <- base::`+`
[17:39:25.265]             `<<-` <- base::`<<-`
[17:39:25.265]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.265]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.265]                   3L)]
[17:39:25.265]             }
[17:39:25.265]             function(cond) {
[17:39:25.265]                 is_error <- inherits(cond, "error")
[17:39:25.265]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.265]                   NULL)
[17:39:25.265]                 if (is_error) {
[17:39:25.265]                   sessionInformation <- function() {
[17:39:25.265]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.265]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.265]                       search = base::search(), system = base::Sys.info())
[17:39:25.265]                   }
[17:39:25.265]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.265]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.265]                     cond$call), session = sessionInformation(), 
[17:39:25.265]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.265]                   signalCondition(cond)
[17:39:25.265]                 }
[17:39:25.265]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.265]                 "immediateCondition"))) {
[17:39:25.265]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.265]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.265]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.265]                   if (TRUE && !signal) {
[17:39:25.265]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.265]                     {
[17:39:25.265]                       inherits <- base::inherits
[17:39:25.265]                       invokeRestart <- base::invokeRestart
[17:39:25.265]                       is.null <- base::is.null
[17:39:25.265]                       muffled <- FALSE
[17:39:25.265]                       if (inherits(cond, "message")) {
[17:39:25.265]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.265]                         if (muffled) 
[17:39:25.265]                           invokeRestart("muffleMessage")
[17:39:25.265]                       }
[17:39:25.265]                       else if (inherits(cond, "warning")) {
[17:39:25.265]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.265]                         if (muffled) 
[17:39:25.265]                           invokeRestart("muffleWarning")
[17:39:25.265]                       }
[17:39:25.265]                       else if (inherits(cond, "condition")) {
[17:39:25.265]                         if (!is.null(pattern)) {
[17:39:25.265]                           computeRestarts <- base::computeRestarts
[17:39:25.265]                           grepl <- base::grepl
[17:39:25.265]                           restarts <- computeRestarts(cond)
[17:39:25.265]                           for (restart in restarts) {
[17:39:25.265]                             name <- restart$name
[17:39:25.265]                             if (is.null(name)) 
[17:39:25.265]                               next
[17:39:25.265]                             if (!grepl(pattern, name)) 
[17:39:25.265]                               next
[17:39:25.265]                             invokeRestart(restart)
[17:39:25.265]                             muffled <- TRUE
[17:39:25.265]                             break
[17:39:25.265]                           }
[17:39:25.265]                         }
[17:39:25.265]                       }
[17:39:25.265]                       invisible(muffled)
[17:39:25.265]                     }
[17:39:25.265]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.265]                   }
[17:39:25.265]                 }
[17:39:25.265]                 else {
[17:39:25.265]                   if (TRUE) {
[17:39:25.265]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.265]                     {
[17:39:25.265]                       inherits <- base::inherits
[17:39:25.265]                       invokeRestart <- base::invokeRestart
[17:39:25.265]                       is.null <- base::is.null
[17:39:25.265]                       muffled <- FALSE
[17:39:25.265]                       if (inherits(cond, "message")) {
[17:39:25.265]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.265]                         if (muffled) 
[17:39:25.265]                           invokeRestart("muffleMessage")
[17:39:25.265]                       }
[17:39:25.265]                       else if (inherits(cond, "warning")) {
[17:39:25.265]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.265]                         if (muffled) 
[17:39:25.265]                           invokeRestart("muffleWarning")
[17:39:25.265]                       }
[17:39:25.265]                       else if (inherits(cond, "condition")) {
[17:39:25.265]                         if (!is.null(pattern)) {
[17:39:25.265]                           computeRestarts <- base::computeRestarts
[17:39:25.265]                           grepl <- base::grepl
[17:39:25.265]                           restarts <- computeRestarts(cond)
[17:39:25.265]                           for (restart in restarts) {
[17:39:25.265]                             name <- restart$name
[17:39:25.265]                             if (is.null(name)) 
[17:39:25.265]                               next
[17:39:25.265]                             if (!grepl(pattern, name)) 
[17:39:25.265]                               next
[17:39:25.265]                             invokeRestart(restart)
[17:39:25.265]                             muffled <- TRUE
[17:39:25.265]                             break
[17:39:25.265]                           }
[17:39:25.265]                         }
[17:39:25.265]                       }
[17:39:25.265]                       invisible(muffled)
[17:39:25.265]                     }
[17:39:25.265]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.265]                   }
[17:39:25.265]                 }
[17:39:25.265]             }
[17:39:25.265]         }))
[17:39:25.265]     }, error = function(ex) {
[17:39:25.265]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.265]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.265]                 ...future.rng), started = ...future.startTime, 
[17:39:25.265]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.265]             version = "1.8"), class = "FutureResult")
[17:39:25.265]     }, finally = {
[17:39:25.265]         if (!identical(...future.workdir, getwd())) 
[17:39:25.265]             setwd(...future.workdir)
[17:39:25.265]         {
[17:39:25.265]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.265]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.265]             }
[17:39:25.265]             base::options(...future.oldOptions)
[17:39:25.265]             if (.Platform$OS.type == "windows") {
[17:39:25.265]                 old_names <- names(...future.oldEnvVars)
[17:39:25.265]                 envs <- base::Sys.getenv()
[17:39:25.265]                 names <- names(envs)
[17:39:25.265]                 common <- intersect(names, old_names)
[17:39:25.265]                 added <- setdiff(names, old_names)
[17:39:25.265]                 removed <- setdiff(old_names, names)
[17:39:25.265]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.265]                   envs[common]]
[17:39:25.265]                 NAMES <- toupper(changed)
[17:39:25.265]                 args <- list()
[17:39:25.265]                 for (kk in seq_along(NAMES)) {
[17:39:25.265]                   name <- changed[[kk]]
[17:39:25.265]                   NAME <- NAMES[[kk]]
[17:39:25.265]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.265]                     next
[17:39:25.265]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.265]                 }
[17:39:25.265]                 NAMES <- toupper(added)
[17:39:25.265]                 for (kk in seq_along(NAMES)) {
[17:39:25.265]                   name <- added[[kk]]
[17:39:25.265]                   NAME <- NAMES[[kk]]
[17:39:25.265]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.265]                     next
[17:39:25.265]                   args[[name]] <- ""
[17:39:25.265]                 }
[17:39:25.265]                 NAMES <- toupper(removed)
[17:39:25.265]                 for (kk in seq_along(NAMES)) {
[17:39:25.265]                   name <- removed[[kk]]
[17:39:25.265]                   NAME <- NAMES[[kk]]
[17:39:25.265]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.265]                     next
[17:39:25.265]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.265]                 }
[17:39:25.265]                 if (length(args) > 0) 
[17:39:25.265]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.265]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.265]             }
[17:39:25.265]             else {
[17:39:25.265]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.265]             }
[17:39:25.265]             {
[17:39:25.265]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.265]                   0L) {
[17:39:25.265]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.265]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.265]                   base::options(opts)
[17:39:25.265]                 }
[17:39:25.265]                 {
[17:39:25.265]                   {
[17:39:25.265]                     NULL
[17:39:25.265]                     RNGkind("Mersenne-Twister")
[17:39:25.265]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.265]                       inherits = FALSE)
[17:39:25.265]                   }
[17:39:25.265]                   options(future.plan = NULL)
[17:39:25.265]                   if (is.na(NA_character_)) 
[17:39:25.265]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.265]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.265]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.265]                     .init = FALSE)
[17:39:25.265]                 }
[17:39:25.265]             }
[17:39:25.265]         }
[17:39:25.265]     })
[17:39:25.265]     if (TRUE) {
[17:39:25.265]         base::sink(type = "output", split = FALSE)
[17:39:25.265]         if (TRUE) {
[17:39:25.265]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.265]         }
[17:39:25.265]         else {
[17:39:25.265]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.265]         }
[17:39:25.265]         base::close(...future.stdout)
[17:39:25.265]         ...future.stdout <- NULL
[17:39:25.265]     }
[17:39:25.265]     ...future.result$conditions <- ...future.conditions
[17:39:25.265]     ...future.result$finished <- base::Sys.time()
[17:39:25.265]     ...future.result
[17:39:25.265] }
[17:39:25.268] plan(): Setting new future strategy stack:
[17:39:25.268] List of future strategies:
[17:39:25.268] 1. sequential:
[17:39:25.268]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.268]    - tweaked: FALSE
[17:39:25.268]    - call: NULL
[17:39:25.268] plan(): nbrOfWorkers() = 1
[17:39:25.269] plan(): Setting new future strategy stack:
[17:39:25.269] List of future strategies:
[17:39:25.269] 1. sequential:
[17:39:25.269]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.269]    - tweaked: FALSE
[17:39:25.269]    - call: plan(strategy)
[17:39:25.270] plan(): nbrOfWorkers() = 1
[17:39:25.270] SequentialFuture started (and completed)
[17:39:25.270] - Launch lazy future ... done
[17:39:25.270] run() for ‘SequentialFuture’ ... done
d = 1
** Nested future assignments
[17:39:25.270] getGlobalsAndPackages() ...
[17:39:25.270] Searching for globals...
[17:39:25.274] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[17:39:25.274] Searching for globals ... DONE
[17:39:25.274] Resolving globals: FALSE
[17:39:25.274] 
[17:39:25.275] - packages: [1] ‘future’
[17:39:25.275] getGlobalsAndPackages() ... DONE
[17:39:25.275] run() for ‘Future’ ...
[17:39:25.275] - state: ‘created’
[17:39:25.275] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.275] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.275] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.276]   - Field: ‘label’
[17:39:25.276]   - Field: ‘local’
[17:39:25.276]   - Field: ‘owner’
[17:39:25.276]   - Field: ‘envir’
[17:39:25.276]   - Field: ‘packages’
[17:39:25.276]   - Field: ‘gc’
[17:39:25.276]   - Field: ‘conditions’
[17:39:25.276]   - Field: ‘expr’
[17:39:25.276]   - Field: ‘uuid’
[17:39:25.276]   - Field: ‘seed’
[17:39:25.276]   - Field: ‘version’
[17:39:25.277]   - Field: ‘result’
[17:39:25.277]   - Field: ‘asynchronous’
[17:39:25.277]   - Field: ‘calls’
[17:39:25.277]   - Field: ‘globals’
[17:39:25.277]   - Field: ‘stdout’
[17:39:25.277]   - Field: ‘earlySignal’
[17:39:25.277]   - Field: ‘lazy’
[17:39:25.277]   - Field: ‘state’
[17:39:25.277] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.277] - Launch lazy future ...
[17:39:25.278] Packages needed by the future expression (n = 1): ‘future’
[17:39:25.278] Packages needed by future strategies (n = 0): <none>
[17:39:25.278] {
[17:39:25.278]     {
[17:39:25.278]         {
[17:39:25.278]             ...future.startTime <- base::Sys.time()
[17:39:25.278]             {
[17:39:25.278]                 {
[17:39:25.278]                   {
[17:39:25.278]                     {
[17:39:25.278]                       base::local({
[17:39:25.278]                         has_future <- base::requireNamespace("future", 
[17:39:25.278]                           quietly = TRUE)
[17:39:25.278]                         if (has_future) {
[17:39:25.278]                           ns <- base::getNamespace("future")
[17:39:25.278]                           version <- ns[[".package"]][["version"]]
[17:39:25.278]                           if (is.null(version)) 
[17:39:25.278]                             version <- utils::packageVersion("future")
[17:39:25.278]                         }
[17:39:25.278]                         else {
[17:39:25.278]                           version <- NULL
[17:39:25.278]                         }
[17:39:25.278]                         if (!has_future || version < "1.8.0") {
[17:39:25.278]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.278]                             "", base::R.version$version.string), 
[17:39:25.278]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:25.278]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.278]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.278]                               "release", "version")], collapse = " "), 
[17:39:25.278]                             hostname = base::Sys.info()[["nodename"]])
[17:39:25.278]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.278]                             info)
[17:39:25.278]                           info <- base::paste(info, collapse = "; ")
[17:39:25.278]                           if (!has_future) {
[17:39:25.278]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.278]                               info)
[17:39:25.278]                           }
[17:39:25.278]                           else {
[17:39:25.278]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.278]                               info, version)
[17:39:25.278]                           }
[17:39:25.278]                           base::stop(msg)
[17:39:25.278]                         }
[17:39:25.278]                       })
[17:39:25.278]                     }
[17:39:25.278]                     base::local({
[17:39:25.278]                       for (pkg in "future") {
[17:39:25.278]                         base::loadNamespace(pkg)
[17:39:25.278]                         base::library(pkg, character.only = TRUE)
[17:39:25.278]                       }
[17:39:25.278]                     })
[17:39:25.278]                   }
[17:39:25.278]                   ...future.strategy.old <- future::plan("list")
[17:39:25.278]                   options(future.plan = NULL)
[17:39:25.278]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.278]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.278]                 }
[17:39:25.278]                 ...future.workdir <- getwd()
[17:39:25.278]             }
[17:39:25.278]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.278]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.278]         }
[17:39:25.278]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.278]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.278]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.278]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.278]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.278]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.278]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.278]             base::names(...future.oldOptions))
[17:39:25.278]     }
[17:39:25.278]     if (FALSE) {
[17:39:25.278]     }
[17:39:25.278]     else {
[17:39:25.278]         if (TRUE) {
[17:39:25.278]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.278]                 open = "w")
[17:39:25.278]         }
[17:39:25.278]         else {
[17:39:25.278]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.278]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.278]         }
[17:39:25.278]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.278]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.278]             base::sink(type = "output", split = FALSE)
[17:39:25.278]             base::close(...future.stdout)
[17:39:25.278]         }, add = TRUE)
[17:39:25.278]     }
[17:39:25.278]     ...future.frame <- base::sys.nframe()
[17:39:25.278]     ...future.conditions <- base::list()
[17:39:25.278]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.278]     if (FALSE) {
[17:39:25.278]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.278]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.278]     }
[17:39:25.278]     ...future.result <- base::tryCatch({
[17:39:25.278]         base::withCallingHandlers({
[17:39:25.278]             ...future.value <- base::withVisible(base::local({
[17:39:25.278]                 b <- 1
[17:39:25.278]                 c %<-% 2
[17:39:25.278]                 d <- 3
[17:39:25.278]                 4 %->% e
[17:39:25.278]                 b + c + d + e
[17:39:25.278]             }))
[17:39:25.278]             future::FutureResult(value = ...future.value$value, 
[17:39:25.278]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.278]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.278]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.278]                     ...future.globalenv.names))
[17:39:25.278]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.278]         }, condition = base::local({
[17:39:25.278]             c <- base::c
[17:39:25.278]             inherits <- base::inherits
[17:39:25.278]             invokeRestart <- base::invokeRestart
[17:39:25.278]             length <- base::length
[17:39:25.278]             list <- base::list
[17:39:25.278]             seq.int <- base::seq.int
[17:39:25.278]             signalCondition <- base::signalCondition
[17:39:25.278]             sys.calls <- base::sys.calls
[17:39:25.278]             `[[` <- base::`[[`
[17:39:25.278]             `+` <- base::`+`
[17:39:25.278]             `<<-` <- base::`<<-`
[17:39:25.278]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.278]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.278]                   3L)]
[17:39:25.278]             }
[17:39:25.278]             function(cond) {
[17:39:25.278]                 is_error <- inherits(cond, "error")
[17:39:25.278]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.278]                   NULL)
[17:39:25.278]                 if (is_error) {
[17:39:25.278]                   sessionInformation <- function() {
[17:39:25.278]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.278]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.278]                       search = base::search(), system = base::Sys.info())
[17:39:25.278]                   }
[17:39:25.278]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.278]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.278]                     cond$call), session = sessionInformation(), 
[17:39:25.278]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.278]                   signalCondition(cond)
[17:39:25.278]                 }
[17:39:25.278]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.278]                 "immediateCondition"))) {
[17:39:25.278]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.278]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.278]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.278]                   if (TRUE && !signal) {
[17:39:25.278]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.278]                     {
[17:39:25.278]                       inherits <- base::inherits
[17:39:25.278]                       invokeRestart <- base::invokeRestart
[17:39:25.278]                       is.null <- base::is.null
[17:39:25.278]                       muffled <- FALSE
[17:39:25.278]                       if (inherits(cond, "message")) {
[17:39:25.278]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.278]                         if (muffled) 
[17:39:25.278]                           invokeRestart("muffleMessage")
[17:39:25.278]                       }
[17:39:25.278]                       else if (inherits(cond, "warning")) {
[17:39:25.278]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.278]                         if (muffled) 
[17:39:25.278]                           invokeRestart("muffleWarning")
[17:39:25.278]                       }
[17:39:25.278]                       else if (inherits(cond, "condition")) {
[17:39:25.278]                         if (!is.null(pattern)) {
[17:39:25.278]                           computeRestarts <- base::computeRestarts
[17:39:25.278]                           grepl <- base::grepl
[17:39:25.278]                           restarts <- computeRestarts(cond)
[17:39:25.278]                           for (restart in restarts) {
[17:39:25.278]                             name <- restart$name
[17:39:25.278]                             if (is.null(name)) 
[17:39:25.278]                               next
[17:39:25.278]                             if (!grepl(pattern, name)) 
[17:39:25.278]                               next
[17:39:25.278]                             invokeRestart(restart)
[17:39:25.278]                             muffled <- TRUE
[17:39:25.278]                             break
[17:39:25.278]                           }
[17:39:25.278]                         }
[17:39:25.278]                       }
[17:39:25.278]                       invisible(muffled)
[17:39:25.278]                     }
[17:39:25.278]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.278]                   }
[17:39:25.278]                 }
[17:39:25.278]                 else {
[17:39:25.278]                   if (TRUE) {
[17:39:25.278]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.278]                     {
[17:39:25.278]                       inherits <- base::inherits
[17:39:25.278]                       invokeRestart <- base::invokeRestart
[17:39:25.278]                       is.null <- base::is.null
[17:39:25.278]                       muffled <- FALSE
[17:39:25.278]                       if (inherits(cond, "message")) {
[17:39:25.278]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.278]                         if (muffled) 
[17:39:25.278]                           invokeRestart("muffleMessage")
[17:39:25.278]                       }
[17:39:25.278]                       else if (inherits(cond, "warning")) {
[17:39:25.278]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.278]                         if (muffled) 
[17:39:25.278]                           invokeRestart("muffleWarning")
[17:39:25.278]                       }
[17:39:25.278]                       else if (inherits(cond, "condition")) {
[17:39:25.278]                         if (!is.null(pattern)) {
[17:39:25.278]                           computeRestarts <- base::computeRestarts
[17:39:25.278]                           grepl <- base::grepl
[17:39:25.278]                           restarts <- computeRestarts(cond)
[17:39:25.278]                           for (restart in restarts) {
[17:39:25.278]                             name <- restart$name
[17:39:25.278]                             if (is.null(name)) 
[17:39:25.278]                               next
[17:39:25.278]                             if (!grepl(pattern, name)) 
[17:39:25.278]                               next
[17:39:25.278]                             invokeRestart(restart)
[17:39:25.278]                             muffled <- TRUE
[17:39:25.278]                             break
[17:39:25.278]                           }
[17:39:25.278]                         }
[17:39:25.278]                       }
[17:39:25.278]                       invisible(muffled)
[17:39:25.278]                     }
[17:39:25.278]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.278]                   }
[17:39:25.278]                 }
[17:39:25.278]             }
[17:39:25.278]         }))
[17:39:25.278]     }, error = function(ex) {
[17:39:25.278]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.278]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.278]                 ...future.rng), started = ...future.startTime, 
[17:39:25.278]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.278]             version = "1.8"), class = "FutureResult")
[17:39:25.278]     }, finally = {
[17:39:25.278]         if (!identical(...future.workdir, getwd())) 
[17:39:25.278]             setwd(...future.workdir)
[17:39:25.278]         {
[17:39:25.278]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.278]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.278]             }
[17:39:25.278]             base::options(...future.oldOptions)
[17:39:25.278]             if (.Platform$OS.type == "windows") {
[17:39:25.278]                 old_names <- names(...future.oldEnvVars)
[17:39:25.278]                 envs <- base::Sys.getenv()
[17:39:25.278]                 names <- names(envs)
[17:39:25.278]                 common <- intersect(names, old_names)
[17:39:25.278]                 added <- setdiff(names, old_names)
[17:39:25.278]                 removed <- setdiff(old_names, names)
[17:39:25.278]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.278]                   envs[common]]
[17:39:25.278]                 NAMES <- toupper(changed)
[17:39:25.278]                 args <- list()
[17:39:25.278]                 for (kk in seq_along(NAMES)) {
[17:39:25.278]                   name <- changed[[kk]]
[17:39:25.278]                   NAME <- NAMES[[kk]]
[17:39:25.278]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.278]                     next
[17:39:25.278]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.278]                 }
[17:39:25.278]                 NAMES <- toupper(added)
[17:39:25.278]                 for (kk in seq_along(NAMES)) {
[17:39:25.278]                   name <- added[[kk]]
[17:39:25.278]                   NAME <- NAMES[[kk]]
[17:39:25.278]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.278]                     next
[17:39:25.278]                   args[[name]] <- ""
[17:39:25.278]                 }
[17:39:25.278]                 NAMES <- toupper(removed)
[17:39:25.278]                 for (kk in seq_along(NAMES)) {
[17:39:25.278]                   name <- removed[[kk]]
[17:39:25.278]                   NAME <- NAMES[[kk]]
[17:39:25.278]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.278]                     next
[17:39:25.278]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.278]                 }
[17:39:25.278]                 if (length(args) > 0) 
[17:39:25.278]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.278]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.278]             }
[17:39:25.278]             else {
[17:39:25.278]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.278]             }
[17:39:25.278]             {
[17:39:25.278]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.278]                   0L) {
[17:39:25.278]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.278]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.278]                   base::options(opts)
[17:39:25.278]                 }
[17:39:25.278]                 {
[17:39:25.278]                   {
[17:39:25.278]                     NULL
[17:39:25.278]                     RNGkind("Mersenne-Twister")
[17:39:25.278]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.278]                       inherits = FALSE)
[17:39:25.278]                   }
[17:39:25.278]                   options(future.plan = NULL)
[17:39:25.278]                   if (is.na(NA_character_)) 
[17:39:25.278]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.278]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.278]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.278]                     .init = FALSE)
[17:39:25.278]                 }
[17:39:25.278]             }
[17:39:25.278]         }
[17:39:25.278]     })
[17:39:25.278]     if (TRUE) {
[17:39:25.278]         base::sink(type = "output", split = FALSE)
[17:39:25.278]         if (TRUE) {
[17:39:25.278]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.278]         }
[17:39:25.278]         else {
[17:39:25.278]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.278]         }
[17:39:25.278]         base::close(...future.stdout)
[17:39:25.278]         ...future.stdout <- NULL
[17:39:25.278]     }
[17:39:25.278]     ...future.result$conditions <- ...future.conditions
[17:39:25.278]     ...future.result$finished <- base::Sys.time()
[17:39:25.278]     ...future.result
[17:39:25.278] }
[17:39:25.280] plan(): Setting new future strategy stack:
[17:39:25.280] List of future strategies:
[17:39:25.280] 1. sequential:
[17:39:25.280]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.280]    - tweaked: FALSE
[17:39:25.280]    - call: NULL
[17:39:25.281] plan(): nbrOfWorkers() = 1
[17:39:25.314] plan(): Setting new future strategy stack:
[17:39:25.315] List of future strategies:
[17:39:25.315] 1. sequential:
[17:39:25.315]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.315]    - tweaked: FALSE
[17:39:25.315]    - call: plan(strategy)
[17:39:25.315] plan(): nbrOfWorkers() = 1
[17:39:25.315] SequentialFuture started (and completed)
[17:39:25.315] signalConditions() ...
[17:39:25.315]  - include = ‘immediateCondition’
[17:39:25.316]  - exclude = 
[17:39:25.316]  - resignal = FALSE
[17:39:25.316]  - Number of conditions: 88
[17:39:25.316] signalConditions() ... done
[17:39:25.316] - Launch lazy future ... done
[17:39:25.316] run() for ‘SequentialFuture’ ... done
[17:39:25.316] signalConditions() ...
[17:39:25.316]  - include = ‘immediateCondition’
[17:39:25.316]  - exclude = 
[17:39:25.316]  - resignal = FALSE
[17:39:25.317]  - Number of conditions: 88
[17:39:25.317] signalConditions() ... done
[17:39:25.317] Future state: ‘finished’
[17:39:25.317] signalConditions() ...
[17:39:25.319]  - include = ‘condition’
[17:39:25.319]  - exclude = ‘immediateCondition’
[17:39:25.319]  - resignal = TRUE
[17:39:25.319]  - Number of conditions: 88
[17:39:25.319]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.281] getGlobalsAndPackages() ...
[17:39:25.319]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.281] Searching for globals...
[17:39:25.319]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.297] 
[17:39:25.320]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.297] Searching for globals ... DONE
[17:39:25.320]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.297] - globals: [0] <none>
[17:39:25.320]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.297] getGlobalsAndPackages() ... DONE
[17:39:25.320]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.297] run() for ‘Future’ ...
[17:39:25.320]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.297] - state: ‘created’
[17:39:25.320]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.297] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.320]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.298] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.320]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.298] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.321]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.298]   - Field: ‘label’
[17:39:25.321]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.298]   - Field: ‘local’
[17:39:25.321]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.298]   - Field: ‘owner’
[17:39:25.321]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.298]   - Field: ‘envir’
[17:39:25.321]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.298]   - Field: ‘packages’
[17:39:25.321]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.299]   - Field: ‘gc’
[17:39:25.321]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.299]   - Field: ‘conditions’
[17:39:25.322]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.299]   - Field: ‘expr’
[17:39:25.322]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.299]   - Field: ‘uuid’
[17:39:25.322]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.299]   - Field: ‘seed’
[17:39:25.322]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.299]   - Field: ‘version’
[17:39:25.322]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.299]   - Field: ‘result’
[17:39:25.322]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.299]   - Field: ‘asynchronous’
[17:39:25.322]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.299]   - Field: ‘calls’
[17:39:25.322]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.299]   - Field: ‘globals’
[17:39:25.323]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.300]   - Field: ‘stdout’
[17:39:25.323]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.300]   - Field: ‘earlySignal’
[17:39:25.323]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.300]   - Field: ‘lazy’
[17:39:25.323]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.300]   - Field: ‘state’
[17:39:25.323]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.300] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.323]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.300] - Launch lazy future ...
[17:39:25.323]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.300] Packages needed by the future expression (n = 0): <none>
[17:39:25.323]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.301] Packages needed by future strategies (n = 0): <none>
[17:39:25.324]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.301] {
[17:39:25.301]     {
[17:39:25.301]         {
[17:39:25.301]             ...future.startTime <- base::Sys.time()
[17:39:25.301]             {
[17:39:25.301]                 {
[17:39:25.301]                   {
[17:39:25.301]                     base::local({
[17:39:25.301]                       has_future <- base::requireNamespace("future", 
[17:39:25.301]                         quietly = TRUE)
[17:39:25.301]                       if (has_future) {
[17:39:25.301]                         ns <- base::getNamespace("future")
[17:39:25.301]                         version <- ns[[".package"]][["version"]]
[17:39:25.301]                         if (is.null(version)) 
[17:39:25.301]                           version <- utils::packageVersion("future")
[17:39:25.301]                       }
[17:39:25.301]                       else {
[17:39:25.301]                         version <- NULL
[17:39:25.301]                       }
[17:39:25.301]                       if (!has_future || version < "1.8.0") {
[17:39:25.301]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.301]                           "", base::R.version$version.string), 
[17:39:25.301]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.301]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.301]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.301]                             "release", "version")], collapse = " "), 
[17:39:25.301]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.301]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.301]                           info)
[17:39:25.301]                         info <- base::paste(info, collapse = "; ")
[17:39:25.301]                         if (!has_future) {
[17:39:25.301]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.301]                             info)
[17:39:25.301]                         }
[17:39:25.301]                         else {
[17:39:25.301]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.301]                             info, version)
[17:39:25.301]                         }
[17:39:25.301]                         base::stop(msg)
[17:39:25.301]                       }
[17:39:25.301]                     })
[17:39:25.301]                   }
[17:39:25.301]                   ...future.strategy.old <- future::plan("list")
[17:39:25.301]                   options(future.plan = NULL)
[17:39:25.301]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.301]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.301]                 }
[17:39:25.301]                 ...future.workdir <- getwd()
[17:39:25.301]             }
[17:39:25.301]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.301]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.301]         }
[17:39:25.301]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.301]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.301]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.301]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.301]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.301]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.301]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.301]             base::names(...future.oldOptions))
[17:39:25.301]     }
[17:39:25.301]     if (FALSE) {
[17:39:25.301]     }
[17:39:25.301]     else {
[17:39:25.301]         if (TRUE) {
[17:39:25.301]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.301]                 open = "w")
[17:39:25.301]         }
[17:39:25.301]         else {
[17:39:25.301]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.301]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.301]         }
[17:39:25.301]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.301]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.301]             base::sink(type = "output", split = FALSE)
[17:39:25.301]             base::close(...future.stdout)
[17:39:25.301]         }, add = TRUE)
[17:39:25.301]     }
[17:39:25.301]     ...future.frame <- base::sys.nframe()
[17:39:25.301]     ...future.conditions <- base::list()
[17:39:25.301]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.301]     if (FALSE) {
[17:39:25.301]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.301]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.301]     }
[17:39:25.301]     ...future.result <- base::tryCatch({
[17:39:25.301]         base::withCallingHandlers({
[17:39:25.301]             ...future.value <- base::withVisible(base::local(2))
[17:39:25.301]             future::FutureResult(value = ...future.value$value, 
[17:39:25.301]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.301]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.301]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.301]                     ...future.globalenv.names))
[17:39:25.301]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.301]         }, condition = base::local({
[17:39:25.301]             c <- base::c
[17:39:25.301]             inherits <- base::inherits
[17:39:25.301]             invokeRestart <- base::invokeRestart
[17:39:25.301]             length <- base::length
[17:39:25.301]             list <- base::list
[17:39:25.301]             seq.int <- base::seq.int
[17:39:25.301]             signalCondition <- base::signalCondition
[17:39:25.301]             sys.calls <- base::sys.calls
[17:39:25.301]             `[[` <- base::`[[`
[17:39:25.301]             `+` <- base::`+`
[17:39:25.301]             `<<-` <- base::`<<-`
[17:39:25.301]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.301]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.301]                   3L)]
[17:39:25.301]             }
[17:39:25.301]             function(cond) {
[17:39:25.301]                 is_error <- inherits(cond, "error")
[17:39:25.301]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.301]                   NULL)
[17:39:25.301]                 if (is_error) {
[17:39:25.301]                   sessionInformation <- function() {
[17:39:25.301]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.301]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.301]                       search = base::search(), system = base::Sys.info())
[17:39:25.301]                   }
[17:39:25.301]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.301]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.301]                     cond$call), session = sessionInformation(), 
[17:39:25.301]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.301]                   signalCondition(cond)
[17:39:25.301]                 }
[17:39:25.301]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.301]                 "immediateCondition"))) {
[17:39:25.301]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.301]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.301]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.301]                   if (TRUE && !signal) {
[17:39:25.301]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.301]                     {
[17:39:25.301]                       inherits <- base::inherits
[17:39:25.301]                       invokeRestart <- base::invokeRestart
[17:39:25.301]                       is.null <- base::is.null
[17:39:25.301]                       muffled <- FALSE
[17:39:25.301]                       if (inherits(cond, "message")) {
[17:39:25.301]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.301]                         if (muffled) 
[17:39:25.301]                           invokeRestart("muffleMessage")
[17:39:25.301]                       }
[17:39:25.301]                       else if (inherits(cond, "warning")) {
[17:39:25.301]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.301]                         if (muffled) 
[17:39:25.301]                           invokeRestart("muffleWarning")
[17:39:25.301]                       }
[17:39:25.301]                       else if (inherits(cond, "condition")) {
[17:39:25.301]                         if (!is.null(pattern)) {
[17:39:25.301]                           computeRestarts <- base::computeRestarts
[17:39:25.301]                           grepl <- base::grepl
[17:39:25.301]                           restarts <- computeRestarts(cond)
[17:39:25.301]                           for (restart in restarts) {
[17:39:25.301]                             name <- restart$name
[17:39:25.301]                             if (is.null(name)) 
[17:39:25.301]                               next
[17:39:25.301]                             if (!grepl(pattern, name)) 
[17:39:25.301]                               next
[17:39:25.301]                             invokeRestart(restart)
[17:39:25.301]                             muffled <- TRUE
[17:39:25.301]                             break
[17:39:25.301]                           }
[17:39:25.301]                         }
[17:39:25.301]                       }
[17:39:25.301]                       invisible(muffled)
[17:39:25.301]                     }
[17:39:25.301]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.301]                   }
[17:39:25.301]                 }
[17:39:25.301]                 else {
[17:39:25.301]                   if (TRUE) {
[17:39:25.301]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.301]                     {
[17:39:25.301]                       inherits <- base::inherits
[17:39:25.301]                       invokeRestart <- base::invokeRestart
[17:39:25.301]                       is.null <- base::is.null
[17:39:25.301]                       muffled <- FALSE
[17:39:25.301]                       if (inherits(cond, "message")) {
[17:39:25.301]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.301]                         if (muffled) 
[17:39:25.301]                           invokeRestart("muffleMessage")
[17:39:25.301]                       }
[17:39:25.301]                       else if (inherits(cond, "warning")) {
[17:39:25.301]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.301]                         if (muffled) 
[17:39:25.301]                           invokeRestart("muffleWarning")
[17:39:25.301]                       }
[17:39:25.301]                       else if (inherits(cond, "condition")) {
[17:39:25.301]                         if (!is.null(pattern)) {
[17:39:25.301]                           computeRestarts <- base::computeRestarts
[17:39:25.301]                           grepl <- base::grepl
[17:39:25.301]                           restarts <- computeRestarts(cond)
[17:39:25.301]                           for (restart in restarts) {
[17:39:25.301]                             name <- restart$name
[17:39:25.301]                             if (is.null(name)) 
[17:39:25.301]                               next
[17:39:25.301]                             if (!grepl(pattern, name)) 
[17:39:25.301]                               next
[17:39:25.301]                             invokeRestart(restart)
[17:39:25.301]                             muffled <- TRUE
[17:39:25.301]                             break
[17:39:25.301]                           }
[17:39:25.301]                         }
[17:39:25.301]                       }
[17:39:25.301]                       invisible(muffled)
[17:39:25.301]                     }
[17:39:25.301]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.301]                   }
[17:39:25.301]                 }
[17:39:25.301]             }
[17:39:25.301]         }))
[17:39:25.301]     }, error = function(ex) {
[17:39:25.301]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.301]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.301]                 ...future.rng), started = ...future.startTime, 
[17:39:25.301]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.301]             version = "1.8"), class = "FutureResult")
[17:39:25.301]     }, finally = {
[17:39:25.301]         if (!identical(...future.workdir, getwd())) 
[17:39:25.301]             setwd(...future.workdir)
[17:39:25.301]         {
[17:39:25.301]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.301]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.301]             }
[17:39:25.301]             base::options(...future.oldOptions)
[17:39:25.301]             if (.Platform$OS.type == "windows") {
[17:39:25.301]                 old_names <- names(...future.oldEnvVars)
[17:39:25.301]                 envs <- base::Sys.getenv()
[17:39:25.301]                 names <- names(envs)
[17:39:25.301]                 common <- intersect(names, old_names)
[17:39:25.301]                 added <- setdiff(names, old_names)
[17:39:25.301]                 removed <- setdiff(old_names, names)
[17:39:25.301]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.301]                   envs[common]]
[17:39:25.301]                 NAMES <- toupper(changed)
[17:39:25.301]                 args <- list()
[17:39:25.301]                 for (kk in seq_along(NAMES)) {
[17:39:25.301]                   name <- changed[[kk]]
[17:39:25.301]                   NAME <- NAMES[[kk]]
[17:39:25.301]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.301]                     next
[17:39:25.301]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.301]                 }
[17:39:25.301]                 NAMES <- toupper(added)
[17:39:25.301]                 for (kk in seq_along(NAMES)) {
[17:39:25.301]                   name <- added[[kk]]
[17:39:25.301]                   NAME <- NAMES[[kk]]
[17:39:25.301]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.301]                     next
[17:39:25.301]                   args[[name]] <- ""
[17:39:25.301]                 }
[17:39:25.301]                 NAMES <- toupper(removed)
[17:39:25.301]                 for (kk in seq_along(NAMES)) {
[17:39:25.301]                   name <- removed[[kk]]
[17:39:25.301]                   NAME <- NAMES[[kk]]
[17:39:25.301]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.301]                     next
[17:39:25.301]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.301]                 }
[17:39:25.301]                 if (length(args) > 0) 
[17:39:25.301]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.301]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.301]             }
[17:39:25.301]             else {
[17:39:25.301]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.301]             }
[17:39:25.301]             {
[17:39:25.301]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.301]                   0L) {
[17:39:25.301]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.301]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.301]                   base::options(opts)
[17:39:25.301]                 }
[17:39:25.301]                 {
[17:39:25.301]                   {
[17:39:25.301]                     NULL
[17:39:25.301]                     RNGkind("Mersenne-Twister")
[17:39:25.301]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.301]                       inherits = FALSE)
[17:39:25.301]                   }
[17:39:25.301]                   options(future.plan = NULL)
[17:39:25.301]                   if (is.na(NA_character_)) 
[17:39:25.301]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.301]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.301]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.301]                     .init = FALSE)
[17:39:25.301]                 }
[17:39:25.301]             }
[17:39:25.301]         }
[17:39:25.301]     })
[17:39:25.301]     if (TRUE) {
[17:39:25.301]         base::sink(type = "output", split = FALSE)
[17:39:25.301]         if (TRUE) {
[17:39:25.301]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.301]         }
[17:39:25.301]         else {
[17:39:25.301]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.301]         }
[17:39:25.301]         base::close(...future.stdout)
[17:39:25.301]         ...future.stdout <- NULL
[17:39:25.301]     }
[17:39:25.301]     ...future.result$conditions <- ...future.conditions
[17:39:25.301]     ...future.result$finished <- base::Sys.time()
[17:39:25.301]     ...future.result
[17:39:25.301] }
[17:39:25.324]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.303] plan(): Setting new future strategy stack:
[17:39:25.324]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.303] List of future strategies:
[17:39:25.303] 1. sequential:
[17:39:25.303]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.303]    - tweaked: FALSE
[17:39:25.303]    - call: NULL
[17:39:25.324]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.303] plan(): nbrOfWorkers() = 1
[17:39:25.324]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.304] plan(): Setting new future strategy stack:
[17:39:25.324]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.304] List of future strategies:
[17:39:25.304] 1. sequential:
[17:39:25.304]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.304]    - tweaked: FALSE
[17:39:25.304]    - call: NULL
[17:39:25.324]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.305] plan(): nbrOfWorkers() = 1
[17:39:25.325]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.305] SequentialFuture started (and completed)
[17:39:25.325]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.305] - Launch lazy future ... done
[17:39:25.325]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.305] run() for ‘SequentialFuture’ ... done
[17:39:25.325]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.305] getGlobalsAndPackages() ...
[17:39:25.325]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.305] Searching for globals...
[17:39:25.325]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.306] 
[17:39:25.325]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.306] Searching for globals ... DONE
[17:39:25.325]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.306] - globals: [0] <none>
[17:39:25.326]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.306] getGlobalsAndPackages() ... DONE
[17:39:25.326]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.306] run() for ‘Future’ ...
[17:39:25.326]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.306] - state: ‘created’
[17:39:25.326]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.307] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.326]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.307] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.326]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.307] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.326]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.307]   - Field: ‘label’
[17:39:25.326]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.307]   - Field: ‘local’
[17:39:25.327]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.307]   - Field: ‘owner’
[17:39:25.327]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.307]   - Field: ‘envir’
[17:39:25.327]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.308]   - Field: ‘packages’
[17:39:25.327]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.308]   - Field: ‘gc’
[17:39:25.327]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.308]   - Field: ‘conditions’
[17:39:25.327]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.308]   - Field: ‘expr’
[17:39:25.327]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.308]   - Field: ‘uuid’
[17:39:25.327]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.308]   - Field: ‘seed’
[17:39:25.328]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.308]   - Field: ‘version’
[17:39:25.328]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.308]   - Field: ‘result’
[17:39:25.328]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.308]   - Field: ‘asynchronous’
[17:39:25.328]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.308]   - Field: ‘calls’
[17:39:25.328]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.309]   - Field: ‘globals’
[17:39:25.328]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.309]   - Field: ‘stdout’
[17:39:25.328]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.309]   - Field: ‘earlySignal’
[17:39:25.329]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.309]   - Field: ‘lazy’
[17:39:25.329]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.309]   - Field: ‘state’
[17:39:25.329]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.309] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.329]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.309] - Launch lazy future ...
[17:39:25.329]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.309] Packages needed by the future expression (n = 0): <none>
[17:39:25.329]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.309] Packages needed by future strategies (n = 0): <none>
[17:39:25.329]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.310] {
[17:39:25.310]     {
[17:39:25.310]         {
[17:39:25.310]             ...future.startTime <- base::Sys.time()
[17:39:25.310]             {
[17:39:25.310]                 {
[17:39:25.310]                   {
[17:39:25.310]                     base::local({
[17:39:25.310]                       has_future <- base::requireNamespace("future", 
[17:39:25.310]                         quietly = TRUE)
[17:39:25.310]                       if (has_future) {
[17:39:25.310]                         ns <- base::getNamespace("future")
[17:39:25.310]                         version <- ns[[".package"]][["version"]]
[17:39:25.310]                         if (is.null(version)) 
[17:39:25.310]                           version <- utils::packageVersion("future")
[17:39:25.310]                       }
[17:39:25.310]                       else {
[17:39:25.310]                         version <- NULL
[17:39:25.310]                       }
[17:39:25.310]                       if (!has_future || version < "1.8.0") {
[17:39:25.310]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.310]                           "", base::R.version$version.string), 
[17:39:25.310]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.310]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.310]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.310]                             "release", "version")], collapse = " "), 
[17:39:25.310]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.310]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.310]                           info)
[17:39:25.310]                         info <- base::paste(info, collapse = "; ")
[17:39:25.310]                         if (!has_future) {
[17:39:25.310]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.310]                             info)
[17:39:25.310]                         }
[17:39:25.310]                         else {
[17:39:25.310]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.310]                             info, version)
[17:39:25.310]                         }
[17:39:25.310]                         base::stop(msg)
[17:39:25.310]                       }
[17:39:25.310]                     })
[17:39:25.310]                   }
[17:39:25.310]                   ...future.strategy.old <- future::plan("list")
[17:39:25.310]                   options(future.plan = NULL)
[17:39:25.310]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.310]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.310]                 }
[17:39:25.310]                 ...future.workdir <- getwd()
[17:39:25.310]             }
[17:39:25.310]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.310]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.310]         }
[17:39:25.310]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.310]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.310]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.310]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.310]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.310]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.310]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.310]             base::names(...future.oldOptions))
[17:39:25.310]     }
[17:39:25.310]     if (FALSE) {
[17:39:25.310]     }
[17:39:25.310]     else {
[17:39:25.310]         if (TRUE) {
[17:39:25.310]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.310]                 open = "w")
[17:39:25.310]         }
[17:39:25.310]         else {
[17:39:25.310]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.310]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.310]         }
[17:39:25.310]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.310]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.310]             base::sink(type = "output", split = FALSE)
[17:39:25.310]             base::close(...future.stdout)
[17:39:25.310]         }, add = TRUE)
[17:39:25.310]     }
[17:39:25.310]     ...future.frame <- base::sys.nframe()
[17:39:25.310]     ...future.conditions <- base::list()
[17:39:25.310]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.310]     if (FALSE) {
[17:39:25.310]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.310]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.310]     }
[17:39:25.310]     ...future.result <- base::tryCatch({
[17:39:25.310]         base::withCallingHandlers({
[17:39:25.310]             ...future.value <- base::withVisible(base::local(4))
[17:39:25.310]             future::FutureResult(value = ...future.value$value, 
[17:39:25.310]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.310]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.310]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.310]                     ...future.globalenv.names))
[17:39:25.310]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.310]         }, condition = base::local({
[17:39:25.310]             c <- base::c
[17:39:25.310]             inherits <- base::inherits
[17:39:25.310]             invokeRestart <- base::invokeRestart
[17:39:25.310]             length <- base::length
[17:39:25.310]             list <- base::list
[17:39:25.310]             seq.int <- base::seq.int
[17:39:25.310]             signalCondition <- base::signalCondition
[17:39:25.310]             sys.calls <- base::sys.calls
[17:39:25.310]             `[[` <- base::`[[`
[17:39:25.310]             `+` <- base::`+`
[17:39:25.310]             `<<-` <- base::`<<-`
[17:39:25.310]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.310]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.310]                   3L)]
[17:39:25.310]             }
[17:39:25.310]             function(cond) {
[17:39:25.310]                 is_error <- inherits(cond, "error")
[17:39:25.310]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.310]                   NULL)
[17:39:25.310]                 if (is_error) {
[17:39:25.310]                   sessionInformation <- function() {
[17:39:25.310]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.310]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.310]                       search = base::search(), system = base::Sys.info())
[17:39:25.310]                   }
[17:39:25.310]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.310]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.310]                     cond$call), session = sessionInformation(), 
[17:39:25.310]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.310]                   signalCondition(cond)
[17:39:25.310]                 }
[17:39:25.310]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.310]                 "immediateCondition"))) {
[17:39:25.310]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.310]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.310]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.310]                   if (TRUE && !signal) {
[17:39:25.310]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.310]                     {
[17:39:25.310]                       inherits <- base::inherits
[17:39:25.310]                       invokeRestart <- base::invokeRestart
[17:39:25.310]                       is.null <- base::is.null
[17:39:25.310]                       muffled <- FALSE
[17:39:25.310]                       if (inherits(cond, "message")) {
[17:39:25.310]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.310]                         if (muffled) 
[17:39:25.310]                           invokeRestart("muffleMessage")
[17:39:25.310]                       }
[17:39:25.310]                       else if (inherits(cond, "warning")) {
[17:39:25.310]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.310]                         if (muffled) 
[17:39:25.310]                           invokeRestart("muffleWarning")
[17:39:25.310]                       }
[17:39:25.310]                       else if (inherits(cond, "condition")) {
[17:39:25.310]                         if (!is.null(pattern)) {
[17:39:25.310]                           computeRestarts <- base::computeRestarts
[17:39:25.310]                           grepl <- base::grepl
[17:39:25.310]                           restarts <- computeRestarts(cond)
[17:39:25.310]                           for (restart in restarts) {
[17:39:25.310]                             name <- restart$name
[17:39:25.310]                             if (is.null(name)) 
[17:39:25.310]                               next
[17:39:25.310]                             if (!grepl(pattern, name)) 
[17:39:25.310]                               next
[17:39:25.310]                             invokeRestart(restart)
[17:39:25.310]                             muffled <- TRUE
[17:39:25.310]                             break
[17:39:25.310]                           }
[17:39:25.310]                         }
[17:39:25.310]                       }
[17:39:25.310]                       invisible(muffled)
[17:39:25.310]                     }
[17:39:25.310]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.310]                   }
[17:39:25.310]                 }
[17:39:25.310]                 else {
[17:39:25.310]                   if (TRUE) {
[17:39:25.310]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.310]                     {
[17:39:25.310]                       inherits <- base::inherits
[17:39:25.310]                       invokeRestart <- base::invokeRestart
[17:39:25.310]                       is.null <- base::is.null
[17:39:25.310]                       muffled <- FALSE
[17:39:25.310]                       if (inherits(cond, "message")) {
[17:39:25.310]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.310]                         if (muffled) 
[17:39:25.310]                           invokeRestart("muffleMessage")
[17:39:25.310]                       }
[17:39:25.310]                       else if (inherits(cond, "warning")) {
[17:39:25.310]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.310]                         if (muffled) 
[17:39:25.310]                           invokeRestart("muffleWarning")
[17:39:25.310]                       }
[17:39:25.310]                       else if (inherits(cond, "condition")) {
[17:39:25.310]                         if (!is.null(pattern)) {
[17:39:25.310]                           computeRestarts <- base::computeRestarts
[17:39:25.310]                           grepl <- base::grepl
[17:39:25.310]                           restarts <- computeRestarts(cond)
[17:39:25.310]                           for (restart in restarts) {
[17:39:25.310]                             name <- restart$name
[17:39:25.310]                             if (is.null(name)) 
[17:39:25.310]                               next
[17:39:25.310]                             if (!grepl(pattern, name)) 
[17:39:25.310]                               next
[17:39:25.310]                             invokeRestart(restart)
[17:39:25.310]                             muffled <- TRUE
[17:39:25.310]                             break
[17:39:25.310]                           }
[17:39:25.310]                         }
[17:39:25.310]                       }
[17:39:25.310]                       invisible(muffled)
[17:39:25.310]                     }
[17:39:25.310]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.310]                   }
[17:39:25.310]                 }
[17:39:25.310]             }
[17:39:25.310]         }))
[17:39:25.310]     }, error = function(ex) {
[17:39:25.310]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.310]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.310]                 ...future.rng), started = ...future.startTime, 
[17:39:25.310]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.310]             version = "1.8"), class = "FutureResult")
[17:39:25.310]     }, finally = {
[17:39:25.310]         if (!identical(...future.workdir, getwd())) 
[17:39:25.310]             setwd(...future.workdir)
[17:39:25.310]         {
[17:39:25.310]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.310]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.310]             }
[17:39:25.310]             base::options(...future.oldOptions)
[17:39:25.310]             if (.Platform$OS.type == "windows") {
[17:39:25.310]                 old_names <- names(...future.oldEnvVars)
[17:39:25.310]                 envs <- base::Sys.getenv()
[17:39:25.310]                 names <- names(envs)
[17:39:25.310]                 common <- intersect(names, old_names)
[17:39:25.310]                 added <- setdiff(names, old_names)
[17:39:25.310]                 removed <- setdiff(old_names, names)
[17:39:25.310]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.310]                   envs[common]]
[17:39:25.310]                 NAMES <- toupper(changed)
[17:39:25.310]                 args <- list()
[17:39:25.310]                 for (kk in seq_along(NAMES)) {
[17:39:25.310]                   name <- changed[[kk]]
[17:39:25.310]                   NAME <- NAMES[[kk]]
[17:39:25.310]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.310]                     next
[17:39:25.310]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.310]                 }
[17:39:25.310]                 NAMES <- toupper(added)
[17:39:25.310]                 for (kk in seq_along(NAMES)) {
[17:39:25.310]                   name <- added[[kk]]
[17:39:25.310]                   NAME <- NAMES[[kk]]
[17:39:25.310]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.310]                     next
[17:39:25.310]                   args[[name]] <- ""
[17:39:25.310]                 }
[17:39:25.310]                 NAMES <- toupper(removed)
[17:39:25.310]                 for (kk in seq_along(NAMES)) {
[17:39:25.310]                   name <- removed[[kk]]
[17:39:25.310]                   NAME <- NAMES[[kk]]
[17:39:25.310]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.310]                     next
[17:39:25.310]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.310]                 }
[17:39:25.310]                 if (length(args) > 0) 
[17:39:25.310]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.310]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.310]             }
[17:39:25.310]             else {
[17:39:25.310]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.310]             }
[17:39:25.310]             {
[17:39:25.310]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.310]                   0L) {
[17:39:25.310]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.310]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.310]                   base::options(opts)
[17:39:25.310]                 }
[17:39:25.310]                 {
[17:39:25.310]                   {
[17:39:25.310]                     NULL
[17:39:25.310]                     RNGkind("Mersenne-Twister")
[17:39:25.310]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.310]                       inherits = FALSE)
[17:39:25.310]                   }
[17:39:25.310]                   options(future.plan = NULL)
[17:39:25.310]                   if (is.na(NA_character_)) 
[17:39:25.310]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.310]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.310]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.310]                     .init = FALSE)
[17:39:25.310]                 }
[17:39:25.310]             }
[17:39:25.310]         }
[17:39:25.310]     })
[17:39:25.310]     if (TRUE) {
[17:39:25.310]         base::sink(type = "output", split = FALSE)
[17:39:25.310]         if (TRUE) {
[17:39:25.310]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.310]         }
[17:39:25.310]         else {
[17:39:25.310]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.310]         }
[17:39:25.310]         base::close(...future.stdout)
[17:39:25.310]         ...future.stdout <- NULL
[17:39:25.310]     }
[17:39:25.310]     ...future.result$conditions <- ...future.conditions
[17:39:25.310]     ...future.result$finished <- base::Sys.time()
[17:39:25.310]     ...future.result
[17:39:25.310] }
[17:39:25.329]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.312] plan(): Setting new future strategy stack:
[17:39:25.330]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.312] List of future strategies:
[17:39:25.312] 1. sequential:
[17:39:25.312]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.312]    - tweaked: FALSE
[17:39:25.312]    - call: NULL
[17:39:25.330]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.312] plan(): nbrOfWorkers() = 1
[17:39:25.330]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.313] plan(): Setting new future strategy stack:
[17:39:25.330]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.313] List of future strategies:
[17:39:25.313] 1. sequential:
[17:39:25.313]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.313]    - tweaked: FALSE
[17:39:25.313]    - call: NULL
[17:39:25.330]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.313] plan(): nbrOfWorkers() = 1
[17:39:25.330]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.314] SequentialFuture started (and completed)
[17:39:25.330]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.314] - Launch lazy future ... done
[17:39:25.330]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.314] run() for ‘SequentialFuture’ ... done
[17:39:25.331] signalConditions() ... done
a = 10
[17:39:25.331] getGlobalsAndPackages() ...
[17:39:25.331] Searching for globals...
[17:39:25.332] - globals found: [3] ‘{’, ‘+’, ‘a’
[17:39:25.332] Searching for globals ... DONE
[17:39:25.332] Resolving globals: FALSE
[17:39:25.332] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:25.333] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:25.333] - globals: [1] ‘a’
[17:39:25.333] 
[17:39:25.333] getGlobalsAndPackages() ... DONE
[17:39:25.333] run() for ‘Future’ ...
[17:39:25.333] - state: ‘created’
[17:39:25.333] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.334] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.334] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.334]   - Field: ‘label’
[17:39:25.334]   - Field: ‘local’
[17:39:25.334]   - Field: ‘owner’
[17:39:25.334]   - Field: ‘envir’
[17:39:25.334]   - Field: ‘packages’
[17:39:25.334]   - Field: ‘gc’
[17:39:25.334]   - Field: ‘conditions’
[17:39:25.334]   - Field: ‘expr’
[17:39:25.335]   - Field: ‘uuid’
[17:39:25.335]   - Field: ‘seed’
[17:39:25.335]   - Field: ‘version’
[17:39:25.335]   - Field: ‘result’
[17:39:25.335]   - Field: ‘asynchronous’
[17:39:25.335]   - Field: ‘calls’
[17:39:25.335]   - Field: ‘globals’
[17:39:25.335]   - Field: ‘stdout’
[17:39:25.335]   - Field: ‘earlySignal’
[17:39:25.335]   - Field: ‘lazy’
[17:39:25.335]   - Field: ‘state’
[17:39:25.336] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.336] - Launch lazy future ...
[17:39:25.336] Packages needed by the future expression (n = 0): <none>
[17:39:25.336] Packages needed by future strategies (n = 0): <none>
[17:39:25.336] {
[17:39:25.336]     {
[17:39:25.336]         {
[17:39:25.336]             ...future.startTime <- base::Sys.time()
[17:39:25.336]             {
[17:39:25.336]                 {
[17:39:25.336]                   {
[17:39:25.336]                     base::local({
[17:39:25.336]                       has_future <- base::requireNamespace("future", 
[17:39:25.336]                         quietly = TRUE)
[17:39:25.336]                       if (has_future) {
[17:39:25.336]                         ns <- base::getNamespace("future")
[17:39:25.336]                         version <- ns[[".package"]][["version"]]
[17:39:25.336]                         if (is.null(version)) 
[17:39:25.336]                           version <- utils::packageVersion("future")
[17:39:25.336]                       }
[17:39:25.336]                       else {
[17:39:25.336]                         version <- NULL
[17:39:25.336]                       }
[17:39:25.336]                       if (!has_future || version < "1.8.0") {
[17:39:25.336]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.336]                           "", base::R.version$version.string), 
[17:39:25.336]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.336]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.336]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.336]                             "release", "version")], collapse = " "), 
[17:39:25.336]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.336]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.336]                           info)
[17:39:25.336]                         info <- base::paste(info, collapse = "; ")
[17:39:25.336]                         if (!has_future) {
[17:39:25.336]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.336]                             info)
[17:39:25.336]                         }
[17:39:25.336]                         else {
[17:39:25.336]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.336]                             info, version)
[17:39:25.336]                         }
[17:39:25.336]                         base::stop(msg)
[17:39:25.336]                       }
[17:39:25.336]                     })
[17:39:25.336]                   }
[17:39:25.336]                   ...future.strategy.old <- future::plan("list")
[17:39:25.336]                   options(future.plan = NULL)
[17:39:25.336]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.336]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.336]                 }
[17:39:25.336]                 ...future.workdir <- getwd()
[17:39:25.336]             }
[17:39:25.336]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.336]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.336]         }
[17:39:25.336]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.336]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.336]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.336]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.336]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.336]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.336]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.336]             base::names(...future.oldOptions))
[17:39:25.336]     }
[17:39:25.336]     if (FALSE) {
[17:39:25.336]     }
[17:39:25.336]     else {
[17:39:25.336]         if (TRUE) {
[17:39:25.336]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.336]                 open = "w")
[17:39:25.336]         }
[17:39:25.336]         else {
[17:39:25.336]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.336]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.336]         }
[17:39:25.336]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.336]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.336]             base::sink(type = "output", split = FALSE)
[17:39:25.336]             base::close(...future.stdout)
[17:39:25.336]         }, add = TRUE)
[17:39:25.336]     }
[17:39:25.336]     ...future.frame <- base::sys.nframe()
[17:39:25.336]     ...future.conditions <- base::list()
[17:39:25.336]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.336]     if (FALSE) {
[17:39:25.336]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.336]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.336]     }
[17:39:25.336]     ...future.result <- base::tryCatch({
[17:39:25.336]         base::withCallingHandlers({
[17:39:25.336]             ...future.value <- base::withVisible(base::local({
[17:39:25.336]                 a + 1
[17:39:25.336]             }))
[17:39:25.336]             future::FutureResult(value = ...future.value$value, 
[17:39:25.336]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.336]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.336]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.336]                     ...future.globalenv.names))
[17:39:25.336]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.336]         }, condition = base::local({
[17:39:25.336]             c <- base::c
[17:39:25.336]             inherits <- base::inherits
[17:39:25.336]             invokeRestart <- base::invokeRestart
[17:39:25.336]             length <- base::length
[17:39:25.336]             list <- base::list
[17:39:25.336]             seq.int <- base::seq.int
[17:39:25.336]             signalCondition <- base::signalCondition
[17:39:25.336]             sys.calls <- base::sys.calls
[17:39:25.336]             `[[` <- base::`[[`
[17:39:25.336]             `+` <- base::`+`
[17:39:25.336]             `<<-` <- base::`<<-`
[17:39:25.336]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.336]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.336]                   3L)]
[17:39:25.336]             }
[17:39:25.336]             function(cond) {
[17:39:25.336]                 is_error <- inherits(cond, "error")
[17:39:25.336]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.336]                   NULL)
[17:39:25.336]                 if (is_error) {
[17:39:25.336]                   sessionInformation <- function() {
[17:39:25.336]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.336]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.336]                       search = base::search(), system = base::Sys.info())
[17:39:25.336]                   }
[17:39:25.336]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.336]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.336]                     cond$call), session = sessionInformation(), 
[17:39:25.336]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.336]                   signalCondition(cond)
[17:39:25.336]                 }
[17:39:25.336]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.336]                 "immediateCondition"))) {
[17:39:25.336]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.336]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.336]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.336]                   if (TRUE && !signal) {
[17:39:25.336]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.336]                     {
[17:39:25.336]                       inherits <- base::inherits
[17:39:25.336]                       invokeRestart <- base::invokeRestart
[17:39:25.336]                       is.null <- base::is.null
[17:39:25.336]                       muffled <- FALSE
[17:39:25.336]                       if (inherits(cond, "message")) {
[17:39:25.336]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.336]                         if (muffled) 
[17:39:25.336]                           invokeRestart("muffleMessage")
[17:39:25.336]                       }
[17:39:25.336]                       else if (inherits(cond, "warning")) {
[17:39:25.336]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.336]                         if (muffled) 
[17:39:25.336]                           invokeRestart("muffleWarning")
[17:39:25.336]                       }
[17:39:25.336]                       else if (inherits(cond, "condition")) {
[17:39:25.336]                         if (!is.null(pattern)) {
[17:39:25.336]                           computeRestarts <- base::computeRestarts
[17:39:25.336]                           grepl <- base::grepl
[17:39:25.336]                           restarts <- computeRestarts(cond)
[17:39:25.336]                           for (restart in restarts) {
[17:39:25.336]                             name <- restart$name
[17:39:25.336]                             if (is.null(name)) 
[17:39:25.336]                               next
[17:39:25.336]                             if (!grepl(pattern, name)) 
[17:39:25.336]                               next
[17:39:25.336]                             invokeRestart(restart)
[17:39:25.336]                             muffled <- TRUE
[17:39:25.336]                             break
[17:39:25.336]                           }
[17:39:25.336]                         }
[17:39:25.336]                       }
[17:39:25.336]                       invisible(muffled)
[17:39:25.336]                     }
[17:39:25.336]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.336]                   }
[17:39:25.336]                 }
[17:39:25.336]                 else {
[17:39:25.336]                   if (TRUE) {
[17:39:25.336]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.336]                     {
[17:39:25.336]                       inherits <- base::inherits
[17:39:25.336]                       invokeRestart <- base::invokeRestart
[17:39:25.336]                       is.null <- base::is.null
[17:39:25.336]                       muffled <- FALSE
[17:39:25.336]                       if (inherits(cond, "message")) {
[17:39:25.336]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.336]                         if (muffled) 
[17:39:25.336]                           invokeRestart("muffleMessage")
[17:39:25.336]                       }
[17:39:25.336]                       else if (inherits(cond, "warning")) {
[17:39:25.336]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.336]                         if (muffled) 
[17:39:25.336]                           invokeRestart("muffleWarning")
[17:39:25.336]                       }
[17:39:25.336]                       else if (inherits(cond, "condition")) {
[17:39:25.336]                         if (!is.null(pattern)) {
[17:39:25.336]                           computeRestarts <- base::computeRestarts
[17:39:25.336]                           grepl <- base::grepl
[17:39:25.336]                           restarts <- computeRestarts(cond)
[17:39:25.336]                           for (restart in restarts) {
[17:39:25.336]                             name <- restart$name
[17:39:25.336]                             if (is.null(name)) 
[17:39:25.336]                               next
[17:39:25.336]                             if (!grepl(pattern, name)) 
[17:39:25.336]                               next
[17:39:25.336]                             invokeRestart(restart)
[17:39:25.336]                             muffled <- TRUE
[17:39:25.336]                             break
[17:39:25.336]                           }
[17:39:25.336]                         }
[17:39:25.336]                       }
[17:39:25.336]                       invisible(muffled)
[17:39:25.336]                     }
[17:39:25.336]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.336]                   }
[17:39:25.336]                 }
[17:39:25.336]             }
[17:39:25.336]         }))
[17:39:25.336]     }, error = function(ex) {
[17:39:25.336]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.336]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.336]                 ...future.rng), started = ...future.startTime, 
[17:39:25.336]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.336]             version = "1.8"), class = "FutureResult")
[17:39:25.336]     }, finally = {
[17:39:25.336]         if (!identical(...future.workdir, getwd())) 
[17:39:25.336]             setwd(...future.workdir)
[17:39:25.336]         {
[17:39:25.336]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.336]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.336]             }
[17:39:25.336]             base::options(...future.oldOptions)
[17:39:25.336]             if (.Platform$OS.type == "windows") {
[17:39:25.336]                 old_names <- names(...future.oldEnvVars)
[17:39:25.336]                 envs <- base::Sys.getenv()
[17:39:25.336]                 names <- names(envs)
[17:39:25.336]                 common <- intersect(names, old_names)
[17:39:25.336]                 added <- setdiff(names, old_names)
[17:39:25.336]                 removed <- setdiff(old_names, names)
[17:39:25.336]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.336]                   envs[common]]
[17:39:25.336]                 NAMES <- toupper(changed)
[17:39:25.336]                 args <- list()
[17:39:25.336]                 for (kk in seq_along(NAMES)) {
[17:39:25.336]                   name <- changed[[kk]]
[17:39:25.336]                   NAME <- NAMES[[kk]]
[17:39:25.336]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.336]                     next
[17:39:25.336]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.336]                 }
[17:39:25.336]                 NAMES <- toupper(added)
[17:39:25.336]                 for (kk in seq_along(NAMES)) {
[17:39:25.336]                   name <- added[[kk]]
[17:39:25.336]                   NAME <- NAMES[[kk]]
[17:39:25.336]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.336]                     next
[17:39:25.336]                   args[[name]] <- ""
[17:39:25.336]                 }
[17:39:25.336]                 NAMES <- toupper(removed)
[17:39:25.336]                 for (kk in seq_along(NAMES)) {
[17:39:25.336]                   name <- removed[[kk]]
[17:39:25.336]                   NAME <- NAMES[[kk]]
[17:39:25.336]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.336]                     next
[17:39:25.336]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.336]                 }
[17:39:25.336]                 if (length(args) > 0) 
[17:39:25.336]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.336]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.336]             }
[17:39:25.336]             else {
[17:39:25.336]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.336]             }
[17:39:25.336]             {
[17:39:25.336]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.336]                   0L) {
[17:39:25.336]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.336]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.336]                   base::options(opts)
[17:39:25.336]                 }
[17:39:25.336]                 {
[17:39:25.336]                   {
[17:39:25.336]                     NULL
[17:39:25.336]                     RNGkind("Mersenne-Twister")
[17:39:25.336]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.336]                       inherits = FALSE)
[17:39:25.336]                   }
[17:39:25.336]                   options(future.plan = NULL)
[17:39:25.336]                   if (is.na(NA_character_)) 
[17:39:25.336]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.336]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.336]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.336]                     .init = FALSE)
[17:39:25.336]                 }
[17:39:25.336]             }
[17:39:25.336]         }
[17:39:25.336]     })
[17:39:25.336]     if (TRUE) {
[17:39:25.336]         base::sink(type = "output", split = FALSE)
[17:39:25.336]         if (TRUE) {
[17:39:25.336]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.336]         }
[17:39:25.336]         else {
[17:39:25.336]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.336]         }
[17:39:25.336]         base::close(...future.stdout)
[17:39:25.336]         ...future.stdout <- NULL
[17:39:25.336]     }
[17:39:25.336]     ...future.result$conditions <- ...future.conditions
[17:39:25.336]     ...future.result$finished <- base::Sys.time()
[17:39:25.336]     ...future.result
[17:39:25.336] }
[17:39:25.338] assign_globals() ...
[17:39:25.338] List of 1
[17:39:25.338]  $ a: num 10
[17:39:25.338]  - attr(*, "where")=List of 1
[17:39:25.338]   ..$ a:<environment: R_EmptyEnv> 
[17:39:25.338]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:25.338]  - attr(*, "resolved")= logi FALSE
[17:39:25.338]  - attr(*, "total_size")= num 56
[17:39:25.338]  - attr(*, "already-done")= logi TRUE
[17:39:25.340] - copied ‘a’ to environment
[17:39:25.340] assign_globals() ... done
[17:39:25.341] plan(): Setting new future strategy stack:
[17:39:25.341] List of future strategies:
[17:39:25.341] 1. sequential:
[17:39:25.341]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.341]    - tweaked: FALSE
[17:39:25.341]    - call: NULL
[17:39:25.341] plan(): nbrOfWorkers() = 1
[17:39:25.342] plan(): Setting new future strategy stack:
[17:39:25.342] List of future strategies:
[17:39:25.342] 1. sequential:
[17:39:25.342]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.342]    - tweaked: FALSE
[17:39:25.342]    - call: plan(strategy)
[17:39:25.342] plan(): nbrOfWorkers() = 1
[17:39:25.343] SequentialFuture started (and completed)
[17:39:25.343] - Launch lazy future ... done
[17:39:25.344] run() for ‘SequentialFuture’ ... done
b = 11
*** %<-% with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** %<-% with ‘multicore’ futures ...
[17:39:25.350] plan(): Setting new future strategy stack:
[17:39:25.350] List of future strategies:
[17:39:25.350] 1. multicore:
[17:39:25.350]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:25.350]    - tweaked: FALSE
[17:39:25.350]    - call: plan(strategy)
[17:39:25.354] plan(): nbrOfWorkers() = 2
** Future evaluation without globals
[17:39:25.354] getGlobalsAndPackages() ...
[17:39:25.354] Searching for globals...
[17:39:25.355] - globals found: [2] ‘{’, ‘<-’
[17:39:25.355] Searching for globals ... DONE
[17:39:25.355] Resolving globals: FALSE
[17:39:25.356] 
[17:39:25.356] 
[17:39:25.356] getGlobalsAndPackages() ... DONE
[17:39:25.356] run() for ‘Future’ ...
[17:39:25.356] - state: ‘created’
[17:39:25.356] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:25.360] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:25.360] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:25.360]   - Field: ‘label’
[17:39:25.360]   - Field: ‘local’
[17:39:25.360]   - Field: ‘owner’
[17:39:25.361]   - Field: ‘envir’
[17:39:25.361]   - Field: ‘workers’
[17:39:25.361]   - Field: ‘packages’
[17:39:25.361]   - Field: ‘gc’
[17:39:25.361]   - Field: ‘job’
[17:39:25.361]   - Field: ‘conditions’
[17:39:25.361]   - Field: ‘expr’
[17:39:25.361]   - Field: ‘uuid’
[17:39:25.361]   - Field: ‘seed’
[17:39:25.361]   - Field: ‘version’
[17:39:25.361]   - Field: ‘result’
[17:39:25.362]   - Field: ‘asynchronous’
[17:39:25.362]   - Field: ‘calls’
[17:39:25.362]   - Field: ‘globals’
[17:39:25.362]   - Field: ‘stdout’
[17:39:25.362]   - Field: ‘earlySignal’
[17:39:25.362]   - Field: ‘lazy’
[17:39:25.362]   - Field: ‘state’
[17:39:25.362] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:25.362] - Launch lazy future ...
[17:39:25.363] Packages needed by the future expression (n = 0): <none>
[17:39:25.363] Packages needed by future strategies (n = 0): <none>
[17:39:25.364] {
[17:39:25.364]     {
[17:39:25.364]         {
[17:39:25.364]             ...future.startTime <- base::Sys.time()
[17:39:25.364]             {
[17:39:25.364]                 {
[17:39:25.364]                   {
[17:39:25.364]                     {
[17:39:25.364]                       base::local({
[17:39:25.364]                         has_future <- base::requireNamespace("future", 
[17:39:25.364]                           quietly = TRUE)
[17:39:25.364]                         if (has_future) {
[17:39:25.364]                           ns <- base::getNamespace("future")
[17:39:25.364]                           version <- ns[[".package"]][["version"]]
[17:39:25.364]                           if (is.null(version)) 
[17:39:25.364]                             version <- utils::packageVersion("future")
[17:39:25.364]                         }
[17:39:25.364]                         else {
[17:39:25.364]                           version <- NULL
[17:39:25.364]                         }
[17:39:25.364]                         if (!has_future || version < "1.8.0") {
[17:39:25.364]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.364]                             "", base::R.version$version.string), 
[17:39:25.364]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:25.364]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.364]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.364]                               "release", "version")], collapse = " "), 
[17:39:25.364]                             hostname = base::Sys.info()[["nodename"]])
[17:39:25.364]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.364]                             info)
[17:39:25.364]                           info <- base::paste(info, collapse = "; ")
[17:39:25.364]                           if (!has_future) {
[17:39:25.364]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.364]                               info)
[17:39:25.364]                           }
[17:39:25.364]                           else {
[17:39:25.364]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.364]                               info, version)
[17:39:25.364]                           }
[17:39:25.364]                           base::stop(msg)
[17:39:25.364]                         }
[17:39:25.364]                       })
[17:39:25.364]                     }
[17:39:25.364]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:25.364]                     base::options(mc.cores = 1L)
[17:39:25.364]                   }
[17:39:25.364]                   ...future.strategy.old <- future::plan("list")
[17:39:25.364]                   options(future.plan = NULL)
[17:39:25.364]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.364]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.364]                 }
[17:39:25.364]                 ...future.workdir <- getwd()
[17:39:25.364]             }
[17:39:25.364]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.364]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.364]         }
[17:39:25.364]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.364]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.364]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.364]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.364]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.364]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.364]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.364]             base::names(...future.oldOptions))
[17:39:25.364]     }
[17:39:25.364]     if (FALSE) {
[17:39:25.364]     }
[17:39:25.364]     else {
[17:39:25.364]         if (TRUE) {
[17:39:25.364]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.364]                 open = "w")
[17:39:25.364]         }
[17:39:25.364]         else {
[17:39:25.364]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.364]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.364]         }
[17:39:25.364]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.364]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.364]             base::sink(type = "output", split = FALSE)
[17:39:25.364]             base::close(...future.stdout)
[17:39:25.364]         }, add = TRUE)
[17:39:25.364]     }
[17:39:25.364]     ...future.frame <- base::sys.nframe()
[17:39:25.364]     ...future.conditions <- base::list()
[17:39:25.364]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.364]     if (FALSE) {
[17:39:25.364]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.364]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.364]     }
[17:39:25.364]     ...future.result <- base::tryCatch({
[17:39:25.364]         base::withCallingHandlers({
[17:39:25.364]             ...future.value <- base::withVisible(base::local({
[17:39:25.364]                 withCallingHandlers({
[17:39:25.364]                   {
[17:39:25.364]                     x <- 1
[17:39:25.364]                   }
[17:39:25.364]                 }, immediateCondition = function(cond) {
[17:39:25.364]                   save_rds <- function (object, pathname, ...) 
[17:39:25.364]                   {
[17:39:25.364]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:25.364]                     if (file_test("-f", pathname_tmp)) {
[17:39:25.364]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.364]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:25.364]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.364]                         fi_tmp[["mtime"]])
[17:39:25.364]                     }
[17:39:25.364]                     tryCatch({
[17:39:25.364]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:25.364]                     }, error = function(ex) {
[17:39:25.364]                       msg <- conditionMessage(ex)
[17:39:25.364]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.364]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:25.364]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.364]                         fi_tmp[["mtime"]], msg)
[17:39:25.364]                       ex$message <- msg
[17:39:25.364]                       stop(ex)
[17:39:25.364]                     })
[17:39:25.364]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:25.364]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:25.364]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:25.364]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.364]                       fi <- file.info(pathname)
[17:39:25.364]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:25.364]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.364]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:25.364]                         fi[["size"]], fi[["mtime"]])
[17:39:25.364]                       stop(msg)
[17:39:25.364]                     }
[17:39:25.364]                     invisible(pathname)
[17:39:25.364]                   }
[17:39:25.364]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:25.364]                     rootPath = tempdir()) 
[17:39:25.364]                   {
[17:39:25.364]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:25.364]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:25.364]                       tmpdir = path, fileext = ".rds")
[17:39:25.364]                     save_rds(obj, file)
[17:39:25.364]                   }
[17:39:25.364]                   saveImmediateCondition(cond, path = "/tmp/Rtmpq3kloZ/.future/immediateConditions")
[17:39:25.364]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.364]                   {
[17:39:25.364]                     inherits <- base::inherits
[17:39:25.364]                     invokeRestart <- base::invokeRestart
[17:39:25.364]                     is.null <- base::is.null
[17:39:25.364]                     muffled <- FALSE
[17:39:25.364]                     if (inherits(cond, "message")) {
[17:39:25.364]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:25.364]                       if (muffled) 
[17:39:25.364]                         invokeRestart("muffleMessage")
[17:39:25.364]                     }
[17:39:25.364]                     else if (inherits(cond, "warning")) {
[17:39:25.364]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:25.364]                       if (muffled) 
[17:39:25.364]                         invokeRestart("muffleWarning")
[17:39:25.364]                     }
[17:39:25.364]                     else if (inherits(cond, "condition")) {
[17:39:25.364]                       if (!is.null(pattern)) {
[17:39:25.364]                         computeRestarts <- base::computeRestarts
[17:39:25.364]                         grepl <- base::grepl
[17:39:25.364]                         restarts <- computeRestarts(cond)
[17:39:25.364]                         for (restart in restarts) {
[17:39:25.364]                           name <- restart$name
[17:39:25.364]                           if (is.null(name)) 
[17:39:25.364]                             next
[17:39:25.364]                           if (!grepl(pattern, name)) 
[17:39:25.364]                             next
[17:39:25.364]                           invokeRestart(restart)
[17:39:25.364]                           muffled <- TRUE
[17:39:25.364]                           break
[17:39:25.364]                         }
[17:39:25.364]                       }
[17:39:25.364]                     }
[17:39:25.364]                     invisible(muffled)
[17:39:25.364]                   }
[17:39:25.364]                   muffleCondition(cond)
[17:39:25.364]                 })
[17:39:25.364]             }))
[17:39:25.364]             future::FutureResult(value = ...future.value$value, 
[17:39:25.364]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.364]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.364]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.364]                     ...future.globalenv.names))
[17:39:25.364]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.364]         }, condition = base::local({
[17:39:25.364]             c <- base::c
[17:39:25.364]             inherits <- base::inherits
[17:39:25.364]             invokeRestart <- base::invokeRestart
[17:39:25.364]             length <- base::length
[17:39:25.364]             list <- base::list
[17:39:25.364]             seq.int <- base::seq.int
[17:39:25.364]             signalCondition <- base::signalCondition
[17:39:25.364]             sys.calls <- base::sys.calls
[17:39:25.364]             `[[` <- base::`[[`
[17:39:25.364]             `+` <- base::`+`
[17:39:25.364]             `<<-` <- base::`<<-`
[17:39:25.364]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.364]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.364]                   3L)]
[17:39:25.364]             }
[17:39:25.364]             function(cond) {
[17:39:25.364]                 is_error <- inherits(cond, "error")
[17:39:25.364]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.364]                   NULL)
[17:39:25.364]                 if (is_error) {
[17:39:25.364]                   sessionInformation <- function() {
[17:39:25.364]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.364]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.364]                       search = base::search(), system = base::Sys.info())
[17:39:25.364]                   }
[17:39:25.364]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.364]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.364]                     cond$call), session = sessionInformation(), 
[17:39:25.364]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.364]                   signalCondition(cond)
[17:39:25.364]                 }
[17:39:25.364]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.364]                 "immediateCondition"))) {
[17:39:25.364]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.364]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.364]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.364]                   if (TRUE && !signal) {
[17:39:25.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.364]                     {
[17:39:25.364]                       inherits <- base::inherits
[17:39:25.364]                       invokeRestart <- base::invokeRestart
[17:39:25.364]                       is.null <- base::is.null
[17:39:25.364]                       muffled <- FALSE
[17:39:25.364]                       if (inherits(cond, "message")) {
[17:39:25.364]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.364]                         if (muffled) 
[17:39:25.364]                           invokeRestart("muffleMessage")
[17:39:25.364]                       }
[17:39:25.364]                       else if (inherits(cond, "warning")) {
[17:39:25.364]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.364]                         if (muffled) 
[17:39:25.364]                           invokeRestart("muffleWarning")
[17:39:25.364]                       }
[17:39:25.364]                       else if (inherits(cond, "condition")) {
[17:39:25.364]                         if (!is.null(pattern)) {
[17:39:25.364]                           computeRestarts <- base::computeRestarts
[17:39:25.364]                           grepl <- base::grepl
[17:39:25.364]                           restarts <- computeRestarts(cond)
[17:39:25.364]                           for (restart in restarts) {
[17:39:25.364]                             name <- restart$name
[17:39:25.364]                             if (is.null(name)) 
[17:39:25.364]                               next
[17:39:25.364]                             if (!grepl(pattern, name)) 
[17:39:25.364]                               next
[17:39:25.364]                             invokeRestart(restart)
[17:39:25.364]                             muffled <- TRUE
[17:39:25.364]                             break
[17:39:25.364]                           }
[17:39:25.364]                         }
[17:39:25.364]                       }
[17:39:25.364]                       invisible(muffled)
[17:39:25.364]                     }
[17:39:25.364]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.364]                   }
[17:39:25.364]                 }
[17:39:25.364]                 else {
[17:39:25.364]                   if (TRUE) {
[17:39:25.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.364]                     {
[17:39:25.364]                       inherits <- base::inherits
[17:39:25.364]                       invokeRestart <- base::invokeRestart
[17:39:25.364]                       is.null <- base::is.null
[17:39:25.364]                       muffled <- FALSE
[17:39:25.364]                       if (inherits(cond, "message")) {
[17:39:25.364]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.364]                         if (muffled) 
[17:39:25.364]                           invokeRestart("muffleMessage")
[17:39:25.364]                       }
[17:39:25.364]                       else if (inherits(cond, "warning")) {
[17:39:25.364]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.364]                         if (muffled) 
[17:39:25.364]                           invokeRestart("muffleWarning")
[17:39:25.364]                       }
[17:39:25.364]                       else if (inherits(cond, "condition")) {
[17:39:25.364]                         if (!is.null(pattern)) {
[17:39:25.364]                           computeRestarts <- base::computeRestarts
[17:39:25.364]                           grepl <- base::grepl
[17:39:25.364]                           restarts <- computeRestarts(cond)
[17:39:25.364]                           for (restart in restarts) {
[17:39:25.364]                             name <- restart$name
[17:39:25.364]                             if (is.null(name)) 
[17:39:25.364]                               next
[17:39:25.364]                             if (!grepl(pattern, name)) 
[17:39:25.364]                               next
[17:39:25.364]                             invokeRestart(restart)
[17:39:25.364]                             muffled <- TRUE
[17:39:25.364]                             break
[17:39:25.364]                           }
[17:39:25.364]                         }
[17:39:25.364]                       }
[17:39:25.364]                       invisible(muffled)
[17:39:25.364]                     }
[17:39:25.364]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.364]                   }
[17:39:25.364]                 }
[17:39:25.364]             }
[17:39:25.364]         }))
[17:39:25.364]     }, error = function(ex) {
[17:39:25.364]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.364]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.364]                 ...future.rng), started = ...future.startTime, 
[17:39:25.364]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.364]             version = "1.8"), class = "FutureResult")
[17:39:25.364]     }, finally = {
[17:39:25.364]         if (!identical(...future.workdir, getwd())) 
[17:39:25.364]             setwd(...future.workdir)
[17:39:25.364]         {
[17:39:25.364]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.364]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.364]             }
[17:39:25.364]             base::options(...future.oldOptions)
[17:39:25.364]             if (.Platform$OS.type == "windows") {
[17:39:25.364]                 old_names <- names(...future.oldEnvVars)
[17:39:25.364]                 envs <- base::Sys.getenv()
[17:39:25.364]                 names <- names(envs)
[17:39:25.364]                 common <- intersect(names, old_names)
[17:39:25.364]                 added <- setdiff(names, old_names)
[17:39:25.364]                 removed <- setdiff(old_names, names)
[17:39:25.364]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.364]                   envs[common]]
[17:39:25.364]                 NAMES <- toupper(changed)
[17:39:25.364]                 args <- list()
[17:39:25.364]                 for (kk in seq_along(NAMES)) {
[17:39:25.364]                   name <- changed[[kk]]
[17:39:25.364]                   NAME <- NAMES[[kk]]
[17:39:25.364]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.364]                     next
[17:39:25.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.364]                 }
[17:39:25.364]                 NAMES <- toupper(added)
[17:39:25.364]                 for (kk in seq_along(NAMES)) {
[17:39:25.364]                   name <- added[[kk]]
[17:39:25.364]                   NAME <- NAMES[[kk]]
[17:39:25.364]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.364]                     next
[17:39:25.364]                   args[[name]] <- ""
[17:39:25.364]                 }
[17:39:25.364]                 NAMES <- toupper(removed)
[17:39:25.364]                 for (kk in seq_along(NAMES)) {
[17:39:25.364]                   name <- removed[[kk]]
[17:39:25.364]                   NAME <- NAMES[[kk]]
[17:39:25.364]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.364]                     next
[17:39:25.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.364]                 }
[17:39:25.364]                 if (length(args) > 0) 
[17:39:25.364]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.364]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.364]             }
[17:39:25.364]             else {
[17:39:25.364]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.364]             }
[17:39:25.364]             {
[17:39:25.364]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.364]                   0L) {
[17:39:25.364]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.364]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.364]                   base::options(opts)
[17:39:25.364]                 }
[17:39:25.364]                 {
[17:39:25.364]                   {
[17:39:25.364]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:25.364]                     NULL
[17:39:25.364]                   }
[17:39:25.364]                   options(future.plan = NULL)
[17:39:25.364]                   if (is.na(NA_character_)) 
[17:39:25.364]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.364]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.364]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.364]                     .init = FALSE)
[17:39:25.364]                 }
[17:39:25.364]             }
[17:39:25.364]         }
[17:39:25.364]     })
[17:39:25.364]     if (TRUE) {
[17:39:25.364]         base::sink(type = "output", split = FALSE)
[17:39:25.364]         if (TRUE) {
[17:39:25.364]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.364]         }
[17:39:25.364]         else {
[17:39:25.364]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.364]         }
[17:39:25.364]         base::close(...future.stdout)
[17:39:25.364]         ...future.stdout <- NULL
[17:39:25.364]     }
[17:39:25.364]     ...future.result$conditions <- ...future.conditions
[17:39:25.364]     ...future.result$finished <- base::Sys.time()
[17:39:25.364]     ...future.result
[17:39:25.364] }
[17:39:25.366] requestCore(): workers = 2
[17:39:25.369] MulticoreFuture started
[17:39:25.369] - Launch lazy future ... done
[17:39:25.370] run() for ‘MulticoreFuture’ ... done
[17:39:25.370] plan(): Setting new future strategy stack:
[17:39:25.370] List of future strategies:
[17:39:25.370] 1. sequential:
[17:39:25.370]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.370]    - tweaked: FALSE
[17:39:25.370]    - call: NULL
[17:39:25.371] plan(): nbrOfWorkers() = 1
[17:39:25.371] result() for MulticoreFuture ...
[17:39:25.373] plan(): Setting new future strategy stack:
[17:39:25.373] List of future strategies:
[17:39:25.373] 1. multicore:
[17:39:25.373]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:25.373]    - tweaked: FALSE
[17:39:25.373]    - call: plan(strategy)
[17:39:25.378] plan(): nbrOfWorkers() = 2
[17:39:25.382] result() for MulticoreFuture ...
[17:39:25.382] result() for MulticoreFuture ... done
[17:39:25.383] result() for MulticoreFuture ... done
[17:39:25.383] result() for MulticoreFuture ...
[17:39:25.383] result() for MulticoreFuture ... done
** Future evaluation with globals
[17:39:25.383] getGlobalsAndPackages() ...
[17:39:25.383] Searching for globals...
[17:39:25.385] - globals found: [3] ‘{’, ‘<-’, ‘a’
[17:39:25.385] Searching for globals ... DONE
[17:39:25.385] Resolving globals: FALSE
[17:39:25.386] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:25.386] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:25.386] - globals: [1] ‘a’
[17:39:25.386] 
[17:39:25.386] getGlobalsAndPackages() ... DONE
[17:39:25.387] run() for ‘Future’ ...
[17:39:25.387] - state: ‘created’
[17:39:25.387] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:25.394] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:25.394] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:25.394]   - Field: ‘label’
[17:39:25.394]   - Field: ‘local’
[17:39:25.394]   - Field: ‘owner’
[17:39:25.394]   - Field: ‘envir’
[17:39:25.395]   - Field: ‘workers’
[17:39:25.395]   - Field: ‘packages’
[17:39:25.395]   - Field: ‘gc’
[17:39:25.395]   - Field: ‘job’
[17:39:25.395]   - Field: ‘conditions’
[17:39:25.395]   - Field: ‘expr’
[17:39:25.395]   - Field: ‘uuid’
[17:39:25.395]   - Field: ‘seed’
[17:39:25.396]   - Field: ‘version’
[17:39:25.396]   - Field: ‘result’
[17:39:25.396]   - Field: ‘asynchronous’
[17:39:25.396]   - Field: ‘calls’
[17:39:25.396]   - Field: ‘globals’
[17:39:25.396]   - Field: ‘stdout’
[17:39:25.396]   - Field: ‘earlySignal’
[17:39:25.397]   - Field: ‘lazy’
[17:39:25.397]   - Field: ‘state’
[17:39:25.397] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:25.397] - Launch lazy future ...
[17:39:25.397] Packages needed by the future expression (n = 0): <none>
[17:39:25.397] Packages needed by future strategies (n = 0): <none>
[17:39:25.398] {
[17:39:25.398]     {
[17:39:25.398]         {
[17:39:25.398]             ...future.startTime <- base::Sys.time()
[17:39:25.398]             {
[17:39:25.398]                 {
[17:39:25.398]                   {
[17:39:25.398]                     {
[17:39:25.398]                       base::local({
[17:39:25.398]                         has_future <- base::requireNamespace("future", 
[17:39:25.398]                           quietly = TRUE)
[17:39:25.398]                         if (has_future) {
[17:39:25.398]                           ns <- base::getNamespace("future")
[17:39:25.398]                           version <- ns[[".package"]][["version"]]
[17:39:25.398]                           if (is.null(version)) 
[17:39:25.398]                             version <- utils::packageVersion("future")
[17:39:25.398]                         }
[17:39:25.398]                         else {
[17:39:25.398]                           version <- NULL
[17:39:25.398]                         }
[17:39:25.398]                         if (!has_future || version < "1.8.0") {
[17:39:25.398]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.398]                             "", base::R.version$version.string), 
[17:39:25.398]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:25.398]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.398]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.398]                               "release", "version")], collapse = " "), 
[17:39:25.398]                             hostname = base::Sys.info()[["nodename"]])
[17:39:25.398]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.398]                             info)
[17:39:25.398]                           info <- base::paste(info, collapse = "; ")
[17:39:25.398]                           if (!has_future) {
[17:39:25.398]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.398]                               info)
[17:39:25.398]                           }
[17:39:25.398]                           else {
[17:39:25.398]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.398]                               info, version)
[17:39:25.398]                           }
[17:39:25.398]                           base::stop(msg)
[17:39:25.398]                         }
[17:39:25.398]                       })
[17:39:25.398]                     }
[17:39:25.398]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:25.398]                     base::options(mc.cores = 1L)
[17:39:25.398]                   }
[17:39:25.398]                   ...future.strategy.old <- future::plan("list")
[17:39:25.398]                   options(future.plan = NULL)
[17:39:25.398]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.398]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.398]                 }
[17:39:25.398]                 ...future.workdir <- getwd()
[17:39:25.398]             }
[17:39:25.398]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.398]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.398]         }
[17:39:25.398]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.398]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.398]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.398]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.398]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.398]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.398]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.398]             base::names(...future.oldOptions))
[17:39:25.398]     }
[17:39:25.398]     if (FALSE) {
[17:39:25.398]     }
[17:39:25.398]     else {
[17:39:25.398]         if (TRUE) {
[17:39:25.398]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.398]                 open = "w")
[17:39:25.398]         }
[17:39:25.398]         else {
[17:39:25.398]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.398]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.398]         }
[17:39:25.398]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.398]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.398]             base::sink(type = "output", split = FALSE)
[17:39:25.398]             base::close(...future.stdout)
[17:39:25.398]         }, add = TRUE)
[17:39:25.398]     }
[17:39:25.398]     ...future.frame <- base::sys.nframe()
[17:39:25.398]     ...future.conditions <- base::list()
[17:39:25.398]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.398]     if (FALSE) {
[17:39:25.398]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.398]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.398]     }
[17:39:25.398]     ...future.result <- base::tryCatch({
[17:39:25.398]         base::withCallingHandlers({
[17:39:25.398]             ...future.value <- base::withVisible(base::local({
[17:39:25.398]                 withCallingHandlers({
[17:39:25.398]                   {
[17:39:25.398]                     x <- a
[17:39:25.398]                   }
[17:39:25.398]                 }, immediateCondition = function(cond) {
[17:39:25.398]                   save_rds <- function (object, pathname, ...) 
[17:39:25.398]                   {
[17:39:25.398]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:25.398]                     if (file_test("-f", pathname_tmp)) {
[17:39:25.398]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.398]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:25.398]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.398]                         fi_tmp[["mtime"]])
[17:39:25.398]                     }
[17:39:25.398]                     tryCatch({
[17:39:25.398]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:25.398]                     }, error = function(ex) {
[17:39:25.398]                       msg <- conditionMessage(ex)
[17:39:25.398]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.398]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:25.398]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.398]                         fi_tmp[["mtime"]], msg)
[17:39:25.398]                       ex$message <- msg
[17:39:25.398]                       stop(ex)
[17:39:25.398]                     })
[17:39:25.398]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:25.398]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:25.398]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:25.398]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.398]                       fi <- file.info(pathname)
[17:39:25.398]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:25.398]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.398]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:25.398]                         fi[["size"]], fi[["mtime"]])
[17:39:25.398]                       stop(msg)
[17:39:25.398]                     }
[17:39:25.398]                     invisible(pathname)
[17:39:25.398]                   }
[17:39:25.398]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:25.398]                     rootPath = tempdir()) 
[17:39:25.398]                   {
[17:39:25.398]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:25.398]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:25.398]                       tmpdir = path, fileext = ".rds")
[17:39:25.398]                     save_rds(obj, file)
[17:39:25.398]                   }
[17:39:25.398]                   saveImmediateCondition(cond, path = "/tmp/Rtmpq3kloZ/.future/immediateConditions")
[17:39:25.398]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.398]                   {
[17:39:25.398]                     inherits <- base::inherits
[17:39:25.398]                     invokeRestart <- base::invokeRestart
[17:39:25.398]                     is.null <- base::is.null
[17:39:25.398]                     muffled <- FALSE
[17:39:25.398]                     if (inherits(cond, "message")) {
[17:39:25.398]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:25.398]                       if (muffled) 
[17:39:25.398]                         invokeRestart("muffleMessage")
[17:39:25.398]                     }
[17:39:25.398]                     else if (inherits(cond, "warning")) {
[17:39:25.398]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:25.398]                       if (muffled) 
[17:39:25.398]                         invokeRestart("muffleWarning")
[17:39:25.398]                     }
[17:39:25.398]                     else if (inherits(cond, "condition")) {
[17:39:25.398]                       if (!is.null(pattern)) {
[17:39:25.398]                         computeRestarts <- base::computeRestarts
[17:39:25.398]                         grepl <- base::grepl
[17:39:25.398]                         restarts <- computeRestarts(cond)
[17:39:25.398]                         for (restart in restarts) {
[17:39:25.398]                           name <- restart$name
[17:39:25.398]                           if (is.null(name)) 
[17:39:25.398]                             next
[17:39:25.398]                           if (!grepl(pattern, name)) 
[17:39:25.398]                             next
[17:39:25.398]                           invokeRestart(restart)
[17:39:25.398]                           muffled <- TRUE
[17:39:25.398]                           break
[17:39:25.398]                         }
[17:39:25.398]                       }
[17:39:25.398]                     }
[17:39:25.398]                     invisible(muffled)
[17:39:25.398]                   }
[17:39:25.398]                   muffleCondition(cond)
[17:39:25.398]                 })
[17:39:25.398]             }))
[17:39:25.398]             future::FutureResult(value = ...future.value$value, 
[17:39:25.398]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.398]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.398]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.398]                     ...future.globalenv.names))
[17:39:25.398]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.398]         }, condition = base::local({
[17:39:25.398]             c <- base::c
[17:39:25.398]             inherits <- base::inherits
[17:39:25.398]             invokeRestart <- base::invokeRestart
[17:39:25.398]             length <- base::length
[17:39:25.398]             list <- base::list
[17:39:25.398]             seq.int <- base::seq.int
[17:39:25.398]             signalCondition <- base::signalCondition
[17:39:25.398]             sys.calls <- base::sys.calls
[17:39:25.398]             `[[` <- base::`[[`
[17:39:25.398]             `+` <- base::`+`
[17:39:25.398]             `<<-` <- base::`<<-`
[17:39:25.398]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.398]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.398]                   3L)]
[17:39:25.398]             }
[17:39:25.398]             function(cond) {
[17:39:25.398]                 is_error <- inherits(cond, "error")
[17:39:25.398]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.398]                   NULL)
[17:39:25.398]                 if (is_error) {
[17:39:25.398]                   sessionInformation <- function() {
[17:39:25.398]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.398]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.398]                       search = base::search(), system = base::Sys.info())
[17:39:25.398]                   }
[17:39:25.398]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.398]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.398]                     cond$call), session = sessionInformation(), 
[17:39:25.398]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.398]                   signalCondition(cond)
[17:39:25.398]                 }
[17:39:25.398]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.398]                 "immediateCondition"))) {
[17:39:25.398]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.398]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.398]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.398]                   if (TRUE && !signal) {
[17:39:25.398]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.398]                     {
[17:39:25.398]                       inherits <- base::inherits
[17:39:25.398]                       invokeRestart <- base::invokeRestart
[17:39:25.398]                       is.null <- base::is.null
[17:39:25.398]                       muffled <- FALSE
[17:39:25.398]                       if (inherits(cond, "message")) {
[17:39:25.398]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.398]                         if (muffled) 
[17:39:25.398]                           invokeRestart("muffleMessage")
[17:39:25.398]                       }
[17:39:25.398]                       else if (inherits(cond, "warning")) {
[17:39:25.398]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.398]                         if (muffled) 
[17:39:25.398]                           invokeRestart("muffleWarning")
[17:39:25.398]                       }
[17:39:25.398]                       else if (inherits(cond, "condition")) {
[17:39:25.398]                         if (!is.null(pattern)) {
[17:39:25.398]                           computeRestarts <- base::computeRestarts
[17:39:25.398]                           grepl <- base::grepl
[17:39:25.398]                           restarts <- computeRestarts(cond)
[17:39:25.398]                           for (restart in restarts) {
[17:39:25.398]                             name <- restart$name
[17:39:25.398]                             if (is.null(name)) 
[17:39:25.398]                               next
[17:39:25.398]                             if (!grepl(pattern, name)) 
[17:39:25.398]                               next
[17:39:25.398]                             invokeRestart(restart)
[17:39:25.398]                             muffled <- TRUE
[17:39:25.398]                             break
[17:39:25.398]                           }
[17:39:25.398]                         }
[17:39:25.398]                       }
[17:39:25.398]                       invisible(muffled)
[17:39:25.398]                     }
[17:39:25.398]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.398]                   }
[17:39:25.398]                 }
[17:39:25.398]                 else {
[17:39:25.398]                   if (TRUE) {
[17:39:25.398]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.398]                     {
[17:39:25.398]                       inherits <- base::inherits
[17:39:25.398]                       invokeRestart <- base::invokeRestart
[17:39:25.398]                       is.null <- base::is.null
[17:39:25.398]                       muffled <- FALSE
[17:39:25.398]                       if (inherits(cond, "message")) {
[17:39:25.398]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.398]                         if (muffled) 
[17:39:25.398]                           invokeRestart("muffleMessage")
[17:39:25.398]                       }
[17:39:25.398]                       else if (inherits(cond, "warning")) {
[17:39:25.398]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.398]                         if (muffled) 
[17:39:25.398]                           invokeRestart("muffleWarning")
[17:39:25.398]                       }
[17:39:25.398]                       else if (inherits(cond, "condition")) {
[17:39:25.398]                         if (!is.null(pattern)) {
[17:39:25.398]                           computeRestarts <- base::computeRestarts
[17:39:25.398]                           grepl <- base::grepl
[17:39:25.398]                           restarts <- computeRestarts(cond)
[17:39:25.398]                           for (restart in restarts) {
[17:39:25.398]                             name <- restart$name
[17:39:25.398]                             if (is.null(name)) 
[17:39:25.398]                               next
[17:39:25.398]                             if (!grepl(pattern, name)) 
[17:39:25.398]                               next
[17:39:25.398]                             invokeRestart(restart)
[17:39:25.398]                             muffled <- TRUE
[17:39:25.398]                             break
[17:39:25.398]                           }
[17:39:25.398]                         }
[17:39:25.398]                       }
[17:39:25.398]                       invisible(muffled)
[17:39:25.398]                     }
[17:39:25.398]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.398]                   }
[17:39:25.398]                 }
[17:39:25.398]             }
[17:39:25.398]         }))
[17:39:25.398]     }, error = function(ex) {
[17:39:25.398]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.398]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.398]                 ...future.rng), started = ...future.startTime, 
[17:39:25.398]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.398]             version = "1.8"), class = "FutureResult")
[17:39:25.398]     }, finally = {
[17:39:25.398]         if (!identical(...future.workdir, getwd())) 
[17:39:25.398]             setwd(...future.workdir)
[17:39:25.398]         {
[17:39:25.398]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.398]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.398]             }
[17:39:25.398]             base::options(...future.oldOptions)
[17:39:25.398]             if (.Platform$OS.type == "windows") {
[17:39:25.398]                 old_names <- names(...future.oldEnvVars)
[17:39:25.398]                 envs <- base::Sys.getenv()
[17:39:25.398]                 names <- names(envs)
[17:39:25.398]                 common <- intersect(names, old_names)
[17:39:25.398]                 added <- setdiff(names, old_names)
[17:39:25.398]                 removed <- setdiff(old_names, names)
[17:39:25.398]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.398]                   envs[common]]
[17:39:25.398]                 NAMES <- toupper(changed)
[17:39:25.398]                 args <- list()
[17:39:25.398]                 for (kk in seq_along(NAMES)) {
[17:39:25.398]                   name <- changed[[kk]]
[17:39:25.398]                   NAME <- NAMES[[kk]]
[17:39:25.398]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.398]                     next
[17:39:25.398]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.398]                 }
[17:39:25.398]                 NAMES <- toupper(added)
[17:39:25.398]                 for (kk in seq_along(NAMES)) {
[17:39:25.398]                   name <- added[[kk]]
[17:39:25.398]                   NAME <- NAMES[[kk]]
[17:39:25.398]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.398]                     next
[17:39:25.398]                   args[[name]] <- ""
[17:39:25.398]                 }
[17:39:25.398]                 NAMES <- toupper(removed)
[17:39:25.398]                 for (kk in seq_along(NAMES)) {
[17:39:25.398]                   name <- removed[[kk]]
[17:39:25.398]                   NAME <- NAMES[[kk]]
[17:39:25.398]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.398]                     next
[17:39:25.398]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.398]                 }
[17:39:25.398]                 if (length(args) > 0) 
[17:39:25.398]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.398]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.398]             }
[17:39:25.398]             else {
[17:39:25.398]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.398]             }
[17:39:25.398]             {
[17:39:25.398]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.398]                   0L) {
[17:39:25.398]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.398]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.398]                   base::options(opts)
[17:39:25.398]                 }
[17:39:25.398]                 {
[17:39:25.398]                   {
[17:39:25.398]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:25.398]                     NULL
[17:39:25.398]                   }
[17:39:25.398]                   options(future.plan = NULL)
[17:39:25.398]                   if (is.na(NA_character_)) 
[17:39:25.398]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.398]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.398]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.398]                     .init = FALSE)
[17:39:25.398]                 }
[17:39:25.398]             }
[17:39:25.398]         }
[17:39:25.398]     })
[17:39:25.398]     if (TRUE) {
[17:39:25.398]         base::sink(type = "output", split = FALSE)
[17:39:25.398]         if (TRUE) {
[17:39:25.398]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.398]         }
[17:39:25.398]         else {
[17:39:25.398]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.398]         }
[17:39:25.398]         base::close(...future.stdout)
[17:39:25.398]         ...future.stdout <- NULL
[17:39:25.398]     }
[17:39:25.398]     ...future.result$conditions <- ...future.conditions
[17:39:25.398]     ...future.result$finished <- base::Sys.time()
[17:39:25.398]     ...future.result
[17:39:25.398] }
[17:39:25.400] assign_globals() ...
[17:39:25.400] List of 1
[17:39:25.400]  $ a: num 2
[17:39:25.400]  - attr(*, "where")=List of 1
[17:39:25.400]   ..$ a:<environment: R_EmptyEnv> 
[17:39:25.400]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:25.400]  - attr(*, "resolved")= logi FALSE
[17:39:25.400]  - attr(*, "total_size")= num 56
[17:39:25.400]  - attr(*, "already-done")= logi TRUE
[17:39:25.403] - copied ‘a’ to environment
[17:39:25.403] assign_globals() ... done
[17:39:25.404] requestCore(): workers = 2
[17:39:25.405] MulticoreFuture started
[17:39:25.406] - Launch lazy future ... done
[17:39:25.406] run() for ‘MulticoreFuture’ ... done
[17:39:25.406] result() for MulticoreFuture ...
[17:39:25.406] plan(): Setting new future strategy stack:
[17:39:25.407] List of future strategies:
[17:39:25.407] 1. sequential:
[17:39:25.407]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.407]    - tweaked: FALSE
[17:39:25.407]    - call: NULL
[17:39:25.408] plan(): nbrOfWorkers() = 1
[17:39:25.410] plan(): Setting new future strategy stack:
[17:39:25.410] List of future strategies:
[17:39:25.410] 1. multicore:
[17:39:25.410]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:25.410]    - tweaked: FALSE
[17:39:25.410]    - call: plan(strategy)
[17:39:25.415] plan(): nbrOfWorkers() = 2
[17:39:25.416] result() for MulticoreFuture ...
[17:39:25.416] result() for MulticoreFuture ... done
[17:39:25.416] result() for MulticoreFuture ... done
[17:39:25.416] result() for MulticoreFuture ...
[17:39:25.416] result() for MulticoreFuture ... done
** Future evaluation with errors
[17:39:25.417] getGlobalsAndPackages() ...
[17:39:25.417] Searching for globals...
[17:39:25.419] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[17:39:25.419] Searching for globals ... DONE
[17:39:25.419] Resolving globals: FALSE
[17:39:25.420] 
[17:39:25.420] 
[17:39:25.420] getGlobalsAndPackages() ... DONE
[17:39:25.420] run() for ‘Future’ ...
[17:39:25.421] - state: ‘created’
[17:39:25.421] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:25.425] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:25.425] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:25.425]   - Field: ‘label’
[17:39:25.425]   - Field: ‘local’
[17:39:25.425]   - Field: ‘owner’
[17:39:25.426]   - Field: ‘envir’
[17:39:25.426]   - Field: ‘workers’
[17:39:25.426]   - Field: ‘packages’
[17:39:25.426]   - Field: ‘gc’
[17:39:25.426]   - Field: ‘job’
[17:39:25.426]   - Field: ‘conditions’
[17:39:25.426]   - Field: ‘expr’
[17:39:25.426]   - Field: ‘uuid’
[17:39:25.426]   - Field: ‘seed’
[17:39:25.427]   - Field: ‘version’
[17:39:25.427]   - Field: ‘result’
[17:39:25.427]   - Field: ‘asynchronous’
[17:39:25.427]   - Field: ‘calls’
[17:39:25.427]   - Field: ‘globals’
[17:39:25.427]   - Field: ‘stdout’
[17:39:25.427]   - Field: ‘earlySignal’
[17:39:25.427]   - Field: ‘lazy’
[17:39:25.427]   - Field: ‘state’
[17:39:25.428] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:25.428] - Launch lazy future ...
[17:39:25.428] Packages needed by the future expression (n = 0): <none>
[17:39:25.428] Packages needed by future strategies (n = 0): <none>
[17:39:25.429] {
[17:39:25.429]     {
[17:39:25.429]         {
[17:39:25.429]             ...future.startTime <- base::Sys.time()
[17:39:25.429]             {
[17:39:25.429]                 {
[17:39:25.429]                   {
[17:39:25.429]                     {
[17:39:25.429]                       base::local({
[17:39:25.429]                         has_future <- base::requireNamespace("future", 
[17:39:25.429]                           quietly = TRUE)
[17:39:25.429]                         if (has_future) {
[17:39:25.429]                           ns <- base::getNamespace("future")
[17:39:25.429]                           version <- ns[[".package"]][["version"]]
[17:39:25.429]                           if (is.null(version)) 
[17:39:25.429]                             version <- utils::packageVersion("future")
[17:39:25.429]                         }
[17:39:25.429]                         else {
[17:39:25.429]                           version <- NULL
[17:39:25.429]                         }
[17:39:25.429]                         if (!has_future || version < "1.8.0") {
[17:39:25.429]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.429]                             "", base::R.version$version.string), 
[17:39:25.429]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:25.429]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.429]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.429]                               "release", "version")], collapse = " "), 
[17:39:25.429]                             hostname = base::Sys.info()[["nodename"]])
[17:39:25.429]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.429]                             info)
[17:39:25.429]                           info <- base::paste(info, collapse = "; ")
[17:39:25.429]                           if (!has_future) {
[17:39:25.429]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.429]                               info)
[17:39:25.429]                           }
[17:39:25.429]                           else {
[17:39:25.429]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.429]                               info, version)
[17:39:25.429]                           }
[17:39:25.429]                           base::stop(msg)
[17:39:25.429]                         }
[17:39:25.429]                       })
[17:39:25.429]                     }
[17:39:25.429]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:25.429]                     base::options(mc.cores = 1L)
[17:39:25.429]                   }
[17:39:25.429]                   ...future.strategy.old <- future::plan("list")
[17:39:25.429]                   options(future.plan = NULL)
[17:39:25.429]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.429]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.429]                 }
[17:39:25.429]                 ...future.workdir <- getwd()
[17:39:25.429]             }
[17:39:25.429]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.429]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.429]         }
[17:39:25.429]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.429]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.429]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.429]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.429]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.429]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.429]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.429]             base::names(...future.oldOptions))
[17:39:25.429]     }
[17:39:25.429]     if (FALSE) {
[17:39:25.429]     }
[17:39:25.429]     else {
[17:39:25.429]         if (TRUE) {
[17:39:25.429]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.429]                 open = "w")
[17:39:25.429]         }
[17:39:25.429]         else {
[17:39:25.429]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.429]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.429]         }
[17:39:25.429]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.429]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.429]             base::sink(type = "output", split = FALSE)
[17:39:25.429]             base::close(...future.stdout)
[17:39:25.429]         }, add = TRUE)
[17:39:25.429]     }
[17:39:25.429]     ...future.frame <- base::sys.nframe()
[17:39:25.429]     ...future.conditions <- base::list()
[17:39:25.429]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.429]     if (FALSE) {
[17:39:25.429]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.429]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.429]     }
[17:39:25.429]     ...future.result <- base::tryCatch({
[17:39:25.429]         base::withCallingHandlers({
[17:39:25.429]             ...future.value <- base::withVisible(base::local({
[17:39:25.429]                 withCallingHandlers({
[17:39:25.429]                   {
[17:39:25.429]                     x <- 3
[17:39:25.429]                     stop("Woops!")
[17:39:25.429]                     x
[17:39:25.429]                   }
[17:39:25.429]                 }, immediateCondition = function(cond) {
[17:39:25.429]                   save_rds <- function (object, pathname, ...) 
[17:39:25.429]                   {
[17:39:25.429]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:25.429]                     if (file_test("-f", pathname_tmp)) {
[17:39:25.429]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.429]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:25.429]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.429]                         fi_tmp[["mtime"]])
[17:39:25.429]                     }
[17:39:25.429]                     tryCatch({
[17:39:25.429]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:25.429]                     }, error = function(ex) {
[17:39:25.429]                       msg <- conditionMessage(ex)
[17:39:25.429]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.429]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:25.429]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.429]                         fi_tmp[["mtime"]], msg)
[17:39:25.429]                       ex$message <- msg
[17:39:25.429]                       stop(ex)
[17:39:25.429]                     })
[17:39:25.429]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:25.429]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:25.429]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:25.429]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.429]                       fi <- file.info(pathname)
[17:39:25.429]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:25.429]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.429]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:25.429]                         fi[["size"]], fi[["mtime"]])
[17:39:25.429]                       stop(msg)
[17:39:25.429]                     }
[17:39:25.429]                     invisible(pathname)
[17:39:25.429]                   }
[17:39:25.429]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:25.429]                     rootPath = tempdir()) 
[17:39:25.429]                   {
[17:39:25.429]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:25.429]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:25.429]                       tmpdir = path, fileext = ".rds")
[17:39:25.429]                     save_rds(obj, file)
[17:39:25.429]                   }
[17:39:25.429]                   saveImmediateCondition(cond, path = "/tmp/Rtmpq3kloZ/.future/immediateConditions")
[17:39:25.429]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.429]                   {
[17:39:25.429]                     inherits <- base::inherits
[17:39:25.429]                     invokeRestart <- base::invokeRestart
[17:39:25.429]                     is.null <- base::is.null
[17:39:25.429]                     muffled <- FALSE
[17:39:25.429]                     if (inherits(cond, "message")) {
[17:39:25.429]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:25.429]                       if (muffled) 
[17:39:25.429]                         invokeRestart("muffleMessage")
[17:39:25.429]                     }
[17:39:25.429]                     else if (inherits(cond, "warning")) {
[17:39:25.429]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:25.429]                       if (muffled) 
[17:39:25.429]                         invokeRestart("muffleWarning")
[17:39:25.429]                     }
[17:39:25.429]                     else if (inherits(cond, "condition")) {
[17:39:25.429]                       if (!is.null(pattern)) {
[17:39:25.429]                         computeRestarts <- base::computeRestarts
[17:39:25.429]                         grepl <- base::grepl
[17:39:25.429]                         restarts <- computeRestarts(cond)
[17:39:25.429]                         for (restart in restarts) {
[17:39:25.429]                           name <- restart$name
[17:39:25.429]                           if (is.null(name)) 
[17:39:25.429]                             next
[17:39:25.429]                           if (!grepl(pattern, name)) 
[17:39:25.429]                             next
[17:39:25.429]                           invokeRestart(restart)
[17:39:25.429]                           muffled <- TRUE
[17:39:25.429]                           break
[17:39:25.429]                         }
[17:39:25.429]                       }
[17:39:25.429]                     }
[17:39:25.429]                     invisible(muffled)
[17:39:25.429]                   }
[17:39:25.429]                   muffleCondition(cond)
[17:39:25.429]                 })
[17:39:25.429]             }))
[17:39:25.429]             future::FutureResult(value = ...future.value$value, 
[17:39:25.429]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.429]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.429]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.429]                     ...future.globalenv.names))
[17:39:25.429]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.429]         }, condition = base::local({
[17:39:25.429]             c <- base::c
[17:39:25.429]             inherits <- base::inherits
[17:39:25.429]             invokeRestart <- base::invokeRestart
[17:39:25.429]             length <- base::length
[17:39:25.429]             list <- base::list
[17:39:25.429]             seq.int <- base::seq.int
[17:39:25.429]             signalCondition <- base::signalCondition
[17:39:25.429]             sys.calls <- base::sys.calls
[17:39:25.429]             `[[` <- base::`[[`
[17:39:25.429]             `+` <- base::`+`
[17:39:25.429]             `<<-` <- base::`<<-`
[17:39:25.429]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.429]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.429]                   3L)]
[17:39:25.429]             }
[17:39:25.429]             function(cond) {
[17:39:25.429]                 is_error <- inherits(cond, "error")
[17:39:25.429]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.429]                   NULL)
[17:39:25.429]                 if (is_error) {
[17:39:25.429]                   sessionInformation <- function() {
[17:39:25.429]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.429]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.429]                       search = base::search(), system = base::Sys.info())
[17:39:25.429]                   }
[17:39:25.429]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.429]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.429]                     cond$call), session = sessionInformation(), 
[17:39:25.429]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.429]                   signalCondition(cond)
[17:39:25.429]                 }
[17:39:25.429]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.429]                 "immediateCondition"))) {
[17:39:25.429]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.429]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.429]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.429]                   if (TRUE && !signal) {
[17:39:25.429]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.429]                     {
[17:39:25.429]                       inherits <- base::inherits
[17:39:25.429]                       invokeRestart <- base::invokeRestart
[17:39:25.429]                       is.null <- base::is.null
[17:39:25.429]                       muffled <- FALSE
[17:39:25.429]                       if (inherits(cond, "message")) {
[17:39:25.429]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.429]                         if (muffled) 
[17:39:25.429]                           invokeRestart("muffleMessage")
[17:39:25.429]                       }
[17:39:25.429]                       else if (inherits(cond, "warning")) {
[17:39:25.429]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.429]                         if (muffled) 
[17:39:25.429]                           invokeRestart("muffleWarning")
[17:39:25.429]                       }
[17:39:25.429]                       else if (inherits(cond, "condition")) {
[17:39:25.429]                         if (!is.null(pattern)) {
[17:39:25.429]                           computeRestarts <- base::computeRestarts
[17:39:25.429]                           grepl <- base::grepl
[17:39:25.429]                           restarts <- computeRestarts(cond)
[17:39:25.429]                           for (restart in restarts) {
[17:39:25.429]                             name <- restart$name
[17:39:25.429]                             if (is.null(name)) 
[17:39:25.429]                               next
[17:39:25.429]                             if (!grepl(pattern, name)) 
[17:39:25.429]                               next
[17:39:25.429]                             invokeRestart(restart)
[17:39:25.429]                             muffled <- TRUE
[17:39:25.429]                             break
[17:39:25.429]                           }
[17:39:25.429]                         }
[17:39:25.429]                       }
[17:39:25.429]                       invisible(muffled)
[17:39:25.429]                     }
[17:39:25.429]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.429]                   }
[17:39:25.429]                 }
[17:39:25.429]                 else {
[17:39:25.429]                   if (TRUE) {
[17:39:25.429]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.429]                     {
[17:39:25.429]                       inherits <- base::inherits
[17:39:25.429]                       invokeRestart <- base::invokeRestart
[17:39:25.429]                       is.null <- base::is.null
[17:39:25.429]                       muffled <- FALSE
[17:39:25.429]                       if (inherits(cond, "message")) {
[17:39:25.429]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.429]                         if (muffled) 
[17:39:25.429]                           invokeRestart("muffleMessage")
[17:39:25.429]                       }
[17:39:25.429]                       else if (inherits(cond, "warning")) {
[17:39:25.429]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.429]                         if (muffled) 
[17:39:25.429]                           invokeRestart("muffleWarning")
[17:39:25.429]                       }
[17:39:25.429]                       else if (inherits(cond, "condition")) {
[17:39:25.429]                         if (!is.null(pattern)) {
[17:39:25.429]                           computeRestarts <- base::computeRestarts
[17:39:25.429]                           grepl <- base::grepl
[17:39:25.429]                           restarts <- computeRestarts(cond)
[17:39:25.429]                           for (restart in restarts) {
[17:39:25.429]                             name <- restart$name
[17:39:25.429]                             if (is.null(name)) 
[17:39:25.429]                               next
[17:39:25.429]                             if (!grepl(pattern, name)) 
[17:39:25.429]                               next
[17:39:25.429]                             invokeRestart(restart)
[17:39:25.429]                             muffled <- TRUE
[17:39:25.429]                             break
[17:39:25.429]                           }
[17:39:25.429]                         }
[17:39:25.429]                       }
[17:39:25.429]                       invisible(muffled)
[17:39:25.429]                     }
[17:39:25.429]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.429]                   }
[17:39:25.429]                 }
[17:39:25.429]             }
[17:39:25.429]         }))
[17:39:25.429]     }, error = function(ex) {
[17:39:25.429]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.429]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.429]                 ...future.rng), started = ...future.startTime, 
[17:39:25.429]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.429]             version = "1.8"), class = "FutureResult")
[17:39:25.429]     }, finally = {
[17:39:25.429]         if (!identical(...future.workdir, getwd())) 
[17:39:25.429]             setwd(...future.workdir)
[17:39:25.429]         {
[17:39:25.429]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.429]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.429]             }
[17:39:25.429]             base::options(...future.oldOptions)
[17:39:25.429]             if (.Platform$OS.type == "windows") {
[17:39:25.429]                 old_names <- names(...future.oldEnvVars)
[17:39:25.429]                 envs <- base::Sys.getenv()
[17:39:25.429]                 names <- names(envs)
[17:39:25.429]                 common <- intersect(names, old_names)
[17:39:25.429]                 added <- setdiff(names, old_names)
[17:39:25.429]                 removed <- setdiff(old_names, names)
[17:39:25.429]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.429]                   envs[common]]
[17:39:25.429]                 NAMES <- toupper(changed)
[17:39:25.429]                 args <- list()
[17:39:25.429]                 for (kk in seq_along(NAMES)) {
[17:39:25.429]                   name <- changed[[kk]]
[17:39:25.429]                   NAME <- NAMES[[kk]]
[17:39:25.429]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.429]                     next
[17:39:25.429]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.429]                 }
[17:39:25.429]                 NAMES <- toupper(added)
[17:39:25.429]                 for (kk in seq_along(NAMES)) {
[17:39:25.429]                   name <- added[[kk]]
[17:39:25.429]                   NAME <- NAMES[[kk]]
[17:39:25.429]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.429]                     next
[17:39:25.429]                   args[[name]] <- ""
[17:39:25.429]                 }
[17:39:25.429]                 NAMES <- toupper(removed)
[17:39:25.429]                 for (kk in seq_along(NAMES)) {
[17:39:25.429]                   name <- removed[[kk]]
[17:39:25.429]                   NAME <- NAMES[[kk]]
[17:39:25.429]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.429]                     next
[17:39:25.429]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.429]                 }
[17:39:25.429]                 if (length(args) > 0) 
[17:39:25.429]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.429]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.429]             }
[17:39:25.429]             else {
[17:39:25.429]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.429]             }
[17:39:25.429]             {
[17:39:25.429]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.429]                   0L) {
[17:39:25.429]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.429]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.429]                   base::options(opts)
[17:39:25.429]                 }
[17:39:25.429]                 {
[17:39:25.429]                   {
[17:39:25.429]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:25.429]                     NULL
[17:39:25.429]                   }
[17:39:25.429]                   options(future.plan = NULL)
[17:39:25.429]                   if (is.na(NA_character_)) 
[17:39:25.429]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.429]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.429]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.429]                     .init = FALSE)
[17:39:25.429]                 }
[17:39:25.429]             }
[17:39:25.429]         }
[17:39:25.429]     })
[17:39:25.429]     if (TRUE) {
[17:39:25.429]         base::sink(type = "output", split = FALSE)
[17:39:25.429]         if (TRUE) {
[17:39:25.429]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.429]         }
[17:39:25.429]         else {
[17:39:25.429]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.429]         }
[17:39:25.429]         base::close(...future.stdout)
[17:39:25.429]         ...future.stdout <- NULL
[17:39:25.429]     }
[17:39:25.429]     ...future.result$conditions <- ...future.conditions
[17:39:25.429]     ...future.result$finished <- base::Sys.time()
[17:39:25.429]     ...future.result
[17:39:25.429] }
[17:39:25.431] requestCore(): workers = 2
[17:39:25.433] MulticoreFuture started
[17:39:25.434] - Launch lazy future ... done
[17:39:25.434] run() for ‘MulticoreFuture’ ... done
[17:39:25.434] plan(): Setting new future strategy stack:
[17:39:25.434] result() for MulticoreFuture ...
[17:39:25.434] List of future strategies:
[17:39:25.434] 1. sequential:
[17:39:25.434]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.434]    - tweaked: FALSE
[17:39:25.434]    - call: NULL
[17:39:25.435] plan(): nbrOfWorkers() = 1
[17:39:25.437] plan(): Setting new future strategy stack:
[17:39:25.438] List of future strategies:
[17:39:25.438] 1. multicore:
[17:39:25.438]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:25.438]    - tweaked: FALSE
[17:39:25.438]    - call: plan(strategy)
[17:39:25.443] plan(): nbrOfWorkers() = 2
[17:39:25.447] result() for MulticoreFuture ...
[17:39:25.447] result() for MulticoreFuture ... done
[17:39:25.447] signalConditions() ...
[17:39:25.448]  - include = ‘immediateCondition’
[17:39:25.448]  - exclude = 
[17:39:25.448]  - resignal = FALSE
[17:39:25.448]  - Number of conditions: 1
[17:39:25.448] signalConditions() ... done
[17:39:25.448] result() for MulticoreFuture ... done
[17:39:25.449] result() for MulticoreFuture ...
[17:39:25.449] result() for MulticoreFuture ... done
[17:39:25.449] signalConditions() ...
[17:39:25.449]  - include = ‘immediateCondition’
[17:39:25.449]  - exclude = 
[17:39:25.449]  - resignal = FALSE
[17:39:25.450]  - Number of conditions: 1
[17:39:25.450] signalConditions() ... done
[17:39:25.450] Future state: ‘finished’
[17:39:25.450] result() for MulticoreFuture ...
[17:39:25.450] result() for MulticoreFuture ... done
[17:39:25.450] signalConditions() ...
[17:39:25.450]  - include = ‘condition’
[17:39:25.450]  - exclude = ‘immediateCondition’
[17:39:25.451]  - resignal = TRUE
[17:39:25.451]  - Number of conditions: 1
[17:39:25.451]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:25.451] signalConditions() ... done
[17:39:25.452] getGlobalsAndPackages() ...
[17:39:25.452] Searching for globals...
[17:39:25.454] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:39:25.457] Searching for globals ... DONE
[17:39:25.457] Resolving globals: FALSE
[17:39:25.458] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:25.458] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:39:25.458] - globals: [1] ‘ii’
[17:39:25.458] 
[17:39:25.459] getGlobalsAndPackages() ... DONE
[17:39:25.459] run() for ‘Future’ ...
[17:39:25.459] - state: ‘created’
[17:39:25.459] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:25.463] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:25.464] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:25.464]   - Field: ‘label’
[17:39:25.464]   - Field: ‘local’
[17:39:25.464]   - Field: ‘owner’
[17:39:25.464]   - Field: ‘envir’
[17:39:25.464]   - Field: ‘workers’
[17:39:25.464]   - Field: ‘packages’
[17:39:25.465]   - Field: ‘gc’
[17:39:25.465]   - Field: ‘job’
[17:39:25.465]   - Field: ‘conditions’
[17:39:25.465]   - Field: ‘expr’
[17:39:25.465]   - Field: ‘uuid’
[17:39:25.465]   - Field: ‘seed’
[17:39:25.465]   - Field: ‘version’
[17:39:25.465]   - Field: ‘result’
[17:39:25.465]   - Field: ‘asynchronous’
[17:39:25.466]   - Field: ‘calls’
[17:39:25.466]   - Field: ‘globals’
[17:39:25.466]   - Field: ‘stdout’
[17:39:25.466]   - Field: ‘earlySignal’
[17:39:25.466]   - Field: ‘lazy’
[17:39:25.466]   - Field: ‘state’
[17:39:25.466] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:25.466] - Launch lazy future ...
[17:39:25.467] Packages needed by the future expression (n = 0): <none>
[17:39:25.467] Packages needed by future strategies (n = 0): <none>
[17:39:25.467] {
[17:39:25.467]     {
[17:39:25.467]         {
[17:39:25.467]             ...future.startTime <- base::Sys.time()
[17:39:25.467]             {
[17:39:25.467]                 {
[17:39:25.467]                   {
[17:39:25.467]                     {
[17:39:25.467]                       base::local({
[17:39:25.467]                         has_future <- base::requireNamespace("future", 
[17:39:25.467]                           quietly = TRUE)
[17:39:25.467]                         if (has_future) {
[17:39:25.467]                           ns <- base::getNamespace("future")
[17:39:25.467]                           version <- ns[[".package"]][["version"]]
[17:39:25.467]                           if (is.null(version)) 
[17:39:25.467]                             version <- utils::packageVersion("future")
[17:39:25.467]                         }
[17:39:25.467]                         else {
[17:39:25.467]                           version <- NULL
[17:39:25.467]                         }
[17:39:25.467]                         if (!has_future || version < "1.8.0") {
[17:39:25.467]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.467]                             "", base::R.version$version.string), 
[17:39:25.467]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:25.467]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.467]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.467]                               "release", "version")], collapse = " "), 
[17:39:25.467]                             hostname = base::Sys.info()[["nodename"]])
[17:39:25.467]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.467]                             info)
[17:39:25.467]                           info <- base::paste(info, collapse = "; ")
[17:39:25.467]                           if (!has_future) {
[17:39:25.467]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.467]                               info)
[17:39:25.467]                           }
[17:39:25.467]                           else {
[17:39:25.467]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.467]                               info, version)
[17:39:25.467]                           }
[17:39:25.467]                           base::stop(msg)
[17:39:25.467]                         }
[17:39:25.467]                       })
[17:39:25.467]                     }
[17:39:25.467]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:25.467]                     base::options(mc.cores = 1L)
[17:39:25.467]                   }
[17:39:25.467]                   ...future.strategy.old <- future::plan("list")
[17:39:25.467]                   options(future.plan = NULL)
[17:39:25.467]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.467]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.467]                 }
[17:39:25.467]                 ...future.workdir <- getwd()
[17:39:25.467]             }
[17:39:25.467]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.467]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.467]         }
[17:39:25.467]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.467]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.467]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.467]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.467]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.467]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.467]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.467]             base::names(...future.oldOptions))
[17:39:25.467]     }
[17:39:25.467]     if (FALSE) {
[17:39:25.467]     }
[17:39:25.467]     else {
[17:39:25.467]         if (TRUE) {
[17:39:25.467]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.467]                 open = "w")
[17:39:25.467]         }
[17:39:25.467]         else {
[17:39:25.467]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.467]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.467]         }
[17:39:25.467]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.467]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.467]             base::sink(type = "output", split = FALSE)
[17:39:25.467]             base::close(...future.stdout)
[17:39:25.467]         }, add = TRUE)
[17:39:25.467]     }
[17:39:25.467]     ...future.frame <- base::sys.nframe()
[17:39:25.467]     ...future.conditions <- base::list()
[17:39:25.467]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.467]     if (FALSE) {
[17:39:25.467]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.467]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.467]     }
[17:39:25.467]     ...future.result <- base::tryCatch({
[17:39:25.467]         base::withCallingHandlers({
[17:39:25.467]             ...future.value <- base::withVisible(base::local({
[17:39:25.467]                 withCallingHandlers({
[17:39:25.467]                   {
[17:39:25.467]                     if (ii%%2 == 0) 
[17:39:25.467]                       stop("Woops!")
[17:39:25.467]                     ii
[17:39:25.467]                   }
[17:39:25.467]                 }, immediateCondition = function(cond) {
[17:39:25.467]                   save_rds <- function (object, pathname, ...) 
[17:39:25.467]                   {
[17:39:25.467]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:25.467]                     if (file_test("-f", pathname_tmp)) {
[17:39:25.467]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.467]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:25.467]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.467]                         fi_tmp[["mtime"]])
[17:39:25.467]                     }
[17:39:25.467]                     tryCatch({
[17:39:25.467]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:25.467]                     }, error = function(ex) {
[17:39:25.467]                       msg <- conditionMessage(ex)
[17:39:25.467]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.467]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:25.467]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.467]                         fi_tmp[["mtime"]], msg)
[17:39:25.467]                       ex$message <- msg
[17:39:25.467]                       stop(ex)
[17:39:25.467]                     })
[17:39:25.467]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:25.467]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:25.467]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:25.467]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.467]                       fi <- file.info(pathname)
[17:39:25.467]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:25.467]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.467]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:25.467]                         fi[["size"]], fi[["mtime"]])
[17:39:25.467]                       stop(msg)
[17:39:25.467]                     }
[17:39:25.467]                     invisible(pathname)
[17:39:25.467]                   }
[17:39:25.467]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:25.467]                     rootPath = tempdir()) 
[17:39:25.467]                   {
[17:39:25.467]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:25.467]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:25.467]                       tmpdir = path, fileext = ".rds")
[17:39:25.467]                     save_rds(obj, file)
[17:39:25.467]                   }
[17:39:25.467]                   saveImmediateCondition(cond, path = "/tmp/Rtmpq3kloZ/.future/immediateConditions")
[17:39:25.467]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.467]                   {
[17:39:25.467]                     inherits <- base::inherits
[17:39:25.467]                     invokeRestart <- base::invokeRestart
[17:39:25.467]                     is.null <- base::is.null
[17:39:25.467]                     muffled <- FALSE
[17:39:25.467]                     if (inherits(cond, "message")) {
[17:39:25.467]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:25.467]                       if (muffled) 
[17:39:25.467]                         invokeRestart("muffleMessage")
[17:39:25.467]                     }
[17:39:25.467]                     else if (inherits(cond, "warning")) {
[17:39:25.467]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:25.467]                       if (muffled) 
[17:39:25.467]                         invokeRestart("muffleWarning")
[17:39:25.467]                     }
[17:39:25.467]                     else if (inherits(cond, "condition")) {
[17:39:25.467]                       if (!is.null(pattern)) {
[17:39:25.467]                         computeRestarts <- base::computeRestarts
[17:39:25.467]                         grepl <- base::grepl
[17:39:25.467]                         restarts <- computeRestarts(cond)
[17:39:25.467]                         for (restart in restarts) {
[17:39:25.467]                           name <- restart$name
[17:39:25.467]                           if (is.null(name)) 
[17:39:25.467]                             next
[17:39:25.467]                           if (!grepl(pattern, name)) 
[17:39:25.467]                             next
[17:39:25.467]                           invokeRestart(restart)
[17:39:25.467]                           muffled <- TRUE
[17:39:25.467]                           break
[17:39:25.467]                         }
[17:39:25.467]                       }
[17:39:25.467]                     }
[17:39:25.467]                     invisible(muffled)
[17:39:25.467]                   }
[17:39:25.467]                   muffleCondition(cond)
[17:39:25.467]                 })
[17:39:25.467]             }))
[17:39:25.467]             future::FutureResult(value = ...future.value$value, 
[17:39:25.467]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.467]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.467]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.467]                     ...future.globalenv.names))
[17:39:25.467]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.467]         }, condition = base::local({
[17:39:25.467]             c <- base::c
[17:39:25.467]             inherits <- base::inherits
[17:39:25.467]             invokeRestart <- base::invokeRestart
[17:39:25.467]             length <- base::length
[17:39:25.467]             list <- base::list
[17:39:25.467]             seq.int <- base::seq.int
[17:39:25.467]             signalCondition <- base::signalCondition
[17:39:25.467]             sys.calls <- base::sys.calls
[17:39:25.467]             `[[` <- base::`[[`
[17:39:25.467]             `+` <- base::`+`
[17:39:25.467]             `<<-` <- base::`<<-`
[17:39:25.467]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.467]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.467]                   3L)]
[17:39:25.467]             }
[17:39:25.467]             function(cond) {
[17:39:25.467]                 is_error <- inherits(cond, "error")
[17:39:25.467]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.467]                   NULL)
[17:39:25.467]                 if (is_error) {
[17:39:25.467]                   sessionInformation <- function() {
[17:39:25.467]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.467]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.467]                       search = base::search(), system = base::Sys.info())
[17:39:25.467]                   }
[17:39:25.467]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.467]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.467]                     cond$call), session = sessionInformation(), 
[17:39:25.467]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.467]                   signalCondition(cond)
[17:39:25.467]                 }
[17:39:25.467]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.467]                 "immediateCondition"))) {
[17:39:25.467]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.467]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.467]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.467]                   if (TRUE && !signal) {
[17:39:25.467]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.467]                     {
[17:39:25.467]                       inherits <- base::inherits
[17:39:25.467]                       invokeRestart <- base::invokeRestart
[17:39:25.467]                       is.null <- base::is.null
[17:39:25.467]                       muffled <- FALSE
[17:39:25.467]                       if (inherits(cond, "message")) {
[17:39:25.467]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.467]                         if (muffled) 
[17:39:25.467]                           invokeRestart("muffleMessage")
[17:39:25.467]                       }
[17:39:25.467]                       else if (inherits(cond, "warning")) {
[17:39:25.467]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.467]                         if (muffled) 
[17:39:25.467]                           invokeRestart("muffleWarning")
[17:39:25.467]                       }
[17:39:25.467]                       else if (inherits(cond, "condition")) {
[17:39:25.467]                         if (!is.null(pattern)) {
[17:39:25.467]                           computeRestarts <- base::computeRestarts
[17:39:25.467]                           grepl <- base::grepl
[17:39:25.467]                           restarts <- computeRestarts(cond)
[17:39:25.467]                           for (restart in restarts) {
[17:39:25.467]                             name <- restart$name
[17:39:25.467]                             if (is.null(name)) 
[17:39:25.467]                               next
[17:39:25.467]                             if (!grepl(pattern, name)) 
[17:39:25.467]                               next
[17:39:25.467]                             invokeRestart(restart)
[17:39:25.467]                             muffled <- TRUE
[17:39:25.467]                             break
[17:39:25.467]                           }
[17:39:25.467]                         }
[17:39:25.467]                       }
[17:39:25.467]                       invisible(muffled)
[17:39:25.467]                     }
[17:39:25.467]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.467]                   }
[17:39:25.467]                 }
[17:39:25.467]                 else {
[17:39:25.467]                   if (TRUE) {
[17:39:25.467]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.467]                     {
[17:39:25.467]                       inherits <- base::inherits
[17:39:25.467]                       invokeRestart <- base::invokeRestart
[17:39:25.467]                       is.null <- base::is.null
[17:39:25.467]                       muffled <- FALSE
[17:39:25.467]                       if (inherits(cond, "message")) {
[17:39:25.467]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.467]                         if (muffled) 
[17:39:25.467]                           invokeRestart("muffleMessage")
[17:39:25.467]                       }
[17:39:25.467]                       else if (inherits(cond, "warning")) {
[17:39:25.467]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.467]                         if (muffled) 
[17:39:25.467]                           invokeRestart("muffleWarning")
[17:39:25.467]                       }
[17:39:25.467]                       else if (inherits(cond, "condition")) {
[17:39:25.467]                         if (!is.null(pattern)) {
[17:39:25.467]                           computeRestarts <- base::computeRestarts
[17:39:25.467]                           grepl <- base::grepl
[17:39:25.467]                           restarts <- computeRestarts(cond)
[17:39:25.467]                           for (restart in restarts) {
[17:39:25.467]                             name <- restart$name
[17:39:25.467]                             if (is.null(name)) 
[17:39:25.467]                               next
[17:39:25.467]                             if (!grepl(pattern, name)) 
[17:39:25.467]                               next
[17:39:25.467]                             invokeRestart(restart)
[17:39:25.467]                             muffled <- TRUE
[17:39:25.467]                             break
[17:39:25.467]                           }
[17:39:25.467]                         }
[17:39:25.467]                       }
[17:39:25.467]                       invisible(muffled)
[17:39:25.467]                     }
[17:39:25.467]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.467]                   }
[17:39:25.467]                 }
[17:39:25.467]             }
[17:39:25.467]         }))
[17:39:25.467]     }, error = function(ex) {
[17:39:25.467]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.467]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.467]                 ...future.rng), started = ...future.startTime, 
[17:39:25.467]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.467]             version = "1.8"), class = "FutureResult")
[17:39:25.467]     }, finally = {
[17:39:25.467]         if (!identical(...future.workdir, getwd())) 
[17:39:25.467]             setwd(...future.workdir)
[17:39:25.467]         {
[17:39:25.467]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.467]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.467]             }
[17:39:25.467]             base::options(...future.oldOptions)
[17:39:25.467]             if (.Platform$OS.type == "windows") {
[17:39:25.467]                 old_names <- names(...future.oldEnvVars)
[17:39:25.467]                 envs <- base::Sys.getenv()
[17:39:25.467]                 names <- names(envs)
[17:39:25.467]                 common <- intersect(names, old_names)
[17:39:25.467]                 added <- setdiff(names, old_names)
[17:39:25.467]                 removed <- setdiff(old_names, names)
[17:39:25.467]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.467]                   envs[common]]
[17:39:25.467]                 NAMES <- toupper(changed)
[17:39:25.467]                 args <- list()
[17:39:25.467]                 for (kk in seq_along(NAMES)) {
[17:39:25.467]                   name <- changed[[kk]]
[17:39:25.467]                   NAME <- NAMES[[kk]]
[17:39:25.467]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.467]                     next
[17:39:25.467]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.467]                 }
[17:39:25.467]                 NAMES <- toupper(added)
[17:39:25.467]                 for (kk in seq_along(NAMES)) {
[17:39:25.467]                   name <- added[[kk]]
[17:39:25.467]                   NAME <- NAMES[[kk]]
[17:39:25.467]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.467]                     next
[17:39:25.467]                   args[[name]] <- ""
[17:39:25.467]                 }
[17:39:25.467]                 NAMES <- toupper(removed)
[17:39:25.467]                 for (kk in seq_along(NAMES)) {
[17:39:25.467]                   name <- removed[[kk]]
[17:39:25.467]                   NAME <- NAMES[[kk]]
[17:39:25.467]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.467]                     next
[17:39:25.467]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.467]                 }
[17:39:25.467]                 if (length(args) > 0) 
[17:39:25.467]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.467]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.467]             }
[17:39:25.467]             else {
[17:39:25.467]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.467]             }
[17:39:25.467]             {
[17:39:25.467]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.467]                   0L) {
[17:39:25.467]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.467]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.467]                   base::options(opts)
[17:39:25.467]                 }
[17:39:25.467]                 {
[17:39:25.467]                   {
[17:39:25.467]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:25.467]                     NULL
[17:39:25.467]                   }
[17:39:25.467]                   options(future.plan = NULL)
[17:39:25.467]                   if (is.na(NA_character_)) 
[17:39:25.467]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.467]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.467]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.467]                     .init = FALSE)
[17:39:25.467]                 }
[17:39:25.467]             }
[17:39:25.467]         }
[17:39:25.467]     })
[17:39:25.467]     if (TRUE) {
[17:39:25.467]         base::sink(type = "output", split = FALSE)
[17:39:25.467]         if (TRUE) {
[17:39:25.467]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.467]         }
[17:39:25.467]         else {
[17:39:25.467]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.467]         }
[17:39:25.467]         base::close(...future.stdout)
[17:39:25.467]         ...future.stdout <- NULL
[17:39:25.467]     }
[17:39:25.467]     ...future.result$conditions <- ...future.conditions
[17:39:25.467]     ...future.result$finished <- base::Sys.time()
[17:39:25.467]     ...future.result
[17:39:25.467] }
[17:39:25.470] assign_globals() ...
[17:39:25.470] List of 1
[17:39:25.470]  $ ii: int 1
[17:39:25.470]  - attr(*, "where")=List of 1
[17:39:25.470]   ..$ ii:<environment: R_EmptyEnv> 
[17:39:25.470]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:25.470]  - attr(*, "resolved")= logi FALSE
[17:39:25.470]  - attr(*, "total_size")= num 56
[17:39:25.470]  - attr(*, "already-done")= logi TRUE
[17:39:25.473] - copied ‘ii’ to environment
[17:39:25.473] assign_globals() ... done
[17:39:25.473] requestCore(): workers = 2
[17:39:25.475] MulticoreFuture started
[17:39:25.475] - Launch lazy future ... done
[17:39:25.476] run() for ‘MulticoreFuture’ ... done
[17:39:25.476] plan(): Setting new future strategy stack:
[17:39:25.477] getGlobalsAndPackages() ...
[17:39:25.477] Searching for globals...
[17:39:25.477] List of future strategies:
[17:39:25.477] 1. sequential:
[17:39:25.477]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.477]    - tweaked: FALSE
[17:39:25.477]    - call: NULL
[17:39:25.478] plan(): nbrOfWorkers() = 1
[17:39:25.479] plan(): Setting new future strategy stack:
[17:39:25.480] List of future strategies:
[17:39:25.480] 1. multicore:
[17:39:25.480]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:25.480]    - tweaked: FALSE
[17:39:25.480]    - call: plan(strategy)
[17:39:25.480] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:39:25.480] Searching for globals ... DONE
[17:39:25.480] Resolving globals: FALSE
[17:39:25.481] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:25.482] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:39:25.482] - globals: [1] ‘ii’
[17:39:25.482] 
[17:39:25.482] getGlobalsAndPackages() ... DONE
[17:39:25.483] run() for ‘Future’ ...
[17:39:25.483] - state: ‘created’
[17:39:25.483] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:25.484] plan(): nbrOfWorkers() = 2
[17:39:25.488] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:25.488] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:25.488]   - Field: ‘label’
[17:39:25.488]   - Field: ‘local’
[17:39:25.488]   - Field: ‘owner’
[17:39:25.488]   - Field: ‘envir’
[17:39:25.489]   - Field: ‘workers’
[17:39:25.489]   - Field: ‘packages’
[17:39:25.489]   - Field: ‘gc’
[17:39:25.489]   - Field: ‘job’
[17:39:25.489]   - Field: ‘conditions’
[17:39:25.489]   - Field: ‘expr’
[17:39:25.489]   - Field: ‘uuid’
[17:39:25.490]   - Field: ‘seed’
[17:39:25.490]   - Field: ‘version’
[17:39:25.490]   - Field: ‘result’
[17:39:25.490]   - Field: ‘asynchronous’
[17:39:25.490]   - Field: ‘calls’
[17:39:25.490]   - Field: ‘globals’
[17:39:25.491]   - Field: ‘stdout’
[17:39:25.491]   - Field: ‘earlySignal’
[17:39:25.491]   - Field: ‘lazy’
[17:39:25.491]   - Field: ‘state’
[17:39:25.491] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:25.491] - Launch lazy future ...
[17:39:25.492] Packages needed by the future expression (n = 0): <none>
[17:39:25.492] Packages needed by future strategies (n = 0): <none>
[17:39:25.493] {
[17:39:25.493]     {
[17:39:25.493]         {
[17:39:25.493]             ...future.startTime <- base::Sys.time()
[17:39:25.493]             {
[17:39:25.493]                 {
[17:39:25.493]                   {
[17:39:25.493]                     {
[17:39:25.493]                       base::local({
[17:39:25.493]                         has_future <- base::requireNamespace("future", 
[17:39:25.493]                           quietly = TRUE)
[17:39:25.493]                         if (has_future) {
[17:39:25.493]                           ns <- base::getNamespace("future")
[17:39:25.493]                           version <- ns[[".package"]][["version"]]
[17:39:25.493]                           if (is.null(version)) 
[17:39:25.493]                             version <- utils::packageVersion("future")
[17:39:25.493]                         }
[17:39:25.493]                         else {
[17:39:25.493]                           version <- NULL
[17:39:25.493]                         }
[17:39:25.493]                         if (!has_future || version < "1.8.0") {
[17:39:25.493]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.493]                             "", base::R.version$version.string), 
[17:39:25.493]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:25.493]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.493]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.493]                               "release", "version")], collapse = " "), 
[17:39:25.493]                             hostname = base::Sys.info()[["nodename"]])
[17:39:25.493]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.493]                             info)
[17:39:25.493]                           info <- base::paste(info, collapse = "; ")
[17:39:25.493]                           if (!has_future) {
[17:39:25.493]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.493]                               info)
[17:39:25.493]                           }
[17:39:25.493]                           else {
[17:39:25.493]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.493]                               info, version)
[17:39:25.493]                           }
[17:39:25.493]                           base::stop(msg)
[17:39:25.493]                         }
[17:39:25.493]                       })
[17:39:25.493]                     }
[17:39:25.493]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:25.493]                     base::options(mc.cores = 1L)
[17:39:25.493]                   }
[17:39:25.493]                   ...future.strategy.old <- future::plan("list")
[17:39:25.493]                   options(future.plan = NULL)
[17:39:25.493]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.493]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.493]                 }
[17:39:25.493]                 ...future.workdir <- getwd()
[17:39:25.493]             }
[17:39:25.493]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.493]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.493]         }
[17:39:25.493]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.493]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.493]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.493]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.493]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.493]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.493]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.493]             base::names(...future.oldOptions))
[17:39:25.493]     }
[17:39:25.493]     if (FALSE) {
[17:39:25.493]     }
[17:39:25.493]     else {
[17:39:25.493]         if (TRUE) {
[17:39:25.493]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.493]                 open = "w")
[17:39:25.493]         }
[17:39:25.493]         else {
[17:39:25.493]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.493]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.493]         }
[17:39:25.493]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.493]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.493]             base::sink(type = "output", split = FALSE)
[17:39:25.493]             base::close(...future.stdout)
[17:39:25.493]         }, add = TRUE)
[17:39:25.493]     }
[17:39:25.493]     ...future.frame <- base::sys.nframe()
[17:39:25.493]     ...future.conditions <- base::list()
[17:39:25.493]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.493]     if (FALSE) {
[17:39:25.493]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.493]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.493]     }
[17:39:25.493]     ...future.result <- base::tryCatch({
[17:39:25.493]         base::withCallingHandlers({
[17:39:25.493]             ...future.value <- base::withVisible(base::local({
[17:39:25.493]                 withCallingHandlers({
[17:39:25.493]                   {
[17:39:25.493]                     if (ii%%2 == 0) 
[17:39:25.493]                       stop("Woops!")
[17:39:25.493]                     ii
[17:39:25.493]                   }
[17:39:25.493]                 }, immediateCondition = function(cond) {
[17:39:25.493]                   save_rds <- function (object, pathname, ...) 
[17:39:25.493]                   {
[17:39:25.493]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:25.493]                     if (file_test("-f", pathname_tmp)) {
[17:39:25.493]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.493]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:25.493]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.493]                         fi_tmp[["mtime"]])
[17:39:25.493]                     }
[17:39:25.493]                     tryCatch({
[17:39:25.493]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:25.493]                     }, error = function(ex) {
[17:39:25.493]                       msg <- conditionMessage(ex)
[17:39:25.493]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.493]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:25.493]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.493]                         fi_tmp[["mtime"]], msg)
[17:39:25.493]                       ex$message <- msg
[17:39:25.493]                       stop(ex)
[17:39:25.493]                     })
[17:39:25.493]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:25.493]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:25.493]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:25.493]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.493]                       fi <- file.info(pathname)
[17:39:25.493]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:25.493]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.493]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:25.493]                         fi[["size"]], fi[["mtime"]])
[17:39:25.493]                       stop(msg)
[17:39:25.493]                     }
[17:39:25.493]                     invisible(pathname)
[17:39:25.493]                   }
[17:39:25.493]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:25.493]                     rootPath = tempdir()) 
[17:39:25.493]                   {
[17:39:25.493]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:25.493]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:25.493]                       tmpdir = path, fileext = ".rds")
[17:39:25.493]                     save_rds(obj, file)
[17:39:25.493]                   }
[17:39:25.493]                   saveImmediateCondition(cond, path = "/tmp/Rtmpq3kloZ/.future/immediateConditions")
[17:39:25.493]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.493]                   {
[17:39:25.493]                     inherits <- base::inherits
[17:39:25.493]                     invokeRestart <- base::invokeRestart
[17:39:25.493]                     is.null <- base::is.null
[17:39:25.493]                     muffled <- FALSE
[17:39:25.493]                     if (inherits(cond, "message")) {
[17:39:25.493]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:25.493]                       if (muffled) 
[17:39:25.493]                         invokeRestart("muffleMessage")
[17:39:25.493]                     }
[17:39:25.493]                     else if (inherits(cond, "warning")) {
[17:39:25.493]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:25.493]                       if (muffled) 
[17:39:25.493]                         invokeRestart("muffleWarning")
[17:39:25.493]                     }
[17:39:25.493]                     else if (inherits(cond, "condition")) {
[17:39:25.493]                       if (!is.null(pattern)) {
[17:39:25.493]                         computeRestarts <- base::computeRestarts
[17:39:25.493]                         grepl <- base::grepl
[17:39:25.493]                         restarts <- computeRestarts(cond)
[17:39:25.493]                         for (restart in restarts) {
[17:39:25.493]                           name <- restart$name
[17:39:25.493]                           if (is.null(name)) 
[17:39:25.493]                             next
[17:39:25.493]                           if (!grepl(pattern, name)) 
[17:39:25.493]                             next
[17:39:25.493]                           invokeRestart(restart)
[17:39:25.493]                           muffled <- TRUE
[17:39:25.493]                           break
[17:39:25.493]                         }
[17:39:25.493]                       }
[17:39:25.493]                     }
[17:39:25.493]                     invisible(muffled)
[17:39:25.493]                   }
[17:39:25.493]                   muffleCondition(cond)
[17:39:25.493]                 })
[17:39:25.493]             }))
[17:39:25.493]             future::FutureResult(value = ...future.value$value, 
[17:39:25.493]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.493]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.493]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.493]                     ...future.globalenv.names))
[17:39:25.493]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.493]         }, condition = base::local({
[17:39:25.493]             c <- base::c
[17:39:25.493]             inherits <- base::inherits
[17:39:25.493]             invokeRestart <- base::invokeRestart
[17:39:25.493]             length <- base::length
[17:39:25.493]             list <- base::list
[17:39:25.493]             seq.int <- base::seq.int
[17:39:25.493]             signalCondition <- base::signalCondition
[17:39:25.493]             sys.calls <- base::sys.calls
[17:39:25.493]             `[[` <- base::`[[`
[17:39:25.493]             `+` <- base::`+`
[17:39:25.493]             `<<-` <- base::`<<-`
[17:39:25.493]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.493]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.493]                   3L)]
[17:39:25.493]             }
[17:39:25.493]             function(cond) {
[17:39:25.493]                 is_error <- inherits(cond, "error")
[17:39:25.493]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.493]                   NULL)
[17:39:25.493]                 if (is_error) {
[17:39:25.493]                   sessionInformation <- function() {
[17:39:25.493]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.493]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.493]                       search = base::search(), system = base::Sys.info())
[17:39:25.493]                   }
[17:39:25.493]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.493]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.493]                     cond$call), session = sessionInformation(), 
[17:39:25.493]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.493]                   signalCondition(cond)
[17:39:25.493]                 }
[17:39:25.493]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.493]                 "immediateCondition"))) {
[17:39:25.493]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.493]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.493]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.493]                   if (TRUE && !signal) {
[17:39:25.493]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.493]                     {
[17:39:25.493]                       inherits <- base::inherits
[17:39:25.493]                       invokeRestart <- base::invokeRestart
[17:39:25.493]                       is.null <- base::is.null
[17:39:25.493]                       muffled <- FALSE
[17:39:25.493]                       if (inherits(cond, "message")) {
[17:39:25.493]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.493]                         if (muffled) 
[17:39:25.493]                           invokeRestart("muffleMessage")
[17:39:25.493]                       }
[17:39:25.493]                       else if (inherits(cond, "warning")) {
[17:39:25.493]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.493]                         if (muffled) 
[17:39:25.493]                           invokeRestart("muffleWarning")
[17:39:25.493]                       }
[17:39:25.493]                       else if (inherits(cond, "condition")) {
[17:39:25.493]                         if (!is.null(pattern)) {
[17:39:25.493]                           computeRestarts <- base::computeRestarts
[17:39:25.493]                           grepl <- base::grepl
[17:39:25.493]                           restarts <- computeRestarts(cond)
[17:39:25.493]                           for (restart in restarts) {
[17:39:25.493]                             name <- restart$name
[17:39:25.493]                             if (is.null(name)) 
[17:39:25.493]                               next
[17:39:25.493]                             if (!grepl(pattern, name)) 
[17:39:25.493]                               next
[17:39:25.493]                             invokeRestart(restart)
[17:39:25.493]                             muffled <- TRUE
[17:39:25.493]                             break
[17:39:25.493]                           }
[17:39:25.493]                         }
[17:39:25.493]                       }
[17:39:25.493]                       invisible(muffled)
[17:39:25.493]                     }
[17:39:25.493]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.493]                   }
[17:39:25.493]                 }
[17:39:25.493]                 else {
[17:39:25.493]                   if (TRUE) {
[17:39:25.493]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.493]                     {
[17:39:25.493]                       inherits <- base::inherits
[17:39:25.493]                       invokeRestart <- base::invokeRestart
[17:39:25.493]                       is.null <- base::is.null
[17:39:25.493]                       muffled <- FALSE
[17:39:25.493]                       if (inherits(cond, "message")) {
[17:39:25.493]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.493]                         if (muffled) 
[17:39:25.493]                           invokeRestart("muffleMessage")
[17:39:25.493]                       }
[17:39:25.493]                       else if (inherits(cond, "warning")) {
[17:39:25.493]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.493]                         if (muffled) 
[17:39:25.493]                           invokeRestart("muffleWarning")
[17:39:25.493]                       }
[17:39:25.493]                       else if (inherits(cond, "condition")) {
[17:39:25.493]                         if (!is.null(pattern)) {
[17:39:25.493]                           computeRestarts <- base::computeRestarts
[17:39:25.493]                           grepl <- base::grepl
[17:39:25.493]                           restarts <- computeRestarts(cond)
[17:39:25.493]                           for (restart in restarts) {
[17:39:25.493]                             name <- restart$name
[17:39:25.493]                             if (is.null(name)) 
[17:39:25.493]                               next
[17:39:25.493]                             if (!grepl(pattern, name)) 
[17:39:25.493]                               next
[17:39:25.493]                             invokeRestart(restart)
[17:39:25.493]                             muffled <- TRUE
[17:39:25.493]                             break
[17:39:25.493]                           }
[17:39:25.493]                         }
[17:39:25.493]                       }
[17:39:25.493]                       invisible(muffled)
[17:39:25.493]                     }
[17:39:25.493]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.493]                   }
[17:39:25.493]                 }
[17:39:25.493]             }
[17:39:25.493]         }))
[17:39:25.493]     }, error = function(ex) {
[17:39:25.493]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.493]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.493]                 ...future.rng), started = ...future.startTime, 
[17:39:25.493]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.493]             version = "1.8"), class = "FutureResult")
[17:39:25.493]     }, finally = {
[17:39:25.493]         if (!identical(...future.workdir, getwd())) 
[17:39:25.493]             setwd(...future.workdir)
[17:39:25.493]         {
[17:39:25.493]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.493]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.493]             }
[17:39:25.493]             base::options(...future.oldOptions)
[17:39:25.493]             if (.Platform$OS.type == "windows") {
[17:39:25.493]                 old_names <- names(...future.oldEnvVars)
[17:39:25.493]                 envs <- base::Sys.getenv()
[17:39:25.493]                 names <- names(envs)
[17:39:25.493]                 common <- intersect(names, old_names)
[17:39:25.493]                 added <- setdiff(names, old_names)
[17:39:25.493]                 removed <- setdiff(old_names, names)
[17:39:25.493]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.493]                   envs[common]]
[17:39:25.493]                 NAMES <- toupper(changed)
[17:39:25.493]                 args <- list()
[17:39:25.493]                 for (kk in seq_along(NAMES)) {
[17:39:25.493]                   name <- changed[[kk]]
[17:39:25.493]                   NAME <- NAMES[[kk]]
[17:39:25.493]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.493]                     next
[17:39:25.493]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.493]                 }
[17:39:25.493]                 NAMES <- toupper(added)
[17:39:25.493]                 for (kk in seq_along(NAMES)) {
[17:39:25.493]                   name <- added[[kk]]
[17:39:25.493]                   NAME <- NAMES[[kk]]
[17:39:25.493]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.493]                     next
[17:39:25.493]                   args[[name]] <- ""
[17:39:25.493]                 }
[17:39:25.493]                 NAMES <- toupper(removed)
[17:39:25.493]                 for (kk in seq_along(NAMES)) {
[17:39:25.493]                   name <- removed[[kk]]
[17:39:25.493]                   NAME <- NAMES[[kk]]
[17:39:25.493]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.493]                     next
[17:39:25.493]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.493]                 }
[17:39:25.493]                 if (length(args) > 0) 
[17:39:25.493]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.493]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.493]             }
[17:39:25.493]             else {
[17:39:25.493]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.493]             }
[17:39:25.493]             {
[17:39:25.493]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.493]                   0L) {
[17:39:25.493]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.493]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.493]                   base::options(opts)
[17:39:25.493]                 }
[17:39:25.493]                 {
[17:39:25.493]                   {
[17:39:25.493]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:25.493]                     NULL
[17:39:25.493]                   }
[17:39:25.493]                   options(future.plan = NULL)
[17:39:25.493]                   if (is.na(NA_character_)) 
[17:39:25.493]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.493]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.493]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.493]                     .init = FALSE)
[17:39:25.493]                 }
[17:39:25.493]             }
[17:39:25.493]         }
[17:39:25.493]     })
[17:39:25.493]     if (TRUE) {
[17:39:25.493]         base::sink(type = "output", split = FALSE)
[17:39:25.493]         if (TRUE) {
[17:39:25.493]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.493]         }
[17:39:25.493]         else {
[17:39:25.493]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.493]         }
[17:39:25.493]         base::close(...future.stdout)
[17:39:25.493]         ...future.stdout <- NULL
[17:39:25.493]     }
[17:39:25.493]     ...future.result$conditions <- ...future.conditions
[17:39:25.493]     ...future.result$finished <- base::Sys.time()
[17:39:25.493]     ...future.result
[17:39:25.493] }
[17:39:25.496] assign_globals() ...
[17:39:25.496] List of 1
[17:39:25.496]  $ ii: int 2
[17:39:25.496]  - attr(*, "where")=List of 1
[17:39:25.496]   ..$ ii:<environment: R_EmptyEnv> 
[17:39:25.496]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:25.496]  - attr(*, "resolved")= logi FALSE
[17:39:25.496]  - attr(*, "total_size")= num 56
[17:39:25.496]  - attr(*, "already-done")= logi TRUE
[17:39:25.499] - copied ‘ii’ to environment
[17:39:25.500] assign_globals() ... done
[17:39:25.500] requestCore(): workers = 2
[17:39:25.502] MulticoreFuture started
[17:39:25.502] - Launch lazy future ... done
[17:39:25.503] run() for ‘MulticoreFuture’ ... done
[17:39:25.503] plan(): Setting new future strategy stack:
[17:39:25.504] getGlobalsAndPackages() ...
[17:39:25.503] List of future strategies:
[17:39:25.503] 1. sequential:
[17:39:25.503]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.503]    - tweaked: FALSE
[17:39:25.503]    - call: NULL
[17:39:25.508] Searching for globals...
[17:39:25.508] plan(): nbrOfWorkers() = 1
[17:39:25.510] plan(): Setting new future strategy stack:
[17:39:25.510] List of future strategies:
[17:39:25.510] 1. multicore:
[17:39:25.510]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:25.510]    - tweaked: FALSE
[17:39:25.510]    - call: plan(strategy)
[17:39:25.512] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:39:25.512] Searching for globals ... DONE
[17:39:25.512] Resolving globals: FALSE
[17:39:25.513] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:25.514] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:39:25.514] - globals: [1] ‘ii’
[17:39:25.514] 
[17:39:25.514] getGlobalsAndPackages() ... DONE
[17:39:25.515] run() for ‘Future’ ...
[17:39:25.515] - state: ‘created’
[17:39:25.515] plan(): nbrOfWorkers() = 2
[17:39:25.515] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:25.520] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:25.520] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:25.520]   - Field: ‘label’
[17:39:25.520]   - Field: ‘local’
[17:39:25.520]   - Field: ‘owner’
[17:39:25.520]   - Field: ‘envir’
[17:39:25.521]   - Field: ‘workers’
[17:39:25.521]   - Field: ‘packages’
[17:39:25.521]   - Field: ‘gc’
[17:39:25.521]   - Field: ‘job’
[17:39:25.521]   - Field: ‘conditions’
[17:39:25.521]   - Field: ‘expr’
[17:39:25.521]   - Field: ‘uuid’
[17:39:25.522]   - Field: ‘seed’
[17:39:25.522]   - Field: ‘version’
[17:39:25.522]   - Field: ‘result’
[17:39:25.522]   - Field: ‘asynchronous’
[17:39:25.522]   - Field: ‘calls’
[17:39:25.522]   - Field: ‘globals’
[17:39:25.522]   - Field: ‘stdout’
[17:39:25.522]   - Field: ‘earlySignal’
[17:39:25.523]   - Field: ‘lazy’
[17:39:25.523]   - Field: ‘state’
[17:39:25.523] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:25.523] - Launch lazy future ...
[17:39:25.524] Packages needed by the future expression (n = 0): <none>
[17:39:25.524] Packages needed by future strategies (n = 0): <none>
[17:39:25.524] {
[17:39:25.524]     {
[17:39:25.524]         {
[17:39:25.524]             ...future.startTime <- base::Sys.time()
[17:39:25.524]             {
[17:39:25.524]                 {
[17:39:25.524]                   {
[17:39:25.524]                     {
[17:39:25.524]                       base::local({
[17:39:25.524]                         has_future <- base::requireNamespace("future", 
[17:39:25.524]                           quietly = TRUE)
[17:39:25.524]                         if (has_future) {
[17:39:25.524]                           ns <- base::getNamespace("future")
[17:39:25.524]                           version <- ns[[".package"]][["version"]]
[17:39:25.524]                           if (is.null(version)) 
[17:39:25.524]                             version <- utils::packageVersion("future")
[17:39:25.524]                         }
[17:39:25.524]                         else {
[17:39:25.524]                           version <- NULL
[17:39:25.524]                         }
[17:39:25.524]                         if (!has_future || version < "1.8.0") {
[17:39:25.524]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.524]                             "", base::R.version$version.string), 
[17:39:25.524]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:25.524]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.524]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.524]                               "release", "version")], collapse = " "), 
[17:39:25.524]                             hostname = base::Sys.info()[["nodename"]])
[17:39:25.524]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.524]                             info)
[17:39:25.524]                           info <- base::paste(info, collapse = "; ")
[17:39:25.524]                           if (!has_future) {
[17:39:25.524]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.524]                               info)
[17:39:25.524]                           }
[17:39:25.524]                           else {
[17:39:25.524]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.524]                               info, version)
[17:39:25.524]                           }
[17:39:25.524]                           base::stop(msg)
[17:39:25.524]                         }
[17:39:25.524]                       })
[17:39:25.524]                     }
[17:39:25.524]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:25.524]                     base::options(mc.cores = 1L)
[17:39:25.524]                   }
[17:39:25.524]                   ...future.strategy.old <- future::plan("list")
[17:39:25.524]                   options(future.plan = NULL)
[17:39:25.524]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.524]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.524]                 }
[17:39:25.524]                 ...future.workdir <- getwd()
[17:39:25.524]             }
[17:39:25.524]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.524]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.524]         }
[17:39:25.524]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.524]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.524]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.524]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.524]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.524]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.524]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.524]             base::names(...future.oldOptions))
[17:39:25.524]     }
[17:39:25.524]     if (FALSE) {
[17:39:25.524]     }
[17:39:25.524]     else {
[17:39:25.524]         if (TRUE) {
[17:39:25.524]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.524]                 open = "w")
[17:39:25.524]         }
[17:39:25.524]         else {
[17:39:25.524]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.524]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.524]         }
[17:39:25.524]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.524]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.524]             base::sink(type = "output", split = FALSE)
[17:39:25.524]             base::close(...future.stdout)
[17:39:25.524]         }, add = TRUE)
[17:39:25.524]     }
[17:39:25.524]     ...future.frame <- base::sys.nframe()
[17:39:25.524]     ...future.conditions <- base::list()
[17:39:25.524]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.524]     if (FALSE) {
[17:39:25.524]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.524]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.524]     }
[17:39:25.524]     ...future.result <- base::tryCatch({
[17:39:25.524]         base::withCallingHandlers({
[17:39:25.524]             ...future.value <- base::withVisible(base::local({
[17:39:25.524]                 withCallingHandlers({
[17:39:25.524]                   {
[17:39:25.524]                     if (ii%%2 == 0) 
[17:39:25.524]                       stop("Woops!")
[17:39:25.524]                     ii
[17:39:25.524]                   }
[17:39:25.524]                 }, immediateCondition = function(cond) {
[17:39:25.524]                   save_rds <- function (object, pathname, ...) 
[17:39:25.524]                   {
[17:39:25.524]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:25.524]                     if (file_test("-f", pathname_tmp)) {
[17:39:25.524]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.524]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:25.524]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.524]                         fi_tmp[["mtime"]])
[17:39:25.524]                     }
[17:39:25.524]                     tryCatch({
[17:39:25.524]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:25.524]                     }, error = function(ex) {
[17:39:25.524]                       msg <- conditionMessage(ex)
[17:39:25.524]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.524]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:25.524]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.524]                         fi_tmp[["mtime"]], msg)
[17:39:25.524]                       ex$message <- msg
[17:39:25.524]                       stop(ex)
[17:39:25.524]                     })
[17:39:25.524]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:25.524]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:25.524]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:25.524]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.524]                       fi <- file.info(pathname)
[17:39:25.524]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:25.524]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.524]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:25.524]                         fi[["size"]], fi[["mtime"]])
[17:39:25.524]                       stop(msg)
[17:39:25.524]                     }
[17:39:25.524]                     invisible(pathname)
[17:39:25.524]                   }
[17:39:25.524]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:25.524]                     rootPath = tempdir()) 
[17:39:25.524]                   {
[17:39:25.524]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:25.524]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:25.524]                       tmpdir = path, fileext = ".rds")
[17:39:25.524]                     save_rds(obj, file)
[17:39:25.524]                   }
[17:39:25.524]                   saveImmediateCondition(cond, path = "/tmp/Rtmpq3kloZ/.future/immediateConditions")
[17:39:25.524]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.524]                   {
[17:39:25.524]                     inherits <- base::inherits
[17:39:25.524]                     invokeRestart <- base::invokeRestart
[17:39:25.524]                     is.null <- base::is.null
[17:39:25.524]                     muffled <- FALSE
[17:39:25.524]                     if (inherits(cond, "message")) {
[17:39:25.524]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:25.524]                       if (muffled) 
[17:39:25.524]                         invokeRestart("muffleMessage")
[17:39:25.524]                     }
[17:39:25.524]                     else if (inherits(cond, "warning")) {
[17:39:25.524]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:25.524]                       if (muffled) 
[17:39:25.524]                         invokeRestart("muffleWarning")
[17:39:25.524]                     }
[17:39:25.524]                     else if (inherits(cond, "condition")) {
[17:39:25.524]                       if (!is.null(pattern)) {
[17:39:25.524]                         computeRestarts <- base::computeRestarts
[17:39:25.524]                         grepl <- base::grepl
[17:39:25.524]                         restarts <- computeRestarts(cond)
[17:39:25.524]                         for (restart in restarts) {
[17:39:25.524]                           name <- restart$name
[17:39:25.524]                           if (is.null(name)) 
[17:39:25.524]                             next
[17:39:25.524]                           if (!grepl(pattern, name)) 
[17:39:25.524]                             next
[17:39:25.524]                           invokeRestart(restart)
[17:39:25.524]                           muffled <- TRUE
[17:39:25.524]                           break
[17:39:25.524]                         }
[17:39:25.524]                       }
[17:39:25.524]                     }
[17:39:25.524]                     invisible(muffled)
[17:39:25.524]                   }
[17:39:25.524]                   muffleCondition(cond)
[17:39:25.524]                 })
[17:39:25.524]             }))
[17:39:25.524]             future::FutureResult(value = ...future.value$value, 
[17:39:25.524]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.524]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.524]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.524]                     ...future.globalenv.names))
[17:39:25.524]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.524]         }, condition = base::local({
[17:39:25.524]             c <- base::c
[17:39:25.524]             inherits <- base::inherits
[17:39:25.524]             invokeRestart <- base::invokeRestart
[17:39:25.524]             length <- base::length
[17:39:25.524]             list <- base::list
[17:39:25.524]             seq.int <- base::seq.int
[17:39:25.524]             signalCondition <- base::signalCondition
[17:39:25.524]             sys.calls <- base::sys.calls
[17:39:25.524]             `[[` <- base::`[[`
[17:39:25.524]             `+` <- base::`+`
[17:39:25.524]             `<<-` <- base::`<<-`
[17:39:25.524]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.524]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.524]                   3L)]
[17:39:25.524]             }
[17:39:25.524]             function(cond) {
[17:39:25.524]                 is_error <- inherits(cond, "error")
[17:39:25.524]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.524]                   NULL)
[17:39:25.524]                 if (is_error) {
[17:39:25.524]                   sessionInformation <- function() {
[17:39:25.524]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.524]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.524]                       search = base::search(), system = base::Sys.info())
[17:39:25.524]                   }
[17:39:25.524]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.524]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.524]                     cond$call), session = sessionInformation(), 
[17:39:25.524]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.524]                   signalCondition(cond)
[17:39:25.524]                 }
[17:39:25.524]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.524]                 "immediateCondition"))) {
[17:39:25.524]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.524]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.524]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.524]                   if (TRUE && !signal) {
[17:39:25.524]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.524]                     {
[17:39:25.524]                       inherits <- base::inherits
[17:39:25.524]                       invokeRestart <- base::invokeRestart
[17:39:25.524]                       is.null <- base::is.null
[17:39:25.524]                       muffled <- FALSE
[17:39:25.524]                       if (inherits(cond, "message")) {
[17:39:25.524]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.524]                         if (muffled) 
[17:39:25.524]                           invokeRestart("muffleMessage")
[17:39:25.524]                       }
[17:39:25.524]                       else if (inherits(cond, "warning")) {
[17:39:25.524]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.524]                         if (muffled) 
[17:39:25.524]                           invokeRestart("muffleWarning")
[17:39:25.524]                       }
[17:39:25.524]                       else if (inherits(cond, "condition")) {
[17:39:25.524]                         if (!is.null(pattern)) {
[17:39:25.524]                           computeRestarts <- base::computeRestarts
[17:39:25.524]                           grepl <- base::grepl
[17:39:25.524]                           restarts <- computeRestarts(cond)
[17:39:25.524]                           for (restart in restarts) {
[17:39:25.524]                             name <- restart$name
[17:39:25.524]                             if (is.null(name)) 
[17:39:25.524]                               next
[17:39:25.524]                             if (!grepl(pattern, name)) 
[17:39:25.524]                               next
[17:39:25.524]                             invokeRestart(restart)
[17:39:25.524]                             muffled <- TRUE
[17:39:25.524]                             break
[17:39:25.524]                           }
[17:39:25.524]                         }
[17:39:25.524]                       }
[17:39:25.524]                       invisible(muffled)
[17:39:25.524]                     }
[17:39:25.524]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.524]                   }
[17:39:25.524]                 }
[17:39:25.524]                 else {
[17:39:25.524]                   if (TRUE) {
[17:39:25.524]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.524]                     {
[17:39:25.524]                       inherits <- base::inherits
[17:39:25.524]                       invokeRestart <- base::invokeRestart
[17:39:25.524]                       is.null <- base::is.null
[17:39:25.524]                       muffled <- FALSE
[17:39:25.524]                       if (inherits(cond, "message")) {
[17:39:25.524]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.524]                         if (muffled) 
[17:39:25.524]                           invokeRestart("muffleMessage")
[17:39:25.524]                       }
[17:39:25.524]                       else if (inherits(cond, "warning")) {
[17:39:25.524]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.524]                         if (muffled) 
[17:39:25.524]                           invokeRestart("muffleWarning")
[17:39:25.524]                       }
[17:39:25.524]                       else if (inherits(cond, "condition")) {
[17:39:25.524]                         if (!is.null(pattern)) {
[17:39:25.524]                           computeRestarts <- base::computeRestarts
[17:39:25.524]                           grepl <- base::grepl
[17:39:25.524]                           restarts <- computeRestarts(cond)
[17:39:25.524]                           for (restart in restarts) {
[17:39:25.524]                             name <- restart$name
[17:39:25.524]                             if (is.null(name)) 
[17:39:25.524]                               next
[17:39:25.524]                             if (!grepl(pattern, name)) 
[17:39:25.524]                               next
[17:39:25.524]                             invokeRestart(restart)
[17:39:25.524]                             muffled <- TRUE
[17:39:25.524]                             break
[17:39:25.524]                           }
[17:39:25.524]                         }
[17:39:25.524]                       }
[17:39:25.524]                       invisible(muffled)
[17:39:25.524]                     }
[17:39:25.524]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.524]                   }
[17:39:25.524]                 }
[17:39:25.524]             }
[17:39:25.524]         }))
[17:39:25.524]     }, error = function(ex) {
[17:39:25.524]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.524]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.524]                 ...future.rng), started = ...future.startTime, 
[17:39:25.524]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.524]             version = "1.8"), class = "FutureResult")
[17:39:25.524]     }, finally = {
[17:39:25.524]         if (!identical(...future.workdir, getwd())) 
[17:39:25.524]             setwd(...future.workdir)
[17:39:25.524]         {
[17:39:25.524]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.524]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.524]             }
[17:39:25.524]             base::options(...future.oldOptions)
[17:39:25.524]             if (.Platform$OS.type == "windows") {
[17:39:25.524]                 old_names <- names(...future.oldEnvVars)
[17:39:25.524]                 envs <- base::Sys.getenv()
[17:39:25.524]                 names <- names(envs)
[17:39:25.524]                 common <- intersect(names, old_names)
[17:39:25.524]                 added <- setdiff(names, old_names)
[17:39:25.524]                 removed <- setdiff(old_names, names)
[17:39:25.524]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.524]                   envs[common]]
[17:39:25.524]                 NAMES <- toupper(changed)
[17:39:25.524]                 args <- list()
[17:39:25.524]                 for (kk in seq_along(NAMES)) {
[17:39:25.524]                   name <- changed[[kk]]
[17:39:25.524]                   NAME <- NAMES[[kk]]
[17:39:25.524]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.524]                     next
[17:39:25.524]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.524]                 }
[17:39:25.524]                 NAMES <- toupper(added)
[17:39:25.524]                 for (kk in seq_along(NAMES)) {
[17:39:25.524]                   name <- added[[kk]]
[17:39:25.524]                   NAME <- NAMES[[kk]]
[17:39:25.524]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.524]                     next
[17:39:25.524]                   args[[name]] <- ""
[17:39:25.524]                 }
[17:39:25.524]                 NAMES <- toupper(removed)
[17:39:25.524]                 for (kk in seq_along(NAMES)) {
[17:39:25.524]                   name <- removed[[kk]]
[17:39:25.524]                   NAME <- NAMES[[kk]]
[17:39:25.524]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.524]                     next
[17:39:25.524]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.524]                 }
[17:39:25.524]                 if (length(args) > 0) 
[17:39:25.524]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.524]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.524]             }
[17:39:25.524]             else {
[17:39:25.524]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.524]             }
[17:39:25.524]             {
[17:39:25.524]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.524]                   0L) {
[17:39:25.524]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.524]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.524]                   base::options(opts)
[17:39:25.524]                 }
[17:39:25.524]                 {
[17:39:25.524]                   {
[17:39:25.524]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:25.524]                     NULL
[17:39:25.524]                   }
[17:39:25.524]                   options(future.plan = NULL)
[17:39:25.524]                   if (is.na(NA_character_)) 
[17:39:25.524]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.524]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.524]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.524]                     .init = FALSE)
[17:39:25.524]                 }
[17:39:25.524]             }
[17:39:25.524]         }
[17:39:25.524]     })
[17:39:25.524]     if (TRUE) {
[17:39:25.524]         base::sink(type = "output", split = FALSE)
[17:39:25.524]         if (TRUE) {
[17:39:25.524]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.524]         }
[17:39:25.524]         else {
[17:39:25.524]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.524]         }
[17:39:25.524]         base::close(...future.stdout)
[17:39:25.524]         ...future.stdout <- NULL
[17:39:25.524]     }
[17:39:25.524]     ...future.result$conditions <- ...future.conditions
[17:39:25.524]     ...future.result$finished <- base::Sys.time()
[17:39:25.524]     ...future.result
[17:39:25.524] }
[17:39:25.527] assign_globals() ...
[17:39:25.527] List of 1
[17:39:25.527]  $ ii: int 3
[17:39:25.527]  - attr(*, "where")=List of 1
[17:39:25.527]   ..$ ii:<environment: R_EmptyEnv> 
[17:39:25.527]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:25.527]  - attr(*, "resolved")= logi FALSE
[17:39:25.527]  - attr(*, "total_size")= num 56
[17:39:25.527]  - attr(*, "already-done")= logi TRUE
[17:39:25.531] - copied ‘ii’ to environment
[17:39:25.531] assign_globals() ... done
[17:39:25.531] requestCore(): workers = 2
[17:39:25.531] Poll #1 (0): usedCores() = 2, workers = 2
[17:39:25.543] result() for MulticoreFuture ...
[17:39:25.543] result() for MulticoreFuture ...
[17:39:25.544] result() for MulticoreFuture ... done
[17:39:25.544] result() for MulticoreFuture ... done
[17:39:25.544] result() for MulticoreFuture ...
[17:39:25.544] result() for MulticoreFuture ... done
[17:39:25.547] MulticoreFuture started
[17:39:25.548] - Launch lazy future ... done
[17:39:25.548] run() for ‘MulticoreFuture’ ... done
[17:39:25.549] result() for MulticoreFuture ...
[17:39:25.549] plan(): Setting new future strategy stack:
[17:39:25.549] result() for MulticoreFuture ... done
[17:39:25.549] result() for MulticoreFuture ...
[17:39:25.549] result() for MulticoreFuture ... done
[17:39:25.549] result() for MulticoreFuture ...
[17:39:25.549] List of future strategies:
[17:39:25.549] 1. sequential:
[17:39:25.549]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.549]    - tweaked: FALSE
[17:39:25.549]    - call: NULL
[17:39:25.550] plan(): nbrOfWorkers() = 1
[17:39:25.552] plan(): Setting new future strategy stack:
[17:39:25.552] List of future strategies:
[17:39:25.552] 1. multicore:
[17:39:25.552]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:25.552]    - tweaked: FALSE
[17:39:25.552]    - call: plan(strategy)
[17:39:25.553] result() for MulticoreFuture ...
[17:39:25.553] result() for MulticoreFuture ... done
[17:39:25.554] signalConditions() ...
[17:39:25.554]  - include = ‘immediateCondition’
[17:39:25.554]  - exclude = 
[17:39:25.554]  - resignal = FALSE
[17:39:25.554]  - Number of conditions: 1
[17:39:25.555] signalConditions() ... done
[17:39:25.555] result() for MulticoreFuture ... done
[17:39:25.555] result() for MulticoreFuture ...
[17:39:25.555] result() for MulticoreFuture ... done
[17:39:25.555] signalConditions() ...
[17:39:25.555]  - include = ‘immediateCondition’
[17:39:25.556]  - exclude = 
[17:39:25.556]  - resignal = FALSE
[17:39:25.556]  - Number of conditions: 1
[17:39:25.556] signalConditions() ... done
[17:39:25.556] Future state: ‘finished’
[17:39:25.557] result() for MulticoreFuture ...
[17:39:25.557] result() for MulticoreFuture ... done
[17:39:25.557] signalConditions() ...
[17:39:25.557]  - include = ‘condition’
[17:39:25.557]  - exclude = ‘immediateCondition’
[17:39:25.557]  - resignal = TRUE
[17:39:25.557] plan(): nbrOfWorkers() = 2
[17:39:25.558]  - Number of conditions: 1
[17:39:25.558]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:25.558] signalConditions() ... done
[17:39:25.559] result() for MulticoreFuture ...
[17:39:25.559] result() for MulticoreFuture ...
[17:39:25.559] result() for MulticoreFuture ... done
[17:39:25.559] result() for MulticoreFuture ... done
[17:39:25.560] result() for MulticoreFuture ...
[17:39:25.560] result() for MulticoreFuture ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[17:39:25.560] result() for MulticoreFuture ...
[17:39:25.560] result() for MulticoreFuture ... done
[17:39:25.561] result() for MulticoreFuture ...
[17:39:25.561] result() for MulticoreFuture ... done
[17:39:25.561] signalConditions() ...
[17:39:25.561]  - include = ‘immediateCondition’
[17:39:25.561]  - exclude = 
[17:39:25.561]  - resignal = FALSE
[17:39:25.561]  - Number of conditions: 1
[17:39:25.561] signalConditions() ... done
[17:39:25.562] Future state: ‘finished’
[17:39:25.562] result() for MulticoreFuture ...
[17:39:25.562] result() for MulticoreFuture ... done
[17:39:25.562] signalConditions() ...
[17:39:25.562]  - include = ‘condition’
[17:39:25.562]  - exclude = ‘immediateCondition’
[17:39:25.562]  - resignal = TRUE
[17:39:25.562]  - Number of conditions: 1
[17:39:25.562]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:25.563] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[17:39:25.563] result() for MulticoreFuture ...
[17:39:25.563] result() for MulticoreFuture ... done
[17:39:25.563] result() for MulticoreFuture ...
[17:39:25.563] result() for MulticoreFuture ... done
[17:39:25.563] signalConditions() ...
[17:39:25.566]  - include = ‘immediateCondition’
[17:39:25.566]  - exclude = 
[17:39:25.566]  - resignal = FALSE
[17:39:25.566]  - Number of conditions: 1
[17:39:25.566] signalConditions() ... done
[17:39:25.567] Future state: ‘finished’
[17:39:25.567] result() for MulticoreFuture ...
[17:39:25.567] result() for MulticoreFuture ... done
[17:39:25.567] signalConditions() ...
[17:39:25.567]  - include = ‘condition’
[17:39:25.567]  - exclude = ‘immediateCondition’
[17:39:25.567]  - resignal = TRUE
[17:39:25.567]  - Number of conditions: 1
[17:39:25.568]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:25.568] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[17:39:25.568] getGlobalsAndPackages() ...
[17:39:25.568] Searching for globals...
[17:39:25.571] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[17:39:25.571] Searching for globals ... DONE
[17:39:25.571] Resolving globals: FALSE
[17:39:25.572] 
[17:39:25.572] 
[17:39:25.572] getGlobalsAndPackages() ... DONE
[17:39:25.572] run() for ‘Future’ ...
[17:39:25.572] - state: ‘created’
[17:39:25.573] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:25.577] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:25.577] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:25.577]   - Field: ‘label’
[17:39:25.577]   - Field: ‘local’
[17:39:25.577]   - Field: ‘owner’
[17:39:25.577]   - Field: ‘envir’
[17:39:25.577]   - Field: ‘workers’
[17:39:25.577]   - Field: ‘packages’
[17:39:25.578]   - Field: ‘gc’
[17:39:25.578]   - Field: ‘job’
[17:39:25.578]   - Field: ‘conditions’
[17:39:25.578]   - Field: ‘expr’
[17:39:25.578]   - Field: ‘uuid’
[17:39:25.578]   - Field: ‘seed’
[17:39:25.578]   - Field: ‘version’
[17:39:25.578]   - Field: ‘result’
[17:39:25.578]   - Field: ‘asynchronous’
[17:39:25.578]   - Field: ‘calls’
[17:39:25.579]   - Field: ‘globals’
[17:39:25.579]   - Field: ‘stdout’
[17:39:25.579]   - Field: ‘earlySignal’
[17:39:25.579]   - Field: ‘lazy’
[17:39:25.579]   - Field: ‘state’
[17:39:25.579] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:25.579] - Launch lazy future ...
[17:39:25.580] Packages needed by the future expression (n = 0): <none>
[17:39:25.580] Packages needed by future strategies (n = 0): <none>
[17:39:25.580] {
[17:39:25.580]     {
[17:39:25.580]         {
[17:39:25.580]             ...future.startTime <- base::Sys.time()
[17:39:25.580]             {
[17:39:25.580]                 {
[17:39:25.580]                   {
[17:39:25.580]                     {
[17:39:25.580]                       base::local({
[17:39:25.580]                         has_future <- base::requireNamespace("future", 
[17:39:25.580]                           quietly = TRUE)
[17:39:25.580]                         if (has_future) {
[17:39:25.580]                           ns <- base::getNamespace("future")
[17:39:25.580]                           version <- ns[[".package"]][["version"]]
[17:39:25.580]                           if (is.null(version)) 
[17:39:25.580]                             version <- utils::packageVersion("future")
[17:39:25.580]                         }
[17:39:25.580]                         else {
[17:39:25.580]                           version <- NULL
[17:39:25.580]                         }
[17:39:25.580]                         if (!has_future || version < "1.8.0") {
[17:39:25.580]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.580]                             "", base::R.version$version.string), 
[17:39:25.580]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:25.580]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.580]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.580]                               "release", "version")], collapse = " "), 
[17:39:25.580]                             hostname = base::Sys.info()[["nodename"]])
[17:39:25.580]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.580]                             info)
[17:39:25.580]                           info <- base::paste(info, collapse = "; ")
[17:39:25.580]                           if (!has_future) {
[17:39:25.580]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.580]                               info)
[17:39:25.580]                           }
[17:39:25.580]                           else {
[17:39:25.580]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.580]                               info, version)
[17:39:25.580]                           }
[17:39:25.580]                           base::stop(msg)
[17:39:25.580]                         }
[17:39:25.580]                       })
[17:39:25.580]                     }
[17:39:25.580]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:25.580]                     base::options(mc.cores = 1L)
[17:39:25.580]                   }
[17:39:25.580]                   ...future.strategy.old <- future::plan("list")
[17:39:25.580]                   options(future.plan = NULL)
[17:39:25.580]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.580]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.580]                 }
[17:39:25.580]                 ...future.workdir <- getwd()
[17:39:25.580]             }
[17:39:25.580]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.580]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.580]         }
[17:39:25.580]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.580]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.580]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.580]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.580]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.580]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.580]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.580]             base::names(...future.oldOptions))
[17:39:25.580]     }
[17:39:25.580]     if (FALSE) {
[17:39:25.580]     }
[17:39:25.580]     else {
[17:39:25.580]         if (TRUE) {
[17:39:25.580]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.580]                 open = "w")
[17:39:25.580]         }
[17:39:25.580]         else {
[17:39:25.580]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.580]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.580]         }
[17:39:25.580]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.580]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.580]             base::sink(type = "output", split = FALSE)
[17:39:25.580]             base::close(...future.stdout)
[17:39:25.580]         }, add = TRUE)
[17:39:25.580]     }
[17:39:25.580]     ...future.frame <- base::sys.nframe()
[17:39:25.580]     ...future.conditions <- base::list()
[17:39:25.580]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.580]     if (FALSE) {
[17:39:25.580]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.580]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.580]     }
[17:39:25.580]     ...future.result <- base::tryCatch({
[17:39:25.580]         base::withCallingHandlers({
[17:39:25.580]             ...future.value <- base::withVisible(base::local({
[17:39:25.580]                 withCallingHandlers({
[17:39:25.580]                   {
[17:39:25.580]                     cat("Processing: ")
[17:39:25.580]                     for (ii in 1:10) {
[17:39:25.580]                       cat(".")
[17:39:25.580]                     }
[17:39:25.580]                     cat(" [100%]\n")
[17:39:25.580]                     4
[17:39:25.580]                   }
[17:39:25.580]                 }, immediateCondition = function(cond) {
[17:39:25.580]                   save_rds <- function (object, pathname, ...) 
[17:39:25.580]                   {
[17:39:25.580]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:25.580]                     if (file_test("-f", pathname_tmp)) {
[17:39:25.580]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.580]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:25.580]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.580]                         fi_tmp[["mtime"]])
[17:39:25.580]                     }
[17:39:25.580]                     tryCatch({
[17:39:25.580]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:25.580]                     }, error = function(ex) {
[17:39:25.580]                       msg <- conditionMessage(ex)
[17:39:25.580]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.580]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:25.580]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.580]                         fi_tmp[["mtime"]], msg)
[17:39:25.580]                       ex$message <- msg
[17:39:25.580]                       stop(ex)
[17:39:25.580]                     })
[17:39:25.580]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:25.580]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:25.580]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:25.580]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.580]                       fi <- file.info(pathname)
[17:39:25.580]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:25.580]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.580]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:25.580]                         fi[["size"]], fi[["mtime"]])
[17:39:25.580]                       stop(msg)
[17:39:25.580]                     }
[17:39:25.580]                     invisible(pathname)
[17:39:25.580]                   }
[17:39:25.580]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:25.580]                     rootPath = tempdir()) 
[17:39:25.580]                   {
[17:39:25.580]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:25.580]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:25.580]                       tmpdir = path, fileext = ".rds")
[17:39:25.580]                     save_rds(obj, file)
[17:39:25.580]                   }
[17:39:25.580]                   saveImmediateCondition(cond, path = "/tmp/Rtmpq3kloZ/.future/immediateConditions")
[17:39:25.580]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.580]                   {
[17:39:25.580]                     inherits <- base::inherits
[17:39:25.580]                     invokeRestart <- base::invokeRestart
[17:39:25.580]                     is.null <- base::is.null
[17:39:25.580]                     muffled <- FALSE
[17:39:25.580]                     if (inherits(cond, "message")) {
[17:39:25.580]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:25.580]                       if (muffled) 
[17:39:25.580]                         invokeRestart("muffleMessage")
[17:39:25.580]                     }
[17:39:25.580]                     else if (inherits(cond, "warning")) {
[17:39:25.580]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:25.580]                       if (muffled) 
[17:39:25.580]                         invokeRestart("muffleWarning")
[17:39:25.580]                     }
[17:39:25.580]                     else if (inherits(cond, "condition")) {
[17:39:25.580]                       if (!is.null(pattern)) {
[17:39:25.580]                         computeRestarts <- base::computeRestarts
[17:39:25.580]                         grepl <- base::grepl
[17:39:25.580]                         restarts <- computeRestarts(cond)
[17:39:25.580]                         for (restart in restarts) {
[17:39:25.580]                           name <- restart$name
[17:39:25.580]                           if (is.null(name)) 
[17:39:25.580]                             next
[17:39:25.580]                           if (!grepl(pattern, name)) 
[17:39:25.580]                             next
[17:39:25.580]                           invokeRestart(restart)
[17:39:25.580]                           muffled <- TRUE
[17:39:25.580]                           break
[17:39:25.580]                         }
[17:39:25.580]                       }
[17:39:25.580]                     }
[17:39:25.580]                     invisible(muffled)
[17:39:25.580]                   }
[17:39:25.580]                   muffleCondition(cond)
[17:39:25.580]                 })
[17:39:25.580]             }))
[17:39:25.580]             future::FutureResult(value = ...future.value$value, 
[17:39:25.580]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.580]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.580]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.580]                     ...future.globalenv.names))
[17:39:25.580]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.580]         }, condition = base::local({
[17:39:25.580]             c <- base::c
[17:39:25.580]             inherits <- base::inherits
[17:39:25.580]             invokeRestart <- base::invokeRestart
[17:39:25.580]             length <- base::length
[17:39:25.580]             list <- base::list
[17:39:25.580]             seq.int <- base::seq.int
[17:39:25.580]             signalCondition <- base::signalCondition
[17:39:25.580]             sys.calls <- base::sys.calls
[17:39:25.580]             `[[` <- base::`[[`
[17:39:25.580]             `+` <- base::`+`
[17:39:25.580]             `<<-` <- base::`<<-`
[17:39:25.580]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.580]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.580]                   3L)]
[17:39:25.580]             }
[17:39:25.580]             function(cond) {
[17:39:25.580]                 is_error <- inherits(cond, "error")
[17:39:25.580]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.580]                   NULL)
[17:39:25.580]                 if (is_error) {
[17:39:25.580]                   sessionInformation <- function() {
[17:39:25.580]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.580]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.580]                       search = base::search(), system = base::Sys.info())
[17:39:25.580]                   }
[17:39:25.580]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.580]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.580]                     cond$call), session = sessionInformation(), 
[17:39:25.580]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.580]                   signalCondition(cond)
[17:39:25.580]                 }
[17:39:25.580]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.580]                 "immediateCondition"))) {
[17:39:25.580]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.580]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.580]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.580]                   if (TRUE && !signal) {
[17:39:25.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.580]                     {
[17:39:25.580]                       inherits <- base::inherits
[17:39:25.580]                       invokeRestart <- base::invokeRestart
[17:39:25.580]                       is.null <- base::is.null
[17:39:25.580]                       muffled <- FALSE
[17:39:25.580]                       if (inherits(cond, "message")) {
[17:39:25.580]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.580]                         if (muffled) 
[17:39:25.580]                           invokeRestart("muffleMessage")
[17:39:25.580]                       }
[17:39:25.580]                       else if (inherits(cond, "warning")) {
[17:39:25.580]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.580]                         if (muffled) 
[17:39:25.580]                           invokeRestart("muffleWarning")
[17:39:25.580]                       }
[17:39:25.580]                       else if (inherits(cond, "condition")) {
[17:39:25.580]                         if (!is.null(pattern)) {
[17:39:25.580]                           computeRestarts <- base::computeRestarts
[17:39:25.580]                           grepl <- base::grepl
[17:39:25.580]                           restarts <- computeRestarts(cond)
[17:39:25.580]                           for (restart in restarts) {
[17:39:25.580]                             name <- restart$name
[17:39:25.580]                             if (is.null(name)) 
[17:39:25.580]                               next
[17:39:25.580]                             if (!grepl(pattern, name)) 
[17:39:25.580]                               next
[17:39:25.580]                             invokeRestart(restart)
[17:39:25.580]                             muffled <- TRUE
[17:39:25.580]                             break
[17:39:25.580]                           }
[17:39:25.580]                         }
[17:39:25.580]                       }
[17:39:25.580]                       invisible(muffled)
[17:39:25.580]                     }
[17:39:25.580]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.580]                   }
[17:39:25.580]                 }
[17:39:25.580]                 else {
[17:39:25.580]                   if (TRUE) {
[17:39:25.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.580]                     {
[17:39:25.580]                       inherits <- base::inherits
[17:39:25.580]                       invokeRestart <- base::invokeRestart
[17:39:25.580]                       is.null <- base::is.null
[17:39:25.580]                       muffled <- FALSE
[17:39:25.580]                       if (inherits(cond, "message")) {
[17:39:25.580]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.580]                         if (muffled) 
[17:39:25.580]                           invokeRestart("muffleMessage")
[17:39:25.580]                       }
[17:39:25.580]                       else if (inherits(cond, "warning")) {
[17:39:25.580]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.580]                         if (muffled) 
[17:39:25.580]                           invokeRestart("muffleWarning")
[17:39:25.580]                       }
[17:39:25.580]                       else if (inherits(cond, "condition")) {
[17:39:25.580]                         if (!is.null(pattern)) {
[17:39:25.580]                           computeRestarts <- base::computeRestarts
[17:39:25.580]                           grepl <- base::grepl
[17:39:25.580]                           restarts <- computeRestarts(cond)
[17:39:25.580]                           for (restart in restarts) {
[17:39:25.580]                             name <- restart$name
[17:39:25.580]                             if (is.null(name)) 
[17:39:25.580]                               next
[17:39:25.580]                             if (!grepl(pattern, name)) 
[17:39:25.580]                               next
[17:39:25.580]                             invokeRestart(restart)
[17:39:25.580]                             muffled <- TRUE
[17:39:25.580]                             break
[17:39:25.580]                           }
[17:39:25.580]                         }
[17:39:25.580]                       }
[17:39:25.580]                       invisible(muffled)
[17:39:25.580]                     }
[17:39:25.580]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.580]                   }
[17:39:25.580]                 }
[17:39:25.580]             }
[17:39:25.580]         }))
[17:39:25.580]     }, error = function(ex) {
[17:39:25.580]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.580]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.580]                 ...future.rng), started = ...future.startTime, 
[17:39:25.580]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.580]             version = "1.8"), class = "FutureResult")
[17:39:25.580]     }, finally = {
[17:39:25.580]         if (!identical(...future.workdir, getwd())) 
[17:39:25.580]             setwd(...future.workdir)
[17:39:25.580]         {
[17:39:25.580]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.580]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.580]             }
[17:39:25.580]             base::options(...future.oldOptions)
[17:39:25.580]             if (.Platform$OS.type == "windows") {
[17:39:25.580]                 old_names <- names(...future.oldEnvVars)
[17:39:25.580]                 envs <- base::Sys.getenv()
[17:39:25.580]                 names <- names(envs)
[17:39:25.580]                 common <- intersect(names, old_names)
[17:39:25.580]                 added <- setdiff(names, old_names)
[17:39:25.580]                 removed <- setdiff(old_names, names)
[17:39:25.580]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.580]                   envs[common]]
[17:39:25.580]                 NAMES <- toupper(changed)
[17:39:25.580]                 args <- list()
[17:39:25.580]                 for (kk in seq_along(NAMES)) {
[17:39:25.580]                   name <- changed[[kk]]
[17:39:25.580]                   NAME <- NAMES[[kk]]
[17:39:25.580]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.580]                     next
[17:39:25.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.580]                 }
[17:39:25.580]                 NAMES <- toupper(added)
[17:39:25.580]                 for (kk in seq_along(NAMES)) {
[17:39:25.580]                   name <- added[[kk]]
[17:39:25.580]                   NAME <- NAMES[[kk]]
[17:39:25.580]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.580]                     next
[17:39:25.580]                   args[[name]] <- ""
[17:39:25.580]                 }
[17:39:25.580]                 NAMES <- toupper(removed)
[17:39:25.580]                 for (kk in seq_along(NAMES)) {
[17:39:25.580]                   name <- removed[[kk]]
[17:39:25.580]                   NAME <- NAMES[[kk]]
[17:39:25.580]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.580]                     next
[17:39:25.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.580]                 }
[17:39:25.580]                 if (length(args) > 0) 
[17:39:25.580]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.580]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.580]             }
[17:39:25.580]             else {
[17:39:25.580]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.580]             }
[17:39:25.580]             {
[17:39:25.580]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.580]                   0L) {
[17:39:25.580]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.580]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.580]                   base::options(opts)
[17:39:25.580]                 }
[17:39:25.580]                 {
[17:39:25.580]                   {
[17:39:25.580]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:25.580]                     NULL
[17:39:25.580]                   }
[17:39:25.580]                   options(future.plan = NULL)
[17:39:25.580]                   if (is.na(NA_character_)) 
[17:39:25.580]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.580]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.580]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.580]                     .init = FALSE)
[17:39:25.580]                 }
[17:39:25.580]             }
[17:39:25.580]         }
[17:39:25.580]     })
[17:39:25.580]     if (TRUE) {
[17:39:25.580]         base::sink(type = "output", split = FALSE)
[17:39:25.580]         if (TRUE) {
[17:39:25.580]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.580]         }
[17:39:25.580]         else {
[17:39:25.580]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.580]         }
[17:39:25.580]         base::close(...future.stdout)
[17:39:25.580]         ...future.stdout <- NULL
[17:39:25.580]     }
[17:39:25.580]     ...future.result$conditions <- ...future.conditions
[17:39:25.580]     ...future.result$finished <- base::Sys.time()
[17:39:25.580]     ...future.result
[17:39:25.580] }
[17:39:25.582] requestCore(): workers = 2
[17:39:25.584] MulticoreFuture started
[17:39:25.585] - Launch lazy future ... done
[17:39:25.585] run() for ‘MulticoreFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[17:39:25.585] plan(): Setting new future strategy stack:
[17:39:25.586] result() for MulticoreFuture ...
[17:39:25.586] result() for MulticoreFuture ... done
[17:39:25.586] result() for MulticoreFuture ...
[17:39:25.586] result() for MulticoreFuture ... done
[17:39:25.586] signalConditions() ...
[17:39:25.586] List of future strategies:
[17:39:25.586] 1. sequential:
[17:39:25.586]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.586]    - tweaked: FALSE
[17:39:25.586]    - call: NULL
[17:39:25.587]  - include = ‘immediateCondition’
[17:39:25.587] plan(): nbrOfWorkers() = 1
[17:39:25.587]  - exclude = 
[17:39:25.587]  - resignal = FALSE
[17:39:25.587]  - Number of conditions: 1
[17:39:25.587] signalConditions() ... done
[17:39:25.587] Future state: ‘finished’
[17:39:25.587] result() for MulticoreFuture ...
[17:39:25.588] result() for MulticoreFuture ... done
[17:39:25.588] signalConditions() ...
[17:39:25.588]  - include = ‘condition’
[17:39:25.588]  - exclude = ‘immediateCondition’
[17:39:25.588]  - resignal = TRUE
[17:39:25.588]  - Number of conditions: 1
[17:39:25.588]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:25.589] plan(): Setting new future strategy stack:
[17:39:25.589] signalConditions() ... done
v3: <simpleError> (as expect)
[17:39:25.589] result() for MulticoreFuture ...
[17:39:25.589] List of future strategies:
[17:39:25.589] 1. multicore:
[17:39:25.589]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:25.589]    - tweaked: FALSE
[17:39:25.589]    - call: plan(strategy)
[17:39:25.593] plan(): nbrOfWorkers() = 2
[17:39:25.594] result() for MulticoreFuture ...
[17:39:25.594] result() for MulticoreFuture ... done
[17:39:25.594] result() for MulticoreFuture ... done
[17:39:25.595] result() for MulticoreFuture ...
[17:39:25.595] result() for MulticoreFuture ... done
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[17:39:25.595] getGlobalsAndPackages() ...
[17:39:25.595] Searching for globals...
[17:39:25.596] 
[17:39:25.596] Searching for globals ... DONE
[17:39:25.596] - globals: [0] <none>
[17:39:25.596] getGlobalsAndPackages() ... DONE
[17:39:25.597] run() for ‘Future’ ...
[17:39:25.597] - state: ‘created’
[17:39:25.597] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:25.601] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:25.601] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:25.601]   - Field: ‘label’
[17:39:25.602]   - Field: ‘local’
[17:39:25.602]   - Field: ‘owner’
[17:39:25.602]   - Field: ‘envir’
[17:39:25.602]   - Field: ‘workers’
[17:39:25.602]   - Field: ‘packages’
[17:39:25.602]   - Field: ‘gc’
[17:39:25.602]   - Field: ‘job’
[17:39:25.602]   - Field: ‘conditions’
[17:39:25.602]   - Field: ‘expr’
[17:39:25.603]   - Field: ‘uuid’
[17:39:25.603]   - Field: ‘seed’
[17:39:25.603]   - Field: ‘version’
[17:39:25.603]   - Field: ‘result’
[17:39:25.603]   - Field: ‘asynchronous’
[17:39:25.603]   - Field: ‘calls’
[17:39:25.603]   - Field: ‘globals’
[17:39:25.603]   - Field: ‘stdout’
[17:39:25.603]   - Field: ‘earlySignal’
[17:39:25.604]   - Field: ‘lazy’
[17:39:25.604]   - Field: ‘state’
[17:39:25.604] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:25.604] - Launch lazy future ...
[17:39:25.604] Packages needed by the future expression (n = 0): <none>
[17:39:25.604] Packages needed by future strategies (n = 0): <none>
[17:39:25.605] {
[17:39:25.605]     {
[17:39:25.605]         {
[17:39:25.605]             ...future.startTime <- base::Sys.time()
[17:39:25.605]             {
[17:39:25.605]                 {
[17:39:25.605]                   {
[17:39:25.605]                     {
[17:39:25.605]                       base::local({
[17:39:25.605]                         has_future <- base::requireNamespace("future", 
[17:39:25.605]                           quietly = TRUE)
[17:39:25.605]                         if (has_future) {
[17:39:25.605]                           ns <- base::getNamespace("future")
[17:39:25.605]                           version <- ns[[".package"]][["version"]]
[17:39:25.605]                           if (is.null(version)) 
[17:39:25.605]                             version <- utils::packageVersion("future")
[17:39:25.605]                         }
[17:39:25.605]                         else {
[17:39:25.605]                           version <- NULL
[17:39:25.605]                         }
[17:39:25.605]                         if (!has_future || version < "1.8.0") {
[17:39:25.605]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.605]                             "", base::R.version$version.string), 
[17:39:25.605]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:25.605]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.605]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.605]                               "release", "version")], collapse = " "), 
[17:39:25.605]                             hostname = base::Sys.info()[["nodename"]])
[17:39:25.605]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.605]                             info)
[17:39:25.605]                           info <- base::paste(info, collapse = "; ")
[17:39:25.605]                           if (!has_future) {
[17:39:25.605]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.605]                               info)
[17:39:25.605]                           }
[17:39:25.605]                           else {
[17:39:25.605]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.605]                               info, version)
[17:39:25.605]                           }
[17:39:25.605]                           base::stop(msg)
[17:39:25.605]                         }
[17:39:25.605]                       })
[17:39:25.605]                     }
[17:39:25.605]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:25.605]                     base::options(mc.cores = 1L)
[17:39:25.605]                   }
[17:39:25.605]                   ...future.strategy.old <- future::plan("list")
[17:39:25.605]                   options(future.plan = NULL)
[17:39:25.605]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.605]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.605]                 }
[17:39:25.605]                 ...future.workdir <- getwd()
[17:39:25.605]             }
[17:39:25.605]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.605]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.605]         }
[17:39:25.605]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.605]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.605]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.605]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.605]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.605]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.605]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.605]             base::names(...future.oldOptions))
[17:39:25.605]     }
[17:39:25.605]     if (FALSE) {
[17:39:25.605]     }
[17:39:25.605]     else {
[17:39:25.605]         if (TRUE) {
[17:39:25.605]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.605]                 open = "w")
[17:39:25.605]         }
[17:39:25.605]         else {
[17:39:25.605]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.605]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.605]         }
[17:39:25.605]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.605]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.605]             base::sink(type = "output", split = FALSE)
[17:39:25.605]             base::close(...future.stdout)
[17:39:25.605]         }, add = TRUE)
[17:39:25.605]     }
[17:39:25.605]     ...future.frame <- base::sys.nframe()
[17:39:25.605]     ...future.conditions <- base::list()
[17:39:25.605]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.605]     if (FALSE) {
[17:39:25.605]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.605]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.605]     }
[17:39:25.605]     ...future.result <- base::tryCatch({
[17:39:25.605]         base::withCallingHandlers({
[17:39:25.605]             ...future.value <- base::withVisible(base::local({
[17:39:25.605]                 withCallingHandlers({
[17:39:25.605]                   1
[17:39:25.605]                 }, immediateCondition = function(cond) {
[17:39:25.605]                   save_rds <- function (object, pathname, ...) 
[17:39:25.605]                   {
[17:39:25.605]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:25.605]                     if (file_test("-f", pathname_tmp)) {
[17:39:25.605]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.605]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:25.605]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.605]                         fi_tmp[["mtime"]])
[17:39:25.605]                     }
[17:39:25.605]                     tryCatch({
[17:39:25.605]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:25.605]                     }, error = function(ex) {
[17:39:25.605]                       msg <- conditionMessage(ex)
[17:39:25.605]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.605]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:25.605]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.605]                         fi_tmp[["mtime"]], msg)
[17:39:25.605]                       ex$message <- msg
[17:39:25.605]                       stop(ex)
[17:39:25.605]                     })
[17:39:25.605]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:25.605]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:25.605]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:25.605]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.605]                       fi <- file.info(pathname)
[17:39:25.605]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:25.605]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.605]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:25.605]                         fi[["size"]], fi[["mtime"]])
[17:39:25.605]                       stop(msg)
[17:39:25.605]                     }
[17:39:25.605]                     invisible(pathname)
[17:39:25.605]                   }
[17:39:25.605]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:25.605]                     rootPath = tempdir()) 
[17:39:25.605]                   {
[17:39:25.605]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:25.605]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:25.605]                       tmpdir = path, fileext = ".rds")
[17:39:25.605]                     save_rds(obj, file)
[17:39:25.605]                   }
[17:39:25.605]                   saveImmediateCondition(cond, path = "/tmp/Rtmpq3kloZ/.future/immediateConditions")
[17:39:25.605]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.605]                   {
[17:39:25.605]                     inherits <- base::inherits
[17:39:25.605]                     invokeRestart <- base::invokeRestart
[17:39:25.605]                     is.null <- base::is.null
[17:39:25.605]                     muffled <- FALSE
[17:39:25.605]                     if (inherits(cond, "message")) {
[17:39:25.605]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:25.605]                       if (muffled) 
[17:39:25.605]                         invokeRestart("muffleMessage")
[17:39:25.605]                     }
[17:39:25.605]                     else if (inherits(cond, "warning")) {
[17:39:25.605]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:25.605]                       if (muffled) 
[17:39:25.605]                         invokeRestart("muffleWarning")
[17:39:25.605]                     }
[17:39:25.605]                     else if (inherits(cond, "condition")) {
[17:39:25.605]                       if (!is.null(pattern)) {
[17:39:25.605]                         computeRestarts <- base::computeRestarts
[17:39:25.605]                         grepl <- base::grepl
[17:39:25.605]                         restarts <- computeRestarts(cond)
[17:39:25.605]                         for (restart in restarts) {
[17:39:25.605]                           name <- restart$name
[17:39:25.605]                           if (is.null(name)) 
[17:39:25.605]                             next
[17:39:25.605]                           if (!grepl(pattern, name)) 
[17:39:25.605]                             next
[17:39:25.605]                           invokeRestart(restart)
[17:39:25.605]                           muffled <- TRUE
[17:39:25.605]                           break
[17:39:25.605]                         }
[17:39:25.605]                       }
[17:39:25.605]                     }
[17:39:25.605]                     invisible(muffled)
[17:39:25.605]                   }
[17:39:25.605]                   muffleCondition(cond)
[17:39:25.605]                 })
[17:39:25.605]             }))
[17:39:25.605]             future::FutureResult(value = ...future.value$value, 
[17:39:25.605]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.605]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.605]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.605]                     ...future.globalenv.names))
[17:39:25.605]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.605]         }, condition = base::local({
[17:39:25.605]             c <- base::c
[17:39:25.605]             inherits <- base::inherits
[17:39:25.605]             invokeRestart <- base::invokeRestart
[17:39:25.605]             length <- base::length
[17:39:25.605]             list <- base::list
[17:39:25.605]             seq.int <- base::seq.int
[17:39:25.605]             signalCondition <- base::signalCondition
[17:39:25.605]             sys.calls <- base::sys.calls
[17:39:25.605]             `[[` <- base::`[[`
[17:39:25.605]             `+` <- base::`+`
[17:39:25.605]             `<<-` <- base::`<<-`
[17:39:25.605]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.605]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.605]                   3L)]
[17:39:25.605]             }
[17:39:25.605]             function(cond) {
[17:39:25.605]                 is_error <- inherits(cond, "error")
[17:39:25.605]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.605]                   NULL)
[17:39:25.605]                 if (is_error) {
[17:39:25.605]                   sessionInformation <- function() {
[17:39:25.605]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.605]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.605]                       search = base::search(), system = base::Sys.info())
[17:39:25.605]                   }
[17:39:25.605]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.605]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.605]                     cond$call), session = sessionInformation(), 
[17:39:25.605]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.605]                   signalCondition(cond)
[17:39:25.605]                 }
[17:39:25.605]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.605]                 "immediateCondition"))) {
[17:39:25.605]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.605]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.605]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.605]                   if (TRUE && !signal) {
[17:39:25.605]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.605]                     {
[17:39:25.605]                       inherits <- base::inherits
[17:39:25.605]                       invokeRestart <- base::invokeRestart
[17:39:25.605]                       is.null <- base::is.null
[17:39:25.605]                       muffled <- FALSE
[17:39:25.605]                       if (inherits(cond, "message")) {
[17:39:25.605]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.605]                         if (muffled) 
[17:39:25.605]                           invokeRestart("muffleMessage")
[17:39:25.605]                       }
[17:39:25.605]                       else if (inherits(cond, "warning")) {
[17:39:25.605]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.605]                         if (muffled) 
[17:39:25.605]                           invokeRestart("muffleWarning")
[17:39:25.605]                       }
[17:39:25.605]                       else if (inherits(cond, "condition")) {
[17:39:25.605]                         if (!is.null(pattern)) {
[17:39:25.605]                           computeRestarts <- base::computeRestarts
[17:39:25.605]                           grepl <- base::grepl
[17:39:25.605]                           restarts <- computeRestarts(cond)
[17:39:25.605]                           for (restart in restarts) {
[17:39:25.605]                             name <- restart$name
[17:39:25.605]                             if (is.null(name)) 
[17:39:25.605]                               next
[17:39:25.605]                             if (!grepl(pattern, name)) 
[17:39:25.605]                               next
[17:39:25.605]                             invokeRestart(restart)
[17:39:25.605]                             muffled <- TRUE
[17:39:25.605]                             break
[17:39:25.605]                           }
[17:39:25.605]                         }
[17:39:25.605]                       }
[17:39:25.605]                       invisible(muffled)
[17:39:25.605]                     }
[17:39:25.605]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.605]                   }
[17:39:25.605]                 }
[17:39:25.605]                 else {
[17:39:25.605]                   if (TRUE) {
[17:39:25.605]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.605]                     {
[17:39:25.605]                       inherits <- base::inherits
[17:39:25.605]                       invokeRestart <- base::invokeRestart
[17:39:25.605]                       is.null <- base::is.null
[17:39:25.605]                       muffled <- FALSE
[17:39:25.605]                       if (inherits(cond, "message")) {
[17:39:25.605]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.605]                         if (muffled) 
[17:39:25.605]                           invokeRestart("muffleMessage")
[17:39:25.605]                       }
[17:39:25.605]                       else if (inherits(cond, "warning")) {
[17:39:25.605]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.605]                         if (muffled) 
[17:39:25.605]                           invokeRestart("muffleWarning")
[17:39:25.605]                       }
[17:39:25.605]                       else if (inherits(cond, "condition")) {
[17:39:25.605]                         if (!is.null(pattern)) {
[17:39:25.605]                           computeRestarts <- base::computeRestarts
[17:39:25.605]                           grepl <- base::grepl
[17:39:25.605]                           restarts <- computeRestarts(cond)
[17:39:25.605]                           for (restart in restarts) {
[17:39:25.605]                             name <- restart$name
[17:39:25.605]                             if (is.null(name)) 
[17:39:25.605]                               next
[17:39:25.605]                             if (!grepl(pattern, name)) 
[17:39:25.605]                               next
[17:39:25.605]                             invokeRestart(restart)
[17:39:25.605]                             muffled <- TRUE
[17:39:25.605]                             break
[17:39:25.605]                           }
[17:39:25.605]                         }
[17:39:25.605]                       }
[17:39:25.605]                       invisible(muffled)
[17:39:25.605]                     }
[17:39:25.605]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.605]                   }
[17:39:25.605]                 }
[17:39:25.605]             }
[17:39:25.605]         }))
[17:39:25.605]     }, error = function(ex) {
[17:39:25.605]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.605]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.605]                 ...future.rng), started = ...future.startTime, 
[17:39:25.605]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.605]             version = "1.8"), class = "FutureResult")
[17:39:25.605]     }, finally = {
[17:39:25.605]         if (!identical(...future.workdir, getwd())) 
[17:39:25.605]             setwd(...future.workdir)
[17:39:25.605]         {
[17:39:25.605]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.605]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.605]             }
[17:39:25.605]             base::options(...future.oldOptions)
[17:39:25.605]             if (.Platform$OS.type == "windows") {
[17:39:25.605]                 old_names <- names(...future.oldEnvVars)
[17:39:25.605]                 envs <- base::Sys.getenv()
[17:39:25.605]                 names <- names(envs)
[17:39:25.605]                 common <- intersect(names, old_names)
[17:39:25.605]                 added <- setdiff(names, old_names)
[17:39:25.605]                 removed <- setdiff(old_names, names)
[17:39:25.605]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.605]                   envs[common]]
[17:39:25.605]                 NAMES <- toupper(changed)
[17:39:25.605]                 args <- list()
[17:39:25.605]                 for (kk in seq_along(NAMES)) {
[17:39:25.605]                   name <- changed[[kk]]
[17:39:25.605]                   NAME <- NAMES[[kk]]
[17:39:25.605]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.605]                     next
[17:39:25.605]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.605]                 }
[17:39:25.605]                 NAMES <- toupper(added)
[17:39:25.605]                 for (kk in seq_along(NAMES)) {
[17:39:25.605]                   name <- added[[kk]]
[17:39:25.605]                   NAME <- NAMES[[kk]]
[17:39:25.605]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.605]                     next
[17:39:25.605]                   args[[name]] <- ""
[17:39:25.605]                 }
[17:39:25.605]                 NAMES <- toupper(removed)
[17:39:25.605]                 for (kk in seq_along(NAMES)) {
[17:39:25.605]                   name <- removed[[kk]]
[17:39:25.605]                   NAME <- NAMES[[kk]]
[17:39:25.605]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.605]                     next
[17:39:25.605]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.605]                 }
[17:39:25.605]                 if (length(args) > 0) 
[17:39:25.605]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.605]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.605]             }
[17:39:25.605]             else {
[17:39:25.605]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.605]             }
[17:39:25.605]             {
[17:39:25.605]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.605]                   0L) {
[17:39:25.605]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.605]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.605]                   base::options(opts)
[17:39:25.605]                 }
[17:39:25.605]                 {
[17:39:25.605]                   {
[17:39:25.605]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:25.605]                     NULL
[17:39:25.605]                   }
[17:39:25.605]                   options(future.plan = NULL)
[17:39:25.605]                   if (is.na(NA_character_)) 
[17:39:25.605]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.605]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.605]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.605]                     .init = FALSE)
[17:39:25.605]                 }
[17:39:25.605]             }
[17:39:25.605]         }
[17:39:25.605]     })
[17:39:25.605]     if (TRUE) {
[17:39:25.605]         base::sink(type = "output", split = FALSE)
[17:39:25.605]         if (TRUE) {
[17:39:25.605]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.605]         }
[17:39:25.605]         else {
[17:39:25.605]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.605]         }
[17:39:25.605]         base::close(...future.stdout)
[17:39:25.605]         ...future.stdout <- NULL
[17:39:25.605]     }
[17:39:25.605]     ...future.result$conditions <- ...future.conditions
[17:39:25.605]     ...future.result$finished <- base::Sys.time()
[17:39:25.605]     ...future.result
[17:39:25.605] }
[17:39:25.608] requestCore(): workers = 2
[17:39:25.609] MulticoreFuture started
[17:39:25.610] - Launch lazy future ... done
[17:39:25.610] plan(): Setting new future strategy stack:
[17:39:25.610] run() for ‘MulticoreFuture’ ... done
[17:39:25.614] result() for MulticoreFuture ...
[17:39:25.611] List of future strategies:
[17:39:25.611] 1. sequential:
[17:39:25.611]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.611]    - tweaked: FALSE
[17:39:25.611]    - call: NULL
[17:39:25.615] plan(): nbrOfWorkers() = 1
[17:39:25.617] plan(): Setting new future strategy stack:
[17:39:25.618] List of future strategies:
[17:39:25.618] 1. multicore:
[17:39:25.618]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:25.618]    - tweaked: FALSE
[17:39:25.618]    - call: plan(strategy)
[17:39:25.623] plan(): nbrOfWorkers() = 2
[17:39:25.624] result() for MulticoreFuture ...
[17:39:25.624] result() for MulticoreFuture ... done
[17:39:25.624] result() for MulticoreFuture ... done
[17:39:25.624] result() for MulticoreFuture ...
[17:39:25.624] result() for MulticoreFuture ... done
c = 1
[17:39:25.625] getGlobalsAndPackages() ...
[17:39:25.625] Searching for globals...
[17:39:25.626] 
[17:39:25.626] Searching for globals ... DONE
[17:39:25.626] - globals: [0] <none>
[17:39:25.626] getGlobalsAndPackages() ... DONE
[17:39:25.627] run() for ‘Future’ ...
[17:39:25.627] - state: ‘created’
[17:39:25.627] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:25.631] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:25.631] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:25.631]   - Field: ‘label’
[17:39:25.631]   - Field: ‘local’
[17:39:25.631]   - Field: ‘owner’
[17:39:25.632]   - Field: ‘envir’
[17:39:25.632]   - Field: ‘workers’
[17:39:25.632]   - Field: ‘packages’
[17:39:25.632]   - Field: ‘gc’
[17:39:25.632]   - Field: ‘job’
[17:39:25.632]   - Field: ‘conditions’
[17:39:25.632]   - Field: ‘expr’
[17:39:25.633]   - Field: ‘uuid’
[17:39:25.633]   - Field: ‘seed’
[17:39:25.633]   - Field: ‘version’
[17:39:25.633]   - Field: ‘result’
[17:39:25.633]   - Field: ‘asynchronous’
[17:39:25.633]   - Field: ‘calls’
[17:39:25.633]   - Field: ‘globals’
[17:39:25.633]   - Field: ‘stdout’
[17:39:25.633]   - Field: ‘earlySignal’
[17:39:25.634]   - Field: ‘lazy’
[17:39:25.634]   - Field: ‘state’
[17:39:25.634] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:25.634] - Launch lazy future ...
[17:39:25.634] Packages needed by the future expression (n = 0): <none>
[17:39:25.634] Packages needed by future strategies (n = 0): <none>
[17:39:25.635] {
[17:39:25.635]     {
[17:39:25.635]         {
[17:39:25.635]             ...future.startTime <- base::Sys.time()
[17:39:25.635]             {
[17:39:25.635]                 {
[17:39:25.635]                   {
[17:39:25.635]                     {
[17:39:25.635]                       base::local({
[17:39:25.635]                         has_future <- base::requireNamespace("future", 
[17:39:25.635]                           quietly = TRUE)
[17:39:25.635]                         if (has_future) {
[17:39:25.635]                           ns <- base::getNamespace("future")
[17:39:25.635]                           version <- ns[[".package"]][["version"]]
[17:39:25.635]                           if (is.null(version)) 
[17:39:25.635]                             version <- utils::packageVersion("future")
[17:39:25.635]                         }
[17:39:25.635]                         else {
[17:39:25.635]                           version <- NULL
[17:39:25.635]                         }
[17:39:25.635]                         if (!has_future || version < "1.8.0") {
[17:39:25.635]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.635]                             "", base::R.version$version.string), 
[17:39:25.635]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:25.635]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.635]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.635]                               "release", "version")], collapse = " "), 
[17:39:25.635]                             hostname = base::Sys.info()[["nodename"]])
[17:39:25.635]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.635]                             info)
[17:39:25.635]                           info <- base::paste(info, collapse = "; ")
[17:39:25.635]                           if (!has_future) {
[17:39:25.635]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.635]                               info)
[17:39:25.635]                           }
[17:39:25.635]                           else {
[17:39:25.635]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.635]                               info, version)
[17:39:25.635]                           }
[17:39:25.635]                           base::stop(msg)
[17:39:25.635]                         }
[17:39:25.635]                       })
[17:39:25.635]                     }
[17:39:25.635]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:25.635]                     base::options(mc.cores = 1L)
[17:39:25.635]                   }
[17:39:25.635]                   ...future.strategy.old <- future::plan("list")
[17:39:25.635]                   options(future.plan = NULL)
[17:39:25.635]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.635]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.635]                 }
[17:39:25.635]                 ...future.workdir <- getwd()
[17:39:25.635]             }
[17:39:25.635]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.635]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.635]         }
[17:39:25.635]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.635]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.635]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.635]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.635]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.635]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.635]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.635]             base::names(...future.oldOptions))
[17:39:25.635]     }
[17:39:25.635]     if (FALSE) {
[17:39:25.635]     }
[17:39:25.635]     else {
[17:39:25.635]         if (TRUE) {
[17:39:25.635]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.635]                 open = "w")
[17:39:25.635]         }
[17:39:25.635]         else {
[17:39:25.635]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.635]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.635]         }
[17:39:25.635]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.635]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.635]             base::sink(type = "output", split = FALSE)
[17:39:25.635]             base::close(...future.stdout)
[17:39:25.635]         }, add = TRUE)
[17:39:25.635]     }
[17:39:25.635]     ...future.frame <- base::sys.nframe()
[17:39:25.635]     ...future.conditions <- base::list()
[17:39:25.635]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.635]     if (FALSE) {
[17:39:25.635]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.635]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.635]     }
[17:39:25.635]     ...future.result <- base::tryCatch({
[17:39:25.635]         base::withCallingHandlers({
[17:39:25.635]             ...future.value <- base::withVisible(base::local({
[17:39:25.635]                 withCallingHandlers({
[17:39:25.635]                   1
[17:39:25.635]                 }, immediateCondition = function(cond) {
[17:39:25.635]                   save_rds <- function (object, pathname, ...) 
[17:39:25.635]                   {
[17:39:25.635]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:25.635]                     if (file_test("-f", pathname_tmp)) {
[17:39:25.635]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.635]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:25.635]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.635]                         fi_tmp[["mtime"]])
[17:39:25.635]                     }
[17:39:25.635]                     tryCatch({
[17:39:25.635]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:25.635]                     }, error = function(ex) {
[17:39:25.635]                       msg <- conditionMessage(ex)
[17:39:25.635]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.635]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:25.635]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.635]                         fi_tmp[["mtime"]], msg)
[17:39:25.635]                       ex$message <- msg
[17:39:25.635]                       stop(ex)
[17:39:25.635]                     })
[17:39:25.635]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:25.635]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:25.635]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:25.635]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.635]                       fi <- file.info(pathname)
[17:39:25.635]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:25.635]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.635]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:25.635]                         fi[["size"]], fi[["mtime"]])
[17:39:25.635]                       stop(msg)
[17:39:25.635]                     }
[17:39:25.635]                     invisible(pathname)
[17:39:25.635]                   }
[17:39:25.635]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:25.635]                     rootPath = tempdir()) 
[17:39:25.635]                   {
[17:39:25.635]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:25.635]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:25.635]                       tmpdir = path, fileext = ".rds")
[17:39:25.635]                     save_rds(obj, file)
[17:39:25.635]                   }
[17:39:25.635]                   saveImmediateCondition(cond, path = "/tmp/Rtmpq3kloZ/.future/immediateConditions")
[17:39:25.635]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.635]                   {
[17:39:25.635]                     inherits <- base::inherits
[17:39:25.635]                     invokeRestart <- base::invokeRestart
[17:39:25.635]                     is.null <- base::is.null
[17:39:25.635]                     muffled <- FALSE
[17:39:25.635]                     if (inherits(cond, "message")) {
[17:39:25.635]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:25.635]                       if (muffled) 
[17:39:25.635]                         invokeRestart("muffleMessage")
[17:39:25.635]                     }
[17:39:25.635]                     else if (inherits(cond, "warning")) {
[17:39:25.635]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:25.635]                       if (muffled) 
[17:39:25.635]                         invokeRestart("muffleWarning")
[17:39:25.635]                     }
[17:39:25.635]                     else if (inherits(cond, "condition")) {
[17:39:25.635]                       if (!is.null(pattern)) {
[17:39:25.635]                         computeRestarts <- base::computeRestarts
[17:39:25.635]                         grepl <- base::grepl
[17:39:25.635]                         restarts <- computeRestarts(cond)
[17:39:25.635]                         for (restart in restarts) {
[17:39:25.635]                           name <- restart$name
[17:39:25.635]                           if (is.null(name)) 
[17:39:25.635]                             next
[17:39:25.635]                           if (!grepl(pattern, name)) 
[17:39:25.635]                             next
[17:39:25.635]                           invokeRestart(restart)
[17:39:25.635]                           muffled <- TRUE
[17:39:25.635]                           break
[17:39:25.635]                         }
[17:39:25.635]                       }
[17:39:25.635]                     }
[17:39:25.635]                     invisible(muffled)
[17:39:25.635]                   }
[17:39:25.635]                   muffleCondition(cond)
[17:39:25.635]                 })
[17:39:25.635]             }))
[17:39:25.635]             future::FutureResult(value = ...future.value$value, 
[17:39:25.635]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.635]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.635]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.635]                     ...future.globalenv.names))
[17:39:25.635]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.635]         }, condition = base::local({
[17:39:25.635]             c <- base::c
[17:39:25.635]             inherits <- base::inherits
[17:39:25.635]             invokeRestart <- base::invokeRestart
[17:39:25.635]             length <- base::length
[17:39:25.635]             list <- base::list
[17:39:25.635]             seq.int <- base::seq.int
[17:39:25.635]             signalCondition <- base::signalCondition
[17:39:25.635]             sys.calls <- base::sys.calls
[17:39:25.635]             `[[` <- base::`[[`
[17:39:25.635]             `+` <- base::`+`
[17:39:25.635]             `<<-` <- base::`<<-`
[17:39:25.635]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.635]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.635]                   3L)]
[17:39:25.635]             }
[17:39:25.635]             function(cond) {
[17:39:25.635]                 is_error <- inherits(cond, "error")
[17:39:25.635]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.635]                   NULL)
[17:39:25.635]                 if (is_error) {
[17:39:25.635]                   sessionInformation <- function() {
[17:39:25.635]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.635]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.635]                       search = base::search(), system = base::Sys.info())
[17:39:25.635]                   }
[17:39:25.635]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.635]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.635]                     cond$call), session = sessionInformation(), 
[17:39:25.635]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.635]                   signalCondition(cond)
[17:39:25.635]                 }
[17:39:25.635]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.635]                 "immediateCondition"))) {
[17:39:25.635]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.635]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.635]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.635]                   if (TRUE && !signal) {
[17:39:25.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.635]                     {
[17:39:25.635]                       inherits <- base::inherits
[17:39:25.635]                       invokeRestart <- base::invokeRestart
[17:39:25.635]                       is.null <- base::is.null
[17:39:25.635]                       muffled <- FALSE
[17:39:25.635]                       if (inherits(cond, "message")) {
[17:39:25.635]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.635]                         if (muffled) 
[17:39:25.635]                           invokeRestart("muffleMessage")
[17:39:25.635]                       }
[17:39:25.635]                       else if (inherits(cond, "warning")) {
[17:39:25.635]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.635]                         if (muffled) 
[17:39:25.635]                           invokeRestart("muffleWarning")
[17:39:25.635]                       }
[17:39:25.635]                       else if (inherits(cond, "condition")) {
[17:39:25.635]                         if (!is.null(pattern)) {
[17:39:25.635]                           computeRestarts <- base::computeRestarts
[17:39:25.635]                           grepl <- base::grepl
[17:39:25.635]                           restarts <- computeRestarts(cond)
[17:39:25.635]                           for (restart in restarts) {
[17:39:25.635]                             name <- restart$name
[17:39:25.635]                             if (is.null(name)) 
[17:39:25.635]                               next
[17:39:25.635]                             if (!grepl(pattern, name)) 
[17:39:25.635]                               next
[17:39:25.635]                             invokeRestart(restart)
[17:39:25.635]                             muffled <- TRUE
[17:39:25.635]                             break
[17:39:25.635]                           }
[17:39:25.635]                         }
[17:39:25.635]                       }
[17:39:25.635]                       invisible(muffled)
[17:39:25.635]                     }
[17:39:25.635]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.635]                   }
[17:39:25.635]                 }
[17:39:25.635]                 else {
[17:39:25.635]                   if (TRUE) {
[17:39:25.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.635]                     {
[17:39:25.635]                       inherits <- base::inherits
[17:39:25.635]                       invokeRestart <- base::invokeRestart
[17:39:25.635]                       is.null <- base::is.null
[17:39:25.635]                       muffled <- FALSE
[17:39:25.635]                       if (inherits(cond, "message")) {
[17:39:25.635]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.635]                         if (muffled) 
[17:39:25.635]                           invokeRestart("muffleMessage")
[17:39:25.635]                       }
[17:39:25.635]                       else if (inherits(cond, "warning")) {
[17:39:25.635]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.635]                         if (muffled) 
[17:39:25.635]                           invokeRestart("muffleWarning")
[17:39:25.635]                       }
[17:39:25.635]                       else if (inherits(cond, "condition")) {
[17:39:25.635]                         if (!is.null(pattern)) {
[17:39:25.635]                           computeRestarts <- base::computeRestarts
[17:39:25.635]                           grepl <- base::grepl
[17:39:25.635]                           restarts <- computeRestarts(cond)
[17:39:25.635]                           for (restart in restarts) {
[17:39:25.635]                             name <- restart$name
[17:39:25.635]                             if (is.null(name)) 
[17:39:25.635]                               next
[17:39:25.635]                             if (!grepl(pattern, name)) 
[17:39:25.635]                               next
[17:39:25.635]                             invokeRestart(restart)
[17:39:25.635]                             muffled <- TRUE
[17:39:25.635]                             break
[17:39:25.635]                           }
[17:39:25.635]                         }
[17:39:25.635]                       }
[17:39:25.635]                       invisible(muffled)
[17:39:25.635]                     }
[17:39:25.635]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.635]                   }
[17:39:25.635]                 }
[17:39:25.635]             }
[17:39:25.635]         }))
[17:39:25.635]     }, error = function(ex) {
[17:39:25.635]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.635]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.635]                 ...future.rng), started = ...future.startTime, 
[17:39:25.635]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.635]             version = "1.8"), class = "FutureResult")
[17:39:25.635]     }, finally = {
[17:39:25.635]         if (!identical(...future.workdir, getwd())) 
[17:39:25.635]             setwd(...future.workdir)
[17:39:25.635]         {
[17:39:25.635]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.635]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.635]             }
[17:39:25.635]             base::options(...future.oldOptions)
[17:39:25.635]             if (.Platform$OS.type == "windows") {
[17:39:25.635]                 old_names <- names(...future.oldEnvVars)
[17:39:25.635]                 envs <- base::Sys.getenv()
[17:39:25.635]                 names <- names(envs)
[17:39:25.635]                 common <- intersect(names, old_names)
[17:39:25.635]                 added <- setdiff(names, old_names)
[17:39:25.635]                 removed <- setdiff(old_names, names)
[17:39:25.635]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.635]                   envs[common]]
[17:39:25.635]                 NAMES <- toupper(changed)
[17:39:25.635]                 args <- list()
[17:39:25.635]                 for (kk in seq_along(NAMES)) {
[17:39:25.635]                   name <- changed[[kk]]
[17:39:25.635]                   NAME <- NAMES[[kk]]
[17:39:25.635]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.635]                     next
[17:39:25.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.635]                 }
[17:39:25.635]                 NAMES <- toupper(added)
[17:39:25.635]                 for (kk in seq_along(NAMES)) {
[17:39:25.635]                   name <- added[[kk]]
[17:39:25.635]                   NAME <- NAMES[[kk]]
[17:39:25.635]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.635]                     next
[17:39:25.635]                   args[[name]] <- ""
[17:39:25.635]                 }
[17:39:25.635]                 NAMES <- toupper(removed)
[17:39:25.635]                 for (kk in seq_along(NAMES)) {
[17:39:25.635]                   name <- removed[[kk]]
[17:39:25.635]                   NAME <- NAMES[[kk]]
[17:39:25.635]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.635]                     next
[17:39:25.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.635]                 }
[17:39:25.635]                 if (length(args) > 0) 
[17:39:25.635]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.635]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.635]             }
[17:39:25.635]             else {
[17:39:25.635]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.635]             }
[17:39:25.635]             {
[17:39:25.635]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.635]                   0L) {
[17:39:25.635]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.635]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.635]                   base::options(opts)
[17:39:25.635]                 }
[17:39:25.635]                 {
[17:39:25.635]                   {
[17:39:25.635]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:25.635]                     NULL
[17:39:25.635]                   }
[17:39:25.635]                   options(future.plan = NULL)
[17:39:25.635]                   if (is.na(NA_character_)) 
[17:39:25.635]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.635]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.635]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.635]                     .init = FALSE)
[17:39:25.635]                 }
[17:39:25.635]             }
[17:39:25.635]         }
[17:39:25.635]     })
[17:39:25.635]     if (TRUE) {
[17:39:25.635]         base::sink(type = "output", split = FALSE)
[17:39:25.635]         if (TRUE) {
[17:39:25.635]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.635]         }
[17:39:25.635]         else {
[17:39:25.635]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.635]         }
[17:39:25.635]         base::close(...future.stdout)
[17:39:25.635]         ...future.stdout <- NULL
[17:39:25.635]     }
[17:39:25.635]     ...future.result$conditions <- ...future.conditions
[17:39:25.635]     ...future.result$finished <- base::Sys.time()
[17:39:25.635]     ...future.result
[17:39:25.635] }
[17:39:25.637] requestCore(): workers = 2
[17:39:25.639] MulticoreFuture started
[17:39:25.640] - Launch lazy future ... done
[17:39:25.640] run() for ‘MulticoreFuture’ ... done
[17:39:25.640] result() for MulticoreFuture ...
[17:39:25.641] plan(): Setting new future strategy stack:
[17:39:25.641] List of future strategies:
[17:39:25.641] 1. sequential:
[17:39:25.641]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.641]    - tweaked: FALSE
[17:39:25.641]    - call: NULL
[17:39:25.642] plan(): nbrOfWorkers() = 1
[17:39:25.644] plan(): Setting new future strategy stack:
[17:39:25.644] List of future strategies:
[17:39:25.644] 1. multicore:
[17:39:25.644]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:25.644]    - tweaked: FALSE
[17:39:25.644]    - call: plan(strategy)
[17:39:25.649] plan(): nbrOfWorkers() = 2
[17:39:25.650] result() for MulticoreFuture ...
[17:39:25.650] result() for MulticoreFuture ... done
[17:39:25.650] result() for MulticoreFuture ... done
[17:39:25.650] result() for MulticoreFuture ...
[17:39:25.650] result() for MulticoreFuture ... done
d = 1
** Nested future assignments
[17:39:25.651] getGlobalsAndPackages() ...
[17:39:25.651] Searching for globals...
[17:39:25.656] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[17:39:25.656] Searching for globals ... DONE
[17:39:25.656] Resolving globals: FALSE
[17:39:25.657] 
[17:39:25.657] - packages: [1] ‘future’
[17:39:25.657] getGlobalsAndPackages() ... DONE
[17:39:25.657] run() for ‘Future’ ...
[17:39:25.658] - state: ‘created’
[17:39:25.658] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:25.662] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:25.662] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:25.662]   - Field: ‘label’
[17:39:25.662]   - Field: ‘local’
[17:39:25.662]   - Field: ‘owner’
[17:39:25.663]   - Field: ‘envir’
[17:39:25.663]   - Field: ‘workers’
[17:39:25.663]   - Field: ‘packages’
[17:39:25.663]   - Field: ‘gc’
[17:39:25.663]   - Field: ‘job’
[17:39:25.663]   - Field: ‘conditions’
[17:39:25.663]   - Field: ‘expr’
[17:39:25.663]   - Field: ‘uuid’
[17:39:25.663]   - Field: ‘seed’
[17:39:25.664]   - Field: ‘version’
[17:39:25.664]   - Field: ‘result’
[17:39:25.664]   - Field: ‘asynchronous’
[17:39:25.664]   - Field: ‘calls’
[17:39:25.664]   - Field: ‘globals’
[17:39:25.664]   - Field: ‘stdout’
[17:39:25.664]   - Field: ‘earlySignal’
[17:39:25.664]   - Field: ‘lazy’
[17:39:25.664]   - Field: ‘state’
[17:39:25.665] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:25.665] - Launch lazy future ...
[17:39:25.665] Packages needed by the future expression (n = 1): ‘future’
[17:39:25.665] Packages needed by future strategies (n = 0): <none>
[17:39:25.666] {
[17:39:25.666]     {
[17:39:25.666]         {
[17:39:25.666]             ...future.startTime <- base::Sys.time()
[17:39:25.666]             {
[17:39:25.666]                 {
[17:39:25.666]                   {
[17:39:25.666]                     {
[17:39:25.666]                       {
[17:39:25.666]                         base::local({
[17:39:25.666]                           has_future <- base::requireNamespace("future", 
[17:39:25.666]                             quietly = TRUE)
[17:39:25.666]                           if (has_future) {
[17:39:25.666]                             ns <- base::getNamespace("future")
[17:39:25.666]                             version <- ns[[".package"]][["version"]]
[17:39:25.666]                             if (is.null(version)) 
[17:39:25.666]                               version <- utils::packageVersion("future")
[17:39:25.666]                           }
[17:39:25.666]                           else {
[17:39:25.666]                             version <- NULL
[17:39:25.666]                           }
[17:39:25.666]                           if (!has_future || version < "1.8.0") {
[17:39:25.666]                             info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.666]                               "", base::R.version$version.string), 
[17:39:25.666]                               platform = base::sprintf("%s (%s-bit)", 
[17:39:25.666]                                 base::R.version$platform, 8 * 
[17:39:25.666]                                   base::.Machine$sizeof.pointer), 
[17:39:25.666]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.666]                                 "release", "version")], collapse = " "), 
[17:39:25.666]                               hostname = base::Sys.info()[["nodename"]])
[17:39:25.666]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.666]                               info)
[17:39:25.666]                             info <- base::paste(info, collapse = "; ")
[17:39:25.666]                             if (!has_future) {
[17:39:25.666]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.666]                                 info)
[17:39:25.666]                             }
[17:39:25.666]                             else {
[17:39:25.666]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.666]                                 info, version)
[17:39:25.666]                             }
[17:39:25.666]                             base::stop(msg)
[17:39:25.666]                           }
[17:39:25.666]                         })
[17:39:25.666]                       }
[17:39:25.666]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:25.666]                       base::options(mc.cores = 1L)
[17:39:25.666]                     }
[17:39:25.666]                     base::local({
[17:39:25.666]                       for (pkg in "future") {
[17:39:25.666]                         base::loadNamespace(pkg)
[17:39:25.666]                         base::library(pkg, character.only = TRUE)
[17:39:25.666]                       }
[17:39:25.666]                     })
[17:39:25.666]                   }
[17:39:25.666]                   ...future.strategy.old <- future::plan("list")
[17:39:25.666]                   options(future.plan = NULL)
[17:39:25.666]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.666]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.666]                 }
[17:39:25.666]                 ...future.workdir <- getwd()
[17:39:25.666]             }
[17:39:25.666]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.666]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.666]         }
[17:39:25.666]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.666]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.666]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.666]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.666]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.666]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.666]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.666]             base::names(...future.oldOptions))
[17:39:25.666]     }
[17:39:25.666]     if (FALSE) {
[17:39:25.666]     }
[17:39:25.666]     else {
[17:39:25.666]         if (TRUE) {
[17:39:25.666]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.666]                 open = "w")
[17:39:25.666]         }
[17:39:25.666]         else {
[17:39:25.666]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.666]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.666]         }
[17:39:25.666]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.666]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.666]             base::sink(type = "output", split = FALSE)
[17:39:25.666]             base::close(...future.stdout)
[17:39:25.666]         }, add = TRUE)
[17:39:25.666]     }
[17:39:25.666]     ...future.frame <- base::sys.nframe()
[17:39:25.666]     ...future.conditions <- base::list()
[17:39:25.666]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.666]     if (FALSE) {
[17:39:25.666]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.666]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.666]     }
[17:39:25.666]     ...future.result <- base::tryCatch({
[17:39:25.666]         base::withCallingHandlers({
[17:39:25.666]             ...future.value <- base::withVisible(base::local({
[17:39:25.666]                 withCallingHandlers({
[17:39:25.666]                   {
[17:39:25.666]                     b <- 1
[17:39:25.666]                     c %<-% 2
[17:39:25.666]                     d <- 3
[17:39:25.666]                     4 %->% e
[17:39:25.666]                     b + c + d + e
[17:39:25.666]                   }
[17:39:25.666]                 }, immediateCondition = function(cond) {
[17:39:25.666]                   save_rds <- function (object, pathname, ...) 
[17:39:25.666]                   {
[17:39:25.666]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:25.666]                     if (file_test("-f", pathname_tmp)) {
[17:39:25.666]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.666]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:25.666]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.666]                         fi_tmp[["mtime"]])
[17:39:25.666]                     }
[17:39:25.666]                     tryCatch({
[17:39:25.666]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:25.666]                     }, error = function(ex) {
[17:39:25.666]                       msg <- conditionMessage(ex)
[17:39:25.666]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.666]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:25.666]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.666]                         fi_tmp[["mtime"]], msg)
[17:39:25.666]                       ex$message <- msg
[17:39:25.666]                       stop(ex)
[17:39:25.666]                     })
[17:39:25.666]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:25.666]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:25.666]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:25.666]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.666]                       fi <- file.info(pathname)
[17:39:25.666]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:25.666]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.666]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:25.666]                         fi[["size"]], fi[["mtime"]])
[17:39:25.666]                       stop(msg)
[17:39:25.666]                     }
[17:39:25.666]                     invisible(pathname)
[17:39:25.666]                   }
[17:39:25.666]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:25.666]                     rootPath = tempdir()) 
[17:39:25.666]                   {
[17:39:25.666]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:25.666]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:25.666]                       tmpdir = path, fileext = ".rds")
[17:39:25.666]                     save_rds(obj, file)
[17:39:25.666]                   }
[17:39:25.666]                   saveImmediateCondition(cond, path = "/tmp/Rtmpq3kloZ/.future/immediateConditions")
[17:39:25.666]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.666]                   {
[17:39:25.666]                     inherits <- base::inherits
[17:39:25.666]                     invokeRestart <- base::invokeRestart
[17:39:25.666]                     is.null <- base::is.null
[17:39:25.666]                     muffled <- FALSE
[17:39:25.666]                     if (inherits(cond, "message")) {
[17:39:25.666]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:25.666]                       if (muffled) 
[17:39:25.666]                         invokeRestart("muffleMessage")
[17:39:25.666]                     }
[17:39:25.666]                     else if (inherits(cond, "warning")) {
[17:39:25.666]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:25.666]                       if (muffled) 
[17:39:25.666]                         invokeRestart("muffleWarning")
[17:39:25.666]                     }
[17:39:25.666]                     else if (inherits(cond, "condition")) {
[17:39:25.666]                       if (!is.null(pattern)) {
[17:39:25.666]                         computeRestarts <- base::computeRestarts
[17:39:25.666]                         grepl <- base::grepl
[17:39:25.666]                         restarts <- computeRestarts(cond)
[17:39:25.666]                         for (restart in restarts) {
[17:39:25.666]                           name <- restart$name
[17:39:25.666]                           if (is.null(name)) 
[17:39:25.666]                             next
[17:39:25.666]                           if (!grepl(pattern, name)) 
[17:39:25.666]                             next
[17:39:25.666]                           invokeRestart(restart)
[17:39:25.666]                           muffled <- TRUE
[17:39:25.666]                           break
[17:39:25.666]                         }
[17:39:25.666]                       }
[17:39:25.666]                     }
[17:39:25.666]                     invisible(muffled)
[17:39:25.666]                   }
[17:39:25.666]                   muffleCondition(cond)
[17:39:25.666]                 })
[17:39:25.666]             }))
[17:39:25.666]             future::FutureResult(value = ...future.value$value, 
[17:39:25.666]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.666]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.666]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.666]                     ...future.globalenv.names))
[17:39:25.666]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.666]         }, condition = base::local({
[17:39:25.666]             c <- base::c
[17:39:25.666]             inherits <- base::inherits
[17:39:25.666]             invokeRestart <- base::invokeRestart
[17:39:25.666]             length <- base::length
[17:39:25.666]             list <- base::list
[17:39:25.666]             seq.int <- base::seq.int
[17:39:25.666]             signalCondition <- base::signalCondition
[17:39:25.666]             sys.calls <- base::sys.calls
[17:39:25.666]             `[[` <- base::`[[`
[17:39:25.666]             `+` <- base::`+`
[17:39:25.666]             `<<-` <- base::`<<-`
[17:39:25.666]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.666]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.666]                   3L)]
[17:39:25.666]             }
[17:39:25.666]             function(cond) {
[17:39:25.666]                 is_error <- inherits(cond, "error")
[17:39:25.666]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.666]                   NULL)
[17:39:25.666]                 if (is_error) {
[17:39:25.666]                   sessionInformation <- function() {
[17:39:25.666]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.666]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.666]                       search = base::search(), system = base::Sys.info())
[17:39:25.666]                   }
[17:39:25.666]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.666]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.666]                     cond$call), session = sessionInformation(), 
[17:39:25.666]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.666]                   signalCondition(cond)
[17:39:25.666]                 }
[17:39:25.666]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.666]                 "immediateCondition"))) {
[17:39:25.666]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.666]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.666]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.666]                   if (TRUE && !signal) {
[17:39:25.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.666]                     {
[17:39:25.666]                       inherits <- base::inherits
[17:39:25.666]                       invokeRestart <- base::invokeRestart
[17:39:25.666]                       is.null <- base::is.null
[17:39:25.666]                       muffled <- FALSE
[17:39:25.666]                       if (inherits(cond, "message")) {
[17:39:25.666]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.666]                         if (muffled) 
[17:39:25.666]                           invokeRestart("muffleMessage")
[17:39:25.666]                       }
[17:39:25.666]                       else if (inherits(cond, "warning")) {
[17:39:25.666]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.666]                         if (muffled) 
[17:39:25.666]                           invokeRestart("muffleWarning")
[17:39:25.666]                       }
[17:39:25.666]                       else if (inherits(cond, "condition")) {
[17:39:25.666]                         if (!is.null(pattern)) {
[17:39:25.666]                           computeRestarts <- base::computeRestarts
[17:39:25.666]                           grepl <- base::grepl
[17:39:25.666]                           restarts <- computeRestarts(cond)
[17:39:25.666]                           for (restart in restarts) {
[17:39:25.666]                             name <- restart$name
[17:39:25.666]                             if (is.null(name)) 
[17:39:25.666]                               next
[17:39:25.666]                             if (!grepl(pattern, name)) 
[17:39:25.666]                               next
[17:39:25.666]                             invokeRestart(restart)
[17:39:25.666]                             muffled <- TRUE
[17:39:25.666]                             break
[17:39:25.666]                           }
[17:39:25.666]                         }
[17:39:25.666]                       }
[17:39:25.666]                       invisible(muffled)
[17:39:25.666]                     }
[17:39:25.666]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.666]                   }
[17:39:25.666]                 }
[17:39:25.666]                 else {
[17:39:25.666]                   if (TRUE) {
[17:39:25.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.666]                     {
[17:39:25.666]                       inherits <- base::inherits
[17:39:25.666]                       invokeRestart <- base::invokeRestart
[17:39:25.666]                       is.null <- base::is.null
[17:39:25.666]                       muffled <- FALSE
[17:39:25.666]                       if (inherits(cond, "message")) {
[17:39:25.666]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.666]                         if (muffled) 
[17:39:25.666]                           invokeRestart("muffleMessage")
[17:39:25.666]                       }
[17:39:25.666]                       else if (inherits(cond, "warning")) {
[17:39:25.666]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.666]                         if (muffled) 
[17:39:25.666]                           invokeRestart("muffleWarning")
[17:39:25.666]                       }
[17:39:25.666]                       else if (inherits(cond, "condition")) {
[17:39:25.666]                         if (!is.null(pattern)) {
[17:39:25.666]                           computeRestarts <- base::computeRestarts
[17:39:25.666]                           grepl <- base::grepl
[17:39:25.666]                           restarts <- computeRestarts(cond)
[17:39:25.666]                           for (restart in restarts) {
[17:39:25.666]                             name <- restart$name
[17:39:25.666]                             if (is.null(name)) 
[17:39:25.666]                               next
[17:39:25.666]                             if (!grepl(pattern, name)) 
[17:39:25.666]                               next
[17:39:25.666]                             invokeRestart(restart)
[17:39:25.666]                             muffled <- TRUE
[17:39:25.666]                             break
[17:39:25.666]                           }
[17:39:25.666]                         }
[17:39:25.666]                       }
[17:39:25.666]                       invisible(muffled)
[17:39:25.666]                     }
[17:39:25.666]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.666]                   }
[17:39:25.666]                 }
[17:39:25.666]             }
[17:39:25.666]         }))
[17:39:25.666]     }, error = function(ex) {
[17:39:25.666]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.666]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.666]                 ...future.rng), started = ...future.startTime, 
[17:39:25.666]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.666]             version = "1.8"), class = "FutureResult")
[17:39:25.666]     }, finally = {
[17:39:25.666]         if (!identical(...future.workdir, getwd())) 
[17:39:25.666]             setwd(...future.workdir)
[17:39:25.666]         {
[17:39:25.666]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.666]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.666]             }
[17:39:25.666]             base::options(...future.oldOptions)
[17:39:25.666]             if (.Platform$OS.type == "windows") {
[17:39:25.666]                 old_names <- names(...future.oldEnvVars)
[17:39:25.666]                 envs <- base::Sys.getenv()
[17:39:25.666]                 names <- names(envs)
[17:39:25.666]                 common <- intersect(names, old_names)
[17:39:25.666]                 added <- setdiff(names, old_names)
[17:39:25.666]                 removed <- setdiff(old_names, names)
[17:39:25.666]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.666]                   envs[common]]
[17:39:25.666]                 NAMES <- toupper(changed)
[17:39:25.666]                 args <- list()
[17:39:25.666]                 for (kk in seq_along(NAMES)) {
[17:39:25.666]                   name <- changed[[kk]]
[17:39:25.666]                   NAME <- NAMES[[kk]]
[17:39:25.666]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.666]                     next
[17:39:25.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.666]                 }
[17:39:25.666]                 NAMES <- toupper(added)
[17:39:25.666]                 for (kk in seq_along(NAMES)) {
[17:39:25.666]                   name <- added[[kk]]
[17:39:25.666]                   NAME <- NAMES[[kk]]
[17:39:25.666]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.666]                     next
[17:39:25.666]                   args[[name]] <- ""
[17:39:25.666]                 }
[17:39:25.666]                 NAMES <- toupper(removed)
[17:39:25.666]                 for (kk in seq_along(NAMES)) {
[17:39:25.666]                   name <- removed[[kk]]
[17:39:25.666]                   NAME <- NAMES[[kk]]
[17:39:25.666]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.666]                     next
[17:39:25.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.666]                 }
[17:39:25.666]                 if (length(args) > 0) 
[17:39:25.666]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.666]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.666]             }
[17:39:25.666]             else {
[17:39:25.666]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.666]             }
[17:39:25.666]             {
[17:39:25.666]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.666]                   0L) {
[17:39:25.666]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.666]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.666]                   base::options(opts)
[17:39:25.666]                 }
[17:39:25.666]                 {
[17:39:25.666]                   {
[17:39:25.666]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:25.666]                     NULL
[17:39:25.666]                   }
[17:39:25.666]                   options(future.plan = NULL)
[17:39:25.666]                   if (is.na(NA_character_)) 
[17:39:25.666]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.666]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.666]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.666]                     .init = FALSE)
[17:39:25.666]                 }
[17:39:25.666]             }
[17:39:25.666]         }
[17:39:25.666]     })
[17:39:25.666]     if (TRUE) {
[17:39:25.666]         base::sink(type = "output", split = FALSE)
[17:39:25.666]         if (TRUE) {
[17:39:25.666]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.666]         }
[17:39:25.666]         else {
[17:39:25.666]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.666]         }
[17:39:25.666]         base::close(...future.stdout)
[17:39:25.666]         ...future.stdout <- NULL
[17:39:25.666]     }
[17:39:25.666]     ...future.result$conditions <- ...future.conditions
[17:39:25.666]     ...future.result$finished <- base::Sys.time()
[17:39:25.666]     ...future.result
[17:39:25.666] }
[17:39:25.669] requestCore(): workers = 2
[17:39:25.671] MulticoreFuture started
[17:39:25.671] - Launch lazy future ... done
[17:39:25.676] run() for ‘MulticoreFuture’ ... done
[17:39:25.676] plan(): Setting new future strategy stack:
[17:39:25.676] result() for MulticoreFuture ...
[17:39:25.676] List of future strategies:
[17:39:25.676] 1. sequential:
[17:39:25.676]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.676]    - tweaked: FALSE
[17:39:25.676]    - call: NULL
[17:39:25.678] plan(): nbrOfWorkers() = 1
[17:39:25.707] plan(): Setting new future strategy stack:
[17:39:25.707] List of future strategies:
[17:39:25.707] 1. multicore:
[17:39:25.707]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:25.707]    - tweaked: FALSE
[17:39:25.707]    - call: plan(strategy)
[17:39:25.712] plan(): nbrOfWorkers() = 2
[17:39:25.714] result() for MulticoreFuture ...
[17:39:25.714] result() for MulticoreFuture ... done
[17:39:25.714] signalConditions() ...
[17:39:25.714]  - include = ‘immediateCondition’
[17:39:25.714]  - exclude = 
[17:39:25.714]  - resignal = FALSE
[17:39:25.715]  - Number of conditions: 88
[17:39:25.715] signalConditions() ... done
[17:39:25.715] result() for MulticoreFuture ... done
[17:39:25.715] result() for MulticoreFuture ...
[17:39:25.715] result() for MulticoreFuture ... done
[17:39:25.715] signalConditions() ...
[17:39:25.715]  - include = ‘immediateCondition’
[17:39:25.715]  - exclude = 
[17:39:25.716]  - resignal = FALSE
[17:39:25.716]  - Number of conditions: 88
[17:39:25.716] signalConditions() ... done
[17:39:25.716] Future state: ‘finished’
[17:39:25.716] result() for MulticoreFuture ...
[17:39:25.716] result() for MulticoreFuture ... done
[17:39:25.717] signalConditions() ...
[17:39:25.717]  - include = ‘condition’
[17:39:25.717]  - exclude = ‘immediateCondition’
[17:39:25.717]  - resignal = TRUE
[17:39:25.717]  - Number of conditions: 88
[17:39:25.717]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.679] getGlobalsAndPackages() ...
[17:39:25.717]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.680] Searching for globals...
[17:39:25.717]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.680] 
[17:39:25.718]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.681] Searching for globals ... DONE
[17:39:25.718]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.681] - globals: [0] <none>
[17:39:25.718]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.681] getGlobalsAndPackages() ... DONE
[17:39:25.718]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.682] run() for ‘Future’ ...
[17:39:25.718]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.682] - state: ‘created’
[17:39:25.719]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.683] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.719]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.683] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.719]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.683] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.719]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.683]   - Field: ‘label’
[17:39:25.719]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.684]   - Field: ‘local’
[17:39:25.719]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.684]   - Field: ‘owner’
[17:39:25.720]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.684]   - Field: ‘envir’
[17:39:25.720]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.684]   - Field: ‘packages’
[17:39:25.720]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.684]   - Field: ‘gc’
[17:39:25.720]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.685]   - Field: ‘conditions’
[17:39:25.720]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.685]   - Field: ‘expr’
[17:39:25.720]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.685]   - Field: ‘uuid’
[17:39:25.721]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.685]   - Field: ‘seed’
[17:39:25.721]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.685]   - Field: ‘version’
[17:39:25.721]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.686]   - Field: ‘result’
[17:39:25.721]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.686]   - Field: ‘asynchronous’
[17:39:25.721]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.686]   - Field: ‘calls’
[17:39:25.721]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.686]   - Field: ‘globals’
[17:39:25.722]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.686]   - Field: ‘stdout’
[17:39:25.722]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.686]   - Field: ‘earlySignal’
[17:39:25.722]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.687]   - Field: ‘lazy’
[17:39:25.722]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.687]   - Field: ‘state’
[17:39:25.722]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.687] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.722]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.687] - Launch lazy future ...
[17:39:25.722]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.688] Packages needed by the future expression (n = 0): <none>
[17:39:25.723]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.688] Packages needed by future strategies (n = 0): <none>
[17:39:25.723]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.688] {
[17:39:25.688]     {
[17:39:25.688]         {
[17:39:25.688]             ...future.startTime <- base::Sys.time()
[17:39:25.688]             {
[17:39:25.688]                 {
[17:39:25.688]                   {
[17:39:25.688]                     base::local({
[17:39:25.688]                       has_future <- base::requireNamespace("future", 
[17:39:25.688]                         quietly = TRUE)
[17:39:25.688]                       if (has_future) {
[17:39:25.688]                         ns <- base::getNamespace("future")
[17:39:25.688]                         version <- ns[[".package"]][["version"]]
[17:39:25.688]                         if (is.null(version)) 
[17:39:25.688]                           version <- utils::packageVersion("future")
[17:39:25.688]                       }
[17:39:25.688]                       else {
[17:39:25.688]                         version <- NULL
[17:39:25.688]                       }
[17:39:25.688]                       if (!has_future || version < "1.8.0") {
[17:39:25.688]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.688]                           "", base::R.version$version.string), 
[17:39:25.688]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.688]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.688]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.688]                             "release", "version")], collapse = " "), 
[17:39:25.688]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.688]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.688]                           info)
[17:39:25.688]                         info <- base::paste(info, collapse = "; ")
[17:39:25.688]                         if (!has_future) {
[17:39:25.688]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.688]                             info)
[17:39:25.688]                         }
[17:39:25.688]                         else {
[17:39:25.688]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.688]                             info, version)
[17:39:25.688]                         }
[17:39:25.688]                         base::stop(msg)
[17:39:25.688]                       }
[17:39:25.688]                     })
[17:39:25.688]                   }
[17:39:25.688]                   ...future.strategy.old <- future::plan("list")
[17:39:25.688]                   options(future.plan = NULL)
[17:39:25.688]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.688]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.688]                 }
[17:39:25.688]                 ...future.workdir <- getwd()
[17:39:25.688]             }
[17:39:25.688]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.688]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.688]         }
[17:39:25.688]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.688]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.688]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.688]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.688]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.688]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.688]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.688]             base::names(...future.oldOptions))
[17:39:25.688]     }
[17:39:25.688]     if (FALSE) {
[17:39:25.688]     }
[17:39:25.688]     else {
[17:39:25.688]         if (TRUE) {
[17:39:25.688]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.688]                 open = "w")
[17:39:25.688]         }
[17:39:25.688]         else {
[17:39:25.688]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.688]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.688]         }
[17:39:25.688]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.688]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.688]             base::sink(type = "output", split = FALSE)
[17:39:25.688]             base::close(...future.stdout)
[17:39:25.688]         }, add = TRUE)
[17:39:25.688]     }
[17:39:25.688]     ...future.frame <- base::sys.nframe()
[17:39:25.688]     ...future.conditions <- base::list()
[17:39:25.688]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.688]     if (FALSE) {
[17:39:25.688]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.688]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.688]     }
[17:39:25.688]     ...future.result <- base::tryCatch({
[17:39:25.688]         base::withCallingHandlers({
[17:39:25.688]             ...future.value <- base::withVisible(base::local(2))
[17:39:25.688]             future::FutureResult(value = ...future.value$value, 
[17:39:25.688]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.688]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.688]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.688]                     ...future.globalenv.names))
[17:39:25.688]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.688]         }, condition = base::local({
[17:39:25.688]             c <- base::c
[17:39:25.688]             inherits <- base::inherits
[17:39:25.688]             invokeRestart <- base::invokeRestart
[17:39:25.688]             length <- base::length
[17:39:25.688]             list <- base::list
[17:39:25.688]             seq.int <- base::seq.int
[17:39:25.688]             signalCondition <- base::signalCondition
[17:39:25.688]             sys.calls <- base::sys.calls
[17:39:25.688]             `[[` <- base::`[[`
[17:39:25.688]             `+` <- base::`+`
[17:39:25.688]             `<<-` <- base::`<<-`
[17:39:25.688]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.688]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.688]                   3L)]
[17:39:25.688]             }
[17:39:25.688]             function(cond) {
[17:39:25.688]                 is_error <- inherits(cond, "error")
[17:39:25.688]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.688]                   NULL)
[17:39:25.688]                 if (is_error) {
[17:39:25.688]                   sessionInformation <- function() {
[17:39:25.688]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.688]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.688]                       search = base::search(), system = base::Sys.info())
[17:39:25.688]                   }
[17:39:25.688]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.688]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.688]                     cond$call), session = sessionInformation(), 
[17:39:25.688]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.688]                   signalCondition(cond)
[17:39:25.688]                 }
[17:39:25.688]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.688]                 "immediateCondition"))) {
[17:39:25.688]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.688]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.688]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.688]                   if (TRUE && !signal) {
[17:39:25.688]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.688]                     {
[17:39:25.688]                       inherits <- base::inherits
[17:39:25.688]                       invokeRestart <- base::invokeRestart
[17:39:25.688]                       is.null <- base::is.null
[17:39:25.688]                       muffled <- FALSE
[17:39:25.688]                       if (inherits(cond, "message")) {
[17:39:25.688]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.688]                         if (muffled) 
[17:39:25.688]                           invokeRestart("muffleMessage")
[17:39:25.688]                       }
[17:39:25.688]                       else if (inherits(cond, "warning")) {
[17:39:25.688]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.688]                         if (muffled) 
[17:39:25.688]                           invokeRestart("muffleWarning")
[17:39:25.688]                       }
[17:39:25.688]                       else if (inherits(cond, "condition")) {
[17:39:25.688]                         if (!is.null(pattern)) {
[17:39:25.688]                           computeRestarts <- base::computeRestarts
[17:39:25.688]                           grepl <- base::grepl
[17:39:25.688]                           restarts <- computeRestarts(cond)
[17:39:25.688]                           for (restart in restarts) {
[17:39:25.688]                             name <- restart$name
[17:39:25.688]                             if (is.null(name)) 
[17:39:25.688]                               next
[17:39:25.688]                             if (!grepl(pattern, name)) 
[17:39:25.688]                               next
[17:39:25.688]                             invokeRestart(restart)
[17:39:25.688]                             muffled <- TRUE
[17:39:25.688]                             break
[17:39:25.688]                           }
[17:39:25.688]                         }
[17:39:25.688]                       }
[17:39:25.688]                       invisible(muffled)
[17:39:25.688]                     }
[17:39:25.688]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.688]                   }
[17:39:25.688]                 }
[17:39:25.688]                 else {
[17:39:25.688]                   if (TRUE) {
[17:39:25.688]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.688]                     {
[17:39:25.688]                       inherits <- base::inherits
[17:39:25.688]                       invokeRestart <- base::invokeRestart
[17:39:25.688]                       is.null <- base::is.null
[17:39:25.688]                       muffled <- FALSE
[17:39:25.688]                       if (inherits(cond, "message")) {
[17:39:25.688]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.688]                         if (muffled) 
[17:39:25.688]                           invokeRestart("muffleMessage")
[17:39:25.688]                       }
[17:39:25.688]                       else if (inherits(cond, "warning")) {
[17:39:25.688]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.688]                         if (muffled) 
[17:39:25.688]                           invokeRestart("muffleWarning")
[17:39:25.688]                       }
[17:39:25.688]                       else if (inherits(cond, "condition")) {
[17:39:25.688]                         if (!is.null(pattern)) {
[17:39:25.688]                           computeRestarts <- base::computeRestarts
[17:39:25.688]                           grepl <- base::grepl
[17:39:25.688]                           restarts <- computeRestarts(cond)
[17:39:25.688]                           for (restart in restarts) {
[17:39:25.688]                             name <- restart$name
[17:39:25.688]                             if (is.null(name)) 
[17:39:25.688]                               next
[17:39:25.688]                             if (!grepl(pattern, name)) 
[17:39:25.688]                               next
[17:39:25.688]                             invokeRestart(restart)
[17:39:25.688]                             muffled <- TRUE
[17:39:25.688]                             break
[17:39:25.688]                           }
[17:39:25.688]                         }
[17:39:25.688]                       }
[17:39:25.688]                       invisible(muffled)
[17:39:25.688]                     }
[17:39:25.688]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.688]                   }
[17:39:25.688]                 }
[17:39:25.688]             }
[17:39:25.688]         }))
[17:39:25.688]     }, error = function(ex) {
[17:39:25.688]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.688]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.688]                 ...future.rng), started = ...future.startTime, 
[17:39:25.688]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.688]             version = "1.8"), class = "FutureResult")
[17:39:25.688]     }, finally = {
[17:39:25.688]         if (!identical(...future.workdir, getwd())) 
[17:39:25.688]             setwd(...future.workdir)
[17:39:25.688]         {
[17:39:25.688]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.688]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.688]             }
[17:39:25.688]             base::options(...future.oldOptions)
[17:39:25.688]             if (.Platform$OS.type == "windows") {
[17:39:25.688]                 old_names <- names(...future.oldEnvVars)
[17:39:25.688]                 envs <- base::Sys.getenv()
[17:39:25.688]                 names <- names(envs)
[17:39:25.688]                 common <- intersect(names, old_names)
[17:39:25.688]                 added <- setdiff(names, old_names)
[17:39:25.688]                 removed <- setdiff(old_names, names)
[17:39:25.688]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.688]                   envs[common]]
[17:39:25.688]                 NAMES <- toupper(changed)
[17:39:25.688]                 args <- list()
[17:39:25.688]                 for (kk in seq_along(NAMES)) {
[17:39:25.688]                   name <- changed[[kk]]
[17:39:25.688]                   NAME <- NAMES[[kk]]
[17:39:25.688]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.688]                     next
[17:39:25.688]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.688]                 }
[17:39:25.688]                 NAMES <- toupper(added)
[17:39:25.688]                 for (kk in seq_along(NAMES)) {
[17:39:25.688]                   name <- added[[kk]]
[17:39:25.688]                   NAME <- NAMES[[kk]]
[17:39:25.688]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.688]                     next
[17:39:25.688]                   args[[name]] <- ""
[17:39:25.688]                 }
[17:39:25.688]                 NAMES <- toupper(removed)
[17:39:25.688]                 for (kk in seq_along(NAMES)) {
[17:39:25.688]                   name <- removed[[kk]]
[17:39:25.688]                   NAME <- NAMES[[kk]]
[17:39:25.688]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.688]                     next
[17:39:25.688]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.688]                 }
[17:39:25.688]                 if (length(args) > 0) 
[17:39:25.688]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.688]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.688]             }
[17:39:25.688]             else {
[17:39:25.688]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.688]             }
[17:39:25.688]             {
[17:39:25.688]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.688]                   0L) {
[17:39:25.688]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.688]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.688]                   base::options(opts)
[17:39:25.688]                 }
[17:39:25.688]                 {
[17:39:25.688]                   {
[17:39:25.688]                     NULL
[17:39:25.688]                     RNGkind("Mersenne-Twister")
[17:39:25.688]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.688]                       inherits = FALSE)
[17:39:25.688]                   }
[17:39:25.688]                   options(future.plan = NULL)
[17:39:25.688]                   if (is.na(NA_character_)) 
[17:39:25.688]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.688]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.688]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.688]                     .init = FALSE)
[17:39:25.688]                 }
[17:39:25.688]             }
[17:39:25.688]         }
[17:39:25.688]     })
[17:39:25.688]     if (TRUE) {
[17:39:25.688]         base::sink(type = "output", split = FALSE)
[17:39:25.688]         if (TRUE) {
[17:39:25.688]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.688]         }
[17:39:25.688]         else {
[17:39:25.688]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.688]         }
[17:39:25.688]         base::close(...future.stdout)
[17:39:25.688]         ...future.stdout <- NULL
[17:39:25.688]     }
[17:39:25.688]     ...future.result$conditions <- ...future.conditions
[17:39:25.688]     ...future.result$finished <- base::Sys.time()
[17:39:25.688]     ...future.result
[17:39:25.688] }
[17:39:25.723]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.691] plan(): Setting new future strategy stack:
[17:39:25.723]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.691] List of future strategies:
[17:39:25.691] 1. sequential:
[17:39:25.691]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.691]    - tweaked: FALSE
[17:39:25.691]    - call: NULL
[17:39:25.723]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.691] plan(): nbrOfWorkers() = 1
[17:39:25.723]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.693] plan(): Setting new future strategy stack:
[17:39:25.724]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.693] List of future strategies:
[17:39:25.693] 1. sequential:
[17:39:25.693]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.693]    - tweaked: FALSE
[17:39:25.693]    - call: NULL
[17:39:25.724]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.693] plan(): nbrOfWorkers() = 1
[17:39:25.724]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.694] SequentialFuture started (and completed)
[17:39:25.724]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.694] - Launch lazy future ... done
[17:39:25.724]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.694] run() for ‘SequentialFuture’ ... done
[17:39:25.724]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.694] getGlobalsAndPackages() ...
[17:39:25.725]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.695] Searching for globals...
[17:39:25.725]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.695] 
[17:39:25.725]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.695] Searching for globals ... DONE
[17:39:25.725]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.695] - globals: [0] <none>
[17:39:25.725]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.696] getGlobalsAndPackages() ... DONE
[17:39:25.725]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.696] run() for ‘Future’ ...
[17:39:25.726]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.696] - state: ‘created’
[17:39:25.726]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.696] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:25.726]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.697] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:25.726]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.697] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:25.726]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.697]   - Field: ‘label’
[17:39:25.726]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.697]   - Field: ‘local’
[17:39:25.727]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.697]   - Field: ‘owner’
[17:39:25.727]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.698]   - Field: ‘envir’
[17:39:25.727]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.698]   - Field: ‘packages’
[17:39:25.727]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.698]   - Field: ‘gc’
[17:39:25.727]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.698]   - Field: ‘conditions’
[17:39:25.727]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.698]   - Field: ‘expr’
[17:39:25.727]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.698]   - Field: ‘uuid’
[17:39:25.728]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.698]   - Field: ‘seed’
[17:39:25.728]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.699]   - Field: ‘version’
[17:39:25.728]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.699]   - Field: ‘result’
[17:39:25.728]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.699]   - Field: ‘asynchronous’
[17:39:25.728]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.699]   - Field: ‘calls’
[17:39:25.728]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.699]   - Field: ‘globals’
[17:39:25.729]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.699]   - Field: ‘stdout’
[17:39:25.729]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.700]   - Field: ‘earlySignal’
[17:39:25.729]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.700]   - Field: ‘lazy’
[17:39:25.729]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.700]   - Field: ‘state’
[17:39:25.729]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.700] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:25.729]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.700] - Launch lazy future ...
[17:39:25.729]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.700] Packages needed by the future expression (n = 0): <none>
[17:39:25.730]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.701] Packages needed by future strategies (n = 0): <none>
[17:39:25.730]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.701] {
[17:39:25.701]     {
[17:39:25.701]         {
[17:39:25.701]             ...future.startTime <- base::Sys.time()
[17:39:25.701]             {
[17:39:25.701]                 {
[17:39:25.701]                   {
[17:39:25.701]                     base::local({
[17:39:25.701]                       has_future <- base::requireNamespace("future", 
[17:39:25.701]                         quietly = TRUE)
[17:39:25.701]                       if (has_future) {
[17:39:25.701]                         ns <- base::getNamespace("future")
[17:39:25.701]                         version <- ns[[".package"]][["version"]]
[17:39:25.701]                         if (is.null(version)) 
[17:39:25.701]                           version <- utils::packageVersion("future")
[17:39:25.701]                       }
[17:39:25.701]                       else {
[17:39:25.701]                         version <- NULL
[17:39:25.701]                       }
[17:39:25.701]                       if (!has_future || version < "1.8.0") {
[17:39:25.701]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.701]                           "", base::R.version$version.string), 
[17:39:25.701]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:25.701]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.701]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.701]                             "release", "version")], collapse = " "), 
[17:39:25.701]                           hostname = base::Sys.info()[["nodename"]])
[17:39:25.701]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.701]                           info)
[17:39:25.701]                         info <- base::paste(info, collapse = "; ")
[17:39:25.701]                         if (!has_future) {
[17:39:25.701]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.701]                             info)
[17:39:25.701]                         }
[17:39:25.701]                         else {
[17:39:25.701]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.701]                             info, version)
[17:39:25.701]                         }
[17:39:25.701]                         base::stop(msg)
[17:39:25.701]                       }
[17:39:25.701]                     })
[17:39:25.701]                   }
[17:39:25.701]                   ...future.strategy.old <- future::plan("list")
[17:39:25.701]                   options(future.plan = NULL)
[17:39:25.701]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.701]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.701]                 }
[17:39:25.701]                 ...future.workdir <- getwd()
[17:39:25.701]             }
[17:39:25.701]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.701]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.701]         }
[17:39:25.701]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.701]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.701]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.701]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.701]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.701]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.701]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.701]             base::names(...future.oldOptions))
[17:39:25.701]     }
[17:39:25.701]     if (FALSE) {
[17:39:25.701]     }
[17:39:25.701]     else {
[17:39:25.701]         if (TRUE) {
[17:39:25.701]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.701]                 open = "w")
[17:39:25.701]         }
[17:39:25.701]         else {
[17:39:25.701]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.701]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.701]         }
[17:39:25.701]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.701]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.701]             base::sink(type = "output", split = FALSE)
[17:39:25.701]             base::close(...future.stdout)
[17:39:25.701]         }, add = TRUE)
[17:39:25.701]     }
[17:39:25.701]     ...future.frame <- base::sys.nframe()
[17:39:25.701]     ...future.conditions <- base::list()
[17:39:25.701]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.701]     if (FALSE) {
[17:39:25.701]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.701]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.701]     }
[17:39:25.701]     ...future.result <- base::tryCatch({
[17:39:25.701]         base::withCallingHandlers({
[17:39:25.701]             ...future.value <- base::withVisible(base::local(4))
[17:39:25.701]             future::FutureResult(value = ...future.value$value, 
[17:39:25.701]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.701]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.701]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.701]                     ...future.globalenv.names))
[17:39:25.701]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.701]         }, condition = base::local({
[17:39:25.701]             c <- base::c
[17:39:25.701]             inherits <- base::inherits
[17:39:25.701]             invokeRestart <- base::invokeRestart
[17:39:25.701]             length <- base::length
[17:39:25.701]             list <- base::list
[17:39:25.701]             seq.int <- base::seq.int
[17:39:25.701]             signalCondition <- base::signalCondition
[17:39:25.701]             sys.calls <- base::sys.calls
[17:39:25.701]             `[[` <- base::`[[`
[17:39:25.701]             `+` <- base::`+`
[17:39:25.701]             `<<-` <- base::`<<-`
[17:39:25.701]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.701]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.701]                   3L)]
[17:39:25.701]             }
[17:39:25.701]             function(cond) {
[17:39:25.701]                 is_error <- inherits(cond, "error")
[17:39:25.701]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.701]                   NULL)
[17:39:25.701]                 if (is_error) {
[17:39:25.701]                   sessionInformation <- function() {
[17:39:25.701]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.701]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.701]                       search = base::search(), system = base::Sys.info())
[17:39:25.701]                   }
[17:39:25.701]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.701]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.701]                     cond$call), session = sessionInformation(), 
[17:39:25.701]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.701]                   signalCondition(cond)
[17:39:25.701]                 }
[17:39:25.701]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.701]                 "immediateCondition"))) {
[17:39:25.701]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.701]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.701]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.701]                   if (TRUE && !signal) {
[17:39:25.701]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.701]                     {
[17:39:25.701]                       inherits <- base::inherits
[17:39:25.701]                       invokeRestart <- base::invokeRestart
[17:39:25.701]                       is.null <- base::is.null
[17:39:25.701]                       muffled <- FALSE
[17:39:25.701]                       if (inherits(cond, "message")) {
[17:39:25.701]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.701]                         if (muffled) 
[17:39:25.701]                           invokeRestart("muffleMessage")
[17:39:25.701]                       }
[17:39:25.701]                       else if (inherits(cond, "warning")) {
[17:39:25.701]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.701]                         if (muffled) 
[17:39:25.701]                           invokeRestart("muffleWarning")
[17:39:25.701]                       }
[17:39:25.701]                       else if (inherits(cond, "condition")) {
[17:39:25.701]                         if (!is.null(pattern)) {
[17:39:25.701]                           computeRestarts <- base::computeRestarts
[17:39:25.701]                           grepl <- base::grepl
[17:39:25.701]                           restarts <- computeRestarts(cond)
[17:39:25.701]                           for (restart in restarts) {
[17:39:25.701]                             name <- restart$name
[17:39:25.701]                             if (is.null(name)) 
[17:39:25.701]                               next
[17:39:25.701]                             if (!grepl(pattern, name)) 
[17:39:25.701]                               next
[17:39:25.701]                             invokeRestart(restart)
[17:39:25.701]                             muffled <- TRUE
[17:39:25.701]                             break
[17:39:25.701]                           }
[17:39:25.701]                         }
[17:39:25.701]                       }
[17:39:25.701]                       invisible(muffled)
[17:39:25.701]                     }
[17:39:25.701]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.701]                   }
[17:39:25.701]                 }
[17:39:25.701]                 else {
[17:39:25.701]                   if (TRUE) {
[17:39:25.701]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.701]                     {
[17:39:25.701]                       inherits <- base::inherits
[17:39:25.701]                       invokeRestart <- base::invokeRestart
[17:39:25.701]                       is.null <- base::is.null
[17:39:25.701]                       muffled <- FALSE
[17:39:25.701]                       if (inherits(cond, "message")) {
[17:39:25.701]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.701]                         if (muffled) 
[17:39:25.701]                           invokeRestart("muffleMessage")
[17:39:25.701]                       }
[17:39:25.701]                       else if (inherits(cond, "warning")) {
[17:39:25.701]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.701]                         if (muffled) 
[17:39:25.701]                           invokeRestart("muffleWarning")
[17:39:25.701]                       }
[17:39:25.701]                       else if (inherits(cond, "condition")) {
[17:39:25.701]                         if (!is.null(pattern)) {
[17:39:25.701]                           computeRestarts <- base::computeRestarts
[17:39:25.701]                           grepl <- base::grepl
[17:39:25.701]                           restarts <- computeRestarts(cond)
[17:39:25.701]                           for (restart in restarts) {
[17:39:25.701]                             name <- restart$name
[17:39:25.701]                             if (is.null(name)) 
[17:39:25.701]                               next
[17:39:25.701]                             if (!grepl(pattern, name)) 
[17:39:25.701]                               next
[17:39:25.701]                             invokeRestart(restart)
[17:39:25.701]                             muffled <- TRUE
[17:39:25.701]                             break
[17:39:25.701]                           }
[17:39:25.701]                         }
[17:39:25.701]                       }
[17:39:25.701]                       invisible(muffled)
[17:39:25.701]                     }
[17:39:25.701]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.701]                   }
[17:39:25.701]                 }
[17:39:25.701]             }
[17:39:25.701]         }))
[17:39:25.701]     }, error = function(ex) {
[17:39:25.701]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.701]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.701]                 ...future.rng), started = ...future.startTime, 
[17:39:25.701]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.701]             version = "1.8"), class = "FutureResult")
[17:39:25.701]     }, finally = {
[17:39:25.701]         if (!identical(...future.workdir, getwd())) 
[17:39:25.701]             setwd(...future.workdir)
[17:39:25.701]         {
[17:39:25.701]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.701]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.701]             }
[17:39:25.701]             base::options(...future.oldOptions)
[17:39:25.701]             if (.Platform$OS.type == "windows") {
[17:39:25.701]                 old_names <- names(...future.oldEnvVars)
[17:39:25.701]                 envs <- base::Sys.getenv()
[17:39:25.701]                 names <- names(envs)
[17:39:25.701]                 common <- intersect(names, old_names)
[17:39:25.701]                 added <- setdiff(names, old_names)
[17:39:25.701]                 removed <- setdiff(old_names, names)
[17:39:25.701]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.701]                   envs[common]]
[17:39:25.701]                 NAMES <- toupper(changed)
[17:39:25.701]                 args <- list()
[17:39:25.701]                 for (kk in seq_along(NAMES)) {
[17:39:25.701]                   name <- changed[[kk]]
[17:39:25.701]                   NAME <- NAMES[[kk]]
[17:39:25.701]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.701]                     next
[17:39:25.701]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.701]                 }
[17:39:25.701]                 NAMES <- toupper(added)
[17:39:25.701]                 for (kk in seq_along(NAMES)) {
[17:39:25.701]                   name <- added[[kk]]
[17:39:25.701]                   NAME <- NAMES[[kk]]
[17:39:25.701]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.701]                     next
[17:39:25.701]                   args[[name]] <- ""
[17:39:25.701]                 }
[17:39:25.701]                 NAMES <- toupper(removed)
[17:39:25.701]                 for (kk in seq_along(NAMES)) {
[17:39:25.701]                   name <- removed[[kk]]
[17:39:25.701]                   NAME <- NAMES[[kk]]
[17:39:25.701]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.701]                     next
[17:39:25.701]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.701]                 }
[17:39:25.701]                 if (length(args) > 0) 
[17:39:25.701]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.701]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.701]             }
[17:39:25.701]             else {
[17:39:25.701]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.701]             }
[17:39:25.701]             {
[17:39:25.701]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.701]                   0L) {
[17:39:25.701]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.701]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.701]                   base::options(opts)
[17:39:25.701]                 }
[17:39:25.701]                 {
[17:39:25.701]                   {
[17:39:25.701]                     NULL
[17:39:25.701]                     RNGkind("Mersenne-Twister")
[17:39:25.701]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:25.701]                       inherits = FALSE)
[17:39:25.701]                   }
[17:39:25.701]                   options(future.plan = NULL)
[17:39:25.701]                   if (is.na(NA_character_)) 
[17:39:25.701]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.701]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.701]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.701]                     .init = FALSE)
[17:39:25.701]                 }
[17:39:25.701]             }
[17:39:25.701]         }
[17:39:25.701]     })
[17:39:25.701]     if (TRUE) {
[17:39:25.701]         base::sink(type = "output", split = FALSE)
[17:39:25.701]         if (TRUE) {
[17:39:25.701]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.701]         }
[17:39:25.701]         else {
[17:39:25.701]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.701]         }
[17:39:25.701]         base::close(...future.stdout)
[17:39:25.701]         ...future.stdout <- NULL
[17:39:25.701]     }
[17:39:25.701]     ...future.result$conditions <- ...future.conditions
[17:39:25.701]     ...future.result$finished <- base::Sys.time()
[17:39:25.701]     ...future.result
[17:39:25.701] }
[17:39:25.730]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.703] plan(): Setting new future strategy stack:
[17:39:25.730]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.703] List of future strategies:
[17:39:25.703] 1. sequential:
[17:39:25.703]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.703]    - tweaked: FALSE
[17:39:25.703]    - call: NULL
[17:39:25.730]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.704] plan(): nbrOfWorkers() = 1
[17:39:25.730]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.705] plan(): Setting new future strategy stack:
[17:39:25.731]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.705] List of future strategies:
[17:39:25.705] 1. sequential:
[17:39:25.705]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.705]    - tweaked: FALSE
[17:39:25.705]    - call: NULL
[17:39:25.731]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.706] plan(): nbrOfWorkers() = 1
[17:39:25.731]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.706] SequentialFuture started (and completed)
[17:39:25.731]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.706] - Launch lazy future ... done
[17:39:25.731]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:25.707] run() for ‘SequentialFuture’ ... done
[17:39:25.731] signalConditions() ... done
a = 10
[17:39:25.732] getGlobalsAndPackages() ...
[17:39:25.732] Searching for globals...
[17:39:25.733] - globals found: [3] ‘{’, ‘+’, ‘a’
[17:39:25.733] Searching for globals ... DONE
[17:39:25.733] Resolving globals: FALSE
[17:39:25.734] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:25.734] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:25.734] - globals: [1] ‘a’
[17:39:25.735] 
[17:39:25.735] getGlobalsAndPackages() ... DONE
[17:39:25.735] run() for ‘Future’ ...
[17:39:25.735] - state: ‘created’
[17:39:25.735] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:25.742] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:25.742] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:25.742]   - Field: ‘label’
[17:39:25.742]   - Field: ‘local’
[17:39:25.742]   - Field: ‘owner’
[17:39:25.742]   - Field: ‘envir’
[17:39:25.742]   - Field: ‘workers’
[17:39:25.742]   - Field: ‘packages’
[17:39:25.743]   - Field: ‘gc’
[17:39:25.743]   - Field: ‘job’
[17:39:25.743]   - Field: ‘conditions’
[17:39:25.743]   - Field: ‘expr’
[17:39:25.743]   - Field: ‘uuid’
[17:39:25.743]   - Field: ‘seed’
[17:39:25.743]   - Field: ‘version’
[17:39:25.743]   - Field: ‘result’
[17:39:25.743]   - Field: ‘asynchronous’
[17:39:25.743]   - Field: ‘calls’
[17:39:25.744]   - Field: ‘globals’
[17:39:25.744]   - Field: ‘stdout’
[17:39:25.744]   - Field: ‘earlySignal’
[17:39:25.744]   - Field: ‘lazy’
[17:39:25.744]   - Field: ‘state’
[17:39:25.744] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:25.744] - Launch lazy future ...
[17:39:25.744] Packages needed by the future expression (n = 0): <none>
[17:39:25.745] Packages needed by future strategies (n = 0): <none>
[17:39:25.745] {
[17:39:25.745]     {
[17:39:25.745]         {
[17:39:25.745]             ...future.startTime <- base::Sys.time()
[17:39:25.745]             {
[17:39:25.745]                 {
[17:39:25.745]                   {
[17:39:25.745]                     {
[17:39:25.745]                       base::local({
[17:39:25.745]                         has_future <- base::requireNamespace("future", 
[17:39:25.745]                           quietly = TRUE)
[17:39:25.745]                         if (has_future) {
[17:39:25.745]                           ns <- base::getNamespace("future")
[17:39:25.745]                           version <- ns[[".package"]][["version"]]
[17:39:25.745]                           if (is.null(version)) 
[17:39:25.745]                             version <- utils::packageVersion("future")
[17:39:25.745]                         }
[17:39:25.745]                         else {
[17:39:25.745]                           version <- NULL
[17:39:25.745]                         }
[17:39:25.745]                         if (!has_future || version < "1.8.0") {
[17:39:25.745]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:25.745]                             "", base::R.version$version.string), 
[17:39:25.745]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:25.745]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:25.745]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:25.745]                               "release", "version")], collapse = " "), 
[17:39:25.745]                             hostname = base::Sys.info()[["nodename"]])
[17:39:25.745]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:25.745]                             info)
[17:39:25.745]                           info <- base::paste(info, collapse = "; ")
[17:39:25.745]                           if (!has_future) {
[17:39:25.745]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:25.745]                               info)
[17:39:25.745]                           }
[17:39:25.745]                           else {
[17:39:25.745]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:25.745]                               info, version)
[17:39:25.745]                           }
[17:39:25.745]                           base::stop(msg)
[17:39:25.745]                         }
[17:39:25.745]                       })
[17:39:25.745]                     }
[17:39:25.745]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:25.745]                     base::options(mc.cores = 1L)
[17:39:25.745]                   }
[17:39:25.745]                   ...future.strategy.old <- future::plan("list")
[17:39:25.745]                   options(future.plan = NULL)
[17:39:25.745]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.745]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:25.745]                 }
[17:39:25.745]                 ...future.workdir <- getwd()
[17:39:25.745]             }
[17:39:25.745]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:25.745]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:25.745]         }
[17:39:25.745]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:25.745]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:25.745]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:25.745]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:25.745]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:25.745]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:25.745]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:25.745]             base::names(...future.oldOptions))
[17:39:25.745]     }
[17:39:25.745]     if (FALSE) {
[17:39:25.745]     }
[17:39:25.745]     else {
[17:39:25.745]         if (TRUE) {
[17:39:25.745]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:25.745]                 open = "w")
[17:39:25.745]         }
[17:39:25.745]         else {
[17:39:25.745]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:25.745]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:25.745]         }
[17:39:25.745]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:25.745]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:25.745]             base::sink(type = "output", split = FALSE)
[17:39:25.745]             base::close(...future.stdout)
[17:39:25.745]         }, add = TRUE)
[17:39:25.745]     }
[17:39:25.745]     ...future.frame <- base::sys.nframe()
[17:39:25.745]     ...future.conditions <- base::list()
[17:39:25.745]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:25.745]     if (FALSE) {
[17:39:25.745]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:25.745]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:25.745]     }
[17:39:25.745]     ...future.result <- base::tryCatch({
[17:39:25.745]         base::withCallingHandlers({
[17:39:25.745]             ...future.value <- base::withVisible(base::local({
[17:39:25.745]                 withCallingHandlers({
[17:39:25.745]                   {
[17:39:25.745]                     a + 1
[17:39:25.745]                   }
[17:39:25.745]                 }, immediateCondition = function(cond) {
[17:39:25.745]                   save_rds <- function (object, pathname, ...) 
[17:39:25.745]                   {
[17:39:25.745]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:25.745]                     if (file_test("-f", pathname_tmp)) {
[17:39:25.745]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.745]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:25.745]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.745]                         fi_tmp[["mtime"]])
[17:39:25.745]                     }
[17:39:25.745]                     tryCatch({
[17:39:25.745]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:25.745]                     }, error = function(ex) {
[17:39:25.745]                       msg <- conditionMessage(ex)
[17:39:25.745]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.745]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:25.745]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.745]                         fi_tmp[["mtime"]], msg)
[17:39:25.745]                       ex$message <- msg
[17:39:25.745]                       stop(ex)
[17:39:25.745]                     })
[17:39:25.745]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:25.745]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:25.745]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:25.745]                       fi_tmp <- file.info(pathname_tmp)
[17:39:25.745]                       fi <- file.info(pathname)
[17:39:25.745]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:25.745]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:25.745]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:25.745]                         fi[["size"]], fi[["mtime"]])
[17:39:25.745]                       stop(msg)
[17:39:25.745]                     }
[17:39:25.745]                     invisible(pathname)
[17:39:25.745]                   }
[17:39:25.745]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:25.745]                     rootPath = tempdir()) 
[17:39:25.745]                   {
[17:39:25.745]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:25.745]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:25.745]                       tmpdir = path, fileext = ".rds")
[17:39:25.745]                     save_rds(obj, file)
[17:39:25.745]                   }
[17:39:25.745]                   saveImmediateCondition(cond, path = "/tmp/Rtmpq3kloZ/.future/immediateConditions")
[17:39:25.745]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.745]                   {
[17:39:25.745]                     inherits <- base::inherits
[17:39:25.745]                     invokeRestart <- base::invokeRestart
[17:39:25.745]                     is.null <- base::is.null
[17:39:25.745]                     muffled <- FALSE
[17:39:25.745]                     if (inherits(cond, "message")) {
[17:39:25.745]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:25.745]                       if (muffled) 
[17:39:25.745]                         invokeRestart("muffleMessage")
[17:39:25.745]                     }
[17:39:25.745]                     else if (inherits(cond, "warning")) {
[17:39:25.745]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:25.745]                       if (muffled) 
[17:39:25.745]                         invokeRestart("muffleWarning")
[17:39:25.745]                     }
[17:39:25.745]                     else if (inherits(cond, "condition")) {
[17:39:25.745]                       if (!is.null(pattern)) {
[17:39:25.745]                         computeRestarts <- base::computeRestarts
[17:39:25.745]                         grepl <- base::grepl
[17:39:25.745]                         restarts <- computeRestarts(cond)
[17:39:25.745]                         for (restart in restarts) {
[17:39:25.745]                           name <- restart$name
[17:39:25.745]                           if (is.null(name)) 
[17:39:25.745]                             next
[17:39:25.745]                           if (!grepl(pattern, name)) 
[17:39:25.745]                             next
[17:39:25.745]                           invokeRestart(restart)
[17:39:25.745]                           muffled <- TRUE
[17:39:25.745]                           break
[17:39:25.745]                         }
[17:39:25.745]                       }
[17:39:25.745]                     }
[17:39:25.745]                     invisible(muffled)
[17:39:25.745]                   }
[17:39:25.745]                   muffleCondition(cond)
[17:39:25.745]                 })
[17:39:25.745]             }))
[17:39:25.745]             future::FutureResult(value = ...future.value$value, 
[17:39:25.745]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.745]                   ...future.rng), globalenv = if (FALSE) 
[17:39:25.745]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:25.745]                     ...future.globalenv.names))
[17:39:25.745]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:25.745]         }, condition = base::local({
[17:39:25.745]             c <- base::c
[17:39:25.745]             inherits <- base::inherits
[17:39:25.745]             invokeRestart <- base::invokeRestart
[17:39:25.745]             length <- base::length
[17:39:25.745]             list <- base::list
[17:39:25.745]             seq.int <- base::seq.int
[17:39:25.745]             signalCondition <- base::signalCondition
[17:39:25.745]             sys.calls <- base::sys.calls
[17:39:25.745]             `[[` <- base::`[[`
[17:39:25.745]             `+` <- base::`+`
[17:39:25.745]             `<<-` <- base::`<<-`
[17:39:25.745]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:25.745]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:25.745]                   3L)]
[17:39:25.745]             }
[17:39:25.745]             function(cond) {
[17:39:25.745]                 is_error <- inherits(cond, "error")
[17:39:25.745]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:25.745]                   NULL)
[17:39:25.745]                 if (is_error) {
[17:39:25.745]                   sessionInformation <- function() {
[17:39:25.745]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:25.745]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:25.745]                       search = base::search(), system = base::Sys.info())
[17:39:25.745]                   }
[17:39:25.745]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.745]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:25.745]                     cond$call), session = sessionInformation(), 
[17:39:25.745]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:25.745]                   signalCondition(cond)
[17:39:25.745]                 }
[17:39:25.745]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:25.745]                 "immediateCondition"))) {
[17:39:25.745]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:25.745]                   ...future.conditions[[length(...future.conditions) + 
[17:39:25.745]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:25.745]                   if (TRUE && !signal) {
[17:39:25.745]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.745]                     {
[17:39:25.745]                       inherits <- base::inherits
[17:39:25.745]                       invokeRestart <- base::invokeRestart
[17:39:25.745]                       is.null <- base::is.null
[17:39:25.745]                       muffled <- FALSE
[17:39:25.745]                       if (inherits(cond, "message")) {
[17:39:25.745]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.745]                         if (muffled) 
[17:39:25.745]                           invokeRestart("muffleMessage")
[17:39:25.745]                       }
[17:39:25.745]                       else if (inherits(cond, "warning")) {
[17:39:25.745]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.745]                         if (muffled) 
[17:39:25.745]                           invokeRestart("muffleWarning")
[17:39:25.745]                       }
[17:39:25.745]                       else if (inherits(cond, "condition")) {
[17:39:25.745]                         if (!is.null(pattern)) {
[17:39:25.745]                           computeRestarts <- base::computeRestarts
[17:39:25.745]                           grepl <- base::grepl
[17:39:25.745]                           restarts <- computeRestarts(cond)
[17:39:25.745]                           for (restart in restarts) {
[17:39:25.745]                             name <- restart$name
[17:39:25.745]                             if (is.null(name)) 
[17:39:25.745]                               next
[17:39:25.745]                             if (!grepl(pattern, name)) 
[17:39:25.745]                               next
[17:39:25.745]                             invokeRestart(restart)
[17:39:25.745]                             muffled <- TRUE
[17:39:25.745]                             break
[17:39:25.745]                           }
[17:39:25.745]                         }
[17:39:25.745]                       }
[17:39:25.745]                       invisible(muffled)
[17:39:25.745]                     }
[17:39:25.745]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.745]                   }
[17:39:25.745]                 }
[17:39:25.745]                 else {
[17:39:25.745]                   if (TRUE) {
[17:39:25.745]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:25.745]                     {
[17:39:25.745]                       inherits <- base::inherits
[17:39:25.745]                       invokeRestart <- base::invokeRestart
[17:39:25.745]                       is.null <- base::is.null
[17:39:25.745]                       muffled <- FALSE
[17:39:25.745]                       if (inherits(cond, "message")) {
[17:39:25.745]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:25.745]                         if (muffled) 
[17:39:25.745]                           invokeRestart("muffleMessage")
[17:39:25.745]                       }
[17:39:25.745]                       else if (inherits(cond, "warning")) {
[17:39:25.745]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:25.745]                         if (muffled) 
[17:39:25.745]                           invokeRestart("muffleWarning")
[17:39:25.745]                       }
[17:39:25.745]                       else if (inherits(cond, "condition")) {
[17:39:25.745]                         if (!is.null(pattern)) {
[17:39:25.745]                           computeRestarts <- base::computeRestarts
[17:39:25.745]                           grepl <- base::grepl
[17:39:25.745]                           restarts <- computeRestarts(cond)
[17:39:25.745]                           for (restart in restarts) {
[17:39:25.745]                             name <- restart$name
[17:39:25.745]                             if (is.null(name)) 
[17:39:25.745]                               next
[17:39:25.745]                             if (!grepl(pattern, name)) 
[17:39:25.745]                               next
[17:39:25.745]                             invokeRestart(restart)
[17:39:25.745]                             muffled <- TRUE
[17:39:25.745]                             break
[17:39:25.745]                           }
[17:39:25.745]                         }
[17:39:25.745]                       }
[17:39:25.745]                       invisible(muffled)
[17:39:25.745]                     }
[17:39:25.745]                     muffleCondition(cond, pattern = "^muffle")
[17:39:25.745]                   }
[17:39:25.745]                 }
[17:39:25.745]             }
[17:39:25.745]         }))
[17:39:25.745]     }, error = function(ex) {
[17:39:25.745]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:25.745]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:25.745]                 ...future.rng), started = ...future.startTime, 
[17:39:25.745]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:25.745]             version = "1.8"), class = "FutureResult")
[17:39:25.745]     }, finally = {
[17:39:25.745]         if (!identical(...future.workdir, getwd())) 
[17:39:25.745]             setwd(...future.workdir)
[17:39:25.745]         {
[17:39:25.745]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:25.745]                 ...future.oldOptions$nwarnings <- NULL
[17:39:25.745]             }
[17:39:25.745]             base::options(...future.oldOptions)
[17:39:25.745]             if (.Platform$OS.type == "windows") {
[17:39:25.745]                 old_names <- names(...future.oldEnvVars)
[17:39:25.745]                 envs <- base::Sys.getenv()
[17:39:25.745]                 names <- names(envs)
[17:39:25.745]                 common <- intersect(names, old_names)
[17:39:25.745]                 added <- setdiff(names, old_names)
[17:39:25.745]                 removed <- setdiff(old_names, names)
[17:39:25.745]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:25.745]                   envs[common]]
[17:39:25.745]                 NAMES <- toupper(changed)
[17:39:25.745]                 args <- list()
[17:39:25.745]                 for (kk in seq_along(NAMES)) {
[17:39:25.745]                   name <- changed[[kk]]
[17:39:25.745]                   NAME <- NAMES[[kk]]
[17:39:25.745]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.745]                     next
[17:39:25.745]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.745]                 }
[17:39:25.745]                 NAMES <- toupper(added)
[17:39:25.745]                 for (kk in seq_along(NAMES)) {
[17:39:25.745]                   name <- added[[kk]]
[17:39:25.745]                   NAME <- NAMES[[kk]]
[17:39:25.745]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.745]                     next
[17:39:25.745]                   args[[name]] <- ""
[17:39:25.745]                 }
[17:39:25.745]                 NAMES <- toupper(removed)
[17:39:25.745]                 for (kk in seq_along(NAMES)) {
[17:39:25.745]                   name <- removed[[kk]]
[17:39:25.745]                   NAME <- NAMES[[kk]]
[17:39:25.745]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:25.745]                     next
[17:39:25.745]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:25.745]                 }
[17:39:25.745]                 if (length(args) > 0) 
[17:39:25.745]                   base::do.call(base::Sys.setenv, args = args)
[17:39:25.745]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:25.745]             }
[17:39:25.745]             else {
[17:39:25.745]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:25.745]             }
[17:39:25.745]             {
[17:39:25.745]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:25.745]                   0L) {
[17:39:25.745]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:25.745]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:25.745]                   base::options(opts)
[17:39:25.745]                 }
[17:39:25.745]                 {
[17:39:25.745]                   {
[17:39:25.745]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:25.745]                     NULL
[17:39:25.745]                   }
[17:39:25.745]                   options(future.plan = NULL)
[17:39:25.745]                   if (is.na(NA_character_)) 
[17:39:25.745]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:25.745]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:25.745]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:25.745]                     .init = FALSE)
[17:39:25.745]                 }
[17:39:25.745]             }
[17:39:25.745]         }
[17:39:25.745]     })
[17:39:25.745]     if (TRUE) {
[17:39:25.745]         base::sink(type = "output", split = FALSE)
[17:39:25.745]         if (TRUE) {
[17:39:25.745]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:25.745]         }
[17:39:25.745]         else {
[17:39:25.745]             ...future.result["stdout"] <- base::list(NULL)
[17:39:25.745]         }
[17:39:25.745]         base::close(...future.stdout)
[17:39:25.745]         ...future.stdout <- NULL
[17:39:25.745]     }
[17:39:25.745]     ...future.result$conditions <- ...future.conditions
[17:39:25.745]     ...future.result$finished <- base::Sys.time()
[17:39:25.745]     ...future.result
[17:39:25.745] }
[17:39:25.747] assign_globals() ...
[17:39:25.747] List of 1
[17:39:25.747]  $ a: num 10
[17:39:25.747]  - attr(*, "where")=List of 1
[17:39:25.747]   ..$ a:<environment: R_EmptyEnv> 
[17:39:25.747]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:25.747]  - attr(*, "resolved")= logi FALSE
[17:39:25.747]  - attr(*, "total_size")= num 56
[17:39:25.747]  - attr(*, "already-done")= logi TRUE
[17:39:25.750] - copied ‘a’ to environment
[17:39:25.751] assign_globals() ... done
[17:39:25.751] requestCore(): workers = 2
[17:39:25.753] MulticoreFuture started
[17:39:25.753] - Launch lazy future ... done
[17:39:25.754] run() for ‘MulticoreFuture’ ... done
[17:39:25.754] result() for MulticoreFuture ...
[17:39:25.754] plan(): Setting new future strategy stack:
[17:39:25.754] List of future strategies:
[17:39:25.754] 1. sequential:
[17:39:25.754]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:25.754]    - tweaked: FALSE
[17:39:25.754]    - call: NULL
[17:39:25.756] plan(): nbrOfWorkers() = 1
[17:39:25.758] plan(): Setting new future strategy stack:
[17:39:25.758] List of future strategies:
[17:39:25.758] 1. multicore:
[17:39:25.758]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:25.758]    - tweaked: FALSE
[17:39:25.758]    - call: plan(strategy)
[17:39:25.763] plan(): nbrOfWorkers() = 2
[17:39:25.765] result() for MulticoreFuture ...
[17:39:25.765] result() for MulticoreFuture ... done
[17:39:25.765] result() for MulticoreFuture ... done
[17:39:25.765] result() for MulticoreFuture ...
[17:39:25.765] result() for MulticoreFuture ... done
b = 11
*** %<-% with ‘multicore’ futures ... DONE
*** %<-% with ‘multisession’ futures ...
[17:39:25.766] plan(): Setting new future strategy stack:
[17:39:25.766] List of future strategies:
[17:39:25.766] 1. multisession:
[17:39:25.766]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:25.766]    - tweaked: FALSE
[17:39:25.766]    - call: plan(strategy)
[17:39:25.767] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:39:25.767] multisession:
[17:39:25.767] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:25.767] - tweaked: FALSE
[17:39:25.767] - call: plan(strategy)
[17:39:25.774] getGlobalsAndPackages() ...
[17:39:25.775] Not searching for globals
[17:39:25.775] - globals: [0] <none>
[17:39:25.775] getGlobalsAndPackages() ... DONE
[17:39:25.776] [local output] makeClusterPSOCK() ...
[17:39:25.825] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:39:25.826] [local output] Base port: 11998
[17:39:25.826] [local output] Getting setup options for 2 cluster nodes ...
[17:39:25.826] [local output]  - Node 1 of 2 ...
[17:39:25.827] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:25.828] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpq3kloZ/worker.rank=1.parallelly.parent=41208.a0f83a726861.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpq3kloZ/worker.rank=1.parallelly.parent=41208.a0f83a726861.pid")'’
[17:39:26.018] - Possible to infer worker's PID: TRUE
[17:39:26.019] [local output] Rscript port: 11998

[17:39:26.019] [local output]  - Node 2 of 2 ...
[17:39:26.019] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:26.020] [local output] Rscript port: 11998

[17:39:26.020] [local output] Getting setup options for 2 cluster nodes ... done
[17:39:26.020] [local output]  - Parallel setup requested for some PSOCK nodes
[17:39:26.021] [local output] Setting up PSOCK nodes in parallel
[17:39:26.021] List of 36
[17:39:26.021]  $ worker          : chr "localhost"
[17:39:26.021]   ..- attr(*, "localhost")= logi TRUE
[17:39:26.021]  $ master          : chr "localhost"
[17:39:26.021]  $ port            : int 11998
[17:39:26.021]  $ connectTimeout  : num 120
[17:39:26.021]  $ timeout         : num 2592000
[17:39:26.021]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:39:26.021]  $ homogeneous     : logi TRUE
[17:39:26.021]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:39:26.021]  $ rscript_envs    : NULL
[17:39:26.021]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:26.021]  $ rscript_startup : NULL
[17:39:26.021]  $ rscript_sh      : chr "sh"
[17:39:26.021]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:26.021]  $ methods         : logi TRUE
[17:39:26.021]  $ socketOptions   : chr "no-delay"
[17:39:26.021]  $ useXDR          : logi FALSE
[17:39:26.021]  $ outfile         : chr "/dev/null"
[17:39:26.021]  $ renice          : int NA
[17:39:26.021]  $ rshcmd          : NULL
[17:39:26.021]  $ user            : chr(0) 
[17:39:26.021]  $ revtunnel       : logi FALSE
[17:39:26.021]  $ rshlogfile      : NULL
[17:39:26.021]  $ rshopts         : chr(0) 
[17:39:26.021]  $ rank            : int 1
[17:39:26.021]  $ manual          : logi FALSE
[17:39:26.021]  $ dryrun          : logi FALSE
[17:39:26.021]  $ quiet           : logi FALSE
[17:39:26.021]  $ setup_strategy  : chr "parallel"
[17:39:26.021]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:26.021]  $ pidfile         : chr "/tmp/Rtmpq3kloZ/worker.rank=1.parallelly.parent=41208.a0f83a726861.pid"
[17:39:26.021]  $ rshcmd_label    : NULL
[17:39:26.021]  $ rsh_call        : NULL
[17:39:26.021]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:26.021]  $ localMachine    : logi TRUE
[17:39:26.021]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:39:26.021]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:39:26.021]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:39:26.021]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:39:26.021]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:39:26.021]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:39:26.021]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:39:26.021]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:39:26.021]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:39:26.021]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:39:26.021]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:39:26.021]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:39:26.021]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:39:26.021]  $ arguments       :List of 28
[17:39:26.021]   ..$ worker          : chr "localhost"
[17:39:26.021]   ..$ master          : NULL
[17:39:26.021]   ..$ port            : int 11998
[17:39:26.021]   ..$ connectTimeout  : num 120
[17:39:26.021]   ..$ timeout         : num 2592000
[17:39:26.021]   ..$ rscript         : NULL
[17:39:26.021]   ..$ homogeneous     : NULL
[17:39:26.021]   ..$ rscript_args    : NULL
[17:39:26.021]   ..$ rscript_envs    : NULL
[17:39:26.021]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:26.021]   ..$ rscript_startup : NULL
[17:39:26.021]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:39:26.021]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:26.021]   ..$ methods         : logi TRUE
[17:39:26.021]   ..$ socketOptions   : chr "no-delay"
[17:39:26.021]   ..$ useXDR          : logi FALSE
[17:39:26.021]   ..$ outfile         : chr "/dev/null"
[17:39:26.021]   ..$ renice          : int NA
[17:39:26.021]   ..$ rshcmd          : NULL
[17:39:26.021]   ..$ user            : NULL
[17:39:26.021]   ..$ revtunnel       : logi NA
[17:39:26.021]   ..$ rshlogfile      : NULL
[17:39:26.021]   ..$ rshopts         : NULL
[17:39:26.021]   ..$ rank            : int 1
[17:39:26.021]   ..$ manual          : logi FALSE
[17:39:26.021]   ..$ dryrun          : logi FALSE
[17:39:26.021]   ..$ quiet           : logi FALSE
[17:39:26.021]   ..$ setup_strategy  : chr "parallel"
[17:39:26.021]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:39:26.038] [local output] System call to launch all workers:
[17:39:26.038] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpq3kloZ/worker.rank=1.parallelly.parent=41208.a0f83a726861.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11998 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:39:26.038] [local output] Starting PSOCK main server
[17:39:26.044] [local output] Workers launched
[17:39:26.044] [local output] Waiting for workers to connect back
[17:39:26.044]  - [local output] 0 workers out of 2 ready
[17:39:26.290]  - [local output] 0 workers out of 2 ready
[17:39:26.291]  - [local output] 1 workers out of 2 ready
[17:39:26.292]  - [local output] 1 workers out of 2 ready
[17:39:26.293]  - [local output] 2 workers out of 2 ready
[17:39:26.293] [local output] Launching of workers completed
[17:39:26.293] [local output] Collecting session information from workers
[17:39:26.294] [local output]  - Worker #1 of 2
[17:39:26.294] [local output]  - Worker #2 of 2
[17:39:26.295] [local output] makeClusterPSOCK() ... done
[17:39:26.306] Packages needed by the future expression (n = 0): <none>
[17:39:26.306] Packages needed by future strategies (n = 0): <none>
[17:39:26.306] {
[17:39:26.306]     {
[17:39:26.306]         {
[17:39:26.306]             ...future.startTime <- base::Sys.time()
[17:39:26.306]             {
[17:39:26.306]                 {
[17:39:26.306]                   {
[17:39:26.306]                     {
[17:39:26.306]                       base::local({
[17:39:26.306]                         has_future <- base::requireNamespace("future", 
[17:39:26.306]                           quietly = TRUE)
[17:39:26.306]                         if (has_future) {
[17:39:26.306]                           ns <- base::getNamespace("future")
[17:39:26.306]                           version <- ns[[".package"]][["version"]]
[17:39:26.306]                           if (is.null(version)) 
[17:39:26.306]                             version <- utils::packageVersion("future")
[17:39:26.306]                         }
[17:39:26.306]                         else {
[17:39:26.306]                           version <- NULL
[17:39:26.306]                         }
[17:39:26.306]                         if (!has_future || version < "1.8.0") {
[17:39:26.306]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:26.306]                             "", base::R.version$version.string), 
[17:39:26.306]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:26.306]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:26.306]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:26.306]                               "release", "version")], collapse = " "), 
[17:39:26.306]                             hostname = base::Sys.info()[["nodename"]])
[17:39:26.306]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:26.306]                             info)
[17:39:26.306]                           info <- base::paste(info, collapse = "; ")
[17:39:26.306]                           if (!has_future) {
[17:39:26.306]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:26.306]                               info)
[17:39:26.306]                           }
[17:39:26.306]                           else {
[17:39:26.306]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:26.306]                               info, version)
[17:39:26.306]                           }
[17:39:26.306]                           base::stop(msg)
[17:39:26.306]                         }
[17:39:26.306]                       })
[17:39:26.306]                     }
[17:39:26.306]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:26.306]                     base::options(mc.cores = 1L)
[17:39:26.306]                   }
[17:39:26.306]                   ...future.strategy.old <- future::plan("list")
[17:39:26.306]                   options(future.plan = NULL)
[17:39:26.306]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.306]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:26.306]                 }
[17:39:26.306]                 ...future.workdir <- getwd()
[17:39:26.306]             }
[17:39:26.306]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:26.306]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:26.306]         }
[17:39:26.306]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:26.306]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:26.306]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:26.306]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:26.306]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:26.306]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:26.306]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:26.306]             base::names(...future.oldOptions))
[17:39:26.306]     }
[17:39:26.306]     if (FALSE) {
[17:39:26.306]     }
[17:39:26.306]     else {
[17:39:26.306]         if (TRUE) {
[17:39:26.306]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:26.306]                 open = "w")
[17:39:26.306]         }
[17:39:26.306]         else {
[17:39:26.306]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:26.306]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:26.306]         }
[17:39:26.306]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:26.306]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:26.306]             base::sink(type = "output", split = FALSE)
[17:39:26.306]             base::close(...future.stdout)
[17:39:26.306]         }, add = TRUE)
[17:39:26.306]     }
[17:39:26.306]     ...future.frame <- base::sys.nframe()
[17:39:26.306]     ...future.conditions <- base::list()
[17:39:26.306]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:26.306]     if (FALSE) {
[17:39:26.306]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:26.306]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:26.306]     }
[17:39:26.306]     ...future.result <- base::tryCatch({
[17:39:26.306]         base::withCallingHandlers({
[17:39:26.306]             ...future.value <- base::withVisible(base::local({
[17:39:26.306]                 ...future.makeSendCondition <- base::local({
[17:39:26.306]                   sendCondition <- NULL
[17:39:26.306]                   function(frame = 1L) {
[17:39:26.306]                     if (is.function(sendCondition)) 
[17:39:26.306]                       return(sendCondition)
[17:39:26.306]                     ns <- getNamespace("parallel")
[17:39:26.306]                     if (exists("sendData", mode = "function", 
[17:39:26.306]                       envir = ns)) {
[17:39:26.306]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:26.306]                         envir = ns)
[17:39:26.306]                       envir <- sys.frame(frame)
[17:39:26.306]                       master <- NULL
[17:39:26.306]                       while (!identical(envir, .GlobalEnv) && 
[17:39:26.306]                         !identical(envir, emptyenv())) {
[17:39:26.306]                         if (exists("master", mode = "list", envir = envir, 
[17:39:26.306]                           inherits = FALSE)) {
[17:39:26.306]                           master <- get("master", mode = "list", 
[17:39:26.306]                             envir = envir, inherits = FALSE)
[17:39:26.306]                           if (inherits(master, c("SOCKnode", 
[17:39:26.306]                             "SOCK0node"))) {
[17:39:26.306]                             sendCondition <<- function(cond) {
[17:39:26.306]                               data <- list(type = "VALUE", value = cond, 
[17:39:26.306]                                 success = TRUE)
[17:39:26.306]                               parallel_sendData(master, data)
[17:39:26.306]                             }
[17:39:26.306]                             return(sendCondition)
[17:39:26.306]                           }
[17:39:26.306]                         }
[17:39:26.306]                         frame <- frame + 1L
[17:39:26.306]                         envir <- sys.frame(frame)
[17:39:26.306]                       }
[17:39:26.306]                     }
[17:39:26.306]                     sendCondition <<- function(cond) NULL
[17:39:26.306]                   }
[17:39:26.306]                 })
[17:39:26.306]                 withCallingHandlers({
[17:39:26.306]                   NA
[17:39:26.306]                 }, immediateCondition = function(cond) {
[17:39:26.306]                   sendCondition <- ...future.makeSendCondition()
[17:39:26.306]                   sendCondition(cond)
[17:39:26.306]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.306]                   {
[17:39:26.306]                     inherits <- base::inherits
[17:39:26.306]                     invokeRestart <- base::invokeRestart
[17:39:26.306]                     is.null <- base::is.null
[17:39:26.306]                     muffled <- FALSE
[17:39:26.306]                     if (inherits(cond, "message")) {
[17:39:26.306]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:26.306]                       if (muffled) 
[17:39:26.306]                         invokeRestart("muffleMessage")
[17:39:26.306]                     }
[17:39:26.306]                     else if (inherits(cond, "warning")) {
[17:39:26.306]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:26.306]                       if (muffled) 
[17:39:26.306]                         invokeRestart("muffleWarning")
[17:39:26.306]                     }
[17:39:26.306]                     else if (inherits(cond, "condition")) {
[17:39:26.306]                       if (!is.null(pattern)) {
[17:39:26.306]                         computeRestarts <- base::computeRestarts
[17:39:26.306]                         grepl <- base::grepl
[17:39:26.306]                         restarts <- computeRestarts(cond)
[17:39:26.306]                         for (restart in restarts) {
[17:39:26.306]                           name <- restart$name
[17:39:26.306]                           if (is.null(name)) 
[17:39:26.306]                             next
[17:39:26.306]                           if (!grepl(pattern, name)) 
[17:39:26.306]                             next
[17:39:26.306]                           invokeRestart(restart)
[17:39:26.306]                           muffled <- TRUE
[17:39:26.306]                           break
[17:39:26.306]                         }
[17:39:26.306]                       }
[17:39:26.306]                     }
[17:39:26.306]                     invisible(muffled)
[17:39:26.306]                   }
[17:39:26.306]                   muffleCondition(cond)
[17:39:26.306]                 })
[17:39:26.306]             }))
[17:39:26.306]             future::FutureResult(value = ...future.value$value, 
[17:39:26.306]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.306]                   ...future.rng), globalenv = if (FALSE) 
[17:39:26.306]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:26.306]                     ...future.globalenv.names))
[17:39:26.306]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:26.306]         }, condition = base::local({
[17:39:26.306]             c <- base::c
[17:39:26.306]             inherits <- base::inherits
[17:39:26.306]             invokeRestart <- base::invokeRestart
[17:39:26.306]             length <- base::length
[17:39:26.306]             list <- base::list
[17:39:26.306]             seq.int <- base::seq.int
[17:39:26.306]             signalCondition <- base::signalCondition
[17:39:26.306]             sys.calls <- base::sys.calls
[17:39:26.306]             `[[` <- base::`[[`
[17:39:26.306]             `+` <- base::`+`
[17:39:26.306]             `<<-` <- base::`<<-`
[17:39:26.306]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:26.306]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:26.306]                   3L)]
[17:39:26.306]             }
[17:39:26.306]             function(cond) {
[17:39:26.306]                 is_error <- inherits(cond, "error")
[17:39:26.306]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:26.306]                   NULL)
[17:39:26.306]                 if (is_error) {
[17:39:26.306]                   sessionInformation <- function() {
[17:39:26.306]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:26.306]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:26.306]                       search = base::search(), system = base::Sys.info())
[17:39:26.306]                   }
[17:39:26.306]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.306]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:26.306]                     cond$call), session = sessionInformation(), 
[17:39:26.306]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:26.306]                   signalCondition(cond)
[17:39:26.306]                 }
[17:39:26.306]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:26.306]                 "immediateCondition"))) {
[17:39:26.306]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:26.306]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.306]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:26.306]                   if (TRUE && !signal) {
[17:39:26.306]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.306]                     {
[17:39:26.306]                       inherits <- base::inherits
[17:39:26.306]                       invokeRestart <- base::invokeRestart
[17:39:26.306]                       is.null <- base::is.null
[17:39:26.306]                       muffled <- FALSE
[17:39:26.306]                       if (inherits(cond, "message")) {
[17:39:26.306]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.306]                         if (muffled) 
[17:39:26.306]                           invokeRestart("muffleMessage")
[17:39:26.306]                       }
[17:39:26.306]                       else if (inherits(cond, "warning")) {
[17:39:26.306]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.306]                         if (muffled) 
[17:39:26.306]                           invokeRestart("muffleWarning")
[17:39:26.306]                       }
[17:39:26.306]                       else if (inherits(cond, "condition")) {
[17:39:26.306]                         if (!is.null(pattern)) {
[17:39:26.306]                           computeRestarts <- base::computeRestarts
[17:39:26.306]                           grepl <- base::grepl
[17:39:26.306]                           restarts <- computeRestarts(cond)
[17:39:26.306]                           for (restart in restarts) {
[17:39:26.306]                             name <- restart$name
[17:39:26.306]                             if (is.null(name)) 
[17:39:26.306]                               next
[17:39:26.306]                             if (!grepl(pattern, name)) 
[17:39:26.306]                               next
[17:39:26.306]                             invokeRestart(restart)
[17:39:26.306]                             muffled <- TRUE
[17:39:26.306]                             break
[17:39:26.306]                           }
[17:39:26.306]                         }
[17:39:26.306]                       }
[17:39:26.306]                       invisible(muffled)
[17:39:26.306]                     }
[17:39:26.306]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.306]                   }
[17:39:26.306]                 }
[17:39:26.306]                 else {
[17:39:26.306]                   if (TRUE) {
[17:39:26.306]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.306]                     {
[17:39:26.306]                       inherits <- base::inherits
[17:39:26.306]                       invokeRestart <- base::invokeRestart
[17:39:26.306]                       is.null <- base::is.null
[17:39:26.306]                       muffled <- FALSE
[17:39:26.306]                       if (inherits(cond, "message")) {
[17:39:26.306]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.306]                         if (muffled) 
[17:39:26.306]                           invokeRestart("muffleMessage")
[17:39:26.306]                       }
[17:39:26.306]                       else if (inherits(cond, "warning")) {
[17:39:26.306]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.306]                         if (muffled) 
[17:39:26.306]                           invokeRestart("muffleWarning")
[17:39:26.306]                       }
[17:39:26.306]                       else if (inherits(cond, "condition")) {
[17:39:26.306]                         if (!is.null(pattern)) {
[17:39:26.306]                           computeRestarts <- base::computeRestarts
[17:39:26.306]                           grepl <- base::grepl
[17:39:26.306]                           restarts <- computeRestarts(cond)
[17:39:26.306]                           for (restart in restarts) {
[17:39:26.306]                             name <- restart$name
[17:39:26.306]                             if (is.null(name)) 
[17:39:26.306]                               next
[17:39:26.306]                             if (!grepl(pattern, name)) 
[17:39:26.306]                               next
[17:39:26.306]                             invokeRestart(restart)
[17:39:26.306]                             muffled <- TRUE
[17:39:26.306]                             break
[17:39:26.306]                           }
[17:39:26.306]                         }
[17:39:26.306]                       }
[17:39:26.306]                       invisible(muffled)
[17:39:26.306]                     }
[17:39:26.306]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.306]                   }
[17:39:26.306]                 }
[17:39:26.306]             }
[17:39:26.306]         }))
[17:39:26.306]     }, error = function(ex) {
[17:39:26.306]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:26.306]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.306]                 ...future.rng), started = ...future.startTime, 
[17:39:26.306]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:26.306]             version = "1.8"), class = "FutureResult")
[17:39:26.306]     }, finally = {
[17:39:26.306]         if (!identical(...future.workdir, getwd())) 
[17:39:26.306]             setwd(...future.workdir)
[17:39:26.306]         {
[17:39:26.306]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:26.306]                 ...future.oldOptions$nwarnings <- NULL
[17:39:26.306]             }
[17:39:26.306]             base::options(...future.oldOptions)
[17:39:26.306]             if (.Platform$OS.type == "windows") {
[17:39:26.306]                 old_names <- names(...future.oldEnvVars)
[17:39:26.306]                 envs <- base::Sys.getenv()
[17:39:26.306]                 names <- names(envs)
[17:39:26.306]                 common <- intersect(names, old_names)
[17:39:26.306]                 added <- setdiff(names, old_names)
[17:39:26.306]                 removed <- setdiff(old_names, names)
[17:39:26.306]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:26.306]                   envs[common]]
[17:39:26.306]                 NAMES <- toupper(changed)
[17:39:26.306]                 args <- list()
[17:39:26.306]                 for (kk in seq_along(NAMES)) {
[17:39:26.306]                   name <- changed[[kk]]
[17:39:26.306]                   NAME <- NAMES[[kk]]
[17:39:26.306]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.306]                     next
[17:39:26.306]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.306]                 }
[17:39:26.306]                 NAMES <- toupper(added)
[17:39:26.306]                 for (kk in seq_along(NAMES)) {
[17:39:26.306]                   name <- added[[kk]]
[17:39:26.306]                   NAME <- NAMES[[kk]]
[17:39:26.306]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.306]                     next
[17:39:26.306]                   args[[name]] <- ""
[17:39:26.306]                 }
[17:39:26.306]                 NAMES <- toupper(removed)
[17:39:26.306]                 for (kk in seq_along(NAMES)) {
[17:39:26.306]                   name <- removed[[kk]]
[17:39:26.306]                   NAME <- NAMES[[kk]]
[17:39:26.306]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.306]                     next
[17:39:26.306]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.306]                 }
[17:39:26.306]                 if (length(args) > 0) 
[17:39:26.306]                   base::do.call(base::Sys.setenv, args = args)
[17:39:26.306]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:26.306]             }
[17:39:26.306]             else {
[17:39:26.306]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:26.306]             }
[17:39:26.306]             {
[17:39:26.306]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:26.306]                   0L) {
[17:39:26.306]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:26.306]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:26.306]                   base::options(opts)
[17:39:26.306]                 }
[17:39:26.306]                 {
[17:39:26.306]                   {
[17:39:26.306]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:26.306]                     NULL
[17:39:26.306]                   }
[17:39:26.306]                   options(future.plan = NULL)
[17:39:26.306]                   if (is.na(NA_character_)) 
[17:39:26.306]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.306]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:26.306]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:26.306]                     .init = FALSE)
[17:39:26.306]                 }
[17:39:26.306]             }
[17:39:26.306]         }
[17:39:26.306]     })
[17:39:26.306]     if (TRUE) {
[17:39:26.306]         base::sink(type = "output", split = FALSE)
[17:39:26.306]         if (TRUE) {
[17:39:26.306]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:26.306]         }
[17:39:26.306]         else {
[17:39:26.306]             ...future.result["stdout"] <- base::list(NULL)
[17:39:26.306]         }
[17:39:26.306]         base::close(...future.stdout)
[17:39:26.306]         ...future.stdout <- NULL
[17:39:26.306]     }
[17:39:26.306]     ...future.result$conditions <- ...future.conditions
[17:39:26.306]     ...future.result$finished <- base::Sys.time()
[17:39:26.306]     ...future.result
[17:39:26.306] }
[17:39:26.359] MultisessionFuture started
[17:39:26.359] result() for ClusterFuture ...
[17:39:26.360] receiveMessageFromWorker() for ClusterFuture ...
[17:39:26.360] - Validating connection of MultisessionFuture
[17:39:26.392] - received message: FutureResult
[17:39:26.392] - Received FutureResult
[17:39:26.393] - Erased future from FutureRegistry
[17:39:26.393] result() for ClusterFuture ...
[17:39:26.393] - result already collected: FutureResult
[17:39:26.393] result() for ClusterFuture ... done
[17:39:26.393] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:26.393] result() for ClusterFuture ... done
[17:39:26.393] result() for ClusterFuture ...
[17:39:26.393] - result already collected: FutureResult
[17:39:26.393] result() for ClusterFuture ... done
[17:39:26.394] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:39:26.398] plan(): nbrOfWorkers() = 2
** Future evaluation without globals
[17:39:26.398] getGlobalsAndPackages() ...
[17:39:26.398] Searching for globals...
[17:39:26.399] - globals found: [2] ‘{’, ‘<-’
[17:39:26.400] Searching for globals ... DONE
[17:39:26.400] Resolving globals: FALSE
[17:39:26.400] 
[17:39:26.400] 
[17:39:26.400] getGlobalsAndPackages() ... DONE
[17:39:26.401] run() for ‘Future’ ...
[17:39:26.401] - state: ‘created’
[17:39:26.401] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:26.415] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:26.415] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:26.415]   - Field: ‘node’
[17:39:26.415]   - Field: ‘label’
[17:39:26.416]   - Field: ‘local’
[17:39:26.416]   - Field: ‘owner’
[17:39:26.416]   - Field: ‘envir’
[17:39:26.416]   - Field: ‘workers’
[17:39:26.416]   - Field: ‘packages’
[17:39:26.416]   - Field: ‘gc’
[17:39:26.416]   - Field: ‘conditions’
[17:39:26.416]   - Field: ‘persistent’
[17:39:26.416]   - Field: ‘expr’
[17:39:26.416]   - Field: ‘uuid’
[17:39:26.417]   - Field: ‘seed’
[17:39:26.417]   - Field: ‘version’
[17:39:26.417]   - Field: ‘result’
[17:39:26.417]   - Field: ‘asynchronous’
[17:39:26.417]   - Field: ‘calls’
[17:39:26.417]   - Field: ‘globals’
[17:39:26.417]   - Field: ‘stdout’
[17:39:26.417]   - Field: ‘earlySignal’
[17:39:26.417]   - Field: ‘lazy’
[17:39:26.418]   - Field: ‘state’
[17:39:26.418] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:26.418] - Launch lazy future ...
[17:39:26.418] Packages needed by the future expression (n = 0): <none>
[17:39:26.418] Packages needed by future strategies (n = 0): <none>
[17:39:26.419] {
[17:39:26.419]     {
[17:39:26.419]         {
[17:39:26.419]             ...future.startTime <- base::Sys.time()
[17:39:26.419]             {
[17:39:26.419]                 {
[17:39:26.419]                   {
[17:39:26.419]                     {
[17:39:26.419]                       base::local({
[17:39:26.419]                         has_future <- base::requireNamespace("future", 
[17:39:26.419]                           quietly = TRUE)
[17:39:26.419]                         if (has_future) {
[17:39:26.419]                           ns <- base::getNamespace("future")
[17:39:26.419]                           version <- ns[[".package"]][["version"]]
[17:39:26.419]                           if (is.null(version)) 
[17:39:26.419]                             version <- utils::packageVersion("future")
[17:39:26.419]                         }
[17:39:26.419]                         else {
[17:39:26.419]                           version <- NULL
[17:39:26.419]                         }
[17:39:26.419]                         if (!has_future || version < "1.8.0") {
[17:39:26.419]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:26.419]                             "", base::R.version$version.string), 
[17:39:26.419]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:26.419]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:26.419]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:26.419]                               "release", "version")], collapse = " "), 
[17:39:26.419]                             hostname = base::Sys.info()[["nodename"]])
[17:39:26.419]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:26.419]                             info)
[17:39:26.419]                           info <- base::paste(info, collapse = "; ")
[17:39:26.419]                           if (!has_future) {
[17:39:26.419]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:26.419]                               info)
[17:39:26.419]                           }
[17:39:26.419]                           else {
[17:39:26.419]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:26.419]                               info, version)
[17:39:26.419]                           }
[17:39:26.419]                           base::stop(msg)
[17:39:26.419]                         }
[17:39:26.419]                       })
[17:39:26.419]                     }
[17:39:26.419]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:26.419]                     base::options(mc.cores = 1L)
[17:39:26.419]                   }
[17:39:26.419]                   ...future.strategy.old <- future::plan("list")
[17:39:26.419]                   options(future.plan = NULL)
[17:39:26.419]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.419]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:26.419]                 }
[17:39:26.419]                 ...future.workdir <- getwd()
[17:39:26.419]             }
[17:39:26.419]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:26.419]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:26.419]         }
[17:39:26.419]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:26.419]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:26.419]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:26.419]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:26.419]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:26.419]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:26.419]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:26.419]             base::names(...future.oldOptions))
[17:39:26.419]     }
[17:39:26.419]     if (FALSE) {
[17:39:26.419]     }
[17:39:26.419]     else {
[17:39:26.419]         if (TRUE) {
[17:39:26.419]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:26.419]                 open = "w")
[17:39:26.419]         }
[17:39:26.419]         else {
[17:39:26.419]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:26.419]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:26.419]         }
[17:39:26.419]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:26.419]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:26.419]             base::sink(type = "output", split = FALSE)
[17:39:26.419]             base::close(...future.stdout)
[17:39:26.419]         }, add = TRUE)
[17:39:26.419]     }
[17:39:26.419]     ...future.frame <- base::sys.nframe()
[17:39:26.419]     ...future.conditions <- base::list()
[17:39:26.419]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:26.419]     if (FALSE) {
[17:39:26.419]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:26.419]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:26.419]     }
[17:39:26.419]     ...future.result <- base::tryCatch({
[17:39:26.419]         base::withCallingHandlers({
[17:39:26.419]             ...future.value <- base::withVisible(base::local({
[17:39:26.419]                 ...future.makeSendCondition <- base::local({
[17:39:26.419]                   sendCondition <- NULL
[17:39:26.419]                   function(frame = 1L) {
[17:39:26.419]                     if (is.function(sendCondition)) 
[17:39:26.419]                       return(sendCondition)
[17:39:26.419]                     ns <- getNamespace("parallel")
[17:39:26.419]                     if (exists("sendData", mode = "function", 
[17:39:26.419]                       envir = ns)) {
[17:39:26.419]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:26.419]                         envir = ns)
[17:39:26.419]                       envir <- sys.frame(frame)
[17:39:26.419]                       master <- NULL
[17:39:26.419]                       while (!identical(envir, .GlobalEnv) && 
[17:39:26.419]                         !identical(envir, emptyenv())) {
[17:39:26.419]                         if (exists("master", mode = "list", envir = envir, 
[17:39:26.419]                           inherits = FALSE)) {
[17:39:26.419]                           master <- get("master", mode = "list", 
[17:39:26.419]                             envir = envir, inherits = FALSE)
[17:39:26.419]                           if (inherits(master, c("SOCKnode", 
[17:39:26.419]                             "SOCK0node"))) {
[17:39:26.419]                             sendCondition <<- function(cond) {
[17:39:26.419]                               data <- list(type = "VALUE", value = cond, 
[17:39:26.419]                                 success = TRUE)
[17:39:26.419]                               parallel_sendData(master, data)
[17:39:26.419]                             }
[17:39:26.419]                             return(sendCondition)
[17:39:26.419]                           }
[17:39:26.419]                         }
[17:39:26.419]                         frame <- frame + 1L
[17:39:26.419]                         envir <- sys.frame(frame)
[17:39:26.419]                       }
[17:39:26.419]                     }
[17:39:26.419]                     sendCondition <<- function(cond) NULL
[17:39:26.419]                   }
[17:39:26.419]                 })
[17:39:26.419]                 withCallingHandlers({
[17:39:26.419]                   {
[17:39:26.419]                     x <- 1
[17:39:26.419]                   }
[17:39:26.419]                 }, immediateCondition = function(cond) {
[17:39:26.419]                   sendCondition <- ...future.makeSendCondition()
[17:39:26.419]                   sendCondition(cond)
[17:39:26.419]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.419]                   {
[17:39:26.419]                     inherits <- base::inherits
[17:39:26.419]                     invokeRestart <- base::invokeRestart
[17:39:26.419]                     is.null <- base::is.null
[17:39:26.419]                     muffled <- FALSE
[17:39:26.419]                     if (inherits(cond, "message")) {
[17:39:26.419]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:26.419]                       if (muffled) 
[17:39:26.419]                         invokeRestart("muffleMessage")
[17:39:26.419]                     }
[17:39:26.419]                     else if (inherits(cond, "warning")) {
[17:39:26.419]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:26.419]                       if (muffled) 
[17:39:26.419]                         invokeRestart("muffleWarning")
[17:39:26.419]                     }
[17:39:26.419]                     else if (inherits(cond, "condition")) {
[17:39:26.419]                       if (!is.null(pattern)) {
[17:39:26.419]                         computeRestarts <- base::computeRestarts
[17:39:26.419]                         grepl <- base::grepl
[17:39:26.419]                         restarts <- computeRestarts(cond)
[17:39:26.419]                         for (restart in restarts) {
[17:39:26.419]                           name <- restart$name
[17:39:26.419]                           if (is.null(name)) 
[17:39:26.419]                             next
[17:39:26.419]                           if (!grepl(pattern, name)) 
[17:39:26.419]                             next
[17:39:26.419]                           invokeRestart(restart)
[17:39:26.419]                           muffled <- TRUE
[17:39:26.419]                           break
[17:39:26.419]                         }
[17:39:26.419]                       }
[17:39:26.419]                     }
[17:39:26.419]                     invisible(muffled)
[17:39:26.419]                   }
[17:39:26.419]                   muffleCondition(cond)
[17:39:26.419]                 })
[17:39:26.419]             }))
[17:39:26.419]             future::FutureResult(value = ...future.value$value, 
[17:39:26.419]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.419]                   ...future.rng), globalenv = if (FALSE) 
[17:39:26.419]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:26.419]                     ...future.globalenv.names))
[17:39:26.419]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:26.419]         }, condition = base::local({
[17:39:26.419]             c <- base::c
[17:39:26.419]             inherits <- base::inherits
[17:39:26.419]             invokeRestart <- base::invokeRestart
[17:39:26.419]             length <- base::length
[17:39:26.419]             list <- base::list
[17:39:26.419]             seq.int <- base::seq.int
[17:39:26.419]             signalCondition <- base::signalCondition
[17:39:26.419]             sys.calls <- base::sys.calls
[17:39:26.419]             `[[` <- base::`[[`
[17:39:26.419]             `+` <- base::`+`
[17:39:26.419]             `<<-` <- base::`<<-`
[17:39:26.419]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:26.419]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:26.419]                   3L)]
[17:39:26.419]             }
[17:39:26.419]             function(cond) {
[17:39:26.419]                 is_error <- inherits(cond, "error")
[17:39:26.419]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:26.419]                   NULL)
[17:39:26.419]                 if (is_error) {
[17:39:26.419]                   sessionInformation <- function() {
[17:39:26.419]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:26.419]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:26.419]                       search = base::search(), system = base::Sys.info())
[17:39:26.419]                   }
[17:39:26.419]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.419]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:26.419]                     cond$call), session = sessionInformation(), 
[17:39:26.419]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:26.419]                   signalCondition(cond)
[17:39:26.419]                 }
[17:39:26.419]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:26.419]                 "immediateCondition"))) {
[17:39:26.419]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:26.419]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.419]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:26.419]                   if (TRUE && !signal) {
[17:39:26.419]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.419]                     {
[17:39:26.419]                       inherits <- base::inherits
[17:39:26.419]                       invokeRestart <- base::invokeRestart
[17:39:26.419]                       is.null <- base::is.null
[17:39:26.419]                       muffled <- FALSE
[17:39:26.419]                       if (inherits(cond, "message")) {
[17:39:26.419]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.419]                         if (muffled) 
[17:39:26.419]                           invokeRestart("muffleMessage")
[17:39:26.419]                       }
[17:39:26.419]                       else if (inherits(cond, "warning")) {
[17:39:26.419]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.419]                         if (muffled) 
[17:39:26.419]                           invokeRestart("muffleWarning")
[17:39:26.419]                       }
[17:39:26.419]                       else if (inherits(cond, "condition")) {
[17:39:26.419]                         if (!is.null(pattern)) {
[17:39:26.419]                           computeRestarts <- base::computeRestarts
[17:39:26.419]                           grepl <- base::grepl
[17:39:26.419]                           restarts <- computeRestarts(cond)
[17:39:26.419]                           for (restart in restarts) {
[17:39:26.419]                             name <- restart$name
[17:39:26.419]                             if (is.null(name)) 
[17:39:26.419]                               next
[17:39:26.419]                             if (!grepl(pattern, name)) 
[17:39:26.419]                               next
[17:39:26.419]                             invokeRestart(restart)
[17:39:26.419]                             muffled <- TRUE
[17:39:26.419]                             break
[17:39:26.419]                           }
[17:39:26.419]                         }
[17:39:26.419]                       }
[17:39:26.419]                       invisible(muffled)
[17:39:26.419]                     }
[17:39:26.419]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.419]                   }
[17:39:26.419]                 }
[17:39:26.419]                 else {
[17:39:26.419]                   if (TRUE) {
[17:39:26.419]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.419]                     {
[17:39:26.419]                       inherits <- base::inherits
[17:39:26.419]                       invokeRestart <- base::invokeRestart
[17:39:26.419]                       is.null <- base::is.null
[17:39:26.419]                       muffled <- FALSE
[17:39:26.419]                       if (inherits(cond, "message")) {
[17:39:26.419]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.419]                         if (muffled) 
[17:39:26.419]                           invokeRestart("muffleMessage")
[17:39:26.419]                       }
[17:39:26.419]                       else if (inherits(cond, "warning")) {
[17:39:26.419]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.419]                         if (muffled) 
[17:39:26.419]                           invokeRestart("muffleWarning")
[17:39:26.419]                       }
[17:39:26.419]                       else if (inherits(cond, "condition")) {
[17:39:26.419]                         if (!is.null(pattern)) {
[17:39:26.419]                           computeRestarts <- base::computeRestarts
[17:39:26.419]                           grepl <- base::grepl
[17:39:26.419]                           restarts <- computeRestarts(cond)
[17:39:26.419]                           for (restart in restarts) {
[17:39:26.419]                             name <- restart$name
[17:39:26.419]                             if (is.null(name)) 
[17:39:26.419]                               next
[17:39:26.419]                             if (!grepl(pattern, name)) 
[17:39:26.419]                               next
[17:39:26.419]                             invokeRestart(restart)
[17:39:26.419]                             muffled <- TRUE
[17:39:26.419]                             break
[17:39:26.419]                           }
[17:39:26.419]                         }
[17:39:26.419]                       }
[17:39:26.419]                       invisible(muffled)
[17:39:26.419]                     }
[17:39:26.419]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.419]                   }
[17:39:26.419]                 }
[17:39:26.419]             }
[17:39:26.419]         }))
[17:39:26.419]     }, error = function(ex) {
[17:39:26.419]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:26.419]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.419]                 ...future.rng), started = ...future.startTime, 
[17:39:26.419]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:26.419]             version = "1.8"), class = "FutureResult")
[17:39:26.419]     }, finally = {
[17:39:26.419]         if (!identical(...future.workdir, getwd())) 
[17:39:26.419]             setwd(...future.workdir)
[17:39:26.419]         {
[17:39:26.419]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:26.419]                 ...future.oldOptions$nwarnings <- NULL
[17:39:26.419]             }
[17:39:26.419]             base::options(...future.oldOptions)
[17:39:26.419]             if (.Platform$OS.type == "windows") {
[17:39:26.419]                 old_names <- names(...future.oldEnvVars)
[17:39:26.419]                 envs <- base::Sys.getenv()
[17:39:26.419]                 names <- names(envs)
[17:39:26.419]                 common <- intersect(names, old_names)
[17:39:26.419]                 added <- setdiff(names, old_names)
[17:39:26.419]                 removed <- setdiff(old_names, names)
[17:39:26.419]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:26.419]                   envs[common]]
[17:39:26.419]                 NAMES <- toupper(changed)
[17:39:26.419]                 args <- list()
[17:39:26.419]                 for (kk in seq_along(NAMES)) {
[17:39:26.419]                   name <- changed[[kk]]
[17:39:26.419]                   NAME <- NAMES[[kk]]
[17:39:26.419]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.419]                     next
[17:39:26.419]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.419]                 }
[17:39:26.419]                 NAMES <- toupper(added)
[17:39:26.419]                 for (kk in seq_along(NAMES)) {
[17:39:26.419]                   name <- added[[kk]]
[17:39:26.419]                   NAME <- NAMES[[kk]]
[17:39:26.419]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.419]                     next
[17:39:26.419]                   args[[name]] <- ""
[17:39:26.419]                 }
[17:39:26.419]                 NAMES <- toupper(removed)
[17:39:26.419]                 for (kk in seq_along(NAMES)) {
[17:39:26.419]                   name <- removed[[kk]]
[17:39:26.419]                   NAME <- NAMES[[kk]]
[17:39:26.419]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.419]                     next
[17:39:26.419]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.419]                 }
[17:39:26.419]                 if (length(args) > 0) 
[17:39:26.419]                   base::do.call(base::Sys.setenv, args = args)
[17:39:26.419]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:26.419]             }
[17:39:26.419]             else {
[17:39:26.419]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:26.419]             }
[17:39:26.419]             {
[17:39:26.419]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:26.419]                   0L) {
[17:39:26.419]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:26.419]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:26.419]                   base::options(opts)
[17:39:26.419]                 }
[17:39:26.419]                 {
[17:39:26.419]                   {
[17:39:26.419]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:26.419]                     NULL
[17:39:26.419]                   }
[17:39:26.419]                   options(future.plan = NULL)
[17:39:26.419]                   if (is.na(NA_character_)) 
[17:39:26.419]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.419]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:26.419]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:26.419]                     .init = FALSE)
[17:39:26.419]                 }
[17:39:26.419]             }
[17:39:26.419]         }
[17:39:26.419]     })
[17:39:26.419]     if (TRUE) {
[17:39:26.419]         base::sink(type = "output", split = FALSE)
[17:39:26.419]         if (TRUE) {
[17:39:26.419]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:26.419]         }
[17:39:26.419]         else {
[17:39:26.419]             ...future.result["stdout"] <- base::list(NULL)
[17:39:26.419]         }
[17:39:26.419]         base::close(...future.stdout)
[17:39:26.419]         ...future.stdout <- NULL
[17:39:26.419]     }
[17:39:26.419]     ...future.result$conditions <- ...future.conditions
[17:39:26.419]     ...future.result$finished <- base::Sys.time()
[17:39:26.419]     ...future.result
[17:39:26.419] }
[17:39:26.422] MultisessionFuture started
[17:39:26.422] - Launch lazy future ... done
[17:39:26.423] run() for ‘MultisessionFuture’ ... done
[17:39:26.423] result() for ClusterFuture ...
[17:39:26.423] receiveMessageFromWorker() for ClusterFuture ...
[17:39:26.423] - Validating connection of MultisessionFuture
[17:39:26.424] - received message: FutureResult
[17:39:26.424] - Received FutureResult
[17:39:26.425] - Erased future from FutureRegistry
[17:39:26.425] result() for ClusterFuture ...
[17:39:26.425] - result already collected: FutureResult
[17:39:26.425] result() for ClusterFuture ... done
[17:39:26.425] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:26.425] result() for ClusterFuture ... done
[17:39:26.425] result() for ClusterFuture ...
[17:39:26.425] - result already collected: FutureResult
[17:39:26.425] result() for ClusterFuture ... done
** Future evaluation with globals
[17:39:26.426] getGlobalsAndPackages() ...
[17:39:26.426] Searching for globals...
[17:39:26.427] - globals found: [3] ‘{’, ‘<-’, ‘a’
[17:39:26.427] Searching for globals ... DONE
[17:39:26.427] Resolving globals: FALSE
[17:39:26.428] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:26.428] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:26.428] - globals: [1] ‘a’
[17:39:26.429] 
[17:39:26.429] getGlobalsAndPackages() ... DONE
[17:39:26.429] run() for ‘Future’ ...
[17:39:26.429] - state: ‘created’
[17:39:26.429] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:26.444] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:26.444] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:26.444]   - Field: ‘node’
[17:39:26.444]   - Field: ‘label’
[17:39:26.444]   - Field: ‘local’
[17:39:26.444]   - Field: ‘owner’
[17:39:26.444]   - Field: ‘envir’
[17:39:26.444]   - Field: ‘workers’
[17:39:26.444]   - Field: ‘packages’
[17:39:26.445]   - Field: ‘gc’
[17:39:26.445]   - Field: ‘conditions’
[17:39:26.445]   - Field: ‘persistent’
[17:39:26.445]   - Field: ‘expr’
[17:39:26.445]   - Field: ‘uuid’
[17:39:26.445]   - Field: ‘seed’
[17:39:26.445]   - Field: ‘version’
[17:39:26.445]   - Field: ‘result’
[17:39:26.445]   - Field: ‘asynchronous’
[17:39:26.446]   - Field: ‘calls’
[17:39:26.446]   - Field: ‘globals’
[17:39:26.446]   - Field: ‘stdout’
[17:39:26.446]   - Field: ‘earlySignal’
[17:39:26.446]   - Field: ‘lazy’
[17:39:26.446]   - Field: ‘state’
[17:39:26.446] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:26.446] - Launch lazy future ...
[17:39:26.447] Packages needed by the future expression (n = 0): <none>
[17:39:26.447] Packages needed by future strategies (n = 0): <none>
[17:39:26.447] {
[17:39:26.447]     {
[17:39:26.447]         {
[17:39:26.447]             ...future.startTime <- base::Sys.time()
[17:39:26.447]             {
[17:39:26.447]                 {
[17:39:26.447]                   {
[17:39:26.447]                     {
[17:39:26.447]                       base::local({
[17:39:26.447]                         has_future <- base::requireNamespace("future", 
[17:39:26.447]                           quietly = TRUE)
[17:39:26.447]                         if (has_future) {
[17:39:26.447]                           ns <- base::getNamespace("future")
[17:39:26.447]                           version <- ns[[".package"]][["version"]]
[17:39:26.447]                           if (is.null(version)) 
[17:39:26.447]                             version <- utils::packageVersion("future")
[17:39:26.447]                         }
[17:39:26.447]                         else {
[17:39:26.447]                           version <- NULL
[17:39:26.447]                         }
[17:39:26.447]                         if (!has_future || version < "1.8.0") {
[17:39:26.447]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:26.447]                             "", base::R.version$version.string), 
[17:39:26.447]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:26.447]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:26.447]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:26.447]                               "release", "version")], collapse = " "), 
[17:39:26.447]                             hostname = base::Sys.info()[["nodename"]])
[17:39:26.447]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:26.447]                             info)
[17:39:26.447]                           info <- base::paste(info, collapse = "; ")
[17:39:26.447]                           if (!has_future) {
[17:39:26.447]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:26.447]                               info)
[17:39:26.447]                           }
[17:39:26.447]                           else {
[17:39:26.447]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:26.447]                               info, version)
[17:39:26.447]                           }
[17:39:26.447]                           base::stop(msg)
[17:39:26.447]                         }
[17:39:26.447]                       })
[17:39:26.447]                     }
[17:39:26.447]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:26.447]                     base::options(mc.cores = 1L)
[17:39:26.447]                   }
[17:39:26.447]                   ...future.strategy.old <- future::plan("list")
[17:39:26.447]                   options(future.plan = NULL)
[17:39:26.447]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.447]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:26.447]                 }
[17:39:26.447]                 ...future.workdir <- getwd()
[17:39:26.447]             }
[17:39:26.447]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:26.447]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:26.447]         }
[17:39:26.447]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:26.447]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:26.447]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:26.447]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:26.447]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:26.447]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:26.447]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:26.447]             base::names(...future.oldOptions))
[17:39:26.447]     }
[17:39:26.447]     if (FALSE) {
[17:39:26.447]     }
[17:39:26.447]     else {
[17:39:26.447]         if (TRUE) {
[17:39:26.447]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:26.447]                 open = "w")
[17:39:26.447]         }
[17:39:26.447]         else {
[17:39:26.447]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:26.447]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:26.447]         }
[17:39:26.447]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:26.447]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:26.447]             base::sink(type = "output", split = FALSE)
[17:39:26.447]             base::close(...future.stdout)
[17:39:26.447]         }, add = TRUE)
[17:39:26.447]     }
[17:39:26.447]     ...future.frame <- base::sys.nframe()
[17:39:26.447]     ...future.conditions <- base::list()
[17:39:26.447]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:26.447]     if (FALSE) {
[17:39:26.447]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:26.447]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:26.447]     }
[17:39:26.447]     ...future.result <- base::tryCatch({
[17:39:26.447]         base::withCallingHandlers({
[17:39:26.447]             ...future.value <- base::withVisible(base::local({
[17:39:26.447]                 ...future.makeSendCondition <- base::local({
[17:39:26.447]                   sendCondition <- NULL
[17:39:26.447]                   function(frame = 1L) {
[17:39:26.447]                     if (is.function(sendCondition)) 
[17:39:26.447]                       return(sendCondition)
[17:39:26.447]                     ns <- getNamespace("parallel")
[17:39:26.447]                     if (exists("sendData", mode = "function", 
[17:39:26.447]                       envir = ns)) {
[17:39:26.447]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:26.447]                         envir = ns)
[17:39:26.447]                       envir <- sys.frame(frame)
[17:39:26.447]                       master <- NULL
[17:39:26.447]                       while (!identical(envir, .GlobalEnv) && 
[17:39:26.447]                         !identical(envir, emptyenv())) {
[17:39:26.447]                         if (exists("master", mode = "list", envir = envir, 
[17:39:26.447]                           inherits = FALSE)) {
[17:39:26.447]                           master <- get("master", mode = "list", 
[17:39:26.447]                             envir = envir, inherits = FALSE)
[17:39:26.447]                           if (inherits(master, c("SOCKnode", 
[17:39:26.447]                             "SOCK0node"))) {
[17:39:26.447]                             sendCondition <<- function(cond) {
[17:39:26.447]                               data <- list(type = "VALUE", value = cond, 
[17:39:26.447]                                 success = TRUE)
[17:39:26.447]                               parallel_sendData(master, data)
[17:39:26.447]                             }
[17:39:26.447]                             return(sendCondition)
[17:39:26.447]                           }
[17:39:26.447]                         }
[17:39:26.447]                         frame <- frame + 1L
[17:39:26.447]                         envir <- sys.frame(frame)
[17:39:26.447]                       }
[17:39:26.447]                     }
[17:39:26.447]                     sendCondition <<- function(cond) NULL
[17:39:26.447]                   }
[17:39:26.447]                 })
[17:39:26.447]                 withCallingHandlers({
[17:39:26.447]                   {
[17:39:26.447]                     x <- a
[17:39:26.447]                   }
[17:39:26.447]                 }, immediateCondition = function(cond) {
[17:39:26.447]                   sendCondition <- ...future.makeSendCondition()
[17:39:26.447]                   sendCondition(cond)
[17:39:26.447]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.447]                   {
[17:39:26.447]                     inherits <- base::inherits
[17:39:26.447]                     invokeRestart <- base::invokeRestart
[17:39:26.447]                     is.null <- base::is.null
[17:39:26.447]                     muffled <- FALSE
[17:39:26.447]                     if (inherits(cond, "message")) {
[17:39:26.447]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:26.447]                       if (muffled) 
[17:39:26.447]                         invokeRestart("muffleMessage")
[17:39:26.447]                     }
[17:39:26.447]                     else if (inherits(cond, "warning")) {
[17:39:26.447]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:26.447]                       if (muffled) 
[17:39:26.447]                         invokeRestart("muffleWarning")
[17:39:26.447]                     }
[17:39:26.447]                     else if (inherits(cond, "condition")) {
[17:39:26.447]                       if (!is.null(pattern)) {
[17:39:26.447]                         computeRestarts <- base::computeRestarts
[17:39:26.447]                         grepl <- base::grepl
[17:39:26.447]                         restarts <- computeRestarts(cond)
[17:39:26.447]                         for (restart in restarts) {
[17:39:26.447]                           name <- restart$name
[17:39:26.447]                           if (is.null(name)) 
[17:39:26.447]                             next
[17:39:26.447]                           if (!grepl(pattern, name)) 
[17:39:26.447]                             next
[17:39:26.447]                           invokeRestart(restart)
[17:39:26.447]                           muffled <- TRUE
[17:39:26.447]                           break
[17:39:26.447]                         }
[17:39:26.447]                       }
[17:39:26.447]                     }
[17:39:26.447]                     invisible(muffled)
[17:39:26.447]                   }
[17:39:26.447]                   muffleCondition(cond)
[17:39:26.447]                 })
[17:39:26.447]             }))
[17:39:26.447]             future::FutureResult(value = ...future.value$value, 
[17:39:26.447]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.447]                   ...future.rng), globalenv = if (FALSE) 
[17:39:26.447]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:26.447]                     ...future.globalenv.names))
[17:39:26.447]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:26.447]         }, condition = base::local({
[17:39:26.447]             c <- base::c
[17:39:26.447]             inherits <- base::inherits
[17:39:26.447]             invokeRestart <- base::invokeRestart
[17:39:26.447]             length <- base::length
[17:39:26.447]             list <- base::list
[17:39:26.447]             seq.int <- base::seq.int
[17:39:26.447]             signalCondition <- base::signalCondition
[17:39:26.447]             sys.calls <- base::sys.calls
[17:39:26.447]             `[[` <- base::`[[`
[17:39:26.447]             `+` <- base::`+`
[17:39:26.447]             `<<-` <- base::`<<-`
[17:39:26.447]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:26.447]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:26.447]                   3L)]
[17:39:26.447]             }
[17:39:26.447]             function(cond) {
[17:39:26.447]                 is_error <- inherits(cond, "error")
[17:39:26.447]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:26.447]                   NULL)
[17:39:26.447]                 if (is_error) {
[17:39:26.447]                   sessionInformation <- function() {
[17:39:26.447]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:26.447]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:26.447]                       search = base::search(), system = base::Sys.info())
[17:39:26.447]                   }
[17:39:26.447]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.447]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:26.447]                     cond$call), session = sessionInformation(), 
[17:39:26.447]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:26.447]                   signalCondition(cond)
[17:39:26.447]                 }
[17:39:26.447]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:26.447]                 "immediateCondition"))) {
[17:39:26.447]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:26.447]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.447]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:26.447]                   if (TRUE && !signal) {
[17:39:26.447]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.447]                     {
[17:39:26.447]                       inherits <- base::inherits
[17:39:26.447]                       invokeRestart <- base::invokeRestart
[17:39:26.447]                       is.null <- base::is.null
[17:39:26.447]                       muffled <- FALSE
[17:39:26.447]                       if (inherits(cond, "message")) {
[17:39:26.447]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.447]                         if (muffled) 
[17:39:26.447]                           invokeRestart("muffleMessage")
[17:39:26.447]                       }
[17:39:26.447]                       else if (inherits(cond, "warning")) {
[17:39:26.447]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.447]                         if (muffled) 
[17:39:26.447]                           invokeRestart("muffleWarning")
[17:39:26.447]                       }
[17:39:26.447]                       else if (inherits(cond, "condition")) {
[17:39:26.447]                         if (!is.null(pattern)) {
[17:39:26.447]                           computeRestarts <- base::computeRestarts
[17:39:26.447]                           grepl <- base::grepl
[17:39:26.447]                           restarts <- computeRestarts(cond)
[17:39:26.447]                           for (restart in restarts) {
[17:39:26.447]                             name <- restart$name
[17:39:26.447]                             if (is.null(name)) 
[17:39:26.447]                               next
[17:39:26.447]                             if (!grepl(pattern, name)) 
[17:39:26.447]                               next
[17:39:26.447]                             invokeRestart(restart)
[17:39:26.447]                             muffled <- TRUE
[17:39:26.447]                             break
[17:39:26.447]                           }
[17:39:26.447]                         }
[17:39:26.447]                       }
[17:39:26.447]                       invisible(muffled)
[17:39:26.447]                     }
[17:39:26.447]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.447]                   }
[17:39:26.447]                 }
[17:39:26.447]                 else {
[17:39:26.447]                   if (TRUE) {
[17:39:26.447]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.447]                     {
[17:39:26.447]                       inherits <- base::inherits
[17:39:26.447]                       invokeRestart <- base::invokeRestart
[17:39:26.447]                       is.null <- base::is.null
[17:39:26.447]                       muffled <- FALSE
[17:39:26.447]                       if (inherits(cond, "message")) {
[17:39:26.447]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.447]                         if (muffled) 
[17:39:26.447]                           invokeRestart("muffleMessage")
[17:39:26.447]                       }
[17:39:26.447]                       else if (inherits(cond, "warning")) {
[17:39:26.447]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.447]                         if (muffled) 
[17:39:26.447]                           invokeRestart("muffleWarning")
[17:39:26.447]                       }
[17:39:26.447]                       else if (inherits(cond, "condition")) {
[17:39:26.447]                         if (!is.null(pattern)) {
[17:39:26.447]                           computeRestarts <- base::computeRestarts
[17:39:26.447]                           grepl <- base::grepl
[17:39:26.447]                           restarts <- computeRestarts(cond)
[17:39:26.447]                           for (restart in restarts) {
[17:39:26.447]                             name <- restart$name
[17:39:26.447]                             if (is.null(name)) 
[17:39:26.447]                               next
[17:39:26.447]                             if (!grepl(pattern, name)) 
[17:39:26.447]                               next
[17:39:26.447]                             invokeRestart(restart)
[17:39:26.447]                             muffled <- TRUE
[17:39:26.447]                             break
[17:39:26.447]                           }
[17:39:26.447]                         }
[17:39:26.447]                       }
[17:39:26.447]                       invisible(muffled)
[17:39:26.447]                     }
[17:39:26.447]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.447]                   }
[17:39:26.447]                 }
[17:39:26.447]             }
[17:39:26.447]         }))
[17:39:26.447]     }, error = function(ex) {
[17:39:26.447]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:26.447]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.447]                 ...future.rng), started = ...future.startTime, 
[17:39:26.447]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:26.447]             version = "1.8"), class = "FutureResult")
[17:39:26.447]     }, finally = {
[17:39:26.447]         if (!identical(...future.workdir, getwd())) 
[17:39:26.447]             setwd(...future.workdir)
[17:39:26.447]         {
[17:39:26.447]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:26.447]                 ...future.oldOptions$nwarnings <- NULL
[17:39:26.447]             }
[17:39:26.447]             base::options(...future.oldOptions)
[17:39:26.447]             if (.Platform$OS.type == "windows") {
[17:39:26.447]                 old_names <- names(...future.oldEnvVars)
[17:39:26.447]                 envs <- base::Sys.getenv()
[17:39:26.447]                 names <- names(envs)
[17:39:26.447]                 common <- intersect(names, old_names)
[17:39:26.447]                 added <- setdiff(names, old_names)
[17:39:26.447]                 removed <- setdiff(old_names, names)
[17:39:26.447]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:26.447]                   envs[common]]
[17:39:26.447]                 NAMES <- toupper(changed)
[17:39:26.447]                 args <- list()
[17:39:26.447]                 for (kk in seq_along(NAMES)) {
[17:39:26.447]                   name <- changed[[kk]]
[17:39:26.447]                   NAME <- NAMES[[kk]]
[17:39:26.447]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.447]                     next
[17:39:26.447]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.447]                 }
[17:39:26.447]                 NAMES <- toupper(added)
[17:39:26.447]                 for (kk in seq_along(NAMES)) {
[17:39:26.447]                   name <- added[[kk]]
[17:39:26.447]                   NAME <- NAMES[[kk]]
[17:39:26.447]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.447]                     next
[17:39:26.447]                   args[[name]] <- ""
[17:39:26.447]                 }
[17:39:26.447]                 NAMES <- toupper(removed)
[17:39:26.447]                 for (kk in seq_along(NAMES)) {
[17:39:26.447]                   name <- removed[[kk]]
[17:39:26.447]                   NAME <- NAMES[[kk]]
[17:39:26.447]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.447]                     next
[17:39:26.447]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.447]                 }
[17:39:26.447]                 if (length(args) > 0) 
[17:39:26.447]                   base::do.call(base::Sys.setenv, args = args)
[17:39:26.447]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:26.447]             }
[17:39:26.447]             else {
[17:39:26.447]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:26.447]             }
[17:39:26.447]             {
[17:39:26.447]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:26.447]                   0L) {
[17:39:26.447]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:26.447]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:26.447]                   base::options(opts)
[17:39:26.447]                 }
[17:39:26.447]                 {
[17:39:26.447]                   {
[17:39:26.447]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:26.447]                     NULL
[17:39:26.447]                   }
[17:39:26.447]                   options(future.plan = NULL)
[17:39:26.447]                   if (is.na(NA_character_)) 
[17:39:26.447]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.447]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:26.447]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:26.447]                     .init = FALSE)
[17:39:26.447]                 }
[17:39:26.447]             }
[17:39:26.447]         }
[17:39:26.447]     })
[17:39:26.447]     if (TRUE) {
[17:39:26.447]         base::sink(type = "output", split = FALSE)
[17:39:26.447]         if (TRUE) {
[17:39:26.447]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:26.447]         }
[17:39:26.447]         else {
[17:39:26.447]             ...future.result["stdout"] <- base::list(NULL)
[17:39:26.447]         }
[17:39:26.447]         base::close(...future.stdout)
[17:39:26.447]         ...future.stdout <- NULL
[17:39:26.447]     }
[17:39:26.447]     ...future.result$conditions <- ...future.conditions
[17:39:26.447]     ...future.result$finished <- base::Sys.time()
[17:39:26.447]     ...future.result
[17:39:26.447] }
[17:39:26.450] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:39:26.450] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:39:26.451] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:39:26.451] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:39:26.452] MultisessionFuture started
[17:39:26.452] - Launch lazy future ... done
[17:39:26.452] run() for ‘MultisessionFuture’ ... done
[17:39:26.452] result() for ClusterFuture ...
[17:39:26.452] receiveMessageFromWorker() for ClusterFuture ...
[17:39:26.452] - Validating connection of MultisessionFuture
[17:39:26.457] - received message: FutureResult
[17:39:26.457] - Received FutureResult
[17:39:26.457] - Erased future from FutureRegistry
[17:39:26.457] result() for ClusterFuture ...
[17:39:26.457] - result already collected: FutureResult
[17:39:26.457] result() for ClusterFuture ... done
[17:39:26.457] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:26.458] result() for ClusterFuture ... done
[17:39:26.458] result() for ClusterFuture ...
[17:39:26.458] - result already collected: FutureResult
[17:39:26.458] result() for ClusterFuture ... done
** Future evaluation with errors
[17:39:26.458] getGlobalsAndPackages() ...
[17:39:26.459] Searching for globals...
[17:39:26.460] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[17:39:26.460] Searching for globals ... DONE
[17:39:26.461] Resolving globals: FALSE
[17:39:26.461] 
[17:39:26.461] 
[17:39:26.461] getGlobalsAndPackages() ... DONE
[17:39:26.461] run() for ‘Future’ ...
[17:39:26.462] - state: ‘created’
[17:39:26.462] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:26.476] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:26.476] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:26.477]   - Field: ‘node’
[17:39:26.477]   - Field: ‘label’
[17:39:26.477]   - Field: ‘local’
[17:39:26.477]   - Field: ‘owner’
[17:39:26.477]   - Field: ‘envir’
[17:39:26.477]   - Field: ‘workers’
[17:39:26.477]   - Field: ‘packages’
[17:39:26.477]   - Field: ‘gc’
[17:39:26.477]   - Field: ‘conditions’
[17:39:26.477]   - Field: ‘persistent’
[17:39:26.477]   - Field: ‘expr’
[17:39:26.478]   - Field: ‘uuid’
[17:39:26.478]   - Field: ‘seed’
[17:39:26.478]   - Field: ‘version’
[17:39:26.478]   - Field: ‘result’
[17:39:26.478]   - Field: ‘asynchronous’
[17:39:26.478]   - Field: ‘calls’
[17:39:26.478]   - Field: ‘globals’
[17:39:26.478]   - Field: ‘stdout’
[17:39:26.478]   - Field: ‘earlySignal’
[17:39:26.479]   - Field: ‘lazy’
[17:39:26.479]   - Field: ‘state’
[17:39:26.479] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:26.479] - Launch lazy future ...
[17:39:26.479] Packages needed by the future expression (n = 0): <none>
[17:39:26.479] Packages needed by future strategies (n = 0): <none>
[17:39:26.480] {
[17:39:26.480]     {
[17:39:26.480]         {
[17:39:26.480]             ...future.startTime <- base::Sys.time()
[17:39:26.480]             {
[17:39:26.480]                 {
[17:39:26.480]                   {
[17:39:26.480]                     {
[17:39:26.480]                       base::local({
[17:39:26.480]                         has_future <- base::requireNamespace("future", 
[17:39:26.480]                           quietly = TRUE)
[17:39:26.480]                         if (has_future) {
[17:39:26.480]                           ns <- base::getNamespace("future")
[17:39:26.480]                           version <- ns[[".package"]][["version"]]
[17:39:26.480]                           if (is.null(version)) 
[17:39:26.480]                             version <- utils::packageVersion("future")
[17:39:26.480]                         }
[17:39:26.480]                         else {
[17:39:26.480]                           version <- NULL
[17:39:26.480]                         }
[17:39:26.480]                         if (!has_future || version < "1.8.0") {
[17:39:26.480]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:26.480]                             "", base::R.version$version.string), 
[17:39:26.480]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:26.480]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:26.480]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:26.480]                               "release", "version")], collapse = " "), 
[17:39:26.480]                             hostname = base::Sys.info()[["nodename"]])
[17:39:26.480]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:26.480]                             info)
[17:39:26.480]                           info <- base::paste(info, collapse = "; ")
[17:39:26.480]                           if (!has_future) {
[17:39:26.480]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:26.480]                               info)
[17:39:26.480]                           }
[17:39:26.480]                           else {
[17:39:26.480]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:26.480]                               info, version)
[17:39:26.480]                           }
[17:39:26.480]                           base::stop(msg)
[17:39:26.480]                         }
[17:39:26.480]                       })
[17:39:26.480]                     }
[17:39:26.480]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:26.480]                     base::options(mc.cores = 1L)
[17:39:26.480]                   }
[17:39:26.480]                   ...future.strategy.old <- future::plan("list")
[17:39:26.480]                   options(future.plan = NULL)
[17:39:26.480]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.480]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:26.480]                 }
[17:39:26.480]                 ...future.workdir <- getwd()
[17:39:26.480]             }
[17:39:26.480]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:26.480]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:26.480]         }
[17:39:26.480]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:26.480]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:26.480]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:26.480]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:26.480]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:26.480]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:26.480]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:26.480]             base::names(...future.oldOptions))
[17:39:26.480]     }
[17:39:26.480]     if (FALSE) {
[17:39:26.480]     }
[17:39:26.480]     else {
[17:39:26.480]         if (TRUE) {
[17:39:26.480]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:26.480]                 open = "w")
[17:39:26.480]         }
[17:39:26.480]         else {
[17:39:26.480]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:26.480]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:26.480]         }
[17:39:26.480]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:26.480]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:26.480]             base::sink(type = "output", split = FALSE)
[17:39:26.480]             base::close(...future.stdout)
[17:39:26.480]         }, add = TRUE)
[17:39:26.480]     }
[17:39:26.480]     ...future.frame <- base::sys.nframe()
[17:39:26.480]     ...future.conditions <- base::list()
[17:39:26.480]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:26.480]     if (FALSE) {
[17:39:26.480]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:26.480]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:26.480]     }
[17:39:26.480]     ...future.result <- base::tryCatch({
[17:39:26.480]         base::withCallingHandlers({
[17:39:26.480]             ...future.value <- base::withVisible(base::local({
[17:39:26.480]                 ...future.makeSendCondition <- base::local({
[17:39:26.480]                   sendCondition <- NULL
[17:39:26.480]                   function(frame = 1L) {
[17:39:26.480]                     if (is.function(sendCondition)) 
[17:39:26.480]                       return(sendCondition)
[17:39:26.480]                     ns <- getNamespace("parallel")
[17:39:26.480]                     if (exists("sendData", mode = "function", 
[17:39:26.480]                       envir = ns)) {
[17:39:26.480]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:26.480]                         envir = ns)
[17:39:26.480]                       envir <- sys.frame(frame)
[17:39:26.480]                       master <- NULL
[17:39:26.480]                       while (!identical(envir, .GlobalEnv) && 
[17:39:26.480]                         !identical(envir, emptyenv())) {
[17:39:26.480]                         if (exists("master", mode = "list", envir = envir, 
[17:39:26.480]                           inherits = FALSE)) {
[17:39:26.480]                           master <- get("master", mode = "list", 
[17:39:26.480]                             envir = envir, inherits = FALSE)
[17:39:26.480]                           if (inherits(master, c("SOCKnode", 
[17:39:26.480]                             "SOCK0node"))) {
[17:39:26.480]                             sendCondition <<- function(cond) {
[17:39:26.480]                               data <- list(type = "VALUE", value = cond, 
[17:39:26.480]                                 success = TRUE)
[17:39:26.480]                               parallel_sendData(master, data)
[17:39:26.480]                             }
[17:39:26.480]                             return(sendCondition)
[17:39:26.480]                           }
[17:39:26.480]                         }
[17:39:26.480]                         frame <- frame + 1L
[17:39:26.480]                         envir <- sys.frame(frame)
[17:39:26.480]                       }
[17:39:26.480]                     }
[17:39:26.480]                     sendCondition <<- function(cond) NULL
[17:39:26.480]                   }
[17:39:26.480]                 })
[17:39:26.480]                 withCallingHandlers({
[17:39:26.480]                   {
[17:39:26.480]                     x <- 3
[17:39:26.480]                     stop("Woops!")
[17:39:26.480]                     x
[17:39:26.480]                   }
[17:39:26.480]                 }, immediateCondition = function(cond) {
[17:39:26.480]                   sendCondition <- ...future.makeSendCondition()
[17:39:26.480]                   sendCondition(cond)
[17:39:26.480]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.480]                   {
[17:39:26.480]                     inherits <- base::inherits
[17:39:26.480]                     invokeRestart <- base::invokeRestart
[17:39:26.480]                     is.null <- base::is.null
[17:39:26.480]                     muffled <- FALSE
[17:39:26.480]                     if (inherits(cond, "message")) {
[17:39:26.480]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:26.480]                       if (muffled) 
[17:39:26.480]                         invokeRestart("muffleMessage")
[17:39:26.480]                     }
[17:39:26.480]                     else if (inherits(cond, "warning")) {
[17:39:26.480]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:26.480]                       if (muffled) 
[17:39:26.480]                         invokeRestart("muffleWarning")
[17:39:26.480]                     }
[17:39:26.480]                     else if (inherits(cond, "condition")) {
[17:39:26.480]                       if (!is.null(pattern)) {
[17:39:26.480]                         computeRestarts <- base::computeRestarts
[17:39:26.480]                         grepl <- base::grepl
[17:39:26.480]                         restarts <- computeRestarts(cond)
[17:39:26.480]                         for (restart in restarts) {
[17:39:26.480]                           name <- restart$name
[17:39:26.480]                           if (is.null(name)) 
[17:39:26.480]                             next
[17:39:26.480]                           if (!grepl(pattern, name)) 
[17:39:26.480]                             next
[17:39:26.480]                           invokeRestart(restart)
[17:39:26.480]                           muffled <- TRUE
[17:39:26.480]                           break
[17:39:26.480]                         }
[17:39:26.480]                       }
[17:39:26.480]                     }
[17:39:26.480]                     invisible(muffled)
[17:39:26.480]                   }
[17:39:26.480]                   muffleCondition(cond)
[17:39:26.480]                 })
[17:39:26.480]             }))
[17:39:26.480]             future::FutureResult(value = ...future.value$value, 
[17:39:26.480]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.480]                   ...future.rng), globalenv = if (FALSE) 
[17:39:26.480]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:26.480]                     ...future.globalenv.names))
[17:39:26.480]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:26.480]         }, condition = base::local({
[17:39:26.480]             c <- base::c
[17:39:26.480]             inherits <- base::inherits
[17:39:26.480]             invokeRestart <- base::invokeRestart
[17:39:26.480]             length <- base::length
[17:39:26.480]             list <- base::list
[17:39:26.480]             seq.int <- base::seq.int
[17:39:26.480]             signalCondition <- base::signalCondition
[17:39:26.480]             sys.calls <- base::sys.calls
[17:39:26.480]             `[[` <- base::`[[`
[17:39:26.480]             `+` <- base::`+`
[17:39:26.480]             `<<-` <- base::`<<-`
[17:39:26.480]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:26.480]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:26.480]                   3L)]
[17:39:26.480]             }
[17:39:26.480]             function(cond) {
[17:39:26.480]                 is_error <- inherits(cond, "error")
[17:39:26.480]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:26.480]                   NULL)
[17:39:26.480]                 if (is_error) {
[17:39:26.480]                   sessionInformation <- function() {
[17:39:26.480]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:26.480]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:26.480]                       search = base::search(), system = base::Sys.info())
[17:39:26.480]                   }
[17:39:26.480]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.480]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:26.480]                     cond$call), session = sessionInformation(), 
[17:39:26.480]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:26.480]                   signalCondition(cond)
[17:39:26.480]                 }
[17:39:26.480]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:26.480]                 "immediateCondition"))) {
[17:39:26.480]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:26.480]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.480]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:26.480]                   if (TRUE && !signal) {
[17:39:26.480]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.480]                     {
[17:39:26.480]                       inherits <- base::inherits
[17:39:26.480]                       invokeRestart <- base::invokeRestart
[17:39:26.480]                       is.null <- base::is.null
[17:39:26.480]                       muffled <- FALSE
[17:39:26.480]                       if (inherits(cond, "message")) {
[17:39:26.480]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.480]                         if (muffled) 
[17:39:26.480]                           invokeRestart("muffleMessage")
[17:39:26.480]                       }
[17:39:26.480]                       else if (inherits(cond, "warning")) {
[17:39:26.480]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.480]                         if (muffled) 
[17:39:26.480]                           invokeRestart("muffleWarning")
[17:39:26.480]                       }
[17:39:26.480]                       else if (inherits(cond, "condition")) {
[17:39:26.480]                         if (!is.null(pattern)) {
[17:39:26.480]                           computeRestarts <- base::computeRestarts
[17:39:26.480]                           grepl <- base::grepl
[17:39:26.480]                           restarts <- computeRestarts(cond)
[17:39:26.480]                           for (restart in restarts) {
[17:39:26.480]                             name <- restart$name
[17:39:26.480]                             if (is.null(name)) 
[17:39:26.480]                               next
[17:39:26.480]                             if (!grepl(pattern, name)) 
[17:39:26.480]                               next
[17:39:26.480]                             invokeRestart(restart)
[17:39:26.480]                             muffled <- TRUE
[17:39:26.480]                             break
[17:39:26.480]                           }
[17:39:26.480]                         }
[17:39:26.480]                       }
[17:39:26.480]                       invisible(muffled)
[17:39:26.480]                     }
[17:39:26.480]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.480]                   }
[17:39:26.480]                 }
[17:39:26.480]                 else {
[17:39:26.480]                   if (TRUE) {
[17:39:26.480]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.480]                     {
[17:39:26.480]                       inherits <- base::inherits
[17:39:26.480]                       invokeRestart <- base::invokeRestart
[17:39:26.480]                       is.null <- base::is.null
[17:39:26.480]                       muffled <- FALSE
[17:39:26.480]                       if (inherits(cond, "message")) {
[17:39:26.480]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.480]                         if (muffled) 
[17:39:26.480]                           invokeRestart("muffleMessage")
[17:39:26.480]                       }
[17:39:26.480]                       else if (inherits(cond, "warning")) {
[17:39:26.480]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.480]                         if (muffled) 
[17:39:26.480]                           invokeRestart("muffleWarning")
[17:39:26.480]                       }
[17:39:26.480]                       else if (inherits(cond, "condition")) {
[17:39:26.480]                         if (!is.null(pattern)) {
[17:39:26.480]                           computeRestarts <- base::computeRestarts
[17:39:26.480]                           grepl <- base::grepl
[17:39:26.480]                           restarts <- computeRestarts(cond)
[17:39:26.480]                           for (restart in restarts) {
[17:39:26.480]                             name <- restart$name
[17:39:26.480]                             if (is.null(name)) 
[17:39:26.480]                               next
[17:39:26.480]                             if (!grepl(pattern, name)) 
[17:39:26.480]                               next
[17:39:26.480]                             invokeRestart(restart)
[17:39:26.480]                             muffled <- TRUE
[17:39:26.480]                             break
[17:39:26.480]                           }
[17:39:26.480]                         }
[17:39:26.480]                       }
[17:39:26.480]                       invisible(muffled)
[17:39:26.480]                     }
[17:39:26.480]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.480]                   }
[17:39:26.480]                 }
[17:39:26.480]             }
[17:39:26.480]         }))
[17:39:26.480]     }, error = function(ex) {
[17:39:26.480]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:26.480]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.480]                 ...future.rng), started = ...future.startTime, 
[17:39:26.480]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:26.480]             version = "1.8"), class = "FutureResult")
[17:39:26.480]     }, finally = {
[17:39:26.480]         if (!identical(...future.workdir, getwd())) 
[17:39:26.480]             setwd(...future.workdir)
[17:39:26.480]         {
[17:39:26.480]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:26.480]                 ...future.oldOptions$nwarnings <- NULL
[17:39:26.480]             }
[17:39:26.480]             base::options(...future.oldOptions)
[17:39:26.480]             if (.Platform$OS.type == "windows") {
[17:39:26.480]                 old_names <- names(...future.oldEnvVars)
[17:39:26.480]                 envs <- base::Sys.getenv()
[17:39:26.480]                 names <- names(envs)
[17:39:26.480]                 common <- intersect(names, old_names)
[17:39:26.480]                 added <- setdiff(names, old_names)
[17:39:26.480]                 removed <- setdiff(old_names, names)
[17:39:26.480]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:26.480]                   envs[common]]
[17:39:26.480]                 NAMES <- toupper(changed)
[17:39:26.480]                 args <- list()
[17:39:26.480]                 for (kk in seq_along(NAMES)) {
[17:39:26.480]                   name <- changed[[kk]]
[17:39:26.480]                   NAME <- NAMES[[kk]]
[17:39:26.480]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.480]                     next
[17:39:26.480]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.480]                 }
[17:39:26.480]                 NAMES <- toupper(added)
[17:39:26.480]                 for (kk in seq_along(NAMES)) {
[17:39:26.480]                   name <- added[[kk]]
[17:39:26.480]                   NAME <- NAMES[[kk]]
[17:39:26.480]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.480]                     next
[17:39:26.480]                   args[[name]] <- ""
[17:39:26.480]                 }
[17:39:26.480]                 NAMES <- toupper(removed)
[17:39:26.480]                 for (kk in seq_along(NAMES)) {
[17:39:26.480]                   name <- removed[[kk]]
[17:39:26.480]                   NAME <- NAMES[[kk]]
[17:39:26.480]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.480]                     next
[17:39:26.480]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.480]                 }
[17:39:26.480]                 if (length(args) > 0) 
[17:39:26.480]                   base::do.call(base::Sys.setenv, args = args)
[17:39:26.480]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:26.480]             }
[17:39:26.480]             else {
[17:39:26.480]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:26.480]             }
[17:39:26.480]             {
[17:39:26.480]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:26.480]                   0L) {
[17:39:26.480]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:26.480]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:26.480]                   base::options(opts)
[17:39:26.480]                 }
[17:39:26.480]                 {
[17:39:26.480]                   {
[17:39:26.480]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:26.480]                     NULL
[17:39:26.480]                   }
[17:39:26.480]                   options(future.plan = NULL)
[17:39:26.480]                   if (is.na(NA_character_)) 
[17:39:26.480]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.480]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:26.480]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:26.480]                     .init = FALSE)
[17:39:26.480]                 }
[17:39:26.480]             }
[17:39:26.480]         }
[17:39:26.480]     })
[17:39:26.480]     if (TRUE) {
[17:39:26.480]         base::sink(type = "output", split = FALSE)
[17:39:26.480]         if (TRUE) {
[17:39:26.480]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:26.480]         }
[17:39:26.480]         else {
[17:39:26.480]             ...future.result["stdout"] <- base::list(NULL)
[17:39:26.480]         }
[17:39:26.480]         base::close(...future.stdout)
[17:39:26.480]         ...future.stdout <- NULL
[17:39:26.480]     }
[17:39:26.480]     ...future.result$conditions <- ...future.conditions
[17:39:26.480]     ...future.result$finished <- base::Sys.time()
[17:39:26.480]     ...future.result
[17:39:26.480] }
[17:39:26.483] MultisessionFuture started
[17:39:26.483] - Launch lazy future ... done
[17:39:26.483] run() for ‘MultisessionFuture’ ... done
[17:39:26.484] result() for ClusterFuture ...
[17:39:26.484] receiveMessageFromWorker() for ClusterFuture ...
[17:39:26.484] - Validating connection of MultisessionFuture
[17:39:26.485] - received message: FutureResult
[17:39:26.486] - Received FutureResult
[17:39:26.486] - Erased future from FutureRegistry
[17:39:26.486] result() for ClusterFuture ...
[17:39:26.486] - result already collected: FutureResult
[17:39:26.486] result() for ClusterFuture ... done
[17:39:26.486] signalConditions() ...
[17:39:26.486]  - include = ‘immediateCondition’
[17:39:26.486]  - exclude = 
[17:39:26.487]  - resignal = FALSE
[17:39:26.487]  - Number of conditions: 1
[17:39:26.487] signalConditions() ... done
[17:39:26.487] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:26.487] result() for ClusterFuture ... done
[17:39:26.487] result() for ClusterFuture ...
[17:39:26.487] - result already collected: FutureResult
[17:39:26.487] result() for ClusterFuture ... done
[17:39:26.487] signalConditions() ...
[17:39:26.487]  - include = ‘immediateCondition’
[17:39:26.488]  - exclude = 
[17:39:26.488]  - resignal = FALSE
[17:39:26.488]  - Number of conditions: 1
[17:39:26.488] signalConditions() ... done
[17:39:26.488] Future state: ‘finished’
[17:39:26.488] result() for ClusterFuture ...
[17:39:26.488] - result already collected: FutureResult
[17:39:26.488] result() for ClusterFuture ... done
[17:39:26.489] signalConditions() ...
[17:39:26.489]  - include = ‘condition’
[17:39:26.489]  - exclude = ‘immediateCondition’
[17:39:26.489]  - resignal = TRUE
[17:39:26.489]  - Number of conditions: 1
[17:39:26.489]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:26.489] signalConditions() ... done
[17:39:26.490] getGlobalsAndPackages() ...
[17:39:26.490] Searching for globals...
[17:39:26.492] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:39:26.492] Searching for globals ... DONE
[17:39:26.492] Resolving globals: FALSE
[17:39:26.493] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:26.493] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:39:26.493] - globals: [1] ‘ii’
[17:39:26.493] 
[17:39:26.493] getGlobalsAndPackages() ... DONE
[17:39:26.494] run() for ‘Future’ ...
[17:39:26.494] - state: ‘created’
[17:39:26.494] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:26.510] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:26.510] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:26.511]   - Field: ‘node’
[17:39:26.511]   - Field: ‘label’
[17:39:26.511]   - Field: ‘local’
[17:39:26.511]   - Field: ‘owner’
[17:39:26.511]   - Field: ‘envir’
[17:39:26.511]   - Field: ‘workers’
[17:39:26.511]   - Field: ‘packages’
[17:39:26.511]   - Field: ‘gc’
[17:39:26.511]   - Field: ‘conditions’
[17:39:26.511]   - Field: ‘persistent’
[17:39:26.511]   - Field: ‘expr’
[17:39:26.512]   - Field: ‘uuid’
[17:39:26.512]   - Field: ‘seed’
[17:39:26.512]   - Field: ‘version’
[17:39:26.512]   - Field: ‘result’
[17:39:26.512]   - Field: ‘asynchronous’
[17:39:26.512]   - Field: ‘calls’
[17:39:26.512]   - Field: ‘globals’
[17:39:26.512]   - Field: ‘stdout’
[17:39:26.512]   - Field: ‘earlySignal’
[17:39:26.512]   - Field: ‘lazy’
[17:39:26.512]   - Field: ‘state’
[17:39:26.513] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:26.513] - Launch lazy future ...
[17:39:26.513] Packages needed by the future expression (n = 0): <none>
[17:39:26.513] Packages needed by future strategies (n = 0): <none>
[17:39:26.513] {
[17:39:26.513]     {
[17:39:26.513]         {
[17:39:26.513]             ...future.startTime <- base::Sys.time()
[17:39:26.513]             {
[17:39:26.513]                 {
[17:39:26.513]                   {
[17:39:26.513]                     {
[17:39:26.513]                       base::local({
[17:39:26.513]                         has_future <- base::requireNamespace("future", 
[17:39:26.513]                           quietly = TRUE)
[17:39:26.513]                         if (has_future) {
[17:39:26.513]                           ns <- base::getNamespace("future")
[17:39:26.513]                           version <- ns[[".package"]][["version"]]
[17:39:26.513]                           if (is.null(version)) 
[17:39:26.513]                             version <- utils::packageVersion("future")
[17:39:26.513]                         }
[17:39:26.513]                         else {
[17:39:26.513]                           version <- NULL
[17:39:26.513]                         }
[17:39:26.513]                         if (!has_future || version < "1.8.0") {
[17:39:26.513]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:26.513]                             "", base::R.version$version.string), 
[17:39:26.513]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:26.513]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:26.513]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:26.513]                               "release", "version")], collapse = " "), 
[17:39:26.513]                             hostname = base::Sys.info()[["nodename"]])
[17:39:26.513]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:26.513]                             info)
[17:39:26.513]                           info <- base::paste(info, collapse = "; ")
[17:39:26.513]                           if (!has_future) {
[17:39:26.513]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:26.513]                               info)
[17:39:26.513]                           }
[17:39:26.513]                           else {
[17:39:26.513]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:26.513]                               info, version)
[17:39:26.513]                           }
[17:39:26.513]                           base::stop(msg)
[17:39:26.513]                         }
[17:39:26.513]                       })
[17:39:26.513]                     }
[17:39:26.513]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:26.513]                     base::options(mc.cores = 1L)
[17:39:26.513]                   }
[17:39:26.513]                   ...future.strategy.old <- future::plan("list")
[17:39:26.513]                   options(future.plan = NULL)
[17:39:26.513]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.513]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:26.513]                 }
[17:39:26.513]                 ...future.workdir <- getwd()
[17:39:26.513]             }
[17:39:26.513]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:26.513]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:26.513]         }
[17:39:26.513]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:26.513]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:26.513]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:26.513]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:26.513]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:26.513]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:26.513]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:26.513]             base::names(...future.oldOptions))
[17:39:26.513]     }
[17:39:26.513]     if (FALSE) {
[17:39:26.513]     }
[17:39:26.513]     else {
[17:39:26.513]         if (TRUE) {
[17:39:26.513]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:26.513]                 open = "w")
[17:39:26.513]         }
[17:39:26.513]         else {
[17:39:26.513]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:26.513]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:26.513]         }
[17:39:26.513]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:26.513]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:26.513]             base::sink(type = "output", split = FALSE)
[17:39:26.513]             base::close(...future.stdout)
[17:39:26.513]         }, add = TRUE)
[17:39:26.513]     }
[17:39:26.513]     ...future.frame <- base::sys.nframe()
[17:39:26.513]     ...future.conditions <- base::list()
[17:39:26.513]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:26.513]     if (FALSE) {
[17:39:26.513]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:26.513]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:26.513]     }
[17:39:26.513]     ...future.result <- base::tryCatch({
[17:39:26.513]         base::withCallingHandlers({
[17:39:26.513]             ...future.value <- base::withVisible(base::local({
[17:39:26.513]                 ...future.makeSendCondition <- base::local({
[17:39:26.513]                   sendCondition <- NULL
[17:39:26.513]                   function(frame = 1L) {
[17:39:26.513]                     if (is.function(sendCondition)) 
[17:39:26.513]                       return(sendCondition)
[17:39:26.513]                     ns <- getNamespace("parallel")
[17:39:26.513]                     if (exists("sendData", mode = "function", 
[17:39:26.513]                       envir = ns)) {
[17:39:26.513]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:26.513]                         envir = ns)
[17:39:26.513]                       envir <- sys.frame(frame)
[17:39:26.513]                       master <- NULL
[17:39:26.513]                       while (!identical(envir, .GlobalEnv) && 
[17:39:26.513]                         !identical(envir, emptyenv())) {
[17:39:26.513]                         if (exists("master", mode = "list", envir = envir, 
[17:39:26.513]                           inherits = FALSE)) {
[17:39:26.513]                           master <- get("master", mode = "list", 
[17:39:26.513]                             envir = envir, inherits = FALSE)
[17:39:26.513]                           if (inherits(master, c("SOCKnode", 
[17:39:26.513]                             "SOCK0node"))) {
[17:39:26.513]                             sendCondition <<- function(cond) {
[17:39:26.513]                               data <- list(type = "VALUE", value = cond, 
[17:39:26.513]                                 success = TRUE)
[17:39:26.513]                               parallel_sendData(master, data)
[17:39:26.513]                             }
[17:39:26.513]                             return(sendCondition)
[17:39:26.513]                           }
[17:39:26.513]                         }
[17:39:26.513]                         frame <- frame + 1L
[17:39:26.513]                         envir <- sys.frame(frame)
[17:39:26.513]                       }
[17:39:26.513]                     }
[17:39:26.513]                     sendCondition <<- function(cond) NULL
[17:39:26.513]                   }
[17:39:26.513]                 })
[17:39:26.513]                 withCallingHandlers({
[17:39:26.513]                   {
[17:39:26.513]                     if (ii%%2 == 0) 
[17:39:26.513]                       stop("Woops!")
[17:39:26.513]                     ii
[17:39:26.513]                   }
[17:39:26.513]                 }, immediateCondition = function(cond) {
[17:39:26.513]                   sendCondition <- ...future.makeSendCondition()
[17:39:26.513]                   sendCondition(cond)
[17:39:26.513]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.513]                   {
[17:39:26.513]                     inherits <- base::inherits
[17:39:26.513]                     invokeRestart <- base::invokeRestart
[17:39:26.513]                     is.null <- base::is.null
[17:39:26.513]                     muffled <- FALSE
[17:39:26.513]                     if (inherits(cond, "message")) {
[17:39:26.513]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:26.513]                       if (muffled) 
[17:39:26.513]                         invokeRestart("muffleMessage")
[17:39:26.513]                     }
[17:39:26.513]                     else if (inherits(cond, "warning")) {
[17:39:26.513]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:26.513]                       if (muffled) 
[17:39:26.513]                         invokeRestart("muffleWarning")
[17:39:26.513]                     }
[17:39:26.513]                     else if (inherits(cond, "condition")) {
[17:39:26.513]                       if (!is.null(pattern)) {
[17:39:26.513]                         computeRestarts <- base::computeRestarts
[17:39:26.513]                         grepl <- base::grepl
[17:39:26.513]                         restarts <- computeRestarts(cond)
[17:39:26.513]                         for (restart in restarts) {
[17:39:26.513]                           name <- restart$name
[17:39:26.513]                           if (is.null(name)) 
[17:39:26.513]                             next
[17:39:26.513]                           if (!grepl(pattern, name)) 
[17:39:26.513]                             next
[17:39:26.513]                           invokeRestart(restart)
[17:39:26.513]                           muffled <- TRUE
[17:39:26.513]                           break
[17:39:26.513]                         }
[17:39:26.513]                       }
[17:39:26.513]                     }
[17:39:26.513]                     invisible(muffled)
[17:39:26.513]                   }
[17:39:26.513]                   muffleCondition(cond)
[17:39:26.513]                 })
[17:39:26.513]             }))
[17:39:26.513]             future::FutureResult(value = ...future.value$value, 
[17:39:26.513]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.513]                   ...future.rng), globalenv = if (FALSE) 
[17:39:26.513]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:26.513]                     ...future.globalenv.names))
[17:39:26.513]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:26.513]         }, condition = base::local({
[17:39:26.513]             c <- base::c
[17:39:26.513]             inherits <- base::inherits
[17:39:26.513]             invokeRestart <- base::invokeRestart
[17:39:26.513]             length <- base::length
[17:39:26.513]             list <- base::list
[17:39:26.513]             seq.int <- base::seq.int
[17:39:26.513]             signalCondition <- base::signalCondition
[17:39:26.513]             sys.calls <- base::sys.calls
[17:39:26.513]             `[[` <- base::`[[`
[17:39:26.513]             `+` <- base::`+`
[17:39:26.513]             `<<-` <- base::`<<-`
[17:39:26.513]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:26.513]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:26.513]                   3L)]
[17:39:26.513]             }
[17:39:26.513]             function(cond) {
[17:39:26.513]                 is_error <- inherits(cond, "error")
[17:39:26.513]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:26.513]                   NULL)
[17:39:26.513]                 if (is_error) {
[17:39:26.513]                   sessionInformation <- function() {
[17:39:26.513]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:26.513]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:26.513]                       search = base::search(), system = base::Sys.info())
[17:39:26.513]                   }
[17:39:26.513]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.513]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:26.513]                     cond$call), session = sessionInformation(), 
[17:39:26.513]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:26.513]                   signalCondition(cond)
[17:39:26.513]                 }
[17:39:26.513]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:26.513]                 "immediateCondition"))) {
[17:39:26.513]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:26.513]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.513]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:26.513]                   if (TRUE && !signal) {
[17:39:26.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.513]                     {
[17:39:26.513]                       inherits <- base::inherits
[17:39:26.513]                       invokeRestart <- base::invokeRestart
[17:39:26.513]                       is.null <- base::is.null
[17:39:26.513]                       muffled <- FALSE
[17:39:26.513]                       if (inherits(cond, "message")) {
[17:39:26.513]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.513]                         if (muffled) 
[17:39:26.513]                           invokeRestart("muffleMessage")
[17:39:26.513]                       }
[17:39:26.513]                       else if (inherits(cond, "warning")) {
[17:39:26.513]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.513]                         if (muffled) 
[17:39:26.513]                           invokeRestart("muffleWarning")
[17:39:26.513]                       }
[17:39:26.513]                       else if (inherits(cond, "condition")) {
[17:39:26.513]                         if (!is.null(pattern)) {
[17:39:26.513]                           computeRestarts <- base::computeRestarts
[17:39:26.513]                           grepl <- base::grepl
[17:39:26.513]                           restarts <- computeRestarts(cond)
[17:39:26.513]                           for (restart in restarts) {
[17:39:26.513]                             name <- restart$name
[17:39:26.513]                             if (is.null(name)) 
[17:39:26.513]                               next
[17:39:26.513]                             if (!grepl(pattern, name)) 
[17:39:26.513]                               next
[17:39:26.513]                             invokeRestart(restart)
[17:39:26.513]                             muffled <- TRUE
[17:39:26.513]                             break
[17:39:26.513]                           }
[17:39:26.513]                         }
[17:39:26.513]                       }
[17:39:26.513]                       invisible(muffled)
[17:39:26.513]                     }
[17:39:26.513]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.513]                   }
[17:39:26.513]                 }
[17:39:26.513]                 else {
[17:39:26.513]                   if (TRUE) {
[17:39:26.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.513]                     {
[17:39:26.513]                       inherits <- base::inherits
[17:39:26.513]                       invokeRestart <- base::invokeRestart
[17:39:26.513]                       is.null <- base::is.null
[17:39:26.513]                       muffled <- FALSE
[17:39:26.513]                       if (inherits(cond, "message")) {
[17:39:26.513]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.513]                         if (muffled) 
[17:39:26.513]                           invokeRestart("muffleMessage")
[17:39:26.513]                       }
[17:39:26.513]                       else if (inherits(cond, "warning")) {
[17:39:26.513]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.513]                         if (muffled) 
[17:39:26.513]                           invokeRestart("muffleWarning")
[17:39:26.513]                       }
[17:39:26.513]                       else if (inherits(cond, "condition")) {
[17:39:26.513]                         if (!is.null(pattern)) {
[17:39:26.513]                           computeRestarts <- base::computeRestarts
[17:39:26.513]                           grepl <- base::grepl
[17:39:26.513]                           restarts <- computeRestarts(cond)
[17:39:26.513]                           for (restart in restarts) {
[17:39:26.513]                             name <- restart$name
[17:39:26.513]                             if (is.null(name)) 
[17:39:26.513]                               next
[17:39:26.513]                             if (!grepl(pattern, name)) 
[17:39:26.513]                               next
[17:39:26.513]                             invokeRestart(restart)
[17:39:26.513]                             muffled <- TRUE
[17:39:26.513]                             break
[17:39:26.513]                           }
[17:39:26.513]                         }
[17:39:26.513]                       }
[17:39:26.513]                       invisible(muffled)
[17:39:26.513]                     }
[17:39:26.513]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.513]                   }
[17:39:26.513]                 }
[17:39:26.513]             }
[17:39:26.513]         }))
[17:39:26.513]     }, error = function(ex) {
[17:39:26.513]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:26.513]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.513]                 ...future.rng), started = ...future.startTime, 
[17:39:26.513]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:26.513]             version = "1.8"), class = "FutureResult")
[17:39:26.513]     }, finally = {
[17:39:26.513]         if (!identical(...future.workdir, getwd())) 
[17:39:26.513]             setwd(...future.workdir)
[17:39:26.513]         {
[17:39:26.513]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:26.513]                 ...future.oldOptions$nwarnings <- NULL
[17:39:26.513]             }
[17:39:26.513]             base::options(...future.oldOptions)
[17:39:26.513]             if (.Platform$OS.type == "windows") {
[17:39:26.513]                 old_names <- names(...future.oldEnvVars)
[17:39:26.513]                 envs <- base::Sys.getenv()
[17:39:26.513]                 names <- names(envs)
[17:39:26.513]                 common <- intersect(names, old_names)
[17:39:26.513]                 added <- setdiff(names, old_names)
[17:39:26.513]                 removed <- setdiff(old_names, names)
[17:39:26.513]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:26.513]                   envs[common]]
[17:39:26.513]                 NAMES <- toupper(changed)
[17:39:26.513]                 args <- list()
[17:39:26.513]                 for (kk in seq_along(NAMES)) {
[17:39:26.513]                   name <- changed[[kk]]
[17:39:26.513]                   NAME <- NAMES[[kk]]
[17:39:26.513]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.513]                     next
[17:39:26.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.513]                 }
[17:39:26.513]                 NAMES <- toupper(added)
[17:39:26.513]                 for (kk in seq_along(NAMES)) {
[17:39:26.513]                   name <- added[[kk]]
[17:39:26.513]                   NAME <- NAMES[[kk]]
[17:39:26.513]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.513]                     next
[17:39:26.513]                   args[[name]] <- ""
[17:39:26.513]                 }
[17:39:26.513]                 NAMES <- toupper(removed)
[17:39:26.513]                 for (kk in seq_along(NAMES)) {
[17:39:26.513]                   name <- removed[[kk]]
[17:39:26.513]                   NAME <- NAMES[[kk]]
[17:39:26.513]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.513]                     next
[17:39:26.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.513]                 }
[17:39:26.513]                 if (length(args) > 0) 
[17:39:26.513]                   base::do.call(base::Sys.setenv, args = args)
[17:39:26.513]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:26.513]             }
[17:39:26.513]             else {
[17:39:26.513]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:26.513]             }
[17:39:26.513]             {
[17:39:26.513]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:26.513]                   0L) {
[17:39:26.513]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:26.513]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:26.513]                   base::options(opts)
[17:39:26.513]                 }
[17:39:26.513]                 {
[17:39:26.513]                   {
[17:39:26.513]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:26.513]                     NULL
[17:39:26.513]                   }
[17:39:26.513]                   options(future.plan = NULL)
[17:39:26.513]                   if (is.na(NA_character_)) 
[17:39:26.513]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.513]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:26.513]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:26.513]                     .init = FALSE)
[17:39:26.513]                 }
[17:39:26.513]             }
[17:39:26.513]         }
[17:39:26.513]     })
[17:39:26.513]     if (TRUE) {
[17:39:26.513]         base::sink(type = "output", split = FALSE)
[17:39:26.513]         if (TRUE) {
[17:39:26.513]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:26.513]         }
[17:39:26.513]         else {
[17:39:26.513]             ...future.result["stdout"] <- base::list(NULL)
[17:39:26.513]         }
[17:39:26.513]         base::close(...future.stdout)
[17:39:26.513]         ...future.stdout <- NULL
[17:39:26.513]     }
[17:39:26.513]     ...future.result$conditions <- ...future.conditions
[17:39:26.513]     ...future.result$finished <- base::Sys.time()
[17:39:26.513]     ...future.result
[17:39:26.513] }
[17:39:26.516] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:39:26.516] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:39:26.517] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:39:26.517] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:39:26.517] MultisessionFuture started
[17:39:26.517] - Launch lazy future ... done
[17:39:26.517] run() for ‘MultisessionFuture’ ... done
[17:39:26.518] getGlobalsAndPackages() ...
[17:39:26.518] Searching for globals...
[17:39:26.519] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:39:26.519] Searching for globals ... DONE
[17:39:26.519] Resolving globals: FALSE
[17:39:26.520] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:26.520] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:39:26.520] - globals: [1] ‘ii’
[17:39:26.520] 
[17:39:26.521] getGlobalsAndPackages() ... DONE
[17:39:26.521] run() for ‘Future’ ...
[17:39:26.521] - state: ‘created’
[17:39:26.521] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:26.535] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:26.535] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:26.535]   - Field: ‘node’
[17:39:26.535]   - Field: ‘label’
[17:39:26.535]   - Field: ‘local’
[17:39:26.535]   - Field: ‘owner’
[17:39:26.536]   - Field: ‘envir’
[17:39:26.536]   - Field: ‘workers’
[17:39:26.536]   - Field: ‘packages’
[17:39:26.536]   - Field: ‘gc’
[17:39:26.536]   - Field: ‘conditions’
[17:39:26.536]   - Field: ‘persistent’
[17:39:26.536]   - Field: ‘expr’
[17:39:26.536]   - Field: ‘uuid’
[17:39:26.536]   - Field: ‘seed’
[17:39:26.536]   - Field: ‘version’
[17:39:26.537]   - Field: ‘result’
[17:39:26.537]   - Field: ‘asynchronous’
[17:39:26.537]   - Field: ‘calls’
[17:39:26.537]   - Field: ‘globals’
[17:39:26.537]   - Field: ‘stdout’
[17:39:26.537]   - Field: ‘earlySignal’
[17:39:26.537]   - Field: ‘lazy’
[17:39:26.537]   - Field: ‘state’
[17:39:26.537] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:26.537] - Launch lazy future ...
[17:39:26.538] Packages needed by the future expression (n = 0): <none>
[17:39:26.538] Packages needed by future strategies (n = 0): <none>
[17:39:26.538] {
[17:39:26.538]     {
[17:39:26.538]         {
[17:39:26.538]             ...future.startTime <- base::Sys.time()
[17:39:26.538]             {
[17:39:26.538]                 {
[17:39:26.538]                   {
[17:39:26.538]                     {
[17:39:26.538]                       base::local({
[17:39:26.538]                         has_future <- base::requireNamespace("future", 
[17:39:26.538]                           quietly = TRUE)
[17:39:26.538]                         if (has_future) {
[17:39:26.538]                           ns <- base::getNamespace("future")
[17:39:26.538]                           version <- ns[[".package"]][["version"]]
[17:39:26.538]                           if (is.null(version)) 
[17:39:26.538]                             version <- utils::packageVersion("future")
[17:39:26.538]                         }
[17:39:26.538]                         else {
[17:39:26.538]                           version <- NULL
[17:39:26.538]                         }
[17:39:26.538]                         if (!has_future || version < "1.8.0") {
[17:39:26.538]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:26.538]                             "", base::R.version$version.string), 
[17:39:26.538]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:26.538]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:26.538]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:26.538]                               "release", "version")], collapse = " "), 
[17:39:26.538]                             hostname = base::Sys.info()[["nodename"]])
[17:39:26.538]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:26.538]                             info)
[17:39:26.538]                           info <- base::paste(info, collapse = "; ")
[17:39:26.538]                           if (!has_future) {
[17:39:26.538]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:26.538]                               info)
[17:39:26.538]                           }
[17:39:26.538]                           else {
[17:39:26.538]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:26.538]                               info, version)
[17:39:26.538]                           }
[17:39:26.538]                           base::stop(msg)
[17:39:26.538]                         }
[17:39:26.538]                       })
[17:39:26.538]                     }
[17:39:26.538]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:26.538]                     base::options(mc.cores = 1L)
[17:39:26.538]                   }
[17:39:26.538]                   ...future.strategy.old <- future::plan("list")
[17:39:26.538]                   options(future.plan = NULL)
[17:39:26.538]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.538]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:26.538]                 }
[17:39:26.538]                 ...future.workdir <- getwd()
[17:39:26.538]             }
[17:39:26.538]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:26.538]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:26.538]         }
[17:39:26.538]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:26.538]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:26.538]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:26.538]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:26.538]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:26.538]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:26.538]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:26.538]             base::names(...future.oldOptions))
[17:39:26.538]     }
[17:39:26.538]     if (FALSE) {
[17:39:26.538]     }
[17:39:26.538]     else {
[17:39:26.538]         if (TRUE) {
[17:39:26.538]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:26.538]                 open = "w")
[17:39:26.538]         }
[17:39:26.538]         else {
[17:39:26.538]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:26.538]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:26.538]         }
[17:39:26.538]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:26.538]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:26.538]             base::sink(type = "output", split = FALSE)
[17:39:26.538]             base::close(...future.stdout)
[17:39:26.538]         }, add = TRUE)
[17:39:26.538]     }
[17:39:26.538]     ...future.frame <- base::sys.nframe()
[17:39:26.538]     ...future.conditions <- base::list()
[17:39:26.538]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:26.538]     if (FALSE) {
[17:39:26.538]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:26.538]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:26.538]     }
[17:39:26.538]     ...future.result <- base::tryCatch({
[17:39:26.538]         base::withCallingHandlers({
[17:39:26.538]             ...future.value <- base::withVisible(base::local({
[17:39:26.538]                 ...future.makeSendCondition <- base::local({
[17:39:26.538]                   sendCondition <- NULL
[17:39:26.538]                   function(frame = 1L) {
[17:39:26.538]                     if (is.function(sendCondition)) 
[17:39:26.538]                       return(sendCondition)
[17:39:26.538]                     ns <- getNamespace("parallel")
[17:39:26.538]                     if (exists("sendData", mode = "function", 
[17:39:26.538]                       envir = ns)) {
[17:39:26.538]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:26.538]                         envir = ns)
[17:39:26.538]                       envir <- sys.frame(frame)
[17:39:26.538]                       master <- NULL
[17:39:26.538]                       while (!identical(envir, .GlobalEnv) && 
[17:39:26.538]                         !identical(envir, emptyenv())) {
[17:39:26.538]                         if (exists("master", mode = "list", envir = envir, 
[17:39:26.538]                           inherits = FALSE)) {
[17:39:26.538]                           master <- get("master", mode = "list", 
[17:39:26.538]                             envir = envir, inherits = FALSE)
[17:39:26.538]                           if (inherits(master, c("SOCKnode", 
[17:39:26.538]                             "SOCK0node"))) {
[17:39:26.538]                             sendCondition <<- function(cond) {
[17:39:26.538]                               data <- list(type = "VALUE", value = cond, 
[17:39:26.538]                                 success = TRUE)
[17:39:26.538]                               parallel_sendData(master, data)
[17:39:26.538]                             }
[17:39:26.538]                             return(sendCondition)
[17:39:26.538]                           }
[17:39:26.538]                         }
[17:39:26.538]                         frame <- frame + 1L
[17:39:26.538]                         envir <- sys.frame(frame)
[17:39:26.538]                       }
[17:39:26.538]                     }
[17:39:26.538]                     sendCondition <<- function(cond) NULL
[17:39:26.538]                   }
[17:39:26.538]                 })
[17:39:26.538]                 withCallingHandlers({
[17:39:26.538]                   {
[17:39:26.538]                     if (ii%%2 == 0) 
[17:39:26.538]                       stop("Woops!")
[17:39:26.538]                     ii
[17:39:26.538]                   }
[17:39:26.538]                 }, immediateCondition = function(cond) {
[17:39:26.538]                   sendCondition <- ...future.makeSendCondition()
[17:39:26.538]                   sendCondition(cond)
[17:39:26.538]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.538]                   {
[17:39:26.538]                     inherits <- base::inherits
[17:39:26.538]                     invokeRestart <- base::invokeRestart
[17:39:26.538]                     is.null <- base::is.null
[17:39:26.538]                     muffled <- FALSE
[17:39:26.538]                     if (inherits(cond, "message")) {
[17:39:26.538]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:26.538]                       if (muffled) 
[17:39:26.538]                         invokeRestart("muffleMessage")
[17:39:26.538]                     }
[17:39:26.538]                     else if (inherits(cond, "warning")) {
[17:39:26.538]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:26.538]                       if (muffled) 
[17:39:26.538]                         invokeRestart("muffleWarning")
[17:39:26.538]                     }
[17:39:26.538]                     else if (inherits(cond, "condition")) {
[17:39:26.538]                       if (!is.null(pattern)) {
[17:39:26.538]                         computeRestarts <- base::computeRestarts
[17:39:26.538]                         grepl <- base::grepl
[17:39:26.538]                         restarts <- computeRestarts(cond)
[17:39:26.538]                         for (restart in restarts) {
[17:39:26.538]                           name <- restart$name
[17:39:26.538]                           if (is.null(name)) 
[17:39:26.538]                             next
[17:39:26.538]                           if (!grepl(pattern, name)) 
[17:39:26.538]                             next
[17:39:26.538]                           invokeRestart(restart)
[17:39:26.538]                           muffled <- TRUE
[17:39:26.538]                           break
[17:39:26.538]                         }
[17:39:26.538]                       }
[17:39:26.538]                     }
[17:39:26.538]                     invisible(muffled)
[17:39:26.538]                   }
[17:39:26.538]                   muffleCondition(cond)
[17:39:26.538]                 })
[17:39:26.538]             }))
[17:39:26.538]             future::FutureResult(value = ...future.value$value, 
[17:39:26.538]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.538]                   ...future.rng), globalenv = if (FALSE) 
[17:39:26.538]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:26.538]                     ...future.globalenv.names))
[17:39:26.538]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:26.538]         }, condition = base::local({
[17:39:26.538]             c <- base::c
[17:39:26.538]             inherits <- base::inherits
[17:39:26.538]             invokeRestart <- base::invokeRestart
[17:39:26.538]             length <- base::length
[17:39:26.538]             list <- base::list
[17:39:26.538]             seq.int <- base::seq.int
[17:39:26.538]             signalCondition <- base::signalCondition
[17:39:26.538]             sys.calls <- base::sys.calls
[17:39:26.538]             `[[` <- base::`[[`
[17:39:26.538]             `+` <- base::`+`
[17:39:26.538]             `<<-` <- base::`<<-`
[17:39:26.538]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:26.538]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:26.538]                   3L)]
[17:39:26.538]             }
[17:39:26.538]             function(cond) {
[17:39:26.538]                 is_error <- inherits(cond, "error")
[17:39:26.538]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:26.538]                   NULL)
[17:39:26.538]                 if (is_error) {
[17:39:26.538]                   sessionInformation <- function() {
[17:39:26.538]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:26.538]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:26.538]                       search = base::search(), system = base::Sys.info())
[17:39:26.538]                   }
[17:39:26.538]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.538]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:26.538]                     cond$call), session = sessionInformation(), 
[17:39:26.538]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:26.538]                   signalCondition(cond)
[17:39:26.538]                 }
[17:39:26.538]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:26.538]                 "immediateCondition"))) {
[17:39:26.538]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:26.538]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.538]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:26.538]                   if (TRUE && !signal) {
[17:39:26.538]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.538]                     {
[17:39:26.538]                       inherits <- base::inherits
[17:39:26.538]                       invokeRestart <- base::invokeRestart
[17:39:26.538]                       is.null <- base::is.null
[17:39:26.538]                       muffled <- FALSE
[17:39:26.538]                       if (inherits(cond, "message")) {
[17:39:26.538]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.538]                         if (muffled) 
[17:39:26.538]                           invokeRestart("muffleMessage")
[17:39:26.538]                       }
[17:39:26.538]                       else if (inherits(cond, "warning")) {
[17:39:26.538]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.538]                         if (muffled) 
[17:39:26.538]                           invokeRestart("muffleWarning")
[17:39:26.538]                       }
[17:39:26.538]                       else if (inherits(cond, "condition")) {
[17:39:26.538]                         if (!is.null(pattern)) {
[17:39:26.538]                           computeRestarts <- base::computeRestarts
[17:39:26.538]                           grepl <- base::grepl
[17:39:26.538]                           restarts <- computeRestarts(cond)
[17:39:26.538]                           for (restart in restarts) {
[17:39:26.538]                             name <- restart$name
[17:39:26.538]                             if (is.null(name)) 
[17:39:26.538]                               next
[17:39:26.538]                             if (!grepl(pattern, name)) 
[17:39:26.538]                               next
[17:39:26.538]                             invokeRestart(restart)
[17:39:26.538]                             muffled <- TRUE
[17:39:26.538]                             break
[17:39:26.538]                           }
[17:39:26.538]                         }
[17:39:26.538]                       }
[17:39:26.538]                       invisible(muffled)
[17:39:26.538]                     }
[17:39:26.538]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.538]                   }
[17:39:26.538]                 }
[17:39:26.538]                 else {
[17:39:26.538]                   if (TRUE) {
[17:39:26.538]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.538]                     {
[17:39:26.538]                       inherits <- base::inherits
[17:39:26.538]                       invokeRestart <- base::invokeRestart
[17:39:26.538]                       is.null <- base::is.null
[17:39:26.538]                       muffled <- FALSE
[17:39:26.538]                       if (inherits(cond, "message")) {
[17:39:26.538]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.538]                         if (muffled) 
[17:39:26.538]                           invokeRestart("muffleMessage")
[17:39:26.538]                       }
[17:39:26.538]                       else if (inherits(cond, "warning")) {
[17:39:26.538]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.538]                         if (muffled) 
[17:39:26.538]                           invokeRestart("muffleWarning")
[17:39:26.538]                       }
[17:39:26.538]                       else if (inherits(cond, "condition")) {
[17:39:26.538]                         if (!is.null(pattern)) {
[17:39:26.538]                           computeRestarts <- base::computeRestarts
[17:39:26.538]                           grepl <- base::grepl
[17:39:26.538]                           restarts <- computeRestarts(cond)
[17:39:26.538]                           for (restart in restarts) {
[17:39:26.538]                             name <- restart$name
[17:39:26.538]                             if (is.null(name)) 
[17:39:26.538]                               next
[17:39:26.538]                             if (!grepl(pattern, name)) 
[17:39:26.538]                               next
[17:39:26.538]                             invokeRestart(restart)
[17:39:26.538]                             muffled <- TRUE
[17:39:26.538]                             break
[17:39:26.538]                           }
[17:39:26.538]                         }
[17:39:26.538]                       }
[17:39:26.538]                       invisible(muffled)
[17:39:26.538]                     }
[17:39:26.538]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.538]                   }
[17:39:26.538]                 }
[17:39:26.538]             }
[17:39:26.538]         }))
[17:39:26.538]     }, error = function(ex) {
[17:39:26.538]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:26.538]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.538]                 ...future.rng), started = ...future.startTime, 
[17:39:26.538]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:26.538]             version = "1.8"), class = "FutureResult")
[17:39:26.538]     }, finally = {
[17:39:26.538]         if (!identical(...future.workdir, getwd())) 
[17:39:26.538]             setwd(...future.workdir)
[17:39:26.538]         {
[17:39:26.538]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:26.538]                 ...future.oldOptions$nwarnings <- NULL
[17:39:26.538]             }
[17:39:26.538]             base::options(...future.oldOptions)
[17:39:26.538]             if (.Platform$OS.type == "windows") {
[17:39:26.538]                 old_names <- names(...future.oldEnvVars)
[17:39:26.538]                 envs <- base::Sys.getenv()
[17:39:26.538]                 names <- names(envs)
[17:39:26.538]                 common <- intersect(names, old_names)
[17:39:26.538]                 added <- setdiff(names, old_names)
[17:39:26.538]                 removed <- setdiff(old_names, names)
[17:39:26.538]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:26.538]                   envs[common]]
[17:39:26.538]                 NAMES <- toupper(changed)
[17:39:26.538]                 args <- list()
[17:39:26.538]                 for (kk in seq_along(NAMES)) {
[17:39:26.538]                   name <- changed[[kk]]
[17:39:26.538]                   NAME <- NAMES[[kk]]
[17:39:26.538]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.538]                     next
[17:39:26.538]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.538]                 }
[17:39:26.538]                 NAMES <- toupper(added)
[17:39:26.538]                 for (kk in seq_along(NAMES)) {
[17:39:26.538]                   name <- added[[kk]]
[17:39:26.538]                   NAME <- NAMES[[kk]]
[17:39:26.538]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.538]                     next
[17:39:26.538]                   args[[name]] <- ""
[17:39:26.538]                 }
[17:39:26.538]                 NAMES <- toupper(removed)
[17:39:26.538]                 for (kk in seq_along(NAMES)) {
[17:39:26.538]                   name <- removed[[kk]]
[17:39:26.538]                   NAME <- NAMES[[kk]]
[17:39:26.538]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.538]                     next
[17:39:26.538]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.538]                 }
[17:39:26.538]                 if (length(args) > 0) 
[17:39:26.538]                   base::do.call(base::Sys.setenv, args = args)
[17:39:26.538]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:26.538]             }
[17:39:26.538]             else {
[17:39:26.538]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:26.538]             }
[17:39:26.538]             {
[17:39:26.538]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:26.538]                   0L) {
[17:39:26.538]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:26.538]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:26.538]                   base::options(opts)
[17:39:26.538]                 }
[17:39:26.538]                 {
[17:39:26.538]                   {
[17:39:26.538]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:26.538]                     NULL
[17:39:26.538]                   }
[17:39:26.538]                   options(future.plan = NULL)
[17:39:26.538]                   if (is.na(NA_character_)) 
[17:39:26.538]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.538]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:26.538]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:26.538]                     .init = FALSE)
[17:39:26.538]                 }
[17:39:26.538]             }
[17:39:26.538]         }
[17:39:26.538]     })
[17:39:26.538]     if (TRUE) {
[17:39:26.538]         base::sink(type = "output", split = FALSE)
[17:39:26.538]         if (TRUE) {
[17:39:26.538]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:26.538]         }
[17:39:26.538]         else {
[17:39:26.538]             ...future.result["stdout"] <- base::list(NULL)
[17:39:26.538]         }
[17:39:26.538]         base::close(...future.stdout)
[17:39:26.538]         ...future.stdout <- NULL
[17:39:26.538]     }
[17:39:26.538]     ...future.result$conditions <- ...future.conditions
[17:39:26.538]     ...future.result$finished <- base::Sys.time()
[17:39:26.538]     ...future.result
[17:39:26.538] }
[17:39:26.590] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[17:39:26.590] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[17:39:26.590] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[17:39:26.590] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[17:39:26.591] MultisessionFuture started
[17:39:26.591] - Launch lazy future ... done
[17:39:26.591] run() for ‘MultisessionFuture’ ... done
[17:39:26.592] getGlobalsAndPackages() ...
[17:39:26.592] Searching for globals...
[17:39:26.595] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:39:26.595] Searching for globals ... DONE
[17:39:26.595] Resolving globals: FALSE
[17:39:26.596] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:26.596] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:39:26.597] - globals: [1] ‘ii’
[17:39:26.597] 
[17:39:26.597] getGlobalsAndPackages() ... DONE
[17:39:26.597] run() for ‘Future’ ...
[17:39:26.597] - state: ‘created’
[17:39:26.598] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:26.615] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:26.616] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:26.616]   - Field: ‘node’
[17:39:26.616]   - Field: ‘label’
[17:39:26.616]   - Field: ‘local’
[17:39:26.616]   - Field: ‘owner’
[17:39:26.617]   - Field: ‘envir’
[17:39:26.617]   - Field: ‘workers’
[17:39:26.617]   - Field: ‘packages’
[17:39:26.617]   - Field: ‘gc’
[17:39:26.617]   - Field: ‘conditions’
[17:39:26.617]   - Field: ‘persistent’
[17:39:26.618]   - Field: ‘expr’
[17:39:26.618]   - Field: ‘uuid’
[17:39:26.618]   - Field: ‘seed’
[17:39:26.618]   - Field: ‘version’
[17:39:26.618]   - Field: ‘result’
[17:39:26.618]   - Field: ‘asynchronous’
[17:39:26.619]   - Field: ‘calls’
[17:39:26.619]   - Field: ‘globals’
[17:39:26.619]   - Field: ‘stdout’
[17:39:26.619]   - Field: ‘earlySignal’
[17:39:26.619]   - Field: ‘lazy’
[17:39:26.619]   - Field: ‘state’
[17:39:26.619] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:26.620] - Launch lazy future ...
[17:39:26.620] Packages needed by the future expression (n = 0): <none>
[17:39:26.620] Packages needed by future strategies (n = 0): <none>
[17:39:26.621] {
[17:39:26.621]     {
[17:39:26.621]         {
[17:39:26.621]             ...future.startTime <- base::Sys.time()
[17:39:26.621]             {
[17:39:26.621]                 {
[17:39:26.621]                   {
[17:39:26.621]                     {
[17:39:26.621]                       base::local({
[17:39:26.621]                         has_future <- base::requireNamespace("future", 
[17:39:26.621]                           quietly = TRUE)
[17:39:26.621]                         if (has_future) {
[17:39:26.621]                           ns <- base::getNamespace("future")
[17:39:26.621]                           version <- ns[[".package"]][["version"]]
[17:39:26.621]                           if (is.null(version)) 
[17:39:26.621]                             version <- utils::packageVersion("future")
[17:39:26.621]                         }
[17:39:26.621]                         else {
[17:39:26.621]                           version <- NULL
[17:39:26.621]                         }
[17:39:26.621]                         if (!has_future || version < "1.8.0") {
[17:39:26.621]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:26.621]                             "", base::R.version$version.string), 
[17:39:26.621]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:26.621]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:26.621]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:26.621]                               "release", "version")], collapse = " "), 
[17:39:26.621]                             hostname = base::Sys.info()[["nodename"]])
[17:39:26.621]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:26.621]                             info)
[17:39:26.621]                           info <- base::paste(info, collapse = "; ")
[17:39:26.621]                           if (!has_future) {
[17:39:26.621]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:26.621]                               info)
[17:39:26.621]                           }
[17:39:26.621]                           else {
[17:39:26.621]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:26.621]                               info, version)
[17:39:26.621]                           }
[17:39:26.621]                           base::stop(msg)
[17:39:26.621]                         }
[17:39:26.621]                       })
[17:39:26.621]                     }
[17:39:26.621]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:26.621]                     base::options(mc.cores = 1L)
[17:39:26.621]                   }
[17:39:26.621]                   ...future.strategy.old <- future::plan("list")
[17:39:26.621]                   options(future.plan = NULL)
[17:39:26.621]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.621]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:26.621]                 }
[17:39:26.621]                 ...future.workdir <- getwd()
[17:39:26.621]             }
[17:39:26.621]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:26.621]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:26.621]         }
[17:39:26.621]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:26.621]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:26.621]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:26.621]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:26.621]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:26.621]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:26.621]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:26.621]             base::names(...future.oldOptions))
[17:39:26.621]     }
[17:39:26.621]     if (FALSE) {
[17:39:26.621]     }
[17:39:26.621]     else {
[17:39:26.621]         if (TRUE) {
[17:39:26.621]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:26.621]                 open = "w")
[17:39:26.621]         }
[17:39:26.621]         else {
[17:39:26.621]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:26.621]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:26.621]         }
[17:39:26.621]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:26.621]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:26.621]             base::sink(type = "output", split = FALSE)
[17:39:26.621]             base::close(...future.stdout)
[17:39:26.621]         }, add = TRUE)
[17:39:26.621]     }
[17:39:26.621]     ...future.frame <- base::sys.nframe()
[17:39:26.621]     ...future.conditions <- base::list()
[17:39:26.621]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:26.621]     if (FALSE) {
[17:39:26.621]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:26.621]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:26.621]     }
[17:39:26.621]     ...future.result <- base::tryCatch({
[17:39:26.621]         base::withCallingHandlers({
[17:39:26.621]             ...future.value <- base::withVisible(base::local({
[17:39:26.621]                 ...future.makeSendCondition <- base::local({
[17:39:26.621]                   sendCondition <- NULL
[17:39:26.621]                   function(frame = 1L) {
[17:39:26.621]                     if (is.function(sendCondition)) 
[17:39:26.621]                       return(sendCondition)
[17:39:26.621]                     ns <- getNamespace("parallel")
[17:39:26.621]                     if (exists("sendData", mode = "function", 
[17:39:26.621]                       envir = ns)) {
[17:39:26.621]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:26.621]                         envir = ns)
[17:39:26.621]                       envir <- sys.frame(frame)
[17:39:26.621]                       master <- NULL
[17:39:26.621]                       while (!identical(envir, .GlobalEnv) && 
[17:39:26.621]                         !identical(envir, emptyenv())) {
[17:39:26.621]                         if (exists("master", mode = "list", envir = envir, 
[17:39:26.621]                           inherits = FALSE)) {
[17:39:26.621]                           master <- get("master", mode = "list", 
[17:39:26.621]                             envir = envir, inherits = FALSE)
[17:39:26.621]                           if (inherits(master, c("SOCKnode", 
[17:39:26.621]                             "SOCK0node"))) {
[17:39:26.621]                             sendCondition <<- function(cond) {
[17:39:26.621]                               data <- list(type = "VALUE", value = cond, 
[17:39:26.621]                                 success = TRUE)
[17:39:26.621]                               parallel_sendData(master, data)
[17:39:26.621]                             }
[17:39:26.621]                             return(sendCondition)
[17:39:26.621]                           }
[17:39:26.621]                         }
[17:39:26.621]                         frame <- frame + 1L
[17:39:26.621]                         envir <- sys.frame(frame)
[17:39:26.621]                       }
[17:39:26.621]                     }
[17:39:26.621]                     sendCondition <<- function(cond) NULL
[17:39:26.621]                   }
[17:39:26.621]                 })
[17:39:26.621]                 withCallingHandlers({
[17:39:26.621]                   {
[17:39:26.621]                     if (ii%%2 == 0) 
[17:39:26.621]                       stop("Woops!")
[17:39:26.621]                     ii
[17:39:26.621]                   }
[17:39:26.621]                 }, immediateCondition = function(cond) {
[17:39:26.621]                   sendCondition <- ...future.makeSendCondition()
[17:39:26.621]                   sendCondition(cond)
[17:39:26.621]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.621]                   {
[17:39:26.621]                     inherits <- base::inherits
[17:39:26.621]                     invokeRestart <- base::invokeRestart
[17:39:26.621]                     is.null <- base::is.null
[17:39:26.621]                     muffled <- FALSE
[17:39:26.621]                     if (inherits(cond, "message")) {
[17:39:26.621]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:26.621]                       if (muffled) 
[17:39:26.621]                         invokeRestart("muffleMessage")
[17:39:26.621]                     }
[17:39:26.621]                     else if (inherits(cond, "warning")) {
[17:39:26.621]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:26.621]                       if (muffled) 
[17:39:26.621]                         invokeRestart("muffleWarning")
[17:39:26.621]                     }
[17:39:26.621]                     else if (inherits(cond, "condition")) {
[17:39:26.621]                       if (!is.null(pattern)) {
[17:39:26.621]                         computeRestarts <- base::computeRestarts
[17:39:26.621]                         grepl <- base::grepl
[17:39:26.621]                         restarts <- computeRestarts(cond)
[17:39:26.621]                         for (restart in restarts) {
[17:39:26.621]                           name <- restart$name
[17:39:26.621]                           if (is.null(name)) 
[17:39:26.621]                             next
[17:39:26.621]                           if (!grepl(pattern, name)) 
[17:39:26.621]                             next
[17:39:26.621]                           invokeRestart(restart)
[17:39:26.621]                           muffled <- TRUE
[17:39:26.621]                           break
[17:39:26.621]                         }
[17:39:26.621]                       }
[17:39:26.621]                     }
[17:39:26.621]                     invisible(muffled)
[17:39:26.621]                   }
[17:39:26.621]                   muffleCondition(cond)
[17:39:26.621]                 })
[17:39:26.621]             }))
[17:39:26.621]             future::FutureResult(value = ...future.value$value, 
[17:39:26.621]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.621]                   ...future.rng), globalenv = if (FALSE) 
[17:39:26.621]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:26.621]                     ...future.globalenv.names))
[17:39:26.621]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:26.621]         }, condition = base::local({
[17:39:26.621]             c <- base::c
[17:39:26.621]             inherits <- base::inherits
[17:39:26.621]             invokeRestart <- base::invokeRestart
[17:39:26.621]             length <- base::length
[17:39:26.621]             list <- base::list
[17:39:26.621]             seq.int <- base::seq.int
[17:39:26.621]             signalCondition <- base::signalCondition
[17:39:26.621]             sys.calls <- base::sys.calls
[17:39:26.621]             `[[` <- base::`[[`
[17:39:26.621]             `+` <- base::`+`
[17:39:26.621]             `<<-` <- base::`<<-`
[17:39:26.621]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:26.621]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:26.621]                   3L)]
[17:39:26.621]             }
[17:39:26.621]             function(cond) {
[17:39:26.621]                 is_error <- inherits(cond, "error")
[17:39:26.621]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:26.621]                   NULL)
[17:39:26.621]                 if (is_error) {
[17:39:26.621]                   sessionInformation <- function() {
[17:39:26.621]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:26.621]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:26.621]                       search = base::search(), system = base::Sys.info())
[17:39:26.621]                   }
[17:39:26.621]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.621]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:26.621]                     cond$call), session = sessionInformation(), 
[17:39:26.621]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:26.621]                   signalCondition(cond)
[17:39:26.621]                 }
[17:39:26.621]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:26.621]                 "immediateCondition"))) {
[17:39:26.621]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:26.621]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.621]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:26.621]                   if (TRUE && !signal) {
[17:39:26.621]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.621]                     {
[17:39:26.621]                       inherits <- base::inherits
[17:39:26.621]                       invokeRestart <- base::invokeRestart
[17:39:26.621]                       is.null <- base::is.null
[17:39:26.621]                       muffled <- FALSE
[17:39:26.621]                       if (inherits(cond, "message")) {
[17:39:26.621]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.621]                         if (muffled) 
[17:39:26.621]                           invokeRestart("muffleMessage")
[17:39:26.621]                       }
[17:39:26.621]                       else if (inherits(cond, "warning")) {
[17:39:26.621]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.621]                         if (muffled) 
[17:39:26.621]                           invokeRestart("muffleWarning")
[17:39:26.621]                       }
[17:39:26.621]                       else if (inherits(cond, "condition")) {
[17:39:26.621]                         if (!is.null(pattern)) {
[17:39:26.621]                           computeRestarts <- base::computeRestarts
[17:39:26.621]                           grepl <- base::grepl
[17:39:26.621]                           restarts <- computeRestarts(cond)
[17:39:26.621]                           for (restart in restarts) {
[17:39:26.621]                             name <- restart$name
[17:39:26.621]                             if (is.null(name)) 
[17:39:26.621]                               next
[17:39:26.621]                             if (!grepl(pattern, name)) 
[17:39:26.621]                               next
[17:39:26.621]                             invokeRestart(restart)
[17:39:26.621]                             muffled <- TRUE
[17:39:26.621]                             break
[17:39:26.621]                           }
[17:39:26.621]                         }
[17:39:26.621]                       }
[17:39:26.621]                       invisible(muffled)
[17:39:26.621]                     }
[17:39:26.621]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.621]                   }
[17:39:26.621]                 }
[17:39:26.621]                 else {
[17:39:26.621]                   if (TRUE) {
[17:39:26.621]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.621]                     {
[17:39:26.621]                       inherits <- base::inherits
[17:39:26.621]                       invokeRestart <- base::invokeRestart
[17:39:26.621]                       is.null <- base::is.null
[17:39:26.621]                       muffled <- FALSE
[17:39:26.621]                       if (inherits(cond, "message")) {
[17:39:26.621]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.621]                         if (muffled) 
[17:39:26.621]                           invokeRestart("muffleMessage")
[17:39:26.621]                       }
[17:39:26.621]                       else if (inherits(cond, "warning")) {
[17:39:26.621]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.621]                         if (muffled) 
[17:39:26.621]                           invokeRestart("muffleWarning")
[17:39:26.621]                       }
[17:39:26.621]                       else if (inherits(cond, "condition")) {
[17:39:26.621]                         if (!is.null(pattern)) {
[17:39:26.621]                           computeRestarts <- base::computeRestarts
[17:39:26.621]                           grepl <- base::grepl
[17:39:26.621]                           restarts <- computeRestarts(cond)
[17:39:26.621]                           for (restart in restarts) {
[17:39:26.621]                             name <- restart$name
[17:39:26.621]                             if (is.null(name)) 
[17:39:26.621]                               next
[17:39:26.621]                             if (!grepl(pattern, name)) 
[17:39:26.621]                               next
[17:39:26.621]                             invokeRestart(restart)
[17:39:26.621]                             muffled <- TRUE
[17:39:26.621]                             break
[17:39:26.621]                           }
[17:39:26.621]                         }
[17:39:26.621]                       }
[17:39:26.621]                       invisible(muffled)
[17:39:26.621]                     }
[17:39:26.621]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.621]                   }
[17:39:26.621]                 }
[17:39:26.621]             }
[17:39:26.621]         }))
[17:39:26.621]     }, error = function(ex) {
[17:39:26.621]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:26.621]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.621]                 ...future.rng), started = ...future.startTime, 
[17:39:26.621]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:26.621]             version = "1.8"), class = "FutureResult")
[17:39:26.621]     }, finally = {
[17:39:26.621]         if (!identical(...future.workdir, getwd())) 
[17:39:26.621]             setwd(...future.workdir)
[17:39:26.621]         {
[17:39:26.621]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:26.621]                 ...future.oldOptions$nwarnings <- NULL
[17:39:26.621]             }
[17:39:26.621]             base::options(...future.oldOptions)
[17:39:26.621]             if (.Platform$OS.type == "windows") {
[17:39:26.621]                 old_names <- names(...future.oldEnvVars)
[17:39:26.621]                 envs <- base::Sys.getenv()
[17:39:26.621]                 names <- names(envs)
[17:39:26.621]                 common <- intersect(names, old_names)
[17:39:26.621]                 added <- setdiff(names, old_names)
[17:39:26.621]                 removed <- setdiff(old_names, names)
[17:39:26.621]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:26.621]                   envs[common]]
[17:39:26.621]                 NAMES <- toupper(changed)
[17:39:26.621]                 args <- list()
[17:39:26.621]                 for (kk in seq_along(NAMES)) {
[17:39:26.621]                   name <- changed[[kk]]
[17:39:26.621]                   NAME <- NAMES[[kk]]
[17:39:26.621]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.621]                     next
[17:39:26.621]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.621]                 }
[17:39:26.621]                 NAMES <- toupper(added)
[17:39:26.621]                 for (kk in seq_along(NAMES)) {
[17:39:26.621]                   name <- added[[kk]]
[17:39:26.621]                   NAME <- NAMES[[kk]]
[17:39:26.621]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.621]                     next
[17:39:26.621]                   args[[name]] <- ""
[17:39:26.621]                 }
[17:39:26.621]                 NAMES <- toupper(removed)
[17:39:26.621]                 for (kk in seq_along(NAMES)) {
[17:39:26.621]                   name <- removed[[kk]]
[17:39:26.621]                   NAME <- NAMES[[kk]]
[17:39:26.621]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.621]                     next
[17:39:26.621]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.621]                 }
[17:39:26.621]                 if (length(args) > 0) 
[17:39:26.621]                   base::do.call(base::Sys.setenv, args = args)
[17:39:26.621]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:26.621]             }
[17:39:26.621]             else {
[17:39:26.621]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:26.621]             }
[17:39:26.621]             {
[17:39:26.621]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:26.621]                   0L) {
[17:39:26.621]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:26.621]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:26.621]                   base::options(opts)
[17:39:26.621]                 }
[17:39:26.621]                 {
[17:39:26.621]                   {
[17:39:26.621]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:26.621]                     NULL
[17:39:26.621]                   }
[17:39:26.621]                   options(future.plan = NULL)
[17:39:26.621]                   if (is.na(NA_character_)) 
[17:39:26.621]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.621]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:26.621]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:26.621]                     .init = FALSE)
[17:39:26.621]                 }
[17:39:26.621]             }
[17:39:26.621]         }
[17:39:26.621]     })
[17:39:26.621]     if (TRUE) {
[17:39:26.621]         base::sink(type = "output", split = FALSE)
[17:39:26.621]         if (TRUE) {
[17:39:26.621]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:26.621]         }
[17:39:26.621]         else {
[17:39:26.621]             ...future.result["stdout"] <- base::list(NULL)
[17:39:26.621]         }
[17:39:26.621]         base::close(...future.stdout)
[17:39:26.621]         ...future.stdout <- NULL
[17:39:26.621]     }
[17:39:26.621]     ...future.result$conditions <- ...future.conditions
[17:39:26.621]     ...future.result$finished <- base::Sys.time()
[17:39:26.621]     ...future.result
[17:39:26.621] }
[17:39:26.623] Poll #1 (0): usedNodes() = 2, workers = 2
[17:39:26.642] receiveMessageFromWorker() for ClusterFuture ...
[17:39:26.642] - Validating connection of MultisessionFuture
[17:39:26.642] - received message: FutureResult
[17:39:26.642] - Received FutureResult
[17:39:26.642] - Erased future from FutureRegistry
[17:39:26.643] result() for ClusterFuture ...
[17:39:26.643] - result already collected: FutureResult
[17:39:26.643] result() for ClusterFuture ... done
[17:39:26.643] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:26.643] result() for ClusterFuture ...
[17:39:26.643] - result already collected: FutureResult
[17:39:26.643] result() for ClusterFuture ... done
[17:39:26.643] result() for ClusterFuture ...
[17:39:26.643] - result already collected: FutureResult
[17:39:26.643] result() for ClusterFuture ... done
[17:39:26.644] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:39:26.644] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:39:26.645] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:39:26.645] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:39:26.645] MultisessionFuture started
[17:39:26.645] - Launch lazy future ... done
[17:39:26.645] run() for ‘MultisessionFuture’ ... done
[17:39:26.646] result() for ClusterFuture ...
[17:39:26.646] - result already collected: FutureResult
[17:39:26.646] result() for ClusterFuture ... done
[17:39:26.646] result() for ClusterFuture ...
[17:39:26.646] - result already collected: FutureResult
[17:39:26.646] result() for ClusterFuture ... done
[17:39:26.646] result() for ClusterFuture ...
[17:39:26.646] receiveMessageFromWorker() for ClusterFuture ...
[17:39:26.646] - Validating connection of MultisessionFuture
[17:39:26.647] - received message: FutureResult
[17:39:26.647] - Received FutureResult
[17:39:26.647] - Erased future from FutureRegistry
[17:39:26.647] result() for ClusterFuture ...
[17:39:26.647] - result already collected: FutureResult
[17:39:26.647] result() for ClusterFuture ... done
[17:39:26.647] signalConditions() ...
[17:39:26.647]  - include = ‘immediateCondition’
[17:39:26.648]  - exclude = 
[17:39:26.648]  - resignal = FALSE
[17:39:26.648]  - Number of conditions: 1
[17:39:26.648] signalConditions() ... done
[17:39:26.648] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:26.648] result() for ClusterFuture ... done
[17:39:26.648] result() for ClusterFuture ...
[17:39:26.648] - result already collected: FutureResult
[17:39:26.648] result() for ClusterFuture ... done
[17:39:26.648] signalConditions() ...
[17:39:26.648]  - include = ‘immediateCondition’
[17:39:26.649]  - exclude = 
[17:39:26.649]  - resignal = FALSE
[17:39:26.649]  - Number of conditions: 1
[17:39:26.649] signalConditions() ... done
[17:39:26.649] Future state: ‘finished’
[17:39:26.649] result() for ClusterFuture ...
[17:39:26.649] - result already collected: FutureResult
[17:39:26.649] result() for ClusterFuture ... done
[17:39:26.649] signalConditions() ...
[17:39:26.649]  - include = ‘condition’
[17:39:26.649]  - exclude = ‘immediateCondition’
[17:39:26.650]  - resignal = TRUE
[17:39:26.650]  - Number of conditions: 1
[17:39:26.650]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:26.650] signalConditions() ... done
[17:39:26.650] result() for ClusterFuture ...
[17:39:26.650] receiveMessageFromWorker() for ClusterFuture ...
[17:39:26.650] - Validating connection of MultisessionFuture
[17:39:26.650] - received message: FutureResult
[17:39:26.651] - Received FutureResult
[17:39:26.651] - Erased future from FutureRegistry
[17:39:26.651] result() for ClusterFuture ...
[17:39:26.651] - result already collected: FutureResult
[17:39:26.651] result() for ClusterFuture ... done
[17:39:26.651] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:26.651] result() for ClusterFuture ... done
[17:39:26.651] result() for ClusterFuture ...
[17:39:26.651] - result already collected: FutureResult
[17:39:26.651] result() for ClusterFuture ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[17:39:26.652] result() for ClusterFuture ...
[17:39:26.652] - result already collected: FutureResult
[17:39:26.652] result() for ClusterFuture ... done
[17:39:26.652] result() for ClusterFuture ...
[17:39:26.652] - result already collected: FutureResult
[17:39:26.652] result() for ClusterFuture ... done
[17:39:26.652] signalConditions() ...
[17:39:26.652]  - include = ‘immediateCondition’
[17:39:26.652]  - exclude = 
[17:39:26.652]  - resignal = FALSE
[17:39:26.653]  - Number of conditions: 1
[17:39:26.653] signalConditions() ... done
[17:39:26.653] Future state: ‘finished’
[17:39:26.653] result() for ClusterFuture ...
[17:39:26.653] - result already collected: FutureResult
[17:39:26.653] result() for ClusterFuture ... done
[17:39:26.653] signalConditions() ...
[17:39:26.653]  - include = ‘condition’
[17:39:26.653]  - exclude = ‘immediateCondition’
[17:39:26.653]  - resignal = TRUE
[17:39:26.653]  - Number of conditions: 1
[17:39:26.654]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:26.654] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[17:39:26.654] result() for ClusterFuture ...
[17:39:26.654] - result already collected: FutureResult
[17:39:26.654] result() for ClusterFuture ... done
[17:39:26.654] result() for ClusterFuture ...
[17:39:26.654] - result already collected: FutureResult
[17:39:26.654] result() for ClusterFuture ... done
[17:39:26.654] signalConditions() ...
[17:39:26.655]  - include = ‘immediateCondition’
[17:39:26.655]  - exclude = 
[17:39:26.655]  - resignal = FALSE
[17:39:26.655]  - Number of conditions: 1
[17:39:26.655] signalConditions() ... done
[17:39:26.655] Future state: ‘finished’
[17:39:26.655] result() for ClusterFuture ...
[17:39:26.655] - result already collected: FutureResult
[17:39:26.655] result() for ClusterFuture ... done
[17:39:26.655] signalConditions() ...
[17:39:26.655]  - include = ‘condition’
[17:39:26.655]  - exclude = ‘immediateCondition’
[17:39:26.656]  - resignal = TRUE
[17:39:26.656]  - Number of conditions: 1
[17:39:26.656]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:26.656] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[17:39:26.656] getGlobalsAndPackages() ...
[17:39:26.656] Searching for globals...
[17:39:26.658] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[17:39:26.658] Searching for globals ... DONE
[17:39:26.658] Resolving globals: FALSE
[17:39:26.659] 
[17:39:26.659] 
[17:39:26.659] getGlobalsAndPackages() ... DONE
[17:39:26.659] run() for ‘Future’ ...
[17:39:26.659] - state: ‘created’
[17:39:26.659] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:26.673] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:26.673] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:26.673]   - Field: ‘node’
[17:39:26.674]   - Field: ‘label’
[17:39:26.674]   - Field: ‘local’
[17:39:26.674]   - Field: ‘owner’
[17:39:26.674]   - Field: ‘envir’
[17:39:26.674]   - Field: ‘workers’
[17:39:26.674]   - Field: ‘packages’
[17:39:26.674]   - Field: ‘gc’
[17:39:26.674]   - Field: ‘conditions’
[17:39:26.674]   - Field: ‘persistent’
[17:39:26.674]   - Field: ‘expr’
[17:39:26.675]   - Field: ‘uuid’
[17:39:26.675]   - Field: ‘seed’
[17:39:26.675]   - Field: ‘version’
[17:39:26.675]   - Field: ‘result’
[17:39:26.675]   - Field: ‘asynchronous’
[17:39:26.675]   - Field: ‘calls’
[17:39:26.675]   - Field: ‘globals’
[17:39:26.675]   - Field: ‘stdout’
[17:39:26.675]   - Field: ‘earlySignal’
[17:39:26.675]   - Field: ‘lazy’
[17:39:26.675]   - Field: ‘state’
[17:39:26.675] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:26.676] - Launch lazy future ...
[17:39:26.676] Packages needed by the future expression (n = 0): <none>
[17:39:26.676] Packages needed by future strategies (n = 0): <none>
[17:39:26.676] {
[17:39:26.676]     {
[17:39:26.676]         {
[17:39:26.676]             ...future.startTime <- base::Sys.time()
[17:39:26.676]             {
[17:39:26.676]                 {
[17:39:26.676]                   {
[17:39:26.676]                     {
[17:39:26.676]                       base::local({
[17:39:26.676]                         has_future <- base::requireNamespace("future", 
[17:39:26.676]                           quietly = TRUE)
[17:39:26.676]                         if (has_future) {
[17:39:26.676]                           ns <- base::getNamespace("future")
[17:39:26.676]                           version <- ns[[".package"]][["version"]]
[17:39:26.676]                           if (is.null(version)) 
[17:39:26.676]                             version <- utils::packageVersion("future")
[17:39:26.676]                         }
[17:39:26.676]                         else {
[17:39:26.676]                           version <- NULL
[17:39:26.676]                         }
[17:39:26.676]                         if (!has_future || version < "1.8.0") {
[17:39:26.676]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:26.676]                             "", base::R.version$version.string), 
[17:39:26.676]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:26.676]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:26.676]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:26.676]                               "release", "version")], collapse = " "), 
[17:39:26.676]                             hostname = base::Sys.info()[["nodename"]])
[17:39:26.676]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:26.676]                             info)
[17:39:26.676]                           info <- base::paste(info, collapse = "; ")
[17:39:26.676]                           if (!has_future) {
[17:39:26.676]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:26.676]                               info)
[17:39:26.676]                           }
[17:39:26.676]                           else {
[17:39:26.676]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:26.676]                               info, version)
[17:39:26.676]                           }
[17:39:26.676]                           base::stop(msg)
[17:39:26.676]                         }
[17:39:26.676]                       })
[17:39:26.676]                     }
[17:39:26.676]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:26.676]                     base::options(mc.cores = 1L)
[17:39:26.676]                   }
[17:39:26.676]                   ...future.strategy.old <- future::plan("list")
[17:39:26.676]                   options(future.plan = NULL)
[17:39:26.676]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.676]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:26.676]                 }
[17:39:26.676]                 ...future.workdir <- getwd()
[17:39:26.676]             }
[17:39:26.676]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:26.676]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:26.676]         }
[17:39:26.676]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:26.676]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:26.676]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:26.676]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:26.676]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:26.676]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:26.676]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:26.676]             base::names(...future.oldOptions))
[17:39:26.676]     }
[17:39:26.676]     if (FALSE) {
[17:39:26.676]     }
[17:39:26.676]     else {
[17:39:26.676]         if (TRUE) {
[17:39:26.676]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:26.676]                 open = "w")
[17:39:26.676]         }
[17:39:26.676]         else {
[17:39:26.676]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:26.676]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:26.676]         }
[17:39:26.676]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:26.676]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:26.676]             base::sink(type = "output", split = FALSE)
[17:39:26.676]             base::close(...future.stdout)
[17:39:26.676]         }, add = TRUE)
[17:39:26.676]     }
[17:39:26.676]     ...future.frame <- base::sys.nframe()
[17:39:26.676]     ...future.conditions <- base::list()
[17:39:26.676]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:26.676]     if (FALSE) {
[17:39:26.676]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:26.676]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:26.676]     }
[17:39:26.676]     ...future.result <- base::tryCatch({
[17:39:26.676]         base::withCallingHandlers({
[17:39:26.676]             ...future.value <- base::withVisible(base::local({
[17:39:26.676]                 ...future.makeSendCondition <- base::local({
[17:39:26.676]                   sendCondition <- NULL
[17:39:26.676]                   function(frame = 1L) {
[17:39:26.676]                     if (is.function(sendCondition)) 
[17:39:26.676]                       return(sendCondition)
[17:39:26.676]                     ns <- getNamespace("parallel")
[17:39:26.676]                     if (exists("sendData", mode = "function", 
[17:39:26.676]                       envir = ns)) {
[17:39:26.676]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:26.676]                         envir = ns)
[17:39:26.676]                       envir <- sys.frame(frame)
[17:39:26.676]                       master <- NULL
[17:39:26.676]                       while (!identical(envir, .GlobalEnv) && 
[17:39:26.676]                         !identical(envir, emptyenv())) {
[17:39:26.676]                         if (exists("master", mode = "list", envir = envir, 
[17:39:26.676]                           inherits = FALSE)) {
[17:39:26.676]                           master <- get("master", mode = "list", 
[17:39:26.676]                             envir = envir, inherits = FALSE)
[17:39:26.676]                           if (inherits(master, c("SOCKnode", 
[17:39:26.676]                             "SOCK0node"))) {
[17:39:26.676]                             sendCondition <<- function(cond) {
[17:39:26.676]                               data <- list(type = "VALUE", value = cond, 
[17:39:26.676]                                 success = TRUE)
[17:39:26.676]                               parallel_sendData(master, data)
[17:39:26.676]                             }
[17:39:26.676]                             return(sendCondition)
[17:39:26.676]                           }
[17:39:26.676]                         }
[17:39:26.676]                         frame <- frame + 1L
[17:39:26.676]                         envir <- sys.frame(frame)
[17:39:26.676]                       }
[17:39:26.676]                     }
[17:39:26.676]                     sendCondition <<- function(cond) NULL
[17:39:26.676]                   }
[17:39:26.676]                 })
[17:39:26.676]                 withCallingHandlers({
[17:39:26.676]                   {
[17:39:26.676]                     cat("Processing: ")
[17:39:26.676]                     for (ii in 1:10) {
[17:39:26.676]                       cat(".")
[17:39:26.676]                     }
[17:39:26.676]                     cat(" [100%]\n")
[17:39:26.676]                     4
[17:39:26.676]                   }
[17:39:26.676]                 }, immediateCondition = function(cond) {
[17:39:26.676]                   sendCondition <- ...future.makeSendCondition()
[17:39:26.676]                   sendCondition(cond)
[17:39:26.676]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.676]                   {
[17:39:26.676]                     inherits <- base::inherits
[17:39:26.676]                     invokeRestart <- base::invokeRestart
[17:39:26.676]                     is.null <- base::is.null
[17:39:26.676]                     muffled <- FALSE
[17:39:26.676]                     if (inherits(cond, "message")) {
[17:39:26.676]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:26.676]                       if (muffled) 
[17:39:26.676]                         invokeRestart("muffleMessage")
[17:39:26.676]                     }
[17:39:26.676]                     else if (inherits(cond, "warning")) {
[17:39:26.676]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:26.676]                       if (muffled) 
[17:39:26.676]                         invokeRestart("muffleWarning")
[17:39:26.676]                     }
[17:39:26.676]                     else if (inherits(cond, "condition")) {
[17:39:26.676]                       if (!is.null(pattern)) {
[17:39:26.676]                         computeRestarts <- base::computeRestarts
[17:39:26.676]                         grepl <- base::grepl
[17:39:26.676]                         restarts <- computeRestarts(cond)
[17:39:26.676]                         for (restart in restarts) {
[17:39:26.676]                           name <- restart$name
[17:39:26.676]                           if (is.null(name)) 
[17:39:26.676]                             next
[17:39:26.676]                           if (!grepl(pattern, name)) 
[17:39:26.676]                             next
[17:39:26.676]                           invokeRestart(restart)
[17:39:26.676]                           muffled <- TRUE
[17:39:26.676]                           break
[17:39:26.676]                         }
[17:39:26.676]                       }
[17:39:26.676]                     }
[17:39:26.676]                     invisible(muffled)
[17:39:26.676]                   }
[17:39:26.676]                   muffleCondition(cond)
[17:39:26.676]                 })
[17:39:26.676]             }))
[17:39:26.676]             future::FutureResult(value = ...future.value$value, 
[17:39:26.676]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.676]                   ...future.rng), globalenv = if (FALSE) 
[17:39:26.676]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:26.676]                     ...future.globalenv.names))
[17:39:26.676]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:26.676]         }, condition = base::local({
[17:39:26.676]             c <- base::c
[17:39:26.676]             inherits <- base::inherits
[17:39:26.676]             invokeRestart <- base::invokeRestart
[17:39:26.676]             length <- base::length
[17:39:26.676]             list <- base::list
[17:39:26.676]             seq.int <- base::seq.int
[17:39:26.676]             signalCondition <- base::signalCondition
[17:39:26.676]             sys.calls <- base::sys.calls
[17:39:26.676]             `[[` <- base::`[[`
[17:39:26.676]             `+` <- base::`+`
[17:39:26.676]             `<<-` <- base::`<<-`
[17:39:26.676]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:26.676]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:26.676]                   3L)]
[17:39:26.676]             }
[17:39:26.676]             function(cond) {
[17:39:26.676]                 is_error <- inherits(cond, "error")
[17:39:26.676]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:26.676]                   NULL)
[17:39:26.676]                 if (is_error) {
[17:39:26.676]                   sessionInformation <- function() {
[17:39:26.676]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:26.676]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:26.676]                       search = base::search(), system = base::Sys.info())
[17:39:26.676]                   }
[17:39:26.676]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.676]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:26.676]                     cond$call), session = sessionInformation(), 
[17:39:26.676]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:26.676]                   signalCondition(cond)
[17:39:26.676]                 }
[17:39:26.676]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:26.676]                 "immediateCondition"))) {
[17:39:26.676]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:26.676]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.676]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:26.676]                   if (TRUE && !signal) {
[17:39:26.676]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.676]                     {
[17:39:26.676]                       inherits <- base::inherits
[17:39:26.676]                       invokeRestart <- base::invokeRestart
[17:39:26.676]                       is.null <- base::is.null
[17:39:26.676]                       muffled <- FALSE
[17:39:26.676]                       if (inherits(cond, "message")) {
[17:39:26.676]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.676]                         if (muffled) 
[17:39:26.676]                           invokeRestart("muffleMessage")
[17:39:26.676]                       }
[17:39:26.676]                       else if (inherits(cond, "warning")) {
[17:39:26.676]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.676]                         if (muffled) 
[17:39:26.676]                           invokeRestart("muffleWarning")
[17:39:26.676]                       }
[17:39:26.676]                       else if (inherits(cond, "condition")) {
[17:39:26.676]                         if (!is.null(pattern)) {
[17:39:26.676]                           computeRestarts <- base::computeRestarts
[17:39:26.676]                           grepl <- base::grepl
[17:39:26.676]                           restarts <- computeRestarts(cond)
[17:39:26.676]                           for (restart in restarts) {
[17:39:26.676]                             name <- restart$name
[17:39:26.676]                             if (is.null(name)) 
[17:39:26.676]                               next
[17:39:26.676]                             if (!grepl(pattern, name)) 
[17:39:26.676]                               next
[17:39:26.676]                             invokeRestart(restart)
[17:39:26.676]                             muffled <- TRUE
[17:39:26.676]                             break
[17:39:26.676]                           }
[17:39:26.676]                         }
[17:39:26.676]                       }
[17:39:26.676]                       invisible(muffled)
[17:39:26.676]                     }
[17:39:26.676]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.676]                   }
[17:39:26.676]                 }
[17:39:26.676]                 else {
[17:39:26.676]                   if (TRUE) {
[17:39:26.676]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.676]                     {
[17:39:26.676]                       inherits <- base::inherits
[17:39:26.676]                       invokeRestart <- base::invokeRestart
[17:39:26.676]                       is.null <- base::is.null
[17:39:26.676]                       muffled <- FALSE
[17:39:26.676]                       if (inherits(cond, "message")) {
[17:39:26.676]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.676]                         if (muffled) 
[17:39:26.676]                           invokeRestart("muffleMessage")
[17:39:26.676]                       }
[17:39:26.676]                       else if (inherits(cond, "warning")) {
[17:39:26.676]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.676]                         if (muffled) 
[17:39:26.676]                           invokeRestart("muffleWarning")
[17:39:26.676]                       }
[17:39:26.676]                       else if (inherits(cond, "condition")) {
[17:39:26.676]                         if (!is.null(pattern)) {
[17:39:26.676]                           computeRestarts <- base::computeRestarts
[17:39:26.676]                           grepl <- base::grepl
[17:39:26.676]                           restarts <- computeRestarts(cond)
[17:39:26.676]                           for (restart in restarts) {
[17:39:26.676]                             name <- restart$name
[17:39:26.676]                             if (is.null(name)) 
[17:39:26.676]                               next
[17:39:26.676]                             if (!grepl(pattern, name)) 
[17:39:26.676]                               next
[17:39:26.676]                             invokeRestart(restart)
[17:39:26.676]                             muffled <- TRUE
[17:39:26.676]                             break
[17:39:26.676]                           }
[17:39:26.676]                         }
[17:39:26.676]                       }
[17:39:26.676]                       invisible(muffled)
[17:39:26.676]                     }
[17:39:26.676]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.676]                   }
[17:39:26.676]                 }
[17:39:26.676]             }
[17:39:26.676]         }))
[17:39:26.676]     }, error = function(ex) {
[17:39:26.676]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:26.676]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.676]                 ...future.rng), started = ...future.startTime, 
[17:39:26.676]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:26.676]             version = "1.8"), class = "FutureResult")
[17:39:26.676]     }, finally = {
[17:39:26.676]         if (!identical(...future.workdir, getwd())) 
[17:39:26.676]             setwd(...future.workdir)
[17:39:26.676]         {
[17:39:26.676]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:26.676]                 ...future.oldOptions$nwarnings <- NULL
[17:39:26.676]             }
[17:39:26.676]             base::options(...future.oldOptions)
[17:39:26.676]             if (.Platform$OS.type == "windows") {
[17:39:26.676]                 old_names <- names(...future.oldEnvVars)
[17:39:26.676]                 envs <- base::Sys.getenv()
[17:39:26.676]                 names <- names(envs)
[17:39:26.676]                 common <- intersect(names, old_names)
[17:39:26.676]                 added <- setdiff(names, old_names)
[17:39:26.676]                 removed <- setdiff(old_names, names)
[17:39:26.676]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:26.676]                   envs[common]]
[17:39:26.676]                 NAMES <- toupper(changed)
[17:39:26.676]                 args <- list()
[17:39:26.676]                 for (kk in seq_along(NAMES)) {
[17:39:26.676]                   name <- changed[[kk]]
[17:39:26.676]                   NAME <- NAMES[[kk]]
[17:39:26.676]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.676]                     next
[17:39:26.676]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.676]                 }
[17:39:26.676]                 NAMES <- toupper(added)
[17:39:26.676]                 for (kk in seq_along(NAMES)) {
[17:39:26.676]                   name <- added[[kk]]
[17:39:26.676]                   NAME <- NAMES[[kk]]
[17:39:26.676]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.676]                     next
[17:39:26.676]                   args[[name]] <- ""
[17:39:26.676]                 }
[17:39:26.676]                 NAMES <- toupper(removed)
[17:39:26.676]                 for (kk in seq_along(NAMES)) {
[17:39:26.676]                   name <- removed[[kk]]
[17:39:26.676]                   NAME <- NAMES[[kk]]
[17:39:26.676]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.676]                     next
[17:39:26.676]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.676]                 }
[17:39:26.676]                 if (length(args) > 0) 
[17:39:26.676]                   base::do.call(base::Sys.setenv, args = args)
[17:39:26.676]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:26.676]             }
[17:39:26.676]             else {
[17:39:26.676]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:26.676]             }
[17:39:26.676]             {
[17:39:26.676]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:26.676]                   0L) {
[17:39:26.676]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:26.676]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:26.676]                   base::options(opts)
[17:39:26.676]                 }
[17:39:26.676]                 {
[17:39:26.676]                   {
[17:39:26.676]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:26.676]                     NULL
[17:39:26.676]                   }
[17:39:26.676]                   options(future.plan = NULL)
[17:39:26.676]                   if (is.na(NA_character_)) 
[17:39:26.676]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.676]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:26.676]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:26.676]                     .init = FALSE)
[17:39:26.676]                 }
[17:39:26.676]             }
[17:39:26.676]         }
[17:39:26.676]     })
[17:39:26.676]     if (TRUE) {
[17:39:26.676]         base::sink(type = "output", split = FALSE)
[17:39:26.676]         if (TRUE) {
[17:39:26.676]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:26.676]         }
[17:39:26.676]         else {
[17:39:26.676]             ...future.result["stdout"] <- base::list(NULL)
[17:39:26.676]         }
[17:39:26.676]         base::close(...future.stdout)
[17:39:26.676]         ...future.stdout <- NULL
[17:39:26.676]     }
[17:39:26.676]     ...future.result$conditions <- ...future.conditions
[17:39:26.676]     ...future.result$finished <- base::Sys.time()
[17:39:26.676]     ...future.result
[17:39:26.676] }
[17:39:26.679] MultisessionFuture started
[17:39:26.680] - Launch lazy future ... done
[17:39:26.680] run() for ‘MultisessionFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[17:39:26.680] result() for ClusterFuture ...
[17:39:26.680] - result already collected: FutureResult
[17:39:26.681] result() for ClusterFuture ... done
[17:39:26.681] result() for ClusterFuture ...
[17:39:26.681] - result already collected: FutureResult
[17:39:26.681] result() for ClusterFuture ... done
[17:39:26.681] signalConditions() ...
[17:39:26.681]  - include = ‘immediateCondition’
[17:39:26.681]  - exclude = 
[17:39:26.682]  - resignal = FALSE
[17:39:26.682]  - Number of conditions: 1
[17:39:26.682] signalConditions() ... done
[17:39:26.682] Future state: ‘finished’
[17:39:26.682] result() for ClusterFuture ...
[17:39:26.682] - result already collected: FutureResult
[17:39:26.682] result() for ClusterFuture ... done
[17:39:26.682] signalConditions() ...
[17:39:26.682]  - include = ‘condition’
[17:39:26.683]  - exclude = ‘immediateCondition’
[17:39:26.683]  - resignal = TRUE
[17:39:26.683]  - Number of conditions: 1
[17:39:26.683]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:39:26.683] signalConditions() ... done
v3: <simpleError> (as expect)
[17:39:26.683] result() for ClusterFuture ...
[17:39:26.683] receiveMessageFromWorker() for ClusterFuture ...
[17:39:26.683] - Validating connection of MultisessionFuture
[17:39:26.683] - received message: FutureResult
[17:39:26.684] - Received FutureResult
[17:39:26.684] - Erased future from FutureRegistry
[17:39:26.684] result() for ClusterFuture ...
[17:39:26.684] - result already collected: FutureResult
[17:39:26.684] result() for ClusterFuture ... done
[17:39:26.684] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:26.684] result() for ClusterFuture ... done
[17:39:26.684] result() for ClusterFuture ...
[17:39:26.684] - result already collected: FutureResult
[17:39:26.684] result() for ClusterFuture ... done
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[17:39:26.685] getGlobalsAndPackages() ...
[17:39:26.685] Searching for globals...
[17:39:26.685] 
[17:39:26.685] Searching for globals ... DONE
[17:39:26.685] - globals: [0] <none>
[17:39:26.685] getGlobalsAndPackages() ... DONE
[17:39:26.686] run() for ‘Future’ ...
[17:39:26.686] - state: ‘created’
[17:39:26.686] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:26.699] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:26.700] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:26.700]   - Field: ‘node’
[17:39:26.700]   - Field: ‘label’
[17:39:26.700]   - Field: ‘local’
[17:39:26.700]   - Field: ‘owner’
[17:39:26.700]   - Field: ‘envir’
[17:39:26.700]   - Field: ‘workers’
[17:39:26.700]   - Field: ‘packages’
[17:39:26.700]   - Field: ‘gc’
[17:39:26.701]   - Field: ‘conditions’
[17:39:26.701]   - Field: ‘persistent’
[17:39:26.701]   - Field: ‘expr’
[17:39:26.701]   - Field: ‘uuid’
[17:39:26.701]   - Field: ‘seed’
[17:39:26.701]   - Field: ‘version’
[17:39:26.701]   - Field: ‘result’
[17:39:26.701]   - Field: ‘asynchronous’
[17:39:26.701]   - Field: ‘calls’
[17:39:26.701]   - Field: ‘globals’
[17:39:26.701]   - Field: ‘stdout’
[17:39:26.702]   - Field: ‘earlySignal’
[17:39:26.702]   - Field: ‘lazy’
[17:39:26.702]   - Field: ‘state’
[17:39:26.702] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:26.702] - Launch lazy future ...
[17:39:26.702] Packages needed by the future expression (n = 0): <none>
[17:39:26.702] Packages needed by future strategies (n = 0): <none>
[17:39:26.703] {
[17:39:26.703]     {
[17:39:26.703]         {
[17:39:26.703]             ...future.startTime <- base::Sys.time()
[17:39:26.703]             {
[17:39:26.703]                 {
[17:39:26.703]                   {
[17:39:26.703]                     {
[17:39:26.703]                       base::local({
[17:39:26.703]                         has_future <- base::requireNamespace("future", 
[17:39:26.703]                           quietly = TRUE)
[17:39:26.703]                         if (has_future) {
[17:39:26.703]                           ns <- base::getNamespace("future")
[17:39:26.703]                           version <- ns[[".package"]][["version"]]
[17:39:26.703]                           if (is.null(version)) 
[17:39:26.703]                             version <- utils::packageVersion("future")
[17:39:26.703]                         }
[17:39:26.703]                         else {
[17:39:26.703]                           version <- NULL
[17:39:26.703]                         }
[17:39:26.703]                         if (!has_future || version < "1.8.0") {
[17:39:26.703]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:26.703]                             "", base::R.version$version.string), 
[17:39:26.703]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:26.703]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:26.703]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:26.703]                               "release", "version")], collapse = " "), 
[17:39:26.703]                             hostname = base::Sys.info()[["nodename"]])
[17:39:26.703]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:26.703]                             info)
[17:39:26.703]                           info <- base::paste(info, collapse = "; ")
[17:39:26.703]                           if (!has_future) {
[17:39:26.703]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:26.703]                               info)
[17:39:26.703]                           }
[17:39:26.703]                           else {
[17:39:26.703]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:26.703]                               info, version)
[17:39:26.703]                           }
[17:39:26.703]                           base::stop(msg)
[17:39:26.703]                         }
[17:39:26.703]                       })
[17:39:26.703]                     }
[17:39:26.703]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:26.703]                     base::options(mc.cores = 1L)
[17:39:26.703]                   }
[17:39:26.703]                   ...future.strategy.old <- future::plan("list")
[17:39:26.703]                   options(future.plan = NULL)
[17:39:26.703]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.703]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:26.703]                 }
[17:39:26.703]                 ...future.workdir <- getwd()
[17:39:26.703]             }
[17:39:26.703]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:26.703]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:26.703]         }
[17:39:26.703]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:26.703]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:26.703]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:26.703]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:26.703]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:26.703]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:26.703]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:26.703]             base::names(...future.oldOptions))
[17:39:26.703]     }
[17:39:26.703]     if (FALSE) {
[17:39:26.703]     }
[17:39:26.703]     else {
[17:39:26.703]         if (TRUE) {
[17:39:26.703]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:26.703]                 open = "w")
[17:39:26.703]         }
[17:39:26.703]         else {
[17:39:26.703]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:26.703]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:26.703]         }
[17:39:26.703]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:26.703]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:26.703]             base::sink(type = "output", split = FALSE)
[17:39:26.703]             base::close(...future.stdout)
[17:39:26.703]         }, add = TRUE)
[17:39:26.703]     }
[17:39:26.703]     ...future.frame <- base::sys.nframe()
[17:39:26.703]     ...future.conditions <- base::list()
[17:39:26.703]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:26.703]     if (FALSE) {
[17:39:26.703]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:26.703]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:26.703]     }
[17:39:26.703]     ...future.result <- base::tryCatch({
[17:39:26.703]         base::withCallingHandlers({
[17:39:26.703]             ...future.value <- base::withVisible(base::local({
[17:39:26.703]                 ...future.makeSendCondition <- base::local({
[17:39:26.703]                   sendCondition <- NULL
[17:39:26.703]                   function(frame = 1L) {
[17:39:26.703]                     if (is.function(sendCondition)) 
[17:39:26.703]                       return(sendCondition)
[17:39:26.703]                     ns <- getNamespace("parallel")
[17:39:26.703]                     if (exists("sendData", mode = "function", 
[17:39:26.703]                       envir = ns)) {
[17:39:26.703]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:26.703]                         envir = ns)
[17:39:26.703]                       envir <- sys.frame(frame)
[17:39:26.703]                       master <- NULL
[17:39:26.703]                       while (!identical(envir, .GlobalEnv) && 
[17:39:26.703]                         !identical(envir, emptyenv())) {
[17:39:26.703]                         if (exists("master", mode = "list", envir = envir, 
[17:39:26.703]                           inherits = FALSE)) {
[17:39:26.703]                           master <- get("master", mode = "list", 
[17:39:26.703]                             envir = envir, inherits = FALSE)
[17:39:26.703]                           if (inherits(master, c("SOCKnode", 
[17:39:26.703]                             "SOCK0node"))) {
[17:39:26.703]                             sendCondition <<- function(cond) {
[17:39:26.703]                               data <- list(type = "VALUE", value = cond, 
[17:39:26.703]                                 success = TRUE)
[17:39:26.703]                               parallel_sendData(master, data)
[17:39:26.703]                             }
[17:39:26.703]                             return(sendCondition)
[17:39:26.703]                           }
[17:39:26.703]                         }
[17:39:26.703]                         frame <- frame + 1L
[17:39:26.703]                         envir <- sys.frame(frame)
[17:39:26.703]                       }
[17:39:26.703]                     }
[17:39:26.703]                     sendCondition <<- function(cond) NULL
[17:39:26.703]                   }
[17:39:26.703]                 })
[17:39:26.703]                 withCallingHandlers({
[17:39:26.703]                   1
[17:39:26.703]                 }, immediateCondition = function(cond) {
[17:39:26.703]                   sendCondition <- ...future.makeSendCondition()
[17:39:26.703]                   sendCondition(cond)
[17:39:26.703]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.703]                   {
[17:39:26.703]                     inherits <- base::inherits
[17:39:26.703]                     invokeRestart <- base::invokeRestart
[17:39:26.703]                     is.null <- base::is.null
[17:39:26.703]                     muffled <- FALSE
[17:39:26.703]                     if (inherits(cond, "message")) {
[17:39:26.703]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:26.703]                       if (muffled) 
[17:39:26.703]                         invokeRestart("muffleMessage")
[17:39:26.703]                     }
[17:39:26.703]                     else if (inherits(cond, "warning")) {
[17:39:26.703]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:26.703]                       if (muffled) 
[17:39:26.703]                         invokeRestart("muffleWarning")
[17:39:26.703]                     }
[17:39:26.703]                     else if (inherits(cond, "condition")) {
[17:39:26.703]                       if (!is.null(pattern)) {
[17:39:26.703]                         computeRestarts <- base::computeRestarts
[17:39:26.703]                         grepl <- base::grepl
[17:39:26.703]                         restarts <- computeRestarts(cond)
[17:39:26.703]                         for (restart in restarts) {
[17:39:26.703]                           name <- restart$name
[17:39:26.703]                           if (is.null(name)) 
[17:39:26.703]                             next
[17:39:26.703]                           if (!grepl(pattern, name)) 
[17:39:26.703]                             next
[17:39:26.703]                           invokeRestart(restart)
[17:39:26.703]                           muffled <- TRUE
[17:39:26.703]                           break
[17:39:26.703]                         }
[17:39:26.703]                       }
[17:39:26.703]                     }
[17:39:26.703]                     invisible(muffled)
[17:39:26.703]                   }
[17:39:26.703]                   muffleCondition(cond)
[17:39:26.703]                 })
[17:39:26.703]             }))
[17:39:26.703]             future::FutureResult(value = ...future.value$value, 
[17:39:26.703]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.703]                   ...future.rng), globalenv = if (FALSE) 
[17:39:26.703]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:26.703]                     ...future.globalenv.names))
[17:39:26.703]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:26.703]         }, condition = base::local({
[17:39:26.703]             c <- base::c
[17:39:26.703]             inherits <- base::inherits
[17:39:26.703]             invokeRestart <- base::invokeRestart
[17:39:26.703]             length <- base::length
[17:39:26.703]             list <- base::list
[17:39:26.703]             seq.int <- base::seq.int
[17:39:26.703]             signalCondition <- base::signalCondition
[17:39:26.703]             sys.calls <- base::sys.calls
[17:39:26.703]             `[[` <- base::`[[`
[17:39:26.703]             `+` <- base::`+`
[17:39:26.703]             `<<-` <- base::`<<-`
[17:39:26.703]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:26.703]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:26.703]                   3L)]
[17:39:26.703]             }
[17:39:26.703]             function(cond) {
[17:39:26.703]                 is_error <- inherits(cond, "error")
[17:39:26.703]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:26.703]                   NULL)
[17:39:26.703]                 if (is_error) {
[17:39:26.703]                   sessionInformation <- function() {
[17:39:26.703]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:26.703]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:26.703]                       search = base::search(), system = base::Sys.info())
[17:39:26.703]                   }
[17:39:26.703]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.703]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:26.703]                     cond$call), session = sessionInformation(), 
[17:39:26.703]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:26.703]                   signalCondition(cond)
[17:39:26.703]                 }
[17:39:26.703]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:26.703]                 "immediateCondition"))) {
[17:39:26.703]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:26.703]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.703]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:26.703]                   if (TRUE && !signal) {
[17:39:26.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.703]                     {
[17:39:26.703]                       inherits <- base::inherits
[17:39:26.703]                       invokeRestart <- base::invokeRestart
[17:39:26.703]                       is.null <- base::is.null
[17:39:26.703]                       muffled <- FALSE
[17:39:26.703]                       if (inherits(cond, "message")) {
[17:39:26.703]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.703]                         if (muffled) 
[17:39:26.703]                           invokeRestart("muffleMessage")
[17:39:26.703]                       }
[17:39:26.703]                       else if (inherits(cond, "warning")) {
[17:39:26.703]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.703]                         if (muffled) 
[17:39:26.703]                           invokeRestart("muffleWarning")
[17:39:26.703]                       }
[17:39:26.703]                       else if (inherits(cond, "condition")) {
[17:39:26.703]                         if (!is.null(pattern)) {
[17:39:26.703]                           computeRestarts <- base::computeRestarts
[17:39:26.703]                           grepl <- base::grepl
[17:39:26.703]                           restarts <- computeRestarts(cond)
[17:39:26.703]                           for (restart in restarts) {
[17:39:26.703]                             name <- restart$name
[17:39:26.703]                             if (is.null(name)) 
[17:39:26.703]                               next
[17:39:26.703]                             if (!grepl(pattern, name)) 
[17:39:26.703]                               next
[17:39:26.703]                             invokeRestart(restart)
[17:39:26.703]                             muffled <- TRUE
[17:39:26.703]                             break
[17:39:26.703]                           }
[17:39:26.703]                         }
[17:39:26.703]                       }
[17:39:26.703]                       invisible(muffled)
[17:39:26.703]                     }
[17:39:26.703]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.703]                   }
[17:39:26.703]                 }
[17:39:26.703]                 else {
[17:39:26.703]                   if (TRUE) {
[17:39:26.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.703]                     {
[17:39:26.703]                       inherits <- base::inherits
[17:39:26.703]                       invokeRestart <- base::invokeRestart
[17:39:26.703]                       is.null <- base::is.null
[17:39:26.703]                       muffled <- FALSE
[17:39:26.703]                       if (inherits(cond, "message")) {
[17:39:26.703]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.703]                         if (muffled) 
[17:39:26.703]                           invokeRestart("muffleMessage")
[17:39:26.703]                       }
[17:39:26.703]                       else if (inherits(cond, "warning")) {
[17:39:26.703]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.703]                         if (muffled) 
[17:39:26.703]                           invokeRestart("muffleWarning")
[17:39:26.703]                       }
[17:39:26.703]                       else if (inherits(cond, "condition")) {
[17:39:26.703]                         if (!is.null(pattern)) {
[17:39:26.703]                           computeRestarts <- base::computeRestarts
[17:39:26.703]                           grepl <- base::grepl
[17:39:26.703]                           restarts <- computeRestarts(cond)
[17:39:26.703]                           for (restart in restarts) {
[17:39:26.703]                             name <- restart$name
[17:39:26.703]                             if (is.null(name)) 
[17:39:26.703]                               next
[17:39:26.703]                             if (!grepl(pattern, name)) 
[17:39:26.703]                               next
[17:39:26.703]                             invokeRestart(restart)
[17:39:26.703]                             muffled <- TRUE
[17:39:26.703]                             break
[17:39:26.703]                           }
[17:39:26.703]                         }
[17:39:26.703]                       }
[17:39:26.703]                       invisible(muffled)
[17:39:26.703]                     }
[17:39:26.703]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.703]                   }
[17:39:26.703]                 }
[17:39:26.703]             }
[17:39:26.703]         }))
[17:39:26.703]     }, error = function(ex) {
[17:39:26.703]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:26.703]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.703]                 ...future.rng), started = ...future.startTime, 
[17:39:26.703]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:26.703]             version = "1.8"), class = "FutureResult")
[17:39:26.703]     }, finally = {
[17:39:26.703]         if (!identical(...future.workdir, getwd())) 
[17:39:26.703]             setwd(...future.workdir)
[17:39:26.703]         {
[17:39:26.703]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:26.703]                 ...future.oldOptions$nwarnings <- NULL
[17:39:26.703]             }
[17:39:26.703]             base::options(...future.oldOptions)
[17:39:26.703]             if (.Platform$OS.type == "windows") {
[17:39:26.703]                 old_names <- names(...future.oldEnvVars)
[17:39:26.703]                 envs <- base::Sys.getenv()
[17:39:26.703]                 names <- names(envs)
[17:39:26.703]                 common <- intersect(names, old_names)
[17:39:26.703]                 added <- setdiff(names, old_names)
[17:39:26.703]                 removed <- setdiff(old_names, names)
[17:39:26.703]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:26.703]                   envs[common]]
[17:39:26.703]                 NAMES <- toupper(changed)
[17:39:26.703]                 args <- list()
[17:39:26.703]                 for (kk in seq_along(NAMES)) {
[17:39:26.703]                   name <- changed[[kk]]
[17:39:26.703]                   NAME <- NAMES[[kk]]
[17:39:26.703]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.703]                     next
[17:39:26.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.703]                 }
[17:39:26.703]                 NAMES <- toupper(added)
[17:39:26.703]                 for (kk in seq_along(NAMES)) {
[17:39:26.703]                   name <- added[[kk]]
[17:39:26.703]                   NAME <- NAMES[[kk]]
[17:39:26.703]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.703]                     next
[17:39:26.703]                   args[[name]] <- ""
[17:39:26.703]                 }
[17:39:26.703]                 NAMES <- toupper(removed)
[17:39:26.703]                 for (kk in seq_along(NAMES)) {
[17:39:26.703]                   name <- removed[[kk]]
[17:39:26.703]                   NAME <- NAMES[[kk]]
[17:39:26.703]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.703]                     next
[17:39:26.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.703]                 }
[17:39:26.703]                 if (length(args) > 0) 
[17:39:26.703]                   base::do.call(base::Sys.setenv, args = args)
[17:39:26.703]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:26.703]             }
[17:39:26.703]             else {
[17:39:26.703]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:26.703]             }
[17:39:26.703]             {
[17:39:26.703]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:26.703]                   0L) {
[17:39:26.703]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:26.703]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:26.703]                   base::options(opts)
[17:39:26.703]                 }
[17:39:26.703]                 {
[17:39:26.703]                   {
[17:39:26.703]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:26.703]                     NULL
[17:39:26.703]                   }
[17:39:26.703]                   options(future.plan = NULL)
[17:39:26.703]                   if (is.na(NA_character_)) 
[17:39:26.703]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.703]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:26.703]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:26.703]                     .init = FALSE)
[17:39:26.703]                 }
[17:39:26.703]             }
[17:39:26.703]         }
[17:39:26.703]     })
[17:39:26.703]     if (TRUE) {
[17:39:26.703]         base::sink(type = "output", split = FALSE)
[17:39:26.703]         if (TRUE) {
[17:39:26.703]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:26.703]         }
[17:39:26.703]         else {
[17:39:26.703]             ...future.result["stdout"] <- base::list(NULL)
[17:39:26.703]         }
[17:39:26.703]         base::close(...future.stdout)
[17:39:26.703]         ...future.stdout <- NULL
[17:39:26.703]     }
[17:39:26.703]     ...future.result$conditions <- ...future.conditions
[17:39:26.703]     ...future.result$finished <- base::Sys.time()
[17:39:26.703]     ...future.result
[17:39:26.703] }
[17:39:26.706] MultisessionFuture started
[17:39:26.706] - Launch lazy future ... done
[17:39:26.706] run() for ‘MultisessionFuture’ ... done
[17:39:26.707] result() for ClusterFuture ...
[17:39:26.709] receiveMessageFromWorker() for ClusterFuture ...
[17:39:26.709] - Validating connection of MultisessionFuture
[17:39:26.710] - received message: FutureResult
[17:39:26.710] - Received FutureResult
[17:39:26.710] - Erased future from FutureRegistry
[17:39:26.710] result() for ClusterFuture ...
[17:39:26.710] - result already collected: FutureResult
[17:39:26.710] result() for ClusterFuture ... done
[17:39:26.710] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:26.710] result() for ClusterFuture ... done
[17:39:26.710] result() for ClusterFuture ...
[17:39:26.710] - result already collected: FutureResult
[17:39:26.711] result() for ClusterFuture ... done
c = 1
[17:39:26.711] getGlobalsAndPackages() ...
[17:39:26.711] Searching for globals...
[17:39:26.711] 
[17:39:26.711] Searching for globals ... DONE
[17:39:26.711] - globals: [0] <none>
[17:39:26.712] getGlobalsAndPackages() ... DONE
[17:39:26.712] run() for ‘Future’ ...
[17:39:26.712] - state: ‘created’
[17:39:26.712] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:26.726] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:26.726] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:26.726]   - Field: ‘node’
[17:39:26.726]   - Field: ‘label’
[17:39:26.726]   - Field: ‘local’
[17:39:26.726]   - Field: ‘owner’
[17:39:26.726]   - Field: ‘envir’
[17:39:26.726]   - Field: ‘workers’
[17:39:26.726]   - Field: ‘packages’
[17:39:26.727]   - Field: ‘gc’
[17:39:26.727]   - Field: ‘conditions’
[17:39:26.727]   - Field: ‘persistent’
[17:39:26.727]   - Field: ‘expr’
[17:39:26.727]   - Field: ‘uuid’
[17:39:26.727]   - Field: ‘seed’
[17:39:26.727]   - Field: ‘version’
[17:39:26.727]   - Field: ‘result’
[17:39:26.727]   - Field: ‘asynchronous’
[17:39:26.727]   - Field: ‘calls’
[17:39:26.727]   - Field: ‘globals’
[17:39:26.727]   - Field: ‘stdout’
[17:39:26.728]   - Field: ‘earlySignal’
[17:39:26.728]   - Field: ‘lazy’
[17:39:26.728]   - Field: ‘state’
[17:39:26.728] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:26.728] - Launch lazy future ...
[17:39:26.728] Packages needed by the future expression (n = 0): <none>
[17:39:26.728] Packages needed by future strategies (n = 0): <none>
[17:39:26.729] {
[17:39:26.729]     {
[17:39:26.729]         {
[17:39:26.729]             ...future.startTime <- base::Sys.time()
[17:39:26.729]             {
[17:39:26.729]                 {
[17:39:26.729]                   {
[17:39:26.729]                     {
[17:39:26.729]                       base::local({
[17:39:26.729]                         has_future <- base::requireNamespace("future", 
[17:39:26.729]                           quietly = TRUE)
[17:39:26.729]                         if (has_future) {
[17:39:26.729]                           ns <- base::getNamespace("future")
[17:39:26.729]                           version <- ns[[".package"]][["version"]]
[17:39:26.729]                           if (is.null(version)) 
[17:39:26.729]                             version <- utils::packageVersion("future")
[17:39:26.729]                         }
[17:39:26.729]                         else {
[17:39:26.729]                           version <- NULL
[17:39:26.729]                         }
[17:39:26.729]                         if (!has_future || version < "1.8.0") {
[17:39:26.729]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:26.729]                             "", base::R.version$version.string), 
[17:39:26.729]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:26.729]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:26.729]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:26.729]                               "release", "version")], collapse = " "), 
[17:39:26.729]                             hostname = base::Sys.info()[["nodename"]])
[17:39:26.729]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:26.729]                             info)
[17:39:26.729]                           info <- base::paste(info, collapse = "; ")
[17:39:26.729]                           if (!has_future) {
[17:39:26.729]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:26.729]                               info)
[17:39:26.729]                           }
[17:39:26.729]                           else {
[17:39:26.729]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:26.729]                               info, version)
[17:39:26.729]                           }
[17:39:26.729]                           base::stop(msg)
[17:39:26.729]                         }
[17:39:26.729]                       })
[17:39:26.729]                     }
[17:39:26.729]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:26.729]                     base::options(mc.cores = 1L)
[17:39:26.729]                   }
[17:39:26.729]                   ...future.strategy.old <- future::plan("list")
[17:39:26.729]                   options(future.plan = NULL)
[17:39:26.729]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.729]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:26.729]                 }
[17:39:26.729]                 ...future.workdir <- getwd()
[17:39:26.729]             }
[17:39:26.729]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:26.729]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:26.729]         }
[17:39:26.729]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:26.729]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:26.729]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:26.729]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:26.729]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:26.729]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:26.729]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:26.729]             base::names(...future.oldOptions))
[17:39:26.729]     }
[17:39:26.729]     if (FALSE) {
[17:39:26.729]     }
[17:39:26.729]     else {
[17:39:26.729]         if (TRUE) {
[17:39:26.729]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:26.729]                 open = "w")
[17:39:26.729]         }
[17:39:26.729]         else {
[17:39:26.729]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:26.729]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:26.729]         }
[17:39:26.729]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:26.729]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:26.729]             base::sink(type = "output", split = FALSE)
[17:39:26.729]             base::close(...future.stdout)
[17:39:26.729]         }, add = TRUE)
[17:39:26.729]     }
[17:39:26.729]     ...future.frame <- base::sys.nframe()
[17:39:26.729]     ...future.conditions <- base::list()
[17:39:26.729]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:26.729]     if (FALSE) {
[17:39:26.729]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:26.729]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:26.729]     }
[17:39:26.729]     ...future.result <- base::tryCatch({
[17:39:26.729]         base::withCallingHandlers({
[17:39:26.729]             ...future.value <- base::withVisible(base::local({
[17:39:26.729]                 ...future.makeSendCondition <- base::local({
[17:39:26.729]                   sendCondition <- NULL
[17:39:26.729]                   function(frame = 1L) {
[17:39:26.729]                     if (is.function(sendCondition)) 
[17:39:26.729]                       return(sendCondition)
[17:39:26.729]                     ns <- getNamespace("parallel")
[17:39:26.729]                     if (exists("sendData", mode = "function", 
[17:39:26.729]                       envir = ns)) {
[17:39:26.729]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:26.729]                         envir = ns)
[17:39:26.729]                       envir <- sys.frame(frame)
[17:39:26.729]                       master <- NULL
[17:39:26.729]                       while (!identical(envir, .GlobalEnv) && 
[17:39:26.729]                         !identical(envir, emptyenv())) {
[17:39:26.729]                         if (exists("master", mode = "list", envir = envir, 
[17:39:26.729]                           inherits = FALSE)) {
[17:39:26.729]                           master <- get("master", mode = "list", 
[17:39:26.729]                             envir = envir, inherits = FALSE)
[17:39:26.729]                           if (inherits(master, c("SOCKnode", 
[17:39:26.729]                             "SOCK0node"))) {
[17:39:26.729]                             sendCondition <<- function(cond) {
[17:39:26.729]                               data <- list(type = "VALUE", value = cond, 
[17:39:26.729]                                 success = TRUE)
[17:39:26.729]                               parallel_sendData(master, data)
[17:39:26.729]                             }
[17:39:26.729]                             return(sendCondition)
[17:39:26.729]                           }
[17:39:26.729]                         }
[17:39:26.729]                         frame <- frame + 1L
[17:39:26.729]                         envir <- sys.frame(frame)
[17:39:26.729]                       }
[17:39:26.729]                     }
[17:39:26.729]                     sendCondition <<- function(cond) NULL
[17:39:26.729]                   }
[17:39:26.729]                 })
[17:39:26.729]                 withCallingHandlers({
[17:39:26.729]                   1
[17:39:26.729]                 }, immediateCondition = function(cond) {
[17:39:26.729]                   sendCondition <- ...future.makeSendCondition()
[17:39:26.729]                   sendCondition(cond)
[17:39:26.729]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.729]                   {
[17:39:26.729]                     inherits <- base::inherits
[17:39:26.729]                     invokeRestart <- base::invokeRestart
[17:39:26.729]                     is.null <- base::is.null
[17:39:26.729]                     muffled <- FALSE
[17:39:26.729]                     if (inherits(cond, "message")) {
[17:39:26.729]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:26.729]                       if (muffled) 
[17:39:26.729]                         invokeRestart("muffleMessage")
[17:39:26.729]                     }
[17:39:26.729]                     else if (inherits(cond, "warning")) {
[17:39:26.729]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:26.729]                       if (muffled) 
[17:39:26.729]                         invokeRestart("muffleWarning")
[17:39:26.729]                     }
[17:39:26.729]                     else if (inherits(cond, "condition")) {
[17:39:26.729]                       if (!is.null(pattern)) {
[17:39:26.729]                         computeRestarts <- base::computeRestarts
[17:39:26.729]                         grepl <- base::grepl
[17:39:26.729]                         restarts <- computeRestarts(cond)
[17:39:26.729]                         for (restart in restarts) {
[17:39:26.729]                           name <- restart$name
[17:39:26.729]                           if (is.null(name)) 
[17:39:26.729]                             next
[17:39:26.729]                           if (!grepl(pattern, name)) 
[17:39:26.729]                             next
[17:39:26.729]                           invokeRestart(restart)
[17:39:26.729]                           muffled <- TRUE
[17:39:26.729]                           break
[17:39:26.729]                         }
[17:39:26.729]                       }
[17:39:26.729]                     }
[17:39:26.729]                     invisible(muffled)
[17:39:26.729]                   }
[17:39:26.729]                   muffleCondition(cond)
[17:39:26.729]                 })
[17:39:26.729]             }))
[17:39:26.729]             future::FutureResult(value = ...future.value$value, 
[17:39:26.729]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.729]                   ...future.rng), globalenv = if (FALSE) 
[17:39:26.729]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:26.729]                     ...future.globalenv.names))
[17:39:26.729]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:26.729]         }, condition = base::local({
[17:39:26.729]             c <- base::c
[17:39:26.729]             inherits <- base::inherits
[17:39:26.729]             invokeRestart <- base::invokeRestart
[17:39:26.729]             length <- base::length
[17:39:26.729]             list <- base::list
[17:39:26.729]             seq.int <- base::seq.int
[17:39:26.729]             signalCondition <- base::signalCondition
[17:39:26.729]             sys.calls <- base::sys.calls
[17:39:26.729]             `[[` <- base::`[[`
[17:39:26.729]             `+` <- base::`+`
[17:39:26.729]             `<<-` <- base::`<<-`
[17:39:26.729]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:26.729]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:26.729]                   3L)]
[17:39:26.729]             }
[17:39:26.729]             function(cond) {
[17:39:26.729]                 is_error <- inherits(cond, "error")
[17:39:26.729]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:26.729]                   NULL)
[17:39:26.729]                 if (is_error) {
[17:39:26.729]                   sessionInformation <- function() {
[17:39:26.729]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:26.729]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:26.729]                       search = base::search(), system = base::Sys.info())
[17:39:26.729]                   }
[17:39:26.729]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.729]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:26.729]                     cond$call), session = sessionInformation(), 
[17:39:26.729]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:26.729]                   signalCondition(cond)
[17:39:26.729]                 }
[17:39:26.729]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:26.729]                 "immediateCondition"))) {
[17:39:26.729]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:26.729]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.729]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:26.729]                   if (TRUE && !signal) {
[17:39:26.729]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.729]                     {
[17:39:26.729]                       inherits <- base::inherits
[17:39:26.729]                       invokeRestart <- base::invokeRestart
[17:39:26.729]                       is.null <- base::is.null
[17:39:26.729]                       muffled <- FALSE
[17:39:26.729]                       if (inherits(cond, "message")) {
[17:39:26.729]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.729]                         if (muffled) 
[17:39:26.729]                           invokeRestart("muffleMessage")
[17:39:26.729]                       }
[17:39:26.729]                       else if (inherits(cond, "warning")) {
[17:39:26.729]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.729]                         if (muffled) 
[17:39:26.729]                           invokeRestart("muffleWarning")
[17:39:26.729]                       }
[17:39:26.729]                       else if (inherits(cond, "condition")) {
[17:39:26.729]                         if (!is.null(pattern)) {
[17:39:26.729]                           computeRestarts <- base::computeRestarts
[17:39:26.729]                           grepl <- base::grepl
[17:39:26.729]                           restarts <- computeRestarts(cond)
[17:39:26.729]                           for (restart in restarts) {
[17:39:26.729]                             name <- restart$name
[17:39:26.729]                             if (is.null(name)) 
[17:39:26.729]                               next
[17:39:26.729]                             if (!grepl(pattern, name)) 
[17:39:26.729]                               next
[17:39:26.729]                             invokeRestart(restart)
[17:39:26.729]                             muffled <- TRUE
[17:39:26.729]                             break
[17:39:26.729]                           }
[17:39:26.729]                         }
[17:39:26.729]                       }
[17:39:26.729]                       invisible(muffled)
[17:39:26.729]                     }
[17:39:26.729]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.729]                   }
[17:39:26.729]                 }
[17:39:26.729]                 else {
[17:39:26.729]                   if (TRUE) {
[17:39:26.729]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.729]                     {
[17:39:26.729]                       inherits <- base::inherits
[17:39:26.729]                       invokeRestart <- base::invokeRestart
[17:39:26.729]                       is.null <- base::is.null
[17:39:26.729]                       muffled <- FALSE
[17:39:26.729]                       if (inherits(cond, "message")) {
[17:39:26.729]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.729]                         if (muffled) 
[17:39:26.729]                           invokeRestart("muffleMessage")
[17:39:26.729]                       }
[17:39:26.729]                       else if (inherits(cond, "warning")) {
[17:39:26.729]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.729]                         if (muffled) 
[17:39:26.729]                           invokeRestart("muffleWarning")
[17:39:26.729]                       }
[17:39:26.729]                       else if (inherits(cond, "condition")) {
[17:39:26.729]                         if (!is.null(pattern)) {
[17:39:26.729]                           computeRestarts <- base::computeRestarts
[17:39:26.729]                           grepl <- base::grepl
[17:39:26.729]                           restarts <- computeRestarts(cond)
[17:39:26.729]                           for (restart in restarts) {
[17:39:26.729]                             name <- restart$name
[17:39:26.729]                             if (is.null(name)) 
[17:39:26.729]                               next
[17:39:26.729]                             if (!grepl(pattern, name)) 
[17:39:26.729]                               next
[17:39:26.729]                             invokeRestart(restart)
[17:39:26.729]                             muffled <- TRUE
[17:39:26.729]                             break
[17:39:26.729]                           }
[17:39:26.729]                         }
[17:39:26.729]                       }
[17:39:26.729]                       invisible(muffled)
[17:39:26.729]                     }
[17:39:26.729]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.729]                   }
[17:39:26.729]                 }
[17:39:26.729]             }
[17:39:26.729]         }))
[17:39:26.729]     }, error = function(ex) {
[17:39:26.729]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:26.729]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.729]                 ...future.rng), started = ...future.startTime, 
[17:39:26.729]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:26.729]             version = "1.8"), class = "FutureResult")
[17:39:26.729]     }, finally = {
[17:39:26.729]         if (!identical(...future.workdir, getwd())) 
[17:39:26.729]             setwd(...future.workdir)
[17:39:26.729]         {
[17:39:26.729]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:26.729]                 ...future.oldOptions$nwarnings <- NULL
[17:39:26.729]             }
[17:39:26.729]             base::options(...future.oldOptions)
[17:39:26.729]             if (.Platform$OS.type == "windows") {
[17:39:26.729]                 old_names <- names(...future.oldEnvVars)
[17:39:26.729]                 envs <- base::Sys.getenv()
[17:39:26.729]                 names <- names(envs)
[17:39:26.729]                 common <- intersect(names, old_names)
[17:39:26.729]                 added <- setdiff(names, old_names)
[17:39:26.729]                 removed <- setdiff(old_names, names)
[17:39:26.729]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:26.729]                   envs[common]]
[17:39:26.729]                 NAMES <- toupper(changed)
[17:39:26.729]                 args <- list()
[17:39:26.729]                 for (kk in seq_along(NAMES)) {
[17:39:26.729]                   name <- changed[[kk]]
[17:39:26.729]                   NAME <- NAMES[[kk]]
[17:39:26.729]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.729]                     next
[17:39:26.729]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.729]                 }
[17:39:26.729]                 NAMES <- toupper(added)
[17:39:26.729]                 for (kk in seq_along(NAMES)) {
[17:39:26.729]                   name <- added[[kk]]
[17:39:26.729]                   NAME <- NAMES[[kk]]
[17:39:26.729]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.729]                     next
[17:39:26.729]                   args[[name]] <- ""
[17:39:26.729]                 }
[17:39:26.729]                 NAMES <- toupper(removed)
[17:39:26.729]                 for (kk in seq_along(NAMES)) {
[17:39:26.729]                   name <- removed[[kk]]
[17:39:26.729]                   NAME <- NAMES[[kk]]
[17:39:26.729]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.729]                     next
[17:39:26.729]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.729]                 }
[17:39:26.729]                 if (length(args) > 0) 
[17:39:26.729]                   base::do.call(base::Sys.setenv, args = args)
[17:39:26.729]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:26.729]             }
[17:39:26.729]             else {
[17:39:26.729]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:26.729]             }
[17:39:26.729]             {
[17:39:26.729]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:26.729]                   0L) {
[17:39:26.729]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:26.729]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:26.729]                   base::options(opts)
[17:39:26.729]                 }
[17:39:26.729]                 {
[17:39:26.729]                   {
[17:39:26.729]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:26.729]                     NULL
[17:39:26.729]                   }
[17:39:26.729]                   options(future.plan = NULL)
[17:39:26.729]                   if (is.na(NA_character_)) 
[17:39:26.729]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.729]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:26.729]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:26.729]                     .init = FALSE)
[17:39:26.729]                 }
[17:39:26.729]             }
[17:39:26.729]         }
[17:39:26.729]     })
[17:39:26.729]     if (TRUE) {
[17:39:26.729]         base::sink(type = "output", split = FALSE)
[17:39:26.729]         if (TRUE) {
[17:39:26.729]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:26.729]         }
[17:39:26.729]         else {
[17:39:26.729]             ...future.result["stdout"] <- base::list(NULL)
[17:39:26.729]         }
[17:39:26.729]         base::close(...future.stdout)
[17:39:26.729]         ...future.stdout <- NULL
[17:39:26.729]     }
[17:39:26.729]     ...future.result$conditions <- ...future.conditions
[17:39:26.729]     ...future.result$finished <- base::Sys.time()
[17:39:26.729]     ...future.result
[17:39:26.729] }
[17:39:26.732] MultisessionFuture started
[17:39:26.732] - Launch lazy future ... done
[17:39:26.732] run() for ‘MultisessionFuture’ ... done
[17:39:26.732] result() for ClusterFuture ...
[17:39:26.732] receiveMessageFromWorker() for ClusterFuture ...
[17:39:26.732] - Validating connection of MultisessionFuture
[17:39:26.733] - received message: FutureResult
[17:39:26.733] - Received FutureResult
[17:39:26.734] - Erased future from FutureRegistry
[17:39:26.734] result() for ClusterFuture ...
[17:39:26.734] - result already collected: FutureResult
[17:39:26.734] result() for ClusterFuture ... done
[17:39:26.734] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:26.734] result() for ClusterFuture ... done
[17:39:26.734] result() for ClusterFuture ...
[17:39:26.734] - result already collected: FutureResult
[17:39:26.734] result() for ClusterFuture ... done
d = 1
** Nested future assignments
[17:39:26.735] getGlobalsAndPackages() ...
[17:39:26.735] Searching for globals...
[17:39:26.738] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[17:39:26.738] Searching for globals ... DONE
[17:39:26.738] Resolving globals: FALSE
[17:39:26.739] 
[17:39:26.739] - packages: [1] ‘future’
[17:39:26.739] getGlobalsAndPackages() ... DONE
[17:39:26.739] run() for ‘Future’ ...
[17:39:26.739] - state: ‘created’
[17:39:26.740] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:26.754] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:26.754] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:26.754]   - Field: ‘node’
[17:39:26.754]   - Field: ‘label’
[17:39:26.754]   - Field: ‘local’
[17:39:26.754]   - Field: ‘owner’
[17:39:26.754]   - Field: ‘envir’
[17:39:26.754]   - Field: ‘workers’
[17:39:26.754]   - Field: ‘packages’
[17:39:26.754]   - Field: ‘gc’
[17:39:26.755]   - Field: ‘conditions’
[17:39:26.755]   - Field: ‘persistent’
[17:39:26.755]   - Field: ‘expr’
[17:39:26.755]   - Field: ‘uuid’
[17:39:26.755]   - Field: ‘seed’
[17:39:26.755]   - Field: ‘version’
[17:39:26.755]   - Field: ‘result’
[17:39:26.755]   - Field: ‘asynchronous’
[17:39:26.755]   - Field: ‘calls’
[17:39:26.755]   - Field: ‘globals’
[17:39:26.756]   - Field: ‘stdout’
[17:39:26.756]   - Field: ‘earlySignal’
[17:39:26.756]   - Field: ‘lazy’
[17:39:26.756]   - Field: ‘state’
[17:39:26.756] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:26.756] - Launch lazy future ...
[17:39:26.756] Packages needed by the future expression (n = 1): ‘future’
[17:39:26.756] Packages needed by future strategies (n = 0): <none>
[17:39:26.757] {
[17:39:26.757]     {
[17:39:26.757]         {
[17:39:26.757]             ...future.startTime <- base::Sys.time()
[17:39:26.757]             {
[17:39:26.757]                 {
[17:39:26.757]                   {
[17:39:26.757]                     {
[17:39:26.757]                       {
[17:39:26.757]                         base::local({
[17:39:26.757]                           has_future <- base::requireNamespace("future", 
[17:39:26.757]                             quietly = TRUE)
[17:39:26.757]                           if (has_future) {
[17:39:26.757]                             ns <- base::getNamespace("future")
[17:39:26.757]                             version <- ns[[".package"]][["version"]]
[17:39:26.757]                             if (is.null(version)) 
[17:39:26.757]                               version <- utils::packageVersion("future")
[17:39:26.757]                           }
[17:39:26.757]                           else {
[17:39:26.757]                             version <- NULL
[17:39:26.757]                           }
[17:39:26.757]                           if (!has_future || version < "1.8.0") {
[17:39:26.757]                             info <- base::c(r_version = base::gsub("R version ", 
[17:39:26.757]                               "", base::R.version$version.string), 
[17:39:26.757]                               platform = base::sprintf("%s (%s-bit)", 
[17:39:26.757]                                 base::R.version$platform, 8 * 
[17:39:26.757]                                   base::.Machine$sizeof.pointer), 
[17:39:26.757]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:26.757]                                 "release", "version")], collapse = " "), 
[17:39:26.757]                               hostname = base::Sys.info()[["nodename"]])
[17:39:26.757]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:39:26.757]                               info)
[17:39:26.757]                             info <- base::paste(info, collapse = "; ")
[17:39:26.757]                             if (!has_future) {
[17:39:26.757]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:26.757]                                 info)
[17:39:26.757]                             }
[17:39:26.757]                             else {
[17:39:26.757]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:26.757]                                 info, version)
[17:39:26.757]                             }
[17:39:26.757]                             base::stop(msg)
[17:39:26.757]                           }
[17:39:26.757]                         })
[17:39:26.757]                       }
[17:39:26.757]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:26.757]                       base::options(mc.cores = 1L)
[17:39:26.757]                     }
[17:39:26.757]                     base::local({
[17:39:26.757]                       for (pkg in "future") {
[17:39:26.757]                         base::loadNamespace(pkg)
[17:39:26.757]                         base::library(pkg, character.only = TRUE)
[17:39:26.757]                       }
[17:39:26.757]                     })
[17:39:26.757]                   }
[17:39:26.757]                   ...future.strategy.old <- future::plan("list")
[17:39:26.757]                   options(future.plan = NULL)
[17:39:26.757]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.757]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:26.757]                 }
[17:39:26.757]                 ...future.workdir <- getwd()
[17:39:26.757]             }
[17:39:26.757]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:26.757]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:26.757]         }
[17:39:26.757]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:26.757]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:26.757]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:26.757]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:26.757]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:26.757]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:26.757]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:26.757]             base::names(...future.oldOptions))
[17:39:26.757]     }
[17:39:26.757]     if (FALSE) {
[17:39:26.757]     }
[17:39:26.757]     else {
[17:39:26.757]         if (TRUE) {
[17:39:26.757]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:26.757]                 open = "w")
[17:39:26.757]         }
[17:39:26.757]         else {
[17:39:26.757]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:26.757]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:26.757]         }
[17:39:26.757]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:26.757]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:26.757]             base::sink(type = "output", split = FALSE)
[17:39:26.757]             base::close(...future.stdout)
[17:39:26.757]         }, add = TRUE)
[17:39:26.757]     }
[17:39:26.757]     ...future.frame <- base::sys.nframe()
[17:39:26.757]     ...future.conditions <- base::list()
[17:39:26.757]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:26.757]     if (FALSE) {
[17:39:26.757]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:26.757]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:26.757]     }
[17:39:26.757]     ...future.result <- base::tryCatch({
[17:39:26.757]         base::withCallingHandlers({
[17:39:26.757]             ...future.value <- base::withVisible(base::local({
[17:39:26.757]                 ...future.makeSendCondition <- base::local({
[17:39:26.757]                   sendCondition <- NULL
[17:39:26.757]                   function(frame = 1L) {
[17:39:26.757]                     if (is.function(sendCondition)) 
[17:39:26.757]                       return(sendCondition)
[17:39:26.757]                     ns <- getNamespace("parallel")
[17:39:26.757]                     if (exists("sendData", mode = "function", 
[17:39:26.757]                       envir = ns)) {
[17:39:26.757]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:26.757]                         envir = ns)
[17:39:26.757]                       envir <- sys.frame(frame)
[17:39:26.757]                       master <- NULL
[17:39:26.757]                       while (!identical(envir, .GlobalEnv) && 
[17:39:26.757]                         !identical(envir, emptyenv())) {
[17:39:26.757]                         if (exists("master", mode = "list", envir = envir, 
[17:39:26.757]                           inherits = FALSE)) {
[17:39:26.757]                           master <- get("master", mode = "list", 
[17:39:26.757]                             envir = envir, inherits = FALSE)
[17:39:26.757]                           if (inherits(master, c("SOCKnode", 
[17:39:26.757]                             "SOCK0node"))) {
[17:39:26.757]                             sendCondition <<- function(cond) {
[17:39:26.757]                               data <- list(type = "VALUE", value = cond, 
[17:39:26.757]                                 success = TRUE)
[17:39:26.757]                               parallel_sendData(master, data)
[17:39:26.757]                             }
[17:39:26.757]                             return(sendCondition)
[17:39:26.757]                           }
[17:39:26.757]                         }
[17:39:26.757]                         frame <- frame + 1L
[17:39:26.757]                         envir <- sys.frame(frame)
[17:39:26.757]                       }
[17:39:26.757]                     }
[17:39:26.757]                     sendCondition <<- function(cond) NULL
[17:39:26.757]                   }
[17:39:26.757]                 })
[17:39:26.757]                 withCallingHandlers({
[17:39:26.757]                   {
[17:39:26.757]                     b <- 1
[17:39:26.757]                     c %<-% 2
[17:39:26.757]                     d <- 3
[17:39:26.757]                     4 %->% e
[17:39:26.757]                     b + c + d + e
[17:39:26.757]                   }
[17:39:26.757]                 }, immediateCondition = function(cond) {
[17:39:26.757]                   sendCondition <- ...future.makeSendCondition()
[17:39:26.757]                   sendCondition(cond)
[17:39:26.757]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.757]                   {
[17:39:26.757]                     inherits <- base::inherits
[17:39:26.757]                     invokeRestart <- base::invokeRestart
[17:39:26.757]                     is.null <- base::is.null
[17:39:26.757]                     muffled <- FALSE
[17:39:26.757]                     if (inherits(cond, "message")) {
[17:39:26.757]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:26.757]                       if (muffled) 
[17:39:26.757]                         invokeRestart("muffleMessage")
[17:39:26.757]                     }
[17:39:26.757]                     else if (inherits(cond, "warning")) {
[17:39:26.757]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:26.757]                       if (muffled) 
[17:39:26.757]                         invokeRestart("muffleWarning")
[17:39:26.757]                     }
[17:39:26.757]                     else if (inherits(cond, "condition")) {
[17:39:26.757]                       if (!is.null(pattern)) {
[17:39:26.757]                         computeRestarts <- base::computeRestarts
[17:39:26.757]                         grepl <- base::grepl
[17:39:26.757]                         restarts <- computeRestarts(cond)
[17:39:26.757]                         for (restart in restarts) {
[17:39:26.757]                           name <- restart$name
[17:39:26.757]                           if (is.null(name)) 
[17:39:26.757]                             next
[17:39:26.757]                           if (!grepl(pattern, name)) 
[17:39:26.757]                             next
[17:39:26.757]                           invokeRestart(restart)
[17:39:26.757]                           muffled <- TRUE
[17:39:26.757]                           break
[17:39:26.757]                         }
[17:39:26.757]                       }
[17:39:26.757]                     }
[17:39:26.757]                     invisible(muffled)
[17:39:26.757]                   }
[17:39:26.757]                   muffleCondition(cond)
[17:39:26.757]                 })
[17:39:26.757]             }))
[17:39:26.757]             future::FutureResult(value = ...future.value$value, 
[17:39:26.757]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.757]                   ...future.rng), globalenv = if (FALSE) 
[17:39:26.757]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:26.757]                     ...future.globalenv.names))
[17:39:26.757]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:26.757]         }, condition = base::local({
[17:39:26.757]             c <- base::c
[17:39:26.757]             inherits <- base::inherits
[17:39:26.757]             invokeRestart <- base::invokeRestart
[17:39:26.757]             length <- base::length
[17:39:26.757]             list <- base::list
[17:39:26.757]             seq.int <- base::seq.int
[17:39:26.757]             signalCondition <- base::signalCondition
[17:39:26.757]             sys.calls <- base::sys.calls
[17:39:26.757]             `[[` <- base::`[[`
[17:39:26.757]             `+` <- base::`+`
[17:39:26.757]             `<<-` <- base::`<<-`
[17:39:26.757]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:26.757]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:26.757]                   3L)]
[17:39:26.757]             }
[17:39:26.757]             function(cond) {
[17:39:26.757]                 is_error <- inherits(cond, "error")
[17:39:26.757]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:26.757]                   NULL)
[17:39:26.757]                 if (is_error) {
[17:39:26.757]                   sessionInformation <- function() {
[17:39:26.757]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:26.757]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:26.757]                       search = base::search(), system = base::Sys.info())
[17:39:26.757]                   }
[17:39:26.757]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.757]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:26.757]                     cond$call), session = sessionInformation(), 
[17:39:26.757]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:26.757]                   signalCondition(cond)
[17:39:26.757]                 }
[17:39:26.757]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:26.757]                 "immediateCondition"))) {
[17:39:26.757]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:26.757]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.757]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:26.757]                   if (TRUE && !signal) {
[17:39:26.757]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.757]                     {
[17:39:26.757]                       inherits <- base::inherits
[17:39:26.757]                       invokeRestart <- base::invokeRestart
[17:39:26.757]                       is.null <- base::is.null
[17:39:26.757]                       muffled <- FALSE
[17:39:26.757]                       if (inherits(cond, "message")) {
[17:39:26.757]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.757]                         if (muffled) 
[17:39:26.757]                           invokeRestart("muffleMessage")
[17:39:26.757]                       }
[17:39:26.757]                       else if (inherits(cond, "warning")) {
[17:39:26.757]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.757]                         if (muffled) 
[17:39:26.757]                           invokeRestart("muffleWarning")
[17:39:26.757]                       }
[17:39:26.757]                       else if (inherits(cond, "condition")) {
[17:39:26.757]                         if (!is.null(pattern)) {
[17:39:26.757]                           computeRestarts <- base::computeRestarts
[17:39:26.757]                           grepl <- base::grepl
[17:39:26.757]                           restarts <- computeRestarts(cond)
[17:39:26.757]                           for (restart in restarts) {
[17:39:26.757]                             name <- restart$name
[17:39:26.757]                             if (is.null(name)) 
[17:39:26.757]                               next
[17:39:26.757]                             if (!grepl(pattern, name)) 
[17:39:26.757]                               next
[17:39:26.757]                             invokeRestart(restart)
[17:39:26.757]                             muffled <- TRUE
[17:39:26.757]                             break
[17:39:26.757]                           }
[17:39:26.757]                         }
[17:39:26.757]                       }
[17:39:26.757]                       invisible(muffled)
[17:39:26.757]                     }
[17:39:26.757]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.757]                   }
[17:39:26.757]                 }
[17:39:26.757]                 else {
[17:39:26.757]                   if (TRUE) {
[17:39:26.757]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.757]                     {
[17:39:26.757]                       inherits <- base::inherits
[17:39:26.757]                       invokeRestart <- base::invokeRestart
[17:39:26.757]                       is.null <- base::is.null
[17:39:26.757]                       muffled <- FALSE
[17:39:26.757]                       if (inherits(cond, "message")) {
[17:39:26.757]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.757]                         if (muffled) 
[17:39:26.757]                           invokeRestart("muffleMessage")
[17:39:26.757]                       }
[17:39:26.757]                       else if (inherits(cond, "warning")) {
[17:39:26.757]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.757]                         if (muffled) 
[17:39:26.757]                           invokeRestart("muffleWarning")
[17:39:26.757]                       }
[17:39:26.757]                       else if (inherits(cond, "condition")) {
[17:39:26.757]                         if (!is.null(pattern)) {
[17:39:26.757]                           computeRestarts <- base::computeRestarts
[17:39:26.757]                           grepl <- base::grepl
[17:39:26.757]                           restarts <- computeRestarts(cond)
[17:39:26.757]                           for (restart in restarts) {
[17:39:26.757]                             name <- restart$name
[17:39:26.757]                             if (is.null(name)) 
[17:39:26.757]                               next
[17:39:26.757]                             if (!grepl(pattern, name)) 
[17:39:26.757]                               next
[17:39:26.757]                             invokeRestart(restart)
[17:39:26.757]                             muffled <- TRUE
[17:39:26.757]                             break
[17:39:26.757]                           }
[17:39:26.757]                         }
[17:39:26.757]                       }
[17:39:26.757]                       invisible(muffled)
[17:39:26.757]                     }
[17:39:26.757]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.757]                   }
[17:39:26.757]                 }
[17:39:26.757]             }
[17:39:26.757]         }))
[17:39:26.757]     }, error = function(ex) {
[17:39:26.757]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:26.757]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.757]                 ...future.rng), started = ...future.startTime, 
[17:39:26.757]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:26.757]             version = "1.8"), class = "FutureResult")
[17:39:26.757]     }, finally = {
[17:39:26.757]         if (!identical(...future.workdir, getwd())) 
[17:39:26.757]             setwd(...future.workdir)
[17:39:26.757]         {
[17:39:26.757]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:26.757]                 ...future.oldOptions$nwarnings <- NULL
[17:39:26.757]             }
[17:39:26.757]             base::options(...future.oldOptions)
[17:39:26.757]             if (.Platform$OS.type == "windows") {
[17:39:26.757]                 old_names <- names(...future.oldEnvVars)
[17:39:26.757]                 envs <- base::Sys.getenv()
[17:39:26.757]                 names <- names(envs)
[17:39:26.757]                 common <- intersect(names, old_names)
[17:39:26.757]                 added <- setdiff(names, old_names)
[17:39:26.757]                 removed <- setdiff(old_names, names)
[17:39:26.757]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:26.757]                   envs[common]]
[17:39:26.757]                 NAMES <- toupper(changed)
[17:39:26.757]                 args <- list()
[17:39:26.757]                 for (kk in seq_along(NAMES)) {
[17:39:26.757]                   name <- changed[[kk]]
[17:39:26.757]                   NAME <- NAMES[[kk]]
[17:39:26.757]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.757]                     next
[17:39:26.757]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.757]                 }
[17:39:26.757]                 NAMES <- toupper(added)
[17:39:26.757]                 for (kk in seq_along(NAMES)) {
[17:39:26.757]                   name <- added[[kk]]
[17:39:26.757]                   NAME <- NAMES[[kk]]
[17:39:26.757]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.757]                     next
[17:39:26.757]                   args[[name]] <- ""
[17:39:26.757]                 }
[17:39:26.757]                 NAMES <- toupper(removed)
[17:39:26.757]                 for (kk in seq_along(NAMES)) {
[17:39:26.757]                   name <- removed[[kk]]
[17:39:26.757]                   NAME <- NAMES[[kk]]
[17:39:26.757]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.757]                     next
[17:39:26.757]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.757]                 }
[17:39:26.757]                 if (length(args) > 0) 
[17:39:26.757]                   base::do.call(base::Sys.setenv, args = args)
[17:39:26.757]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:26.757]             }
[17:39:26.757]             else {
[17:39:26.757]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:26.757]             }
[17:39:26.757]             {
[17:39:26.757]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:26.757]                   0L) {
[17:39:26.757]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:26.757]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:26.757]                   base::options(opts)
[17:39:26.757]                 }
[17:39:26.757]                 {
[17:39:26.757]                   {
[17:39:26.757]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:26.757]                     NULL
[17:39:26.757]                   }
[17:39:26.757]                   options(future.plan = NULL)
[17:39:26.757]                   if (is.na(NA_character_)) 
[17:39:26.757]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.757]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:26.757]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:26.757]                     .init = FALSE)
[17:39:26.757]                 }
[17:39:26.757]             }
[17:39:26.757]         }
[17:39:26.757]     })
[17:39:26.757]     if (TRUE) {
[17:39:26.757]         base::sink(type = "output", split = FALSE)
[17:39:26.757]         if (TRUE) {
[17:39:26.757]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:26.757]         }
[17:39:26.757]         else {
[17:39:26.757]             ...future.result["stdout"] <- base::list(NULL)
[17:39:26.757]         }
[17:39:26.757]         base::close(...future.stdout)
[17:39:26.757]         ...future.stdout <- NULL
[17:39:26.757]     }
[17:39:26.757]     ...future.result$conditions <- ...future.conditions
[17:39:26.757]     ...future.result$finished <- base::Sys.time()
[17:39:26.757]     ...future.result
[17:39:26.757] }
[17:39:26.760] MultisessionFuture started
[17:39:26.760] - Launch lazy future ... done
[17:39:26.760] run() for ‘MultisessionFuture’ ... done
[17:39:26.760] result() for ClusterFuture ...
[17:39:26.760] receiveMessageFromWorker() for ClusterFuture ...
[17:39:26.760] - Validating connection of MultisessionFuture
[17:39:26.815] - received message: FutureResult
[17:39:26.815] - Received FutureResult
[17:39:26.815] - Erased future from FutureRegistry
[17:39:26.815] result() for ClusterFuture ...
[17:39:26.815] - result already collected: FutureResult
[17:39:26.815] result() for ClusterFuture ... done
[17:39:26.816] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:26.816] result() for ClusterFuture ... done
[17:39:26.816] result() for ClusterFuture ...
[17:39:26.816] - result already collected: FutureResult
[17:39:26.816] result() for ClusterFuture ... done
a = 10
[17:39:26.816] getGlobalsAndPackages() ...
[17:39:26.816] Searching for globals...
[17:39:26.817] - globals found: [3] ‘{’, ‘+’, ‘a’
[17:39:26.817] Searching for globals ... DONE
[17:39:26.818] Resolving globals: FALSE
[17:39:26.818] The total size of the 1 globals is 56 bytes (56 bytes)
[17:39:26.818] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:39:26.818] - globals: [1] ‘a’
[17:39:26.818] 
[17:39:26.819] getGlobalsAndPackages() ... DONE
[17:39:26.819] run() for ‘Future’ ...
[17:39:26.819] - state: ‘created’
[17:39:26.819] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:26.833] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:26.833] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:26.833]   - Field: ‘node’
[17:39:26.833]   - Field: ‘label’
[17:39:26.833]   - Field: ‘local’
[17:39:26.834]   - Field: ‘owner’
[17:39:26.834]   - Field: ‘envir’
[17:39:26.834]   - Field: ‘workers’
[17:39:26.834]   - Field: ‘packages’
[17:39:26.834]   - Field: ‘gc’
[17:39:26.834]   - Field: ‘conditions’
[17:39:26.834]   - Field: ‘persistent’
[17:39:26.834]   - Field: ‘expr’
[17:39:26.834]   - Field: ‘uuid’
[17:39:26.834]   - Field: ‘seed’
[17:39:26.834]   - Field: ‘version’
[17:39:26.835]   - Field: ‘result’
[17:39:26.835]   - Field: ‘asynchronous’
[17:39:26.835]   - Field: ‘calls’
[17:39:26.835]   - Field: ‘globals’
[17:39:26.835]   - Field: ‘stdout’
[17:39:26.835]   - Field: ‘earlySignal’
[17:39:26.835]   - Field: ‘lazy’
[17:39:26.835]   - Field: ‘state’
[17:39:26.835] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:26.835] - Launch lazy future ...
[17:39:26.836] Packages needed by the future expression (n = 0): <none>
[17:39:26.836] Packages needed by future strategies (n = 0): <none>
[17:39:26.836] {
[17:39:26.836]     {
[17:39:26.836]         {
[17:39:26.836]             ...future.startTime <- base::Sys.time()
[17:39:26.836]             {
[17:39:26.836]                 {
[17:39:26.836]                   {
[17:39:26.836]                     {
[17:39:26.836]                       base::local({
[17:39:26.836]                         has_future <- base::requireNamespace("future", 
[17:39:26.836]                           quietly = TRUE)
[17:39:26.836]                         if (has_future) {
[17:39:26.836]                           ns <- base::getNamespace("future")
[17:39:26.836]                           version <- ns[[".package"]][["version"]]
[17:39:26.836]                           if (is.null(version)) 
[17:39:26.836]                             version <- utils::packageVersion("future")
[17:39:26.836]                         }
[17:39:26.836]                         else {
[17:39:26.836]                           version <- NULL
[17:39:26.836]                         }
[17:39:26.836]                         if (!has_future || version < "1.8.0") {
[17:39:26.836]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:26.836]                             "", base::R.version$version.string), 
[17:39:26.836]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:26.836]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:26.836]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:26.836]                               "release", "version")], collapse = " "), 
[17:39:26.836]                             hostname = base::Sys.info()[["nodename"]])
[17:39:26.836]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:26.836]                             info)
[17:39:26.836]                           info <- base::paste(info, collapse = "; ")
[17:39:26.836]                           if (!has_future) {
[17:39:26.836]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:26.836]                               info)
[17:39:26.836]                           }
[17:39:26.836]                           else {
[17:39:26.836]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:26.836]                               info, version)
[17:39:26.836]                           }
[17:39:26.836]                           base::stop(msg)
[17:39:26.836]                         }
[17:39:26.836]                       })
[17:39:26.836]                     }
[17:39:26.836]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:26.836]                     base::options(mc.cores = 1L)
[17:39:26.836]                   }
[17:39:26.836]                   ...future.strategy.old <- future::plan("list")
[17:39:26.836]                   options(future.plan = NULL)
[17:39:26.836]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.836]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:26.836]                 }
[17:39:26.836]                 ...future.workdir <- getwd()
[17:39:26.836]             }
[17:39:26.836]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:26.836]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:26.836]         }
[17:39:26.836]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:26.836]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:26.836]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:26.836]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:26.836]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:26.836]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:26.836]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:26.836]             base::names(...future.oldOptions))
[17:39:26.836]     }
[17:39:26.836]     if (FALSE) {
[17:39:26.836]     }
[17:39:26.836]     else {
[17:39:26.836]         if (TRUE) {
[17:39:26.836]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:26.836]                 open = "w")
[17:39:26.836]         }
[17:39:26.836]         else {
[17:39:26.836]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:26.836]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:26.836]         }
[17:39:26.836]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:26.836]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:26.836]             base::sink(type = "output", split = FALSE)
[17:39:26.836]             base::close(...future.stdout)
[17:39:26.836]         }, add = TRUE)
[17:39:26.836]     }
[17:39:26.836]     ...future.frame <- base::sys.nframe()
[17:39:26.836]     ...future.conditions <- base::list()
[17:39:26.836]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:26.836]     if (FALSE) {
[17:39:26.836]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:26.836]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:26.836]     }
[17:39:26.836]     ...future.result <- base::tryCatch({
[17:39:26.836]         base::withCallingHandlers({
[17:39:26.836]             ...future.value <- base::withVisible(base::local({
[17:39:26.836]                 ...future.makeSendCondition <- base::local({
[17:39:26.836]                   sendCondition <- NULL
[17:39:26.836]                   function(frame = 1L) {
[17:39:26.836]                     if (is.function(sendCondition)) 
[17:39:26.836]                       return(sendCondition)
[17:39:26.836]                     ns <- getNamespace("parallel")
[17:39:26.836]                     if (exists("sendData", mode = "function", 
[17:39:26.836]                       envir = ns)) {
[17:39:26.836]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:26.836]                         envir = ns)
[17:39:26.836]                       envir <- sys.frame(frame)
[17:39:26.836]                       master <- NULL
[17:39:26.836]                       while (!identical(envir, .GlobalEnv) && 
[17:39:26.836]                         !identical(envir, emptyenv())) {
[17:39:26.836]                         if (exists("master", mode = "list", envir = envir, 
[17:39:26.836]                           inherits = FALSE)) {
[17:39:26.836]                           master <- get("master", mode = "list", 
[17:39:26.836]                             envir = envir, inherits = FALSE)
[17:39:26.836]                           if (inherits(master, c("SOCKnode", 
[17:39:26.836]                             "SOCK0node"))) {
[17:39:26.836]                             sendCondition <<- function(cond) {
[17:39:26.836]                               data <- list(type = "VALUE", value = cond, 
[17:39:26.836]                                 success = TRUE)
[17:39:26.836]                               parallel_sendData(master, data)
[17:39:26.836]                             }
[17:39:26.836]                             return(sendCondition)
[17:39:26.836]                           }
[17:39:26.836]                         }
[17:39:26.836]                         frame <- frame + 1L
[17:39:26.836]                         envir <- sys.frame(frame)
[17:39:26.836]                       }
[17:39:26.836]                     }
[17:39:26.836]                     sendCondition <<- function(cond) NULL
[17:39:26.836]                   }
[17:39:26.836]                 })
[17:39:26.836]                 withCallingHandlers({
[17:39:26.836]                   {
[17:39:26.836]                     a + 1
[17:39:26.836]                   }
[17:39:26.836]                 }, immediateCondition = function(cond) {
[17:39:26.836]                   sendCondition <- ...future.makeSendCondition()
[17:39:26.836]                   sendCondition(cond)
[17:39:26.836]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.836]                   {
[17:39:26.836]                     inherits <- base::inherits
[17:39:26.836]                     invokeRestart <- base::invokeRestart
[17:39:26.836]                     is.null <- base::is.null
[17:39:26.836]                     muffled <- FALSE
[17:39:26.836]                     if (inherits(cond, "message")) {
[17:39:26.836]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:26.836]                       if (muffled) 
[17:39:26.836]                         invokeRestart("muffleMessage")
[17:39:26.836]                     }
[17:39:26.836]                     else if (inherits(cond, "warning")) {
[17:39:26.836]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:26.836]                       if (muffled) 
[17:39:26.836]                         invokeRestart("muffleWarning")
[17:39:26.836]                     }
[17:39:26.836]                     else if (inherits(cond, "condition")) {
[17:39:26.836]                       if (!is.null(pattern)) {
[17:39:26.836]                         computeRestarts <- base::computeRestarts
[17:39:26.836]                         grepl <- base::grepl
[17:39:26.836]                         restarts <- computeRestarts(cond)
[17:39:26.836]                         for (restart in restarts) {
[17:39:26.836]                           name <- restart$name
[17:39:26.836]                           if (is.null(name)) 
[17:39:26.836]                             next
[17:39:26.836]                           if (!grepl(pattern, name)) 
[17:39:26.836]                             next
[17:39:26.836]                           invokeRestart(restart)
[17:39:26.836]                           muffled <- TRUE
[17:39:26.836]                           break
[17:39:26.836]                         }
[17:39:26.836]                       }
[17:39:26.836]                     }
[17:39:26.836]                     invisible(muffled)
[17:39:26.836]                   }
[17:39:26.836]                   muffleCondition(cond)
[17:39:26.836]                 })
[17:39:26.836]             }))
[17:39:26.836]             future::FutureResult(value = ...future.value$value, 
[17:39:26.836]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.836]                   ...future.rng), globalenv = if (FALSE) 
[17:39:26.836]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:26.836]                     ...future.globalenv.names))
[17:39:26.836]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:26.836]         }, condition = base::local({
[17:39:26.836]             c <- base::c
[17:39:26.836]             inherits <- base::inherits
[17:39:26.836]             invokeRestart <- base::invokeRestart
[17:39:26.836]             length <- base::length
[17:39:26.836]             list <- base::list
[17:39:26.836]             seq.int <- base::seq.int
[17:39:26.836]             signalCondition <- base::signalCondition
[17:39:26.836]             sys.calls <- base::sys.calls
[17:39:26.836]             `[[` <- base::`[[`
[17:39:26.836]             `+` <- base::`+`
[17:39:26.836]             `<<-` <- base::`<<-`
[17:39:26.836]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:26.836]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:26.836]                   3L)]
[17:39:26.836]             }
[17:39:26.836]             function(cond) {
[17:39:26.836]                 is_error <- inherits(cond, "error")
[17:39:26.836]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:26.836]                   NULL)
[17:39:26.836]                 if (is_error) {
[17:39:26.836]                   sessionInformation <- function() {
[17:39:26.836]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:26.836]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:26.836]                       search = base::search(), system = base::Sys.info())
[17:39:26.836]                   }
[17:39:26.836]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.836]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:26.836]                     cond$call), session = sessionInformation(), 
[17:39:26.836]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:26.836]                   signalCondition(cond)
[17:39:26.836]                 }
[17:39:26.836]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:26.836]                 "immediateCondition"))) {
[17:39:26.836]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:26.836]                   ...future.conditions[[length(...future.conditions) + 
[17:39:26.836]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:26.836]                   if (TRUE && !signal) {
[17:39:26.836]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.836]                     {
[17:39:26.836]                       inherits <- base::inherits
[17:39:26.836]                       invokeRestart <- base::invokeRestart
[17:39:26.836]                       is.null <- base::is.null
[17:39:26.836]                       muffled <- FALSE
[17:39:26.836]                       if (inherits(cond, "message")) {
[17:39:26.836]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.836]                         if (muffled) 
[17:39:26.836]                           invokeRestart("muffleMessage")
[17:39:26.836]                       }
[17:39:26.836]                       else if (inherits(cond, "warning")) {
[17:39:26.836]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.836]                         if (muffled) 
[17:39:26.836]                           invokeRestart("muffleWarning")
[17:39:26.836]                       }
[17:39:26.836]                       else if (inherits(cond, "condition")) {
[17:39:26.836]                         if (!is.null(pattern)) {
[17:39:26.836]                           computeRestarts <- base::computeRestarts
[17:39:26.836]                           grepl <- base::grepl
[17:39:26.836]                           restarts <- computeRestarts(cond)
[17:39:26.836]                           for (restart in restarts) {
[17:39:26.836]                             name <- restart$name
[17:39:26.836]                             if (is.null(name)) 
[17:39:26.836]                               next
[17:39:26.836]                             if (!grepl(pattern, name)) 
[17:39:26.836]                               next
[17:39:26.836]                             invokeRestart(restart)
[17:39:26.836]                             muffled <- TRUE
[17:39:26.836]                             break
[17:39:26.836]                           }
[17:39:26.836]                         }
[17:39:26.836]                       }
[17:39:26.836]                       invisible(muffled)
[17:39:26.836]                     }
[17:39:26.836]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.836]                   }
[17:39:26.836]                 }
[17:39:26.836]                 else {
[17:39:26.836]                   if (TRUE) {
[17:39:26.836]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:26.836]                     {
[17:39:26.836]                       inherits <- base::inherits
[17:39:26.836]                       invokeRestart <- base::invokeRestart
[17:39:26.836]                       is.null <- base::is.null
[17:39:26.836]                       muffled <- FALSE
[17:39:26.836]                       if (inherits(cond, "message")) {
[17:39:26.836]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:26.836]                         if (muffled) 
[17:39:26.836]                           invokeRestart("muffleMessage")
[17:39:26.836]                       }
[17:39:26.836]                       else if (inherits(cond, "warning")) {
[17:39:26.836]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:26.836]                         if (muffled) 
[17:39:26.836]                           invokeRestart("muffleWarning")
[17:39:26.836]                       }
[17:39:26.836]                       else if (inherits(cond, "condition")) {
[17:39:26.836]                         if (!is.null(pattern)) {
[17:39:26.836]                           computeRestarts <- base::computeRestarts
[17:39:26.836]                           grepl <- base::grepl
[17:39:26.836]                           restarts <- computeRestarts(cond)
[17:39:26.836]                           for (restart in restarts) {
[17:39:26.836]                             name <- restart$name
[17:39:26.836]                             if (is.null(name)) 
[17:39:26.836]                               next
[17:39:26.836]                             if (!grepl(pattern, name)) 
[17:39:26.836]                               next
[17:39:26.836]                             invokeRestart(restart)
[17:39:26.836]                             muffled <- TRUE
[17:39:26.836]                             break
[17:39:26.836]                           }
[17:39:26.836]                         }
[17:39:26.836]                       }
[17:39:26.836]                       invisible(muffled)
[17:39:26.836]                     }
[17:39:26.836]                     muffleCondition(cond, pattern = "^muffle")
[17:39:26.836]                   }
[17:39:26.836]                 }
[17:39:26.836]             }
[17:39:26.836]         }))
[17:39:26.836]     }, error = function(ex) {
[17:39:26.836]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:26.836]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:26.836]                 ...future.rng), started = ...future.startTime, 
[17:39:26.836]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:26.836]             version = "1.8"), class = "FutureResult")
[17:39:26.836]     }, finally = {
[17:39:26.836]         if (!identical(...future.workdir, getwd())) 
[17:39:26.836]             setwd(...future.workdir)
[17:39:26.836]         {
[17:39:26.836]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:26.836]                 ...future.oldOptions$nwarnings <- NULL
[17:39:26.836]             }
[17:39:26.836]             base::options(...future.oldOptions)
[17:39:26.836]             if (.Platform$OS.type == "windows") {
[17:39:26.836]                 old_names <- names(...future.oldEnvVars)
[17:39:26.836]                 envs <- base::Sys.getenv()
[17:39:26.836]                 names <- names(envs)
[17:39:26.836]                 common <- intersect(names, old_names)
[17:39:26.836]                 added <- setdiff(names, old_names)
[17:39:26.836]                 removed <- setdiff(old_names, names)
[17:39:26.836]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:26.836]                   envs[common]]
[17:39:26.836]                 NAMES <- toupper(changed)
[17:39:26.836]                 args <- list()
[17:39:26.836]                 for (kk in seq_along(NAMES)) {
[17:39:26.836]                   name <- changed[[kk]]
[17:39:26.836]                   NAME <- NAMES[[kk]]
[17:39:26.836]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.836]                     next
[17:39:26.836]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.836]                 }
[17:39:26.836]                 NAMES <- toupper(added)
[17:39:26.836]                 for (kk in seq_along(NAMES)) {
[17:39:26.836]                   name <- added[[kk]]
[17:39:26.836]                   NAME <- NAMES[[kk]]
[17:39:26.836]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.836]                     next
[17:39:26.836]                   args[[name]] <- ""
[17:39:26.836]                 }
[17:39:26.836]                 NAMES <- toupper(removed)
[17:39:26.836]                 for (kk in seq_along(NAMES)) {
[17:39:26.836]                   name <- removed[[kk]]
[17:39:26.836]                   NAME <- NAMES[[kk]]
[17:39:26.836]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:26.836]                     next
[17:39:26.836]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:26.836]                 }
[17:39:26.836]                 if (length(args) > 0) 
[17:39:26.836]                   base::do.call(base::Sys.setenv, args = args)
[17:39:26.836]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:26.836]             }
[17:39:26.836]             else {
[17:39:26.836]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:26.836]             }
[17:39:26.836]             {
[17:39:26.836]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:26.836]                   0L) {
[17:39:26.836]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:26.836]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:26.836]                   base::options(opts)
[17:39:26.836]                 }
[17:39:26.836]                 {
[17:39:26.836]                   {
[17:39:26.836]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:26.836]                     NULL
[17:39:26.836]                   }
[17:39:26.836]                   options(future.plan = NULL)
[17:39:26.836]                   if (is.na(NA_character_)) 
[17:39:26.836]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:26.836]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:26.836]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:26.836]                     .init = FALSE)
[17:39:26.836]                 }
[17:39:26.836]             }
[17:39:26.836]         }
[17:39:26.836]     })
[17:39:26.836]     if (TRUE) {
[17:39:26.836]         base::sink(type = "output", split = FALSE)
[17:39:26.836]         if (TRUE) {
[17:39:26.836]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:26.836]         }
[17:39:26.836]         else {
[17:39:26.836]             ...future.result["stdout"] <- base::list(NULL)
[17:39:26.836]         }
[17:39:26.836]         base::close(...future.stdout)
[17:39:26.836]         ...future.stdout <- NULL
[17:39:26.836]     }
[17:39:26.836]     ...future.result$conditions <- ...future.conditions
[17:39:26.836]     ...future.result$finished <- base::Sys.time()
[17:39:26.836]     ...future.result
[17:39:26.836] }
[17:39:26.839] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:39:26.839] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:39:26.839] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:39:26.839] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:39:26.840] MultisessionFuture started
[17:39:26.840] - Launch lazy future ... done
[17:39:26.840] run() for ‘MultisessionFuture’ ... done
[17:39:26.841] result() for ClusterFuture ...
[17:39:26.841] receiveMessageFromWorker() for ClusterFuture ...
[17:39:26.841] - Validating connection of MultisessionFuture
[17:39:26.842] - received message: FutureResult
[17:39:26.842] - Received FutureResult
[17:39:26.842] - Erased future from FutureRegistry
[17:39:26.842] result() for ClusterFuture ...
[17:39:26.842] - result already collected: FutureResult
[17:39:26.842] result() for ClusterFuture ... done
[17:39:26.843] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:26.843] result() for ClusterFuture ... done
[17:39:26.843] result() for ClusterFuture ...
[17:39:26.843] - result already collected: FutureResult
[17:39:26.843] result() for ClusterFuture ... done
b = 11
*** %<-% with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** %<-% ... DONE")
*** %<-% ... DONE
> 
> source("incl/end.R")
[17:39:26.844] plan(): Setting new future strategy stack:
[17:39:26.844] List of future strategies:
[17:39:26.844] 1. FutureStrategy:
[17:39:26.844]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:26.844]    - tweaked: FALSE
[17:39:26.844]    - call: future::plan(oplan)
[17:39:26.845] plan(): nbrOfWorkers() = 1
> 
