
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:31:03.472] plan(): Setting new future strategy stack:
[09:31:03.472] List of future strategies:
[09:31:03.472] 1. sequential:
[09:31:03.472]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.472]    - tweaked: FALSE
[09:31:03.472]    - call: future::plan("sequential")
[09:31:03.483] plan(): nbrOfWorkers() = 1
> 
> message("*** %<-% ...")
*** %<-% ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** %%<-%% with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     rm(list = intersect(c("x", "y"), ls()))
+ 
+     message("** Future evaluation without globals")
+     v1 %<-% { x <- 1 }
+     stopifnot(!exists("x", inherits = FALSE), identical(v1, 1))
+ 
+     message("** Future evaluation with globals")
+     a <- 2
+     v2 %<-% { x <- a }
+     stopifnot(!exists("x", inherits = FALSE), identical(v2, a))
+ 
+     message("** Future evaluation with errors")
+     v3 %<-% {
+       x <- 3
+       stop("Woops!")
+       x
+     }
+     stopifnot(!exists("x", inherits = FALSE))
+     res <- tryCatch(identical(v3, 3), error = identity)
+     stopifnot(inherits(res, "error"))
+ 
+ 
+     y <- listenv::listenv()
+     for (ii in 1:3) {
+       y[[ii]] %<-% {
+         if (ii %% 2 == 0) stop("Woops!")
+         ii
+       }
+     }
+     res <- tryCatch(as.list(y), error = identity)
+     stopifnot(inherits(res, "error"))
+     z <- y[c(1, 3)]
+     z <- unlist(z)
+     stopifnot(all(z == c(1, 3)))
+     res <- tryCatch(y[[2]], error = identity)
+     stopifnot(inherits(res, "error"))
+     res <- tryCatch(y[1:2], error = identity)
+     stopifnot(inherits(res, "error"))
+ 
+ 
+     message("** Future evaluation with a poor-man's \"progress bar\"")
+     v4 %<-% {
+       cat("Processing: ")
+       for (ii in 1:10) { cat(".") }
+       cat(" [100%]\n")
+       4
+     }
+ 
+ 
+     message("** Collecting results")
+     printf("v1 = %s\n", v1)
+     stopifnot(v1 == 1)
+ 
+     printf("v2 = %s\n", v2)
+     stopifnot(v2 == a)
+ 
+     stopifnot(tryCatch({
+       printf("v3 = %s\n", v3)
+     }, error = function(ex) {
+       printf("v3: <%s> (as expect)\n", class(ex)[1])
+       TRUE
+     }))
+ 
+     printf("v4 = %s\n", v4)
+     #stopifnot(v4 == 4)
+ 
+ 
+     message("** Left-to-right and right-to-left future assignments")
+     c %<-% 1
+     printf("c = %s\n", c)
+     1 %->% d
+     printf("d = %s\n", d)
+     stopifnot(d == c)
+ 
+ 
+ 
+     message("** Nested future assignments")
+     a %<-% {
+       b <- 1
+       c %<-% 2
+       3 -> d
+       4 %->% e
+       b + c + d + e
+     }
+     printf("a = %s\n", a)
+     stopifnot(a == 10)
+ 
+     { a + 1 } %->% b
+     printf("b = %s\n", b)
+     stopifnot(b == a + 1)
+ 
+     message(sprintf("*** %%<-%% with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** %<-% with ‘sequential’ futures ...
[09:31:03.540] plan(): Setting new future strategy stack:
[09:31:03.540] List of future strategies:
[09:31:03.540] 1. sequential:
[09:31:03.540]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.540]    - tweaked: FALSE
[09:31:03.540]    - call: plan(strategy)
[09:31:03.552] plan(): nbrOfWorkers() = 1
** Future evaluation without globals
[09:31:03.554] getGlobalsAndPackages() ...
[09:31:03.554] Searching for globals...
[09:31:03.558] - globals found: [2] ‘{’, ‘<-’
[09:31:03.558] Searching for globals ... DONE
[09:31:03.558] Resolving globals: FALSE
[09:31:03.559] 
[09:31:03.559] 
[09:31:03.559] getGlobalsAndPackages() ... DONE
[09:31:03.560] run() for ‘Future’ ...
[09:31:03.560] - state: ‘created’
[09:31:03.560] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.560] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.561] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.561]   - Field: ‘label’
[09:31:03.561]   - Field: ‘local’
[09:31:03.561]   - Field: ‘owner’
[09:31:03.561]   - Field: ‘envir’
[09:31:03.561]   - Field: ‘packages’
[09:31:03.561]   - Field: ‘gc’
[09:31:03.561]   - Field: ‘conditions’
[09:31:03.561]   - Field: ‘expr’
[09:31:03.561]   - Field: ‘uuid’
[09:31:03.561]   - Field: ‘seed’
[09:31:03.562]   - Field: ‘version’
[09:31:03.562]   - Field: ‘result’
[09:31:03.562]   - Field: ‘asynchronous’
[09:31:03.562]   - Field: ‘calls’
[09:31:03.562]   - Field: ‘globals’
[09:31:03.562]   - Field: ‘stdout’
[09:31:03.562]   - Field: ‘earlySignal’
[09:31:03.562]   - Field: ‘lazy’
[09:31:03.562]   - Field: ‘state’
[09:31:03.562] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.562] - Launch lazy future ...
[09:31:03.563] Packages needed by the future expression (n = 0): <none>
[09:31:03.563] Packages needed by future strategies (n = 0): <none>
[09:31:03.564] {
[09:31:03.564]     {
[09:31:03.564]         {
[09:31:03.564]             ...future.startTime <- base::Sys.time()
[09:31:03.564]             {
[09:31:03.564]                 {
[09:31:03.564]                   {
[09:31:03.564]                     base::local({
[09:31:03.564]                       has_future <- base::requireNamespace("future", 
[09:31:03.564]                         quietly = TRUE)
[09:31:03.564]                       if (has_future) {
[09:31:03.564]                         ns <- base::getNamespace("future")
[09:31:03.564]                         version <- ns[[".package"]][["version"]]
[09:31:03.564]                         if (is.null(version)) 
[09:31:03.564]                           version <- utils::packageVersion("future")
[09:31:03.564]                       }
[09:31:03.564]                       else {
[09:31:03.564]                         version <- NULL
[09:31:03.564]                       }
[09:31:03.564]                       if (!has_future || version < "1.8.0") {
[09:31:03.564]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.564]                           "", base::R.version$version.string), 
[09:31:03.564]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.564]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.564]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.564]                             "release", "version")], collapse = " "), 
[09:31:03.564]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.564]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.564]                           info)
[09:31:03.564]                         info <- base::paste(info, collapse = "; ")
[09:31:03.564]                         if (!has_future) {
[09:31:03.564]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.564]                             info)
[09:31:03.564]                         }
[09:31:03.564]                         else {
[09:31:03.564]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.564]                             info, version)
[09:31:03.564]                         }
[09:31:03.564]                         base::stop(msg)
[09:31:03.564]                       }
[09:31:03.564]                     })
[09:31:03.564]                   }
[09:31:03.564]                   ...future.strategy.old <- future::plan("list")
[09:31:03.564]                   options(future.plan = NULL)
[09:31:03.564]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.564]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.564]                 }
[09:31:03.564]                 ...future.workdir <- getwd()
[09:31:03.564]             }
[09:31:03.564]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.564]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.564]         }
[09:31:03.564]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.564]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.564]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.564]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.564]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.564]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.564]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.564]             base::names(...future.oldOptions))
[09:31:03.564]     }
[09:31:03.564]     if (FALSE) {
[09:31:03.564]     }
[09:31:03.564]     else {
[09:31:03.564]         if (TRUE) {
[09:31:03.564]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.564]                 open = "w")
[09:31:03.564]         }
[09:31:03.564]         else {
[09:31:03.564]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.564]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.564]         }
[09:31:03.564]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.564]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.564]             base::sink(type = "output", split = FALSE)
[09:31:03.564]             base::close(...future.stdout)
[09:31:03.564]         }, add = TRUE)
[09:31:03.564]     }
[09:31:03.564]     ...future.frame <- base::sys.nframe()
[09:31:03.564]     ...future.conditions <- base::list()
[09:31:03.564]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.564]     if (FALSE) {
[09:31:03.564]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.564]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.564]     }
[09:31:03.564]     ...future.result <- base::tryCatch({
[09:31:03.564]         base::withCallingHandlers({
[09:31:03.564]             ...future.value <- base::withVisible(base::local({
[09:31:03.564]                 x <- 1
[09:31:03.564]             }))
[09:31:03.564]             future::FutureResult(value = ...future.value$value, 
[09:31:03.564]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.564]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.564]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.564]                     ...future.globalenv.names))
[09:31:03.564]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.564]         }, condition = base::local({
[09:31:03.564]             c <- base::c
[09:31:03.564]             inherits <- base::inherits
[09:31:03.564]             invokeRestart <- base::invokeRestart
[09:31:03.564]             length <- base::length
[09:31:03.564]             list <- base::list
[09:31:03.564]             seq.int <- base::seq.int
[09:31:03.564]             signalCondition <- base::signalCondition
[09:31:03.564]             sys.calls <- base::sys.calls
[09:31:03.564]             `[[` <- base::`[[`
[09:31:03.564]             `+` <- base::`+`
[09:31:03.564]             `<<-` <- base::`<<-`
[09:31:03.564]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.564]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.564]                   3L)]
[09:31:03.564]             }
[09:31:03.564]             function(cond) {
[09:31:03.564]                 is_error <- inherits(cond, "error")
[09:31:03.564]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.564]                   NULL)
[09:31:03.564]                 if (is_error) {
[09:31:03.564]                   sessionInformation <- function() {
[09:31:03.564]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.564]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.564]                       search = base::search(), system = base::Sys.info())
[09:31:03.564]                   }
[09:31:03.564]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.564]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.564]                     cond$call), session = sessionInformation(), 
[09:31:03.564]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.564]                   signalCondition(cond)
[09:31:03.564]                 }
[09:31:03.564]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.564]                 "immediateCondition"))) {
[09:31:03.564]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.564]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.564]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.564]                   if (TRUE && !signal) {
[09:31:03.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.564]                     {
[09:31:03.564]                       inherits <- base::inherits
[09:31:03.564]                       invokeRestart <- base::invokeRestart
[09:31:03.564]                       is.null <- base::is.null
[09:31:03.564]                       muffled <- FALSE
[09:31:03.564]                       if (inherits(cond, "message")) {
[09:31:03.564]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.564]                         if (muffled) 
[09:31:03.564]                           invokeRestart("muffleMessage")
[09:31:03.564]                       }
[09:31:03.564]                       else if (inherits(cond, "warning")) {
[09:31:03.564]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.564]                         if (muffled) 
[09:31:03.564]                           invokeRestart("muffleWarning")
[09:31:03.564]                       }
[09:31:03.564]                       else if (inherits(cond, "condition")) {
[09:31:03.564]                         if (!is.null(pattern)) {
[09:31:03.564]                           computeRestarts <- base::computeRestarts
[09:31:03.564]                           grepl <- base::grepl
[09:31:03.564]                           restarts <- computeRestarts(cond)
[09:31:03.564]                           for (restart in restarts) {
[09:31:03.564]                             name <- restart$name
[09:31:03.564]                             if (is.null(name)) 
[09:31:03.564]                               next
[09:31:03.564]                             if (!grepl(pattern, name)) 
[09:31:03.564]                               next
[09:31:03.564]                             invokeRestart(restart)
[09:31:03.564]                             muffled <- TRUE
[09:31:03.564]                             break
[09:31:03.564]                           }
[09:31:03.564]                         }
[09:31:03.564]                       }
[09:31:03.564]                       invisible(muffled)
[09:31:03.564]                     }
[09:31:03.564]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.564]                   }
[09:31:03.564]                 }
[09:31:03.564]                 else {
[09:31:03.564]                   if (TRUE) {
[09:31:03.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.564]                     {
[09:31:03.564]                       inherits <- base::inherits
[09:31:03.564]                       invokeRestart <- base::invokeRestart
[09:31:03.564]                       is.null <- base::is.null
[09:31:03.564]                       muffled <- FALSE
[09:31:03.564]                       if (inherits(cond, "message")) {
[09:31:03.564]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.564]                         if (muffled) 
[09:31:03.564]                           invokeRestart("muffleMessage")
[09:31:03.564]                       }
[09:31:03.564]                       else if (inherits(cond, "warning")) {
[09:31:03.564]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.564]                         if (muffled) 
[09:31:03.564]                           invokeRestart("muffleWarning")
[09:31:03.564]                       }
[09:31:03.564]                       else if (inherits(cond, "condition")) {
[09:31:03.564]                         if (!is.null(pattern)) {
[09:31:03.564]                           computeRestarts <- base::computeRestarts
[09:31:03.564]                           grepl <- base::grepl
[09:31:03.564]                           restarts <- computeRestarts(cond)
[09:31:03.564]                           for (restart in restarts) {
[09:31:03.564]                             name <- restart$name
[09:31:03.564]                             if (is.null(name)) 
[09:31:03.564]                               next
[09:31:03.564]                             if (!grepl(pattern, name)) 
[09:31:03.564]                               next
[09:31:03.564]                             invokeRestart(restart)
[09:31:03.564]                             muffled <- TRUE
[09:31:03.564]                             break
[09:31:03.564]                           }
[09:31:03.564]                         }
[09:31:03.564]                       }
[09:31:03.564]                       invisible(muffled)
[09:31:03.564]                     }
[09:31:03.564]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.564]                   }
[09:31:03.564]                 }
[09:31:03.564]             }
[09:31:03.564]         }))
[09:31:03.564]     }, error = function(ex) {
[09:31:03.564]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.564]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.564]                 ...future.rng), started = ...future.startTime, 
[09:31:03.564]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.564]             version = "1.8"), class = "FutureResult")
[09:31:03.564]     }, finally = {
[09:31:03.564]         if (!identical(...future.workdir, getwd())) 
[09:31:03.564]             setwd(...future.workdir)
[09:31:03.564]         {
[09:31:03.564]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.564]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.564]             }
[09:31:03.564]             base::options(...future.oldOptions)
[09:31:03.564]             if (.Platform$OS.type == "windows") {
[09:31:03.564]                 old_names <- names(...future.oldEnvVars)
[09:31:03.564]                 envs <- base::Sys.getenv()
[09:31:03.564]                 names <- names(envs)
[09:31:03.564]                 common <- intersect(names, old_names)
[09:31:03.564]                 added <- setdiff(names, old_names)
[09:31:03.564]                 removed <- setdiff(old_names, names)
[09:31:03.564]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.564]                   envs[common]]
[09:31:03.564]                 NAMES <- toupper(changed)
[09:31:03.564]                 args <- list()
[09:31:03.564]                 for (kk in seq_along(NAMES)) {
[09:31:03.564]                   name <- changed[[kk]]
[09:31:03.564]                   NAME <- NAMES[[kk]]
[09:31:03.564]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.564]                     next
[09:31:03.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.564]                 }
[09:31:03.564]                 NAMES <- toupper(added)
[09:31:03.564]                 for (kk in seq_along(NAMES)) {
[09:31:03.564]                   name <- added[[kk]]
[09:31:03.564]                   NAME <- NAMES[[kk]]
[09:31:03.564]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.564]                     next
[09:31:03.564]                   args[[name]] <- ""
[09:31:03.564]                 }
[09:31:03.564]                 NAMES <- toupper(removed)
[09:31:03.564]                 for (kk in seq_along(NAMES)) {
[09:31:03.564]                   name <- removed[[kk]]
[09:31:03.564]                   NAME <- NAMES[[kk]]
[09:31:03.564]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.564]                     next
[09:31:03.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.564]                 }
[09:31:03.564]                 if (length(args) > 0) 
[09:31:03.564]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.564]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.564]             }
[09:31:03.564]             else {
[09:31:03.564]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.564]             }
[09:31:03.564]             {
[09:31:03.564]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.564]                   0L) {
[09:31:03.564]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.564]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.564]                   base::options(opts)
[09:31:03.564]                 }
[09:31:03.564]                 {
[09:31:03.564]                   {
[09:31:03.564]                     NULL
[09:31:03.564]                     RNGkind("Mersenne-Twister")
[09:31:03.564]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.564]                       inherits = FALSE)
[09:31:03.564]                   }
[09:31:03.564]                   options(future.plan = NULL)
[09:31:03.564]                   if (is.na(NA_character_)) 
[09:31:03.564]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.564]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.564]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.564]                     .init = FALSE)
[09:31:03.564]                 }
[09:31:03.564]             }
[09:31:03.564]         }
[09:31:03.564]     })
[09:31:03.564]     if (TRUE) {
[09:31:03.564]         base::sink(type = "output", split = FALSE)
[09:31:03.564]         if (TRUE) {
[09:31:03.564]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.564]         }
[09:31:03.564]         else {
[09:31:03.564]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.564]         }
[09:31:03.564]         base::close(...future.stdout)
[09:31:03.564]         ...future.stdout <- NULL
[09:31:03.564]     }
[09:31:03.564]     ...future.result$conditions <- ...future.conditions
[09:31:03.564]     ...future.result$finished <- base::Sys.time()
[09:31:03.564]     ...future.result
[09:31:03.564] }
[09:31:03.566] plan(): Setting new future strategy stack:
[09:31:03.566] List of future strategies:
[09:31:03.566] 1. sequential:
[09:31:03.566]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.566]    - tweaked: FALSE
[09:31:03.566]    - call: NULL
[09:31:03.566] plan(): nbrOfWorkers() = 1
[09:31:03.567] plan(): Setting new future strategy stack:
[09:31:03.568] List of future strategies:
[09:31:03.568] 1. sequential:
[09:31:03.568]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.568]    - tweaked: FALSE
[09:31:03.568]    - call: plan(strategy)
[09:31:03.568] plan(): nbrOfWorkers() = 1
[09:31:03.568] SequentialFuture started (and completed)
[09:31:03.569] - Launch lazy future ... done
[09:31:03.569] run() for ‘SequentialFuture’ ... done
** Future evaluation with globals
[09:31:03.569] getGlobalsAndPackages() ...
[09:31:03.569] Searching for globals...
[09:31:03.570] - globals found: [3] ‘{’, ‘<-’, ‘a’
[09:31:03.570] Searching for globals ... DONE
[09:31:03.571] Resolving globals: FALSE
[09:31:03.571] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:03.572] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:03.572] - globals: [1] ‘a’
[09:31:03.572] 
[09:31:03.572] getGlobalsAndPackages() ... DONE
[09:31:03.572] run() for ‘Future’ ...
[09:31:03.572] - state: ‘created’
[09:31:03.572] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.573] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.573] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.573]   - Field: ‘label’
[09:31:03.573]   - Field: ‘local’
[09:31:03.573]   - Field: ‘owner’
[09:31:03.573]   - Field: ‘envir’
[09:31:03.573]   - Field: ‘packages’
[09:31:03.573]   - Field: ‘gc’
[09:31:03.573]   - Field: ‘conditions’
[09:31:03.573]   - Field: ‘expr’
[09:31:03.573]   - Field: ‘uuid’
[09:31:03.574]   - Field: ‘seed’
[09:31:03.574]   - Field: ‘version’
[09:31:03.574]   - Field: ‘result’
[09:31:03.574]   - Field: ‘asynchronous’
[09:31:03.574]   - Field: ‘calls’
[09:31:03.574]   - Field: ‘globals’
[09:31:03.574]   - Field: ‘stdout’
[09:31:03.574]   - Field: ‘earlySignal’
[09:31:03.574]   - Field: ‘lazy’
[09:31:03.574]   - Field: ‘state’
[09:31:03.574] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.575] - Launch lazy future ...
[09:31:03.575] Packages needed by the future expression (n = 0): <none>
[09:31:03.575] Packages needed by future strategies (n = 0): <none>
[09:31:03.575] {
[09:31:03.575]     {
[09:31:03.575]         {
[09:31:03.575]             ...future.startTime <- base::Sys.time()
[09:31:03.575]             {
[09:31:03.575]                 {
[09:31:03.575]                   {
[09:31:03.575]                     base::local({
[09:31:03.575]                       has_future <- base::requireNamespace("future", 
[09:31:03.575]                         quietly = TRUE)
[09:31:03.575]                       if (has_future) {
[09:31:03.575]                         ns <- base::getNamespace("future")
[09:31:03.575]                         version <- ns[[".package"]][["version"]]
[09:31:03.575]                         if (is.null(version)) 
[09:31:03.575]                           version <- utils::packageVersion("future")
[09:31:03.575]                       }
[09:31:03.575]                       else {
[09:31:03.575]                         version <- NULL
[09:31:03.575]                       }
[09:31:03.575]                       if (!has_future || version < "1.8.0") {
[09:31:03.575]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.575]                           "", base::R.version$version.string), 
[09:31:03.575]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.575]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.575]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.575]                             "release", "version")], collapse = " "), 
[09:31:03.575]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.575]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.575]                           info)
[09:31:03.575]                         info <- base::paste(info, collapse = "; ")
[09:31:03.575]                         if (!has_future) {
[09:31:03.575]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.575]                             info)
[09:31:03.575]                         }
[09:31:03.575]                         else {
[09:31:03.575]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.575]                             info, version)
[09:31:03.575]                         }
[09:31:03.575]                         base::stop(msg)
[09:31:03.575]                       }
[09:31:03.575]                     })
[09:31:03.575]                   }
[09:31:03.575]                   ...future.strategy.old <- future::plan("list")
[09:31:03.575]                   options(future.plan = NULL)
[09:31:03.575]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.575]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.575]                 }
[09:31:03.575]                 ...future.workdir <- getwd()
[09:31:03.575]             }
[09:31:03.575]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.575]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.575]         }
[09:31:03.575]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.575]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.575]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.575]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.575]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.575]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.575]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.575]             base::names(...future.oldOptions))
[09:31:03.575]     }
[09:31:03.575]     if (FALSE) {
[09:31:03.575]     }
[09:31:03.575]     else {
[09:31:03.575]         if (TRUE) {
[09:31:03.575]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.575]                 open = "w")
[09:31:03.575]         }
[09:31:03.575]         else {
[09:31:03.575]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.575]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.575]         }
[09:31:03.575]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.575]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.575]             base::sink(type = "output", split = FALSE)
[09:31:03.575]             base::close(...future.stdout)
[09:31:03.575]         }, add = TRUE)
[09:31:03.575]     }
[09:31:03.575]     ...future.frame <- base::sys.nframe()
[09:31:03.575]     ...future.conditions <- base::list()
[09:31:03.575]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.575]     if (FALSE) {
[09:31:03.575]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.575]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.575]     }
[09:31:03.575]     ...future.result <- base::tryCatch({
[09:31:03.575]         base::withCallingHandlers({
[09:31:03.575]             ...future.value <- base::withVisible(base::local({
[09:31:03.575]                 x <- a
[09:31:03.575]             }))
[09:31:03.575]             future::FutureResult(value = ...future.value$value, 
[09:31:03.575]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.575]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.575]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.575]                     ...future.globalenv.names))
[09:31:03.575]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.575]         }, condition = base::local({
[09:31:03.575]             c <- base::c
[09:31:03.575]             inherits <- base::inherits
[09:31:03.575]             invokeRestart <- base::invokeRestart
[09:31:03.575]             length <- base::length
[09:31:03.575]             list <- base::list
[09:31:03.575]             seq.int <- base::seq.int
[09:31:03.575]             signalCondition <- base::signalCondition
[09:31:03.575]             sys.calls <- base::sys.calls
[09:31:03.575]             `[[` <- base::`[[`
[09:31:03.575]             `+` <- base::`+`
[09:31:03.575]             `<<-` <- base::`<<-`
[09:31:03.575]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.575]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.575]                   3L)]
[09:31:03.575]             }
[09:31:03.575]             function(cond) {
[09:31:03.575]                 is_error <- inherits(cond, "error")
[09:31:03.575]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.575]                   NULL)
[09:31:03.575]                 if (is_error) {
[09:31:03.575]                   sessionInformation <- function() {
[09:31:03.575]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.575]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.575]                       search = base::search(), system = base::Sys.info())
[09:31:03.575]                   }
[09:31:03.575]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.575]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.575]                     cond$call), session = sessionInformation(), 
[09:31:03.575]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.575]                   signalCondition(cond)
[09:31:03.575]                 }
[09:31:03.575]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.575]                 "immediateCondition"))) {
[09:31:03.575]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.575]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.575]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.575]                   if (TRUE && !signal) {
[09:31:03.575]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.575]                     {
[09:31:03.575]                       inherits <- base::inherits
[09:31:03.575]                       invokeRestart <- base::invokeRestart
[09:31:03.575]                       is.null <- base::is.null
[09:31:03.575]                       muffled <- FALSE
[09:31:03.575]                       if (inherits(cond, "message")) {
[09:31:03.575]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.575]                         if (muffled) 
[09:31:03.575]                           invokeRestart("muffleMessage")
[09:31:03.575]                       }
[09:31:03.575]                       else if (inherits(cond, "warning")) {
[09:31:03.575]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.575]                         if (muffled) 
[09:31:03.575]                           invokeRestart("muffleWarning")
[09:31:03.575]                       }
[09:31:03.575]                       else if (inherits(cond, "condition")) {
[09:31:03.575]                         if (!is.null(pattern)) {
[09:31:03.575]                           computeRestarts <- base::computeRestarts
[09:31:03.575]                           grepl <- base::grepl
[09:31:03.575]                           restarts <- computeRestarts(cond)
[09:31:03.575]                           for (restart in restarts) {
[09:31:03.575]                             name <- restart$name
[09:31:03.575]                             if (is.null(name)) 
[09:31:03.575]                               next
[09:31:03.575]                             if (!grepl(pattern, name)) 
[09:31:03.575]                               next
[09:31:03.575]                             invokeRestart(restart)
[09:31:03.575]                             muffled <- TRUE
[09:31:03.575]                             break
[09:31:03.575]                           }
[09:31:03.575]                         }
[09:31:03.575]                       }
[09:31:03.575]                       invisible(muffled)
[09:31:03.575]                     }
[09:31:03.575]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.575]                   }
[09:31:03.575]                 }
[09:31:03.575]                 else {
[09:31:03.575]                   if (TRUE) {
[09:31:03.575]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.575]                     {
[09:31:03.575]                       inherits <- base::inherits
[09:31:03.575]                       invokeRestart <- base::invokeRestart
[09:31:03.575]                       is.null <- base::is.null
[09:31:03.575]                       muffled <- FALSE
[09:31:03.575]                       if (inherits(cond, "message")) {
[09:31:03.575]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.575]                         if (muffled) 
[09:31:03.575]                           invokeRestart("muffleMessage")
[09:31:03.575]                       }
[09:31:03.575]                       else if (inherits(cond, "warning")) {
[09:31:03.575]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.575]                         if (muffled) 
[09:31:03.575]                           invokeRestart("muffleWarning")
[09:31:03.575]                       }
[09:31:03.575]                       else if (inherits(cond, "condition")) {
[09:31:03.575]                         if (!is.null(pattern)) {
[09:31:03.575]                           computeRestarts <- base::computeRestarts
[09:31:03.575]                           grepl <- base::grepl
[09:31:03.575]                           restarts <- computeRestarts(cond)
[09:31:03.575]                           for (restart in restarts) {
[09:31:03.575]                             name <- restart$name
[09:31:03.575]                             if (is.null(name)) 
[09:31:03.575]                               next
[09:31:03.575]                             if (!grepl(pattern, name)) 
[09:31:03.575]                               next
[09:31:03.575]                             invokeRestart(restart)
[09:31:03.575]                             muffled <- TRUE
[09:31:03.575]                             break
[09:31:03.575]                           }
[09:31:03.575]                         }
[09:31:03.575]                       }
[09:31:03.575]                       invisible(muffled)
[09:31:03.575]                     }
[09:31:03.575]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.575]                   }
[09:31:03.575]                 }
[09:31:03.575]             }
[09:31:03.575]         }))
[09:31:03.575]     }, error = function(ex) {
[09:31:03.575]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.575]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.575]                 ...future.rng), started = ...future.startTime, 
[09:31:03.575]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.575]             version = "1.8"), class = "FutureResult")
[09:31:03.575]     }, finally = {
[09:31:03.575]         if (!identical(...future.workdir, getwd())) 
[09:31:03.575]             setwd(...future.workdir)
[09:31:03.575]         {
[09:31:03.575]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.575]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.575]             }
[09:31:03.575]             base::options(...future.oldOptions)
[09:31:03.575]             if (.Platform$OS.type == "windows") {
[09:31:03.575]                 old_names <- names(...future.oldEnvVars)
[09:31:03.575]                 envs <- base::Sys.getenv()
[09:31:03.575]                 names <- names(envs)
[09:31:03.575]                 common <- intersect(names, old_names)
[09:31:03.575]                 added <- setdiff(names, old_names)
[09:31:03.575]                 removed <- setdiff(old_names, names)
[09:31:03.575]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.575]                   envs[common]]
[09:31:03.575]                 NAMES <- toupper(changed)
[09:31:03.575]                 args <- list()
[09:31:03.575]                 for (kk in seq_along(NAMES)) {
[09:31:03.575]                   name <- changed[[kk]]
[09:31:03.575]                   NAME <- NAMES[[kk]]
[09:31:03.575]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.575]                     next
[09:31:03.575]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.575]                 }
[09:31:03.575]                 NAMES <- toupper(added)
[09:31:03.575]                 for (kk in seq_along(NAMES)) {
[09:31:03.575]                   name <- added[[kk]]
[09:31:03.575]                   NAME <- NAMES[[kk]]
[09:31:03.575]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.575]                     next
[09:31:03.575]                   args[[name]] <- ""
[09:31:03.575]                 }
[09:31:03.575]                 NAMES <- toupper(removed)
[09:31:03.575]                 for (kk in seq_along(NAMES)) {
[09:31:03.575]                   name <- removed[[kk]]
[09:31:03.575]                   NAME <- NAMES[[kk]]
[09:31:03.575]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.575]                     next
[09:31:03.575]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.575]                 }
[09:31:03.575]                 if (length(args) > 0) 
[09:31:03.575]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.575]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.575]             }
[09:31:03.575]             else {
[09:31:03.575]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.575]             }
[09:31:03.575]             {
[09:31:03.575]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.575]                   0L) {
[09:31:03.575]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.575]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.575]                   base::options(opts)
[09:31:03.575]                 }
[09:31:03.575]                 {
[09:31:03.575]                   {
[09:31:03.575]                     NULL
[09:31:03.575]                     RNGkind("Mersenne-Twister")
[09:31:03.575]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.575]                       inherits = FALSE)
[09:31:03.575]                   }
[09:31:03.575]                   options(future.plan = NULL)
[09:31:03.575]                   if (is.na(NA_character_)) 
[09:31:03.575]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.575]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.575]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.575]                     .init = FALSE)
[09:31:03.575]                 }
[09:31:03.575]             }
[09:31:03.575]         }
[09:31:03.575]     })
[09:31:03.575]     if (TRUE) {
[09:31:03.575]         base::sink(type = "output", split = FALSE)
[09:31:03.575]         if (TRUE) {
[09:31:03.575]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.575]         }
[09:31:03.575]         else {
[09:31:03.575]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.575]         }
[09:31:03.575]         base::close(...future.stdout)
[09:31:03.575]         ...future.stdout <- NULL
[09:31:03.575]     }
[09:31:03.575]     ...future.result$conditions <- ...future.conditions
[09:31:03.575]     ...future.result$finished <- base::Sys.time()
[09:31:03.575]     ...future.result
[09:31:03.575] }
[09:31:03.577] assign_globals() ...
[09:31:03.577] List of 1
[09:31:03.577]  $ a: num 2
[09:31:03.577]  - attr(*, "where")=List of 1
[09:31:03.577]   ..$ a:<environment: R_EmptyEnv> 
[09:31:03.577]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.577]  - attr(*, "resolved")= logi FALSE
[09:31:03.577]  - attr(*, "total_size")= num 56
[09:31:03.577]  - attr(*, "already-done")= logi TRUE
[09:31:03.581] - copied ‘a’ to environment
[09:31:03.582] assign_globals() ... done
[09:31:03.582] plan(): Setting new future strategy stack:
[09:31:03.582] List of future strategies:
[09:31:03.582] 1. sequential:
[09:31:03.582]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.582]    - tweaked: FALSE
[09:31:03.582]    - call: NULL
[09:31:03.582] plan(): nbrOfWorkers() = 1
[09:31:03.583] plan(): Setting new future strategy stack:
[09:31:03.583] List of future strategies:
[09:31:03.583] 1. sequential:
[09:31:03.583]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.583]    - tweaked: FALSE
[09:31:03.583]    - call: plan(strategy)
[09:31:03.584] plan(): nbrOfWorkers() = 1
[09:31:03.584] SequentialFuture started (and completed)
[09:31:03.584] - Launch lazy future ... done
[09:31:03.584] run() for ‘SequentialFuture’ ... done
** Future evaluation with errors
[09:31:03.584] getGlobalsAndPackages() ...
[09:31:03.584] Searching for globals...
[09:31:03.590] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[09:31:03.590] Searching for globals ... DONE
[09:31:03.590] Resolving globals: FALSE
[09:31:03.590] 
[09:31:03.590] 
[09:31:03.590] getGlobalsAndPackages() ... DONE
[09:31:03.591] run() for ‘Future’ ...
[09:31:03.591] - state: ‘created’
[09:31:03.591] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.591] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.591] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.591]   - Field: ‘label’
[09:31:03.591]   - Field: ‘local’
[09:31:03.591]   - Field: ‘owner’
[09:31:03.591]   - Field: ‘envir’
[09:31:03.592]   - Field: ‘packages’
[09:31:03.592]   - Field: ‘gc’
[09:31:03.592]   - Field: ‘conditions’
[09:31:03.592]   - Field: ‘expr’
[09:31:03.592]   - Field: ‘uuid’
[09:31:03.592]   - Field: ‘seed’
[09:31:03.592]   - Field: ‘version’
[09:31:03.592]   - Field: ‘result’
[09:31:03.592]   - Field: ‘asynchronous’
[09:31:03.592]   - Field: ‘calls’
[09:31:03.592]   - Field: ‘globals’
[09:31:03.593]   - Field: ‘stdout’
[09:31:03.593]   - Field: ‘earlySignal’
[09:31:03.593]   - Field: ‘lazy’
[09:31:03.593]   - Field: ‘state’
[09:31:03.593] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.593] - Launch lazy future ...
[09:31:03.593] Packages needed by the future expression (n = 0): <none>
[09:31:03.593] Packages needed by future strategies (n = 0): <none>
[09:31:03.594] {
[09:31:03.594]     {
[09:31:03.594]         {
[09:31:03.594]             ...future.startTime <- base::Sys.time()
[09:31:03.594]             {
[09:31:03.594]                 {
[09:31:03.594]                   {
[09:31:03.594]                     base::local({
[09:31:03.594]                       has_future <- base::requireNamespace("future", 
[09:31:03.594]                         quietly = TRUE)
[09:31:03.594]                       if (has_future) {
[09:31:03.594]                         ns <- base::getNamespace("future")
[09:31:03.594]                         version <- ns[[".package"]][["version"]]
[09:31:03.594]                         if (is.null(version)) 
[09:31:03.594]                           version <- utils::packageVersion("future")
[09:31:03.594]                       }
[09:31:03.594]                       else {
[09:31:03.594]                         version <- NULL
[09:31:03.594]                       }
[09:31:03.594]                       if (!has_future || version < "1.8.0") {
[09:31:03.594]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.594]                           "", base::R.version$version.string), 
[09:31:03.594]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.594]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.594]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.594]                             "release", "version")], collapse = " "), 
[09:31:03.594]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.594]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.594]                           info)
[09:31:03.594]                         info <- base::paste(info, collapse = "; ")
[09:31:03.594]                         if (!has_future) {
[09:31:03.594]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.594]                             info)
[09:31:03.594]                         }
[09:31:03.594]                         else {
[09:31:03.594]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.594]                             info, version)
[09:31:03.594]                         }
[09:31:03.594]                         base::stop(msg)
[09:31:03.594]                       }
[09:31:03.594]                     })
[09:31:03.594]                   }
[09:31:03.594]                   ...future.strategy.old <- future::plan("list")
[09:31:03.594]                   options(future.plan = NULL)
[09:31:03.594]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.594]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.594]                 }
[09:31:03.594]                 ...future.workdir <- getwd()
[09:31:03.594]             }
[09:31:03.594]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.594]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.594]         }
[09:31:03.594]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.594]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.594]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.594]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.594]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.594]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.594]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.594]             base::names(...future.oldOptions))
[09:31:03.594]     }
[09:31:03.594]     if (FALSE) {
[09:31:03.594]     }
[09:31:03.594]     else {
[09:31:03.594]         if (TRUE) {
[09:31:03.594]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.594]                 open = "w")
[09:31:03.594]         }
[09:31:03.594]         else {
[09:31:03.594]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.594]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.594]         }
[09:31:03.594]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.594]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.594]             base::sink(type = "output", split = FALSE)
[09:31:03.594]             base::close(...future.stdout)
[09:31:03.594]         }, add = TRUE)
[09:31:03.594]     }
[09:31:03.594]     ...future.frame <- base::sys.nframe()
[09:31:03.594]     ...future.conditions <- base::list()
[09:31:03.594]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.594]     if (FALSE) {
[09:31:03.594]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.594]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.594]     }
[09:31:03.594]     ...future.result <- base::tryCatch({
[09:31:03.594]         base::withCallingHandlers({
[09:31:03.594]             ...future.value <- base::withVisible(base::local({
[09:31:03.594]                 x <- 3
[09:31:03.594]                 stop("Woops!")
[09:31:03.594]                 x
[09:31:03.594]             }))
[09:31:03.594]             future::FutureResult(value = ...future.value$value, 
[09:31:03.594]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.594]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.594]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.594]                     ...future.globalenv.names))
[09:31:03.594]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.594]         }, condition = base::local({
[09:31:03.594]             c <- base::c
[09:31:03.594]             inherits <- base::inherits
[09:31:03.594]             invokeRestart <- base::invokeRestart
[09:31:03.594]             length <- base::length
[09:31:03.594]             list <- base::list
[09:31:03.594]             seq.int <- base::seq.int
[09:31:03.594]             signalCondition <- base::signalCondition
[09:31:03.594]             sys.calls <- base::sys.calls
[09:31:03.594]             `[[` <- base::`[[`
[09:31:03.594]             `+` <- base::`+`
[09:31:03.594]             `<<-` <- base::`<<-`
[09:31:03.594]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.594]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.594]                   3L)]
[09:31:03.594]             }
[09:31:03.594]             function(cond) {
[09:31:03.594]                 is_error <- inherits(cond, "error")
[09:31:03.594]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.594]                   NULL)
[09:31:03.594]                 if (is_error) {
[09:31:03.594]                   sessionInformation <- function() {
[09:31:03.594]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.594]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.594]                       search = base::search(), system = base::Sys.info())
[09:31:03.594]                   }
[09:31:03.594]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.594]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.594]                     cond$call), session = sessionInformation(), 
[09:31:03.594]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.594]                   signalCondition(cond)
[09:31:03.594]                 }
[09:31:03.594]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.594]                 "immediateCondition"))) {
[09:31:03.594]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.594]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.594]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.594]                   if (TRUE && !signal) {
[09:31:03.594]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.594]                     {
[09:31:03.594]                       inherits <- base::inherits
[09:31:03.594]                       invokeRestart <- base::invokeRestart
[09:31:03.594]                       is.null <- base::is.null
[09:31:03.594]                       muffled <- FALSE
[09:31:03.594]                       if (inherits(cond, "message")) {
[09:31:03.594]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.594]                         if (muffled) 
[09:31:03.594]                           invokeRestart("muffleMessage")
[09:31:03.594]                       }
[09:31:03.594]                       else if (inherits(cond, "warning")) {
[09:31:03.594]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.594]                         if (muffled) 
[09:31:03.594]                           invokeRestart("muffleWarning")
[09:31:03.594]                       }
[09:31:03.594]                       else if (inherits(cond, "condition")) {
[09:31:03.594]                         if (!is.null(pattern)) {
[09:31:03.594]                           computeRestarts <- base::computeRestarts
[09:31:03.594]                           grepl <- base::grepl
[09:31:03.594]                           restarts <- computeRestarts(cond)
[09:31:03.594]                           for (restart in restarts) {
[09:31:03.594]                             name <- restart$name
[09:31:03.594]                             if (is.null(name)) 
[09:31:03.594]                               next
[09:31:03.594]                             if (!grepl(pattern, name)) 
[09:31:03.594]                               next
[09:31:03.594]                             invokeRestart(restart)
[09:31:03.594]                             muffled <- TRUE
[09:31:03.594]                             break
[09:31:03.594]                           }
[09:31:03.594]                         }
[09:31:03.594]                       }
[09:31:03.594]                       invisible(muffled)
[09:31:03.594]                     }
[09:31:03.594]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.594]                   }
[09:31:03.594]                 }
[09:31:03.594]                 else {
[09:31:03.594]                   if (TRUE) {
[09:31:03.594]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.594]                     {
[09:31:03.594]                       inherits <- base::inherits
[09:31:03.594]                       invokeRestart <- base::invokeRestart
[09:31:03.594]                       is.null <- base::is.null
[09:31:03.594]                       muffled <- FALSE
[09:31:03.594]                       if (inherits(cond, "message")) {
[09:31:03.594]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.594]                         if (muffled) 
[09:31:03.594]                           invokeRestart("muffleMessage")
[09:31:03.594]                       }
[09:31:03.594]                       else if (inherits(cond, "warning")) {
[09:31:03.594]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.594]                         if (muffled) 
[09:31:03.594]                           invokeRestart("muffleWarning")
[09:31:03.594]                       }
[09:31:03.594]                       else if (inherits(cond, "condition")) {
[09:31:03.594]                         if (!is.null(pattern)) {
[09:31:03.594]                           computeRestarts <- base::computeRestarts
[09:31:03.594]                           grepl <- base::grepl
[09:31:03.594]                           restarts <- computeRestarts(cond)
[09:31:03.594]                           for (restart in restarts) {
[09:31:03.594]                             name <- restart$name
[09:31:03.594]                             if (is.null(name)) 
[09:31:03.594]                               next
[09:31:03.594]                             if (!grepl(pattern, name)) 
[09:31:03.594]                               next
[09:31:03.594]                             invokeRestart(restart)
[09:31:03.594]                             muffled <- TRUE
[09:31:03.594]                             break
[09:31:03.594]                           }
[09:31:03.594]                         }
[09:31:03.594]                       }
[09:31:03.594]                       invisible(muffled)
[09:31:03.594]                     }
[09:31:03.594]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.594]                   }
[09:31:03.594]                 }
[09:31:03.594]             }
[09:31:03.594]         }))
[09:31:03.594]     }, error = function(ex) {
[09:31:03.594]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.594]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.594]                 ...future.rng), started = ...future.startTime, 
[09:31:03.594]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.594]             version = "1.8"), class = "FutureResult")
[09:31:03.594]     }, finally = {
[09:31:03.594]         if (!identical(...future.workdir, getwd())) 
[09:31:03.594]             setwd(...future.workdir)
[09:31:03.594]         {
[09:31:03.594]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.594]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.594]             }
[09:31:03.594]             base::options(...future.oldOptions)
[09:31:03.594]             if (.Platform$OS.type == "windows") {
[09:31:03.594]                 old_names <- names(...future.oldEnvVars)
[09:31:03.594]                 envs <- base::Sys.getenv()
[09:31:03.594]                 names <- names(envs)
[09:31:03.594]                 common <- intersect(names, old_names)
[09:31:03.594]                 added <- setdiff(names, old_names)
[09:31:03.594]                 removed <- setdiff(old_names, names)
[09:31:03.594]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.594]                   envs[common]]
[09:31:03.594]                 NAMES <- toupper(changed)
[09:31:03.594]                 args <- list()
[09:31:03.594]                 for (kk in seq_along(NAMES)) {
[09:31:03.594]                   name <- changed[[kk]]
[09:31:03.594]                   NAME <- NAMES[[kk]]
[09:31:03.594]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.594]                     next
[09:31:03.594]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.594]                 }
[09:31:03.594]                 NAMES <- toupper(added)
[09:31:03.594]                 for (kk in seq_along(NAMES)) {
[09:31:03.594]                   name <- added[[kk]]
[09:31:03.594]                   NAME <- NAMES[[kk]]
[09:31:03.594]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.594]                     next
[09:31:03.594]                   args[[name]] <- ""
[09:31:03.594]                 }
[09:31:03.594]                 NAMES <- toupper(removed)
[09:31:03.594]                 for (kk in seq_along(NAMES)) {
[09:31:03.594]                   name <- removed[[kk]]
[09:31:03.594]                   NAME <- NAMES[[kk]]
[09:31:03.594]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.594]                     next
[09:31:03.594]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.594]                 }
[09:31:03.594]                 if (length(args) > 0) 
[09:31:03.594]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.594]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.594]             }
[09:31:03.594]             else {
[09:31:03.594]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.594]             }
[09:31:03.594]             {
[09:31:03.594]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.594]                   0L) {
[09:31:03.594]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.594]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.594]                   base::options(opts)
[09:31:03.594]                 }
[09:31:03.594]                 {
[09:31:03.594]                   {
[09:31:03.594]                     NULL
[09:31:03.594]                     RNGkind("Mersenne-Twister")
[09:31:03.594]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.594]                       inherits = FALSE)
[09:31:03.594]                   }
[09:31:03.594]                   options(future.plan = NULL)
[09:31:03.594]                   if (is.na(NA_character_)) 
[09:31:03.594]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.594]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.594]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.594]                     .init = FALSE)
[09:31:03.594]                 }
[09:31:03.594]             }
[09:31:03.594]         }
[09:31:03.594]     })
[09:31:03.594]     if (TRUE) {
[09:31:03.594]         base::sink(type = "output", split = FALSE)
[09:31:03.594]         if (TRUE) {
[09:31:03.594]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.594]         }
[09:31:03.594]         else {
[09:31:03.594]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.594]         }
[09:31:03.594]         base::close(...future.stdout)
[09:31:03.594]         ...future.stdout <- NULL
[09:31:03.594]     }
[09:31:03.594]     ...future.result$conditions <- ...future.conditions
[09:31:03.594]     ...future.result$finished <- base::Sys.time()
[09:31:03.594]     ...future.result
[09:31:03.594] }
[09:31:03.595] plan(): Setting new future strategy stack:
[09:31:03.595] List of future strategies:
[09:31:03.595] 1. sequential:
[09:31:03.595]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.595]    - tweaked: FALSE
[09:31:03.595]    - call: NULL
[09:31:03.596] plan(): nbrOfWorkers() = 1
[09:31:03.597] plan(): Setting new future strategy stack:
[09:31:03.597] List of future strategies:
[09:31:03.597] 1. sequential:
[09:31:03.597]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.597]    - tweaked: FALSE
[09:31:03.597]    - call: plan(strategy)
[09:31:03.597] plan(): nbrOfWorkers() = 1
[09:31:03.597] SequentialFuture started (and completed)
[09:31:03.597] signalConditions() ...
[09:31:03.598]  - include = ‘immediateCondition’
[09:31:03.598]  - exclude = 
[09:31:03.598]  - resignal = FALSE
[09:31:03.598]  - Number of conditions: 1
[09:31:03.598] signalConditions() ... done
[09:31:03.598] - Launch lazy future ... done
[09:31:03.598] run() for ‘SequentialFuture’ ... done
[09:31:03.598] signalConditions() ...
[09:31:03.598]  - include = ‘immediateCondition’
[09:31:03.598]  - exclude = 
[09:31:03.598]  - resignal = FALSE
[09:31:03.599]  - Number of conditions: 1
[09:31:03.599] signalConditions() ... done
[09:31:03.599] Future state: ‘finished’
[09:31:03.599] signalConditions() ...
[09:31:03.599]  - include = ‘condition’
[09:31:03.599]  - exclude = ‘immediateCondition’
[09:31:03.599]  - resignal = TRUE
[09:31:03.599]  - Number of conditions: 1
[09:31:03.599]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:03.599] signalConditions() ... done
[09:31:03.600] getGlobalsAndPackages() ...
[09:31:03.600] Searching for globals...
[09:31:03.602] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[09:31:03.602] Searching for globals ... DONE
[09:31:03.602] Resolving globals: FALSE
[09:31:03.602] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:03.603] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:03.603] - globals: [1] ‘ii’
[09:31:03.603] 
[09:31:03.603] getGlobalsAndPackages() ... DONE
[09:31:03.603] run() for ‘Future’ ...
[09:31:03.603] - state: ‘created’
[09:31:03.603] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.604] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.604] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.604]   - Field: ‘label’
[09:31:03.604]   - Field: ‘local’
[09:31:03.604]   - Field: ‘owner’
[09:31:03.604]   - Field: ‘envir’
[09:31:03.604]   - Field: ‘packages’
[09:31:03.604]   - Field: ‘gc’
[09:31:03.604]   - Field: ‘conditions’
[09:31:03.604]   - Field: ‘expr’
[09:31:03.605]   - Field: ‘uuid’
[09:31:03.605]   - Field: ‘seed’
[09:31:03.605]   - Field: ‘version’
[09:31:03.605]   - Field: ‘result’
[09:31:03.605]   - Field: ‘asynchronous’
[09:31:03.605]   - Field: ‘calls’
[09:31:03.605]   - Field: ‘globals’
[09:31:03.605]   - Field: ‘stdout’
[09:31:03.605]   - Field: ‘earlySignal’
[09:31:03.605]   - Field: ‘lazy’
[09:31:03.605]   - Field: ‘state’
[09:31:03.606] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.606] - Launch lazy future ...
[09:31:03.606] Packages needed by the future expression (n = 0): <none>
[09:31:03.606] Packages needed by future strategies (n = 0): <none>
[09:31:03.606] {
[09:31:03.606]     {
[09:31:03.606]         {
[09:31:03.606]             ...future.startTime <- base::Sys.time()
[09:31:03.606]             {
[09:31:03.606]                 {
[09:31:03.606]                   {
[09:31:03.606]                     base::local({
[09:31:03.606]                       has_future <- base::requireNamespace("future", 
[09:31:03.606]                         quietly = TRUE)
[09:31:03.606]                       if (has_future) {
[09:31:03.606]                         ns <- base::getNamespace("future")
[09:31:03.606]                         version <- ns[[".package"]][["version"]]
[09:31:03.606]                         if (is.null(version)) 
[09:31:03.606]                           version <- utils::packageVersion("future")
[09:31:03.606]                       }
[09:31:03.606]                       else {
[09:31:03.606]                         version <- NULL
[09:31:03.606]                       }
[09:31:03.606]                       if (!has_future || version < "1.8.0") {
[09:31:03.606]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.606]                           "", base::R.version$version.string), 
[09:31:03.606]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.606]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.606]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.606]                             "release", "version")], collapse = " "), 
[09:31:03.606]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.606]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.606]                           info)
[09:31:03.606]                         info <- base::paste(info, collapse = "; ")
[09:31:03.606]                         if (!has_future) {
[09:31:03.606]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.606]                             info)
[09:31:03.606]                         }
[09:31:03.606]                         else {
[09:31:03.606]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.606]                             info, version)
[09:31:03.606]                         }
[09:31:03.606]                         base::stop(msg)
[09:31:03.606]                       }
[09:31:03.606]                     })
[09:31:03.606]                   }
[09:31:03.606]                   ...future.strategy.old <- future::plan("list")
[09:31:03.606]                   options(future.plan = NULL)
[09:31:03.606]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.606]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.606]                 }
[09:31:03.606]                 ...future.workdir <- getwd()
[09:31:03.606]             }
[09:31:03.606]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.606]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.606]         }
[09:31:03.606]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.606]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.606]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.606]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.606]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.606]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.606]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.606]             base::names(...future.oldOptions))
[09:31:03.606]     }
[09:31:03.606]     if (FALSE) {
[09:31:03.606]     }
[09:31:03.606]     else {
[09:31:03.606]         if (TRUE) {
[09:31:03.606]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.606]                 open = "w")
[09:31:03.606]         }
[09:31:03.606]         else {
[09:31:03.606]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.606]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.606]         }
[09:31:03.606]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.606]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.606]             base::sink(type = "output", split = FALSE)
[09:31:03.606]             base::close(...future.stdout)
[09:31:03.606]         }, add = TRUE)
[09:31:03.606]     }
[09:31:03.606]     ...future.frame <- base::sys.nframe()
[09:31:03.606]     ...future.conditions <- base::list()
[09:31:03.606]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.606]     if (FALSE) {
[09:31:03.606]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.606]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.606]     }
[09:31:03.606]     ...future.result <- base::tryCatch({
[09:31:03.606]         base::withCallingHandlers({
[09:31:03.606]             ...future.value <- base::withVisible(base::local({
[09:31:03.606]                 if (ii%%2 == 0) 
[09:31:03.606]                   stop("Woops!")
[09:31:03.606]                 ii
[09:31:03.606]             }))
[09:31:03.606]             future::FutureResult(value = ...future.value$value, 
[09:31:03.606]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.606]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.606]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.606]                     ...future.globalenv.names))
[09:31:03.606]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.606]         }, condition = base::local({
[09:31:03.606]             c <- base::c
[09:31:03.606]             inherits <- base::inherits
[09:31:03.606]             invokeRestart <- base::invokeRestart
[09:31:03.606]             length <- base::length
[09:31:03.606]             list <- base::list
[09:31:03.606]             seq.int <- base::seq.int
[09:31:03.606]             signalCondition <- base::signalCondition
[09:31:03.606]             sys.calls <- base::sys.calls
[09:31:03.606]             `[[` <- base::`[[`
[09:31:03.606]             `+` <- base::`+`
[09:31:03.606]             `<<-` <- base::`<<-`
[09:31:03.606]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.606]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.606]                   3L)]
[09:31:03.606]             }
[09:31:03.606]             function(cond) {
[09:31:03.606]                 is_error <- inherits(cond, "error")
[09:31:03.606]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.606]                   NULL)
[09:31:03.606]                 if (is_error) {
[09:31:03.606]                   sessionInformation <- function() {
[09:31:03.606]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.606]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.606]                       search = base::search(), system = base::Sys.info())
[09:31:03.606]                   }
[09:31:03.606]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.606]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.606]                     cond$call), session = sessionInformation(), 
[09:31:03.606]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.606]                   signalCondition(cond)
[09:31:03.606]                 }
[09:31:03.606]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.606]                 "immediateCondition"))) {
[09:31:03.606]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.606]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.606]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.606]                   if (TRUE && !signal) {
[09:31:03.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.606]                     {
[09:31:03.606]                       inherits <- base::inherits
[09:31:03.606]                       invokeRestart <- base::invokeRestart
[09:31:03.606]                       is.null <- base::is.null
[09:31:03.606]                       muffled <- FALSE
[09:31:03.606]                       if (inherits(cond, "message")) {
[09:31:03.606]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.606]                         if (muffled) 
[09:31:03.606]                           invokeRestart("muffleMessage")
[09:31:03.606]                       }
[09:31:03.606]                       else if (inherits(cond, "warning")) {
[09:31:03.606]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.606]                         if (muffled) 
[09:31:03.606]                           invokeRestart("muffleWarning")
[09:31:03.606]                       }
[09:31:03.606]                       else if (inherits(cond, "condition")) {
[09:31:03.606]                         if (!is.null(pattern)) {
[09:31:03.606]                           computeRestarts <- base::computeRestarts
[09:31:03.606]                           grepl <- base::grepl
[09:31:03.606]                           restarts <- computeRestarts(cond)
[09:31:03.606]                           for (restart in restarts) {
[09:31:03.606]                             name <- restart$name
[09:31:03.606]                             if (is.null(name)) 
[09:31:03.606]                               next
[09:31:03.606]                             if (!grepl(pattern, name)) 
[09:31:03.606]                               next
[09:31:03.606]                             invokeRestart(restart)
[09:31:03.606]                             muffled <- TRUE
[09:31:03.606]                             break
[09:31:03.606]                           }
[09:31:03.606]                         }
[09:31:03.606]                       }
[09:31:03.606]                       invisible(muffled)
[09:31:03.606]                     }
[09:31:03.606]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.606]                   }
[09:31:03.606]                 }
[09:31:03.606]                 else {
[09:31:03.606]                   if (TRUE) {
[09:31:03.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.606]                     {
[09:31:03.606]                       inherits <- base::inherits
[09:31:03.606]                       invokeRestart <- base::invokeRestart
[09:31:03.606]                       is.null <- base::is.null
[09:31:03.606]                       muffled <- FALSE
[09:31:03.606]                       if (inherits(cond, "message")) {
[09:31:03.606]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.606]                         if (muffled) 
[09:31:03.606]                           invokeRestart("muffleMessage")
[09:31:03.606]                       }
[09:31:03.606]                       else if (inherits(cond, "warning")) {
[09:31:03.606]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.606]                         if (muffled) 
[09:31:03.606]                           invokeRestart("muffleWarning")
[09:31:03.606]                       }
[09:31:03.606]                       else if (inherits(cond, "condition")) {
[09:31:03.606]                         if (!is.null(pattern)) {
[09:31:03.606]                           computeRestarts <- base::computeRestarts
[09:31:03.606]                           grepl <- base::grepl
[09:31:03.606]                           restarts <- computeRestarts(cond)
[09:31:03.606]                           for (restart in restarts) {
[09:31:03.606]                             name <- restart$name
[09:31:03.606]                             if (is.null(name)) 
[09:31:03.606]                               next
[09:31:03.606]                             if (!grepl(pattern, name)) 
[09:31:03.606]                               next
[09:31:03.606]                             invokeRestart(restart)
[09:31:03.606]                             muffled <- TRUE
[09:31:03.606]                             break
[09:31:03.606]                           }
[09:31:03.606]                         }
[09:31:03.606]                       }
[09:31:03.606]                       invisible(muffled)
[09:31:03.606]                     }
[09:31:03.606]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.606]                   }
[09:31:03.606]                 }
[09:31:03.606]             }
[09:31:03.606]         }))
[09:31:03.606]     }, error = function(ex) {
[09:31:03.606]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.606]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.606]                 ...future.rng), started = ...future.startTime, 
[09:31:03.606]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.606]             version = "1.8"), class = "FutureResult")
[09:31:03.606]     }, finally = {
[09:31:03.606]         if (!identical(...future.workdir, getwd())) 
[09:31:03.606]             setwd(...future.workdir)
[09:31:03.606]         {
[09:31:03.606]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.606]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.606]             }
[09:31:03.606]             base::options(...future.oldOptions)
[09:31:03.606]             if (.Platform$OS.type == "windows") {
[09:31:03.606]                 old_names <- names(...future.oldEnvVars)
[09:31:03.606]                 envs <- base::Sys.getenv()
[09:31:03.606]                 names <- names(envs)
[09:31:03.606]                 common <- intersect(names, old_names)
[09:31:03.606]                 added <- setdiff(names, old_names)
[09:31:03.606]                 removed <- setdiff(old_names, names)
[09:31:03.606]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.606]                   envs[common]]
[09:31:03.606]                 NAMES <- toupper(changed)
[09:31:03.606]                 args <- list()
[09:31:03.606]                 for (kk in seq_along(NAMES)) {
[09:31:03.606]                   name <- changed[[kk]]
[09:31:03.606]                   NAME <- NAMES[[kk]]
[09:31:03.606]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.606]                     next
[09:31:03.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.606]                 }
[09:31:03.606]                 NAMES <- toupper(added)
[09:31:03.606]                 for (kk in seq_along(NAMES)) {
[09:31:03.606]                   name <- added[[kk]]
[09:31:03.606]                   NAME <- NAMES[[kk]]
[09:31:03.606]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.606]                     next
[09:31:03.606]                   args[[name]] <- ""
[09:31:03.606]                 }
[09:31:03.606]                 NAMES <- toupper(removed)
[09:31:03.606]                 for (kk in seq_along(NAMES)) {
[09:31:03.606]                   name <- removed[[kk]]
[09:31:03.606]                   NAME <- NAMES[[kk]]
[09:31:03.606]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.606]                     next
[09:31:03.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.606]                 }
[09:31:03.606]                 if (length(args) > 0) 
[09:31:03.606]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.606]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.606]             }
[09:31:03.606]             else {
[09:31:03.606]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.606]             }
[09:31:03.606]             {
[09:31:03.606]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.606]                   0L) {
[09:31:03.606]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.606]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.606]                   base::options(opts)
[09:31:03.606]                 }
[09:31:03.606]                 {
[09:31:03.606]                   {
[09:31:03.606]                     NULL
[09:31:03.606]                     RNGkind("Mersenne-Twister")
[09:31:03.606]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.606]                       inherits = FALSE)
[09:31:03.606]                   }
[09:31:03.606]                   options(future.plan = NULL)
[09:31:03.606]                   if (is.na(NA_character_)) 
[09:31:03.606]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.606]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.606]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.606]                     .init = FALSE)
[09:31:03.606]                 }
[09:31:03.606]             }
[09:31:03.606]         }
[09:31:03.606]     })
[09:31:03.606]     if (TRUE) {
[09:31:03.606]         base::sink(type = "output", split = FALSE)
[09:31:03.606]         if (TRUE) {
[09:31:03.606]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.606]         }
[09:31:03.606]         else {
[09:31:03.606]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.606]         }
[09:31:03.606]         base::close(...future.stdout)
[09:31:03.606]         ...future.stdout <- NULL
[09:31:03.606]     }
[09:31:03.606]     ...future.result$conditions <- ...future.conditions
[09:31:03.606]     ...future.result$finished <- base::Sys.time()
[09:31:03.606]     ...future.result
[09:31:03.606] }
[09:31:03.608] assign_globals() ...
[09:31:03.608] List of 1
[09:31:03.608]  $ ii: int 1
[09:31:03.608]  - attr(*, "where")=List of 1
[09:31:03.608]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:03.608]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.608]  - attr(*, "resolved")= logi FALSE
[09:31:03.608]  - attr(*, "total_size")= num 56
[09:31:03.608]  - attr(*, "already-done")= logi TRUE
[09:31:03.610] - copied ‘ii’ to environment
[09:31:03.610] assign_globals() ... done
[09:31:03.610] plan(): Setting new future strategy stack:
[09:31:03.611] List of future strategies:
[09:31:03.611] 1. sequential:
[09:31:03.611]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.611]    - tweaked: FALSE
[09:31:03.611]    - call: NULL
[09:31:03.611] plan(): nbrOfWorkers() = 1
[09:31:03.612] plan(): Setting new future strategy stack:
[09:31:03.612] List of future strategies:
[09:31:03.612] 1. sequential:
[09:31:03.612]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.612]    - tweaked: FALSE
[09:31:03.612]    - call: plan(strategy)
[09:31:03.612] plan(): nbrOfWorkers() = 1
[09:31:03.612] SequentialFuture started (and completed)
[09:31:03.612] - Launch lazy future ... done
[09:31:03.612] run() for ‘SequentialFuture’ ... done
[09:31:03.613] getGlobalsAndPackages() ...
[09:31:03.613] Searching for globals...
[09:31:03.614] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[09:31:03.614] Searching for globals ... DONE
[09:31:03.614] Resolving globals: FALSE
[09:31:03.615] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:03.615] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:03.615] - globals: [1] ‘ii’
[09:31:03.615] 
[09:31:03.617] getGlobalsAndPackages() ... DONE
[09:31:03.617] run() for ‘Future’ ...
[09:31:03.617] - state: ‘created’
[09:31:03.617] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.617] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.617] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.617]   - Field: ‘label’
[09:31:03.618]   - Field: ‘local’
[09:31:03.618]   - Field: ‘owner’
[09:31:03.618]   - Field: ‘envir’
[09:31:03.618]   - Field: ‘packages’
[09:31:03.618]   - Field: ‘gc’
[09:31:03.618]   - Field: ‘conditions’
[09:31:03.618]   - Field: ‘expr’
[09:31:03.618]   - Field: ‘uuid’
[09:31:03.618]   - Field: ‘seed’
[09:31:03.618]   - Field: ‘version’
[09:31:03.618]   - Field: ‘result’
[09:31:03.618]   - Field: ‘asynchronous’
[09:31:03.619]   - Field: ‘calls’
[09:31:03.619]   - Field: ‘globals’
[09:31:03.619]   - Field: ‘stdout’
[09:31:03.619]   - Field: ‘earlySignal’
[09:31:03.619]   - Field: ‘lazy’
[09:31:03.619]   - Field: ‘state’
[09:31:03.619] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.619] - Launch lazy future ...
[09:31:03.619] Packages needed by the future expression (n = 0): <none>
[09:31:03.619] Packages needed by future strategies (n = 0): <none>
[09:31:03.620] {
[09:31:03.620]     {
[09:31:03.620]         {
[09:31:03.620]             ...future.startTime <- base::Sys.time()
[09:31:03.620]             {
[09:31:03.620]                 {
[09:31:03.620]                   {
[09:31:03.620]                     base::local({
[09:31:03.620]                       has_future <- base::requireNamespace("future", 
[09:31:03.620]                         quietly = TRUE)
[09:31:03.620]                       if (has_future) {
[09:31:03.620]                         ns <- base::getNamespace("future")
[09:31:03.620]                         version <- ns[[".package"]][["version"]]
[09:31:03.620]                         if (is.null(version)) 
[09:31:03.620]                           version <- utils::packageVersion("future")
[09:31:03.620]                       }
[09:31:03.620]                       else {
[09:31:03.620]                         version <- NULL
[09:31:03.620]                       }
[09:31:03.620]                       if (!has_future || version < "1.8.0") {
[09:31:03.620]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.620]                           "", base::R.version$version.string), 
[09:31:03.620]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.620]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.620]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.620]                             "release", "version")], collapse = " "), 
[09:31:03.620]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.620]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.620]                           info)
[09:31:03.620]                         info <- base::paste(info, collapse = "; ")
[09:31:03.620]                         if (!has_future) {
[09:31:03.620]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.620]                             info)
[09:31:03.620]                         }
[09:31:03.620]                         else {
[09:31:03.620]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.620]                             info, version)
[09:31:03.620]                         }
[09:31:03.620]                         base::stop(msg)
[09:31:03.620]                       }
[09:31:03.620]                     })
[09:31:03.620]                   }
[09:31:03.620]                   ...future.strategy.old <- future::plan("list")
[09:31:03.620]                   options(future.plan = NULL)
[09:31:03.620]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.620]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.620]                 }
[09:31:03.620]                 ...future.workdir <- getwd()
[09:31:03.620]             }
[09:31:03.620]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.620]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.620]         }
[09:31:03.620]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.620]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.620]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.620]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.620]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.620]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.620]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.620]             base::names(...future.oldOptions))
[09:31:03.620]     }
[09:31:03.620]     if (FALSE) {
[09:31:03.620]     }
[09:31:03.620]     else {
[09:31:03.620]         if (TRUE) {
[09:31:03.620]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.620]                 open = "w")
[09:31:03.620]         }
[09:31:03.620]         else {
[09:31:03.620]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.620]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.620]         }
[09:31:03.620]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.620]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.620]             base::sink(type = "output", split = FALSE)
[09:31:03.620]             base::close(...future.stdout)
[09:31:03.620]         }, add = TRUE)
[09:31:03.620]     }
[09:31:03.620]     ...future.frame <- base::sys.nframe()
[09:31:03.620]     ...future.conditions <- base::list()
[09:31:03.620]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.620]     if (FALSE) {
[09:31:03.620]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.620]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.620]     }
[09:31:03.620]     ...future.result <- base::tryCatch({
[09:31:03.620]         base::withCallingHandlers({
[09:31:03.620]             ...future.value <- base::withVisible(base::local({
[09:31:03.620]                 if (ii%%2 == 0) 
[09:31:03.620]                   stop("Woops!")
[09:31:03.620]                 ii
[09:31:03.620]             }))
[09:31:03.620]             future::FutureResult(value = ...future.value$value, 
[09:31:03.620]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.620]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.620]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.620]                     ...future.globalenv.names))
[09:31:03.620]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.620]         }, condition = base::local({
[09:31:03.620]             c <- base::c
[09:31:03.620]             inherits <- base::inherits
[09:31:03.620]             invokeRestart <- base::invokeRestart
[09:31:03.620]             length <- base::length
[09:31:03.620]             list <- base::list
[09:31:03.620]             seq.int <- base::seq.int
[09:31:03.620]             signalCondition <- base::signalCondition
[09:31:03.620]             sys.calls <- base::sys.calls
[09:31:03.620]             `[[` <- base::`[[`
[09:31:03.620]             `+` <- base::`+`
[09:31:03.620]             `<<-` <- base::`<<-`
[09:31:03.620]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.620]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.620]                   3L)]
[09:31:03.620]             }
[09:31:03.620]             function(cond) {
[09:31:03.620]                 is_error <- inherits(cond, "error")
[09:31:03.620]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.620]                   NULL)
[09:31:03.620]                 if (is_error) {
[09:31:03.620]                   sessionInformation <- function() {
[09:31:03.620]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.620]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.620]                       search = base::search(), system = base::Sys.info())
[09:31:03.620]                   }
[09:31:03.620]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.620]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.620]                     cond$call), session = sessionInformation(), 
[09:31:03.620]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.620]                   signalCondition(cond)
[09:31:03.620]                 }
[09:31:03.620]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.620]                 "immediateCondition"))) {
[09:31:03.620]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.620]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.620]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.620]                   if (TRUE && !signal) {
[09:31:03.620]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.620]                     {
[09:31:03.620]                       inherits <- base::inherits
[09:31:03.620]                       invokeRestart <- base::invokeRestart
[09:31:03.620]                       is.null <- base::is.null
[09:31:03.620]                       muffled <- FALSE
[09:31:03.620]                       if (inherits(cond, "message")) {
[09:31:03.620]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.620]                         if (muffled) 
[09:31:03.620]                           invokeRestart("muffleMessage")
[09:31:03.620]                       }
[09:31:03.620]                       else if (inherits(cond, "warning")) {
[09:31:03.620]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.620]                         if (muffled) 
[09:31:03.620]                           invokeRestart("muffleWarning")
[09:31:03.620]                       }
[09:31:03.620]                       else if (inherits(cond, "condition")) {
[09:31:03.620]                         if (!is.null(pattern)) {
[09:31:03.620]                           computeRestarts <- base::computeRestarts
[09:31:03.620]                           grepl <- base::grepl
[09:31:03.620]                           restarts <- computeRestarts(cond)
[09:31:03.620]                           for (restart in restarts) {
[09:31:03.620]                             name <- restart$name
[09:31:03.620]                             if (is.null(name)) 
[09:31:03.620]                               next
[09:31:03.620]                             if (!grepl(pattern, name)) 
[09:31:03.620]                               next
[09:31:03.620]                             invokeRestart(restart)
[09:31:03.620]                             muffled <- TRUE
[09:31:03.620]                             break
[09:31:03.620]                           }
[09:31:03.620]                         }
[09:31:03.620]                       }
[09:31:03.620]                       invisible(muffled)
[09:31:03.620]                     }
[09:31:03.620]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.620]                   }
[09:31:03.620]                 }
[09:31:03.620]                 else {
[09:31:03.620]                   if (TRUE) {
[09:31:03.620]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.620]                     {
[09:31:03.620]                       inherits <- base::inherits
[09:31:03.620]                       invokeRestart <- base::invokeRestart
[09:31:03.620]                       is.null <- base::is.null
[09:31:03.620]                       muffled <- FALSE
[09:31:03.620]                       if (inherits(cond, "message")) {
[09:31:03.620]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.620]                         if (muffled) 
[09:31:03.620]                           invokeRestart("muffleMessage")
[09:31:03.620]                       }
[09:31:03.620]                       else if (inherits(cond, "warning")) {
[09:31:03.620]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.620]                         if (muffled) 
[09:31:03.620]                           invokeRestart("muffleWarning")
[09:31:03.620]                       }
[09:31:03.620]                       else if (inherits(cond, "condition")) {
[09:31:03.620]                         if (!is.null(pattern)) {
[09:31:03.620]                           computeRestarts <- base::computeRestarts
[09:31:03.620]                           grepl <- base::grepl
[09:31:03.620]                           restarts <- computeRestarts(cond)
[09:31:03.620]                           for (restart in restarts) {
[09:31:03.620]                             name <- restart$name
[09:31:03.620]                             if (is.null(name)) 
[09:31:03.620]                               next
[09:31:03.620]                             if (!grepl(pattern, name)) 
[09:31:03.620]                               next
[09:31:03.620]                             invokeRestart(restart)
[09:31:03.620]                             muffled <- TRUE
[09:31:03.620]                             break
[09:31:03.620]                           }
[09:31:03.620]                         }
[09:31:03.620]                       }
[09:31:03.620]                       invisible(muffled)
[09:31:03.620]                     }
[09:31:03.620]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.620]                   }
[09:31:03.620]                 }
[09:31:03.620]             }
[09:31:03.620]         }))
[09:31:03.620]     }, error = function(ex) {
[09:31:03.620]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.620]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.620]                 ...future.rng), started = ...future.startTime, 
[09:31:03.620]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.620]             version = "1.8"), class = "FutureResult")
[09:31:03.620]     }, finally = {
[09:31:03.620]         if (!identical(...future.workdir, getwd())) 
[09:31:03.620]             setwd(...future.workdir)
[09:31:03.620]         {
[09:31:03.620]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.620]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.620]             }
[09:31:03.620]             base::options(...future.oldOptions)
[09:31:03.620]             if (.Platform$OS.type == "windows") {
[09:31:03.620]                 old_names <- names(...future.oldEnvVars)
[09:31:03.620]                 envs <- base::Sys.getenv()
[09:31:03.620]                 names <- names(envs)
[09:31:03.620]                 common <- intersect(names, old_names)
[09:31:03.620]                 added <- setdiff(names, old_names)
[09:31:03.620]                 removed <- setdiff(old_names, names)
[09:31:03.620]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.620]                   envs[common]]
[09:31:03.620]                 NAMES <- toupper(changed)
[09:31:03.620]                 args <- list()
[09:31:03.620]                 for (kk in seq_along(NAMES)) {
[09:31:03.620]                   name <- changed[[kk]]
[09:31:03.620]                   NAME <- NAMES[[kk]]
[09:31:03.620]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.620]                     next
[09:31:03.620]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.620]                 }
[09:31:03.620]                 NAMES <- toupper(added)
[09:31:03.620]                 for (kk in seq_along(NAMES)) {
[09:31:03.620]                   name <- added[[kk]]
[09:31:03.620]                   NAME <- NAMES[[kk]]
[09:31:03.620]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.620]                     next
[09:31:03.620]                   args[[name]] <- ""
[09:31:03.620]                 }
[09:31:03.620]                 NAMES <- toupper(removed)
[09:31:03.620]                 for (kk in seq_along(NAMES)) {
[09:31:03.620]                   name <- removed[[kk]]
[09:31:03.620]                   NAME <- NAMES[[kk]]
[09:31:03.620]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.620]                     next
[09:31:03.620]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.620]                 }
[09:31:03.620]                 if (length(args) > 0) 
[09:31:03.620]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.620]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.620]             }
[09:31:03.620]             else {
[09:31:03.620]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.620]             }
[09:31:03.620]             {
[09:31:03.620]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.620]                   0L) {
[09:31:03.620]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.620]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.620]                   base::options(opts)
[09:31:03.620]                 }
[09:31:03.620]                 {
[09:31:03.620]                   {
[09:31:03.620]                     NULL
[09:31:03.620]                     RNGkind("Mersenne-Twister")
[09:31:03.620]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.620]                       inherits = FALSE)
[09:31:03.620]                   }
[09:31:03.620]                   options(future.plan = NULL)
[09:31:03.620]                   if (is.na(NA_character_)) 
[09:31:03.620]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.620]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.620]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.620]                     .init = FALSE)
[09:31:03.620]                 }
[09:31:03.620]             }
[09:31:03.620]         }
[09:31:03.620]     })
[09:31:03.620]     if (TRUE) {
[09:31:03.620]         base::sink(type = "output", split = FALSE)
[09:31:03.620]         if (TRUE) {
[09:31:03.620]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.620]         }
[09:31:03.620]         else {
[09:31:03.620]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.620]         }
[09:31:03.620]         base::close(...future.stdout)
[09:31:03.620]         ...future.stdout <- NULL
[09:31:03.620]     }
[09:31:03.620]     ...future.result$conditions <- ...future.conditions
[09:31:03.620]     ...future.result$finished <- base::Sys.time()
[09:31:03.620]     ...future.result
[09:31:03.620] }
[09:31:03.621] assign_globals() ...
[09:31:03.621] List of 1
[09:31:03.621]  $ ii: int 2
[09:31:03.621]  - attr(*, "where")=List of 1
[09:31:03.621]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:03.621]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.621]  - attr(*, "resolved")= logi FALSE
[09:31:03.621]  - attr(*, "total_size")= num 56
[09:31:03.621]  - attr(*, "already-done")= logi TRUE
[09:31:03.624] - copied ‘ii’ to environment
[09:31:03.624] assign_globals() ... done
[09:31:03.624] plan(): Setting new future strategy stack:
[09:31:03.624] List of future strategies:
[09:31:03.624] 1. sequential:
[09:31:03.624]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.624]    - tweaked: FALSE
[09:31:03.624]    - call: NULL
[09:31:03.625] plan(): nbrOfWorkers() = 1
[09:31:03.625] plan(): Setting new future strategy stack:
[09:31:03.625] List of future strategies:
[09:31:03.625] 1. sequential:
[09:31:03.625]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.625]    - tweaked: FALSE
[09:31:03.625]    - call: plan(strategy)
[09:31:03.626] plan(): nbrOfWorkers() = 1
[09:31:03.626] SequentialFuture started (and completed)
[09:31:03.626] signalConditions() ...
[09:31:03.626]  - include = ‘immediateCondition’
[09:31:03.626]  - exclude = 
[09:31:03.626]  - resignal = FALSE
[09:31:03.626]  - Number of conditions: 1
[09:31:03.627] signalConditions() ... done
[09:31:03.627] - Launch lazy future ... done
[09:31:03.627] run() for ‘SequentialFuture’ ... done
[09:31:03.627] getGlobalsAndPackages() ...
[09:31:03.627] Searching for globals...
[09:31:03.628] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[09:31:03.629] Searching for globals ... DONE
[09:31:03.629] Resolving globals: FALSE
[09:31:03.629] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:03.629] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:03.629] - globals: [1] ‘ii’
[09:31:03.630] 
[09:31:03.630] getGlobalsAndPackages() ... DONE
[09:31:03.630] run() for ‘Future’ ...
[09:31:03.630] - state: ‘created’
[09:31:03.630] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.630] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.630] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.631]   - Field: ‘label’
[09:31:03.631]   - Field: ‘local’
[09:31:03.631]   - Field: ‘owner’
[09:31:03.631]   - Field: ‘envir’
[09:31:03.631]   - Field: ‘packages’
[09:31:03.631]   - Field: ‘gc’
[09:31:03.631]   - Field: ‘conditions’
[09:31:03.631]   - Field: ‘expr’
[09:31:03.631]   - Field: ‘uuid’
[09:31:03.631]   - Field: ‘seed’
[09:31:03.631]   - Field: ‘version’
[09:31:03.631]   - Field: ‘result’
[09:31:03.632]   - Field: ‘asynchronous’
[09:31:03.632]   - Field: ‘calls’
[09:31:03.632]   - Field: ‘globals’
[09:31:03.632]   - Field: ‘stdout’
[09:31:03.632]   - Field: ‘earlySignal’
[09:31:03.632]   - Field: ‘lazy’
[09:31:03.632]   - Field: ‘state’
[09:31:03.632] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.632] - Launch lazy future ...
[09:31:03.632] Packages needed by the future expression (n = 0): <none>
[09:31:03.633] Packages needed by future strategies (n = 0): <none>
[09:31:03.633] {
[09:31:03.633]     {
[09:31:03.633]         {
[09:31:03.633]             ...future.startTime <- base::Sys.time()
[09:31:03.633]             {
[09:31:03.633]                 {
[09:31:03.633]                   {
[09:31:03.633]                     base::local({
[09:31:03.633]                       has_future <- base::requireNamespace("future", 
[09:31:03.633]                         quietly = TRUE)
[09:31:03.633]                       if (has_future) {
[09:31:03.633]                         ns <- base::getNamespace("future")
[09:31:03.633]                         version <- ns[[".package"]][["version"]]
[09:31:03.633]                         if (is.null(version)) 
[09:31:03.633]                           version <- utils::packageVersion("future")
[09:31:03.633]                       }
[09:31:03.633]                       else {
[09:31:03.633]                         version <- NULL
[09:31:03.633]                       }
[09:31:03.633]                       if (!has_future || version < "1.8.0") {
[09:31:03.633]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.633]                           "", base::R.version$version.string), 
[09:31:03.633]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.633]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.633]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.633]                             "release", "version")], collapse = " "), 
[09:31:03.633]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.633]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.633]                           info)
[09:31:03.633]                         info <- base::paste(info, collapse = "; ")
[09:31:03.633]                         if (!has_future) {
[09:31:03.633]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.633]                             info)
[09:31:03.633]                         }
[09:31:03.633]                         else {
[09:31:03.633]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.633]                             info, version)
[09:31:03.633]                         }
[09:31:03.633]                         base::stop(msg)
[09:31:03.633]                       }
[09:31:03.633]                     })
[09:31:03.633]                   }
[09:31:03.633]                   ...future.strategy.old <- future::plan("list")
[09:31:03.633]                   options(future.plan = NULL)
[09:31:03.633]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.633]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.633]                 }
[09:31:03.633]                 ...future.workdir <- getwd()
[09:31:03.633]             }
[09:31:03.633]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.633]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.633]         }
[09:31:03.633]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.633]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.633]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.633]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.633]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.633]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.633]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.633]             base::names(...future.oldOptions))
[09:31:03.633]     }
[09:31:03.633]     if (FALSE) {
[09:31:03.633]     }
[09:31:03.633]     else {
[09:31:03.633]         if (TRUE) {
[09:31:03.633]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.633]                 open = "w")
[09:31:03.633]         }
[09:31:03.633]         else {
[09:31:03.633]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.633]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.633]         }
[09:31:03.633]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.633]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.633]             base::sink(type = "output", split = FALSE)
[09:31:03.633]             base::close(...future.stdout)
[09:31:03.633]         }, add = TRUE)
[09:31:03.633]     }
[09:31:03.633]     ...future.frame <- base::sys.nframe()
[09:31:03.633]     ...future.conditions <- base::list()
[09:31:03.633]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.633]     if (FALSE) {
[09:31:03.633]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.633]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.633]     }
[09:31:03.633]     ...future.result <- base::tryCatch({
[09:31:03.633]         base::withCallingHandlers({
[09:31:03.633]             ...future.value <- base::withVisible(base::local({
[09:31:03.633]                 if (ii%%2 == 0) 
[09:31:03.633]                   stop("Woops!")
[09:31:03.633]                 ii
[09:31:03.633]             }))
[09:31:03.633]             future::FutureResult(value = ...future.value$value, 
[09:31:03.633]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.633]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.633]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.633]                     ...future.globalenv.names))
[09:31:03.633]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.633]         }, condition = base::local({
[09:31:03.633]             c <- base::c
[09:31:03.633]             inherits <- base::inherits
[09:31:03.633]             invokeRestart <- base::invokeRestart
[09:31:03.633]             length <- base::length
[09:31:03.633]             list <- base::list
[09:31:03.633]             seq.int <- base::seq.int
[09:31:03.633]             signalCondition <- base::signalCondition
[09:31:03.633]             sys.calls <- base::sys.calls
[09:31:03.633]             `[[` <- base::`[[`
[09:31:03.633]             `+` <- base::`+`
[09:31:03.633]             `<<-` <- base::`<<-`
[09:31:03.633]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.633]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.633]                   3L)]
[09:31:03.633]             }
[09:31:03.633]             function(cond) {
[09:31:03.633]                 is_error <- inherits(cond, "error")
[09:31:03.633]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.633]                   NULL)
[09:31:03.633]                 if (is_error) {
[09:31:03.633]                   sessionInformation <- function() {
[09:31:03.633]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.633]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.633]                       search = base::search(), system = base::Sys.info())
[09:31:03.633]                   }
[09:31:03.633]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.633]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.633]                     cond$call), session = sessionInformation(), 
[09:31:03.633]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.633]                   signalCondition(cond)
[09:31:03.633]                 }
[09:31:03.633]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.633]                 "immediateCondition"))) {
[09:31:03.633]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.633]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.633]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.633]                   if (TRUE && !signal) {
[09:31:03.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.633]                     {
[09:31:03.633]                       inherits <- base::inherits
[09:31:03.633]                       invokeRestart <- base::invokeRestart
[09:31:03.633]                       is.null <- base::is.null
[09:31:03.633]                       muffled <- FALSE
[09:31:03.633]                       if (inherits(cond, "message")) {
[09:31:03.633]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.633]                         if (muffled) 
[09:31:03.633]                           invokeRestart("muffleMessage")
[09:31:03.633]                       }
[09:31:03.633]                       else if (inherits(cond, "warning")) {
[09:31:03.633]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.633]                         if (muffled) 
[09:31:03.633]                           invokeRestart("muffleWarning")
[09:31:03.633]                       }
[09:31:03.633]                       else if (inherits(cond, "condition")) {
[09:31:03.633]                         if (!is.null(pattern)) {
[09:31:03.633]                           computeRestarts <- base::computeRestarts
[09:31:03.633]                           grepl <- base::grepl
[09:31:03.633]                           restarts <- computeRestarts(cond)
[09:31:03.633]                           for (restart in restarts) {
[09:31:03.633]                             name <- restart$name
[09:31:03.633]                             if (is.null(name)) 
[09:31:03.633]                               next
[09:31:03.633]                             if (!grepl(pattern, name)) 
[09:31:03.633]                               next
[09:31:03.633]                             invokeRestart(restart)
[09:31:03.633]                             muffled <- TRUE
[09:31:03.633]                             break
[09:31:03.633]                           }
[09:31:03.633]                         }
[09:31:03.633]                       }
[09:31:03.633]                       invisible(muffled)
[09:31:03.633]                     }
[09:31:03.633]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.633]                   }
[09:31:03.633]                 }
[09:31:03.633]                 else {
[09:31:03.633]                   if (TRUE) {
[09:31:03.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.633]                     {
[09:31:03.633]                       inherits <- base::inherits
[09:31:03.633]                       invokeRestart <- base::invokeRestart
[09:31:03.633]                       is.null <- base::is.null
[09:31:03.633]                       muffled <- FALSE
[09:31:03.633]                       if (inherits(cond, "message")) {
[09:31:03.633]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.633]                         if (muffled) 
[09:31:03.633]                           invokeRestart("muffleMessage")
[09:31:03.633]                       }
[09:31:03.633]                       else if (inherits(cond, "warning")) {
[09:31:03.633]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.633]                         if (muffled) 
[09:31:03.633]                           invokeRestart("muffleWarning")
[09:31:03.633]                       }
[09:31:03.633]                       else if (inherits(cond, "condition")) {
[09:31:03.633]                         if (!is.null(pattern)) {
[09:31:03.633]                           computeRestarts <- base::computeRestarts
[09:31:03.633]                           grepl <- base::grepl
[09:31:03.633]                           restarts <- computeRestarts(cond)
[09:31:03.633]                           for (restart in restarts) {
[09:31:03.633]                             name <- restart$name
[09:31:03.633]                             if (is.null(name)) 
[09:31:03.633]                               next
[09:31:03.633]                             if (!grepl(pattern, name)) 
[09:31:03.633]                               next
[09:31:03.633]                             invokeRestart(restart)
[09:31:03.633]                             muffled <- TRUE
[09:31:03.633]                             break
[09:31:03.633]                           }
[09:31:03.633]                         }
[09:31:03.633]                       }
[09:31:03.633]                       invisible(muffled)
[09:31:03.633]                     }
[09:31:03.633]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.633]                   }
[09:31:03.633]                 }
[09:31:03.633]             }
[09:31:03.633]         }))
[09:31:03.633]     }, error = function(ex) {
[09:31:03.633]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.633]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.633]                 ...future.rng), started = ...future.startTime, 
[09:31:03.633]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.633]             version = "1.8"), class = "FutureResult")
[09:31:03.633]     }, finally = {
[09:31:03.633]         if (!identical(...future.workdir, getwd())) 
[09:31:03.633]             setwd(...future.workdir)
[09:31:03.633]         {
[09:31:03.633]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.633]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.633]             }
[09:31:03.633]             base::options(...future.oldOptions)
[09:31:03.633]             if (.Platform$OS.type == "windows") {
[09:31:03.633]                 old_names <- names(...future.oldEnvVars)
[09:31:03.633]                 envs <- base::Sys.getenv()
[09:31:03.633]                 names <- names(envs)
[09:31:03.633]                 common <- intersect(names, old_names)
[09:31:03.633]                 added <- setdiff(names, old_names)
[09:31:03.633]                 removed <- setdiff(old_names, names)
[09:31:03.633]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.633]                   envs[common]]
[09:31:03.633]                 NAMES <- toupper(changed)
[09:31:03.633]                 args <- list()
[09:31:03.633]                 for (kk in seq_along(NAMES)) {
[09:31:03.633]                   name <- changed[[kk]]
[09:31:03.633]                   NAME <- NAMES[[kk]]
[09:31:03.633]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.633]                     next
[09:31:03.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.633]                 }
[09:31:03.633]                 NAMES <- toupper(added)
[09:31:03.633]                 for (kk in seq_along(NAMES)) {
[09:31:03.633]                   name <- added[[kk]]
[09:31:03.633]                   NAME <- NAMES[[kk]]
[09:31:03.633]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.633]                     next
[09:31:03.633]                   args[[name]] <- ""
[09:31:03.633]                 }
[09:31:03.633]                 NAMES <- toupper(removed)
[09:31:03.633]                 for (kk in seq_along(NAMES)) {
[09:31:03.633]                   name <- removed[[kk]]
[09:31:03.633]                   NAME <- NAMES[[kk]]
[09:31:03.633]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.633]                     next
[09:31:03.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.633]                 }
[09:31:03.633]                 if (length(args) > 0) 
[09:31:03.633]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.633]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.633]             }
[09:31:03.633]             else {
[09:31:03.633]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.633]             }
[09:31:03.633]             {
[09:31:03.633]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.633]                   0L) {
[09:31:03.633]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.633]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.633]                   base::options(opts)
[09:31:03.633]                 }
[09:31:03.633]                 {
[09:31:03.633]                   {
[09:31:03.633]                     NULL
[09:31:03.633]                     RNGkind("Mersenne-Twister")
[09:31:03.633]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.633]                       inherits = FALSE)
[09:31:03.633]                   }
[09:31:03.633]                   options(future.plan = NULL)
[09:31:03.633]                   if (is.na(NA_character_)) 
[09:31:03.633]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.633]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.633]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.633]                     .init = FALSE)
[09:31:03.633]                 }
[09:31:03.633]             }
[09:31:03.633]         }
[09:31:03.633]     })
[09:31:03.633]     if (TRUE) {
[09:31:03.633]         base::sink(type = "output", split = FALSE)
[09:31:03.633]         if (TRUE) {
[09:31:03.633]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.633]         }
[09:31:03.633]         else {
[09:31:03.633]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.633]         }
[09:31:03.633]         base::close(...future.stdout)
[09:31:03.633]         ...future.stdout <- NULL
[09:31:03.633]     }
[09:31:03.633]     ...future.result$conditions <- ...future.conditions
[09:31:03.633]     ...future.result$finished <- base::Sys.time()
[09:31:03.633]     ...future.result
[09:31:03.633] }
[09:31:03.634] assign_globals() ...
[09:31:03.635] List of 1
[09:31:03.635]  $ ii: int 3
[09:31:03.635]  - attr(*, "where")=List of 1
[09:31:03.635]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:03.635]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.635]  - attr(*, "resolved")= logi FALSE
[09:31:03.635]  - attr(*, "total_size")= num 56
[09:31:03.635]  - attr(*, "already-done")= logi TRUE
[09:31:03.637] - copied ‘ii’ to environment
[09:31:03.637] assign_globals() ... done
[09:31:03.637] plan(): Setting new future strategy stack:
[09:31:03.637] List of future strategies:
[09:31:03.637] 1. sequential:
[09:31:03.637]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.637]    - tweaked: FALSE
[09:31:03.637]    - call: NULL
[09:31:03.638] plan(): nbrOfWorkers() = 1
[09:31:03.638] plan(): Setting new future strategy stack:
[09:31:03.638] List of future strategies:
[09:31:03.638] 1. sequential:
[09:31:03.638]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.638]    - tweaked: FALSE
[09:31:03.638]    - call: plan(strategy)
[09:31:03.639] plan(): nbrOfWorkers() = 1
[09:31:03.639] SequentialFuture started (and completed)
[09:31:03.639] - Launch lazy future ... done
[09:31:03.639] run() for ‘SequentialFuture’ ... done
[09:31:03.640] signalConditions() ...
[09:31:03.640]  - include = ‘immediateCondition’
[09:31:03.640]  - exclude = 
[09:31:03.640]  - resignal = FALSE
[09:31:03.640]  - Number of conditions: 1
[09:31:03.640] signalConditions() ... done
[09:31:03.640] Future state: ‘finished’
[09:31:03.640] signalConditions() ...
[09:31:03.640]  - include = ‘condition’
[09:31:03.640]  - exclude = ‘immediateCondition’
[09:31:03.640]  - resignal = TRUE
[09:31:03.641]  - Number of conditions: 1
[09:31:03.641]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:03.641] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[09:31:03.642] signalConditions() ...
[09:31:03.642]  - include = ‘immediateCondition’
[09:31:03.642]  - exclude = 
[09:31:03.642]  - resignal = FALSE
[09:31:03.642]  - Number of conditions: 1
[09:31:03.642] signalConditions() ... done
[09:31:03.642] Future state: ‘finished’
[09:31:03.642] signalConditions() ...
[09:31:03.642]  - include = ‘condition’
[09:31:03.643]  - exclude = ‘immediateCondition’
[09:31:03.643]  - resignal = TRUE
[09:31:03.643]  - Number of conditions: 1
[09:31:03.643]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:03.643] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[09:31:03.643] signalConditions() ...
[09:31:03.644]  - include = ‘immediateCondition’
[09:31:03.644]  - exclude = 
[09:31:03.645]  - resignal = FALSE
[09:31:03.645]  - Number of conditions: 1
[09:31:03.645] signalConditions() ... done
[09:31:03.645] Future state: ‘finished’
[09:31:03.645] signalConditions() ...
[09:31:03.645]  - include = ‘condition’
[09:31:03.645]  - exclude = ‘immediateCondition’
[09:31:03.645]  - resignal = TRUE
[09:31:03.645]  - Number of conditions: 1
[09:31:03.645]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:03.645] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[09:31:03.646] getGlobalsAndPackages() ...
[09:31:03.646] Searching for globals...
[09:31:03.648] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[09:31:03.648] Searching for globals ... DONE
[09:31:03.648] Resolving globals: FALSE
[09:31:03.648] 
[09:31:03.648] 
[09:31:03.648] getGlobalsAndPackages() ... DONE
[09:31:03.649] run() for ‘Future’ ...
[09:31:03.649] - state: ‘created’
[09:31:03.649] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.649] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.649] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.649]   - Field: ‘label’
[09:31:03.649]   - Field: ‘local’
[09:31:03.649]   - Field: ‘owner’
[09:31:03.649]   - Field: ‘envir’
[09:31:03.650]   - Field: ‘packages’
[09:31:03.650]   - Field: ‘gc’
[09:31:03.650]   - Field: ‘conditions’
[09:31:03.650]   - Field: ‘expr’
[09:31:03.650]   - Field: ‘uuid’
[09:31:03.650]   - Field: ‘seed’
[09:31:03.650]   - Field: ‘version’
[09:31:03.650]   - Field: ‘result’
[09:31:03.650]   - Field: ‘asynchronous’
[09:31:03.650]   - Field: ‘calls’
[09:31:03.650]   - Field: ‘globals’
[09:31:03.650]   - Field: ‘stdout’
[09:31:03.651]   - Field: ‘earlySignal’
[09:31:03.651]   - Field: ‘lazy’
[09:31:03.651]   - Field: ‘state’
[09:31:03.651] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.651] - Launch lazy future ...
[09:31:03.651] Packages needed by the future expression (n = 0): <none>
[09:31:03.651] Packages needed by future strategies (n = 0): <none>
[09:31:03.652] {
[09:31:03.652]     {
[09:31:03.652]         {
[09:31:03.652]             ...future.startTime <- base::Sys.time()
[09:31:03.652]             {
[09:31:03.652]                 {
[09:31:03.652]                   {
[09:31:03.652]                     base::local({
[09:31:03.652]                       has_future <- base::requireNamespace("future", 
[09:31:03.652]                         quietly = TRUE)
[09:31:03.652]                       if (has_future) {
[09:31:03.652]                         ns <- base::getNamespace("future")
[09:31:03.652]                         version <- ns[[".package"]][["version"]]
[09:31:03.652]                         if (is.null(version)) 
[09:31:03.652]                           version <- utils::packageVersion("future")
[09:31:03.652]                       }
[09:31:03.652]                       else {
[09:31:03.652]                         version <- NULL
[09:31:03.652]                       }
[09:31:03.652]                       if (!has_future || version < "1.8.0") {
[09:31:03.652]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.652]                           "", base::R.version$version.string), 
[09:31:03.652]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.652]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.652]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.652]                             "release", "version")], collapse = " "), 
[09:31:03.652]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.652]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.652]                           info)
[09:31:03.652]                         info <- base::paste(info, collapse = "; ")
[09:31:03.652]                         if (!has_future) {
[09:31:03.652]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.652]                             info)
[09:31:03.652]                         }
[09:31:03.652]                         else {
[09:31:03.652]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.652]                             info, version)
[09:31:03.652]                         }
[09:31:03.652]                         base::stop(msg)
[09:31:03.652]                       }
[09:31:03.652]                     })
[09:31:03.652]                   }
[09:31:03.652]                   ...future.strategy.old <- future::plan("list")
[09:31:03.652]                   options(future.plan = NULL)
[09:31:03.652]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.652]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.652]                 }
[09:31:03.652]                 ...future.workdir <- getwd()
[09:31:03.652]             }
[09:31:03.652]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.652]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.652]         }
[09:31:03.652]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.652]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.652]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.652]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.652]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.652]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.652]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.652]             base::names(...future.oldOptions))
[09:31:03.652]     }
[09:31:03.652]     if (FALSE) {
[09:31:03.652]     }
[09:31:03.652]     else {
[09:31:03.652]         if (TRUE) {
[09:31:03.652]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.652]                 open = "w")
[09:31:03.652]         }
[09:31:03.652]         else {
[09:31:03.652]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.652]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.652]         }
[09:31:03.652]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.652]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.652]             base::sink(type = "output", split = FALSE)
[09:31:03.652]             base::close(...future.stdout)
[09:31:03.652]         }, add = TRUE)
[09:31:03.652]     }
[09:31:03.652]     ...future.frame <- base::sys.nframe()
[09:31:03.652]     ...future.conditions <- base::list()
[09:31:03.652]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.652]     if (FALSE) {
[09:31:03.652]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.652]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.652]     }
[09:31:03.652]     ...future.result <- base::tryCatch({
[09:31:03.652]         base::withCallingHandlers({
[09:31:03.652]             ...future.value <- base::withVisible(base::local({
[09:31:03.652]                 cat("Processing: ")
[09:31:03.652]                 for (ii in 1:10) {
[09:31:03.652]                   cat(".")
[09:31:03.652]                 }
[09:31:03.652]                 cat(" [100%]\n")
[09:31:03.652]                 4
[09:31:03.652]             }))
[09:31:03.652]             future::FutureResult(value = ...future.value$value, 
[09:31:03.652]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.652]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.652]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.652]                     ...future.globalenv.names))
[09:31:03.652]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.652]         }, condition = base::local({
[09:31:03.652]             c <- base::c
[09:31:03.652]             inherits <- base::inherits
[09:31:03.652]             invokeRestart <- base::invokeRestart
[09:31:03.652]             length <- base::length
[09:31:03.652]             list <- base::list
[09:31:03.652]             seq.int <- base::seq.int
[09:31:03.652]             signalCondition <- base::signalCondition
[09:31:03.652]             sys.calls <- base::sys.calls
[09:31:03.652]             `[[` <- base::`[[`
[09:31:03.652]             `+` <- base::`+`
[09:31:03.652]             `<<-` <- base::`<<-`
[09:31:03.652]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.652]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.652]                   3L)]
[09:31:03.652]             }
[09:31:03.652]             function(cond) {
[09:31:03.652]                 is_error <- inherits(cond, "error")
[09:31:03.652]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.652]                   NULL)
[09:31:03.652]                 if (is_error) {
[09:31:03.652]                   sessionInformation <- function() {
[09:31:03.652]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.652]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.652]                       search = base::search(), system = base::Sys.info())
[09:31:03.652]                   }
[09:31:03.652]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.652]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.652]                     cond$call), session = sessionInformation(), 
[09:31:03.652]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.652]                   signalCondition(cond)
[09:31:03.652]                 }
[09:31:03.652]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.652]                 "immediateCondition"))) {
[09:31:03.652]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.652]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.652]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.652]                   if (TRUE && !signal) {
[09:31:03.652]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.652]                     {
[09:31:03.652]                       inherits <- base::inherits
[09:31:03.652]                       invokeRestart <- base::invokeRestart
[09:31:03.652]                       is.null <- base::is.null
[09:31:03.652]                       muffled <- FALSE
[09:31:03.652]                       if (inherits(cond, "message")) {
[09:31:03.652]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.652]                         if (muffled) 
[09:31:03.652]                           invokeRestart("muffleMessage")
[09:31:03.652]                       }
[09:31:03.652]                       else if (inherits(cond, "warning")) {
[09:31:03.652]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.652]                         if (muffled) 
[09:31:03.652]                           invokeRestart("muffleWarning")
[09:31:03.652]                       }
[09:31:03.652]                       else if (inherits(cond, "condition")) {
[09:31:03.652]                         if (!is.null(pattern)) {
[09:31:03.652]                           computeRestarts <- base::computeRestarts
[09:31:03.652]                           grepl <- base::grepl
[09:31:03.652]                           restarts <- computeRestarts(cond)
[09:31:03.652]                           for (restart in restarts) {
[09:31:03.652]                             name <- restart$name
[09:31:03.652]                             if (is.null(name)) 
[09:31:03.652]                               next
[09:31:03.652]                             if (!grepl(pattern, name)) 
[09:31:03.652]                               next
[09:31:03.652]                             invokeRestart(restart)
[09:31:03.652]                             muffled <- TRUE
[09:31:03.652]                             break
[09:31:03.652]                           }
[09:31:03.652]                         }
[09:31:03.652]                       }
[09:31:03.652]                       invisible(muffled)
[09:31:03.652]                     }
[09:31:03.652]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.652]                   }
[09:31:03.652]                 }
[09:31:03.652]                 else {
[09:31:03.652]                   if (TRUE) {
[09:31:03.652]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.652]                     {
[09:31:03.652]                       inherits <- base::inherits
[09:31:03.652]                       invokeRestart <- base::invokeRestart
[09:31:03.652]                       is.null <- base::is.null
[09:31:03.652]                       muffled <- FALSE
[09:31:03.652]                       if (inherits(cond, "message")) {
[09:31:03.652]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.652]                         if (muffled) 
[09:31:03.652]                           invokeRestart("muffleMessage")
[09:31:03.652]                       }
[09:31:03.652]                       else if (inherits(cond, "warning")) {
[09:31:03.652]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.652]                         if (muffled) 
[09:31:03.652]                           invokeRestart("muffleWarning")
[09:31:03.652]                       }
[09:31:03.652]                       else if (inherits(cond, "condition")) {
[09:31:03.652]                         if (!is.null(pattern)) {
[09:31:03.652]                           computeRestarts <- base::computeRestarts
[09:31:03.652]                           grepl <- base::grepl
[09:31:03.652]                           restarts <- computeRestarts(cond)
[09:31:03.652]                           for (restart in restarts) {
[09:31:03.652]                             name <- restart$name
[09:31:03.652]                             if (is.null(name)) 
[09:31:03.652]                               next
[09:31:03.652]                             if (!grepl(pattern, name)) 
[09:31:03.652]                               next
[09:31:03.652]                             invokeRestart(restart)
[09:31:03.652]                             muffled <- TRUE
[09:31:03.652]                             break
[09:31:03.652]                           }
[09:31:03.652]                         }
[09:31:03.652]                       }
[09:31:03.652]                       invisible(muffled)
[09:31:03.652]                     }
[09:31:03.652]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.652]                   }
[09:31:03.652]                 }
[09:31:03.652]             }
[09:31:03.652]         }))
[09:31:03.652]     }, error = function(ex) {
[09:31:03.652]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.652]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.652]                 ...future.rng), started = ...future.startTime, 
[09:31:03.652]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.652]             version = "1.8"), class = "FutureResult")
[09:31:03.652]     }, finally = {
[09:31:03.652]         if (!identical(...future.workdir, getwd())) 
[09:31:03.652]             setwd(...future.workdir)
[09:31:03.652]         {
[09:31:03.652]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.652]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.652]             }
[09:31:03.652]             base::options(...future.oldOptions)
[09:31:03.652]             if (.Platform$OS.type == "windows") {
[09:31:03.652]                 old_names <- names(...future.oldEnvVars)
[09:31:03.652]                 envs <- base::Sys.getenv()
[09:31:03.652]                 names <- names(envs)
[09:31:03.652]                 common <- intersect(names, old_names)
[09:31:03.652]                 added <- setdiff(names, old_names)
[09:31:03.652]                 removed <- setdiff(old_names, names)
[09:31:03.652]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.652]                   envs[common]]
[09:31:03.652]                 NAMES <- toupper(changed)
[09:31:03.652]                 args <- list()
[09:31:03.652]                 for (kk in seq_along(NAMES)) {
[09:31:03.652]                   name <- changed[[kk]]
[09:31:03.652]                   NAME <- NAMES[[kk]]
[09:31:03.652]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.652]                     next
[09:31:03.652]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.652]                 }
[09:31:03.652]                 NAMES <- toupper(added)
[09:31:03.652]                 for (kk in seq_along(NAMES)) {
[09:31:03.652]                   name <- added[[kk]]
[09:31:03.652]                   NAME <- NAMES[[kk]]
[09:31:03.652]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.652]                     next
[09:31:03.652]                   args[[name]] <- ""
[09:31:03.652]                 }
[09:31:03.652]                 NAMES <- toupper(removed)
[09:31:03.652]                 for (kk in seq_along(NAMES)) {
[09:31:03.652]                   name <- removed[[kk]]
[09:31:03.652]                   NAME <- NAMES[[kk]]
[09:31:03.652]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.652]                     next
[09:31:03.652]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.652]                 }
[09:31:03.652]                 if (length(args) > 0) 
[09:31:03.652]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.652]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.652]             }
[09:31:03.652]             else {
[09:31:03.652]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.652]             }
[09:31:03.652]             {
[09:31:03.652]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.652]                   0L) {
[09:31:03.652]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.652]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.652]                   base::options(opts)
[09:31:03.652]                 }
[09:31:03.652]                 {
[09:31:03.652]                   {
[09:31:03.652]                     NULL
[09:31:03.652]                     RNGkind("Mersenne-Twister")
[09:31:03.652]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.652]                       inherits = FALSE)
[09:31:03.652]                   }
[09:31:03.652]                   options(future.plan = NULL)
[09:31:03.652]                   if (is.na(NA_character_)) 
[09:31:03.652]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.652]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.652]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.652]                     .init = FALSE)
[09:31:03.652]                 }
[09:31:03.652]             }
[09:31:03.652]         }
[09:31:03.652]     })
[09:31:03.652]     if (TRUE) {
[09:31:03.652]         base::sink(type = "output", split = FALSE)
[09:31:03.652]         if (TRUE) {
[09:31:03.652]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.652]         }
[09:31:03.652]         else {
[09:31:03.652]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.652]         }
[09:31:03.652]         base::close(...future.stdout)
[09:31:03.652]         ...future.stdout <- NULL
[09:31:03.652]     }
[09:31:03.652]     ...future.result$conditions <- ...future.conditions
[09:31:03.652]     ...future.result$finished <- base::Sys.time()
[09:31:03.652]     ...future.result
[09:31:03.652] }
[09:31:03.653] plan(): Setting new future strategy stack:
[09:31:03.653] List of future strategies:
[09:31:03.653] 1. sequential:
[09:31:03.653]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.653]    - tweaked: FALSE
[09:31:03.653]    - call: NULL
[09:31:03.654] plan(): nbrOfWorkers() = 1
[09:31:03.654] plan(): Setting new future strategy stack:
[09:31:03.655] List of future strategies:
[09:31:03.655] 1. sequential:
[09:31:03.655]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.655]    - tweaked: FALSE
[09:31:03.655]    - call: plan(strategy)
[09:31:03.655] plan(): nbrOfWorkers() = 1
[09:31:03.655] SequentialFuture started (and completed)
[09:31:03.655] - Launch lazy future ... done
[09:31:03.655] run() for ‘SequentialFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[09:31:03.656] signalConditions() ...
[09:31:03.657]  - include = ‘immediateCondition’
[09:31:03.657]  - exclude = 
[09:31:03.657]  - resignal = FALSE
[09:31:03.657]  - Number of conditions: 1
[09:31:03.657] signalConditions() ... done
[09:31:03.657] Future state: ‘finished’
[09:31:03.657] signalConditions() ...
[09:31:03.657]  - include = ‘condition’
[09:31:03.657]  - exclude = ‘immediateCondition’
[09:31:03.657]  - resignal = TRUE
[09:31:03.657]  - Number of conditions: 1
[09:31:03.658]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:03.658] signalConditions() ... done
v3: <simpleError> (as expect)
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[09:31:03.658] getGlobalsAndPackages() ...
[09:31:03.658] Searching for globals...
[09:31:03.658] 
[09:31:03.659] Searching for globals ... DONE
[09:31:03.659] - globals: [0] <none>
[09:31:03.659] getGlobalsAndPackages() ... DONE
[09:31:03.659] run() for ‘Future’ ...
[09:31:03.659] - state: ‘created’
[09:31:03.659] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.659] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.659] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.660]   - Field: ‘label’
[09:31:03.660]   - Field: ‘local’
[09:31:03.660]   - Field: ‘owner’
[09:31:03.660]   - Field: ‘envir’
[09:31:03.660]   - Field: ‘packages’
[09:31:03.660]   - Field: ‘gc’
[09:31:03.660]   - Field: ‘conditions’
[09:31:03.660]   - Field: ‘expr’
[09:31:03.660]   - Field: ‘uuid’
[09:31:03.660]   - Field: ‘seed’
[09:31:03.660]   - Field: ‘version’
[09:31:03.661]   - Field: ‘result’
[09:31:03.661]   - Field: ‘asynchronous’
[09:31:03.661]   - Field: ‘calls’
[09:31:03.661]   - Field: ‘globals’
[09:31:03.661]   - Field: ‘stdout’
[09:31:03.661]   - Field: ‘earlySignal’
[09:31:03.661]   - Field: ‘lazy’
[09:31:03.661]   - Field: ‘state’
[09:31:03.661] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.661] - Launch lazy future ...
[09:31:03.661] Packages needed by the future expression (n = 0): <none>
[09:31:03.662] Packages needed by future strategies (n = 0): <none>
[09:31:03.662] {
[09:31:03.662]     {
[09:31:03.662]         {
[09:31:03.662]             ...future.startTime <- base::Sys.time()
[09:31:03.662]             {
[09:31:03.662]                 {
[09:31:03.662]                   {
[09:31:03.662]                     base::local({
[09:31:03.662]                       has_future <- base::requireNamespace("future", 
[09:31:03.662]                         quietly = TRUE)
[09:31:03.662]                       if (has_future) {
[09:31:03.662]                         ns <- base::getNamespace("future")
[09:31:03.662]                         version <- ns[[".package"]][["version"]]
[09:31:03.662]                         if (is.null(version)) 
[09:31:03.662]                           version <- utils::packageVersion("future")
[09:31:03.662]                       }
[09:31:03.662]                       else {
[09:31:03.662]                         version <- NULL
[09:31:03.662]                       }
[09:31:03.662]                       if (!has_future || version < "1.8.0") {
[09:31:03.662]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.662]                           "", base::R.version$version.string), 
[09:31:03.662]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.662]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.662]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.662]                             "release", "version")], collapse = " "), 
[09:31:03.662]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.662]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.662]                           info)
[09:31:03.662]                         info <- base::paste(info, collapse = "; ")
[09:31:03.662]                         if (!has_future) {
[09:31:03.662]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.662]                             info)
[09:31:03.662]                         }
[09:31:03.662]                         else {
[09:31:03.662]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.662]                             info, version)
[09:31:03.662]                         }
[09:31:03.662]                         base::stop(msg)
[09:31:03.662]                       }
[09:31:03.662]                     })
[09:31:03.662]                   }
[09:31:03.662]                   ...future.strategy.old <- future::plan("list")
[09:31:03.662]                   options(future.plan = NULL)
[09:31:03.662]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.662]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.662]                 }
[09:31:03.662]                 ...future.workdir <- getwd()
[09:31:03.662]             }
[09:31:03.662]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.662]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.662]         }
[09:31:03.662]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.662]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.662]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.662]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.662]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.662]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.662]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.662]             base::names(...future.oldOptions))
[09:31:03.662]     }
[09:31:03.662]     if (FALSE) {
[09:31:03.662]     }
[09:31:03.662]     else {
[09:31:03.662]         if (TRUE) {
[09:31:03.662]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.662]                 open = "w")
[09:31:03.662]         }
[09:31:03.662]         else {
[09:31:03.662]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.662]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.662]         }
[09:31:03.662]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.662]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.662]             base::sink(type = "output", split = FALSE)
[09:31:03.662]             base::close(...future.stdout)
[09:31:03.662]         }, add = TRUE)
[09:31:03.662]     }
[09:31:03.662]     ...future.frame <- base::sys.nframe()
[09:31:03.662]     ...future.conditions <- base::list()
[09:31:03.662]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.662]     if (FALSE) {
[09:31:03.662]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.662]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.662]     }
[09:31:03.662]     ...future.result <- base::tryCatch({
[09:31:03.662]         base::withCallingHandlers({
[09:31:03.662]             ...future.value <- base::withVisible(base::local(1))
[09:31:03.662]             future::FutureResult(value = ...future.value$value, 
[09:31:03.662]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.662]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.662]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.662]                     ...future.globalenv.names))
[09:31:03.662]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.662]         }, condition = base::local({
[09:31:03.662]             c <- base::c
[09:31:03.662]             inherits <- base::inherits
[09:31:03.662]             invokeRestart <- base::invokeRestart
[09:31:03.662]             length <- base::length
[09:31:03.662]             list <- base::list
[09:31:03.662]             seq.int <- base::seq.int
[09:31:03.662]             signalCondition <- base::signalCondition
[09:31:03.662]             sys.calls <- base::sys.calls
[09:31:03.662]             `[[` <- base::`[[`
[09:31:03.662]             `+` <- base::`+`
[09:31:03.662]             `<<-` <- base::`<<-`
[09:31:03.662]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.662]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.662]                   3L)]
[09:31:03.662]             }
[09:31:03.662]             function(cond) {
[09:31:03.662]                 is_error <- inherits(cond, "error")
[09:31:03.662]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.662]                   NULL)
[09:31:03.662]                 if (is_error) {
[09:31:03.662]                   sessionInformation <- function() {
[09:31:03.662]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.662]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.662]                       search = base::search(), system = base::Sys.info())
[09:31:03.662]                   }
[09:31:03.662]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.662]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.662]                     cond$call), session = sessionInformation(), 
[09:31:03.662]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.662]                   signalCondition(cond)
[09:31:03.662]                 }
[09:31:03.662]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.662]                 "immediateCondition"))) {
[09:31:03.662]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.662]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.662]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.662]                   if (TRUE && !signal) {
[09:31:03.662]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.662]                     {
[09:31:03.662]                       inherits <- base::inherits
[09:31:03.662]                       invokeRestart <- base::invokeRestart
[09:31:03.662]                       is.null <- base::is.null
[09:31:03.662]                       muffled <- FALSE
[09:31:03.662]                       if (inherits(cond, "message")) {
[09:31:03.662]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.662]                         if (muffled) 
[09:31:03.662]                           invokeRestart("muffleMessage")
[09:31:03.662]                       }
[09:31:03.662]                       else if (inherits(cond, "warning")) {
[09:31:03.662]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.662]                         if (muffled) 
[09:31:03.662]                           invokeRestart("muffleWarning")
[09:31:03.662]                       }
[09:31:03.662]                       else if (inherits(cond, "condition")) {
[09:31:03.662]                         if (!is.null(pattern)) {
[09:31:03.662]                           computeRestarts <- base::computeRestarts
[09:31:03.662]                           grepl <- base::grepl
[09:31:03.662]                           restarts <- computeRestarts(cond)
[09:31:03.662]                           for (restart in restarts) {
[09:31:03.662]                             name <- restart$name
[09:31:03.662]                             if (is.null(name)) 
[09:31:03.662]                               next
[09:31:03.662]                             if (!grepl(pattern, name)) 
[09:31:03.662]                               next
[09:31:03.662]                             invokeRestart(restart)
[09:31:03.662]                             muffled <- TRUE
[09:31:03.662]                             break
[09:31:03.662]                           }
[09:31:03.662]                         }
[09:31:03.662]                       }
[09:31:03.662]                       invisible(muffled)
[09:31:03.662]                     }
[09:31:03.662]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.662]                   }
[09:31:03.662]                 }
[09:31:03.662]                 else {
[09:31:03.662]                   if (TRUE) {
[09:31:03.662]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.662]                     {
[09:31:03.662]                       inherits <- base::inherits
[09:31:03.662]                       invokeRestart <- base::invokeRestart
[09:31:03.662]                       is.null <- base::is.null
[09:31:03.662]                       muffled <- FALSE
[09:31:03.662]                       if (inherits(cond, "message")) {
[09:31:03.662]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.662]                         if (muffled) 
[09:31:03.662]                           invokeRestart("muffleMessage")
[09:31:03.662]                       }
[09:31:03.662]                       else if (inherits(cond, "warning")) {
[09:31:03.662]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.662]                         if (muffled) 
[09:31:03.662]                           invokeRestart("muffleWarning")
[09:31:03.662]                       }
[09:31:03.662]                       else if (inherits(cond, "condition")) {
[09:31:03.662]                         if (!is.null(pattern)) {
[09:31:03.662]                           computeRestarts <- base::computeRestarts
[09:31:03.662]                           grepl <- base::grepl
[09:31:03.662]                           restarts <- computeRestarts(cond)
[09:31:03.662]                           for (restart in restarts) {
[09:31:03.662]                             name <- restart$name
[09:31:03.662]                             if (is.null(name)) 
[09:31:03.662]                               next
[09:31:03.662]                             if (!grepl(pattern, name)) 
[09:31:03.662]                               next
[09:31:03.662]                             invokeRestart(restart)
[09:31:03.662]                             muffled <- TRUE
[09:31:03.662]                             break
[09:31:03.662]                           }
[09:31:03.662]                         }
[09:31:03.662]                       }
[09:31:03.662]                       invisible(muffled)
[09:31:03.662]                     }
[09:31:03.662]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.662]                   }
[09:31:03.662]                 }
[09:31:03.662]             }
[09:31:03.662]         }))
[09:31:03.662]     }, error = function(ex) {
[09:31:03.662]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.662]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.662]                 ...future.rng), started = ...future.startTime, 
[09:31:03.662]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.662]             version = "1.8"), class = "FutureResult")
[09:31:03.662]     }, finally = {
[09:31:03.662]         if (!identical(...future.workdir, getwd())) 
[09:31:03.662]             setwd(...future.workdir)
[09:31:03.662]         {
[09:31:03.662]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.662]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.662]             }
[09:31:03.662]             base::options(...future.oldOptions)
[09:31:03.662]             if (.Platform$OS.type == "windows") {
[09:31:03.662]                 old_names <- names(...future.oldEnvVars)
[09:31:03.662]                 envs <- base::Sys.getenv()
[09:31:03.662]                 names <- names(envs)
[09:31:03.662]                 common <- intersect(names, old_names)
[09:31:03.662]                 added <- setdiff(names, old_names)
[09:31:03.662]                 removed <- setdiff(old_names, names)
[09:31:03.662]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.662]                   envs[common]]
[09:31:03.662]                 NAMES <- toupper(changed)
[09:31:03.662]                 args <- list()
[09:31:03.662]                 for (kk in seq_along(NAMES)) {
[09:31:03.662]                   name <- changed[[kk]]
[09:31:03.662]                   NAME <- NAMES[[kk]]
[09:31:03.662]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.662]                     next
[09:31:03.662]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.662]                 }
[09:31:03.662]                 NAMES <- toupper(added)
[09:31:03.662]                 for (kk in seq_along(NAMES)) {
[09:31:03.662]                   name <- added[[kk]]
[09:31:03.662]                   NAME <- NAMES[[kk]]
[09:31:03.662]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.662]                     next
[09:31:03.662]                   args[[name]] <- ""
[09:31:03.662]                 }
[09:31:03.662]                 NAMES <- toupper(removed)
[09:31:03.662]                 for (kk in seq_along(NAMES)) {
[09:31:03.662]                   name <- removed[[kk]]
[09:31:03.662]                   NAME <- NAMES[[kk]]
[09:31:03.662]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.662]                     next
[09:31:03.662]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.662]                 }
[09:31:03.662]                 if (length(args) > 0) 
[09:31:03.662]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.662]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.662]             }
[09:31:03.662]             else {
[09:31:03.662]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.662]             }
[09:31:03.662]             {
[09:31:03.662]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.662]                   0L) {
[09:31:03.662]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.662]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.662]                   base::options(opts)
[09:31:03.662]                 }
[09:31:03.662]                 {
[09:31:03.662]                   {
[09:31:03.662]                     NULL
[09:31:03.662]                     RNGkind("Mersenne-Twister")
[09:31:03.662]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.662]                       inherits = FALSE)
[09:31:03.662]                   }
[09:31:03.662]                   options(future.plan = NULL)
[09:31:03.662]                   if (is.na(NA_character_)) 
[09:31:03.662]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.662]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.662]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.662]                     .init = FALSE)
[09:31:03.662]                 }
[09:31:03.662]             }
[09:31:03.662]         }
[09:31:03.662]     })
[09:31:03.662]     if (TRUE) {
[09:31:03.662]         base::sink(type = "output", split = FALSE)
[09:31:03.662]         if (TRUE) {
[09:31:03.662]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.662]         }
[09:31:03.662]         else {
[09:31:03.662]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.662]         }
[09:31:03.662]         base::close(...future.stdout)
[09:31:03.662]         ...future.stdout <- NULL
[09:31:03.662]     }
[09:31:03.662]     ...future.result$conditions <- ...future.conditions
[09:31:03.662]     ...future.result$finished <- base::Sys.time()
[09:31:03.662]     ...future.result
[09:31:03.662] }
[09:31:03.664] plan(): Setting new future strategy stack:
[09:31:03.664] List of future strategies:
[09:31:03.664] 1. sequential:
[09:31:03.664]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.664]    - tweaked: FALSE
[09:31:03.664]    - call: NULL
[09:31:03.664] plan(): nbrOfWorkers() = 1
[09:31:03.665] plan(): Setting new future strategy stack:
[09:31:03.665] List of future strategies:
[09:31:03.665] 1. sequential:
[09:31:03.665]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.665]    - tweaked: FALSE
[09:31:03.665]    - call: plan(strategy)
[09:31:03.665] plan(): nbrOfWorkers() = 1
[09:31:03.665] SequentialFuture started (and completed)
[09:31:03.665] - Launch lazy future ... done
[09:31:03.666] run() for ‘SequentialFuture’ ... done
c = 1
[09:31:03.666] getGlobalsAndPackages() ...
[09:31:03.666] Searching for globals...
[09:31:03.666] 
[09:31:03.666] Searching for globals ... DONE
[09:31:03.666] - globals: [0] <none>
[09:31:03.667] getGlobalsAndPackages() ... DONE
[09:31:03.667] run() for ‘Future’ ...
[09:31:03.667] - state: ‘created’
[09:31:03.667] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.667] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.667] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.667]   - Field: ‘label’
[09:31:03.667]   - Field: ‘local’
[09:31:03.668]   - Field: ‘owner’
[09:31:03.668]   - Field: ‘envir’
[09:31:03.668]   - Field: ‘packages’
[09:31:03.668]   - Field: ‘gc’
[09:31:03.668]   - Field: ‘conditions’
[09:31:03.668]   - Field: ‘expr’
[09:31:03.668]   - Field: ‘uuid’
[09:31:03.668]   - Field: ‘seed’
[09:31:03.668]   - Field: ‘version’
[09:31:03.668]   - Field: ‘result’
[09:31:03.668]   - Field: ‘asynchronous’
[09:31:03.669]   - Field: ‘calls’
[09:31:03.669]   - Field: ‘globals’
[09:31:03.669]   - Field: ‘stdout’
[09:31:03.669]   - Field: ‘earlySignal’
[09:31:03.669]   - Field: ‘lazy’
[09:31:03.669]   - Field: ‘state’
[09:31:03.669] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.669] - Launch lazy future ...
[09:31:03.669] Packages needed by the future expression (n = 0): <none>
[09:31:03.669] Packages needed by future strategies (n = 0): <none>
[09:31:03.670] {
[09:31:03.670]     {
[09:31:03.670]         {
[09:31:03.670]             ...future.startTime <- base::Sys.time()
[09:31:03.670]             {
[09:31:03.670]                 {
[09:31:03.670]                   {
[09:31:03.670]                     base::local({
[09:31:03.670]                       has_future <- base::requireNamespace("future", 
[09:31:03.670]                         quietly = TRUE)
[09:31:03.670]                       if (has_future) {
[09:31:03.670]                         ns <- base::getNamespace("future")
[09:31:03.670]                         version <- ns[[".package"]][["version"]]
[09:31:03.670]                         if (is.null(version)) 
[09:31:03.670]                           version <- utils::packageVersion("future")
[09:31:03.670]                       }
[09:31:03.670]                       else {
[09:31:03.670]                         version <- NULL
[09:31:03.670]                       }
[09:31:03.670]                       if (!has_future || version < "1.8.0") {
[09:31:03.670]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.670]                           "", base::R.version$version.string), 
[09:31:03.670]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.670]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.670]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.670]                             "release", "version")], collapse = " "), 
[09:31:03.670]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.670]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.670]                           info)
[09:31:03.670]                         info <- base::paste(info, collapse = "; ")
[09:31:03.670]                         if (!has_future) {
[09:31:03.670]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.670]                             info)
[09:31:03.670]                         }
[09:31:03.670]                         else {
[09:31:03.670]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.670]                             info, version)
[09:31:03.670]                         }
[09:31:03.670]                         base::stop(msg)
[09:31:03.670]                       }
[09:31:03.670]                     })
[09:31:03.670]                   }
[09:31:03.670]                   ...future.strategy.old <- future::plan("list")
[09:31:03.670]                   options(future.plan = NULL)
[09:31:03.670]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.670]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.670]                 }
[09:31:03.670]                 ...future.workdir <- getwd()
[09:31:03.670]             }
[09:31:03.670]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.670]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.670]         }
[09:31:03.670]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.670]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.670]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.670]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.670]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.670]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.670]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.670]             base::names(...future.oldOptions))
[09:31:03.670]     }
[09:31:03.670]     if (FALSE) {
[09:31:03.670]     }
[09:31:03.670]     else {
[09:31:03.670]         if (TRUE) {
[09:31:03.670]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.670]                 open = "w")
[09:31:03.670]         }
[09:31:03.670]         else {
[09:31:03.670]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.670]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.670]         }
[09:31:03.670]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.670]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.670]             base::sink(type = "output", split = FALSE)
[09:31:03.670]             base::close(...future.stdout)
[09:31:03.670]         }, add = TRUE)
[09:31:03.670]     }
[09:31:03.670]     ...future.frame <- base::sys.nframe()
[09:31:03.670]     ...future.conditions <- base::list()
[09:31:03.670]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.670]     if (FALSE) {
[09:31:03.670]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.670]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.670]     }
[09:31:03.670]     ...future.result <- base::tryCatch({
[09:31:03.670]         base::withCallingHandlers({
[09:31:03.670]             ...future.value <- base::withVisible(base::local(1))
[09:31:03.670]             future::FutureResult(value = ...future.value$value, 
[09:31:03.670]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.670]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.670]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.670]                     ...future.globalenv.names))
[09:31:03.670]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.670]         }, condition = base::local({
[09:31:03.670]             c <- base::c
[09:31:03.670]             inherits <- base::inherits
[09:31:03.670]             invokeRestart <- base::invokeRestart
[09:31:03.670]             length <- base::length
[09:31:03.670]             list <- base::list
[09:31:03.670]             seq.int <- base::seq.int
[09:31:03.670]             signalCondition <- base::signalCondition
[09:31:03.670]             sys.calls <- base::sys.calls
[09:31:03.670]             `[[` <- base::`[[`
[09:31:03.670]             `+` <- base::`+`
[09:31:03.670]             `<<-` <- base::`<<-`
[09:31:03.670]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.670]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.670]                   3L)]
[09:31:03.670]             }
[09:31:03.670]             function(cond) {
[09:31:03.670]                 is_error <- inherits(cond, "error")
[09:31:03.670]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.670]                   NULL)
[09:31:03.670]                 if (is_error) {
[09:31:03.670]                   sessionInformation <- function() {
[09:31:03.670]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.670]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.670]                       search = base::search(), system = base::Sys.info())
[09:31:03.670]                   }
[09:31:03.670]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.670]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.670]                     cond$call), session = sessionInformation(), 
[09:31:03.670]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.670]                   signalCondition(cond)
[09:31:03.670]                 }
[09:31:03.670]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.670]                 "immediateCondition"))) {
[09:31:03.670]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.670]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.670]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.670]                   if (TRUE && !signal) {
[09:31:03.670]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.670]                     {
[09:31:03.670]                       inherits <- base::inherits
[09:31:03.670]                       invokeRestart <- base::invokeRestart
[09:31:03.670]                       is.null <- base::is.null
[09:31:03.670]                       muffled <- FALSE
[09:31:03.670]                       if (inherits(cond, "message")) {
[09:31:03.670]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.670]                         if (muffled) 
[09:31:03.670]                           invokeRestart("muffleMessage")
[09:31:03.670]                       }
[09:31:03.670]                       else if (inherits(cond, "warning")) {
[09:31:03.670]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.670]                         if (muffled) 
[09:31:03.670]                           invokeRestart("muffleWarning")
[09:31:03.670]                       }
[09:31:03.670]                       else if (inherits(cond, "condition")) {
[09:31:03.670]                         if (!is.null(pattern)) {
[09:31:03.670]                           computeRestarts <- base::computeRestarts
[09:31:03.670]                           grepl <- base::grepl
[09:31:03.670]                           restarts <- computeRestarts(cond)
[09:31:03.670]                           for (restart in restarts) {
[09:31:03.670]                             name <- restart$name
[09:31:03.670]                             if (is.null(name)) 
[09:31:03.670]                               next
[09:31:03.670]                             if (!grepl(pattern, name)) 
[09:31:03.670]                               next
[09:31:03.670]                             invokeRestart(restart)
[09:31:03.670]                             muffled <- TRUE
[09:31:03.670]                             break
[09:31:03.670]                           }
[09:31:03.670]                         }
[09:31:03.670]                       }
[09:31:03.670]                       invisible(muffled)
[09:31:03.670]                     }
[09:31:03.670]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.670]                   }
[09:31:03.670]                 }
[09:31:03.670]                 else {
[09:31:03.670]                   if (TRUE) {
[09:31:03.670]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.670]                     {
[09:31:03.670]                       inherits <- base::inherits
[09:31:03.670]                       invokeRestart <- base::invokeRestart
[09:31:03.670]                       is.null <- base::is.null
[09:31:03.670]                       muffled <- FALSE
[09:31:03.670]                       if (inherits(cond, "message")) {
[09:31:03.670]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.670]                         if (muffled) 
[09:31:03.670]                           invokeRestart("muffleMessage")
[09:31:03.670]                       }
[09:31:03.670]                       else if (inherits(cond, "warning")) {
[09:31:03.670]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.670]                         if (muffled) 
[09:31:03.670]                           invokeRestart("muffleWarning")
[09:31:03.670]                       }
[09:31:03.670]                       else if (inherits(cond, "condition")) {
[09:31:03.670]                         if (!is.null(pattern)) {
[09:31:03.670]                           computeRestarts <- base::computeRestarts
[09:31:03.670]                           grepl <- base::grepl
[09:31:03.670]                           restarts <- computeRestarts(cond)
[09:31:03.670]                           for (restart in restarts) {
[09:31:03.670]                             name <- restart$name
[09:31:03.670]                             if (is.null(name)) 
[09:31:03.670]                               next
[09:31:03.670]                             if (!grepl(pattern, name)) 
[09:31:03.670]                               next
[09:31:03.670]                             invokeRestart(restart)
[09:31:03.670]                             muffled <- TRUE
[09:31:03.670]                             break
[09:31:03.670]                           }
[09:31:03.670]                         }
[09:31:03.670]                       }
[09:31:03.670]                       invisible(muffled)
[09:31:03.670]                     }
[09:31:03.670]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.670]                   }
[09:31:03.670]                 }
[09:31:03.670]             }
[09:31:03.670]         }))
[09:31:03.670]     }, error = function(ex) {
[09:31:03.670]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.670]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.670]                 ...future.rng), started = ...future.startTime, 
[09:31:03.670]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.670]             version = "1.8"), class = "FutureResult")
[09:31:03.670]     }, finally = {
[09:31:03.670]         if (!identical(...future.workdir, getwd())) 
[09:31:03.670]             setwd(...future.workdir)
[09:31:03.670]         {
[09:31:03.670]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.670]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.670]             }
[09:31:03.670]             base::options(...future.oldOptions)
[09:31:03.670]             if (.Platform$OS.type == "windows") {
[09:31:03.670]                 old_names <- names(...future.oldEnvVars)
[09:31:03.670]                 envs <- base::Sys.getenv()
[09:31:03.670]                 names <- names(envs)
[09:31:03.670]                 common <- intersect(names, old_names)
[09:31:03.670]                 added <- setdiff(names, old_names)
[09:31:03.670]                 removed <- setdiff(old_names, names)
[09:31:03.670]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.670]                   envs[common]]
[09:31:03.670]                 NAMES <- toupper(changed)
[09:31:03.670]                 args <- list()
[09:31:03.670]                 for (kk in seq_along(NAMES)) {
[09:31:03.670]                   name <- changed[[kk]]
[09:31:03.670]                   NAME <- NAMES[[kk]]
[09:31:03.670]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.670]                     next
[09:31:03.670]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.670]                 }
[09:31:03.670]                 NAMES <- toupper(added)
[09:31:03.670]                 for (kk in seq_along(NAMES)) {
[09:31:03.670]                   name <- added[[kk]]
[09:31:03.670]                   NAME <- NAMES[[kk]]
[09:31:03.670]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.670]                     next
[09:31:03.670]                   args[[name]] <- ""
[09:31:03.670]                 }
[09:31:03.670]                 NAMES <- toupper(removed)
[09:31:03.670]                 for (kk in seq_along(NAMES)) {
[09:31:03.670]                   name <- removed[[kk]]
[09:31:03.670]                   NAME <- NAMES[[kk]]
[09:31:03.670]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.670]                     next
[09:31:03.670]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.670]                 }
[09:31:03.670]                 if (length(args) > 0) 
[09:31:03.670]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.670]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.670]             }
[09:31:03.670]             else {
[09:31:03.670]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.670]             }
[09:31:03.670]             {
[09:31:03.670]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.670]                   0L) {
[09:31:03.670]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.670]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.670]                   base::options(opts)
[09:31:03.670]                 }
[09:31:03.670]                 {
[09:31:03.670]                   {
[09:31:03.670]                     NULL
[09:31:03.670]                     RNGkind("Mersenne-Twister")
[09:31:03.670]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.670]                       inherits = FALSE)
[09:31:03.670]                   }
[09:31:03.670]                   options(future.plan = NULL)
[09:31:03.670]                   if (is.na(NA_character_)) 
[09:31:03.670]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.670]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.670]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.670]                     .init = FALSE)
[09:31:03.670]                 }
[09:31:03.670]             }
[09:31:03.670]         }
[09:31:03.670]     })
[09:31:03.670]     if (TRUE) {
[09:31:03.670]         base::sink(type = "output", split = FALSE)
[09:31:03.670]         if (TRUE) {
[09:31:03.670]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.670]         }
[09:31:03.670]         else {
[09:31:03.670]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.670]         }
[09:31:03.670]         base::close(...future.stdout)
[09:31:03.670]         ...future.stdout <- NULL
[09:31:03.670]     }
[09:31:03.670]     ...future.result$conditions <- ...future.conditions
[09:31:03.670]     ...future.result$finished <- base::Sys.time()
[09:31:03.670]     ...future.result
[09:31:03.670] }
[09:31:03.672] plan(): Setting new future strategy stack:
[09:31:03.673] List of future strategies:
[09:31:03.673] 1. sequential:
[09:31:03.673]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.673]    - tweaked: FALSE
[09:31:03.673]    - call: NULL
[09:31:03.673] plan(): nbrOfWorkers() = 1
[09:31:03.674] plan(): Setting new future strategy stack:
[09:31:03.674] List of future strategies:
[09:31:03.674] 1. sequential:
[09:31:03.674]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.674]    - tweaked: FALSE
[09:31:03.674]    - call: plan(strategy)
[09:31:03.674] plan(): nbrOfWorkers() = 1
[09:31:03.674] SequentialFuture started (and completed)
[09:31:03.674] - Launch lazy future ... done
[09:31:03.674] run() for ‘SequentialFuture’ ... done
d = 1
** Nested future assignments
[09:31:03.675] getGlobalsAndPackages() ...
[09:31:03.675] Searching for globals...
[09:31:03.678] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[09:31:03.678] Searching for globals ... DONE
[09:31:03.678] Resolving globals: FALSE
[09:31:03.679] 
[09:31:03.679] - packages: [1] ‘future’
[09:31:03.679] getGlobalsAndPackages() ... DONE
[09:31:03.679] run() for ‘Future’ ...
[09:31:03.679] - state: ‘created’
[09:31:03.679] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.680] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.680] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.680]   - Field: ‘label’
[09:31:03.680]   - Field: ‘local’
[09:31:03.680]   - Field: ‘owner’
[09:31:03.680]   - Field: ‘envir’
[09:31:03.680]   - Field: ‘packages’
[09:31:03.680]   - Field: ‘gc’
[09:31:03.680]   - Field: ‘conditions’
[09:31:03.681]   - Field: ‘expr’
[09:31:03.681]   - Field: ‘uuid’
[09:31:03.681]   - Field: ‘seed’
[09:31:03.681]   - Field: ‘version’
[09:31:03.681]   - Field: ‘result’
[09:31:03.681]   - Field: ‘asynchronous’
[09:31:03.681]   - Field: ‘calls’
[09:31:03.681]   - Field: ‘globals’
[09:31:03.681]   - Field: ‘stdout’
[09:31:03.681]   - Field: ‘earlySignal’
[09:31:03.682]   - Field: ‘lazy’
[09:31:03.682]   - Field: ‘state’
[09:31:03.682] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.682] - Launch lazy future ...
[09:31:03.682] Packages needed by the future expression (n = 1): ‘future’
[09:31:03.682] Packages needed by future strategies (n = 0): <none>
[09:31:03.683] {
[09:31:03.683]     {
[09:31:03.683]         {
[09:31:03.683]             ...future.startTime <- base::Sys.time()
[09:31:03.683]             {
[09:31:03.683]                 {
[09:31:03.683]                   {
[09:31:03.683]                     {
[09:31:03.683]                       base::local({
[09:31:03.683]                         has_future <- base::requireNamespace("future", 
[09:31:03.683]                           quietly = TRUE)
[09:31:03.683]                         if (has_future) {
[09:31:03.683]                           ns <- base::getNamespace("future")
[09:31:03.683]                           version <- ns[[".package"]][["version"]]
[09:31:03.683]                           if (is.null(version)) 
[09:31:03.683]                             version <- utils::packageVersion("future")
[09:31:03.683]                         }
[09:31:03.683]                         else {
[09:31:03.683]                           version <- NULL
[09:31:03.683]                         }
[09:31:03.683]                         if (!has_future || version < "1.8.0") {
[09:31:03.683]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.683]                             "", base::R.version$version.string), 
[09:31:03.683]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:03.683]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.683]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.683]                               "release", "version")], collapse = " "), 
[09:31:03.683]                             hostname = base::Sys.info()[["nodename"]])
[09:31:03.683]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.683]                             info)
[09:31:03.683]                           info <- base::paste(info, collapse = "; ")
[09:31:03.683]                           if (!has_future) {
[09:31:03.683]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.683]                               info)
[09:31:03.683]                           }
[09:31:03.683]                           else {
[09:31:03.683]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.683]                               info, version)
[09:31:03.683]                           }
[09:31:03.683]                           base::stop(msg)
[09:31:03.683]                         }
[09:31:03.683]                       })
[09:31:03.683]                     }
[09:31:03.683]                     base::local({
[09:31:03.683]                       for (pkg in "future") {
[09:31:03.683]                         base::loadNamespace(pkg)
[09:31:03.683]                         base::library(pkg, character.only = TRUE)
[09:31:03.683]                       }
[09:31:03.683]                     })
[09:31:03.683]                   }
[09:31:03.683]                   ...future.strategy.old <- future::plan("list")
[09:31:03.683]                   options(future.plan = NULL)
[09:31:03.683]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.683]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.683]                 }
[09:31:03.683]                 ...future.workdir <- getwd()
[09:31:03.683]             }
[09:31:03.683]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.683]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.683]         }
[09:31:03.683]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.683]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.683]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.683]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.683]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.683]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.683]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.683]             base::names(...future.oldOptions))
[09:31:03.683]     }
[09:31:03.683]     if (FALSE) {
[09:31:03.683]     }
[09:31:03.683]     else {
[09:31:03.683]         if (TRUE) {
[09:31:03.683]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.683]                 open = "w")
[09:31:03.683]         }
[09:31:03.683]         else {
[09:31:03.683]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.683]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.683]         }
[09:31:03.683]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.683]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.683]             base::sink(type = "output", split = FALSE)
[09:31:03.683]             base::close(...future.stdout)
[09:31:03.683]         }, add = TRUE)
[09:31:03.683]     }
[09:31:03.683]     ...future.frame <- base::sys.nframe()
[09:31:03.683]     ...future.conditions <- base::list()
[09:31:03.683]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.683]     if (FALSE) {
[09:31:03.683]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.683]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.683]     }
[09:31:03.683]     ...future.result <- base::tryCatch({
[09:31:03.683]         base::withCallingHandlers({
[09:31:03.683]             ...future.value <- base::withVisible(base::local({
[09:31:03.683]                 b <- 1
[09:31:03.683]                 c %<-% 2
[09:31:03.683]                 d <- 3
[09:31:03.683]                 4 %->% e
[09:31:03.683]                 b + c + d + e
[09:31:03.683]             }))
[09:31:03.683]             future::FutureResult(value = ...future.value$value, 
[09:31:03.683]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.683]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.683]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.683]                     ...future.globalenv.names))
[09:31:03.683]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.683]         }, condition = base::local({
[09:31:03.683]             c <- base::c
[09:31:03.683]             inherits <- base::inherits
[09:31:03.683]             invokeRestart <- base::invokeRestart
[09:31:03.683]             length <- base::length
[09:31:03.683]             list <- base::list
[09:31:03.683]             seq.int <- base::seq.int
[09:31:03.683]             signalCondition <- base::signalCondition
[09:31:03.683]             sys.calls <- base::sys.calls
[09:31:03.683]             `[[` <- base::`[[`
[09:31:03.683]             `+` <- base::`+`
[09:31:03.683]             `<<-` <- base::`<<-`
[09:31:03.683]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.683]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.683]                   3L)]
[09:31:03.683]             }
[09:31:03.683]             function(cond) {
[09:31:03.683]                 is_error <- inherits(cond, "error")
[09:31:03.683]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.683]                   NULL)
[09:31:03.683]                 if (is_error) {
[09:31:03.683]                   sessionInformation <- function() {
[09:31:03.683]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.683]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.683]                       search = base::search(), system = base::Sys.info())
[09:31:03.683]                   }
[09:31:03.683]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.683]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.683]                     cond$call), session = sessionInformation(), 
[09:31:03.683]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.683]                   signalCondition(cond)
[09:31:03.683]                 }
[09:31:03.683]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.683]                 "immediateCondition"))) {
[09:31:03.683]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.683]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.683]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.683]                   if (TRUE && !signal) {
[09:31:03.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.683]                     {
[09:31:03.683]                       inherits <- base::inherits
[09:31:03.683]                       invokeRestart <- base::invokeRestart
[09:31:03.683]                       is.null <- base::is.null
[09:31:03.683]                       muffled <- FALSE
[09:31:03.683]                       if (inherits(cond, "message")) {
[09:31:03.683]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.683]                         if (muffled) 
[09:31:03.683]                           invokeRestart("muffleMessage")
[09:31:03.683]                       }
[09:31:03.683]                       else if (inherits(cond, "warning")) {
[09:31:03.683]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.683]                         if (muffled) 
[09:31:03.683]                           invokeRestart("muffleWarning")
[09:31:03.683]                       }
[09:31:03.683]                       else if (inherits(cond, "condition")) {
[09:31:03.683]                         if (!is.null(pattern)) {
[09:31:03.683]                           computeRestarts <- base::computeRestarts
[09:31:03.683]                           grepl <- base::grepl
[09:31:03.683]                           restarts <- computeRestarts(cond)
[09:31:03.683]                           for (restart in restarts) {
[09:31:03.683]                             name <- restart$name
[09:31:03.683]                             if (is.null(name)) 
[09:31:03.683]                               next
[09:31:03.683]                             if (!grepl(pattern, name)) 
[09:31:03.683]                               next
[09:31:03.683]                             invokeRestart(restart)
[09:31:03.683]                             muffled <- TRUE
[09:31:03.683]                             break
[09:31:03.683]                           }
[09:31:03.683]                         }
[09:31:03.683]                       }
[09:31:03.683]                       invisible(muffled)
[09:31:03.683]                     }
[09:31:03.683]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.683]                   }
[09:31:03.683]                 }
[09:31:03.683]                 else {
[09:31:03.683]                   if (TRUE) {
[09:31:03.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.683]                     {
[09:31:03.683]                       inherits <- base::inherits
[09:31:03.683]                       invokeRestart <- base::invokeRestart
[09:31:03.683]                       is.null <- base::is.null
[09:31:03.683]                       muffled <- FALSE
[09:31:03.683]                       if (inherits(cond, "message")) {
[09:31:03.683]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.683]                         if (muffled) 
[09:31:03.683]                           invokeRestart("muffleMessage")
[09:31:03.683]                       }
[09:31:03.683]                       else if (inherits(cond, "warning")) {
[09:31:03.683]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.683]                         if (muffled) 
[09:31:03.683]                           invokeRestart("muffleWarning")
[09:31:03.683]                       }
[09:31:03.683]                       else if (inherits(cond, "condition")) {
[09:31:03.683]                         if (!is.null(pattern)) {
[09:31:03.683]                           computeRestarts <- base::computeRestarts
[09:31:03.683]                           grepl <- base::grepl
[09:31:03.683]                           restarts <- computeRestarts(cond)
[09:31:03.683]                           for (restart in restarts) {
[09:31:03.683]                             name <- restart$name
[09:31:03.683]                             if (is.null(name)) 
[09:31:03.683]                               next
[09:31:03.683]                             if (!grepl(pattern, name)) 
[09:31:03.683]                               next
[09:31:03.683]                             invokeRestart(restart)
[09:31:03.683]                             muffled <- TRUE
[09:31:03.683]                             break
[09:31:03.683]                           }
[09:31:03.683]                         }
[09:31:03.683]                       }
[09:31:03.683]                       invisible(muffled)
[09:31:03.683]                     }
[09:31:03.683]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.683]                   }
[09:31:03.683]                 }
[09:31:03.683]             }
[09:31:03.683]         }))
[09:31:03.683]     }, error = function(ex) {
[09:31:03.683]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.683]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.683]                 ...future.rng), started = ...future.startTime, 
[09:31:03.683]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.683]             version = "1.8"), class = "FutureResult")
[09:31:03.683]     }, finally = {
[09:31:03.683]         if (!identical(...future.workdir, getwd())) 
[09:31:03.683]             setwd(...future.workdir)
[09:31:03.683]         {
[09:31:03.683]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.683]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.683]             }
[09:31:03.683]             base::options(...future.oldOptions)
[09:31:03.683]             if (.Platform$OS.type == "windows") {
[09:31:03.683]                 old_names <- names(...future.oldEnvVars)
[09:31:03.683]                 envs <- base::Sys.getenv()
[09:31:03.683]                 names <- names(envs)
[09:31:03.683]                 common <- intersect(names, old_names)
[09:31:03.683]                 added <- setdiff(names, old_names)
[09:31:03.683]                 removed <- setdiff(old_names, names)
[09:31:03.683]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.683]                   envs[common]]
[09:31:03.683]                 NAMES <- toupper(changed)
[09:31:03.683]                 args <- list()
[09:31:03.683]                 for (kk in seq_along(NAMES)) {
[09:31:03.683]                   name <- changed[[kk]]
[09:31:03.683]                   NAME <- NAMES[[kk]]
[09:31:03.683]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.683]                     next
[09:31:03.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.683]                 }
[09:31:03.683]                 NAMES <- toupper(added)
[09:31:03.683]                 for (kk in seq_along(NAMES)) {
[09:31:03.683]                   name <- added[[kk]]
[09:31:03.683]                   NAME <- NAMES[[kk]]
[09:31:03.683]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.683]                     next
[09:31:03.683]                   args[[name]] <- ""
[09:31:03.683]                 }
[09:31:03.683]                 NAMES <- toupper(removed)
[09:31:03.683]                 for (kk in seq_along(NAMES)) {
[09:31:03.683]                   name <- removed[[kk]]
[09:31:03.683]                   NAME <- NAMES[[kk]]
[09:31:03.683]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.683]                     next
[09:31:03.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.683]                 }
[09:31:03.683]                 if (length(args) > 0) 
[09:31:03.683]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.683]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.683]             }
[09:31:03.683]             else {
[09:31:03.683]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.683]             }
[09:31:03.683]             {
[09:31:03.683]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.683]                   0L) {
[09:31:03.683]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.683]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.683]                   base::options(opts)
[09:31:03.683]                 }
[09:31:03.683]                 {
[09:31:03.683]                   {
[09:31:03.683]                     NULL
[09:31:03.683]                     RNGkind("Mersenne-Twister")
[09:31:03.683]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.683]                       inherits = FALSE)
[09:31:03.683]                   }
[09:31:03.683]                   options(future.plan = NULL)
[09:31:03.683]                   if (is.na(NA_character_)) 
[09:31:03.683]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.683]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.683]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.683]                     .init = FALSE)
[09:31:03.683]                 }
[09:31:03.683]             }
[09:31:03.683]         }
[09:31:03.683]     })
[09:31:03.683]     if (TRUE) {
[09:31:03.683]         base::sink(type = "output", split = FALSE)
[09:31:03.683]         if (TRUE) {
[09:31:03.683]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.683]         }
[09:31:03.683]         else {
[09:31:03.683]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.683]         }
[09:31:03.683]         base::close(...future.stdout)
[09:31:03.683]         ...future.stdout <- NULL
[09:31:03.683]     }
[09:31:03.683]     ...future.result$conditions <- ...future.conditions
[09:31:03.683]     ...future.result$finished <- base::Sys.time()
[09:31:03.683]     ...future.result
[09:31:03.683] }
[09:31:03.684] plan(): Setting new future strategy stack:
[09:31:03.685] List of future strategies:
[09:31:03.685] 1. sequential:
[09:31:03.685]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.685]    - tweaked: FALSE
[09:31:03.685]    - call: NULL
[09:31:03.685] plan(): nbrOfWorkers() = 1
[09:31:03.716] plan(): Setting new future strategy stack:
[09:31:03.716] List of future strategies:
[09:31:03.716] 1. sequential:
[09:31:03.716]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.716]    - tweaked: FALSE
[09:31:03.716]    - call: plan(strategy)
[09:31:03.716] plan(): nbrOfWorkers() = 1
[09:31:03.717] SequentialFuture started (and completed)
[09:31:03.717] signalConditions() ...
[09:31:03.717]  - include = ‘immediateCondition’
[09:31:03.717]  - exclude = 
[09:31:03.717]  - resignal = FALSE
[09:31:03.717]  - Number of conditions: 88
[09:31:03.717] signalConditions() ... done
[09:31:03.717] - Launch lazy future ... done
[09:31:03.717] run() for ‘SequentialFuture’ ... done
[09:31:03.717] signalConditions() ...
[09:31:03.718]  - include = ‘immediateCondition’
[09:31:03.718]  - exclude = 
[09:31:03.718]  - resignal = FALSE
[09:31:03.718]  - Number of conditions: 88
[09:31:03.718] signalConditions() ... done
[09:31:03.718] Future state: ‘finished’
[09:31:03.718] signalConditions() ...
[09:31:03.719]  - include = ‘condition’
[09:31:03.719]  - exclude = ‘immediateCondition’
[09:31:03.719]  - resignal = TRUE
[09:31:03.719]  - Number of conditions: 88
[09:31:03.719]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.685] getGlobalsAndPackages() ...
[09:31:03.720]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.686] Searching for globals...
[09:31:03.720]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.699] 
[09:31:03.720]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.699] Searching for globals ... DONE
[09:31:03.720]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.700] - globals: [0] <none>
[09:31:03.720]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.700] getGlobalsAndPackages() ... DONE
[09:31:03.720]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.700] run() for ‘Future’ ...
[09:31:03.720]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.700] - state: ‘created’
[09:31:03.721]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.700] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.721]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.700] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.721]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.701] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.721]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.701]   - Field: ‘label’
[09:31:03.721]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.701]   - Field: ‘local’
[09:31:03.721]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.701]   - Field: ‘owner’
[09:31:03.721]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.701]   - Field: ‘envir’
[09:31:03.721]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.701]   - Field: ‘packages’
[09:31:03.722]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.701]   - Field: ‘gc’
[09:31:03.722]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.701]   - Field: ‘conditions’
[09:31:03.722]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.701]   - Field: ‘expr’
[09:31:03.722]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.701]   - Field: ‘uuid’
[09:31:03.722]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.702]   - Field: ‘seed’
[09:31:03.722]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.702]   - Field: ‘version’
[09:31:03.722]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.702]   - Field: ‘result’
[09:31:03.722]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.702]   - Field: ‘asynchronous’
[09:31:03.722]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.702]   - Field: ‘calls’
[09:31:03.723]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.702]   - Field: ‘globals’
[09:31:03.723]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.702]   - Field: ‘stdout’
[09:31:03.723]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.702]   - Field: ‘earlySignal’
[09:31:03.723]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.702]   - Field: ‘lazy’
[09:31:03.723]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.702]   - Field: ‘state’
[09:31:03.723]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.702] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.723]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.703] - Launch lazy future ...
[09:31:03.723]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.703] Packages needed by the future expression (n = 0): <none>
[09:31:03.724]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.703] Packages needed by future strategies (n = 0): <none>
[09:31:03.724]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.703] {
[09:31:03.703]     {
[09:31:03.703]         {
[09:31:03.703]             ...future.startTime <- base::Sys.time()
[09:31:03.703]             {
[09:31:03.703]                 {
[09:31:03.703]                   {
[09:31:03.703]                     base::local({
[09:31:03.703]                       has_future <- base::requireNamespace("future", 
[09:31:03.703]                         quietly = TRUE)
[09:31:03.703]                       if (has_future) {
[09:31:03.703]                         ns <- base::getNamespace("future")
[09:31:03.703]                         version <- ns[[".package"]][["version"]]
[09:31:03.703]                         if (is.null(version)) 
[09:31:03.703]                           version <- utils::packageVersion("future")
[09:31:03.703]                       }
[09:31:03.703]                       else {
[09:31:03.703]                         version <- NULL
[09:31:03.703]                       }
[09:31:03.703]                       if (!has_future || version < "1.8.0") {
[09:31:03.703]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.703]                           "", base::R.version$version.string), 
[09:31:03.703]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.703]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.703]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.703]                             "release", "version")], collapse = " "), 
[09:31:03.703]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.703]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.703]                           info)
[09:31:03.703]                         info <- base::paste(info, collapse = "; ")
[09:31:03.703]                         if (!has_future) {
[09:31:03.703]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.703]                             info)
[09:31:03.703]                         }
[09:31:03.703]                         else {
[09:31:03.703]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.703]                             info, version)
[09:31:03.703]                         }
[09:31:03.703]                         base::stop(msg)
[09:31:03.703]                       }
[09:31:03.703]                     })
[09:31:03.703]                   }
[09:31:03.703]                   ...future.strategy.old <- future::plan("list")
[09:31:03.703]                   options(future.plan = NULL)
[09:31:03.703]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.703]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.703]                 }
[09:31:03.703]                 ...future.workdir <- getwd()
[09:31:03.703]             }
[09:31:03.703]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.703]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.703]         }
[09:31:03.703]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.703]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.703]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.703]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.703]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.703]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.703]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.703]             base::names(...future.oldOptions))
[09:31:03.703]     }
[09:31:03.703]     if (FALSE) {
[09:31:03.703]     }
[09:31:03.703]     else {
[09:31:03.703]         if (TRUE) {
[09:31:03.703]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.703]                 open = "w")
[09:31:03.703]         }
[09:31:03.703]         else {
[09:31:03.703]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.703]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.703]         }
[09:31:03.703]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.703]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.703]             base::sink(type = "output", split = FALSE)
[09:31:03.703]             base::close(...future.stdout)
[09:31:03.703]         }, add = TRUE)
[09:31:03.703]     }
[09:31:03.703]     ...future.frame <- base::sys.nframe()
[09:31:03.703]     ...future.conditions <- base::list()
[09:31:03.703]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.703]     if (FALSE) {
[09:31:03.703]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.703]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.703]     }
[09:31:03.703]     ...future.result <- base::tryCatch({
[09:31:03.703]         base::withCallingHandlers({
[09:31:03.703]             ...future.value <- base::withVisible(base::local(2))
[09:31:03.703]             future::FutureResult(value = ...future.value$value, 
[09:31:03.703]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.703]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.703]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.703]                     ...future.globalenv.names))
[09:31:03.703]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.703]         }, condition = base::local({
[09:31:03.703]             c <- base::c
[09:31:03.703]             inherits <- base::inherits
[09:31:03.703]             invokeRestart <- base::invokeRestart
[09:31:03.703]             length <- base::length
[09:31:03.703]             list <- base::list
[09:31:03.703]             seq.int <- base::seq.int
[09:31:03.703]             signalCondition <- base::signalCondition
[09:31:03.703]             sys.calls <- base::sys.calls
[09:31:03.703]             `[[` <- base::`[[`
[09:31:03.703]             `+` <- base::`+`
[09:31:03.703]             `<<-` <- base::`<<-`
[09:31:03.703]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.703]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.703]                   3L)]
[09:31:03.703]             }
[09:31:03.703]             function(cond) {
[09:31:03.703]                 is_error <- inherits(cond, "error")
[09:31:03.703]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.703]                   NULL)
[09:31:03.703]                 if (is_error) {
[09:31:03.703]                   sessionInformation <- function() {
[09:31:03.703]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.703]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.703]                       search = base::search(), system = base::Sys.info())
[09:31:03.703]                   }
[09:31:03.703]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.703]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.703]                     cond$call), session = sessionInformation(), 
[09:31:03.703]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.703]                   signalCondition(cond)
[09:31:03.703]                 }
[09:31:03.703]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.703]                 "immediateCondition"))) {
[09:31:03.703]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.703]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.703]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.703]                   if (TRUE && !signal) {
[09:31:03.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.703]                     {
[09:31:03.703]                       inherits <- base::inherits
[09:31:03.703]                       invokeRestart <- base::invokeRestart
[09:31:03.703]                       is.null <- base::is.null
[09:31:03.703]                       muffled <- FALSE
[09:31:03.703]                       if (inherits(cond, "message")) {
[09:31:03.703]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.703]                         if (muffled) 
[09:31:03.703]                           invokeRestart("muffleMessage")
[09:31:03.703]                       }
[09:31:03.703]                       else if (inherits(cond, "warning")) {
[09:31:03.703]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.703]                         if (muffled) 
[09:31:03.703]                           invokeRestart("muffleWarning")
[09:31:03.703]                       }
[09:31:03.703]                       else if (inherits(cond, "condition")) {
[09:31:03.703]                         if (!is.null(pattern)) {
[09:31:03.703]                           computeRestarts <- base::computeRestarts
[09:31:03.703]                           grepl <- base::grepl
[09:31:03.703]                           restarts <- computeRestarts(cond)
[09:31:03.703]                           for (restart in restarts) {
[09:31:03.703]                             name <- restart$name
[09:31:03.703]                             if (is.null(name)) 
[09:31:03.703]                               next
[09:31:03.703]                             if (!grepl(pattern, name)) 
[09:31:03.703]                               next
[09:31:03.703]                             invokeRestart(restart)
[09:31:03.703]                             muffled <- TRUE
[09:31:03.703]                             break
[09:31:03.703]                           }
[09:31:03.703]                         }
[09:31:03.703]                       }
[09:31:03.703]                       invisible(muffled)
[09:31:03.703]                     }
[09:31:03.703]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.703]                   }
[09:31:03.703]                 }
[09:31:03.703]                 else {
[09:31:03.703]                   if (TRUE) {
[09:31:03.703]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.703]                     {
[09:31:03.703]                       inherits <- base::inherits
[09:31:03.703]                       invokeRestart <- base::invokeRestart
[09:31:03.703]                       is.null <- base::is.null
[09:31:03.703]                       muffled <- FALSE
[09:31:03.703]                       if (inherits(cond, "message")) {
[09:31:03.703]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.703]                         if (muffled) 
[09:31:03.703]                           invokeRestart("muffleMessage")
[09:31:03.703]                       }
[09:31:03.703]                       else if (inherits(cond, "warning")) {
[09:31:03.703]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.703]                         if (muffled) 
[09:31:03.703]                           invokeRestart("muffleWarning")
[09:31:03.703]                       }
[09:31:03.703]                       else if (inherits(cond, "condition")) {
[09:31:03.703]                         if (!is.null(pattern)) {
[09:31:03.703]                           computeRestarts <- base::computeRestarts
[09:31:03.703]                           grepl <- base::grepl
[09:31:03.703]                           restarts <- computeRestarts(cond)
[09:31:03.703]                           for (restart in restarts) {
[09:31:03.703]                             name <- restart$name
[09:31:03.703]                             if (is.null(name)) 
[09:31:03.703]                               next
[09:31:03.703]                             if (!grepl(pattern, name)) 
[09:31:03.703]                               next
[09:31:03.703]                             invokeRestart(restart)
[09:31:03.703]                             muffled <- TRUE
[09:31:03.703]                             break
[09:31:03.703]                           }
[09:31:03.703]                         }
[09:31:03.703]                       }
[09:31:03.703]                       invisible(muffled)
[09:31:03.703]                     }
[09:31:03.703]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.703]                   }
[09:31:03.703]                 }
[09:31:03.703]             }
[09:31:03.703]         }))
[09:31:03.703]     }, error = function(ex) {
[09:31:03.703]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.703]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.703]                 ...future.rng), started = ...future.startTime, 
[09:31:03.703]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.703]             version = "1.8"), class = "FutureResult")
[09:31:03.703]     }, finally = {
[09:31:03.703]         if (!identical(...future.workdir, getwd())) 
[09:31:03.703]             setwd(...future.workdir)
[09:31:03.703]         {
[09:31:03.703]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.703]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.703]             }
[09:31:03.703]             base::options(...future.oldOptions)
[09:31:03.703]             if (.Platform$OS.type == "windows") {
[09:31:03.703]                 old_names <- names(...future.oldEnvVars)
[09:31:03.703]                 envs <- base::Sys.getenv()
[09:31:03.703]                 names <- names(envs)
[09:31:03.703]                 common <- intersect(names, old_names)
[09:31:03.703]                 added <- setdiff(names, old_names)
[09:31:03.703]                 removed <- setdiff(old_names, names)
[09:31:03.703]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.703]                   envs[common]]
[09:31:03.703]                 NAMES <- toupper(changed)
[09:31:03.703]                 args <- list()
[09:31:03.703]                 for (kk in seq_along(NAMES)) {
[09:31:03.703]                   name <- changed[[kk]]
[09:31:03.703]                   NAME <- NAMES[[kk]]
[09:31:03.703]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.703]                     next
[09:31:03.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.703]                 }
[09:31:03.703]                 NAMES <- toupper(added)
[09:31:03.703]                 for (kk in seq_along(NAMES)) {
[09:31:03.703]                   name <- added[[kk]]
[09:31:03.703]                   NAME <- NAMES[[kk]]
[09:31:03.703]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.703]                     next
[09:31:03.703]                   args[[name]] <- ""
[09:31:03.703]                 }
[09:31:03.703]                 NAMES <- toupper(removed)
[09:31:03.703]                 for (kk in seq_along(NAMES)) {
[09:31:03.703]                   name <- removed[[kk]]
[09:31:03.703]                   NAME <- NAMES[[kk]]
[09:31:03.703]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.703]                     next
[09:31:03.703]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.703]                 }
[09:31:03.703]                 if (length(args) > 0) 
[09:31:03.703]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.703]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.703]             }
[09:31:03.703]             else {
[09:31:03.703]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.703]             }
[09:31:03.703]             {
[09:31:03.703]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.703]                   0L) {
[09:31:03.703]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.703]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.703]                   base::options(opts)
[09:31:03.703]                 }
[09:31:03.703]                 {
[09:31:03.703]                   {
[09:31:03.703]                     NULL
[09:31:03.703]                     RNGkind("Mersenne-Twister")
[09:31:03.703]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.703]                       inherits = FALSE)
[09:31:03.703]                   }
[09:31:03.703]                   options(future.plan = NULL)
[09:31:03.703]                   if (is.na(NA_character_)) 
[09:31:03.703]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.703]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.703]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.703]                     .init = FALSE)
[09:31:03.703]                 }
[09:31:03.703]             }
[09:31:03.703]         }
[09:31:03.703]     })
[09:31:03.703]     if (TRUE) {
[09:31:03.703]         base::sink(type = "output", split = FALSE)
[09:31:03.703]         if (TRUE) {
[09:31:03.703]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.703]         }
[09:31:03.703]         else {
[09:31:03.703]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.703]         }
[09:31:03.703]         base::close(...future.stdout)
[09:31:03.703]         ...future.stdout <- NULL
[09:31:03.703]     }
[09:31:03.703]     ...future.result$conditions <- ...future.conditions
[09:31:03.703]     ...future.result$finished <- base::Sys.time()
[09:31:03.703]     ...future.result
[09:31:03.703] }
[09:31:03.724]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.705] plan(): Setting new future strategy stack:
[09:31:03.724]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.705] List of future strategies:
[09:31:03.705] 1. sequential:
[09:31:03.705]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.705]    - tweaked: FALSE
[09:31:03.705]    - call: NULL
[09:31:03.724]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.706] plan(): nbrOfWorkers() = 1
[09:31:03.724]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.706] plan(): Setting new future strategy stack:
[09:31:03.724]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.706] List of future strategies:
[09:31:03.706] 1. sequential:
[09:31:03.706]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.706]    - tweaked: FALSE
[09:31:03.706]    - call: NULL
[09:31:03.725]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.707] plan(): nbrOfWorkers() = 1
[09:31:03.725]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.707] SequentialFuture started (and completed)
[09:31:03.725]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.707] - Launch lazy future ... done
[09:31:03.725]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.707] run() for ‘SequentialFuture’ ... done
[09:31:03.725]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.707] getGlobalsAndPackages() ...
[09:31:03.725]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.707] Searching for globals...
[09:31:03.725]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.708] 
[09:31:03.725]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.708] Searching for globals ... DONE
[09:31:03.726]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.708] - globals: [0] <none>
[09:31:03.726]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.708] getGlobalsAndPackages() ... DONE
[09:31:03.726]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.708] run() for ‘Future’ ...
[09:31:03.726]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.708] - state: ‘created’
[09:31:03.726]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.709] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.726]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.709] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.726]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.709] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.726]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.709]   - Field: ‘label’
[09:31:03.727]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.709]   - Field: ‘local’
[09:31:03.727]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.709]   - Field: ‘owner’
[09:31:03.727]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.709]   - Field: ‘envir’
[09:31:03.727]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.709]   - Field: ‘packages’
[09:31:03.727]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.709]   - Field: ‘gc’
[09:31:03.727]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.710]   - Field: ‘conditions’
[09:31:03.727]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.710]   - Field: ‘expr’
[09:31:03.727]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.710]   - Field: ‘uuid’
[09:31:03.728]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.710]   - Field: ‘seed’
[09:31:03.728]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.710]   - Field: ‘version’
[09:31:03.728]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.710]   - Field: ‘result’
[09:31:03.728]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.710]   - Field: ‘asynchronous’
[09:31:03.728]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.710]   - Field: ‘calls’
[09:31:03.728]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.710]   - Field: ‘globals’
[09:31:03.728]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.710]   - Field: ‘stdout’
[09:31:03.728]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.711]   - Field: ‘earlySignal’
[09:31:03.729]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.711]   - Field: ‘lazy’
[09:31:03.729]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.711]   - Field: ‘state’
[09:31:03.729]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.711] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.729]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.711] - Launch lazy future ...
[09:31:03.729]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.711] Packages needed by the future expression (n = 0): <none>
[09:31:03.729]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.711] Packages needed by future strategies (n = 0): <none>
[09:31:03.729]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.712] {
[09:31:03.712]     {
[09:31:03.712]         {
[09:31:03.712]             ...future.startTime <- base::Sys.time()
[09:31:03.712]             {
[09:31:03.712]                 {
[09:31:03.712]                   {
[09:31:03.712]                     base::local({
[09:31:03.712]                       has_future <- base::requireNamespace("future", 
[09:31:03.712]                         quietly = TRUE)
[09:31:03.712]                       if (has_future) {
[09:31:03.712]                         ns <- base::getNamespace("future")
[09:31:03.712]                         version <- ns[[".package"]][["version"]]
[09:31:03.712]                         if (is.null(version)) 
[09:31:03.712]                           version <- utils::packageVersion("future")
[09:31:03.712]                       }
[09:31:03.712]                       else {
[09:31:03.712]                         version <- NULL
[09:31:03.712]                       }
[09:31:03.712]                       if (!has_future || version < "1.8.0") {
[09:31:03.712]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.712]                           "", base::R.version$version.string), 
[09:31:03.712]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.712]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.712]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.712]                             "release", "version")], collapse = " "), 
[09:31:03.712]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.712]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.712]                           info)
[09:31:03.712]                         info <- base::paste(info, collapse = "; ")
[09:31:03.712]                         if (!has_future) {
[09:31:03.712]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.712]                             info)
[09:31:03.712]                         }
[09:31:03.712]                         else {
[09:31:03.712]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.712]                             info, version)
[09:31:03.712]                         }
[09:31:03.712]                         base::stop(msg)
[09:31:03.712]                       }
[09:31:03.712]                     })
[09:31:03.712]                   }
[09:31:03.712]                   ...future.strategy.old <- future::plan("list")
[09:31:03.712]                   options(future.plan = NULL)
[09:31:03.712]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.712]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.712]                 }
[09:31:03.712]                 ...future.workdir <- getwd()
[09:31:03.712]             }
[09:31:03.712]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.712]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.712]         }
[09:31:03.712]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.712]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.712]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.712]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.712]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.712]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.712]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.712]             base::names(...future.oldOptions))
[09:31:03.712]     }
[09:31:03.712]     if (FALSE) {
[09:31:03.712]     }
[09:31:03.712]     else {
[09:31:03.712]         if (TRUE) {
[09:31:03.712]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.712]                 open = "w")
[09:31:03.712]         }
[09:31:03.712]         else {
[09:31:03.712]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.712]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.712]         }
[09:31:03.712]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.712]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.712]             base::sink(type = "output", split = FALSE)
[09:31:03.712]             base::close(...future.stdout)
[09:31:03.712]         }, add = TRUE)
[09:31:03.712]     }
[09:31:03.712]     ...future.frame <- base::sys.nframe()
[09:31:03.712]     ...future.conditions <- base::list()
[09:31:03.712]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.712]     if (FALSE) {
[09:31:03.712]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.712]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.712]     }
[09:31:03.712]     ...future.result <- base::tryCatch({
[09:31:03.712]         base::withCallingHandlers({
[09:31:03.712]             ...future.value <- base::withVisible(base::local(4))
[09:31:03.712]             future::FutureResult(value = ...future.value$value, 
[09:31:03.712]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.712]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.712]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.712]                     ...future.globalenv.names))
[09:31:03.712]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.712]         }, condition = base::local({
[09:31:03.712]             c <- base::c
[09:31:03.712]             inherits <- base::inherits
[09:31:03.712]             invokeRestart <- base::invokeRestart
[09:31:03.712]             length <- base::length
[09:31:03.712]             list <- base::list
[09:31:03.712]             seq.int <- base::seq.int
[09:31:03.712]             signalCondition <- base::signalCondition
[09:31:03.712]             sys.calls <- base::sys.calls
[09:31:03.712]             `[[` <- base::`[[`
[09:31:03.712]             `+` <- base::`+`
[09:31:03.712]             `<<-` <- base::`<<-`
[09:31:03.712]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.712]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.712]                   3L)]
[09:31:03.712]             }
[09:31:03.712]             function(cond) {
[09:31:03.712]                 is_error <- inherits(cond, "error")
[09:31:03.712]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.712]                   NULL)
[09:31:03.712]                 if (is_error) {
[09:31:03.712]                   sessionInformation <- function() {
[09:31:03.712]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.712]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.712]                       search = base::search(), system = base::Sys.info())
[09:31:03.712]                   }
[09:31:03.712]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.712]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.712]                     cond$call), session = sessionInformation(), 
[09:31:03.712]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.712]                   signalCondition(cond)
[09:31:03.712]                 }
[09:31:03.712]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.712]                 "immediateCondition"))) {
[09:31:03.712]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.712]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.712]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.712]                   if (TRUE && !signal) {
[09:31:03.712]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.712]                     {
[09:31:03.712]                       inherits <- base::inherits
[09:31:03.712]                       invokeRestart <- base::invokeRestart
[09:31:03.712]                       is.null <- base::is.null
[09:31:03.712]                       muffled <- FALSE
[09:31:03.712]                       if (inherits(cond, "message")) {
[09:31:03.712]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.712]                         if (muffled) 
[09:31:03.712]                           invokeRestart("muffleMessage")
[09:31:03.712]                       }
[09:31:03.712]                       else if (inherits(cond, "warning")) {
[09:31:03.712]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.712]                         if (muffled) 
[09:31:03.712]                           invokeRestart("muffleWarning")
[09:31:03.712]                       }
[09:31:03.712]                       else if (inherits(cond, "condition")) {
[09:31:03.712]                         if (!is.null(pattern)) {
[09:31:03.712]                           computeRestarts <- base::computeRestarts
[09:31:03.712]                           grepl <- base::grepl
[09:31:03.712]                           restarts <- computeRestarts(cond)
[09:31:03.712]                           for (restart in restarts) {
[09:31:03.712]                             name <- restart$name
[09:31:03.712]                             if (is.null(name)) 
[09:31:03.712]                               next
[09:31:03.712]                             if (!grepl(pattern, name)) 
[09:31:03.712]                               next
[09:31:03.712]                             invokeRestart(restart)
[09:31:03.712]                             muffled <- TRUE
[09:31:03.712]                             break
[09:31:03.712]                           }
[09:31:03.712]                         }
[09:31:03.712]                       }
[09:31:03.712]                       invisible(muffled)
[09:31:03.712]                     }
[09:31:03.712]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.712]                   }
[09:31:03.712]                 }
[09:31:03.712]                 else {
[09:31:03.712]                   if (TRUE) {
[09:31:03.712]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.712]                     {
[09:31:03.712]                       inherits <- base::inherits
[09:31:03.712]                       invokeRestart <- base::invokeRestart
[09:31:03.712]                       is.null <- base::is.null
[09:31:03.712]                       muffled <- FALSE
[09:31:03.712]                       if (inherits(cond, "message")) {
[09:31:03.712]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.712]                         if (muffled) 
[09:31:03.712]                           invokeRestart("muffleMessage")
[09:31:03.712]                       }
[09:31:03.712]                       else if (inherits(cond, "warning")) {
[09:31:03.712]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.712]                         if (muffled) 
[09:31:03.712]                           invokeRestart("muffleWarning")
[09:31:03.712]                       }
[09:31:03.712]                       else if (inherits(cond, "condition")) {
[09:31:03.712]                         if (!is.null(pattern)) {
[09:31:03.712]                           computeRestarts <- base::computeRestarts
[09:31:03.712]                           grepl <- base::grepl
[09:31:03.712]                           restarts <- computeRestarts(cond)
[09:31:03.712]                           for (restart in restarts) {
[09:31:03.712]                             name <- restart$name
[09:31:03.712]                             if (is.null(name)) 
[09:31:03.712]                               next
[09:31:03.712]                             if (!grepl(pattern, name)) 
[09:31:03.712]                               next
[09:31:03.712]                             invokeRestart(restart)
[09:31:03.712]                             muffled <- TRUE
[09:31:03.712]                             break
[09:31:03.712]                           }
[09:31:03.712]                         }
[09:31:03.712]                       }
[09:31:03.712]                       invisible(muffled)
[09:31:03.712]                     }
[09:31:03.712]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.712]                   }
[09:31:03.712]                 }
[09:31:03.712]             }
[09:31:03.712]         }))
[09:31:03.712]     }, error = function(ex) {
[09:31:03.712]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.712]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.712]                 ...future.rng), started = ...future.startTime, 
[09:31:03.712]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.712]             version = "1.8"), class = "FutureResult")
[09:31:03.712]     }, finally = {
[09:31:03.712]         if (!identical(...future.workdir, getwd())) 
[09:31:03.712]             setwd(...future.workdir)
[09:31:03.712]         {
[09:31:03.712]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.712]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.712]             }
[09:31:03.712]             base::options(...future.oldOptions)
[09:31:03.712]             if (.Platform$OS.type == "windows") {
[09:31:03.712]                 old_names <- names(...future.oldEnvVars)
[09:31:03.712]                 envs <- base::Sys.getenv()
[09:31:03.712]                 names <- names(envs)
[09:31:03.712]                 common <- intersect(names, old_names)
[09:31:03.712]                 added <- setdiff(names, old_names)
[09:31:03.712]                 removed <- setdiff(old_names, names)
[09:31:03.712]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.712]                   envs[common]]
[09:31:03.712]                 NAMES <- toupper(changed)
[09:31:03.712]                 args <- list()
[09:31:03.712]                 for (kk in seq_along(NAMES)) {
[09:31:03.712]                   name <- changed[[kk]]
[09:31:03.712]                   NAME <- NAMES[[kk]]
[09:31:03.712]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.712]                     next
[09:31:03.712]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.712]                 }
[09:31:03.712]                 NAMES <- toupper(added)
[09:31:03.712]                 for (kk in seq_along(NAMES)) {
[09:31:03.712]                   name <- added[[kk]]
[09:31:03.712]                   NAME <- NAMES[[kk]]
[09:31:03.712]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.712]                     next
[09:31:03.712]                   args[[name]] <- ""
[09:31:03.712]                 }
[09:31:03.712]                 NAMES <- toupper(removed)
[09:31:03.712]                 for (kk in seq_along(NAMES)) {
[09:31:03.712]                   name <- removed[[kk]]
[09:31:03.712]                   NAME <- NAMES[[kk]]
[09:31:03.712]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.712]                     next
[09:31:03.712]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.712]                 }
[09:31:03.712]                 if (length(args) > 0) 
[09:31:03.712]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.712]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.712]             }
[09:31:03.712]             else {
[09:31:03.712]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.712]             }
[09:31:03.712]             {
[09:31:03.712]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.712]                   0L) {
[09:31:03.712]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.712]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.712]                   base::options(opts)
[09:31:03.712]                 }
[09:31:03.712]                 {
[09:31:03.712]                   {
[09:31:03.712]                     NULL
[09:31:03.712]                     RNGkind("Mersenne-Twister")
[09:31:03.712]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.712]                       inherits = FALSE)
[09:31:03.712]                   }
[09:31:03.712]                   options(future.plan = NULL)
[09:31:03.712]                   if (is.na(NA_character_)) 
[09:31:03.712]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.712]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.712]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.712]                     .init = FALSE)
[09:31:03.712]                 }
[09:31:03.712]             }
[09:31:03.712]         }
[09:31:03.712]     })
[09:31:03.712]     if (TRUE) {
[09:31:03.712]         base::sink(type = "output", split = FALSE)
[09:31:03.712]         if (TRUE) {
[09:31:03.712]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.712]         }
[09:31:03.712]         else {
[09:31:03.712]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.712]         }
[09:31:03.712]         base::close(...future.stdout)
[09:31:03.712]         ...future.stdout <- NULL
[09:31:03.712]     }
[09:31:03.712]     ...future.result$conditions <- ...future.conditions
[09:31:03.712]     ...future.result$finished <- base::Sys.time()
[09:31:03.712]     ...future.result
[09:31:03.712] }
[09:31:03.729]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.713] plan(): Setting new future strategy stack:
[09:31:03.730]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.713] List of future strategies:
[09:31:03.713] 1. sequential:
[09:31:03.713]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.713]    - tweaked: FALSE
[09:31:03.713]    - call: NULL
[09:31:03.730]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.714] plan(): nbrOfWorkers() = 1
[09:31:03.730]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.714] plan(): Setting new future strategy stack:
[09:31:03.730]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.715] List of future strategies:
[09:31:03.715] 1. sequential:
[09:31:03.715]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.715]    - tweaked: FALSE
[09:31:03.715]    - call: NULL
[09:31:03.730]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.715] plan(): nbrOfWorkers() = 1
[09:31:03.730]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.715] SequentialFuture started (and completed)
[09:31:03.730]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.715] - Launch lazy future ... done
[09:31:03.730]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:03.715] run() for ‘SequentialFuture’ ... done
[09:31:03.731] signalConditions() ... done
a = 10
[09:31:03.731] getGlobalsAndPackages() ...
[09:31:03.731] Searching for globals...
[09:31:03.732] - globals found: [3] ‘{’, ‘+’, ‘a’
[09:31:03.732] Searching for globals ... DONE
[09:31:03.732] Resolving globals: FALSE
[09:31:03.733] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:03.733] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:03.733] - globals: [1] ‘a’
[09:31:03.733] 
[09:31:03.733] getGlobalsAndPackages() ... DONE
[09:31:03.733] run() for ‘Future’ ...
[09:31:03.734] - state: ‘created’
[09:31:03.734] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:03.734] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:03.734] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:03.734]   - Field: ‘label’
[09:31:03.734]   - Field: ‘local’
[09:31:03.734]   - Field: ‘owner’
[09:31:03.734]   - Field: ‘envir’
[09:31:03.735]   - Field: ‘packages’
[09:31:03.735]   - Field: ‘gc’
[09:31:03.735]   - Field: ‘conditions’
[09:31:03.735]   - Field: ‘expr’
[09:31:03.735]   - Field: ‘uuid’
[09:31:03.735]   - Field: ‘seed’
[09:31:03.735]   - Field: ‘version’
[09:31:03.735]   - Field: ‘result’
[09:31:03.735]   - Field: ‘asynchronous’
[09:31:03.735]   - Field: ‘calls’
[09:31:03.735]   - Field: ‘globals’
[09:31:03.735]   - Field: ‘stdout’
[09:31:03.736]   - Field: ‘earlySignal’
[09:31:03.736]   - Field: ‘lazy’
[09:31:03.736]   - Field: ‘state’
[09:31:03.736] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:03.736] - Launch lazy future ...
[09:31:03.736] Packages needed by the future expression (n = 0): <none>
[09:31:03.736] Packages needed by future strategies (n = 0): <none>
[09:31:03.737] {
[09:31:03.737]     {
[09:31:03.737]         {
[09:31:03.737]             ...future.startTime <- base::Sys.time()
[09:31:03.737]             {
[09:31:03.737]                 {
[09:31:03.737]                   {
[09:31:03.737]                     base::local({
[09:31:03.737]                       has_future <- base::requireNamespace("future", 
[09:31:03.737]                         quietly = TRUE)
[09:31:03.737]                       if (has_future) {
[09:31:03.737]                         ns <- base::getNamespace("future")
[09:31:03.737]                         version <- ns[[".package"]][["version"]]
[09:31:03.737]                         if (is.null(version)) 
[09:31:03.737]                           version <- utils::packageVersion("future")
[09:31:03.737]                       }
[09:31:03.737]                       else {
[09:31:03.737]                         version <- NULL
[09:31:03.737]                       }
[09:31:03.737]                       if (!has_future || version < "1.8.0") {
[09:31:03.737]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.737]                           "", base::R.version$version.string), 
[09:31:03.737]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:03.737]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.737]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.737]                             "release", "version")], collapse = " "), 
[09:31:03.737]                           hostname = base::Sys.info()[["nodename"]])
[09:31:03.737]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.737]                           info)
[09:31:03.737]                         info <- base::paste(info, collapse = "; ")
[09:31:03.737]                         if (!has_future) {
[09:31:03.737]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.737]                             info)
[09:31:03.737]                         }
[09:31:03.737]                         else {
[09:31:03.737]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.737]                             info, version)
[09:31:03.737]                         }
[09:31:03.737]                         base::stop(msg)
[09:31:03.737]                       }
[09:31:03.737]                     })
[09:31:03.737]                   }
[09:31:03.737]                   ...future.strategy.old <- future::plan("list")
[09:31:03.737]                   options(future.plan = NULL)
[09:31:03.737]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.737]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.737]                 }
[09:31:03.737]                 ...future.workdir <- getwd()
[09:31:03.737]             }
[09:31:03.737]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.737]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.737]         }
[09:31:03.737]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.737]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.737]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.737]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.737]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.737]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.737]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.737]             base::names(...future.oldOptions))
[09:31:03.737]     }
[09:31:03.737]     if (FALSE) {
[09:31:03.737]     }
[09:31:03.737]     else {
[09:31:03.737]         if (TRUE) {
[09:31:03.737]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.737]                 open = "w")
[09:31:03.737]         }
[09:31:03.737]         else {
[09:31:03.737]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.737]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.737]         }
[09:31:03.737]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.737]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.737]             base::sink(type = "output", split = FALSE)
[09:31:03.737]             base::close(...future.stdout)
[09:31:03.737]         }, add = TRUE)
[09:31:03.737]     }
[09:31:03.737]     ...future.frame <- base::sys.nframe()
[09:31:03.737]     ...future.conditions <- base::list()
[09:31:03.737]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.737]     if (FALSE) {
[09:31:03.737]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.737]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.737]     }
[09:31:03.737]     ...future.result <- base::tryCatch({
[09:31:03.737]         base::withCallingHandlers({
[09:31:03.737]             ...future.value <- base::withVisible(base::local({
[09:31:03.737]                 a + 1
[09:31:03.737]             }))
[09:31:03.737]             future::FutureResult(value = ...future.value$value, 
[09:31:03.737]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.737]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.737]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.737]                     ...future.globalenv.names))
[09:31:03.737]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.737]         }, condition = base::local({
[09:31:03.737]             c <- base::c
[09:31:03.737]             inherits <- base::inherits
[09:31:03.737]             invokeRestart <- base::invokeRestart
[09:31:03.737]             length <- base::length
[09:31:03.737]             list <- base::list
[09:31:03.737]             seq.int <- base::seq.int
[09:31:03.737]             signalCondition <- base::signalCondition
[09:31:03.737]             sys.calls <- base::sys.calls
[09:31:03.737]             `[[` <- base::`[[`
[09:31:03.737]             `+` <- base::`+`
[09:31:03.737]             `<<-` <- base::`<<-`
[09:31:03.737]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.737]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.737]                   3L)]
[09:31:03.737]             }
[09:31:03.737]             function(cond) {
[09:31:03.737]                 is_error <- inherits(cond, "error")
[09:31:03.737]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.737]                   NULL)
[09:31:03.737]                 if (is_error) {
[09:31:03.737]                   sessionInformation <- function() {
[09:31:03.737]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.737]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.737]                       search = base::search(), system = base::Sys.info())
[09:31:03.737]                   }
[09:31:03.737]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.737]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.737]                     cond$call), session = sessionInformation(), 
[09:31:03.737]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.737]                   signalCondition(cond)
[09:31:03.737]                 }
[09:31:03.737]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.737]                 "immediateCondition"))) {
[09:31:03.737]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.737]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.737]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.737]                   if (TRUE && !signal) {
[09:31:03.737]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.737]                     {
[09:31:03.737]                       inherits <- base::inherits
[09:31:03.737]                       invokeRestart <- base::invokeRestart
[09:31:03.737]                       is.null <- base::is.null
[09:31:03.737]                       muffled <- FALSE
[09:31:03.737]                       if (inherits(cond, "message")) {
[09:31:03.737]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.737]                         if (muffled) 
[09:31:03.737]                           invokeRestart("muffleMessage")
[09:31:03.737]                       }
[09:31:03.737]                       else if (inherits(cond, "warning")) {
[09:31:03.737]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.737]                         if (muffled) 
[09:31:03.737]                           invokeRestart("muffleWarning")
[09:31:03.737]                       }
[09:31:03.737]                       else if (inherits(cond, "condition")) {
[09:31:03.737]                         if (!is.null(pattern)) {
[09:31:03.737]                           computeRestarts <- base::computeRestarts
[09:31:03.737]                           grepl <- base::grepl
[09:31:03.737]                           restarts <- computeRestarts(cond)
[09:31:03.737]                           for (restart in restarts) {
[09:31:03.737]                             name <- restart$name
[09:31:03.737]                             if (is.null(name)) 
[09:31:03.737]                               next
[09:31:03.737]                             if (!grepl(pattern, name)) 
[09:31:03.737]                               next
[09:31:03.737]                             invokeRestart(restart)
[09:31:03.737]                             muffled <- TRUE
[09:31:03.737]                             break
[09:31:03.737]                           }
[09:31:03.737]                         }
[09:31:03.737]                       }
[09:31:03.737]                       invisible(muffled)
[09:31:03.737]                     }
[09:31:03.737]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.737]                   }
[09:31:03.737]                 }
[09:31:03.737]                 else {
[09:31:03.737]                   if (TRUE) {
[09:31:03.737]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.737]                     {
[09:31:03.737]                       inherits <- base::inherits
[09:31:03.737]                       invokeRestart <- base::invokeRestart
[09:31:03.737]                       is.null <- base::is.null
[09:31:03.737]                       muffled <- FALSE
[09:31:03.737]                       if (inherits(cond, "message")) {
[09:31:03.737]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.737]                         if (muffled) 
[09:31:03.737]                           invokeRestart("muffleMessage")
[09:31:03.737]                       }
[09:31:03.737]                       else if (inherits(cond, "warning")) {
[09:31:03.737]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.737]                         if (muffled) 
[09:31:03.737]                           invokeRestart("muffleWarning")
[09:31:03.737]                       }
[09:31:03.737]                       else if (inherits(cond, "condition")) {
[09:31:03.737]                         if (!is.null(pattern)) {
[09:31:03.737]                           computeRestarts <- base::computeRestarts
[09:31:03.737]                           grepl <- base::grepl
[09:31:03.737]                           restarts <- computeRestarts(cond)
[09:31:03.737]                           for (restart in restarts) {
[09:31:03.737]                             name <- restart$name
[09:31:03.737]                             if (is.null(name)) 
[09:31:03.737]                               next
[09:31:03.737]                             if (!grepl(pattern, name)) 
[09:31:03.737]                               next
[09:31:03.737]                             invokeRestart(restart)
[09:31:03.737]                             muffled <- TRUE
[09:31:03.737]                             break
[09:31:03.737]                           }
[09:31:03.737]                         }
[09:31:03.737]                       }
[09:31:03.737]                       invisible(muffled)
[09:31:03.737]                     }
[09:31:03.737]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.737]                   }
[09:31:03.737]                 }
[09:31:03.737]             }
[09:31:03.737]         }))
[09:31:03.737]     }, error = function(ex) {
[09:31:03.737]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.737]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.737]                 ...future.rng), started = ...future.startTime, 
[09:31:03.737]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.737]             version = "1.8"), class = "FutureResult")
[09:31:03.737]     }, finally = {
[09:31:03.737]         if (!identical(...future.workdir, getwd())) 
[09:31:03.737]             setwd(...future.workdir)
[09:31:03.737]         {
[09:31:03.737]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.737]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.737]             }
[09:31:03.737]             base::options(...future.oldOptions)
[09:31:03.737]             if (.Platform$OS.type == "windows") {
[09:31:03.737]                 old_names <- names(...future.oldEnvVars)
[09:31:03.737]                 envs <- base::Sys.getenv()
[09:31:03.737]                 names <- names(envs)
[09:31:03.737]                 common <- intersect(names, old_names)
[09:31:03.737]                 added <- setdiff(names, old_names)
[09:31:03.737]                 removed <- setdiff(old_names, names)
[09:31:03.737]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.737]                   envs[common]]
[09:31:03.737]                 NAMES <- toupper(changed)
[09:31:03.737]                 args <- list()
[09:31:03.737]                 for (kk in seq_along(NAMES)) {
[09:31:03.737]                   name <- changed[[kk]]
[09:31:03.737]                   NAME <- NAMES[[kk]]
[09:31:03.737]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.737]                     next
[09:31:03.737]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.737]                 }
[09:31:03.737]                 NAMES <- toupper(added)
[09:31:03.737]                 for (kk in seq_along(NAMES)) {
[09:31:03.737]                   name <- added[[kk]]
[09:31:03.737]                   NAME <- NAMES[[kk]]
[09:31:03.737]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.737]                     next
[09:31:03.737]                   args[[name]] <- ""
[09:31:03.737]                 }
[09:31:03.737]                 NAMES <- toupper(removed)
[09:31:03.737]                 for (kk in seq_along(NAMES)) {
[09:31:03.737]                   name <- removed[[kk]]
[09:31:03.737]                   NAME <- NAMES[[kk]]
[09:31:03.737]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.737]                     next
[09:31:03.737]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.737]                 }
[09:31:03.737]                 if (length(args) > 0) 
[09:31:03.737]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.737]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.737]             }
[09:31:03.737]             else {
[09:31:03.737]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.737]             }
[09:31:03.737]             {
[09:31:03.737]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.737]                   0L) {
[09:31:03.737]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.737]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.737]                   base::options(opts)
[09:31:03.737]                 }
[09:31:03.737]                 {
[09:31:03.737]                   {
[09:31:03.737]                     NULL
[09:31:03.737]                     RNGkind("Mersenne-Twister")
[09:31:03.737]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:03.737]                       inherits = FALSE)
[09:31:03.737]                   }
[09:31:03.737]                   options(future.plan = NULL)
[09:31:03.737]                   if (is.na(NA_character_)) 
[09:31:03.737]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.737]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.737]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.737]                     .init = FALSE)
[09:31:03.737]                 }
[09:31:03.737]             }
[09:31:03.737]         }
[09:31:03.737]     })
[09:31:03.737]     if (TRUE) {
[09:31:03.737]         base::sink(type = "output", split = FALSE)
[09:31:03.737]         if (TRUE) {
[09:31:03.737]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.737]         }
[09:31:03.737]         else {
[09:31:03.737]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.737]         }
[09:31:03.737]         base::close(...future.stdout)
[09:31:03.737]         ...future.stdout <- NULL
[09:31:03.737]     }
[09:31:03.737]     ...future.result$conditions <- ...future.conditions
[09:31:03.737]     ...future.result$finished <- base::Sys.time()
[09:31:03.737]     ...future.result
[09:31:03.737] }
[09:31:03.738] assign_globals() ...
[09:31:03.738] List of 1
[09:31:03.738]  $ a: num 10
[09:31:03.738]  - attr(*, "where")=List of 1
[09:31:03.738]   ..$ a:<environment: R_EmptyEnv> 
[09:31:03.738]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.738]  - attr(*, "resolved")= logi FALSE
[09:31:03.738]  - attr(*, "total_size")= num 56
[09:31:03.738]  - attr(*, "already-done")= logi TRUE
[09:31:03.741] - copied ‘a’ to environment
[09:31:03.741] assign_globals() ... done
[09:31:03.741] plan(): Setting new future strategy stack:
[09:31:03.742] List of future strategies:
[09:31:03.742] 1. sequential:
[09:31:03.742]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.742]    - tweaked: FALSE
[09:31:03.742]    - call: NULL
[09:31:03.742] plan(): nbrOfWorkers() = 1
[09:31:03.743] plan(): Setting new future strategy stack:
[09:31:03.743] List of future strategies:
[09:31:03.743] 1. sequential:
[09:31:03.743]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.743]    - tweaked: FALSE
[09:31:03.743]    - call: plan(strategy)
[09:31:03.743] plan(): nbrOfWorkers() = 1
[09:31:03.744] SequentialFuture started (and completed)
[09:31:03.744] - Launch lazy future ... done
[09:31:03.746] run() for ‘SequentialFuture’ ... done
b = 11
*** %<-% with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** %<-% with ‘multicore’ futures ...
[09:31:03.751] plan(): Setting new future strategy stack:
[09:31:03.751] List of future strategies:
[09:31:03.751] 1. multicore:
[09:31:03.751]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:03.751]    - tweaked: FALSE
[09:31:03.751]    - call: plan(strategy)
[09:31:03.755] plan(): nbrOfWorkers() = 2
** Future evaluation without globals
[09:31:03.756] getGlobalsAndPackages() ...
[09:31:03.756] Searching for globals...
[09:31:03.757] - globals found: [2] ‘{’, ‘<-’
[09:31:03.757] Searching for globals ... DONE
[09:31:03.757] Resolving globals: FALSE
[09:31:03.757] 
[09:31:03.757] 
[09:31:03.757] getGlobalsAndPackages() ... DONE
[09:31:03.758] run() for ‘Future’ ...
[09:31:03.758] - state: ‘created’
[09:31:03.758] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:03.761] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:03.761] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:03.762]   - Field: ‘label’
[09:31:03.762]   - Field: ‘local’
[09:31:03.762]   - Field: ‘owner’
[09:31:03.762]   - Field: ‘envir’
[09:31:03.762]   - Field: ‘workers’
[09:31:03.762]   - Field: ‘packages’
[09:31:03.762]   - Field: ‘gc’
[09:31:03.762]   - Field: ‘job’
[09:31:03.762]   - Field: ‘conditions’
[09:31:03.762]   - Field: ‘expr’
[09:31:03.763]   - Field: ‘uuid’
[09:31:03.763]   - Field: ‘seed’
[09:31:03.763]   - Field: ‘version’
[09:31:03.763]   - Field: ‘result’
[09:31:03.763]   - Field: ‘asynchronous’
[09:31:03.763]   - Field: ‘calls’
[09:31:03.763]   - Field: ‘globals’
[09:31:03.763]   - Field: ‘stdout’
[09:31:03.763]   - Field: ‘earlySignal’
[09:31:03.763]   - Field: ‘lazy’
[09:31:03.763]   - Field: ‘state’
[09:31:03.763] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:03.764] - Launch lazy future ...
[09:31:03.765] Packages needed by the future expression (n = 0): <none>
[09:31:03.765] Packages needed by future strategies (n = 0): <none>
[09:31:03.765] {
[09:31:03.765]     {
[09:31:03.765]         {
[09:31:03.765]             ...future.startTime <- base::Sys.time()
[09:31:03.765]             {
[09:31:03.765]                 {
[09:31:03.765]                   {
[09:31:03.765]                     {
[09:31:03.765]                       base::local({
[09:31:03.765]                         has_future <- base::requireNamespace("future", 
[09:31:03.765]                           quietly = TRUE)
[09:31:03.765]                         if (has_future) {
[09:31:03.765]                           ns <- base::getNamespace("future")
[09:31:03.765]                           version <- ns[[".package"]][["version"]]
[09:31:03.765]                           if (is.null(version)) 
[09:31:03.765]                             version <- utils::packageVersion("future")
[09:31:03.765]                         }
[09:31:03.765]                         else {
[09:31:03.765]                           version <- NULL
[09:31:03.765]                         }
[09:31:03.765]                         if (!has_future || version < "1.8.0") {
[09:31:03.765]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.765]                             "", base::R.version$version.string), 
[09:31:03.765]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:03.765]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.765]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.765]                               "release", "version")], collapse = " "), 
[09:31:03.765]                             hostname = base::Sys.info()[["nodename"]])
[09:31:03.765]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.765]                             info)
[09:31:03.765]                           info <- base::paste(info, collapse = "; ")
[09:31:03.765]                           if (!has_future) {
[09:31:03.765]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.765]                               info)
[09:31:03.765]                           }
[09:31:03.765]                           else {
[09:31:03.765]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.765]                               info, version)
[09:31:03.765]                           }
[09:31:03.765]                           base::stop(msg)
[09:31:03.765]                         }
[09:31:03.765]                       })
[09:31:03.765]                     }
[09:31:03.765]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:03.765]                     base::options(mc.cores = 1L)
[09:31:03.765]                   }
[09:31:03.765]                   ...future.strategy.old <- future::plan("list")
[09:31:03.765]                   options(future.plan = NULL)
[09:31:03.765]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.765]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.765]                 }
[09:31:03.765]                 ...future.workdir <- getwd()
[09:31:03.765]             }
[09:31:03.765]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.765]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.765]         }
[09:31:03.765]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.765]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.765]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.765]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.765]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.765]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.765]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.765]             base::names(...future.oldOptions))
[09:31:03.765]     }
[09:31:03.765]     if (FALSE) {
[09:31:03.765]     }
[09:31:03.765]     else {
[09:31:03.765]         if (TRUE) {
[09:31:03.765]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.765]                 open = "w")
[09:31:03.765]         }
[09:31:03.765]         else {
[09:31:03.765]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.765]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.765]         }
[09:31:03.765]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.765]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.765]             base::sink(type = "output", split = FALSE)
[09:31:03.765]             base::close(...future.stdout)
[09:31:03.765]         }, add = TRUE)
[09:31:03.765]     }
[09:31:03.765]     ...future.frame <- base::sys.nframe()
[09:31:03.765]     ...future.conditions <- base::list()
[09:31:03.765]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.765]     if (FALSE) {
[09:31:03.765]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.765]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.765]     }
[09:31:03.765]     ...future.result <- base::tryCatch({
[09:31:03.765]         base::withCallingHandlers({
[09:31:03.765]             ...future.value <- base::withVisible(base::local({
[09:31:03.765]                 withCallingHandlers({
[09:31:03.765]                   {
[09:31:03.765]                     x <- 1
[09:31:03.765]                   }
[09:31:03.765]                 }, immediateCondition = function(cond) {
[09:31:03.765]                   save_rds <- function (object, pathname, ...) 
[09:31:03.765]                   {
[09:31:03.765]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:03.765]                     if (file_test("-f", pathname_tmp)) {
[09:31:03.765]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.765]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:03.765]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.765]                         fi_tmp[["mtime"]])
[09:31:03.765]                     }
[09:31:03.765]                     tryCatch({
[09:31:03.765]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:03.765]                     }, error = function(ex) {
[09:31:03.765]                       msg <- conditionMessage(ex)
[09:31:03.765]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.765]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:03.765]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.765]                         fi_tmp[["mtime"]], msg)
[09:31:03.765]                       ex$message <- msg
[09:31:03.765]                       stop(ex)
[09:31:03.765]                     })
[09:31:03.765]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:03.765]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:03.765]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:03.765]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.765]                       fi <- file.info(pathname)
[09:31:03.765]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:03.765]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.765]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:03.765]                         fi[["size"]], fi[["mtime"]])
[09:31:03.765]                       stop(msg)
[09:31:03.765]                     }
[09:31:03.765]                     invisible(pathname)
[09:31:03.765]                   }
[09:31:03.765]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:03.765]                     rootPath = tempdir()) 
[09:31:03.765]                   {
[09:31:03.765]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:03.765]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:03.765]                       tmpdir = path, fileext = ".rds")
[09:31:03.765]                     save_rds(obj, file)
[09:31:03.765]                   }
[09:31:03.765]                   saveImmediateCondition(cond, path = "/tmp/RtmpgspuSi/.future/immediateConditions")
[09:31:03.765]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.765]                   {
[09:31:03.765]                     inherits <- base::inherits
[09:31:03.765]                     invokeRestart <- base::invokeRestart
[09:31:03.765]                     is.null <- base::is.null
[09:31:03.765]                     muffled <- FALSE
[09:31:03.765]                     if (inherits(cond, "message")) {
[09:31:03.765]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:03.765]                       if (muffled) 
[09:31:03.765]                         invokeRestart("muffleMessage")
[09:31:03.765]                     }
[09:31:03.765]                     else if (inherits(cond, "warning")) {
[09:31:03.765]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:03.765]                       if (muffled) 
[09:31:03.765]                         invokeRestart("muffleWarning")
[09:31:03.765]                     }
[09:31:03.765]                     else if (inherits(cond, "condition")) {
[09:31:03.765]                       if (!is.null(pattern)) {
[09:31:03.765]                         computeRestarts <- base::computeRestarts
[09:31:03.765]                         grepl <- base::grepl
[09:31:03.765]                         restarts <- computeRestarts(cond)
[09:31:03.765]                         for (restart in restarts) {
[09:31:03.765]                           name <- restart$name
[09:31:03.765]                           if (is.null(name)) 
[09:31:03.765]                             next
[09:31:03.765]                           if (!grepl(pattern, name)) 
[09:31:03.765]                             next
[09:31:03.765]                           invokeRestart(restart)
[09:31:03.765]                           muffled <- TRUE
[09:31:03.765]                           break
[09:31:03.765]                         }
[09:31:03.765]                       }
[09:31:03.765]                     }
[09:31:03.765]                     invisible(muffled)
[09:31:03.765]                   }
[09:31:03.765]                   muffleCondition(cond)
[09:31:03.765]                 })
[09:31:03.765]             }))
[09:31:03.765]             future::FutureResult(value = ...future.value$value, 
[09:31:03.765]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.765]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.765]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.765]                     ...future.globalenv.names))
[09:31:03.765]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.765]         }, condition = base::local({
[09:31:03.765]             c <- base::c
[09:31:03.765]             inherits <- base::inherits
[09:31:03.765]             invokeRestart <- base::invokeRestart
[09:31:03.765]             length <- base::length
[09:31:03.765]             list <- base::list
[09:31:03.765]             seq.int <- base::seq.int
[09:31:03.765]             signalCondition <- base::signalCondition
[09:31:03.765]             sys.calls <- base::sys.calls
[09:31:03.765]             `[[` <- base::`[[`
[09:31:03.765]             `+` <- base::`+`
[09:31:03.765]             `<<-` <- base::`<<-`
[09:31:03.765]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.765]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.765]                   3L)]
[09:31:03.765]             }
[09:31:03.765]             function(cond) {
[09:31:03.765]                 is_error <- inherits(cond, "error")
[09:31:03.765]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.765]                   NULL)
[09:31:03.765]                 if (is_error) {
[09:31:03.765]                   sessionInformation <- function() {
[09:31:03.765]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.765]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.765]                       search = base::search(), system = base::Sys.info())
[09:31:03.765]                   }
[09:31:03.765]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.765]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.765]                     cond$call), session = sessionInformation(), 
[09:31:03.765]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.765]                   signalCondition(cond)
[09:31:03.765]                 }
[09:31:03.765]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.765]                 "immediateCondition"))) {
[09:31:03.765]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.765]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.765]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.765]                   if (TRUE && !signal) {
[09:31:03.765]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.765]                     {
[09:31:03.765]                       inherits <- base::inherits
[09:31:03.765]                       invokeRestart <- base::invokeRestart
[09:31:03.765]                       is.null <- base::is.null
[09:31:03.765]                       muffled <- FALSE
[09:31:03.765]                       if (inherits(cond, "message")) {
[09:31:03.765]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.765]                         if (muffled) 
[09:31:03.765]                           invokeRestart("muffleMessage")
[09:31:03.765]                       }
[09:31:03.765]                       else if (inherits(cond, "warning")) {
[09:31:03.765]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.765]                         if (muffled) 
[09:31:03.765]                           invokeRestart("muffleWarning")
[09:31:03.765]                       }
[09:31:03.765]                       else if (inherits(cond, "condition")) {
[09:31:03.765]                         if (!is.null(pattern)) {
[09:31:03.765]                           computeRestarts <- base::computeRestarts
[09:31:03.765]                           grepl <- base::grepl
[09:31:03.765]                           restarts <- computeRestarts(cond)
[09:31:03.765]                           for (restart in restarts) {
[09:31:03.765]                             name <- restart$name
[09:31:03.765]                             if (is.null(name)) 
[09:31:03.765]                               next
[09:31:03.765]                             if (!grepl(pattern, name)) 
[09:31:03.765]                               next
[09:31:03.765]                             invokeRestart(restart)
[09:31:03.765]                             muffled <- TRUE
[09:31:03.765]                             break
[09:31:03.765]                           }
[09:31:03.765]                         }
[09:31:03.765]                       }
[09:31:03.765]                       invisible(muffled)
[09:31:03.765]                     }
[09:31:03.765]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.765]                   }
[09:31:03.765]                 }
[09:31:03.765]                 else {
[09:31:03.765]                   if (TRUE) {
[09:31:03.765]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.765]                     {
[09:31:03.765]                       inherits <- base::inherits
[09:31:03.765]                       invokeRestart <- base::invokeRestart
[09:31:03.765]                       is.null <- base::is.null
[09:31:03.765]                       muffled <- FALSE
[09:31:03.765]                       if (inherits(cond, "message")) {
[09:31:03.765]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.765]                         if (muffled) 
[09:31:03.765]                           invokeRestart("muffleMessage")
[09:31:03.765]                       }
[09:31:03.765]                       else if (inherits(cond, "warning")) {
[09:31:03.765]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.765]                         if (muffled) 
[09:31:03.765]                           invokeRestart("muffleWarning")
[09:31:03.765]                       }
[09:31:03.765]                       else if (inherits(cond, "condition")) {
[09:31:03.765]                         if (!is.null(pattern)) {
[09:31:03.765]                           computeRestarts <- base::computeRestarts
[09:31:03.765]                           grepl <- base::grepl
[09:31:03.765]                           restarts <- computeRestarts(cond)
[09:31:03.765]                           for (restart in restarts) {
[09:31:03.765]                             name <- restart$name
[09:31:03.765]                             if (is.null(name)) 
[09:31:03.765]                               next
[09:31:03.765]                             if (!grepl(pattern, name)) 
[09:31:03.765]                               next
[09:31:03.765]                             invokeRestart(restart)
[09:31:03.765]                             muffled <- TRUE
[09:31:03.765]                             break
[09:31:03.765]                           }
[09:31:03.765]                         }
[09:31:03.765]                       }
[09:31:03.765]                       invisible(muffled)
[09:31:03.765]                     }
[09:31:03.765]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.765]                   }
[09:31:03.765]                 }
[09:31:03.765]             }
[09:31:03.765]         }))
[09:31:03.765]     }, error = function(ex) {
[09:31:03.765]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.765]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.765]                 ...future.rng), started = ...future.startTime, 
[09:31:03.765]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.765]             version = "1.8"), class = "FutureResult")
[09:31:03.765]     }, finally = {
[09:31:03.765]         if (!identical(...future.workdir, getwd())) 
[09:31:03.765]             setwd(...future.workdir)
[09:31:03.765]         {
[09:31:03.765]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.765]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.765]             }
[09:31:03.765]             base::options(...future.oldOptions)
[09:31:03.765]             if (.Platform$OS.type == "windows") {
[09:31:03.765]                 old_names <- names(...future.oldEnvVars)
[09:31:03.765]                 envs <- base::Sys.getenv()
[09:31:03.765]                 names <- names(envs)
[09:31:03.765]                 common <- intersect(names, old_names)
[09:31:03.765]                 added <- setdiff(names, old_names)
[09:31:03.765]                 removed <- setdiff(old_names, names)
[09:31:03.765]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.765]                   envs[common]]
[09:31:03.765]                 NAMES <- toupper(changed)
[09:31:03.765]                 args <- list()
[09:31:03.765]                 for (kk in seq_along(NAMES)) {
[09:31:03.765]                   name <- changed[[kk]]
[09:31:03.765]                   NAME <- NAMES[[kk]]
[09:31:03.765]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.765]                     next
[09:31:03.765]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.765]                 }
[09:31:03.765]                 NAMES <- toupper(added)
[09:31:03.765]                 for (kk in seq_along(NAMES)) {
[09:31:03.765]                   name <- added[[kk]]
[09:31:03.765]                   NAME <- NAMES[[kk]]
[09:31:03.765]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.765]                     next
[09:31:03.765]                   args[[name]] <- ""
[09:31:03.765]                 }
[09:31:03.765]                 NAMES <- toupper(removed)
[09:31:03.765]                 for (kk in seq_along(NAMES)) {
[09:31:03.765]                   name <- removed[[kk]]
[09:31:03.765]                   NAME <- NAMES[[kk]]
[09:31:03.765]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.765]                     next
[09:31:03.765]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.765]                 }
[09:31:03.765]                 if (length(args) > 0) 
[09:31:03.765]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.765]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.765]             }
[09:31:03.765]             else {
[09:31:03.765]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.765]             }
[09:31:03.765]             {
[09:31:03.765]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.765]                   0L) {
[09:31:03.765]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.765]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.765]                   base::options(opts)
[09:31:03.765]                 }
[09:31:03.765]                 {
[09:31:03.765]                   {
[09:31:03.765]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:03.765]                     NULL
[09:31:03.765]                   }
[09:31:03.765]                   options(future.plan = NULL)
[09:31:03.765]                   if (is.na(NA_character_)) 
[09:31:03.765]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.765]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.765]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.765]                     .init = FALSE)
[09:31:03.765]                 }
[09:31:03.765]             }
[09:31:03.765]         }
[09:31:03.765]     })
[09:31:03.765]     if (TRUE) {
[09:31:03.765]         base::sink(type = "output", split = FALSE)
[09:31:03.765]         if (TRUE) {
[09:31:03.765]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.765]         }
[09:31:03.765]         else {
[09:31:03.765]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.765]         }
[09:31:03.765]         base::close(...future.stdout)
[09:31:03.765]         ...future.stdout <- NULL
[09:31:03.765]     }
[09:31:03.765]     ...future.result$conditions <- ...future.conditions
[09:31:03.765]     ...future.result$finished <- base::Sys.time()
[09:31:03.765]     ...future.result
[09:31:03.765] }
[09:31:03.767] requestCore(): workers = 2
[09:31:03.770] MulticoreFuture started
[09:31:03.771] - Launch lazy future ... done
[09:31:03.771] run() for ‘MulticoreFuture’ ... done
[09:31:03.771] plan(): Setting new future strategy stack:
[09:31:03.771] List of future strategies:
[09:31:03.771] 1. sequential:
[09:31:03.771]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.771]    - tweaked: FALSE
[09:31:03.771]    - call: NULL
[09:31:03.772] plan(): nbrOfWorkers() = 1
[09:31:03.772] result() for MulticoreFuture ...
[09:31:03.774] plan(): Setting new future strategy stack:
[09:31:03.774] List of future strategies:
[09:31:03.774] 1. multicore:
[09:31:03.774]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:03.774]    - tweaked: FALSE
[09:31:03.774]    - call: plan(strategy)
[09:31:03.779] plan(): nbrOfWorkers() = 2
[09:31:03.783] result() for MulticoreFuture ...
[09:31:03.784] result() for MulticoreFuture ... done
[09:31:03.784] result() for MulticoreFuture ... done
[09:31:03.784] result() for MulticoreFuture ...
[09:31:03.784] result() for MulticoreFuture ... done
** Future evaluation with globals
[09:31:03.784] getGlobalsAndPackages() ...
[09:31:03.785] Searching for globals...
[09:31:03.786] - globals found: [3] ‘{’, ‘<-’, ‘a’
[09:31:03.786] Searching for globals ... DONE
[09:31:03.786] Resolving globals: FALSE
[09:31:03.787] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:03.787] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:03.787] - globals: [1] ‘a’
[09:31:03.787] 
[09:31:03.787] getGlobalsAndPackages() ... DONE
[09:31:03.788] run() for ‘Future’ ...
[09:31:03.788] - state: ‘created’
[09:31:03.788] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:03.794] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:03.794] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:03.794]   - Field: ‘label’
[09:31:03.795]   - Field: ‘local’
[09:31:03.795]   - Field: ‘owner’
[09:31:03.795]   - Field: ‘envir’
[09:31:03.795]   - Field: ‘workers’
[09:31:03.795]   - Field: ‘packages’
[09:31:03.795]   - Field: ‘gc’
[09:31:03.795]   - Field: ‘job’
[09:31:03.796]   - Field: ‘conditions’
[09:31:03.796]   - Field: ‘expr’
[09:31:03.796]   - Field: ‘uuid’
[09:31:03.796]   - Field: ‘seed’
[09:31:03.796]   - Field: ‘version’
[09:31:03.796]   - Field: ‘result’
[09:31:03.796]   - Field: ‘asynchronous’
[09:31:03.796]   - Field: ‘calls’
[09:31:03.797]   - Field: ‘globals’
[09:31:03.797]   - Field: ‘stdout’
[09:31:03.797]   - Field: ‘earlySignal’
[09:31:03.797]   - Field: ‘lazy’
[09:31:03.797]   - Field: ‘state’
[09:31:03.797] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:03.797] - Launch lazy future ...
[09:31:03.798] Packages needed by the future expression (n = 0): <none>
[09:31:03.798] Packages needed by future strategies (n = 0): <none>
[09:31:03.798] {
[09:31:03.798]     {
[09:31:03.798]         {
[09:31:03.798]             ...future.startTime <- base::Sys.time()
[09:31:03.798]             {
[09:31:03.798]                 {
[09:31:03.798]                   {
[09:31:03.798]                     {
[09:31:03.798]                       base::local({
[09:31:03.798]                         has_future <- base::requireNamespace("future", 
[09:31:03.798]                           quietly = TRUE)
[09:31:03.798]                         if (has_future) {
[09:31:03.798]                           ns <- base::getNamespace("future")
[09:31:03.798]                           version <- ns[[".package"]][["version"]]
[09:31:03.798]                           if (is.null(version)) 
[09:31:03.798]                             version <- utils::packageVersion("future")
[09:31:03.798]                         }
[09:31:03.798]                         else {
[09:31:03.798]                           version <- NULL
[09:31:03.798]                         }
[09:31:03.798]                         if (!has_future || version < "1.8.0") {
[09:31:03.798]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.798]                             "", base::R.version$version.string), 
[09:31:03.798]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:03.798]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.798]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.798]                               "release", "version")], collapse = " "), 
[09:31:03.798]                             hostname = base::Sys.info()[["nodename"]])
[09:31:03.798]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.798]                             info)
[09:31:03.798]                           info <- base::paste(info, collapse = "; ")
[09:31:03.798]                           if (!has_future) {
[09:31:03.798]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.798]                               info)
[09:31:03.798]                           }
[09:31:03.798]                           else {
[09:31:03.798]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.798]                               info, version)
[09:31:03.798]                           }
[09:31:03.798]                           base::stop(msg)
[09:31:03.798]                         }
[09:31:03.798]                       })
[09:31:03.798]                     }
[09:31:03.798]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:03.798]                     base::options(mc.cores = 1L)
[09:31:03.798]                   }
[09:31:03.798]                   ...future.strategy.old <- future::plan("list")
[09:31:03.798]                   options(future.plan = NULL)
[09:31:03.798]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.798]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.798]                 }
[09:31:03.798]                 ...future.workdir <- getwd()
[09:31:03.798]             }
[09:31:03.798]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.798]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.798]         }
[09:31:03.798]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.798]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.798]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.798]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.798]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.798]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.798]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.798]             base::names(...future.oldOptions))
[09:31:03.798]     }
[09:31:03.798]     if (FALSE) {
[09:31:03.798]     }
[09:31:03.798]     else {
[09:31:03.798]         if (TRUE) {
[09:31:03.798]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.798]                 open = "w")
[09:31:03.798]         }
[09:31:03.798]         else {
[09:31:03.798]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.798]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.798]         }
[09:31:03.798]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.798]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.798]             base::sink(type = "output", split = FALSE)
[09:31:03.798]             base::close(...future.stdout)
[09:31:03.798]         }, add = TRUE)
[09:31:03.798]     }
[09:31:03.798]     ...future.frame <- base::sys.nframe()
[09:31:03.798]     ...future.conditions <- base::list()
[09:31:03.798]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.798]     if (FALSE) {
[09:31:03.798]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.798]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.798]     }
[09:31:03.798]     ...future.result <- base::tryCatch({
[09:31:03.798]         base::withCallingHandlers({
[09:31:03.798]             ...future.value <- base::withVisible(base::local({
[09:31:03.798]                 withCallingHandlers({
[09:31:03.798]                   {
[09:31:03.798]                     x <- a
[09:31:03.798]                   }
[09:31:03.798]                 }, immediateCondition = function(cond) {
[09:31:03.798]                   save_rds <- function (object, pathname, ...) 
[09:31:03.798]                   {
[09:31:03.798]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:03.798]                     if (file_test("-f", pathname_tmp)) {
[09:31:03.798]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.798]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:03.798]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.798]                         fi_tmp[["mtime"]])
[09:31:03.798]                     }
[09:31:03.798]                     tryCatch({
[09:31:03.798]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:03.798]                     }, error = function(ex) {
[09:31:03.798]                       msg <- conditionMessage(ex)
[09:31:03.798]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.798]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:03.798]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.798]                         fi_tmp[["mtime"]], msg)
[09:31:03.798]                       ex$message <- msg
[09:31:03.798]                       stop(ex)
[09:31:03.798]                     })
[09:31:03.798]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:03.798]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:03.798]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:03.798]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.798]                       fi <- file.info(pathname)
[09:31:03.798]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:03.798]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.798]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:03.798]                         fi[["size"]], fi[["mtime"]])
[09:31:03.798]                       stop(msg)
[09:31:03.798]                     }
[09:31:03.798]                     invisible(pathname)
[09:31:03.798]                   }
[09:31:03.798]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:03.798]                     rootPath = tempdir()) 
[09:31:03.798]                   {
[09:31:03.798]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:03.798]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:03.798]                       tmpdir = path, fileext = ".rds")
[09:31:03.798]                     save_rds(obj, file)
[09:31:03.798]                   }
[09:31:03.798]                   saveImmediateCondition(cond, path = "/tmp/RtmpgspuSi/.future/immediateConditions")
[09:31:03.798]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.798]                   {
[09:31:03.798]                     inherits <- base::inherits
[09:31:03.798]                     invokeRestart <- base::invokeRestart
[09:31:03.798]                     is.null <- base::is.null
[09:31:03.798]                     muffled <- FALSE
[09:31:03.798]                     if (inherits(cond, "message")) {
[09:31:03.798]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:03.798]                       if (muffled) 
[09:31:03.798]                         invokeRestart("muffleMessage")
[09:31:03.798]                     }
[09:31:03.798]                     else if (inherits(cond, "warning")) {
[09:31:03.798]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:03.798]                       if (muffled) 
[09:31:03.798]                         invokeRestart("muffleWarning")
[09:31:03.798]                     }
[09:31:03.798]                     else if (inherits(cond, "condition")) {
[09:31:03.798]                       if (!is.null(pattern)) {
[09:31:03.798]                         computeRestarts <- base::computeRestarts
[09:31:03.798]                         grepl <- base::grepl
[09:31:03.798]                         restarts <- computeRestarts(cond)
[09:31:03.798]                         for (restart in restarts) {
[09:31:03.798]                           name <- restart$name
[09:31:03.798]                           if (is.null(name)) 
[09:31:03.798]                             next
[09:31:03.798]                           if (!grepl(pattern, name)) 
[09:31:03.798]                             next
[09:31:03.798]                           invokeRestart(restart)
[09:31:03.798]                           muffled <- TRUE
[09:31:03.798]                           break
[09:31:03.798]                         }
[09:31:03.798]                       }
[09:31:03.798]                     }
[09:31:03.798]                     invisible(muffled)
[09:31:03.798]                   }
[09:31:03.798]                   muffleCondition(cond)
[09:31:03.798]                 })
[09:31:03.798]             }))
[09:31:03.798]             future::FutureResult(value = ...future.value$value, 
[09:31:03.798]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.798]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.798]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.798]                     ...future.globalenv.names))
[09:31:03.798]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.798]         }, condition = base::local({
[09:31:03.798]             c <- base::c
[09:31:03.798]             inherits <- base::inherits
[09:31:03.798]             invokeRestart <- base::invokeRestart
[09:31:03.798]             length <- base::length
[09:31:03.798]             list <- base::list
[09:31:03.798]             seq.int <- base::seq.int
[09:31:03.798]             signalCondition <- base::signalCondition
[09:31:03.798]             sys.calls <- base::sys.calls
[09:31:03.798]             `[[` <- base::`[[`
[09:31:03.798]             `+` <- base::`+`
[09:31:03.798]             `<<-` <- base::`<<-`
[09:31:03.798]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.798]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.798]                   3L)]
[09:31:03.798]             }
[09:31:03.798]             function(cond) {
[09:31:03.798]                 is_error <- inherits(cond, "error")
[09:31:03.798]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.798]                   NULL)
[09:31:03.798]                 if (is_error) {
[09:31:03.798]                   sessionInformation <- function() {
[09:31:03.798]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.798]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.798]                       search = base::search(), system = base::Sys.info())
[09:31:03.798]                   }
[09:31:03.798]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.798]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.798]                     cond$call), session = sessionInformation(), 
[09:31:03.798]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.798]                   signalCondition(cond)
[09:31:03.798]                 }
[09:31:03.798]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.798]                 "immediateCondition"))) {
[09:31:03.798]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.798]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.798]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.798]                   if (TRUE && !signal) {
[09:31:03.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.798]                     {
[09:31:03.798]                       inherits <- base::inherits
[09:31:03.798]                       invokeRestart <- base::invokeRestart
[09:31:03.798]                       is.null <- base::is.null
[09:31:03.798]                       muffled <- FALSE
[09:31:03.798]                       if (inherits(cond, "message")) {
[09:31:03.798]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.798]                         if (muffled) 
[09:31:03.798]                           invokeRestart("muffleMessage")
[09:31:03.798]                       }
[09:31:03.798]                       else if (inherits(cond, "warning")) {
[09:31:03.798]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.798]                         if (muffled) 
[09:31:03.798]                           invokeRestart("muffleWarning")
[09:31:03.798]                       }
[09:31:03.798]                       else if (inherits(cond, "condition")) {
[09:31:03.798]                         if (!is.null(pattern)) {
[09:31:03.798]                           computeRestarts <- base::computeRestarts
[09:31:03.798]                           grepl <- base::grepl
[09:31:03.798]                           restarts <- computeRestarts(cond)
[09:31:03.798]                           for (restart in restarts) {
[09:31:03.798]                             name <- restart$name
[09:31:03.798]                             if (is.null(name)) 
[09:31:03.798]                               next
[09:31:03.798]                             if (!grepl(pattern, name)) 
[09:31:03.798]                               next
[09:31:03.798]                             invokeRestart(restart)
[09:31:03.798]                             muffled <- TRUE
[09:31:03.798]                             break
[09:31:03.798]                           }
[09:31:03.798]                         }
[09:31:03.798]                       }
[09:31:03.798]                       invisible(muffled)
[09:31:03.798]                     }
[09:31:03.798]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.798]                   }
[09:31:03.798]                 }
[09:31:03.798]                 else {
[09:31:03.798]                   if (TRUE) {
[09:31:03.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.798]                     {
[09:31:03.798]                       inherits <- base::inherits
[09:31:03.798]                       invokeRestart <- base::invokeRestart
[09:31:03.798]                       is.null <- base::is.null
[09:31:03.798]                       muffled <- FALSE
[09:31:03.798]                       if (inherits(cond, "message")) {
[09:31:03.798]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.798]                         if (muffled) 
[09:31:03.798]                           invokeRestart("muffleMessage")
[09:31:03.798]                       }
[09:31:03.798]                       else if (inherits(cond, "warning")) {
[09:31:03.798]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.798]                         if (muffled) 
[09:31:03.798]                           invokeRestart("muffleWarning")
[09:31:03.798]                       }
[09:31:03.798]                       else if (inherits(cond, "condition")) {
[09:31:03.798]                         if (!is.null(pattern)) {
[09:31:03.798]                           computeRestarts <- base::computeRestarts
[09:31:03.798]                           grepl <- base::grepl
[09:31:03.798]                           restarts <- computeRestarts(cond)
[09:31:03.798]                           for (restart in restarts) {
[09:31:03.798]                             name <- restart$name
[09:31:03.798]                             if (is.null(name)) 
[09:31:03.798]                               next
[09:31:03.798]                             if (!grepl(pattern, name)) 
[09:31:03.798]                               next
[09:31:03.798]                             invokeRestart(restart)
[09:31:03.798]                             muffled <- TRUE
[09:31:03.798]                             break
[09:31:03.798]                           }
[09:31:03.798]                         }
[09:31:03.798]                       }
[09:31:03.798]                       invisible(muffled)
[09:31:03.798]                     }
[09:31:03.798]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.798]                   }
[09:31:03.798]                 }
[09:31:03.798]             }
[09:31:03.798]         }))
[09:31:03.798]     }, error = function(ex) {
[09:31:03.798]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.798]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.798]                 ...future.rng), started = ...future.startTime, 
[09:31:03.798]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.798]             version = "1.8"), class = "FutureResult")
[09:31:03.798]     }, finally = {
[09:31:03.798]         if (!identical(...future.workdir, getwd())) 
[09:31:03.798]             setwd(...future.workdir)
[09:31:03.798]         {
[09:31:03.798]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.798]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.798]             }
[09:31:03.798]             base::options(...future.oldOptions)
[09:31:03.798]             if (.Platform$OS.type == "windows") {
[09:31:03.798]                 old_names <- names(...future.oldEnvVars)
[09:31:03.798]                 envs <- base::Sys.getenv()
[09:31:03.798]                 names <- names(envs)
[09:31:03.798]                 common <- intersect(names, old_names)
[09:31:03.798]                 added <- setdiff(names, old_names)
[09:31:03.798]                 removed <- setdiff(old_names, names)
[09:31:03.798]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.798]                   envs[common]]
[09:31:03.798]                 NAMES <- toupper(changed)
[09:31:03.798]                 args <- list()
[09:31:03.798]                 for (kk in seq_along(NAMES)) {
[09:31:03.798]                   name <- changed[[kk]]
[09:31:03.798]                   NAME <- NAMES[[kk]]
[09:31:03.798]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.798]                     next
[09:31:03.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.798]                 }
[09:31:03.798]                 NAMES <- toupper(added)
[09:31:03.798]                 for (kk in seq_along(NAMES)) {
[09:31:03.798]                   name <- added[[kk]]
[09:31:03.798]                   NAME <- NAMES[[kk]]
[09:31:03.798]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.798]                     next
[09:31:03.798]                   args[[name]] <- ""
[09:31:03.798]                 }
[09:31:03.798]                 NAMES <- toupper(removed)
[09:31:03.798]                 for (kk in seq_along(NAMES)) {
[09:31:03.798]                   name <- removed[[kk]]
[09:31:03.798]                   NAME <- NAMES[[kk]]
[09:31:03.798]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.798]                     next
[09:31:03.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.798]                 }
[09:31:03.798]                 if (length(args) > 0) 
[09:31:03.798]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.798]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.798]             }
[09:31:03.798]             else {
[09:31:03.798]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.798]             }
[09:31:03.798]             {
[09:31:03.798]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.798]                   0L) {
[09:31:03.798]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.798]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.798]                   base::options(opts)
[09:31:03.798]                 }
[09:31:03.798]                 {
[09:31:03.798]                   {
[09:31:03.798]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:03.798]                     NULL
[09:31:03.798]                   }
[09:31:03.798]                   options(future.plan = NULL)
[09:31:03.798]                   if (is.na(NA_character_)) 
[09:31:03.798]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.798]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.798]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.798]                     .init = FALSE)
[09:31:03.798]                 }
[09:31:03.798]             }
[09:31:03.798]         }
[09:31:03.798]     })
[09:31:03.798]     if (TRUE) {
[09:31:03.798]         base::sink(type = "output", split = FALSE)
[09:31:03.798]         if (TRUE) {
[09:31:03.798]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.798]         }
[09:31:03.798]         else {
[09:31:03.798]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.798]         }
[09:31:03.798]         base::close(...future.stdout)
[09:31:03.798]         ...future.stdout <- NULL
[09:31:03.798]     }
[09:31:03.798]     ...future.result$conditions <- ...future.conditions
[09:31:03.798]     ...future.result$finished <- base::Sys.time()
[09:31:03.798]     ...future.result
[09:31:03.798] }
[09:31:03.801] assign_globals() ...
[09:31:03.801] List of 1
[09:31:03.801]  $ a: num 2
[09:31:03.801]  - attr(*, "where")=List of 1
[09:31:03.801]   ..$ a:<environment: R_EmptyEnv> 
[09:31:03.801]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.801]  - attr(*, "resolved")= logi FALSE
[09:31:03.801]  - attr(*, "total_size")= num 56
[09:31:03.801]  - attr(*, "already-done")= logi TRUE
[09:31:03.804] - copied ‘a’ to environment
[09:31:03.804] assign_globals() ... done
[09:31:03.804] requestCore(): workers = 2
[09:31:03.806] MulticoreFuture started
[09:31:03.806] - Launch lazy future ... done
[09:31:03.806] run() for ‘MulticoreFuture’ ... done
[09:31:03.807] result() for MulticoreFuture ...
[09:31:03.807] plan(): Setting new future strategy stack:
[09:31:03.807] List of future strategies:
[09:31:03.807] 1. sequential:
[09:31:03.807]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.807]    - tweaked: FALSE
[09:31:03.807]    - call: NULL
[09:31:03.808] plan(): nbrOfWorkers() = 1
[09:31:03.810] plan(): Setting new future strategy stack:
[09:31:03.810] List of future strategies:
[09:31:03.810] 1. multicore:
[09:31:03.810]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:03.810]    - tweaked: FALSE
[09:31:03.810]    - call: plan(strategy)
[09:31:03.815] plan(): nbrOfWorkers() = 2
[09:31:03.816] result() for MulticoreFuture ...
[09:31:03.816] result() for MulticoreFuture ... done
[09:31:03.816] result() for MulticoreFuture ... done
[09:31:03.816] result() for MulticoreFuture ...
[09:31:03.816] result() for MulticoreFuture ... done
** Future evaluation with errors
[09:31:03.817] getGlobalsAndPackages() ...
[09:31:03.817] Searching for globals...
[09:31:03.819] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[09:31:03.819] Searching for globals ... DONE
[09:31:03.819] Resolving globals: FALSE
[09:31:03.820] 
[09:31:03.820] 
[09:31:03.820] getGlobalsAndPackages() ... DONE
[09:31:03.820] run() for ‘Future’ ...
[09:31:03.821] - state: ‘created’
[09:31:03.821] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:03.825] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:03.825] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:03.825]   - Field: ‘label’
[09:31:03.825]   - Field: ‘local’
[09:31:03.826]   - Field: ‘owner’
[09:31:03.826]   - Field: ‘envir’
[09:31:03.826]   - Field: ‘workers’
[09:31:03.826]   - Field: ‘packages’
[09:31:03.826]   - Field: ‘gc’
[09:31:03.826]   - Field: ‘job’
[09:31:03.826]   - Field: ‘conditions’
[09:31:03.827]   - Field: ‘expr’
[09:31:03.827]   - Field: ‘uuid’
[09:31:03.827]   - Field: ‘seed’
[09:31:03.827]   - Field: ‘version’
[09:31:03.827]   - Field: ‘result’
[09:31:03.827]   - Field: ‘asynchronous’
[09:31:03.827]   - Field: ‘calls’
[09:31:03.827]   - Field: ‘globals’
[09:31:03.827]   - Field: ‘stdout’
[09:31:03.827]   - Field: ‘earlySignal’
[09:31:03.828]   - Field: ‘lazy’
[09:31:03.828]   - Field: ‘state’
[09:31:03.828] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:03.828] - Launch lazy future ...
[09:31:03.828] Packages needed by the future expression (n = 0): <none>
[09:31:03.828] Packages needed by future strategies (n = 0): <none>
[09:31:03.829] {
[09:31:03.829]     {
[09:31:03.829]         {
[09:31:03.829]             ...future.startTime <- base::Sys.time()
[09:31:03.829]             {
[09:31:03.829]                 {
[09:31:03.829]                   {
[09:31:03.829]                     {
[09:31:03.829]                       base::local({
[09:31:03.829]                         has_future <- base::requireNamespace("future", 
[09:31:03.829]                           quietly = TRUE)
[09:31:03.829]                         if (has_future) {
[09:31:03.829]                           ns <- base::getNamespace("future")
[09:31:03.829]                           version <- ns[[".package"]][["version"]]
[09:31:03.829]                           if (is.null(version)) 
[09:31:03.829]                             version <- utils::packageVersion("future")
[09:31:03.829]                         }
[09:31:03.829]                         else {
[09:31:03.829]                           version <- NULL
[09:31:03.829]                         }
[09:31:03.829]                         if (!has_future || version < "1.8.0") {
[09:31:03.829]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.829]                             "", base::R.version$version.string), 
[09:31:03.829]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:03.829]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.829]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.829]                               "release", "version")], collapse = " "), 
[09:31:03.829]                             hostname = base::Sys.info()[["nodename"]])
[09:31:03.829]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.829]                             info)
[09:31:03.829]                           info <- base::paste(info, collapse = "; ")
[09:31:03.829]                           if (!has_future) {
[09:31:03.829]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.829]                               info)
[09:31:03.829]                           }
[09:31:03.829]                           else {
[09:31:03.829]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.829]                               info, version)
[09:31:03.829]                           }
[09:31:03.829]                           base::stop(msg)
[09:31:03.829]                         }
[09:31:03.829]                       })
[09:31:03.829]                     }
[09:31:03.829]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:03.829]                     base::options(mc.cores = 1L)
[09:31:03.829]                   }
[09:31:03.829]                   ...future.strategy.old <- future::plan("list")
[09:31:03.829]                   options(future.plan = NULL)
[09:31:03.829]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.829]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.829]                 }
[09:31:03.829]                 ...future.workdir <- getwd()
[09:31:03.829]             }
[09:31:03.829]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.829]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.829]         }
[09:31:03.829]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.829]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.829]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.829]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.829]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.829]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.829]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.829]             base::names(...future.oldOptions))
[09:31:03.829]     }
[09:31:03.829]     if (FALSE) {
[09:31:03.829]     }
[09:31:03.829]     else {
[09:31:03.829]         if (TRUE) {
[09:31:03.829]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.829]                 open = "w")
[09:31:03.829]         }
[09:31:03.829]         else {
[09:31:03.829]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.829]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.829]         }
[09:31:03.829]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.829]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.829]             base::sink(type = "output", split = FALSE)
[09:31:03.829]             base::close(...future.stdout)
[09:31:03.829]         }, add = TRUE)
[09:31:03.829]     }
[09:31:03.829]     ...future.frame <- base::sys.nframe()
[09:31:03.829]     ...future.conditions <- base::list()
[09:31:03.829]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.829]     if (FALSE) {
[09:31:03.829]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.829]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.829]     }
[09:31:03.829]     ...future.result <- base::tryCatch({
[09:31:03.829]         base::withCallingHandlers({
[09:31:03.829]             ...future.value <- base::withVisible(base::local({
[09:31:03.829]                 withCallingHandlers({
[09:31:03.829]                   {
[09:31:03.829]                     x <- 3
[09:31:03.829]                     stop("Woops!")
[09:31:03.829]                     x
[09:31:03.829]                   }
[09:31:03.829]                 }, immediateCondition = function(cond) {
[09:31:03.829]                   save_rds <- function (object, pathname, ...) 
[09:31:03.829]                   {
[09:31:03.829]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:03.829]                     if (file_test("-f", pathname_tmp)) {
[09:31:03.829]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.829]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:03.829]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.829]                         fi_tmp[["mtime"]])
[09:31:03.829]                     }
[09:31:03.829]                     tryCatch({
[09:31:03.829]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:03.829]                     }, error = function(ex) {
[09:31:03.829]                       msg <- conditionMessage(ex)
[09:31:03.829]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.829]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:03.829]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.829]                         fi_tmp[["mtime"]], msg)
[09:31:03.829]                       ex$message <- msg
[09:31:03.829]                       stop(ex)
[09:31:03.829]                     })
[09:31:03.829]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:03.829]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:03.829]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:03.829]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.829]                       fi <- file.info(pathname)
[09:31:03.829]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:03.829]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.829]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:03.829]                         fi[["size"]], fi[["mtime"]])
[09:31:03.829]                       stop(msg)
[09:31:03.829]                     }
[09:31:03.829]                     invisible(pathname)
[09:31:03.829]                   }
[09:31:03.829]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:03.829]                     rootPath = tempdir()) 
[09:31:03.829]                   {
[09:31:03.829]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:03.829]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:03.829]                       tmpdir = path, fileext = ".rds")
[09:31:03.829]                     save_rds(obj, file)
[09:31:03.829]                   }
[09:31:03.829]                   saveImmediateCondition(cond, path = "/tmp/RtmpgspuSi/.future/immediateConditions")
[09:31:03.829]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.829]                   {
[09:31:03.829]                     inherits <- base::inherits
[09:31:03.829]                     invokeRestart <- base::invokeRestart
[09:31:03.829]                     is.null <- base::is.null
[09:31:03.829]                     muffled <- FALSE
[09:31:03.829]                     if (inherits(cond, "message")) {
[09:31:03.829]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:03.829]                       if (muffled) 
[09:31:03.829]                         invokeRestart("muffleMessage")
[09:31:03.829]                     }
[09:31:03.829]                     else if (inherits(cond, "warning")) {
[09:31:03.829]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:03.829]                       if (muffled) 
[09:31:03.829]                         invokeRestart("muffleWarning")
[09:31:03.829]                     }
[09:31:03.829]                     else if (inherits(cond, "condition")) {
[09:31:03.829]                       if (!is.null(pattern)) {
[09:31:03.829]                         computeRestarts <- base::computeRestarts
[09:31:03.829]                         grepl <- base::grepl
[09:31:03.829]                         restarts <- computeRestarts(cond)
[09:31:03.829]                         for (restart in restarts) {
[09:31:03.829]                           name <- restart$name
[09:31:03.829]                           if (is.null(name)) 
[09:31:03.829]                             next
[09:31:03.829]                           if (!grepl(pattern, name)) 
[09:31:03.829]                             next
[09:31:03.829]                           invokeRestart(restart)
[09:31:03.829]                           muffled <- TRUE
[09:31:03.829]                           break
[09:31:03.829]                         }
[09:31:03.829]                       }
[09:31:03.829]                     }
[09:31:03.829]                     invisible(muffled)
[09:31:03.829]                   }
[09:31:03.829]                   muffleCondition(cond)
[09:31:03.829]                 })
[09:31:03.829]             }))
[09:31:03.829]             future::FutureResult(value = ...future.value$value, 
[09:31:03.829]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.829]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.829]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.829]                     ...future.globalenv.names))
[09:31:03.829]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.829]         }, condition = base::local({
[09:31:03.829]             c <- base::c
[09:31:03.829]             inherits <- base::inherits
[09:31:03.829]             invokeRestart <- base::invokeRestart
[09:31:03.829]             length <- base::length
[09:31:03.829]             list <- base::list
[09:31:03.829]             seq.int <- base::seq.int
[09:31:03.829]             signalCondition <- base::signalCondition
[09:31:03.829]             sys.calls <- base::sys.calls
[09:31:03.829]             `[[` <- base::`[[`
[09:31:03.829]             `+` <- base::`+`
[09:31:03.829]             `<<-` <- base::`<<-`
[09:31:03.829]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.829]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.829]                   3L)]
[09:31:03.829]             }
[09:31:03.829]             function(cond) {
[09:31:03.829]                 is_error <- inherits(cond, "error")
[09:31:03.829]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.829]                   NULL)
[09:31:03.829]                 if (is_error) {
[09:31:03.829]                   sessionInformation <- function() {
[09:31:03.829]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.829]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.829]                       search = base::search(), system = base::Sys.info())
[09:31:03.829]                   }
[09:31:03.829]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.829]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.829]                     cond$call), session = sessionInformation(), 
[09:31:03.829]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.829]                   signalCondition(cond)
[09:31:03.829]                 }
[09:31:03.829]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.829]                 "immediateCondition"))) {
[09:31:03.829]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.829]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.829]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.829]                   if (TRUE && !signal) {
[09:31:03.829]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.829]                     {
[09:31:03.829]                       inherits <- base::inherits
[09:31:03.829]                       invokeRestart <- base::invokeRestart
[09:31:03.829]                       is.null <- base::is.null
[09:31:03.829]                       muffled <- FALSE
[09:31:03.829]                       if (inherits(cond, "message")) {
[09:31:03.829]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.829]                         if (muffled) 
[09:31:03.829]                           invokeRestart("muffleMessage")
[09:31:03.829]                       }
[09:31:03.829]                       else if (inherits(cond, "warning")) {
[09:31:03.829]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.829]                         if (muffled) 
[09:31:03.829]                           invokeRestart("muffleWarning")
[09:31:03.829]                       }
[09:31:03.829]                       else if (inherits(cond, "condition")) {
[09:31:03.829]                         if (!is.null(pattern)) {
[09:31:03.829]                           computeRestarts <- base::computeRestarts
[09:31:03.829]                           grepl <- base::grepl
[09:31:03.829]                           restarts <- computeRestarts(cond)
[09:31:03.829]                           for (restart in restarts) {
[09:31:03.829]                             name <- restart$name
[09:31:03.829]                             if (is.null(name)) 
[09:31:03.829]                               next
[09:31:03.829]                             if (!grepl(pattern, name)) 
[09:31:03.829]                               next
[09:31:03.829]                             invokeRestart(restart)
[09:31:03.829]                             muffled <- TRUE
[09:31:03.829]                             break
[09:31:03.829]                           }
[09:31:03.829]                         }
[09:31:03.829]                       }
[09:31:03.829]                       invisible(muffled)
[09:31:03.829]                     }
[09:31:03.829]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.829]                   }
[09:31:03.829]                 }
[09:31:03.829]                 else {
[09:31:03.829]                   if (TRUE) {
[09:31:03.829]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.829]                     {
[09:31:03.829]                       inherits <- base::inherits
[09:31:03.829]                       invokeRestart <- base::invokeRestart
[09:31:03.829]                       is.null <- base::is.null
[09:31:03.829]                       muffled <- FALSE
[09:31:03.829]                       if (inherits(cond, "message")) {
[09:31:03.829]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.829]                         if (muffled) 
[09:31:03.829]                           invokeRestart("muffleMessage")
[09:31:03.829]                       }
[09:31:03.829]                       else if (inherits(cond, "warning")) {
[09:31:03.829]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.829]                         if (muffled) 
[09:31:03.829]                           invokeRestart("muffleWarning")
[09:31:03.829]                       }
[09:31:03.829]                       else if (inherits(cond, "condition")) {
[09:31:03.829]                         if (!is.null(pattern)) {
[09:31:03.829]                           computeRestarts <- base::computeRestarts
[09:31:03.829]                           grepl <- base::grepl
[09:31:03.829]                           restarts <- computeRestarts(cond)
[09:31:03.829]                           for (restart in restarts) {
[09:31:03.829]                             name <- restart$name
[09:31:03.829]                             if (is.null(name)) 
[09:31:03.829]                               next
[09:31:03.829]                             if (!grepl(pattern, name)) 
[09:31:03.829]                               next
[09:31:03.829]                             invokeRestart(restart)
[09:31:03.829]                             muffled <- TRUE
[09:31:03.829]                             break
[09:31:03.829]                           }
[09:31:03.829]                         }
[09:31:03.829]                       }
[09:31:03.829]                       invisible(muffled)
[09:31:03.829]                     }
[09:31:03.829]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.829]                   }
[09:31:03.829]                 }
[09:31:03.829]             }
[09:31:03.829]         }))
[09:31:03.829]     }, error = function(ex) {
[09:31:03.829]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.829]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.829]                 ...future.rng), started = ...future.startTime, 
[09:31:03.829]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.829]             version = "1.8"), class = "FutureResult")
[09:31:03.829]     }, finally = {
[09:31:03.829]         if (!identical(...future.workdir, getwd())) 
[09:31:03.829]             setwd(...future.workdir)
[09:31:03.829]         {
[09:31:03.829]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.829]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.829]             }
[09:31:03.829]             base::options(...future.oldOptions)
[09:31:03.829]             if (.Platform$OS.type == "windows") {
[09:31:03.829]                 old_names <- names(...future.oldEnvVars)
[09:31:03.829]                 envs <- base::Sys.getenv()
[09:31:03.829]                 names <- names(envs)
[09:31:03.829]                 common <- intersect(names, old_names)
[09:31:03.829]                 added <- setdiff(names, old_names)
[09:31:03.829]                 removed <- setdiff(old_names, names)
[09:31:03.829]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.829]                   envs[common]]
[09:31:03.829]                 NAMES <- toupper(changed)
[09:31:03.829]                 args <- list()
[09:31:03.829]                 for (kk in seq_along(NAMES)) {
[09:31:03.829]                   name <- changed[[kk]]
[09:31:03.829]                   NAME <- NAMES[[kk]]
[09:31:03.829]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.829]                     next
[09:31:03.829]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.829]                 }
[09:31:03.829]                 NAMES <- toupper(added)
[09:31:03.829]                 for (kk in seq_along(NAMES)) {
[09:31:03.829]                   name <- added[[kk]]
[09:31:03.829]                   NAME <- NAMES[[kk]]
[09:31:03.829]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.829]                     next
[09:31:03.829]                   args[[name]] <- ""
[09:31:03.829]                 }
[09:31:03.829]                 NAMES <- toupper(removed)
[09:31:03.829]                 for (kk in seq_along(NAMES)) {
[09:31:03.829]                   name <- removed[[kk]]
[09:31:03.829]                   NAME <- NAMES[[kk]]
[09:31:03.829]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.829]                     next
[09:31:03.829]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.829]                 }
[09:31:03.829]                 if (length(args) > 0) 
[09:31:03.829]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.829]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.829]             }
[09:31:03.829]             else {
[09:31:03.829]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.829]             }
[09:31:03.829]             {
[09:31:03.829]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.829]                   0L) {
[09:31:03.829]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.829]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.829]                   base::options(opts)
[09:31:03.829]                 }
[09:31:03.829]                 {
[09:31:03.829]                   {
[09:31:03.829]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:03.829]                     NULL
[09:31:03.829]                   }
[09:31:03.829]                   options(future.plan = NULL)
[09:31:03.829]                   if (is.na(NA_character_)) 
[09:31:03.829]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.829]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.829]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.829]                     .init = FALSE)
[09:31:03.829]                 }
[09:31:03.829]             }
[09:31:03.829]         }
[09:31:03.829]     })
[09:31:03.829]     if (TRUE) {
[09:31:03.829]         base::sink(type = "output", split = FALSE)
[09:31:03.829]         if (TRUE) {
[09:31:03.829]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.829]         }
[09:31:03.829]         else {
[09:31:03.829]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.829]         }
[09:31:03.829]         base::close(...future.stdout)
[09:31:03.829]         ...future.stdout <- NULL
[09:31:03.829]     }
[09:31:03.829]     ...future.result$conditions <- ...future.conditions
[09:31:03.829]     ...future.result$finished <- base::Sys.time()
[09:31:03.829]     ...future.result
[09:31:03.829] }
[09:31:03.832] requestCore(): workers = 2
[09:31:03.833] MulticoreFuture started
[09:31:03.834] - Launch lazy future ... done
[09:31:03.834] run() for ‘MulticoreFuture’ ... done
[09:31:03.834] plan(): Setting new future strategy stack:
[09:31:03.834] result() for MulticoreFuture ...
[09:31:03.834] List of future strategies:
[09:31:03.834] 1. sequential:
[09:31:03.834]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.834]    - tweaked: FALSE
[09:31:03.834]    - call: NULL
[09:31:03.835] plan(): nbrOfWorkers() = 1
[09:31:03.837] plan(): Setting new future strategy stack:
[09:31:03.838] List of future strategies:
[09:31:03.838] 1. multicore:
[09:31:03.838]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:03.838]    - tweaked: FALSE
[09:31:03.838]    - call: plan(strategy)
[09:31:03.842] plan(): nbrOfWorkers() = 2
[09:31:03.847] result() for MulticoreFuture ...
[09:31:03.847] result() for MulticoreFuture ... done
[09:31:03.847] signalConditions() ...
[09:31:03.847]  - include = ‘immediateCondition’
[09:31:03.847]  - exclude = 
[09:31:03.847]  - resignal = FALSE
[09:31:03.848]  - Number of conditions: 1
[09:31:03.848] signalConditions() ... done
[09:31:03.848] result() for MulticoreFuture ... done
[09:31:03.848] result() for MulticoreFuture ...
[09:31:03.848] result() for MulticoreFuture ... done
[09:31:03.848] signalConditions() ...
[09:31:03.849]  - include = ‘immediateCondition’
[09:31:03.849]  - exclude = 
[09:31:03.849]  - resignal = FALSE
[09:31:03.849]  - Number of conditions: 1
[09:31:03.849] signalConditions() ... done
[09:31:03.849] Future state: ‘finished’
[09:31:03.849] result() for MulticoreFuture ...
[09:31:03.849] result() for MulticoreFuture ... done
[09:31:03.850] signalConditions() ...
[09:31:03.850]  - include = ‘condition’
[09:31:03.850]  - exclude = ‘immediateCondition’
[09:31:03.850]  - resignal = TRUE
[09:31:03.850]  - Number of conditions: 1
[09:31:03.850]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:03.850] signalConditions() ... done
[09:31:03.851] getGlobalsAndPackages() ...
[09:31:03.851] Searching for globals...
[09:31:03.853] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[09:31:03.855] Searching for globals ... DONE
[09:31:03.856] Resolving globals: FALSE
[09:31:03.856] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:03.857] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:03.857] - globals: [1] ‘ii’
[09:31:03.857] 
[09:31:03.857] getGlobalsAndPackages() ... DONE
[09:31:03.858] run() for ‘Future’ ...
[09:31:03.858] - state: ‘created’
[09:31:03.858] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:03.862] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:03.862] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:03.862]   - Field: ‘label’
[09:31:03.862]   - Field: ‘local’
[09:31:03.862]   - Field: ‘owner’
[09:31:03.862]   - Field: ‘envir’
[09:31:03.862]   - Field: ‘workers’
[09:31:03.863]   - Field: ‘packages’
[09:31:03.863]   - Field: ‘gc’
[09:31:03.863]   - Field: ‘job’
[09:31:03.863]   - Field: ‘conditions’
[09:31:03.863]   - Field: ‘expr’
[09:31:03.863]   - Field: ‘uuid’
[09:31:03.863]   - Field: ‘seed’
[09:31:03.863]   - Field: ‘version’
[09:31:03.863]   - Field: ‘result’
[09:31:03.864]   - Field: ‘asynchronous’
[09:31:03.864]   - Field: ‘calls’
[09:31:03.864]   - Field: ‘globals’
[09:31:03.864]   - Field: ‘stdout’
[09:31:03.864]   - Field: ‘earlySignal’
[09:31:03.864]   - Field: ‘lazy’
[09:31:03.864]   - Field: ‘state’
[09:31:03.864] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:03.865] - Launch lazy future ...
[09:31:03.865] Packages needed by the future expression (n = 0): <none>
[09:31:03.865] Packages needed by future strategies (n = 0): <none>
[09:31:03.865] {
[09:31:03.865]     {
[09:31:03.865]         {
[09:31:03.865]             ...future.startTime <- base::Sys.time()
[09:31:03.865]             {
[09:31:03.865]                 {
[09:31:03.865]                   {
[09:31:03.865]                     {
[09:31:03.865]                       base::local({
[09:31:03.865]                         has_future <- base::requireNamespace("future", 
[09:31:03.865]                           quietly = TRUE)
[09:31:03.865]                         if (has_future) {
[09:31:03.865]                           ns <- base::getNamespace("future")
[09:31:03.865]                           version <- ns[[".package"]][["version"]]
[09:31:03.865]                           if (is.null(version)) 
[09:31:03.865]                             version <- utils::packageVersion("future")
[09:31:03.865]                         }
[09:31:03.865]                         else {
[09:31:03.865]                           version <- NULL
[09:31:03.865]                         }
[09:31:03.865]                         if (!has_future || version < "1.8.0") {
[09:31:03.865]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.865]                             "", base::R.version$version.string), 
[09:31:03.865]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:03.865]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.865]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.865]                               "release", "version")], collapse = " "), 
[09:31:03.865]                             hostname = base::Sys.info()[["nodename"]])
[09:31:03.865]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.865]                             info)
[09:31:03.865]                           info <- base::paste(info, collapse = "; ")
[09:31:03.865]                           if (!has_future) {
[09:31:03.865]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.865]                               info)
[09:31:03.865]                           }
[09:31:03.865]                           else {
[09:31:03.865]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.865]                               info, version)
[09:31:03.865]                           }
[09:31:03.865]                           base::stop(msg)
[09:31:03.865]                         }
[09:31:03.865]                       })
[09:31:03.865]                     }
[09:31:03.865]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:03.865]                     base::options(mc.cores = 1L)
[09:31:03.865]                   }
[09:31:03.865]                   ...future.strategy.old <- future::plan("list")
[09:31:03.865]                   options(future.plan = NULL)
[09:31:03.865]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.865]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.865]                 }
[09:31:03.865]                 ...future.workdir <- getwd()
[09:31:03.865]             }
[09:31:03.865]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.865]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.865]         }
[09:31:03.865]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.865]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.865]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.865]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.865]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.865]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.865]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.865]             base::names(...future.oldOptions))
[09:31:03.865]     }
[09:31:03.865]     if (FALSE) {
[09:31:03.865]     }
[09:31:03.865]     else {
[09:31:03.865]         if (TRUE) {
[09:31:03.865]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.865]                 open = "w")
[09:31:03.865]         }
[09:31:03.865]         else {
[09:31:03.865]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.865]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.865]         }
[09:31:03.865]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.865]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.865]             base::sink(type = "output", split = FALSE)
[09:31:03.865]             base::close(...future.stdout)
[09:31:03.865]         }, add = TRUE)
[09:31:03.865]     }
[09:31:03.865]     ...future.frame <- base::sys.nframe()
[09:31:03.865]     ...future.conditions <- base::list()
[09:31:03.865]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.865]     if (FALSE) {
[09:31:03.865]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.865]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.865]     }
[09:31:03.865]     ...future.result <- base::tryCatch({
[09:31:03.865]         base::withCallingHandlers({
[09:31:03.865]             ...future.value <- base::withVisible(base::local({
[09:31:03.865]                 withCallingHandlers({
[09:31:03.865]                   {
[09:31:03.865]                     if (ii%%2 == 0) 
[09:31:03.865]                       stop("Woops!")
[09:31:03.865]                     ii
[09:31:03.865]                   }
[09:31:03.865]                 }, immediateCondition = function(cond) {
[09:31:03.865]                   save_rds <- function (object, pathname, ...) 
[09:31:03.865]                   {
[09:31:03.865]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:03.865]                     if (file_test("-f", pathname_tmp)) {
[09:31:03.865]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.865]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:03.865]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.865]                         fi_tmp[["mtime"]])
[09:31:03.865]                     }
[09:31:03.865]                     tryCatch({
[09:31:03.865]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:03.865]                     }, error = function(ex) {
[09:31:03.865]                       msg <- conditionMessage(ex)
[09:31:03.865]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.865]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:03.865]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.865]                         fi_tmp[["mtime"]], msg)
[09:31:03.865]                       ex$message <- msg
[09:31:03.865]                       stop(ex)
[09:31:03.865]                     })
[09:31:03.865]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:03.865]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:03.865]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:03.865]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.865]                       fi <- file.info(pathname)
[09:31:03.865]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:03.865]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.865]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:03.865]                         fi[["size"]], fi[["mtime"]])
[09:31:03.865]                       stop(msg)
[09:31:03.865]                     }
[09:31:03.865]                     invisible(pathname)
[09:31:03.865]                   }
[09:31:03.865]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:03.865]                     rootPath = tempdir()) 
[09:31:03.865]                   {
[09:31:03.865]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:03.865]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:03.865]                       tmpdir = path, fileext = ".rds")
[09:31:03.865]                     save_rds(obj, file)
[09:31:03.865]                   }
[09:31:03.865]                   saveImmediateCondition(cond, path = "/tmp/RtmpgspuSi/.future/immediateConditions")
[09:31:03.865]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.865]                   {
[09:31:03.865]                     inherits <- base::inherits
[09:31:03.865]                     invokeRestart <- base::invokeRestart
[09:31:03.865]                     is.null <- base::is.null
[09:31:03.865]                     muffled <- FALSE
[09:31:03.865]                     if (inherits(cond, "message")) {
[09:31:03.865]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:03.865]                       if (muffled) 
[09:31:03.865]                         invokeRestart("muffleMessage")
[09:31:03.865]                     }
[09:31:03.865]                     else if (inherits(cond, "warning")) {
[09:31:03.865]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:03.865]                       if (muffled) 
[09:31:03.865]                         invokeRestart("muffleWarning")
[09:31:03.865]                     }
[09:31:03.865]                     else if (inherits(cond, "condition")) {
[09:31:03.865]                       if (!is.null(pattern)) {
[09:31:03.865]                         computeRestarts <- base::computeRestarts
[09:31:03.865]                         grepl <- base::grepl
[09:31:03.865]                         restarts <- computeRestarts(cond)
[09:31:03.865]                         for (restart in restarts) {
[09:31:03.865]                           name <- restart$name
[09:31:03.865]                           if (is.null(name)) 
[09:31:03.865]                             next
[09:31:03.865]                           if (!grepl(pattern, name)) 
[09:31:03.865]                             next
[09:31:03.865]                           invokeRestart(restart)
[09:31:03.865]                           muffled <- TRUE
[09:31:03.865]                           break
[09:31:03.865]                         }
[09:31:03.865]                       }
[09:31:03.865]                     }
[09:31:03.865]                     invisible(muffled)
[09:31:03.865]                   }
[09:31:03.865]                   muffleCondition(cond)
[09:31:03.865]                 })
[09:31:03.865]             }))
[09:31:03.865]             future::FutureResult(value = ...future.value$value, 
[09:31:03.865]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.865]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.865]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.865]                     ...future.globalenv.names))
[09:31:03.865]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.865]         }, condition = base::local({
[09:31:03.865]             c <- base::c
[09:31:03.865]             inherits <- base::inherits
[09:31:03.865]             invokeRestart <- base::invokeRestart
[09:31:03.865]             length <- base::length
[09:31:03.865]             list <- base::list
[09:31:03.865]             seq.int <- base::seq.int
[09:31:03.865]             signalCondition <- base::signalCondition
[09:31:03.865]             sys.calls <- base::sys.calls
[09:31:03.865]             `[[` <- base::`[[`
[09:31:03.865]             `+` <- base::`+`
[09:31:03.865]             `<<-` <- base::`<<-`
[09:31:03.865]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.865]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.865]                   3L)]
[09:31:03.865]             }
[09:31:03.865]             function(cond) {
[09:31:03.865]                 is_error <- inherits(cond, "error")
[09:31:03.865]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.865]                   NULL)
[09:31:03.865]                 if (is_error) {
[09:31:03.865]                   sessionInformation <- function() {
[09:31:03.865]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.865]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.865]                       search = base::search(), system = base::Sys.info())
[09:31:03.865]                   }
[09:31:03.865]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.865]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.865]                     cond$call), session = sessionInformation(), 
[09:31:03.865]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.865]                   signalCondition(cond)
[09:31:03.865]                 }
[09:31:03.865]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.865]                 "immediateCondition"))) {
[09:31:03.865]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.865]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.865]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.865]                   if (TRUE && !signal) {
[09:31:03.865]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.865]                     {
[09:31:03.865]                       inherits <- base::inherits
[09:31:03.865]                       invokeRestart <- base::invokeRestart
[09:31:03.865]                       is.null <- base::is.null
[09:31:03.865]                       muffled <- FALSE
[09:31:03.865]                       if (inherits(cond, "message")) {
[09:31:03.865]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.865]                         if (muffled) 
[09:31:03.865]                           invokeRestart("muffleMessage")
[09:31:03.865]                       }
[09:31:03.865]                       else if (inherits(cond, "warning")) {
[09:31:03.865]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.865]                         if (muffled) 
[09:31:03.865]                           invokeRestart("muffleWarning")
[09:31:03.865]                       }
[09:31:03.865]                       else if (inherits(cond, "condition")) {
[09:31:03.865]                         if (!is.null(pattern)) {
[09:31:03.865]                           computeRestarts <- base::computeRestarts
[09:31:03.865]                           grepl <- base::grepl
[09:31:03.865]                           restarts <- computeRestarts(cond)
[09:31:03.865]                           for (restart in restarts) {
[09:31:03.865]                             name <- restart$name
[09:31:03.865]                             if (is.null(name)) 
[09:31:03.865]                               next
[09:31:03.865]                             if (!grepl(pattern, name)) 
[09:31:03.865]                               next
[09:31:03.865]                             invokeRestart(restart)
[09:31:03.865]                             muffled <- TRUE
[09:31:03.865]                             break
[09:31:03.865]                           }
[09:31:03.865]                         }
[09:31:03.865]                       }
[09:31:03.865]                       invisible(muffled)
[09:31:03.865]                     }
[09:31:03.865]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.865]                   }
[09:31:03.865]                 }
[09:31:03.865]                 else {
[09:31:03.865]                   if (TRUE) {
[09:31:03.865]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.865]                     {
[09:31:03.865]                       inherits <- base::inherits
[09:31:03.865]                       invokeRestart <- base::invokeRestart
[09:31:03.865]                       is.null <- base::is.null
[09:31:03.865]                       muffled <- FALSE
[09:31:03.865]                       if (inherits(cond, "message")) {
[09:31:03.865]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.865]                         if (muffled) 
[09:31:03.865]                           invokeRestart("muffleMessage")
[09:31:03.865]                       }
[09:31:03.865]                       else if (inherits(cond, "warning")) {
[09:31:03.865]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.865]                         if (muffled) 
[09:31:03.865]                           invokeRestart("muffleWarning")
[09:31:03.865]                       }
[09:31:03.865]                       else if (inherits(cond, "condition")) {
[09:31:03.865]                         if (!is.null(pattern)) {
[09:31:03.865]                           computeRestarts <- base::computeRestarts
[09:31:03.865]                           grepl <- base::grepl
[09:31:03.865]                           restarts <- computeRestarts(cond)
[09:31:03.865]                           for (restart in restarts) {
[09:31:03.865]                             name <- restart$name
[09:31:03.865]                             if (is.null(name)) 
[09:31:03.865]                               next
[09:31:03.865]                             if (!grepl(pattern, name)) 
[09:31:03.865]                               next
[09:31:03.865]                             invokeRestart(restart)
[09:31:03.865]                             muffled <- TRUE
[09:31:03.865]                             break
[09:31:03.865]                           }
[09:31:03.865]                         }
[09:31:03.865]                       }
[09:31:03.865]                       invisible(muffled)
[09:31:03.865]                     }
[09:31:03.865]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.865]                   }
[09:31:03.865]                 }
[09:31:03.865]             }
[09:31:03.865]         }))
[09:31:03.865]     }, error = function(ex) {
[09:31:03.865]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.865]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.865]                 ...future.rng), started = ...future.startTime, 
[09:31:03.865]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.865]             version = "1.8"), class = "FutureResult")
[09:31:03.865]     }, finally = {
[09:31:03.865]         if (!identical(...future.workdir, getwd())) 
[09:31:03.865]             setwd(...future.workdir)
[09:31:03.865]         {
[09:31:03.865]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.865]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.865]             }
[09:31:03.865]             base::options(...future.oldOptions)
[09:31:03.865]             if (.Platform$OS.type == "windows") {
[09:31:03.865]                 old_names <- names(...future.oldEnvVars)
[09:31:03.865]                 envs <- base::Sys.getenv()
[09:31:03.865]                 names <- names(envs)
[09:31:03.865]                 common <- intersect(names, old_names)
[09:31:03.865]                 added <- setdiff(names, old_names)
[09:31:03.865]                 removed <- setdiff(old_names, names)
[09:31:03.865]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.865]                   envs[common]]
[09:31:03.865]                 NAMES <- toupper(changed)
[09:31:03.865]                 args <- list()
[09:31:03.865]                 for (kk in seq_along(NAMES)) {
[09:31:03.865]                   name <- changed[[kk]]
[09:31:03.865]                   NAME <- NAMES[[kk]]
[09:31:03.865]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.865]                     next
[09:31:03.865]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.865]                 }
[09:31:03.865]                 NAMES <- toupper(added)
[09:31:03.865]                 for (kk in seq_along(NAMES)) {
[09:31:03.865]                   name <- added[[kk]]
[09:31:03.865]                   NAME <- NAMES[[kk]]
[09:31:03.865]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.865]                     next
[09:31:03.865]                   args[[name]] <- ""
[09:31:03.865]                 }
[09:31:03.865]                 NAMES <- toupper(removed)
[09:31:03.865]                 for (kk in seq_along(NAMES)) {
[09:31:03.865]                   name <- removed[[kk]]
[09:31:03.865]                   NAME <- NAMES[[kk]]
[09:31:03.865]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.865]                     next
[09:31:03.865]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.865]                 }
[09:31:03.865]                 if (length(args) > 0) 
[09:31:03.865]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.865]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.865]             }
[09:31:03.865]             else {
[09:31:03.865]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.865]             }
[09:31:03.865]             {
[09:31:03.865]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.865]                   0L) {
[09:31:03.865]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.865]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.865]                   base::options(opts)
[09:31:03.865]                 }
[09:31:03.865]                 {
[09:31:03.865]                   {
[09:31:03.865]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:03.865]                     NULL
[09:31:03.865]                   }
[09:31:03.865]                   options(future.plan = NULL)
[09:31:03.865]                   if (is.na(NA_character_)) 
[09:31:03.865]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.865]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.865]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.865]                     .init = FALSE)
[09:31:03.865]                 }
[09:31:03.865]             }
[09:31:03.865]         }
[09:31:03.865]     })
[09:31:03.865]     if (TRUE) {
[09:31:03.865]         base::sink(type = "output", split = FALSE)
[09:31:03.865]         if (TRUE) {
[09:31:03.865]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.865]         }
[09:31:03.865]         else {
[09:31:03.865]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.865]         }
[09:31:03.865]         base::close(...future.stdout)
[09:31:03.865]         ...future.stdout <- NULL
[09:31:03.865]     }
[09:31:03.865]     ...future.result$conditions <- ...future.conditions
[09:31:03.865]     ...future.result$finished <- base::Sys.time()
[09:31:03.865]     ...future.result
[09:31:03.865] }
[09:31:03.868] assign_globals() ...
[09:31:03.868] List of 1
[09:31:03.868]  $ ii: int 1
[09:31:03.868]  - attr(*, "where")=List of 1
[09:31:03.868]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:03.868]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.868]  - attr(*, "resolved")= logi FALSE
[09:31:03.868]  - attr(*, "total_size")= num 56
[09:31:03.868]  - attr(*, "already-done")= logi TRUE
[09:31:03.871] - copied ‘ii’ to environment
[09:31:03.871] assign_globals() ... done
[09:31:03.871] requestCore(): workers = 2
[09:31:03.873] MulticoreFuture started
[09:31:03.873] - Launch lazy future ... done
[09:31:03.873] run() for ‘MulticoreFuture’ ... done
[09:31:03.874] plan(): Setting new future strategy stack:
[09:31:03.874] getGlobalsAndPackages() ...
[09:31:03.874] Searching for globals...
[09:31:03.874] List of future strategies:
[09:31:03.874] 1. sequential:
[09:31:03.874]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.874]    - tweaked: FALSE
[09:31:03.874]    - call: NULL
[09:31:03.875] plan(): nbrOfWorkers() = 1
[09:31:03.877] plan(): Setting new future strategy stack:
[09:31:03.877] List of future strategies:
[09:31:03.877] 1. multicore:
[09:31:03.877]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:03.877]    - tweaked: FALSE
[09:31:03.877]    - call: plan(strategy)
[09:31:03.877] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[09:31:03.877] Searching for globals ... DONE
[09:31:03.878] Resolving globals: FALSE
[09:31:03.878] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:03.879] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:03.879] - globals: [1] ‘ii’
[09:31:03.879] 
[09:31:03.880] getGlobalsAndPackages() ... DONE
[09:31:03.880] run() for ‘Future’ ...
[09:31:03.880] - state: ‘created’
[09:31:03.880] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:03.881] plan(): nbrOfWorkers() = 2
[09:31:03.885] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:03.885] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:03.885]   - Field: ‘label’
[09:31:03.885]   - Field: ‘local’
[09:31:03.885]   - Field: ‘owner’
[09:31:03.885]   - Field: ‘envir’
[09:31:03.885]   - Field: ‘workers’
[09:31:03.886]   - Field: ‘packages’
[09:31:03.886]   - Field: ‘gc’
[09:31:03.886]   - Field: ‘job’
[09:31:03.886]   - Field: ‘conditions’
[09:31:03.886]   - Field: ‘expr’
[09:31:03.886]   - Field: ‘uuid’
[09:31:03.886]   - Field: ‘seed’
[09:31:03.887]   - Field: ‘version’
[09:31:03.887]   - Field: ‘result’
[09:31:03.887]   - Field: ‘asynchronous’
[09:31:03.887]   - Field: ‘calls’
[09:31:03.887]   - Field: ‘globals’
[09:31:03.887]   - Field: ‘stdout’
[09:31:03.887]   - Field: ‘earlySignal’
[09:31:03.888]   - Field: ‘lazy’
[09:31:03.888]   - Field: ‘state’
[09:31:03.888] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:03.888] - Launch lazy future ...
[09:31:03.888] Packages needed by the future expression (n = 0): <none>
[09:31:03.889] Packages needed by future strategies (n = 0): <none>
[09:31:03.889] {
[09:31:03.889]     {
[09:31:03.889]         {
[09:31:03.889]             ...future.startTime <- base::Sys.time()
[09:31:03.889]             {
[09:31:03.889]                 {
[09:31:03.889]                   {
[09:31:03.889]                     {
[09:31:03.889]                       base::local({
[09:31:03.889]                         has_future <- base::requireNamespace("future", 
[09:31:03.889]                           quietly = TRUE)
[09:31:03.889]                         if (has_future) {
[09:31:03.889]                           ns <- base::getNamespace("future")
[09:31:03.889]                           version <- ns[[".package"]][["version"]]
[09:31:03.889]                           if (is.null(version)) 
[09:31:03.889]                             version <- utils::packageVersion("future")
[09:31:03.889]                         }
[09:31:03.889]                         else {
[09:31:03.889]                           version <- NULL
[09:31:03.889]                         }
[09:31:03.889]                         if (!has_future || version < "1.8.0") {
[09:31:03.889]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.889]                             "", base::R.version$version.string), 
[09:31:03.889]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:03.889]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.889]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.889]                               "release", "version")], collapse = " "), 
[09:31:03.889]                             hostname = base::Sys.info()[["nodename"]])
[09:31:03.889]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.889]                             info)
[09:31:03.889]                           info <- base::paste(info, collapse = "; ")
[09:31:03.889]                           if (!has_future) {
[09:31:03.889]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.889]                               info)
[09:31:03.889]                           }
[09:31:03.889]                           else {
[09:31:03.889]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.889]                               info, version)
[09:31:03.889]                           }
[09:31:03.889]                           base::stop(msg)
[09:31:03.889]                         }
[09:31:03.889]                       })
[09:31:03.889]                     }
[09:31:03.889]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:03.889]                     base::options(mc.cores = 1L)
[09:31:03.889]                   }
[09:31:03.889]                   ...future.strategy.old <- future::plan("list")
[09:31:03.889]                   options(future.plan = NULL)
[09:31:03.889]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.889]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.889]                 }
[09:31:03.889]                 ...future.workdir <- getwd()
[09:31:03.889]             }
[09:31:03.889]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.889]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.889]         }
[09:31:03.889]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.889]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.889]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.889]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.889]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.889]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.889]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.889]             base::names(...future.oldOptions))
[09:31:03.889]     }
[09:31:03.889]     if (FALSE) {
[09:31:03.889]     }
[09:31:03.889]     else {
[09:31:03.889]         if (TRUE) {
[09:31:03.889]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.889]                 open = "w")
[09:31:03.889]         }
[09:31:03.889]         else {
[09:31:03.889]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.889]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.889]         }
[09:31:03.889]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.889]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.889]             base::sink(type = "output", split = FALSE)
[09:31:03.889]             base::close(...future.stdout)
[09:31:03.889]         }, add = TRUE)
[09:31:03.889]     }
[09:31:03.889]     ...future.frame <- base::sys.nframe()
[09:31:03.889]     ...future.conditions <- base::list()
[09:31:03.889]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.889]     if (FALSE) {
[09:31:03.889]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.889]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.889]     }
[09:31:03.889]     ...future.result <- base::tryCatch({
[09:31:03.889]         base::withCallingHandlers({
[09:31:03.889]             ...future.value <- base::withVisible(base::local({
[09:31:03.889]                 withCallingHandlers({
[09:31:03.889]                   {
[09:31:03.889]                     if (ii%%2 == 0) 
[09:31:03.889]                       stop("Woops!")
[09:31:03.889]                     ii
[09:31:03.889]                   }
[09:31:03.889]                 }, immediateCondition = function(cond) {
[09:31:03.889]                   save_rds <- function (object, pathname, ...) 
[09:31:03.889]                   {
[09:31:03.889]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:03.889]                     if (file_test("-f", pathname_tmp)) {
[09:31:03.889]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.889]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:03.889]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.889]                         fi_tmp[["mtime"]])
[09:31:03.889]                     }
[09:31:03.889]                     tryCatch({
[09:31:03.889]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:03.889]                     }, error = function(ex) {
[09:31:03.889]                       msg <- conditionMessage(ex)
[09:31:03.889]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.889]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:03.889]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.889]                         fi_tmp[["mtime"]], msg)
[09:31:03.889]                       ex$message <- msg
[09:31:03.889]                       stop(ex)
[09:31:03.889]                     })
[09:31:03.889]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:03.889]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:03.889]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:03.889]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.889]                       fi <- file.info(pathname)
[09:31:03.889]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:03.889]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.889]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:03.889]                         fi[["size"]], fi[["mtime"]])
[09:31:03.889]                       stop(msg)
[09:31:03.889]                     }
[09:31:03.889]                     invisible(pathname)
[09:31:03.889]                   }
[09:31:03.889]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:03.889]                     rootPath = tempdir()) 
[09:31:03.889]                   {
[09:31:03.889]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:03.889]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:03.889]                       tmpdir = path, fileext = ".rds")
[09:31:03.889]                     save_rds(obj, file)
[09:31:03.889]                   }
[09:31:03.889]                   saveImmediateCondition(cond, path = "/tmp/RtmpgspuSi/.future/immediateConditions")
[09:31:03.889]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.889]                   {
[09:31:03.889]                     inherits <- base::inherits
[09:31:03.889]                     invokeRestart <- base::invokeRestart
[09:31:03.889]                     is.null <- base::is.null
[09:31:03.889]                     muffled <- FALSE
[09:31:03.889]                     if (inherits(cond, "message")) {
[09:31:03.889]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:03.889]                       if (muffled) 
[09:31:03.889]                         invokeRestart("muffleMessage")
[09:31:03.889]                     }
[09:31:03.889]                     else if (inherits(cond, "warning")) {
[09:31:03.889]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:03.889]                       if (muffled) 
[09:31:03.889]                         invokeRestart("muffleWarning")
[09:31:03.889]                     }
[09:31:03.889]                     else if (inherits(cond, "condition")) {
[09:31:03.889]                       if (!is.null(pattern)) {
[09:31:03.889]                         computeRestarts <- base::computeRestarts
[09:31:03.889]                         grepl <- base::grepl
[09:31:03.889]                         restarts <- computeRestarts(cond)
[09:31:03.889]                         for (restart in restarts) {
[09:31:03.889]                           name <- restart$name
[09:31:03.889]                           if (is.null(name)) 
[09:31:03.889]                             next
[09:31:03.889]                           if (!grepl(pattern, name)) 
[09:31:03.889]                             next
[09:31:03.889]                           invokeRestart(restart)
[09:31:03.889]                           muffled <- TRUE
[09:31:03.889]                           break
[09:31:03.889]                         }
[09:31:03.889]                       }
[09:31:03.889]                     }
[09:31:03.889]                     invisible(muffled)
[09:31:03.889]                   }
[09:31:03.889]                   muffleCondition(cond)
[09:31:03.889]                 })
[09:31:03.889]             }))
[09:31:03.889]             future::FutureResult(value = ...future.value$value, 
[09:31:03.889]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.889]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.889]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.889]                     ...future.globalenv.names))
[09:31:03.889]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.889]         }, condition = base::local({
[09:31:03.889]             c <- base::c
[09:31:03.889]             inherits <- base::inherits
[09:31:03.889]             invokeRestart <- base::invokeRestart
[09:31:03.889]             length <- base::length
[09:31:03.889]             list <- base::list
[09:31:03.889]             seq.int <- base::seq.int
[09:31:03.889]             signalCondition <- base::signalCondition
[09:31:03.889]             sys.calls <- base::sys.calls
[09:31:03.889]             `[[` <- base::`[[`
[09:31:03.889]             `+` <- base::`+`
[09:31:03.889]             `<<-` <- base::`<<-`
[09:31:03.889]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.889]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.889]                   3L)]
[09:31:03.889]             }
[09:31:03.889]             function(cond) {
[09:31:03.889]                 is_error <- inherits(cond, "error")
[09:31:03.889]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.889]                   NULL)
[09:31:03.889]                 if (is_error) {
[09:31:03.889]                   sessionInformation <- function() {
[09:31:03.889]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.889]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.889]                       search = base::search(), system = base::Sys.info())
[09:31:03.889]                   }
[09:31:03.889]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.889]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.889]                     cond$call), session = sessionInformation(), 
[09:31:03.889]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.889]                   signalCondition(cond)
[09:31:03.889]                 }
[09:31:03.889]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.889]                 "immediateCondition"))) {
[09:31:03.889]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.889]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.889]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.889]                   if (TRUE && !signal) {
[09:31:03.889]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.889]                     {
[09:31:03.889]                       inherits <- base::inherits
[09:31:03.889]                       invokeRestart <- base::invokeRestart
[09:31:03.889]                       is.null <- base::is.null
[09:31:03.889]                       muffled <- FALSE
[09:31:03.889]                       if (inherits(cond, "message")) {
[09:31:03.889]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.889]                         if (muffled) 
[09:31:03.889]                           invokeRestart("muffleMessage")
[09:31:03.889]                       }
[09:31:03.889]                       else if (inherits(cond, "warning")) {
[09:31:03.889]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.889]                         if (muffled) 
[09:31:03.889]                           invokeRestart("muffleWarning")
[09:31:03.889]                       }
[09:31:03.889]                       else if (inherits(cond, "condition")) {
[09:31:03.889]                         if (!is.null(pattern)) {
[09:31:03.889]                           computeRestarts <- base::computeRestarts
[09:31:03.889]                           grepl <- base::grepl
[09:31:03.889]                           restarts <- computeRestarts(cond)
[09:31:03.889]                           for (restart in restarts) {
[09:31:03.889]                             name <- restart$name
[09:31:03.889]                             if (is.null(name)) 
[09:31:03.889]                               next
[09:31:03.889]                             if (!grepl(pattern, name)) 
[09:31:03.889]                               next
[09:31:03.889]                             invokeRestart(restart)
[09:31:03.889]                             muffled <- TRUE
[09:31:03.889]                             break
[09:31:03.889]                           }
[09:31:03.889]                         }
[09:31:03.889]                       }
[09:31:03.889]                       invisible(muffled)
[09:31:03.889]                     }
[09:31:03.889]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.889]                   }
[09:31:03.889]                 }
[09:31:03.889]                 else {
[09:31:03.889]                   if (TRUE) {
[09:31:03.889]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.889]                     {
[09:31:03.889]                       inherits <- base::inherits
[09:31:03.889]                       invokeRestart <- base::invokeRestart
[09:31:03.889]                       is.null <- base::is.null
[09:31:03.889]                       muffled <- FALSE
[09:31:03.889]                       if (inherits(cond, "message")) {
[09:31:03.889]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.889]                         if (muffled) 
[09:31:03.889]                           invokeRestart("muffleMessage")
[09:31:03.889]                       }
[09:31:03.889]                       else if (inherits(cond, "warning")) {
[09:31:03.889]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.889]                         if (muffled) 
[09:31:03.889]                           invokeRestart("muffleWarning")
[09:31:03.889]                       }
[09:31:03.889]                       else if (inherits(cond, "condition")) {
[09:31:03.889]                         if (!is.null(pattern)) {
[09:31:03.889]                           computeRestarts <- base::computeRestarts
[09:31:03.889]                           grepl <- base::grepl
[09:31:03.889]                           restarts <- computeRestarts(cond)
[09:31:03.889]                           for (restart in restarts) {
[09:31:03.889]                             name <- restart$name
[09:31:03.889]                             if (is.null(name)) 
[09:31:03.889]                               next
[09:31:03.889]                             if (!grepl(pattern, name)) 
[09:31:03.889]                               next
[09:31:03.889]                             invokeRestart(restart)
[09:31:03.889]                             muffled <- TRUE
[09:31:03.889]                             break
[09:31:03.889]                           }
[09:31:03.889]                         }
[09:31:03.889]                       }
[09:31:03.889]                       invisible(muffled)
[09:31:03.889]                     }
[09:31:03.889]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.889]                   }
[09:31:03.889]                 }
[09:31:03.889]             }
[09:31:03.889]         }))
[09:31:03.889]     }, error = function(ex) {
[09:31:03.889]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.889]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.889]                 ...future.rng), started = ...future.startTime, 
[09:31:03.889]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.889]             version = "1.8"), class = "FutureResult")
[09:31:03.889]     }, finally = {
[09:31:03.889]         if (!identical(...future.workdir, getwd())) 
[09:31:03.889]             setwd(...future.workdir)
[09:31:03.889]         {
[09:31:03.889]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.889]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.889]             }
[09:31:03.889]             base::options(...future.oldOptions)
[09:31:03.889]             if (.Platform$OS.type == "windows") {
[09:31:03.889]                 old_names <- names(...future.oldEnvVars)
[09:31:03.889]                 envs <- base::Sys.getenv()
[09:31:03.889]                 names <- names(envs)
[09:31:03.889]                 common <- intersect(names, old_names)
[09:31:03.889]                 added <- setdiff(names, old_names)
[09:31:03.889]                 removed <- setdiff(old_names, names)
[09:31:03.889]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.889]                   envs[common]]
[09:31:03.889]                 NAMES <- toupper(changed)
[09:31:03.889]                 args <- list()
[09:31:03.889]                 for (kk in seq_along(NAMES)) {
[09:31:03.889]                   name <- changed[[kk]]
[09:31:03.889]                   NAME <- NAMES[[kk]]
[09:31:03.889]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.889]                     next
[09:31:03.889]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.889]                 }
[09:31:03.889]                 NAMES <- toupper(added)
[09:31:03.889]                 for (kk in seq_along(NAMES)) {
[09:31:03.889]                   name <- added[[kk]]
[09:31:03.889]                   NAME <- NAMES[[kk]]
[09:31:03.889]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.889]                     next
[09:31:03.889]                   args[[name]] <- ""
[09:31:03.889]                 }
[09:31:03.889]                 NAMES <- toupper(removed)
[09:31:03.889]                 for (kk in seq_along(NAMES)) {
[09:31:03.889]                   name <- removed[[kk]]
[09:31:03.889]                   NAME <- NAMES[[kk]]
[09:31:03.889]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.889]                     next
[09:31:03.889]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.889]                 }
[09:31:03.889]                 if (length(args) > 0) 
[09:31:03.889]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.889]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.889]             }
[09:31:03.889]             else {
[09:31:03.889]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.889]             }
[09:31:03.889]             {
[09:31:03.889]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.889]                   0L) {
[09:31:03.889]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.889]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.889]                   base::options(opts)
[09:31:03.889]                 }
[09:31:03.889]                 {
[09:31:03.889]                   {
[09:31:03.889]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:03.889]                     NULL
[09:31:03.889]                   }
[09:31:03.889]                   options(future.plan = NULL)
[09:31:03.889]                   if (is.na(NA_character_)) 
[09:31:03.889]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.889]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.889]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.889]                     .init = FALSE)
[09:31:03.889]                 }
[09:31:03.889]             }
[09:31:03.889]         }
[09:31:03.889]     })
[09:31:03.889]     if (TRUE) {
[09:31:03.889]         base::sink(type = "output", split = FALSE)
[09:31:03.889]         if (TRUE) {
[09:31:03.889]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.889]         }
[09:31:03.889]         else {
[09:31:03.889]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.889]         }
[09:31:03.889]         base::close(...future.stdout)
[09:31:03.889]         ...future.stdout <- NULL
[09:31:03.889]     }
[09:31:03.889]     ...future.result$conditions <- ...future.conditions
[09:31:03.889]     ...future.result$finished <- base::Sys.time()
[09:31:03.889]     ...future.result
[09:31:03.889] }
[09:31:03.892] assign_globals() ...
[09:31:03.892] List of 1
[09:31:03.892]  $ ii: int 2
[09:31:03.892]  - attr(*, "where")=List of 1
[09:31:03.892]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:03.892]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.892]  - attr(*, "resolved")= logi FALSE
[09:31:03.892]  - attr(*, "total_size")= num 56
[09:31:03.892]  - attr(*, "already-done")= logi TRUE
[09:31:03.896] - copied ‘ii’ to environment
[09:31:03.896] assign_globals() ... done
[09:31:03.896] requestCore(): workers = 2
[09:31:03.898] MulticoreFuture started
[09:31:03.899] - Launch lazy future ... done
[09:31:03.899] run() for ‘MulticoreFuture’ ... done
[09:31:03.899] plan(): Setting new future strategy stack:
[09:31:03.900] getGlobalsAndPackages() ...
[09:31:03.899] List of future strategies:
[09:31:03.899] 1. sequential:
[09:31:03.899]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.899]    - tweaked: FALSE
[09:31:03.899]    - call: NULL
[09:31:03.904] Searching for globals...
[09:31:03.904] plan(): nbrOfWorkers() = 1
[09:31:03.906] plan(): Setting new future strategy stack:
[09:31:03.906] List of future strategies:
[09:31:03.906] 1. multicore:
[09:31:03.906]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:03.906]    - tweaked: FALSE
[09:31:03.906]    - call: plan(strategy)
[09:31:03.907] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[09:31:03.908] Searching for globals ... DONE
[09:31:03.908] Resolving globals: FALSE
[09:31:03.909] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:03.909] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:03.909] - globals: [1] ‘ii’
[09:31:03.910] 
[09:31:03.910] getGlobalsAndPackages() ... DONE
[09:31:03.910] run() for ‘Future’ ...
[09:31:03.910] - state: ‘created’
[09:31:03.910] plan(): nbrOfWorkers() = 2
[09:31:03.911] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:03.915] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:03.915] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:03.915]   - Field: ‘label’
[09:31:03.915]   - Field: ‘local’
[09:31:03.916]   - Field: ‘owner’
[09:31:03.916]   - Field: ‘envir’
[09:31:03.916]   - Field: ‘workers’
[09:31:03.916]   - Field: ‘packages’
[09:31:03.916]   - Field: ‘gc’
[09:31:03.916]   - Field: ‘job’
[09:31:03.916]   - Field: ‘conditions’
[09:31:03.917]   - Field: ‘expr’
[09:31:03.917]   - Field: ‘uuid’
[09:31:03.917]   - Field: ‘seed’
[09:31:03.917]   - Field: ‘version’
[09:31:03.917]   - Field: ‘result’
[09:31:03.917]   - Field: ‘asynchronous’
[09:31:03.917]   - Field: ‘calls’
[09:31:03.918]   - Field: ‘globals’
[09:31:03.918]   - Field: ‘stdout’
[09:31:03.918]   - Field: ‘earlySignal’
[09:31:03.918]   - Field: ‘lazy’
[09:31:03.918]   - Field: ‘state’
[09:31:03.918] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:03.918] - Launch lazy future ...
[09:31:03.919] Packages needed by the future expression (n = 0): <none>
[09:31:03.919] Packages needed by future strategies (n = 0): <none>
[09:31:03.920] {
[09:31:03.920]     {
[09:31:03.920]         {
[09:31:03.920]             ...future.startTime <- base::Sys.time()
[09:31:03.920]             {
[09:31:03.920]                 {
[09:31:03.920]                   {
[09:31:03.920]                     {
[09:31:03.920]                       base::local({
[09:31:03.920]                         has_future <- base::requireNamespace("future", 
[09:31:03.920]                           quietly = TRUE)
[09:31:03.920]                         if (has_future) {
[09:31:03.920]                           ns <- base::getNamespace("future")
[09:31:03.920]                           version <- ns[[".package"]][["version"]]
[09:31:03.920]                           if (is.null(version)) 
[09:31:03.920]                             version <- utils::packageVersion("future")
[09:31:03.920]                         }
[09:31:03.920]                         else {
[09:31:03.920]                           version <- NULL
[09:31:03.920]                         }
[09:31:03.920]                         if (!has_future || version < "1.8.0") {
[09:31:03.920]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.920]                             "", base::R.version$version.string), 
[09:31:03.920]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:03.920]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.920]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.920]                               "release", "version")], collapse = " "), 
[09:31:03.920]                             hostname = base::Sys.info()[["nodename"]])
[09:31:03.920]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.920]                             info)
[09:31:03.920]                           info <- base::paste(info, collapse = "; ")
[09:31:03.920]                           if (!has_future) {
[09:31:03.920]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.920]                               info)
[09:31:03.920]                           }
[09:31:03.920]                           else {
[09:31:03.920]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.920]                               info, version)
[09:31:03.920]                           }
[09:31:03.920]                           base::stop(msg)
[09:31:03.920]                         }
[09:31:03.920]                       })
[09:31:03.920]                     }
[09:31:03.920]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:03.920]                     base::options(mc.cores = 1L)
[09:31:03.920]                   }
[09:31:03.920]                   ...future.strategy.old <- future::plan("list")
[09:31:03.920]                   options(future.plan = NULL)
[09:31:03.920]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.920]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.920]                 }
[09:31:03.920]                 ...future.workdir <- getwd()
[09:31:03.920]             }
[09:31:03.920]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.920]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.920]         }
[09:31:03.920]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.920]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.920]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.920]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.920]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.920]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.920]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.920]             base::names(...future.oldOptions))
[09:31:03.920]     }
[09:31:03.920]     if (FALSE) {
[09:31:03.920]     }
[09:31:03.920]     else {
[09:31:03.920]         if (TRUE) {
[09:31:03.920]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.920]                 open = "w")
[09:31:03.920]         }
[09:31:03.920]         else {
[09:31:03.920]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.920]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.920]         }
[09:31:03.920]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.920]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.920]             base::sink(type = "output", split = FALSE)
[09:31:03.920]             base::close(...future.stdout)
[09:31:03.920]         }, add = TRUE)
[09:31:03.920]     }
[09:31:03.920]     ...future.frame <- base::sys.nframe()
[09:31:03.920]     ...future.conditions <- base::list()
[09:31:03.920]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.920]     if (FALSE) {
[09:31:03.920]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.920]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.920]     }
[09:31:03.920]     ...future.result <- base::tryCatch({
[09:31:03.920]         base::withCallingHandlers({
[09:31:03.920]             ...future.value <- base::withVisible(base::local({
[09:31:03.920]                 withCallingHandlers({
[09:31:03.920]                   {
[09:31:03.920]                     if (ii%%2 == 0) 
[09:31:03.920]                       stop("Woops!")
[09:31:03.920]                     ii
[09:31:03.920]                   }
[09:31:03.920]                 }, immediateCondition = function(cond) {
[09:31:03.920]                   save_rds <- function (object, pathname, ...) 
[09:31:03.920]                   {
[09:31:03.920]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:03.920]                     if (file_test("-f", pathname_tmp)) {
[09:31:03.920]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.920]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:03.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.920]                         fi_tmp[["mtime"]])
[09:31:03.920]                     }
[09:31:03.920]                     tryCatch({
[09:31:03.920]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:03.920]                     }, error = function(ex) {
[09:31:03.920]                       msg <- conditionMessage(ex)
[09:31:03.920]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.920]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:03.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.920]                         fi_tmp[["mtime"]], msg)
[09:31:03.920]                       ex$message <- msg
[09:31:03.920]                       stop(ex)
[09:31:03.920]                     })
[09:31:03.920]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:03.920]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:03.920]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:03.920]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.920]                       fi <- file.info(pathname)
[09:31:03.920]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:03.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.920]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:03.920]                         fi[["size"]], fi[["mtime"]])
[09:31:03.920]                       stop(msg)
[09:31:03.920]                     }
[09:31:03.920]                     invisible(pathname)
[09:31:03.920]                   }
[09:31:03.920]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:03.920]                     rootPath = tempdir()) 
[09:31:03.920]                   {
[09:31:03.920]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:03.920]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:03.920]                       tmpdir = path, fileext = ".rds")
[09:31:03.920]                     save_rds(obj, file)
[09:31:03.920]                   }
[09:31:03.920]                   saveImmediateCondition(cond, path = "/tmp/RtmpgspuSi/.future/immediateConditions")
[09:31:03.920]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.920]                   {
[09:31:03.920]                     inherits <- base::inherits
[09:31:03.920]                     invokeRestart <- base::invokeRestart
[09:31:03.920]                     is.null <- base::is.null
[09:31:03.920]                     muffled <- FALSE
[09:31:03.920]                     if (inherits(cond, "message")) {
[09:31:03.920]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:03.920]                       if (muffled) 
[09:31:03.920]                         invokeRestart("muffleMessage")
[09:31:03.920]                     }
[09:31:03.920]                     else if (inherits(cond, "warning")) {
[09:31:03.920]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:03.920]                       if (muffled) 
[09:31:03.920]                         invokeRestart("muffleWarning")
[09:31:03.920]                     }
[09:31:03.920]                     else if (inherits(cond, "condition")) {
[09:31:03.920]                       if (!is.null(pattern)) {
[09:31:03.920]                         computeRestarts <- base::computeRestarts
[09:31:03.920]                         grepl <- base::grepl
[09:31:03.920]                         restarts <- computeRestarts(cond)
[09:31:03.920]                         for (restart in restarts) {
[09:31:03.920]                           name <- restart$name
[09:31:03.920]                           if (is.null(name)) 
[09:31:03.920]                             next
[09:31:03.920]                           if (!grepl(pattern, name)) 
[09:31:03.920]                             next
[09:31:03.920]                           invokeRestart(restart)
[09:31:03.920]                           muffled <- TRUE
[09:31:03.920]                           break
[09:31:03.920]                         }
[09:31:03.920]                       }
[09:31:03.920]                     }
[09:31:03.920]                     invisible(muffled)
[09:31:03.920]                   }
[09:31:03.920]                   muffleCondition(cond)
[09:31:03.920]                 })
[09:31:03.920]             }))
[09:31:03.920]             future::FutureResult(value = ...future.value$value, 
[09:31:03.920]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.920]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.920]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.920]                     ...future.globalenv.names))
[09:31:03.920]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.920]         }, condition = base::local({
[09:31:03.920]             c <- base::c
[09:31:03.920]             inherits <- base::inherits
[09:31:03.920]             invokeRestart <- base::invokeRestart
[09:31:03.920]             length <- base::length
[09:31:03.920]             list <- base::list
[09:31:03.920]             seq.int <- base::seq.int
[09:31:03.920]             signalCondition <- base::signalCondition
[09:31:03.920]             sys.calls <- base::sys.calls
[09:31:03.920]             `[[` <- base::`[[`
[09:31:03.920]             `+` <- base::`+`
[09:31:03.920]             `<<-` <- base::`<<-`
[09:31:03.920]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.920]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.920]                   3L)]
[09:31:03.920]             }
[09:31:03.920]             function(cond) {
[09:31:03.920]                 is_error <- inherits(cond, "error")
[09:31:03.920]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.920]                   NULL)
[09:31:03.920]                 if (is_error) {
[09:31:03.920]                   sessionInformation <- function() {
[09:31:03.920]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.920]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.920]                       search = base::search(), system = base::Sys.info())
[09:31:03.920]                   }
[09:31:03.920]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.920]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.920]                     cond$call), session = sessionInformation(), 
[09:31:03.920]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.920]                   signalCondition(cond)
[09:31:03.920]                 }
[09:31:03.920]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.920]                 "immediateCondition"))) {
[09:31:03.920]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.920]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.920]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.920]                   if (TRUE && !signal) {
[09:31:03.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.920]                     {
[09:31:03.920]                       inherits <- base::inherits
[09:31:03.920]                       invokeRestart <- base::invokeRestart
[09:31:03.920]                       is.null <- base::is.null
[09:31:03.920]                       muffled <- FALSE
[09:31:03.920]                       if (inherits(cond, "message")) {
[09:31:03.920]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.920]                         if (muffled) 
[09:31:03.920]                           invokeRestart("muffleMessage")
[09:31:03.920]                       }
[09:31:03.920]                       else if (inherits(cond, "warning")) {
[09:31:03.920]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.920]                         if (muffled) 
[09:31:03.920]                           invokeRestart("muffleWarning")
[09:31:03.920]                       }
[09:31:03.920]                       else if (inherits(cond, "condition")) {
[09:31:03.920]                         if (!is.null(pattern)) {
[09:31:03.920]                           computeRestarts <- base::computeRestarts
[09:31:03.920]                           grepl <- base::grepl
[09:31:03.920]                           restarts <- computeRestarts(cond)
[09:31:03.920]                           for (restart in restarts) {
[09:31:03.920]                             name <- restart$name
[09:31:03.920]                             if (is.null(name)) 
[09:31:03.920]                               next
[09:31:03.920]                             if (!grepl(pattern, name)) 
[09:31:03.920]                               next
[09:31:03.920]                             invokeRestart(restart)
[09:31:03.920]                             muffled <- TRUE
[09:31:03.920]                             break
[09:31:03.920]                           }
[09:31:03.920]                         }
[09:31:03.920]                       }
[09:31:03.920]                       invisible(muffled)
[09:31:03.920]                     }
[09:31:03.920]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.920]                   }
[09:31:03.920]                 }
[09:31:03.920]                 else {
[09:31:03.920]                   if (TRUE) {
[09:31:03.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.920]                     {
[09:31:03.920]                       inherits <- base::inherits
[09:31:03.920]                       invokeRestart <- base::invokeRestart
[09:31:03.920]                       is.null <- base::is.null
[09:31:03.920]                       muffled <- FALSE
[09:31:03.920]                       if (inherits(cond, "message")) {
[09:31:03.920]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.920]                         if (muffled) 
[09:31:03.920]                           invokeRestart("muffleMessage")
[09:31:03.920]                       }
[09:31:03.920]                       else if (inherits(cond, "warning")) {
[09:31:03.920]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.920]                         if (muffled) 
[09:31:03.920]                           invokeRestart("muffleWarning")
[09:31:03.920]                       }
[09:31:03.920]                       else if (inherits(cond, "condition")) {
[09:31:03.920]                         if (!is.null(pattern)) {
[09:31:03.920]                           computeRestarts <- base::computeRestarts
[09:31:03.920]                           grepl <- base::grepl
[09:31:03.920]                           restarts <- computeRestarts(cond)
[09:31:03.920]                           for (restart in restarts) {
[09:31:03.920]                             name <- restart$name
[09:31:03.920]                             if (is.null(name)) 
[09:31:03.920]                               next
[09:31:03.920]                             if (!grepl(pattern, name)) 
[09:31:03.920]                               next
[09:31:03.920]                             invokeRestart(restart)
[09:31:03.920]                             muffled <- TRUE
[09:31:03.920]                             break
[09:31:03.920]                           }
[09:31:03.920]                         }
[09:31:03.920]                       }
[09:31:03.920]                       invisible(muffled)
[09:31:03.920]                     }
[09:31:03.920]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.920]                   }
[09:31:03.920]                 }
[09:31:03.920]             }
[09:31:03.920]         }))
[09:31:03.920]     }, error = function(ex) {
[09:31:03.920]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.920]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.920]                 ...future.rng), started = ...future.startTime, 
[09:31:03.920]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.920]             version = "1.8"), class = "FutureResult")
[09:31:03.920]     }, finally = {
[09:31:03.920]         if (!identical(...future.workdir, getwd())) 
[09:31:03.920]             setwd(...future.workdir)
[09:31:03.920]         {
[09:31:03.920]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.920]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.920]             }
[09:31:03.920]             base::options(...future.oldOptions)
[09:31:03.920]             if (.Platform$OS.type == "windows") {
[09:31:03.920]                 old_names <- names(...future.oldEnvVars)
[09:31:03.920]                 envs <- base::Sys.getenv()
[09:31:03.920]                 names <- names(envs)
[09:31:03.920]                 common <- intersect(names, old_names)
[09:31:03.920]                 added <- setdiff(names, old_names)
[09:31:03.920]                 removed <- setdiff(old_names, names)
[09:31:03.920]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.920]                   envs[common]]
[09:31:03.920]                 NAMES <- toupper(changed)
[09:31:03.920]                 args <- list()
[09:31:03.920]                 for (kk in seq_along(NAMES)) {
[09:31:03.920]                   name <- changed[[kk]]
[09:31:03.920]                   NAME <- NAMES[[kk]]
[09:31:03.920]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.920]                     next
[09:31:03.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.920]                 }
[09:31:03.920]                 NAMES <- toupper(added)
[09:31:03.920]                 for (kk in seq_along(NAMES)) {
[09:31:03.920]                   name <- added[[kk]]
[09:31:03.920]                   NAME <- NAMES[[kk]]
[09:31:03.920]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.920]                     next
[09:31:03.920]                   args[[name]] <- ""
[09:31:03.920]                 }
[09:31:03.920]                 NAMES <- toupper(removed)
[09:31:03.920]                 for (kk in seq_along(NAMES)) {
[09:31:03.920]                   name <- removed[[kk]]
[09:31:03.920]                   NAME <- NAMES[[kk]]
[09:31:03.920]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.920]                     next
[09:31:03.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.920]                 }
[09:31:03.920]                 if (length(args) > 0) 
[09:31:03.920]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.920]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.920]             }
[09:31:03.920]             else {
[09:31:03.920]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.920]             }
[09:31:03.920]             {
[09:31:03.920]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.920]                   0L) {
[09:31:03.920]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.920]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.920]                   base::options(opts)
[09:31:03.920]                 }
[09:31:03.920]                 {
[09:31:03.920]                   {
[09:31:03.920]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:03.920]                     NULL
[09:31:03.920]                   }
[09:31:03.920]                   options(future.plan = NULL)
[09:31:03.920]                   if (is.na(NA_character_)) 
[09:31:03.920]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.920]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.920]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.920]                     .init = FALSE)
[09:31:03.920]                 }
[09:31:03.920]             }
[09:31:03.920]         }
[09:31:03.920]     })
[09:31:03.920]     if (TRUE) {
[09:31:03.920]         base::sink(type = "output", split = FALSE)
[09:31:03.920]         if (TRUE) {
[09:31:03.920]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.920]         }
[09:31:03.920]         else {
[09:31:03.920]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.920]         }
[09:31:03.920]         base::close(...future.stdout)
[09:31:03.920]         ...future.stdout <- NULL
[09:31:03.920]     }
[09:31:03.920]     ...future.result$conditions <- ...future.conditions
[09:31:03.920]     ...future.result$finished <- base::Sys.time()
[09:31:03.920]     ...future.result
[09:31:03.920] }
[09:31:03.922] assign_globals() ...
[09:31:03.922] List of 1
[09:31:03.922]  $ ii: int 3
[09:31:03.922]  - attr(*, "where")=List of 1
[09:31:03.922]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:03.922]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:03.922]  - attr(*, "resolved")= logi FALSE
[09:31:03.922]  - attr(*, "total_size")= num 56
[09:31:03.922]  - attr(*, "already-done")= logi TRUE
[09:31:03.926] - copied ‘ii’ to environment
[09:31:03.926] assign_globals() ... done
[09:31:03.926] requestCore(): workers = 2
[09:31:03.926] Poll #1 (0): usedCores() = 2, workers = 2
[09:31:03.938] result() for MulticoreFuture ...
[09:31:03.938] result() for MulticoreFuture ...
[09:31:03.938] result() for MulticoreFuture ... done
[09:31:03.939] result() for MulticoreFuture ... done
[09:31:03.939] result() for MulticoreFuture ...
[09:31:03.939] result() for MulticoreFuture ... done
[09:31:03.941] MulticoreFuture started
[09:31:03.942] - Launch lazy future ... done
[09:31:03.942] run() for ‘MulticoreFuture’ ... done
[09:31:03.943] plan(): Setting new future strategy stack:
[09:31:03.943] result() for MulticoreFuture ...
[09:31:03.943] result() for MulticoreFuture ... done
[09:31:03.943] result() for MulticoreFuture ...
[09:31:03.943] result() for MulticoreFuture ... done
[09:31:03.944] result() for MulticoreFuture ...
[09:31:03.943] List of future strategies:
[09:31:03.943] 1. sequential:
[09:31:03.943]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.943]    - tweaked: FALSE
[09:31:03.943]    - call: NULL
[09:31:03.944] plan(): nbrOfWorkers() = 1
[09:31:03.947] plan(): Setting new future strategy stack:
[09:31:03.947] List of future strategies:
[09:31:03.947] 1. multicore:
[09:31:03.947]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:03.947]    - tweaked: FALSE
[09:31:03.947]    - call: plan(strategy)
[09:31:03.949] result() for MulticoreFuture ...
[09:31:03.949] result() for MulticoreFuture ... done
[09:31:03.949] signalConditions() ...
[09:31:03.949]  - include = ‘immediateCondition’
[09:31:03.949]  - exclude = 
[09:31:03.950]  - resignal = FALSE
[09:31:03.950]  - Number of conditions: 1
[09:31:03.950] signalConditions() ... done
[09:31:03.950] result() for MulticoreFuture ... done
[09:31:03.950] result() for MulticoreFuture ...
[09:31:03.951] result() for MulticoreFuture ... done
[09:31:03.951] signalConditions() ...
[09:31:03.951]  - include = ‘immediateCondition’
[09:31:03.951]  - exclude = 
[09:31:03.951]  - resignal = FALSE
[09:31:03.952]  - Number of conditions: 1
[09:31:03.952] signalConditions() ... done
[09:31:03.952] Future state: ‘finished’
[09:31:03.952] result() for MulticoreFuture ...
[09:31:03.952] result() for MulticoreFuture ... done
[09:31:03.953] signalConditions() ...
[09:31:03.953]  - include = ‘condition’
[09:31:03.953]  - exclude = ‘immediateCondition’
[09:31:03.953]  - resignal = TRUE
[09:31:03.953]  - Number of conditions: 1
[09:31:03.953] plan(): nbrOfWorkers() = 2
[09:31:03.953]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:03.954] signalConditions() ... done
[09:31:03.954] result() for MulticoreFuture ...
[09:31:03.955] result() for MulticoreFuture ...
[09:31:03.955] result() for MulticoreFuture ... done
[09:31:03.955] result() for MulticoreFuture ... done
[09:31:03.955] result() for MulticoreFuture ...
[09:31:03.955] result() for MulticoreFuture ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[09:31:03.956] result() for MulticoreFuture ...
[09:31:03.956] result() for MulticoreFuture ... done
[09:31:03.956] result() for MulticoreFuture ...
[09:31:03.956] result() for MulticoreFuture ... done
[09:31:03.956] signalConditions() ...
[09:31:03.957]  - include = ‘immediateCondition’
[09:31:03.957]  - exclude = 
[09:31:03.957]  - resignal = FALSE
[09:31:03.957]  - Number of conditions: 1
[09:31:03.957] signalConditions() ... done
[09:31:03.957] Future state: ‘finished’
[09:31:03.957] result() for MulticoreFuture ...
[09:31:03.957] result() for MulticoreFuture ... done
[09:31:03.957] signalConditions() ...
[09:31:03.958]  - include = ‘condition’
[09:31:03.958]  - exclude = ‘immediateCondition’
[09:31:03.958]  - resignal = TRUE
[09:31:03.958]  - Number of conditions: 1
[09:31:03.958]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:03.958] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[09:31:03.958] result() for MulticoreFuture ...
[09:31:03.959] result() for MulticoreFuture ... done
[09:31:03.959] result() for MulticoreFuture ...
[09:31:03.959] result() for MulticoreFuture ... done
[09:31:03.959] signalConditions() ...
[09:31:03.961]  - include = ‘immediateCondition’
[09:31:03.962]  - exclude = 
[09:31:03.962]  - resignal = FALSE
[09:31:03.962]  - Number of conditions: 1
[09:31:03.962] signalConditions() ... done
[09:31:03.962] Future state: ‘finished’
[09:31:03.962] result() for MulticoreFuture ...
[09:31:03.962] result() for MulticoreFuture ... done
[09:31:03.962] signalConditions() ...
[09:31:03.963]  - include = ‘condition’
[09:31:03.963]  - exclude = ‘immediateCondition’
[09:31:03.963]  - resignal = TRUE
[09:31:03.963]  - Number of conditions: 1
[09:31:03.963]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:03.963] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[09:31:03.964] getGlobalsAndPackages() ...
[09:31:03.964] Searching for globals...
[09:31:03.966] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[09:31:03.967] Searching for globals ... DONE
[09:31:03.967] Resolving globals: FALSE
[09:31:03.967] 
[09:31:03.967] 
[09:31:03.967] getGlobalsAndPackages() ... DONE
[09:31:03.968] run() for ‘Future’ ...
[09:31:03.968] - state: ‘created’
[09:31:03.968] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:03.972] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:03.972] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:03.972]   - Field: ‘label’
[09:31:03.973]   - Field: ‘local’
[09:31:03.973]   - Field: ‘owner’
[09:31:03.973]   - Field: ‘envir’
[09:31:03.973]   - Field: ‘workers’
[09:31:03.973]   - Field: ‘packages’
[09:31:03.973]   - Field: ‘gc’
[09:31:03.973]   - Field: ‘job’
[09:31:03.974]   - Field: ‘conditions’
[09:31:03.974]   - Field: ‘expr’
[09:31:03.974]   - Field: ‘uuid’
[09:31:03.974]   - Field: ‘seed’
[09:31:03.974]   - Field: ‘version’
[09:31:03.974]   - Field: ‘result’
[09:31:03.974]   - Field: ‘asynchronous’
[09:31:03.974]   - Field: ‘calls’
[09:31:03.974]   - Field: ‘globals’
[09:31:03.975]   - Field: ‘stdout’
[09:31:03.975]   - Field: ‘earlySignal’
[09:31:03.975]   - Field: ‘lazy’
[09:31:03.975]   - Field: ‘state’
[09:31:03.975] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:03.975] - Launch lazy future ...
[09:31:03.975] Packages needed by the future expression (n = 0): <none>
[09:31:03.976] Packages needed by future strategies (n = 0): <none>
[09:31:03.976] {
[09:31:03.976]     {
[09:31:03.976]         {
[09:31:03.976]             ...future.startTime <- base::Sys.time()
[09:31:03.976]             {
[09:31:03.976]                 {
[09:31:03.976]                   {
[09:31:03.976]                     {
[09:31:03.976]                       base::local({
[09:31:03.976]                         has_future <- base::requireNamespace("future", 
[09:31:03.976]                           quietly = TRUE)
[09:31:03.976]                         if (has_future) {
[09:31:03.976]                           ns <- base::getNamespace("future")
[09:31:03.976]                           version <- ns[[".package"]][["version"]]
[09:31:03.976]                           if (is.null(version)) 
[09:31:03.976]                             version <- utils::packageVersion("future")
[09:31:03.976]                         }
[09:31:03.976]                         else {
[09:31:03.976]                           version <- NULL
[09:31:03.976]                         }
[09:31:03.976]                         if (!has_future || version < "1.8.0") {
[09:31:03.976]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:03.976]                             "", base::R.version$version.string), 
[09:31:03.976]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:03.976]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:03.976]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:03.976]                               "release", "version")], collapse = " "), 
[09:31:03.976]                             hostname = base::Sys.info()[["nodename"]])
[09:31:03.976]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:03.976]                             info)
[09:31:03.976]                           info <- base::paste(info, collapse = "; ")
[09:31:03.976]                           if (!has_future) {
[09:31:03.976]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:03.976]                               info)
[09:31:03.976]                           }
[09:31:03.976]                           else {
[09:31:03.976]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:03.976]                               info, version)
[09:31:03.976]                           }
[09:31:03.976]                           base::stop(msg)
[09:31:03.976]                         }
[09:31:03.976]                       })
[09:31:03.976]                     }
[09:31:03.976]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:03.976]                     base::options(mc.cores = 1L)
[09:31:03.976]                   }
[09:31:03.976]                   ...future.strategy.old <- future::plan("list")
[09:31:03.976]                   options(future.plan = NULL)
[09:31:03.976]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.976]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:03.976]                 }
[09:31:03.976]                 ...future.workdir <- getwd()
[09:31:03.976]             }
[09:31:03.976]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:03.976]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:03.976]         }
[09:31:03.976]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:03.976]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:03.976]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:03.976]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:03.976]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:03.976]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:03.976]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:03.976]             base::names(...future.oldOptions))
[09:31:03.976]     }
[09:31:03.976]     if (FALSE) {
[09:31:03.976]     }
[09:31:03.976]     else {
[09:31:03.976]         if (TRUE) {
[09:31:03.976]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:03.976]                 open = "w")
[09:31:03.976]         }
[09:31:03.976]         else {
[09:31:03.976]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:03.976]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:03.976]         }
[09:31:03.976]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:03.976]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:03.976]             base::sink(type = "output", split = FALSE)
[09:31:03.976]             base::close(...future.stdout)
[09:31:03.976]         }, add = TRUE)
[09:31:03.976]     }
[09:31:03.976]     ...future.frame <- base::sys.nframe()
[09:31:03.976]     ...future.conditions <- base::list()
[09:31:03.976]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:03.976]     if (FALSE) {
[09:31:03.976]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:03.976]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:03.976]     }
[09:31:03.976]     ...future.result <- base::tryCatch({
[09:31:03.976]         base::withCallingHandlers({
[09:31:03.976]             ...future.value <- base::withVisible(base::local({
[09:31:03.976]                 withCallingHandlers({
[09:31:03.976]                   {
[09:31:03.976]                     cat("Processing: ")
[09:31:03.976]                     for (ii in 1:10) {
[09:31:03.976]                       cat(".")
[09:31:03.976]                     }
[09:31:03.976]                     cat(" [100%]\n")
[09:31:03.976]                     4
[09:31:03.976]                   }
[09:31:03.976]                 }, immediateCondition = function(cond) {
[09:31:03.976]                   save_rds <- function (object, pathname, ...) 
[09:31:03.976]                   {
[09:31:03.976]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:03.976]                     if (file_test("-f", pathname_tmp)) {
[09:31:03.976]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.976]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:03.976]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.976]                         fi_tmp[["mtime"]])
[09:31:03.976]                     }
[09:31:03.976]                     tryCatch({
[09:31:03.976]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:03.976]                     }, error = function(ex) {
[09:31:03.976]                       msg <- conditionMessage(ex)
[09:31:03.976]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.976]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:03.976]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.976]                         fi_tmp[["mtime"]], msg)
[09:31:03.976]                       ex$message <- msg
[09:31:03.976]                       stop(ex)
[09:31:03.976]                     })
[09:31:03.976]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:03.976]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:03.976]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:03.976]                       fi_tmp <- file.info(pathname_tmp)
[09:31:03.976]                       fi <- file.info(pathname)
[09:31:03.976]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:03.976]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:03.976]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:03.976]                         fi[["size"]], fi[["mtime"]])
[09:31:03.976]                       stop(msg)
[09:31:03.976]                     }
[09:31:03.976]                     invisible(pathname)
[09:31:03.976]                   }
[09:31:03.976]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:03.976]                     rootPath = tempdir()) 
[09:31:03.976]                   {
[09:31:03.976]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:03.976]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:03.976]                       tmpdir = path, fileext = ".rds")
[09:31:03.976]                     save_rds(obj, file)
[09:31:03.976]                   }
[09:31:03.976]                   saveImmediateCondition(cond, path = "/tmp/RtmpgspuSi/.future/immediateConditions")
[09:31:03.976]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.976]                   {
[09:31:03.976]                     inherits <- base::inherits
[09:31:03.976]                     invokeRestart <- base::invokeRestart
[09:31:03.976]                     is.null <- base::is.null
[09:31:03.976]                     muffled <- FALSE
[09:31:03.976]                     if (inherits(cond, "message")) {
[09:31:03.976]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:03.976]                       if (muffled) 
[09:31:03.976]                         invokeRestart("muffleMessage")
[09:31:03.976]                     }
[09:31:03.976]                     else if (inherits(cond, "warning")) {
[09:31:03.976]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:03.976]                       if (muffled) 
[09:31:03.976]                         invokeRestart("muffleWarning")
[09:31:03.976]                     }
[09:31:03.976]                     else if (inherits(cond, "condition")) {
[09:31:03.976]                       if (!is.null(pattern)) {
[09:31:03.976]                         computeRestarts <- base::computeRestarts
[09:31:03.976]                         grepl <- base::grepl
[09:31:03.976]                         restarts <- computeRestarts(cond)
[09:31:03.976]                         for (restart in restarts) {
[09:31:03.976]                           name <- restart$name
[09:31:03.976]                           if (is.null(name)) 
[09:31:03.976]                             next
[09:31:03.976]                           if (!grepl(pattern, name)) 
[09:31:03.976]                             next
[09:31:03.976]                           invokeRestart(restart)
[09:31:03.976]                           muffled <- TRUE
[09:31:03.976]                           break
[09:31:03.976]                         }
[09:31:03.976]                       }
[09:31:03.976]                     }
[09:31:03.976]                     invisible(muffled)
[09:31:03.976]                   }
[09:31:03.976]                   muffleCondition(cond)
[09:31:03.976]                 })
[09:31:03.976]             }))
[09:31:03.976]             future::FutureResult(value = ...future.value$value, 
[09:31:03.976]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.976]                   ...future.rng), globalenv = if (FALSE) 
[09:31:03.976]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:03.976]                     ...future.globalenv.names))
[09:31:03.976]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:03.976]         }, condition = base::local({
[09:31:03.976]             c <- base::c
[09:31:03.976]             inherits <- base::inherits
[09:31:03.976]             invokeRestart <- base::invokeRestart
[09:31:03.976]             length <- base::length
[09:31:03.976]             list <- base::list
[09:31:03.976]             seq.int <- base::seq.int
[09:31:03.976]             signalCondition <- base::signalCondition
[09:31:03.976]             sys.calls <- base::sys.calls
[09:31:03.976]             `[[` <- base::`[[`
[09:31:03.976]             `+` <- base::`+`
[09:31:03.976]             `<<-` <- base::`<<-`
[09:31:03.976]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:03.976]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:03.976]                   3L)]
[09:31:03.976]             }
[09:31:03.976]             function(cond) {
[09:31:03.976]                 is_error <- inherits(cond, "error")
[09:31:03.976]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:03.976]                   NULL)
[09:31:03.976]                 if (is_error) {
[09:31:03.976]                   sessionInformation <- function() {
[09:31:03.976]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:03.976]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:03.976]                       search = base::search(), system = base::Sys.info())
[09:31:03.976]                   }
[09:31:03.976]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.976]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:03.976]                     cond$call), session = sessionInformation(), 
[09:31:03.976]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:03.976]                   signalCondition(cond)
[09:31:03.976]                 }
[09:31:03.976]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:03.976]                 "immediateCondition"))) {
[09:31:03.976]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:03.976]                   ...future.conditions[[length(...future.conditions) + 
[09:31:03.976]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:03.976]                   if (TRUE && !signal) {
[09:31:03.976]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.976]                     {
[09:31:03.976]                       inherits <- base::inherits
[09:31:03.976]                       invokeRestart <- base::invokeRestart
[09:31:03.976]                       is.null <- base::is.null
[09:31:03.976]                       muffled <- FALSE
[09:31:03.976]                       if (inherits(cond, "message")) {
[09:31:03.976]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.976]                         if (muffled) 
[09:31:03.976]                           invokeRestart("muffleMessage")
[09:31:03.976]                       }
[09:31:03.976]                       else if (inherits(cond, "warning")) {
[09:31:03.976]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.976]                         if (muffled) 
[09:31:03.976]                           invokeRestart("muffleWarning")
[09:31:03.976]                       }
[09:31:03.976]                       else if (inherits(cond, "condition")) {
[09:31:03.976]                         if (!is.null(pattern)) {
[09:31:03.976]                           computeRestarts <- base::computeRestarts
[09:31:03.976]                           grepl <- base::grepl
[09:31:03.976]                           restarts <- computeRestarts(cond)
[09:31:03.976]                           for (restart in restarts) {
[09:31:03.976]                             name <- restart$name
[09:31:03.976]                             if (is.null(name)) 
[09:31:03.976]                               next
[09:31:03.976]                             if (!grepl(pattern, name)) 
[09:31:03.976]                               next
[09:31:03.976]                             invokeRestart(restart)
[09:31:03.976]                             muffled <- TRUE
[09:31:03.976]                             break
[09:31:03.976]                           }
[09:31:03.976]                         }
[09:31:03.976]                       }
[09:31:03.976]                       invisible(muffled)
[09:31:03.976]                     }
[09:31:03.976]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.976]                   }
[09:31:03.976]                 }
[09:31:03.976]                 else {
[09:31:03.976]                   if (TRUE) {
[09:31:03.976]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:03.976]                     {
[09:31:03.976]                       inherits <- base::inherits
[09:31:03.976]                       invokeRestart <- base::invokeRestart
[09:31:03.976]                       is.null <- base::is.null
[09:31:03.976]                       muffled <- FALSE
[09:31:03.976]                       if (inherits(cond, "message")) {
[09:31:03.976]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:03.976]                         if (muffled) 
[09:31:03.976]                           invokeRestart("muffleMessage")
[09:31:03.976]                       }
[09:31:03.976]                       else if (inherits(cond, "warning")) {
[09:31:03.976]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:03.976]                         if (muffled) 
[09:31:03.976]                           invokeRestart("muffleWarning")
[09:31:03.976]                       }
[09:31:03.976]                       else if (inherits(cond, "condition")) {
[09:31:03.976]                         if (!is.null(pattern)) {
[09:31:03.976]                           computeRestarts <- base::computeRestarts
[09:31:03.976]                           grepl <- base::grepl
[09:31:03.976]                           restarts <- computeRestarts(cond)
[09:31:03.976]                           for (restart in restarts) {
[09:31:03.976]                             name <- restart$name
[09:31:03.976]                             if (is.null(name)) 
[09:31:03.976]                               next
[09:31:03.976]                             if (!grepl(pattern, name)) 
[09:31:03.976]                               next
[09:31:03.976]                             invokeRestart(restart)
[09:31:03.976]                             muffled <- TRUE
[09:31:03.976]                             break
[09:31:03.976]                           }
[09:31:03.976]                         }
[09:31:03.976]                       }
[09:31:03.976]                       invisible(muffled)
[09:31:03.976]                     }
[09:31:03.976]                     muffleCondition(cond, pattern = "^muffle")
[09:31:03.976]                   }
[09:31:03.976]                 }
[09:31:03.976]             }
[09:31:03.976]         }))
[09:31:03.976]     }, error = function(ex) {
[09:31:03.976]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:03.976]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:03.976]                 ...future.rng), started = ...future.startTime, 
[09:31:03.976]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:03.976]             version = "1.8"), class = "FutureResult")
[09:31:03.976]     }, finally = {
[09:31:03.976]         if (!identical(...future.workdir, getwd())) 
[09:31:03.976]             setwd(...future.workdir)
[09:31:03.976]         {
[09:31:03.976]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:03.976]                 ...future.oldOptions$nwarnings <- NULL
[09:31:03.976]             }
[09:31:03.976]             base::options(...future.oldOptions)
[09:31:03.976]             if (.Platform$OS.type == "windows") {
[09:31:03.976]                 old_names <- names(...future.oldEnvVars)
[09:31:03.976]                 envs <- base::Sys.getenv()
[09:31:03.976]                 names <- names(envs)
[09:31:03.976]                 common <- intersect(names, old_names)
[09:31:03.976]                 added <- setdiff(names, old_names)
[09:31:03.976]                 removed <- setdiff(old_names, names)
[09:31:03.976]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:03.976]                   envs[common]]
[09:31:03.976]                 NAMES <- toupper(changed)
[09:31:03.976]                 args <- list()
[09:31:03.976]                 for (kk in seq_along(NAMES)) {
[09:31:03.976]                   name <- changed[[kk]]
[09:31:03.976]                   NAME <- NAMES[[kk]]
[09:31:03.976]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.976]                     next
[09:31:03.976]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.976]                 }
[09:31:03.976]                 NAMES <- toupper(added)
[09:31:03.976]                 for (kk in seq_along(NAMES)) {
[09:31:03.976]                   name <- added[[kk]]
[09:31:03.976]                   NAME <- NAMES[[kk]]
[09:31:03.976]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.976]                     next
[09:31:03.976]                   args[[name]] <- ""
[09:31:03.976]                 }
[09:31:03.976]                 NAMES <- toupper(removed)
[09:31:03.976]                 for (kk in seq_along(NAMES)) {
[09:31:03.976]                   name <- removed[[kk]]
[09:31:03.976]                   NAME <- NAMES[[kk]]
[09:31:03.976]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:03.976]                     next
[09:31:03.976]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:03.976]                 }
[09:31:03.976]                 if (length(args) > 0) 
[09:31:03.976]                   base::do.call(base::Sys.setenv, args = args)
[09:31:03.976]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:03.976]             }
[09:31:03.976]             else {
[09:31:03.976]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:03.976]             }
[09:31:03.976]             {
[09:31:03.976]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:03.976]                   0L) {
[09:31:03.976]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:03.976]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:03.976]                   base::options(opts)
[09:31:03.976]                 }
[09:31:03.976]                 {
[09:31:03.976]                   {
[09:31:03.976]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:03.976]                     NULL
[09:31:03.976]                   }
[09:31:03.976]                   options(future.plan = NULL)
[09:31:03.976]                   if (is.na(NA_character_)) 
[09:31:03.976]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:03.976]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:03.976]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:03.976]                     .init = FALSE)
[09:31:03.976]                 }
[09:31:03.976]             }
[09:31:03.976]         }
[09:31:03.976]     })
[09:31:03.976]     if (TRUE) {
[09:31:03.976]         base::sink(type = "output", split = FALSE)
[09:31:03.976]         if (TRUE) {
[09:31:03.976]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:03.976]         }
[09:31:03.976]         else {
[09:31:03.976]             ...future.result["stdout"] <- base::list(NULL)
[09:31:03.976]         }
[09:31:03.976]         base::close(...future.stdout)
[09:31:03.976]         ...future.stdout <- NULL
[09:31:03.976]     }
[09:31:03.976]     ...future.result$conditions <- ...future.conditions
[09:31:03.976]     ...future.result$finished <- base::Sys.time()
[09:31:03.976]     ...future.result
[09:31:03.976] }
[09:31:03.978] requestCore(): workers = 2
[09:31:03.980] MulticoreFuture started
[09:31:03.980] - Launch lazy future ... done
[09:31:03.981] run() for ‘MulticoreFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
[09:31:03.981] plan(): Setting new future strategy stack:
Warning in sprintf(...) : restarting interrupted promise evaluation
[09:31:03.982] result() for MulticoreFuture ...
[09:31:03.982] result() for MulticoreFuture ... done
[09:31:03.982] result() for MulticoreFuture ...
[09:31:03.981] List of future strategies:
[09:31:03.981] 1. sequential:
[09:31:03.981]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:03.981]    - tweaked: FALSE
[09:31:03.981]    - call: NULL
[09:31:03.982] result() for MulticoreFuture ... done
[09:31:03.982] signalConditions() ...
[09:31:03.982] plan(): nbrOfWorkers() = 1
[09:31:03.982]  - include = ‘immediateCondition’
[09:31:03.983]  - exclude = 
[09:31:03.983]  - resignal = FALSE
[09:31:03.983]  - Number of conditions: 1
[09:31:03.983] signalConditions() ... done
[09:31:03.983] Future state: ‘finished’
[09:31:03.983] result() for MulticoreFuture ...
[09:31:03.983] result() for MulticoreFuture ... done
[09:31:03.984] signalConditions() ...
[09:31:03.984]  - include = ‘condition’
[09:31:03.984]  - exclude = ‘immediateCondition’
[09:31:03.984]  - resignal = TRUE
[09:31:03.984] plan(): Setting new future strategy stack:
[09:31:03.984]  - Number of conditions: 1
[09:31:03.984]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:03.984] List of future strategies:
[09:31:03.984] 1. multicore:
[09:31:03.984]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:03.984]    - tweaked: FALSE
[09:31:03.984]    - call: plan(strategy)
[09:31:03.985] signalConditions() ... done
v3: <simpleError> (as expect)
[09:31:03.985] result() for MulticoreFuture ...
[09:31:03.989] plan(): nbrOfWorkers() = 2
[09:31:03.990] result() for MulticoreFuture ...
[09:31:03.990] result() for MulticoreFuture ... done
[09:31:03.990] result() for MulticoreFuture ... done
[09:31:03.990] result() for MulticoreFuture ...
[09:31:03.990] result() for MulticoreFuture ... done
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[09:31:03.991] getGlobalsAndPackages() ...
[09:31:03.991] Searching for globals...
[09:31:03.991] 
[09:31:03.992] Searching for globals ... DONE
[09:31:03.992] - globals: [0] <none>
[09:31:03.992] getGlobalsAndPackages() ... DONE
[09:31:03.992] run() for ‘Future’ ...
[09:31:03.992] - state: ‘created’
[09:31:03.992] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:03.996] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:03.997] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:03.997]   - Field: ‘label’
[09:31:03.997]   - Field: ‘local’
[09:31:03.997]   - Field: ‘owner’
[09:31:03.997]   - Field: ‘envir’
[09:31:03.997]   - Field: ‘workers’
[09:31:03.997]   - Field: ‘packages’
[09:31:03.997]   - Field: ‘gc’
[09:31:03.997]   - Field: ‘job’
[09:31:03.998]   - Field: ‘conditions’
[09:31:03.998]   - Field: ‘expr’
[09:31:03.998]   - Field: ‘uuid’
[09:31:03.998]   - Field: ‘seed’
[09:31:03.998]   - Field: ‘version’
[09:31:03.998]   - Field: ‘result’
[09:31:03.998]   - Field: ‘asynchronous’
[09:31:03.998]   - Field: ‘calls’
[09:31:03.998]   - Field: ‘globals’
[09:31:03.999]   - Field: ‘stdout’
[09:31:03.999]   - Field: ‘earlySignal’
[09:31:03.999]   - Field: ‘lazy’
[09:31:03.999]   - Field: ‘state’
[09:31:03.999] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:03.999] - Launch lazy future ...
[09:31:03.999] Packages needed by the future expression (n = 0): <none>
[09:31:04.000] Packages needed by future strategies (n = 0): <none>
[09:31:04.000] {
[09:31:04.000]     {
[09:31:04.000]         {
[09:31:04.000]             ...future.startTime <- base::Sys.time()
[09:31:04.000]             {
[09:31:04.000]                 {
[09:31:04.000]                   {
[09:31:04.000]                     {
[09:31:04.000]                       base::local({
[09:31:04.000]                         has_future <- base::requireNamespace("future", 
[09:31:04.000]                           quietly = TRUE)
[09:31:04.000]                         if (has_future) {
[09:31:04.000]                           ns <- base::getNamespace("future")
[09:31:04.000]                           version <- ns[[".package"]][["version"]]
[09:31:04.000]                           if (is.null(version)) 
[09:31:04.000]                             version <- utils::packageVersion("future")
[09:31:04.000]                         }
[09:31:04.000]                         else {
[09:31:04.000]                           version <- NULL
[09:31:04.000]                         }
[09:31:04.000]                         if (!has_future || version < "1.8.0") {
[09:31:04.000]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:04.000]                             "", base::R.version$version.string), 
[09:31:04.000]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:04.000]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:04.000]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:04.000]                               "release", "version")], collapse = " "), 
[09:31:04.000]                             hostname = base::Sys.info()[["nodename"]])
[09:31:04.000]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:04.000]                             info)
[09:31:04.000]                           info <- base::paste(info, collapse = "; ")
[09:31:04.000]                           if (!has_future) {
[09:31:04.000]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:04.000]                               info)
[09:31:04.000]                           }
[09:31:04.000]                           else {
[09:31:04.000]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:04.000]                               info, version)
[09:31:04.000]                           }
[09:31:04.000]                           base::stop(msg)
[09:31:04.000]                         }
[09:31:04.000]                       })
[09:31:04.000]                     }
[09:31:04.000]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:04.000]                     base::options(mc.cores = 1L)
[09:31:04.000]                   }
[09:31:04.000]                   ...future.strategy.old <- future::plan("list")
[09:31:04.000]                   options(future.plan = NULL)
[09:31:04.000]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.000]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:04.000]                 }
[09:31:04.000]                 ...future.workdir <- getwd()
[09:31:04.000]             }
[09:31:04.000]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:04.000]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:04.000]         }
[09:31:04.000]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:04.000]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:04.000]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:04.000]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:04.000]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:04.000]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:04.000]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:04.000]             base::names(...future.oldOptions))
[09:31:04.000]     }
[09:31:04.000]     if (FALSE) {
[09:31:04.000]     }
[09:31:04.000]     else {
[09:31:04.000]         if (TRUE) {
[09:31:04.000]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:04.000]                 open = "w")
[09:31:04.000]         }
[09:31:04.000]         else {
[09:31:04.000]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:04.000]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:04.000]         }
[09:31:04.000]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:04.000]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:04.000]             base::sink(type = "output", split = FALSE)
[09:31:04.000]             base::close(...future.stdout)
[09:31:04.000]         }, add = TRUE)
[09:31:04.000]     }
[09:31:04.000]     ...future.frame <- base::sys.nframe()
[09:31:04.000]     ...future.conditions <- base::list()
[09:31:04.000]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:04.000]     if (FALSE) {
[09:31:04.000]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:04.000]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:04.000]     }
[09:31:04.000]     ...future.result <- base::tryCatch({
[09:31:04.000]         base::withCallingHandlers({
[09:31:04.000]             ...future.value <- base::withVisible(base::local({
[09:31:04.000]                 withCallingHandlers({
[09:31:04.000]                   1
[09:31:04.000]                 }, immediateCondition = function(cond) {
[09:31:04.000]                   save_rds <- function (object, pathname, ...) 
[09:31:04.000]                   {
[09:31:04.000]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:04.000]                     if (file_test("-f", pathname_tmp)) {
[09:31:04.000]                       fi_tmp <- file.info(pathname_tmp)
[09:31:04.000]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:04.000]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:04.000]                         fi_tmp[["mtime"]])
[09:31:04.000]                     }
[09:31:04.000]                     tryCatch({
[09:31:04.000]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:04.000]                     }, error = function(ex) {
[09:31:04.000]                       msg <- conditionMessage(ex)
[09:31:04.000]                       fi_tmp <- file.info(pathname_tmp)
[09:31:04.000]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:04.000]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:04.000]                         fi_tmp[["mtime"]], msg)
[09:31:04.000]                       ex$message <- msg
[09:31:04.000]                       stop(ex)
[09:31:04.000]                     })
[09:31:04.000]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:04.000]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:04.000]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:04.000]                       fi_tmp <- file.info(pathname_tmp)
[09:31:04.000]                       fi <- file.info(pathname)
[09:31:04.000]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:04.000]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:04.000]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:04.000]                         fi[["size"]], fi[["mtime"]])
[09:31:04.000]                       stop(msg)
[09:31:04.000]                     }
[09:31:04.000]                     invisible(pathname)
[09:31:04.000]                   }
[09:31:04.000]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:04.000]                     rootPath = tempdir()) 
[09:31:04.000]                   {
[09:31:04.000]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:04.000]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:04.000]                       tmpdir = path, fileext = ".rds")
[09:31:04.000]                     save_rds(obj, file)
[09:31:04.000]                   }
[09:31:04.000]                   saveImmediateCondition(cond, path = "/tmp/RtmpgspuSi/.future/immediateConditions")
[09:31:04.000]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.000]                   {
[09:31:04.000]                     inherits <- base::inherits
[09:31:04.000]                     invokeRestart <- base::invokeRestart
[09:31:04.000]                     is.null <- base::is.null
[09:31:04.000]                     muffled <- FALSE
[09:31:04.000]                     if (inherits(cond, "message")) {
[09:31:04.000]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:04.000]                       if (muffled) 
[09:31:04.000]                         invokeRestart("muffleMessage")
[09:31:04.000]                     }
[09:31:04.000]                     else if (inherits(cond, "warning")) {
[09:31:04.000]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:04.000]                       if (muffled) 
[09:31:04.000]                         invokeRestart("muffleWarning")
[09:31:04.000]                     }
[09:31:04.000]                     else if (inherits(cond, "condition")) {
[09:31:04.000]                       if (!is.null(pattern)) {
[09:31:04.000]                         computeRestarts <- base::computeRestarts
[09:31:04.000]                         grepl <- base::grepl
[09:31:04.000]                         restarts <- computeRestarts(cond)
[09:31:04.000]                         for (restart in restarts) {
[09:31:04.000]                           name <- restart$name
[09:31:04.000]                           if (is.null(name)) 
[09:31:04.000]                             next
[09:31:04.000]                           if (!grepl(pattern, name)) 
[09:31:04.000]                             next
[09:31:04.000]                           invokeRestart(restart)
[09:31:04.000]                           muffled <- TRUE
[09:31:04.000]                           break
[09:31:04.000]                         }
[09:31:04.000]                       }
[09:31:04.000]                     }
[09:31:04.000]                     invisible(muffled)
[09:31:04.000]                   }
[09:31:04.000]                   muffleCondition(cond)
[09:31:04.000]                 })
[09:31:04.000]             }))
[09:31:04.000]             future::FutureResult(value = ...future.value$value, 
[09:31:04.000]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.000]                   ...future.rng), globalenv = if (FALSE) 
[09:31:04.000]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:04.000]                     ...future.globalenv.names))
[09:31:04.000]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:04.000]         }, condition = base::local({
[09:31:04.000]             c <- base::c
[09:31:04.000]             inherits <- base::inherits
[09:31:04.000]             invokeRestart <- base::invokeRestart
[09:31:04.000]             length <- base::length
[09:31:04.000]             list <- base::list
[09:31:04.000]             seq.int <- base::seq.int
[09:31:04.000]             signalCondition <- base::signalCondition
[09:31:04.000]             sys.calls <- base::sys.calls
[09:31:04.000]             `[[` <- base::`[[`
[09:31:04.000]             `+` <- base::`+`
[09:31:04.000]             `<<-` <- base::`<<-`
[09:31:04.000]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:04.000]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:04.000]                   3L)]
[09:31:04.000]             }
[09:31:04.000]             function(cond) {
[09:31:04.000]                 is_error <- inherits(cond, "error")
[09:31:04.000]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:04.000]                   NULL)
[09:31:04.000]                 if (is_error) {
[09:31:04.000]                   sessionInformation <- function() {
[09:31:04.000]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:04.000]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:04.000]                       search = base::search(), system = base::Sys.info())
[09:31:04.000]                   }
[09:31:04.000]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.000]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:04.000]                     cond$call), session = sessionInformation(), 
[09:31:04.000]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:04.000]                   signalCondition(cond)
[09:31:04.000]                 }
[09:31:04.000]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:04.000]                 "immediateCondition"))) {
[09:31:04.000]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:04.000]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.000]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:04.000]                   if (TRUE && !signal) {
[09:31:04.000]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.000]                     {
[09:31:04.000]                       inherits <- base::inherits
[09:31:04.000]                       invokeRestart <- base::invokeRestart
[09:31:04.000]                       is.null <- base::is.null
[09:31:04.000]                       muffled <- FALSE
[09:31:04.000]                       if (inherits(cond, "message")) {
[09:31:04.000]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.000]                         if (muffled) 
[09:31:04.000]                           invokeRestart("muffleMessage")
[09:31:04.000]                       }
[09:31:04.000]                       else if (inherits(cond, "warning")) {
[09:31:04.000]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.000]                         if (muffled) 
[09:31:04.000]                           invokeRestart("muffleWarning")
[09:31:04.000]                       }
[09:31:04.000]                       else if (inherits(cond, "condition")) {
[09:31:04.000]                         if (!is.null(pattern)) {
[09:31:04.000]                           computeRestarts <- base::computeRestarts
[09:31:04.000]                           grepl <- base::grepl
[09:31:04.000]                           restarts <- computeRestarts(cond)
[09:31:04.000]                           for (restart in restarts) {
[09:31:04.000]                             name <- restart$name
[09:31:04.000]                             if (is.null(name)) 
[09:31:04.000]                               next
[09:31:04.000]                             if (!grepl(pattern, name)) 
[09:31:04.000]                               next
[09:31:04.000]                             invokeRestart(restart)
[09:31:04.000]                             muffled <- TRUE
[09:31:04.000]                             break
[09:31:04.000]                           }
[09:31:04.000]                         }
[09:31:04.000]                       }
[09:31:04.000]                       invisible(muffled)
[09:31:04.000]                     }
[09:31:04.000]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.000]                   }
[09:31:04.000]                 }
[09:31:04.000]                 else {
[09:31:04.000]                   if (TRUE) {
[09:31:04.000]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.000]                     {
[09:31:04.000]                       inherits <- base::inherits
[09:31:04.000]                       invokeRestart <- base::invokeRestart
[09:31:04.000]                       is.null <- base::is.null
[09:31:04.000]                       muffled <- FALSE
[09:31:04.000]                       if (inherits(cond, "message")) {
[09:31:04.000]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.000]                         if (muffled) 
[09:31:04.000]                           invokeRestart("muffleMessage")
[09:31:04.000]                       }
[09:31:04.000]                       else if (inherits(cond, "warning")) {
[09:31:04.000]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.000]                         if (muffled) 
[09:31:04.000]                           invokeRestart("muffleWarning")
[09:31:04.000]                       }
[09:31:04.000]                       else if (inherits(cond, "condition")) {
[09:31:04.000]                         if (!is.null(pattern)) {
[09:31:04.000]                           computeRestarts <- base::computeRestarts
[09:31:04.000]                           grepl <- base::grepl
[09:31:04.000]                           restarts <- computeRestarts(cond)
[09:31:04.000]                           for (restart in restarts) {
[09:31:04.000]                             name <- restart$name
[09:31:04.000]                             if (is.null(name)) 
[09:31:04.000]                               next
[09:31:04.000]                             if (!grepl(pattern, name)) 
[09:31:04.000]                               next
[09:31:04.000]                             invokeRestart(restart)
[09:31:04.000]                             muffled <- TRUE
[09:31:04.000]                             break
[09:31:04.000]                           }
[09:31:04.000]                         }
[09:31:04.000]                       }
[09:31:04.000]                       invisible(muffled)
[09:31:04.000]                     }
[09:31:04.000]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.000]                   }
[09:31:04.000]                 }
[09:31:04.000]             }
[09:31:04.000]         }))
[09:31:04.000]     }, error = function(ex) {
[09:31:04.000]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:04.000]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.000]                 ...future.rng), started = ...future.startTime, 
[09:31:04.000]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:04.000]             version = "1.8"), class = "FutureResult")
[09:31:04.000]     }, finally = {
[09:31:04.000]         if (!identical(...future.workdir, getwd())) 
[09:31:04.000]             setwd(...future.workdir)
[09:31:04.000]         {
[09:31:04.000]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:04.000]                 ...future.oldOptions$nwarnings <- NULL
[09:31:04.000]             }
[09:31:04.000]             base::options(...future.oldOptions)
[09:31:04.000]             if (.Platform$OS.type == "windows") {
[09:31:04.000]                 old_names <- names(...future.oldEnvVars)
[09:31:04.000]                 envs <- base::Sys.getenv()
[09:31:04.000]                 names <- names(envs)
[09:31:04.000]                 common <- intersect(names, old_names)
[09:31:04.000]                 added <- setdiff(names, old_names)
[09:31:04.000]                 removed <- setdiff(old_names, names)
[09:31:04.000]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:04.000]                   envs[common]]
[09:31:04.000]                 NAMES <- toupper(changed)
[09:31:04.000]                 args <- list()
[09:31:04.000]                 for (kk in seq_along(NAMES)) {
[09:31:04.000]                   name <- changed[[kk]]
[09:31:04.000]                   NAME <- NAMES[[kk]]
[09:31:04.000]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.000]                     next
[09:31:04.000]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.000]                 }
[09:31:04.000]                 NAMES <- toupper(added)
[09:31:04.000]                 for (kk in seq_along(NAMES)) {
[09:31:04.000]                   name <- added[[kk]]
[09:31:04.000]                   NAME <- NAMES[[kk]]
[09:31:04.000]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.000]                     next
[09:31:04.000]                   args[[name]] <- ""
[09:31:04.000]                 }
[09:31:04.000]                 NAMES <- toupper(removed)
[09:31:04.000]                 for (kk in seq_along(NAMES)) {
[09:31:04.000]                   name <- removed[[kk]]
[09:31:04.000]                   NAME <- NAMES[[kk]]
[09:31:04.000]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.000]                     next
[09:31:04.000]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.000]                 }
[09:31:04.000]                 if (length(args) > 0) 
[09:31:04.000]                   base::do.call(base::Sys.setenv, args = args)
[09:31:04.000]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:04.000]             }
[09:31:04.000]             else {
[09:31:04.000]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:04.000]             }
[09:31:04.000]             {
[09:31:04.000]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:04.000]                   0L) {
[09:31:04.000]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:04.000]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:04.000]                   base::options(opts)
[09:31:04.000]                 }
[09:31:04.000]                 {
[09:31:04.000]                   {
[09:31:04.000]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:04.000]                     NULL
[09:31:04.000]                   }
[09:31:04.000]                   options(future.plan = NULL)
[09:31:04.000]                   if (is.na(NA_character_)) 
[09:31:04.000]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.000]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:04.000]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:04.000]                     .init = FALSE)
[09:31:04.000]                 }
[09:31:04.000]             }
[09:31:04.000]         }
[09:31:04.000]     })
[09:31:04.000]     if (TRUE) {
[09:31:04.000]         base::sink(type = "output", split = FALSE)
[09:31:04.000]         if (TRUE) {
[09:31:04.000]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:04.000]         }
[09:31:04.000]         else {
[09:31:04.000]             ...future.result["stdout"] <- base::list(NULL)
[09:31:04.000]         }
[09:31:04.000]         base::close(...future.stdout)
[09:31:04.000]         ...future.stdout <- NULL
[09:31:04.000]     }
[09:31:04.000]     ...future.result$conditions <- ...future.conditions
[09:31:04.000]     ...future.result$finished <- base::Sys.time()
[09:31:04.000]     ...future.result
[09:31:04.000] }
[09:31:04.003] requestCore(): workers = 2
[09:31:04.004] MulticoreFuture started
[09:31:04.005] - Launch lazy future ... done
[09:31:04.005] plan(): Setting new future strategy stack:
[09:31:04.005] run() for ‘MulticoreFuture’ ... done
[09:31:04.009] result() for MulticoreFuture ...
[09:31:04.009] List of future strategies:
[09:31:04.009] 1. sequential:
[09:31:04.009]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:04.009]    - tweaked: FALSE
[09:31:04.009]    - call: NULL
[09:31:04.010] plan(): nbrOfWorkers() = 1
[09:31:04.012] plan(): Setting new future strategy stack:
[09:31:04.012] List of future strategies:
[09:31:04.012] 1. multicore:
[09:31:04.012]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:04.012]    - tweaked: FALSE
[09:31:04.012]    - call: plan(strategy)
[09:31:04.017] plan(): nbrOfWorkers() = 2
[09:31:04.018] result() for MulticoreFuture ...
[09:31:04.018] result() for MulticoreFuture ... done
[09:31:04.019] result() for MulticoreFuture ... done
[09:31:04.019] result() for MulticoreFuture ...
[09:31:04.019] result() for MulticoreFuture ... done
c = 1
[09:31:04.019] getGlobalsAndPackages() ...
[09:31:04.020] Searching for globals...
[09:31:04.020] 
[09:31:04.020] Searching for globals ... DONE
[09:31:04.020] - globals: [0] <none>
[09:31:04.021] getGlobalsAndPackages() ... DONE
[09:31:04.021] run() for ‘Future’ ...
[09:31:04.021] - state: ‘created’
[09:31:04.021] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:04.025] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:04.025] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:04.025]   - Field: ‘label’
[09:31:04.026]   - Field: ‘local’
[09:31:04.026]   - Field: ‘owner’
[09:31:04.026]   - Field: ‘envir’
[09:31:04.026]   - Field: ‘workers’
[09:31:04.026]   - Field: ‘packages’
[09:31:04.026]   - Field: ‘gc’
[09:31:04.026]   - Field: ‘job’
[09:31:04.026]   - Field: ‘conditions’
[09:31:04.027]   - Field: ‘expr’
[09:31:04.027]   - Field: ‘uuid’
[09:31:04.027]   - Field: ‘seed’
[09:31:04.027]   - Field: ‘version’
[09:31:04.027]   - Field: ‘result’
[09:31:04.027]   - Field: ‘asynchronous’
[09:31:04.027]   - Field: ‘calls’
[09:31:04.027]   - Field: ‘globals’
[09:31:04.027]   - Field: ‘stdout’
[09:31:04.028]   - Field: ‘earlySignal’
[09:31:04.028]   - Field: ‘lazy’
[09:31:04.028]   - Field: ‘state’
[09:31:04.028] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:04.028] - Launch lazy future ...
[09:31:04.028] Packages needed by the future expression (n = 0): <none>
[09:31:04.029] Packages needed by future strategies (n = 0): <none>
[09:31:04.029] {
[09:31:04.029]     {
[09:31:04.029]         {
[09:31:04.029]             ...future.startTime <- base::Sys.time()
[09:31:04.029]             {
[09:31:04.029]                 {
[09:31:04.029]                   {
[09:31:04.029]                     {
[09:31:04.029]                       base::local({
[09:31:04.029]                         has_future <- base::requireNamespace("future", 
[09:31:04.029]                           quietly = TRUE)
[09:31:04.029]                         if (has_future) {
[09:31:04.029]                           ns <- base::getNamespace("future")
[09:31:04.029]                           version <- ns[[".package"]][["version"]]
[09:31:04.029]                           if (is.null(version)) 
[09:31:04.029]                             version <- utils::packageVersion("future")
[09:31:04.029]                         }
[09:31:04.029]                         else {
[09:31:04.029]                           version <- NULL
[09:31:04.029]                         }
[09:31:04.029]                         if (!has_future || version < "1.8.0") {
[09:31:04.029]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:04.029]                             "", base::R.version$version.string), 
[09:31:04.029]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:04.029]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:04.029]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:04.029]                               "release", "version")], collapse = " "), 
[09:31:04.029]                             hostname = base::Sys.info()[["nodename"]])
[09:31:04.029]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:04.029]                             info)
[09:31:04.029]                           info <- base::paste(info, collapse = "; ")
[09:31:04.029]                           if (!has_future) {
[09:31:04.029]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:04.029]                               info)
[09:31:04.029]                           }
[09:31:04.029]                           else {
[09:31:04.029]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:04.029]                               info, version)
[09:31:04.029]                           }
[09:31:04.029]                           base::stop(msg)
[09:31:04.029]                         }
[09:31:04.029]                       })
[09:31:04.029]                     }
[09:31:04.029]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:04.029]                     base::options(mc.cores = 1L)
[09:31:04.029]                   }
[09:31:04.029]                   ...future.strategy.old <- future::plan("list")
[09:31:04.029]                   options(future.plan = NULL)
[09:31:04.029]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.029]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:04.029]                 }
[09:31:04.029]                 ...future.workdir <- getwd()
[09:31:04.029]             }
[09:31:04.029]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:04.029]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:04.029]         }
[09:31:04.029]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:04.029]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:04.029]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:04.029]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:04.029]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:04.029]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:04.029]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:04.029]             base::names(...future.oldOptions))
[09:31:04.029]     }
[09:31:04.029]     if (FALSE) {
[09:31:04.029]     }
[09:31:04.029]     else {
[09:31:04.029]         if (TRUE) {
[09:31:04.029]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:04.029]                 open = "w")
[09:31:04.029]         }
[09:31:04.029]         else {
[09:31:04.029]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:04.029]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:04.029]         }
[09:31:04.029]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:04.029]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:04.029]             base::sink(type = "output", split = FALSE)
[09:31:04.029]             base::close(...future.stdout)
[09:31:04.029]         }, add = TRUE)
[09:31:04.029]     }
[09:31:04.029]     ...future.frame <- base::sys.nframe()
[09:31:04.029]     ...future.conditions <- base::list()
[09:31:04.029]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:04.029]     if (FALSE) {
[09:31:04.029]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:04.029]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:04.029]     }
[09:31:04.029]     ...future.result <- base::tryCatch({
[09:31:04.029]         base::withCallingHandlers({
[09:31:04.029]             ...future.value <- base::withVisible(base::local({
[09:31:04.029]                 withCallingHandlers({
[09:31:04.029]                   1
[09:31:04.029]                 }, immediateCondition = function(cond) {
[09:31:04.029]                   save_rds <- function (object, pathname, ...) 
[09:31:04.029]                   {
[09:31:04.029]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:04.029]                     if (file_test("-f", pathname_tmp)) {
[09:31:04.029]                       fi_tmp <- file.info(pathname_tmp)
[09:31:04.029]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:04.029]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:04.029]                         fi_tmp[["mtime"]])
[09:31:04.029]                     }
[09:31:04.029]                     tryCatch({
[09:31:04.029]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:04.029]                     }, error = function(ex) {
[09:31:04.029]                       msg <- conditionMessage(ex)
[09:31:04.029]                       fi_tmp <- file.info(pathname_tmp)
[09:31:04.029]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:04.029]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:04.029]                         fi_tmp[["mtime"]], msg)
[09:31:04.029]                       ex$message <- msg
[09:31:04.029]                       stop(ex)
[09:31:04.029]                     })
[09:31:04.029]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:04.029]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:04.029]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:04.029]                       fi_tmp <- file.info(pathname_tmp)
[09:31:04.029]                       fi <- file.info(pathname)
[09:31:04.029]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:04.029]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:04.029]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:04.029]                         fi[["size"]], fi[["mtime"]])
[09:31:04.029]                       stop(msg)
[09:31:04.029]                     }
[09:31:04.029]                     invisible(pathname)
[09:31:04.029]                   }
[09:31:04.029]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:04.029]                     rootPath = tempdir()) 
[09:31:04.029]                   {
[09:31:04.029]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:04.029]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:04.029]                       tmpdir = path, fileext = ".rds")
[09:31:04.029]                     save_rds(obj, file)
[09:31:04.029]                   }
[09:31:04.029]                   saveImmediateCondition(cond, path = "/tmp/RtmpgspuSi/.future/immediateConditions")
[09:31:04.029]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.029]                   {
[09:31:04.029]                     inherits <- base::inherits
[09:31:04.029]                     invokeRestart <- base::invokeRestart
[09:31:04.029]                     is.null <- base::is.null
[09:31:04.029]                     muffled <- FALSE
[09:31:04.029]                     if (inherits(cond, "message")) {
[09:31:04.029]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:04.029]                       if (muffled) 
[09:31:04.029]                         invokeRestart("muffleMessage")
[09:31:04.029]                     }
[09:31:04.029]                     else if (inherits(cond, "warning")) {
[09:31:04.029]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:04.029]                       if (muffled) 
[09:31:04.029]                         invokeRestart("muffleWarning")
[09:31:04.029]                     }
[09:31:04.029]                     else if (inherits(cond, "condition")) {
[09:31:04.029]                       if (!is.null(pattern)) {
[09:31:04.029]                         computeRestarts <- base::computeRestarts
[09:31:04.029]                         grepl <- base::grepl
[09:31:04.029]                         restarts <- computeRestarts(cond)
[09:31:04.029]                         for (restart in restarts) {
[09:31:04.029]                           name <- restart$name
[09:31:04.029]                           if (is.null(name)) 
[09:31:04.029]                             next
[09:31:04.029]                           if (!grepl(pattern, name)) 
[09:31:04.029]                             next
[09:31:04.029]                           invokeRestart(restart)
[09:31:04.029]                           muffled <- TRUE
[09:31:04.029]                           break
[09:31:04.029]                         }
[09:31:04.029]                       }
[09:31:04.029]                     }
[09:31:04.029]                     invisible(muffled)
[09:31:04.029]                   }
[09:31:04.029]                   muffleCondition(cond)
[09:31:04.029]                 })
[09:31:04.029]             }))
[09:31:04.029]             future::FutureResult(value = ...future.value$value, 
[09:31:04.029]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.029]                   ...future.rng), globalenv = if (FALSE) 
[09:31:04.029]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:04.029]                     ...future.globalenv.names))
[09:31:04.029]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:04.029]         }, condition = base::local({
[09:31:04.029]             c <- base::c
[09:31:04.029]             inherits <- base::inherits
[09:31:04.029]             invokeRestart <- base::invokeRestart
[09:31:04.029]             length <- base::length
[09:31:04.029]             list <- base::list
[09:31:04.029]             seq.int <- base::seq.int
[09:31:04.029]             signalCondition <- base::signalCondition
[09:31:04.029]             sys.calls <- base::sys.calls
[09:31:04.029]             `[[` <- base::`[[`
[09:31:04.029]             `+` <- base::`+`
[09:31:04.029]             `<<-` <- base::`<<-`
[09:31:04.029]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:04.029]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:04.029]                   3L)]
[09:31:04.029]             }
[09:31:04.029]             function(cond) {
[09:31:04.029]                 is_error <- inherits(cond, "error")
[09:31:04.029]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:04.029]                   NULL)
[09:31:04.029]                 if (is_error) {
[09:31:04.029]                   sessionInformation <- function() {
[09:31:04.029]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:04.029]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:04.029]                       search = base::search(), system = base::Sys.info())
[09:31:04.029]                   }
[09:31:04.029]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.029]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:04.029]                     cond$call), session = sessionInformation(), 
[09:31:04.029]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:04.029]                   signalCondition(cond)
[09:31:04.029]                 }
[09:31:04.029]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:04.029]                 "immediateCondition"))) {
[09:31:04.029]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:04.029]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.029]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:04.029]                   if (TRUE && !signal) {
[09:31:04.029]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.029]                     {
[09:31:04.029]                       inherits <- base::inherits
[09:31:04.029]                       invokeRestart <- base::invokeRestart
[09:31:04.029]                       is.null <- base::is.null
[09:31:04.029]                       muffled <- FALSE
[09:31:04.029]                       if (inherits(cond, "message")) {
[09:31:04.029]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.029]                         if (muffled) 
[09:31:04.029]                           invokeRestart("muffleMessage")
[09:31:04.029]                       }
[09:31:04.029]                       else if (inherits(cond, "warning")) {
[09:31:04.029]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.029]                         if (muffled) 
[09:31:04.029]                           invokeRestart("muffleWarning")
[09:31:04.029]                       }
[09:31:04.029]                       else if (inherits(cond, "condition")) {
[09:31:04.029]                         if (!is.null(pattern)) {
[09:31:04.029]                           computeRestarts <- base::computeRestarts
[09:31:04.029]                           grepl <- base::grepl
[09:31:04.029]                           restarts <- computeRestarts(cond)
[09:31:04.029]                           for (restart in restarts) {
[09:31:04.029]                             name <- restart$name
[09:31:04.029]                             if (is.null(name)) 
[09:31:04.029]                               next
[09:31:04.029]                             if (!grepl(pattern, name)) 
[09:31:04.029]                               next
[09:31:04.029]                             invokeRestart(restart)
[09:31:04.029]                             muffled <- TRUE
[09:31:04.029]                             break
[09:31:04.029]                           }
[09:31:04.029]                         }
[09:31:04.029]                       }
[09:31:04.029]                       invisible(muffled)
[09:31:04.029]                     }
[09:31:04.029]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.029]                   }
[09:31:04.029]                 }
[09:31:04.029]                 else {
[09:31:04.029]                   if (TRUE) {
[09:31:04.029]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.029]                     {
[09:31:04.029]                       inherits <- base::inherits
[09:31:04.029]                       invokeRestart <- base::invokeRestart
[09:31:04.029]                       is.null <- base::is.null
[09:31:04.029]                       muffled <- FALSE
[09:31:04.029]                       if (inherits(cond, "message")) {
[09:31:04.029]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.029]                         if (muffled) 
[09:31:04.029]                           invokeRestart("muffleMessage")
[09:31:04.029]                       }
[09:31:04.029]                       else if (inherits(cond, "warning")) {
[09:31:04.029]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.029]                         if (muffled) 
[09:31:04.029]                           invokeRestart("muffleWarning")
[09:31:04.029]                       }
[09:31:04.029]                       else if (inherits(cond, "condition")) {
[09:31:04.029]                         if (!is.null(pattern)) {
[09:31:04.029]                           computeRestarts <- base::computeRestarts
[09:31:04.029]                           grepl <- base::grepl
[09:31:04.029]                           restarts <- computeRestarts(cond)
[09:31:04.029]                           for (restart in restarts) {
[09:31:04.029]                             name <- restart$name
[09:31:04.029]                             if (is.null(name)) 
[09:31:04.029]                               next
[09:31:04.029]                             if (!grepl(pattern, name)) 
[09:31:04.029]                               next
[09:31:04.029]                             invokeRestart(restart)
[09:31:04.029]                             muffled <- TRUE
[09:31:04.029]                             break
[09:31:04.029]                           }
[09:31:04.029]                         }
[09:31:04.029]                       }
[09:31:04.029]                       invisible(muffled)
[09:31:04.029]                     }
[09:31:04.029]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.029]                   }
[09:31:04.029]                 }
[09:31:04.029]             }
[09:31:04.029]         }))
[09:31:04.029]     }, error = function(ex) {
[09:31:04.029]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:04.029]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.029]                 ...future.rng), started = ...future.startTime, 
[09:31:04.029]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:04.029]             version = "1.8"), class = "FutureResult")
[09:31:04.029]     }, finally = {
[09:31:04.029]         if (!identical(...future.workdir, getwd())) 
[09:31:04.029]             setwd(...future.workdir)
[09:31:04.029]         {
[09:31:04.029]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:04.029]                 ...future.oldOptions$nwarnings <- NULL
[09:31:04.029]             }
[09:31:04.029]             base::options(...future.oldOptions)
[09:31:04.029]             if (.Platform$OS.type == "windows") {
[09:31:04.029]                 old_names <- names(...future.oldEnvVars)
[09:31:04.029]                 envs <- base::Sys.getenv()
[09:31:04.029]                 names <- names(envs)
[09:31:04.029]                 common <- intersect(names, old_names)
[09:31:04.029]                 added <- setdiff(names, old_names)
[09:31:04.029]                 removed <- setdiff(old_names, names)
[09:31:04.029]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:04.029]                   envs[common]]
[09:31:04.029]                 NAMES <- toupper(changed)
[09:31:04.029]                 args <- list()
[09:31:04.029]                 for (kk in seq_along(NAMES)) {
[09:31:04.029]                   name <- changed[[kk]]
[09:31:04.029]                   NAME <- NAMES[[kk]]
[09:31:04.029]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.029]                     next
[09:31:04.029]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.029]                 }
[09:31:04.029]                 NAMES <- toupper(added)
[09:31:04.029]                 for (kk in seq_along(NAMES)) {
[09:31:04.029]                   name <- added[[kk]]
[09:31:04.029]                   NAME <- NAMES[[kk]]
[09:31:04.029]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.029]                     next
[09:31:04.029]                   args[[name]] <- ""
[09:31:04.029]                 }
[09:31:04.029]                 NAMES <- toupper(removed)
[09:31:04.029]                 for (kk in seq_along(NAMES)) {
[09:31:04.029]                   name <- removed[[kk]]
[09:31:04.029]                   NAME <- NAMES[[kk]]
[09:31:04.029]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.029]                     next
[09:31:04.029]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.029]                 }
[09:31:04.029]                 if (length(args) > 0) 
[09:31:04.029]                   base::do.call(base::Sys.setenv, args = args)
[09:31:04.029]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:04.029]             }
[09:31:04.029]             else {
[09:31:04.029]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:04.029]             }
[09:31:04.029]             {
[09:31:04.029]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:04.029]                   0L) {
[09:31:04.029]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:04.029]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:04.029]                   base::options(opts)
[09:31:04.029]                 }
[09:31:04.029]                 {
[09:31:04.029]                   {
[09:31:04.029]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:04.029]                     NULL
[09:31:04.029]                   }
[09:31:04.029]                   options(future.plan = NULL)
[09:31:04.029]                   if (is.na(NA_character_)) 
[09:31:04.029]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.029]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:04.029]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:04.029]                     .init = FALSE)
[09:31:04.029]                 }
[09:31:04.029]             }
[09:31:04.029]         }
[09:31:04.029]     })
[09:31:04.029]     if (TRUE) {
[09:31:04.029]         base::sink(type = "output", split = FALSE)
[09:31:04.029]         if (TRUE) {
[09:31:04.029]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:04.029]         }
[09:31:04.029]         else {
[09:31:04.029]             ...future.result["stdout"] <- base::list(NULL)
[09:31:04.029]         }
[09:31:04.029]         base::close(...future.stdout)
[09:31:04.029]         ...future.stdout <- NULL
[09:31:04.029]     }
[09:31:04.029]     ...future.result$conditions <- ...future.conditions
[09:31:04.029]     ...future.result$finished <- base::Sys.time()
[09:31:04.029]     ...future.result
[09:31:04.029] }
[09:31:04.031] requestCore(): workers = 2
[09:31:04.033] MulticoreFuture started
[09:31:04.033] - Launch lazy future ... done
[09:31:04.034] run() for ‘MulticoreFuture’ ... done
[09:31:04.034] plan(): Setting new future strategy stack:
[09:31:04.034] result() for MulticoreFuture ...
[09:31:04.034] List of future strategies:
[09:31:04.034] 1. sequential:
[09:31:04.034]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:04.034]    - tweaked: FALSE
[09:31:04.034]    - call: NULL
[09:31:04.035] plan(): nbrOfWorkers() = 1
[09:31:04.037] plan(): Setting new future strategy stack:
[09:31:04.037] List of future strategies:
[09:31:04.037] 1. multicore:
[09:31:04.037]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:04.037]    - tweaked: FALSE
[09:31:04.037]    - call: plan(strategy)
[09:31:04.042] plan(): nbrOfWorkers() = 2
[09:31:04.043] result() for MulticoreFuture ...
[09:31:04.043] result() for MulticoreFuture ... done
[09:31:04.043] result() for MulticoreFuture ... done
[09:31:04.043] result() for MulticoreFuture ...
[09:31:04.043] result() for MulticoreFuture ... done
d = 1
** Nested future assignments
[09:31:04.044] getGlobalsAndPackages() ...
[09:31:04.044] Searching for globals...
[09:31:04.049] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[09:31:04.049] Searching for globals ... DONE
[09:31:04.049] Resolving globals: FALSE
[09:31:04.050] 
[09:31:04.050] - packages: [1] ‘future’
[09:31:04.050] getGlobalsAndPackages() ... DONE
[09:31:04.050] run() for ‘Future’ ...
[09:31:04.050] - state: ‘created’
[09:31:04.051] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:04.055] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:04.055] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:04.055]   - Field: ‘label’
[09:31:04.055]   - Field: ‘local’
[09:31:04.055]   - Field: ‘owner’
[09:31:04.055]   - Field: ‘envir’
[09:31:04.055]   - Field: ‘workers’
[09:31:04.055]   - Field: ‘packages’
[09:31:04.055]   - Field: ‘gc’
[09:31:04.056]   - Field: ‘job’
[09:31:04.056]   - Field: ‘conditions’
[09:31:04.056]   - Field: ‘expr’
[09:31:04.056]   - Field: ‘uuid’
[09:31:04.056]   - Field: ‘seed’
[09:31:04.056]   - Field: ‘version’
[09:31:04.056]   - Field: ‘result’
[09:31:04.056]   - Field: ‘asynchronous’
[09:31:04.057]   - Field: ‘calls’
[09:31:04.057]   - Field: ‘globals’
[09:31:04.057]   - Field: ‘stdout’
[09:31:04.057]   - Field: ‘earlySignal’
[09:31:04.057]   - Field: ‘lazy’
[09:31:04.057]   - Field: ‘state’
[09:31:04.057] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:04.057] - Launch lazy future ...
[09:31:04.058] Packages needed by the future expression (n = 1): ‘future’
[09:31:04.058] Packages needed by future strategies (n = 0): <none>
[09:31:04.058] {
[09:31:04.058]     {
[09:31:04.058]         {
[09:31:04.058]             ...future.startTime <- base::Sys.time()
[09:31:04.058]             {
[09:31:04.058]                 {
[09:31:04.058]                   {
[09:31:04.058]                     {
[09:31:04.058]                       {
[09:31:04.058]                         base::local({
[09:31:04.058]                           has_future <- base::requireNamespace("future", 
[09:31:04.058]                             quietly = TRUE)
[09:31:04.058]                           if (has_future) {
[09:31:04.058]                             ns <- base::getNamespace("future")
[09:31:04.058]                             version <- ns[[".package"]][["version"]]
[09:31:04.058]                             if (is.null(version)) 
[09:31:04.058]                               version <- utils::packageVersion("future")
[09:31:04.058]                           }
[09:31:04.058]                           else {
[09:31:04.058]                             version <- NULL
[09:31:04.058]                           }
[09:31:04.058]                           if (!has_future || version < "1.8.0") {
[09:31:04.058]                             info <- base::c(r_version = base::gsub("R version ", 
[09:31:04.058]                               "", base::R.version$version.string), 
[09:31:04.058]                               platform = base::sprintf("%s (%s-bit)", 
[09:31:04.058]                                 base::R.version$platform, 8 * 
[09:31:04.058]                                   base::.Machine$sizeof.pointer), 
[09:31:04.058]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:04.058]                                 "release", "version")], collapse = " "), 
[09:31:04.058]                               hostname = base::Sys.info()[["nodename"]])
[09:31:04.058]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:31:04.058]                               info)
[09:31:04.058]                             info <- base::paste(info, collapse = "; ")
[09:31:04.058]                             if (!has_future) {
[09:31:04.058]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:04.058]                                 info)
[09:31:04.058]                             }
[09:31:04.058]                             else {
[09:31:04.058]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:04.058]                                 info, version)
[09:31:04.058]                             }
[09:31:04.058]                             base::stop(msg)
[09:31:04.058]                           }
[09:31:04.058]                         })
[09:31:04.058]                       }
[09:31:04.058]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:04.058]                       base::options(mc.cores = 1L)
[09:31:04.058]                     }
[09:31:04.058]                     base::local({
[09:31:04.058]                       for (pkg in "future") {
[09:31:04.058]                         base::loadNamespace(pkg)
[09:31:04.058]                         base::library(pkg, character.only = TRUE)
[09:31:04.058]                       }
[09:31:04.058]                     })
[09:31:04.058]                   }
[09:31:04.058]                   ...future.strategy.old <- future::plan("list")
[09:31:04.058]                   options(future.plan = NULL)
[09:31:04.058]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.058]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:04.058]                 }
[09:31:04.058]                 ...future.workdir <- getwd()
[09:31:04.058]             }
[09:31:04.058]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:04.058]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:04.058]         }
[09:31:04.058]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:04.058]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:04.058]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:04.058]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:04.058]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:04.058]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:04.058]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:04.058]             base::names(...future.oldOptions))
[09:31:04.058]     }
[09:31:04.058]     if (FALSE) {
[09:31:04.058]     }
[09:31:04.058]     else {
[09:31:04.058]         if (TRUE) {
[09:31:04.058]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:04.058]                 open = "w")
[09:31:04.058]         }
[09:31:04.058]         else {
[09:31:04.058]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:04.058]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:04.058]         }
[09:31:04.058]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:04.058]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:04.058]             base::sink(type = "output", split = FALSE)
[09:31:04.058]             base::close(...future.stdout)
[09:31:04.058]         }, add = TRUE)
[09:31:04.058]     }
[09:31:04.058]     ...future.frame <- base::sys.nframe()
[09:31:04.058]     ...future.conditions <- base::list()
[09:31:04.058]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:04.058]     if (FALSE) {
[09:31:04.058]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:04.058]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:04.058]     }
[09:31:04.058]     ...future.result <- base::tryCatch({
[09:31:04.058]         base::withCallingHandlers({
[09:31:04.058]             ...future.value <- base::withVisible(base::local({
[09:31:04.058]                 withCallingHandlers({
[09:31:04.058]                   {
[09:31:04.058]                     b <- 1
[09:31:04.058]                     c %<-% 2
[09:31:04.058]                     d <- 3
[09:31:04.058]                     4 %->% e
[09:31:04.058]                     b + c + d + e
[09:31:04.058]                   }
[09:31:04.058]                 }, immediateCondition = function(cond) {
[09:31:04.058]                   save_rds <- function (object, pathname, ...) 
[09:31:04.058]                   {
[09:31:04.058]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:04.058]                     if (file_test("-f", pathname_tmp)) {
[09:31:04.058]                       fi_tmp <- file.info(pathname_tmp)
[09:31:04.058]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:04.058]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:04.058]                         fi_tmp[["mtime"]])
[09:31:04.058]                     }
[09:31:04.058]                     tryCatch({
[09:31:04.058]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:04.058]                     }, error = function(ex) {
[09:31:04.058]                       msg <- conditionMessage(ex)
[09:31:04.058]                       fi_tmp <- file.info(pathname_tmp)
[09:31:04.058]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:04.058]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:04.058]                         fi_tmp[["mtime"]], msg)
[09:31:04.058]                       ex$message <- msg
[09:31:04.058]                       stop(ex)
[09:31:04.058]                     })
[09:31:04.058]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:04.058]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:04.058]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:04.058]                       fi_tmp <- file.info(pathname_tmp)
[09:31:04.058]                       fi <- file.info(pathname)
[09:31:04.058]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:04.058]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:04.058]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:04.058]                         fi[["size"]], fi[["mtime"]])
[09:31:04.058]                       stop(msg)
[09:31:04.058]                     }
[09:31:04.058]                     invisible(pathname)
[09:31:04.058]                   }
[09:31:04.058]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:04.058]                     rootPath = tempdir()) 
[09:31:04.058]                   {
[09:31:04.058]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:04.058]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:04.058]                       tmpdir = path, fileext = ".rds")
[09:31:04.058]                     save_rds(obj, file)
[09:31:04.058]                   }
[09:31:04.058]                   saveImmediateCondition(cond, path = "/tmp/RtmpgspuSi/.future/immediateConditions")
[09:31:04.058]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.058]                   {
[09:31:04.058]                     inherits <- base::inherits
[09:31:04.058]                     invokeRestart <- base::invokeRestart
[09:31:04.058]                     is.null <- base::is.null
[09:31:04.058]                     muffled <- FALSE
[09:31:04.058]                     if (inherits(cond, "message")) {
[09:31:04.058]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:04.058]                       if (muffled) 
[09:31:04.058]                         invokeRestart("muffleMessage")
[09:31:04.058]                     }
[09:31:04.058]                     else if (inherits(cond, "warning")) {
[09:31:04.058]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:04.058]                       if (muffled) 
[09:31:04.058]                         invokeRestart("muffleWarning")
[09:31:04.058]                     }
[09:31:04.058]                     else if (inherits(cond, "condition")) {
[09:31:04.058]                       if (!is.null(pattern)) {
[09:31:04.058]                         computeRestarts <- base::computeRestarts
[09:31:04.058]                         grepl <- base::grepl
[09:31:04.058]                         restarts <- computeRestarts(cond)
[09:31:04.058]                         for (restart in restarts) {
[09:31:04.058]                           name <- restart$name
[09:31:04.058]                           if (is.null(name)) 
[09:31:04.058]                             next
[09:31:04.058]                           if (!grepl(pattern, name)) 
[09:31:04.058]                             next
[09:31:04.058]                           invokeRestart(restart)
[09:31:04.058]                           muffled <- TRUE
[09:31:04.058]                           break
[09:31:04.058]                         }
[09:31:04.058]                       }
[09:31:04.058]                     }
[09:31:04.058]                     invisible(muffled)
[09:31:04.058]                   }
[09:31:04.058]                   muffleCondition(cond)
[09:31:04.058]                 })
[09:31:04.058]             }))
[09:31:04.058]             future::FutureResult(value = ...future.value$value, 
[09:31:04.058]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.058]                   ...future.rng), globalenv = if (FALSE) 
[09:31:04.058]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:04.058]                     ...future.globalenv.names))
[09:31:04.058]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:04.058]         }, condition = base::local({
[09:31:04.058]             c <- base::c
[09:31:04.058]             inherits <- base::inherits
[09:31:04.058]             invokeRestart <- base::invokeRestart
[09:31:04.058]             length <- base::length
[09:31:04.058]             list <- base::list
[09:31:04.058]             seq.int <- base::seq.int
[09:31:04.058]             signalCondition <- base::signalCondition
[09:31:04.058]             sys.calls <- base::sys.calls
[09:31:04.058]             `[[` <- base::`[[`
[09:31:04.058]             `+` <- base::`+`
[09:31:04.058]             `<<-` <- base::`<<-`
[09:31:04.058]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:04.058]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:04.058]                   3L)]
[09:31:04.058]             }
[09:31:04.058]             function(cond) {
[09:31:04.058]                 is_error <- inherits(cond, "error")
[09:31:04.058]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:04.058]                   NULL)
[09:31:04.058]                 if (is_error) {
[09:31:04.058]                   sessionInformation <- function() {
[09:31:04.058]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:04.058]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:04.058]                       search = base::search(), system = base::Sys.info())
[09:31:04.058]                   }
[09:31:04.058]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.058]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:04.058]                     cond$call), session = sessionInformation(), 
[09:31:04.058]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:04.058]                   signalCondition(cond)
[09:31:04.058]                 }
[09:31:04.058]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:04.058]                 "immediateCondition"))) {
[09:31:04.058]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:04.058]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.058]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:04.058]                   if (TRUE && !signal) {
[09:31:04.058]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.058]                     {
[09:31:04.058]                       inherits <- base::inherits
[09:31:04.058]                       invokeRestart <- base::invokeRestart
[09:31:04.058]                       is.null <- base::is.null
[09:31:04.058]                       muffled <- FALSE
[09:31:04.058]                       if (inherits(cond, "message")) {
[09:31:04.058]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.058]                         if (muffled) 
[09:31:04.058]                           invokeRestart("muffleMessage")
[09:31:04.058]                       }
[09:31:04.058]                       else if (inherits(cond, "warning")) {
[09:31:04.058]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.058]                         if (muffled) 
[09:31:04.058]                           invokeRestart("muffleWarning")
[09:31:04.058]                       }
[09:31:04.058]                       else if (inherits(cond, "condition")) {
[09:31:04.058]                         if (!is.null(pattern)) {
[09:31:04.058]                           computeRestarts <- base::computeRestarts
[09:31:04.058]                           grepl <- base::grepl
[09:31:04.058]                           restarts <- computeRestarts(cond)
[09:31:04.058]                           for (restart in restarts) {
[09:31:04.058]                             name <- restart$name
[09:31:04.058]                             if (is.null(name)) 
[09:31:04.058]                               next
[09:31:04.058]                             if (!grepl(pattern, name)) 
[09:31:04.058]                               next
[09:31:04.058]                             invokeRestart(restart)
[09:31:04.058]                             muffled <- TRUE
[09:31:04.058]                             break
[09:31:04.058]                           }
[09:31:04.058]                         }
[09:31:04.058]                       }
[09:31:04.058]                       invisible(muffled)
[09:31:04.058]                     }
[09:31:04.058]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.058]                   }
[09:31:04.058]                 }
[09:31:04.058]                 else {
[09:31:04.058]                   if (TRUE) {
[09:31:04.058]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.058]                     {
[09:31:04.058]                       inherits <- base::inherits
[09:31:04.058]                       invokeRestart <- base::invokeRestart
[09:31:04.058]                       is.null <- base::is.null
[09:31:04.058]                       muffled <- FALSE
[09:31:04.058]                       if (inherits(cond, "message")) {
[09:31:04.058]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.058]                         if (muffled) 
[09:31:04.058]                           invokeRestart("muffleMessage")
[09:31:04.058]                       }
[09:31:04.058]                       else if (inherits(cond, "warning")) {
[09:31:04.058]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.058]                         if (muffled) 
[09:31:04.058]                           invokeRestart("muffleWarning")
[09:31:04.058]                       }
[09:31:04.058]                       else if (inherits(cond, "condition")) {
[09:31:04.058]                         if (!is.null(pattern)) {
[09:31:04.058]                           computeRestarts <- base::computeRestarts
[09:31:04.058]                           grepl <- base::grepl
[09:31:04.058]                           restarts <- computeRestarts(cond)
[09:31:04.058]                           for (restart in restarts) {
[09:31:04.058]                             name <- restart$name
[09:31:04.058]                             if (is.null(name)) 
[09:31:04.058]                               next
[09:31:04.058]                             if (!grepl(pattern, name)) 
[09:31:04.058]                               next
[09:31:04.058]                             invokeRestart(restart)
[09:31:04.058]                             muffled <- TRUE
[09:31:04.058]                             break
[09:31:04.058]                           }
[09:31:04.058]                         }
[09:31:04.058]                       }
[09:31:04.058]                       invisible(muffled)
[09:31:04.058]                     }
[09:31:04.058]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.058]                   }
[09:31:04.058]                 }
[09:31:04.058]             }
[09:31:04.058]         }))
[09:31:04.058]     }, error = function(ex) {
[09:31:04.058]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:04.058]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.058]                 ...future.rng), started = ...future.startTime, 
[09:31:04.058]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:04.058]             version = "1.8"), class = "FutureResult")
[09:31:04.058]     }, finally = {
[09:31:04.058]         if (!identical(...future.workdir, getwd())) 
[09:31:04.058]             setwd(...future.workdir)
[09:31:04.058]         {
[09:31:04.058]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:04.058]                 ...future.oldOptions$nwarnings <- NULL
[09:31:04.058]             }
[09:31:04.058]             base::options(...future.oldOptions)
[09:31:04.058]             if (.Platform$OS.type == "windows") {
[09:31:04.058]                 old_names <- names(...future.oldEnvVars)
[09:31:04.058]                 envs <- base::Sys.getenv()
[09:31:04.058]                 names <- names(envs)
[09:31:04.058]                 common <- intersect(names, old_names)
[09:31:04.058]                 added <- setdiff(names, old_names)
[09:31:04.058]                 removed <- setdiff(old_names, names)
[09:31:04.058]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:04.058]                   envs[common]]
[09:31:04.058]                 NAMES <- toupper(changed)
[09:31:04.058]                 args <- list()
[09:31:04.058]                 for (kk in seq_along(NAMES)) {
[09:31:04.058]                   name <- changed[[kk]]
[09:31:04.058]                   NAME <- NAMES[[kk]]
[09:31:04.058]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.058]                     next
[09:31:04.058]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.058]                 }
[09:31:04.058]                 NAMES <- toupper(added)
[09:31:04.058]                 for (kk in seq_along(NAMES)) {
[09:31:04.058]                   name <- added[[kk]]
[09:31:04.058]                   NAME <- NAMES[[kk]]
[09:31:04.058]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.058]                     next
[09:31:04.058]                   args[[name]] <- ""
[09:31:04.058]                 }
[09:31:04.058]                 NAMES <- toupper(removed)
[09:31:04.058]                 for (kk in seq_along(NAMES)) {
[09:31:04.058]                   name <- removed[[kk]]
[09:31:04.058]                   NAME <- NAMES[[kk]]
[09:31:04.058]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.058]                     next
[09:31:04.058]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.058]                 }
[09:31:04.058]                 if (length(args) > 0) 
[09:31:04.058]                   base::do.call(base::Sys.setenv, args = args)
[09:31:04.058]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:04.058]             }
[09:31:04.058]             else {
[09:31:04.058]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:04.058]             }
[09:31:04.058]             {
[09:31:04.058]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:04.058]                   0L) {
[09:31:04.058]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:04.058]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:04.058]                   base::options(opts)
[09:31:04.058]                 }
[09:31:04.058]                 {
[09:31:04.058]                   {
[09:31:04.058]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:04.058]                     NULL
[09:31:04.058]                   }
[09:31:04.058]                   options(future.plan = NULL)
[09:31:04.058]                   if (is.na(NA_character_)) 
[09:31:04.058]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.058]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:04.058]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:04.058]                     .init = FALSE)
[09:31:04.058]                 }
[09:31:04.058]             }
[09:31:04.058]         }
[09:31:04.058]     })
[09:31:04.058]     if (TRUE) {
[09:31:04.058]         base::sink(type = "output", split = FALSE)
[09:31:04.058]         if (TRUE) {
[09:31:04.058]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:04.058]         }
[09:31:04.058]         else {
[09:31:04.058]             ...future.result["stdout"] <- base::list(NULL)
[09:31:04.058]         }
[09:31:04.058]         base::close(...future.stdout)
[09:31:04.058]         ...future.stdout <- NULL
[09:31:04.058]     }
[09:31:04.058]     ...future.result$conditions <- ...future.conditions
[09:31:04.058]     ...future.result$finished <- base::Sys.time()
[09:31:04.058]     ...future.result
[09:31:04.058] }
[09:31:04.061] requestCore(): workers = 2
[09:31:04.063] MulticoreFuture started
[09:31:04.063] - Launch lazy future ... done
[09:31:04.067] run() for ‘MulticoreFuture’ ... done
[09:31:04.067] plan(): Setting new future strategy stack:
[09:31:04.068] result() for MulticoreFuture ...
[09:31:04.068] List of future strategies:
[09:31:04.068] 1. sequential:
[09:31:04.068]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:04.068]    - tweaked: FALSE
[09:31:04.068]    - call: NULL
[09:31:04.069] plan(): nbrOfWorkers() = 1
[09:31:04.098] plan(): Setting new future strategy stack:
[09:31:04.098] List of future strategies:
[09:31:04.098] 1. multicore:
[09:31:04.098]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:04.098]    - tweaked: FALSE
[09:31:04.098]    - call: plan(strategy)
[09:31:04.103] plan(): nbrOfWorkers() = 2
[09:31:04.105] result() for MulticoreFuture ...
[09:31:04.105] result() for MulticoreFuture ... done
[09:31:04.105] signalConditions() ...
[09:31:04.105]  - include = ‘immediateCondition’
[09:31:04.105]  - exclude = 
[09:31:04.106]  - resignal = FALSE
[09:31:04.106]  - Number of conditions: 88
[09:31:04.106] signalConditions() ... done
[09:31:04.106] result() for MulticoreFuture ... done
[09:31:04.106] result() for MulticoreFuture ...
[09:31:04.107] result() for MulticoreFuture ... done
[09:31:04.107] signalConditions() ...
[09:31:04.107]  - include = ‘immediateCondition’
[09:31:04.107]  - exclude = 
[09:31:04.107]  - resignal = FALSE
[09:31:04.107]  - Number of conditions: 88
[09:31:04.108] signalConditions() ... done
[09:31:04.108] Future state: ‘finished’
[09:31:04.108] result() for MulticoreFuture ...
[09:31:04.108] result() for MulticoreFuture ... done
[09:31:04.109] signalConditions() ...
[09:31:04.109]  - include = ‘condition’
[09:31:04.109]  - exclude = ‘immediateCondition’
[09:31:04.109]  - resignal = TRUE
[09:31:04.109]  - Number of conditions: 88
[09:31:04.109]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.070] getGlobalsAndPackages() ...
[09:31:04.109]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.071] Searching for globals...
[09:31:04.110]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.071] 
[09:31:04.110]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.072] Searching for globals ... DONE
[09:31:04.110]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.072] - globals: [0] <none>
[09:31:04.110]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.072] getGlobalsAndPackages() ... DONE
[09:31:04.110]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.073] run() for ‘Future’ ...
[09:31:04.110]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.073] - state: ‘created’
[09:31:04.111]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.074] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:04.111]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.074] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:04.111]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.074] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:04.111]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.075]   - Field: ‘label’
[09:31:04.111]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.075]   - Field: ‘local’
[09:31:04.111]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.075]   - Field: ‘owner’
[09:31:04.112]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.075]   - Field: ‘envir’
[09:31:04.112]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.075]   - Field: ‘packages’
[09:31:04.112]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.075]   - Field: ‘gc’
[09:31:04.112]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.076]   - Field: ‘conditions’
[09:31:04.112]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.076]   - Field: ‘expr’
[09:31:04.112]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.076]   - Field: ‘uuid’
[09:31:04.113]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.076]   - Field: ‘seed’
[09:31:04.113]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.077]   - Field: ‘version’
[09:31:04.113]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.077]   - Field: ‘result’
[09:31:04.113]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.077]   - Field: ‘asynchronous’
[09:31:04.113]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.077]   - Field: ‘calls’
[09:31:04.113]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.077]   - Field: ‘globals’
[09:31:04.114]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.077]   - Field: ‘stdout’
[09:31:04.114]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.078]   - Field: ‘earlySignal’
[09:31:04.114]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.078]   - Field: ‘lazy’
[09:31:04.114]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.078]   - Field: ‘state’
[09:31:04.114]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.078] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:04.114]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.078] - Launch lazy future ...
[09:31:04.114]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.079] Packages needed by the future expression (n = 0): <none>
[09:31:04.115]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.079] Packages needed by future strategies (n = 0): <none>
[09:31:04.115]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.080] {
[09:31:04.080]     {
[09:31:04.080]         {
[09:31:04.080]             ...future.startTime <- base::Sys.time()
[09:31:04.080]             {
[09:31:04.080]                 {
[09:31:04.080]                   {
[09:31:04.080]                     base::local({
[09:31:04.080]                       has_future <- base::requireNamespace("future", 
[09:31:04.080]                         quietly = TRUE)
[09:31:04.080]                       if (has_future) {
[09:31:04.080]                         ns <- base::getNamespace("future")
[09:31:04.080]                         version <- ns[[".package"]][["version"]]
[09:31:04.080]                         if (is.null(version)) 
[09:31:04.080]                           version <- utils::packageVersion("future")
[09:31:04.080]                       }
[09:31:04.080]                       else {
[09:31:04.080]                         version <- NULL
[09:31:04.080]                       }
[09:31:04.080]                       if (!has_future || version < "1.8.0") {
[09:31:04.080]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:04.080]                           "", base::R.version$version.string), 
[09:31:04.080]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:04.080]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:04.080]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:04.080]                             "release", "version")], collapse = " "), 
[09:31:04.080]                           hostname = base::Sys.info()[["nodename"]])
[09:31:04.080]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:04.080]                           info)
[09:31:04.080]                         info <- base::paste(info, collapse = "; ")
[09:31:04.080]                         if (!has_future) {
[09:31:04.080]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:04.080]                             info)
[09:31:04.080]                         }
[09:31:04.080]                         else {
[09:31:04.080]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:04.080]                             info, version)
[09:31:04.080]                         }
[09:31:04.080]                         base::stop(msg)
[09:31:04.080]                       }
[09:31:04.080]                     })
[09:31:04.080]                   }
[09:31:04.080]                   ...future.strategy.old <- future::plan("list")
[09:31:04.080]                   options(future.plan = NULL)
[09:31:04.080]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.080]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:04.080]                 }
[09:31:04.080]                 ...future.workdir <- getwd()
[09:31:04.080]             }
[09:31:04.080]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:04.080]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:04.080]         }
[09:31:04.080]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:04.080]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:04.080]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:04.080]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:04.080]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:04.080]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:04.080]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:04.080]             base::names(...future.oldOptions))
[09:31:04.080]     }
[09:31:04.080]     if (FALSE) {
[09:31:04.080]     }
[09:31:04.080]     else {
[09:31:04.080]         if (TRUE) {
[09:31:04.080]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:04.080]                 open = "w")
[09:31:04.080]         }
[09:31:04.080]         else {
[09:31:04.080]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:04.080]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:04.080]         }
[09:31:04.080]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:04.080]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:04.080]             base::sink(type = "output", split = FALSE)
[09:31:04.080]             base::close(...future.stdout)
[09:31:04.080]         }, add = TRUE)
[09:31:04.080]     }
[09:31:04.080]     ...future.frame <- base::sys.nframe()
[09:31:04.080]     ...future.conditions <- base::list()
[09:31:04.080]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:04.080]     if (FALSE) {
[09:31:04.080]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:04.080]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:04.080]     }
[09:31:04.080]     ...future.result <- base::tryCatch({
[09:31:04.080]         base::withCallingHandlers({
[09:31:04.080]             ...future.value <- base::withVisible(base::local(2))
[09:31:04.080]             future::FutureResult(value = ...future.value$value, 
[09:31:04.080]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.080]                   ...future.rng), globalenv = if (FALSE) 
[09:31:04.080]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:04.080]                     ...future.globalenv.names))
[09:31:04.080]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:04.080]         }, condition = base::local({
[09:31:04.080]             c <- base::c
[09:31:04.080]             inherits <- base::inherits
[09:31:04.080]             invokeRestart <- base::invokeRestart
[09:31:04.080]             length <- base::length
[09:31:04.080]             list <- base::list
[09:31:04.080]             seq.int <- base::seq.int
[09:31:04.080]             signalCondition <- base::signalCondition
[09:31:04.080]             sys.calls <- base::sys.calls
[09:31:04.080]             `[[` <- base::`[[`
[09:31:04.080]             `+` <- base::`+`
[09:31:04.080]             `<<-` <- base::`<<-`
[09:31:04.080]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:04.080]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:04.080]                   3L)]
[09:31:04.080]             }
[09:31:04.080]             function(cond) {
[09:31:04.080]                 is_error <- inherits(cond, "error")
[09:31:04.080]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:04.080]                   NULL)
[09:31:04.080]                 if (is_error) {
[09:31:04.080]                   sessionInformation <- function() {
[09:31:04.080]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:04.080]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:04.080]                       search = base::search(), system = base::Sys.info())
[09:31:04.080]                   }
[09:31:04.080]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.080]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:04.080]                     cond$call), session = sessionInformation(), 
[09:31:04.080]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:04.080]                   signalCondition(cond)
[09:31:04.080]                 }
[09:31:04.080]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:04.080]                 "immediateCondition"))) {
[09:31:04.080]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:04.080]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.080]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:04.080]                   if (TRUE && !signal) {
[09:31:04.080]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.080]                     {
[09:31:04.080]                       inherits <- base::inherits
[09:31:04.080]                       invokeRestart <- base::invokeRestart
[09:31:04.080]                       is.null <- base::is.null
[09:31:04.080]                       muffled <- FALSE
[09:31:04.080]                       if (inherits(cond, "message")) {
[09:31:04.080]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.080]                         if (muffled) 
[09:31:04.080]                           invokeRestart("muffleMessage")
[09:31:04.080]                       }
[09:31:04.080]                       else if (inherits(cond, "warning")) {
[09:31:04.080]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.080]                         if (muffled) 
[09:31:04.080]                           invokeRestart("muffleWarning")
[09:31:04.080]                       }
[09:31:04.080]                       else if (inherits(cond, "condition")) {
[09:31:04.080]                         if (!is.null(pattern)) {
[09:31:04.080]                           computeRestarts <- base::computeRestarts
[09:31:04.080]                           grepl <- base::grepl
[09:31:04.080]                           restarts <- computeRestarts(cond)
[09:31:04.080]                           for (restart in restarts) {
[09:31:04.080]                             name <- restart$name
[09:31:04.080]                             if (is.null(name)) 
[09:31:04.080]                               next
[09:31:04.080]                             if (!grepl(pattern, name)) 
[09:31:04.080]                               next
[09:31:04.080]                             invokeRestart(restart)
[09:31:04.080]                             muffled <- TRUE
[09:31:04.080]                             break
[09:31:04.080]                           }
[09:31:04.080]                         }
[09:31:04.080]                       }
[09:31:04.080]                       invisible(muffled)
[09:31:04.080]                     }
[09:31:04.080]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.080]                   }
[09:31:04.080]                 }
[09:31:04.080]                 else {
[09:31:04.080]                   if (TRUE) {
[09:31:04.080]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.080]                     {
[09:31:04.080]                       inherits <- base::inherits
[09:31:04.080]                       invokeRestart <- base::invokeRestart
[09:31:04.080]                       is.null <- base::is.null
[09:31:04.080]                       muffled <- FALSE
[09:31:04.080]                       if (inherits(cond, "message")) {
[09:31:04.080]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.080]                         if (muffled) 
[09:31:04.080]                           invokeRestart("muffleMessage")
[09:31:04.080]                       }
[09:31:04.080]                       else if (inherits(cond, "warning")) {
[09:31:04.080]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.080]                         if (muffled) 
[09:31:04.080]                           invokeRestart("muffleWarning")
[09:31:04.080]                       }
[09:31:04.080]                       else if (inherits(cond, "condition")) {
[09:31:04.080]                         if (!is.null(pattern)) {
[09:31:04.080]                           computeRestarts <- base::computeRestarts
[09:31:04.080]                           grepl <- base::grepl
[09:31:04.080]                           restarts <- computeRestarts(cond)
[09:31:04.080]                           for (restart in restarts) {
[09:31:04.080]                             name <- restart$name
[09:31:04.080]                             if (is.null(name)) 
[09:31:04.080]                               next
[09:31:04.080]                             if (!grepl(pattern, name)) 
[09:31:04.080]                               next
[09:31:04.080]                             invokeRestart(restart)
[09:31:04.080]                             muffled <- TRUE
[09:31:04.080]                             break
[09:31:04.080]                           }
[09:31:04.080]                         }
[09:31:04.080]                       }
[09:31:04.080]                       invisible(muffled)
[09:31:04.080]                     }
[09:31:04.080]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.080]                   }
[09:31:04.080]                 }
[09:31:04.080]             }
[09:31:04.080]         }))
[09:31:04.080]     }, error = function(ex) {
[09:31:04.080]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:04.080]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.080]                 ...future.rng), started = ...future.startTime, 
[09:31:04.080]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:04.080]             version = "1.8"), class = "FutureResult")
[09:31:04.080]     }, finally = {
[09:31:04.080]         if (!identical(...future.workdir, getwd())) 
[09:31:04.080]             setwd(...future.workdir)
[09:31:04.080]         {
[09:31:04.080]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:04.080]                 ...future.oldOptions$nwarnings <- NULL
[09:31:04.080]             }
[09:31:04.080]             base::options(...future.oldOptions)
[09:31:04.080]             if (.Platform$OS.type == "windows") {
[09:31:04.080]                 old_names <- names(...future.oldEnvVars)
[09:31:04.080]                 envs <- base::Sys.getenv()
[09:31:04.080]                 names <- names(envs)
[09:31:04.080]                 common <- intersect(names, old_names)
[09:31:04.080]                 added <- setdiff(names, old_names)
[09:31:04.080]                 removed <- setdiff(old_names, names)
[09:31:04.080]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:04.080]                   envs[common]]
[09:31:04.080]                 NAMES <- toupper(changed)
[09:31:04.080]                 args <- list()
[09:31:04.080]                 for (kk in seq_along(NAMES)) {
[09:31:04.080]                   name <- changed[[kk]]
[09:31:04.080]                   NAME <- NAMES[[kk]]
[09:31:04.080]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.080]                     next
[09:31:04.080]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.080]                 }
[09:31:04.080]                 NAMES <- toupper(added)
[09:31:04.080]                 for (kk in seq_along(NAMES)) {
[09:31:04.080]                   name <- added[[kk]]
[09:31:04.080]                   NAME <- NAMES[[kk]]
[09:31:04.080]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.080]                     next
[09:31:04.080]                   args[[name]] <- ""
[09:31:04.080]                 }
[09:31:04.080]                 NAMES <- toupper(removed)
[09:31:04.080]                 for (kk in seq_along(NAMES)) {
[09:31:04.080]                   name <- removed[[kk]]
[09:31:04.080]                   NAME <- NAMES[[kk]]
[09:31:04.080]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.080]                     next
[09:31:04.080]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.080]                 }
[09:31:04.080]                 if (length(args) > 0) 
[09:31:04.080]                   base::do.call(base::Sys.setenv, args = args)
[09:31:04.080]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:04.080]             }
[09:31:04.080]             else {
[09:31:04.080]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:04.080]             }
[09:31:04.080]             {
[09:31:04.080]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:04.080]                   0L) {
[09:31:04.080]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:04.080]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:04.080]                   base::options(opts)
[09:31:04.080]                 }
[09:31:04.080]                 {
[09:31:04.080]                   {
[09:31:04.080]                     NULL
[09:31:04.080]                     RNGkind("Mersenne-Twister")
[09:31:04.080]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:04.080]                       inherits = FALSE)
[09:31:04.080]                   }
[09:31:04.080]                   options(future.plan = NULL)
[09:31:04.080]                   if (is.na(NA_character_)) 
[09:31:04.080]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.080]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:04.080]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:04.080]                     .init = FALSE)
[09:31:04.080]                 }
[09:31:04.080]             }
[09:31:04.080]         }
[09:31:04.080]     })
[09:31:04.080]     if (TRUE) {
[09:31:04.080]         base::sink(type = "output", split = FALSE)
[09:31:04.080]         if (TRUE) {
[09:31:04.080]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:04.080]         }
[09:31:04.080]         else {
[09:31:04.080]             ...future.result["stdout"] <- base::list(NULL)
[09:31:04.080]         }
[09:31:04.080]         base::close(...future.stdout)
[09:31:04.080]         ...future.stdout <- NULL
[09:31:04.080]     }
[09:31:04.080]     ...future.result$conditions <- ...future.conditions
[09:31:04.080]     ...future.result$finished <- base::Sys.time()
[09:31:04.080]     ...future.result
[09:31:04.080] }
[09:31:04.115]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.082] plan(): Setting new future strategy stack:
[09:31:04.115]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.082] List of future strategies:
[09:31:04.082] 1. sequential:
[09:31:04.082]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:04.082]    - tweaked: FALSE
[09:31:04.082]    - call: NULL
[09:31:04.115]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.083] plan(): nbrOfWorkers() = 1
[09:31:04.115]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.084] plan(): Setting new future strategy stack:
[09:31:04.116]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.084] List of future strategies:
[09:31:04.084] 1. sequential:
[09:31:04.084]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:04.084]    - tweaked: FALSE
[09:31:04.084]    - call: NULL
[09:31:04.116]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.085] plan(): nbrOfWorkers() = 1
[09:31:04.116]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.085] SequentialFuture started (and completed)
[09:31:04.116]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.085] - Launch lazy future ... done
[09:31:04.116]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.085] run() for ‘SequentialFuture’ ... done
[09:31:04.116]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.086] getGlobalsAndPackages() ...
[09:31:04.117]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.086] Searching for globals...
[09:31:04.117]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.086] 
[09:31:04.117]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.086] Searching for globals ... DONE
[09:31:04.117]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.087] - globals: [0] <none>
[09:31:04.117]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.087] getGlobalsAndPackages() ... DONE
[09:31:04.117]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.087] run() for ‘Future’ ...
[09:31:04.118]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.087] - state: ‘created’
[09:31:04.118]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.087] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:04.118]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.088] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:04.118]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.088] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:04.118]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.088]   - Field: ‘label’
[09:31:04.118]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.088]   - Field: ‘local’
[09:31:04.119]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.089]   - Field: ‘owner’
[09:31:04.119]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.089]   - Field: ‘envir’
[09:31:04.119]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.089]   - Field: ‘packages’
[09:31:04.119]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.089]   - Field: ‘gc’
[09:31:04.119]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.089]   - Field: ‘conditions’
[09:31:04.119]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.089]   - Field: ‘expr’
[09:31:04.119]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.090]   - Field: ‘uuid’
[09:31:04.120]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.090]   - Field: ‘seed’
[09:31:04.120]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.090]   - Field: ‘version’
[09:31:04.120]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.090]   - Field: ‘result’
[09:31:04.120]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.090]   - Field: ‘asynchronous’
[09:31:04.120]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.090]   - Field: ‘calls’
[09:31:04.120]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.090]   - Field: ‘globals’
[09:31:04.121]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.091]   - Field: ‘stdout’
[09:31:04.121]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.091]   - Field: ‘earlySignal’
[09:31:04.121]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.091]   - Field: ‘lazy’
[09:31:04.121]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.091]   - Field: ‘state’
[09:31:04.121]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.091] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:04.121]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.091] - Launch lazy future ...
[09:31:04.121]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.092] Packages needed by the future expression (n = 0): <none>
[09:31:04.122]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.092] Packages needed by future strategies (n = 0): <none>
[09:31:04.122]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.093] {
[09:31:04.093]     {
[09:31:04.093]         {
[09:31:04.093]             ...future.startTime <- base::Sys.time()
[09:31:04.093]             {
[09:31:04.093]                 {
[09:31:04.093]                   {
[09:31:04.093]                     base::local({
[09:31:04.093]                       has_future <- base::requireNamespace("future", 
[09:31:04.093]                         quietly = TRUE)
[09:31:04.093]                       if (has_future) {
[09:31:04.093]                         ns <- base::getNamespace("future")
[09:31:04.093]                         version <- ns[[".package"]][["version"]]
[09:31:04.093]                         if (is.null(version)) 
[09:31:04.093]                           version <- utils::packageVersion("future")
[09:31:04.093]                       }
[09:31:04.093]                       else {
[09:31:04.093]                         version <- NULL
[09:31:04.093]                       }
[09:31:04.093]                       if (!has_future || version < "1.8.0") {
[09:31:04.093]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:04.093]                           "", base::R.version$version.string), 
[09:31:04.093]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:04.093]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:04.093]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:04.093]                             "release", "version")], collapse = " "), 
[09:31:04.093]                           hostname = base::Sys.info()[["nodename"]])
[09:31:04.093]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:04.093]                           info)
[09:31:04.093]                         info <- base::paste(info, collapse = "; ")
[09:31:04.093]                         if (!has_future) {
[09:31:04.093]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:04.093]                             info)
[09:31:04.093]                         }
[09:31:04.093]                         else {
[09:31:04.093]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:04.093]                             info, version)
[09:31:04.093]                         }
[09:31:04.093]                         base::stop(msg)
[09:31:04.093]                       }
[09:31:04.093]                     })
[09:31:04.093]                   }
[09:31:04.093]                   ...future.strategy.old <- future::plan("list")
[09:31:04.093]                   options(future.plan = NULL)
[09:31:04.093]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.093]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:04.093]                 }
[09:31:04.093]                 ...future.workdir <- getwd()
[09:31:04.093]             }
[09:31:04.093]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:04.093]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:04.093]         }
[09:31:04.093]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:04.093]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:04.093]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:04.093]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:04.093]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:04.093]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:04.093]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:04.093]             base::names(...future.oldOptions))
[09:31:04.093]     }
[09:31:04.093]     if (FALSE) {
[09:31:04.093]     }
[09:31:04.093]     else {
[09:31:04.093]         if (TRUE) {
[09:31:04.093]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:04.093]                 open = "w")
[09:31:04.093]         }
[09:31:04.093]         else {
[09:31:04.093]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:04.093]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:04.093]         }
[09:31:04.093]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:04.093]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:04.093]             base::sink(type = "output", split = FALSE)
[09:31:04.093]             base::close(...future.stdout)
[09:31:04.093]         }, add = TRUE)
[09:31:04.093]     }
[09:31:04.093]     ...future.frame <- base::sys.nframe()
[09:31:04.093]     ...future.conditions <- base::list()
[09:31:04.093]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:04.093]     if (FALSE) {
[09:31:04.093]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:04.093]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:04.093]     }
[09:31:04.093]     ...future.result <- base::tryCatch({
[09:31:04.093]         base::withCallingHandlers({
[09:31:04.093]             ...future.value <- base::withVisible(base::local(4))
[09:31:04.093]             future::FutureResult(value = ...future.value$value, 
[09:31:04.093]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.093]                   ...future.rng), globalenv = if (FALSE) 
[09:31:04.093]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:04.093]                     ...future.globalenv.names))
[09:31:04.093]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:04.093]         }, condition = base::local({
[09:31:04.093]             c <- base::c
[09:31:04.093]             inherits <- base::inherits
[09:31:04.093]             invokeRestart <- base::invokeRestart
[09:31:04.093]             length <- base::length
[09:31:04.093]             list <- base::list
[09:31:04.093]             seq.int <- base::seq.int
[09:31:04.093]             signalCondition <- base::signalCondition
[09:31:04.093]             sys.calls <- base::sys.calls
[09:31:04.093]             `[[` <- base::`[[`
[09:31:04.093]             `+` <- base::`+`
[09:31:04.093]             `<<-` <- base::`<<-`
[09:31:04.093]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:04.093]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:04.093]                   3L)]
[09:31:04.093]             }
[09:31:04.093]             function(cond) {
[09:31:04.093]                 is_error <- inherits(cond, "error")
[09:31:04.093]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:04.093]                   NULL)
[09:31:04.093]                 if (is_error) {
[09:31:04.093]                   sessionInformation <- function() {
[09:31:04.093]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:04.093]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:04.093]                       search = base::search(), system = base::Sys.info())
[09:31:04.093]                   }
[09:31:04.093]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.093]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:04.093]                     cond$call), session = sessionInformation(), 
[09:31:04.093]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:04.093]                   signalCondition(cond)
[09:31:04.093]                 }
[09:31:04.093]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:04.093]                 "immediateCondition"))) {
[09:31:04.093]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:04.093]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.093]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:04.093]                   if (TRUE && !signal) {
[09:31:04.093]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.093]                     {
[09:31:04.093]                       inherits <- base::inherits
[09:31:04.093]                       invokeRestart <- base::invokeRestart
[09:31:04.093]                       is.null <- base::is.null
[09:31:04.093]                       muffled <- FALSE
[09:31:04.093]                       if (inherits(cond, "message")) {
[09:31:04.093]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.093]                         if (muffled) 
[09:31:04.093]                           invokeRestart("muffleMessage")
[09:31:04.093]                       }
[09:31:04.093]                       else if (inherits(cond, "warning")) {
[09:31:04.093]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.093]                         if (muffled) 
[09:31:04.093]                           invokeRestart("muffleWarning")
[09:31:04.093]                       }
[09:31:04.093]                       else if (inherits(cond, "condition")) {
[09:31:04.093]                         if (!is.null(pattern)) {
[09:31:04.093]                           computeRestarts <- base::computeRestarts
[09:31:04.093]                           grepl <- base::grepl
[09:31:04.093]                           restarts <- computeRestarts(cond)
[09:31:04.093]                           for (restart in restarts) {
[09:31:04.093]                             name <- restart$name
[09:31:04.093]                             if (is.null(name)) 
[09:31:04.093]                               next
[09:31:04.093]                             if (!grepl(pattern, name)) 
[09:31:04.093]                               next
[09:31:04.093]                             invokeRestart(restart)
[09:31:04.093]                             muffled <- TRUE
[09:31:04.093]                             break
[09:31:04.093]                           }
[09:31:04.093]                         }
[09:31:04.093]                       }
[09:31:04.093]                       invisible(muffled)
[09:31:04.093]                     }
[09:31:04.093]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.093]                   }
[09:31:04.093]                 }
[09:31:04.093]                 else {
[09:31:04.093]                   if (TRUE) {
[09:31:04.093]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.093]                     {
[09:31:04.093]                       inherits <- base::inherits
[09:31:04.093]                       invokeRestart <- base::invokeRestart
[09:31:04.093]                       is.null <- base::is.null
[09:31:04.093]                       muffled <- FALSE
[09:31:04.093]                       if (inherits(cond, "message")) {
[09:31:04.093]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.093]                         if (muffled) 
[09:31:04.093]                           invokeRestart("muffleMessage")
[09:31:04.093]                       }
[09:31:04.093]                       else if (inherits(cond, "warning")) {
[09:31:04.093]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.093]                         if (muffled) 
[09:31:04.093]                           invokeRestart("muffleWarning")
[09:31:04.093]                       }
[09:31:04.093]                       else if (inherits(cond, "condition")) {
[09:31:04.093]                         if (!is.null(pattern)) {
[09:31:04.093]                           computeRestarts <- base::computeRestarts
[09:31:04.093]                           grepl <- base::grepl
[09:31:04.093]                           restarts <- computeRestarts(cond)
[09:31:04.093]                           for (restart in restarts) {
[09:31:04.093]                             name <- restart$name
[09:31:04.093]                             if (is.null(name)) 
[09:31:04.093]                               next
[09:31:04.093]                             if (!grepl(pattern, name)) 
[09:31:04.093]                               next
[09:31:04.093]                             invokeRestart(restart)
[09:31:04.093]                             muffled <- TRUE
[09:31:04.093]                             break
[09:31:04.093]                           }
[09:31:04.093]                         }
[09:31:04.093]                       }
[09:31:04.093]                       invisible(muffled)
[09:31:04.093]                     }
[09:31:04.093]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.093]                   }
[09:31:04.093]                 }
[09:31:04.093]             }
[09:31:04.093]         }))
[09:31:04.093]     }, error = function(ex) {
[09:31:04.093]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:04.093]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.093]                 ...future.rng), started = ...future.startTime, 
[09:31:04.093]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:04.093]             version = "1.8"), class = "FutureResult")
[09:31:04.093]     }, finally = {
[09:31:04.093]         if (!identical(...future.workdir, getwd())) 
[09:31:04.093]             setwd(...future.workdir)
[09:31:04.093]         {
[09:31:04.093]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:04.093]                 ...future.oldOptions$nwarnings <- NULL
[09:31:04.093]             }
[09:31:04.093]             base::options(...future.oldOptions)
[09:31:04.093]             if (.Platform$OS.type == "windows") {
[09:31:04.093]                 old_names <- names(...future.oldEnvVars)
[09:31:04.093]                 envs <- base::Sys.getenv()
[09:31:04.093]                 names <- names(envs)
[09:31:04.093]                 common <- intersect(names, old_names)
[09:31:04.093]                 added <- setdiff(names, old_names)
[09:31:04.093]                 removed <- setdiff(old_names, names)
[09:31:04.093]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:04.093]                   envs[common]]
[09:31:04.093]                 NAMES <- toupper(changed)
[09:31:04.093]                 args <- list()
[09:31:04.093]                 for (kk in seq_along(NAMES)) {
[09:31:04.093]                   name <- changed[[kk]]
[09:31:04.093]                   NAME <- NAMES[[kk]]
[09:31:04.093]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.093]                     next
[09:31:04.093]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.093]                 }
[09:31:04.093]                 NAMES <- toupper(added)
[09:31:04.093]                 for (kk in seq_along(NAMES)) {
[09:31:04.093]                   name <- added[[kk]]
[09:31:04.093]                   NAME <- NAMES[[kk]]
[09:31:04.093]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.093]                     next
[09:31:04.093]                   args[[name]] <- ""
[09:31:04.093]                 }
[09:31:04.093]                 NAMES <- toupper(removed)
[09:31:04.093]                 for (kk in seq_along(NAMES)) {
[09:31:04.093]                   name <- removed[[kk]]
[09:31:04.093]                   NAME <- NAMES[[kk]]
[09:31:04.093]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.093]                     next
[09:31:04.093]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.093]                 }
[09:31:04.093]                 if (length(args) > 0) 
[09:31:04.093]                   base::do.call(base::Sys.setenv, args = args)
[09:31:04.093]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:04.093]             }
[09:31:04.093]             else {
[09:31:04.093]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:04.093]             }
[09:31:04.093]             {
[09:31:04.093]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:04.093]                   0L) {
[09:31:04.093]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:04.093]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:04.093]                   base::options(opts)
[09:31:04.093]                 }
[09:31:04.093]                 {
[09:31:04.093]                   {
[09:31:04.093]                     NULL
[09:31:04.093]                     RNGkind("Mersenne-Twister")
[09:31:04.093]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:04.093]                       inherits = FALSE)
[09:31:04.093]                   }
[09:31:04.093]                   options(future.plan = NULL)
[09:31:04.093]                   if (is.na(NA_character_)) 
[09:31:04.093]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.093]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:04.093]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:04.093]                     .init = FALSE)
[09:31:04.093]                 }
[09:31:04.093]             }
[09:31:04.093]         }
[09:31:04.093]     })
[09:31:04.093]     if (TRUE) {
[09:31:04.093]         base::sink(type = "output", split = FALSE)
[09:31:04.093]         if (TRUE) {
[09:31:04.093]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:04.093]         }
[09:31:04.093]         else {
[09:31:04.093]             ...future.result["stdout"] <- base::list(NULL)
[09:31:04.093]         }
[09:31:04.093]         base::close(...future.stdout)
[09:31:04.093]         ...future.stdout <- NULL
[09:31:04.093]     }
[09:31:04.093]     ...future.result$conditions <- ...future.conditions
[09:31:04.093]     ...future.result$finished <- base::Sys.time()
[09:31:04.093]     ...future.result
[09:31:04.093] }
[09:31:04.122]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.095] plan(): Setting new future strategy stack:
[09:31:04.122]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.095] List of future strategies:
[09:31:04.095] 1. sequential:
[09:31:04.095]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:04.095]    - tweaked: FALSE
[09:31:04.095]    - call: NULL
[09:31:04.122]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.095] plan(): nbrOfWorkers() = 1
[09:31:04.122]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.096] plan(): Setting new future strategy stack:
[09:31:04.123]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.096] List of future strategies:
[09:31:04.096] 1. sequential:
[09:31:04.096]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:04.096]    - tweaked: FALSE
[09:31:04.096]    - call: NULL
[09:31:04.123]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.097] plan(): nbrOfWorkers() = 1
[09:31:04.123]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.097] SequentialFuture started (and completed)
[09:31:04.123]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.097] - Launch lazy future ... done
[09:31:04.123]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:04.098] run() for ‘SequentialFuture’ ... done
[09:31:04.123] signalConditions() ... done
a = 10
[09:31:04.124] getGlobalsAndPackages() ...
[09:31:04.124] Searching for globals...
[09:31:04.125] - globals found: [3] ‘{’, ‘+’, ‘a’
[09:31:04.125] Searching for globals ... DONE
[09:31:04.125] Resolving globals: FALSE
[09:31:04.126] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:04.126] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:04.126] - globals: [1] ‘a’
[09:31:04.126] 
[09:31:04.127] getGlobalsAndPackages() ... DONE
[09:31:04.127] run() for ‘Future’ ...
[09:31:04.127] - state: ‘created’
[09:31:04.127] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:04.133] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:04.133] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:04.133]   - Field: ‘label’
[09:31:04.133]   - Field: ‘local’
[09:31:04.133]   - Field: ‘owner’
[09:31:04.133]   - Field: ‘envir’
[09:31:04.134]   - Field: ‘workers’
[09:31:04.134]   - Field: ‘packages’
[09:31:04.134]   - Field: ‘gc’
[09:31:04.134]   - Field: ‘job’
[09:31:04.134]   - Field: ‘conditions’
[09:31:04.134]   - Field: ‘expr’
[09:31:04.134]   - Field: ‘uuid’
[09:31:04.134]   - Field: ‘seed’
[09:31:04.134]   - Field: ‘version’
[09:31:04.134]   - Field: ‘result’
[09:31:04.134]   - Field: ‘asynchronous’
[09:31:04.135]   - Field: ‘calls’
[09:31:04.135]   - Field: ‘globals’
[09:31:04.135]   - Field: ‘stdout’
[09:31:04.135]   - Field: ‘earlySignal’
[09:31:04.135]   - Field: ‘lazy’
[09:31:04.135]   - Field: ‘state’
[09:31:04.135] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:04.135] - Launch lazy future ...
[09:31:04.136] Packages needed by the future expression (n = 0): <none>
[09:31:04.136] Packages needed by future strategies (n = 0): <none>
[09:31:04.136] {
[09:31:04.136]     {
[09:31:04.136]         {
[09:31:04.136]             ...future.startTime <- base::Sys.time()
[09:31:04.136]             {
[09:31:04.136]                 {
[09:31:04.136]                   {
[09:31:04.136]                     {
[09:31:04.136]                       base::local({
[09:31:04.136]                         has_future <- base::requireNamespace("future", 
[09:31:04.136]                           quietly = TRUE)
[09:31:04.136]                         if (has_future) {
[09:31:04.136]                           ns <- base::getNamespace("future")
[09:31:04.136]                           version <- ns[[".package"]][["version"]]
[09:31:04.136]                           if (is.null(version)) 
[09:31:04.136]                             version <- utils::packageVersion("future")
[09:31:04.136]                         }
[09:31:04.136]                         else {
[09:31:04.136]                           version <- NULL
[09:31:04.136]                         }
[09:31:04.136]                         if (!has_future || version < "1.8.0") {
[09:31:04.136]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:04.136]                             "", base::R.version$version.string), 
[09:31:04.136]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:04.136]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:04.136]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:04.136]                               "release", "version")], collapse = " "), 
[09:31:04.136]                             hostname = base::Sys.info()[["nodename"]])
[09:31:04.136]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:04.136]                             info)
[09:31:04.136]                           info <- base::paste(info, collapse = "; ")
[09:31:04.136]                           if (!has_future) {
[09:31:04.136]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:04.136]                               info)
[09:31:04.136]                           }
[09:31:04.136]                           else {
[09:31:04.136]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:04.136]                               info, version)
[09:31:04.136]                           }
[09:31:04.136]                           base::stop(msg)
[09:31:04.136]                         }
[09:31:04.136]                       })
[09:31:04.136]                     }
[09:31:04.136]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:04.136]                     base::options(mc.cores = 1L)
[09:31:04.136]                   }
[09:31:04.136]                   ...future.strategy.old <- future::plan("list")
[09:31:04.136]                   options(future.plan = NULL)
[09:31:04.136]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.136]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:04.136]                 }
[09:31:04.136]                 ...future.workdir <- getwd()
[09:31:04.136]             }
[09:31:04.136]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:04.136]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:04.136]         }
[09:31:04.136]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:04.136]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:04.136]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:04.136]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:04.136]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:04.136]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:04.136]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:04.136]             base::names(...future.oldOptions))
[09:31:04.136]     }
[09:31:04.136]     if (FALSE) {
[09:31:04.136]     }
[09:31:04.136]     else {
[09:31:04.136]         if (TRUE) {
[09:31:04.136]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:04.136]                 open = "w")
[09:31:04.136]         }
[09:31:04.136]         else {
[09:31:04.136]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:04.136]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:04.136]         }
[09:31:04.136]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:04.136]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:04.136]             base::sink(type = "output", split = FALSE)
[09:31:04.136]             base::close(...future.stdout)
[09:31:04.136]         }, add = TRUE)
[09:31:04.136]     }
[09:31:04.136]     ...future.frame <- base::sys.nframe()
[09:31:04.136]     ...future.conditions <- base::list()
[09:31:04.136]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:04.136]     if (FALSE) {
[09:31:04.136]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:04.136]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:04.136]     }
[09:31:04.136]     ...future.result <- base::tryCatch({
[09:31:04.136]         base::withCallingHandlers({
[09:31:04.136]             ...future.value <- base::withVisible(base::local({
[09:31:04.136]                 withCallingHandlers({
[09:31:04.136]                   {
[09:31:04.136]                     a + 1
[09:31:04.136]                   }
[09:31:04.136]                 }, immediateCondition = function(cond) {
[09:31:04.136]                   save_rds <- function (object, pathname, ...) 
[09:31:04.136]                   {
[09:31:04.136]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:04.136]                     if (file_test("-f", pathname_tmp)) {
[09:31:04.136]                       fi_tmp <- file.info(pathname_tmp)
[09:31:04.136]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:04.136]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:04.136]                         fi_tmp[["mtime"]])
[09:31:04.136]                     }
[09:31:04.136]                     tryCatch({
[09:31:04.136]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:04.136]                     }, error = function(ex) {
[09:31:04.136]                       msg <- conditionMessage(ex)
[09:31:04.136]                       fi_tmp <- file.info(pathname_tmp)
[09:31:04.136]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:04.136]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:04.136]                         fi_tmp[["mtime"]], msg)
[09:31:04.136]                       ex$message <- msg
[09:31:04.136]                       stop(ex)
[09:31:04.136]                     })
[09:31:04.136]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:04.136]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:04.136]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:04.136]                       fi_tmp <- file.info(pathname_tmp)
[09:31:04.136]                       fi <- file.info(pathname)
[09:31:04.136]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:04.136]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:04.136]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:04.136]                         fi[["size"]], fi[["mtime"]])
[09:31:04.136]                       stop(msg)
[09:31:04.136]                     }
[09:31:04.136]                     invisible(pathname)
[09:31:04.136]                   }
[09:31:04.136]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:04.136]                     rootPath = tempdir()) 
[09:31:04.136]                   {
[09:31:04.136]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:04.136]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:04.136]                       tmpdir = path, fileext = ".rds")
[09:31:04.136]                     save_rds(obj, file)
[09:31:04.136]                   }
[09:31:04.136]                   saveImmediateCondition(cond, path = "/tmp/RtmpgspuSi/.future/immediateConditions")
[09:31:04.136]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.136]                   {
[09:31:04.136]                     inherits <- base::inherits
[09:31:04.136]                     invokeRestart <- base::invokeRestart
[09:31:04.136]                     is.null <- base::is.null
[09:31:04.136]                     muffled <- FALSE
[09:31:04.136]                     if (inherits(cond, "message")) {
[09:31:04.136]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:04.136]                       if (muffled) 
[09:31:04.136]                         invokeRestart("muffleMessage")
[09:31:04.136]                     }
[09:31:04.136]                     else if (inherits(cond, "warning")) {
[09:31:04.136]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:04.136]                       if (muffled) 
[09:31:04.136]                         invokeRestart("muffleWarning")
[09:31:04.136]                     }
[09:31:04.136]                     else if (inherits(cond, "condition")) {
[09:31:04.136]                       if (!is.null(pattern)) {
[09:31:04.136]                         computeRestarts <- base::computeRestarts
[09:31:04.136]                         grepl <- base::grepl
[09:31:04.136]                         restarts <- computeRestarts(cond)
[09:31:04.136]                         for (restart in restarts) {
[09:31:04.136]                           name <- restart$name
[09:31:04.136]                           if (is.null(name)) 
[09:31:04.136]                             next
[09:31:04.136]                           if (!grepl(pattern, name)) 
[09:31:04.136]                             next
[09:31:04.136]                           invokeRestart(restart)
[09:31:04.136]                           muffled <- TRUE
[09:31:04.136]                           break
[09:31:04.136]                         }
[09:31:04.136]                       }
[09:31:04.136]                     }
[09:31:04.136]                     invisible(muffled)
[09:31:04.136]                   }
[09:31:04.136]                   muffleCondition(cond)
[09:31:04.136]                 })
[09:31:04.136]             }))
[09:31:04.136]             future::FutureResult(value = ...future.value$value, 
[09:31:04.136]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.136]                   ...future.rng), globalenv = if (FALSE) 
[09:31:04.136]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:04.136]                     ...future.globalenv.names))
[09:31:04.136]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:04.136]         }, condition = base::local({
[09:31:04.136]             c <- base::c
[09:31:04.136]             inherits <- base::inherits
[09:31:04.136]             invokeRestart <- base::invokeRestart
[09:31:04.136]             length <- base::length
[09:31:04.136]             list <- base::list
[09:31:04.136]             seq.int <- base::seq.int
[09:31:04.136]             signalCondition <- base::signalCondition
[09:31:04.136]             sys.calls <- base::sys.calls
[09:31:04.136]             `[[` <- base::`[[`
[09:31:04.136]             `+` <- base::`+`
[09:31:04.136]             `<<-` <- base::`<<-`
[09:31:04.136]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:04.136]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:04.136]                   3L)]
[09:31:04.136]             }
[09:31:04.136]             function(cond) {
[09:31:04.136]                 is_error <- inherits(cond, "error")
[09:31:04.136]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:04.136]                   NULL)
[09:31:04.136]                 if (is_error) {
[09:31:04.136]                   sessionInformation <- function() {
[09:31:04.136]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:04.136]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:04.136]                       search = base::search(), system = base::Sys.info())
[09:31:04.136]                   }
[09:31:04.136]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.136]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:04.136]                     cond$call), session = sessionInformation(), 
[09:31:04.136]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:04.136]                   signalCondition(cond)
[09:31:04.136]                 }
[09:31:04.136]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:04.136]                 "immediateCondition"))) {
[09:31:04.136]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:04.136]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.136]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:04.136]                   if (TRUE && !signal) {
[09:31:04.136]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.136]                     {
[09:31:04.136]                       inherits <- base::inherits
[09:31:04.136]                       invokeRestart <- base::invokeRestart
[09:31:04.136]                       is.null <- base::is.null
[09:31:04.136]                       muffled <- FALSE
[09:31:04.136]                       if (inherits(cond, "message")) {
[09:31:04.136]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.136]                         if (muffled) 
[09:31:04.136]                           invokeRestart("muffleMessage")
[09:31:04.136]                       }
[09:31:04.136]                       else if (inherits(cond, "warning")) {
[09:31:04.136]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.136]                         if (muffled) 
[09:31:04.136]                           invokeRestart("muffleWarning")
[09:31:04.136]                       }
[09:31:04.136]                       else if (inherits(cond, "condition")) {
[09:31:04.136]                         if (!is.null(pattern)) {
[09:31:04.136]                           computeRestarts <- base::computeRestarts
[09:31:04.136]                           grepl <- base::grepl
[09:31:04.136]                           restarts <- computeRestarts(cond)
[09:31:04.136]                           for (restart in restarts) {
[09:31:04.136]                             name <- restart$name
[09:31:04.136]                             if (is.null(name)) 
[09:31:04.136]                               next
[09:31:04.136]                             if (!grepl(pattern, name)) 
[09:31:04.136]                               next
[09:31:04.136]                             invokeRestart(restart)
[09:31:04.136]                             muffled <- TRUE
[09:31:04.136]                             break
[09:31:04.136]                           }
[09:31:04.136]                         }
[09:31:04.136]                       }
[09:31:04.136]                       invisible(muffled)
[09:31:04.136]                     }
[09:31:04.136]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.136]                   }
[09:31:04.136]                 }
[09:31:04.136]                 else {
[09:31:04.136]                   if (TRUE) {
[09:31:04.136]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.136]                     {
[09:31:04.136]                       inherits <- base::inherits
[09:31:04.136]                       invokeRestart <- base::invokeRestart
[09:31:04.136]                       is.null <- base::is.null
[09:31:04.136]                       muffled <- FALSE
[09:31:04.136]                       if (inherits(cond, "message")) {
[09:31:04.136]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.136]                         if (muffled) 
[09:31:04.136]                           invokeRestart("muffleMessage")
[09:31:04.136]                       }
[09:31:04.136]                       else if (inherits(cond, "warning")) {
[09:31:04.136]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.136]                         if (muffled) 
[09:31:04.136]                           invokeRestart("muffleWarning")
[09:31:04.136]                       }
[09:31:04.136]                       else if (inherits(cond, "condition")) {
[09:31:04.136]                         if (!is.null(pattern)) {
[09:31:04.136]                           computeRestarts <- base::computeRestarts
[09:31:04.136]                           grepl <- base::grepl
[09:31:04.136]                           restarts <- computeRestarts(cond)
[09:31:04.136]                           for (restart in restarts) {
[09:31:04.136]                             name <- restart$name
[09:31:04.136]                             if (is.null(name)) 
[09:31:04.136]                               next
[09:31:04.136]                             if (!grepl(pattern, name)) 
[09:31:04.136]                               next
[09:31:04.136]                             invokeRestart(restart)
[09:31:04.136]                             muffled <- TRUE
[09:31:04.136]                             break
[09:31:04.136]                           }
[09:31:04.136]                         }
[09:31:04.136]                       }
[09:31:04.136]                       invisible(muffled)
[09:31:04.136]                     }
[09:31:04.136]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.136]                   }
[09:31:04.136]                 }
[09:31:04.136]             }
[09:31:04.136]         }))
[09:31:04.136]     }, error = function(ex) {
[09:31:04.136]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:04.136]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.136]                 ...future.rng), started = ...future.startTime, 
[09:31:04.136]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:04.136]             version = "1.8"), class = "FutureResult")
[09:31:04.136]     }, finally = {
[09:31:04.136]         if (!identical(...future.workdir, getwd())) 
[09:31:04.136]             setwd(...future.workdir)
[09:31:04.136]         {
[09:31:04.136]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:04.136]                 ...future.oldOptions$nwarnings <- NULL
[09:31:04.136]             }
[09:31:04.136]             base::options(...future.oldOptions)
[09:31:04.136]             if (.Platform$OS.type == "windows") {
[09:31:04.136]                 old_names <- names(...future.oldEnvVars)
[09:31:04.136]                 envs <- base::Sys.getenv()
[09:31:04.136]                 names <- names(envs)
[09:31:04.136]                 common <- intersect(names, old_names)
[09:31:04.136]                 added <- setdiff(names, old_names)
[09:31:04.136]                 removed <- setdiff(old_names, names)
[09:31:04.136]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:04.136]                   envs[common]]
[09:31:04.136]                 NAMES <- toupper(changed)
[09:31:04.136]                 args <- list()
[09:31:04.136]                 for (kk in seq_along(NAMES)) {
[09:31:04.136]                   name <- changed[[kk]]
[09:31:04.136]                   NAME <- NAMES[[kk]]
[09:31:04.136]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.136]                     next
[09:31:04.136]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.136]                 }
[09:31:04.136]                 NAMES <- toupper(added)
[09:31:04.136]                 for (kk in seq_along(NAMES)) {
[09:31:04.136]                   name <- added[[kk]]
[09:31:04.136]                   NAME <- NAMES[[kk]]
[09:31:04.136]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.136]                     next
[09:31:04.136]                   args[[name]] <- ""
[09:31:04.136]                 }
[09:31:04.136]                 NAMES <- toupper(removed)
[09:31:04.136]                 for (kk in seq_along(NAMES)) {
[09:31:04.136]                   name <- removed[[kk]]
[09:31:04.136]                   NAME <- NAMES[[kk]]
[09:31:04.136]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.136]                     next
[09:31:04.136]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.136]                 }
[09:31:04.136]                 if (length(args) > 0) 
[09:31:04.136]                   base::do.call(base::Sys.setenv, args = args)
[09:31:04.136]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:04.136]             }
[09:31:04.136]             else {
[09:31:04.136]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:04.136]             }
[09:31:04.136]             {
[09:31:04.136]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:04.136]                   0L) {
[09:31:04.136]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:04.136]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:04.136]                   base::options(opts)
[09:31:04.136]                 }
[09:31:04.136]                 {
[09:31:04.136]                   {
[09:31:04.136]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:04.136]                     NULL
[09:31:04.136]                   }
[09:31:04.136]                   options(future.plan = NULL)
[09:31:04.136]                   if (is.na(NA_character_)) 
[09:31:04.136]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.136]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:04.136]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:04.136]                     .init = FALSE)
[09:31:04.136]                 }
[09:31:04.136]             }
[09:31:04.136]         }
[09:31:04.136]     })
[09:31:04.136]     if (TRUE) {
[09:31:04.136]         base::sink(type = "output", split = FALSE)
[09:31:04.136]         if (TRUE) {
[09:31:04.136]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:04.136]         }
[09:31:04.136]         else {
[09:31:04.136]             ...future.result["stdout"] <- base::list(NULL)
[09:31:04.136]         }
[09:31:04.136]         base::close(...future.stdout)
[09:31:04.136]         ...future.stdout <- NULL
[09:31:04.136]     }
[09:31:04.136]     ...future.result$conditions <- ...future.conditions
[09:31:04.136]     ...future.result$finished <- base::Sys.time()
[09:31:04.136]     ...future.result
[09:31:04.136] }
[09:31:04.138] assign_globals() ...
[09:31:04.138] List of 1
[09:31:04.138]  $ a: num 10
[09:31:04.138]  - attr(*, "where")=List of 1
[09:31:04.138]   ..$ a:<environment: R_EmptyEnv> 
[09:31:04.138]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:04.138]  - attr(*, "resolved")= logi FALSE
[09:31:04.138]  - attr(*, "total_size")= num 56
[09:31:04.138]  - attr(*, "already-done")= logi TRUE
[09:31:04.141] - copied ‘a’ to environment
[09:31:04.141] assign_globals() ... done
[09:31:04.141] requestCore(): workers = 2
[09:31:04.143] MulticoreFuture started
[09:31:04.144] - Launch lazy future ... done
[09:31:04.144] run() for ‘MulticoreFuture’ ... done
[09:31:04.145] result() for MulticoreFuture ...
[09:31:04.145] plan(): Setting new future strategy stack:
[09:31:04.145] List of future strategies:
[09:31:04.145] 1. sequential:
[09:31:04.145]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:04.145]    - tweaked: FALSE
[09:31:04.145]    - call: NULL
[09:31:04.146] plan(): nbrOfWorkers() = 1
[09:31:04.148] plan(): Setting new future strategy stack:
[09:31:04.148] List of future strategies:
[09:31:04.148] 1. multicore:
[09:31:04.148]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:04.148]    - tweaked: FALSE
[09:31:04.148]    - call: plan(strategy)
[09:31:04.153] plan(): nbrOfWorkers() = 2
[09:31:04.154] result() for MulticoreFuture ...
[09:31:04.154] result() for MulticoreFuture ... done
[09:31:04.155] result() for MulticoreFuture ... done
[09:31:04.155] result() for MulticoreFuture ...
[09:31:04.155] result() for MulticoreFuture ... done
b = 11
*** %<-% with ‘multicore’ futures ... DONE
*** %<-% with ‘multisession’ futures ...
[09:31:04.156] plan(): Setting new future strategy stack:
[09:31:04.156] List of future strategies:
[09:31:04.156] 1. multisession:
[09:31:04.156]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:04.156]    - tweaked: FALSE
[09:31:04.156]    - call: plan(strategy)
[09:31:04.157] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:31:04.157] multisession:
[09:31:04.157] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:04.157] - tweaked: FALSE
[09:31:04.157] - call: plan(strategy)
[09:31:04.164] getGlobalsAndPackages() ...
[09:31:04.164] Not searching for globals
[09:31:04.164] - globals: [0] <none>
[09:31:04.164] getGlobalsAndPackages() ... DONE
[09:31:04.165] [local output] makeClusterPSOCK() ...
[09:31:04.214] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:31:04.215] [local output] Base port: 11738
[09:31:04.215] [local output] Getting setup options for 2 cluster nodes ...
[09:31:04.215] [local output]  - Node 1 of 2 ...
[09:31:04.216] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:04.216] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpgspuSi/worker.rank=1.parallelly.parent=41205.a0f5288929e4.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpgspuSi/worker.rank=1.parallelly.parent=41205.a0f5288929e4.pid")'’
[09:31:04.422] - Possible to infer worker's PID: TRUE
[09:31:04.422] [local output] Rscript port: 11738

[09:31:04.423] [local output]  - Node 2 of 2 ...
[09:31:04.423] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:04.424] [local output] Rscript port: 11738

[09:31:04.424] [local output] Getting setup options for 2 cluster nodes ... done
[09:31:04.424] [local output]  - Parallel setup requested for some PSOCK nodes
[09:31:04.425] [local output] Setting up PSOCK nodes in parallel
[09:31:04.425] List of 36
[09:31:04.425]  $ worker          : chr "localhost"
[09:31:04.425]   ..- attr(*, "localhost")= logi TRUE
[09:31:04.425]  $ master          : chr "localhost"
[09:31:04.425]  $ port            : int 11738
[09:31:04.425]  $ connectTimeout  : num 120
[09:31:04.425]  $ timeout         : num 2592000
[09:31:04.425]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:31:04.425]  $ homogeneous     : logi TRUE
[09:31:04.425]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:31:04.425]  $ rscript_envs    : NULL
[09:31:04.425]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:04.425]  $ rscript_startup : NULL
[09:31:04.425]  $ rscript_sh      : chr "sh"
[09:31:04.425]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:04.425]  $ methods         : logi TRUE
[09:31:04.425]  $ socketOptions   : chr "no-delay"
[09:31:04.425]  $ useXDR          : logi FALSE
[09:31:04.425]  $ outfile         : chr "/dev/null"
[09:31:04.425]  $ renice          : int NA
[09:31:04.425]  $ rshcmd          : NULL
[09:31:04.425]  $ user            : chr(0) 
[09:31:04.425]  $ revtunnel       : logi FALSE
[09:31:04.425]  $ rshlogfile      : NULL
[09:31:04.425]  $ rshopts         : chr(0) 
[09:31:04.425]  $ rank            : int 1
[09:31:04.425]  $ manual          : logi FALSE
[09:31:04.425]  $ dryrun          : logi FALSE
[09:31:04.425]  $ quiet           : logi FALSE
[09:31:04.425]  $ setup_strategy  : chr "parallel"
[09:31:04.425]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:04.425]  $ pidfile         : chr "/tmp/RtmpgspuSi/worker.rank=1.parallelly.parent=41205.a0f5288929e4.pid"
[09:31:04.425]  $ rshcmd_label    : NULL
[09:31:04.425]  $ rsh_call        : NULL
[09:31:04.425]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:04.425]  $ localMachine    : logi TRUE
[09:31:04.425]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:31:04.425]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:31:04.425]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:31:04.425]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:31:04.425]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:31:04.425]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:31:04.425]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:31:04.425]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:31:04.425]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:31:04.425]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:31:04.425]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:31:04.425]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:31:04.425]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:31:04.425]  $ arguments       :List of 28
[09:31:04.425]   ..$ worker          : chr "localhost"
[09:31:04.425]   ..$ master          : NULL
[09:31:04.425]   ..$ port            : int 11738
[09:31:04.425]   ..$ connectTimeout  : num 120
[09:31:04.425]   ..$ timeout         : num 2592000
[09:31:04.425]   ..$ rscript         : NULL
[09:31:04.425]   ..$ homogeneous     : NULL
[09:31:04.425]   ..$ rscript_args    : NULL
[09:31:04.425]   ..$ rscript_envs    : NULL
[09:31:04.425]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:04.425]   ..$ rscript_startup : NULL
[09:31:04.425]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:31:04.425]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:04.425]   ..$ methods         : logi TRUE
[09:31:04.425]   ..$ socketOptions   : chr "no-delay"
[09:31:04.425]   ..$ useXDR          : logi FALSE
[09:31:04.425]   ..$ outfile         : chr "/dev/null"
[09:31:04.425]   ..$ renice          : int NA
[09:31:04.425]   ..$ rshcmd          : NULL
[09:31:04.425]   ..$ user            : NULL
[09:31:04.425]   ..$ revtunnel       : logi NA
[09:31:04.425]   ..$ rshlogfile      : NULL
[09:31:04.425]   ..$ rshopts         : NULL
[09:31:04.425]   ..$ rank            : int 1
[09:31:04.425]   ..$ manual          : logi FALSE
[09:31:04.425]   ..$ dryrun          : logi FALSE
[09:31:04.425]   ..$ quiet           : logi FALSE
[09:31:04.425]   ..$ setup_strategy  : chr "parallel"
[09:31:04.425]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:31:04.441] [local output] System call to launch all workers:
[09:31:04.441] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpgspuSi/worker.rank=1.parallelly.parent=41205.a0f5288929e4.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11738 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:31:04.441] [local output] Starting PSOCK main server
[09:31:04.447] [local output] Workers launched
[09:31:04.447] [local output] Waiting for workers to connect back
[09:31:04.447]  - [local output] 0 workers out of 2 ready
[09:31:04.685]  - [local output] 0 workers out of 2 ready
[09:31:04.686]  - [local output] 1 workers out of 2 ready
[09:31:04.687]  - [local output] 1 workers out of 2 ready
[09:31:04.687]  - [local output] 2 workers out of 2 ready
[09:31:04.687] [local output] Launching of workers completed
[09:31:04.687] [local output] Collecting session information from workers
[09:31:04.688] [local output]  - Worker #1 of 2
[09:31:04.689] [local output]  - Worker #2 of 2
[09:31:04.689] [local output] makeClusterPSOCK() ... done
[09:31:04.700] Packages needed by the future expression (n = 0): <none>
[09:31:04.700] Packages needed by future strategies (n = 0): <none>
[09:31:04.701] {
[09:31:04.701]     {
[09:31:04.701]         {
[09:31:04.701]             ...future.startTime <- base::Sys.time()
[09:31:04.701]             {
[09:31:04.701]                 {
[09:31:04.701]                   {
[09:31:04.701]                     {
[09:31:04.701]                       base::local({
[09:31:04.701]                         has_future <- base::requireNamespace("future", 
[09:31:04.701]                           quietly = TRUE)
[09:31:04.701]                         if (has_future) {
[09:31:04.701]                           ns <- base::getNamespace("future")
[09:31:04.701]                           version <- ns[[".package"]][["version"]]
[09:31:04.701]                           if (is.null(version)) 
[09:31:04.701]                             version <- utils::packageVersion("future")
[09:31:04.701]                         }
[09:31:04.701]                         else {
[09:31:04.701]                           version <- NULL
[09:31:04.701]                         }
[09:31:04.701]                         if (!has_future || version < "1.8.0") {
[09:31:04.701]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:04.701]                             "", base::R.version$version.string), 
[09:31:04.701]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:04.701]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:04.701]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:04.701]                               "release", "version")], collapse = " "), 
[09:31:04.701]                             hostname = base::Sys.info()[["nodename"]])
[09:31:04.701]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:04.701]                             info)
[09:31:04.701]                           info <- base::paste(info, collapse = "; ")
[09:31:04.701]                           if (!has_future) {
[09:31:04.701]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:04.701]                               info)
[09:31:04.701]                           }
[09:31:04.701]                           else {
[09:31:04.701]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:04.701]                               info, version)
[09:31:04.701]                           }
[09:31:04.701]                           base::stop(msg)
[09:31:04.701]                         }
[09:31:04.701]                       })
[09:31:04.701]                     }
[09:31:04.701]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:04.701]                     base::options(mc.cores = 1L)
[09:31:04.701]                   }
[09:31:04.701]                   ...future.strategy.old <- future::plan("list")
[09:31:04.701]                   options(future.plan = NULL)
[09:31:04.701]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.701]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:04.701]                 }
[09:31:04.701]                 ...future.workdir <- getwd()
[09:31:04.701]             }
[09:31:04.701]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:04.701]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:04.701]         }
[09:31:04.701]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:04.701]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:04.701]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:04.701]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:04.701]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:04.701]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:04.701]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:04.701]             base::names(...future.oldOptions))
[09:31:04.701]     }
[09:31:04.701]     if (FALSE) {
[09:31:04.701]     }
[09:31:04.701]     else {
[09:31:04.701]         if (TRUE) {
[09:31:04.701]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:04.701]                 open = "w")
[09:31:04.701]         }
[09:31:04.701]         else {
[09:31:04.701]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:04.701]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:04.701]         }
[09:31:04.701]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:04.701]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:04.701]             base::sink(type = "output", split = FALSE)
[09:31:04.701]             base::close(...future.stdout)
[09:31:04.701]         }, add = TRUE)
[09:31:04.701]     }
[09:31:04.701]     ...future.frame <- base::sys.nframe()
[09:31:04.701]     ...future.conditions <- base::list()
[09:31:04.701]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:04.701]     if (FALSE) {
[09:31:04.701]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:04.701]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:04.701]     }
[09:31:04.701]     ...future.result <- base::tryCatch({
[09:31:04.701]         base::withCallingHandlers({
[09:31:04.701]             ...future.value <- base::withVisible(base::local({
[09:31:04.701]                 ...future.makeSendCondition <- base::local({
[09:31:04.701]                   sendCondition <- NULL
[09:31:04.701]                   function(frame = 1L) {
[09:31:04.701]                     if (is.function(sendCondition)) 
[09:31:04.701]                       return(sendCondition)
[09:31:04.701]                     ns <- getNamespace("parallel")
[09:31:04.701]                     if (exists("sendData", mode = "function", 
[09:31:04.701]                       envir = ns)) {
[09:31:04.701]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:04.701]                         envir = ns)
[09:31:04.701]                       envir <- sys.frame(frame)
[09:31:04.701]                       master <- NULL
[09:31:04.701]                       while (!identical(envir, .GlobalEnv) && 
[09:31:04.701]                         !identical(envir, emptyenv())) {
[09:31:04.701]                         if (exists("master", mode = "list", envir = envir, 
[09:31:04.701]                           inherits = FALSE)) {
[09:31:04.701]                           master <- get("master", mode = "list", 
[09:31:04.701]                             envir = envir, inherits = FALSE)
[09:31:04.701]                           if (inherits(master, c("SOCKnode", 
[09:31:04.701]                             "SOCK0node"))) {
[09:31:04.701]                             sendCondition <<- function(cond) {
[09:31:04.701]                               data <- list(type = "VALUE", value = cond, 
[09:31:04.701]                                 success = TRUE)
[09:31:04.701]                               parallel_sendData(master, data)
[09:31:04.701]                             }
[09:31:04.701]                             return(sendCondition)
[09:31:04.701]                           }
[09:31:04.701]                         }
[09:31:04.701]                         frame <- frame + 1L
[09:31:04.701]                         envir <- sys.frame(frame)
[09:31:04.701]                       }
[09:31:04.701]                     }
[09:31:04.701]                     sendCondition <<- function(cond) NULL
[09:31:04.701]                   }
[09:31:04.701]                 })
[09:31:04.701]                 withCallingHandlers({
[09:31:04.701]                   NA
[09:31:04.701]                 }, immediateCondition = function(cond) {
[09:31:04.701]                   sendCondition <- ...future.makeSendCondition()
[09:31:04.701]                   sendCondition(cond)
[09:31:04.701]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.701]                   {
[09:31:04.701]                     inherits <- base::inherits
[09:31:04.701]                     invokeRestart <- base::invokeRestart
[09:31:04.701]                     is.null <- base::is.null
[09:31:04.701]                     muffled <- FALSE
[09:31:04.701]                     if (inherits(cond, "message")) {
[09:31:04.701]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:04.701]                       if (muffled) 
[09:31:04.701]                         invokeRestart("muffleMessage")
[09:31:04.701]                     }
[09:31:04.701]                     else if (inherits(cond, "warning")) {
[09:31:04.701]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:04.701]                       if (muffled) 
[09:31:04.701]                         invokeRestart("muffleWarning")
[09:31:04.701]                     }
[09:31:04.701]                     else if (inherits(cond, "condition")) {
[09:31:04.701]                       if (!is.null(pattern)) {
[09:31:04.701]                         computeRestarts <- base::computeRestarts
[09:31:04.701]                         grepl <- base::grepl
[09:31:04.701]                         restarts <- computeRestarts(cond)
[09:31:04.701]                         for (restart in restarts) {
[09:31:04.701]                           name <- restart$name
[09:31:04.701]                           if (is.null(name)) 
[09:31:04.701]                             next
[09:31:04.701]                           if (!grepl(pattern, name)) 
[09:31:04.701]                             next
[09:31:04.701]                           invokeRestart(restart)
[09:31:04.701]                           muffled <- TRUE
[09:31:04.701]                           break
[09:31:04.701]                         }
[09:31:04.701]                       }
[09:31:04.701]                     }
[09:31:04.701]                     invisible(muffled)
[09:31:04.701]                   }
[09:31:04.701]                   muffleCondition(cond)
[09:31:04.701]                 })
[09:31:04.701]             }))
[09:31:04.701]             future::FutureResult(value = ...future.value$value, 
[09:31:04.701]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.701]                   ...future.rng), globalenv = if (FALSE) 
[09:31:04.701]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:04.701]                     ...future.globalenv.names))
[09:31:04.701]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:04.701]         }, condition = base::local({
[09:31:04.701]             c <- base::c
[09:31:04.701]             inherits <- base::inherits
[09:31:04.701]             invokeRestart <- base::invokeRestart
[09:31:04.701]             length <- base::length
[09:31:04.701]             list <- base::list
[09:31:04.701]             seq.int <- base::seq.int
[09:31:04.701]             signalCondition <- base::signalCondition
[09:31:04.701]             sys.calls <- base::sys.calls
[09:31:04.701]             `[[` <- base::`[[`
[09:31:04.701]             `+` <- base::`+`
[09:31:04.701]             `<<-` <- base::`<<-`
[09:31:04.701]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:04.701]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:04.701]                   3L)]
[09:31:04.701]             }
[09:31:04.701]             function(cond) {
[09:31:04.701]                 is_error <- inherits(cond, "error")
[09:31:04.701]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:04.701]                   NULL)
[09:31:04.701]                 if (is_error) {
[09:31:04.701]                   sessionInformation <- function() {
[09:31:04.701]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:04.701]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:04.701]                       search = base::search(), system = base::Sys.info())
[09:31:04.701]                   }
[09:31:04.701]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.701]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:04.701]                     cond$call), session = sessionInformation(), 
[09:31:04.701]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:04.701]                   signalCondition(cond)
[09:31:04.701]                 }
[09:31:04.701]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:04.701]                 "immediateCondition"))) {
[09:31:04.701]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:04.701]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.701]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:04.701]                   if (TRUE && !signal) {
[09:31:04.701]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.701]                     {
[09:31:04.701]                       inherits <- base::inherits
[09:31:04.701]                       invokeRestart <- base::invokeRestart
[09:31:04.701]                       is.null <- base::is.null
[09:31:04.701]                       muffled <- FALSE
[09:31:04.701]                       if (inherits(cond, "message")) {
[09:31:04.701]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.701]                         if (muffled) 
[09:31:04.701]                           invokeRestart("muffleMessage")
[09:31:04.701]                       }
[09:31:04.701]                       else if (inherits(cond, "warning")) {
[09:31:04.701]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.701]                         if (muffled) 
[09:31:04.701]                           invokeRestart("muffleWarning")
[09:31:04.701]                       }
[09:31:04.701]                       else if (inherits(cond, "condition")) {
[09:31:04.701]                         if (!is.null(pattern)) {
[09:31:04.701]                           computeRestarts <- base::computeRestarts
[09:31:04.701]                           grepl <- base::grepl
[09:31:04.701]                           restarts <- computeRestarts(cond)
[09:31:04.701]                           for (restart in restarts) {
[09:31:04.701]                             name <- restart$name
[09:31:04.701]                             if (is.null(name)) 
[09:31:04.701]                               next
[09:31:04.701]                             if (!grepl(pattern, name)) 
[09:31:04.701]                               next
[09:31:04.701]                             invokeRestart(restart)
[09:31:04.701]                             muffled <- TRUE
[09:31:04.701]                             break
[09:31:04.701]                           }
[09:31:04.701]                         }
[09:31:04.701]                       }
[09:31:04.701]                       invisible(muffled)
[09:31:04.701]                     }
[09:31:04.701]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.701]                   }
[09:31:04.701]                 }
[09:31:04.701]                 else {
[09:31:04.701]                   if (TRUE) {
[09:31:04.701]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.701]                     {
[09:31:04.701]                       inherits <- base::inherits
[09:31:04.701]                       invokeRestart <- base::invokeRestart
[09:31:04.701]                       is.null <- base::is.null
[09:31:04.701]                       muffled <- FALSE
[09:31:04.701]                       if (inherits(cond, "message")) {
[09:31:04.701]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.701]                         if (muffled) 
[09:31:04.701]                           invokeRestart("muffleMessage")
[09:31:04.701]                       }
[09:31:04.701]                       else if (inherits(cond, "warning")) {
[09:31:04.701]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.701]                         if (muffled) 
[09:31:04.701]                           invokeRestart("muffleWarning")
[09:31:04.701]                       }
[09:31:04.701]                       else if (inherits(cond, "condition")) {
[09:31:04.701]                         if (!is.null(pattern)) {
[09:31:04.701]                           computeRestarts <- base::computeRestarts
[09:31:04.701]                           grepl <- base::grepl
[09:31:04.701]                           restarts <- computeRestarts(cond)
[09:31:04.701]                           for (restart in restarts) {
[09:31:04.701]                             name <- restart$name
[09:31:04.701]                             if (is.null(name)) 
[09:31:04.701]                               next
[09:31:04.701]                             if (!grepl(pattern, name)) 
[09:31:04.701]                               next
[09:31:04.701]                             invokeRestart(restart)
[09:31:04.701]                             muffled <- TRUE
[09:31:04.701]                             break
[09:31:04.701]                           }
[09:31:04.701]                         }
[09:31:04.701]                       }
[09:31:04.701]                       invisible(muffled)
[09:31:04.701]                     }
[09:31:04.701]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.701]                   }
[09:31:04.701]                 }
[09:31:04.701]             }
[09:31:04.701]         }))
[09:31:04.701]     }, error = function(ex) {
[09:31:04.701]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:04.701]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.701]                 ...future.rng), started = ...future.startTime, 
[09:31:04.701]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:04.701]             version = "1.8"), class = "FutureResult")
[09:31:04.701]     }, finally = {
[09:31:04.701]         if (!identical(...future.workdir, getwd())) 
[09:31:04.701]             setwd(...future.workdir)
[09:31:04.701]         {
[09:31:04.701]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:04.701]                 ...future.oldOptions$nwarnings <- NULL
[09:31:04.701]             }
[09:31:04.701]             base::options(...future.oldOptions)
[09:31:04.701]             if (.Platform$OS.type == "windows") {
[09:31:04.701]                 old_names <- names(...future.oldEnvVars)
[09:31:04.701]                 envs <- base::Sys.getenv()
[09:31:04.701]                 names <- names(envs)
[09:31:04.701]                 common <- intersect(names, old_names)
[09:31:04.701]                 added <- setdiff(names, old_names)
[09:31:04.701]                 removed <- setdiff(old_names, names)
[09:31:04.701]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:04.701]                   envs[common]]
[09:31:04.701]                 NAMES <- toupper(changed)
[09:31:04.701]                 args <- list()
[09:31:04.701]                 for (kk in seq_along(NAMES)) {
[09:31:04.701]                   name <- changed[[kk]]
[09:31:04.701]                   NAME <- NAMES[[kk]]
[09:31:04.701]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.701]                     next
[09:31:04.701]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.701]                 }
[09:31:04.701]                 NAMES <- toupper(added)
[09:31:04.701]                 for (kk in seq_along(NAMES)) {
[09:31:04.701]                   name <- added[[kk]]
[09:31:04.701]                   NAME <- NAMES[[kk]]
[09:31:04.701]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.701]                     next
[09:31:04.701]                   args[[name]] <- ""
[09:31:04.701]                 }
[09:31:04.701]                 NAMES <- toupper(removed)
[09:31:04.701]                 for (kk in seq_along(NAMES)) {
[09:31:04.701]                   name <- removed[[kk]]
[09:31:04.701]                   NAME <- NAMES[[kk]]
[09:31:04.701]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.701]                     next
[09:31:04.701]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.701]                 }
[09:31:04.701]                 if (length(args) > 0) 
[09:31:04.701]                   base::do.call(base::Sys.setenv, args = args)
[09:31:04.701]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:04.701]             }
[09:31:04.701]             else {
[09:31:04.701]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:04.701]             }
[09:31:04.701]             {
[09:31:04.701]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:04.701]                   0L) {
[09:31:04.701]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:04.701]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:04.701]                   base::options(opts)
[09:31:04.701]                 }
[09:31:04.701]                 {
[09:31:04.701]                   {
[09:31:04.701]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:04.701]                     NULL
[09:31:04.701]                   }
[09:31:04.701]                   options(future.plan = NULL)
[09:31:04.701]                   if (is.na(NA_character_)) 
[09:31:04.701]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.701]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:04.701]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:04.701]                     .init = FALSE)
[09:31:04.701]                 }
[09:31:04.701]             }
[09:31:04.701]         }
[09:31:04.701]     })
[09:31:04.701]     if (TRUE) {
[09:31:04.701]         base::sink(type = "output", split = FALSE)
[09:31:04.701]         if (TRUE) {
[09:31:04.701]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:04.701]         }
[09:31:04.701]         else {
[09:31:04.701]             ...future.result["stdout"] <- base::list(NULL)
[09:31:04.701]         }
[09:31:04.701]         base::close(...future.stdout)
[09:31:04.701]         ...future.stdout <- NULL
[09:31:04.701]     }
[09:31:04.701]     ...future.result$conditions <- ...future.conditions
[09:31:04.701]     ...future.result$finished <- base::Sys.time()
[09:31:04.701]     ...future.result
[09:31:04.701] }
[09:31:04.752] MultisessionFuture started
[09:31:04.753] result() for ClusterFuture ...
[09:31:04.753] receiveMessageFromWorker() for ClusterFuture ...
[09:31:04.754] - Validating connection of MultisessionFuture
[09:31:04.785] - received message: FutureResult
[09:31:04.785] - Received FutureResult
[09:31:04.785] - Erased future from FutureRegistry
[09:31:04.785] result() for ClusterFuture ...
[09:31:04.785] - result already collected: FutureResult
[09:31:04.785] result() for ClusterFuture ... done
[09:31:04.785] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:04.786] result() for ClusterFuture ... done
[09:31:04.786] result() for ClusterFuture ...
[09:31:04.786] - result already collected: FutureResult
[09:31:04.786] result() for ClusterFuture ... done
[09:31:04.786] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:31:04.790] plan(): nbrOfWorkers() = 2
** Future evaluation without globals
[09:31:04.791] getGlobalsAndPackages() ...
[09:31:04.791] Searching for globals...
[09:31:04.792] - globals found: [2] ‘{’, ‘<-’
[09:31:04.792] Searching for globals ... DONE
[09:31:04.793] Resolving globals: FALSE
[09:31:04.793] 
[09:31:04.793] 
[09:31:04.793] getGlobalsAndPackages() ... DONE
[09:31:04.793] run() for ‘Future’ ...
[09:31:04.794] - state: ‘created’
[09:31:04.794] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:04.808] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:04.808] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:04.808]   - Field: ‘node’
[09:31:04.808]   - Field: ‘label’
[09:31:04.809]   - Field: ‘local’
[09:31:04.809]   - Field: ‘owner’
[09:31:04.809]   - Field: ‘envir’
[09:31:04.809]   - Field: ‘workers’
[09:31:04.809]   - Field: ‘packages’
[09:31:04.809]   - Field: ‘gc’
[09:31:04.809]   - Field: ‘conditions’
[09:31:04.809]   - Field: ‘persistent’
[09:31:04.809]   - Field: ‘expr’
[09:31:04.809]   - Field: ‘uuid’
[09:31:04.810]   - Field: ‘seed’
[09:31:04.810]   - Field: ‘version’
[09:31:04.810]   - Field: ‘result’
[09:31:04.810]   - Field: ‘asynchronous’
[09:31:04.810]   - Field: ‘calls’
[09:31:04.810]   - Field: ‘globals’
[09:31:04.810]   - Field: ‘stdout’
[09:31:04.810]   - Field: ‘earlySignal’
[09:31:04.810]   - Field: ‘lazy’
[09:31:04.811]   - Field: ‘state’
[09:31:04.811] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:04.811] - Launch lazy future ...
[09:31:04.811] Packages needed by the future expression (n = 0): <none>
[09:31:04.811] Packages needed by future strategies (n = 0): <none>
[09:31:04.812] {
[09:31:04.812]     {
[09:31:04.812]         {
[09:31:04.812]             ...future.startTime <- base::Sys.time()
[09:31:04.812]             {
[09:31:04.812]                 {
[09:31:04.812]                   {
[09:31:04.812]                     {
[09:31:04.812]                       base::local({
[09:31:04.812]                         has_future <- base::requireNamespace("future", 
[09:31:04.812]                           quietly = TRUE)
[09:31:04.812]                         if (has_future) {
[09:31:04.812]                           ns <- base::getNamespace("future")
[09:31:04.812]                           version <- ns[[".package"]][["version"]]
[09:31:04.812]                           if (is.null(version)) 
[09:31:04.812]                             version <- utils::packageVersion("future")
[09:31:04.812]                         }
[09:31:04.812]                         else {
[09:31:04.812]                           version <- NULL
[09:31:04.812]                         }
[09:31:04.812]                         if (!has_future || version < "1.8.0") {
[09:31:04.812]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:04.812]                             "", base::R.version$version.string), 
[09:31:04.812]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:04.812]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:04.812]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:04.812]                               "release", "version")], collapse = " "), 
[09:31:04.812]                             hostname = base::Sys.info()[["nodename"]])
[09:31:04.812]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:04.812]                             info)
[09:31:04.812]                           info <- base::paste(info, collapse = "; ")
[09:31:04.812]                           if (!has_future) {
[09:31:04.812]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:04.812]                               info)
[09:31:04.812]                           }
[09:31:04.812]                           else {
[09:31:04.812]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:04.812]                               info, version)
[09:31:04.812]                           }
[09:31:04.812]                           base::stop(msg)
[09:31:04.812]                         }
[09:31:04.812]                       })
[09:31:04.812]                     }
[09:31:04.812]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:04.812]                     base::options(mc.cores = 1L)
[09:31:04.812]                   }
[09:31:04.812]                   ...future.strategy.old <- future::plan("list")
[09:31:04.812]                   options(future.plan = NULL)
[09:31:04.812]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.812]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:04.812]                 }
[09:31:04.812]                 ...future.workdir <- getwd()
[09:31:04.812]             }
[09:31:04.812]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:04.812]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:04.812]         }
[09:31:04.812]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:04.812]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:04.812]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:04.812]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:04.812]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:04.812]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:04.812]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:04.812]             base::names(...future.oldOptions))
[09:31:04.812]     }
[09:31:04.812]     if (FALSE) {
[09:31:04.812]     }
[09:31:04.812]     else {
[09:31:04.812]         if (TRUE) {
[09:31:04.812]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:04.812]                 open = "w")
[09:31:04.812]         }
[09:31:04.812]         else {
[09:31:04.812]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:04.812]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:04.812]         }
[09:31:04.812]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:04.812]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:04.812]             base::sink(type = "output", split = FALSE)
[09:31:04.812]             base::close(...future.stdout)
[09:31:04.812]         }, add = TRUE)
[09:31:04.812]     }
[09:31:04.812]     ...future.frame <- base::sys.nframe()
[09:31:04.812]     ...future.conditions <- base::list()
[09:31:04.812]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:04.812]     if (FALSE) {
[09:31:04.812]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:04.812]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:04.812]     }
[09:31:04.812]     ...future.result <- base::tryCatch({
[09:31:04.812]         base::withCallingHandlers({
[09:31:04.812]             ...future.value <- base::withVisible(base::local({
[09:31:04.812]                 ...future.makeSendCondition <- base::local({
[09:31:04.812]                   sendCondition <- NULL
[09:31:04.812]                   function(frame = 1L) {
[09:31:04.812]                     if (is.function(sendCondition)) 
[09:31:04.812]                       return(sendCondition)
[09:31:04.812]                     ns <- getNamespace("parallel")
[09:31:04.812]                     if (exists("sendData", mode = "function", 
[09:31:04.812]                       envir = ns)) {
[09:31:04.812]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:04.812]                         envir = ns)
[09:31:04.812]                       envir <- sys.frame(frame)
[09:31:04.812]                       master <- NULL
[09:31:04.812]                       while (!identical(envir, .GlobalEnv) && 
[09:31:04.812]                         !identical(envir, emptyenv())) {
[09:31:04.812]                         if (exists("master", mode = "list", envir = envir, 
[09:31:04.812]                           inherits = FALSE)) {
[09:31:04.812]                           master <- get("master", mode = "list", 
[09:31:04.812]                             envir = envir, inherits = FALSE)
[09:31:04.812]                           if (inherits(master, c("SOCKnode", 
[09:31:04.812]                             "SOCK0node"))) {
[09:31:04.812]                             sendCondition <<- function(cond) {
[09:31:04.812]                               data <- list(type = "VALUE", value = cond, 
[09:31:04.812]                                 success = TRUE)
[09:31:04.812]                               parallel_sendData(master, data)
[09:31:04.812]                             }
[09:31:04.812]                             return(sendCondition)
[09:31:04.812]                           }
[09:31:04.812]                         }
[09:31:04.812]                         frame <- frame + 1L
[09:31:04.812]                         envir <- sys.frame(frame)
[09:31:04.812]                       }
[09:31:04.812]                     }
[09:31:04.812]                     sendCondition <<- function(cond) NULL
[09:31:04.812]                   }
[09:31:04.812]                 })
[09:31:04.812]                 withCallingHandlers({
[09:31:04.812]                   {
[09:31:04.812]                     x <- 1
[09:31:04.812]                   }
[09:31:04.812]                 }, immediateCondition = function(cond) {
[09:31:04.812]                   sendCondition <- ...future.makeSendCondition()
[09:31:04.812]                   sendCondition(cond)
[09:31:04.812]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.812]                   {
[09:31:04.812]                     inherits <- base::inherits
[09:31:04.812]                     invokeRestart <- base::invokeRestart
[09:31:04.812]                     is.null <- base::is.null
[09:31:04.812]                     muffled <- FALSE
[09:31:04.812]                     if (inherits(cond, "message")) {
[09:31:04.812]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:04.812]                       if (muffled) 
[09:31:04.812]                         invokeRestart("muffleMessage")
[09:31:04.812]                     }
[09:31:04.812]                     else if (inherits(cond, "warning")) {
[09:31:04.812]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:04.812]                       if (muffled) 
[09:31:04.812]                         invokeRestart("muffleWarning")
[09:31:04.812]                     }
[09:31:04.812]                     else if (inherits(cond, "condition")) {
[09:31:04.812]                       if (!is.null(pattern)) {
[09:31:04.812]                         computeRestarts <- base::computeRestarts
[09:31:04.812]                         grepl <- base::grepl
[09:31:04.812]                         restarts <- computeRestarts(cond)
[09:31:04.812]                         for (restart in restarts) {
[09:31:04.812]                           name <- restart$name
[09:31:04.812]                           if (is.null(name)) 
[09:31:04.812]                             next
[09:31:04.812]                           if (!grepl(pattern, name)) 
[09:31:04.812]                             next
[09:31:04.812]                           invokeRestart(restart)
[09:31:04.812]                           muffled <- TRUE
[09:31:04.812]                           break
[09:31:04.812]                         }
[09:31:04.812]                       }
[09:31:04.812]                     }
[09:31:04.812]                     invisible(muffled)
[09:31:04.812]                   }
[09:31:04.812]                   muffleCondition(cond)
[09:31:04.812]                 })
[09:31:04.812]             }))
[09:31:04.812]             future::FutureResult(value = ...future.value$value, 
[09:31:04.812]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.812]                   ...future.rng), globalenv = if (FALSE) 
[09:31:04.812]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:04.812]                     ...future.globalenv.names))
[09:31:04.812]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:04.812]         }, condition = base::local({
[09:31:04.812]             c <- base::c
[09:31:04.812]             inherits <- base::inherits
[09:31:04.812]             invokeRestart <- base::invokeRestart
[09:31:04.812]             length <- base::length
[09:31:04.812]             list <- base::list
[09:31:04.812]             seq.int <- base::seq.int
[09:31:04.812]             signalCondition <- base::signalCondition
[09:31:04.812]             sys.calls <- base::sys.calls
[09:31:04.812]             `[[` <- base::`[[`
[09:31:04.812]             `+` <- base::`+`
[09:31:04.812]             `<<-` <- base::`<<-`
[09:31:04.812]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:04.812]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:04.812]                   3L)]
[09:31:04.812]             }
[09:31:04.812]             function(cond) {
[09:31:04.812]                 is_error <- inherits(cond, "error")
[09:31:04.812]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:04.812]                   NULL)
[09:31:04.812]                 if (is_error) {
[09:31:04.812]                   sessionInformation <- function() {
[09:31:04.812]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:04.812]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:04.812]                       search = base::search(), system = base::Sys.info())
[09:31:04.812]                   }
[09:31:04.812]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.812]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:04.812]                     cond$call), session = sessionInformation(), 
[09:31:04.812]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:04.812]                   signalCondition(cond)
[09:31:04.812]                 }
[09:31:04.812]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:04.812]                 "immediateCondition"))) {
[09:31:04.812]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:04.812]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.812]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:04.812]                   if (TRUE && !signal) {
[09:31:04.812]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.812]                     {
[09:31:04.812]                       inherits <- base::inherits
[09:31:04.812]                       invokeRestart <- base::invokeRestart
[09:31:04.812]                       is.null <- base::is.null
[09:31:04.812]                       muffled <- FALSE
[09:31:04.812]                       if (inherits(cond, "message")) {
[09:31:04.812]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.812]                         if (muffled) 
[09:31:04.812]                           invokeRestart("muffleMessage")
[09:31:04.812]                       }
[09:31:04.812]                       else if (inherits(cond, "warning")) {
[09:31:04.812]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.812]                         if (muffled) 
[09:31:04.812]                           invokeRestart("muffleWarning")
[09:31:04.812]                       }
[09:31:04.812]                       else if (inherits(cond, "condition")) {
[09:31:04.812]                         if (!is.null(pattern)) {
[09:31:04.812]                           computeRestarts <- base::computeRestarts
[09:31:04.812]                           grepl <- base::grepl
[09:31:04.812]                           restarts <- computeRestarts(cond)
[09:31:04.812]                           for (restart in restarts) {
[09:31:04.812]                             name <- restart$name
[09:31:04.812]                             if (is.null(name)) 
[09:31:04.812]                               next
[09:31:04.812]                             if (!grepl(pattern, name)) 
[09:31:04.812]                               next
[09:31:04.812]                             invokeRestart(restart)
[09:31:04.812]                             muffled <- TRUE
[09:31:04.812]                             break
[09:31:04.812]                           }
[09:31:04.812]                         }
[09:31:04.812]                       }
[09:31:04.812]                       invisible(muffled)
[09:31:04.812]                     }
[09:31:04.812]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.812]                   }
[09:31:04.812]                 }
[09:31:04.812]                 else {
[09:31:04.812]                   if (TRUE) {
[09:31:04.812]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.812]                     {
[09:31:04.812]                       inherits <- base::inherits
[09:31:04.812]                       invokeRestart <- base::invokeRestart
[09:31:04.812]                       is.null <- base::is.null
[09:31:04.812]                       muffled <- FALSE
[09:31:04.812]                       if (inherits(cond, "message")) {
[09:31:04.812]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.812]                         if (muffled) 
[09:31:04.812]                           invokeRestart("muffleMessage")
[09:31:04.812]                       }
[09:31:04.812]                       else if (inherits(cond, "warning")) {
[09:31:04.812]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.812]                         if (muffled) 
[09:31:04.812]                           invokeRestart("muffleWarning")
[09:31:04.812]                       }
[09:31:04.812]                       else if (inherits(cond, "condition")) {
[09:31:04.812]                         if (!is.null(pattern)) {
[09:31:04.812]                           computeRestarts <- base::computeRestarts
[09:31:04.812]                           grepl <- base::grepl
[09:31:04.812]                           restarts <- computeRestarts(cond)
[09:31:04.812]                           for (restart in restarts) {
[09:31:04.812]                             name <- restart$name
[09:31:04.812]                             if (is.null(name)) 
[09:31:04.812]                               next
[09:31:04.812]                             if (!grepl(pattern, name)) 
[09:31:04.812]                               next
[09:31:04.812]                             invokeRestart(restart)
[09:31:04.812]                             muffled <- TRUE
[09:31:04.812]                             break
[09:31:04.812]                           }
[09:31:04.812]                         }
[09:31:04.812]                       }
[09:31:04.812]                       invisible(muffled)
[09:31:04.812]                     }
[09:31:04.812]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.812]                   }
[09:31:04.812]                 }
[09:31:04.812]             }
[09:31:04.812]         }))
[09:31:04.812]     }, error = function(ex) {
[09:31:04.812]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:04.812]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.812]                 ...future.rng), started = ...future.startTime, 
[09:31:04.812]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:04.812]             version = "1.8"), class = "FutureResult")
[09:31:04.812]     }, finally = {
[09:31:04.812]         if (!identical(...future.workdir, getwd())) 
[09:31:04.812]             setwd(...future.workdir)
[09:31:04.812]         {
[09:31:04.812]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:04.812]                 ...future.oldOptions$nwarnings <- NULL
[09:31:04.812]             }
[09:31:04.812]             base::options(...future.oldOptions)
[09:31:04.812]             if (.Platform$OS.type == "windows") {
[09:31:04.812]                 old_names <- names(...future.oldEnvVars)
[09:31:04.812]                 envs <- base::Sys.getenv()
[09:31:04.812]                 names <- names(envs)
[09:31:04.812]                 common <- intersect(names, old_names)
[09:31:04.812]                 added <- setdiff(names, old_names)
[09:31:04.812]                 removed <- setdiff(old_names, names)
[09:31:04.812]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:04.812]                   envs[common]]
[09:31:04.812]                 NAMES <- toupper(changed)
[09:31:04.812]                 args <- list()
[09:31:04.812]                 for (kk in seq_along(NAMES)) {
[09:31:04.812]                   name <- changed[[kk]]
[09:31:04.812]                   NAME <- NAMES[[kk]]
[09:31:04.812]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.812]                     next
[09:31:04.812]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.812]                 }
[09:31:04.812]                 NAMES <- toupper(added)
[09:31:04.812]                 for (kk in seq_along(NAMES)) {
[09:31:04.812]                   name <- added[[kk]]
[09:31:04.812]                   NAME <- NAMES[[kk]]
[09:31:04.812]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.812]                     next
[09:31:04.812]                   args[[name]] <- ""
[09:31:04.812]                 }
[09:31:04.812]                 NAMES <- toupper(removed)
[09:31:04.812]                 for (kk in seq_along(NAMES)) {
[09:31:04.812]                   name <- removed[[kk]]
[09:31:04.812]                   NAME <- NAMES[[kk]]
[09:31:04.812]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.812]                     next
[09:31:04.812]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.812]                 }
[09:31:04.812]                 if (length(args) > 0) 
[09:31:04.812]                   base::do.call(base::Sys.setenv, args = args)
[09:31:04.812]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:04.812]             }
[09:31:04.812]             else {
[09:31:04.812]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:04.812]             }
[09:31:04.812]             {
[09:31:04.812]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:04.812]                   0L) {
[09:31:04.812]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:04.812]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:04.812]                   base::options(opts)
[09:31:04.812]                 }
[09:31:04.812]                 {
[09:31:04.812]                   {
[09:31:04.812]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:04.812]                     NULL
[09:31:04.812]                   }
[09:31:04.812]                   options(future.plan = NULL)
[09:31:04.812]                   if (is.na(NA_character_)) 
[09:31:04.812]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.812]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:04.812]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:04.812]                     .init = FALSE)
[09:31:04.812]                 }
[09:31:04.812]             }
[09:31:04.812]         }
[09:31:04.812]     })
[09:31:04.812]     if (TRUE) {
[09:31:04.812]         base::sink(type = "output", split = FALSE)
[09:31:04.812]         if (TRUE) {
[09:31:04.812]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:04.812]         }
[09:31:04.812]         else {
[09:31:04.812]             ...future.result["stdout"] <- base::list(NULL)
[09:31:04.812]         }
[09:31:04.812]         base::close(...future.stdout)
[09:31:04.812]         ...future.stdout <- NULL
[09:31:04.812]     }
[09:31:04.812]     ...future.result$conditions <- ...future.conditions
[09:31:04.812]     ...future.result$finished <- base::Sys.time()
[09:31:04.812]     ...future.result
[09:31:04.812] }
[09:31:04.815] MultisessionFuture started
[09:31:04.815] - Launch lazy future ... done
[09:31:04.815] run() for ‘MultisessionFuture’ ... done
[09:31:04.816] result() for ClusterFuture ...
[09:31:04.816] receiveMessageFromWorker() for ClusterFuture ...
[09:31:04.816] - Validating connection of MultisessionFuture
[09:31:04.817] - received message: FutureResult
[09:31:04.817] - Received FutureResult
[09:31:04.817] - Erased future from FutureRegistry
[09:31:04.817] result() for ClusterFuture ...
[09:31:04.818] - result already collected: FutureResult
[09:31:04.818] result() for ClusterFuture ... done
[09:31:04.818] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:04.818] result() for ClusterFuture ... done
[09:31:04.818] result() for ClusterFuture ...
[09:31:04.818] - result already collected: FutureResult
[09:31:04.818] result() for ClusterFuture ... done
** Future evaluation with globals
[09:31:04.819] getGlobalsAndPackages() ...
[09:31:04.819] Searching for globals...
[09:31:04.820] - globals found: [3] ‘{’, ‘<-’, ‘a’
[09:31:04.820] Searching for globals ... DONE
[09:31:04.820] Resolving globals: FALSE
[09:31:04.821] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:04.821] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:04.821] - globals: [1] ‘a’
[09:31:04.821] 
[09:31:04.821] getGlobalsAndPackages() ... DONE
[09:31:04.822] run() for ‘Future’ ...
[09:31:04.822] - state: ‘created’
[09:31:04.822] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:04.836] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:04.836] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:04.836]   - Field: ‘node’
[09:31:04.836]   - Field: ‘label’
[09:31:04.836]   - Field: ‘local’
[09:31:04.837]   - Field: ‘owner’
[09:31:04.837]   - Field: ‘envir’
[09:31:04.837]   - Field: ‘workers’
[09:31:04.837]   - Field: ‘packages’
[09:31:04.837]   - Field: ‘gc’
[09:31:04.837]   - Field: ‘conditions’
[09:31:04.837]   - Field: ‘persistent’
[09:31:04.837]   - Field: ‘expr’
[09:31:04.837]   - Field: ‘uuid’
[09:31:04.837]   - Field: ‘seed’
[09:31:04.838]   - Field: ‘version’
[09:31:04.838]   - Field: ‘result’
[09:31:04.838]   - Field: ‘asynchronous’
[09:31:04.838]   - Field: ‘calls’
[09:31:04.838]   - Field: ‘globals’
[09:31:04.838]   - Field: ‘stdout’
[09:31:04.838]   - Field: ‘earlySignal’
[09:31:04.838]   - Field: ‘lazy’
[09:31:04.839]   - Field: ‘state’
[09:31:04.839] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:04.839] - Launch lazy future ...
[09:31:04.839] Packages needed by the future expression (n = 0): <none>
[09:31:04.839] Packages needed by future strategies (n = 0): <none>
[09:31:04.840] {
[09:31:04.840]     {
[09:31:04.840]         {
[09:31:04.840]             ...future.startTime <- base::Sys.time()
[09:31:04.840]             {
[09:31:04.840]                 {
[09:31:04.840]                   {
[09:31:04.840]                     {
[09:31:04.840]                       base::local({
[09:31:04.840]                         has_future <- base::requireNamespace("future", 
[09:31:04.840]                           quietly = TRUE)
[09:31:04.840]                         if (has_future) {
[09:31:04.840]                           ns <- base::getNamespace("future")
[09:31:04.840]                           version <- ns[[".package"]][["version"]]
[09:31:04.840]                           if (is.null(version)) 
[09:31:04.840]                             version <- utils::packageVersion("future")
[09:31:04.840]                         }
[09:31:04.840]                         else {
[09:31:04.840]                           version <- NULL
[09:31:04.840]                         }
[09:31:04.840]                         if (!has_future || version < "1.8.0") {
[09:31:04.840]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:04.840]                             "", base::R.version$version.string), 
[09:31:04.840]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:04.840]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:04.840]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:04.840]                               "release", "version")], collapse = " "), 
[09:31:04.840]                             hostname = base::Sys.info()[["nodename"]])
[09:31:04.840]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:04.840]                             info)
[09:31:04.840]                           info <- base::paste(info, collapse = "; ")
[09:31:04.840]                           if (!has_future) {
[09:31:04.840]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:04.840]                               info)
[09:31:04.840]                           }
[09:31:04.840]                           else {
[09:31:04.840]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:04.840]                               info, version)
[09:31:04.840]                           }
[09:31:04.840]                           base::stop(msg)
[09:31:04.840]                         }
[09:31:04.840]                       })
[09:31:04.840]                     }
[09:31:04.840]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:04.840]                     base::options(mc.cores = 1L)
[09:31:04.840]                   }
[09:31:04.840]                   ...future.strategy.old <- future::plan("list")
[09:31:04.840]                   options(future.plan = NULL)
[09:31:04.840]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.840]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:04.840]                 }
[09:31:04.840]                 ...future.workdir <- getwd()
[09:31:04.840]             }
[09:31:04.840]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:04.840]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:04.840]         }
[09:31:04.840]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:04.840]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:04.840]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:04.840]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:04.840]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:04.840]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:04.840]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:04.840]             base::names(...future.oldOptions))
[09:31:04.840]     }
[09:31:04.840]     if (FALSE) {
[09:31:04.840]     }
[09:31:04.840]     else {
[09:31:04.840]         if (TRUE) {
[09:31:04.840]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:04.840]                 open = "w")
[09:31:04.840]         }
[09:31:04.840]         else {
[09:31:04.840]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:04.840]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:04.840]         }
[09:31:04.840]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:04.840]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:04.840]             base::sink(type = "output", split = FALSE)
[09:31:04.840]             base::close(...future.stdout)
[09:31:04.840]         }, add = TRUE)
[09:31:04.840]     }
[09:31:04.840]     ...future.frame <- base::sys.nframe()
[09:31:04.840]     ...future.conditions <- base::list()
[09:31:04.840]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:04.840]     if (FALSE) {
[09:31:04.840]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:04.840]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:04.840]     }
[09:31:04.840]     ...future.result <- base::tryCatch({
[09:31:04.840]         base::withCallingHandlers({
[09:31:04.840]             ...future.value <- base::withVisible(base::local({
[09:31:04.840]                 ...future.makeSendCondition <- base::local({
[09:31:04.840]                   sendCondition <- NULL
[09:31:04.840]                   function(frame = 1L) {
[09:31:04.840]                     if (is.function(sendCondition)) 
[09:31:04.840]                       return(sendCondition)
[09:31:04.840]                     ns <- getNamespace("parallel")
[09:31:04.840]                     if (exists("sendData", mode = "function", 
[09:31:04.840]                       envir = ns)) {
[09:31:04.840]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:04.840]                         envir = ns)
[09:31:04.840]                       envir <- sys.frame(frame)
[09:31:04.840]                       master <- NULL
[09:31:04.840]                       while (!identical(envir, .GlobalEnv) && 
[09:31:04.840]                         !identical(envir, emptyenv())) {
[09:31:04.840]                         if (exists("master", mode = "list", envir = envir, 
[09:31:04.840]                           inherits = FALSE)) {
[09:31:04.840]                           master <- get("master", mode = "list", 
[09:31:04.840]                             envir = envir, inherits = FALSE)
[09:31:04.840]                           if (inherits(master, c("SOCKnode", 
[09:31:04.840]                             "SOCK0node"))) {
[09:31:04.840]                             sendCondition <<- function(cond) {
[09:31:04.840]                               data <- list(type = "VALUE", value = cond, 
[09:31:04.840]                                 success = TRUE)
[09:31:04.840]                               parallel_sendData(master, data)
[09:31:04.840]                             }
[09:31:04.840]                             return(sendCondition)
[09:31:04.840]                           }
[09:31:04.840]                         }
[09:31:04.840]                         frame <- frame + 1L
[09:31:04.840]                         envir <- sys.frame(frame)
[09:31:04.840]                       }
[09:31:04.840]                     }
[09:31:04.840]                     sendCondition <<- function(cond) NULL
[09:31:04.840]                   }
[09:31:04.840]                 })
[09:31:04.840]                 withCallingHandlers({
[09:31:04.840]                   {
[09:31:04.840]                     x <- a
[09:31:04.840]                   }
[09:31:04.840]                 }, immediateCondition = function(cond) {
[09:31:04.840]                   sendCondition <- ...future.makeSendCondition()
[09:31:04.840]                   sendCondition(cond)
[09:31:04.840]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.840]                   {
[09:31:04.840]                     inherits <- base::inherits
[09:31:04.840]                     invokeRestart <- base::invokeRestart
[09:31:04.840]                     is.null <- base::is.null
[09:31:04.840]                     muffled <- FALSE
[09:31:04.840]                     if (inherits(cond, "message")) {
[09:31:04.840]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:04.840]                       if (muffled) 
[09:31:04.840]                         invokeRestart("muffleMessage")
[09:31:04.840]                     }
[09:31:04.840]                     else if (inherits(cond, "warning")) {
[09:31:04.840]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:04.840]                       if (muffled) 
[09:31:04.840]                         invokeRestart("muffleWarning")
[09:31:04.840]                     }
[09:31:04.840]                     else if (inherits(cond, "condition")) {
[09:31:04.840]                       if (!is.null(pattern)) {
[09:31:04.840]                         computeRestarts <- base::computeRestarts
[09:31:04.840]                         grepl <- base::grepl
[09:31:04.840]                         restarts <- computeRestarts(cond)
[09:31:04.840]                         for (restart in restarts) {
[09:31:04.840]                           name <- restart$name
[09:31:04.840]                           if (is.null(name)) 
[09:31:04.840]                             next
[09:31:04.840]                           if (!grepl(pattern, name)) 
[09:31:04.840]                             next
[09:31:04.840]                           invokeRestart(restart)
[09:31:04.840]                           muffled <- TRUE
[09:31:04.840]                           break
[09:31:04.840]                         }
[09:31:04.840]                       }
[09:31:04.840]                     }
[09:31:04.840]                     invisible(muffled)
[09:31:04.840]                   }
[09:31:04.840]                   muffleCondition(cond)
[09:31:04.840]                 })
[09:31:04.840]             }))
[09:31:04.840]             future::FutureResult(value = ...future.value$value, 
[09:31:04.840]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.840]                   ...future.rng), globalenv = if (FALSE) 
[09:31:04.840]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:04.840]                     ...future.globalenv.names))
[09:31:04.840]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:04.840]         }, condition = base::local({
[09:31:04.840]             c <- base::c
[09:31:04.840]             inherits <- base::inherits
[09:31:04.840]             invokeRestart <- base::invokeRestart
[09:31:04.840]             length <- base::length
[09:31:04.840]             list <- base::list
[09:31:04.840]             seq.int <- base::seq.int
[09:31:04.840]             signalCondition <- base::signalCondition
[09:31:04.840]             sys.calls <- base::sys.calls
[09:31:04.840]             `[[` <- base::`[[`
[09:31:04.840]             `+` <- base::`+`
[09:31:04.840]             `<<-` <- base::`<<-`
[09:31:04.840]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:04.840]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:04.840]                   3L)]
[09:31:04.840]             }
[09:31:04.840]             function(cond) {
[09:31:04.840]                 is_error <- inherits(cond, "error")
[09:31:04.840]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:04.840]                   NULL)
[09:31:04.840]                 if (is_error) {
[09:31:04.840]                   sessionInformation <- function() {
[09:31:04.840]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:04.840]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:04.840]                       search = base::search(), system = base::Sys.info())
[09:31:04.840]                   }
[09:31:04.840]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.840]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:04.840]                     cond$call), session = sessionInformation(), 
[09:31:04.840]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:04.840]                   signalCondition(cond)
[09:31:04.840]                 }
[09:31:04.840]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:04.840]                 "immediateCondition"))) {
[09:31:04.840]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:04.840]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.840]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:04.840]                   if (TRUE && !signal) {
[09:31:04.840]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.840]                     {
[09:31:04.840]                       inherits <- base::inherits
[09:31:04.840]                       invokeRestart <- base::invokeRestart
[09:31:04.840]                       is.null <- base::is.null
[09:31:04.840]                       muffled <- FALSE
[09:31:04.840]                       if (inherits(cond, "message")) {
[09:31:04.840]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.840]                         if (muffled) 
[09:31:04.840]                           invokeRestart("muffleMessage")
[09:31:04.840]                       }
[09:31:04.840]                       else if (inherits(cond, "warning")) {
[09:31:04.840]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.840]                         if (muffled) 
[09:31:04.840]                           invokeRestart("muffleWarning")
[09:31:04.840]                       }
[09:31:04.840]                       else if (inherits(cond, "condition")) {
[09:31:04.840]                         if (!is.null(pattern)) {
[09:31:04.840]                           computeRestarts <- base::computeRestarts
[09:31:04.840]                           grepl <- base::grepl
[09:31:04.840]                           restarts <- computeRestarts(cond)
[09:31:04.840]                           for (restart in restarts) {
[09:31:04.840]                             name <- restart$name
[09:31:04.840]                             if (is.null(name)) 
[09:31:04.840]                               next
[09:31:04.840]                             if (!grepl(pattern, name)) 
[09:31:04.840]                               next
[09:31:04.840]                             invokeRestart(restart)
[09:31:04.840]                             muffled <- TRUE
[09:31:04.840]                             break
[09:31:04.840]                           }
[09:31:04.840]                         }
[09:31:04.840]                       }
[09:31:04.840]                       invisible(muffled)
[09:31:04.840]                     }
[09:31:04.840]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.840]                   }
[09:31:04.840]                 }
[09:31:04.840]                 else {
[09:31:04.840]                   if (TRUE) {
[09:31:04.840]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.840]                     {
[09:31:04.840]                       inherits <- base::inherits
[09:31:04.840]                       invokeRestart <- base::invokeRestart
[09:31:04.840]                       is.null <- base::is.null
[09:31:04.840]                       muffled <- FALSE
[09:31:04.840]                       if (inherits(cond, "message")) {
[09:31:04.840]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.840]                         if (muffled) 
[09:31:04.840]                           invokeRestart("muffleMessage")
[09:31:04.840]                       }
[09:31:04.840]                       else if (inherits(cond, "warning")) {
[09:31:04.840]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.840]                         if (muffled) 
[09:31:04.840]                           invokeRestart("muffleWarning")
[09:31:04.840]                       }
[09:31:04.840]                       else if (inherits(cond, "condition")) {
[09:31:04.840]                         if (!is.null(pattern)) {
[09:31:04.840]                           computeRestarts <- base::computeRestarts
[09:31:04.840]                           grepl <- base::grepl
[09:31:04.840]                           restarts <- computeRestarts(cond)
[09:31:04.840]                           for (restart in restarts) {
[09:31:04.840]                             name <- restart$name
[09:31:04.840]                             if (is.null(name)) 
[09:31:04.840]                               next
[09:31:04.840]                             if (!grepl(pattern, name)) 
[09:31:04.840]                               next
[09:31:04.840]                             invokeRestart(restart)
[09:31:04.840]                             muffled <- TRUE
[09:31:04.840]                             break
[09:31:04.840]                           }
[09:31:04.840]                         }
[09:31:04.840]                       }
[09:31:04.840]                       invisible(muffled)
[09:31:04.840]                     }
[09:31:04.840]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.840]                   }
[09:31:04.840]                 }
[09:31:04.840]             }
[09:31:04.840]         }))
[09:31:04.840]     }, error = function(ex) {
[09:31:04.840]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:04.840]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.840]                 ...future.rng), started = ...future.startTime, 
[09:31:04.840]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:04.840]             version = "1.8"), class = "FutureResult")
[09:31:04.840]     }, finally = {
[09:31:04.840]         if (!identical(...future.workdir, getwd())) 
[09:31:04.840]             setwd(...future.workdir)
[09:31:04.840]         {
[09:31:04.840]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:04.840]                 ...future.oldOptions$nwarnings <- NULL
[09:31:04.840]             }
[09:31:04.840]             base::options(...future.oldOptions)
[09:31:04.840]             if (.Platform$OS.type == "windows") {
[09:31:04.840]                 old_names <- names(...future.oldEnvVars)
[09:31:04.840]                 envs <- base::Sys.getenv()
[09:31:04.840]                 names <- names(envs)
[09:31:04.840]                 common <- intersect(names, old_names)
[09:31:04.840]                 added <- setdiff(names, old_names)
[09:31:04.840]                 removed <- setdiff(old_names, names)
[09:31:04.840]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:04.840]                   envs[common]]
[09:31:04.840]                 NAMES <- toupper(changed)
[09:31:04.840]                 args <- list()
[09:31:04.840]                 for (kk in seq_along(NAMES)) {
[09:31:04.840]                   name <- changed[[kk]]
[09:31:04.840]                   NAME <- NAMES[[kk]]
[09:31:04.840]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.840]                     next
[09:31:04.840]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.840]                 }
[09:31:04.840]                 NAMES <- toupper(added)
[09:31:04.840]                 for (kk in seq_along(NAMES)) {
[09:31:04.840]                   name <- added[[kk]]
[09:31:04.840]                   NAME <- NAMES[[kk]]
[09:31:04.840]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.840]                     next
[09:31:04.840]                   args[[name]] <- ""
[09:31:04.840]                 }
[09:31:04.840]                 NAMES <- toupper(removed)
[09:31:04.840]                 for (kk in seq_along(NAMES)) {
[09:31:04.840]                   name <- removed[[kk]]
[09:31:04.840]                   NAME <- NAMES[[kk]]
[09:31:04.840]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.840]                     next
[09:31:04.840]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.840]                 }
[09:31:04.840]                 if (length(args) > 0) 
[09:31:04.840]                   base::do.call(base::Sys.setenv, args = args)
[09:31:04.840]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:04.840]             }
[09:31:04.840]             else {
[09:31:04.840]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:04.840]             }
[09:31:04.840]             {
[09:31:04.840]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:04.840]                   0L) {
[09:31:04.840]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:04.840]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:04.840]                   base::options(opts)
[09:31:04.840]                 }
[09:31:04.840]                 {
[09:31:04.840]                   {
[09:31:04.840]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:04.840]                     NULL
[09:31:04.840]                   }
[09:31:04.840]                   options(future.plan = NULL)
[09:31:04.840]                   if (is.na(NA_character_)) 
[09:31:04.840]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.840]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:04.840]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:04.840]                     .init = FALSE)
[09:31:04.840]                 }
[09:31:04.840]             }
[09:31:04.840]         }
[09:31:04.840]     })
[09:31:04.840]     if (TRUE) {
[09:31:04.840]         base::sink(type = "output", split = FALSE)
[09:31:04.840]         if (TRUE) {
[09:31:04.840]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:04.840]         }
[09:31:04.840]         else {
[09:31:04.840]             ...future.result["stdout"] <- base::list(NULL)
[09:31:04.840]         }
[09:31:04.840]         base::close(...future.stdout)
[09:31:04.840]         ...future.stdout <- NULL
[09:31:04.840]     }
[09:31:04.840]     ...future.result$conditions <- ...future.conditions
[09:31:04.840]     ...future.result$finished <- base::Sys.time()
[09:31:04.840]     ...future.result
[09:31:04.840] }
[09:31:04.842] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[09:31:04.843] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[09:31:04.843] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[09:31:04.843] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[09:31:04.844] MultisessionFuture started
[09:31:04.844] - Launch lazy future ... done
[09:31:04.844] run() for ‘MultisessionFuture’ ... done
[09:31:04.845] result() for ClusterFuture ...
[09:31:04.845] receiveMessageFromWorker() for ClusterFuture ...
[09:31:04.845] - Validating connection of MultisessionFuture
[09:31:04.849] - received message: FutureResult
[09:31:04.849] - Received FutureResult
[09:31:04.849] - Erased future from FutureRegistry
[09:31:04.849] result() for ClusterFuture ...
[09:31:04.849] - result already collected: FutureResult
[09:31:04.849] result() for ClusterFuture ... done
[09:31:04.850] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:04.850] result() for ClusterFuture ... done
[09:31:04.850] result() for ClusterFuture ...
[09:31:04.850] - result already collected: FutureResult
[09:31:04.850] result() for ClusterFuture ... done
** Future evaluation with errors
[09:31:04.851] getGlobalsAndPackages() ...
[09:31:04.851] Searching for globals...
[09:31:04.852] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[09:31:04.853] Searching for globals ... DONE
[09:31:04.853] Resolving globals: FALSE
[09:31:04.853] 
[09:31:04.853] 
[09:31:04.853] getGlobalsAndPackages() ... DONE
[09:31:04.854] run() for ‘Future’ ...
[09:31:04.854] - state: ‘created’
[09:31:04.854] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:04.868] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:04.868] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:04.868]   - Field: ‘node’
[09:31:04.868]   - Field: ‘label’
[09:31:04.868]   - Field: ‘local’
[09:31:04.868]   - Field: ‘owner’
[09:31:04.868]   - Field: ‘envir’
[09:31:04.869]   - Field: ‘workers’
[09:31:04.869]   - Field: ‘packages’
[09:31:04.869]   - Field: ‘gc’
[09:31:04.869]   - Field: ‘conditions’
[09:31:04.869]   - Field: ‘persistent’
[09:31:04.869]   - Field: ‘expr’
[09:31:04.869]   - Field: ‘uuid’
[09:31:04.869]   - Field: ‘seed’
[09:31:04.869]   - Field: ‘version’
[09:31:04.870]   - Field: ‘result’
[09:31:04.870]   - Field: ‘asynchronous’
[09:31:04.870]   - Field: ‘calls’
[09:31:04.870]   - Field: ‘globals’
[09:31:04.870]   - Field: ‘stdout’
[09:31:04.870]   - Field: ‘earlySignal’
[09:31:04.870]   - Field: ‘lazy’
[09:31:04.870]   - Field: ‘state’
[09:31:04.870] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:04.871] - Launch lazy future ...
[09:31:04.871] Packages needed by the future expression (n = 0): <none>
[09:31:04.871] Packages needed by future strategies (n = 0): <none>
[09:31:04.871] {
[09:31:04.871]     {
[09:31:04.871]         {
[09:31:04.871]             ...future.startTime <- base::Sys.time()
[09:31:04.871]             {
[09:31:04.871]                 {
[09:31:04.871]                   {
[09:31:04.871]                     {
[09:31:04.871]                       base::local({
[09:31:04.871]                         has_future <- base::requireNamespace("future", 
[09:31:04.871]                           quietly = TRUE)
[09:31:04.871]                         if (has_future) {
[09:31:04.871]                           ns <- base::getNamespace("future")
[09:31:04.871]                           version <- ns[[".package"]][["version"]]
[09:31:04.871]                           if (is.null(version)) 
[09:31:04.871]                             version <- utils::packageVersion("future")
[09:31:04.871]                         }
[09:31:04.871]                         else {
[09:31:04.871]                           version <- NULL
[09:31:04.871]                         }
[09:31:04.871]                         if (!has_future || version < "1.8.0") {
[09:31:04.871]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:04.871]                             "", base::R.version$version.string), 
[09:31:04.871]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:04.871]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:04.871]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:04.871]                               "release", "version")], collapse = " "), 
[09:31:04.871]                             hostname = base::Sys.info()[["nodename"]])
[09:31:04.871]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:04.871]                             info)
[09:31:04.871]                           info <- base::paste(info, collapse = "; ")
[09:31:04.871]                           if (!has_future) {
[09:31:04.871]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:04.871]                               info)
[09:31:04.871]                           }
[09:31:04.871]                           else {
[09:31:04.871]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:04.871]                               info, version)
[09:31:04.871]                           }
[09:31:04.871]                           base::stop(msg)
[09:31:04.871]                         }
[09:31:04.871]                       })
[09:31:04.871]                     }
[09:31:04.871]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:04.871]                     base::options(mc.cores = 1L)
[09:31:04.871]                   }
[09:31:04.871]                   ...future.strategy.old <- future::plan("list")
[09:31:04.871]                   options(future.plan = NULL)
[09:31:04.871]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.871]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:04.871]                 }
[09:31:04.871]                 ...future.workdir <- getwd()
[09:31:04.871]             }
[09:31:04.871]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:04.871]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:04.871]         }
[09:31:04.871]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:04.871]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:04.871]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:04.871]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:04.871]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:04.871]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:04.871]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:04.871]             base::names(...future.oldOptions))
[09:31:04.871]     }
[09:31:04.871]     if (FALSE) {
[09:31:04.871]     }
[09:31:04.871]     else {
[09:31:04.871]         if (TRUE) {
[09:31:04.871]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:04.871]                 open = "w")
[09:31:04.871]         }
[09:31:04.871]         else {
[09:31:04.871]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:04.871]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:04.871]         }
[09:31:04.871]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:04.871]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:04.871]             base::sink(type = "output", split = FALSE)
[09:31:04.871]             base::close(...future.stdout)
[09:31:04.871]         }, add = TRUE)
[09:31:04.871]     }
[09:31:04.871]     ...future.frame <- base::sys.nframe()
[09:31:04.871]     ...future.conditions <- base::list()
[09:31:04.871]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:04.871]     if (FALSE) {
[09:31:04.871]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:04.871]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:04.871]     }
[09:31:04.871]     ...future.result <- base::tryCatch({
[09:31:04.871]         base::withCallingHandlers({
[09:31:04.871]             ...future.value <- base::withVisible(base::local({
[09:31:04.871]                 ...future.makeSendCondition <- base::local({
[09:31:04.871]                   sendCondition <- NULL
[09:31:04.871]                   function(frame = 1L) {
[09:31:04.871]                     if (is.function(sendCondition)) 
[09:31:04.871]                       return(sendCondition)
[09:31:04.871]                     ns <- getNamespace("parallel")
[09:31:04.871]                     if (exists("sendData", mode = "function", 
[09:31:04.871]                       envir = ns)) {
[09:31:04.871]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:04.871]                         envir = ns)
[09:31:04.871]                       envir <- sys.frame(frame)
[09:31:04.871]                       master <- NULL
[09:31:04.871]                       while (!identical(envir, .GlobalEnv) && 
[09:31:04.871]                         !identical(envir, emptyenv())) {
[09:31:04.871]                         if (exists("master", mode = "list", envir = envir, 
[09:31:04.871]                           inherits = FALSE)) {
[09:31:04.871]                           master <- get("master", mode = "list", 
[09:31:04.871]                             envir = envir, inherits = FALSE)
[09:31:04.871]                           if (inherits(master, c("SOCKnode", 
[09:31:04.871]                             "SOCK0node"))) {
[09:31:04.871]                             sendCondition <<- function(cond) {
[09:31:04.871]                               data <- list(type = "VALUE", value = cond, 
[09:31:04.871]                                 success = TRUE)
[09:31:04.871]                               parallel_sendData(master, data)
[09:31:04.871]                             }
[09:31:04.871]                             return(sendCondition)
[09:31:04.871]                           }
[09:31:04.871]                         }
[09:31:04.871]                         frame <- frame + 1L
[09:31:04.871]                         envir <- sys.frame(frame)
[09:31:04.871]                       }
[09:31:04.871]                     }
[09:31:04.871]                     sendCondition <<- function(cond) NULL
[09:31:04.871]                   }
[09:31:04.871]                 })
[09:31:04.871]                 withCallingHandlers({
[09:31:04.871]                   {
[09:31:04.871]                     x <- 3
[09:31:04.871]                     stop("Woops!")
[09:31:04.871]                     x
[09:31:04.871]                   }
[09:31:04.871]                 }, immediateCondition = function(cond) {
[09:31:04.871]                   sendCondition <- ...future.makeSendCondition()
[09:31:04.871]                   sendCondition(cond)
[09:31:04.871]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.871]                   {
[09:31:04.871]                     inherits <- base::inherits
[09:31:04.871]                     invokeRestart <- base::invokeRestart
[09:31:04.871]                     is.null <- base::is.null
[09:31:04.871]                     muffled <- FALSE
[09:31:04.871]                     if (inherits(cond, "message")) {
[09:31:04.871]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:04.871]                       if (muffled) 
[09:31:04.871]                         invokeRestart("muffleMessage")
[09:31:04.871]                     }
[09:31:04.871]                     else if (inherits(cond, "warning")) {
[09:31:04.871]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:04.871]                       if (muffled) 
[09:31:04.871]                         invokeRestart("muffleWarning")
[09:31:04.871]                     }
[09:31:04.871]                     else if (inherits(cond, "condition")) {
[09:31:04.871]                       if (!is.null(pattern)) {
[09:31:04.871]                         computeRestarts <- base::computeRestarts
[09:31:04.871]                         grepl <- base::grepl
[09:31:04.871]                         restarts <- computeRestarts(cond)
[09:31:04.871]                         for (restart in restarts) {
[09:31:04.871]                           name <- restart$name
[09:31:04.871]                           if (is.null(name)) 
[09:31:04.871]                             next
[09:31:04.871]                           if (!grepl(pattern, name)) 
[09:31:04.871]                             next
[09:31:04.871]                           invokeRestart(restart)
[09:31:04.871]                           muffled <- TRUE
[09:31:04.871]                           break
[09:31:04.871]                         }
[09:31:04.871]                       }
[09:31:04.871]                     }
[09:31:04.871]                     invisible(muffled)
[09:31:04.871]                   }
[09:31:04.871]                   muffleCondition(cond)
[09:31:04.871]                 })
[09:31:04.871]             }))
[09:31:04.871]             future::FutureResult(value = ...future.value$value, 
[09:31:04.871]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.871]                   ...future.rng), globalenv = if (FALSE) 
[09:31:04.871]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:04.871]                     ...future.globalenv.names))
[09:31:04.871]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:04.871]         }, condition = base::local({
[09:31:04.871]             c <- base::c
[09:31:04.871]             inherits <- base::inherits
[09:31:04.871]             invokeRestart <- base::invokeRestart
[09:31:04.871]             length <- base::length
[09:31:04.871]             list <- base::list
[09:31:04.871]             seq.int <- base::seq.int
[09:31:04.871]             signalCondition <- base::signalCondition
[09:31:04.871]             sys.calls <- base::sys.calls
[09:31:04.871]             `[[` <- base::`[[`
[09:31:04.871]             `+` <- base::`+`
[09:31:04.871]             `<<-` <- base::`<<-`
[09:31:04.871]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:04.871]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:04.871]                   3L)]
[09:31:04.871]             }
[09:31:04.871]             function(cond) {
[09:31:04.871]                 is_error <- inherits(cond, "error")
[09:31:04.871]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:04.871]                   NULL)
[09:31:04.871]                 if (is_error) {
[09:31:04.871]                   sessionInformation <- function() {
[09:31:04.871]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:04.871]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:04.871]                       search = base::search(), system = base::Sys.info())
[09:31:04.871]                   }
[09:31:04.871]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.871]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:04.871]                     cond$call), session = sessionInformation(), 
[09:31:04.871]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:04.871]                   signalCondition(cond)
[09:31:04.871]                 }
[09:31:04.871]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:04.871]                 "immediateCondition"))) {
[09:31:04.871]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:04.871]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.871]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:04.871]                   if (TRUE && !signal) {
[09:31:04.871]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.871]                     {
[09:31:04.871]                       inherits <- base::inherits
[09:31:04.871]                       invokeRestart <- base::invokeRestart
[09:31:04.871]                       is.null <- base::is.null
[09:31:04.871]                       muffled <- FALSE
[09:31:04.871]                       if (inherits(cond, "message")) {
[09:31:04.871]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.871]                         if (muffled) 
[09:31:04.871]                           invokeRestart("muffleMessage")
[09:31:04.871]                       }
[09:31:04.871]                       else if (inherits(cond, "warning")) {
[09:31:04.871]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.871]                         if (muffled) 
[09:31:04.871]                           invokeRestart("muffleWarning")
[09:31:04.871]                       }
[09:31:04.871]                       else if (inherits(cond, "condition")) {
[09:31:04.871]                         if (!is.null(pattern)) {
[09:31:04.871]                           computeRestarts <- base::computeRestarts
[09:31:04.871]                           grepl <- base::grepl
[09:31:04.871]                           restarts <- computeRestarts(cond)
[09:31:04.871]                           for (restart in restarts) {
[09:31:04.871]                             name <- restart$name
[09:31:04.871]                             if (is.null(name)) 
[09:31:04.871]                               next
[09:31:04.871]                             if (!grepl(pattern, name)) 
[09:31:04.871]                               next
[09:31:04.871]                             invokeRestart(restart)
[09:31:04.871]                             muffled <- TRUE
[09:31:04.871]                             break
[09:31:04.871]                           }
[09:31:04.871]                         }
[09:31:04.871]                       }
[09:31:04.871]                       invisible(muffled)
[09:31:04.871]                     }
[09:31:04.871]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.871]                   }
[09:31:04.871]                 }
[09:31:04.871]                 else {
[09:31:04.871]                   if (TRUE) {
[09:31:04.871]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.871]                     {
[09:31:04.871]                       inherits <- base::inherits
[09:31:04.871]                       invokeRestart <- base::invokeRestart
[09:31:04.871]                       is.null <- base::is.null
[09:31:04.871]                       muffled <- FALSE
[09:31:04.871]                       if (inherits(cond, "message")) {
[09:31:04.871]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.871]                         if (muffled) 
[09:31:04.871]                           invokeRestart("muffleMessage")
[09:31:04.871]                       }
[09:31:04.871]                       else if (inherits(cond, "warning")) {
[09:31:04.871]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.871]                         if (muffled) 
[09:31:04.871]                           invokeRestart("muffleWarning")
[09:31:04.871]                       }
[09:31:04.871]                       else if (inherits(cond, "condition")) {
[09:31:04.871]                         if (!is.null(pattern)) {
[09:31:04.871]                           computeRestarts <- base::computeRestarts
[09:31:04.871]                           grepl <- base::grepl
[09:31:04.871]                           restarts <- computeRestarts(cond)
[09:31:04.871]                           for (restart in restarts) {
[09:31:04.871]                             name <- restart$name
[09:31:04.871]                             if (is.null(name)) 
[09:31:04.871]                               next
[09:31:04.871]                             if (!grepl(pattern, name)) 
[09:31:04.871]                               next
[09:31:04.871]                             invokeRestart(restart)
[09:31:04.871]                             muffled <- TRUE
[09:31:04.871]                             break
[09:31:04.871]                           }
[09:31:04.871]                         }
[09:31:04.871]                       }
[09:31:04.871]                       invisible(muffled)
[09:31:04.871]                     }
[09:31:04.871]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.871]                   }
[09:31:04.871]                 }
[09:31:04.871]             }
[09:31:04.871]         }))
[09:31:04.871]     }, error = function(ex) {
[09:31:04.871]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:04.871]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.871]                 ...future.rng), started = ...future.startTime, 
[09:31:04.871]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:04.871]             version = "1.8"), class = "FutureResult")
[09:31:04.871]     }, finally = {
[09:31:04.871]         if (!identical(...future.workdir, getwd())) 
[09:31:04.871]             setwd(...future.workdir)
[09:31:04.871]         {
[09:31:04.871]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:04.871]                 ...future.oldOptions$nwarnings <- NULL
[09:31:04.871]             }
[09:31:04.871]             base::options(...future.oldOptions)
[09:31:04.871]             if (.Platform$OS.type == "windows") {
[09:31:04.871]                 old_names <- names(...future.oldEnvVars)
[09:31:04.871]                 envs <- base::Sys.getenv()
[09:31:04.871]                 names <- names(envs)
[09:31:04.871]                 common <- intersect(names, old_names)
[09:31:04.871]                 added <- setdiff(names, old_names)
[09:31:04.871]                 removed <- setdiff(old_names, names)
[09:31:04.871]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:04.871]                   envs[common]]
[09:31:04.871]                 NAMES <- toupper(changed)
[09:31:04.871]                 args <- list()
[09:31:04.871]                 for (kk in seq_along(NAMES)) {
[09:31:04.871]                   name <- changed[[kk]]
[09:31:04.871]                   NAME <- NAMES[[kk]]
[09:31:04.871]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.871]                     next
[09:31:04.871]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.871]                 }
[09:31:04.871]                 NAMES <- toupper(added)
[09:31:04.871]                 for (kk in seq_along(NAMES)) {
[09:31:04.871]                   name <- added[[kk]]
[09:31:04.871]                   NAME <- NAMES[[kk]]
[09:31:04.871]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.871]                     next
[09:31:04.871]                   args[[name]] <- ""
[09:31:04.871]                 }
[09:31:04.871]                 NAMES <- toupper(removed)
[09:31:04.871]                 for (kk in seq_along(NAMES)) {
[09:31:04.871]                   name <- removed[[kk]]
[09:31:04.871]                   NAME <- NAMES[[kk]]
[09:31:04.871]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.871]                     next
[09:31:04.871]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.871]                 }
[09:31:04.871]                 if (length(args) > 0) 
[09:31:04.871]                   base::do.call(base::Sys.setenv, args = args)
[09:31:04.871]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:04.871]             }
[09:31:04.871]             else {
[09:31:04.871]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:04.871]             }
[09:31:04.871]             {
[09:31:04.871]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:04.871]                   0L) {
[09:31:04.871]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:04.871]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:04.871]                   base::options(opts)
[09:31:04.871]                 }
[09:31:04.871]                 {
[09:31:04.871]                   {
[09:31:04.871]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:04.871]                     NULL
[09:31:04.871]                   }
[09:31:04.871]                   options(future.plan = NULL)
[09:31:04.871]                   if (is.na(NA_character_)) 
[09:31:04.871]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.871]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:04.871]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:04.871]                     .init = FALSE)
[09:31:04.871]                 }
[09:31:04.871]             }
[09:31:04.871]         }
[09:31:04.871]     })
[09:31:04.871]     if (TRUE) {
[09:31:04.871]         base::sink(type = "output", split = FALSE)
[09:31:04.871]         if (TRUE) {
[09:31:04.871]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:04.871]         }
[09:31:04.871]         else {
[09:31:04.871]             ...future.result["stdout"] <- base::list(NULL)
[09:31:04.871]         }
[09:31:04.871]         base::close(...future.stdout)
[09:31:04.871]         ...future.stdout <- NULL
[09:31:04.871]     }
[09:31:04.871]     ...future.result$conditions <- ...future.conditions
[09:31:04.871]     ...future.result$finished <- base::Sys.time()
[09:31:04.871]     ...future.result
[09:31:04.871] }
[09:31:04.875] MultisessionFuture started
[09:31:04.875] - Launch lazy future ... done
[09:31:04.875] run() for ‘MultisessionFuture’ ... done
[09:31:04.875] result() for ClusterFuture ...
[09:31:04.876] receiveMessageFromWorker() for ClusterFuture ...
[09:31:04.876] - Validating connection of MultisessionFuture
[09:31:04.877] - received message: FutureResult
[09:31:04.878] - Received FutureResult
[09:31:04.878] - Erased future from FutureRegistry
[09:31:04.878] result() for ClusterFuture ...
[09:31:04.878] - result already collected: FutureResult
[09:31:04.878] result() for ClusterFuture ... done
[09:31:04.878] signalConditions() ...
[09:31:04.878]  - include = ‘immediateCondition’
[09:31:04.878]  - exclude = 
[09:31:04.878]  - resignal = FALSE
[09:31:04.879]  - Number of conditions: 1
[09:31:04.879] signalConditions() ... done
[09:31:04.879] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:04.879] result() for ClusterFuture ... done
[09:31:04.879] result() for ClusterFuture ...
[09:31:04.879] - result already collected: FutureResult
[09:31:04.879] result() for ClusterFuture ... done
[09:31:04.879] signalConditions() ...
[09:31:04.879]  - include = ‘immediateCondition’
[09:31:04.880]  - exclude = 
[09:31:04.880]  - resignal = FALSE
[09:31:04.880]  - Number of conditions: 1
[09:31:04.880] signalConditions() ... done
[09:31:04.880] Future state: ‘finished’
[09:31:04.880] result() for ClusterFuture ...
[09:31:04.880] - result already collected: FutureResult
[09:31:04.880] result() for ClusterFuture ... done
[09:31:04.881] signalConditions() ...
[09:31:04.881]  - include = ‘condition’
[09:31:04.881]  - exclude = ‘immediateCondition’
[09:31:04.881]  - resignal = TRUE
[09:31:04.881]  - Number of conditions: 1
[09:31:04.881]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:04.881] signalConditions() ... done
[09:31:04.882] getGlobalsAndPackages() ...
[09:31:04.882] Searching for globals...
[09:31:04.884] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[09:31:04.884] Searching for globals ... DONE
[09:31:04.884] Resolving globals: FALSE
[09:31:04.885] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:04.885] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:04.885] - globals: [1] ‘ii’
[09:31:04.885] 
[09:31:04.885] getGlobalsAndPackages() ... DONE
[09:31:04.886] run() for ‘Future’ ...
[09:31:04.886] - state: ‘created’
[09:31:04.886] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:04.902] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:04.902] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:04.902]   - Field: ‘node’
[09:31:04.902]   - Field: ‘label’
[09:31:04.902]   - Field: ‘local’
[09:31:04.902]   - Field: ‘owner’
[09:31:04.902]   - Field: ‘envir’
[09:31:04.902]   - Field: ‘workers’
[09:31:04.902]   - Field: ‘packages’
[09:31:04.902]   - Field: ‘gc’
[09:31:04.903]   - Field: ‘conditions’
[09:31:04.903]   - Field: ‘persistent’
[09:31:04.903]   - Field: ‘expr’
[09:31:04.903]   - Field: ‘uuid’
[09:31:04.903]   - Field: ‘seed’
[09:31:04.903]   - Field: ‘version’
[09:31:04.903]   - Field: ‘result’
[09:31:04.903]   - Field: ‘asynchronous’
[09:31:04.903]   - Field: ‘calls’
[09:31:04.903]   - Field: ‘globals’
[09:31:04.903]   - Field: ‘stdout’
[09:31:04.903]   - Field: ‘earlySignal’
[09:31:04.904]   - Field: ‘lazy’
[09:31:04.904]   - Field: ‘state’
[09:31:04.904] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:04.904] - Launch lazy future ...
[09:31:04.904] Packages needed by the future expression (n = 0): <none>
[09:31:04.904] Packages needed by future strategies (n = 0): <none>
[09:31:04.905] {
[09:31:04.905]     {
[09:31:04.905]         {
[09:31:04.905]             ...future.startTime <- base::Sys.time()
[09:31:04.905]             {
[09:31:04.905]                 {
[09:31:04.905]                   {
[09:31:04.905]                     {
[09:31:04.905]                       base::local({
[09:31:04.905]                         has_future <- base::requireNamespace("future", 
[09:31:04.905]                           quietly = TRUE)
[09:31:04.905]                         if (has_future) {
[09:31:04.905]                           ns <- base::getNamespace("future")
[09:31:04.905]                           version <- ns[[".package"]][["version"]]
[09:31:04.905]                           if (is.null(version)) 
[09:31:04.905]                             version <- utils::packageVersion("future")
[09:31:04.905]                         }
[09:31:04.905]                         else {
[09:31:04.905]                           version <- NULL
[09:31:04.905]                         }
[09:31:04.905]                         if (!has_future || version < "1.8.0") {
[09:31:04.905]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:04.905]                             "", base::R.version$version.string), 
[09:31:04.905]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:04.905]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:04.905]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:04.905]                               "release", "version")], collapse = " "), 
[09:31:04.905]                             hostname = base::Sys.info()[["nodename"]])
[09:31:04.905]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:04.905]                             info)
[09:31:04.905]                           info <- base::paste(info, collapse = "; ")
[09:31:04.905]                           if (!has_future) {
[09:31:04.905]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:04.905]                               info)
[09:31:04.905]                           }
[09:31:04.905]                           else {
[09:31:04.905]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:04.905]                               info, version)
[09:31:04.905]                           }
[09:31:04.905]                           base::stop(msg)
[09:31:04.905]                         }
[09:31:04.905]                       })
[09:31:04.905]                     }
[09:31:04.905]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:04.905]                     base::options(mc.cores = 1L)
[09:31:04.905]                   }
[09:31:04.905]                   ...future.strategy.old <- future::plan("list")
[09:31:04.905]                   options(future.plan = NULL)
[09:31:04.905]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.905]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:04.905]                 }
[09:31:04.905]                 ...future.workdir <- getwd()
[09:31:04.905]             }
[09:31:04.905]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:04.905]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:04.905]         }
[09:31:04.905]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:04.905]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:04.905]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:04.905]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:04.905]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:04.905]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:04.905]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:04.905]             base::names(...future.oldOptions))
[09:31:04.905]     }
[09:31:04.905]     if (FALSE) {
[09:31:04.905]     }
[09:31:04.905]     else {
[09:31:04.905]         if (TRUE) {
[09:31:04.905]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:04.905]                 open = "w")
[09:31:04.905]         }
[09:31:04.905]         else {
[09:31:04.905]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:04.905]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:04.905]         }
[09:31:04.905]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:04.905]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:04.905]             base::sink(type = "output", split = FALSE)
[09:31:04.905]             base::close(...future.stdout)
[09:31:04.905]         }, add = TRUE)
[09:31:04.905]     }
[09:31:04.905]     ...future.frame <- base::sys.nframe()
[09:31:04.905]     ...future.conditions <- base::list()
[09:31:04.905]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:04.905]     if (FALSE) {
[09:31:04.905]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:04.905]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:04.905]     }
[09:31:04.905]     ...future.result <- base::tryCatch({
[09:31:04.905]         base::withCallingHandlers({
[09:31:04.905]             ...future.value <- base::withVisible(base::local({
[09:31:04.905]                 ...future.makeSendCondition <- base::local({
[09:31:04.905]                   sendCondition <- NULL
[09:31:04.905]                   function(frame = 1L) {
[09:31:04.905]                     if (is.function(sendCondition)) 
[09:31:04.905]                       return(sendCondition)
[09:31:04.905]                     ns <- getNamespace("parallel")
[09:31:04.905]                     if (exists("sendData", mode = "function", 
[09:31:04.905]                       envir = ns)) {
[09:31:04.905]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:04.905]                         envir = ns)
[09:31:04.905]                       envir <- sys.frame(frame)
[09:31:04.905]                       master <- NULL
[09:31:04.905]                       while (!identical(envir, .GlobalEnv) && 
[09:31:04.905]                         !identical(envir, emptyenv())) {
[09:31:04.905]                         if (exists("master", mode = "list", envir = envir, 
[09:31:04.905]                           inherits = FALSE)) {
[09:31:04.905]                           master <- get("master", mode = "list", 
[09:31:04.905]                             envir = envir, inherits = FALSE)
[09:31:04.905]                           if (inherits(master, c("SOCKnode", 
[09:31:04.905]                             "SOCK0node"))) {
[09:31:04.905]                             sendCondition <<- function(cond) {
[09:31:04.905]                               data <- list(type = "VALUE", value = cond, 
[09:31:04.905]                                 success = TRUE)
[09:31:04.905]                               parallel_sendData(master, data)
[09:31:04.905]                             }
[09:31:04.905]                             return(sendCondition)
[09:31:04.905]                           }
[09:31:04.905]                         }
[09:31:04.905]                         frame <- frame + 1L
[09:31:04.905]                         envir <- sys.frame(frame)
[09:31:04.905]                       }
[09:31:04.905]                     }
[09:31:04.905]                     sendCondition <<- function(cond) NULL
[09:31:04.905]                   }
[09:31:04.905]                 })
[09:31:04.905]                 withCallingHandlers({
[09:31:04.905]                   {
[09:31:04.905]                     if (ii%%2 == 0) 
[09:31:04.905]                       stop("Woops!")
[09:31:04.905]                     ii
[09:31:04.905]                   }
[09:31:04.905]                 }, immediateCondition = function(cond) {
[09:31:04.905]                   sendCondition <- ...future.makeSendCondition()
[09:31:04.905]                   sendCondition(cond)
[09:31:04.905]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.905]                   {
[09:31:04.905]                     inherits <- base::inherits
[09:31:04.905]                     invokeRestart <- base::invokeRestart
[09:31:04.905]                     is.null <- base::is.null
[09:31:04.905]                     muffled <- FALSE
[09:31:04.905]                     if (inherits(cond, "message")) {
[09:31:04.905]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:04.905]                       if (muffled) 
[09:31:04.905]                         invokeRestart("muffleMessage")
[09:31:04.905]                     }
[09:31:04.905]                     else if (inherits(cond, "warning")) {
[09:31:04.905]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:04.905]                       if (muffled) 
[09:31:04.905]                         invokeRestart("muffleWarning")
[09:31:04.905]                     }
[09:31:04.905]                     else if (inherits(cond, "condition")) {
[09:31:04.905]                       if (!is.null(pattern)) {
[09:31:04.905]                         computeRestarts <- base::computeRestarts
[09:31:04.905]                         grepl <- base::grepl
[09:31:04.905]                         restarts <- computeRestarts(cond)
[09:31:04.905]                         for (restart in restarts) {
[09:31:04.905]                           name <- restart$name
[09:31:04.905]                           if (is.null(name)) 
[09:31:04.905]                             next
[09:31:04.905]                           if (!grepl(pattern, name)) 
[09:31:04.905]                             next
[09:31:04.905]                           invokeRestart(restart)
[09:31:04.905]                           muffled <- TRUE
[09:31:04.905]                           break
[09:31:04.905]                         }
[09:31:04.905]                       }
[09:31:04.905]                     }
[09:31:04.905]                     invisible(muffled)
[09:31:04.905]                   }
[09:31:04.905]                   muffleCondition(cond)
[09:31:04.905]                 })
[09:31:04.905]             }))
[09:31:04.905]             future::FutureResult(value = ...future.value$value, 
[09:31:04.905]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.905]                   ...future.rng), globalenv = if (FALSE) 
[09:31:04.905]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:04.905]                     ...future.globalenv.names))
[09:31:04.905]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:04.905]         }, condition = base::local({
[09:31:04.905]             c <- base::c
[09:31:04.905]             inherits <- base::inherits
[09:31:04.905]             invokeRestart <- base::invokeRestart
[09:31:04.905]             length <- base::length
[09:31:04.905]             list <- base::list
[09:31:04.905]             seq.int <- base::seq.int
[09:31:04.905]             signalCondition <- base::signalCondition
[09:31:04.905]             sys.calls <- base::sys.calls
[09:31:04.905]             `[[` <- base::`[[`
[09:31:04.905]             `+` <- base::`+`
[09:31:04.905]             `<<-` <- base::`<<-`
[09:31:04.905]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:04.905]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:04.905]                   3L)]
[09:31:04.905]             }
[09:31:04.905]             function(cond) {
[09:31:04.905]                 is_error <- inherits(cond, "error")
[09:31:04.905]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:04.905]                   NULL)
[09:31:04.905]                 if (is_error) {
[09:31:04.905]                   sessionInformation <- function() {
[09:31:04.905]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:04.905]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:04.905]                       search = base::search(), system = base::Sys.info())
[09:31:04.905]                   }
[09:31:04.905]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.905]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:04.905]                     cond$call), session = sessionInformation(), 
[09:31:04.905]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:04.905]                   signalCondition(cond)
[09:31:04.905]                 }
[09:31:04.905]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:04.905]                 "immediateCondition"))) {
[09:31:04.905]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:04.905]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.905]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:04.905]                   if (TRUE && !signal) {
[09:31:04.905]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.905]                     {
[09:31:04.905]                       inherits <- base::inherits
[09:31:04.905]                       invokeRestart <- base::invokeRestart
[09:31:04.905]                       is.null <- base::is.null
[09:31:04.905]                       muffled <- FALSE
[09:31:04.905]                       if (inherits(cond, "message")) {
[09:31:04.905]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.905]                         if (muffled) 
[09:31:04.905]                           invokeRestart("muffleMessage")
[09:31:04.905]                       }
[09:31:04.905]                       else if (inherits(cond, "warning")) {
[09:31:04.905]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.905]                         if (muffled) 
[09:31:04.905]                           invokeRestart("muffleWarning")
[09:31:04.905]                       }
[09:31:04.905]                       else if (inherits(cond, "condition")) {
[09:31:04.905]                         if (!is.null(pattern)) {
[09:31:04.905]                           computeRestarts <- base::computeRestarts
[09:31:04.905]                           grepl <- base::grepl
[09:31:04.905]                           restarts <- computeRestarts(cond)
[09:31:04.905]                           for (restart in restarts) {
[09:31:04.905]                             name <- restart$name
[09:31:04.905]                             if (is.null(name)) 
[09:31:04.905]                               next
[09:31:04.905]                             if (!grepl(pattern, name)) 
[09:31:04.905]                               next
[09:31:04.905]                             invokeRestart(restart)
[09:31:04.905]                             muffled <- TRUE
[09:31:04.905]                             break
[09:31:04.905]                           }
[09:31:04.905]                         }
[09:31:04.905]                       }
[09:31:04.905]                       invisible(muffled)
[09:31:04.905]                     }
[09:31:04.905]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.905]                   }
[09:31:04.905]                 }
[09:31:04.905]                 else {
[09:31:04.905]                   if (TRUE) {
[09:31:04.905]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.905]                     {
[09:31:04.905]                       inherits <- base::inherits
[09:31:04.905]                       invokeRestart <- base::invokeRestart
[09:31:04.905]                       is.null <- base::is.null
[09:31:04.905]                       muffled <- FALSE
[09:31:04.905]                       if (inherits(cond, "message")) {
[09:31:04.905]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.905]                         if (muffled) 
[09:31:04.905]                           invokeRestart("muffleMessage")
[09:31:04.905]                       }
[09:31:04.905]                       else if (inherits(cond, "warning")) {
[09:31:04.905]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.905]                         if (muffled) 
[09:31:04.905]                           invokeRestart("muffleWarning")
[09:31:04.905]                       }
[09:31:04.905]                       else if (inherits(cond, "condition")) {
[09:31:04.905]                         if (!is.null(pattern)) {
[09:31:04.905]                           computeRestarts <- base::computeRestarts
[09:31:04.905]                           grepl <- base::grepl
[09:31:04.905]                           restarts <- computeRestarts(cond)
[09:31:04.905]                           for (restart in restarts) {
[09:31:04.905]                             name <- restart$name
[09:31:04.905]                             if (is.null(name)) 
[09:31:04.905]                               next
[09:31:04.905]                             if (!grepl(pattern, name)) 
[09:31:04.905]                               next
[09:31:04.905]                             invokeRestart(restart)
[09:31:04.905]                             muffled <- TRUE
[09:31:04.905]                             break
[09:31:04.905]                           }
[09:31:04.905]                         }
[09:31:04.905]                       }
[09:31:04.905]                       invisible(muffled)
[09:31:04.905]                     }
[09:31:04.905]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.905]                   }
[09:31:04.905]                 }
[09:31:04.905]             }
[09:31:04.905]         }))
[09:31:04.905]     }, error = function(ex) {
[09:31:04.905]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:04.905]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.905]                 ...future.rng), started = ...future.startTime, 
[09:31:04.905]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:04.905]             version = "1.8"), class = "FutureResult")
[09:31:04.905]     }, finally = {
[09:31:04.905]         if (!identical(...future.workdir, getwd())) 
[09:31:04.905]             setwd(...future.workdir)
[09:31:04.905]         {
[09:31:04.905]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:04.905]                 ...future.oldOptions$nwarnings <- NULL
[09:31:04.905]             }
[09:31:04.905]             base::options(...future.oldOptions)
[09:31:04.905]             if (.Platform$OS.type == "windows") {
[09:31:04.905]                 old_names <- names(...future.oldEnvVars)
[09:31:04.905]                 envs <- base::Sys.getenv()
[09:31:04.905]                 names <- names(envs)
[09:31:04.905]                 common <- intersect(names, old_names)
[09:31:04.905]                 added <- setdiff(names, old_names)
[09:31:04.905]                 removed <- setdiff(old_names, names)
[09:31:04.905]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:04.905]                   envs[common]]
[09:31:04.905]                 NAMES <- toupper(changed)
[09:31:04.905]                 args <- list()
[09:31:04.905]                 for (kk in seq_along(NAMES)) {
[09:31:04.905]                   name <- changed[[kk]]
[09:31:04.905]                   NAME <- NAMES[[kk]]
[09:31:04.905]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.905]                     next
[09:31:04.905]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.905]                 }
[09:31:04.905]                 NAMES <- toupper(added)
[09:31:04.905]                 for (kk in seq_along(NAMES)) {
[09:31:04.905]                   name <- added[[kk]]
[09:31:04.905]                   NAME <- NAMES[[kk]]
[09:31:04.905]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.905]                     next
[09:31:04.905]                   args[[name]] <- ""
[09:31:04.905]                 }
[09:31:04.905]                 NAMES <- toupper(removed)
[09:31:04.905]                 for (kk in seq_along(NAMES)) {
[09:31:04.905]                   name <- removed[[kk]]
[09:31:04.905]                   NAME <- NAMES[[kk]]
[09:31:04.905]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.905]                     next
[09:31:04.905]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.905]                 }
[09:31:04.905]                 if (length(args) > 0) 
[09:31:04.905]                   base::do.call(base::Sys.setenv, args = args)
[09:31:04.905]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:04.905]             }
[09:31:04.905]             else {
[09:31:04.905]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:04.905]             }
[09:31:04.905]             {
[09:31:04.905]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:04.905]                   0L) {
[09:31:04.905]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:04.905]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:04.905]                   base::options(opts)
[09:31:04.905]                 }
[09:31:04.905]                 {
[09:31:04.905]                   {
[09:31:04.905]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:04.905]                     NULL
[09:31:04.905]                   }
[09:31:04.905]                   options(future.plan = NULL)
[09:31:04.905]                   if (is.na(NA_character_)) 
[09:31:04.905]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.905]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:04.905]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:04.905]                     .init = FALSE)
[09:31:04.905]                 }
[09:31:04.905]             }
[09:31:04.905]         }
[09:31:04.905]     })
[09:31:04.905]     if (TRUE) {
[09:31:04.905]         base::sink(type = "output", split = FALSE)
[09:31:04.905]         if (TRUE) {
[09:31:04.905]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:04.905]         }
[09:31:04.905]         else {
[09:31:04.905]             ...future.result["stdout"] <- base::list(NULL)
[09:31:04.905]         }
[09:31:04.905]         base::close(...future.stdout)
[09:31:04.905]         ...future.stdout <- NULL
[09:31:04.905]     }
[09:31:04.905]     ...future.result$conditions <- ...future.conditions
[09:31:04.905]     ...future.result$finished <- base::Sys.time()
[09:31:04.905]     ...future.result
[09:31:04.905] }
[09:31:04.907] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[09:31:04.907] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[09:31:04.907] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[09:31:04.908] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[09:31:04.908] MultisessionFuture started
[09:31:04.908] - Launch lazy future ... done
[09:31:04.908] run() for ‘MultisessionFuture’ ... done
[09:31:04.909] getGlobalsAndPackages() ...
[09:31:04.909] Searching for globals...
[09:31:04.911] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[09:31:04.911] Searching for globals ... DONE
[09:31:04.911] Resolving globals: FALSE
[09:31:04.912] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:04.912] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:04.912] - globals: [1] ‘ii’
[09:31:04.912] 
[09:31:04.912] getGlobalsAndPackages() ... DONE
[09:31:04.912] run() for ‘Future’ ...
[09:31:04.913] - state: ‘created’
[09:31:04.913] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:04.926] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:04.926] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:04.926]   - Field: ‘node’
[09:31:04.926]   - Field: ‘label’
[09:31:04.926]   - Field: ‘local’
[09:31:04.926]   - Field: ‘owner’
[09:31:04.926]   - Field: ‘envir’
[09:31:04.926]   - Field: ‘workers’
[09:31:04.926]   - Field: ‘packages’
[09:31:04.927]   - Field: ‘gc’
[09:31:04.927]   - Field: ‘conditions’
[09:31:04.927]   - Field: ‘persistent’
[09:31:04.927]   - Field: ‘expr’
[09:31:04.927]   - Field: ‘uuid’
[09:31:04.927]   - Field: ‘seed’
[09:31:04.927]   - Field: ‘version’
[09:31:04.927]   - Field: ‘result’
[09:31:04.927]   - Field: ‘asynchronous’
[09:31:04.927]   - Field: ‘calls’
[09:31:04.927]   - Field: ‘globals’
[09:31:04.927]   - Field: ‘stdout’
[09:31:04.928]   - Field: ‘earlySignal’
[09:31:04.928]   - Field: ‘lazy’
[09:31:04.928]   - Field: ‘state’
[09:31:04.928] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:04.928] - Launch lazy future ...
[09:31:04.928] Packages needed by the future expression (n = 0): <none>
[09:31:04.928] Packages needed by future strategies (n = 0): <none>
[09:31:04.929] {
[09:31:04.929]     {
[09:31:04.929]         {
[09:31:04.929]             ...future.startTime <- base::Sys.time()
[09:31:04.929]             {
[09:31:04.929]                 {
[09:31:04.929]                   {
[09:31:04.929]                     {
[09:31:04.929]                       base::local({
[09:31:04.929]                         has_future <- base::requireNamespace("future", 
[09:31:04.929]                           quietly = TRUE)
[09:31:04.929]                         if (has_future) {
[09:31:04.929]                           ns <- base::getNamespace("future")
[09:31:04.929]                           version <- ns[[".package"]][["version"]]
[09:31:04.929]                           if (is.null(version)) 
[09:31:04.929]                             version <- utils::packageVersion("future")
[09:31:04.929]                         }
[09:31:04.929]                         else {
[09:31:04.929]                           version <- NULL
[09:31:04.929]                         }
[09:31:04.929]                         if (!has_future || version < "1.8.0") {
[09:31:04.929]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:04.929]                             "", base::R.version$version.string), 
[09:31:04.929]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:04.929]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:04.929]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:04.929]                               "release", "version")], collapse = " "), 
[09:31:04.929]                             hostname = base::Sys.info()[["nodename"]])
[09:31:04.929]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:04.929]                             info)
[09:31:04.929]                           info <- base::paste(info, collapse = "; ")
[09:31:04.929]                           if (!has_future) {
[09:31:04.929]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:04.929]                               info)
[09:31:04.929]                           }
[09:31:04.929]                           else {
[09:31:04.929]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:04.929]                               info, version)
[09:31:04.929]                           }
[09:31:04.929]                           base::stop(msg)
[09:31:04.929]                         }
[09:31:04.929]                       })
[09:31:04.929]                     }
[09:31:04.929]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:04.929]                     base::options(mc.cores = 1L)
[09:31:04.929]                   }
[09:31:04.929]                   ...future.strategy.old <- future::plan("list")
[09:31:04.929]                   options(future.plan = NULL)
[09:31:04.929]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.929]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:04.929]                 }
[09:31:04.929]                 ...future.workdir <- getwd()
[09:31:04.929]             }
[09:31:04.929]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:04.929]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:04.929]         }
[09:31:04.929]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:04.929]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:04.929]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:04.929]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:04.929]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:04.929]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:04.929]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:04.929]             base::names(...future.oldOptions))
[09:31:04.929]     }
[09:31:04.929]     if (FALSE) {
[09:31:04.929]     }
[09:31:04.929]     else {
[09:31:04.929]         if (TRUE) {
[09:31:04.929]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:04.929]                 open = "w")
[09:31:04.929]         }
[09:31:04.929]         else {
[09:31:04.929]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:04.929]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:04.929]         }
[09:31:04.929]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:04.929]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:04.929]             base::sink(type = "output", split = FALSE)
[09:31:04.929]             base::close(...future.stdout)
[09:31:04.929]         }, add = TRUE)
[09:31:04.929]     }
[09:31:04.929]     ...future.frame <- base::sys.nframe()
[09:31:04.929]     ...future.conditions <- base::list()
[09:31:04.929]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:04.929]     if (FALSE) {
[09:31:04.929]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:04.929]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:04.929]     }
[09:31:04.929]     ...future.result <- base::tryCatch({
[09:31:04.929]         base::withCallingHandlers({
[09:31:04.929]             ...future.value <- base::withVisible(base::local({
[09:31:04.929]                 ...future.makeSendCondition <- base::local({
[09:31:04.929]                   sendCondition <- NULL
[09:31:04.929]                   function(frame = 1L) {
[09:31:04.929]                     if (is.function(sendCondition)) 
[09:31:04.929]                       return(sendCondition)
[09:31:04.929]                     ns <- getNamespace("parallel")
[09:31:04.929]                     if (exists("sendData", mode = "function", 
[09:31:04.929]                       envir = ns)) {
[09:31:04.929]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:04.929]                         envir = ns)
[09:31:04.929]                       envir <- sys.frame(frame)
[09:31:04.929]                       master <- NULL
[09:31:04.929]                       while (!identical(envir, .GlobalEnv) && 
[09:31:04.929]                         !identical(envir, emptyenv())) {
[09:31:04.929]                         if (exists("master", mode = "list", envir = envir, 
[09:31:04.929]                           inherits = FALSE)) {
[09:31:04.929]                           master <- get("master", mode = "list", 
[09:31:04.929]                             envir = envir, inherits = FALSE)
[09:31:04.929]                           if (inherits(master, c("SOCKnode", 
[09:31:04.929]                             "SOCK0node"))) {
[09:31:04.929]                             sendCondition <<- function(cond) {
[09:31:04.929]                               data <- list(type = "VALUE", value = cond, 
[09:31:04.929]                                 success = TRUE)
[09:31:04.929]                               parallel_sendData(master, data)
[09:31:04.929]                             }
[09:31:04.929]                             return(sendCondition)
[09:31:04.929]                           }
[09:31:04.929]                         }
[09:31:04.929]                         frame <- frame + 1L
[09:31:04.929]                         envir <- sys.frame(frame)
[09:31:04.929]                       }
[09:31:04.929]                     }
[09:31:04.929]                     sendCondition <<- function(cond) NULL
[09:31:04.929]                   }
[09:31:04.929]                 })
[09:31:04.929]                 withCallingHandlers({
[09:31:04.929]                   {
[09:31:04.929]                     if (ii%%2 == 0) 
[09:31:04.929]                       stop("Woops!")
[09:31:04.929]                     ii
[09:31:04.929]                   }
[09:31:04.929]                 }, immediateCondition = function(cond) {
[09:31:04.929]                   sendCondition <- ...future.makeSendCondition()
[09:31:04.929]                   sendCondition(cond)
[09:31:04.929]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.929]                   {
[09:31:04.929]                     inherits <- base::inherits
[09:31:04.929]                     invokeRestart <- base::invokeRestart
[09:31:04.929]                     is.null <- base::is.null
[09:31:04.929]                     muffled <- FALSE
[09:31:04.929]                     if (inherits(cond, "message")) {
[09:31:04.929]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:04.929]                       if (muffled) 
[09:31:04.929]                         invokeRestart("muffleMessage")
[09:31:04.929]                     }
[09:31:04.929]                     else if (inherits(cond, "warning")) {
[09:31:04.929]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:04.929]                       if (muffled) 
[09:31:04.929]                         invokeRestart("muffleWarning")
[09:31:04.929]                     }
[09:31:04.929]                     else if (inherits(cond, "condition")) {
[09:31:04.929]                       if (!is.null(pattern)) {
[09:31:04.929]                         computeRestarts <- base::computeRestarts
[09:31:04.929]                         grepl <- base::grepl
[09:31:04.929]                         restarts <- computeRestarts(cond)
[09:31:04.929]                         for (restart in restarts) {
[09:31:04.929]                           name <- restart$name
[09:31:04.929]                           if (is.null(name)) 
[09:31:04.929]                             next
[09:31:04.929]                           if (!grepl(pattern, name)) 
[09:31:04.929]                             next
[09:31:04.929]                           invokeRestart(restart)
[09:31:04.929]                           muffled <- TRUE
[09:31:04.929]                           break
[09:31:04.929]                         }
[09:31:04.929]                       }
[09:31:04.929]                     }
[09:31:04.929]                     invisible(muffled)
[09:31:04.929]                   }
[09:31:04.929]                   muffleCondition(cond)
[09:31:04.929]                 })
[09:31:04.929]             }))
[09:31:04.929]             future::FutureResult(value = ...future.value$value, 
[09:31:04.929]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.929]                   ...future.rng), globalenv = if (FALSE) 
[09:31:04.929]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:04.929]                     ...future.globalenv.names))
[09:31:04.929]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:04.929]         }, condition = base::local({
[09:31:04.929]             c <- base::c
[09:31:04.929]             inherits <- base::inherits
[09:31:04.929]             invokeRestart <- base::invokeRestart
[09:31:04.929]             length <- base::length
[09:31:04.929]             list <- base::list
[09:31:04.929]             seq.int <- base::seq.int
[09:31:04.929]             signalCondition <- base::signalCondition
[09:31:04.929]             sys.calls <- base::sys.calls
[09:31:04.929]             `[[` <- base::`[[`
[09:31:04.929]             `+` <- base::`+`
[09:31:04.929]             `<<-` <- base::`<<-`
[09:31:04.929]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:04.929]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:04.929]                   3L)]
[09:31:04.929]             }
[09:31:04.929]             function(cond) {
[09:31:04.929]                 is_error <- inherits(cond, "error")
[09:31:04.929]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:04.929]                   NULL)
[09:31:04.929]                 if (is_error) {
[09:31:04.929]                   sessionInformation <- function() {
[09:31:04.929]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:04.929]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:04.929]                       search = base::search(), system = base::Sys.info())
[09:31:04.929]                   }
[09:31:04.929]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.929]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:04.929]                     cond$call), session = sessionInformation(), 
[09:31:04.929]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:04.929]                   signalCondition(cond)
[09:31:04.929]                 }
[09:31:04.929]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:04.929]                 "immediateCondition"))) {
[09:31:04.929]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:04.929]                   ...future.conditions[[length(...future.conditions) + 
[09:31:04.929]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:04.929]                   if (TRUE && !signal) {
[09:31:04.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.929]                     {
[09:31:04.929]                       inherits <- base::inherits
[09:31:04.929]                       invokeRestart <- base::invokeRestart
[09:31:04.929]                       is.null <- base::is.null
[09:31:04.929]                       muffled <- FALSE
[09:31:04.929]                       if (inherits(cond, "message")) {
[09:31:04.929]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.929]                         if (muffled) 
[09:31:04.929]                           invokeRestart("muffleMessage")
[09:31:04.929]                       }
[09:31:04.929]                       else if (inherits(cond, "warning")) {
[09:31:04.929]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.929]                         if (muffled) 
[09:31:04.929]                           invokeRestart("muffleWarning")
[09:31:04.929]                       }
[09:31:04.929]                       else if (inherits(cond, "condition")) {
[09:31:04.929]                         if (!is.null(pattern)) {
[09:31:04.929]                           computeRestarts <- base::computeRestarts
[09:31:04.929]                           grepl <- base::grepl
[09:31:04.929]                           restarts <- computeRestarts(cond)
[09:31:04.929]                           for (restart in restarts) {
[09:31:04.929]                             name <- restart$name
[09:31:04.929]                             if (is.null(name)) 
[09:31:04.929]                               next
[09:31:04.929]                             if (!grepl(pattern, name)) 
[09:31:04.929]                               next
[09:31:04.929]                             invokeRestart(restart)
[09:31:04.929]                             muffled <- TRUE
[09:31:04.929]                             break
[09:31:04.929]                           }
[09:31:04.929]                         }
[09:31:04.929]                       }
[09:31:04.929]                       invisible(muffled)
[09:31:04.929]                     }
[09:31:04.929]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.929]                   }
[09:31:04.929]                 }
[09:31:04.929]                 else {
[09:31:04.929]                   if (TRUE) {
[09:31:04.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:04.929]                     {
[09:31:04.929]                       inherits <- base::inherits
[09:31:04.929]                       invokeRestart <- base::invokeRestart
[09:31:04.929]                       is.null <- base::is.null
[09:31:04.929]                       muffled <- FALSE
[09:31:04.929]                       if (inherits(cond, "message")) {
[09:31:04.929]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:04.929]                         if (muffled) 
[09:31:04.929]                           invokeRestart("muffleMessage")
[09:31:04.929]                       }
[09:31:04.929]                       else if (inherits(cond, "warning")) {
[09:31:04.929]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:04.929]                         if (muffled) 
[09:31:04.929]                           invokeRestart("muffleWarning")
[09:31:04.929]                       }
[09:31:04.929]                       else if (inherits(cond, "condition")) {
[09:31:04.929]                         if (!is.null(pattern)) {
[09:31:04.929]                           computeRestarts <- base::computeRestarts
[09:31:04.929]                           grepl <- base::grepl
[09:31:04.929]                           restarts <- computeRestarts(cond)
[09:31:04.929]                           for (restart in restarts) {
[09:31:04.929]                             name <- restart$name
[09:31:04.929]                             if (is.null(name)) 
[09:31:04.929]                               next
[09:31:04.929]                             if (!grepl(pattern, name)) 
[09:31:04.929]                               next
[09:31:04.929]                             invokeRestart(restart)
[09:31:04.929]                             muffled <- TRUE
[09:31:04.929]                             break
[09:31:04.929]                           }
[09:31:04.929]                         }
[09:31:04.929]                       }
[09:31:04.929]                       invisible(muffled)
[09:31:04.929]                     }
[09:31:04.929]                     muffleCondition(cond, pattern = "^muffle")
[09:31:04.929]                   }
[09:31:04.929]                 }
[09:31:04.929]             }
[09:31:04.929]         }))
[09:31:04.929]     }, error = function(ex) {
[09:31:04.929]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:04.929]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:04.929]                 ...future.rng), started = ...future.startTime, 
[09:31:04.929]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:04.929]             version = "1.8"), class = "FutureResult")
[09:31:04.929]     }, finally = {
[09:31:04.929]         if (!identical(...future.workdir, getwd())) 
[09:31:04.929]             setwd(...future.workdir)
[09:31:04.929]         {
[09:31:04.929]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:04.929]                 ...future.oldOptions$nwarnings <- NULL
[09:31:04.929]             }
[09:31:04.929]             base::options(...future.oldOptions)
[09:31:04.929]             if (.Platform$OS.type == "windows") {
[09:31:04.929]                 old_names <- names(...future.oldEnvVars)
[09:31:04.929]                 envs <- base::Sys.getenv()
[09:31:04.929]                 names <- names(envs)
[09:31:04.929]                 common <- intersect(names, old_names)
[09:31:04.929]                 added <- setdiff(names, old_names)
[09:31:04.929]                 removed <- setdiff(old_names, names)
[09:31:04.929]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:04.929]                   envs[common]]
[09:31:04.929]                 NAMES <- toupper(changed)
[09:31:04.929]                 args <- list()
[09:31:04.929]                 for (kk in seq_along(NAMES)) {
[09:31:04.929]                   name <- changed[[kk]]
[09:31:04.929]                   NAME <- NAMES[[kk]]
[09:31:04.929]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.929]                     next
[09:31:04.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.929]                 }
[09:31:04.929]                 NAMES <- toupper(added)
[09:31:04.929]                 for (kk in seq_along(NAMES)) {
[09:31:04.929]                   name <- added[[kk]]
[09:31:04.929]                   NAME <- NAMES[[kk]]
[09:31:04.929]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.929]                     next
[09:31:04.929]                   args[[name]] <- ""
[09:31:04.929]                 }
[09:31:04.929]                 NAMES <- toupper(removed)
[09:31:04.929]                 for (kk in seq_along(NAMES)) {
[09:31:04.929]                   name <- removed[[kk]]
[09:31:04.929]                   NAME <- NAMES[[kk]]
[09:31:04.929]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:04.929]                     next
[09:31:04.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:04.929]                 }
[09:31:04.929]                 if (length(args) > 0) 
[09:31:04.929]                   base::do.call(base::Sys.setenv, args = args)
[09:31:04.929]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:04.929]             }
[09:31:04.929]             else {
[09:31:04.929]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:04.929]             }
[09:31:04.929]             {
[09:31:04.929]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:04.929]                   0L) {
[09:31:04.929]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:04.929]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:04.929]                   base::options(opts)
[09:31:04.929]                 }
[09:31:04.929]                 {
[09:31:04.929]                   {
[09:31:04.929]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:04.929]                     NULL
[09:31:04.929]                   }
[09:31:04.929]                   options(future.plan = NULL)
[09:31:04.929]                   if (is.na(NA_character_)) 
[09:31:04.929]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:04.929]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:04.929]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:04.929]                     .init = FALSE)
[09:31:04.929]                 }
[09:31:04.929]             }
[09:31:04.929]         }
[09:31:04.929]     })
[09:31:04.929]     if (TRUE) {
[09:31:04.929]         base::sink(type = "output", split = FALSE)
[09:31:04.929]         if (TRUE) {
[09:31:04.929]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:04.929]         }
[09:31:04.929]         else {
[09:31:04.929]             ...future.result["stdout"] <- base::list(NULL)
[09:31:04.929]         }
[09:31:04.929]         base::close(...future.stdout)
[09:31:04.929]         ...future.stdout <- NULL
[09:31:04.929]     }
[09:31:04.929]     ...future.result$conditions <- ...future.conditions
[09:31:04.929]     ...future.result$finished <- base::Sys.time()
[09:31:04.929]     ...future.result
[09:31:04.929] }
[09:31:04.979] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[09:31:04.979] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[09:31:04.980] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[09:31:04.980] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[09:31:04.981] MultisessionFuture started
[09:31:04.981] - Launch lazy future ... done
[09:31:04.981] run() for ‘MultisessionFuture’ ... done
[09:31:04.981] getGlobalsAndPackages() ...
[09:31:04.981] Searching for globals...
[09:31:04.983] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[09:31:04.983] Searching for globals ... DONE
[09:31:04.983] Resolving globals: FALSE
[09:31:04.983] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:04.984] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:04.984] - globals: [1] ‘ii’
[09:31:04.984] 
[09:31:04.984] getGlobalsAndPackages() ... DONE
[09:31:04.984] run() for ‘Future’ ...
[09:31:04.985] - state: ‘created’
[09:31:04.985] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:04.999] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:04.999] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:05.000]   - Field: ‘node’
[09:31:05.000]   - Field: ‘label’
[09:31:05.000]   - Field: ‘local’
[09:31:05.000]   - Field: ‘owner’
[09:31:05.000]   - Field: ‘envir’
[09:31:05.000]   - Field: ‘workers’
[09:31:05.000]   - Field: ‘packages’
[09:31:05.000]   - Field: ‘gc’
[09:31:05.000]   - Field: ‘conditions’
[09:31:05.000]   - Field: ‘persistent’
[09:31:05.001]   - Field: ‘expr’
[09:31:05.001]   - Field: ‘uuid’
[09:31:05.001]   - Field: ‘seed’
[09:31:05.001]   - Field: ‘version’
[09:31:05.001]   - Field: ‘result’
[09:31:05.001]   - Field: ‘asynchronous’
[09:31:05.001]   - Field: ‘calls’
[09:31:05.001]   - Field: ‘globals’
[09:31:05.001]   - Field: ‘stdout’
[09:31:05.001]   - Field: ‘earlySignal’
[09:31:05.001]   - Field: ‘lazy’
[09:31:05.002]   - Field: ‘state’
[09:31:05.002] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:05.002] - Launch lazy future ...
[09:31:05.002] Packages needed by the future expression (n = 0): <none>
[09:31:05.002] Packages needed by future strategies (n = 0): <none>
[09:31:05.003] {
[09:31:05.003]     {
[09:31:05.003]         {
[09:31:05.003]             ...future.startTime <- base::Sys.time()
[09:31:05.003]             {
[09:31:05.003]                 {
[09:31:05.003]                   {
[09:31:05.003]                     {
[09:31:05.003]                       base::local({
[09:31:05.003]                         has_future <- base::requireNamespace("future", 
[09:31:05.003]                           quietly = TRUE)
[09:31:05.003]                         if (has_future) {
[09:31:05.003]                           ns <- base::getNamespace("future")
[09:31:05.003]                           version <- ns[[".package"]][["version"]]
[09:31:05.003]                           if (is.null(version)) 
[09:31:05.003]                             version <- utils::packageVersion("future")
[09:31:05.003]                         }
[09:31:05.003]                         else {
[09:31:05.003]                           version <- NULL
[09:31:05.003]                         }
[09:31:05.003]                         if (!has_future || version < "1.8.0") {
[09:31:05.003]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.003]                             "", base::R.version$version.string), 
[09:31:05.003]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:05.003]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.003]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.003]                               "release", "version")], collapse = " "), 
[09:31:05.003]                             hostname = base::Sys.info()[["nodename"]])
[09:31:05.003]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.003]                             info)
[09:31:05.003]                           info <- base::paste(info, collapse = "; ")
[09:31:05.003]                           if (!has_future) {
[09:31:05.003]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.003]                               info)
[09:31:05.003]                           }
[09:31:05.003]                           else {
[09:31:05.003]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.003]                               info, version)
[09:31:05.003]                           }
[09:31:05.003]                           base::stop(msg)
[09:31:05.003]                         }
[09:31:05.003]                       })
[09:31:05.003]                     }
[09:31:05.003]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.003]                     base::options(mc.cores = 1L)
[09:31:05.003]                   }
[09:31:05.003]                   ...future.strategy.old <- future::plan("list")
[09:31:05.003]                   options(future.plan = NULL)
[09:31:05.003]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.003]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.003]                 }
[09:31:05.003]                 ...future.workdir <- getwd()
[09:31:05.003]             }
[09:31:05.003]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.003]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.003]         }
[09:31:05.003]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.003]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.003]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.003]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.003]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.003]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.003]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.003]             base::names(...future.oldOptions))
[09:31:05.003]     }
[09:31:05.003]     if (FALSE) {
[09:31:05.003]     }
[09:31:05.003]     else {
[09:31:05.003]         if (TRUE) {
[09:31:05.003]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.003]                 open = "w")
[09:31:05.003]         }
[09:31:05.003]         else {
[09:31:05.003]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.003]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.003]         }
[09:31:05.003]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.003]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.003]             base::sink(type = "output", split = FALSE)
[09:31:05.003]             base::close(...future.stdout)
[09:31:05.003]         }, add = TRUE)
[09:31:05.003]     }
[09:31:05.003]     ...future.frame <- base::sys.nframe()
[09:31:05.003]     ...future.conditions <- base::list()
[09:31:05.003]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.003]     if (FALSE) {
[09:31:05.003]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.003]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.003]     }
[09:31:05.003]     ...future.result <- base::tryCatch({
[09:31:05.003]         base::withCallingHandlers({
[09:31:05.003]             ...future.value <- base::withVisible(base::local({
[09:31:05.003]                 ...future.makeSendCondition <- base::local({
[09:31:05.003]                   sendCondition <- NULL
[09:31:05.003]                   function(frame = 1L) {
[09:31:05.003]                     if (is.function(sendCondition)) 
[09:31:05.003]                       return(sendCondition)
[09:31:05.003]                     ns <- getNamespace("parallel")
[09:31:05.003]                     if (exists("sendData", mode = "function", 
[09:31:05.003]                       envir = ns)) {
[09:31:05.003]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:05.003]                         envir = ns)
[09:31:05.003]                       envir <- sys.frame(frame)
[09:31:05.003]                       master <- NULL
[09:31:05.003]                       while (!identical(envir, .GlobalEnv) && 
[09:31:05.003]                         !identical(envir, emptyenv())) {
[09:31:05.003]                         if (exists("master", mode = "list", envir = envir, 
[09:31:05.003]                           inherits = FALSE)) {
[09:31:05.003]                           master <- get("master", mode = "list", 
[09:31:05.003]                             envir = envir, inherits = FALSE)
[09:31:05.003]                           if (inherits(master, c("SOCKnode", 
[09:31:05.003]                             "SOCK0node"))) {
[09:31:05.003]                             sendCondition <<- function(cond) {
[09:31:05.003]                               data <- list(type = "VALUE", value = cond, 
[09:31:05.003]                                 success = TRUE)
[09:31:05.003]                               parallel_sendData(master, data)
[09:31:05.003]                             }
[09:31:05.003]                             return(sendCondition)
[09:31:05.003]                           }
[09:31:05.003]                         }
[09:31:05.003]                         frame <- frame + 1L
[09:31:05.003]                         envir <- sys.frame(frame)
[09:31:05.003]                       }
[09:31:05.003]                     }
[09:31:05.003]                     sendCondition <<- function(cond) NULL
[09:31:05.003]                   }
[09:31:05.003]                 })
[09:31:05.003]                 withCallingHandlers({
[09:31:05.003]                   {
[09:31:05.003]                     if (ii%%2 == 0) 
[09:31:05.003]                       stop("Woops!")
[09:31:05.003]                     ii
[09:31:05.003]                   }
[09:31:05.003]                 }, immediateCondition = function(cond) {
[09:31:05.003]                   sendCondition <- ...future.makeSendCondition()
[09:31:05.003]                   sendCondition(cond)
[09:31:05.003]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.003]                   {
[09:31:05.003]                     inherits <- base::inherits
[09:31:05.003]                     invokeRestart <- base::invokeRestart
[09:31:05.003]                     is.null <- base::is.null
[09:31:05.003]                     muffled <- FALSE
[09:31:05.003]                     if (inherits(cond, "message")) {
[09:31:05.003]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.003]                       if (muffled) 
[09:31:05.003]                         invokeRestart("muffleMessage")
[09:31:05.003]                     }
[09:31:05.003]                     else if (inherits(cond, "warning")) {
[09:31:05.003]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.003]                       if (muffled) 
[09:31:05.003]                         invokeRestart("muffleWarning")
[09:31:05.003]                     }
[09:31:05.003]                     else if (inherits(cond, "condition")) {
[09:31:05.003]                       if (!is.null(pattern)) {
[09:31:05.003]                         computeRestarts <- base::computeRestarts
[09:31:05.003]                         grepl <- base::grepl
[09:31:05.003]                         restarts <- computeRestarts(cond)
[09:31:05.003]                         for (restart in restarts) {
[09:31:05.003]                           name <- restart$name
[09:31:05.003]                           if (is.null(name)) 
[09:31:05.003]                             next
[09:31:05.003]                           if (!grepl(pattern, name)) 
[09:31:05.003]                             next
[09:31:05.003]                           invokeRestart(restart)
[09:31:05.003]                           muffled <- TRUE
[09:31:05.003]                           break
[09:31:05.003]                         }
[09:31:05.003]                       }
[09:31:05.003]                     }
[09:31:05.003]                     invisible(muffled)
[09:31:05.003]                   }
[09:31:05.003]                   muffleCondition(cond)
[09:31:05.003]                 })
[09:31:05.003]             }))
[09:31:05.003]             future::FutureResult(value = ...future.value$value, 
[09:31:05.003]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.003]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.003]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.003]                     ...future.globalenv.names))
[09:31:05.003]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.003]         }, condition = base::local({
[09:31:05.003]             c <- base::c
[09:31:05.003]             inherits <- base::inherits
[09:31:05.003]             invokeRestart <- base::invokeRestart
[09:31:05.003]             length <- base::length
[09:31:05.003]             list <- base::list
[09:31:05.003]             seq.int <- base::seq.int
[09:31:05.003]             signalCondition <- base::signalCondition
[09:31:05.003]             sys.calls <- base::sys.calls
[09:31:05.003]             `[[` <- base::`[[`
[09:31:05.003]             `+` <- base::`+`
[09:31:05.003]             `<<-` <- base::`<<-`
[09:31:05.003]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.003]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.003]                   3L)]
[09:31:05.003]             }
[09:31:05.003]             function(cond) {
[09:31:05.003]                 is_error <- inherits(cond, "error")
[09:31:05.003]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.003]                   NULL)
[09:31:05.003]                 if (is_error) {
[09:31:05.003]                   sessionInformation <- function() {
[09:31:05.003]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.003]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.003]                       search = base::search(), system = base::Sys.info())
[09:31:05.003]                   }
[09:31:05.003]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.003]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.003]                     cond$call), session = sessionInformation(), 
[09:31:05.003]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.003]                   signalCondition(cond)
[09:31:05.003]                 }
[09:31:05.003]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.003]                 "immediateCondition"))) {
[09:31:05.003]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.003]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.003]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.003]                   if (TRUE && !signal) {
[09:31:05.003]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.003]                     {
[09:31:05.003]                       inherits <- base::inherits
[09:31:05.003]                       invokeRestart <- base::invokeRestart
[09:31:05.003]                       is.null <- base::is.null
[09:31:05.003]                       muffled <- FALSE
[09:31:05.003]                       if (inherits(cond, "message")) {
[09:31:05.003]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.003]                         if (muffled) 
[09:31:05.003]                           invokeRestart("muffleMessage")
[09:31:05.003]                       }
[09:31:05.003]                       else if (inherits(cond, "warning")) {
[09:31:05.003]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.003]                         if (muffled) 
[09:31:05.003]                           invokeRestart("muffleWarning")
[09:31:05.003]                       }
[09:31:05.003]                       else if (inherits(cond, "condition")) {
[09:31:05.003]                         if (!is.null(pattern)) {
[09:31:05.003]                           computeRestarts <- base::computeRestarts
[09:31:05.003]                           grepl <- base::grepl
[09:31:05.003]                           restarts <- computeRestarts(cond)
[09:31:05.003]                           for (restart in restarts) {
[09:31:05.003]                             name <- restart$name
[09:31:05.003]                             if (is.null(name)) 
[09:31:05.003]                               next
[09:31:05.003]                             if (!grepl(pattern, name)) 
[09:31:05.003]                               next
[09:31:05.003]                             invokeRestart(restart)
[09:31:05.003]                             muffled <- TRUE
[09:31:05.003]                             break
[09:31:05.003]                           }
[09:31:05.003]                         }
[09:31:05.003]                       }
[09:31:05.003]                       invisible(muffled)
[09:31:05.003]                     }
[09:31:05.003]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.003]                   }
[09:31:05.003]                 }
[09:31:05.003]                 else {
[09:31:05.003]                   if (TRUE) {
[09:31:05.003]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.003]                     {
[09:31:05.003]                       inherits <- base::inherits
[09:31:05.003]                       invokeRestart <- base::invokeRestart
[09:31:05.003]                       is.null <- base::is.null
[09:31:05.003]                       muffled <- FALSE
[09:31:05.003]                       if (inherits(cond, "message")) {
[09:31:05.003]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.003]                         if (muffled) 
[09:31:05.003]                           invokeRestart("muffleMessage")
[09:31:05.003]                       }
[09:31:05.003]                       else if (inherits(cond, "warning")) {
[09:31:05.003]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.003]                         if (muffled) 
[09:31:05.003]                           invokeRestart("muffleWarning")
[09:31:05.003]                       }
[09:31:05.003]                       else if (inherits(cond, "condition")) {
[09:31:05.003]                         if (!is.null(pattern)) {
[09:31:05.003]                           computeRestarts <- base::computeRestarts
[09:31:05.003]                           grepl <- base::grepl
[09:31:05.003]                           restarts <- computeRestarts(cond)
[09:31:05.003]                           for (restart in restarts) {
[09:31:05.003]                             name <- restart$name
[09:31:05.003]                             if (is.null(name)) 
[09:31:05.003]                               next
[09:31:05.003]                             if (!grepl(pattern, name)) 
[09:31:05.003]                               next
[09:31:05.003]                             invokeRestart(restart)
[09:31:05.003]                             muffled <- TRUE
[09:31:05.003]                             break
[09:31:05.003]                           }
[09:31:05.003]                         }
[09:31:05.003]                       }
[09:31:05.003]                       invisible(muffled)
[09:31:05.003]                     }
[09:31:05.003]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.003]                   }
[09:31:05.003]                 }
[09:31:05.003]             }
[09:31:05.003]         }))
[09:31:05.003]     }, error = function(ex) {
[09:31:05.003]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.003]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.003]                 ...future.rng), started = ...future.startTime, 
[09:31:05.003]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.003]             version = "1.8"), class = "FutureResult")
[09:31:05.003]     }, finally = {
[09:31:05.003]         if (!identical(...future.workdir, getwd())) 
[09:31:05.003]             setwd(...future.workdir)
[09:31:05.003]         {
[09:31:05.003]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.003]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.003]             }
[09:31:05.003]             base::options(...future.oldOptions)
[09:31:05.003]             if (.Platform$OS.type == "windows") {
[09:31:05.003]                 old_names <- names(...future.oldEnvVars)
[09:31:05.003]                 envs <- base::Sys.getenv()
[09:31:05.003]                 names <- names(envs)
[09:31:05.003]                 common <- intersect(names, old_names)
[09:31:05.003]                 added <- setdiff(names, old_names)
[09:31:05.003]                 removed <- setdiff(old_names, names)
[09:31:05.003]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.003]                   envs[common]]
[09:31:05.003]                 NAMES <- toupper(changed)
[09:31:05.003]                 args <- list()
[09:31:05.003]                 for (kk in seq_along(NAMES)) {
[09:31:05.003]                   name <- changed[[kk]]
[09:31:05.003]                   NAME <- NAMES[[kk]]
[09:31:05.003]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.003]                     next
[09:31:05.003]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.003]                 }
[09:31:05.003]                 NAMES <- toupper(added)
[09:31:05.003]                 for (kk in seq_along(NAMES)) {
[09:31:05.003]                   name <- added[[kk]]
[09:31:05.003]                   NAME <- NAMES[[kk]]
[09:31:05.003]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.003]                     next
[09:31:05.003]                   args[[name]] <- ""
[09:31:05.003]                 }
[09:31:05.003]                 NAMES <- toupper(removed)
[09:31:05.003]                 for (kk in seq_along(NAMES)) {
[09:31:05.003]                   name <- removed[[kk]]
[09:31:05.003]                   NAME <- NAMES[[kk]]
[09:31:05.003]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.003]                     next
[09:31:05.003]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.003]                 }
[09:31:05.003]                 if (length(args) > 0) 
[09:31:05.003]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.003]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.003]             }
[09:31:05.003]             else {
[09:31:05.003]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.003]             }
[09:31:05.003]             {
[09:31:05.003]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.003]                   0L) {
[09:31:05.003]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.003]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.003]                   base::options(opts)
[09:31:05.003]                 }
[09:31:05.003]                 {
[09:31:05.003]                   {
[09:31:05.003]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.003]                     NULL
[09:31:05.003]                   }
[09:31:05.003]                   options(future.plan = NULL)
[09:31:05.003]                   if (is.na(NA_character_)) 
[09:31:05.003]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.003]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.003]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.003]                     .init = FALSE)
[09:31:05.003]                 }
[09:31:05.003]             }
[09:31:05.003]         }
[09:31:05.003]     })
[09:31:05.003]     if (TRUE) {
[09:31:05.003]         base::sink(type = "output", split = FALSE)
[09:31:05.003]         if (TRUE) {
[09:31:05.003]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.003]         }
[09:31:05.003]         else {
[09:31:05.003]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.003]         }
[09:31:05.003]         base::close(...future.stdout)
[09:31:05.003]         ...future.stdout <- NULL
[09:31:05.003]     }
[09:31:05.003]     ...future.result$conditions <- ...future.conditions
[09:31:05.003]     ...future.result$finished <- base::Sys.time()
[09:31:05.003]     ...future.result
[09:31:05.003] }
[09:31:05.005] Poll #1 (0): usedNodes() = 2, workers = 2
[09:31:05.023] receiveMessageFromWorker() for ClusterFuture ...
[09:31:05.024] - Validating connection of MultisessionFuture
[09:31:05.024] - received message: FutureResult
[09:31:05.024] - Received FutureResult
[09:31:05.024] - Erased future from FutureRegistry
[09:31:05.024] result() for ClusterFuture ...
[09:31:05.024] - result already collected: FutureResult
[09:31:05.024] result() for ClusterFuture ... done
[09:31:05.024] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:05.025] result() for ClusterFuture ...
[09:31:05.025] - result already collected: FutureResult
[09:31:05.025] result() for ClusterFuture ... done
[09:31:05.025] result() for ClusterFuture ...
[09:31:05.025] - result already collected: FutureResult
[09:31:05.025] result() for ClusterFuture ... done
[09:31:05.026] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[09:31:05.026] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[09:31:05.026] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[09:31:05.026] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[09:31:05.027] MultisessionFuture started
[09:31:05.027] - Launch lazy future ... done
[09:31:05.027] run() for ‘MultisessionFuture’ ... done
[09:31:05.027] result() for ClusterFuture ...
[09:31:05.028] - result already collected: FutureResult
[09:31:05.028] result() for ClusterFuture ... done
[09:31:05.028] result() for ClusterFuture ...
[09:31:05.028] - result already collected: FutureResult
[09:31:05.028] result() for ClusterFuture ... done
[09:31:05.028] result() for ClusterFuture ...
[09:31:05.029] receiveMessageFromWorker() for ClusterFuture ...
[09:31:05.029] - Validating connection of MultisessionFuture
[09:31:05.029] - received message: FutureResult
[09:31:05.029] - Received FutureResult
[09:31:05.030] - Erased future from FutureRegistry
[09:31:05.030] result() for ClusterFuture ...
[09:31:05.030] - result already collected: FutureResult
[09:31:05.030] result() for ClusterFuture ... done
[09:31:05.030] signalConditions() ...
[09:31:05.030]  - include = ‘immediateCondition’
[09:31:05.030]  - exclude = 
[09:31:05.030]  - resignal = FALSE
[09:31:05.030]  - Number of conditions: 1
[09:31:05.030] signalConditions() ... done
[09:31:05.030] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:05.030] result() for ClusterFuture ... done
[09:31:05.031] result() for ClusterFuture ...
[09:31:05.031] - result already collected: FutureResult
[09:31:05.031] result() for ClusterFuture ... done
[09:31:05.031] signalConditions() ...
[09:31:05.031]  - include = ‘immediateCondition’
[09:31:05.031]  - exclude = 
[09:31:05.031]  - resignal = FALSE
[09:31:05.031]  - Number of conditions: 1
[09:31:05.031] signalConditions() ... done
[09:31:05.031] Future state: ‘finished’
[09:31:05.031] result() for ClusterFuture ...
[09:31:05.032] - result already collected: FutureResult
[09:31:05.032] result() for ClusterFuture ... done
[09:31:05.032] signalConditions() ...
[09:31:05.032]  - include = ‘condition’
[09:31:05.032]  - exclude = ‘immediateCondition’
[09:31:05.032]  - resignal = TRUE
[09:31:05.032]  - Number of conditions: 1
[09:31:05.032]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:05.032] signalConditions() ... done
[09:31:05.033] result() for ClusterFuture ...
[09:31:05.033] receiveMessageFromWorker() for ClusterFuture ...
[09:31:05.033] - Validating connection of MultisessionFuture
[09:31:05.033] - received message: FutureResult
[09:31:05.033] - Received FutureResult
[09:31:05.033] - Erased future from FutureRegistry
[09:31:05.033] result() for ClusterFuture ...
[09:31:05.033] - result already collected: FutureResult
[09:31:05.033] result() for ClusterFuture ... done
[09:31:05.034] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:05.034] result() for ClusterFuture ... done
[09:31:05.034] result() for ClusterFuture ...
[09:31:05.034] - result already collected: FutureResult
[09:31:05.034] result() for ClusterFuture ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[09:31:05.034] result() for ClusterFuture ...
[09:31:05.034] - result already collected: FutureResult
[09:31:05.034] result() for ClusterFuture ... done
[09:31:05.034] result() for ClusterFuture ...
[09:31:05.034] - result already collected: FutureResult
[09:31:05.035] result() for ClusterFuture ... done
[09:31:05.035] signalConditions() ...
[09:31:05.035]  - include = ‘immediateCondition’
[09:31:05.035]  - exclude = 
[09:31:05.035]  - resignal = FALSE
[09:31:05.035]  - Number of conditions: 1
[09:31:05.035] signalConditions() ... done
[09:31:05.035] Future state: ‘finished’
[09:31:05.035] result() for ClusterFuture ...
[09:31:05.035] - result already collected: FutureResult
[09:31:05.035] result() for ClusterFuture ... done
[09:31:05.036] signalConditions() ...
[09:31:05.036]  - include = ‘condition’
[09:31:05.036]  - exclude = ‘immediateCondition’
[09:31:05.036]  - resignal = TRUE
[09:31:05.036]  - Number of conditions: 1
[09:31:05.036]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:05.036] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[09:31:05.036] result() for ClusterFuture ...
[09:31:05.036] - result already collected: FutureResult
[09:31:05.037] result() for ClusterFuture ... done
[09:31:05.037] result() for ClusterFuture ...
[09:31:05.037] - result already collected: FutureResult
[09:31:05.037] result() for ClusterFuture ... done
[09:31:05.037] signalConditions() ...
[09:31:05.037]  - include = ‘immediateCondition’
[09:31:05.037]  - exclude = 
[09:31:05.037]  - resignal = FALSE
[09:31:05.037]  - Number of conditions: 1
[09:31:05.037] signalConditions() ... done
[09:31:05.037] Future state: ‘finished’
[09:31:05.037] result() for ClusterFuture ...
[09:31:05.038] - result already collected: FutureResult
[09:31:05.038] result() for ClusterFuture ... done
[09:31:05.038] signalConditions() ...
[09:31:05.038]  - include = ‘condition’
[09:31:05.038]  - exclude = ‘immediateCondition’
[09:31:05.038]  - resignal = TRUE
[09:31:05.038]  - Number of conditions: 1
[09:31:05.038]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:05.038] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[09:31:05.039] getGlobalsAndPackages() ...
[09:31:05.039] Searching for globals...
[09:31:05.040] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[09:31:05.041] Searching for globals ... DONE
[09:31:05.041] Resolving globals: FALSE
[09:31:05.041] 
[09:31:05.041] 
[09:31:05.041] getGlobalsAndPackages() ... DONE
[09:31:05.041] run() for ‘Future’ ...
[09:31:05.042] - state: ‘created’
[09:31:05.042] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:05.055] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:05.055] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:05.055]   - Field: ‘node’
[09:31:05.056]   - Field: ‘label’
[09:31:05.056]   - Field: ‘local’
[09:31:05.056]   - Field: ‘owner’
[09:31:05.056]   - Field: ‘envir’
[09:31:05.056]   - Field: ‘workers’
[09:31:05.056]   - Field: ‘packages’
[09:31:05.056]   - Field: ‘gc’
[09:31:05.056]   - Field: ‘conditions’
[09:31:05.056]   - Field: ‘persistent’
[09:31:05.056]   - Field: ‘expr’
[09:31:05.056]   - Field: ‘uuid’
[09:31:05.057]   - Field: ‘seed’
[09:31:05.057]   - Field: ‘version’
[09:31:05.057]   - Field: ‘result’
[09:31:05.057]   - Field: ‘asynchronous’
[09:31:05.057]   - Field: ‘calls’
[09:31:05.057]   - Field: ‘globals’
[09:31:05.057]   - Field: ‘stdout’
[09:31:05.057]   - Field: ‘earlySignal’
[09:31:05.057]   - Field: ‘lazy’
[09:31:05.057]   - Field: ‘state’
[09:31:05.057] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:05.058] - Launch lazy future ...
[09:31:05.058] Packages needed by the future expression (n = 0): <none>
[09:31:05.058] Packages needed by future strategies (n = 0): <none>
[09:31:05.058] {
[09:31:05.058]     {
[09:31:05.058]         {
[09:31:05.058]             ...future.startTime <- base::Sys.time()
[09:31:05.058]             {
[09:31:05.058]                 {
[09:31:05.058]                   {
[09:31:05.058]                     {
[09:31:05.058]                       base::local({
[09:31:05.058]                         has_future <- base::requireNamespace("future", 
[09:31:05.058]                           quietly = TRUE)
[09:31:05.058]                         if (has_future) {
[09:31:05.058]                           ns <- base::getNamespace("future")
[09:31:05.058]                           version <- ns[[".package"]][["version"]]
[09:31:05.058]                           if (is.null(version)) 
[09:31:05.058]                             version <- utils::packageVersion("future")
[09:31:05.058]                         }
[09:31:05.058]                         else {
[09:31:05.058]                           version <- NULL
[09:31:05.058]                         }
[09:31:05.058]                         if (!has_future || version < "1.8.0") {
[09:31:05.058]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.058]                             "", base::R.version$version.string), 
[09:31:05.058]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:05.058]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.058]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.058]                               "release", "version")], collapse = " "), 
[09:31:05.058]                             hostname = base::Sys.info()[["nodename"]])
[09:31:05.058]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.058]                             info)
[09:31:05.058]                           info <- base::paste(info, collapse = "; ")
[09:31:05.058]                           if (!has_future) {
[09:31:05.058]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.058]                               info)
[09:31:05.058]                           }
[09:31:05.058]                           else {
[09:31:05.058]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.058]                               info, version)
[09:31:05.058]                           }
[09:31:05.058]                           base::stop(msg)
[09:31:05.058]                         }
[09:31:05.058]                       })
[09:31:05.058]                     }
[09:31:05.058]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.058]                     base::options(mc.cores = 1L)
[09:31:05.058]                   }
[09:31:05.058]                   ...future.strategy.old <- future::plan("list")
[09:31:05.058]                   options(future.plan = NULL)
[09:31:05.058]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.058]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.058]                 }
[09:31:05.058]                 ...future.workdir <- getwd()
[09:31:05.058]             }
[09:31:05.058]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.058]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.058]         }
[09:31:05.058]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.058]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.058]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.058]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.058]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.058]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.058]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.058]             base::names(...future.oldOptions))
[09:31:05.058]     }
[09:31:05.058]     if (FALSE) {
[09:31:05.058]     }
[09:31:05.058]     else {
[09:31:05.058]         if (TRUE) {
[09:31:05.058]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.058]                 open = "w")
[09:31:05.058]         }
[09:31:05.058]         else {
[09:31:05.058]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.058]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.058]         }
[09:31:05.058]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.058]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.058]             base::sink(type = "output", split = FALSE)
[09:31:05.058]             base::close(...future.stdout)
[09:31:05.058]         }, add = TRUE)
[09:31:05.058]     }
[09:31:05.058]     ...future.frame <- base::sys.nframe()
[09:31:05.058]     ...future.conditions <- base::list()
[09:31:05.058]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.058]     if (FALSE) {
[09:31:05.058]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.058]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.058]     }
[09:31:05.058]     ...future.result <- base::tryCatch({
[09:31:05.058]         base::withCallingHandlers({
[09:31:05.058]             ...future.value <- base::withVisible(base::local({
[09:31:05.058]                 ...future.makeSendCondition <- base::local({
[09:31:05.058]                   sendCondition <- NULL
[09:31:05.058]                   function(frame = 1L) {
[09:31:05.058]                     if (is.function(sendCondition)) 
[09:31:05.058]                       return(sendCondition)
[09:31:05.058]                     ns <- getNamespace("parallel")
[09:31:05.058]                     if (exists("sendData", mode = "function", 
[09:31:05.058]                       envir = ns)) {
[09:31:05.058]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:05.058]                         envir = ns)
[09:31:05.058]                       envir <- sys.frame(frame)
[09:31:05.058]                       master <- NULL
[09:31:05.058]                       while (!identical(envir, .GlobalEnv) && 
[09:31:05.058]                         !identical(envir, emptyenv())) {
[09:31:05.058]                         if (exists("master", mode = "list", envir = envir, 
[09:31:05.058]                           inherits = FALSE)) {
[09:31:05.058]                           master <- get("master", mode = "list", 
[09:31:05.058]                             envir = envir, inherits = FALSE)
[09:31:05.058]                           if (inherits(master, c("SOCKnode", 
[09:31:05.058]                             "SOCK0node"))) {
[09:31:05.058]                             sendCondition <<- function(cond) {
[09:31:05.058]                               data <- list(type = "VALUE", value = cond, 
[09:31:05.058]                                 success = TRUE)
[09:31:05.058]                               parallel_sendData(master, data)
[09:31:05.058]                             }
[09:31:05.058]                             return(sendCondition)
[09:31:05.058]                           }
[09:31:05.058]                         }
[09:31:05.058]                         frame <- frame + 1L
[09:31:05.058]                         envir <- sys.frame(frame)
[09:31:05.058]                       }
[09:31:05.058]                     }
[09:31:05.058]                     sendCondition <<- function(cond) NULL
[09:31:05.058]                   }
[09:31:05.058]                 })
[09:31:05.058]                 withCallingHandlers({
[09:31:05.058]                   {
[09:31:05.058]                     cat("Processing: ")
[09:31:05.058]                     for (ii in 1:10) {
[09:31:05.058]                       cat(".")
[09:31:05.058]                     }
[09:31:05.058]                     cat(" [100%]\n")
[09:31:05.058]                     4
[09:31:05.058]                   }
[09:31:05.058]                 }, immediateCondition = function(cond) {
[09:31:05.058]                   sendCondition <- ...future.makeSendCondition()
[09:31:05.058]                   sendCondition(cond)
[09:31:05.058]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.058]                   {
[09:31:05.058]                     inherits <- base::inherits
[09:31:05.058]                     invokeRestart <- base::invokeRestart
[09:31:05.058]                     is.null <- base::is.null
[09:31:05.058]                     muffled <- FALSE
[09:31:05.058]                     if (inherits(cond, "message")) {
[09:31:05.058]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.058]                       if (muffled) 
[09:31:05.058]                         invokeRestart("muffleMessage")
[09:31:05.058]                     }
[09:31:05.058]                     else if (inherits(cond, "warning")) {
[09:31:05.058]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.058]                       if (muffled) 
[09:31:05.058]                         invokeRestart("muffleWarning")
[09:31:05.058]                     }
[09:31:05.058]                     else if (inherits(cond, "condition")) {
[09:31:05.058]                       if (!is.null(pattern)) {
[09:31:05.058]                         computeRestarts <- base::computeRestarts
[09:31:05.058]                         grepl <- base::grepl
[09:31:05.058]                         restarts <- computeRestarts(cond)
[09:31:05.058]                         for (restart in restarts) {
[09:31:05.058]                           name <- restart$name
[09:31:05.058]                           if (is.null(name)) 
[09:31:05.058]                             next
[09:31:05.058]                           if (!grepl(pattern, name)) 
[09:31:05.058]                             next
[09:31:05.058]                           invokeRestart(restart)
[09:31:05.058]                           muffled <- TRUE
[09:31:05.058]                           break
[09:31:05.058]                         }
[09:31:05.058]                       }
[09:31:05.058]                     }
[09:31:05.058]                     invisible(muffled)
[09:31:05.058]                   }
[09:31:05.058]                   muffleCondition(cond)
[09:31:05.058]                 })
[09:31:05.058]             }))
[09:31:05.058]             future::FutureResult(value = ...future.value$value, 
[09:31:05.058]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.058]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.058]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.058]                     ...future.globalenv.names))
[09:31:05.058]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.058]         }, condition = base::local({
[09:31:05.058]             c <- base::c
[09:31:05.058]             inherits <- base::inherits
[09:31:05.058]             invokeRestart <- base::invokeRestart
[09:31:05.058]             length <- base::length
[09:31:05.058]             list <- base::list
[09:31:05.058]             seq.int <- base::seq.int
[09:31:05.058]             signalCondition <- base::signalCondition
[09:31:05.058]             sys.calls <- base::sys.calls
[09:31:05.058]             `[[` <- base::`[[`
[09:31:05.058]             `+` <- base::`+`
[09:31:05.058]             `<<-` <- base::`<<-`
[09:31:05.058]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.058]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.058]                   3L)]
[09:31:05.058]             }
[09:31:05.058]             function(cond) {
[09:31:05.058]                 is_error <- inherits(cond, "error")
[09:31:05.058]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.058]                   NULL)
[09:31:05.058]                 if (is_error) {
[09:31:05.058]                   sessionInformation <- function() {
[09:31:05.058]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.058]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.058]                       search = base::search(), system = base::Sys.info())
[09:31:05.058]                   }
[09:31:05.058]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.058]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.058]                     cond$call), session = sessionInformation(), 
[09:31:05.058]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.058]                   signalCondition(cond)
[09:31:05.058]                 }
[09:31:05.058]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.058]                 "immediateCondition"))) {
[09:31:05.058]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.058]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.058]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.058]                   if (TRUE && !signal) {
[09:31:05.058]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.058]                     {
[09:31:05.058]                       inherits <- base::inherits
[09:31:05.058]                       invokeRestart <- base::invokeRestart
[09:31:05.058]                       is.null <- base::is.null
[09:31:05.058]                       muffled <- FALSE
[09:31:05.058]                       if (inherits(cond, "message")) {
[09:31:05.058]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.058]                         if (muffled) 
[09:31:05.058]                           invokeRestart("muffleMessage")
[09:31:05.058]                       }
[09:31:05.058]                       else if (inherits(cond, "warning")) {
[09:31:05.058]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.058]                         if (muffled) 
[09:31:05.058]                           invokeRestart("muffleWarning")
[09:31:05.058]                       }
[09:31:05.058]                       else if (inherits(cond, "condition")) {
[09:31:05.058]                         if (!is.null(pattern)) {
[09:31:05.058]                           computeRestarts <- base::computeRestarts
[09:31:05.058]                           grepl <- base::grepl
[09:31:05.058]                           restarts <- computeRestarts(cond)
[09:31:05.058]                           for (restart in restarts) {
[09:31:05.058]                             name <- restart$name
[09:31:05.058]                             if (is.null(name)) 
[09:31:05.058]                               next
[09:31:05.058]                             if (!grepl(pattern, name)) 
[09:31:05.058]                               next
[09:31:05.058]                             invokeRestart(restart)
[09:31:05.058]                             muffled <- TRUE
[09:31:05.058]                             break
[09:31:05.058]                           }
[09:31:05.058]                         }
[09:31:05.058]                       }
[09:31:05.058]                       invisible(muffled)
[09:31:05.058]                     }
[09:31:05.058]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.058]                   }
[09:31:05.058]                 }
[09:31:05.058]                 else {
[09:31:05.058]                   if (TRUE) {
[09:31:05.058]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.058]                     {
[09:31:05.058]                       inherits <- base::inherits
[09:31:05.058]                       invokeRestart <- base::invokeRestart
[09:31:05.058]                       is.null <- base::is.null
[09:31:05.058]                       muffled <- FALSE
[09:31:05.058]                       if (inherits(cond, "message")) {
[09:31:05.058]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.058]                         if (muffled) 
[09:31:05.058]                           invokeRestart("muffleMessage")
[09:31:05.058]                       }
[09:31:05.058]                       else if (inherits(cond, "warning")) {
[09:31:05.058]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.058]                         if (muffled) 
[09:31:05.058]                           invokeRestart("muffleWarning")
[09:31:05.058]                       }
[09:31:05.058]                       else if (inherits(cond, "condition")) {
[09:31:05.058]                         if (!is.null(pattern)) {
[09:31:05.058]                           computeRestarts <- base::computeRestarts
[09:31:05.058]                           grepl <- base::grepl
[09:31:05.058]                           restarts <- computeRestarts(cond)
[09:31:05.058]                           for (restart in restarts) {
[09:31:05.058]                             name <- restart$name
[09:31:05.058]                             if (is.null(name)) 
[09:31:05.058]                               next
[09:31:05.058]                             if (!grepl(pattern, name)) 
[09:31:05.058]                               next
[09:31:05.058]                             invokeRestart(restart)
[09:31:05.058]                             muffled <- TRUE
[09:31:05.058]                             break
[09:31:05.058]                           }
[09:31:05.058]                         }
[09:31:05.058]                       }
[09:31:05.058]                       invisible(muffled)
[09:31:05.058]                     }
[09:31:05.058]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.058]                   }
[09:31:05.058]                 }
[09:31:05.058]             }
[09:31:05.058]         }))
[09:31:05.058]     }, error = function(ex) {
[09:31:05.058]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.058]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.058]                 ...future.rng), started = ...future.startTime, 
[09:31:05.058]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.058]             version = "1.8"), class = "FutureResult")
[09:31:05.058]     }, finally = {
[09:31:05.058]         if (!identical(...future.workdir, getwd())) 
[09:31:05.058]             setwd(...future.workdir)
[09:31:05.058]         {
[09:31:05.058]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.058]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.058]             }
[09:31:05.058]             base::options(...future.oldOptions)
[09:31:05.058]             if (.Platform$OS.type == "windows") {
[09:31:05.058]                 old_names <- names(...future.oldEnvVars)
[09:31:05.058]                 envs <- base::Sys.getenv()
[09:31:05.058]                 names <- names(envs)
[09:31:05.058]                 common <- intersect(names, old_names)
[09:31:05.058]                 added <- setdiff(names, old_names)
[09:31:05.058]                 removed <- setdiff(old_names, names)
[09:31:05.058]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.058]                   envs[common]]
[09:31:05.058]                 NAMES <- toupper(changed)
[09:31:05.058]                 args <- list()
[09:31:05.058]                 for (kk in seq_along(NAMES)) {
[09:31:05.058]                   name <- changed[[kk]]
[09:31:05.058]                   NAME <- NAMES[[kk]]
[09:31:05.058]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.058]                     next
[09:31:05.058]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.058]                 }
[09:31:05.058]                 NAMES <- toupper(added)
[09:31:05.058]                 for (kk in seq_along(NAMES)) {
[09:31:05.058]                   name <- added[[kk]]
[09:31:05.058]                   NAME <- NAMES[[kk]]
[09:31:05.058]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.058]                     next
[09:31:05.058]                   args[[name]] <- ""
[09:31:05.058]                 }
[09:31:05.058]                 NAMES <- toupper(removed)
[09:31:05.058]                 for (kk in seq_along(NAMES)) {
[09:31:05.058]                   name <- removed[[kk]]
[09:31:05.058]                   NAME <- NAMES[[kk]]
[09:31:05.058]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.058]                     next
[09:31:05.058]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.058]                 }
[09:31:05.058]                 if (length(args) > 0) 
[09:31:05.058]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.058]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.058]             }
[09:31:05.058]             else {
[09:31:05.058]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.058]             }
[09:31:05.058]             {
[09:31:05.058]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.058]                   0L) {
[09:31:05.058]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.058]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.058]                   base::options(opts)
[09:31:05.058]                 }
[09:31:05.058]                 {
[09:31:05.058]                   {
[09:31:05.058]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.058]                     NULL
[09:31:05.058]                   }
[09:31:05.058]                   options(future.plan = NULL)
[09:31:05.058]                   if (is.na(NA_character_)) 
[09:31:05.058]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.058]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.058]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.058]                     .init = FALSE)
[09:31:05.058]                 }
[09:31:05.058]             }
[09:31:05.058]         }
[09:31:05.058]     })
[09:31:05.058]     if (TRUE) {
[09:31:05.058]         base::sink(type = "output", split = FALSE)
[09:31:05.058]         if (TRUE) {
[09:31:05.058]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.058]         }
[09:31:05.058]         else {
[09:31:05.058]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.058]         }
[09:31:05.058]         base::close(...future.stdout)
[09:31:05.058]         ...future.stdout <- NULL
[09:31:05.058]     }
[09:31:05.058]     ...future.result$conditions <- ...future.conditions
[09:31:05.058]     ...future.result$finished <- base::Sys.time()
[09:31:05.058]     ...future.result
[09:31:05.058] }
[09:31:05.061] MultisessionFuture started
[09:31:05.061] - Launch lazy future ... done
[09:31:05.061] run() for ‘MultisessionFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[09:31:05.062] result() for ClusterFuture ...
[09:31:05.062] - result already collected: FutureResult
[09:31:05.062] result() for ClusterFuture ... done
[09:31:05.062] result() for ClusterFuture ...
[09:31:05.063] - result already collected: FutureResult
[09:31:05.063] result() for ClusterFuture ... done
[09:31:05.063] signalConditions() ...
[09:31:05.063]  - include = ‘immediateCondition’
[09:31:05.063]  - exclude = 
[09:31:05.063]  - resignal = FALSE
[09:31:05.063]  - Number of conditions: 1
[09:31:05.064] signalConditions() ... done
[09:31:05.064] Future state: ‘finished’
[09:31:05.064] result() for ClusterFuture ...
[09:31:05.064] - result already collected: FutureResult
[09:31:05.064] result() for ClusterFuture ... done
[09:31:05.064] signalConditions() ...
[09:31:05.064]  - include = ‘condition’
[09:31:05.064]  - exclude = ‘immediateCondition’
[09:31:05.064]  - resignal = TRUE
[09:31:05.064]  - Number of conditions: 1
[09:31:05.064]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:05.065] signalConditions() ... done
v3: <simpleError> (as expect)
[09:31:05.065] result() for ClusterFuture ...
[09:31:05.065] receiveMessageFromWorker() for ClusterFuture ...
[09:31:05.065] - Validating connection of MultisessionFuture
[09:31:05.065] - received message: FutureResult
[09:31:05.065] - Received FutureResult
[09:31:05.065] - Erased future from FutureRegistry
[09:31:05.065] result() for ClusterFuture ...
[09:31:05.065] - result already collected: FutureResult
[09:31:05.066] result() for ClusterFuture ... done
[09:31:05.066] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:05.066] result() for ClusterFuture ... done
[09:31:05.066] result() for ClusterFuture ...
[09:31:05.066] - result already collected: FutureResult
[09:31:05.066] result() for ClusterFuture ... done
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[09:31:05.066] getGlobalsAndPackages() ...
[09:31:05.066] Searching for globals...
[09:31:05.067] 
[09:31:05.067] Searching for globals ... DONE
[09:31:05.067] - globals: [0] <none>
[09:31:05.067] getGlobalsAndPackages() ... DONE
[09:31:05.067] run() for ‘Future’ ...
[09:31:05.067] - state: ‘created’
[09:31:05.067] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:05.081] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:05.081] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:05.081]   - Field: ‘node’
[09:31:05.081]   - Field: ‘label’
[09:31:05.081]   - Field: ‘local’
[09:31:05.081]   - Field: ‘owner’
[09:31:05.081]   - Field: ‘envir’
[09:31:05.081]   - Field: ‘workers’
[09:31:05.081]   - Field: ‘packages’
[09:31:05.081]   - Field: ‘gc’
[09:31:05.081]   - Field: ‘conditions’
[09:31:05.082]   - Field: ‘persistent’
[09:31:05.082]   - Field: ‘expr’
[09:31:05.082]   - Field: ‘uuid’
[09:31:05.082]   - Field: ‘seed’
[09:31:05.082]   - Field: ‘version’
[09:31:05.082]   - Field: ‘result’
[09:31:05.082]   - Field: ‘asynchronous’
[09:31:05.082]   - Field: ‘calls’
[09:31:05.082]   - Field: ‘globals’
[09:31:05.082]   - Field: ‘stdout’
[09:31:05.082]   - Field: ‘earlySignal’
[09:31:05.083]   - Field: ‘lazy’
[09:31:05.083]   - Field: ‘state’
[09:31:05.083] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:05.083] - Launch lazy future ...
[09:31:05.083] Packages needed by the future expression (n = 0): <none>
[09:31:05.083] Packages needed by future strategies (n = 0): <none>
[09:31:05.084] {
[09:31:05.084]     {
[09:31:05.084]         {
[09:31:05.084]             ...future.startTime <- base::Sys.time()
[09:31:05.084]             {
[09:31:05.084]                 {
[09:31:05.084]                   {
[09:31:05.084]                     {
[09:31:05.084]                       base::local({
[09:31:05.084]                         has_future <- base::requireNamespace("future", 
[09:31:05.084]                           quietly = TRUE)
[09:31:05.084]                         if (has_future) {
[09:31:05.084]                           ns <- base::getNamespace("future")
[09:31:05.084]                           version <- ns[[".package"]][["version"]]
[09:31:05.084]                           if (is.null(version)) 
[09:31:05.084]                             version <- utils::packageVersion("future")
[09:31:05.084]                         }
[09:31:05.084]                         else {
[09:31:05.084]                           version <- NULL
[09:31:05.084]                         }
[09:31:05.084]                         if (!has_future || version < "1.8.0") {
[09:31:05.084]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.084]                             "", base::R.version$version.string), 
[09:31:05.084]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:05.084]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.084]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.084]                               "release", "version")], collapse = " "), 
[09:31:05.084]                             hostname = base::Sys.info()[["nodename"]])
[09:31:05.084]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.084]                             info)
[09:31:05.084]                           info <- base::paste(info, collapse = "; ")
[09:31:05.084]                           if (!has_future) {
[09:31:05.084]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.084]                               info)
[09:31:05.084]                           }
[09:31:05.084]                           else {
[09:31:05.084]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.084]                               info, version)
[09:31:05.084]                           }
[09:31:05.084]                           base::stop(msg)
[09:31:05.084]                         }
[09:31:05.084]                       })
[09:31:05.084]                     }
[09:31:05.084]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.084]                     base::options(mc.cores = 1L)
[09:31:05.084]                   }
[09:31:05.084]                   ...future.strategy.old <- future::plan("list")
[09:31:05.084]                   options(future.plan = NULL)
[09:31:05.084]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.084]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.084]                 }
[09:31:05.084]                 ...future.workdir <- getwd()
[09:31:05.084]             }
[09:31:05.084]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.084]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.084]         }
[09:31:05.084]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.084]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.084]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.084]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.084]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.084]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.084]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.084]             base::names(...future.oldOptions))
[09:31:05.084]     }
[09:31:05.084]     if (FALSE) {
[09:31:05.084]     }
[09:31:05.084]     else {
[09:31:05.084]         if (TRUE) {
[09:31:05.084]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.084]                 open = "w")
[09:31:05.084]         }
[09:31:05.084]         else {
[09:31:05.084]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.084]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.084]         }
[09:31:05.084]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.084]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.084]             base::sink(type = "output", split = FALSE)
[09:31:05.084]             base::close(...future.stdout)
[09:31:05.084]         }, add = TRUE)
[09:31:05.084]     }
[09:31:05.084]     ...future.frame <- base::sys.nframe()
[09:31:05.084]     ...future.conditions <- base::list()
[09:31:05.084]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.084]     if (FALSE) {
[09:31:05.084]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.084]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.084]     }
[09:31:05.084]     ...future.result <- base::tryCatch({
[09:31:05.084]         base::withCallingHandlers({
[09:31:05.084]             ...future.value <- base::withVisible(base::local({
[09:31:05.084]                 ...future.makeSendCondition <- base::local({
[09:31:05.084]                   sendCondition <- NULL
[09:31:05.084]                   function(frame = 1L) {
[09:31:05.084]                     if (is.function(sendCondition)) 
[09:31:05.084]                       return(sendCondition)
[09:31:05.084]                     ns <- getNamespace("parallel")
[09:31:05.084]                     if (exists("sendData", mode = "function", 
[09:31:05.084]                       envir = ns)) {
[09:31:05.084]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:05.084]                         envir = ns)
[09:31:05.084]                       envir <- sys.frame(frame)
[09:31:05.084]                       master <- NULL
[09:31:05.084]                       while (!identical(envir, .GlobalEnv) && 
[09:31:05.084]                         !identical(envir, emptyenv())) {
[09:31:05.084]                         if (exists("master", mode = "list", envir = envir, 
[09:31:05.084]                           inherits = FALSE)) {
[09:31:05.084]                           master <- get("master", mode = "list", 
[09:31:05.084]                             envir = envir, inherits = FALSE)
[09:31:05.084]                           if (inherits(master, c("SOCKnode", 
[09:31:05.084]                             "SOCK0node"))) {
[09:31:05.084]                             sendCondition <<- function(cond) {
[09:31:05.084]                               data <- list(type = "VALUE", value = cond, 
[09:31:05.084]                                 success = TRUE)
[09:31:05.084]                               parallel_sendData(master, data)
[09:31:05.084]                             }
[09:31:05.084]                             return(sendCondition)
[09:31:05.084]                           }
[09:31:05.084]                         }
[09:31:05.084]                         frame <- frame + 1L
[09:31:05.084]                         envir <- sys.frame(frame)
[09:31:05.084]                       }
[09:31:05.084]                     }
[09:31:05.084]                     sendCondition <<- function(cond) NULL
[09:31:05.084]                   }
[09:31:05.084]                 })
[09:31:05.084]                 withCallingHandlers({
[09:31:05.084]                   1
[09:31:05.084]                 }, immediateCondition = function(cond) {
[09:31:05.084]                   sendCondition <- ...future.makeSendCondition()
[09:31:05.084]                   sendCondition(cond)
[09:31:05.084]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.084]                   {
[09:31:05.084]                     inherits <- base::inherits
[09:31:05.084]                     invokeRestart <- base::invokeRestart
[09:31:05.084]                     is.null <- base::is.null
[09:31:05.084]                     muffled <- FALSE
[09:31:05.084]                     if (inherits(cond, "message")) {
[09:31:05.084]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.084]                       if (muffled) 
[09:31:05.084]                         invokeRestart("muffleMessage")
[09:31:05.084]                     }
[09:31:05.084]                     else if (inherits(cond, "warning")) {
[09:31:05.084]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.084]                       if (muffled) 
[09:31:05.084]                         invokeRestart("muffleWarning")
[09:31:05.084]                     }
[09:31:05.084]                     else if (inherits(cond, "condition")) {
[09:31:05.084]                       if (!is.null(pattern)) {
[09:31:05.084]                         computeRestarts <- base::computeRestarts
[09:31:05.084]                         grepl <- base::grepl
[09:31:05.084]                         restarts <- computeRestarts(cond)
[09:31:05.084]                         for (restart in restarts) {
[09:31:05.084]                           name <- restart$name
[09:31:05.084]                           if (is.null(name)) 
[09:31:05.084]                             next
[09:31:05.084]                           if (!grepl(pattern, name)) 
[09:31:05.084]                             next
[09:31:05.084]                           invokeRestart(restart)
[09:31:05.084]                           muffled <- TRUE
[09:31:05.084]                           break
[09:31:05.084]                         }
[09:31:05.084]                       }
[09:31:05.084]                     }
[09:31:05.084]                     invisible(muffled)
[09:31:05.084]                   }
[09:31:05.084]                   muffleCondition(cond)
[09:31:05.084]                 })
[09:31:05.084]             }))
[09:31:05.084]             future::FutureResult(value = ...future.value$value, 
[09:31:05.084]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.084]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.084]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.084]                     ...future.globalenv.names))
[09:31:05.084]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.084]         }, condition = base::local({
[09:31:05.084]             c <- base::c
[09:31:05.084]             inherits <- base::inherits
[09:31:05.084]             invokeRestart <- base::invokeRestart
[09:31:05.084]             length <- base::length
[09:31:05.084]             list <- base::list
[09:31:05.084]             seq.int <- base::seq.int
[09:31:05.084]             signalCondition <- base::signalCondition
[09:31:05.084]             sys.calls <- base::sys.calls
[09:31:05.084]             `[[` <- base::`[[`
[09:31:05.084]             `+` <- base::`+`
[09:31:05.084]             `<<-` <- base::`<<-`
[09:31:05.084]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.084]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.084]                   3L)]
[09:31:05.084]             }
[09:31:05.084]             function(cond) {
[09:31:05.084]                 is_error <- inherits(cond, "error")
[09:31:05.084]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.084]                   NULL)
[09:31:05.084]                 if (is_error) {
[09:31:05.084]                   sessionInformation <- function() {
[09:31:05.084]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.084]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.084]                       search = base::search(), system = base::Sys.info())
[09:31:05.084]                   }
[09:31:05.084]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.084]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.084]                     cond$call), session = sessionInformation(), 
[09:31:05.084]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.084]                   signalCondition(cond)
[09:31:05.084]                 }
[09:31:05.084]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.084]                 "immediateCondition"))) {
[09:31:05.084]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.084]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.084]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.084]                   if (TRUE && !signal) {
[09:31:05.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.084]                     {
[09:31:05.084]                       inherits <- base::inherits
[09:31:05.084]                       invokeRestart <- base::invokeRestart
[09:31:05.084]                       is.null <- base::is.null
[09:31:05.084]                       muffled <- FALSE
[09:31:05.084]                       if (inherits(cond, "message")) {
[09:31:05.084]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.084]                         if (muffled) 
[09:31:05.084]                           invokeRestart("muffleMessage")
[09:31:05.084]                       }
[09:31:05.084]                       else if (inherits(cond, "warning")) {
[09:31:05.084]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.084]                         if (muffled) 
[09:31:05.084]                           invokeRestart("muffleWarning")
[09:31:05.084]                       }
[09:31:05.084]                       else if (inherits(cond, "condition")) {
[09:31:05.084]                         if (!is.null(pattern)) {
[09:31:05.084]                           computeRestarts <- base::computeRestarts
[09:31:05.084]                           grepl <- base::grepl
[09:31:05.084]                           restarts <- computeRestarts(cond)
[09:31:05.084]                           for (restart in restarts) {
[09:31:05.084]                             name <- restart$name
[09:31:05.084]                             if (is.null(name)) 
[09:31:05.084]                               next
[09:31:05.084]                             if (!grepl(pattern, name)) 
[09:31:05.084]                               next
[09:31:05.084]                             invokeRestart(restart)
[09:31:05.084]                             muffled <- TRUE
[09:31:05.084]                             break
[09:31:05.084]                           }
[09:31:05.084]                         }
[09:31:05.084]                       }
[09:31:05.084]                       invisible(muffled)
[09:31:05.084]                     }
[09:31:05.084]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.084]                   }
[09:31:05.084]                 }
[09:31:05.084]                 else {
[09:31:05.084]                   if (TRUE) {
[09:31:05.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.084]                     {
[09:31:05.084]                       inherits <- base::inherits
[09:31:05.084]                       invokeRestart <- base::invokeRestart
[09:31:05.084]                       is.null <- base::is.null
[09:31:05.084]                       muffled <- FALSE
[09:31:05.084]                       if (inherits(cond, "message")) {
[09:31:05.084]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.084]                         if (muffled) 
[09:31:05.084]                           invokeRestart("muffleMessage")
[09:31:05.084]                       }
[09:31:05.084]                       else if (inherits(cond, "warning")) {
[09:31:05.084]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.084]                         if (muffled) 
[09:31:05.084]                           invokeRestart("muffleWarning")
[09:31:05.084]                       }
[09:31:05.084]                       else if (inherits(cond, "condition")) {
[09:31:05.084]                         if (!is.null(pattern)) {
[09:31:05.084]                           computeRestarts <- base::computeRestarts
[09:31:05.084]                           grepl <- base::grepl
[09:31:05.084]                           restarts <- computeRestarts(cond)
[09:31:05.084]                           for (restart in restarts) {
[09:31:05.084]                             name <- restart$name
[09:31:05.084]                             if (is.null(name)) 
[09:31:05.084]                               next
[09:31:05.084]                             if (!grepl(pattern, name)) 
[09:31:05.084]                               next
[09:31:05.084]                             invokeRestart(restart)
[09:31:05.084]                             muffled <- TRUE
[09:31:05.084]                             break
[09:31:05.084]                           }
[09:31:05.084]                         }
[09:31:05.084]                       }
[09:31:05.084]                       invisible(muffled)
[09:31:05.084]                     }
[09:31:05.084]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.084]                   }
[09:31:05.084]                 }
[09:31:05.084]             }
[09:31:05.084]         }))
[09:31:05.084]     }, error = function(ex) {
[09:31:05.084]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.084]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.084]                 ...future.rng), started = ...future.startTime, 
[09:31:05.084]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.084]             version = "1.8"), class = "FutureResult")
[09:31:05.084]     }, finally = {
[09:31:05.084]         if (!identical(...future.workdir, getwd())) 
[09:31:05.084]             setwd(...future.workdir)
[09:31:05.084]         {
[09:31:05.084]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.084]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.084]             }
[09:31:05.084]             base::options(...future.oldOptions)
[09:31:05.084]             if (.Platform$OS.type == "windows") {
[09:31:05.084]                 old_names <- names(...future.oldEnvVars)
[09:31:05.084]                 envs <- base::Sys.getenv()
[09:31:05.084]                 names <- names(envs)
[09:31:05.084]                 common <- intersect(names, old_names)
[09:31:05.084]                 added <- setdiff(names, old_names)
[09:31:05.084]                 removed <- setdiff(old_names, names)
[09:31:05.084]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.084]                   envs[common]]
[09:31:05.084]                 NAMES <- toupper(changed)
[09:31:05.084]                 args <- list()
[09:31:05.084]                 for (kk in seq_along(NAMES)) {
[09:31:05.084]                   name <- changed[[kk]]
[09:31:05.084]                   NAME <- NAMES[[kk]]
[09:31:05.084]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.084]                     next
[09:31:05.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.084]                 }
[09:31:05.084]                 NAMES <- toupper(added)
[09:31:05.084]                 for (kk in seq_along(NAMES)) {
[09:31:05.084]                   name <- added[[kk]]
[09:31:05.084]                   NAME <- NAMES[[kk]]
[09:31:05.084]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.084]                     next
[09:31:05.084]                   args[[name]] <- ""
[09:31:05.084]                 }
[09:31:05.084]                 NAMES <- toupper(removed)
[09:31:05.084]                 for (kk in seq_along(NAMES)) {
[09:31:05.084]                   name <- removed[[kk]]
[09:31:05.084]                   NAME <- NAMES[[kk]]
[09:31:05.084]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.084]                     next
[09:31:05.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.084]                 }
[09:31:05.084]                 if (length(args) > 0) 
[09:31:05.084]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.084]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.084]             }
[09:31:05.084]             else {
[09:31:05.084]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.084]             }
[09:31:05.084]             {
[09:31:05.084]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.084]                   0L) {
[09:31:05.084]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.084]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.084]                   base::options(opts)
[09:31:05.084]                 }
[09:31:05.084]                 {
[09:31:05.084]                   {
[09:31:05.084]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.084]                     NULL
[09:31:05.084]                   }
[09:31:05.084]                   options(future.plan = NULL)
[09:31:05.084]                   if (is.na(NA_character_)) 
[09:31:05.084]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.084]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.084]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.084]                     .init = FALSE)
[09:31:05.084]                 }
[09:31:05.084]             }
[09:31:05.084]         }
[09:31:05.084]     })
[09:31:05.084]     if (TRUE) {
[09:31:05.084]         base::sink(type = "output", split = FALSE)
[09:31:05.084]         if (TRUE) {
[09:31:05.084]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.084]         }
[09:31:05.084]         else {
[09:31:05.084]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.084]         }
[09:31:05.084]         base::close(...future.stdout)
[09:31:05.084]         ...future.stdout <- NULL
[09:31:05.084]     }
[09:31:05.084]     ...future.result$conditions <- ...future.conditions
[09:31:05.084]     ...future.result$finished <- base::Sys.time()
[09:31:05.084]     ...future.result
[09:31:05.084] }
[09:31:05.086] MultisessionFuture started
[09:31:05.087] - Launch lazy future ... done
[09:31:05.087] run() for ‘MultisessionFuture’ ... done
[09:31:05.087] result() for ClusterFuture ...
[09:31:05.090] receiveMessageFromWorker() for ClusterFuture ...
[09:31:05.090] - Validating connection of MultisessionFuture
[09:31:05.090] - received message: FutureResult
[09:31:05.090] - Received FutureResult
[09:31:05.090] - Erased future from FutureRegistry
[09:31:05.090] result() for ClusterFuture ...
[09:31:05.090] - result already collected: FutureResult
[09:31:05.090] result() for ClusterFuture ... done
[09:31:05.090] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:05.091] result() for ClusterFuture ... done
[09:31:05.091] result() for ClusterFuture ...
[09:31:05.091] - result already collected: FutureResult
[09:31:05.091] result() for ClusterFuture ... done
c = 1
[09:31:05.091] getGlobalsAndPackages() ...
[09:31:05.091] Searching for globals...
[09:31:05.091] 
[09:31:05.092] Searching for globals ... DONE
[09:31:05.092] - globals: [0] <none>
[09:31:05.092] getGlobalsAndPackages() ... DONE
[09:31:05.092] run() for ‘Future’ ...
[09:31:05.092] - state: ‘created’
[09:31:05.092] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:05.106] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:05.106] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:05.106]   - Field: ‘node’
[09:31:05.106]   - Field: ‘label’
[09:31:05.106]   - Field: ‘local’
[09:31:05.106]   - Field: ‘owner’
[09:31:05.106]   - Field: ‘envir’
[09:31:05.106]   - Field: ‘workers’
[09:31:05.106]   - Field: ‘packages’
[09:31:05.106]   - Field: ‘gc’
[09:31:05.107]   - Field: ‘conditions’
[09:31:05.107]   - Field: ‘persistent’
[09:31:05.107]   - Field: ‘expr’
[09:31:05.107]   - Field: ‘uuid’
[09:31:05.107]   - Field: ‘seed’
[09:31:05.107]   - Field: ‘version’
[09:31:05.107]   - Field: ‘result’
[09:31:05.107]   - Field: ‘asynchronous’
[09:31:05.107]   - Field: ‘calls’
[09:31:05.107]   - Field: ‘globals’
[09:31:05.107]   - Field: ‘stdout’
[09:31:05.108]   - Field: ‘earlySignal’
[09:31:05.108]   - Field: ‘lazy’
[09:31:05.108]   - Field: ‘state’
[09:31:05.108] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:05.108] - Launch lazy future ...
[09:31:05.108] Packages needed by the future expression (n = 0): <none>
[09:31:05.108] Packages needed by future strategies (n = 0): <none>
[09:31:05.109] {
[09:31:05.109]     {
[09:31:05.109]         {
[09:31:05.109]             ...future.startTime <- base::Sys.time()
[09:31:05.109]             {
[09:31:05.109]                 {
[09:31:05.109]                   {
[09:31:05.109]                     {
[09:31:05.109]                       base::local({
[09:31:05.109]                         has_future <- base::requireNamespace("future", 
[09:31:05.109]                           quietly = TRUE)
[09:31:05.109]                         if (has_future) {
[09:31:05.109]                           ns <- base::getNamespace("future")
[09:31:05.109]                           version <- ns[[".package"]][["version"]]
[09:31:05.109]                           if (is.null(version)) 
[09:31:05.109]                             version <- utils::packageVersion("future")
[09:31:05.109]                         }
[09:31:05.109]                         else {
[09:31:05.109]                           version <- NULL
[09:31:05.109]                         }
[09:31:05.109]                         if (!has_future || version < "1.8.0") {
[09:31:05.109]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.109]                             "", base::R.version$version.string), 
[09:31:05.109]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:05.109]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.109]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.109]                               "release", "version")], collapse = " "), 
[09:31:05.109]                             hostname = base::Sys.info()[["nodename"]])
[09:31:05.109]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.109]                             info)
[09:31:05.109]                           info <- base::paste(info, collapse = "; ")
[09:31:05.109]                           if (!has_future) {
[09:31:05.109]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.109]                               info)
[09:31:05.109]                           }
[09:31:05.109]                           else {
[09:31:05.109]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.109]                               info, version)
[09:31:05.109]                           }
[09:31:05.109]                           base::stop(msg)
[09:31:05.109]                         }
[09:31:05.109]                       })
[09:31:05.109]                     }
[09:31:05.109]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.109]                     base::options(mc.cores = 1L)
[09:31:05.109]                   }
[09:31:05.109]                   ...future.strategy.old <- future::plan("list")
[09:31:05.109]                   options(future.plan = NULL)
[09:31:05.109]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.109]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.109]                 }
[09:31:05.109]                 ...future.workdir <- getwd()
[09:31:05.109]             }
[09:31:05.109]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.109]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.109]         }
[09:31:05.109]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.109]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.109]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.109]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.109]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.109]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.109]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.109]             base::names(...future.oldOptions))
[09:31:05.109]     }
[09:31:05.109]     if (FALSE) {
[09:31:05.109]     }
[09:31:05.109]     else {
[09:31:05.109]         if (TRUE) {
[09:31:05.109]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.109]                 open = "w")
[09:31:05.109]         }
[09:31:05.109]         else {
[09:31:05.109]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.109]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.109]         }
[09:31:05.109]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.109]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.109]             base::sink(type = "output", split = FALSE)
[09:31:05.109]             base::close(...future.stdout)
[09:31:05.109]         }, add = TRUE)
[09:31:05.109]     }
[09:31:05.109]     ...future.frame <- base::sys.nframe()
[09:31:05.109]     ...future.conditions <- base::list()
[09:31:05.109]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.109]     if (FALSE) {
[09:31:05.109]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.109]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.109]     }
[09:31:05.109]     ...future.result <- base::tryCatch({
[09:31:05.109]         base::withCallingHandlers({
[09:31:05.109]             ...future.value <- base::withVisible(base::local({
[09:31:05.109]                 ...future.makeSendCondition <- base::local({
[09:31:05.109]                   sendCondition <- NULL
[09:31:05.109]                   function(frame = 1L) {
[09:31:05.109]                     if (is.function(sendCondition)) 
[09:31:05.109]                       return(sendCondition)
[09:31:05.109]                     ns <- getNamespace("parallel")
[09:31:05.109]                     if (exists("sendData", mode = "function", 
[09:31:05.109]                       envir = ns)) {
[09:31:05.109]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:05.109]                         envir = ns)
[09:31:05.109]                       envir <- sys.frame(frame)
[09:31:05.109]                       master <- NULL
[09:31:05.109]                       while (!identical(envir, .GlobalEnv) && 
[09:31:05.109]                         !identical(envir, emptyenv())) {
[09:31:05.109]                         if (exists("master", mode = "list", envir = envir, 
[09:31:05.109]                           inherits = FALSE)) {
[09:31:05.109]                           master <- get("master", mode = "list", 
[09:31:05.109]                             envir = envir, inherits = FALSE)
[09:31:05.109]                           if (inherits(master, c("SOCKnode", 
[09:31:05.109]                             "SOCK0node"))) {
[09:31:05.109]                             sendCondition <<- function(cond) {
[09:31:05.109]                               data <- list(type = "VALUE", value = cond, 
[09:31:05.109]                                 success = TRUE)
[09:31:05.109]                               parallel_sendData(master, data)
[09:31:05.109]                             }
[09:31:05.109]                             return(sendCondition)
[09:31:05.109]                           }
[09:31:05.109]                         }
[09:31:05.109]                         frame <- frame + 1L
[09:31:05.109]                         envir <- sys.frame(frame)
[09:31:05.109]                       }
[09:31:05.109]                     }
[09:31:05.109]                     sendCondition <<- function(cond) NULL
[09:31:05.109]                   }
[09:31:05.109]                 })
[09:31:05.109]                 withCallingHandlers({
[09:31:05.109]                   1
[09:31:05.109]                 }, immediateCondition = function(cond) {
[09:31:05.109]                   sendCondition <- ...future.makeSendCondition()
[09:31:05.109]                   sendCondition(cond)
[09:31:05.109]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.109]                   {
[09:31:05.109]                     inherits <- base::inherits
[09:31:05.109]                     invokeRestart <- base::invokeRestart
[09:31:05.109]                     is.null <- base::is.null
[09:31:05.109]                     muffled <- FALSE
[09:31:05.109]                     if (inherits(cond, "message")) {
[09:31:05.109]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.109]                       if (muffled) 
[09:31:05.109]                         invokeRestart("muffleMessage")
[09:31:05.109]                     }
[09:31:05.109]                     else if (inherits(cond, "warning")) {
[09:31:05.109]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.109]                       if (muffled) 
[09:31:05.109]                         invokeRestart("muffleWarning")
[09:31:05.109]                     }
[09:31:05.109]                     else if (inherits(cond, "condition")) {
[09:31:05.109]                       if (!is.null(pattern)) {
[09:31:05.109]                         computeRestarts <- base::computeRestarts
[09:31:05.109]                         grepl <- base::grepl
[09:31:05.109]                         restarts <- computeRestarts(cond)
[09:31:05.109]                         for (restart in restarts) {
[09:31:05.109]                           name <- restart$name
[09:31:05.109]                           if (is.null(name)) 
[09:31:05.109]                             next
[09:31:05.109]                           if (!grepl(pattern, name)) 
[09:31:05.109]                             next
[09:31:05.109]                           invokeRestart(restart)
[09:31:05.109]                           muffled <- TRUE
[09:31:05.109]                           break
[09:31:05.109]                         }
[09:31:05.109]                       }
[09:31:05.109]                     }
[09:31:05.109]                     invisible(muffled)
[09:31:05.109]                   }
[09:31:05.109]                   muffleCondition(cond)
[09:31:05.109]                 })
[09:31:05.109]             }))
[09:31:05.109]             future::FutureResult(value = ...future.value$value, 
[09:31:05.109]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.109]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.109]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.109]                     ...future.globalenv.names))
[09:31:05.109]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.109]         }, condition = base::local({
[09:31:05.109]             c <- base::c
[09:31:05.109]             inherits <- base::inherits
[09:31:05.109]             invokeRestart <- base::invokeRestart
[09:31:05.109]             length <- base::length
[09:31:05.109]             list <- base::list
[09:31:05.109]             seq.int <- base::seq.int
[09:31:05.109]             signalCondition <- base::signalCondition
[09:31:05.109]             sys.calls <- base::sys.calls
[09:31:05.109]             `[[` <- base::`[[`
[09:31:05.109]             `+` <- base::`+`
[09:31:05.109]             `<<-` <- base::`<<-`
[09:31:05.109]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.109]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.109]                   3L)]
[09:31:05.109]             }
[09:31:05.109]             function(cond) {
[09:31:05.109]                 is_error <- inherits(cond, "error")
[09:31:05.109]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.109]                   NULL)
[09:31:05.109]                 if (is_error) {
[09:31:05.109]                   sessionInformation <- function() {
[09:31:05.109]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.109]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.109]                       search = base::search(), system = base::Sys.info())
[09:31:05.109]                   }
[09:31:05.109]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.109]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.109]                     cond$call), session = sessionInformation(), 
[09:31:05.109]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.109]                   signalCondition(cond)
[09:31:05.109]                 }
[09:31:05.109]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.109]                 "immediateCondition"))) {
[09:31:05.109]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.109]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.109]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.109]                   if (TRUE && !signal) {
[09:31:05.109]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.109]                     {
[09:31:05.109]                       inherits <- base::inherits
[09:31:05.109]                       invokeRestart <- base::invokeRestart
[09:31:05.109]                       is.null <- base::is.null
[09:31:05.109]                       muffled <- FALSE
[09:31:05.109]                       if (inherits(cond, "message")) {
[09:31:05.109]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.109]                         if (muffled) 
[09:31:05.109]                           invokeRestart("muffleMessage")
[09:31:05.109]                       }
[09:31:05.109]                       else if (inherits(cond, "warning")) {
[09:31:05.109]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.109]                         if (muffled) 
[09:31:05.109]                           invokeRestart("muffleWarning")
[09:31:05.109]                       }
[09:31:05.109]                       else if (inherits(cond, "condition")) {
[09:31:05.109]                         if (!is.null(pattern)) {
[09:31:05.109]                           computeRestarts <- base::computeRestarts
[09:31:05.109]                           grepl <- base::grepl
[09:31:05.109]                           restarts <- computeRestarts(cond)
[09:31:05.109]                           for (restart in restarts) {
[09:31:05.109]                             name <- restart$name
[09:31:05.109]                             if (is.null(name)) 
[09:31:05.109]                               next
[09:31:05.109]                             if (!grepl(pattern, name)) 
[09:31:05.109]                               next
[09:31:05.109]                             invokeRestart(restart)
[09:31:05.109]                             muffled <- TRUE
[09:31:05.109]                             break
[09:31:05.109]                           }
[09:31:05.109]                         }
[09:31:05.109]                       }
[09:31:05.109]                       invisible(muffled)
[09:31:05.109]                     }
[09:31:05.109]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.109]                   }
[09:31:05.109]                 }
[09:31:05.109]                 else {
[09:31:05.109]                   if (TRUE) {
[09:31:05.109]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.109]                     {
[09:31:05.109]                       inherits <- base::inherits
[09:31:05.109]                       invokeRestart <- base::invokeRestart
[09:31:05.109]                       is.null <- base::is.null
[09:31:05.109]                       muffled <- FALSE
[09:31:05.109]                       if (inherits(cond, "message")) {
[09:31:05.109]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.109]                         if (muffled) 
[09:31:05.109]                           invokeRestart("muffleMessage")
[09:31:05.109]                       }
[09:31:05.109]                       else if (inherits(cond, "warning")) {
[09:31:05.109]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.109]                         if (muffled) 
[09:31:05.109]                           invokeRestart("muffleWarning")
[09:31:05.109]                       }
[09:31:05.109]                       else if (inherits(cond, "condition")) {
[09:31:05.109]                         if (!is.null(pattern)) {
[09:31:05.109]                           computeRestarts <- base::computeRestarts
[09:31:05.109]                           grepl <- base::grepl
[09:31:05.109]                           restarts <- computeRestarts(cond)
[09:31:05.109]                           for (restart in restarts) {
[09:31:05.109]                             name <- restart$name
[09:31:05.109]                             if (is.null(name)) 
[09:31:05.109]                               next
[09:31:05.109]                             if (!grepl(pattern, name)) 
[09:31:05.109]                               next
[09:31:05.109]                             invokeRestart(restart)
[09:31:05.109]                             muffled <- TRUE
[09:31:05.109]                             break
[09:31:05.109]                           }
[09:31:05.109]                         }
[09:31:05.109]                       }
[09:31:05.109]                       invisible(muffled)
[09:31:05.109]                     }
[09:31:05.109]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.109]                   }
[09:31:05.109]                 }
[09:31:05.109]             }
[09:31:05.109]         }))
[09:31:05.109]     }, error = function(ex) {
[09:31:05.109]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.109]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.109]                 ...future.rng), started = ...future.startTime, 
[09:31:05.109]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.109]             version = "1.8"), class = "FutureResult")
[09:31:05.109]     }, finally = {
[09:31:05.109]         if (!identical(...future.workdir, getwd())) 
[09:31:05.109]             setwd(...future.workdir)
[09:31:05.109]         {
[09:31:05.109]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.109]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.109]             }
[09:31:05.109]             base::options(...future.oldOptions)
[09:31:05.109]             if (.Platform$OS.type == "windows") {
[09:31:05.109]                 old_names <- names(...future.oldEnvVars)
[09:31:05.109]                 envs <- base::Sys.getenv()
[09:31:05.109]                 names <- names(envs)
[09:31:05.109]                 common <- intersect(names, old_names)
[09:31:05.109]                 added <- setdiff(names, old_names)
[09:31:05.109]                 removed <- setdiff(old_names, names)
[09:31:05.109]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.109]                   envs[common]]
[09:31:05.109]                 NAMES <- toupper(changed)
[09:31:05.109]                 args <- list()
[09:31:05.109]                 for (kk in seq_along(NAMES)) {
[09:31:05.109]                   name <- changed[[kk]]
[09:31:05.109]                   NAME <- NAMES[[kk]]
[09:31:05.109]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.109]                     next
[09:31:05.109]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.109]                 }
[09:31:05.109]                 NAMES <- toupper(added)
[09:31:05.109]                 for (kk in seq_along(NAMES)) {
[09:31:05.109]                   name <- added[[kk]]
[09:31:05.109]                   NAME <- NAMES[[kk]]
[09:31:05.109]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.109]                     next
[09:31:05.109]                   args[[name]] <- ""
[09:31:05.109]                 }
[09:31:05.109]                 NAMES <- toupper(removed)
[09:31:05.109]                 for (kk in seq_along(NAMES)) {
[09:31:05.109]                   name <- removed[[kk]]
[09:31:05.109]                   NAME <- NAMES[[kk]]
[09:31:05.109]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.109]                     next
[09:31:05.109]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.109]                 }
[09:31:05.109]                 if (length(args) > 0) 
[09:31:05.109]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.109]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.109]             }
[09:31:05.109]             else {
[09:31:05.109]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.109]             }
[09:31:05.109]             {
[09:31:05.109]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.109]                   0L) {
[09:31:05.109]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.109]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.109]                   base::options(opts)
[09:31:05.109]                 }
[09:31:05.109]                 {
[09:31:05.109]                   {
[09:31:05.109]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.109]                     NULL
[09:31:05.109]                   }
[09:31:05.109]                   options(future.plan = NULL)
[09:31:05.109]                   if (is.na(NA_character_)) 
[09:31:05.109]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.109]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.109]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.109]                     .init = FALSE)
[09:31:05.109]                 }
[09:31:05.109]             }
[09:31:05.109]         }
[09:31:05.109]     })
[09:31:05.109]     if (TRUE) {
[09:31:05.109]         base::sink(type = "output", split = FALSE)
[09:31:05.109]         if (TRUE) {
[09:31:05.109]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.109]         }
[09:31:05.109]         else {
[09:31:05.109]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.109]         }
[09:31:05.109]         base::close(...future.stdout)
[09:31:05.109]         ...future.stdout <- NULL
[09:31:05.109]     }
[09:31:05.109]     ...future.result$conditions <- ...future.conditions
[09:31:05.109]     ...future.result$finished <- base::Sys.time()
[09:31:05.109]     ...future.result
[09:31:05.109] }
[09:31:05.111] MultisessionFuture started
[09:31:05.112] - Launch lazy future ... done
[09:31:05.112] run() for ‘MultisessionFuture’ ... done
[09:31:05.112] result() for ClusterFuture ...
[09:31:05.112] receiveMessageFromWorker() for ClusterFuture ...
[09:31:05.112] - Validating connection of MultisessionFuture
[09:31:05.113] - received message: FutureResult
[09:31:05.113] - Received FutureResult
[09:31:05.113] - Erased future from FutureRegistry
[09:31:05.114] result() for ClusterFuture ...
[09:31:05.114] - result already collected: FutureResult
[09:31:05.114] result() for ClusterFuture ... done
[09:31:05.114] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:05.114] result() for ClusterFuture ... done
[09:31:05.114] result() for ClusterFuture ...
[09:31:05.114] - result already collected: FutureResult
[09:31:05.114] result() for ClusterFuture ... done
d = 1
** Nested future assignments
[09:31:05.114] getGlobalsAndPackages() ...
[09:31:05.115] Searching for globals...
[09:31:05.118] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[09:31:05.118] Searching for globals ... DONE
[09:31:05.118] Resolving globals: FALSE
[09:31:05.119] 
[09:31:05.119] - packages: [1] ‘future’
[09:31:05.119] getGlobalsAndPackages() ... DONE
[09:31:05.119] run() for ‘Future’ ...
[09:31:05.119] - state: ‘created’
[09:31:05.119] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:05.133] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:05.133] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:05.133]   - Field: ‘node’
[09:31:05.133]   - Field: ‘label’
[09:31:05.133]   - Field: ‘local’
[09:31:05.133]   - Field: ‘owner’
[09:31:05.133]   - Field: ‘envir’
[09:31:05.133]   - Field: ‘workers’
[09:31:05.134]   - Field: ‘packages’
[09:31:05.134]   - Field: ‘gc’
[09:31:05.134]   - Field: ‘conditions’
[09:31:05.134]   - Field: ‘persistent’
[09:31:05.134]   - Field: ‘expr’
[09:31:05.134]   - Field: ‘uuid’
[09:31:05.134]   - Field: ‘seed’
[09:31:05.134]   - Field: ‘version’
[09:31:05.134]   - Field: ‘result’
[09:31:05.134]   - Field: ‘asynchronous’
[09:31:05.134]   - Field: ‘calls’
[09:31:05.135]   - Field: ‘globals’
[09:31:05.135]   - Field: ‘stdout’
[09:31:05.135]   - Field: ‘earlySignal’
[09:31:05.135]   - Field: ‘lazy’
[09:31:05.135]   - Field: ‘state’
[09:31:05.135] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:05.135] - Launch lazy future ...
[09:31:05.135] Packages needed by the future expression (n = 1): ‘future’
[09:31:05.135] Packages needed by future strategies (n = 0): <none>
[09:31:05.136] {
[09:31:05.136]     {
[09:31:05.136]         {
[09:31:05.136]             ...future.startTime <- base::Sys.time()
[09:31:05.136]             {
[09:31:05.136]                 {
[09:31:05.136]                   {
[09:31:05.136]                     {
[09:31:05.136]                       {
[09:31:05.136]                         base::local({
[09:31:05.136]                           has_future <- base::requireNamespace("future", 
[09:31:05.136]                             quietly = TRUE)
[09:31:05.136]                           if (has_future) {
[09:31:05.136]                             ns <- base::getNamespace("future")
[09:31:05.136]                             version <- ns[[".package"]][["version"]]
[09:31:05.136]                             if (is.null(version)) 
[09:31:05.136]                               version <- utils::packageVersion("future")
[09:31:05.136]                           }
[09:31:05.136]                           else {
[09:31:05.136]                             version <- NULL
[09:31:05.136]                           }
[09:31:05.136]                           if (!has_future || version < "1.8.0") {
[09:31:05.136]                             info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.136]                               "", base::R.version$version.string), 
[09:31:05.136]                               platform = base::sprintf("%s (%s-bit)", 
[09:31:05.136]                                 base::R.version$platform, 8 * 
[09:31:05.136]                                   base::.Machine$sizeof.pointer), 
[09:31:05.136]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.136]                                 "release", "version")], collapse = " "), 
[09:31:05.136]                               hostname = base::Sys.info()[["nodename"]])
[09:31:05.136]                             info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.136]                               info)
[09:31:05.136]                             info <- base::paste(info, collapse = "; ")
[09:31:05.136]                             if (!has_future) {
[09:31:05.136]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.136]                                 info)
[09:31:05.136]                             }
[09:31:05.136]                             else {
[09:31:05.136]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.136]                                 info, version)
[09:31:05.136]                             }
[09:31:05.136]                             base::stop(msg)
[09:31:05.136]                           }
[09:31:05.136]                         })
[09:31:05.136]                       }
[09:31:05.136]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.136]                       base::options(mc.cores = 1L)
[09:31:05.136]                     }
[09:31:05.136]                     base::local({
[09:31:05.136]                       for (pkg in "future") {
[09:31:05.136]                         base::loadNamespace(pkg)
[09:31:05.136]                         base::library(pkg, character.only = TRUE)
[09:31:05.136]                       }
[09:31:05.136]                     })
[09:31:05.136]                   }
[09:31:05.136]                   ...future.strategy.old <- future::plan("list")
[09:31:05.136]                   options(future.plan = NULL)
[09:31:05.136]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.136]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.136]                 }
[09:31:05.136]                 ...future.workdir <- getwd()
[09:31:05.136]             }
[09:31:05.136]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.136]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.136]         }
[09:31:05.136]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.136]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.136]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.136]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.136]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.136]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.136]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.136]             base::names(...future.oldOptions))
[09:31:05.136]     }
[09:31:05.136]     if (FALSE) {
[09:31:05.136]     }
[09:31:05.136]     else {
[09:31:05.136]         if (TRUE) {
[09:31:05.136]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.136]                 open = "w")
[09:31:05.136]         }
[09:31:05.136]         else {
[09:31:05.136]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.136]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.136]         }
[09:31:05.136]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.136]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.136]             base::sink(type = "output", split = FALSE)
[09:31:05.136]             base::close(...future.stdout)
[09:31:05.136]         }, add = TRUE)
[09:31:05.136]     }
[09:31:05.136]     ...future.frame <- base::sys.nframe()
[09:31:05.136]     ...future.conditions <- base::list()
[09:31:05.136]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.136]     if (FALSE) {
[09:31:05.136]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.136]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.136]     }
[09:31:05.136]     ...future.result <- base::tryCatch({
[09:31:05.136]         base::withCallingHandlers({
[09:31:05.136]             ...future.value <- base::withVisible(base::local({
[09:31:05.136]                 ...future.makeSendCondition <- base::local({
[09:31:05.136]                   sendCondition <- NULL
[09:31:05.136]                   function(frame = 1L) {
[09:31:05.136]                     if (is.function(sendCondition)) 
[09:31:05.136]                       return(sendCondition)
[09:31:05.136]                     ns <- getNamespace("parallel")
[09:31:05.136]                     if (exists("sendData", mode = "function", 
[09:31:05.136]                       envir = ns)) {
[09:31:05.136]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:05.136]                         envir = ns)
[09:31:05.136]                       envir <- sys.frame(frame)
[09:31:05.136]                       master <- NULL
[09:31:05.136]                       while (!identical(envir, .GlobalEnv) && 
[09:31:05.136]                         !identical(envir, emptyenv())) {
[09:31:05.136]                         if (exists("master", mode = "list", envir = envir, 
[09:31:05.136]                           inherits = FALSE)) {
[09:31:05.136]                           master <- get("master", mode = "list", 
[09:31:05.136]                             envir = envir, inherits = FALSE)
[09:31:05.136]                           if (inherits(master, c("SOCKnode", 
[09:31:05.136]                             "SOCK0node"))) {
[09:31:05.136]                             sendCondition <<- function(cond) {
[09:31:05.136]                               data <- list(type = "VALUE", value = cond, 
[09:31:05.136]                                 success = TRUE)
[09:31:05.136]                               parallel_sendData(master, data)
[09:31:05.136]                             }
[09:31:05.136]                             return(sendCondition)
[09:31:05.136]                           }
[09:31:05.136]                         }
[09:31:05.136]                         frame <- frame + 1L
[09:31:05.136]                         envir <- sys.frame(frame)
[09:31:05.136]                       }
[09:31:05.136]                     }
[09:31:05.136]                     sendCondition <<- function(cond) NULL
[09:31:05.136]                   }
[09:31:05.136]                 })
[09:31:05.136]                 withCallingHandlers({
[09:31:05.136]                   {
[09:31:05.136]                     b <- 1
[09:31:05.136]                     c %<-% 2
[09:31:05.136]                     d <- 3
[09:31:05.136]                     4 %->% e
[09:31:05.136]                     b + c + d + e
[09:31:05.136]                   }
[09:31:05.136]                 }, immediateCondition = function(cond) {
[09:31:05.136]                   sendCondition <- ...future.makeSendCondition()
[09:31:05.136]                   sendCondition(cond)
[09:31:05.136]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.136]                   {
[09:31:05.136]                     inherits <- base::inherits
[09:31:05.136]                     invokeRestart <- base::invokeRestart
[09:31:05.136]                     is.null <- base::is.null
[09:31:05.136]                     muffled <- FALSE
[09:31:05.136]                     if (inherits(cond, "message")) {
[09:31:05.136]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.136]                       if (muffled) 
[09:31:05.136]                         invokeRestart("muffleMessage")
[09:31:05.136]                     }
[09:31:05.136]                     else if (inherits(cond, "warning")) {
[09:31:05.136]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.136]                       if (muffled) 
[09:31:05.136]                         invokeRestart("muffleWarning")
[09:31:05.136]                     }
[09:31:05.136]                     else if (inherits(cond, "condition")) {
[09:31:05.136]                       if (!is.null(pattern)) {
[09:31:05.136]                         computeRestarts <- base::computeRestarts
[09:31:05.136]                         grepl <- base::grepl
[09:31:05.136]                         restarts <- computeRestarts(cond)
[09:31:05.136]                         for (restart in restarts) {
[09:31:05.136]                           name <- restart$name
[09:31:05.136]                           if (is.null(name)) 
[09:31:05.136]                             next
[09:31:05.136]                           if (!grepl(pattern, name)) 
[09:31:05.136]                             next
[09:31:05.136]                           invokeRestart(restart)
[09:31:05.136]                           muffled <- TRUE
[09:31:05.136]                           break
[09:31:05.136]                         }
[09:31:05.136]                       }
[09:31:05.136]                     }
[09:31:05.136]                     invisible(muffled)
[09:31:05.136]                   }
[09:31:05.136]                   muffleCondition(cond)
[09:31:05.136]                 })
[09:31:05.136]             }))
[09:31:05.136]             future::FutureResult(value = ...future.value$value, 
[09:31:05.136]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.136]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.136]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.136]                     ...future.globalenv.names))
[09:31:05.136]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.136]         }, condition = base::local({
[09:31:05.136]             c <- base::c
[09:31:05.136]             inherits <- base::inherits
[09:31:05.136]             invokeRestart <- base::invokeRestart
[09:31:05.136]             length <- base::length
[09:31:05.136]             list <- base::list
[09:31:05.136]             seq.int <- base::seq.int
[09:31:05.136]             signalCondition <- base::signalCondition
[09:31:05.136]             sys.calls <- base::sys.calls
[09:31:05.136]             `[[` <- base::`[[`
[09:31:05.136]             `+` <- base::`+`
[09:31:05.136]             `<<-` <- base::`<<-`
[09:31:05.136]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.136]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.136]                   3L)]
[09:31:05.136]             }
[09:31:05.136]             function(cond) {
[09:31:05.136]                 is_error <- inherits(cond, "error")
[09:31:05.136]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.136]                   NULL)
[09:31:05.136]                 if (is_error) {
[09:31:05.136]                   sessionInformation <- function() {
[09:31:05.136]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.136]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.136]                       search = base::search(), system = base::Sys.info())
[09:31:05.136]                   }
[09:31:05.136]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.136]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.136]                     cond$call), session = sessionInformation(), 
[09:31:05.136]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.136]                   signalCondition(cond)
[09:31:05.136]                 }
[09:31:05.136]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.136]                 "immediateCondition"))) {
[09:31:05.136]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.136]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.136]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.136]                   if (TRUE && !signal) {
[09:31:05.136]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.136]                     {
[09:31:05.136]                       inherits <- base::inherits
[09:31:05.136]                       invokeRestart <- base::invokeRestart
[09:31:05.136]                       is.null <- base::is.null
[09:31:05.136]                       muffled <- FALSE
[09:31:05.136]                       if (inherits(cond, "message")) {
[09:31:05.136]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.136]                         if (muffled) 
[09:31:05.136]                           invokeRestart("muffleMessage")
[09:31:05.136]                       }
[09:31:05.136]                       else if (inherits(cond, "warning")) {
[09:31:05.136]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.136]                         if (muffled) 
[09:31:05.136]                           invokeRestart("muffleWarning")
[09:31:05.136]                       }
[09:31:05.136]                       else if (inherits(cond, "condition")) {
[09:31:05.136]                         if (!is.null(pattern)) {
[09:31:05.136]                           computeRestarts <- base::computeRestarts
[09:31:05.136]                           grepl <- base::grepl
[09:31:05.136]                           restarts <- computeRestarts(cond)
[09:31:05.136]                           for (restart in restarts) {
[09:31:05.136]                             name <- restart$name
[09:31:05.136]                             if (is.null(name)) 
[09:31:05.136]                               next
[09:31:05.136]                             if (!grepl(pattern, name)) 
[09:31:05.136]                               next
[09:31:05.136]                             invokeRestart(restart)
[09:31:05.136]                             muffled <- TRUE
[09:31:05.136]                             break
[09:31:05.136]                           }
[09:31:05.136]                         }
[09:31:05.136]                       }
[09:31:05.136]                       invisible(muffled)
[09:31:05.136]                     }
[09:31:05.136]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.136]                   }
[09:31:05.136]                 }
[09:31:05.136]                 else {
[09:31:05.136]                   if (TRUE) {
[09:31:05.136]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.136]                     {
[09:31:05.136]                       inherits <- base::inherits
[09:31:05.136]                       invokeRestart <- base::invokeRestart
[09:31:05.136]                       is.null <- base::is.null
[09:31:05.136]                       muffled <- FALSE
[09:31:05.136]                       if (inherits(cond, "message")) {
[09:31:05.136]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.136]                         if (muffled) 
[09:31:05.136]                           invokeRestart("muffleMessage")
[09:31:05.136]                       }
[09:31:05.136]                       else if (inherits(cond, "warning")) {
[09:31:05.136]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.136]                         if (muffled) 
[09:31:05.136]                           invokeRestart("muffleWarning")
[09:31:05.136]                       }
[09:31:05.136]                       else if (inherits(cond, "condition")) {
[09:31:05.136]                         if (!is.null(pattern)) {
[09:31:05.136]                           computeRestarts <- base::computeRestarts
[09:31:05.136]                           grepl <- base::grepl
[09:31:05.136]                           restarts <- computeRestarts(cond)
[09:31:05.136]                           for (restart in restarts) {
[09:31:05.136]                             name <- restart$name
[09:31:05.136]                             if (is.null(name)) 
[09:31:05.136]                               next
[09:31:05.136]                             if (!grepl(pattern, name)) 
[09:31:05.136]                               next
[09:31:05.136]                             invokeRestart(restart)
[09:31:05.136]                             muffled <- TRUE
[09:31:05.136]                             break
[09:31:05.136]                           }
[09:31:05.136]                         }
[09:31:05.136]                       }
[09:31:05.136]                       invisible(muffled)
[09:31:05.136]                     }
[09:31:05.136]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.136]                   }
[09:31:05.136]                 }
[09:31:05.136]             }
[09:31:05.136]         }))
[09:31:05.136]     }, error = function(ex) {
[09:31:05.136]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.136]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.136]                 ...future.rng), started = ...future.startTime, 
[09:31:05.136]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.136]             version = "1.8"), class = "FutureResult")
[09:31:05.136]     }, finally = {
[09:31:05.136]         if (!identical(...future.workdir, getwd())) 
[09:31:05.136]             setwd(...future.workdir)
[09:31:05.136]         {
[09:31:05.136]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.136]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.136]             }
[09:31:05.136]             base::options(...future.oldOptions)
[09:31:05.136]             if (.Platform$OS.type == "windows") {
[09:31:05.136]                 old_names <- names(...future.oldEnvVars)
[09:31:05.136]                 envs <- base::Sys.getenv()
[09:31:05.136]                 names <- names(envs)
[09:31:05.136]                 common <- intersect(names, old_names)
[09:31:05.136]                 added <- setdiff(names, old_names)
[09:31:05.136]                 removed <- setdiff(old_names, names)
[09:31:05.136]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.136]                   envs[common]]
[09:31:05.136]                 NAMES <- toupper(changed)
[09:31:05.136]                 args <- list()
[09:31:05.136]                 for (kk in seq_along(NAMES)) {
[09:31:05.136]                   name <- changed[[kk]]
[09:31:05.136]                   NAME <- NAMES[[kk]]
[09:31:05.136]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.136]                     next
[09:31:05.136]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.136]                 }
[09:31:05.136]                 NAMES <- toupper(added)
[09:31:05.136]                 for (kk in seq_along(NAMES)) {
[09:31:05.136]                   name <- added[[kk]]
[09:31:05.136]                   NAME <- NAMES[[kk]]
[09:31:05.136]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.136]                     next
[09:31:05.136]                   args[[name]] <- ""
[09:31:05.136]                 }
[09:31:05.136]                 NAMES <- toupper(removed)
[09:31:05.136]                 for (kk in seq_along(NAMES)) {
[09:31:05.136]                   name <- removed[[kk]]
[09:31:05.136]                   NAME <- NAMES[[kk]]
[09:31:05.136]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.136]                     next
[09:31:05.136]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.136]                 }
[09:31:05.136]                 if (length(args) > 0) 
[09:31:05.136]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.136]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.136]             }
[09:31:05.136]             else {
[09:31:05.136]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.136]             }
[09:31:05.136]             {
[09:31:05.136]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.136]                   0L) {
[09:31:05.136]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.136]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.136]                   base::options(opts)
[09:31:05.136]                 }
[09:31:05.136]                 {
[09:31:05.136]                   {
[09:31:05.136]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.136]                     NULL
[09:31:05.136]                   }
[09:31:05.136]                   options(future.plan = NULL)
[09:31:05.136]                   if (is.na(NA_character_)) 
[09:31:05.136]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.136]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.136]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.136]                     .init = FALSE)
[09:31:05.136]                 }
[09:31:05.136]             }
[09:31:05.136]         }
[09:31:05.136]     })
[09:31:05.136]     if (TRUE) {
[09:31:05.136]         base::sink(type = "output", split = FALSE)
[09:31:05.136]         if (TRUE) {
[09:31:05.136]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.136]         }
[09:31:05.136]         else {
[09:31:05.136]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.136]         }
[09:31:05.136]         base::close(...future.stdout)
[09:31:05.136]         ...future.stdout <- NULL
[09:31:05.136]     }
[09:31:05.136]     ...future.result$conditions <- ...future.conditions
[09:31:05.136]     ...future.result$finished <- base::Sys.time()
[09:31:05.136]     ...future.result
[09:31:05.136] }
[09:31:05.139] MultisessionFuture started
[09:31:05.139] - Launch lazy future ... done
[09:31:05.139] run() for ‘MultisessionFuture’ ... done
[09:31:05.139] result() for ClusterFuture ...
[09:31:05.139] receiveMessageFromWorker() for ClusterFuture ...
[09:31:05.140] - Validating connection of MultisessionFuture
[09:31:05.194] - received message: FutureResult
[09:31:05.194] - Received FutureResult
[09:31:05.194] - Erased future from FutureRegistry
[09:31:05.194] result() for ClusterFuture ...
[09:31:05.194] - result already collected: FutureResult
[09:31:05.194] result() for ClusterFuture ... done
[09:31:05.194] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:05.195] result() for ClusterFuture ... done
[09:31:05.195] result() for ClusterFuture ...
[09:31:05.195] - result already collected: FutureResult
[09:31:05.195] result() for ClusterFuture ... done
a = 10
[09:31:05.195] getGlobalsAndPackages() ...
[09:31:05.195] Searching for globals...
[09:31:05.196] - globals found: [3] ‘{’, ‘+’, ‘a’
[09:31:05.196] Searching for globals ... DONE
[09:31:05.196] Resolving globals: FALSE
[09:31:05.197] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:05.197] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:05.197] - globals: [1] ‘a’
[09:31:05.197] 
[09:31:05.197] getGlobalsAndPackages() ... DONE
[09:31:05.198] run() for ‘Future’ ...
[09:31:05.198] - state: ‘created’
[09:31:05.198] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:05.211] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:05.211] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:05.212]   - Field: ‘node’
[09:31:05.212]   - Field: ‘label’
[09:31:05.212]   - Field: ‘local’
[09:31:05.212]   - Field: ‘owner’
[09:31:05.212]   - Field: ‘envir’
[09:31:05.212]   - Field: ‘workers’
[09:31:05.212]   - Field: ‘packages’
[09:31:05.212]   - Field: ‘gc’
[09:31:05.212]   - Field: ‘conditions’
[09:31:05.212]   - Field: ‘persistent’
[09:31:05.212]   - Field: ‘expr’
[09:31:05.213]   - Field: ‘uuid’
[09:31:05.213]   - Field: ‘seed’
[09:31:05.213]   - Field: ‘version’
[09:31:05.213]   - Field: ‘result’
[09:31:05.213]   - Field: ‘asynchronous’
[09:31:05.213]   - Field: ‘calls’
[09:31:05.213]   - Field: ‘globals’
[09:31:05.213]   - Field: ‘stdout’
[09:31:05.213]   - Field: ‘earlySignal’
[09:31:05.213]   - Field: ‘lazy’
[09:31:05.213]   - Field: ‘state’
[09:31:05.214] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:05.214] - Launch lazy future ...
[09:31:05.214] Packages needed by the future expression (n = 0): <none>
[09:31:05.214] Packages needed by future strategies (n = 0): <none>
[09:31:05.214] {
[09:31:05.214]     {
[09:31:05.214]         {
[09:31:05.214]             ...future.startTime <- base::Sys.time()
[09:31:05.214]             {
[09:31:05.214]                 {
[09:31:05.214]                   {
[09:31:05.214]                     {
[09:31:05.214]                       base::local({
[09:31:05.214]                         has_future <- base::requireNamespace("future", 
[09:31:05.214]                           quietly = TRUE)
[09:31:05.214]                         if (has_future) {
[09:31:05.214]                           ns <- base::getNamespace("future")
[09:31:05.214]                           version <- ns[[".package"]][["version"]]
[09:31:05.214]                           if (is.null(version)) 
[09:31:05.214]                             version <- utils::packageVersion("future")
[09:31:05.214]                         }
[09:31:05.214]                         else {
[09:31:05.214]                           version <- NULL
[09:31:05.214]                         }
[09:31:05.214]                         if (!has_future || version < "1.8.0") {
[09:31:05.214]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:05.214]                             "", base::R.version$version.string), 
[09:31:05.214]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:05.214]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:05.214]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:05.214]                               "release", "version")], collapse = " "), 
[09:31:05.214]                             hostname = base::Sys.info()[["nodename"]])
[09:31:05.214]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:05.214]                             info)
[09:31:05.214]                           info <- base::paste(info, collapse = "; ")
[09:31:05.214]                           if (!has_future) {
[09:31:05.214]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:05.214]                               info)
[09:31:05.214]                           }
[09:31:05.214]                           else {
[09:31:05.214]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:05.214]                               info, version)
[09:31:05.214]                           }
[09:31:05.214]                           base::stop(msg)
[09:31:05.214]                         }
[09:31:05.214]                       })
[09:31:05.214]                     }
[09:31:05.214]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:05.214]                     base::options(mc.cores = 1L)
[09:31:05.214]                   }
[09:31:05.214]                   ...future.strategy.old <- future::plan("list")
[09:31:05.214]                   options(future.plan = NULL)
[09:31:05.214]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.214]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:05.214]                 }
[09:31:05.214]                 ...future.workdir <- getwd()
[09:31:05.214]             }
[09:31:05.214]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:05.214]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:05.214]         }
[09:31:05.214]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:05.214]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:05.214]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:05.214]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:05.214]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:05.214]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:05.214]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:05.214]             base::names(...future.oldOptions))
[09:31:05.214]     }
[09:31:05.214]     if (FALSE) {
[09:31:05.214]     }
[09:31:05.214]     else {
[09:31:05.214]         if (TRUE) {
[09:31:05.214]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:05.214]                 open = "w")
[09:31:05.214]         }
[09:31:05.214]         else {
[09:31:05.214]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:05.214]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:05.214]         }
[09:31:05.214]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:05.214]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:05.214]             base::sink(type = "output", split = FALSE)
[09:31:05.214]             base::close(...future.stdout)
[09:31:05.214]         }, add = TRUE)
[09:31:05.214]     }
[09:31:05.214]     ...future.frame <- base::sys.nframe()
[09:31:05.214]     ...future.conditions <- base::list()
[09:31:05.214]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:05.214]     if (FALSE) {
[09:31:05.214]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:05.214]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:05.214]     }
[09:31:05.214]     ...future.result <- base::tryCatch({
[09:31:05.214]         base::withCallingHandlers({
[09:31:05.214]             ...future.value <- base::withVisible(base::local({
[09:31:05.214]                 ...future.makeSendCondition <- base::local({
[09:31:05.214]                   sendCondition <- NULL
[09:31:05.214]                   function(frame = 1L) {
[09:31:05.214]                     if (is.function(sendCondition)) 
[09:31:05.214]                       return(sendCondition)
[09:31:05.214]                     ns <- getNamespace("parallel")
[09:31:05.214]                     if (exists("sendData", mode = "function", 
[09:31:05.214]                       envir = ns)) {
[09:31:05.214]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:05.214]                         envir = ns)
[09:31:05.214]                       envir <- sys.frame(frame)
[09:31:05.214]                       master <- NULL
[09:31:05.214]                       while (!identical(envir, .GlobalEnv) && 
[09:31:05.214]                         !identical(envir, emptyenv())) {
[09:31:05.214]                         if (exists("master", mode = "list", envir = envir, 
[09:31:05.214]                           inherits = FALSE)) {
[09:31:05.214]                           master <- get("master", mode = "list", 
[09:31:05.214]                             envir = envir, inherits = FALSE)
[09:31:05.214]                           if (inherits(master, c("SOCKnode", 
[09:31:05.214]                             "SOCK0node"))) {
[09:31:05.214]                             sendCondition <<- function(cond) {
[09:31:05.214]                               data <- list(type = "VALUE", value = cond, 
[09:31:05.214]                                 success = TRUE)
[09:31:05.214]                               parallel_sendData(master, data)
[09:31:05.214]                             }
[09:31:05.214]                             return(sendCondition)
[09:31:05.214]                           }
[09:31:05.214]                         }
[09:31:05.214]                         frame <- frame + 1L
[09:31:05.214]                         envir <- sys.frame(frame)
[09:31:05.214]                       }
[09:31:05.214]                     }
[09:31:05.214]                     sendCondition <<- function(cond) NULL
[09:31:05.214]                   }
[09:31:05.214]                 })
[09:31:05.214]                 withCallingHandlers({
[09:31:05.214]                   {
[09:31:05.214]                     a + 1
[09:31:05.214]                   }
[09:31:05.214]                 }, immediateCondition = function(cond) {
[09:31:05.214]                   sendCondition <- ...future.makeSendCondition()
[09:31:05.214]                   sendCondition(cond)
[09:31:05.214]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.214]                   {
[09:31:05.214]                     inherits <- base::inherits
[09:31:05.214]                     invokeRestart <- base::invokeRestart
[09:31:05.214]                     is.null <- base::is.null
[09:31:05.214]                     muffled <- FALSE
[09:31:05.214]                     if (inherits(cond, "message")) {
[09:31:05.214]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:05.214]                       if (muffled) 
[09:31:05.214]                         invokeRestart("muffleMessage")
[09:31:05.214]                     }
[09:31:05.214]                     else if (inherits(cond, "warning")) {
[09:31:05.214]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:05.214]                       if (muffled) 
[09:31:05.214]                         invokeRestart("muffleWarning")
[09:31:05.214]                     }
[09:31:05.214]                     else if (inherits(cond, "condition")) {
[09:31:05.214]                       if (!is.null(pattern)) {
[09:31:05.214]                         computeRestarts <- base::computeRestarts
[09:31:05.214]                         grepl <- base::grepl
[09:31:05.214]                         restarts <- computeRestarts(cond)
[09:31:05.214]                         for (restart in restarts) {
[09:31:05.214]                           name <- restart$name
[09:31:05.214]                           if (is.null(name)) 
[09:31:05.214]                             next
[09:31:05.214]                           if (!grepl(pattern, name)) 
[09:31:05.214]                             next
[09:31:05.214]                           invokeRestart(restart)
[09:31:05.214]                           muffled <- TRUE
[09:31:05.214]                           break
[09:31:05.214]                         }
[09:31:05.214]                       }
[09:31:05.214]                     }
[09:31:05.214]                     invisible(muffled)
[09:31:05.214]                   }
[09:31:05.214]                   muffleCondition(cond)
[09:31:05.214]                 })
[09:31:05.214]             }))
[09:31:05.214]             future::FutureResult(value = ...future.value$value, 
[09:31:05.214]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.214]                   ...future.rng), globalenv = if (FALSE) 
[09:31:05.214]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:05.214]                     ...future.globalenv.names))
[09:31:05.214]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:05.214]         }, condition = base::local({
[09:31:05.214]             c <- base::c
[09:31:05.214]             inherits <- base::inherits
[09:31:05.214]             invokeRestart <- base::invokeRestart
[09:31:05.214]             length <- base::length
[09:31:05.214]             list <- base::list
[09:31:05.214]             seq.int <- base::seq.int
[09:31:05.214]             signalCondition <- base::signalCondition
[09:31:05.214]             sys.calls <- base::sys.calls
[09:31:05.214]             `[[` <- base::`[[`
[09:31:05.214]             `+` <- base::`+`
[09:31:05.214]             `<<-` <- base::`<<-`
[09:31:05.214]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:05.214]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:05.214]                   3L)]
[09:31:05.214]             }
[09:31:05.214]             function(cond) {
[09:31:05.214]                 is_error <- inherits(cond, "error")
[09:31:05.214]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:05.214]                   NULL)
[09:31:05.214]                 if (is_error) {
[09:31:05.214]                   sessionInformation <- function() {
[09:31:05.214]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:05.214]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:05.214]                       search = base::search(), system = base::Sys.info())
[09:31:05.214]                   }
[09:31:05.214]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.214]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:05.214]                     cond$call), session = sessionInformation(), 
[09:31:05.214]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:05.214]                   signalCondition(cond)
[09:31:05.214]                 }
[09:31:05.214]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:05.214]                 "immediateCondition"))) {
[09:31:05.214]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:05.214]                   ...future.conditions[[length(...future.conditions) + 
[09:31:05.214]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:05.214]                   if (TRUE && !signal) {
[09:31:05.214]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.214]                     {
[09:31:05.214]                       inherits <- base::inherits
[09:31:05.214]                       invokeRestart <- base::invokeRestart
[09:31:05.214]                       is.null <- base::is.null
[09:31:05.214]                       muffled <- FALSE
[09:31:05.214]                       if (inherits(cond, "message")) {
[09:31:05.214]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.214]                         if (muffled) 
[09:31:05.214]                           invokeRestart("muffleMessage")
[09:31:05.214]                       }
[09:31:05.214]                       else if (inherits(cond, "warning")) {
[09:31:05.214]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.214]                         if (muffled) 
[09:31:05.214]                           invokeRestart("muffleWarning")
[09:31:05.214]                       }
[09:31:05.214]                       else if (inherits(cond, "condition")) {
[09:31:05.214]                         if (!is.null(pattern)) {
[09:31:05.214]                           computeRestarts <- base::computeRestarts
[09:31:05.214]                           grepl <- base::grepl
[09:31:05.214]                           restarts <- computeRestarts(cond)
[09:31:05.214]                           for (restart in restarts) {
[09:31:05.214]                             name <- restart$name
[09:31:05.214]                             if (is.null(name)) 
[09:31:05.214]                               next
[09:31:05.214]                             if (!grepl(pattern, name)) 
[09:31:05.214]                               next
[09:31:05.214]                             invokeRestart(restart)
[09:31:05.214]                             muffled <- TRUE
[09:31:05.214]                             break
[09:31:05.214]                           }
[09:31:05.214]                         }
[09:31:05.214]                       }
[09:31:05.214]                       invisible(muffled)
[09:31:05.214]                     }
[09:31:05.214]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.214]                   }
[09:31:05.214]                 }
[09:31:05.214]                 else {
[09:31:05.214]                   if (TRUE) {
[09:31:05.214]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:05.214]                     {
[09:31:05.214]                       inherits <- base::inherits
[09:31:05.214]                       invokeRestart <- base::invokeRestart
[09:31:05.214]                       is.null <- base::is.null
[09:31:05.214]                       muffled <- FALSE
[09:31:05.214]                       if (inherits(cond, "message")) {
[09:31:05.214]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:05.214]                         if (muffled) 
[09:31:05.214]                           invokeRestart("muffleMessage")
[09:31:05.214]                       }
[09:31:05.214]                       else if (inherits(cond, "warning")) {
[09:31:05.214]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:05.214]                         if (muffled) 
[09:31:05.214]                           invokeRestart("muffleWarning")
[09:31:05.214]                       }
[09:31:05.214]                       else if (inherits(cond, "condition")) {
[09:31:05.214]                         if (!is.null(pattern)) {
[09:31:05.214]                           computeRestarts <- base::computeRestarts
[09:31:05.214]                           grepl <- base::grepl
[09:31:05.214]                           restarts <- computeRestarts(cond)
[09:31:05.214]                           for (restart in restarts) {
[09:31:05.214]                             name <- restart$name
[09:31:05.214]                             if (is.null(name)) 
[09:31:05.214]                               next
[09:31:05.214]                             if (!grepl(pattern, name)) 
[09:31:05.214]                               next
[09:31:05.214]                             invokeRestart(restart)
[09:31:05.214]                             muffled <- TRUE
[09:31:05.214]                             break
[09:31:05.214]                           }
[09:31:05.214]                         }
[09:31:05.214]                       }
[09:31:05.214]                       invisible(muffled)
[09:31:05.214]                     }
[09:31:05.214]                     muffleCondition(cond, pattern = "^muffle")
[09:31:05.214]                   }
[09:31:05.214]                 }
[09:31:05.214]             }
[09:31:05.214]         }))
[09:31:05.214]     }, error = function(ex) {
[09:31:05.214]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:05.214]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:05.214]                 ...future.rng), started = ...future.startTime, 
[09:31:05.214]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:05.214]             version = "1.8"), class = "FutureResult")
[09:31:05.214]     }, finally = {
[09:31:05.214]         if (!identical(...future.workdir, getwd())) 
[09:31:05.214]             setwd(...future.workdir)
[09:31:05.214]         {
[09:31:05.214]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:05.214]                 ...future.oldOptions$nwarnings <- NULL
[09:31:05.214]             }
[09:31:05.214]             base::options(...future.oldOptions)
[09:31:05.214]             if (.Platform$OS.type == "windows") {
[09:31:05.214]                 old_names <- names(...future.oldEnvVars)
[09:31:05.214]                 envs <- base::Sys.getenv()
[09:31:05.214]                 names <- names(envs)
[09:31:05.214]                 common <- intersect(names, old_names)
[09:31:05.214]                 added <- setdiff(names, old_names)
[09:31:05.214]                 removed <- setdiff(old_names, names)
[09:31:05.214]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:05.214]                   envs[common]]
[09:31:05.214]                 NAMES <- toupper(changed)
[09:31:05.214]                 args <- list()
[09:31:05.214]                 for (kk in seq_along(NAMES)) {
[09:31:05.214]                   name <- changed[[kk]]
[09:31:05.214]                   NAME <- NAMES[[kk]]
[09:31:05.214]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.214]                     next
[09:31:05.214]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.214]                 }
[09:31:05.214]                 NAMES <- toupper(added)
[09:31:05.214]                 for (kk in seq_along(NAMES)) {
[09:31:05.214]                   name <- added[[kk]]
[09:31:05.214]                   NAME <- NAMES[[kk]]
[09:31:05.214]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.214]                     next
[09:31:05.214]                   args[[name]] <- ""
[09:31:05.214]                 }
[09:31:05.214]                 NAMES <- toupper(removed)
[09:31:05.214]                 for (kk in seq_along(NAMES)) {
[09:31:05.214]                   name <- removed[[kk]]
[09:31:05.214]                   NAME <- NAMES[[kk]]
[09:31:05.214]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:05.214]                     next
[09:31:05.214]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:05.214]                 }
[09:31:05.214]                 if (length(args) > 0) 
[09:31:05.214]                   base::do.call(base::Sys.setenv, args = args)
[09:31:05.214]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:05.214]             }
[09:31:05.214]             else {
[09:31:05.214]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:05.214]             }
[09:31:05.214]             {
[09:31:05.214]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:05.214]                   0L) {
[09:31:05.214]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:05.214]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:05.214]                   base::options(opts)
[09:31:05.214]                 }
[09:31:05.214]                 {
[09:31:05.214]                   {
[09:31:05.214]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:05.214]                     NULL
[09:31:05.214]                   }
[09:31:05.214]                   options(future.plan = NULL)
[09:31:05.214]                   if (is.na(NA_character_)) 
[09:31:05.214]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:05.214]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:05.214]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:05.214]                     .init = FALSE)
[09:31:05.214]                 }
[09:31:05.214]             }
[09:31:05.214]         }
[09:31:05.214]     })
[09:31:05.214]     if (TRUE) {
[09:31:05.214]         base::sink(type = "output", split = FALSE)
[09:31:05.214]         if (TRUE) {
[09:31:05.214]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:05.214]         }
[09:31:05.214]         else {
[09:31:05.214]             ...future.result["stdout"] <- base::list(NULL)
[09:31:05.214]         }
[09:31:05.214]         base::close(...future.stdout)
[09:31:05.214]         ...future.stdout <- NULL
[09:31:05.214]     }
[09:31:05.214]     ...future.result$conditions <- ...future.conditions
[09:31:05.214]     ...future.result$finished <- base::Sys.time()
[09:31:05.214]     ...future.result
[09:31:05.214] }
[09:31:05.217] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[09:31:05.217] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[09:31:05.217] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[09:31:05.217] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[09:31:05.218] MultisessionFuture started
[09:31:05.218] - Launch lazy future ... done
[09:31:05.218] run() for ‘MultisessionFuture’ ... done
[09:31:05.219] result() for ClusterFuture ...
[09:31:05.219] receiveMessageFromWorker() for ClusterFuture ...
[09:31:05.219] - Validating connection of MultisessionFuture
[09:31:05.220] - received message: FutureResult
[09:31:05.220] - Received FutureResult
[09:31:05.220] - Erased future from FutureRegistry
[09:31:05.220] result() for ClusterFuture ...
[09:31:05.220] - result already collected: FutureResult
[09:31:05.220] result() for ClusterFuture ... done
[09:31:05.220] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:05.220] result() for ClusterFuture ... done
[09:31:05.221] result() for ClusterFuture ...
[09:31:05.221] - result already collected: FutureResult
[09:31:05.221] result() for ClusterFuture ... done
b = 11
*** %<-% with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** %<-% ... DONE")
*** %<-% ... DONE
> 
> source("incl/end.R")
[09:31:05.221] plan(): Setting new future strategy stack:
[09:31:05.222] List of future strategies:
[09:31:05.222] 1. FutureStrategy:
[09:31:05.222]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:05.222]    - tweaked: FALSE
[09:31:05.222]    - call: future::plan(oplan)
[09:31:05.222] plan(): nbrOfWorkers() = 1
> 
