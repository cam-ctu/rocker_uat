
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:41:25.107] plan(): Setting new future strategy stack:
[17:41:25.107] List of future strategies:
[17:41:25.107] 1. sequential:
[17:41:25.107]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.107]    - tweaked: FALSE
[17:41:25.107]    - call: future::plan("sequential")
[17:41:25.118] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[17:41:25.131] plan(): Setting new future strategy stack:
[17:41:25.131] List of future strategies:
[17:41:25.131] 1. sequential:
[17:41:25.131]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.131]    - tweaked: FALSE
[17:41:25.131]    - call: NULL
[17:41:25.141] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[17:41:25.148] plan(): Setting new future strategy stack:
[17:41:25.148] List of future strategies:
[17:41:25.148] 1. sequential:
[17:41:25.148]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.148]    - tweaked: FALSE
[17:41:25.148]    - call: NULL
[17:41:25.148] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[17:41:25.149] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:25.149] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:41:25.149] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:41:25.149] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:41:25.149] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:41:25.150] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:41:25.150] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:41:25.150] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:41:25.150] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:41:25.150] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:41:25.150] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:41:25.150] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:41:25.150] Environment variable ‘R_FUTURE_PLAN’ not set
[17:41:25.150] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:41:25.151] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:41:25.151] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:41:25.151] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:41:25.151] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:41:25.151] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:41:25.151] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:41:25.151] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:41:25.151] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:41:25.151] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:41:25.151] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:41:25.152] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:41:25.152] R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:25.152] Coercing from character to numeric: ‘0.01’
[17:41:25.152] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[17:41:25.152] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:41:25.152] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:41:25.152] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:41:25.152] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:41:25.153] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:41:25.153] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:41:25.153] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:41:25.153] R process uuid: ec137522-6919-c4a3-1932-328082dd4ed0
[17:41:25.153] Setting plan('default')
[17:41:25.153] plan(): Setting new future strategy stack:
[17:41:25.153] List of future strategies:
[17:41:25.153] 1. sequential:
[17:41:25.153]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.153]    - tweaked: FALSE
[17:41:25.153]    - call: NULL
[17:41:25.154] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:41:25.154] plan(): Setting new future strategy stack:
[17:41:25.154] List of future strategies:
[17:41:25.154] 1. sequential:
[17:41:25.154]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.154]    - tweaked: FALSE
[17:41:25.154]    - call: NULL
[17:41:25.155] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[17:41:25.155] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:25.156] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:41:25.156] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:41:25.156] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:41:25.156] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:41:25.156] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:41:25.156] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:41:25.156] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:41:25.156] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:41:25.156] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:41:25.157] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:41:25.157] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:41:25.157] Environment variable ‘R_FUTURE_PLAN’ not set
[17:41:25.157] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:41:25.157] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:41:25.157] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:41:25.157] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:41:25.157] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:41:25.157] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:41:25.157] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:41:25.158] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:41:25.158] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:41:25.158] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:41:25.158] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:41:25.158] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:41:25.158] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:41:25.158] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:41:25.158] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:41:25.158] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:41:25.159] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:41:25.159] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:41:25.159] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:41:25.159] R command-line argument: -p 1
[17:41:25.159]  => options(future.plan = sequential)
[17:41:25.159] R process uuid: ec137522-6919-c4a3-1932-328082dd4ed0
[17:41:25.159] Setting plan('default')
[17:41:25.159] plan(): Setting new future strategy stack:
[17:41:25.159] List of future strategies:
[17:41:25.159] 1. sequential:
[17:41:25.159]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.159]    - tweaked: FALSE
[17:41:25.159]    - call: NULL
[17:41:25.161] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[17:41:25.162] plan(): Setting new future strategy stack:
[17:41:25.162] List of future strategies:
[17:41:25.162] 1. sequential:
[17:41:25.162]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.162]    - tweaked: FALSE
[17:41:25.162]    - call: NULL
[17:41:25.162] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[17:41:25.163] plan(): Setting new future strategy stack:
[17:41:25.163] List of future strategies:
[17:41:25.163] 1. sequential:
[17:41:25.163]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.163]    - tweaked: FALSE
[17:41:25.163]    - call: NULL
[17:41:25.163] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[17:41:25.164] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:25.164] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:41:25.164] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:41:25.164] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:41:25.164] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:41:25.164] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:41:25.164] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:41:25.165] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:41:25.165] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:41:25.165] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:41:25.165] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:41:25.165] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:41:25.165] Environment variable ‘R_FUTURE_PLAN’ not set
[17:41:25.165] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:41:25.165] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:41:25.165] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:41:25.166] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:41:25.166] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:41:25.166] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:41:25.166] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:41:25.166] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:41:25.166] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:41:25.166] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:41:25.166] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:41:25.166] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:41:25.166] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:41:25.167] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:41:25.167] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:41:25.167] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:41:25.167] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:41:25.167] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:41:25.167] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:41:25.167] R process uuid: ec137522-6919-c4a3-1932-328082dd4ed0
[17:41:25.167] Setting plan('default')
[17:41:25.167] plan(): Setting new future strategy stack:
[17:41:25.167] List of future strategies:
[17:41:25.167] 1. sequential:
[17:41:25.167]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.167]    - tweaked: FALSE
[17:41:25.167]    - call: NULL
[17:41:25.168] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[17:41:25.168] plan(): Setting new future strategy stack:
[17:41:25.168] List of future strategies:
[17:41:25.168] 1. sequential:
[17:41:25.168]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.168]    - tweaked: FALSE
[17:41:25.168]    - call: NULL
[17:41:25.169] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[17:41:25.170] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:25.170] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:41:25.170] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:41:25.170] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:41:25.170] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:41:25.170] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:41:25.170] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:41:25.170] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:41:25.170] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:41:25.171] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:41:25.171] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:41:25.171] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:41:25.171] Environment variable ‘R_FUTURE_PLAN’ not set
[17:41:25.171] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:41:25.171] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:41:25.171] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:41:25.171] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:41:25.171] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:41:25.171] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:41:25.172] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:41:25.172] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:41:25.172] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:41:25.172] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:41:25.172] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:41:25.172] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:41:25.172] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:41:25.172] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:41:25.172] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:41:25.173] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:41:25.173] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:41:25.173] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:41:25.173] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:41:25.173] R command-line argument: -p 2
[17:41:25.173]  => options(future.plan = tweak(multisession, workers = 2))
[17:41:25.175] R process uuid: ec137522-6919-c4a3-1932-328082dd4ed0
[17:41:25.175] Setting plan('default')
[17:41:25.176] plan(): Setting new future strategy stack:
[17:41:25.176] List of future strategies:
[17:41:25.176] 1. multisession:
[17:41:25.176]    - args: function (..., workers = 2L, envir = parent.frame())
[17:41:25.176]    - tweaked: TRUE
[17:41:25.176]    - call: NULL
[17:41:25.176] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[17:41:25.176] plan(): Setting new future strategy stack:
[17:41:25.177] List of future strategies:
[17:41:25.177] 1. multisession:
[17:41:25.177]    - args: function (..., workers = 2L, envir = parent.frame())
[17:41:25.177]    - tweaked: TRUE
[17:41:25.177]    - call: NULL
[17:41:25.177] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:41:25.177] multisession:
[17:41:25.177] - args: function (..., workers = 2L, envir = parent.frame())
[17:41:25.177] - tweaked: TRUE
[17:41:25.177] - call: NULL
[17:41:25.178] getGlobalsAndPackages() ...
[17:41:25.178] Not searching for globals
[17:41:25.179] - globals: [0] <none>
[17:41:25.179] getGlobalsAndPackages() ... DONE
[17:41:25.179] [local output] makeClusterPSOCK() ...
[17:41:25.210] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:41:25.211] [local output] Base port: 11477
[17:41:25.211] [local output] Getting setup options for 2 cluster nodes ...
[17:41:25.211] [local output]  - Node 1 of 2 ...
[17:41:25.211] [local output] localMachine=TRUE => revtunnel=FALSE

[17:41:25.212] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpgp6XkG/worker.rank=1.parallelly.parent=50063.c38f614e0404.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpgp6XkG/worker.rank=1.parallelly.parent=50063.c38f614e0404.pid")'’
[17:41:25.397] - Possible to infer worker's PID: TRUE
[17:41:25.397] [local output] Rscript port: 11477

[17:41:25.398] [local output]  - Node 2 of 2 ...
[17:41:25.398] [local output] localMachine=TRUE => revtunnel=FALSE

[17:41:25.399] [local output] Rscript port: 11477

[17:41:25.399] [local output] Getting setup options for 2 cluster nodes ... done
[17:41:25.399] [local output]  - Parallel setup requested for some PSOCK nodes
[17:41:25.399] [local output] Setting up PSOCK nodes in parallel
[17:41:25.400] List of 36
[17:41:25.400]  $ worker          : chr "localhost"
[17:41:25.400]   ..- attr(*, "localhost")= logi TRUE
[17:41:25.400]  $ master          : chr "localhost"
[17:41:25.400]  $ port            : int 11477
[17:41:25.400]  $ connectTimeout  : num 120
[17:41:25.400]  $ timeout         : num 2592000
[17:41:25.400]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:41:25.400]  $ homogeneous     : logi TRUE
[17:41:25.400]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:41:25.400]  $ rscript_envs    : NULL
[17:41:25.400]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:41:25.400]  $ rscript_startup : NULL
[17:41:25.400]  $ rscript_sh      : chr "sh"
[17:41:25.400]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:41:25.400]  $ methods         : logi TRUE
[17:41:25.400]  $ socketOptions   : chr "no-delay"
[17:41:25.400]  $ useXDR          : logi FALSE
[17:41:25.400]  $ outfile         : chr "/dev/null"
[17:41:25.400]  $ renice          : int NA
[17:41:25.400]  $ rshcmd          : NULL
[17:41:25.400]  $ user            : chr(0) 
[17:41:25.400]  $ revtunnel       : logi FALSE
[17:41:25.400]  $ rshlogfile      : NULL
[17:41:25.400]  $ rshopts         : chr(0) 
[17:41:25.400]  $ rank            : int 1
[17:41:25.400]  $ manual          : logi FALSE
[17:41:25.400]  $ dryrun          : logi FALSE
[17:41:25.400]  $ quiet           : logi FALSE
[17:41:25.400]  $ setup_strategy  : chr "parallel"
[17:41:25.400]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:41:25.400]  $ pidfile         : chr "/tmp/Rtmpgp6XkG/worker.rank=1.parallelly.parent=50063.c38f614e0404.pid"
[17:41:25.400]  $ rshcmd_label    : NULL
[17:41:25.400]  $ rsh_call        : NULL
[17:41:25.400]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:41:25.400]  $ localMachine    : logi TRUE
[17:41:25.400]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:41:25.400]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:41:25.400]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:41:25.400]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:41:25.400]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:41:25.400]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:41:25.400]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:41:25.400]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:41:25.400]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:41:25.400]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:41:25.400]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:41:25.400]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:41:25.400]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:41:25.400]  $ arguments       :List of 28
[17:41:25.400]   ..$ worker          : chr "localhost"
[17:41:25.400]   ..$ master          : NULL
[17:41:25.400]   ..$ port            : int 11477
[17:41:25.400]   ..$ connectTimeout  : num 120
[17:41:25.400]   ..$ timeout         : num 2592000
[17:41:25.400]   ..$ rscript         : NULL
[17:41:25.400]   ..$ homogeneous     : NULL
[17:41:25.400]   ..$ rscript_args    : NULL
[17:41:25.400]   ..$ rscript_envs    : NULL
[17:41:25.400]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:41:25.400]   ..$ rscript_startup : NULL
[17:41:25.400]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:41:25.400]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:41:25.400]   ..$ methods         : logi TRUE
[17:41:25.400]   ..$ socketOptions   : chr "no-delay"
[17:41:25.400]   ..$ useXDR          : logi FALSE
[17:41:25.400]   ..$ outfile         : chr "/dev/null"
[17:41:25.400]   ..$ renice          : int NA
[17:41:25.400]   ..$ rshcmd          : NULL
[17:41:25.400]   ..$ user            : NULL
[17:41:25.400]   ..$ revtunnel       : logi NA
[17:41:25.400]   ..$ rshlogfile      : NULL
[17:41:25.400]   ..$ rshopts         : NULL
[17:41:25.400]   ..$ rank            : int 1
[17:41:25.400]   ..$ manual          : logi FALSE
[17:41:25.400]   ..$ dryrun          : logi FALSE
[17:41:25.400]   ..$ quiet           : logi FALSE
[17:41:25.400]   ..$ setup_strategy  : chr "parallel"
[17:41:25.400]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:41:25.416] [local output] System call to launch all workers:
[17:41:25.416] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpgp6XkG/worker.rank=1.parallelly.parent=50063.c38f614e0404.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11477 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:41:25.416] [local output] Starting PSOCK main server
[17:41:25.422] [local output] Workers launched
[17:41:25.422] [local output] Waiting for workers to connect back
[17:41:25.422]  - [local output] 0 workers out of 2 ready
[17:41:25.675]  - [local output] 0 workers out of 2 ready
[17:41:25.675]  - [local output] 1 workers out of 2 ready
[17:41:25.676]  - [local output] 2 workers out of 2 ready
[17:41:25.676] [local output] Launching of workers completed
[17:41:25.676] [local output] Collecting session information from workers
[17:41:25.677] [local output]  - Worker #1 of 2
[17:41:25.677] [local output]  - Worker #2 of 2
[17:41:25.677] [local output] makeClusterPSOCK() ... done
[17:41:25.689] Packages needed by the future expression (n = 0): <none>
[17:41:25.689] Packages needed by future strategies (n = 0): <none>
[17:41:25.690] {
[17:41:25.690]     {
[17:41:25.690]         {
[17:41:25.690]             ...future.startTime <- base::Sys.time()
[17:41:25.690]             {
[17:41:25.690]                 {
[17:41:25.690]                   {
[17:41:25.690]                     {
[17:41:25.690]                       base::local({
[17:41:25.690]                         has_future <- base::requireNamespace("future", 
[17:41:25.690]                           quietly = TRUE)
[17:41:25.690]                         if (has_future) {
[17:41:25.690]                           ns <- base::getNamespace("future")
[17:41:25.690]                           version <- ns[[".package"]][["version"]]
[17:41:25.690]                           if (is.null(version)) 
[17:41:25.690]                             version <- utils::packageVersion("future")
[17:41:25.690]                         }
[17:41:25.690]                         else {
[17:41:25.690]                           version <- NULL
[17:41:25.690]                         }
[17:41:25.690]                         if (!has_future || version < "1.8.0") {
[17:41:25.690]                           info <- base::c(r_version = base::gsub("R version ", 
[17:41:25.690]                             "", base::R.version$version.string), 
[17:41:25.690]                             platform = base::sprintf("%s (%s-bit)", 
[17:41:25.690]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:25.690]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:25.690]                               "release", "version")], collapse = " "), 
[17:41:25.690]                             hostname = base::Sys.info()[["nodename"]])
[17:41:25.690]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:41:25.690]                             info)
[17:41:25.690]                           info <- base::paste(info, collapse = "; ")
[17:41:25.690]                           if (!has_future) {
[17:41:25.690]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:25.690]                               info)
[17:41:25.690]                           }
[17:41:25.690]                           else {
[17:41:25.690]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:25.690]                               info, version)
[17:41:25.690]                           }
[17:41:25.690]                           base::stop(msg)
[17:41:25.690]                         }
[17:41:25.690]                       })
[17:41:25.690]                     }
[17:41:25.690]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:41:25.690]                     base::options(mc.cores = 1L)
[17:41:25.690]                   }
[17:41:25.690]                   ...future.strategy.old <- future::plan("list")
[17:41:25.690]                   options(future.plan = NULL)
[17:41:25.690]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:25.690]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:25.690]                 }
[17:41:25.690]                 ...future.workdir <- getwd()
[17:41:25.690]             }
[17:41:25.690]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:25.690]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:25.690]         }
[17:41:25.690]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:25.690]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:25.690]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:25.690]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:25.690]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:25.690]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:25.690]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:25.690]             base::names(...future.oldOptions))
[17:41:25.690]     }
[17:41:25.690]     if (FALSE) {
[17:41:25.690]     }
[17:41:25.690]     else {
[17:41:25.690]         if (TRUE) {
[17:41:25.690]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:25.690]                 open = "w")
[17:41:25.690]         }
[17:41:25.690]         else {
[17:41:25.690]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:25.690]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:25.690]         }
[17:41:25.690]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:25.690]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:25.690]             base::sink(type = "output", split = FALSE)
[17:41:25.690]             base::close(...future.stdout)
[17:41:25.690]         }, add = TRUE)
[17:41:25.690]     }
[17:41:25.690]     ...future.frame <- base::sys.nframe()
[17:41:25.690]     ...future.conditions <- base::list()
[17:41:25.690]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:25.690]     if (FALSE) {
[17:41:25.690]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:25.690]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:25.690]     }
[17:41:25.690]     ...future.result <- base::tryCatch({
[17:41:25.690]         base::withCallingHandlers({
[17:41:25.690]             ...future.value <- base::withVisible(base::local({
[17:41:25.690]                 ...future.makeSendCondition <- base::local({
[17:41:25.690]                   sendCondition <- NULL
[17:41:25.690]                   function(frame = 1L) {
[17:41:25.690]                     if (is.function(sendCondition)) 
[17:41:25.690]                       return(sendCondition)
[17:41:25.690]                     ns <- getNamespace("parallel")
[17:41:25.690]                     if (exists("sendData", mode = "function", 
[17:41:25.690]                       envir = ns)) {
[17:41:25.690]                       parallel_sendData <- get("sendData", mode = "function", 
[17:41:25.690]                         envir = ns)
[17:41:25.690]                       envir <- sys.frame(frame)
[17:41:25.690]                       master <- NULL
[17:41:25.690]                       while (!identical(envir, .GlobalEnv) && 
[17:41:25.690]                         !identical(envir, emptyenv())) {
[17:41:25.690]                         if (exists("master", mode = "list", envir = envir, 
[17:41:25.690]                           inherits = FALSE)) {
[17:41:25.690]                           master <- get("master", mode = "list", 
[17:41:25.690]                             envir = envir, inherits = FALSE)
[17:41:25.690]                           if (inherits(master, c("SOCKnode", 
[17:41:25.690]                             "SOCK0node"))) {
[17:41:25.690]                             sendCondition <<- function(cond) {
[17:41:25.690]                               data <- list(type = "VALUE", value = cond, 
[17:41:25.690]                                 success = TRUE)
[17:41:25.690]                               parallel_sendData(master, data)
[17:41:25.690]                             }
[17:41:25.690]                             return(sendCondition)
[17:41:25.690]                           }
[17:41:25.690]                         }
[17:41:25.690]                         frame <- frame + 1L
[17:41:25.690]                         envir <- sys.frame(frame)
[17:41:25.690]                       }
[17:41:25.690]                     }
[17:41:25.690]                     sendCondition <<- function(cond) NULL
[17:41:25.690]                   }
[17:41:25.690]                 })
[17:41:25.690]                 withCallingHandlers({
[17:41:25.690]                   NA
[17:41:25.690]                 }, immediateCondition = function(cond) {
[17:41:25.690]                   sendCondition <- ...future.makeSendCondition()
[17:41:25.690]                   sendCondition(cond)
[17:41:25.690]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:25.690]                   {
[17:41:25.690]                     inherits <- base::inherits
[17:41:25.690]                     invokeRestart <- base::invokeRestart
[17:41:25.690]                     is.null <- base::is.null
[17:41:25.690]                     muffled <- FALSE
[17:41:25.690]                     if (inherits(cond, "message")) {
[17:41:25.690]                       muffled <- grepl(pattern, "muffleMessage")
[17:41:25.690]                       if (muffled) 
[17:41:25.690]                         invokeRestart("muffleMessage")
[17:41:25.690]                     }
[17:41:25.690]                     else if (inherits(cond, "warning")) {
[17:41:25.690]                       muffled <- grepl(pattern, "muffleWarning")
[17:41:25.690]                       if (muffled) 
[17:41:25.690]                         invokeRestart("muffleWarning")
[17:41:25.690]                     }
[17:41:25.690]                     else if (inherits(cond, "condition")) {
[17:41:25.690]                       if (!is.null(pattern)) {
[17:41:25.690]                         computeRestarts <- base::computeRestarts
[17:41:25.690]                         grepl <- base::grepl
[17:41:25.690]                         restarts <- computeRestarts(cond)
[17:41:25.690]                         for (restart in restarts) {
[17:41:25.690]                           name <- restart$name
[17:41:25.690]                           if (is.null(name)) 
[17:41:25.690]                             next
[17:41:25.690]                           if (!grepl(pattern, name)) 
[17:41:25.690]                             next
[17:41:25.690]                           invokeRestart(restart)
[17:41:25.690]                           muffled <- TRUE
[17:41:25.690]                           break
[17:41:25.690]                         }
[17:41:25.690]                       }
[17:41:25.690]                     }
[17:41:25.690]                     invisible(muffled)
[17:41:25.690]                   }
[17:41:25.690]                   muffleCondition(cond)
[17:41:25.690]                 })
[17:41:25.690]             }))
[17:41:25.690]             future::FutureResult(value = ...future.value$value, 
[17:41:25.690]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:25.690]                   ...future.rng), globalenv = if (FALSE) 
[17:41:25.690]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:25.690]                     ...future.globalenv.names))
[17:41:25.690]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:25.690]         }, condition = base::local({
[17:41:25.690]             c <- base::c
[17:41:25.690]             inherits <- base::inherits
[17:41:25.690]             invokeRestart <- base::invokeRestart
[17:41:25.690]             length <- base::length
[17:41:25.690]             list <- base::list
[17:41:25.690]             seq.int <- base::seq.int
[17:41:25.690]             signalCondition <- base::signalCondition
[17:41:25.690]             sys.calls <- base::sys.calls
[17:41:25.690]             `[[` <- base::`[[`
[17:41:25.690]             `+` <- base::`+`
[17:41:25.690]             `<<-` <- base::`<<-`
[17:41:25.690]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:25.690]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:25.690]                   3L)]
[17:41:25.690]             }
[17:41:25.690]             function(cond) {
[17:41:25.690]                 is_error <- inherits(cond, "error")
[17:41:25.690]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:25.690]                   NULL)
[17:41:25.690]                 if (is_error) {
[17:41:25.690]                   sessionInformation <- function() {
[17:41:25.690]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:25.690]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:25.690]                       search = base::search(), system = base::Sys.info())
[17:41:25.690]                   }
[17:41:25.690]                   ...future.conditions[[length(...future.conditions) + 
[17:41:25.690]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:25.690]                     cond$call), session = sessionInformation(), 
[17:41:25.690]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:25.690]                   signalCondition(cond)
[17:41:25.690]                 }
[17:41:25.690]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:25.690]                 "immediateCondition"))) {
[17:41:25.690]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:25.690]                   ...future.conditions[[length(...future.conditions) + 
[17:41:25.690]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:25.690]                   if (TRUE && !signal) {
[17:41:25.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:25.690]                     {
[17:41:25.690]                       inherits <- base::inherits
[17:41:25.690]                       invokeRestart <- base::invokeRestart
[17:41:25.690]                       is.null <- base::is.null
[17:41:25.690]                       muffled <- FALSE
[17:41:25.690]                       if (inherits(cond, "message")) {
[17:41:25.690]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:25.690]                         if (muffled) 
[17:41:25.690]                           invokeRestart("muffleMessage")
[17:41:25.690]                       }
[17:41:25.690]                       else if (inherits(cond, "warning")) {
[17:41:25.690]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:25.690]                         if (muffled) 
[17:41:25.690]                           invokeRestart("muffleWarning")
[17:41:25.690]                       }
[17:41:25.690]                       else if (inherits(cond, "condition")) {
[17:41:25.690]                         if (!is.null(pattern)) {
[17:41:25.690]                           computeRestarts <- base::computeRestarts
[17:41:25.690]                           grepl <- base::grepl
[17:41:25.690]                           restarts <- computeRestarts(cond)
[17:41:25.690]                           for (restart in restarts) {
[17:41:25.690]                             name <- restart$name
[17:41:25.690]                             if (is.null(name)) 
[17:41:25.690]                               next
[17:41:25.690]                             if (!grepl(pattern, name)) 
[17:41:25.690]                               next
[17:41:25.690]                             invokeRestart(restart)
[17:41:25.690]                             muffled <- TRUE
[17:41:25.690]                             break
[17:41:25.690]                           }
[17:41:25.690]                         }
[17:41:25.690]                       }
[17:41:25.690]                       invisible(muffled)
[17:41:25.690]                     }
[17:41:25.690]                     muffleCondition(cond, pattern = "^muffle")
[17:41:25.690]                   }
[17:41:25.690]                 }
[17:41:25.690]                 else {
[17:41:25.690]                   if (TRUE) {
[17:41:25.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:25.690]                     {
[17:41:25.690]                       inherits <- base::inherits
[17:41:25.690]                       invokeRestart <- base::invokeRestart
[17:41:25.690]                       is.null <- base::is.null
[17:41:25.690]                       muffled <- FALSE
[17:41:25.690]                       if (inherits(cond, "message")) {
[17:41:25.690]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:25.690]                         if (muffled) 
[17:41:25.690]                           invokeRestart("muffleMessage")
[17:41:25.690]                       }
[17:41:25.690]                       else if (inherits(cond, "warning")) {
[17:41:25.690]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:25.690]                         if (muffled) 
[17:41:25.690]                           invokeRestart("muffleWarning")
[17:41:25.690]                       }
[17:41:25.690]                       else if (inherits(cond, "condition")) {
[17:41:25.690]                         if (!is.null(pattern)) {
[17:41:25.690]                           computeRestarts <- base::computeRestarts
[17:41:25.690]                           grepl <- base::grepl
[17:41:25.690]                           restarts <- computeRestarts(cond)
[17:41:25.690]                           for (restart in restarts) {
[17:41:25.690]                             name <- restart$name
[17:41:25.690]                             if (is.null(name)) 
[17:41:25.690]                               next
[17:41:25.690]                             if (!grepl(pattern, name)) 
[17:41:25.690]                               next
[17:41:25.690]                             invokeRestart(restart)
[17:41:25.690]                             muffled <- TRUE
[17:41:25.690]                             break
[17:41:25.690]                           }
[17:41:25.690]                         }
[17:41:25.690]                       }
[17:41:25.690]                       invisible(muffled)
[17:41:25.690]                     }
[17:41:25.690]                     muffleCondition(cond, pattern = "^muffle")
[17:41:25.690]                   }
[17:41:25.690]                 }
[17:41:25.690]             }
[17:41:25.690]         }))
[17:41:25.690]     }, error = function(ex) {
[17:41:25.690]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:25.690]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:25.690]                 ...future.rng), started = ...future.startTime, 
[17:41:25.690]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:25.690]             version = "1.8"), class = "FutureResult")
[17:41:25.690]     }, finally = {
[17:41:25.690]         if (!identical(...future.workdir, getwd())) 
[17:41:25.690]             setwd(...future.workdir)
[17:41:25.690]         {
[17:41:25.690]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:25.690]                 ...future.oldOptions$nwarnings <- NULL
[17:41:25.690]             }
[17:41:25.690]             base::options(...future.oldOptions)
[17:41:25.690]             if (.Platform$OS.type == "windows") {
[17:41:25.690]                 old_names <- names(...future.oldEnvVars)
[17:41:25.690]                 envs <- base::Sys.getenv()
[17:41:25.690]                 names <- names(envs)
[17:41:25.690]                 common <- intersect(names, old_names)
[17:41:25.690]                 added <- setdiff(names, old_names)
[17:41:25.690]                 removed <- setdiff(old_names, names)
[17:41:25.690]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:25.690]                   envs[common]]
[17:41:25.690]                 NAMES <- toupper(changed)
[17:41:25.690]                 args <- list()
[17:41:25.690]                 for (kk in seq_along(NAMES)) {
[17:41:25.690]                   name <- changed[[kk]]
[17:41:25.690]                   NAME <- NAMES[[kk]]
[17:41:25.690]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:25.690]                     next
[17:41:25.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:25.690]                 }
[17:41:25.690]                 NAMES <- toupper(added)
[17:41:25.690]                 for (kk in seq_along(NAMES)) {
[17:41:25.690]                   name <- added[[kk]]
[17:41:25.690]                   NAME <- NAMES[[kk]]
[17:41:25.690]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:25.690]                     next
[17:41:25.690]                   args[[name]] <- ""
[17:41:25.690]                 }
[17:41:25.690]                 NAMES <- toupper(removed)
[17:41:25.690]                 for (kk in seq_along(NAMES)) {
[17:41:25.690]                   name <- removed[[kk]]
[17:41:25.690]                   NAME <- NAMES[[kk]]
[17:41:25.690]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:25.690]                     next
[17:41:25.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:25.690]                 }
[17:41:25.690]                 if (length(args) > 0) 
[17:41:25.690]                   base::do.call(base::Sys.setenv, args = args)
[17:41:25.690]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:25.690]             }
[17:41:25.690]             else {
[17:41:25.690]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:25.690]             }
[17:41:25.690]             {
[17:41:25.690]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:25.690]                   0L) {
[17:41:25.690]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:25.690]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:25.690]                   base::options(opts)
[17:41:25.690]                 }
[17:41:25.690]                 {
[17:41:25.690]                   {
[17:41:25.690]                     base::options(mc.cores = ...future.mc.cores.old)
[17:41:25.690]                     NULL
[17:41:25.690]                   }
[17:41:25.690]                   options(future.plan = function (..., workers = 2L, 
[17:41:25.690]                     envir = parent.frame()) 
[17:41:25.690]                   strategy(..., workers = workers, envir = envir))
[17:41:25.690]                   if (is.na(NA_character_)) 
[17:41:25.690]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:25.690]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:25.690]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:41:25.690]                     .init = FALSE)
[17:41:25.690]                 }
[17:41:25.690]             }
[17:41:25.690]         }
[17:41:25.690]     })
[17:41:25.690]     if (TRUE) {
[17:41:25.690]         base::sink(type = "output", split = FALSE)
[17:41:25.690]         if (TRUE) {
[17:41:25.690]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:25.690]         }
[17:41:25.690]         else {
[17:41:25.690]             ...future.result["stdout"] <- base::list(NULL)
[17:41:25.690]         }
[17:41:25.690]         base::close(...future.stdout)
[17:41:25.690]         ...future.stdout <- NULL
[17:41:25.690]     }
[17:41:25.690]     ...future.result$conditions <- ...future.conditions
[17:41:25.690]     ...future.result$finished <- base::Sys.time()
[17:41:25.690]     ...future.result
[17:41:25.690] }
[17:41:25.742] MultisessionFuture started
[17:41:25.743] result() for ClusterFuture ...
[17:41:25.743] receiveMessageFromWorker() for ClusterFuture ...
[17:41:25.743] - Validating connection of MultisessionFuture
[17:41:25.775] - received message: FutureResult
[17:41:25.775] - Received FutureResult
[17:41:25.777] - Erased future from FutureRegistry
[17:41:25.778] result() for ClusterFuture ...
[17:41:25.778] - result already collected: FutureResult
[17:41:25.778] result() for ClusterFuture ... done
[17:41:25.778] receiveMessageFromWorker() for ClusterFuture ... done
[17:41:25.778] result() for ClusterFuture ... done
[17:41:25.778] result() for ClusterFuture ...
[17:41:25.778] - result already collected: FutureResult
[17:41:25.778] result() for ClusterFuture ... done
[17:41:25.778] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:41:25.779] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[17:41:25.780] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:25.780] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:41:25.780] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:41:25.780] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:41:25.780] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:41:25.780] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:41:25.781] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:41:25.781] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:41:25.781] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:41:25.781] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:41:25.781] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:41:25.781] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:41:25.781] Environment variable ‘R_FUTURE_PLAN’ not set
[17:41:25.781] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:41:25.782] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:41:25.782] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:41:25.782] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:41:25.782] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:41:25.782] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:41:25.782] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:41:25.782] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:41:25.783] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:41:25.783] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:41:25.783] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:41:25.783] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:41:25.783] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:41:25.783] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:41:25.783] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:41:25.783] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:41:25.784] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:41:25.784] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:41:25.784] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[17:41:25.784] R process uuid: ec137522-6919-c4a3-1932-328082dd4ed0
[17:41:25.785] Setting plan('default')
[17:41:25.785] plan(): Setting new future strategy stack:
[17:41:25.785] List of future strategies:
[17:41:25.785] 1. sequential:
[17:41:25.785]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.785]    - tweaked: FALSE
[17:41:25.785]    - call: NULL
[17:41:25.786] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:41:25.787] plan(): Setting new future strategy stack:
[17:41:25.787] List of future strategies:
[17:41:25.787] 1. sequential:
[17:41:25.787]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.787]    - tweaked: FALSE
[17:41:25.787]    - call: NULL
[17:41:25.788] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[17:41:25.789] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:25.789] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:41:25.789] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:41:25.790] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:41:25.790] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:41:25.790] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:41:25.790] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:41:25.791] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:41:25.791] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:41:25.791] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:41:25.791] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:41:25.791] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:41:25.792] Environment variable ‘R_FUTURE_PLAN’ not set
[17:41:25.792] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:41:25.792] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:41:25.792] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:41:25.792] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:41:25.793] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:41:25.793] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:41:25.793] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:41:25.793] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:41:25.794] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:41:25.794] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:41:25.794] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:41:25.794] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:41:25.795] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:41:25.795] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:41:25.795] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:41:25.795] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:41:25.795] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:41:25.796] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:41:25.796] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[17:41:25.797] R process uuid: ec137522-6919-c4a3-1932-328082dd4ed0
[17:41:25.797] Setting plan('default')
[17:41:25.797] plan(): Setting new future strategy stack:
[17:41:25.797] List of future strategies:
[17:41:25.797] 1. sequential:
[17:41:25.797]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.797]    - tweaked: FALSE
[17:41:25.797]    - call: NULL
[17:41:25.798] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:41:25.799] plan(): Setting new future strategy stack:
[17:41:25.799] List of future strategies:
[17:41:25.799] 1. sequential:
[17:41:25.799]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.799]    - tweaked: FALSE
[17:41:25.799]    - call: NULL
[17:41:25.800] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[17:41:25.801] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:25.801] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:41:25.802] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:41:25.802] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:41:25.802] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:41:25.802] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:41:25.802] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:41:25.803] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:41:25.803] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:41:25.803] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:41:25.803] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:41:25.803] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:41:25.804] Environment variable ‘R_FUTURE_PLAN’ not set
[17:41:25.804] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:41:25.804] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:41:25.804] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:41:25.804] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:41:25.804] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:41:25.804] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:41:25.805] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:41:25.805] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:41:25.805] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:41:25.805] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:41:25.805] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:41:25.805] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:41:25.806] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:41:25.806] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:41:25.806] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:41:25.806] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:41:25.806] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:41:25.806] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:41:25.806] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[17:41:25.807] R process uuid: ec137522-6919-c4a3-1932-328082dd4ed0
[17:41:25.807] Setting plan('default')
[17:41:25.807] plan(): Setting new future strategy stack:
[17:41:25.807] List of future strategies:
[17:41:25.807] 1. sequential:
[17:41:25.807]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.807]    - tweaked: FALSE
[17:41:25.807]    - call: NULL
[17:41:25.808] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:41:25.808] plan(): Setting new future strategy stack:
[17:41:25.809] List of future strategies:
[17:41:25.809] 1. sequential:
[17:41:25.809]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:25.809]    - tweaked: FALSE
[17:41:25.809]    - call: NULL
[17:41:25.809] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[17:41:25.810] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:25.810] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:41:25.810] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:41:25.811] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:41:25.811] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:41:25.811] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:41:25.811] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:41:25.811] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:41:25.811] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:41:25.811] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:41:25.811] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:41:25.812] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:41:25.812] R_FUTURE_PLAN=‘multisession’
[17:41:25.812] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[17:41:25.812] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:41:25.812] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:41:25.812] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:41:25.813] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:41:25.813] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:41:25.813] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:41:25.813] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:41:25.813] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:41:25.813] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:41:25.813] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:41:25.813] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:41:25.814] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:41:25.814] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:41:25.814] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:41:25.814] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:41:25.814] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:41:25.814] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:41:25.814] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:41:25.814] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:41:25.815] Option 'future.plan' = ‘multisession’
[17:41:25.815] R process uuid: ec137522-6919-c4a3-1932-328082dd4ed0
[17:41:25.815] Setting plan('default')
[17:41:25.815] plan(): Setting new future strategy stack:
[17:41:25.815] List of future strategies:
[17:41:25.815] 1. multisession:
[17:41:25.815]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:25.815]    - tweaked: FALSE
[17:41:25.815]    - call: plan("default", .init = FALSE)
[17:41:25.819] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:41:25.821] plan(): Setting new future strategy stack:
[17:41:25.821] List of future strategies:
[17:41:25.821] 1. multisession:
[17:41:25.821]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:25.821]    - tweaked: FALSE
[17:41:25.821]    - call: plan("default")
[17:41:25.822] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:41:25.822] multisession:
[17:41:25.822] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:25.822] - tweaked: FALSE
[17:41:25.822] - call: plan("default")
[17:41:25.825] getGlobalsAndPackages() ...
[17:41:25.825] Not searching for globals
[17:41:25.825] - globals: [0] <none>
[17:41:25.825] getGlobalsAndPackages() ... DONE
[17:41:25.826] [local output] makeClusterPSOCK() ...
[17:41:25.829] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:41:25.829] [local output] Base port: 11551
[17:41:25.830] [local output] Getting setup options for 2 cluster nodes ...
[17:41:25.830] [local output]  - Node 1 of 2 ...
[17:41:25.830] [local output] localMachine=TRUE => revtunnel=FALSE

[17:41:25.830] [local output] Rscript port: 11551

[17:41:25.831] [local output]  - Node 2 of 2 ...
[17:41:25.831] [local output] localMachine=TRUE => revtunnel=FALSE

[17:41:25.832] [local output] Rscript port: 11551

[17:41:25.832] [local output] Getting setup options for 2 cluster nodes ... done
[17:41:25.832] [local output]  - Parallel setup requested for some PSOCK nodes
[17:41:25.832] [local output] Setting up PSOCK nodes in parallel
[17:41:25.832] List of 36
[17:41:25.832]  $ worker          : chr "localhost"
[17:41:25.832]   ..- attr(*, "localhost")= logi TRUE
[17:41:25.832]  $ master          : chr "localhost"
[17:41:25.832]  $ port            : int 11551
[17:41:25.832]  $ connectTimeout  : num 120
[17:41:25.832]  $ timeout         : num 2592000
[17:41:25.832]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:41:25.832]  $ homogeneous     : logi TRUE
[17:41:25.832]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:41:25.832]  $ rscript_envs    : NULL
[17:41:25.832]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:41:25.832]  $ rscript_startup : NULL
[17:41:25.832]  $ rscript_sh      : chr "sh"
[17:41:25.832]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:41:25.832]  $ methods         : logi TRUE
[17:41:25.832]  $ socketOptions   : chr "no-delay"
[17:41:25.832]  $ useXDR          : logi FALSE
[17:41:25.832]  $ outfile         : chr "/dev/null"
[17:41:25.832]  $ renice          : int NA
[17:41:25.832]  $ rshcmd          : NULL
[17:41:25.832]  $ user            : chr(0) 
[17:41:25.832]  $ revtunnel       : logi FALSE
[17:41:25.832]  $ rshlogfile      : NULL
[17:41:25.832]  $ rshopts         : chr(0) 
[17:41:25.832]  $ rank            : int 1
[17:41:25.832]  $ manual          : logi FALSE
[17:41:25.832]  $ dryrun          : logi FALSE
[17:41:25.832]  $ quiet           : logi FALSE
[17:41:25.832]  $ setup_strategy  : chr "parallel"
[17:41:25.832]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:41:25.832]  $ pidfile         : chr "/tmp/Rtmpgp6XkG/worker.rank=1.parallelly.parent=50063.c38f24bb18b9.pid"
[17:41:25.832]  $ rshcmd_label    : NULL
[17:41:25.832]  $ rsh_call        : NULL
[17:41:25.832]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:41:25.832]  $ localMachine    : logi TRUE
[17:41:25.832]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:41:25.832]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:41:25.832]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:41:25.832]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:41:25.832]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:41:25.832]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:41:25.832]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:41:25.832]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:41:25.832]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:41:25.832]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:41:25.832]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:41:25.832]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:41:25.832]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:41:25.832]  $ arguments       :List of 28
[17:41:25.832]   ..$ worker          : chr "localhost"
[17:41:25.832]   ..$ master          : NULL
[17:41:25.832]   ..$ port            : int 11551
[17:41:25.832]   ..$ connectTimeout  : num 120
[17:41:25.832]   ..$ timeout         : num 2592000
[17:41:25.832]   ..$ rscript         : NULL
[17:41:25.832]   ..$ homogeneous     : NULL
[17:41:25.832]   ..$ rscript_args    : NULL
[17:41:25.832]   ..$ rscript_envs    : NULL
[17:41:25.832]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:41:25.832]   ..$ rscript_startup : NULL
[17:41:25.832]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:41:25.832]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:41:25.832]   ..$ methods         : logi TRUE
[17:41:25.832]   ..$ socketOptions   : chr "no-delay"
[17:41:25.832]   ..$ useXDR          : logi FALSE
[17:41:25.832]   ..$ outfile         : chr "/dev/null"
[17:41:25.832]   ..$ renice          : int NA
[17:41:25.832]   ..$ rshcmd          : NULL
[17:41:25.832]   ..$ user            : NULL
[17:41:25.832]   ..$ revtunnel       : logi NA
[17:41:25.832]   ..$ rshlogfile      : NULL
[17:41:25.832]   ..$ rshopts         : NULL
[17:41:25.832]   ..$ rank            : int 1
[17:41:25.832]   ..$ manual          : logi FALSE
[17:41:25.832]   ..$ dryrun          : logi FALSE
[17:41:25.832]   ..$ quiet           : logi FALSE
[17:41:25.832]   ..$ setup_strategy  : chr "parallel"
[17:41:25.832]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:41:25.848] [local output] System call to launch all workers:
[17:41:25.848] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpgp6XkG/worker.rank=1.parallelly.parent=50063.c38f24bb18b9.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11551 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:41:25.848] [local output] Starting PSOCK main server
[17:41:25.850] [local output] Workers launched
[17:41:25.850] [local output] Waiting for workers to connect back
[17:41:25.850]  - [local output] 0 workers out of 2 ready
[17:41:26.095]  - [local output] 0 workers out of 2 ready
[17:41:26.095]  - [local output] 1 workers out of 2 ready
[17:41:26.096]  - [local output] 2 workers out of 2 ready
[17:41:26.096] [local output] Launching of workers completed
[17:41:26.096] [local output] Collecting session information from workers
[17:41:26.097] [local output]  - Worker #1 of 2
[17:41:26.097] [local output]  - Worker #2 of 2
[17:41:26.097] [local output] makeClusterPSOCK() ... done
[17:41:26.109] Packages needed by the future expression (n = 0): <none>
[17:41:26.109] Packages needed by future strategies (n = 0): <none>
[17:41:26.109] {
[17:41:26.109]     {
[17:41:26.109]         {
[17:41:26.109]             ...future.startTime <- base::Sys.time()
[17:41:26.109]             {
[17:41:26.109]                 {
[17:41:26.109]                   {
[17:41:26.109]                     {
[17:41:26.109]                       base::local({
[17:41:26.109]                         has_future <- base::requireNamespace("future", 
[17:41:26.109]                           quietly = TRUE)
[17:41:26.109]                         if (has_future) {
[17:41:26.109]                           ns <- base::getNamespace("future")
[17:41:26.109]                           version <- ns[[".package"]][["version"]]
[17:41:26.109]                           if (is.null(version)) 
[17:41:26.109]                             version <- utils::packageVersion("future")
[17:41:26.109]                         }
[17:41:26.109]                         else {
[17:41:26.109]                           version <- NULL
[17:41:26.109]                         }
[17:41:26.109]                         if (!has_future || version < "1.8.0") {
[17:41:26.109]                           info <- base::c(r_version = base::gsub("R version ", 
[17:41:26.109]                             "", base::R.version$version.string), 
[17:41:26.109]                             platform = base::sprintf("%s (%s-bit)", 
[17:41:26.109]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:26.109]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:26.109]                               "release", "version")], collapse = " "), 
[17:41:26.109]                             hostname = base::Sys.info()[["nodename"]])
[17:41:26.109]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:41:26.109]                             info)
[17:41:26.109]                           info <- base::paste(info, collapse = "; ")
[17:41:26.109]                           if (!has_future) {
[17:41:26.109]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:26.109]                               info)
[17:41:26.109]                           }
[17:41:26.109]                           else {
[17:41:26.109]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:26.109]                               info, version)
[17:41:26.109]                           }
[17:41:26.109]                           base::stop(msg)
[17:41:26.109]                         }
[17:41:26.109]                       })
[17:41:26.109]                     }
[17:41:26.109]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:41:26.109]                     base::options(mc.cores = 1L)
[17:41:26.109]                   }
[17:41:26.109]                   ...future.strategy.old <- future::plan("list")
[17:41:26.109]                   options(future.plan = NULL)
[17:41:26.109]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:26.109]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:26.109]                 }
[17:41:26.109]                 ...future.workdir <- getwd()
[17:41:26.109]             }
[17:41:26.109]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:26.109]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:26.109]         }
[17:41:26.109]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:26.109]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:26.109]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:26.109]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:26.109]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:26.109]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:26.109]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:26.109]             base::names(...future.oldOptions))
[17:41:26.109]     }
[17:41:26.109]     if (FALSE) {
[17:41:26.109]     }
[17:41:26.109]     else {
[17:41:26.109]         if (TRUE) {
[17:41:26.109]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:26.109]                 open = "w")
[17:41:26.109]         }
[17:41:26.109]         else {
[17:41:26.109]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:26.109]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:26.109]         }
[17:41:26.109]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:26.109]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:26.109]             base::sink(type = "output", split = FALSE)
[17:41:26.109]             base::close(...future.stdout)
[17:41:26.109]         }, add = TRUE)
[17:41:26.109]     }
[17:41:26.109]     ...future.frame <- base::sys.nframe()
[17:41:26.109]     ...future.conditions <- base::list()
[17:41:26.109]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:26.109]     if (FALSE) {
[17:41:26.109]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:26.109]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:26.109]     }
[17:41:26.109]     ...future.result <- base::tryCatch({
[17:41:26.109]         base::withCallingHandlers({
[17:41:26.109]             ...future.value <- base::withVisible(base::local({
[17:41:26.109]                 ...future.makeSendCondition <- base::local({
[17:41:26.109]                   sendCondition <- NULL
[17:41:26.109]                   function(frame = 1L) {
[17:41:26.109]                     if (is.function(sendCondition)) 
[17:41:26.109]                       return(sendCondition)
[17:41:26.109]                     ns <- getNamespace("parallel")
[17:41:26.109]                     if (exists("sendData", mode = "function", 
[17:41:26.109]                       envir = ns)) {
[17:41:26.109]                       parallel_sendData <- get("sendData", mode = "function", 
[17:41:26.109]                         envir = ns)
[17:41:26.109]                       envir <- sys.frame(frame)
[17:41:26.109]                       master <- NULL
[17:41:26.109]                       while (!identical(envir, .GlobalEnv) && 
[17:41:26.109]                         !identical(envir, emptyenv())) {
[17:41:26.109]                         if (exists("master", mode = "list", envir = envir, 
[17:41:26.109]                           inherits = FALSE)) {
[17:41:26.109]                           master <- get("master", mode = "list", 
[17:41:26.109]                             envir = envir, inherits = FALSE)
[17:41:26.109]                           if (inherits(master, c("SOCKnode", 
[17:41:26.109]                             "SOCK0node"))) {
[17:41:26.109]                             sendCondition <<- function(cond) {
[17:41:26.109]                               data <- list(type = "VALUE", value = cond, 
[17:41:26.109]                                 success = TRUE)
[17:41:26.109]                               parallel_sendData(master, data)
[17:41:26.109]                             }
[17:41:26.109]                             return(sendCondition)
[17:41:26.109]                           }
[17:41:26.109]                         }
[17:41:26.109]                         frame <- frame + 1L
[17:41:26.109]                         envir <- sys.frame(frame)
[17:41:26.109]                       }
[17:41:26.109]                     }
[17:41:26.109]                     sendCondition <<- function(cond) NULL
[17:41:26.109]                   }
[17:41:26.109]                 })
[17:41:26.109]                 withCallingHandlers({
[17:41:26.109]                   NA
[17:41:26.109]                 }, immediateCondition = function(cond) {
[17:41:26.109]                   sendCondition <- ...future.makeSendCondition()
[17:41:26.109]                   sendCondition(cond)
[17:41:26.109]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:26.109]                   {
[17:41:26.109]                     inherits <- base::inherits
[17:41:26.109]                     invokeRestart <- base::invokeRestart
[17:41:26.109]                     is.null <- base::is.null
[17:41:26.109]                     muffled <- FALSE
[17:41:26.109]                     if (inherits(cond, "message")) {
[17:41:26.109]                       muffled <- grepl(pattern, "muffleMessage")
[17:41:26.109]                       if (muffled) 
[17:41:26.109]                         invokeRestart("muffleMessage")
[17:41:26.109]                     }
[17:41:26.109]                     else if (inherits(cond, "warning")) {
[17:41:26.109]                       muffled <- grepl(pattern, "muffleWarning")
[17:41:26.109]                       if (muffled) 
[17:41:26.109]                         invokeRestart("muffleWarning")
[17:41:26.109]                     }
[17:41:26.109]                     else if (inherits(cond, "condition")) {
[17:41:26.109]                       if (!is.null(pattern)) {
[17:41:26.109]                         computeRestarts <- base::computeRestarts
[17:41:26.109]                         grepl <- base::grepl
[17:41:26.109]                         restarts <- computeRestarts(cond)
[17:41:26.109]                         for (restart in restarts) {
[17:41:26.109]                           name <- restart$name
[17:41:26.109]                           if (is.null(name)) 
[17:41:26.109]                             next
[17:41:26.109]                           if (!grepl(pattern, name)) 
[17:41:26.109]                             next
[17:41:26.109]                           invokeRestart(restart)
[17:41:26.109]                           muffled <- TRUE
[17:41:26.109]                           break
[17:41:26.109]                         }
[17:41:26.109]                       }
[17:41:26.109]                     }
[17:41:26.109]                     invisible(muffled)
[17:41:26.109]                   }
[17:41:26.109]                   muffleCondition(cond)
[17:41:26.109]                 })
[17:41:26.109]             }))
[17:41:26.109]             future::FutureResult(value = ...future.value$value, 
[17:41:26.109]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:26.109]                   ...future.rng), globalenv = if (FALSE) 
[17:41:26.109]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:26.109]                     ...future.globalenv.names))
[17:41:26.109]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:26.109]         }, condition = base::local({
[17:41:26.109]             c <- base::c
[17:41:26.109]             inherits <- base::inherits
[17:41:26.109]             invokeRestart <- base::invokeRestart
[17:41:26.109]             length <- base::length
[17:41:26.109]             list <- base::list
[17:41:26.109]             seq.int <- base::seq.int
[17:41:26.109]             signalCondition <- base::signalCondition
[17:41:26.109]             sys.calls <- base::sys.calls
[17:41:26.109]             `[[` <- base::`[[`
[17:41:26.109]             `+` <- base::`+`
[17:41:26.109]             `<<-` <- base::`<<-`
[17:41:26.109]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:26.109]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:26.109]                   3L)]
[17:41:26.109]             }
[17:41:26.109]             function(cond) {
[17:41:26.109]                 is_error <- inherits(cond, "error")
[17:41:26.109]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:26.109]                   NULL)
[17:41:26.109]                 if (is_error) {
[17:41:26.109]                   sessionInformation <- function() {
[17:41:26.109]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:26.109]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:26.109]                       search = base::search(), system = base::Sys.info())
[17:41:26.109]                   }
[17:41:26.109]                   ...future.conditions[[length(...future.conditions) + 
[17:41:26.109]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:26.109]                     cond$call), session = sessionInformation(), 
[17:41:26.109]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:26.109]                   signalCondition(cond)
[17:41:26.109]                 }
[17:41:26.109]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:26.109]                 "immediateCondition"))) {
[17:41:26.109]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:26.109]                   ...future.conditions[[length(...future.conditions) + 
[17:41:26.109]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:26.109]                   if (TRUE && !signal) {
[17:41:26.109]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:26.109]                     {
[17:41:26.109]                       inherits <- base::inherits
[17:41:26.109]                       invokeRestart <- base::invokeRestart
[17:41:26.109]                       is.null <- base::is.null
[17:41:26.109]                       muffled <- FALSE
[17:41:26.109]                       if (inherits(cond, "message")) {
[17:41:26.109]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:26.109]                         if (muffled) 
[17:41:26.109]                           invokeRestart("muffleMessage")
[17:41:26.109]                       }
[17:41:26.109]                       else if (inherits(cond, "warning")) {
[17:41:26.109]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:26.109]                         if (muffled) 
[17:41:26.109]                           invokeRestart("muffleWarning")
[17:41:26.109]                       }
[17:41:26.109]                       else if (inherits(cond, "condition")) {
[17:41:26.109]                         if (!is.null(pattern)) {
[17:41:26.109]                           computeRestarts <- base::computeRestarts
[17:41:26.109]                           grepl <- base::grepl
[17:41:26.109]                           restarts <- computeRestarts(cond)
[17:41:26.109]                           for (restart in restarts) {
[17:41:26.109]                             name <- restart$name
[17:41:26.109]                             if (is.null(name)) 
[17:41:26.109]                               next
[17:41:26.109]                             if (!grepl(pattern, name)) 
[17:41:26.109]                               next
[17:41:26.109]                             invokeRestart(restart)
[17:41:26.109]                             muffled <- TRUE
[17:41:26.109]                             break
[17:41:26.109]                           }
[17:41:26.109]                         }
[17:41:26.109]                       }
[17:41:26.109]                       invisible(muffled)
[17:41:26.109]                     }
[17:41:26.109]                     muffleCondition(cond, pattern = "^muffle")
[17:41:26.109]                   }
[17:41:26.109]                 }
[17:41:26.109]                 else {
[17:41:26.109]                   if (TRUE) {
[17:41:26.109]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:26.109]                     {
[17:41:26.109]                       inherits <- base::inherits
[17:41:26.109]                       invokeRestart <- base::invokeRestart
[17:41:26.109]                       is.null <- base::is.null
[17:41:26.109]                       muffled <- FALSE
[17:41:26.109]                       if (inherits(cond, "message")) {
[17:41:26.109]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:26.109]                         if (muffled) 
[17:41:26.109]                           invokeRestart("muffleMessage")
[17:41:26.109]                       }
[17:41:26.109]                       else if (inherits(cond, "warning")) {
[17:41:26.109]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:26.109]                         if (muffled) 
[17:41:26.109]                           invokeRestart("muffleWarning")
[17:41:26.109]                       }
[17:41:26.109]                       else if (inherits(cond, "condition")) {
[17:41:26.109]                         if (!is.null(pattern)) {
[17:41:26.109]                           computeRestarts <- base::computeRestarts
[17:41:26.109]                           grepl <- base::grepl
[17:41:26.109]                           restarts <- computeRestarts(cond)
[17:41:26.109]                           for (restart in restarts) {
[17:41:26.109]                             name <- restart$name
[17:41:26.109]                             if (is.null(name)) 
[17:41:26.109]                               next
[17:41:26.109]                             if (!grepl(pattern, name)) 
[17:41:26.109]                               next
[17:41:26.109]                             invokeRestart(restart)
[17:41:26.109]                             muffled <- TRUE
[17:41:26.109]                             break
[17:41:26.109]                           }
[17:41:26.109]                         }
[17:41:26.109]                       }
[17:41:26.109]                       invisible(muffled)
[17:41:26.109]                     }
[17:41:26.109]                     muffleCondition(cond, pattern = "^muffle")
[17:41:26.109]                   }
[17:41:26.109]                 }
[17:41:26.109]             }
[17:41:26.109]         }))
[17:41:26.109]     }, error = function(ex) {
[17:41:26.109]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:26.109]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:26.109]                 ...future.rng), started = ...future.startTime, 
[17:41:26.109]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:26.109]             version = "1.8"), class = "FutureResult")
[17:41:26.109]     }, finally = {
[17:41:26.109]         if (!identical(...future.workdir, getwd())) 
[17:41:26.109]             setwd(...future.workdir)
[17:41:26.109]         {
[17:41:26.109]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:26.109]                 ...future.oldOptions$nwarnings <- NULL
[17:41:26.109]             }
[17:41:26.109]             base::options(...future.oldOptions)
[17:41:26.109]             if (.Platform$OS.type == "windows") {
[17:41:26.109]                 old_names <- names(...future.oldEnvVars)
[17:41:26.109]                 envs <- base::Sys.getenv()
[17:41:26.109]                 names <- names(envs)
[17:41:26.109]                 common <- intersect(names, old_names)
[17:41:26.109]                 added <- setdiff(names, old_names)
[17:41:26.109]                 removed <- setdiff(old_names, names)
[17:41:26.109]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:26.109]                   envs[common]]
[17:41:26.109]                 NAMES <- toupper(changed)
[17:41:26.109]                 args <- list()
[17:41:26.109]                 for (kk in seq_along(NAMES)) {
[17:41:26.109]                   name <- changed[[kk]]
[17:41:26.109]                   NAME <- NAMES[[kk]]
[17:41:26.109]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.109]                     next
[17:41:26.109]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:26.109]                 }
[17:41:26.109]                 NAMES <- toupper(added)
[17:41:26.109]                 for (kk in seq_along(NAMES)) {
[17:41:26.109]                   name <- added[[kk]]
[17:41:26.109]                   NAME <- NAMES[[kk]]
[17:41:26.109]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.109]                     next
[17:41:26.109]                   args[[name]] <- ""
[17:41:26.109]                 }
[17:41:26.109]                 NAMES <- toupper(removed)
[17:41:26.109]                 for (kk in seq_along(NAMES)) {
[17:41:26.109]                   name <- removed[[kk]]
[17:41:26.109]                   NAME <- NAMES[[kk]]
[17:41:26.109]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.109]                     next
[17:41:26.109]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:26.109]                 }
[17:41:26.109]                 if (length(args) > 0) 
[17:41:26.109]                   base::do.call(base::Sys.setenv, args = args)
[17:41:26.109]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:26.109]             }
[17:41:26.109]             else {
[17:41:26.109]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:26.109]             }
[17:41:26.109]             {
[17:41:26.109]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:26.109]                   0L) {
[17:41:26.109]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:26.109]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:26.109]                   base::options(opts)
[17:41:26.109]                 }
[17:41:26.109]                 {
[17:41:26.109]                   {
[17:41:26.109]                     base::options(mc.cores = ...future.mc.cores.old)
[17:41:26.109]                     NULL
[17:41:26.109]                   }
[17:41:26.109]                   options(future.plan = "multisession")
[17:41:26.109]                   if (is.na("multisession")) 
[17:41:26.109]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:26.109]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[17:41:26.109]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:41:26.109]                     .init = FALSE)
[17:41:26.109]                 }
[17:41:26.109]             }
[17:41:26.109]         }
[17:41:26.109]     })
[17:41:26.109]     if (TRUE) {
[17:41:26.109]         base::sink(type = "output", split = FALSE)
[17:41:26.109]         if (TRUE) {
[17:41:26.109]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:26.109]         }
[17:41:26.109]         else {
[17:41:26.109]             ...future.result["stdout"] <- base::list(NULL)
[17:41:26.109]         }
[17:41:26.109]         base::close(...future.stdout)
[17:41:26.109]         ...future.stdout <- NULL
[17:41:26.109]     }
[17:41:26.109]     ...future.result$conditions <- ...future.conditions
[17:41:26.109]     ...future.result$finished <- base::Sys.time()
[17:41:26.109]     ...future.result
[17:41:26.109] }
[17:41:26.167] MultisessionFuture started
[17:41:26.168] result() for ClusterFuture ...
[17:41:26.168] receiveMessageFromWorker() for ClusterFuture ...
[17:41:26.168] - Validating connection of MultisessionFuture
[17:41:26.206] - received message: FutureResult
[17:41:26.206] - Received FutureResult
[17:41:26.206] - Erased future from FutureRegistry
[17:41:26.206] result() for ClusterFuture ...
[17:41:26.206] - result already collected: FutureResult
[17:41:26.206] result() for ClusterFuture ... done
[17:41:26.207] receiveMessageFromWorker() for ClusterFuture ... done
[17:41:26.207] result() for ClusterFuture ... done
[17:41:26.207] result() for ClusterFuture ...
[17:41:26.207] - result already collected: FutureResult
[17:41:26.207] result() for ClusterFuture ... done
[17:41:26.207] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:41:26.210] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[17:41:26.211] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:26.212] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:41:26.212] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:41:26.212] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:41:26.212] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:41:26.212] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:41:26.212] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:41:26.212] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:41:26.212] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:41:26.212] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:41:26.213] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:41:26.213] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:41:26.213] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:41:26.213] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:41:26.213] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:41:26.213] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:41:26.213] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:41:26.213] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:41:26.213] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:41:26.213] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:41:26.214] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:41:26.214] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:41:26.214] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:41:26.214] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:41:26.214] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:41:26.214] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:41:26.214] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:41:26.214] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:41:26.214] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:41:26.214] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:41:26.215] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:41:26.215] Option 'future.plan' = ‘multisession’
[17:41:26.215] R process uuid: ec137522-6919-c4a3-1932-328082dd4ed0
[17:41:26.215] Setting plan('default')
[17:41:26.215] plan(): Setting new future strategy stack:
[17:41:26.215] List of future strategies:
[17:41:26.215] 1. multisession:
[17:41:26.215]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.215]    - tweaked: FALSE
[17:41:26.215]    - call: plan("default", .init = FALSE)
[17:41:26.220] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:41:26.221] plan(): Setting new future strategy stack:
[17:41:26.221] List of future strategies:
[17:41:26.221] 1. multisession:
[17:41:26.221]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.221]    - tweaked: FALSE
[17:41:26.221]    - call: plan("default")
[17:41:26.221] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:41:26.222] multisession:
[17:41:26.222] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.222] - tweaked: FALSE
[17:41:26.222] - call: plan("default")
[17:41:26.226] getGlobalsAndPackages() ...
[17:41:26.226] Not searching for globals
[17:41:26.227] - globals: [0] <none>
[17:41:26.227] getGlobalsAndPackages() ... DONE
[17:41:26.227] [local output] makeClusterPSOCK() ...
[17:41:26.231] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:41:26.231] [local output] Base port: 11698
[17:41:26.232] [local output] Getting setup options for 2 cluster nodes ...
[17:41:26.232] [local output]  - Node 1 of 2 ...
[17:41:26.232] [local output] localMachine=TRUE => revtunnel=FALSE

[17:41:26.233] [local output] Rscript port: 11698

[17:41:26.233] [local output]  - Node 2 of 2 ...
[17:41:26.233] [local output] localMachine=TRUE => revtunnel=FALSE

[17:41:26.234] [local output] Rscript port: 11698

[17:41:26.234] [local output] Getting setup options for 2 cluster nodes ... done
[17:41:26.234] [local output]  - Parallel setup requested for some PSOCK nodes
[17:41:26.234] [local output] Setting up PSOCK nodes in parallel
[17:41:26.235] List of 36
[17:41:26.235]  $ worker          : chr "localhost"
[17:41:26.235]   ..- attr(*, "localhost")= logi TRUE
[17:41:26.235]  $ master          : chr "localhost"
[17:41:26.235]  $ port            : int 11698
[17:41:26.235]  $ connectTimeout  : num 120
[17:41:26.235]  $ timeout         : num 2592000
[17:41:26.235]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:41:26.235]  $ homogeneous     : logi TRUE
[17:41:26.235]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:41:26.235]  $ rscript_envs    : NULL
[17:41:26.235]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:41:26.235]  $ rscript_startup : NULL
[17:41:26.235]  $ rscript_sh      : chr "sh"
[17:41:26.235]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:41:26.235]  $ methods         : logi TRUE
[17:41:26.235]  $ socketOptions   : chr "no-delay"
[17:41:26.235]  $ useXDR          : logi FALSE
[17:41:26.235]  $ outfile         : chr "/dev/null"
[17:41:26.235]  $ renice          : int NA
[17:41:26.235]  $ rshcmd          : NULL
[17:41:26.235]  $ user            : chr(0) 
[17:41:26.235]  $ revtunnel       : logi FALSE
[17:41:26.235]  $ rshlogfile      : NULL
[17:41:26.235]  $ rshopts         : chr(0) 
[17:41:26.235]  $ rank            : int 1
[17:41:26.235]  $ manual          : logi FALSE
[17:41:26.235]  $ dryrun          : logi FALSE
[17:41:26.235]  $ quiet           : logi FALSE
[17:41:26.235]  $ setup_strategy  : chr "parallel"
[17:41:26.235]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:41:26.235]  $ pidfile         : chr "/tmp/Rtmpgp6XkG/worker.rank=1.parallelly.parent=50063.c38f288be8d2.pid"
[17:41:26.235]  $ rshcmd_label    : NULL
[17:41:26.235]  $ rsh_call        : NULL
[17:41:26.235]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:41:26.235]  $ localMachine    : logi TRUE
[17:41:26.235]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:41:26.235]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:41:26.235]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:41:26.235]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:41:26.235]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:41:26.235]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:41:26.235]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:41:26.235]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:41:26.235]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:41:26.235]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:41:26.235]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:41:26.235]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:41:26.235]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:41:26.235]  $ arguments       :List of 28
[17:41:26.235]   ..$ worker          : chr "localhost"
[17:41:26.235]   ..$ master          : NULL
[17:41:26.235]   ..$ port            : int 11698
[17:41:26.235]   ..$ connectTimeout  : num 120
[17:41:26.235]   ..$ timeout         : num 2592000
[17:41:26.235]   ..$ rscript         : NULL
[17:41:26.235]   ..$ homogeneous     : NULL
[17:41:26.235]   ..$ rscript_args    : NULL
[17:41:26.235]   ..$ rscript_envs    : NULL
[17:41:26.235]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:41:26.235]   ..$ rscript_startup : NULL
[17:41:26.235]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:41:26.235]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:41:26.235]   ..$ methods         : logi TRUE
[17:41:26.235]   ..$ socketOptions   : chr "no-delay"
[17:41:26.235]   ..$ useXDR          : logi FALSE
[17:41:26.235]   ..$ outfile         : chr "/dev/null"
[17:41:26.235]   ..$ renice          : int NA
[17:41:26.235]   ..$ rshcmd          : NULL
[17:41:26.235]   ..$ user            : NULL
[17:41:26.235]   ..$ revtunnel       : logi NA
[17:41:26.235]   ..$ rshlogfile      : NULL
[17:41:26.235]   ..$ rshopts         : NULL
[17:41:26.235]   ..$ rank            : int 1
[17:41:26.235]   ..$ manual          : logi FALSE
[17:41:26.235]   ..$ dryrun          : logi FALSE
[17:41:26.235]   ..$ quiet           : logi FALSE
[17:41:26.235]   ..$ setup_strategy  : chr "parallel"
[17:41:26.235]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:41:26.252] [local output] System call to launch all workers:
[17:41:26.252] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpgp6XkG/worker.rank=1.parallelly.parent=50063.c38f288be8d2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11698 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:41:26.252] [local output] Starting PSOCK main server
[17:41:26.254] [local output] Workers launched
[17:41:26.254] [local output] Waiting for workers to connect back
[17:41:26.254]  - [local output] 0 workers out of 2 ready
[17:41:26.514]  - [local output] 0 workers out of 2 ready
[17:41:26.514]  - [local output] 1 workers out of 2 ready
[17:41:26.514]  - [local output] 2 workers out of 2 ready
[17:41:26.514] [local output] Launching of workers completed
[17:41:26.515] [local output] Collecting session information from workers
[17:41:26.515] [local output]  - Worker #1 of 2
[17:41:26.516] [local output]  - Worker #2 of 2
[17:41:26.516] [local output] makeClusterPSOCK() ... done
[17:41:26.526] Packages needed by the future expression (n = 0): <none>
[17:41:26.526] Packages needed by future strategies (n = 0): <none>
[17:41:26.527] {
[17:41:26.527]     {
[17:41:26.527]         {
[17:41:26.527]             ...future.startTime <- base::Sys.time()
[17:41:26.527]             {
[17:41:26.527]                 {
[17:41:26.527]                   {
[17:41:26.527]                     {
[17:41:26.527]                       base::local({
[17:41:26.527]                         has_future <- base::requireNamespace("future", 
[17:41:26.527]                           quietly = TRUE)
[17:41:26.527]                         if (has_future) {
[17:41:26.527]                           ns <- base::getNamespace("future")
[17:41:26.527]                           version <- ns[[".package"]][["version"]]
[17:41:26.527]                           if (is.null(version)) 
[17:41:26.527]                             version <- utils::packageVersion("future")
[17:41:26.527]                         }
[17:41:26.527]                         else {
[17:41:26.527]                           version <- NULL
[17:41:26.527]                         }
[17:41:26.527]                         if (!has_future || version < "1.8.0") {
[17:41:26.527]                           info <- base::c(r_version = base::gsub("R version ", 
[17:41:26.527]                             "", base::R.version$version.string), 
[17:41:26.527]                             platform = base::sprintf("%s (%s-bit)", 
[17:41:26.527]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:26.527]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:26.527]                               "release", "version")], collapse = " "), 
[17:41:26.527]                             hostname = base::Sys.info()[["nodename"]])
[17:41:26.527]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:41:26.527]                             info)
[17:41:26.527]                           info <- base::paste(info, collapse = "; ")
[17:41:26.527]                           if (!has_future) {
[17:41:26.527]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:26.527]                               info)
[17:41:26.527]                           }
[17:41:26.527]                           else {
[17:41:26.527]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:26.527]                               info, version)
[17:41:26.527]                           }
[17:41:26.527]                           base::stop(msg)
[17:41:26.527]                         }
[17:41:26.527]                       })
[17:41:26.527]                     }
[17:41:26.527]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:41:26.527]                     base::options(mc.cores = 1L)
[17:41:26.527]                   }
[17:41:26.527]                   ...future.strategy.old <- future::plan("list")
[17:41:26.527]                   options(future.plan = NULL)
[17:41:26.527]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:26.527]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:26.527]                 }
[17:41:26.527]                 ...future.workdir <- getwd()
[17:41:26.527]             }
[17:41:26.527]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:26.527]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:26.527]         }
[17:41:26.527]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:26.527]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:26.527]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:26.527]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:26.527]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:26.527]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:26.527]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:26.527]             base::names(...future.oldOptions))
[17:41:26.527]     }
[17:41:26.527]     if (FALSE) {
[17:41:26.527]     }
[17:41:26.527]     else {
[17:41:26.527]         if (TRUE) {
[17:41:26.527]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:26.527]                 open = "w")
[17:41:26.527]         }
[17:41:26.527]         else {
[17:41:26.527]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:26.527]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:26.527]         }
[17:41:26.527]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:26.527]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:26.527]             base::sink(type = "output", split = FALSE)
[17:41:26.527]             base::close(...future.stdout)
[17:41:26.527]         }, add = TRUE)
[17:41:26.527]     }
[17:41:26.527]     ...future.frame <- base::sys.nframe()
[17:41:26.527]     ...future.conditions <- base::list()
[17:41:26.527]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:26.527]     if (FALSE) {
[17:41:26.527]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:26.527]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:26.527]     }
[17:41:26.527]     ...future.result <- base::tryCatch({
[17:41:26.527]         base::withCallingHandlers({
[17:41:26.527]             ...future.value <- base::withVisible(base::local({
[17:41:26.527]                 ...future.makeSendCondition <- base::local({
[17:41:26.527]                   sendCondition <- NULL
[17:41:26.527]                   function(frame = 1L) {
[17:41:26.527]                     if (is.function(sendCondition)) 
[17:41:26.527]                       return(sendCondition)
[17:41:26.527]                     ns <- getNamespace("parallel")
[17:41:26.527]                     if (exists("sendData", mode = "function", 
[17:41:26.527]                       envir = ns)) {
[17:41:26.527]                       parallel_sendData <- get("sendData", mode = "function", 
[17:41:26.527]                         envir = ns)
[17:41:26.527]                       envir <- sys.frame(frame)
[17:41:26.527]                       master <- NULL
[17:41:26.527]                       while (!identical(envir, .GlobalEnv) && 
[17:41:26.527]                         !identical(envir, emptyenv())) {
[17:41:26.527]                         if (exists("master", mode = "list", envir = envir, 
[17:41:26.527]                           inherits = FALSE)) {
[17:41:26.527]                           master <- get("master", mode = "list", 
[17:41:26.527]                             envir = envir, inherits = FALSE)
[17:41:26.527]                           if (inherits(master, c("SOCKnode", 
[17:41:26.527]                             "SOCK0node"))) {
[17:41:26.527]                             sendCondition <<- function(cond) {
[17:41:26.527]                               data <- list(type = "VALUE", value = cond, 
[17:41:26.527]                                 success = TRUE)
[17:41:26.527]                               parallel_sendData(master, data)
[17:41:26.527]                             }
[17:41:26.527]                             return(sendCondition)
[17:41:26.527]                           }
[17:41:26.527]                         }
[17:41:26.527]                         frame <- frame + 1L
[17:41:26.527]                         envir <- sys.frame(frame)
[17:41:26.527]                       }
[17:41:26.527]                     }
[17:41:26.527]                     sendCondition <<- function(cond) NULL
[17:41:26.527]                   }
[17:41:26.527]                 })
[17:41:26.527]                 withCallingHandlers({
[17:41:26.527]                   NA
[17:41:26.527]                 }, immediateCondition = function(cond) {
[17:41:26.527]                   sendCondition <- ...future.makeSendCondition()
[17:41:26.527]                   sendCondition(cond)
[17:41:26.527]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:26.527]                   {
[17:41:26.527]                     inherits <- base::inherits
[17:41:26.527]                     invokeRestart <- base::invokeRestart
[17:41:26.527]                     is.null <- base::is.null
[17:41:26.527]                     muffled <- FALSE
[17:41:26.527]                     if (inherits(cond, "message")) {
[17:41:26.527]                       muffled <- grepl(pattern, "muffleMessage")
[17:41:26.527]                       if (muffled) 
[17:41:26.527]                         invokeRestart("muffleMessage")
[17:41:26.527]                     }
[17:41:26.527]                     else if (inherits(cond, "warning")) {
[17:41:26.527]                       muffled <- grepl(pattern, "muffleWarning")
[17:41:26.527]                       if (muffled) 
[17:41:26.527]                         invokeRestart("muffleWarning")
[17:41:26.527]                     }
[17:41:26.527]                     else if (inherits(cond, "condition")) {
[17:41:26.527]                       if (!is.null(pattern)) {
[17:41:26.527]                         computeRestarts <- base::computeRestarts
[17:41:26.527]                         grepl <- base::grepl
[17:41:26.527]                         restarts <- computeRestarts(cond)
[17:41:26.527]                         for (restart in restarts) {
[17:41:26.527]                           name <- restart$name
[17:41:26.527]                           if (is.null(name)) 
[17:41:26.527]                             next
[17:41:26.527]                           if (!grepl(pattern, name)) 
[17:41:26.527]                             next
[17:41:26.527]                           invokeRestart(restart)
[17:41:26.527]                           muffled <- TRUE
[17:41:26.527]                           break
[17:41:26.527]                         }
[17:41:26.527]                       }
[17:41:26.527]                     }
[17:41:26.527]                     invisible(muffled)
[17:41:26.527]                   }
[17:41:26.527]                   muffleCondition(cond)
[17:41:26.527]                 })
[17:41:26.527]             }))
[17:41:26.527]             future::FutureResult(value = ...future.value$value, 
[17:41:26.527]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:26.527]                   ...future.rng), globalenv = if (FALSE) 
[17:41:26.527]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:26.527]                     ...future.globalenv.names))
[17:41:26.527]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:26.527]         }, condition = base::local({
[17:41:26.527]             c <- base::c
[17:41:26.527]             inherits <- base::inherits
[17:41:26.527]             invokeRestart <- base::invokeRestart
[17:41:26.527]             length <- base::length
[17:41:26.527]             list <- base::list
[17:41:26.527]             seq.int <- base::seq.int
[17:41:26.527]             signalCondition <- base::signalCondition
[17:41:26.527]             sys.calls <- base::sys.calls
[17:41:26.527]             `[[` <- base::`[[`
[17:41:26.527]             `+` <- base::`+`
[17:41:26.527]             `<<-` <- base::`<<-`
[17:41:26.527]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:26.527]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:26.527]                   3L)]
[17:41:26.527]             }
[17:41:26.527]             function(cond) {
[17:41:26.527]                 is_error <- inherits(cond, "error")
[17:41:26.527]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:26.527]                   NULL)
[17:41:26.527]                 if (is_error) {
[17:41:26.527]                   sessionInformation <- function() {
[17:41:26.527]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:26.527]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:26.527]                       search = base::search(), system = base::Sys.info())
[17:41:26.527]                   }
[17:41:26.527]                   ...future.conditions[[length(...future.conditions) + 
[17:41:26.527]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:26.527]                     cond$call), session = sessionInformation(), 
[17:41:26.527]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:26.527]                   signalCondition(cond)
[17:41:26.527]                 }
[17:41:26.527]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:26.527]                 "immediateCondition"))) {
[17:41:26.527]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:26.527]                   ...future.conditions[[length(...future.conditions) + 
[17:41:26.527]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:26.527]                   if (TRUE && !signal) {
[17:41:26.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:26.527]                     {
[17:41:26.527]                       inherits <- base::inherits
[17:41:26.527]                       invokeRestart <- base::invokeRestart
[17:41:26.527]                       is.null <- base::is.null
[17:41:26.527]                       muffled <- FALSE
[17:41:26.527]                       if (inherits(cond, "message")) {
[17:41:26.527]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:26.527]                         if (muffled) 
[17:41:26.527]                           invokeRestart("muffleMessage")
[17:41:26.527]                       }
[17:41:26.527]                       else if (inherits(cond, "warning")) {
[17:41:26.527]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:26.527]                         if (muffled) 
[17:41:26.527]                           invokeRestart("muffleWarning")
[17:41:26.527]                       }
[17:41:26.527]                       else if (inherits(cond, "condition")) {
[17:41:26.527]                         if (!is.null(pattern)) {
[17:41:26.527]                           computeRestarts <- base::computeRestarts
[17:41:26.527]                           grepl <- base::grepl
[17:41:26.527]                           restarts <- computeRestarts(cond)
[17:41:26.527]                           for (restart in restarts) {
[17:41:26.527]                             name <- restart$name
[17:41:26.527]                             if (is.null(name)) 
[17:41:26.527]                               next
[17:41:26.527]                             if (!grepl(pattern, name)) 
[17:41:26.527]                               next
[17:41:26.527]                             invokeRestart(restart)
[17:41:26.527]                             muffled <- TRUE
[17:41:26.527]                             break
[17:41:26.527]                           }
[17:41:26.527]                         }
[17:41:26.527]                       }
[17:41:26.527]                       invisible(muffled)
[17:41:26.527]                     }
[17:41:26.527]                     muffleCondition(cond, pattern = "^muffle")
[17:41:26.527]                   }
[17:41:26.527]                 }
[17:41:26.527]                 else {
[17:41:26.527]                   if (TRUE) {
[17:41:26.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:26.527]                     {
[17:41:26.527]                       inherits <- base::inherits
[17:41:26.527]                       invokeRestart <- base::invokeRestart
[17:41:26.527]                       is.null <- base::is.null
[17:41:26.527]                       muffled <- FALSE
[17:41:26.527]                       if (inherits(cond, "message")) {
[17:41:26.527]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:26.527]                         if (muffled) 
[17:41:26.527]                           invokeRestart("muffleMessage")
[17:41:26.527]                       }
[17:41:26.527]                       else if (inherits(cond, "warning")) {
[17:41:26.527]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:26.527]                         if (muffled) 
[17:41:26.527]                           invokeRestart("muffleWarning")
[17:41:26.527]                       }
[17:41:26.527]                       else if (inherits(cond, "condition")) {
[17:41:26.527]                         if (!is.null(pattern)) {
[17:41:26.527]                           computeRestarts <- base::computeRestarts
[17:41:26.527]                           grepl <- base::grepl
[17:41:26.527]                           restarts <- computeRestarts(cond)
[17:41:26.527]                           for (restart in restarts) {
[17:41:26.527]                             name <- restart$name
[17:41:26.527]                             if (is.null(name)) 
[17:41:26.527]                               next
[17:41:26.527]                             if (!grepl(pattern, name)) 
[17:41:26.527]                               next
[17:41:26.527]                             invokeRestart(restart)
[17:41:26.527]                             muffled <- TRUE
[17:41:26.527]                             break
[17:41:26.527]                           }
[17:41:26.527]                         }
[17:41:26.527]                       }
[17:41:26.527]                       invisible(muffled)
[17:41:26.527]                     }
[17:41:26.527]                     muffleCondition(cond, pattern = "^muffle")
[17:41:26.527]                   }
[17:41:26.527]                 }
[17:41:26.527]             }
[17:41:26.527]         }))
[17:41:26.527]     }, error = function(ex) {
[17:41:26.527]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:26.527]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:26.527]                 ...future.rng), started = ...future.startTime, 
[17:41:26.527]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:26.527]             version = "1.8"), class = "FutureResult")
[17:41:26.527]     }, finally = {
[17:41:26.527]         if (!identical(...future.workdir, getwd())) 
[17:41:26.527]             setwd(...future.workdir)
[17:41:26.527]         {
[17:41:26.527]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:26.527]                 ...future.oldOptions$nwarnings <- NULL
[17:41:26.527]             }
[17:41:26.527]             base::options(...future.oldOptions)
[17:41:26.527]             if (.Platform$OS.type == "windows") {
[17:41:26.527]                 old_names <- names(...future.oldEnvVars)
[17:41:26.527]                 envs <- base::Sys.getenv()
[17:41:26.527]                 names <- names(envs)
[17:41:26.527]                 common <- intersect(names, old_names)
[17:41:26.527]                 added <- setdiff(names, old_names)
[17:41:26.527]                 removed <- setdiff(old_names, names)
[17:41:26.527]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:26.527]                   envs[common]]
[17:41:26.527]                 NAMES <- toupper(changed)
[17:41:26.527]                 args <- list()
[17:41:26.527]                 for (kk in seq_along(NAMES)) {
[17:41:26.527]                   name <- changed[[kk]]
[17:41:26.527]                   NAME <- NAMES[[kk]]
[17:41:26.527]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.527]                     next
[17:41:26.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:26.527]                 }
[17:41:26.527]                 NAMES <- toupper(added)
[17:41:26.527]                 for (kk in seq_along(NAMES)) {
[17:41:26.527]                   name <- added[[kk]]
[17:41:26.527]                   NAME <- NAMES[[kk]]
[17:41:26.527]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.527]                     next
[17:41:26.527]                   args[[name]] <- ""
[17:41:26.527]                 }
[17:41:26.527]                 NAMES <- toupper(removed)
[17:41:26.527]                 for (kk in seq_along(NAMES)) {
[17:41:26.527]                   name <- removed[[kk]]
[17:41:26.527]                   NAME <- NAMES[[kk]]
[17:41:26.527]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.527]                     next
[17:41:26.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:26.527]                 }
[17:41:26.527]                 if (length(args) > 0) 
[17:41:26.527]                   base::do.call(base::Sys.setenv, args = args)
[17:41:26.527]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:26.527]             }
[17:41:26.527]             else {
[17:41:26.527]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:26.527]             }
[17:41:26.527]             {
[17:41:26.527]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:26.527]                   0L) {
[17:41:26.527]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:26.527]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:26.527]                   base::options(opts)
[17:41:26.527]                 }
[17:41:26.527]                 {
[17:41:26.527]                   {
[17:41:26.527]                     base::options(mc.cores = ...future.mc.cores.old)
[17:41:26.527]                     NULL
[17:41:26.527]                   }
[17:41:26.527]                   options(future.plan = "multisession")
[17:41:26.527]                   if (is.na("")) 
[17:41:26.527]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:26.527]                   else Sys.setenv(R_FUTURE_PLAN = "")
[17:41:26.527]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:41:26.527]                     .init = FALSE)
[17:41:26.527]                 }
[17:41:26.527]             }
[17:41:26.527]         }
[17:41:26.527]     })
[17:41:26.527]     if (TRUE) {
[17:41:26.527]         base::sink(type = "output", split = FALSE)
[17:41:26.527]         if (TRUE) {
[17:41:26.527]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:26.527]         }
[17:41:26.527]         else {
[17:41:26.527]             ...future.result["stdout"] <- base::list(NULL)
[17:41:26.527]         }
[17:41:26.527]         base::close(...future.stdout)
[17:41:26.527]         ...future.stdout <- NULL
[17:41:26.527]     }
[17:41:26.527]     ...future.result$conditions <- ...future.conditions
[17:41:26.527]     ...future.result$finished <- base::Sys.time()
[17:41:26.527]     ...future.result
[17:41:26.527] }
[17:41:26.578] MultisessionFuture started
[17:41:26.578] result() for ClusterFuture ...
[17:41:26.578] receiveMessageFromWorker() for ClusterFuture ...
[17:41:26.578] - Validating connection of MultisessionFuture
[17:41:26.609] - received message: FutureResult
[17:41:26.609] - Received FutureResult
[17:41:26.610] - Erased future from FutureRegistry
[17:41:26.610] result() for ClusterFuture ...
[17:41:26.610] - result already collected: FutureResult
[17:41:26.610] result() for ClusterFuture ... done
[17:41:26.610] receiveMessageFromWorker() for ClusterFuture ... done
[17:41:26.610] result() for ClusterFuture ... done
[17:41:26.610] result() for ClusterFuture ...
[17:41:26.610] - result already collected: FutureResult
[17:41:26.610] result() for ClusterFuture ... done
[17:41:26.610] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:41:26.614] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[17:41:26.615] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:26.615] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:41:26.615] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:41:26.615] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:41:26.615] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:41:26.615] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:41:26.616] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:41:26.616] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:41:26.616] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:41:26.616] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:41:26.616] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:41:26.616] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:41:26.616] R_FUTURE_PLAN=‘multisession’
[17:41:26.616] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[17:41:26.616] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:41:26.617] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:41:26.617] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:41:26.617] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:41:26.617] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:41:26.617] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:41:26.617] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:41:26.617] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:41:26.617] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:41:26.617] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:41:26.618] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:41:26.618] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:41:26.618] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:41:26.618] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:41:26.618] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:41:26.618] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:41:26.618] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:41:26.618] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:41:26.618] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:41:26.618] Option 'future.plan' = ‘multisession’
[17:41:26.619] R command-line argument: -p 1
[17:41:26.619]  => 'future.plan' already set.
[17:41:26.619] R process uuid: ec137522-6919-c4a3-1932-328082dd4ed0
[17:41:26.619] Setting plan('default')
[17:41:26.619] plan(): Setting new future strategy stack:
[17:41:26.619] List of future strategies:
[17:41:26.619] 1. multisession:
[17:41:26.619]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.619]    - tweaked: FALSE
[17:41:26.619]    - call: plan("default", .init = FALSE)
[17:41:26.624] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:41:26.625] plan(): Setting new future strategy stack:
[17:41:26.625] List of future strategies:
[17:41:26.625] 1. multisession:
[17:41:26.625]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.625]    - tweaked: FALSE
[17:41:26.625]    - call: plan("default")
[17:41:26.625] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:41:26.626] multisession:
[17:41:26.626] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.626] - tweaked: FALSE
[17:41:26.626] - call: plan("default")
[17:41:26.630] getGlobalsAndPackages() ...
[17:41:26.631] Not searching for globals
[17:41:26.631] - globals: [0] <none>
[17:41:26.631] getGlobalsAndPackages() ... DONE
[17:41:26.632] Packages needed by the future expression (n = 0): <none>
[17:41:26.632] Packages needed by future strategies (n = 0): <none>
[17:41:26.633] {
[17:41:26.633]     {
[17:41:26.633]         {
[17:41:26.633]             ...future.startTime <- base::Sys.time()
[17:41:26.633]             {
[17:41:26.633]                 {
[17:41:26.633]                   {
[17:41:26.633]                     base::local({
[17:41:26.633]                       has_future <- base::requireNamespace("future", 
[17:41:26.633]                         quietly = TRUE)
[17:41:26.633]                       if (has_future) {
[17:41:26.633]                         ns <- base::getNamespace("future")
[17:41:26.633]                         version <- ns[[".package"]][["version"]]
[17:41:26.633]                         if (is.null(version)) 
[17:41:26.633]                           version <- utils::packageVersion("future")
[17:41:26.633]                       }
[17:41:26.633]                       else {
[17:41:26.633]                         version <- NULL
[17:41:26.633]                       }
[17:41:26.633]                       if (!has_future || version < "1.8.0") {
[17:41:26.633]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:26.633]                           "", base::R.version$version.string), 
[17:41:26.633]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:26.633]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:26.633]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:26.633]                             "release", "version")], collapse = " "), 
[17:41:26.633]                           hostname = base::Sys.info()[["nodename"]])
[17:41:26.633]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:26.633]                           info)
[17:41:26.633]                         info <- base::paste(info, collapse = "; ")
[17:41:26.633]                         if (!has_future) {
[17:41:26.633]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:26.633]                             info)
[17:41:26.633]                         }
[17:41:26.633]                         else {
[17:41:26.633]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:26.633]                             info, version)
[17:41:26.633]                         }
[17:41:26.633]                         base::stop(msg)
[17:41:26.633]                       }
[17:41:26.633]                     })
[17:41:26.633]                   }
[17:41:26.633]                   ...future.strategy.old <- future::plan("list")
[17:41:26.633]                   options(future.plan = NULL)
[17:41:26.633]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:26.633]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:26.633]                 }
[17:41:26.633]                 ...future.workdir <- getwd()
[17:41:26.633]             }
[17:41:26.633]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:26.633]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:26.633]         }
[17:41:26.633]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:26.633]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:26.633]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:26.633]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:26.633]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:26.633]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:26.633]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:26.633]             base::names(...future.oldOptions))
[17:41:26.633]     }
[17:41:26.633]     if (FALSE) {
[17:41:26.633]     }
[17:41:26.633]     else {
[17:41:26.633]         if (TRUE) {
[17:41:26.633]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:26.633]                 open = "w")
[17:41:26.633]         }
[17:41:26.633]         else {
[17:41:26.633]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:26.633]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:26.633]         }
[17:41:26.633]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:26.633]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:26.633]             base::sink(type = "output", split = FALSE)
[17:41:26.633]             base::close(...future.stdout)
[17:41:26.633]         }, add = TRUE)
[17:41:26.633]     }
[17:41:26.633]     ...future.frame <- base::sys.nframe()
[17:41:26.633]     ...future.conditions <- base::list()
[17:41:26.633]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:26.633]     if (FALSE) {
[17:41:26.633]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:26.633]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:26.633]     }
[17:41:26.633]     ...future.result <- base::tryCatch({
[17:41:26.633]         base::withCallingHandlers({
[17:41:26.633]             ...future.value <- base::withVisible(base::local(NA))
[17:41:26.633]             future::FutureResult(value = ...future.value$value, 
[17:41:26.633]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:26.633]                   ...future.rng), globalenv = if (FALSE) 
[17:41:26.633]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:26.633]                     ...future.globalenv.names))
[17:41:26.633]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:26.633]         }, condition = base::local({
[17:41:26.633]             c <- base::c
[17:41:26.633]             inherits <- base::inherits
[17:41:26.633]             invokeRestart <- base::invokeRestart
[17:41:26.633]             length <- base::length
[17:41:26.633]             list <- base::list
[17:41:26.633]             seq.int <- base::seq.int
[17:41:26.633]             signalCondition <- base::signalCondition
[17:41:26.633]             sys.calls <- base::sys.calls
[17:41:26.633]             `[[` <- base::`[[`
[17:41:26.633]             `+` <- base::`+`
[17:41:26.633]             `<<-` <- base::`<<-`
[17:41:26.633]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:26.633]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:26.633]                   3L)]
[17:41:26.633]             }
[17:41:26.633]             function(cond) {
[17:41:26.633]                 is_error <- inherits(cond, "error")
[17:41:26.633]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:26.633]                   NULL)
[17:41:26.633]                 if (is_error) {
[17:41:26.633]                   sessionInformation <- function() {
[17:41:26.633]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:26.633]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:26.633]                       search = base::search(), system = base::Sys.info())
[17:41:26.633]                   }
[17:41:26.633]                   ...future.conditions[[length(...future.conditions) + 
[17:41:26.633]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:26.633]                     cond$call), session = sessionInformation(), 
[17:41:26.633]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:26.633]                   signalCondition(cond)
[17:41:26.633]                 }
[17:41:26.633]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:26.633]                 "immediateCondition"))) {
[17:41:26.633]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:26.633]                   ...future.conditions[[length(...future.conditions) + 
[17:41:26.633]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:26.633]                   if (TRUE && !signal) {
[17:41:26.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:26.633]                     {
[17:41:26.633]                       inherits <- base::inherits
[17:41:26.633]                       invokeRestart <- base::invokeRestart
[17:41:26.633]                       is.null <- base::is.null
[17:41:26.633]                       muffled <- FALSE
[17:41:26.633]                       if (inherits(cond, "message")) {
[17:41:26.633]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:26.633]                         if (muffled) 
[17:41:26.633]                           invokeRestart("muffleMessage")
[17:41:26.633]                       }
[17:41:26.633]                       else if (inherits(cond, "warning")) {
[17:41:26.633]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:26.633]                         if (muffled) 
[17:41:26.633]                           invokeRestart("muffleWarning")
[17:41:26.633]                       }
[17:41:26.633]                       else if (inherits(cond, "condition")) {
[17:41:26.633]                         if (!is.null(pattern)) {
[17:41:26.633]                           computeRestarts <- base::computeRestarts
[17:41:26.633]                           grepl <- base::grepl
[17:41:26.633]                           restarts <- computeRestarts(cond)
[17:41:26.633]                           for (restart in restarts) {
[17:41:26.633]                             name <- restart$name
[17:41:26.633]                             if (is.null(name)) 
[17:41:26.633]                               next
[17:41:26.633]                             if (!grepl(pattern, name)) 
[17:41:26.633]                               next
[17:41:26.633]                             invokeRestart(restart)
[17:41:26.633]                             muffled <- TRUE
[17:41:26.633]                             break
[17:41:26.633]                           }
[17:41:26.633]                         }
[17:41:26.633]                       }
[17:41:26.633]                       invisible(muffled)
[17:41:26.633]                     }
[17:41:26.633]                     muffleCondition(cond, pattern = "^muffle")
[17:41:26.633]                   }
[17:41:26.633]                 }
[17:41:26.633]                 else {
[17:41:26.633]                   if (TRUE) {
[17:41:26.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:26.633]                     {
[17:41:26.633]                       inherits <- base::inherits
[17:41:26.633]                       invokeRestart <- base::invokeRestart
[17:41:26.633]                       is.null <- base::is.null
[17:41:26.633]                       muffled <- FALSE
[17:41:26.633]                       if (inherits(cond, "message")) {
[17:41:26.633]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:26.633]                         if (muffled) 
[17:41:26.633]                           invokeRestart("muffleMessage")
[17:41:26.633]                       }
[17:41:26.633]                       else if (inherits(cond, "warning")) {
[17:41:26.633]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:26.633]                         if (muffled) 
[17:41:26.633]                           invokeRestart("muffleWarning")
[17:41:26.633]                       }
[17:41:26.633]                       else if (inherits(cond, "condition")) {
[17:41:26.633]                         if (!is.null(pattern)) {
[17:41:26.633]                           computeRestarts <- base::computeRestarts
[17:41:26.633]                           grepl <- base::grepl
[17:41:26.633]                           restarts <- computeRestarts(cond)
[17:41:26.633]                           for (restart in restarts) {
[17:41:26.633]                             name <- restart$name
[17:41:26.633]                             if (is.null(name)) 
[17:41:26.633]                               next
[17:41:26.633]                             if (!grepl(pattern, name)) 
[17:41:26.633]                               next
[17:41:26.633]                             invokeRestart(restart)
[17:41:26.633]                             muffled <- TRUE
[17:41:26.633]                             break
[17:41:26.633]                           }
[17:41:26.633]                         }
[17:41:26.633]                       }
[17:41:26.633]                       invisible(muffled)
[17:41:26.633]                     }
[17:41:26.633]                     muffleCondition(cond, pattern = "^muffle")
[17:41:26.633]                   }
[17:41:26.633]                 }
[17:41:26.633]             }
[17:41:26.633]         }))
[17:41:26.633]     }, error = function(ex) {
[17:41:26.633]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:26.633]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:26.633]                 ...future.rng), started = ...future.startTime, 
[17:41:26.633]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:26.633]             version = "1.8"), class = "FutureResult")
[17:41:26.633]     }, finally = {
[17:41:26.633]         if (!identical(...future.workdir, getwd())) 
[17:41:26.633]             setwd(...future.workdir)
[17:41:26.633]         {
[17:41:26.633]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:26.633]                 ...future.oldOptions$nwarnings <- NULL
[17:41:26.633]             }
[17:41:26.633]             base::options(...future.oldOptions)
[17:41:26.633]             if (.Platform$OS.type == "windows") {
[17:41:26.633]                 old_names <- names(...future.oldEnvVars)
[17:41:26.633]                 envs <- base::Sys.getenv()
[17:41:26.633]                 names <- names(envs)
[17:41:26.633]                 common <- intersect(names, old_names)
[17:41:26.633]                 added <- setdiff(names, old_names)
[17:41:26.633]                 removed <- setdiff(old_names, names)
[17:41:26.633]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:26.633]                   envs[common]]
[17:41:26.633]                 NAMES <- toupper(changed)
[17:41:26.633]                 args <- list()
[17:41:26.633]                 for (kk in seq_along(NAMES)) {
[17:41:26.633]                   name <- changed[[kk]]
[17:41:26.633]                   NAME <- NAMES[[kk]]
[17:41:26.633]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.633]                     next
[17:41:26.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:26.633]                 }
[17:41:26.633]                 NAMES <- toupper(added)
[17:41:26.633]                 for (kk in seq_along(NAMES)) {
[17:41:26.633]                   name <- added[[kk]]
[17:41:26.633]                   NAME <- NAMES[[kk]]
[17:41:26.633]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.633]                     next
[17:41:26.633]                   args[[name]] <- ""
[17:41:26.633]                 }
[17:41:26.633]                 NAMES <- toupper(removed)
[17:41:26.633]                 for (kk in seq_along(NAMES)) {
[17:41:26.633]                   name <- removed[[kk]]
[17:41:26.633]                   NAME <- NAMES[[kk]]
[17:41:26.633]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.633]                     next
[17:41:26.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:26.633]                 }
[17:41:26.633]                 if (length(args) > 0) 
[17:41:26.633]                   base::do.call(base::Sys.setenv, args = args)
[17:41:26.633]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:26.633]             }
[17:41:26.633]             else {
[17:41:26.633]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:26.633]             }
[17:41:26.633]             {
[17:41:26.633]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:26.633]                   0L) {
[17:41:26.633]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:26.633]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:26.633]                   base::options(opts)
[17:41:26.633]                 }
[17:41:26.633]                 {
[17:41:26.633]                   {
[17:41:26.633]                     NULL
[17:41:26.633]                     RNGkind("Mersenne-Twister")
[17:41:26.633]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:26.633]                       inherits = FALSE)
[17:41:26.633]                   }
[17:41:26.633]                   options(future.plan = "multisession")
[17:41:26.633]                   if (is.na("multisession")) 
[17:41:26.633]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:26.633]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[17:41:26.633]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:41:26.633]                     .init = FALSE)
[17:41:26.633]                 }
[17:41:26.633]             }
[17:41:26.633]         }
[17:41:26.633]     })
[17:41:26.633]     if (TRUE) {
[17:41:26.633]         base::sink(type = "output", split = FALSE)
[17:41:26.633]         if (TRUE) {
[17:41:26.633]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:26.633]         }
[17:41:26.633]         else {
[17:41:26.633]             ...future.result["stdout"] <- base::list(NULL)
[17:41:26.633]         }
[17:41:26.633]         base::close(...future.stdout)
[17:41:26.633]         ...future.stdout <- NULL
[17:41:26.633]     }
[17:41:26.633]     ...future.result$conditions <- ...future.conditions
[17:41:26.633]     ...future.result$finished <- base::Sys.time()
[17:41:26.633]     ...future.result
[17:41:26.633] }
[17:41:26.636] plan(): Setting new future strategy stack:
[17:41:26.636] List of future strategies:
[17:41:26.636] 1. sequential:
[17:41:26.636]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:26.636]    - tweaked: FALSE
[17:41:26.636]    - call: NULL
[17:41:26.637] plan(): nbrOfWorkers() = 1
[17:41:26.638] plan(): Setting new future strategy stack:
[17:41:26.638] List of future strategies:
[17:41:26.638] 1. multisession:
[17:41:26.638]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.638]    - tweaked: FALSE
[17:41:26.638]    - call: plan("default")
[17:41:26.642] plan(): nbrOfWorkers() = 1
[17:41:26.642] SequentialFuture started (and completed)
[17:41:26.642] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:41:26.646] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[17:41:26.647] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:26.647] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:41:26.647] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:41:26.647] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:41:26.647] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:41:26.647] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:41:26.647] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:41:26.647] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:41:26.648] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:41:26.648] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:41:26.648] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:41:26.648] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:41:26.648] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:41:26.648] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:41:26.648] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:41:26.648] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:41:26.649] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:41:26.649] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:41:26.649] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:41:26.649] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:41:26.649] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:41:26.649] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:41:26.649] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:41:26.649] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:41:26.649] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:41:26.649] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:41:26.650] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:41:26.650] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:41:26.650] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:41:26.650] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:41:26.650] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:41:26.650] Option 'future.plan' = ‘multisession’
[17:41:26.650] R command-line argument: -p 1
[17:41:26.650]  => 'future.plan' already set.
[17:41:26.651] R process uuid: ec137522-6919-c4a3-1932-328082dd4ed0
[17:41:26.651] Setting plan('default')
[17:41:26.651] plan(): Setting new future strategy stack:
[17:41:26.651] List of future strategies:
[17:41:26.651] 1. multisession:
[17:41:26.651]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.651]    - tweaked: FALSE
[17:41:26.651]    - call: plan("default", .init = FALSE)
[17:41:26.654] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:41:26.655] plan(): Setting new future strategy stack:
[17:41:26.655] List of future strategies:
[17:41:26.655] 1. multisession:
[17:41:26.655]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.655]    - tweaked: FALSE
[17:41:26.655]    - call: plan("default")
[17:41:26.655] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:41:26.655] multisession:
[17:41:26.655] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.655] - tweaked: FALSE
[17:41:26.655] - call: plan("default")
[17:41:26.658] getGlobalsAndPackages() ...
[17:41:26.659] Not searching for globals
[17:41:26.659] - globals: [0] <none>
[17:41:26.659] getGlobalsAndPackages() ... DONE
[17:41:26.659] Packages needed by the future expression (n = 0): <none>
[17:41:26.659] Packages needed by future strategies (n = 0): <none>
[17:41:26.660] {
[17:41:26.660]     {
[17:41:26.660]         {
[17:41:26.660]             ...future.startTime <- base::Sys.time()
[17:41:26.660]             {
[17:41:26.660]                 {
[17:41:26.660]                   {
[17:41:26.660]                     base::local({
[17:41:26.660]                       has_future <- base::requireNamespace("future", 
[17:41:26.660]                         quietly = TRUE)
[17:41:26.660]                       if (has_future) {
[17:41:26.660]                         ns <- base::getNamespace("future")
[17:41:26.660]                         version <- ns[[".package"]][["version"]]
[17:41:26.660]                         if (is.null(version)) 
[17:41:26.660]                           version <- utils::packageVersion("future")
[17:41:26.660]                       }
[17:41:26.660]                       else {
[17:41:26.660]                         version <- NULL
[17:41:26.660]                       }
[17:41:26.660]                       if (!has_future || version < "1.8.0") {
[17:41:26.660]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:26.660]                           "", base::R.version$version.string), 
[17:41:26.660]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:26.660]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:26.660]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:26.660]                             "release", "version")], collapse = " "), 
[17:41:26.660]                           hostname = base::Sys.info()[["nodename"]])
[17:41:26.660]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:26.660]                           info)
[17:41:26.660]                         info <- base::paste(info, collapse = "; ")
[17:41:26.660]                         if (!has_future) {
[17:41:26.660]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:26.660]                             info)
[17:41:26.660]                         }
[17:41:26.660]                         else {
[17:41:26.660]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:26.660]                             info, version)
[17:41:26.660]                         }
[17:41:26.660]                         base::stop(msg)
[17:41:26.660]                       }
[17:41:26.660]                     })
[17:41:26.660]                   }
[17:41:26.660]                   ...future.strategy.old <- future::plan("list")
[17:41:26.660]                   options(future.plan = NULL)
[17:41:26.660]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:26.660]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:26.660]                 }
[17:41:26.660]                 ...future.workdir <- getwd()
[17:41:26.660]             }
[17:41:26.660]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:26.660]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:26.660]         }
[17:41:26.660]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:26.660]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:26.660]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:26.660]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:26.660]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:26.660]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:26.660]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:26.660]             base::names(...future.oldOptions))
[17:41:26.660]     }
[17:41:26.660]     if (FALSE) {
[17:41:26.660]     }
[17:41:26.660]     else {
[17:41:26.660]         if (TRUE) {
[17:41:26.660]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:26.660]                 open = "w")
[17:41:26.660]         }
[17:41:26.660]         else {
[17:41:26.660]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:26.660]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:26.660]         }
[17:41:26.660]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:26.660]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:26.660]             base::sink(type = "output", split = FALSE)
[17:41:26.660]             base::close(...future.stdout)
[17:41:26.660]         }, add = TRUE)
[17:41:26.660]     }
[17:41:26.660]     ...future.frame <- base::sys.nframe()
[17:41:26.660]     ...future.conditions <- base::list()
[17:41:26.660]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:26.660]     if (FALSE) {
[17:41:26.660]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:26.660]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:26.660]     }
[17:41:26.660]     ...future.result <- base::tryCatch({
[17:41:26.660]         base::withCallingHandlers({
[17:41:26.660]             ...future.value <- base::withVisible(base::local(NA))
[17:41:26.660]             future::FutureResult(value = ...future.value$value, 
[17:41:26.660]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:26.660]                   ...future.rng), globalenv = if (FALSE) 
[17:41:26.660]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:26.660]                     ...future.globalenv.names))
[17:41:26.660]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:26.660]         }, condition = base::local({
[17:41:26.660]             c <- base::c
[17:41:26.660]             inherits <- base::inherits
[17:41:26.660]             invokeRestart <- base::invokeRestart
[17:41:26.660]             length <- base::length
[17:41:26.660]             list <- base::list
[17:41:26.660]             seq.int <- base::seq.int
[17:41:26.660]             signalCondition <- base::signalCondition
[17:41:26.660]             sys.calls <- base::sys.calls
[17:41:26.660]             `[[` <- base::`[[`
[17:41:26.660]             `+` <- base::`+`
[17:41:26.660]             `<<-` <- base::`<<-`
[17:41:26.660]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:26.660]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:26.660]                   3L)]
[17:41:26.660]             }
[17:41:26.660]             function(cond) {
[17:41:26.660]                 is_error <- inherits(cond, "error")
[17:41:26.660]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:26.660]                   NULL)
[17:41:26.660]                 if (is_error) {
[17:41:26.660]                   sessionInformation <- function() {
[17:41:26.660]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:26.660]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:26.660]                       search = base::search(), system = base::Sys.info())
[17:41:26.660]                   }
[17:41:26.660]                   ...future.conditions[[length(...future.conditions) + 
[17:41:26.660]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:26.660]                     cond$call), session = sessionInformation(), 
[17:41:26.660]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:26.660]                   signalCondition(cond)
[17:41:26.660]                 }
[17:41:26.660]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:26.660]                 "immediateCondition"))) {
[17:41:26.660]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:26.660]                   ...future.conditions[[length(...future.conditions) + 
[17:41:26.660]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:26.660]                   if (TRUE && !signal) {
[17:41:26.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:26.660]                     {
[17:41:26.660]                       inherits <- base::inherits
[17:41:26.660]                       invokeRestart <- base::invokeRestart
[17:41:26.660]                       is.null <- base::is.null
[17:41:26.660]                       muffled <- FALSE
[17:41:26.660]                       if (inherits(cond, "message")) {
[17:41:26.660]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:26.660]                         if (muffled) 
[17:41:26.660]                           invokeRestart("muffleMessage")
[17:41:26.660]                       }
[17:41:26.660]                       else if (inherits(cond, "warning")) {
[17:41:26.660]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:26.660]                         if (muffled) 
[17:41:26.660]                           invokeRestart("muffleWarning")
[17:41:26.660]                       }
[17:41:26.660]                       else if (inherits(cond, "condition")) {
[17:41:26.660]                         if (!is.null(pattern)) {
[17:41:26.660]                           computeRestarts <- base::computeRestarts
[17:41:26.660]                           grepl <- base::grepl
[17:41:26.660]                           restarts <- computeRestarts(cond)
[17:41:26.660]                           for (restart in restarts) {
[17:41:26.660]                             name <- restart$name
[17:41:26.660]                             if (is.null(name)) 
[17:41:26.660]                               next
[17:41:26.660]                             if (!grepl(pattern, name)) 
[17:41:26.660]                               next
[17:41:26.660]                             invokeRestart(restart)
[17:41:26.660]                             muffled <- TRUE
[17:41:26.660]                             break
[17:41:26.660]                           }
[17:41:26.660]                         }
[17:41:26.660]                       }
[17:41:26.660]                       invisible(muffled)
[17:41:26.660]                     }
[17:41:26.660]                     muffleCondition(cond, pattern = "^muffle")
[17:41:26.660]                   }
[17:41:26.660]                 }
[17:41:26.660]                 else {
[17:41:26.660]                   if (TRUE) {
[17:41:26.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:26.660]                     {
[17:41:26.660]                       inherits <- base::inherits
[17:41:26.660]                       invokeRestart <- base::invokeRestart
[17:41:26.660]                       is.null <- base::is.null
[17:41:26.660]                       muffled <- FALSE
[17:41:26.660]                       if (inherits(cond, "message")) {
[17:41:26.660]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:26.660]                         if (muffled) 
[17:41:26.660]                           invokeRestart("muffleMessage")
[17:41:26.660]                       }
[17:41:26.660]                       else if (inherits(cond, "warning")) {
[17:41:26.660]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:26.660]                         if (muffled) 
[17:41:26.660]                           invokeRestart("muffleWarning")
[17:41:26.660]                       }
[17:41:26.660]                       else if (inherits(cond, "condition")) {
[17:41:26.660]                         if (!is.null(pattern)) {
[17:41:26.660]                           computeRestarts <- base::computeRestarts
[17:41:26.660]                           grepl <- base::grepl
[17:41:26.660]                           restarts <- computeRestarts(cond)
[17:41:26.660]                           for (restart in restarts) {
[17:41:26.660]                             name <- restart$name
[17:41:26.660]                             if (is.null(name)) 
[17:41:26.660]                               next
[17:41:26.660]                             if (!grepl(pattern, name)) 
[17:41:26.660]                               next
[17:41:26.660]                             invokeRestart(restart)
[17:41:26.660]                             muffled <- TRUE
[17:41:26.660]                             break
[17:41:26.660]                           }
[17:41:26.660]                         }
[17:41:26.660]                       }
[17:41:26.660]                       invisible(muffled)
[17:41:26.660]                     }
[17:41:26.660]                     muffleCondition(cond, pattern = "^muffle")
[17:41:26.660]                   }
[17:41:26.660]                 }
[17:41:26.660]             }
[17:41:26.660]         }))
[17:41:26.660]     }, error = function(ex) {
[17:41:26.660]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:26.660]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:26.660]                 ...future.rng), started = ...future.startTime, 
[17:41:26.660]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:26.660]             version = "1.8"), class = "FutureResult")
[17:41:26.660]     }, finally = {
[17:41:26.660]         if (!identical(...future.workdir, getwd())) 
[17:41:26.660]             setwd(...future.workdir)
[17:41:26.660]         {
[17:41:26.660]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:26.660]                 ...future.oldOptions$nwarnings <- NULL
[17:41:26.660]             }
[17:41:26.660]             base::options(...future.oldOptions)
[17:41:26.660]             if (.Platform$OS.type == "windows") {
[17:41:26.660]                 old_names <- names(...future.oldEnvVars)
[17:41:26.660]                 envs <- base::Sys.getenv()
[17:41:26.660]                 names <- names(envs)
[17:41:26.660]                 common <- intersect(names, old_names)
[17:41:26.660]                 added <- setdiff(names, old_names)
[17:41:26.660]                 removed <- setdiff(old_names, names)
[17:41:26.660]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:26.660]                   envs[common]]
[17:41:26.660]                 NAMES <- toupper(changed)
[17:41:26.660]                 args <- list()
[17:41:26.660]                 for (kk in seq_along(NAMES)) {
[17:41:26.660]                   name <- changed[[kk]]
[17:41:26.660]                   NAME <- NAMES[[kk]]
[17:41:26.660]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.660]                     next
[17:41:26.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:26.660]                 }
[17:41:26.660]                 NAMES <- toupper(added)
[17:41:26.660]                 for (kk in seq_along(NAMES)) {
[17:41:26.660]                   name <- added[[kk]]
[17:41:26.660]                   NAME <- NAMES[[kk]]
[17:41:26.660]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.660]                     next
[17:41:26.660]                   args[[name]] <- ""
[17:41:26.660]                 }
[17:41:26.660]                 NAMES <- toupper(removed)
[17:41:26.660]                 for (kk in seq_along(NAMES)) {
[17:41:26.660]                   name <- removed[[kk]]
[17:41:26.660]                   NAME <- NAMES[[kk]]
[17:41:26.660]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.660]                     next
[17:41:26.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:26.660]                 }
[17:41:26.660]                 if (length(args) > 0) 
[17:41:26.660]                   base::do.call(base::Sys.setenv, args = args)
[17:41:26.660]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:26.660]             }
[17:41:26.660]             else {
[17:41:26.660]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:26.660]             }
[17:41:26.660]             {
[17:41:26.660]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:26.660]                   0L) {
[17:41:26.660]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:26.660]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:26.660]                   base::options(opts)
[17:41:26.660]                 }
[17:41:26.660]                 {
[17:41:26.660]                   {
[17:41:26.660]                     NULL
[17:41:26.660]                     RNGkind("Mersenne-Twister")
[17:41:26.660]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:26.660]                       inherits = FALSE)
[17:41:26.660]                   }
[17:41:26.660]                   options(future.plan = "multisession")
[17:41:26.660]                   if (is.na("")) 
[17:41:26.660]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:26.660]                   else Sys.setenv(R_FUTURE_PLAN = "")
[17:41:26.660]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:41:26.660]                     .init = FALSE)
[17:41:26.660]                 }
[17:41:26.660]             }
[17:41:26.660]         }
[17:41:26.660]     })
[17:41:26.660]     if (TRUE) {
[17:41:26.660]         base::sink(type = "output", split = FALSE)
[17:41:26.660]         if (TRUE) {
[17:41:26.660]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:26.660]         }
[17:41:26.660]         else {
[17:41:26.660]             ...future.result["stdout"] <- base::list(NULL)
[17:41:26.660]         }
[17:41:26.660]         base::close(...future.stdout)
[17:41:26.660]         ...future.stdout <- NULL
[17:41:26.660]     }
[17:41:26.660]     ...future.result$conditions <- ...future.conditions
[17:41:26.660]     ...future.result$finished <- base::Sys.time()
[17:41:26.660]     ...future.result
[17:41:26.660] }
[17:41:26.661] plan(): Setting new future strategy stack:
[17:41:26.661] List of future strategies:
[17:41:26.661] 1. sequential:
[17:41:26.661]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:26.661]    - tweaked: FALSE
[17:41:26.661]    - call: NULL
[17:41:26.662] plan(): nbrOfWorkers() = 1
[17:41:26.663] plan(): Setting new future strategy stack:
[17:41:26.663] List of future strategies:
[17:41:26.663] 1. multisession:
[17:41:26.663]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.663]    - tweaked: FALSE
[17:41:26.663]    - call: plan("default")
[17:41:26.666] plan(): nbrOfWorkers() = 1
[17:41:26.666] SequentialFuture started (and completed)
[17:41:26.666] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:41:26.669] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[17:41:26.670] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:41:26.670] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:41:26.670] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:41:26.671] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:41:26.671] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:41:26.671] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:41:26.671] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:41:26.671] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:41:26.671] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:41:26.671] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:41:26.671] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:41:26.671] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:41:26.672] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:41:26.672] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:41:26.672] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:41:26.672] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:41:26.672] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:41:26.672] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:41:26.672] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:41:26.672] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:41:26.672] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:41:26.673] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:41:26.673] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:41:26.673] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:41:26.673] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:41:26.673] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:41:26.673] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:41:26.673] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:41:26.673] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:41:26.673] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:41:26.673] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:41:26.674] Option 'future.plan' of type ‘function’
[17:41:26.674] R command-line argument: -p 1
[17:41:26.674]  => 'future.plan' already set.
[17:41:26.674] R process uuid: ec137522-6919-c4a3-1932-328082dd4ed0
[17:41:26.674] Setting plan('default')
[17:41:26.674] plan(): Setting new future strategy stack:
[17:41:26.674] List of future strategies:
[17:41:26.674] 1. multisession:
[17:41:26.674]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.674]    - tweaked: FALSE
[17:41:26.674]    - call: NULL
[17:41:26.678] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:41:26.678] plan(): Setting new future strategy stack:
[17:41:26.678] List of future strategies:
[17:41:26.678] 1. multisession:
[17:41:26.678]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.678]    - tweaked: FALSE
[17:41:26.678]    - call: NULL
[17:41:26.678] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:41:26.678] multisession:
[17:41:26.678] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.678] - tweaked: FALSE
[17:41:26.678] - call: NULL
[17:41:26.682] getGlobalsAndPackages() ...
[17:41:26.682] Not searching for globals
[17:41:26.682] - globals: [0] <none>
[17:41:26.682] getGlobalsAndPackages() ... DONE
[17:41:26.682] Packages needed by the future expression (n = 0): <none>
[17:41:26.682] Packages needed by future strategies (n = 0): <none>
[17:41:26.683] {
[17:41:26.683]     {
[17:41:26.683]         {
[17:41:26.683]             ...future.startTime <- base::Sys.time()
[17:41:26.683]             {
[17:41:26.683]                 {
[17:41:26.683]                   {
[17:41:26.683]                     base::local({
[17:41:26.683]                       has_future <- base::requireNamespace("future", 
[17:41:26.683]                         quietly = TRUE)
[17:41:26.683]                       if (has_future) {
[17:41:26.683]                         ns <- base::getNamespace("future")
[17:41:26.683]                         version <- ns[[".package"]][["version"]]
[17:41:26.683]                         if (is.null(version)) 
[17:41:26.683]                           version <- utils::packageVersion("future")
[17:41:26.683]                       }
[17:41:26.683]                       else {
[17:41:26.683]                         version <- NULL
[17:41:26.683]                       }
[17:41:26.683]                       if (!has_future || version < "1.8.0") {
[17:41:26.683]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:26.683]                           "", base::R.version$version.string), 
[17:41:26.683]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:26.683]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:26.683]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:26.683]                             "release", "version")], collapse = " "), 
[17:41:26.683]                           hostname = base::Sys.info()[["nodename"]])
[17:41:26.683]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:26.683]                           info)
[17:41:26.683]                         info <- base::paste(info, collapse = "; ")
[17:41:26.683]                         if (!has_future) {
[17:41:26.683]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:26.683]                             info)
[17:41:26.683]                         }
[17:41:26.683]                         else {
[17:41:26.683]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:26.683]                             info, version)
[17:41:26.683]                         }
[17:41:26.683]                         base::stop(msg)
[17:41:26.683]                       }
[17:41:26.683]                     })
[17:41:26.683]                   }
[17:41:26.683]                   ...future.strategy.old <- future::plan("list")
[17:41:26.683]                   options(future.plan = NULL)
[17:41:26.683]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:26.683]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:26.683]                 }
[17:41:26.683]                 ...future.workdir <- getwd()
[17:41:26.683]             }
[17:41:26.683]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:26.683]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:26.683]         }
[17:41:26.683]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:26.683]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:26.683]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:26.683]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:26.683]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:26.683]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:26.683]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:26.683]             base::names(...future.oldOptions))
[17:41:26.683]     }
[17:41:26.683]     if (FALSE) {
[17:41:26.683]     }
[17:41:26.683]     else {
[17:41:26.683]         if (TRUE) {
[17:41:26.683]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:26.683]                 open = "w")
[17:41:26.683]         }
[17:41:26.683]         else {
[17:41:26.683]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:26.683]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:26.683]         }
[17:41:26.683]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:26.683]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:26.683]             base::sink(type = "output", split = FALSE)
[17:41:26.683]             base::close(...future.stdout)
[17:41:26.683]         }, add = TRUE)
[17:41:26.683]     }
[17:41:26.683]     ...future.frame <- base::sys.nframe()
[17:41:26.683]     ...future.conditions <- base::list()
[17:41:26.683]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:26.683]     if (FALSE) {
[17:41:26.683]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:26.683]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:26.683]     }
[17:41:26.683]     ...future.result <- base::tryCatch({
[17:41:26.683]         base::withCallingHandlers({
[17:41:26.683]             ...future.value <- base::withVisible(base::local(NA))
[17:41:26.683]             future::FutureResult(value = ...future.value$value, 
[17:41:26.683]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:26.683]                   ...future.rng), globalenv = if (FALSE) 
[17:41:26.683]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:26.683]                     ...future.globalenv.names))
[17:41:26.683]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:26.683]         }, condition = base::local({
[17:41:26.683]             c <- base::c
[17:41:26.683]             inherits <- base::inherits
[17:41:26.683]             invokeRestart <- base::invokeRestart
[17:41:26.683]             length <- base::length
[17:41:26.683]             list <- base::list
[17:41:26.683]             seq.int <- base::seq.int
[17:41:26.683]             signalCondition <- base::signalCondition
[17:41:26.683]             sys.calls <- base::sys.calls
[17:41:26.683]             `[[` <- base::`[[`
[17:41:26.683]             `+` <- base::`+`
[17:41:26.683]             `<<-` <- base::`<<-`
[17:41:26.683]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:26.683]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:26.683]                   3L)]
[17:41:26.683]             }
[17:41:26.683]             function(cond) {
[17:41:26.683]                 is_error <- inherits(cond, "error")
[17:41:26.683]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:26.683]                   NULL)
[17:41:26.683]                 if (is_error) {
[17:41:26.683]                   sessionInformation <- function() {
[17:41:26.683]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:26.683]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:26.683]                       search = base::search(), system = base::Sys.info())
[17:41:26.683]                   }
[17:41:26.683]                   ...future.conditions[[length(...future.conditions) + 
[17:41:26.683]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:26.683]                     cond$call), session = sessionInformation(), 
[17:41:26.683]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:26.683]                   signalCondition(cond)
[17:41:26.683]                 }
[17:41:26.683]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:26.683]                 "immediateCondition"))) {
[17:41:26.683]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:26.683]                   ...future.conditions[[length(...future.conditions) + 
[17:41:26.683]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:26.683]                   if (TRUE && !signal) {
[17:41:26.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:26.683]                     {
[17:41:26.683]                       inherits <- base::inherits
[17:41:26.683]                       invokeRestart <- base::invokeRestart
[17:41:26.683]                       is.null <- base::is.null
[17:41:26.683]                       muffled <- FALSE
[17:41:26.683]                       if (inherits(cond, "message")) {
[17:41:26.683]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:26.683]                         if (muffled) 
[17:41:26.683]                           invokeRestart("muffleMessage")
[17:41:26.683]                       }
[17:41:26.683]                       else if (inherits(cond, "warning")) {
[17:41:26.683]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:26.683]                         if (muffled) 
[17:41:26.683]                           invokeRestart("muffleWarning")
[17:41:26.683]                       }
[17:41:26.683]                       else if (inherits(cond, "condition")) {
[17:41:26.683]                         if (!is.null(pattern)) {
[17:41:26.683]                           computeRestarts <- base::computeRestarts
[17:41:26.683]                           grepl <- base::grepl
[17:41:26.683]                           restarts <- computeRestarts(cond)
[17:41:26.683]                           for (restart in restarts) {
[17:41:26.683]                             name <- restart$name
[17:41:26.683]                             if (is.null(name)) 
[17:41:26.683]                               next
[17:41:26.683]                             if (!grepl(pattern, name)) 
[17:41:26.683]                               next
[17:41:26.683]                             invokeRestart(restart)
[17:41:26.683]                             muffled <- TRUE
[17:41:26.683]                             break
[17:41:26.683]                           }
[17:41:26.683]                         }
[17:41:26.683]                       }
[17:41:26.683]                       invisible(muffled)
[17:41:26.683]                     }
[17:41:26.683]                     muffleCondition(cond, pattern = "^muffle")
[17:41:26.683]                   }
[17:41:26.683]                 }
[17:41:26.683]                 else {
[17:41:26.683]                   if (TRUE) {
[17:41:26.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:26.683]                     {
[17:41:26.683]                       inherits <- base::inherits
[17:41:26.683]                       invokeRestart <- base::invokeRestart
[17:41:26.683]                       is.null <- base::is.null
[17:41:26.683]                       muffled <- FALSE
[17:41:26.683]                       if (inherits(cond, "message")) {
[17:41:26.683]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:26.683]                         if (muffled) 
[17:41:26.683]                           invokeRestart("muffleMessage")
[17:41:26.683]                       }
[17:41:26.683]                       else if (inherits(cond, "warning")) {
[17:41:26.683]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:26.683]                         if (muffled) 
[17:41:26.683]                           invokeRestart("muffleWarning")
[17:41:26.683]                       }
[17:41:26.683]                       else if (inherits(cond, "condition")) {
[17:41:26.683]                         if (!is.null(pattern)) {
[17:41:26.683]                           computeRestarts <- base::computeRestarts
[17:41:26.683]                           grepl <- base::grepl
[17:41:26.683]                           restarts <- computeRestarts(cond)
[17:41:26.683]                           for (restart in restarts) {
[17:41:26.683]                             name <- restart$name
[17:41:26.683]                             if (is.null(name)) 
[17:41:26.683]                               next
[17:41:26.683]                             if (!grepl(pattern, name)) 
[17:41:26.683]                               next
[17:41:26.683]                             invokeRestart(restart)
[17:41:26.683]                             muffled <- TRUE
[17:41:26.683]                             break
[17:41:26.683]                           }
[17:41:26.683]                         }
[17:41:26.683]                       }
[17:41:26.683]                       invisible(muffled)
[17:41:26.683]                     }
[17:41:26.683]                     muffleCondition(cond, pattern = "^muffle")
[17:41:26.683]                   }
[17:41:26.683]                 }
[17:41:26.683]             }
[17:41:26.683]         }))
[17:41:26.683]     }, error = function(ex) {
[17:41:26.683]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:26.683]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:26.683]                 ...future.rng), started = ...future.startTime, 
[17:41:26.683]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:26.683]             version = "1.8"), class = "FutureResult")
[17:41:26.683]     }, finally = {
[17:41:26.683]         if (!identical(...future.workdir, getwd())) 
[17:41:26.683]             setwd(...future.workdir)
[17:41:26.683]         {
[17:41:26.683]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:26.683]                 ...future.oldOptions$nwarnings <- NULL
[17:41:26.683]             }
[17:41:26.683]             base::options(...future.oldOptions)
[17:41:26.683]             if (.Platform$OS.type == "windows") {
[17:41:26.683]                 old_names <- names(...future.oldEnvVars)
[17:41:26.683]                 envs <- base::Sys.getenv()
[17:41:26.683]                 names <- names(envs)
[17:41:26.683]                 common <- intersect(names, old_names)
[17:41:26.683]                 added <- setdiff(names, old_names)
[17:41:26.683]                 removed <- setdiff(old_names, names)
[17:41:26.683]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:26.683]                   envs[common]]
[17:41:26.683]                 NAMES <- toupper(changed)
[17:41:26.683]                 args <- list()
[17:41:26.683]                 for (kk in seq_along(NAMES)) {
[17:41:26.683]                   name <- changed[[kk]]
[17:41:26.683]                   NAME <- NAMES[[kk]]
[17:41:26.683]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.683]                     next
[17:41:26.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:26.683]                 }
[17:41:26.683]                 NAMES <- toupper(added)
[17:41:26.683]                 for (kk in seq_along(NAMES)) {
[17:41:26.683]                   name <- added[[kk]]
[17:41:26.683]                   NAME <- NAMES[[kk]]
[17:41:26.683]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.683]                     next
[17:41:26.683]                   args[[name]] <- ""
[17:41:26.683]                 }
[17:41:26.683]                 NAMES <- toupper(removed)
[17:41:26.683]                 for (kk in seq_along(NAMES)) {
[17:41:26.683]                   name <- removed[[kk]]
[17:41:26.683]                   NAME <- NAMES[[kk]]
[17:41:26.683]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:26.683]                     next
[17:41:26.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:26.683]                 }
[17:41:26.683]                 if (length(args) > 0) 
[17:41:26.683]                   base::do.call(base::Sys.setenv, args = args)
[17:41:26.683]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:26.683]             }
[17:41:26.683]             else {
[17:41:26.683]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:26.683]             }
[17:41:26.683]             {
[17:41:26.683]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:26.683]                   0L) {
[17:41:26.683]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:26.683]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:26.683]                   base::options(opts)
[17:41:26.683]                 }
[17:41:26.683]                 {
[17:41:26.683]                   {
[17:41:26.683]                     NULL
[17:41:26.683]                     RNGkind("Mersenne-Twister")
[17:41:26.683]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:26.683]                       inherits = FALSE)
[17:41:26.683]                   }
[17:41:26.683]                   options(future.plan = function (..., workers = availableCores(), 
[17:41:26.683]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:41:26.683]                     envir = parent.frame()) 
[17:41:26.683]                   {
[17:41:26.683]                     if (is.function(workers)) 
[17:41:26.683]                       workers <- workers()
[17:41:26.683]                     workers <- structure(as.integer(workers), 
[17:41:26.683]                       class = class(workers))
[17:41:26.683]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:41:26.683]                       workers >= 1)
[17:41:26.683]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:41:26.683]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:41:26.683]                     }
[17:41:26.683]                     future <- MultisessionFuture(..., workers = workers, 
[17:41:26.683]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:41:26.683]                       envir = envir)
[17:41:26.683]                     if (!future$lazy) 
[17:41:26.683]                       future <- run(future)
[17:41:26.683]                     invisible(future)
[17:41:26.683]                   })
[17:41:26.683]                   if (is.na("")) 
[17:41:26.683]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:26.683]                   else Sys.setenv(R_FUTURE_PLAN = "")
[17:41:26.683]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:41:26.683]                     .init = FALSE)
[17:41:26.683]                 }
[17:41:26.683]             }
[17:41:26.683]         }
[17:41:26.683]     })
[17:41:26.683]     if (TRUE) {
[17:41:26.683]         base::sink(type = "output", split = FALSE)
[17:41:26.683]         if (TRUE) {
[17:41:26.683]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:26.683]         }
[17:41:26.683]         else {
[17:41:26.683]             ...future.result["stdout"] <- base::list(NULL)
[17:41:26.683]         }
[17:41:26.683]         base::close(...future.stdout)
[17:41:26.683]         ...future.stdout <- NULL
[17:41:26.683]     }
[17:41:26.683]     ...future.result$conditions <- ...future.conditions
[17:41:26.683]     ...future.result$finished <- base::Sys.time()
[17:41:26.683]     ...future.result
[17:41:26.683] }
[17:41:26.685] plan(): Setting new future strategy stack:
[17:41:26.685] List of future strategies:
[17:41:26.685] 1. sequential:
[17:41:26.685]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:26.685]    - tweaked: FALSE
[17:41:26.685]    - call: NULL
[17:41:26.685] plan(): nbrOfWorkers() = 1
[17:41:26.686] plan(): Setting new future strategy stack:
[17:41:26.686] List of future strategies:
[17:41:26.686] 1. multisession:
[17:41:26.686]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:41:26.686]    - tweaked: FALSE
[17:41:26.686]    - call: NULL
[17:41:26.690] plan(): nbrOfWorkers() = 1
[17:41:26.690] SequentialFuture started (and completed)
[17:41:26.690] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:41:26.693] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[17:41:26.695] Option 'future.startup.script': TRUE
[17:41:26.695] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:41:26.696] Future startup scripts found: <none>
[17:41:26.696] Option 'future.startup.script': TRUE
[17:41:26.696] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:41:26.696] Future startup scripts found: <none>
[17:41:26.696] Option 'future.startup.script': TRUE
[17:41:26.696] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:41:26.696] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[17:41:26.697] Option 'future.startup.script': TRUE
[17:41:26.697] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:41:26.697] Future startup scripts found: ‘.future.R’
[17:41:26.697] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[17:41:26.700] plan(): Setting new future strategy stack:
[17:41:26.700] List of future strategies:
[17:41:26.700] 1. FutureStrategy:
[17:41:26.700]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:41:26.700]    - tweaked: FALSE
[17:41:26.700]    - call: future::plan(oplan)
[17:41:26.700] plan(): nbrOfWorkers() = 1
> 
