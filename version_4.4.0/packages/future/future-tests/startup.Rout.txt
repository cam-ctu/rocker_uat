
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:33:01.975] plan(): Setting new future strategy stack:
[09:33:01.976] List of future strategies:
[09:33:01.976] 1. sequential:
[09:33:01.976]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:01.976]    - tweaked: FALSE
[09:33:01.976]    - call: future::plan("sequential")
[09:33:01.987] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[09:33:01.998] plan(): Setting new future strategy stack:
[09:33:01.998] List of future strategies:
[09:33:01.998] 1. sequential:
[09:33:01.998]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:01.998]    - tweaked: FALSE
[09:33:01.998]    - call: NULL
[09:33:02.009] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[09:33:02.015] plan(): Setting new future strategy stack:
[09:33:02.015] List of future strategies:
[09:33:02.015] 1. sequential:
[09:33:02.015]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.015]    - tweaked: FALSE
[09:33:02.015]    - call: NULL
[09:33:02.016] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[09:33:02.017] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:02.017] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[09:33:02.017] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[09:33:02.017] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[09:33:02.017] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[09:33:02.017] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[09:33:02.017] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[09:33:02.017] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[09:33:02.017] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[09:33:02.018] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[09:33:02.018] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[09:33:02.018] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[09:33:02.018] Environment variable ‘R_FUTURE_PLAN’ not set
[09:33:02.018] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[09:33:02.018] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[09:33:02.018] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[09:33:02.018] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[09:33:02.018] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[09:33:02.018] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[09:33:02.019] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[09:33:02.019] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[09:33:02.019] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[09:33:02.019] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[09:33:02.019] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[09:33:02.019] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[09:33:02.019] R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:02.019] Coercing from character to numeric: ‘0.01’
[09:33:02.019] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[09:33:02.020] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[09:33:02.020] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[09:33:02.020] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[09:33:02.020] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[09:33:02.020] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[09:33:02.020] Environment variable ‘R_FUTURE_JOURNAL’ not set
[09:33:02.020] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[09:33:02.020] R process uuid: 5bd39e70-8da5-8173-4eba-ca7c0d3dd7a0
[09:33:02.021] Setting plan('default')
[09:33:02.021] plan(): Setting new future strategy stack:
[09:33:02.021] List of future strategies:
[09:33:02.021] 1. sequential:
[09:33:02.021]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.021]    - tweaked: FALSE
[09:33:02.021]    - call: NULL
[09:33:02.021] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[09:33:02.022] plan(): Setting new future strategy stack:
[09:33:02.022] List of future strategies:
[09:33:02.022] 1. sequential:
[09:33:02.022]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.022]    - tweaked: FALSE
[09:33:02.022]    - call: NULL
[09:33:02.022] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[09:33:02.023] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:02.023] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[09:33:02.023] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[09:33:02.023] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[09:33:02.023] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[09:33:02.023] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[09:33:02.024] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[09:33:02.024] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[09:33:02.024] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[09:33:02.024] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[09:33:02.024] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[09:33:02.024] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[09:33:02.024] Environment variable ‘R_FUTURE_PLAN’ not set
[09:33:02.024] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[09:33:02.024] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[09:33:02.025] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[09:33:02.025] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[09:33:02.025] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[09:33:02.025] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[09:33:02.025] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[09:33:02.025] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[09:33:02.025] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[09:33:02.025] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[09:33:02.025] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[09:33:02.025] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[09:33:02.026] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[09:33:02.026] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[09:33:02.026] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[09:33:02.026] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[09:33:02.026] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[09:33:02.026] Environment variable ‘R_FUTURE_JOURNAL’ not set
[09:33:02.026] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[09:33:02.026] R command-line argument: -p 1
[09:33:02.027]  => options(future.plan = sequential)
[09:33:02.027] R process uuid: 5bd39e70-8da5-8173-4eba-ca7c0d3dd7a0
[09:33:02.027] Setting plan('default')
[09:33:02.027] plan(): Setting new future strategy stack:
[09:33:02.027] List of future strategies:
[09:33:02.027] 1. sequential:
[09:33:02.027]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.027]    - tweaked: FALSE
[09:33:02.027]    - call: NULL
[09:33:02.029] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[09:33:02.029] plan(): Setting new future strategy stack:
[09:33:02.029] List of future strategies:
[09:33:02.029] 1. sequential:
[09:33:02.029]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.029]    - tweaked: FALSE
[09:33:02.029]    - call: NULL
[09:33:02.030] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[09:33:02.030] plan(): Setting new future strategy stack:
[09:33:02.030] List of future strategies:
[09:33:02.030] 1. sequential:
[09:33:02.030]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.030]    - tweaked: FALSE
[09:33:02.030]    - call: NULL
[09:33:02.030] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[09:33:02.031] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:02.031] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[09:33:02.031] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[09:33:02.031] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[09:33:02.031] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[09:33:02.032] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[09:33:02.032] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[09:33:02.032] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[09:33:02.032] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[09:33:02.032] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[09:33:02.032] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[09:33:02.032] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[09:33:02.032] Environment variable ‘R_FUTURE_PLAN’ not set
[09:33:02.032] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[09:33:02.033] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[09:33:02.033] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[09:33:02.033] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[09:33:02.033] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[09:33:02.033] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[09:33:02.033] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[09:33:02.033] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[09:33:02.033] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[09:33:02.033] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[09:33:02.033] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[09:33:02.034] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[09:33:02.034] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[09:33:02.034] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[09:33:02.034] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[09:33:02.034] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[09:33:02.034] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[09:33:02.034] Environment variable ‘R_FUTURE_JOURNAL’ not set
[09:33:02.034] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[09:33:02.034] R process uuid: 5bd39e70-8da5-8173-4eba-ca7c0d3dd7a0
[09:33:02.034] Setting plan('default')
[09:33:02.035] plan(): Setting new future strategy stack:
[09:33:02.035] List of future strategies:
[09:33:02.035] 1. sequential:
[09:33:02.035]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.035]    - tweaked: FALSE
[09:33:02.035]    - call: NULL
[09:33:02.035] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[09:33:02.035] plan(): Setting new future strategy stack:
[09:33:02.036] List of future strategies:
[09:33:02.036] 1. sequential:
[09:33:02.036]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.036]    - tweaked: FALSE
[09:33:02.036]    - call: NULL
[09:33:02.036] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[09:33:02.037] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:02.037] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[09:33:02.037] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[09:33:02.037] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[09:33:02.037] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[09:33:02.037] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[09:33:02.037] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[09:33:02.038] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[09:33:02.038] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[09:33:02.038] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[09:33:02.038] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[09:33:02.038] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[09:33:02.038] Environment variable ‘R_FUTURE_PLAN’ not set
[09:33:02.038] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[09:33:02.038] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[09:33:02.038] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[09:33:02.038] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[09:33:02.038] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[09:33:02.039] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[09:33:02.039] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[09:33:02.039] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[09:33:02.039] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[09:33:02.039] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[09:33:02.039] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[09:33:02.039] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[09:33:02.039] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[09:33:02.039] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[09:33:02.039] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[09:33:02.040] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[09:33:02.040] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[09:33:02.040] Environment variable ‘R_FUTURE_JOURNAL’ not set
[09:33:02.040] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[09:33:02.040] R command-line argument: -p 2
[09:33:02.040]  => options(future.plan = tweak(multisession, workers = 2))
[09:33:02.042] R process uuid: 5bd39e70-8da5-8173-4eba-ca7c0d3dd7a0
[09:33:02.042] Setting plan('default')
[09:33:02.043] plan(): Setting new future strategy stack:
[09:33:02.043] List of future strategies:
[09:33:02.043] 1. multisession:
[09:33:02.043]    - args: function (..., workers = 2L, envir = parent.frame())
[09:33:02.043]    - tweaked: TRUE
[09:33:02.043]    - call: NULL
[09:33:02.043] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[09:33:02.043] plan(): Setting new future strategy stack:
[09:33:02.044] List of future strategies:
[09:33:02.044] 1. multisession:
[09:33:02.044]    - args: function (..., workers = 2L, envir = parent.frame())
[09:33:02.044]    - tweaked: TRUE
[09:33:02.044]    - call: NULL
[09:33:02.044] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:33:02.044] multisession:
[09:33:02.044] - args: function (..., workers = 2L, envir = parent.frame())
[09:33:02.044] - tweaked: TRUE
[09:33:02.044] - call: NULL
[09:33:02.045] getGlobalsAndPackages() ...
[09:33:02.045] Not searching for globals
[09:33:02.046] - globals: [0] <none>
[09:33:02.046] getGlobalsAndPackages() ... DONE
[09:33:02.046] [local output] makeClusterPSOCK() ...
[09:33:02.075] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:33:02.077] [local output] Base port: 11532
[09:33:02.077] [local output] Getting setup options for 2 cluster nodes ...
[09:33:02.077] [local output]  - Node 1 of 2 ...
[09:33:02.077] [local output] localMachine=TRUE => revtunnel=FALSE

[09:33:02.078] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpe7bD0H/worker.rank=1.parallelly.parent=50060.c38c520d42be.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpe7bD0H/worker.rank=1.parallelly.parent=50060.c38c520d42be.pid")'’
[09:33:02.262] - Possible to infer worker's PID: TRUE
[09:33:02.262] [local output] Rscript port: 11532

[09:33:02.263] [local output]  - Node 2 of 2 ...
[09:33:02.263] [local output] localMachine=TRUE => revtunnel=FALSE

[09:33:02.264] [local output] Rscript port: 11532

[09:33:02.264] [local output] Getting setup options for 2 cluster nodes ... done
[09:33:02.264] [local output]  - Parallel setup requested for some PSOCK nodes
[09:33:02.265] [local output] Setting up PSOCK nodes in parallel
[09:33:02.265] List of 36
[09:33:02.265]  $ worker          : chr "localhost"
[09:33:02.265]   ..- attr(*, "localhost")= logi TRUE
[09:33:02.265]  $ master          : chr "localhost"
[09:33:02.265]  $ port            : int 11532
[09:33:02.265]  $ connectTimeout  : num 120
[09:33:02.265]  $ timeout         : num 2592000
[09:33:02.265]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:33:02.265]  $ homogeneous     : logi TRUE
[09:33:02.265]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:33:02.265]  $ rscript_envs    : NULL
[09:33:02.265]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:33:02.265]  $ rscript_startup : NULL
[09:33:02.265]  $ rscript_sh      : chr "sh"
[09:33:02.265]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:33:02.265]  $ methods         : logi TRUE
[09:33:02.265]  $ socketOptions   : chr "no-delay"
[09:33:02.265]  $ useXDR          : logi FALSE
[09:33:02.265]  $ outfile         : chr "/dev/null"
[09:33:02.265]  $ renice          : int NA
[09:33:02.265]  $ rshcmd          : NULL
[09:33:02.265]  $ user            : chr(0) 
[09:33:02.265]  $ revtunnel       : logi FALSE
[09:33:02.265]  $ rshlogfile      : NULL
[09:33:02.265]  $ rshopts         : chr(0) 
[09:33:02.265]  $ rank            : int 1
[09:33:02.265]  $ manual          : logi FALSE
[09:33:02.265]  $ dryrun          : logi FALSE
[09:33:02.265]  $ quiet           : logi FALSE
[09:33:02.265]  $ setup_strategy  : chr "parallel"
[09:33:02.265]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:33:02.265]  $ pidfile         : chr "/tmp/Rtmpe7bD0H/worker.rank=1.parallelly.parent=50060.c38c520d42be.pid"
[09:33:02.265]  $ rshcmd_label    : NULL
[09:33:02.265]  $ rsh_call        : NULL
[09:33:02.265]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:33:02.265]  $ localMachine    : logi TRUE
[09:33:02.265]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:33:02.265]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:33:02.265]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:33:02.265]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:33:02.265]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:33:02.265]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:33:02.265]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:33:02.265]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:33:02.265]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:33:02.265]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:33:02.265]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:33:02.265]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:33:02.265]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:33:02.265]  $ arguments       :List of 28
[09:33:02.265]   ..$ worker          : chr "localhost"
[09:33:02.265]   ..$ master          : NULL
[09:33:02.265]   ..$ port            : int 11532
[09:33:02.265]   ..$ connectTimeout  : num 120
[09:33:02.265]   ..$ timeout         : num 2592000
[09:33:02.265]   ..$ rscript         : NULL
[09:33:02.265]   ..$ homogeneous     : NULL
[09:33:02.265]   ..$ rscript_args    : NULL
[09:33:02.265]   ..$ rscript_envs    : NULL
[09:33:02.265]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:33:02.265]   ..$ rscript_startup : NULL
[09:33:02.265]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:33:02.265]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:33:02.265]   ..$ methods         : logi TRUE
[09:33:02.265]   ..$ socketOptions   : chr "no-delay"
[09:33:02.265]   ..$ useXDR          : logi FALSE
[09:33:02.265]   ..$ outfile         : chr "/dev/null"
[09:33:02.265]   ..$ renice          : int NA
[09:33:02.265]   ..$ rshcmd          : NULL
[09:33:02.265]   ..$ user            : NULL
[09:33:02.265]   ..$ revtunnel       : logi NA
[09:33:02.265]   ..$ rshlogfile      : NULL
[09:33:02.265]   ..$ rshopts         : NULL
[09:33:02.265]   ..$ rank            : int 1
[09:33:02.265]   ..$ manual          : logi FALSE
[09:33:02.265]   ..$ dryrun          : logi FALSE
[09:33:02.265]   ..$ quiet           : logi FALSE
[09:33:02.265]   ..$ setup_strategy  : chr "parallel"
[09:33:02.265]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:33:02.281] [local output] System call to launch all workers:
[09:33:02.282] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpe7bD0H/worker.rank=1.parallelly.parent=50060.c38c520d42be.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11532 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:33:02.282] [local output] Starting PSOCK main server
[09:33:02.287] [local output] Workers launched
[09:33:02.287] [local output] Waiting for workers to connect back
[09:33:02.288]  - [local output] 0 workers out of 2 ready
[09:33:02.528]  - [local output] 0 workers out of 2 ready
[09:33:02.529]  - [local output] 1 workers out of 2 ready
[09:33:02.529]  - [local output] 2 workers out of 2 ready
[09:33:02.529] [local output] Launching of workers completed
[09:33:02.529] [local output] Collecting session information from workers
[09:33:02.530] [local output]  - Worker #1 of 2
[09:33:02.530] [local output]  - Worker #2 of 2
[09:33:02.531] [local output] makeClusterPSOCK() ... done
[09:33:02.542] Packages needed by the future expression (n = 0): <none>
[09:33:02.543] Packages needed by future strategies (n = 0): <none>
[09:33:02.543] {
[09:33:02.543]     {
[09:33:02.543]         {
[09:33:02.543]             ...future.startTime <- base::Sys.time()
[09:33:02.543]             {
[09:33:02.543]                 {
[09:33:02.543]                   {
[09:33:02.543]                     {
[09:33:02.543]                       base::local({
[09:33:02.543]                         has_future <- base::requireNamespace("future", 
[09:33:02.543]                           quietly = TRUE)
[09:33:02.543]                         if (has_future) {
[09:33:02.543]                           ns <- base::getNamespace("future")
[09:33:02.543]                           version <- ns[[".package"]][["version"]]
[09:33:02.543]                           if (is.null(version)) 
[09:33:02.543]                             version <- utils::packageVersion("future")
[09:33:02.543]                         }
[09:33:02.543]                         else {
[09:33:02.543]                           version <- NULL
[09:33:02.543]                         }
[09:33:02.543]                         if (!has_future || version < "1.8.0") {
[09:33:02.543]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:02.543]                             "", base::R.version$version.string), 
[09:33:02.543]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:02.543]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:02.543]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:02.543]                               "release", "version")], collapse = " "), 
[09:33:02.543]                             hostname = base::Sys.info()[["nodename"]])
[09:33:02.543]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:02.543]                             info)
[09:33:02.543]                           info <- base::paste(info, collapse = "; ")
[09:33:02.543]                           if (!has_future) {
[09:33:02.543]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:02.543]                               info)
[09:33:02.543]                           }
[09:33:02.543]                           else {
[09:33:02.543]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:02.543]                               info, version)
[09:33:02.543]                           }
[09:33:02.543]                           base::stop(msg)
[09:33:02.543]                         }
[09:33:02.543]                       })
[09:33:02.543]                     }
[09:33:02.543]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:02.543]                     base::options(mc.cores = 1L)
[09:33:02.543]                   }
[09:33:02.543]                   ...future.strategy.old <- future::plan("list")
[09:33:02.543]                   options(future.plan = NULL)
[09:33:02.543]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:02.543]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:02.543]                 }
[09:33:02.543]                 ...future.workdir <- getwd()
[09:33:02.543]             }
[09:33:02.543]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:02.543]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:02.543]         }
[09:33:02.543]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:02.543]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:02.543]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:02.543]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:02.543]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:02.543]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:02.543]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:02.543]             base::names(...future.oldOptions))
[09:33:02.543]     }
[09:33:02.543]     if (FALSE) {
[09:33:02.543]     }
[09:33:02.543]     else {
[09:33:02.543]         if (TRUE) {
[09:33:02.543]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:02.543]                 open = "w")
[09:33:02.543]         }
[09:33:02.543]         else {
[09:33:02.543]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:02.543]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:02.543]         }
[09:33:02.543]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:02.543]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:02.543]             base::sink(type = "output", split = FALSE)
[09:33:02.543]             base::close(...future.stdout)
[09:33:02.543]         }, add = TRUE)
[09:33:02.543]     }
[09:33:02.543]     ...future.frame <- base::sys.nframe()
[09:33:02.543]     ...future.conditions <- base::list()
[09:33:02.543]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:02.543]     if (FALSE) {
[09:33:02.543]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:02.543]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:02.543]     }
[09:33:02.543]     ...future.result <- base::tryCatch({
[09:33:02.543]         base::withCallingHandlers({
[09:33:02.543]             ...future.value <- base::withVisible(base::local({
[09:33:02.543]                 ...future.makeSendCondition <- base::local({
[09:33:02.543]                   sendCondition <- NULL
[09:33:02.543]                   function(frame = 1L) {
[09:33:02.543]                     if (is.function(sendCondition)) 
[09:33:02.543]                       return(sendCondition)
[09:33:02.543]                     ns <- getNamespace("parallel")
[09:33:02.543]                     if (exists("sendData", mode = "function", 
[09:33:02.543]                       envir = ns)) {
[09:33:02.543]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:02.543]                         envir = ns)
[09:33:02.543]                       envir <- sys.frame(frame)
[09:33:02.543]                       master <- NULL
[09:33:02.543]                       while (!identical(envir, .GlobalEnv) && 
[09:33:02.543]                         !identical(envir, emptyenv())) {
[09:33:02.543]                         if (exists("master", mode = "list", envir = envir, 
[09:33:02.543]                           inherits = FALSE)) {
[09:33:02.543]                           master <- get("master", mode = "list", 
[09:33:02.543]                             envir = envir, inherits = FALSE)
[09:33:02.543]                           if (inherits(master, c("SOCKnode", 
[09:33:02.543]                             "SOCK0node"))) {
[09:33:02.543]                             sendCondition <<- function(cond) {
[09:33:02.543]                               data <- list(type = "VALUE", value = cond, 
[09:33:02.543]                                 success = TRUE)
[09:33:02.543]                               parallel_sendData(master, data)
[09:33:02.543]                             }
[09:33:02.543]                             return(sendCondition)
[09:33:02.543]                           }
[09:33:02.543]                         }
[09:33:02.543]                         frame <- frame + 1L
[09:33:02.543]                         envir <- sys.frame(frame)
[09:33:02.543]                       }
[09:33:02.543]                     }
[09:33:02.543]                     sendCondition <<- function(cond) NULL
[09:33:02.543]                   }
[09:33:02.543]                 })
[09:33:02.543]                 withCallingHandlers({
[09:33:02.543]                   NA
[09:33:02.543]                 }, immediateCondition = function(cond) {
[09:33:02.543]                   sendCondition <- ...future.makeSendCondition()
[09:33:02.543]                   sendCondition(cond)
[09:33:02.543]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:02.543]                   {
[09:33:02.543]                     inherits <- base::inherits
[09:33:02.543]                     invokeRestart <- base::invokeRestart
[09:33:02.543]                     is.null <- base::is.null
[09:33:02.543]                     muffled <- FALSE
[09:33:02.543]                     if (inherits(cond, "message")) {
[09:33:02.543]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:02.543]                       if (muffled) 
[09:33:02.543]                         invokeRestart("muffleMessage")
[09:33:02.543]                     }
[09:33:02.543]                     else if (inherits(cond, "warning")) {
[09:33:02.543]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:02.543]                       if (muffled) 
[09:33:02.543]                         invokeRestart("muffleWarning")
[09:33:02.543]                     }
[09:33:02.543]                     else if (inherits(cond, "condition")) {
[09:33:02.543]                       if (!is.null(pattern)) {
[09:33:02.543]                         computeRestarts <- base::computeRestarts
[09:33:02.543]                         grepl <- base::grepl
[09:33:02.543]                         restarts <- computeRestarts(cond)
[09:33:02.543]                         for (restart in restarts) {
[09:33:02.543]                           name <- restart$name
[09:33:02.543]                           if (is.null(name)) 
[09:33:02.543]                             next
[09:33:02.543]                           if (!grepl(pattern, name)) 
[09:33:02.543]                             next
[09:33:02.543]                           invokeRestart(restart)
[09:33:02.543]                           muffled <- TRUE
[09:33:02.543]                           break
[09:33:02.543]                         }
[09:33:02.543]                       }
[09:33:02.543]                     }
[09:33:02.543]                     invisible(muffled)
[09:33:02.543]                   }
[09:33:02.543]                   muffleCondition(cond)
[09:33:02.543]                 })
[09:33:02.543]             }))
[09:33:02.543]             future::FutureResult(value = ...future.value$value, 
[09:33:02.543]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:02.543]                   ...future.rng), globalenv = if (FALSE) 
[09:33:02.543]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:02.543]                     ...future.globalenv.names))
[09:33:02.543]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:02.543]         }, condition = base::local({
[09:33:02.543]             c <- base::c
[09:33:02.543]             inherits <- base::inherits
[09:33:02.543]             invokeRestart <- base::invokeRestart
[09:33:02.543]             length <- base::length
[09:33:02.543]             list <- base::list
[09:33:02.543]             seq.int <- base::seq.int
[09:33:02.543]             signalCondition <- base::signalCondition
[09:33:02.543]             sys.calls <- base::sys.calls
[09:33:02.543]             `[[` <- base::`[[`
[09:33:02.543]             `+` <- base::`+`
[09:33:02.543]             `<<-` <- base::`<<-`
[09:33:02.543]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:02.543]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:02.543]                   3L)]
[09:33:02.543]             }
[09:33:02.543]             function(cond) {
[09:33:02.543]                 is_error <- inherits(cond, "error")
[09:33:02.543]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:02.543]                   NULL)
[09:33:02.543]                 if (is_error) {
[09:33:02.543]                   sessionInformation <- function() {
[09:33:02.543]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:02.543]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:02.543]                       search = base::search(), system = base::Sys.info())
[09:33:02.543]                   }
[09:33:02.543]                   ...future.conditions[[length(...future.conditions) + 
[09:33:02.543]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:02.543]                     cond$call), session = sessionInformation(), 
[09:33:02.543]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:02.543]                   signalCondition(cond)
[09:33:02.543]                 }
[09:33:02.543]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:02.543]                 "immediateCondition"))) {
[09:33:02.543]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:02.543]                   ...future.conditions[[length(...future.conditions) + 
[09:33:02.543]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:02.543]                   if (TRUE && !signal) {
[09:33:02.543]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:02.543]                     {
[09:33:02.543]                       inherits <- base::inherits
[09:33:02.543]                       invokeRestart <- base::invokeRestart
[09:33:02.543]                       is.null <- base::is.null
[09:33:02.543]                       muffled <- FALSE
[09:33:02.543]                       if (inherits(cond, "message")) {
[09:33:02.543]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:02.543]                         if (muffled) 
[09:33:02.543]                           invokeRestart("muffleMessage")
[09:33:02.543]                       }
[09:33:02.543]                       else if (inherits(cond, "warning")) {
[09:33:02.543]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:02.543]                         if (muffled) 
[09:33:02.543]                           invokeRestart("muffleWarning")
[09:33:02.543]                       }
[09:33:02.543]                       else if (inherits(cond, "condition")) {
[09:33:02.543]                         if (!is.null(pattern)) {
[09:33:02.543]                           computeRestarts <- base::computeRestarts
[09:33:02.543]                           grepl <- base::grepl
[09:33:02.543]                           restarts <- computeRestarts(cond)
[09:33:02.543]                           for (restart in restarts) {
[09:33:02.543]                             name <- restart$name
[09:33:02.543]                             if (is.null(name)) 
[09:33:02.543]                               next
[09:33:02.543]                             if (!grepl(pattern, name)) 
[09:33:02.543]                               next
[09:33:02.543]                             invokeRestart(restart)
[09:33:02.543]                             muffled <- TRUE
[09:33:02.543]                             break
[09:33:02.543]                           }
[09:33:02.543]                         }
[09:33:02.543]                       }
[09:33:02.543]                       invisible(muffled)
[09:33:02.543]                     }
[09:33:02.543]                     muffleCondition(cond, pattern = "^muffle")
[09:33:02.543]                   }
[09:33:02.543]                 }
[09:33:02.543]                 else {
[09:33:02.543]                   if (TRUE) {
[09:33:02.543]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:02.543]                     {
[09:33:02.543]                       inherits <- base::inherits
[09:33:02.543]                       invokeRestart <- base::invokeRestart
[09:33:02.543]                       is.null <- base::is.null
[09:33:02.543]                       muffled <- FALSE
[09:33:02.543]                       if (inherits(cond, "message")) {
[09:33:02.543]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:02.543]                         if (muffled) 
[09:33:02.543]                           invokeRestart("muffleMessage")
[09:33:02.543]                       }
[09:33:02.543]                       else if (inherits(cond, "warning")) {
[09:33:02.543]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:02.543]                         if (muffled) 
[09:33:02.543]                           invokeRestart("muffleWarning")
[09:33:02.543]                       }
[09:33:02.543]                       else if (inherits(cond, "condition")) {
[09:33:02.543]                         if (!is.null(pattern)) {
[09:33:02.543]                           computeRestarts <- base::computeRestarts
[09:33:02.543]                           grepl <- base::grepl
[09:33:02.543]                           restarts <- computeRestarts(cond)
[09:33:02.543]                           for (restart in restarts) {
[09:33:02.543]                             name <- restart$name
[09:33:02.543]                             if (is.null(name)) 
[09:33:02.543]                               next
[09:33:02.543]                             if (!grepl(pattern, name)) 
[09:33:02.543]                               next
[09:33:02.543]                             invokeRestart(restart)
[09:33:02.543]                             muffled <- TRUE
[09:33:02.543]                             break
[09:33:02.543]                           }
[09:33:02.543]                         }
[09:33:02.543]                       }
[09:33:02.543]                       invisible(muffled)
[09:33:02.543]                     }
[09:33:02.543]                     muffleCondition(cond, pattern = "^muffle")
[09:33:02.543]                   }
[09:33:02.543]                 }
[09:33:02.543]             }
[09:33:02.543]         }))
[09:33:02.543]     }, error = function(ex) {
[09:33:02.543]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:02.543]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:02.543]                 ...future.rng), started = ...future.startTime, 
[09:33:02.543]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:02.543]             version = "1.8"), class = "FutureResult")
[09:33:02.543]     }, finally = {
[09:33:02.543]         if (!identical(...future.workdir, getwd())) 
[09:33:02.543]             setwd(...future.workdir)
[09:33:02.543]         {
[09:33:02.543]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:02.543]                 ...future.oldOptions$nwarnings <- NULL
[09:33:02.543]             }
[09:33:02.543]             base::options(...future.oldOptions)
[09:33:02.543]             if (.Platform$OS.type == "windows") {
[09:33:02.543]                 old_names <- names(...future.oldEnvVars)
[09:33:02.543]                 envs <- base::Sys.getenv()
[09:33:02.543]                 names <- names(envs)
[09:33:02.543]                 common <- intersect(names, old_names)
[09:33:02.543]                 added <- setdiff(names, old_names)
[09:33:02.543]                 removed <- setdiff(old_names, names)
[09:33:02.543]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:02.543]                   envs[common]]
[09:33:02.543]                 NAMES <- toupper(changed)
[09:33:02.543]                 args <- list()
[09:33:02.543]                 for (kk in seq_along(NAMES)) {
[09:33:02.543]                   name <- changed[[kk]]
[09:33:02.543]                   NAME <- NAMES[[kk]]
[09:33:02.543]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:02.543]                     next
[09:33:02.543]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:02.543]                 }
[09:33:02.543]                 NAMES <- toupper(added)
[09:33:02.543]                 for (kk in seq_along(NAMES)) {
[09:33:02.543]                   name <- added[[kk]]
[09:33:02.543]                   NAME <- NAMES[[kk]]
[09:33:02.543]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:02.543]                     next
[09:33:02.543]                   args[[name]] <- ""
[09:33:02.543]                 }
[09:33:02.543]                 NAMES <- toupper(removed)
[09:33:02.543]                 for (kk in seq_along(NAMES)) {
[09:33:02.543]                   name <- removed[[kk]]
[09:33:02.543]                   NAME <- NAMES[[kk]]
[09:33:02.543]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:02.543]                     next
[09:33:02.543]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:02.543]                 }
[09:33:02.543]                 if (length(args) > 0) 
[09:33:02.543]                   base::do.call(base::Sys.setenv, args = args)
[09:33:02.543]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:02.543]             }
[09:33:02.543]             else {
[09:33:02.543]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:02.543]             }
[09:33:02.543]             {
[09:33:02.543]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:02.543]                   0L) {
[09:33:02.543]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:02.543]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:02.543]                   base::options(opts)
[09:33:02.543]                 }
[09:33:02.543]                 {
[09:33:02.543]                   {
[09:33:02.543]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:02.543]                     NULL
[09:33:02.543]                   }
[09:33:02.543]                   options(future.plan = function (..., workers = 2L, 
[09:33:02.543]                     envir = parent.frame()) 
[09:33:02.543]                   strategy(..., workers = workers, envir = envir))
[09:33:02.543]                   if (is.na(NA_character_)) 
[09:33:02.543]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:02.543]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:33:02.543]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:02.543]                     .init = FALSE)
[09:33:02.543]                 }
[09:33:02.543]             }
[09:33:02.543]         }
[09:33:02.543]     })
[09:33:02.543]     if (TRUE) {
[09:33:02.543]         base::sink(type = "output", split = FALSE)
[09:33:02.543]         if (TRUE) {
[09:33:02.543]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:02.543]         }
[09:33:02.543]         else {
[09:33:02.543]             ...future.result["stdout"] <- base::list(NULL)
[09:33:02.543]         }
[09:33:02.543]         base::close(...future.stdout)
[09:33:02.543]         ...future.stdout <- NULL
[09:33:02.543]     }
[09:33:02.543]     ...future.result$conditions <- ...future.conditions
[09:33:02.543]     ...future.result$finished <- base::Sys.time()
[09:33:02.543]     ...future.result
[09:33:02.543] }
[09:33:02.595] MultisessionFuture started
[09:33:02.595] result() for ClusterFuture ...
[09:33:02.595] receiveMessageFromWorker() for ClusterFuture ...
[09:33:02.596] - Validating connection of MultisessionFuture
[09:33:02.626] - received message: FutureResult
[09:33:02.626] - Received FutureResult
[09:33:02.629] - Erased future from FutureRegistry
[09:33:02.629] result() for ClusterFuture ...
[09:33:02.629] - result already collected: FutureResult
[09:33:02.629] result() for ClusterFuture ... done
[09:33:02.629] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:02.630] result() for ClusterFuture ... done
[09:33:02.630] result() for ClusterFuture ...
[09:33:02.630] - result already collected: FutureResult
[09:33:02.630] result() for ClusterFuture ... done
[09:33:02.630] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:33:02.630] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[09:33:02.631] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:02.631] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[09:33:02.631] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[09:33:02.632] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[09:33:02.632] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[09:33:02.632] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[09:33:02.632] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[09:33:02.632] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[09:33:02.632] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[09:33:02.632] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[09:33:02.633] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[09:33:02.633] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[09:33:02.633] Environment variable ‘R_FUTURE_PLAN’ not set
[09:33:02.633] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[09:33:02.633] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[09:33:02.633] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[09:33:02.633] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[09:33:02.633] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[09:33:02.634] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[09:33:02.634] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[09:33:02.634] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[09:33:02.634] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[09:33:02.634] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[09:33:02.634] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[09:33:02.634] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[09:33:02.635] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[09:33:02.635] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[09:33:02.635] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[09:33:02.635] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[09:33:02.635] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[09:33:02.635] Environment variable ‘R_FUTURE_JOURNAL’ not set
[09:33:02.635] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[09:33:02.636] R process uuid: 5bd39e70-8da5-8173-4eba-ca7c0d3dd7a0
[09:33:02.636] Setting plan('default')
[09:33:02.636] plan(): Setting new future strategy stack:
[09:33:02.636] List of future strategies:
[09:33:02.636] 1. sequential:
[09:33:02.636]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.636]    - tweaked: FALSE
[09:33:02.636]    - call: NULL
[09:33:02.637] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[09:33:02.638] plan(): Setting new future strategy stack:
[09:33:02.638] List of future strategies:
[09:33:02.638] 1. sequential:
[09:33:02.638]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.638]    - tweaked: FALSE
[09:33:02.638]    - call: NULL
[09:33:02.639] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[09:33:02.641] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:02.641] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[09:33:02.641] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[09:33:02.641] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[09:33:02.641] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[09:33:02.642] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[09:33:02.642] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[09:33:02.642] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[09:33:02.642] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[09:33:02.642] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[09:33:02.643] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[09:33:02.643] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[09:33:02.643] Environment variable ‘R_FUTURE_PLAN’ not set
[09:33:02.643] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[09:33:02.643] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[09:33:02.644] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[09:33:02.644] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[09:33:02.644] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[09:33:02.644] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[09:33:02.645] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[09:33:02.645] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[09:33:02.645] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[09:33:02.645] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[09:33:02.645] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[09:33:02.646] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[09:33:02.646] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[09:33:02.646] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[09:33:02.646] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[09:33:02.647] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[09:33:02.647] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[09:33:02.647] Environment variable ‘R_FUTURE_JOURNAL’ not set
[09:33:02.647] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[09:33:02.648] R process uuid: 5bd39e70-8da5-8173-4eba-ca7c0d3dd7a0
[09:33:02.648] Setting plan('default')
[09:33:02.648] plan(): Setting new future strategy stack:
[09:33:02.649] List of future strategies:
[09:33:02.649] 1. sequential:
[09:33:02.649]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.649]    - tweaked: FALSE
[09:33:02.649]    - call: NULL
[09:33:02.650] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[09:33:02.650] plan(): Setting new future strategy stack:
[09:33:02.650] List of future strategies:
[09:33:02.650] 1. sequential:
[09:33:02.650]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.650]    - tweaked: FALSE
[09:33:02.650]    - call: NULL
[09:33:02.651] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[09:33:02.653] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:02.653] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[09:33:02.653] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[09:33:02.653] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[09:33:02.654] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[09:33:02.654] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[09:33:02.654] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[09:33:02.654] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[09:33:02.654] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[09:33:02.655] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[09:33:02.655] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[09:33:02.655] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[09:33:02.655] Environment variable ‘R_FUTURE_PLAN’ not set
[09:33:02.655] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[09:33:02.656] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[09:33:02.656] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[09:33:02.656] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[09:33:02.656] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[09:33:02.656] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[09:33:02.656] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[09:33:02.656] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[09:33:02.657] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[09:33:02.657] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[09:33:02.657] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[09:33:02.657] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[09:33:02.657] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[09:33:02.657] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[09:33:02.657] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[09:33:02.658] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[09:33:02.658] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[09:33:02.658] Environment variable ‘R_FUTURE_JOURNAL’ not set
[09:33:02.658] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[09:33:02.658] R process uuid: 5bd39e70-8da5-8173-4eba-ca7c0d3dd7a0
[09:33:02.659] Setting plan('default')
[09:33:02.659] plan(): Setting new future strategy stack:
[09:33:02.659] List of future strategies:
[09:33:02.659] 1. sequential:
[09:33:02.659]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.659]    - tweaked: FALSE
[09:33:02.659]    - call: NULL
[09:33:02.659] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[09:33:02.660] plan(): Setting new future strategy stack:
[09:33:02.660] List of future strategies:
[09:33:02.660] 1. sequential:
[09:33:02.660]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:02.660]    - tweaked: FALSE
[09:33:02.660]    - call: NULL
[09:33:02.661] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[09:33:02.662] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:02.662] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[09:33:02.662] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[09:33:02.662] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[09:33:02.662] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[09:33:02.662] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[09:33:02.662] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[09:33:02.663] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[09:33:02.663] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[09:33:02.663] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[09:33:02.663] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[09:33:02.663] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[09:33:02.663] R_FUTURE_PLAN=‘multisession’
[09:33:02.663] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[09:33:02.664] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[09:33:02.664] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[09:33:02.664] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[09:33:02.664] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[09:33:02.664] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[09:33:02.664] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[09:33:02.664] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[09:33:02.664] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[09:33:02.665] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[09:33:02.665] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[09:33:02.665] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[09:33:02.665] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[09:33:02.665] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[09:33:02.665] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[09:33:02.665] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[09:33:02.666] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[09:33:02.666] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[09:33:02.666] Environment variable ‘R_FUTURE_JOURNAL’ not set
[09:33:02.666] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[09:33:02.666] Option 'future.plan' = ‘multisession’
[09:33:02.666] R process uuid: 5bd39e70-8da5-8173-4eba-ca7c0d3dd7a0
[09:33:02.666] Setting plan('default')
[09:33:02.666] plan(): Setting new future strategy stack:
[09:33:02.667] List of future strategies:
[09:33:02.667] 1. multisession:
[09:33:02.667]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:02.667]    - tweaked: FALSE
[09:33:02.667]    - call: plan("default", .init = FALSE)
[09:33:02.670] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[09:33:02.673] plan(): Setting new future strategy stack:
[09:33:02.673] List of future strategies:
[09:33:02.673] 1. multisession:
[09:33:02.673]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:02.673]    - tweaked: FALSE
[09:33:02.673]    - call: plan("default")
[09:33:02.674] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:33:02.674] multisession:
[09:33:02.674] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:02.674] - tweaked: FALSE
[09:33:02.674] - call: plan("default")
[09:33:02.677] getGlobalsAndPackages() ...
[09:33:02.677] Not searching for globals
[09:33:02.677] - globals: [0] <none>
[09:33:02.677] getGlobalsAndPackages() ... DONE
[09:33:02.678] [local output] makeClusterPSOCK() ...
[09:33:02.681] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:33:02.681] [local output] Base port: 11659
[09:33:02.681] [local output] Getting setup options for 2 cluster nodes ...
[09:33:02.681] [local output]  - Node 1 of 2 ...
[09:33:02.682] [local output] localMachine=TRUE => revtunnel=FALSE

[09:33:02.682] [local output] Rscript port: 11659

[09:33:02.683] [local output]  - Node 2 of 2 ...
[09:33:02.683] [local output] localMachine=TRUE => revtunnel=FALSE

[09:33:02.683] [local output] Rscript port: 11659

[09:33:02.684] [local output] Getting setup options for 2 cluster nodes ... done
[09:33:02.684] [local output]  - Parallel setup requested for some PSOCK nodes
[09:33:02.684] [local output] Setting up PSOCK nodes in parallel
[09:33:02.684] List of 36
[09:33:02.684]  $ worker          : chr "localhost"
[09:33:02.684]   ..- attr(*, "localhost")= logi TRUE
[09:33:02.684]  $ master          : chr "localhost"
[09:33:02.684]  $ port            : int 11659
[09:33:02.684]  $ connectTimeout  : num 120
[09:33:02.684]  $ timeout         : num 2592000
[09:33:02.684]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:33:02.684]  $ homogeneous     : logi TRUE
[09:33:02.684]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:33:02.684]  $ rscript_envs    : NULL
[09:33:02.684]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:33:02.684]  $ rscript_startup : NULL
[09:33:02.684]  $ rscript_sh      : chr "sh"
[09:33:02.684]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:33:02.684]  $ methods         : logi TRUE
[09:33:02.684]  $ socketOptions   : chr "no-delay"
[09:33:02.684]  $ useXDR          : logi FALSE
[09:33:02.684]  $ outfile         : chr "/dev/null"
[09:33:02.684]  $ renice          : int NA
[09:33:02.684]  $ rshcmd          : NULL
[09:33:02.684]  $ user            : chr(0) 
[09:33:02.684]  $ revtunnel       : logi FALSE
[09:33:02.684]  $ rshlogfile      : NULL
[09:33:02.684]  $ rshopts         : chr(0) 
[09:33:02.684]  $ rank            : int 1
[09:33:02.684]  $ manual          : logi FALSE
[09:33:02.684]  $ dryrun          : logi FALSE
[09:33:02.684]  $ quiet           : logi FALSE
[09:33:02.684]  $ setup_strategy  : chr "parallel"
[09:33:02.684]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:33:02.684]  $ pidfile         : chr "/tmp/Rtmpe7bD0H/worker.rank=1.parallelly.parent=50060.c38c4921a441.pid"
[09:33:02.684]  $ rshcmd_label    : NULL
[09:33:02.684]  $ rsh_call        : NULL
[09:33:02.684]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:33:02.684]  $ localMachine    : logi TRUE
[09:33:02.684]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:33:02.684]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:33:02.684]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:33:02.684]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:33:02.684]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:33:02.684]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:33:02.684]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:33:02.684]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:33:02.684]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:33:02.684]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:33:02.684]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:33:02.684]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:33:02.684]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:33:02.684]  $ arguments       :List of 28
[09:33:02.684]   ..$ worker          : chr "localhost"
[09:33:02.684]   ..$ master          : NULL
[09:33:02.684]   ..$ port            : int 11659
[09:33:02.684]   ..$ connectTimeout  : num 120
[09:33:02.684]   ..$ timeout         : num 2592000
[09:33:02.684]   ..$ rscript         : NULL
[09:33:02.684]   ..$ homogeneous     : NULL
[09:33:02.684]   ..$ rscript_args    : NULL
[09:33:02.684]   ..$ rscript_envs    : NULL
[09:33:02.684]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:33:02.684]   ..$ rscript_startup : NULL
[09:33:02.684]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:33:02.684]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:33:02.684]   ..$ methods         : logi TRUE
[09:33:02.684]   ..$ socketOptions   : chr "no-delay"
[09:33:02.684]   ..$ useXDR          : logi FALSE
[09:33:02.684]   ..$ outfile         : chr "/dev/null"
[09:33:02.684]   ..$ renice          : int NA
[09:33:02.684]   ..$ rshcmd          : NULL
[09:33:02.684]   ..$ user            : NULL
[09:33:02.684]   ..$ revtunnel       : logi NA
[09:33:02.684]   ..$ rshlogfile      : NULL
[09:33:02.684]   ..$ rshopts         : NULL
[09:33:02.684]   ..$ rank            : int 1
[09:33:02.684]   ..$ manual          : logi FALSE
[09:33:02.684]   ..$ dryrun          : logi FALSE
[09:33:02.684]   ..$ quiet           : logi FALSE
[09:33:02.684]   ..$ setup_strategy  : chr "parallel"
[09:33:02.684]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:33:02.700] [local output] System call to launch all workers:
[09:33:02.700] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpe7bD0H/worker.rank=1.parallelly.parent=50060.c38c4921a441.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11659 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:33:02.700] [local output] Starting PSOCK main server
[09:33:02.702] [local output] Workers launched
[09:33:02.702] [local output] Waiting for workers to connect back
[09:33:02.702]  - [local output] 0 workers out of 2 ready
[09:33:02.945]  - [local output] 0 workers out of 2 ready
[09:33:02.946]  - [local output] 1 workers out of 2 ready
[09:33:02.957]  - [local output] 1 workers out of 2 ready
[09:33:02.958]  - [local output] 2 workers out of 2 ready
[09:33:02.958] [local output] Launching of workers completed
[09:33:02.958] [local output] Collecting session information from workers
[09:33:02.959] [local output]  - Worker #1 of 2
[09:33:02.959] [local output]  - Worker #2 of 2
[09:33:02.959] [local output] makeClusterPSOCK() ... done
[09:33:02.971] Packages needed by the future expression (n = 0): <none>
[09:33:02.971] Packages needed by future strategies (n = 0): <none>
[09:33:02.972] {
[09:33:02.972]     {
[09:33:02.972]         {
[09:33:02.972]             ...future.startTime <- base::Sys.time()
[09:33:02.972]             {
[09:33:02.972]                 {
[09:33:02.972]                   {
[09:33:02.972]                     {
[09:33:02.972]                       base::local({
[09:33:02.972]                         has_future <- base::requireNamespace("future", 
[09:33:02.972]                           quietly = TRUE)
[09:33:02.972]                         if (has_future) {
[09:33:02.972]                           ns <- base::getNamespace("future")
[09:33:02.972]                           version <- ns[[".package"]][["version"]]
[09:33:02.972]                           if (is.null(version)) 
[09:33:02.972]                             version <- utils::packageVersion("future")
[09:33:02.972]                         }
[09:33:02.972]                         else {
[09:33:02.972]                           version <- NULL
[09:33:02.972]                         }
[09:33:02.972]                         if (!has_future || version < "1.8.0") {
[09:33:02.972]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:02.972]                             "", base::R.version$version.string), 
[09:33:02.972]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:02.972]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:02.972]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:02.972]                               "release", "version")], collapse = " "), 
[09:33:02.972]                             hostname = base::Sys.info()[["nodename"]])
[09:33:02.972]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:02.972]                             info)
[09:33:02.972]                           info <- base::paste(info, collapse = "; ")
[09:33:02.972]                           if (!has_future) {
[09:33:02.972]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:02.972]                               info)
[09:33:02.972]                           }
[09:33:02.972]                           else {
[09:33:02.972]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:02.972]                               info, version)
[09:33:02.972]                           }
[09:33:02.972]                           base::stop(msg)
[09:33:02.972]                         }
[09:33:02.972]                       })
[09:33:02.972]                     }
[09:33:02.972]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:02.972]                     base::options(mc.cores = 1L)
[09:33:02.972]                   }
[09:33:02.972]                   ...future.strategy.old <- future::plan("list")
[09:33:02.972]                   options(future.plan = NULL)
[09:33:02.972]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:02.972]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:02.972]                 }
[09:33:02.972]                 ...future.workdir <- getwd()
[09:33:02.972]             }
[09:33:02.972]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:02.972]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:02.972]         }
[09:33:02.972]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:02.972]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:02.972]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:02.972]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:02.972]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:02.972]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:02.972]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:02.972]             base::names(...future.oldOptions))
[09:33:02.972]     }
[09:33:02.972]     if (FALSE) {
[09:33:02.972]     }
[09:33:02.972]     else {
[09:33:02.972]         if (TRUE) {
[09:33:02.972]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:02.972]                 open = "w")
[09:33:02.972]         }
[09:33:02.972]         else {
[09:33:02.972]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:02.972]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:02.972]         }
[09:33:02.972]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:02.972]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:02.972]             base::sink(type = "output", split = FALSE)
[09:33:02.972]             base::close(...future.stdout)
[09:33:02.972]         }, add = TRUE)
[09:33:02.972]     }
[09:33:02.972]     ...future.frame <- base::sys.nframe()
[09:33:02.972]     ...future.conditions <- base::list()
[09:33:02.972]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:02.972]     if (FALSE) {
[09:33:02.972]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:02.972]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:02.972]     }
[09:33:02.972]     ...future.result <- base::tryCatch({
[09:33:02.972]         base::withCallingHandlers({
[09:33:02.972]             ...future.value <- base::withVisible(base::local({
[09:33:02.972]                 ...future.makeSendCondition <- base::local({
[09:33:02.972]                   sendCondition <- NULL
[09:33:02.972]                   function(frame = 1L) {
[09:33:02.972]                     if (is.function(sendCondition)) 
[09:33:02.972]                       return(sendCondition)
[09:33:02.972]                     ns <- getNamespace("parallel")
[09:33:02.972]                     if (exists("sendData", mode = "function", 
[09:33:02.972]                       envir = ns)) {
[09:33:02.972]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:02.972]                         envir = ns)
[09:33:02.972]                       envir <- sys.frame(frame)
[09:33:02.972]                       master <- NULL
[09:33:02.972]                       while (!identical(envir, .GlobalEnv) && 
[09:33:02.972]                         !identical(envir, emptyenv())) {
[09:33:02.972]                         if (exists("master", mode = "list", envir = envir, 
[09:33:02.972]                           inherits = FALSE)) {
[09:33:02.972]                           master <- get("master", mode = "list", 
[09:33:02.972]                             envir = envir, inherits = FALSE)
[09:33:02.972]                           if (inherits(master, c("SOCKnode", 
[09:33:02.972]                             "SOCK0node"))) {
[09:33:02.972]                             sendCondition <<- function(cond) {
[09:33:02.972]                               data <- list(type = "VALUE", value = cond, 
[09:33:02.972]                                 success = TRUE)
[09:33:02.972]                               parallel_sendData(master, data)
[09:33:02.972]                             }
[09:33:02.972]                             return(sendCondition)
[09:33:02.972]                           }
[09:33:02.972]                         }
[09:33:02.972]                         frame <- frame + 1L
[09:33:02.972]                         envir <- sys.frame(frame)
[09:33:02.972]                       }
[09:33:02.972]                     }
[09:33:02.972]                     sendCondition <<- function(cond) NULL
[09:33:02.972]                   }
[09:33:02.972]                 })
[09:33:02.972]                 withCallingHandlers({
[09:33:02.972]                   NA
[09:33:02.972]                 }, immediateCondition = function(cond) {
[09:33:02.972]                   sendCondition <- ...future.makeSendCondition()
[09:33:02.972]                   sendCondition(cond)
[09:33:02.972]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:02.972]                   {
[09:33:02.972]                     inherits <- base::inherits
[09:33:02.972]                     invokeRestart <- base::invokeRestart
[09:33:02.972]                     is.null <- base::is.null
[09:33:02.972]                     muffled <- FALSE
[09:33:02.972]                     if (inherits(cond, "message")) {
[09:33:02.972]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:02.972]                       if (muffled) 
[09:33:02.972]                         invokeRestart("muffleMessage")
[09:33:02.972]                     }
[09:33:02.972]                     else if (inherits(cond, "warning")) {
[09:33:02.972]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:02.972]                       if (muffled) 
[09:33:02.972]                         invokeRestart("muffleWarning")
[09:33:02.972]                     }
[09:33:02.972]                     else if (inherits(cond, "condition")) {
[09:33:02.972]                       if (!is.null(pattern)) {
[09:33:02.972]                         computeRestarts <- base::computeRestarts
[09:33:02.972]                         grepl <- base::grepl
[09:33:02.972]                         restarts <- computeRestarts(cond)
[09:33:02.972]                         for (restart in restarts) {
[09:33:02.972]                           name <- restart$name
[09:33:02.972]                           if (is.null(name)) 
[09:33:02.972]                             next
[09:33:02.972]                           if (!grepl(pattern, name)) 
[09:33:02.972]                             next
[09:33:02.972]                           invokeRestart(restart)
[09:33:02.972]                           muffled <- TRUE
[09:33:02.972]                           break
[09:33:02.972]                         }
[09:33:02.972]                       }
[09:33:02.972]                     }
[09:33:02.972]                     invisible(muffled)
[09:33:02.972]                   }
[09:33:02.972]                   muffleCondition(cond)
[09:33:02.972]                 })
[09:33:02.972]             }))
[09:33:02.972]             future::FutureResult(value = ...future.value$value, 
[09:33:02.972]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:02.972]                   ...future.rng), globalenv = if (FALSE) 
[09:33:02.972]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:02.972]                     ...future.globalenv.names))
[09:33:02.972]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:02.972]         }, condition = base::local({
[09:33:02.972]             c <- base::c
[09:33:02.972]             inherits <- base::inherits
[09:33:02.972]             invokeRestart <- base::invokeRestart
[09:33:02.972]             length <- base::length
[09:33:02.972]             list <- base::list
[09:33:02.972]             seq.int <- base::seq.int
[09:33:02.972]             signalCondition <- base::signalCondition
[09:33:02.972]             sys.calls <- base::sys.calls
[09:33:02.972]             `[[` <- base::`[[`
[09:33:02.972]             `+` <- base::`+`
[09:33:02.972]             `<<-` <- base::`<<-`
[09:33:02.972]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:02.972]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:02.972]                   3L)]
[09:33:02.972]             }
[09:33:02.972]             function(cond) {
[09:33:02.972]                 is_error <- inherits(cond, "error")
[09:33:02.972]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:02.972]                   NULL)
[09:33:02.972]                 if (is_error) {
[09:33:02.972]                   sessionInformation <- function() {
[09:33:02.972]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:02.972]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:02.972]                       search = base::search(), system = base::Sys.info())
[09:33:02.972]                   }
[09:33:02.972]                   ...future.conditions[[length(...future.conditions) + 
[09:33:02.972]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:02.972]                     cond$call), session = sessionInformation(), 
[09:33:02.972]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:02.972]                   signalCondition(cond)
[09:33:02.972]                 }
[09:33:02.972]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:02.972]                 "immediateCondition"))) {
[09:33:02.972]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:02.972]                   ...future.conditions[[length(...future.conditions) + 
[09:33:02.972]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:02.972]                   if (TRUE && !signal) {
[09:33:02.972]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:02.972]                     {
[09:33:02.972]                       inherits <- base::inherits
[09:33:02.972]                       invokeRestart <- base::invokeRestart
[09:33:02.972]                       is.null <- base::is.null
[09:33:02.972]                       muffled <- FALSE
[09:33:02.972]                       if (inherits(cond, "message")) {
[09:33:02.972]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:02.972]                         if (muffled) 
[09:33:02.972]                           invokeRestart("muffleMessage")
[09:33:02.972]                       }
[09:33:02.972]                       else if (inherits(cond, "warning")) {
[09:33:02.972]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:02.972]                         if (muffled) 
[09:33:02.972]                           invokeRestart("muffleWarning")
[09:33:02.972]                       }
[09:33:02.972]                       else if (inherits(cond, "condition")) {
[09:33:02.972]                         if (!is.null(pattern)) {
[09:33:02.972]                           computeRestarts <- base::computeRestarts
[09:33:02.972]                           grepl <- base::grepl
[09:33:02.972]                           restarts <- computeRestarts(cond)
[09:33:02.972]                           for (restart in restarts) {
[09:33:02.972]                             name <- restart$name
[09:33:02.972]                             if (is.null(name)) 
[09:33:02.972]                               next
[09:33:02.972]                             if (!grepl(pattern, name)) 
[09:33:02.972]                               next
[09:33:02.972]                             invokeRestart(restart)
[09:33:02.972]                             muffled <- TRUE
[09:33:02.972]                             break
[09:33:02.972]                           }
[09:33:02.972]                         }
[09:33:02.972]                       }
[09:33:02.972]                       invisible(muffled)
[09:33:02.972]                     }
[09:33:02.972]                     muffleCondition(cond, pattern = "^muffle")
[09:33:02.972]                   }
[09:33:02.972]                 }
[09:33:02.972]                 else {
[09:33:02.972]                   if (TRUE) {
[09:33:02.972]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:02.972]                     {
[09:33:02.972]                       inherits <- base::inherits
[09:33:02.972]                       invokeRestart <- base::invokeRestart
[09:33:02.972]                       is.null <- base::is.null
[09:33:02.972]                       muffled <- FALSE
[09:33:02.972]                       if (inherits(cond, "message")) {
[09:33:02.972]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:02.972]                         if (muffled) 
[09:33:02.972]                           invokeRestart("muffleMessage")
[09:33:02.972]                       }
[09:33:02.972]                       else if (inherits(cond, "warning")) {
[09:33:02.972]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:02.972]                         if (muffled) 
[09:33:02.972]                           invokeRestart("muffleWarning")
[09:33:02.972]                       }
[09:33:02.972]                       else if (inherits(cond, "condition")) {
[09:33:02.972]                         if (!is.null(pattern)) {
[09:33:02.972]                           computeRestarts <- base::computeRestarts
[09:33:02.972]                           grepl <- base::grepl
[09:33:02.972]                           restarts <- computeRestarts(cond)
[09:33:02.972]                           for (restart in restarts) {
[09:33:02.972]                             name <- restart$name
[09:33:02.972]                             if (is.null(name)) 
[09:33:02.972]                               next
[09:33:02.972]                             if (!grepl(pattern, name)) 
[09:33:02.972]                               next
[09:33:02.972]                             invokeRestart(restart)
[09:33:02.972]                             muffled <- TRUE
[09:33:02.972]                             break
[09:33:02.972]                           }
[09:33:02.972]                         }
[09:33:02.972]                       }
[09:33:02.972]                       invisible(muffled)
[09:33:02.972]                     }
[09:33:02.972]                     muffleCondition(cond, pattern = "^muffle")
[09:33:02.972]                   }
[09:33:02.972]                 }
[09:33:02.972]             }
[09:33:02.972]         }))
[09:33:02.972]     }, error = function(ex) {
[09:33:02.972]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:02.972]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:02.972]                 ...future.rng), started = ...future.startTime, 
[09:33:02.972]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:02.972]             version = "1.8"), class = "FutureResult")
[09:33:02.972]     }, finally = {
[09:33:02.972]         if (!identical(...future.workdir, getwd())) 
[09:33:02.972]             setwd(...future.workdir)
[09:33:02.972]         {
[09:33:02.972]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:02.972]                 ...future.oldOptions$nwarnings <- NULL
[09:33:02.972]             }
[09:33:02.972]             base::options(...future.oldOptions)
[09:33:02.972]             if (.Platform$OS.type == "windows") {
[09:33:02.972]                 old_names <- names(...future.oldEnvVars)
[09:33:02.972]                 envs <- base::Sys.getenv()
[09:33:02.972]                 names <- names(envs)
[09:33:02.972]                 common <- intersect(names, old_names)
[09:33:02.972]                 added <- setdiff(names, old_names)
[09:33:02.972]                 removed <- setdiff(old_names, names)
[09:33:02.972]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:02.972]                   envs[common]]
[09:33:02.972]                 NAMES <- toupper(changed)
[09:33:02.972]                 args <- list()
[09:33:02.972]                 for (kk in seq_along(NAMES)) {
[09:33:02.972]                   name <- changed[[kk]]
[09:33:02.972]                   NAME <- NAMES[[kk]]
[09:33:02.972]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:02.972]                     next
[09:33:02.972]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:02.972]                 }
[09:33:02.972]                 NAMES <- toupper(added)
[09:33:02.972]                 for (kk in seq_along(NAMES)) {
[09:33:02.972]                   name <- added[[kk]]
[09:33:02.972]                   NAME <- NAMES[[kk]]
[09:33:02.972]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:02.972]                     next
[09:33:02.972]                   args[[name]] <- ""
[09:33:02.972]                 }
[09:33:02.972]                 NAMES <- toupper(removed)
[09:33:02.972]                 for (kk in seq_along(NAMES)) {
[09:33:02.972]                   name <- removed[[kk]]
[09:33:02.972]                   NAME <- NAMES[[kk]]
[09:33:02.972]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:02.972]                     next
[09:33:02.972]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:02.972]                 }
[09:33:02.972]                 if (length(args) > 0) 
[09:33:02.972]                   base::do.call(base::Sys.setenv, args = args)
[09:33:02.972]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:02.972]             }
[09:33:02.972]             else {
[09:33:02.972]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:02.972]             }
[09:33:02.972]             {
[09:33:02.972]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:02.972]                   0L) {
[09:33:02.972]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:02.972]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:02.972]                   base::options(opts)
[09:33:02.972]                 }
[09:33:02.972]                 {
[09:33:02.972]                   {
[09:33:02.972]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:02.972]                     NULL
[09:33:02.972]                   }
[09:33:02.972]                   options(future.plan = "multisession")
[09:33:02.972]                   if (is.na("multisession")) 
[09:33:02.972]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:02.972]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[09:33:02.972]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:02.972]                     .init = FALSE)
[09:33:02.972]                 }
[09:33:02.972]             }
[09:33:02.972]         }
[09:33:02.972]     })
[09:33:02.972]     if (TRUE) {
[09:33:02.972]         base::sink(type = "output", split = FALSE)
[09:33:02.972]         if (TRUE) {
[09:33:02.972]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:02.972]         }
[09:33:02.972]         else {
[09:33:02.972]             ...future.result["stdout"] <- base::list(NULL)
[09:33:02.972]         }
[09:33:02.972]         base::close(...future.stdout)
[09:33:02.972]         ...future.stdout <- NULL
[09:33:02.972]     }
[09:33:02.972]     ...future.result$conditions <- ...future.conditions
[09:33:02.972]     ...future.result$finished <- base::Sys.time()
[09:33:02.972]     ...future.result
[09:33:02.972] }
[09:33:03.030] MultisessionFuture started
[09:33:03.031] result() for ClusterFuture ...
[09:33:03.031] receiveMessageFromWorker() for ClusterFuture ...
[09:33:03.031] - Validating connection of MultisessionFuture
[09:33:03.069] - received message: FutureResult
[09:33:03.069] - Received FutureResult
[09:33:03.069] - Erased future from FutureRegistry
[09:33:03.069] result() for ClusterFuture ...
[09:33:03.069] - result already collected: FutureResult
[09:33:03.069] result() for ClusterFuture ... done
[09:33:03.069] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:03.069] result() for ClusterFuture ... done
[09:33:03.070] result() for ClusterFuture ...
[09:33:03.070] - result already collected: FutureResult
[09:33:03.070] result() for ClusterFuture ... done
[09:33:03.070] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:33:03.073] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[09:33:03.074] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:03.074] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[09:33:03.074] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[09:33:03.075] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[09:33:03.075] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[09:33:03.075] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[09:33:03.075] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[09:33:03.075] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[09:33:03.075] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[09:33:03.075] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[09:33:03.075] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[09:33:03.075] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[09:33:03.075] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[09:33:03.076] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[09:33:03.076] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[09:33:03.076] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[09:33:03.076] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[09:33:03.076] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[09:33:03.076] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[09:33:03.076] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[09:33:03.076] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[09:33:03.076] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[09:33:03.077] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[09:33:03.077] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[09:33:03.077] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[09:33:03.077] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[09:33:03.077] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[09:33:03.077] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[09:33:03.077] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[09:33:03.077] Environment variable ‘R_FUTURE_JOURNAL’ not set
[09:33:03.077] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[09:33:03.078] Option 'future.plan' = ‘multisession’
[09:33:03.078] R process uuid: 5bd39e70-8da5-8173-4eba-ca7c0d3dd7a0
[09:33:03.078] Setting plan('default')
[09:33:03.078] plan(): Setting new future strategy stack:
[09:33:03.078] List of future strategies:
[09:33:03.078] 1. multisession:
[09:33:03.078]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.078]    - tweaked: FALSE
[09:33:03.078]    - call: plan("default", .init = FALSE)
[09:33:03.083] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[09:33:03.083] plan(): Setting new future strategy stack:
[09:33:03.083] List of future strategies:
[09:33:03.083] 1. multisession:
[09:33:03.083]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.083]    - tweaked: FALSE
[09:33:03.083]    - call: plan("default")
[09:33:03.084] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:33:03.084] multisession:
[09:33:03.084] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.084] - tweaked: FALSE
[09:33:03.084] - call: plan("default")
[09:33:03.088] getGlobalsAndPackages() ...
[09:33:03.089] Not searching for globals
[09:33:03.089] - globals: [0] <none>
[09:33:03.089] getGlobalsAndPackages() ... DONE
[09:33:03.089] [local output] makeClusterPSOCK() ...
[09:33:03.093] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:33:03.093] [local output] Base port: 11094
[09:33:03.093] [local output] Getting setup options for 2 cluster nodes ...
[09:33:03.093] [local output]  - Node 1 of 2 ...
[09:33:03.094] [local output] localMachine=TRUE => revtunnel=FALSE

[09:33:03.095] [local output] Rscript port: 11094

[09:33:03.095] [local output]  - Node 2 of 2 ...
[09:33:03.096] [local output] localMachine=TRUE => revtunnel=FALSE

[09:33:03.096] [local output] Rscript port: 11094

[09:33:03.097] [local output] Getting setup options for 2 cluster nodes ... done
[09:33:03.097] [local output]  - Parallel setup requested for some PSOCK nodes
[09:33:03.097] [local output] Setting up PSOCK nodes in parallel
[09:33:03.097] List of 36
[09:33:03.097]  $ worker          : chr "localhost"
[09:33:03.097]   ..- attr(*, "localhost")= logi TRUE
[09:33:03.097]  $ master          : chr "localhost"
[09:33:03.097]  $ port            : int 11094
[09:33:03.097]  $ connectTimeout  : num 120
[09:33:03.097]  $ timeout         : num 2592000
[09:33:03.097]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:33:03.097]  $ homogeneous     : logi TRUE
[09:33:03.097]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:33:03.097]  $ rscript_envs    : NULL
[09:33:03.097]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:33:03.097]  $ rscript_startup : NULL
[09:33:03.097]  $ rscript_sh      : chr "sh"
[09:33:03.097]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:33:03.097]  $ methods         : logi TRUE
[09:33:03.097]  $ socketOptions   : chr "no-delay"
[09:33:03.097]  $ useXDR          : logi FALSE
[09:33:03.097]  $ outfile         : chr "/dev/null"
[09:33:03.097]  $ renice          : int NA
[09:33:03.097]  $ rshcmd          : NULL
[09:33:03.097]  $ user            : chr(0) 
[09:33:03.097]  $ revtunnel       : logi FALSE
[09:33:03.097]  $ rshlogfile      : NULL
[09:33:03.097]  $ rshopts         : chr(0) 
[09:33:03.097]  $ rank            : int 1
[09:33:03.097]  $ manual          : logi FALSE
[09:33:03.097]  $ dryrun          : logi FALSE
[09:33:03.097]  $ quiet           : logi FALSE
[09:33:03.097]  $ setup_strategy  : chr "parallel"
[09:33:03.097]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:33:03.097]  $ pidfile         : chr "/tmp/Rtmpe7bD0H/worker.rank=1.parallelly.parent=50060.c38c504d127e.pid"
[09:33:03.097]  $ rshcmd_label    : NULL
[09:33:03.097]  $ rsh_call        : NULL
[09:33:03.097]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:33:03.097]  $ localMachine    : logi TRUE
[09:33:03.097]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:33:03.097]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:33:03.097]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:33:03.097]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:33:03.097]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:33:03.097]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:33:03.097]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:33:03.097]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:33:03.097]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:33:03.097]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:33:03.097]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:33:03.097]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:33:03.097]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:33:03.097]  $ arguments       :List of 28
[09:33:03.097]   ..$ worker          : chr "localhost"
[09:33:03.097]   ..$ master          : NULL
[09:33:03.097]   ..$ port            : int 11094
[09:33:03.097]   ..$ connectTimeout  : num 120
[09:33:03.097]   ..$ timeout         : num 2592000
[09:33:03.097]   ..$ rscript         : NULL
[09:33:03.097]   ..$ homogeneous     : NULL
[09:33:03.097]   ..$ rscript_args    : NULL
[09:33:03.097]   ..$ rscript_envs    : NULL
[09:33:03.097]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:33:03.097]   ..$ rscript_startup : NULL
[09:33:03.097]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:33:03.097]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:33:03.097]   ..$ methods         : logi TRUE
[09:33:03.097]   ..$ socketOptions   : chr "no-delay"
[09:33:03.097]   ..$ useXDR          : logi FALSE
[09:33:03.097]   ..$ outfile         : chr "/dev/null"
[09:33:03.097]   ..$ renice          : int NA
[09:33:03.097]   ..$ rshcmd          : NULL
[09:33:03.097]   ..$ user            : NULL
[09:33:03.097]   ..$ revtunnel       : logi NA
[09:33:03.097]   ..$ rshlogfile      : NULL
[09:33:03.097]   ..$ rshopts         : NULL
[09:33:03.097]   ..$ rank            : int 1
[09:33:03.097]   ..$ manual          : logi FALSE
[09:33:03.097]   ..$ dryrun          : logi FALSE
[09:33:03.097]   ..$ quiet           : logi FALSE
[09:33:03.097]   ..$ setup_strategy  : chr "parallel"
[09:33:03.097]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:33:03.116] [local output] System call to launch all workers:
[09:33:03.116] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpe7bD0H/worker.rank=1.parallelly.parent=50060.c38c504d127e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11094 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:33:03.116] [local output] Starting PSOCK main server
[09:33:03.117] [local output] Workers launched
[09:33:03.118] [local output] Waiting for workers to connect back
[09:33:03.118]  - [local output] 0 workers out of 2 ready
[09:33:03.358]  - [local output] 0 workers out of 2 ready
[09:33:03.359]  - [local output] 1 workers out of 2 ready
[09:33:03.363]  - [local output] 1 workers out of 2 ready
[09:33:03.363]  - [local output] 2 workers out of 2 ready
[09:33:03.363] [local output] Launching of workers completed
[09:33:03.363] [local output] Collecting session information from workers
[09:33:03.364] [local output]  - Worker #1 of 2
[09:33:03.364] [local output]  - Worker #2 of 2
[09:33:03.365] [local output] makeClusterPSOCK() ... done
[09:33:03.375] Packages needed by the future expression (n = 0): <none>
[09:33:03.375] Packages needed by future strategies (n = 0): <none>
[09:33:03.376] {
[09:33:03.376]     {
[09:33:03.376]         {
[09:33:03.376]             ...future.startTime <- base::Sys.time()
[09:33:03.376]             {
[09:33:03.376]                 {
[09:33:03.376]                   {
[09:33:03.376]                     {
[09:33:03.376]                       base::local({
[09:33:03.376]                         has_future <- base::requireNamespace("future", 
[09:33:03.376]                           quietly = TRUE)
[09:33:03.376]                         if (has_future) {
[09:33:03.376]                           ns <- base::getNamespace("future")
[09:33:03.376]                           version <- ns[[".package"]][["version"]]
[09:33:03.376]                           if (is.null(version)) 
[09:33:03.376]                             version <- utils::packageVersion("future")
[09:33:03.376]                         }
[09:33:03.376]                         else {
[09:33:03.376]                           version <- NULL
[09:33:03.376]                         }
[09:33:03.376]                         if (!has_future || version < "1.8.0") {
[09:33:03.376]                           info <- base::c(r_version = base::gsub("R version ", 
[09:33:03.376]                             "", base::R.version$version.string), 
[09:33:03.376]                             platform = base::sprintf("%s (%s-bit)", 
[09:33:03.376]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:03.376]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:03.376]                               "release", "version")], collapse = " "), 
[09:33:03.376]                             hostname = base::Sys.info()[["nodename"]])
[09:33:03.376]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:33:03.376]                             info)
[09:33:03.376]                           info <- base::paste(info, collapse = "; ")
[09:33:03.376]                           if (!has_future) {
[09:33:03.376]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:03.376]                               info)
[09:33:03.376]                           }
[09:33:03.376]                           else {
[09:33:03.376]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:03.376]                               info, version)
[09:33:03.376]                           }
[09:33:03.376]                           base::stop(msg)
[09:33:03.376]                         }
[09:33:03.376]                       })
[09:33:03.376]                     }
[09:33:03.376]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:33:03.376]                     base::options(mc.cores = 1L)
[09:33:03.376]                   }
[09:33:03.376]                   ...future.strategy.old <- future::plan("list")
[09:33:03.376]                   options(future.plan = NULL)
[09:33:03.376]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.376]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:03.376]                 }
[09:33:03.376]                 ...future.workdir <- getwd()
[09:33:03.376]             }
[09:33:03.376]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:03.376]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:03.376]         }
[09:33:03.376]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:03.376]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:03.376]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:03.376]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:03.376]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:03.376]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:03.376]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:03.376]             base::names(...future.oldOptions))
[09:33:03.376]     }
[09:33:03.376]     if (FALSE) {
[09:33:03.376]     }
[09:33:03.376]     else {
[09:33:03.376]         if (TRUE) {
[09:33:03.376]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:03.376]                 open = "w")
[09:33:03.376]         }
[09:33:03.376]         else {
[09:33:03.376]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:03.376]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:03.376]         }
[09:33:03.376]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:03.376]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:03.376]             base::sink(type = "output", split = FALSE)
[09:33:03.376]             base::close(...future.stdout)
[09:33:03.376]         }, add = TRUE)
[09:33:03.376]     }
[09:33:03.376]     ...future.frame <- base::sys.nframe()
[09:33:03.376]     ...future.conditions <- base::list()
[09:33:03.376]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:03.376]     if (FALSE) {
[09:33:03.376]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:03.376]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:03.376]     }
[09:33:03.376]     ...future.result <- base::tryCatch({
[09:33:03.376]         base::withCallingHandlers({
[09:33:03.376]             ...future.value <- base::withVisible(base::local({
[09:33:03.376]                 ...future.makeSendCondition <- base::local({
[09:33:03.376]                   sendCondition <- NULL
[09:33:03.376]                   function(frame = 1L) {
[09:33:03.376]                     if (is.function(sendCondition)) 
[09:33:03.376]                       return(sendCondition)
[09:33:03.376]                     ns <- getNamespace("parallel")
[09:33:03.376]                     if (exists("sendData", mode = "function", 
[09:33:03.376]                       envir = ns)) {
[09:33:03.376]                       parallel_sendData <- get("sendData", mode = "function", 
[09:33:03.376]                         envir = ns)
[09:33:03.376]                       envir <- sys.frame(frame)
[09:33:03.376]                       master <- NULL
[09:33:03.376]                       while (!identical(envir, .GlobalEnv) && 
[09:33:03.376]                         !identical(envir, emptyenv())) {
[09:33:03.376]                         if (exists("master", mode = "list", envir = envir, 
[09:33:03.376]                           inherits = FALSE)) {
[09:33:03.376]                           master <- get("master", mode = "list", 
[09:33:03.376]                             envir = envir, inherits = FALSE)
[09:33:03.376]                           if (inherits(master, c("SOCKnode", 
[09:33:03.376]                             "SOCK0node"))) {
[09:33:03.376]                             sendCondition <<- function(cond) {
[09:33:03.376]                               data <- list(type = "VALUE", value = cond, 
[09:33:03.376]                                 success = TRUE)
[09:33:03.376]                               parallel_sendData(master, data)
[09:33:03.376]                             }
[09:33:03.376]                             return(sendCondition)
[09:33:03.376]                           }
[09:33:03.376]                         }
[09:33:03.376]                         frame <- frame + 1L
[09:33:03.376]                         envir <- sys.frame(frame)
[09:33:03.376]                       }
[09:33:03.376]                     }
[09:33:03.376]                     sendCondition <<- function(cond) NULL
[09:33:03.376]                   }
[09:33:03.376]                 })
[09:33:03.376]                 withCallingHandlers({
[09:33:03.376]                   NA
[09:33:03.376]                 }, immediateCondition = function(cond) {
[09:33:03.376]                   sendCondition <- ...future.makeSendCondition()
[09:33:03.376]                   sendCondition(cond)
[09:33:03.376]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.376]                   {
[09:33:03.376]                     inherits <- base::inherits
[09:33:03.376]                     invokeRestart <- base::invokeRestart
[09:33:03.376]                     is.null <- base::is.null
[09:33:03.376]                     muffled <- FALSE
[09:33:03.376]                     if (inherits(cond, "message")) {
[09:33:03.376]                       muffled <- grepl(pattern, "muffleMessage")
[09:33:03.376]                       if (muffled) 
[09:33:03.376]                         invokeRestart("muffleMessage")
[09:33:03.376]                     }
[09:33:03.376]                     else if (inherits(cond, "warning")) {
[09:33:03.376]                       muffled <- grepl(pattern, "muffleWarning")
[09:33:03.376]                       if (muffled) 
[09:33:03.376]                         invokeRestart("muffleWarning")
[09:33:03.376]                     }
[09:33:03.376]                     else if (inherits(cond, "condition")) {
[09:33:03.376]                       if (!is.null(pattern)) {
[09:33:03.376]                         computeRestarts <- base::computeRestarts
[09:33:03.376]                         grepl <- base::grepl
[09:33:03.376]                         restarts <- computeRestarts(cond)
[09:33:03.376]                         for (restart in restarts) {
[09:33:03.376]                           name <- restart$name
[09:33:03.376]                           if (is.null(name)) 
[09:33:03.376]                             next
[09:33:03.376]                           if (!grepl(pattern, name)) 
[09:33:03.376]                             next
[09:33:03.376]                           invokeRestart(restart)
[09:33:03.376]                           muffled <- TRUE
[09:33:03.376]                           break
[09:33:03.376]                         }
[09:33:03.376]                       }
[09:33:03.376]                     }
[09:33:03.376]                     invisible(muffled)
[09:33:03.376]                   }
[09:33:03.376]                   muffleCondition(cond)
[09:33:03.376]                 })
[09:33:03.376]             }))
[09:33:03.376]             future::FutureResult(value = ...future.value$value, 
[09:33:03.376]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.376]                   ...future.rng), globalenv = if (FALSE) 
[09:33:03.376]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:03.376]                     ...future.globalenv.names))
[09:33:03.376]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:03.376]         }, condition = base::local({
[09:33:03.376]             c <- base::c
[09:33:03.376]             inherits <- base::inherits
[09:33:03.376]             invokeRestart <- base::invokeRestart
[09:33:03.376]             length <- base::length
[09:33:03.376]             list <- base::list
[09:33:03.376]             seq.int <- base::seq.int
[09:33:03.376]             signalCondition <- base::signalCondition
[09:33:03.376]             sys.calls <- base::sys.calls
[09:33:03.376]             `[[` <- base::`[[`
[09:33:03.376]             `+` <- base::`+`
[09:33:03.376]             `<<-` <- base::`<<-`
[09:33:03.376]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:03.376]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:03.376]                   3L)]
[09:33:03.376]             }
[09:33:03.376]             function(cond) {
[09:33:03.376]                 is_error <- inherits(cond, "error")
[09:33:03.376]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:03.376]                   NULL)
[09:33:03.376]                 if (is_error) {
[09:33:03.376]                   sessionInformation <- function() {
[09:33:03.376]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:03.376]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:03.376]                       search = base::search(), system = base::Sys.info())
[09:33:03.376]                   }
[09:33:03.376]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.376]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:03.376]                     cond$call), session = sessionInformation(), 
[09:33:03.376]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:03.376]                   signalCondition(cond)
[09:33:03.376]                 }
[09:33:03.376]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:03.376]                 "immediateCondition"))) {
[09:33:03.376]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:03.376]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.376]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:03.376]                   if (TRUE && !signal) {
[09:33:03.376]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.376]                     {
[09:33:03.376]                       inherits <- base::inherits
[09:33:03.376]                       invokeRestart <- base::invokeRestart
[09:33:03.376]                       is.null <- base::is.null
[09:33:03.376]                       muffled <- FALSE
[09:33:03.376]                       if (inherits(cond, "message")) {
[09:33:03.376]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.376]                         if (muffled) 
[09:33:03.376]                           invokeRestart("muffleMessage")
[09:33:03.376]                       }
[09:33:03.376]                       else if (inherits(cond, "warning")) {
[09:33:03.376]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.376]                         if (muffled) 
[09:33:03.376]                           invokeRestart("muffleWarning")
[09:33:03.376]                       }
[09:33:03.376]                       else if (inherits(cond, "condition")) {
[09:33:03.376]                         if (!is.null(pattern)) {
[09:33:03.376]                           computeRestarts <- base::computeRestarts
[09:33:03.376]                           grepl <- base::grepl
[09:33:03.376]                           restarts <- computeRestarts(cond)
[09:33:03.376]                           for (restart in restarts) {
[09:33:03.376]                             name <- restart$name
[09:33:03.376]                             if (is.null(name)) 
[09:33:03.376]                               next
[09:33:03.376]                             if (!grepl(pattern, name)) 
[09:33:03.376]                               next
[09:33:03.376]                             invokeRestart(restart)
[09:33:03.376]                             muffled <- TRUE
[09:33:03.376]                             break
[09:33:03.376]                           }
[09:33:03.376]                         }
[09:33:03.376]                       }
[09:33:03.376]                       invisible(muffled)
[09:33:03.376]                     }
[09:33:03.376]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.376]                   }
[09:33:03.376]                 }
[09:33:03.376]                 else {
[09:33:03.376]                   if (TRUE) {
[09:33:03.376]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.376]                     {
[09:33:03.376]                       inherits <- base::inherits
[09:33:03.376]                       invokeRestart <- base::invokeRestart
[09:33:03.376]                       is.null <- base::is.null
[09:33:03.376]                       muffled <- FALSE
[09:33:03.376]                       if (inherits(cond, "message")) {
[09:33:03.376]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.376]                         if (muffled) 
[09:33:03.376]                           invokeRestart("muffleMessage")
[09:33:03.376]                       }
[09:33:03.376]                       else if (inherits(cond, "warning")) {
[09:33:03.376]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.376]                         if (muffled) 
[09:33:03.376]                           invokeRestart("muffleWarning")
[09:33:03.376]                       }
[09:33:03.376]                       else if (inherits(cond, "condition")) {
[09:33:03.376]                         if (!is.null(pattern)) {
[09:33:03.376]                           computeRestarts <- base::computeRestarts
[09:33:03.376]                           grepl <- base::grepl
[09:33:03.376]                           restarts <- computeRestarts(cond)
[09:33:03.376]                           for (restart in restarts) {
[09:33:03.376]                             name <- restart$name
[09:33:03.376]                             if (is.null(name)) 
[09:33:03.376]                               next
[09:33:03.376]                             if (!grepl(pattern, name)) 
[09:33:03.376]                               next
[09:33:03.376]                             invokeRestart(restart)
[09:33:03.376]                             muffled <- TRUE
[09:33:03.376]                             break
[09:33:03.376]                           }
[09:33:03.376]                         }
[09:33:03.376]                       }
[09:33:03.376]                       invisible(muffled)
[09:33:03.376]                     }
[09:33:03.376]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.376]                   }
[09:33:03.376]                 }
[09:33:03.376]             }
[09:33:03.376]         }))
[09:33:03.376]     }, error = function(ex) {
[09:33:03.376]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:03.376]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.376]                 ...future.rng), started = ...future.startTime, 
[09:33:03.376]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:03.376]             version = "1.8"), class = "FutureResult")
[09:33:03.376]     }, finally = {
[09:33:03.376]         if (!identical(...future.workdir, getwd())) 
[09:33:03.376]             setwd(...future.workdir)
[09:33:03.376]         {
[09:33:03.376]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:03.376]                 ...future.oldOptions$nwarnings <- NULL
[09:33:03.376]             }
[09:33:03.376]             base::options(...future.oldOptions)
[09:33:03.376]             if (.Platform$OS.type == "windows") {
[09:33:03.376]                 old_names <- names(...future.oldEnvVars)
[09:33:03.376]                 envs <- base::Sys.getenv()
[09:33:03.376]                 names <- names(envs)
[09:33:03.376]                 common <- intersect(names, old_names)
[09:33:03.376]                 added <- setdiff(names, old_names)
[09:33:03.376]                 removed <- setdiff(old_names, names)
[09:33:03.376]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:03.376]                   envs[common]]
[09:33:03.376]                 NAMES <- toupper(changed)
[09:33:03.376]                 args <- list()
[09:33:03.376]                 for (kk in seq_along(NAMES)) {
[09:33:03.376]                   name <- changed[[kk]]
[09:33:03.376]                   NAME <- NAMES[[kk]]
[09:33:03.376]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.376]                     next
[09:33:03.376]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.376]                 }
[09:33:03.376]                 NAMES <- toupper(added)
[09:33:03.376]                 for (kk in seq_along(NAMES)) {
[09:33:03.376]                   name <- added[[kk]]
[09:33:03.376]                   NAME <- NAMES[[kk]]
[09:33:03.376]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.376]                     next
[09:33:03.376]                   args[[name]] <- ""
[09:33:03.376]                 }
[09:33:03.376]                 NAMES <- toupper(removed)
[09:33:03.376]                 for (kk in seq_along(NAMES)) {
[09:33:03.376]                   name <- removed[[kk]]
[09:33:03.376]                   NAME <- NAMES[[kk]]
[09:33:03.376]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.376]                     next
[09:33:03.376]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.376]                 }
[09:33:03.376]                 if (length(args) > 0) 
[09:33:03.376]                   base::do.call(base::Sys.setenv, args = args)
[09:33:03.376]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:03.376]             }
[09:33:03.376]             else {
[09:33:03.376]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:03.376]             }
[09:33:03.376]             {
[09:33:03.376]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:03.376]                   0L) {
[09:33:03.376]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:03.376]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:03.376]                   base::options(opts)
[09:33:03.376]                 }
[09:33:03.376]                 {
[09:33:03.376]                   {
[09:33:03.376]                     base::options(mc.cores = ...future.mc.cores.old)
[09:33:03.376]                     NULL
[09:33:03.376]                   }
[09:33:03.376]                   options(future.plan = "multisession")
[09:33:03.376]                   if (is.na("")) 
[09:33:03.376]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.376]                   else Sys.setenv(R_FUTURE_PLAN = "")
[09:33:03.376]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:03.376]                     .init = FALSE)
[09:33:03.376]                 }
[09:33:03.376]             }
[09:33:03.376]         }
[09:33:03.376]     })
[09:33:03.376]     if (TRUE) {
[09:33:03.376]         base::sink(type = "output", split = FALSE)
[09:33:03.376]         if (TRUE) {
[09:33:03.376]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:03.376]         }
[09:33:03.376]         else {
[09:33:03.376]             ...future.result["stdout"] <- base::list(NULL)
[09:33:03.376]         }
[09:33:03.376]         base::close(...future.stdout)
[09:33:03.376]         ...future.stdout <- NULL
[09:33:03.376]     }
[09:33:03.376]     ...future.result$conditions <- ...future.conditions
[09:33:03.376]     ...future.result$finished <- base::Sys.time()
[09:33:03.376]     ...future.result
[09:33:03.376] }
[09:33:03.427] MultisessionFuture started
[09:33:03.427] result() for ClusterFuture ...
[09:33:03.427] receiveMessageFromWorker() for ClusterFuture ...
[09:33:03.427] - Validating connection of MultisessionFuture
[09:33:03.458] - received message: FutureResult
[09:33:03.459] - Received FutureResult
[09:33:03.459] - Erased future from FutureRegistry
[09:33:03.459] result() for ClusterFuture ...
[09:33:03.459] - result already collected: FutureResult
[09:33:03.459] result() for ClusterFuture ... done
[09:33:03.459] receiveMessageFromWorker() for ClusterFuture ... done
[09:33:03.459] result() for ClusterFuture ... done
[09:33:03.459] result() for ClusterFuture ...
[09:33:03.459] - result already collected: FutureResult
[09:33:03.459] result() for ClusterFuture ... done
[09:33:03.460] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:33:03.463] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[09:33:03.464] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:03.464] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[09:33:03.464] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[09:33:03.464] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[09:33:03.464] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[09:33:03.464] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[09:33:03.465] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[09:33:03.465] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[09:33:03.465] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[09:33:03.465] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[09:33:03.465] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[09:33:03.465] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[09:33:03.465] R_FUTURE_PLAN=‘multisession’
[09:33:03.465] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[09:33:03.465] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[09:33:03.466] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[09:33:03.466] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[09:33:03.466] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[09:33:03.466] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[09:33:03.466] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[09:33:03.466] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[09:33:03.466] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[09:33:03.466] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[09:33:03.466] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[09:33:03.466] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[09:33:03.467] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[09:33:03.467] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[09:33:03.467] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[09:33:03.467] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[09:33:03.467] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[09:33:03.467] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[09:33:03.467] Environment variable ‘R_FUTURE_JOURNAL’ not set
[09:33:03.467] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[09:33:03.467] Option 'future.plan' = ‘multisession’
[09:33:03.468] R command-line argument: -p 1
[09:33:03.468]  => 'future.plan' already set.
[09:33:03.468] R process uuid: 5bd39e70-8da5-8173-4eba-ca7c0d3dd7a0
[09:33:03.468] Setting plan('default')
[09:33:03.468] plan(): Setting new future strategy stack:
[09:33:03.468] List of future strategies:
[09:33:03.468] 1. multisession:
[09:33:03.468]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.468]    - tweaked: FALSE
[09:33:03.468]    - call: plan("default", .init = FALSE)
[09:33:03.473] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[09:33:03.473] plan(): Setting new future strategy stack:
[09:33:03.474] List of future strategies:
[09:33:03.474] 1. multisession:
[09:33:03.474]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.474]    - tweaked: FALSE
[09:33:03.474]    - call: plan("default")
[09:33:03.474] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:33:03.474] multisession:
[09:33:03.474] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.474] - tweaked: FALSE
[09:33:03.474] - call: plan("default")
[09:33:03.478] getGlobalsAndPackages() ...
[09:33:03.479] Not searching for globals
[09:33:03.479] - globals: [0] <none>
[09:33:03.479] getGlobalsAndPackages() ... DONE
[09:33:03.479] Packages needed by the future expression (n = 0): <none>
[09:33:03.480] Packages needed by future strategies (n = 0): <none>
[09:33:03.480] {
[09:33:03.480]     {
[09:33:03.480]         {
[09:33:03.480]             ...future.startTime <- base::Sys.time()
[09:33:03.480]             {
[09:33:03.480]                 {
[09:33:03.480]                   {
[09:33:03.480]                     base::local({
[09:33:03.480]                       has_future <- base::requireNamespace("future", 
[09:33:03.480]                         quietly = TRUE)
[09:33:03.480]                       if (has_future) {
[09:33:03.480]                         ns <- base::getNamespace("future")
[09:33:03.480]                         version <- ns[[".package"]][["version"]]
[09:33:03.480]                         if (is.null(version)) 
[09:33:03.480]                           version <- utils::packageVersion("future")
[09:33:03.480]                       }
[09:33:03.480]                       else {
[09:33:03.480]                         version <- NULL
[09:33:03.480]                       }
[09:33:03.480]                       if (!has_future || version < "1.8.0") {
[09:33:03.480]                         info <- base::c(r_version = base::gsub("R version ", 
[09:33:03.480]                           "", base::R.version$version.string), 
[09:33:03.480]                           platform = base::sprintf("%s (%s-bit)", 
[09:33:03.480]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:03.480]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:03.480]                             "release", "version")], collapse = " "), 
[09:33:03.480]                           hostname = base::Sys.info()[["nodename"]])
[09:33:03.480]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:33:03.480]                           info)
[09:33:03.480]                         info <- base::paste(info, collapse = "; ")
[09:33:03.480]                         if (!has_future) {
[09:33:03.480]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:03.480]                             info)
[09:33:03.480]                         }
[09:33:03.480]                         else {
[09:33:03.480]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:03.480]                             info, version)
[09:33:03.480]                         }
[09:33:03.480]                         base::stop(msg)
[09:33:03.480]                       }
[09:33:03.480]                     })
[09:33:03.480]                   }
[09:33:03.480]                   ...future.strategy.old <- future::plan("list")
[09:33:03.480]                   options(future.plan = NULL)
[09:33:03.480]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.480]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:03.480]                 }
[09:33:03.480]                 ...future.workdir <- getwd()
[09:33:03.480]             }
[09:33:03.480]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:03.480]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:03.480]         }
[09:33:03.480]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:03.480]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:03.480]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:03.480]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:03.480]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:03.480]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:03.480]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:03.480]             base::names(...future.oldOptions))
[09:33:03.480]     }
[09:33:03.480]     if (FALSE) {
[09:33:03.480]     }
[09:33:03.480]     else {
[09:33:03.480]         if (TRUE) {
[09:33:03.480]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:03.480]                 open = "w")
[09:33:03.480]         }
[09:33:03.480]         else {
[09:33:03.480]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:03.480]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:03.480]         }
[09:33:03.480]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:03.480]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:03.480]             base::sink(type = "output", split = FALSE)
[09:33:03.480]             base::close(...future.stdout)
[09:33:03.480]         }, add = TRUE)
[09:33:03.480]     }
[09:33:03.480]     ...future.frame <- base::sys.nframe()
[09:33:03.480]     ...future.conditions <- base::list()
[09:33:03.480]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:03.480]     if (FALSE) {
[09:33:03.480]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:03.480]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:03.480]     }
[09:33:03.480]     ...future.result <- base::tryCatch({
[09:33:03.480]         base::withCallingHandlers({
[09:33:03.480]             ...future.value <- base::withVisible(base::local(NA))
[09:33:03.480]             future::FutureResult(value = ...future.value$value, 
[09:33:03.480]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.480]                   ...future.rng), globalenv = if (FALSE) 
[09:33:03.480]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:03.480]                     ...future.globalenv.names))
[09:33:03.480]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:03.480]         }, condition = base::local({
[09:33:03.480]             c <- base::c
[09:33:03.480]             inherits <- base::inherits
[09:33:03.480]             invokeRestart <- base::invokeRestart
[09:33:03.480]             length <- base::length
[09:33:03.480]             list <- base::list
[09:33:03.480]             seq.int <- base::seq.int
[09:33:03.480]             signalCondition <- base::signalCondition
[09:33:03.480]             sys.calls <- base::sys.calls
[09:33:03.480]             `[[` <- base::`[[`
[09:33:03.480]             `+` <- base::`+`
[09:33:03.480]             `<<-` <- base::`<<-`
[09:33:03.480]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:03.480]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:03.480]                   3L)]
[09:33:03.480]             }
[09:33:03.480]             function(cond) {
[09:33:03.480]                 is_error <- inherits(cond, "error")
[09:33:03.480]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:03.480]                   NULL)
[09:33:03.480]                 if (is_error) {
[09:33:03.480]                   sessionInformation <- function() {
[09:33:03.480]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:03.480]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:03.480]                       search = base::search(), system = base::Sys.info())
[09:33:03.480]                   }
[09:33:03.480]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.480]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:03.480]                     cond$call), session = sessionInformation(), 
[09:33:03.480]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:03.480]                   signalCondition(cond)
[09:33:03.480]                 }
[09:33:03.480]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:03.480]                 "immediateCondition"))) {
[09:33:03.480]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:03.480]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.480]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:03.480]                   if (TRUE && !signal) {
[09:33:03.480]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.480]                     {
[09:33:03.480]                       inherits <- base::inherits
[09:33:03.480]                       invokeRestart <- base::invokeRestart
[09:33:03.480]                       is.null <- base::is.null
[09:33:03.480]                       muffled <- FALSE
[09:33:03.480]                       if (inherits(cond, "message")) {
[09:33:03.480]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.480]                         if (muffled) 
[09:33:03.480]                           invokeRestart("muffleMessage")
[09:33:03.480]                       }
[09:33:03.480]                       else if (inherits(cond, "warning")) {
[09:33:03.480]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.480]                         if (muffled) 
[09:33:03.480]                           invokeRestart("muffleWarning")
[09:33:03.480]                       }
[09:33:03.480]                       else if (inherits(cond, "condition")) {
[09:33:03.480]                         if (!is.null(pattern)) {
[09:33:03.480]                           computeRestarts <- base::computeRestarts
[09:33:03.480]                           grepl <- base::grepl
[09:33:03.480]                           restarts <- computeRestarts(cond)
[09:33:03.480]                           for (restart in restarts) {
[09:33:03.480]                             name <- restart$name
[09:33:03.480]                             if (is.null(name)) 
[09:33:03.480]                               next
[09:33:03.480]                             if (!grepl(pattern, name)) 
[09:33:03.480]                               next
[09:33:03.480]                             invokeRestart(restart)
[09:33:03.480]                             muffled <- TRUE
[09:33:03.480]                             break
[09:33:03.480]                           }
[09:33:03.480]                         }
[09:33:03.480]                       }
[09:33:03.480]                       invisible(muffled)
[09:33:03.480]                     }
[09:33:03.480]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.480]                   }
[09:33:03.480]                 }
[09:33:03.480]                 else {
[09:33:03.480]                   if (TRUE) {
[09:33:03.480]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.480]                     {
[09:33:03.480]                       inherits <- base::inherits
[09:33:03.480]                       invokeRestart <- base::invokeRestart
[09:33:03.480]                       is.null <- base::is.null
[09:33:03.480]                       muffled <- FALSE
[09:33:03.480]                       if (inherits(cond, "message")) {
[09:33:03.480]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.480]                         if (muffled) 
[09:33:03.480]                           invokeRestart("muffleMessage")
[09:33:03.480]                       }
[09:33:03.480]                       else if (inherits(cond, "warning")) {
[09:33:03.480]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.480]                         if (muffled) 
[09:33:03.480]                           invokeRestart("muffleWarning")
[09:33:03.480]                       }
[09:33:03.480]                       else if (inherits(cond, "condition")) {
[09:33:03.480]                         if (!is.null(pattern)) {
[09:33:03.480]                           computeRestarts <- base::computeRestarts
[09:33:03.480]                           grepl <- base::grepl
[09:33:03.480]                           restarts <- computeRestarts(cond)
[09:33:03.480]                           for (restart in restarts) {
[09:33:03.480]                             name <- restart$name
[09:33:03.480]                             if (is.null(name)) 
[09:33:03.480]                               next
[09:33:03.480]                             if (!grepl(pattern, name)) 
[09:33:03.480]                               next
[09:33:03.480]                             invokeRestart(restart)
[09:33:03.480]                             muffled <- TRUE
[09:33:03.480]                             break
[09:33:03.480]                           }
[09:33:03.480]                         }
[09:33:03.480]                       }
[09:33:03.480]                       invisible(muffled)
[09:33:03.480]                     }
[09:33:03.480]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.480]                   }
[09:33:03.480]                 }
[09:33:03.480]             }
[09:33:03.480]         }))
[09:33:03.480]     }, error = function(ex) {
[09:33:03.480]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:03.480]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.480]                 ...future.rng), started = ...future.startTime, 
[09:33:03.480]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:03.480]             version = "1.8"), class = "FutureResult")
[09:33:03.480]     }, finally = {
[09:33:03.480]         if (!identical(...future.workdir, getwd())) 
[09:33:03.480]             setwd(...future.workdir)
[09:33:03.480]         {
[09:33:03.480]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:03.480]                 ...future.oldOptions$nwarnings <- NULL
[09:33:03.480]             }
[09:33:03.480]             base::options(...future.oldOptions)
[09:33:03.480]             if (.Platform$OS.type == "windows") {
[09:33:03.480]                 old_names <- names(...future.oldEnvVars)
[09:33:03.480]                 envs <- base::Sys.getenv()
[09:33:03.480]                 names <- names(envs)
[09:33:03.480]                 common <- intersect(names, old_names)
[09:33:03.480]                 added <- setdiff(names, old_names)
[09:33:03.480]                 removed <- setdiff(old_names, names)
[09:33:03.480]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:03.480]                   envs[common]]
[09:33:03.480]                 NAMES <- toupper(changed)
[09:33:03.480]                 args <- list()
[09:33:03.480]                 for (kk in seq_along(NAMES)) {
[09:33:03.480]                   name <- changed[[kk]]
[09:33:03.480]                   NAME <- NAMES[[kk]]
[09:33:03.480]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.480]                     next
[09:33:03.480]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.480]                 }
[09:33:03.480]                 NAMES <- toupper(added)
[09:33:03.480]                 for (kk in seq_along(NAMES)) {
[09:33:03.480]                   name <- added[[kk]]
[09:33:03.480]                   NAME <- NAMES[[kk]]
[09:33:03.480]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.480]                     next
[09:33:03.480]                   args[[name]] <- ""
[09:33:03.480]                 }
[09:33:03.480]                 NAMES <- toupper(removed)
[09:33:03.480]                 for (kk in seq_along(NAMES)) {
[09:33:03.480]                   name <- removed[[kk]]
[09:33:03.480]                   NAME <- NAMES[[kk]]
[09:33:03.480]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.480]                     next
[09:33:03.480]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.480]                 }
[09:33:03.480]                 if (length(args) > 0) 
[09:33:03.480]                   base::do.call(base::Sys.setenv, args = args)
[09:33:03.480]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:03.480]             }
[09:33:03.480]             else {
[09:33:03.480]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:03.480]             }
[09:33:03.480]             {
[09:33:03.480]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:03.480]                   0L) {
[09:33:03.480]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:03.480]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:03.480]                   base::options(opts)
[09:33:03.480]                 }
[09:33:03.480]                 {
[09:33:03.480]                   {
[09:33:03.480]                     NULL
[09:33:03.480]                     RNGkind("Mersenne-Twister")
[09:33:03.480]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:33:03.480]                       inherits = FALSE)
[09:33:03.480]                   }
[09:33:03.480]                   options(future.plan = "multisession")
[09:33:03.480]                   if (is.na("multisession")) 
[09:33:03.480]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.480]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[09:33:03.480]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:03.480]                     .init = FALSE)
[09:33:03.480]                 }
[09:33:03.480]             }
[09:33:03.480]         }
[09:33:03.480]     })
[09:33:03.480]     if (TRUE) {
[09:33:03.480]         base::sink(type = "output", split = FALSE)
[09:33:03.480]         if (TRUE) {
[09:33:03.480]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:03.480]         }
[09:33:03.480]         else {
[09:33:03.480]             ...future.result["stdout"] <- base::list(NULL)
[09:33:03.480]         }
[09:33:03.480]         base::close(...future.stdout)
[09:33:03.480]         ...future.stdout <- NULL
[09:33:03.480]     }
[09:33:03.480]     ...future.result$conditions <- ...future.conditions
[09:33:03.480]     ...future.result$finished <- base::Sys.time()
[09:33:03.480]     ...future.result
[09:33:03.480] }
[09:33:03.482] plan(): Setting new future strategy stack:
[09:33:03.482] List of future strategies:
[09:33:03.482] 1. sequential:
[09:33:03.482]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.482]    - tweaked: FALSE
[09:33:03.482]    - call: NULL
[09:33:03.482] plan(): nbrOfWorkers() = 1
[09:33:03.484] plan(): Setting new future strategy stack:
[09:33:03.484] List of future strategies:
[09:33:03.484] 1. multisession:
[09:33:03.484]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.484]    - tweaked: FALSE
[09:33:03.484]    - call: plan("default")
[09:33:03.488] plan(): nbrOfWorkers() = 1
[09:33:03.488] SequentialFuture started (and completed)
[09:33:03.489] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:33:03.492] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[09:33:03.493] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:03.493] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[09:33:03.494] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[09:33:03.494] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[09:33:03.494] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[09:33:03.494] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[09:33:03.494] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[09:33:03.494] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[09:33:03.494] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[09:33:03.494] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[09:33:03.494] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[09:33:03.494] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[09:33:03.495] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[09:33:03.495] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[09:33:03.495] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[09:33:03.495] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[09:33:03.495] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[09:33:03.495] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[09:33:03.495] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[09:33:03.495] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[09:33:03.495] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[09:33:03.496] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[09:33:03.496] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[09:33:03.496] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[09:33:03.496] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[09:33:03.496] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[09:33:03.496] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[09:33:03.496] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[09:33:03.496] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[09:33:03.496] Environment variable ‘R_FUTURE_JOURNAL’ not set
[09:33:03.497] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[09:33:03.497] Option 'future.plan' = ‘multisession’
[09:33:03.497] R command-line argument: -p 1
[09:33:03.497]  => 'future.plan' already set.
[09:33:03.497] R process uuid: 5bd39e70-8da5-8173-4eba-ca7c0d3dd7a0
[09:33:03.497] Setting plan('default')
[09:33:03.497] plan(): Setting new future strategy stack:
[09:33:03.497] List of future strategies:
[09:33:03.497] 1. multisession:
[09:33:03.497]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.497]    - tweaked: FALSE
[09:33:03.497]    - call: plan("default", .init = FALSE)
[09:33:03.501] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[09:33:03.501] plan(): Setting new future strategy stack:
[09:33:03.501] List of future strategies:
[09:33:03.501] 1. multisession:
[09:33:03.501]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.501]    - tweaked: FALSE
[09:33:03.501]    - call: plan("default")
[09:33:03.502] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:33:03.502] multisession:
[09:33:03.502] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.502] - tweaked: FALSE
[09:33:03.502] - call: plan("default")
[09:33:03.505] getGlobalsAndPackages() ...
[09:33:03.505] Not searching for globals
[09:33:03.505] - globals: [0] <none>
[09:33:03.505] getGlobalsAndPackages() ... DONE
[09:33:03.506] Packages needed by the future expression (n = 0): <none>
[09:33:03.506] Packages needed by future strategies (n = 0): <none>
[09:33:03.506] {
[09:33:03.506]     {
[09:33:03.506]         {
[09:33:03.506]             ...future.startTime <- base::Sys.time()
[09:33:03.506]             {
[09:33:03.506]                 {
[09:33:03.506]                   {
[09:33:03.506]                     base::local({
[09:33:03.506]                       has_future <- base::requireNamespace("future", 
[09:33:03.506]                         quietly = TRUE)
[09:33:03.506]                       if (has_future) {
[09:33:03.506]                         ns <- base::getNamespace("future")
[09:33:03.506]                         version <- ns[[".package"]][["version"]]
[09:33:03.506]                         if (is.null(version)) 
[09:33:03.506]                           version <- utils::packageVersion("future")
[09:33:03.506]                       }
[09:33:03.506]                       else {
[09:33:03.506]                         version <- NULL
[09:33:03.506]                       }
[09:33:03.506]                       if (!has_future || version < "1.8.0") {
[09:33:03.506]                         info <- base::c(r_version = base::gsub("R version ", 
[09:33:03.506]                           "", base::R.version$version.string), 
[09:33:03.506]                           platform = base::sprintf("%s (%s-bit)", 
[09:33:03.506]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:03.506]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:03.506]                             "release", "version")], collapse = " "), 
[09:33:03.506]                           hostname = base::Sys.info()[["nodename"]])
[09:33:03.506]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:33:03.506]                           info)
[09:33:03.506]                         info <- base::paste(info, collapse = "; ")
[09:33:03.506]                         if (!has_future) {
[09:33:03.506]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:03.506]                             info)
[09:33:03.506]                         }
[09:33:03.506]                         else {
[09:33:03.506]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:03.506]                             info, version)
[09:33:03.506]                         }
[09:33:03.506]                         base::stop(msg)
[09:33:03.506]                       }
[09:33:03.506]                     })
[09:33:03.506]                   }
[09:33:03.506]                   ...future.strategy.old <- future::plan("list")
[09:33:03.506]                   options(future.plan = NULL)
[09:33:03.506]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.506]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:03.506]                 }
[09:33:03.506]                 ...future.workdir <- getwd()
[09:33:03.506]             }
[09:33:03.506]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:03.506]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:03.506]         }
[09:33:03.506]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:03.506]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:03.506]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:03.506]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:03.506]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:03.506]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:03.506]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:03.506]             base::names(...future.oldOptions))
[09:33:03.506]     }
[09:33:03.506]     if (FALSE) {
[09:33:03.506]     }
[09:33:03.506]     else {
[09:33:03.506]         if (TRUE) {
[09:33:03.506]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:03.506]                 open = "w")
[09:33:03.506]         }
[09:33:03.506]         else {
[09:33:03.506]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:03.506]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:03.506]         }
[09:33:03.506]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:03.506]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:03.506]             base::sink(type = "output", split = FALSE)
[09:33:03.506]             base::close(...future.stdout)
[09:33:03.506]         }, add = TRUE)
[09:33:03.506]     }
[09:33:03.506]     ...future.frame <- base::sys.nframe()
[09:33:03.506]     ...future.conditions <- base::list()
[09:33:03.506]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:03.506]     if (FALSE) {
[09:33:03.506]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:03.506]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:03.506]     }
[09:33:03.506]     ...future.result <- base::tryCatch({
[09:33:03.506]         base::withCallingHandlers({
[09:33:03.506]             ...future.value <- base::withVisible(base::local(NA))
[09:33:03.506]             future::FutureResult(value = ...future.value$value, 
[09:33:03.506]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.506]                   ...future.rng), globalenv = if (FALSE) 
[09:33:03.506]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:03.506]                     ...future.globalenv.names))
[09:33:03.506]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:03.506]         }, condition = base::local({
[09:33:03.506]             c <- base::c
[09:33:03.506]             inherits <- base::inherits
[09:33:03.506]             invokeRestart <- base::invokeRestart
[09:33:03.506]             length <- base::length
[09:33:03.506]             list <- base::list
[09:33:03.506]             seq.int <- base::seq.int
[09:33:03.506]             signalCondition <- base::signalCondition
[09:33:03.506]             sys.calls <- base::sys.calls
[09:33:03.506]             `[[` <- base::`[[`
[09:33:03.506]             `+` <- base::`+`
[09:33:03.506]             `<<-` <- base::`<<-`
[09:33:03.506]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:03.506]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:03.506]                   3L)]
[09:33:03.506]             }
[09:33:03.506]             function(cond) {
[09:33:03.506]                 is_error <- inherits(cond, "error")
[09:33:03.506]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:03.506]                   NULL)
[09:33:03.506]                 if (is_error) {
[09:33:03.506]                   sessionInformation <- function() {
[09:33:03.506]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:03.506]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:03.506]                       search = base::search(), system = base::Sys.info())
[09:33:03.506]                   }
[09:33:03.506]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.506]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:03.506]                     cond$call), session = sessionInformation(), 
[09:33:03.506]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:03.506]                   signalCondition(cond)
[09:33:03.506]                 }
[09:33:03.506]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:03.506]                 "immediateCondition"))) {
[09:33:03.506]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:03.506]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.506]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:03.506]                   if (TRUE && !signal) {
[09:33:03.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.506]                     {
[09:33:03.506]                       inherits <- base::inherits
[09:33:03.506]                       invokeRestart <- base::invokeRestart
[09:33:03.506]                       is.null <- base::is.null
[09:33:03.506]                       muffled <- FALSE
[09:33:03.506]                       if (inherits(cond, "message")) {
[09:33:03.506]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.506]                         if (muffled) 
[09:33:03.506]                           invokeRestart("muffleMessage")
[09:33:03.506]                       }
[09:33:03.506]                       else if (inherits(cond, "warning")) {
[09:33:03.506]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.506]                         if (muffled) 
[09:33:03.506]                           invokeRestart("muffleWarning")
[09:33:03.506]                       }
[09:33:03.506]                       else if (inherits(cond, "condition")) {
[09:33:03.506]                         if (!is.null(pattern)) {
[09:33:03.506]                           computeRestarts <- base::computeRestarts
[09:33:03.506]                           grepl <- base::grepl
[09:33:03.506]                           restarts <- computeRestarts(cond)
[09:33:03.506]                           for (restart in restarts) {
[09:33:03.506]                             name <- restart$name
[09:33:03.506]                             if (is.null(name)) 
[09:33:03.506]                               next
[09:33:03.506]                             if (!grepl(pattern, name)) 
[09:33:03.506]                               next
[09:33:03.506]                             invokeRestart(restart)
[09:33:03.506]                             muffled <- TRUE
[09:33:03.506]                             break
[09:33:03.506]                           }
[09:33:03.506]                         }
[09:33:03.506]                       }
[09:33:03.506]                       invisible(muffled)
[09:33:03.506]                     }
[09:33:03.506]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.506]                   }
[09:33:03.506]                 }
[09:33:03.506]                 else {
[09:33:03.506]                   if (TRUE) {
[09:33:03.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.506]                     {
[09:33:03.506]                       inherits <- base::inherits
[09:33:03.506]                       invokeRestart <- base::invokeRestart
[09:33:03.506]                       is.null <- base::is.null
[09:33:03.506]                       muffled <- FALSE
[09:33:03.506]                       if (inherits(cond, "message")) {
[09:33:03.506]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.506]                         if (muffled) 
[09:33:03.506]                           invokeRestart("muffleMessage")
[09:33:03.506]                       }
[09:33:03.506]                       else if (inherits(cond, "warning")) {
[09:33:03.506]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.506]                         if (muffled) 
[09:33:03.506]                           invokeRestart("muffleWarning")
[09:33:03.506]                       }
[09:33:03.506]                       else if (inherits(cond, "condition")) {
[09:33:03.506]                         if (!is.null(pattern)) {
[09:33:03.506]                           computeRestarts <- base::computeRestarts
[09:33:03.506]                           grepl <- base::grepl
[09:33:03.506]                           restarts <- computeRestarts(cond)
[09:33:03.506]                           for (restart in restarts) {
[09:33:03.506]                             name <- restart$name
[09:33:03.506]                             if (is.null(name)) 
[09:33:03.506]                               next
[09:33:03.506]                             if (!grepl(pattern, name)) 
[09:33:03.506]                               next
[09:33:03.506]                             invokeRestart(restart)
[09:33:03.506]                             muffled <- TRUE
[09:33:03.506]                             break
[09:33:03.506]                           }
[09:33:03.506]                         }
[09:33:03.506]                       }
[09:33:03.506]                       invisible(muffled)
[09:33:03.506]                     }
[09:33:03.506]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.506]                   }
[09:33:03.506]                 }
[09:33:03.506]             }
[09:33:03.506]         }))
[09:33:03.506]     }, error = function(ex) {
[09:33:03.506]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:03.506]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.506]                 ...future.rng), started = ...future.startTime, 
[09:33:03.506]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:03.506]             version = "1.8"), class = "FutureResult")
[09:33:03.506]     }, finally = {
[09:33:03.506]         if (!identical(...future.workdir, getwd())) 
[09:33:03.506]             setwd(...future.workdir)
[09:33:03.506]         {
[09:33:03.506]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:03.506]                 ...future.oldOptions$nwarnings <- NULL
[09:33:03.506]             }
[09:33:03.506]             base::options(...future.oldOptions)
[09:33:03.506]             if (.Platform$OS.type == "windows") {
[09:33:03.506]                 old_names <- names(...future.oldEnvVars)
[09:33:03.506]                 envs <- base::Sys.getenv()
[09:33:03.506]                 names <- names(envs)
[09:33:03.506]                 common <- intersect(names, old_names)
[09:33:03.506]                 added <- setdiff(names, old_names)
[09:33:03.506]                 removed <- setdiff(old_names, names)
[09:33:03.506]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:03.506]                   envs[common]]
[09:33:03.506]                 NAMES <- toupper(changed)
[09:33:03.506]                 args <- list()
[09:33:03.506]                 for (kk in seq_along(NAMES)) {
[09:33:03.506]                   name <- changed[[kk]]
[09:33:03.506]                   NAME <- NAMES[[kk]]
[09:33:03.506]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.506]                     next
[09:33:03.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.506]                 }
[09:33:03.506]                 NAMES <- toupper(added)
[09:33:03.506]                 for (kk in seq_along(NAMES)) {
[09:33:03.506]                   name <- added[[kk]]
[09:33:03.506]                   NAME <- NAMES[[kk]]
[09:33:03.506]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.506]                     next
[09:33:03.506]                   args[[name]] <- ""
[09:33:03.506]                 }
[09:33:03.506]                 NAMES <- toupper(removed)
[09:33:03.506]                 for (kk in seq_along(NAMES)) {
[09:33:03.506]                   name <- removed[[kk]]
[09:33:03.506]                   NAME <- NAMES[[kk]]
[09:33:03.506]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.506]                     next
[09:33:03.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.506]                 }
[09:33:03.506]                 if (length(args) > 0) 
[09:33:03.506]                   base::do.call(base::Sys.setenv, args = args)
[09:33:03.506]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:03.506]             }
[09:33:03.506]             else {
[09:33:03.506]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:03.506]             }
[09:33:03.506]             {
[09:33:03.506]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:03.506]                   0L) {
[09:33:03.506]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:03.506]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:03.506]                   base::options(opts)
[09:33:03.506]                 }
[09:33:03.506]                 {
[09:33:03.506]                   {
[09:33:03.506]                     NULL
[09:33:03.506]                     RNGkind("Mersenne-Twister")
[09:33:03.506]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:33:03.506]                       inherits = FALSE)
[09:33:03.506]                   }
[09:33:03.506]                   options(future.plan = "multisession")
[09:33:03.506]                   if (is.na("")) 
[09:33:03.506]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.506]                   else Sys.setenv(R_FUTURE_PLAN = "")
[09:33:03.506]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:03.506]                     .init = FALSE)
[09:33:03.506]                 }
[09:33:03.506]             }
[09:33:03.506]         }
[09:33:03.506]     })
[09:33:03.506]     if (TRUE) {
[09:33:03.506]         base::sink(type = "output", split = FALSE)
[09:33:03.506]         if (TRUE) {
[09:33:03.506]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:03.506]         }
[09:33:03.506]         else {
[09:33:03.506]             ...future.result["stdout"] <- base::list(NULL)
[09:33:03.506]         }
[09:33:03.506]         base::close(...future.stdout)
[09:33:03.506]         ...future.stdout <- NULL
[09:33:03.506]     }
[09:33:03.506]     ...future.result$conditions <- ...future.conditions
[09:33:03.506]     ...future.result$finished <- base::Sys.time()
[09:33:03.506]     ...future.result
[09:33:03.506] }
[09:33:03.508] plan(): Setting new future strategy stack:
[09:33:03.508] List of future strategies:
[09:33:03.508] 1. sequential:
[09:33:03.508]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.508]    - tweaked: FALSE
[09:33:03.508]    - call: NULL
[09:33:03.509] plan(): nbrOfWorkers() = 1
[09:33:03.509] plan(): Setting new future strategy stack:
[09:33:03.509] List of future strategies:
[09:33:03.509] 1. multisession:
[09:33:03.509]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.509]    - tweaked: FALSE
[09:33:03.509]    - call: plan("default")
[09:33:03.513] plan(): nbrOfWorkers() = 1
[09:33:03.513] SequentialFuture started (and completed)
[09:33:03.513] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:33:03.516] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[09:33:03.517] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[09:33:03.517] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[09:33:03.517] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[09:33:03.517] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[09:33:03.517] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[09:33:03.517] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[09:33:03.517] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[09:33:03.518] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[09:33:03.518] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[09:33:03.518] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[09:33:03.518] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[09:33:03.518] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[09:33:03.518] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[09:33:03.518] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[09:33:03.518] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[09:33:03.518] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[09:33:03.518] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[09:33:03.519] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[09:33:03.519] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[09:33:03.519] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[09:33:03.519] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[09:33:03.519] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[09:33:03.519] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[09:33:03.519] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[09:33:03.519] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[09:33:03.519] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[09:33:03.520] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[09:33:03.520] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[09:33:03.520] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[09:33:03.520] Environment variable ‘R_FUTURE_JOURNAL’ not set
[09:33:03.520] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[09:33:03.520] Option 'future.plan' of type ‘function’
[09:33:03.520] R command-line argument: -p 1
[09:33:03.521]  => 'future.plan' already set.
[09:33:03.521] R process uuid: 5bd39e70-8da5-8173-4eba-ca7c0d3dd7a0
[09:33:03.521] Setting plan('default')
[09:33:03.521] plan(): Setting new future strategy stack:
[09:33:03.521] List of future strategies:
[09:33:03.521] 1. multisession:
[09:33:03.521]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.521]    - tweaked: FALSE
[09:33:03.521]    - call: NULL
[09:33:03.524] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[09:33:03.524] plan(): Setting new future strategy stack:
[09:33:03.525] List of future strategies:
[09:33:03.525] 1. multisession:
[09:33:03.525]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.525]    - tweaked: FALSE
[09:33:03.525]    - call: NULL
[09:33:03.525] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:33:03.525] multisession:
[09:33:03.525] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.525] - tweaked: FALSE
[09:33:03.525] - call: NULL
[09:33:03.528] getGlobalsAndPackages() ...
[09:33:03.528] Not searching for globals
[09:33:03.529] - globals: [0] <none>
[09:33:03.529] getGlobalsAndPackages() ... DONE
[09:33:03.529] Packages needed by the future expression (n = 0): <none>
[09:33:03.529] Packages needed by future strategies (n = 0): <none>
[09:33:03.529] {
[09:33:03.529]     {
[09:33:03.529]         {
[09:33:03.529]             ...future.startTime <- base::Sys.time()
[09:33:03.529]             {
[09:33:03.529]                 {
[09:33:03.529]                   {
[09:33:03.529]                     base::local({
[09:33:03.529]                       has_future <- base::requireNamespace("future", 
[09:33:03.529]                         quietly = TRUE)
[09:33:03.529]                       if (has_future) {
[09:33:03.529]                         ns <- base::getNamespace("future")
[09:33:03.529]                         version <- ns[[".package"]][["version"]]
[09:33:03.529]                         if (is.null(version)) 
[09:33:03.529]                           version <- utils::packageVersion("future")
[09:33:03.529]                       }
[09:33:03.529]                       else {
[09:33:03.529]                         version <- NULL
[09:33:03.529]                       }
[09:33:03.529]                       if (!has_future || version < "1.8.0") {
[09:33:03.529]                         info <- base::c(r_version = base::gsub("R version ", 
[09:33:03.529]                           "", base::R.version$version.string), 
[09:33:03.529]                           platform = base::sprintf("%s (%s-bit)", 
[09:33:03.529]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:33:03.529]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:33:03.529]                             "release", "version")], collapse = " "), 
[09:33:03.529]                           hostname = base::Sys.info()[["nodename"]])
[09:33:03.529]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:33:03.529]                           info)
[09:33:03.529]                         info <- base::paste(info, collapse = "; ")
[09:33:03.529]                         if (!has_future) {
[09:33:03.529]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:33:03.529]                             info)
[09:33:03.529]                         }
[09:33:03.529]                         else {
[09:33:03.529]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:33:03.529]                             info, version)
[09:33:03.529]                         }
[09:33:03.529]                         base::stop(msg)
[09:33:03.529]                       }
[09:33:03.529]                     })
[09:33:03.529]                   }
[09:33:03.529]                   ...future.strategy.old <- future::plan("list")
[09:33:03.529]                   options(future.plan = NULL)
[09:33:03.529]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.529]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:33:03.529]                 }
[09:33:03.529]                 ...future.workdir <- getwd()
[09:33:03.529]             }
[09:33:03.529]             ...future.oldOptions <- base::as.list(base::.Options)
[09:33:03.529]             ...future.oldEnvVars <- base::Sys.getenv()
[09:33:03.529]         }
[09:33:03.529]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:33:03.529]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:33:03.529]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:33:03.529]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:33:03.529]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:33:03.529]             future.stdout.windows.reencode = NULL, width = 80L)
[09:33:03.529]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:33:03.529]             base::names(...future.oldOptions))
[09:33:03.529]     }
[09:33:03.529]     if (FALSE) {
[09:33:03.529]     }
[09:33:03.529]     else {
[09:33:03.529]         if (TRUE) {
[09:33:03.529]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:33:03.529]                 open = "w")
[09:33:03.529]         }
[09:33:03.529]         else {
[09:33:03.529]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:33:03.529]                 windows = "NUL", "/dev/null"), open = "w")
[09:33:03.529]         }
[09:33:03.529]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:33:03.529]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:33:03.529]             base::sink(type = "output", split = FALSE)
[09:33:03.529]             base::close(...future.stdout)
[09:33:03.529]         }, add = TRUE)
[09:33:03.529]     }
[09:33:03.529]     ...future.frame <- base::sys.nframe()
[09:33:03.529]     ...future.conditions <- base::list()
[09:33:03.529]     ...future.rng <- base::globalenv()$.Random.seed
[09:33:03.529]     if (FALSE) {
[09:33:03.529]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:33:03.529]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:33:03.529]     }
[09:33:03.529]     ...future.result <- base::tryCatch({
[09:33:03.529]         base::withCallingHandlers({
[09:33:03.529]             ...future.value <- base::withVisible(base::local(NA))
[09:33:03.529]             future::FutureResult(value = ...future.value$value, 
[09:33:03.529]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.529]                   ...future.rng), globalenv = if (FALSE) 
[09:33:03.529]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:33:03.529]                     ...future.globalenv.names))
[09:33:03.529]                 else NULL, started = ...future.startTime, version = "1.8")
[09:33:03.529]         }, condition = base::local({
[09:33:03.529]             c <- base::c
[09:33:03.529]             inherits <- base::inherits
[09:33:03.529]             invokeRestart <- base::invokeRestart
[09:33:03.529]             length <- base::length
[09:33:03.529]             list <- base::list
[09:33:03.529]             seq.int <- base::seq.int
[09:33:03.529]             signalCondition <- base::signalCondition
[09:33:03.529]             sys.calls <- base::sys.calls
[09:33:03.529]             `[[` <- base::`[[`
[09:33:03.529]             `+` <- base::`+`
[09:33:03.529]             `<<-` <- base::`<<-`
[09:33:03.529]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:33:03.529]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:33:03.529]                   3L)]
[09:33:03.529]             }
[09:33:03.529]             function(cond) {
[09:33:03.529]                 is_error <- inherits(cond, "error")
[09:33:03.529]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:33:03.529]                   NULL)
[09:33:03.529]                 if (is_error) {
[09:33:03.529]                   sessionInformation <- function() {
[09:33:03.529]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:33:03.529]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:33:03.529]                       search = base::search(), system = base::Sys.info())
[09:33:03.529]                   }
[09:33:03.529]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.529]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:33:03.529]                     cond$call), session = sessionInformation(), 
[09:33:03.529]                     timestamp = base::Sys.time(), signaled = 0L)
[09:33:03.529]                   signalCondition(cond)
[09:33:03.529]                 }
[09:33:03.529]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:33:03.529]                 "immediateCondition"))) {
[09:33:03.529]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:33:03.529]                   ...future.conditions[[length(...future.conditions) + 
[09:33:03.529]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:33:03.529]                   if (TRUE && !signal) {
[09:33:03.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.529]                     {
[09:33:03.529]                       inherits <- base::inherits
[09:33:03.529]                       invokeRestart <- base::invokeRestart
[09:33:03.529]                       is.null <- base::is.null
[09:33:03.529]                       muffled <- FALSE
[09:33:03.529]                       if (inherits(cond, "message")) {
[09:33:03.529]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.529]                         if (muffled) 
[09:33:03.529]                           invokeRestart("muffleMessage")
[09:33:03.529]                       }
[09:33:03.529]                       else if (inherits(cond, "warning")) {
[09:33:03.529]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.529]                         if (muffled) 
[09:33:03.529]                           invokeRestart("muffleWarning")
[09:33:03.529]                       }
[09:33:03.529]                       else if (inherits(cond, "condition")) {
[09:33:03.529]                         if (!is.null(pattern)) {
[09:33:03.529]                           computeRestarts <- base::computeRestarts
[09:33:03.529]                           grepl <- base::grepl
[09:33:03.529]                           restarts <- computeRestarts(cond)
[09:33:03.529]                           for (restart in restarts) {
[09:33:03.529]                             name <- restart$name
[09:33:03.529]                             if (is.null(name)) 
[09:33:03.529]                               next
[09:33:03.529]                             if (!grepl(pattern, name)) 
[09:33:03.529]                               next
[09:33:03.529]                             invokeRestart(restart)
[09:33:03.529]                             muffled <- TRUE
[09:33:03.529]                             break
[09:33:03.529]                           }
[09:33:03.529]                         }
[09:33:03.529]                       }
[09:33:03.529]                       invisible(muffled)
[09:33:03.529]                     }
[09:33:03.529]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.529]                   }
[09:33:03.529]                 }
[09:33:03.529]                 else {
[09:33:03.529]                   if (TRUE) {
[09:33:03.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:33:03.529]                     {
[09:33:03.529]                       inherits <- base::inherits
[09:33:03.529]                       invokeRestart <- base::invokeRestart
[09:33:03.529]                       is.null <- base::is.null
[09:33:03.529]                       muffled <- FALSE
[09:33:03.529]                       if (inherits(cond, "message")) {
[09:33:03.529]                         muffled <- grepl(pattern, "muffleMessage")
[09:33:03.529]                         if (muffled) 
[09:33:03.529]                           invokeRestart("muffleMessage")
[09:33:03.529]                       }
[09:33:03.529]                       else if (inherits(cond, "warning")) {
[09:33:03.529]                         muffled <- grepl(pattern, "muffleWarning")
[09:33:03.529]                         if (muffled) 
[09:33:03.529]                           invokeRestart("muffleWarning")
[09:33:03.529]                       }
[09:33:03.529]                       else if (inherits(cond, "condition")) {
[09:33:03.529]                         if (!is.null(pattern)) {
[09:33:03.529]                           computeRestarts <- base::computeRestarts
[09:33:03.529]                           grepl <- base::grepl
[09:33:03.529]                           restarts <- computeRestarts(cond)
[09:33:03.529]                           for (restart in restarts) {
[09:33:03.529]                             name <- restart$name
[09:33:03.529]                             if (is.null(name)) 
[09:33:03.529]                               next
[09:33:03.529]                             if (!grepl(pattern, name)) 
[09:33:03.529]                               next
[09:33:03.529]                             invokeRestart(restart)
[09:33:03.529]                             muffled <- TRUE
[09:33:03.529]                             break
[09:33:03.529]                           }
[09:33:03.529]                         }
[09:33:03.529]                       }
[09:33:03.529]                       invisible(muffled)
[09:33:03.529]                     }
[09:33:03.529]                     muffleCondition(cond, pattern = "^muffle")
[09:33:03.529]                   }
[09:33:03.529]                 }
[09:33:03.529]             }
[09:33:03.529]         }))
[09:33:03.529]     }, error = function(ex) {
[09:33:03.529]         base::structure(base::list(value = NULL, visible = NULL, 
[09:33:03.529]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:33:03.529]                 ...future.rng), started = ...future.startTime, 
[09:33:03.529]             finished = Sys.time(), session_uuid = NA_character_, 
[09:33:03.529]             version = "1.8"), class = "FutureResult")
[09:33:03.529]     }, finally = {
[09:33:03.529]         if (!identical(...future.workdir, getwd())) 
[09:33:03.529]             setwd(...future.workdir)
[09:33:03.529]         {
[09:33:03.529]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:33:03.529]                 ...future.oldOptions$nwarnings <- NULL
[09:33:03.529]             }
[09:33:03.529]             base::options(...future.oldOptions)
[09:33:03.529]             if (.Platform$OS.type == "windows") {
[09:33:03.529]                 old_names <- names(...future.oldEnvVars)
[09:33:03.529]                 envs <- base::Sys.getenv()
[09:33:03.529]                 names <- names(envs)
[09:33:03.529]                 common <- intersect(names, old_names)
[09:33:03.529]                 added <- setdiff(names, old_names)
[09:33:03.529]                 removed <- setdiff(old_names, names)
[09:33:03.529]                 changed <- common[...future.oldEnvVars[common] != 
[09:33:03.529]                   envs[common]]
[09:33:03.529]                 NAMES <- toupper(changed)
[09:33:03.529]                 args <- list()
[09:33:03.529]                 for (kk in seq_along(NAMES)) {
[09:33:03.529]                   name <- changed[[kk]]
[09:33:03.529]                   NAME <- NAMES[[kk]]
[09:33:03.529]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.529]                     next
[09:33:03.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.529]                 }
[09:33:03.529]                 NAMES <- toupper(added)
[09:33:03.529]                 for (kk in seq_along(NAMES)) {
[09:33:03.529]                   name <- added[[kk]]
[09:33:03.529]                   NAME <- NAMES[[kk]]
[09:33:03.529]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.529]                     next
[09:33:03.529]                   args[[name]] <- ""
[09:33:03.529]                 }
[09:33:03.529]                 NAMES <- toupper(removed)
[09:33:03.529]                 for (kk in seq_along(NAMES)) {
[09:33:03.529]                   name <- removed[[kk]]
[09:33:03.529]                   NAME <- NAMES[[kk]]
[09:33:03.529]                   if (name != NAME && is.element(NAME, old_names)) 
[09:33:03.529]                     next
[09:33:03.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:33:03.529]                 }
[09:33:03.529]                 if (length(args) > 0) 
[09:33:03.529]                   base::do.call(base::Sys.setenv, args = args)
[09:33:03.529]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:33:03.529]             }
[09:33:03.529]             else {
[09:33:03.529]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:33:03.529]             }
[09:33:03.529]             {
[09:33:03.529]                 if (base::length(...future.futureOptionsAdded) > 
[09:33:03.529]                   0L) {
[09:33:03.529]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:33:03.529]                   base::names(opts) <- ...future.futureOptionsAdded
[09:33:03.529]                   base::options(opts)
[09:33:03.529]                 }
[09:33:03.529]                 {
[09:33:03.529]                   {
[09:33:03.529]                     NULL
[09:33:03.529]                     RNGkind("Mersenne-Twister")
[09:33:03.529]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:33:03.529]                       inherits = FALSE)
[09:33:03.529]                   }
[09:33:03.529]                   options(future.plan = function (..., workers = availableCores(), 
[09:33:03.529]                     lazy = FALSE, rscript_libs = .libPaths(), 
[09:33:03.529]                     envir = parent.frame()) 
[09:33:03.529]                   {
[09:33:03.529]                     if (is.function(workers)) 
[09:33:03.529]                       workers <- workers()
[09:33:03.529]                     workers <- structure(as.integer(workers), 
[09:33:03.529]                       class = class(workers))
[09:33:03.529]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[09:33:03.529]                       workers >= 1)
[09:33:03.529]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[09:33:03.529]                       return(sequential(..., lazy = TRUE, envir = envir))
[09:33:03.529]                     }
[09:33:03.529]                     future <- MultisessionFuture(..., workers = workers, 
[09:33:03.529]                       lazy = lazy, rscript_libs = rscript_libs, 
[09:33:03.529]                       envir = envir)
[09:33:03.529]                     if (!future$lazy) 
[09:33:03.529]                       future <- run(future)
[09:33:03.529]                     invisible(future)
[09:33:03.529]                   })
[09:33:03.529]                   if (is.na("")) 
[09:33:03.529]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:33:03.529]                   else Sys.setenv(R_FUTURE_PLAN = "")
[09:33:03.529]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:33:03.529]                     .init = FALSE)
[09:33:03.529]                 }
[09:33:03.529]             }
[09:33:03.529]         }
[09:33:03.529]     })
[09:33:03.529]     if (TRUE) {
[09:33:03.529]         base::sink(type = "output", split = FALSE)
[09:33:03.529]         if (TRUE) {
[09:33:03.529]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:33:03.529]         }
[09:33:03.529]         else {
[09:33:03.529]             ...future.result["stdout"] <- base::list(NULL)
[09:33:03.529]         }
[09:33:03.529]         base::close(...future.stdout)
[09:33:03.529]         ...future.stdout <- NULL
[09:33:03.529]     }
[09:33:03.529]     ...future.result$conditions <- ...future.conditions
[09:33:03.529]     ...future.result$finished <- base::Sys.time()
[09:33:03.529]     ...future.result
[09:33:03.529] }
[09:33:03.531] plan(): Setting new future strategy stack:
[09:33:03.532] List of future strategies:
[09:33:03.532] 1. sequential:
[09:33:03.532]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.532]    - tweaked: FALSE
[09:33:03.532]    - call: NULL
[09:33:03.532] plan(): nbrOfWorkers() = 1
[09:33:03.533] plan(): Setting new future strategy stack:
[09:33:03.533] List of future strategies:
[09:33:03.533] 1. multisession:
[09:33:03.533]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:33:03.533]    - tweaked: FALSE
[09:33:03.533]    - call: NULL
[09:33:03.536] plan(): nbrOfWorkers() = 1
[09:33:03.536] SequentialFuture started (and completed)
[09:33:03.537] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:33:03.540] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[09:33:03.542] Option 'future.startup.script': TRUE
[09:33:03.542] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[09:33:03.542] Future startup scripts found: <none>
[09:33:03.542] Option 'future.startup.script': TRUE
[09:33:03.542] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[09:33:03.543] Future startup scripts found: <none>
[09:33:03.543] Option 'future.startup.script': TRUE
[09:33:03.543] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[09:33:03.543] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[09:33:03.543] Option 'future.startup.script': TRUE
[09:33:03.545] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[09:33:03.545] Future startup scripts found: ‘.future.R’
[09:33:03.546] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[09:33:03.547] plan(): Setting new future strategy stack:
[09:33:03.547] List of future strategies:
[09:33:03.547] 1. FutureStrategy:
[09:33:03.547]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:33:03.547]    - tweaked: FALSE
[09:33:03.547]    - call: future::plan(oplan)
[09:33:03.547] plan(): nbrOfWorkers() = 1
> 
