
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:31:46.052] plan(): Setting new future strategy stack:
[09:31:46.052] List of future strategies:
[09:31:46.052] 1. sequential:
[09:31:46.052]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.052]    - tweaked: FALSE
[09:31:46.052]    - call: future::plan("sequential")
[09:31:46.063] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** multisession() ...")
*** multisession() ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   ## No global variables
+   f <- multisession({
+     42L
+   })
+   print(f)
+   stopifnot(inherits(f, "ClusterFuture") || (inherits(f, "SequentialFuture") && f$lazy))
+ 
+   print(resolved(f))
+   y <- value(f)
+   print(y)
+   stopifnot(y == 42L)
+ 
+ 
+   ## A global variable
+   a <- 0
+   f <- multisession({
+     b <- 3
+     c <- 2
+     a * b * c
+   }, globals = TRUE)
+   print(f)
+ 
+ 
+   ## A multisession future is evaluated in a separate
+   ## R session process.  Changing the value of a global
+   ## variable should not affect the result of the
+   ## future.
+   a <- 7  ## Make sure globals are frozen
+   v <- value(f)
+   print(v)
+   stopifnot(v == 0)
+ 
+ 
+   message("*** multisession() with globals and blocking")
+   x <- listenv()
+   for (ii in 2:1) {
+     message(sprintf(" - Creating multisession future #%d ...", ii))
+     x[[ii]] <- multisession({ ii }, globals = TRUE)
+   }
+   message(sprintf(" - Resolving %d multisession futures", length(x)))
+   v <- sapply(x, FUN = value)
+   stopifnot(all(v == 1:2))
+ 
+ 
+   message("*** multisession() - workers inherit .libPaths()")
+ 
+   libs <- value(future(.libPaths()))
+   str(list(
+     main = .libPaths(),
+     workers = libs
+   ))
+   stopifnot(identical(libs, .libPaths()))
+ 
+   message("*** multisession() and errors")
+   f <- multisession({
+     stop("Whoops!")
+     1
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "simpleError"))
+ 
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Error is repeated
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Custom error class
+   f <- multisession({
+     stop(structure(list(message = "boom"),
+                    class = c("MyError", "error", "condition")))
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+ 
+   ## Make sure error is signaled
+   res <- tryCatch(value(f), error = identity)
+   stopifnot(inherits(res, "error"))
+ 
+   ## Issue #200: Custom condition class attributes are lost
+   ## https://github.com/HenrikBengtsson/Wishlist-for-R/issues/57
+   ## stopifnot(inherits(res, "MyError"))    
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
[09:31:46.115] getGlobalsAndPackages() ...
[09:31:46.115] Searching for globals...
[09:31:46.118] - globals found: [1] ‘{’
[09:31:46.118] Searching for globals ... DONE
[09:31:46.118] Resolving globals: FALSE
[09:31:46.119] 
[09:31:46.119] 
[09:31:46.119] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d4a020fd-dec5-7248-6e9b-560e9778c064
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:46.121] Packages needed by the future expression (n = 0): <none>
[09:31:46.121] Packages needed by future strategies (n = 0): <none>
[09:31:46.121] {
[09:31:46.121]     {
[09:31:46.121]         {
[09:31:46.121]             ...future.startTime <- base::Sys.time()
[09:31:46.121]             {
[09:31:46.121]                 {
[09:31:46.121]                   {
[09:31:46.121]                     base::local({
[09:31:46.121]                       has_future <- base::requireNamespace("future", 
[09:31:46.121]                         quietly = TRUE)
[09:31:46.121]                       if (has_future) {
[09:31:46.121]                         ns <- base::getNamespace("future")
[09:31:46.121]                         version <- ns[[".package"]][["version"]]
[09:31:46.121]                         if (is.null(version)) 
[09:31:46.121]                           version <- utils::packageVersion("future")
[09:31:46.121]                       }
[09:31:46.121]                       else {
[09:31:46.121]                         version <- NULL
[09:31:46.121]                       }
[09:31:46.121]                       if (!has_future || version < "1.8.0") {
[09:31:46.121]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.121]                           "", base::R.version$version.string), 
[09:31:46.121]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:46.121]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.121]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.121]                             "release", "version")], collapse = " "), 
[09:31:46.121]                           hostname = base::Sys.info()[["nodename"]])
[09:31:46.121]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.121]                           info)
[09:31:46.121]                         info <- base::paste(info, collapse = "; ")
[09:31:46.121]                         if (!has_future) {
[09:31:46.121]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.121]                             info)
[09:31:46.121]                         }
[09:31:46.121]                         else {
[09:31:46.121]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.121]                             info, version)
[09:31:46.121]                         }
[09:31:46.121]                         base::stop(msg)
[09:31:46.121]                       }
[09:31:46.121]                     })
[09:31:46.121]                   }
[09:31:46.121]                   ...future.strategy.old <- future::plan("list")
[09:31:46.121]                   options(future.plan = NULL)
[09:31:46.121]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.121]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.121]                 }
[09:31:46.121]                 ...future.workdir <- getwd()
[09:31:46.121]             }
[09:31:46.121]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.121]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.121]         }
[09:31:46.121]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.121]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.121]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.121]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.121]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.121]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.121]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.121]             base::names(...future.oldOptions))
[09:31:46.121]     }
[09:31:46.121]     if (FALSE) {
[09:31:46.121]     }
[09:31:46.121]     else {
[09:31:46.121]         if (TRUE) {
[09:31:46.121]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.121]                 open = "w")
[09:31:46.121]         }
[09:31:46.121]         else {
[09:31:46.121]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.121]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.121]         }
[09:31:46.121]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.121]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.121]             base::sink(type = "output", split = FALSE)
[09:31:46.121]             base::close(...future.stdout)
[09:31:46.121]         }, add = TRUE)
[09:31:46.121]     }
[09:31:46.121]     ...future.frame <- base::sys.nframe()
[09:31:46.121]     ...future.conditions <- base::list()
[09:31:46.121]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.121]     if (FALSE) {
[09:31:46.121]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.121]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.121]     }
[09:31:46.121]     ...future.result <- base::tryCatch({
[09:31:46.121]         base::withCallingHandlers({
[09:31:46.121]             ...future.value <- base::withVisible(base::local({
[09:31:46.121]                 42L
[09:31:46.121]             }))
[09:31:46.121]             future::FutureResult(value = ...future.value$value, 
[09:31:46.121]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.121]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.121]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.121]                     ...future.globalenv.names))
[09:31:46.121]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.121]         }, condition = base::local({
[09:31:46.121]             c <- base::c
[09:31:46.121]             inherits <- base::inherits
[09:31:46.121]             invokeRestart <- base::invokeRestart
[09:31:46.121]             length <- base::length
[09:31:46.121]             list <- base::list
[09:31:46.121]             seq.int <- base::seq.int
[09:31:46.121]             signalCondition <- base::signalCondition
[09:31:46.121]             sys.calls <- base::sys.calls
[09:31:46.121]             `[[` <- base::`[[`
[09:31:46.121]             `+` <- base::`+`
[09:31:46.121]             `<<-` <- base::`<<-`
[09:31:46.121]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.121]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.121]                   3L)]
[09:31:46.121]             }
[09:31:46.121]             function(cond) {
[09:31:46.121]                 is_error <- inherits(cond, "error")
[09:31:46.121]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.121]                   NULL)
[09:31:46.121]                 if (is_error) {
[09:31:46.121]                   sessionInformation <- function() {
[09:31:46.121]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.121]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.121]                       search = base::search(), system = base::Sys.info())
[09:31:46.121]                   }
[09:31:46.121]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.121]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.121]                     cond$call), session = sessionInformation(), 
[09:31:46.121]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.121]                   signalCondition(cond)
[09:31:46.121]                 }
[09:31:46.121]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.121]                 "immediateCondition"))) {
[09:31:46.121]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.121]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.121]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.121]                   if (TRUE && !signal) {
[09:31:46.121]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.121]                     {
[09:31:46.121]                       inherits <- base::inherits
[09:31:46.121]                       invokeRestart <- base::invokeRestart
[09:31:46.121]                       is.null <- base::is.null
[09:31:46.121]                       muffled <- FALSE
[09:31:46.121]                       if (inherits(cond, "message")) {
[09:31:46.121]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.121]                         if (muffled) 
[09:31:46.121]                           invokeRestart("muffleMessage")
[09:31:46.121]                       }
[09:31:46.121]                       else if (inherits(cond, "warning")) {
[09:31:46.121]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.121]                         if (muffled) 
[09:31:46.121]                           invokeRestart("muffleWarning")
[09:31:46.121]                       }
[09:31:46.121]                       else if (inherits(cond, "condition")) {
[09:31:46.121]                         if (!is.null(pattern)) {
[09:31:46.121]                           computeRestarts <- base::computeRestarts
[09:31:46.121]                           grepl <- base::grepl
[09:31:46.121]                           restarts <- computeRestarts(cond)
[09:31:46.121]                           for (restart in restarts) {
[09:31:46.121]                             name <- restart$name
[09:31:46.121]                             if (is.null(name)) 
[09:31:46.121]                               next
[09:31:46.121]                             if (!grepl(pattern, name)) 
[09:31:46.121]                               next
[09:31:46.121]                             invokeRestart(restart)
[09:31:46.121]                             muffled <- TRUE
[09:31:46.121]                             break
[09:31:46.121]                           }
[09:31:46.121]                         }
[09:31:46.121]                       }
[09:31:46.121]                       invisible(muffled)
[09:31:46.121]                     }
[09:31:46.121]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.121]                   }
[09:31:46.121]                 }
[09:31:46.121]                 else {
[09:31:46.121]                   if (TRUE) {
[09:31:46.121]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.121]                     {
[09:31:46.121]                       inherits <- base::inherits
[09:31:46.121]                       invokeRestart <- base::invokeRestart
[09:31:46.121]                       is.null <- base::is.null
[09:31:46.121]                       muffled <- FALSE
[09:31:46.121]                       if (inherits(cond, "message")) {
[09:31:46.121]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.121]                         if (muffled) 
[09:31:46.121]                           invokeRestart("muffleMessage")
[09:31:46.121]                       }
[09:31:46.121]                       else if (inherits(cond, "warning")) {
[09:31:46.121]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.121]                         if (muffled) 
[09:31:46.121]                           invokeRestart("muffleWarning")
[09:31:46.121]                       }
[09:31:46.121]                       else if (inherits(cond, "condition")) {
[09:31:46.121]                         if (!is.null(pattern)) {
[09:31:46.121]                           computeRestarts <- base::computeRestarts
[09:31:46.121]                           grepl <- base::grepl
[09:31:46.121]                           restarts <- computeRestarts(cond)
[09:31:46.121]                           for (restart in restarts) {
[09:31:46.121]                             name <- restart$name
[09:31:46.121]                             if (is.null(name)) 
[09:31:46.121]                               next
[09:31:46.121]                             if (!grepl(pattern, name)) 
[09:31:46.121]                               next
[09:31:46.121]                             invokeRestart(restart)
[09:31:46.121]                             muffled <- TRUE
[09:31:46.121]                             break
[09:31:46.121]                           }
[09:31:46.121]                         }
[09:31:46.121]                       }
[09:31:46.121]                       invisible(muffled)
[09:31:46.121]                     }
[09:31:46.121]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.121]                   }
[09:31:46.121]                 }
[09:31:46.121]             }
[09:31:46.121]         }))
[09:31:46.121]     }, error = function(ex) {
[09:31:46.121]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.121]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.121]                 ...future.rng), started = ...future.startTime, 
[09:31:46.121]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.121]             version = "1.8"), class = "FutureResult")
[09:31:46.121]     }, finally = {
[09:31:46.121]         if (!identical(...future.workdir, getwd())) 
[09:31:46.121]             setwd(...future.workdir)
[09:31:46.121]         {
[09:31:46.121]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.121]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.121]             }
[09:31:46.121]             base::options(...future.oldOptions)
[09:31:46.121]             if (.Platform$OS.type == "windows") {
[09:31:46.121]                 old_names <- names(...future.oldEnvVars)
[09:31:46.121]                 envs <- base::Sys.getenv()
[09:31:46.121]                 names <- names(envs)
[09:31:46.121]                 common <- intersect(names, old_names)
[09:31:46.121]                 added <- setdiff(names, old_names)
[09:31:46.121]                 removed <- setdiff(old_names, names)
[09:31:46.121]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.121]                   envs[common]]
[09:31:46.121]                 NAMES <- toupper(changed)
[09:31:46.121]                 args <- list()
[09:31:46.121]                 for (kk in seq_along(NAMES)) {
[09:31:46.121]                   name <- changed[[kk]]
[09:31:46.121]                   NAME <- NAMES[[kk]]
[09:31:46.121]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.121]                     next
[09:31:46.121]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.121]                 }
[09:31:46.121]                 NAMES <- toupper(added)
[09:31:46.121]                 for (kk in seq_along(NAMES)) {
[09:31:46.121]                   name <- added[[kk]]
[09:31:46.121]                   NAME <- NAMES[[kk]]
[09:31:46.121]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.121]                     next
[09:31:46.121]                   args[[name]] <- ""
[09:31:46.121]                 }
[09:31:46.121]                 NAMES <- toupper(removed)
[09:31:46.121]                 for (kk in seq_along(NAMES)) {
[09:31:46.121]                   name <- removed[[kk]]
[09:31:46.121]                   NAME <- NAMES[[kk]]
[09:31:46.121]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.121]                     next
[09:31:46.121]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.121]                 }
[09:31:46.121]                 if (length(args) > 0) 
[09:31:46.121]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.121]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.121]             }
[09:31:46.121]             else {
[09:31:46.121]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.121]             }
[09:31:46.121]             {
[09:31:46.121]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.121]                   0L) {
[09:31:46.121]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.121]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.121]                   base::options(opts)
[09:31:46.121]                 }
[09:31:46.121]                 {
[09:31:46.121]                   {
[09:31:46.121]                     NULL
[09:31:46.121]                     RNGkind("Mersenne-Twister")
[09:31:46.121]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:46.121]                       inherits = FALSE)
[09:31:46.121]                   }
[09:31:46.121]                   options(future.plan = NULL)
[09:31:46.121]                   if (is.na(NA_character_)) 
[09:31:46.121]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.121]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.121]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.121]                     .init = FALSE)
[09:31:46.121]                 }
[09:31:46.121]             }
[09:31:46.121]         }
[09:31:46.121]     })
[09:31:46.121]     if (TRUE) {
[09:31:46.121]         base::sink(type = "output", split = FALSE)
[09:31:46.121]         if (TRUE) {
[09:31:46.121]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.121]         }
[09:31:46.121]         else {
[09:31:46.121]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.121]         }
[09:31:46.121]         base::close(...future.stdout)
[09:31:46.121]         ...future.stdout <- NULL
[09:31:46.121]     }
[09:31:46.121]     ...future.result$conditions <- ...future.conditions
[09:31:46.121]     ...future.result$finished <- base::Sys.time()
[09:31:46.121]     ...future.result
[09:31:46.121] }
[09:31:46.123] plan(): Setting new future strategy stack:
[09:31:46.123] List of future strategies:
[09:31:46.123] 1. sequential:
[09:31:46.123]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.123]    - tweaked: FALSE
[09:31:46.123]    - call: NULL
[09:31:46.124] plan(): nbrOfWorkers() = 1
[09:31:46.125] plan(): Setting new future strategy stack:
[09:31:46.125] List of future strategies:
[09:31:46.125] 1. sequential:
[09:31:46.125]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.125]    - tweaked: FALSE
[09:31:46.125]    - call: future::plan("sequential")
[09:31:46.125] plan(): nbrOfWorkers() = 1
[09:31:46.126] SequentialFuture started (and completed)
[09:31:46.126] resolved() for ‘SequentialFuture’ ...
[09:31:46.126] - state: ‘finished’
[09:31:46.126] - run: TRUE
[09:31:46.126] - result: ‘FutureResult’
[09:31:46.126] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
[09:31:46.130] getGlobalsAndPackages() ...
[09:31:46.130] Searching for globals...
[09:31:46.134] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[09:31:46.135] Searching for globals ... DONE
[09:31:46.135] Resolving globals: FALSE
[09:31:46.135] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:46.136] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:46.136] - globals: [1] ‘a’
[09:31:46.136] 
[09:31:46.136] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d4a020fd-dec5-7248-6e9b-560e9778c064
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:46.137] Packages needed by the future expression (n = 0): <none>
[09:31:46.137] Packages needed by future strategies (n = 0): <none>
[09:31:46.138] {
[09:31:46.138]     {
[09:31:46.138]         {
[09:31:46.138]             ...future.startTime <- base::Sys.time()
[09:31:46.138]             {
[09:31:46.138]                 {
[09:31:46.138]                   {
[09:31:46.138]                     base::local({
[09:31:46.138]                       has_future <- base::requireNamespace("future", 
[09:31:46.138]                         quietly = TRUE)
[09:31:46.138]                       if (has_future) {
[09:31:46.138]                         ns <- base::getNamespace("future")
[09:31:46.138]                         version <- ns[[".package"]][["version"]]
[09:31:46.138]                         if (is.null(version)) 
[09:31:46.138]                           version <- utils::packageVersion("future")
[09:31:46.138]                       }
[09:31:46.138]                       else {
[09:31:46.138]                         version <- NULL
[09:31:46.138]                       }
[09:31:46.138]                       if (!has_future || version < "1.8.0") {
[09:31:46.138]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.138]                           "", base::R.version$version.string), 
[09:31:46.138]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:46.138]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.138]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.138]                             "release", "version")], collapse = " "), 
[09:31:46.138]                           hostname = base::Sys.info()[["nodename"]])
[09:31:46.138]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.138]                           info)
[09:31:46.138]                         info <- base::paste(info, collapse = "; ")
[09:31:46.138]                         if (!has_future) {
[09:31:46.138]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.138]                             info)
[09:31:46.138]                         }
[09:31:46.138]                         else {
[09:31:46.138]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.138]                             info, version)
[09:31:46.138]                         }
[09:31:46.138]                         base::stop(msg)
[09:31:46.138]                       }
[09:31:46.138]                     })
[09:31:46.138]                   }
[09:31:46.138]                   ...future.strategy.old <- future::plan("list")
[09:31:46.138]                   options(future.plan = NULL)
[09:31:46.138]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.138]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.138]                 }
[09:31:46.138]                 ...future.workdir <- getwd()
[09:31:46.138]             }
[09:31:46.138]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.138]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.138]         }
[09:31:46.138]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.138]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.138]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.138]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.138]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.138]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.138]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.138]             base::names(...future.oldOptions))
[09:31:46.138]     }
[09:31:46.138]     if (FALSE) {
[09:31:46.138]     }
[09:31:46.138]     else {
[09:31:46.138]         if (TRUE) {
[09:31:46.138]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.138]                 open = "w")
[09:31:46.138]         }
[09:31:46.138]         else {
[09:31:46.138]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.138]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.138]         }
[09:31:46.138]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.138]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.138]             base::sink(type = "output", split = FALSE)
[09:31:46.138]             base::close(...future.stdout)
[09:31:46.138]         }, add = TRUE)
[09:31:46.138]     }
[09:31:46.138]     ...future.frame <- base::sys.nframe()
[09:31:46.138]     ...future.conditions <- base::list()
[09:31:46.138]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.138]     if (FALSE) {
[09:31:46.138]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.138]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.138]     }
[09:31:46.138]     ...future.result <- base::tryCatch({
[09:31:46.138]         base::withCallingHandlers({
[09:31:46.138]             ...future.value <- base::withVisible(base::local({
[09:31:46.138]                 b <- 3
[09:31:46.138]                 c <- 2
[09:31:46.138]                 a * b * c
[09:31:46.138]             }))
[09:31:46.138]             future::FutureResult(value = ...future.value$value, 
[09:31:46.138]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.138]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.138]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.138]                     ...future.globalenv.names))
[09:31:46.138]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.138]         }, condition = base::local({
[09:31:46.138]             c <- base::c
[09:31:46.138]             inherits <- base::inherits
[09:31:46.138]             invokeRestart <- base::invokeRestart
[09:31:46.138]             length <- base::length
[09:31:46.138]             list <- base::list
[09:31:46.138]             seq.int <- base::seq.int
[09:31:46.138]             signalCondition <- base::signalCondition
[09:31:46.138]             sys.calls <- base::sys.calls
[09:31:46.138]             `[[` <- base::`[[`
[09:31:46.138]             `+` <- base::`+`
[09:31:46.138]             `<<-` <- base::`<<-`
[09:31:46.138]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.138]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.138]                   3L)]
[09:31:46.138]             }
[09:31:46.138]             function(cond) {
[09:31:46.138]                 is_error <- inherits(cond, "error")
[09:31:46.138]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.138]                   NULL)
[09:31:46.138]                 if (is_error) {
[09:31:46.138]                   sessionInformation <- function() {
[09:31:46.138]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.138]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.138]                       search = base::search(), system = base::Sys.info())
[09:31:46.138]                   }
[09:31:46.138]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.138]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.138]                     cond$call), session = sessionInformation(), 
[09:31:46.138]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.138]                   signalCondition(cond)
[09:31:46.138]                 }
[09:31:46.138]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.138]                 "immediateCondition"))) {
[09:31:46.138]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.138]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.138]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.138]                   if (TRUE && !signal) {
[09:31:46.138]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.138]                     {
[09:31:46.138]                       inherits <- base::inherits
[09:31:46.138]                       invokeRestart <- base::invokeRestart
[09:31:46.138]                       is.null <- base::is.null
[09:31:46.138]                       muffled <- FALSE
[09:31:46.138]                       if (inherits(cond, "message")) {
[09:31:46.138]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.138]                         if (muffled) 
[09:31:46.138]                           invokeRestart("muffleMessage")
[09:31:46.138]                       }
[09:31:46.138]                       else if (inherits(cond, "warning")) {
[09:31:46.138]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.138]                         if (muffled) 
[09:31:46.138]                           invokeRestart("muffleWarning")
[09:31:46.138]                       }
[09:31:46.138]                       else if (inherits(cond, "condition")) {
[09:31:46.138]                         if (!is.null(pattern)) {
[09:31:46.138]                           computeRestarts <- base::computeRestarts
[09:31:46.138]                           grepl <- base::grepl
[09:31:46.138]                           restarts <- computeRestarts(cond)
[09:31:46.138]                           for (restart in restarts) {
[09:31:46.138]                             name <- restart$name
[09:31:46.138]                             if (is.null(name)) 
[09:31:46.138]                               next
[09:31:46.138]                             if (!grepl(pattern, name)) 
[09:31:46.138]                               next
[09:31:46.138]                             invokeRestart(restart)
[09:31:46.138]                             muffled <- TRUE
[09:31:46.138]                             break
[09:31:46.138]                           }
[09:31:46.138]                         }
[09:31:46.138]                       }
[09:31:46.138]                       invisible(muffled)
[09:31:46.138]                     }
[09:31:46.138]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.138]                   }
[09:31:46.138]                 }
[09:31:46.138]                 else {
[09:31:46.138]                   if (TRUE) {
[09:31:46.138]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.138]                     {
[09:31:46.138]                       inherits <- base::inherits
[09:31:46.138]                       invokeRestart <- base::invokeRestart
[09:31:46.138]                       is.null <- base::is.null
[09:31:46.138]                       muffled <- FALSE
[09:31:46.138]                       if (inherits(cond, "message")) {
[09:31:46.138]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.138]                         if (muffled) 
[09:31:46.138]                           invokeRestart("muffleMessage")
[09:31:46.138]                       }
[09:31:46.138]                       else if (inherits(cond, "warning")) {
[09:31:46.138]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.138]                         if (muffled) 
[09:31:46.138]                           invokeRestart("muffleWarning")
[09:31:46.138]                       }
[09:31:46.138]                       else if (inherits(cond, "condition")) {
[09:31:46.138]                         if (!is.null(pattern)) {
[09:31:46.138]                           computeRestarts <- base::computeRestarts
[09:31:46.138]                           grepl <- base::grepl
[09:31:46.138]                           restarts <- computeRestarts(cond)
[09:31:46.138]                           for (restart in restarts) {
[09:31:46.138]                             name <- restart$name
[09:31:46.138]                             if (is.null(name)) 
[09:31:46.138]                               next
[09:31:46.138]                             if (!grepl(pattern, name)) 
[09:31:46.138]                               next
[09:31:46.138]                             invokeRestart(restart)
[09:31:46.138]                             muffled <- TRUE
[09:31:46.138]                             break
[09:31:46.138]                           }
[09:31:46.138]                         }
[09:31:46.138]                       }
[09:31:46.138]                       invisible(muffled)
[09:31:46.138]                     }
[09:31:46.138]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.138]                   }
[09:31:46.138]                 }
[09:31:46.138]             }
[09:31:46.138]         }))
[09:31:46.138]     }, error = function(ex) {
[09:31:46.138]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.138]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.138]                 ...future.rng), started = ...future.startTime, 
[09:31:46.138]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.138]             version = "1.8"), class = "FutureResult")
[09:31:46.138]     }, finally = {
[09:31:46.138]         if (!identical(...future.workdir, getwd())) 
[09:31:46.138]             setwd(...future.workdir)
[09:31:46.138]         {
[09:31:46.138]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.138]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.138]             }
[09:31:46.138]             base::options(...future.oldOptions)
[09:31:46.138]             if (.Platform$OS.type == "windows") {
[09:31:46.138]                 old_names <- names(...future.oldEnvVars)
[09:31:46.138]                 envs <- base::Sys.getenv()
[09:31:46.138]                 names <- names(envs)
[09:31:46.138]                 common <- intersect(names, old_names)
[09:31:46.138]                 added <- setdiff(names, old_names)
[09:31:46.138]                 removed <- setdiff(old_names, names)
[09:31:46.138]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.138]                   envs[common]]
[09:31:46.138]                 NAMES <- toupper(changed)
[09:31:46.138]                 args <- list()
[09:31:46.138]                 for (kk in seq_along(NAMES)) {
[09:31:46.138]                   name <- changed[[kk]]
[09:31:46.138]                   NAME <- NAMES[[kk]]
[09:31:46.138]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.138]                     next
[09:31:46.138]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.138]                 }
[09:31:46.138]                 NAMES <- toupper(added)
[09:31:46.138]                 for (kk in seq_along(NAMES)) {
[09:31:46.138]                   name <- added[[kk]]
[09:31:46.138]                   NAME <- NAMES[[kk]]
[09:31:46.138]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.138]                     next
[09:31:46.138]                   args[[name]] <- ""
[09:31:46.138]                 }
[09:31:46.138]                 NAMES <- toupper(removed)
[09:31:46.138]                 for (kk in seq_along(NAMES)) {
[09:31:46.138]                   name <- removed[[kk]]
[09:31:46.138]                   NAME <- NAMES[[kk]]
[09:31:46.138]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.138]                     next
[09:31:46.138]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.138]                 }
[09:31:46.138]                 if (length(args) > 0) 
[09:31:46.138]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.138]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.138]             }
[09:31:46.138]             else {
[09:31:46.138]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.138]             }
[09:31:46.138]             {
[09:31:46.138]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.138]                   0L) {
[09:31:46.138]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.138]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.138]                   base::options(opts)
[09:31:46.138]                 }
[09:31:46.138]                 {
[09:31:46.138]                   {
[09:31:46.138]                     NULL
[09:31:46.138]                     RNGkind("Mersenne-Twister")
[09:31:46.138]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:46.138]                       inherits = FALSE)
[09:31:46.138]                   }
[09:31:46.138]                   options(future.plan = NULL)
[09:31:46.138]                   if (is.na(NA_character_)) 
[09:31:46.138]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.138]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.138]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.138]                     .init = FALSE)
[09:31:46.138]                 }
[09:31:46.138]             }
[09:31:46.138]         }
[09:31:46.138]     })
[09:31:46.138]     if (TRUE) {
[09:31:46.138]         base::sink(type = "output", split = FALSE)
[09:31:46.138]         if (TRUE) {
[09:31:46.138]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.138]         }
[09:31:46.138]         else {
[09:31:46.138]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.138]         }
[09:31:46.138]         base::close(...future.stdout)
[09:31:46.138]         ...future.stdout <- NULL
[09:31:46.138]     }
[09:31:46.138]     ...future.result$conditions <- ...future.conditions
[09:31:46.138]     ...future.result$finished <- base::Sys.time()
[09:31:46.138]     ...future.result
[09:31:46.138] }
[09:31:46.139] assign_globals() ...
[09:31:46.139] List of 1
[09:31:46.139]  $ a: num 0
[09:31:46.139]  - attr(*, "where")=List of 1
[09:31:46.139]   ..$ a:<environment: R_EmptyEnv> 
[09:31:46.139]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:46.139]  - attr(*, "resolved")= logi FALSE
[09:31:46.139]  - attr(*, "total_size")= num 56
[09:31:46.145] - copied ‘a’ to environment
[09:31:46.145] assign_globals() ... done
[09:31:46.146] plan(): Setting new future strategy stack:
[09:31:46.146] List of future strategies:
[09:31:46.146] 1. sequential:
[09:31:46.146]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.146]    - tweaked: FALSE
[09:31:46.146]    - call: NULL
[09:31:46.146] plan(): nbrOfWorkers() = 1
[09:31:46.147] plan(): Setting new future strategy stack:
[09:31:46.147] List of future strategies:
[09:31:46.147] 1. sequential:
[09:31:46.147]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.147]    - tweaked: FALSE
[09:31:46.147]    - call: future::plan("sequential")
[09:31:46.147] plan(): nbrOfWorkers() = 1
[09:31:46.147] SequentialFuture started (and completed)
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[09:31:46.151] getGlobalsAndPackages() ...
[09:31:46.151] Searching for globals...
[09:31:46.151] - globals found: [2] ‘{’, ‘ii’
[09:31:46.152] Searching for globals ... DONE
[09:31:46.152] Resolving globals: FALSE
[09:31:46.152] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:46.152] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:46.152] - globals: [1] ‘ii’
[09:31:46.153] 
[09:31:46.153] getGlobalsAndPackages() ... DONE
 - Creating multisession future #1 ...
[09:31:46.156] getGlobalsAndPackages() ...
[09:31:46.156] Searching for globals...
[09:31:46.157] - globals found: [2] ‘{’, ‘ii’
[09:31:46.157] Searching for globals ... DONE
[09:31:46.157] Resolving globals: FALSE
[09:31:46.157] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:46.158] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:46.158] - globals: [1] ‘ii’
[09:31:46.158] 
[09:31:46.158] getGlobalsAndPackages() ... DONE
 - Resolving 2 multisession futures
[09:31:46.159] Packages needed by the future expression (n = 0): <none>
[09:31:46.159] Packages needed by future strategies (n = 0): <none>
[09:31:46.159] {
[09:31:46.159]     {
[09:31:46.159]         {
[09:31:46.159]             ...future.startTime <- base::Sys.time()
[09:31:46.159]             {
[09:31:46.159]                 {
[09:31:46.159]                   {
[09:31:46.159]                     base::local({
[09:31:46.159]                       has_future <- base::requireNamespace("future", 
[09:31:46.159]                         quietly = TRUE)
[09:31:46.159]                       if (has_future) {
[09:31:46.159]                         ns <- base::getNamespace("future")
[09:31:46.159]                         version <- ns[[".package"]][["version"]]
[09:31:46.159]                         if (is.null(version)) 
[09:31:46.159]                           version <- utils::packageVersion("future")
[09:31:46.159]                       }
[09:31:46.159]                       else {
[09:31:46.159]                         version <- NULL
[09:31:46.159]                       }
[09:31:46.159]                       if (!has_future || version < "1.8.0") {
[09:31:46.159]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.159]                           "", base::R.version$version.string), 
[09:31:46.159]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:46.159]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.159]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.159]                             "release", "version")], collapse = " "), 
[09:31:46.159]                           hostname = base::Sys.info()[["nodename"]])
[09:31:46.159]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.159]                           info)
[09:31:46.159]                         info <- base::paste(info, collapse = "; ")
[09:31:46.159]                         if (!has_future) {
[09:31:46.159]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.159]                             info)
[09:31:46.159]                         }
[09:31:46.159]                         else {
[09:31:46.159]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.159]                             info, version)
[09:31:46.159]                         }
[09:31:46.159]                         base::stop(msg)
[09:31:46.159]                       }
[09:31:46.159]                     })
[09:31:46.159]                   }
[09:31:46.159]                   ...future.strategy.old <- future::plan("list")
[09:31:46.159]                   options(future.plan = NULL)
[09:31:46.159]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.159]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.159]                 }
[09:31:46.159]                 ...future.workdir <- getwd()
[09:31:46.159]             }
[09:31:46.159]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.159]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.159]         }
[09:31:46.159]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.159]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.159]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.159]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.159]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.159]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.159]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.159]             base::names(...future.oldOptions))
[09:31:46.159]     }
[09:31:46.159]     if (FALSE) {
[09:31:46.159]     }
[09:31:46.159]     else {
[09:31:46.159]         if (TRUE) {
[09:31:46.159]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.159]                 open = "w")
[09:31:46.159]         }
[09:31:46.159]         else {
[09:31:46.159]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.159]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.159]         }
[09:31:46.159]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.159]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.159]             base::sink(type = "output", split = FALSE)
[09:31:46.159]             base::close(...future.stdout)
[09:31:46.159]         }, add = TRUE)
[09:31:46.159]     }
[09:31:46.159]     ...future.frame <- base::sys.nframe()
[09:31:46.159]     ...future.conditions <- base::list()
[09:31:46.159]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.159]     if (FALSE) {
[09:31:46.159]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.159]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.159]     }
[09:31:46.159]     ...future.result <- base::tryCatch({
[09:31:46.159]         base::withCallingHandlers({
[09:31:46.159]             ...future.value <- base::withVisible(base::local({
[09:31:46.159]                 ii
[09:31:46.159]             }))
[09:31:46.159]             future::FutureResult(value = ...future.value$value, 
[09:31:46.159]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.159]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.159]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.159]                     ...future.globalenv.names))
[09:31:46.159]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.159]         }, condition = base::local({
[09:31:46.159]             c <- base::c
[09:31:46.159]             inherits <- base::inherits
[09:31:46.159]             invokeRestart <- base::invokeRestart
[09:31:46.159]             length <- base::length
[09:31:46.159]             list <- base::list
[09:31:46.159]             seq.int <- base::seq.int
[09:31:46.159]             signalCondition <- base::signalCondition
[09:31:46.159]             sys.calls <- base::sys.calls
[09:31:46.159]             `[[` <- base::`[[`
[09:31:46.159]             `+` <- base::`+`
[09:31:46.159]             `<<-` <- base::`<<-`
[09:31:46.159]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.159]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.159]                   3L)]
[09:31:46.159]             }
[09:31:46.159]             function(cond) {
[09:31:46.159]                 is_error <- inherits(cond, "error")
[09:31:46.159]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.159]                   NULL)
[09:31:46.159]                 if (is_error) {
[09:31:46.159]                   sessionInformation <- function() {
[09:31:46.159]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.159]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.159]                       search = base::search(), system = base::Sys.info())
[09:31:46.159]                   }
[09:31:46.159]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.159]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.159]                     cond$call), session = sessionInformation(), 
[09:31:46.159]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.159]                   signalCondition(cond)
[09:31:46.159]                 }
[09:31:46.159]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.159]                 "immediateCondition"))) {
[09:31:46.159]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.159]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.159]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.159]                   if (TRUE && !signal) {
[09:31:46.159]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.159]                     {
[09:31:46.159]                       inherits <- base::inherits
[09:31:46.159]                       invokeRestart <- base::invokeRestart
[09:31:46.159]                       is.null <- base::is.null
[09:31:46.159]                       muffled <- FALSE
[09:31:46.159]                       if (inherits(cond, "message")) {
[09:31:46.159]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.159]                         if (muffled) 
[09:31:46.159]                           invokeRestart("muffleMessage")
[09:31:46.159]                       }
[09:31:46.159]                       else if (inherits(cond, "warning")) {
[09:31:46.159]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.159]                         if (muffled) 
[09:31:46.159]                           invokeRestart("muffleWarning")
[09:31:46.159]                       }
[09:31:46.159]                       else if (inherits(cond, "condition")) {
[09:31:46.159]                         if (!is.null(pattern)) {
[09:31:46.159]                           computeRestarts <- base::computeRestarts
[09:31:46.159]                           grepl <- base::grepl
[09:31:46.159]                           restarts <- computeRestarts(cond)
[09:31:46.159]                           for (restart in restarts) {
[09:31:46.159]                             name <- restart$name
[09:31:46.159]                             if (is.null(name)) 
[09:31:46.159]                               next
[09:31:46.159]                             if (!grepl(pattern, name)) 
[09:31:46.159]                               next
[09:31:46.159]                             invokeRestart(restart)
[09:31:46.159]                             muffled <- TRUE
[09:31:46.159]                             break
[09:31:46.159]                           }
[09:31:46.159]                         }
[09:31:46.159]                       }
[09:31:46.159]                       invisible(muffled)
[09:31:46.159]                     }
[09:31:46.159]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.159]                   }
[09:31:46.159]                 }
[09:31:46.159]                 else {
[09:31:46.159]                   if (TRUE) {
[09:31:46.159]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.159]                     {
[09:31:46.159]                       inherits <- base::inherits
[09:31:46.159]                       invokeRestart <- base::invokeRestart
[09:31:46.159]                       is.null <- base::is.null
[09:31:46.159]                       muffled <- FALSE
[09:31:46.159]                       if (inherits(cond, "message")) {
[09:31:46.159]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.159]                         if (muffled) 
[09:31:46.159]                           invokeRestart("muffleMessage")
[09:31:46.159]                       }
[09:31:46.159]                       else if (inherits(cond, "warning")) {
[09:31:46.159]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.159]                         if (muffled) 
[09:31:46.159]                           invokeRestart("muffleWarning")
[09:31:46.159]                       }
[09:31:46.159]                       else if (inherits(cond, "condition")) {
[09:31:46.159]                         if (!is.null(pattern)) {
[09:31:46.159]                           computeRestarts <- base::computeRestarts
[09:31:46.159]                           grepl <- base::grepl
[09:31:46.159]                           restarts <- computeRestarts(cond)
[09:31:46.159]                           for (restart in restarts) {
[09:31:46.159]                             name <- restart$name
[09:31:46.159]                             if (is.null(name)) 
[09:31:46.159]                               next
[09:31:46.159]                             if (!grepl(pattern, name)) 
[09:31:46.159]                               next
[09:31:46.159]                             invokeRestart(restart)
[09:31:46.159]                             muffled <- TRUE
[09:31:46.159]                             break
[09:31:46.159]                           }
[09:31:46.159]                         }
[09:31:46.159]                       }
[09:31:46.159]                       invisible(muffled)
[09:31:46.159]                     }
[09:31:46.159]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.159]                   }
[09:31:46.159]                 }
[09:31:46.159]             }
[09:31:46.159]         }))
[09:31:46.159]     }, error = function(ex) {
[09:31:46.159]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.159]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.159]                 ...future.rng), started = ...future.startTime, 
[09:31:46.159]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.159]             version = "1.8"), class = "FutureResult")
[09:31:46.159]     }, finally = {
[09:31:46.159]         if (!identical(...future.workdir, getwd())) 
[09:31:46.159]             setwd(...future.workdir)
[09:31:46.159]         {
[09:31:46.159]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.159]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.159]             }
[09:31:46.159]             base::options(...future.oldOptions)
[09:31:46.159]             if (.Platform$OS.type == "windows") {
[09:31:46.159]                 old_names <- names(...future.oldEnvVars)
[09:31:46.159]                 envs <- base::Sys.getenv()
[09:31:46.159]                 names <- names(envs)
[09:31:46.159]                 common <- intersect(names, old_names)
[09:31:46.159]                 added <- setdiff(names, old_names)
[09:31:46.159]                 removed <- setdiff(old_names, names)
[09:31:46.159]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.159]                   envs[common]]
[09:31:46.159]                 NAMES <- toupper(changed)
[09:31:46.159]                 args <- list()
[09:31:46.159]                 for (kk in seq_along(NAMES)) {
[09:31:46.159]                   name <- changed[[kk]]
[09:31:46.159]                   NAME <- NAMES[[kk]]
[09:31:46.159]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.159]                     next
[09:31:46.159]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.159]                 }
[09:31:46.159]                 NAMES <- toupper(added)
[09:31:46.159]                 for (kk in seq_along(NAMES)) {
[09:31:46.159]                   name <- added[[kk]]
[09:31:46.159]                   NAME <- NAMES[[kk]]
[09:31:46.159]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.159]                     next
[09:31:46.159]                   args[[name]] <- ""
[09:31:46.159]                 }
[09:31:46.159]                 NAMES <- toupper(removed)
[09:31:46.159]                 for (kk in seq_along(NAMES)) {
[09:31:46.159]                   name <- removed[[kk]]
[09:31:46.159]                   NAME <- NAMES[[kk]]
[09:31:46.159]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.159]                     next
[09:31:46.159]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.159]                 }
[09:31:46.159]                 if (length(args) > 0) 
[09:31:46.159]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.159]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.159]             }
[09:31:46.159]             else {
[09:31:46.159]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.159]             }
[09:31:46.159]             {
[09:31:46.159]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.159]                   0L) {
[09:31:46.159]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.159]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.159]                   base::options(opts)
[09:31:46.159]                 }
[09:31:46.159]                 {
[09:31:46.159]                   {
[09:31:46.159]                     NULL
[09:31:46.159]                     RNGkind("Mersenne-Twister")
[09:31:46.159]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:46.159]                       inherits = FALSE)
[09:31:46.159]                   }
[09:31:46.159]                   options(future.plan = NULL)
[09:31:46.159]                   if (is.na(NA_character_)) 
[09:31:46.159]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.159]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.159]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.159]                     .init = FALSE)
[09:31:46.159]                 }
[09:31:46.159]             }
[09:31:46.159]         }
[09:31:46.159]     })
[09:31:46.159]     if (TRUE) {
[09:31:46.159]         base::sink(type = "output", split = FALSE)
[09:31:46.159]         if (TRUE) {
[09:31:46.159]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.159]         }
[09:31:46.159]         else {
[09:31:46.159]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.159]         }
[09:31:46.159]         base::close(...future.stdout)
[09:31:46.159]         ...future.stdout <- NULL
[09:31:46.159]     }
[09:31:46.159]     ...future.result$conditions <- ...future.conditions
[09:31:46.159]     ...future.result$finished <- base::Sys.time()
[09:31:46.159]     ...future.result
[09:31:46.159] }
[09:31:46.161] assign_globals() ...
[09:31:46.161] List of 1
[09:31:46.161]  $ ii: int 1
[09:31:46.161]  - attr(*, "where")=List of 1
[09:31:46.161]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:46.161]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:46.161]  - attr(*, "resolved")= logi FALSE
[09:31:46.161]  - attr(*, "total_size")= num 56
[09:31:46.163] - copied ‘ii’ to environment
[09:31:46.163] assign_globals() ... done
[09:31:46.163] plan(): Setting new future strategy stack:
[09:31:46.163] List of future strategies:
[09:31:46.163] 1. sequential:
[09:31:46.163]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.163]    - tweaked: FALSE
[09:31:46.163]    - call: NULL
[09:31:46.164] plan(): nbrOfWorkers() = 1
[09:31:46.164] plan(): Setting new future strategy stack:
[09:31:46.164] List of future strategies:
[09:31:46.164] 1. sequential:
[09:31:46.164]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.164]    - tweaked: FALSE
[09:31:46.164]    - call: future::plan("sequential")
[09:31:46.165] plan(): nbrOfWorkers() = 1
[09:31:46.165] SequentialFuture started (and completed)
[09:31:46.165] Packages needed by the future expression (n = 0): <none>
[09:31:46.165] Packages needed by future strategies (n = 0): <none>
[09:31:46.166] {
[09:31:46.166]     {
[09:31:46.166]         {
[09:31:46.166]             ...future.startTime <- base::Sys.time()
[09:31:46.166]             {
[09:31:46.166]                 {
[09:31:46.166]                   {
[09:31:46.166]                     base::local({
[09:31:46.166]                       has_future <- base::requireNamespace("future", 
[09:31:46.166]                         quietly = TRUE)
[09:31:46.166]                       if (has_future) {
[09:31:46.166]                         ns <- base::getNamespace("future")
[09:31:46.166]                         version <- ns[[".package"]][["version"]]
[09:31:46.166]                         if (is.null(version)) 
[09:31:46.166]                           version <- utils::packageVersion("future")
[09:31:46.166]                       }
[09:31:46.166]                       else {
[09:31:46.166]                         version <- NULL
[09:31:46.166]                       }
[09:31:46.166]                       if (!has_future || version < "1.8.0") {
[09:31:46.166]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.166]                           "", base::R.version$version.string), 
[09:31:46.166]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:46.166]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.166]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.166]                             "release", "version")], collapse = " "), 
[09:31:46.166]                           hostname = base::Sys.info()[["nodename"]])
[09:31:46.166]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.166]                           info)
[09:31:46.166]                         info <- base::paste(info, collapse = "; ")
[09:31:46.166]                         if (!has_future) {
[09:31:46.166]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.166]                             info)
[09:31:46.166]                         }
[09:31:46.166]                         else {
[09:31:46.166]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.166]                             info, version)
[09:31:46.166]                         }
[09:31:46.166]                         base::stop(msg)
[09:31:46.166]                       }
[09:31:46.166]                     })
[09:31:46.166]                   }
[09:31:46.166]                   ...future.strategy.old <- future::plan("list")
[09:31:46.166]                   options(future.plan = NULL)
[09:31:46.166]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.166]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.166]                 }
[09:31:46.166]                 ...future.workdir <- getwd()
[09:31:46.166]             }
[09:31:46.166]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.166]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.166]         }
[09:31:46.166]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.166]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.166]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.166]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.166]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.166]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.166]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.166]             base::names(...future.oldOptions))
[09:31:46.166]     }
[09:31:46.166]     if (FALSE) {
[09:31:46.166]     }
[09:31:46.166]     else {
[09:31:46.166]         if (TRUE) {
[09:31:46.166]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.166]                 open = "w")
[09:31:46.166]         }
[09:31:46.166]         else {
[09:31:46.166]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.166]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.166]         }
[09:31:46.166]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.166]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.166]             base::sink(type = "output", split = FALSE)
[09:31:46.166]             base::close(...future.stdout)
[09:31:46.166]         }, add = TRUE)
[09:31:46.166]     }
[09:31:46.166]     ...future.frame <- base::sys.nframe()
[09:31:46.166]     ...future.conditions <- base::list()
[09:31:46.166]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.166]     if (FALSE) {
[09:31:46.166]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.166]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.166]     }
[09:31:46.166]     ...future.result <- base::tryCatch({
[09:31:46.166]         base::withCallingHandlers({
[09:31:46.166]             ...future.value <- base::withVisible(base::local({
[09:31:46.166]                 ii
[09:31:46.166]             }))
[09:31:46.166]             future::FutureResult(value = ...future.value$value, 
[09:31:46.166]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.166]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.166]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.166]                     ...future.globalenv.names))
[09:31:46.166]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.166]         }, condition = base::local({
[09:31:46.166]             c <- base::c
[09:31:46.166]             inherits <- base::inherits
[09:31:46.166]             invokeRestart <- base::invokeRestart
[09:31:46.166]             length <- base::length
[09:31:46.166]             list <- base::list
[09:31:46.166]             seq.int <- base::seq.int
[09:31:46.166]             signalCondition <- base::signalCondition
[09:31:46.166]             sys.calls <- base::sys.calls
[09:31:46.166]             `[[` <- base::`[[`
[09:31:46.166]             `+` <- base::`+`
[09:31:46.166]             `<<-` <- base::`<<-`
[09:31:46.166]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.166]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.166]                   3L)]
[09:31:46.166]             }
[09:31:46.166]             function(cond) {
[09:31:46.166]                 is_error <- inherits(cond, "error")
[09:31:46.166]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.166]                   NULL)
[09:31:46.166]                 if (is_error) {
[09:31:46.166]                   sessionInformation <- function() {
[09:31:46.166]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.166]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.166]                       search = base::search(), system = base::Sys.info())
[09:31:46.166]                   }
[09:31:46.166]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.166]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.166]                     cond$call), session = sessionInformation(), 
[09:31:46.166]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.166]                   signalCondition(cond)
[09:31:46.166]                 }
[09:31:46.166]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.166]                 "immediateCondition"))) {
[09:31:46.166]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.166]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.166]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.166]                   if (TRUE && !signal) {
[09:31:46.166]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.166]                     {
[09:31:46.166]                       inherits <- base::inherits
[09:31:46.166]                       invokeRestart <- base::invokeRestart
[09:31:46.166]                       is.null <- base::is.null
[09:31:46.166]                       muffled <- FALSE
[09:31:46.166]                       if (inherits(cond, "message")) {
[09:31:46.166]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.166]                         if (muffled) 
[09:31:46.166]                           invokeRestart("muffleMessage")
[09:31:46.166]                       }
[09:31:46.166]                       else if (inherits(cond, "warning")) {
[09:31:46.166]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.166]                         if (muffled) 
[09:31:46.166]                           invokeRestart("muffleWarning")
[09:31:46.166]                       }
[09:31:46.166]                       else if (inherits(cond, "condition")) {
[09:31:46.166]                         if (!is.null(pattern)) {
[09:31:46.166]                           computeRestarts <- base::computeRestarts
[09:31:46.166]                           grepl <- base::grepl
[09:31:46.166]                           restarts <- computeRestarts(cond)
[09:31:46.166]                           for (restart in restarts) {
[09:31:46.166]                             name <- restart$name
[09:31:46.166]                             if (is.null(name)) 
[09:31:46.166]                               next
[09:31:46.166]                             if (!grepl(pattern, name)) 
[09:31:46.166]                               next
[09:31:46.166]                             invokeRestart(restart)
[09:31:46.166]                             muffled <- TRUE
[09:31:46.166]                             break
[09:31:46.166]                           }
[09:31:46.166]                         }
[09:31:46.166]                       }
[09:31:46.166]                       invisible(muffled)
[09:31:46.166]                     }
[09:31:46.166]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.166]                   }
[09:31:46.166]                 }
[09:31:46.166]                 else {
[09:31:46.166]                   if (TRUE) {
[09:31:46.166]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.166]                     {
[09:31:46.166]                       inherits <- base::inherits
[09:31:46.166]                       invokeRestart <- base::invokeRestart
[09:31:46.166]                       is.null <- base::is.null
[09:31:46.166]                       muffled <- FALSE
[09:31:46.166]                       if (inherits(cond, "message")) {
[09:31:46.166]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.166]                         if (muffled) 
[09:31:46.166]                           invokeRestart("muffleMessage")
[09:31:46.166]                       }
[09:31:46.166]                       else if (inherits(cond, "warning")) {
[09:31:46.166]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.166]                         if (muffled) 
[09:31:46.166]                           invokeRestart("muffleWarning")
[09:31:46.166]                       }
[09:31:46.166]                       else if (inherits(cond, "condition")) {
[09:31:46.166]                         if (!is.null(pattern)) {
[09:31:46.166]                           computeRestarts <- base::computeRestarts
[09:31:46.166]                           grepl <- base::grepl
[09:31:46.166]                           restarts <- computeRestarts(cond)
[09:31:46.166]                           for (restart in restarts) {
[09:31:46.166]                             name <- restart$name
[09:31:46.166]                             if (is.null(name)) 
[09:31:46.166]                               next
[09:31:46.166]                             if (!grepl(pattern, name)) 
[09:31:46.166]                               next
[09:31:46.166]                             invokeRestart(restart)
[09:31:46.166]                             muffled <- TRUE
[09:31:46.166]                             break
[09:31:46.166]                           }
[09:31:46.166]                         }
[09:31:46.166]                       }
[09:31:46.166]                       invisible(muffled)
[09:31:46.166]                     }
[09:31:46.166]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.166]                   }
[09:31:46.166]                 }
[09:31:46.166]             }
[09:31:46.166]         }))
[09:31:46.166]     }, error = function(ex) {
[09:31:46.166]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.166]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.166]                 ...future.rng), started = ...future.startTime, 
[09:31:46.166]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.166]             version = "1.8"), class = "FutureResult")
[09:31:46.166]     }, finally = {
[09:31:46.166]         if (!identical(...future.workdir, getwd())) 
[09:31:46.166]             setwd(...future.workdir)
[09:31:46.166]         {
[09:31:46.166]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.166]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.166]             }
[09:31:46.166]             base::options(...future.oldOptions)
[09:31:46.166]             if (.Platform$OS.type == "windows") {
[09:31:46.166]                 old_names <- names(...future.oldEnvVars)
[09:31:46.166]                 envs <- base::Sys.getenv()
[09:31:46.166]                 names <- names(envs)
[09:31:46.166]                 common <- intersect(names, old_names)
[09:31:46.166]                 added <- setdiff(names, old_names)
[09:31:46.166]                 removed <- setdiff(old_names, names)
[09:31:46.166]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.166]                   envs[common]]
[09:31:46.166]                 NAMES <- toupper(changed)
[09:31:46.166]                 args <- list()
[09:31:46.166]                 for (kk in seq_along(NAMES)) {
[09:31:46.166]                   name <- changed[[kk]]
[09:31:46.166]                   NAME <- NAMES[[kk]]
[09:31:46.166]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.166]                     next
[09:31:46.166]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.166]                 }
[09:31:46.166]                 NAMES <- toupper(added)
[09:31:46.166]                 for (kk in seq_along(NAMES)) {
[09:31:46.166]                   name <- added[[kk]]
[09:31:46.166]                   NAME <- NAMES[[kk]]
[09:31:46.166]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.166]                     next
[09:31:46.166]                   args[[name]] <- ""
[09:31:46.166]                 }
[09:31:46.166]                 NAMES <- toupper(removed)
[09:31:46.166]                 for (kk in seq_along(NAMES)) {
[09:31:46.166]                   name <- removed[[kk]]
[09:31:46.166]                   NAME <- NAMES[[kk]]
[09:31:46.166]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.166]                     next
[09:31:46.166]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.166]                 }
[09:31:46.166]                 if (length(args) > 0) 
[09:31:46.166]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.166]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.166]             }
[09:31:46.166]             else {
[09:31:46.166]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.166]             }
[09:31:46.166]             {
[09:31:46.166]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.166]                   0L) {
[09:31:46.166]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.166]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.166]                   base::options(opts)
[09:31:46.166]                 }
[09:31:46.166]                 {
[09:31:46.166]                   {
[09:31:46.166]                     NULL
[09:31:46.166]                     RNGkind("Mersenne-Twister")
[09:31:46.166]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:46.166]                       inherits = FALSE)
[09:31:46.166]                   }
[09:31:46.166]                   options(future.plan = NULL)
[09:31:46.166]                   if (is.na(NA_character_)) 
[09:31:46.166]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.166]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.166]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.166]                     .init = FALSE)
[09:31:46.166]                 }
[09:31:46.166]             }
[09:31:46.166]         }
[09:31:46.166]     })
[09:31:46.166]     if (TRUE) {
[09:31:46.166]         base::sink(type = "output", split = FALSE)
[09:31:46.166]         if (TRUE) {
[09:31:46.166]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.166]         }
[09:31:46.166]         else {
[09:31:46.166]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.166]         }
[09:31:46.166]         base::close(...future.stdout)
[09:31:46.166]         ...future.stdout <- NULL
[09:31:46.166]     }
[09:31:46.166]     ...future.result$conditions <- ...future.conditions
[09:31:46.166]     ...future.result$finished <- base::Sys.time()
[09:31:46.166]     ...future.result
[09:31:46.166] }
[09:31:46.167] assign_globals() ...
[09:31:46.167] List of 1
[09:31:46.167]  $ ii: int 2
[09:31:46.167]  - attr(*, "where")=List of 1
[09:31:46.167]   ..$ ii:<environment: R_EmptyEnv> 
[09:31:46.167]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:46.167]  - attr(*, "resolved")= logi FALSE
[09:31:46.167]  - attr(*, "total_size")= num 56
[09:31:46.169] - copied ‘ii’ to environment
[09:31:46.169] assign_globals() ... done
[09:31:46.170] plan(): Setting new future strategy stack:
[09:31:46.170] List of future strategies:
[09:31:46.170] 1. sequential:
[09:31:46.170]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.170]    - tweaked: FALSE
[09:31:46.170]    - call: NULL
[09:31:46.170] plan(): nbrOfWorkers() = 1
[09:31:46.171] plan(): Setting new future strategy stack:
[09:31:46.171] List of future strategies:
[09:31:46.171] 1. sequential:
[09:31:46.171]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.171]    - tweaked: FALSE
[09:31:46.171]    - call: future::plan("sequential")
[09:31:46.171] plan(): nbrOfWorkers() = 1
[09:31:46.171] SequentialFuture started (and completed)
*** multisession() - workers inherit .libPaths()
[09:31:46.172] getGlobalsAndPackages() ...
[09:31:46.172] Searching for globals...
[09:31:46.172] - globals found: [1] ‘.libPaths’
[09:31:46.172] Searching for globals ... DONE
[09:31:46.172] Resolving globals: FALSE
[09:31:46.173] 
[09:31:46.173] 
[09:31:46.173] getGlobalsAndPackages() ... DONE
[09:31:46.173] run() for ‘Future’ ...
[09:31:46.173] - state: ‘created’
[09:31:46.174] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:46.174] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:46.174] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:46.174]   - Field: ‘label’
[09:31:46.174]   - Field: ‘local’
[09:31:46.174]   - Field: ‘owner’
[09:31:46.174]   - Field: ‘envir’
[09:31:46.174]   - Field: ‘packages’
[09:31:46.174]   - Field: ‘gc’
[09:31:46.174]   - Field: ‘conditions’
[09:31:46.175]   - Field: ‘expr’
[09:31:46.175]   - Field: ‘uuid’
[09:31:46.175]   - Field: ‘seed’
[09:31:46.175]   - Field: ‘version’
[09:31:46.175]   - Field: ‘result’
[09:31:46.175]   - Field: ‘asynchronous’
[09:31:46.175]   - Field: ‘calls’
[09:31:46.175]   - Field: ‘globals’
[09:31:46.175]   - Field: ‘stdout’
[09:31:46.175]   - Field: ‘earlySignal’
[09:31:46.175]   - Field: ‘lazy’
[09:31:46.176]   - Field: ‘state’
[09:31:46.176] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:46.176] - Launch lazy future ...
[09:31:46.176] Packages needed by the future expression (n = 0): <none>
[09:31:46.176] Packages needed by future strategies (n = 0): <none>
[09:31:46.176] {
[09:31:46.176]     {
[09:31:46.176]         {
[09:31:46.176]             ...future.startTime <- base::Sys.time()
[09:31:46.176]             {
[09:31:46.176]                 {
[09:31:46.176]                   {
[09:31:46.176]                     base::local({
[09:31:46.176]                       has_future <- base::requireNamespace("future", 
[09:31:46.176]                         quietly = TRUE)
[09:31:46.176]                       if (has_future) {
[09:31:46.176]                         ns <- base::getNamespace("future")
[09:31:46.176]                         version <- ns[[".package"]][["version"]]
[09:31:46.176]                         if (is.null(version)) 
[09:31:46.176]                           version <- utils::packageVersion("future")
[09:31:46.176]                       }
[09:31:46.176]                       else {
[09:31:46.176]                         version <- NULL
[09:31:46.176]                       }
[09:31:46.176]                       if (!has_future || version < "1.8.0") {
[09:31:46.176]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.176]                           "", base::R.version$version.string), 
[09:31:46.176]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:46.176]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.176]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.176]                             "release", "version")], collapse = " "), 
[09:31:46.176]                           hostname = base::Sys.info()[["nodename"]])
[09:31:46.176]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.176]                           info)
[09:31:46.176]                         info <- base::paste(info, collapse = "; ")
[09:31:46.176]                         if (!has_future) {
[09:31:46.176]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.176]                             info)
[09:31:46.176]                         }
[09:31:46.176]                         else {
[09:31:46.176]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.176]                             info, version)
[09:31:46.176]                         }
[09:31:46.176]                         base::stop(msg)
[09:31:46.176]                       }
[09:31:46.176]                     })
[09:31:46.176]                   }
[09:31:46.176]                   ...future.strategy.old <- future::plan("list")
[09:31:46.176]                   options(future.plan = NULL)
[09:31:46.176]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.176]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.176]                 }
[09:31:46.176]                 ...future.workdir <- getwd()
[09:31:46.176]             }
[09:31:46.176]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.176]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.176]         }
[09:31:46.176]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.176]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.176]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.176]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.176]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.176]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.176]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.176]             base::names(...future.oldOptions))
[09:31:46.176]     }
[09:31:46.176]     if (FALSE) {
[09:31:46.176]     }
[09:31:46.176]     else {
[09:31:46.176]         if (TRUE) {
[09:31:46.176]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.176]                 open = "w")
[09:31:46.176]         }
[09:31:46.176]         else {
[09:31:46.176]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.176]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.176]         }
[09:31:46.176]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.176]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.176]             base::sink(type = "output", split = FALSE)
[09:31:46.176]             base::close(...future.stdout)
[09:31:46.176]         }, add = TRUE)
[09:31:46.176]     }
[09:31:46.176]     ...future.frame <- base::sys.nframe()
[09:31:46.176]     ...future.conditions <- base::list()
[09:31:46.176]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.176]     if (FALSE) {
[09:31:46.176]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.176]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.176]     }
[09:31:46.176]     ...future.result <- base::tryCatch({
[09:31:46.176]         base::withCallingHandlers({
[09:31:46.176]             ...future.value <- base::withVisible(base::local(.libPaths()))
[09:31:46.176]             future::FutureResult(value = ...future.value$value, 
[09:31:46.176]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.176]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.176]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.176]                     ...future.globalenv.names))
[09:31:46.176]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.176]         }, condition = base::local({
[09:31:46.176]             c <- base::c
[09:31:46.176]             inherits <- base::inherits
[09:31:46.176]             invokeRestart <- base::invokeRestart
[09:31:46.176]             length <- base::length
[09:31:46.176]             list <- base::list
[09:31:46.176]             seq.int <- base::seq.int
[09:31:46.176]             signalCondition <- base::signalCondition
[09:31:46.176]             sys.calls <- base::sys.calls
[09:31:46.176]             `[[` <- base::`[[`
[09:31:46.176]             `+` <- base::`+`
[09:31:46.176]             `<<-` <- base::`<<-`
[09:31:46.176]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.176]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.176]                   3L)]
[09:31:46.176]             }
[09:31:46.176]             function(cond) {
[09:31:46.176]                 is_error <- inherits(cond, "error")
[09:31:46.176]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.176]                   NULL)
[09:31:46.176]                 if (is_error) {
[09:31:46.176]                   sessionInformation <- function() {
[09:31:46.176]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.176]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.176]                       search = base::search(), system = base::Sys.info())
[09:31:46.176]                   }
[09:31:46.176]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.176]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.176]                     cond$call), session = sessionInformation(), 
[09:31:46.176]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.176]                   signalCondition(cond)
[09:31:46.176]                 }
[09:31:46.176]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.176]                 "immediateCondition"))) {
[09:31:46.176]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.176]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.176]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.176]                   if (TRUE && !signal) {
[09:31:46.176]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.176]                     {
[09:31:46.176]                       inherits <- base::inherits
[09:31:46.176]                       invokeRestart <- base::invokeRestart
[09:31:46.176]                       is.null <- base::is.null
[09:31:46.176]                       muffled <- FALSE
[09:31:46.176]                       if (inherits(cond, "message")) {
[09:31:46.176]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.176]                         if (muffled) 
[09:31:46.176]                           invokeRestart("muffleMessage")
[09:31:46.176]                       }
[09:31:46.176]                       else if (inherits(cond, "warning")) {
[09:31:46.176]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.176]                         if (muffled) 
[09:31:46.176]                           invokeRestart("muffleWarning")
[09:31:46.176]                       }
[09:31:46.176]                       else if (inherits(cond, "condition")) {
[09:31:46.176]                         if (!is.null(pattern)) {
[09:31:46.176]                           computeRestarts <- base::computeRestarts
[09:31:46.176]                           grepl <- base::grepl
[09:31:46.176]                           restarts <- computeRestarts(cond)
[09:31:46.176]                           for (restart in restarts) {
[09:31:46.176]                             name <- restart$name
[09:31:46.176]                             if (is.null(name)) 
[09:31:46.176]                               next
[09:31:46.176]                             if (!grepl(pattern, name)) 
[09:31:46.176]                               next
[09:31:46.176]                             invokeRestart(restart)
[09:31:46.176]                             muffled <- TRUE
[09:31:46.176]                             break
[09:31:46.176]                           }
[09:31:46.176]                         }
[09:31:46.176]                       }
[09:31:46.176]                       invisible(muffled)
[09:31:46.176]                     }
[09:31:46.176]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.176]                   }
[09:31:46.176]                 }
[09:31:46.176]                 else {
[09:31:46.176]                   if (TRUE) {
[09:31:46.176]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.176]                     {
[09:31:46.176]                       inherits <- base::inherits
[09:31:46.176]                       invokeRestart <- base::invokeRestart
[09:31:46.176]                       is.null <- base::is.null
[09:31:46.176]                       muffled <- FALSE
[09:31:46.176]                       if (inherits(cond, "message")) {
[09:31:46.176]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.176]                         if (muffled) 
[09:31:46.176]                           invokeRestart("muffleMessage")
[09:31:46.176]                       }
[09:31:46.176]                       else if (inherits(cond, "warning")) {
[09:31:46.176]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.176]                         if (muffled) 
[09:31:46.176]                           invokeRestart("muffleWarning")
[09:31:46.176]                       }
[09:31:46.176]                       else if (inherits(cond, "condition")) {
[09:31:46.176]                         if (!is.null(pattern)) {
[09:31:46.176]                           computeRestarts <- base::computeRestarts
[09:31:46.176]                           grepl <- base::grepl
[09:31:46.176]                           restarts <- computeRestarts(cond)
[09:31:46.176]                           for (restart in restarts) {
[09:31:46.176]                             name <- restart$name
[09:31:46.176]                             if (is.null(name)) 
[09:31:46.176]                               next
[09:31:46.176]                             if (!grepl(pattern, name)) 
[09:31:46.176]                               next
[09:31:46.176]                             invokeRestart(restart)
[09:31:46.176]                             muffled <- TRUE
[09:31:46.176]                             break
[09:31:46.176]                           }
[09:31:46.176]                         }
[09:31:46.176]                       }
[09:31:46.176]                       invisible(muffled)
[09:31:46.176]                     }
[09:31:46.176]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.176]                   }
[09:31:46.176]                 }
[09:31:46.176]             }
[09:31:46.176]         }))
[09:31:46.176]     }, error = function(ex) {
[09:31:46.176]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.176]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.176]                 ...future.rng), started = ...future.startTime, 
[09:31:46.176]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.176]             version = "1.8"), class = "FutureResult")
[09:31:46.176]     }, finally = {
[09:31:46.176]         if (!identical(...future.workdir, getwd())) 
[09:31:46.176]             setwd(...future.workdir)
[09:31:46.176]         {
[09:31:46.176]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.176]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.176]             }
[09:31:46.176]             base::options(...future.oldOptions)
[09:31:46.176]             if (.Platform$OS.type == "windows") {
[09:31:46.176]                 old_names <- names(...future.oldEnvVars)
[09:31:46.176]                 envs <- base::Sys.getenv()
[09:31:46.176]                 names <- names(envs)
[09:31:46.176]                 common <- intersect(names, old_names)
[09:31:46.176]                 added <- setdiff(names, old_names)
[09:31:46.176]                 removed <- setdiff(old_names, names)
[09:31:46.176]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.176]                   envs[common]]
[09:31:46.176]                 NAMES <- toupper(changed)
[09:31:46.176]                 args <- list()
[09:31:46.176]                 for (kk in seq_along(NAMES)) {
[09:31:46.176]                   name <- changed[[kk]]
[09:31:46.176]                   NAME <- NAMES[[kk]]
[09:31:46.176]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.176]                     next
[09:31:46.176]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.176]                 }
[09:31:46.176]                 NAMES <- toupper(added)
[09:31:46.176]                 for (kk in seq_along(NAMES)) {
[09:31:46.176]                   name <- added[[kk]]
[09:31:46.176]                   NAME <- NAMES[[kk]]
[09:31:46.176]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.176]                     next
[09:31:46.176]                   args[[name]] <- ""
[09:31:46.176]                 }
[09:31:46.176]                 NAMES <- toupper(removed)
[09:31:46.176]                 for (kk in seq_along(NAMES)) {
[09:31:46.176]                   name <- removed[[kk]]
[09:31:46.176]                   NAME <- NAMES[[kk]]
[09:31:46.176]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.176]                     next
[09:31:46.176]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.176]                 }
[09:31:46.176]                 if (length(args) > 0) 
[09:31:46.176]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.176]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.176]             }
[09:31:46.176]             else {
[09:31:46.176]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.176]             }
[09:31:46.176]             {
[09:31:46.176]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.176]                   0L) {
[09:31:46.176]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.176]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.176]                   base::options(opts)
[09:31:46.176]                 }
[09:31:46.176]                 {
[09:31:46.176]                   {
[09:31:46.176]                     NULL
[09:31:46.176]                     RNGkind("Mersenne-Twister")
[09:31:46.176]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:46.176]                       inherits = FALSE)
[09:31:46.176]                   }
[09:31:46.176]                   options(future.plan = NULL)
[09:31:46.176]                   if (is.na(NA_character_)) 
[09:31:46.176]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.176]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.176]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.176]                     .init = FALSE)
[09:31:46.176]                 }
[09:31:46.176]             }
[09:31:46.176]         }
[09:31:46.176]     })
[09:31:46.176]     if (TRUE) {
[09:31:46.176]         base::sink(type = "output", split = FALSE)
[09:31:46.176]         if (TRUE) {
[09:31:46.176]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.176]         }
[09:31:46.176]         else {
[09:31:46.176]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.176]         }
[09:31:46.176]         base::close(...future.stdout)
[09:31:46.176]         ...future.stdout <- NULL
[09:31:46.176]     }
[09:31:46.176]     ...future.result$conditions <- ...future.conditions
[09:31:46.176]     ...future.result$finished <- base::Sys.time()
[09:31:46.176]     ...future.result
[09:31:46.176] }
[09:31:46.178] plan(): Setting new future strategy stack:
[09:31:46.178] List of future strategies:
[09:31:46.178] 1. sequential:
[09:31:46.178]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.178]    - tweaked: FALSE
[09:31:46.178]    - call: NULL
[09:31:46.180] plan(): nbrOfWorkers() = 1
[09:31:46.180] plan(): Setting new future strategy stack:
[09:31:46.181] List of future strategies:
[09:31:46.181] 1. sequential:
[09:31:46.181]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.181]    - tweaked: FALSE
[09:31:46.181]    - call: future::plan("sequential")
[09:31:46.181] plan(): nbrOfWorkers() = 1
[09:31:46.181] SequentialFuture started (and completed)
[09:31:46.181] - Launch lazy future ... done
[09:31:46.181] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[09:31:46.185] getGlobalsAndPackages() ...
[09:31:46.185] Searching for globals...
[09:31:46.186] - globals found: [2] ‘{’, ‘stop’
[09:31:46.186] Searching for globals ... DONE
[09:31:46.187] Resolving globals: FALSE
[09:31:46.187] 
[09:31:46.187] 
[09:31:46.187] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d4a020fd-dec5-7248-6e9b-560e9778c064
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:46.188] Packages needed by the future expression (n = 0): <none>
[09:31:46.188] Packages needed by future strategies (n = 0): <none>
[09:31:46.188] {
[09:31:46.188]     {
[09:31:46.188]         {
[09:31:46.188]             ...future.startTime <- base::Sys.time()
[09:31:46.188]             {
[09:31:46.188]                 {
[09:31:46.188]                   {
[09:31:46.188]                     base::local({
[09:31:46.188]                       has_future <- base::requireNamespace("future", 
[09:31:46.188]                         quietly = TRUE)
[09:31:46.188]                       if (has_future) {
[09:31:46.188]                         ns <- base::getNamespace("future")
[09:31:46.188]                         version <- ns[[".package"]][["version"]]
[09:31:46.188]                         if (is.null(version)) 
[09:31:46.188]                           version <- utils::packageVersion("future")
[09:31:46.188]                       }
[09:31:46.188]                       else {
[09:31:46.188]                         version <- NULL
[09:31:46.188]                       }
[09:31:46.188]                       if (!has_future || version < "1.8.0") {
[09:31:46.188]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.188]                           "", base::R.version$version.string), 
[09:31:46.188]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:46.188]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.188]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.188]                             "release", "version")], collapse = " "), 
[09:31:46.188]                           hostname = base::Sys.info()[["nodename"]])
[09:31:46.188]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.188]                           info)
[09:31:46.188]                         info <- base::paste(info, collapse = "; ")
[09:31:46.188]                         if (!has_future) {
[09:31:46.188]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.188]                             info)
[09:31:46.188]                         }
[09:31:46.188]                         else {
[09:31:46.188]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.188]                             info, version)
[09:31:46.188]                         }
[09:31:46.188]                         base::stop(msg)
[09:31:46.188]                       }
[09:31:46.188]                     })
[09:31:46.188]                   }
[09:31:46.188]                   ...future.strategy.old <- future::plan("list")
[09:31:46.188]                   options(future.plan = NULL)
[09:31:46.188]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.188]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.188]                 }
[09:31:46.188]                 ...future.workdir <- getwd()
[09:31:46.188]             }
[09:31:46.188]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.188]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.188]         }
[09:31:46.188]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.188]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.188]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.188]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.188]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.188]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.188]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.188]             base::names(...future.oldOptions))
[09:31:46.188]     }
[09:31:46.188]     if (FALSE) {
[09:31:46.188]     }
[09:31:46.188]     else {
[09:31:46.188]         if (TRUE) {
[09:31:46.188]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.188]                 open = "w")
[09:31:46.188]         }
[09:31:46.188]         else {
[09:31:46.188]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.188]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.188]         }
[09:31:46.188]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.188]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.188]             base::sink(type = "output", split = FALSE)
[09:31:46.188]             base::close(...future.stdout)
[09:31:46.188]         }, add = TRUE)
[09:31:46.188]     }
[09:31:46.188]     ...future.frame <- base::sys.nframe()
[09:31:46.188]     ...future.conditions <- base::list()
[09:31:46.188]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.188]     if (FALSE) {
[09:31:46.188]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.188]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.188]     }
[09:31:46.188]     ...future.result <- base::tryCatch({
[09:31:46.188]         base::withCallingHandlers({
[09:31:46.188]             ...future.value <- base::withVisible(base::local({
[09:31:46.188]                 stop("Whoops!")
[09:31:46.188]                 1
[09:31:46.188]             }))
[09:31:46.188]             future::FutureResult(value = ...future.value$value, 
[09:31:46.188]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.188]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.188]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.188]                     ...future.globalenv.names))
[09:31:46.188]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.188]         }, condition = base::local({
[09:31:46.188]             c <- base::c
[09:31:46.188]             inherits <- base::inherits
[09:31:46.188]             invokeRestart <- base::invokeRestart
[09:31:46.188]             length <- base::length
[09:31:46.188]             list <- base::list
[09:31:46.188]             seq.int <- base::seq.int
[09:31:46.188]             signalCondition <- base::signalCondition
[09:31:46.188]             sys.calls <- base::sys.calls
[09:31:46.188]             `[[` <- base::`[[`
[09:31:46.188]             `+` <- base::`+`
[09:31:46.188]             `<<-` <- base::`<<-`
[09:31:46.188]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.188]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.188]                   3L)]
[09:31:46.188]             }
[09:31:46.188]             function(cond) {
[09:31:46.188]                 is_error <- inherits(cond, "error")
[09:31:46.188]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.188]                   NULL)
[09:31:46.188]                 if (is_error) {
[09:31:46.188]                   sessionInformation <- function() {
[09:31:46.188]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.188]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.188]                       search = base::search(), system = base::Sys.info())
[09:31:46.188]                   }
[09:31:46.188]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.188]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.188]                     cond$call), session = sessionInformation(), 
[09:31:46.188]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.188]                   signalCondition(cond)
[09:31:46.188]                 }
[09:31:46.188]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.188]                 "immediateCondition"))) {
[09:31:46.188]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.188]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.188]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.188]                   if (TRUE && !signal) {
[09:31:46.188]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.188]                     {
[09:31:46.188]                       inherits <- base::inherits
[09:31:46.188]                       invokeRestart <- base::invokeRestart
[09:31:46.188]                       is.null <- base::is.null
[09:31:46.188]                       muffled <- FALSE
[09:31:46.188]                       if (inherits(cond, "message")) {
[09:31:46.188]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.188]                         if (muffled) 
[09:31:46.188]                           invokeRestart("muffleMessage")
[09:31:46.188]                       }
[09:31:46.188]                       else if (inherits(cond, "warning")) {
[09:31:46.188]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.188]                         if (muffled) 
[09:31:46.188]                           invokeRestart("muffleWarning")
[09:31:46.188]                       }
[09:31:46.188]                       else if (inherits(cond, "condition")) {
[09:31:46.188]                         if (!is.null(pattern)) {
[09:31:46.188]                           computeRestarts <- base::computeRestarts
[09:31:46.188]                           grepl <- base::grepl
[09:31:46.188]                           restarts <- computeRestarts(cond)
[09:31:46.188]                           for (restart in restarts) {
[09:31:46.188]                             name <- restart$name
[09:31:46.188]                             if (is.null(name)) 
[09:31:46.188]                               next
[09:31:46.188]                             if (!grepl(pattern, name)) 
[09:31:46.188]                               next
[09:31:46.188]                             invokeRestart(restart)
[09:31:46.188]                             muffled <- TRUE
[09:31:46.188]                             break
[09:31:46.188]                           }
[09:31:46.188]                         }
[09:31:46.188]                       }
[09:31:46.188]                       invisible(muffled)
[09:31:46.188]                     }
[09:31:46.188]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.188]                   }
[09:31:46.188]                 }
[09:31:46.188]                 else {
[09:31:46.188]                   if (TRUE) {
[09:31:46.188]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.188]                     {
[09:31:46.188]                       inherits <- base::inherits
[09:31:46.188]                       invokeRestart <- base::invokeRestart
[09:31:46.188]                       is.null <- base::is.null
[09:31:46.188]                       muffled <- FALSE
[09:31:46.188]                       if (inherits(cond, "message")) {
[09:31:46.188]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.188]                         if (muffled) 
[09:31:46.188]                           invokeRestart("muffleMessage")
[09:31:46.188]                       }
[09:31:46.188]                       else if (inherits(cond, "warning")) {
[09:31:46.188]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.188]                         if (muffled) 
[09:31:46.188]                           invokeRestart("muffleWarning")
[09:31:46.188]                       }
[09:31:46.188]                       else if (inherits(cond, "condition")) {
[09:31:46.188]                         if (!is.null(pattern)) {
[09:31:46.188]                           computeRestarts <- base::computeRestarts
[09:31:46.188]                           grepl <- base::grepl
[09:31:46.188]                           restarts <- computeRestarts(cond)
[09:31:46.188]                           for (restart in restarts) {
[09:31:46.188]                             name <- restart$name
[09:31:46.188]                             if (is.null(name)) 
[09:31:46.188]                               next
[09:31:46.188]                             if (!grepl(pattern, name)) 
[09:31:46.188]                               next
[09:31:46.188]                             invokeRestart(restart)
[09:31:46.188]                             muffled <- TRUE
[09:31:46.188]                             break
[09:31:46.188]                           }
[09:31:46.188]                         }
[09:31:46.188]                       }
[09:31:46.188]                       invisible(muffled)
[09:31:46.188]                     }
[09:31:46.188]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.188]                   }
[09:31:46.188]                 }
[09:31:46.188]             }
[09:31:46.188]         }))
[09:31:46.188]     }, error = function(ex) {
[09:31:46.188]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.188]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.188]                 ...future.rng), started = ...future.startTime, 
[09:31:46.188]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.188]             version = "1.8"), class = "FutureResult")
[09:31:46.188]     }, finally = {
[09:31:46.188]         if (!identical(...future.workdir, getwd())) 
[09:31:46.188]             setwd(...future.workdir)
[09:31:46.188]         {
[09:31:46.188]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.188]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.188]             }
[09:31:46.188]             base::options(...future.oldOptions)
[09:31:46.188]             if (.Platform$OS.type == "windows") {
[09:31:46.188]                 old_names <- names(...future.oldEnvVars)
[09:31:46.188]                 envs <- base::Sys.getenv()
[09:31:46.188]                 names <- names(envs)
[09:31:46.188]                 common <- intersect(names, old_names)
[09:31:46.188]                 added <- setdiff(names, old_names)
[09:31:46.188]                 removed <- setdiff(old_names, names)
[09:31:46.188]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.188]                   envs[common]]
[09:31:46.188]                 NAMES <- toupper(changed)
[09:31:46.188]                 args <- list()
[09:31:46.188]                 for (kk in seq_along(NAMES)) {
[09:31:46.188]                   name <- changed[[kk]]
[09:31:46.188]                   NAME <- NAMES[[kk]]
[09:31:46.188]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.188]                     next
[09:31:46.188]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.188]                 }
[09:31:46.188]                 NAMES <- toupper(added)
[09:31:46.188]                 for (kk in seq_along(NAMES)) {
[09:31:46.188]                   name <- added[[kk]]
[09:31:46.188]                   NAME <- NAMES[[kk]]
[09:31:46.188]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.188]                     next
[09:31:46.188]                   args[[name]] <- ""
[09:31:46.188]                 }
[09:31:46.188]                 NAMES <- toupper(removed)
[09:31:46.188]                 for (kk in seq_along(NAMES)) {
[09:31:46.188]                   name <- removed[[kk]]
[09:31:46.188]                   NAME <- NAMES[[kk]]
[09:31:46.188]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.188]                     next
[09:31:46.188]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.188]                 }
[09:31:46.188]                 if (length(args) > 0) 
[09:31:46.188]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.188]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.188]             }
[09:31:46.188]             else {
[09:31:46.188]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.188]             }
[09:31:46.188]             {
[09:31:46.188]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.188]                   0L) {
[09:31:46.188]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.188]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.188]                   base::options(opts)
[09:31:46.188]                 }
[09:31:46.188]                 {
[09:31:46.188]                   {
[09:31:46.188]                     NULL
[09:31:46.188]                     RNGkind("Mersenne-Twister")
[09:31:46.188]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:46.188]                       inherits = FALSE)
[09:31:46.188]                   }
[09:31:46.188]                   options(future.plan = NULL)
[09:31:46.188]                   if (is.na(NA_character_)) 
[09:31:46.188]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.188]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.188]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.188]                     .init = FALSE)
[09:31:46.188]                 }
[09:31:46.188]             }
[09:31:46.188]         }
[09:31:46.188]     })
[09:31:46.188]     if (TRUE) {
[09:31:46.188]         base::sink(type = "output", split = FALSE)
[09:31:46.188]         if (TRUE) {
[09:31:46.188]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.188]         }
[09:31:46.188]         else {
[09:31:46.188]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.188]         }
[09:31:46.188]         base::close(...future.stdout)
[09:31:46.188]         ...future.stdout <- NULL
[09:31:46.188]     }
[09:31:46.188]     ...future.result$conditions <- ...future.conditions
[09:31:46.188]     ...future.result$finished <- base::Sys.time()
[09:31:46.188]     ...future.result
[09:31:46.188] }
[09:31:46.190] plan(): Setting new future strategy stack:
[09:31:46.190] List of future strategies:
[09:31:46.190] 1. sequential:
[09:31:46.190]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.190]    - tweaked: FALSE
[09:31:46.190]    - call: NULL
[09:31:46.190] plan(): nbrOfWorkers() = 1
[09:31:46.191] plan(): Setting new future strategy stack:
[09:31:46.191] List of future strategies:
[09:31:46.191] 1. sequential:
[09:31:46.191]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.191]    - tweaked: FALSE
[09:31:46.191]    - call: future::plan("sequential")
[09:31:46.192] plan(): nbrOfWorkers() = 1
[09:31:46.192] SequentialFuture started (and completed)
[09:31:46.192] signalConditions() ...
[09:31:46.192]  - include = ‘immediateCondition’
[09:31:46.192]  - exclude = 
[09:31:46.192]  - resignal = FALSE
[09:31:46.192]  - Number of conditions: 1
[09:31:46.192] signalConditions() ... done
[09:31:46.193] signalConditions() ...
[09:31:46.193]  - include = ‘immediateCondition’
[09:31:46.193]  - exclude = 
[09:31:46.193]  - resignal = FALSE
[09:31:46.193]  - Number of conditions: 1
[09:31:46.193] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[09:31:46.193] signalConditions() ...
[09:31:46.193]  - include = ‘immediateCondition’
[09:31:46.193]  - exclude = 
[09:31:46.193]  - resignal = FALSE
[09:31:46.194]  - Number of conditions: 1
[09:31:46.194] signalConditions() ... done
[09:31:46.194] Future state: ‘finished’
[09:31:46.194] signalConditions() ...
[09:31:46.194]  - include = ‘condition’
[09:31:46.194]  - exclude = ‘immediateCondition’
[09:31:46.194]  - resignal = TRUE
[09:31:46.194]  - Number of conditions: 1
[09:31:46.194]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:46.194] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[09:31:46.195] signalConditions() ...
[09:31:46.195]  - include = ‘immediateCondition’
[09:31:46.195]  - exclude = 
[09:31:46.195]  - resignal = FALSE
[09:31:46.195]  - Number of conditions: 1
[09:31:46.195] signalConditions() ... done
[09:31:46.195] Future state: ‘finished’
[09:31:46.195] signalConditions() ...
[09:31:46.195]  - include = ‘condition’
[09:31:46.196]  - exclude = ‘immediateCondition’
[09:31:46.196]  - resignal = TRUE
[09:31:46.196]  - Number of conditions: 1
[09:31:46.196]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:46.196] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[09:31:46.199] getGlobalsAndPackages() ...
[09:31:46.199] Searching for globals...
[09:31:46.200] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[09:31:46.200] Searching for globals ... DONE
[09:31:46.200] Resolving globals: FALSE
[09:31:46.201] 
[09:31:46.201] 
[09:31:46.201] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d4a020fd-dec5-7248-6e9b-560e9778c064
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:46.202] Packages needed by the future expression (n = 0): <none>
[09:31:46.202] Packages needed by future strategies (n = 0): <none>
[09:31:46.202] {
[09:31:46.202]     {
[09:31:46.202]         {
[09:31:46.202]             ...future.startTime <- base::Sys.time()
[09:31:46.202]             {
[09:31:46.202]                 {
[09:31:46.202]                   {
[09:31:46.202]                     base::local({
[09:31:46.202]                       has_future <- base::requireNamespace("future", 
[09:31:46.202]                         quietly = TRUE)
[09:31:46.202]                       if (has_future) {
[09:31:46.202]                         ns <- base::getNamespace("future")
[09:31:46.202]                         version <- ns[[".package"]][["version"]]
[09:31:46.202]                         if (is.null(version)) 
[09:31:46.202]                           version <- utils::packageVersion("future")
[09:31:46.202]                       }
[09:31:46.202]                       else {
[09:31:46.202]                         version <- NULL
[09:31:46.202]                       }
[09:31:46.202]                       if (!has_future || version < "1.8.0") {
[09:31:46.202]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.202]                           "", base::R.version$version.string), 
[09:31:46.202]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:46.202]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.202]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.202]                             "release", "version")], collapse = " "), 
[09:31:46.202]                           hostname = base::Sys.info()[["nodename"]])
[09:31:46.202]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.202]                           info)
[09:31:46.202]                         info <- base::paste(info, collapse = "; ")
[09:31:46.202]                         if (!has_future) {
[09:31:46.202]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.202]                             info)
[09:31:46.202]                         }
[09:31:46.202]                         else {
[09:31:46.202]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.202]                             info, version)
[09:31:46.202]                         }
[09:31:46.202]                         base::stop(msg)
[09:31:46.202]                       }
[09:31:46.202]                     })
[09:31:46.202]                   }
[09:31:46.202]                   ...future.strategy.old <- future::plan("list")
[09:31:46.202]                   options(future.plan = NULL)
[09:31:46.202]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.202]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.202]                 }
[09:31:46.202]                 ...future.workdir <- getwd()
[09:31:46.202]             }
[09:31:46.202]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.202]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.202]         }
[09:31:46.202]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.202]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.202]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.202]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.202]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.202]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.202]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.202]             base::names(...future.oldOptions))
[09:31:46.202]     }
[09:31:46.202]     if (FALSE) {
[09:31:46.202]     }
[09:31:46.202]     else {
[09:31:46.202]         if (TRUE) {
[09:31:46.202]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.202]                 open = "w")
[09:31:46.202]         }
[09:31:46.202]         else {
[09:31:46.202]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.202]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.202]         }
[09:31:46.202]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.202]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.202]             base::sink(type = "output", split = FALSE)
[09:31:46.202]             base::close(...future.stdout)
[09:31:46.202]         }, add = TRUE)
[09:31:46.202]     }
[09:31:46.202]     ...future.frame <- base::sys.nframe()
[09:31:46.202]     ...future.conditions <- base::list()
[09:31:46.202]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.202]     if (FALSE) {
[09:31:46.202]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.202]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.202]     }
[09:31:46.202]     ...future.result <- base::tryCatch({
[09:31:46.202]         base::withCallingHandlers({
[09:31:46.202]             ...future.value <- base::withVisible(base::local({
[09:31:46.202]                 stop(structure(list(message = "boom"), class = c("MyError", 
[09:31:46.202]                   "error", "condition")))
[09:31:46.202]             }))
[09:31:46.202]             future::FutureResult(value = ...future.value$value, 
[09:31:46.202]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.202]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.202]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.202]                     ...future.globalenv.names))
[09:31:46.202]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.202]         }, condition = base::local({
[09:31:46.202]             c <- base::c
[09:31:46.202]             inherits <- base::inherits
[09:31:46.202]             invokeRestart <- base::invokeRestart
[09:31:46.202]             length <- base::length
[09:31:46.202]             list <- base::list
[09:31:46.202]             seq.int <- base::seq.int
[09:31:46.202]             signalCondition <- base::signalCondition
[09:31:46.202]             sys.calls <- base::sys.calls
[09:31:46.202]             `[[` <- base::`[[`
[09:31:46.202]             `+` <- base::`+`
[09:31:46.202]             `<<-` <- base::`<<-`
[09:31:46.202]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.202]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.202]                   3L)]
[09:31:46.202]             }
[09:31:46.202]             function(cond) {
[09:31:46.202]                 is_error <- inherits(cond, "error")
[09:31:46.202]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.202]                   NULL)
[09:31:46.202]                 if (is_error) {
[09:31:46.202]                   sessionInformation <- function() {
[09:31:46.202]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.202]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.202]                       search = base::search(), system = base::Sys.info())
[09:31:46.202]                   }
[09:31:46.202]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.202]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.202]                     cond$call), session = sessionInformation(), 
[09:31:46.202]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.202]                   signalCondition(cond)
[09:31:46.202]                 }
[09:31:46.202]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.202]                 "immediateCondition"))) {
[09:31:46.202]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.202]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.202]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.202]                   if (TRUE && !signal) {
[09:31:46.202]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.202]                     {
[09:31:46.202]                       inherits <- base::inherits
[09:31:46.202]                       invokeRestart <- base::invokeRestart
[09:31:46.202]                       is.null <- base::is.null
[09:31:46.202]                       muffled <- FALSE
[09:31:46.202]                       if (inherits(cond, "message")) {
[09:31:46.202]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.202]                         if (muffled) 
[09:31:46.202]                           invokeRestart("muffleMessage")
[09:31:46.202]                       }
[09:31:46.202]                       else if (inherits(cond, "warning")) {
[09:31:46.202]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.202]                         if (muffled) 
[09:31:46.202]                           invokeRestart("muffleWarning")
[09:31:46.202]                       }
[09:31:46.202]                       else if (inherits(cond, "condition")) {
[09:31:46.202]                         if (!is.null(pattern)) {
[09:31:46.202]                           computeRestarts <- base::computeRestarts
[09:31:46.202]                           grepl <- base::grepl
[09:31:46.202]                           restarts <- computeRestarts(cond)
[09:31:46.202]                           for (restart in restarts) {
[09:31:46.202]                             name <- restart$name
[09:31:46.202]                             if (is.null(name)) 
[09:31:46.202]                               next
[09:31:46.202]                             if (!grepl(pattern, name)) 
[09:31:46.202]                               next
[09:31:46.202]                             invokeRestart(restart)
[09:31:46.202]                             muffled <- TRUE
[09:31:46.202]                             break
[09:31:46.202]                           }
[09:31:46.202]                         }
[09:31:46.202]                       }
[09:31:46.202]                       invisible(muffled)
[09:31:46.202]                     }
[09:31:46.202]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.202]                   }
[09:31:46.202]                 }
[09:31:46.202]                 else {
[09:31:46.202]                   if (TRUE) {
[09:31:46.202]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.202]                     {
[09:31:46.202]                       inherits <- base::inherits
[09:31:46.202]                       invokeRestart <- base::invokeRestart
[09:31:46.202]                       is.null <- base::is.null
[09:31:46.202]                       muffled <- FALSE
[09:31:46.202]                       if (inherits(cond, "message")) {
[09:31:46.202]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.202]                         if (muffled) 
[09:31:46.202]                           invokeRestart("muffleMessage")
[09:31:46.202]                       }
[09:31:46.202]                       else if (inherits(cond, "warning")) {
[09:31:46.202]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.202]                         if (muffled) 
[09:31:46.202]                           invokeRestart("muffleWarning")
[09:31:46.202]                       }
[09:31:46.202]                       else if (inherits(cond, "condition")) {
[09:31:46.202]                         if (!is.null(pattern)) {
[09:31:46.202]                           computeRestarts <- base::computeRestarts
[09:31:46.202]                           grepl <- base::grepl
[09:31:46.202]                           restarts <- computeRestarts(cond)
[09:31:46.202]                           for (restart in restarts) {
[09:31:46.202]                             name <- restart$name
[09:31:46.202]                             if (is.null(name)) 
[09:31:46.202]                               next
[09:31:46.202]                             if (!grepl(pattern, name)) 
[09:31:46.202]                               next
[09:31:46.202]                             invokeRestart(restart)
[09:31:46.202]                             muffled <- TRUE
[09:31:46.202]                             break
[09:31:46.202]                           }
[09:31:46.202]                         }
[09:31:46.202]                       }
[09:31:46.202]                       invisible(muffled)
[09:31:46.202]                     }
[09:31:46.202]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.202]                   }
[09:31:46.202]                 }
[09:31:46.202]             }
[09:31:46.202]         }))
[09:31:46.202]     }, error = function(ex) {
[09:31:46.202]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.202]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.202]                 ...future.rng), started = ...future.startTime, 
[09:31:46.202]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.202]             version = "1.8"), class = "FutureResult")
[09:31:46.202]     }, finally = {
[09:31:46.202]         if (!identical(...future.workdir, getwd())) 
[09:31:46.202]             setwd(...future.workdir)
[09:31:46.202]         {
[09:31:46.202]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.202]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.202]             }
[09:31:46.202]             base::options(...future.oldOptions)
[09:31:46.202]             if (.Platform$OS.type == "windows") {
[09:31:46.202]                 old_names <- names(...future.oldEnvVars)
[09:31:46.202]                 envs <- base::Sys.getenv()
[09:31:46.202]                 names <- names(envs)
[09:31:46.202]                 common <- intersect(names, old_names)
[09:31:46.202]                 added <- setdiff(names, old_names)
[09:31:46.202]                 removed <- setdiff(old_names, names)
[09:31:46.202]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.202]                   envs[common]]
[09:31:46.202]                 NAMES <- toupper(changed)
[09:31:46.202]                 args <- list()
[09:31:46.202]                 for (kk in seq_along(NAMES)) {
[09:31:46.202]                   name <- changed[[kk]]
[09:31:46.202]                   NAME <- NAMES[[kk]]
[09:31:46.202]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.202]                     next
[09:31:46.202]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.202]                 }
[09:31:46.202]                 NAMES <- toupper(added)
[09:31:46.202]                 for (kk in seq_along(NAMES)) {
[09:31:46.202]                   name <- added[[kk]]
[09:31:46.202]                   NAME <- NAMES[[kk]]
[09:31:46.202]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.202]                     next
[09:31:46.202]                   args[[name]] <- ""
[09:31:46.202]                 }
[09:31:46.202]                 NAMES <- toupper(removed)
[09:31:46.202]                 for (kk in seq_along(NAMES)) {
[09:31:46.202]                   name <- removed[[kk]]
[09:31:46.202]                   NAME <- NAMES[[kk]]
[09:31:46.202]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.202]                     next
[09:31:46.202]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.202]                 }
[09:31:46.202]                 if (length(args) > 0) 
[09:31:46.202]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.202]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.202]             }
[09:31:46.202]             else {
[09:31:46.202]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.202]             }
[09:31:46.202]             {
[09:31:46.202]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.202]                   0L) {
[09:31:46.202]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.202]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.202]                   base::options(opts)
[09:31:46.202]                 }
[09:31:46.202]                 {
[09:31:46.202]                   {
[09:31:46.202]                     NULL
[09:31:46.202]                     RNGkind("Mersenne-Twister")
[09:31:46.202]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:46.202]                       inherits = FALSE)
[09:31:46.202]                   }
[09:31:46.202]                   options(future.plan = NULL)
[09:31:46.202]                   if (is.na(NA_character_)) 
[09:31:46.202]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.202]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.202]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.202]                     .init = FALSE)
[09:31:46.202]                 }
[09:31:46.202]             }
[09:31:46.202]         }
[09:31:46.202]     })
[09:31:46.202]     if (TRUE) {
[09:31:46.202]         base::sink(type = "output", split = FALSE)
[09:31:46.202]         if (TRUE) {
[09:31:46.202]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.202]         }
[09:31:46.202]         else {
[09:31:46.202]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.202]         }
[09:31:46.202]         base::close(...future.stdout)
[09:31:46.202]         ...future.stdout <- NULL
[09:31:46.202]     }
[09:31:46.202]     ...future.result$conditions <- ...future.conditions
[09:31:46.202]     ...future.result$finished <- base::Sys.time()
[09:31:46.202]     ...future.result
[09:31:46.202] }
[09:31:46.204] plan(): Setting new future strategy stack:
[09:31:46.204] List of future strategies:
[09:31:46.204] 1. sequential:
[09:31:46.204]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.204]    - tweaked: FALSE
[09:31:46.204]    - call: NULL
[09:31:46.204] plan(): nbrOfWorkers() = 1
[09:31:46.205] plan(): Setting new future strategy stack:
[09:31:46.205] List of future strategies:
[09:31:46.205] 1. sequential:
[09:31:46.205]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.205]    - tweaked: FALSE
[09:31:46.205]    - call: future::plan("sequential")
[09:31:46.206] plan(): nbrOfWorkers() = 1
[09:31:46.206] SequentialFuture started (and completed)
[09:31:46.206] signalConditions() ...
[09:31:46.206]  - include = ‘immediateCondition’
[09:31:46.206]  - exclude = 
[09:31:46.206]  - resignal = FALSE
[09:31:46.206]  - Number of conditions: 1
[09:31:46.206] signalConditions() ... done
[09:31:46.206] signalConditions() ...
[09:31:46.206]  - include = ‘immediateCondition’
[09:31:46.207]  - exclude = 
[09:31:46.207]  - resignal = FALSE
[09:31:46.207]  - Number of conditions: 1
[09:31:46.207] signalConditions() ... done
<MyError: boom>
[09:31:46.207] signalConditions() ...
[09:31:46.207]  - include = ‘immediateCondition’
[09:31:46.207]  - exclude = 
[09:31:46.207]  - resignal = FALSE
[09:31:46.207]  - Number of conditions: 1
[09:31:46.207] signalConditions() ... done
[09:31:46.207] Future state: ‘finished’
[09:31:46.208] signalConditions() ...
[09:31:46.208]  - include = ‘condition’
[09:31:46.208]  - exclude = ‘immediateCondition’
[09:31:46.208]  - resignal = TRUE
[09:31:46.208]  - Number of conditions: 1
[09:31:46.208]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[09:31:46.208] signalConditions() ... done
Testing with 1 cores ... DONE
Testing with 2 cores ...
[09:31:46.213] getGlobalsAndPackages() ...
[09:31:46.213] 
[09:31:46.213] - globals: [0] <none>
[09:31:46.213] getGlobalsAndPackages() ... DONE
[09:31:46.214] [local output] makeClusterPSOCK() ...
[09:31:46.247] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:31:46.248] [local output] Base port: 11608
[09:31:46.248] [local output] Getting setup options for 2 cluster nodes ...
[09:31:46.248] [local output]  - Node 1 of 2 ...
[09:31:46.248] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:46.249] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp1Uz65Q/worker.rank=1.parallelly.parent=45638.b2463f07a40.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp1Uz65Q/worker.rank=1.parallelly.parent=45638.b2463f07a40.pid")'’
[09:31:46.434] - Possible to infer worker's PID: TRUE
[09:31:46.434] [local output] Rscript port: 11608

[09:31:46.434] [local output]  - Node 2 of 2 ...
[09:31:46.435] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:46.435] [local output] Rscript port: 11608

[09:31:46.436] [local output] Getting setup options for 2 cluster nodes ... done
[09:31:46.436] [local output]  - Parallel setup requested for some PSOCK nodes
[09:31:46.436] [local output] Setting up PSOCK nodes in parallel
[09:31:46.436] List of 36
[09:31:46.436]  $ worker          : chr "localhost"
[09:31:46.436]   ..- attr(*, "localhost")= logi TRUE
[09:31:46.436]  $ master          : chr "localhost"
[09:31:46.436]  $ port            : int 11608
[09:31:46.436]  $ connectTimeout  : num 120
[09:31:46.436]  $ timeout         : num 2592000
[09:31:46.436]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:31:46.436]  $ homogeneous     : logi TRUE
[09:31:46.436]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:31:46.436]  $ rscript_envs    : NULL
[09:31:46.436]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:46.436]  $ rscript_startup : NULL
[09:31:46.436]  $ rscript_sh      : chr "sh"
[09:31:46.436]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:46.436]  $ methods         : logi TRUE
[09:31:46.436]  $ socketOptions   : chr "no-delay"
[09:31:46.436]  $ useXDR          : logi FALSE
[09:31:46.436]  $ outfile         : chr "/dev/null"
[09:31:46.436]  $ renice          : int NA
[09:31:46.436]  $ rshcmd          : NULL
[09:31:46.436]  $ user            : chr(0) 
[09:31:46.436]  $ revtunnel       : logi FALSE
[09:31:46.436]  $ rshlogfile      : NULL
[09:31:46.436]  $ rshopts         : chr(0) 
[09:31:46.436]  $ rank            : int 1
[09:31:46.436]  $ manual          : logi FALSE
[09:31:46.436]  $ dryrun          : logi FALSE
[09:31:46.436]  $ quiet           : logi FALSE
[09:31:46.436]  $ setup_strategy  : chr "parallel"
[09:31:46.436]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:46.436]  $ pidfile         : chr "/tmp/Rtmp1Uz65Q/worker.rank=1.parallelly.parent=45638.b2463f07a40.pid"
[09:31:46.436]  $ rshcmd_label    : NULL
[09:31:46.436]  $ rsh_call        : NULL
[09:31:46.436]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:46.436]  $ localMachine    : logi TRUE
[09:31:46.436]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:31:46.436]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:31:46.436]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:31:46.436]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:31:46.436]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:31:46.436]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:31:46.436]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:31:46.436]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:31:46.436]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:31:46.436]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:31:46.436]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:31:46.436]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:31:46.436]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:31:46.436]  $ arguments       :List of 28
[09:31:46.436]   ..$ worker          : chr "localhost"
[09:31:46.436]   ..$ master          : NULL
[09:31:46.436]   ..$ port            : int 11608
[09:31:46.436]   ..$ connectTimeout  : num 120
[09:31:46.436]   ..$ timeout         : num 2592000
[09:31:46.436]   ..$ rscript         : NULL
[09:31:46.436]   ..$ homogeneous     : NULL
[09:31:46.436]   ..$ rscript_args    : NULL
[09:31:46.436]   ..$ rscript_envs    : NULL
[09:31:46.436]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:46.436]   ..$ rscript_startup : NULL
[09:31:46.436]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:31:46.436]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:46.436]   ..$ methods         : logi TRUE
[09:31:46.436]   ..$ socketOptions   : chr "no-delay"
[09:31:46.436]   ..$ useXDR          : logi FALSE
[09:31:46.436]   ..$ outfile         : chr "/dev/null"
[09:31:46.436]   ..$ renice          : int NA
[09:31:46.436]   ..$ rshcmd          : NULL
[09:31:46.436]   ..$ user            : NULL
[09:31:46.436]   ..$ revtunnel       : logi NA
[09:31:46.436]   ..$ rshlogfile      : NULL
[09:31:46.436]   ..$ rshopts         : NULL
[09:31:46.436]   ..$ rank            : int 1
[09:31:46.436]   ..$ manual          : logi FALSE
[09:31:46.436]   ..$ dryrun          : logi FALSE
[09:31:46.436]   ..$ quiet           : logi FALSE
[09:31:46.436]   ..$ setup_strategy  : chr "parallel"
[09:31:46.436]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:31:46.453] [local output] System call to launch all workers:
[09:31:46.453] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp1Uz65Q/worker.rank=1.parallelly.parent=45638.b2463f07a40.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11608 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:31:46.453] [local output] Starting PSOCK main server
[09:31:46.458] [local output] Workers launched
[09:31:46.458] [local output] Waiting for workers to connect back
[09:31:46.459]  - [local output] 0 workers out of 2 ready
[09:31:46.702]  - [local output] 0 workers out of 2 ready
[09:31:46.703]  - [local output] 1 workers out of 2 ready
[09:31:46.703]  - [local output] 2 workers out of 2 ready
[09:31:46.703] [local output] Launching of workers completed
[09:31:46.703] [local output] Collecting session information from workers
[09:31:46.704] [local output]  - Worker #1 of 2
[09:31:46.705] [local output]  - Worker #2 of 2
[09:31:46.705] [local output] makeClusterPSOCK() ... done
[09:31:46.717] Packages needed by the future expression (n = 0): <none>
[09:31:46.717] Packages needed by future strategies (n = 0): <none>
[09:31:46.717] {
[09:31:46.717]     {
[09:31:46.717]         {
[09:31:46.717]             ...future.startTime <- base::Sys.time()
[09:31:46.717]             {
[09:31:46.717]                 {
[09:31:46.717]                   {
[09:31:46.717]                     {
[09:31:46.717]                       base::local({
[09:31:46.717]                         has_future <- base::requireNamespace("future", 
[09:31:46.717]                           quietly = TRUE)
[09:31:46.717]                         if (has_future) {
[09:31:46.717]                           ns <- base::getNamespace("future")
[09:31:46.717]                           version <- ns[[".package"]][["version"]]
[09:31:46.717]                           if (is.null(version)) 
[09:31:46.717]                             version <- utils::packageVersion("future")
[09:31:46.717]                         }
[09:31:46.717]                         else {
[09:31:46.717]                           version <- NULL
[09:31:46.717]                         }
[09:31:46.717]                         if (!has_future || version < "1.8.0") {
[09:31:46.717]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.717]                             "", base::R.version$version.string), 
[09:31:46.717]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:46.717]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.717]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.717]                               "release", "version")], collapse = " "), 
[09:31:46.717]                             hostname = base::Sys.info()[["nodename"]])
[09:31:46.717]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.717]                             info)
[09:31:46.717]                           info <- base::paste(info, collapse = "; ")
[09:31:46.717]                           if (!has_future) {
[09:31:46.717]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.717]                               info)
[09:31:46.717]                           }
[09:31:46.717]                           else {
[09:31:46.717]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.717]                               info, version)
[09:31:46.717]                           }
[09:31:46.717]                           base::stop(msg)
[09:31:46.717]                         }
[09:31:46.717]                       })
[09:31:46.717]                     }
[09:31:46.717]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:46.717]                     base::options(mc.cores = 1L)
[09:31:46.717]                   }
[09:31:46.717]                   ...future.strategy.old <- future::plan("list")
[09:31:46.717]                   options(future.plan = NULL)
[09:31:46.717]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.717]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.717]                 }
[09:31:46.717]                 ...future.workdir <- getwd()
[09:31:46.717]             }
[09:31:46.717]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.717]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.717]         }
[09:31:46.717]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.717]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.717]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.717]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.717]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.717]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.717]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.717]             base::names(...future.oldOptions))
[09:31:46.717]     }
[09:31:46.717]     if (FALSE) {
[09:31:46.717]     }
[09:31:46.717]     else {
[09:31:46.717]         if (TRUE) {
[09:31:46.717]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.717]                 open = "w")
[09:31:46.717]         }
[09:31:46.717]         else {
[09:31:46.717]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.717]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.717]         }
[09:31:46.717]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.717]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.717]             base::sink(type = "output", split = FALSE)
[09:31:46.717]             base::close(...future.stdout)
[09:31:46.717]         }, add = TRUE)
[09:31:46.717]     }
[09:31:46.717]     ...future.frame <- base::sys.nframe()
[09:31:46.717]     ...future.conditions <- base::list()
[09:31:46.717]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.717]     if (FALSE) {
[09:31:46.717]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.717]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.717]     }
[09:31:46.717]     ...future.result <- base::tryCatch({
[09:31:46.717]         base::withCallingHandlers({
[09:31:46.717]             ...future.value <- base::withVisible(base::local({
[09:31:46.717]                 ...future.makeSendCondition <- base::local({
[09:31:46.717]                   sendCondition <- NULL
[09:31:46.717]                   function(frame = 1L) {
[09:31:46.717]                     if (is.function(sendCondition)) 
[09:31:46.717]                       return(sendCondition)
[09:31:46.717]                     ns <- getNamespace("parallel")
[09:31:46.717]                     if (exists("sendData", mode = "function", 
[09:31:46.717]                       envir = ns)) {
[09:31:46.717]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:46.717]                         envir = ns)
[09:31:46.717]                       envir <- sys.frame(frame)
[09:31:46.717]                       master <- NULL
[09:31:46.717]                       while (!identical(envir, .GlobalEnv) && 
[09:31:46.717]                         !identical(envir, emptyenv())) {
[09:31:46.717]                         if (exists("master", mode = "list", envir = envir, 
[09:31:46.717]                           inherits = FALSE)) {
[09:31:46.717]                           master <- get("master", mode = "list", 
[09:31:46.717]                             envir = envir, inherits = FALSE)
[09:31:46.717]                           if (inherits(master, c("SOCKnode", 
[09:31:46.717]                             "SOCK0node"))) {
[09:31:46.717]                             sendCondition <<- function(cond) {
[09:31:46.717]                               data <- list(type = "VALUE", value = cond, 
[09:31:46.717]                                 success = TRUE)
[09:31:46.717]                               parallel_sendData(master, data)
[09:31:46.717]                             }
[09:31:46.717]                             return(sendCondition)
[09:31:46.717]                           }
[09:31:46.717]                         }
[09:31:46.717]                         frame <- frame + 1L
[09:31:46.717]                         envir <- sys.frame(frame)
[09:31:46.717]                       }
[09:31:46.717]                     }
[09:31:46.717]                     sendCondition <<- function(cond) NULL
[09:31:46.717]                   }
[09:31:46.717]                 })
[09:31:46.717]                 withCallingHandlers({
[09:31:46.717]                   {
[09:31:46.717]                     42L
[09:31:46.717]                   }
[09:31:46.717]                 }, immediateCondition = function(cond) {
[09:31:46.717]                   sendCondition <- ...future.makeSendCondition()
[09:31:46.717]                   sendCondition(cond)
[09:31:46.717]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.717]                   {
[09:31:46.717]                     inherits <- base::inherits
[09:31:46.717]                     invokeRestart <- base::invokeRestart
[09:31:46.717]                     is.null <- base::is.null
[09:31:46.717]                     muffled <- FALSE
[09:31:46.717]                     if (inherits(cond, "message")) {
[09:31:46.717]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:46.717]                       if (muffled) 
[09:31:46.717]                         invokeRestart("muffleMessage")
[09:31:46.717]                     }
[09:31:46.717]                     else if (inherits(cond, "warning")) {
[09:31:46.717]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:46.717]                       if (muffled) 
[09:31:46.717]                         invokeRestart("muffleWarning")
[09:31:46.717]                     }
[09:31:46.717]                     else if (inherits(cond, "condition")) {
[09:31:46.717]                       if (!is.null(pattern)) {
[09:31:46.717]                         computeRestarts <- base::computeRestarts
[09:31:46.717]                         grepl <- base::grepl
[09:31:46.717]                         restarts <- computeRestarts(cond)
[09:31:46.717]                         for (restart in restarts) {
[09:31:46.717]                           name <- restart$name
[09:31:46.717]                           if (is.null(name)) 
[09:31:46.717]                             next
[09:31:46.717]                           if (!grepl(pattern, name)) 
[09:31:46.717]                             next
[09:31:46.717]                           invokeRestart(restart)
[09:31:46.717]                           muffled <- TRUE
[09:31:46.717]                           break
[09:31:46.717]                         }
[09:31:46.717]                       }
[09:31:46.717]                     }
[09:31:46.717]                     invisible(muffled)
[09:31:46.717]                   }
[09:31:46.717]                   muffleCondition(cond)
[09:31:46.717]                 })
[09:31:46.717]             }))
[09:31:46.717]             future::FutureResult(value = ...future.value$value, 
[09:31:46.717]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.717]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.717]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.717]                     ...future.globalenv.names))
[09:31:46.717]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.717]         }, condition = base::local({
[09:31:46.717]             c <- base::c
[09:31:46.717]             inherits <- base::inherits
[09:31:46.717]             invokeRestart <- base::invokeRestart
[09:31:46.717]             length <- base::length
[09:31:46.717]             list <- base::list
[09:31:46.717]             seq.int <- base::seq.int
[09:31:46.717]             signalCondition <- base::signalCondition
[09:31:46.717]             sys.calls <- base::sys.calls
[09:31:46.717]             `[[` <- base::`[[`
[09:31:46.717]             `+` <- base::`+`
[09:31:46.717]             `<<-` <- base::`<<-`
[09:31:46.717]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.717]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.717]                   3L)]
[09:31:46.717]             }
[09:31:46.717]             function(cond) {
[09:31:46.717]                 is_error <- inherits(cond, "error")
[09:31:46.717]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.717]                   NULL)
[09:31:46.717]                 if (is_error) {
[09:31:46.717]                   sessionInformation <- function() {
[09:31:46.717]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.717]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.717]                       search = base::search(), system = base::Sys.info())
[09:31:46.717]                   }
[09:31:46.717]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.717]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.717]                     cond$call), session = sessionInformation(), 
[09:31:46.717]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.717]                   signalCondition(cond)
[09:31:46.717]                 }
[09:31:46.717]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.717]                 "immediateCondition"))) {
[09:31:46.717]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.717]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.717]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.717]                   if (TRUE && !signal) {
[09:31:46.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.717]                     {
[09:31:46.717]                       inherits <- base::inherits
[09:31:46.717]                       invokeRestart <- base::invokeRestart
[09:31:46.717]                       is.null <- base::is.null
[09:31:46.717]                       muffled <- FALSE
[09:31:46.717]                       if (inherits(cond, "message")) {
[09:31:46.717]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.717]                         if (muffled) 
[09:31:46.717]                           invokeRestart("muffleMessage")
[09:31:46.717]                       }
[09:31:46.717]                       else if (inherits(cond, "warning")) {
[09:31:46.717]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.717]                         if (muffled) 
[09:31:46.717]                           invokeRestart("muffleWarning")
[09:31:46.717]                       }
[09:31:46.717]                       else if (inherits(cond, "condition")) {
[09:31:46.717]                         if (!is.null(pattern)) {
[09:31:46.717]                           computeRestarts <- base::computeRestarts
[09:31:46.717]                           grepl <- base::grepl
[09:31:46.717]                           restarts <- computeRestarts(cond)
[09:31:46.717]                           for (restart in restarts) {
[09:31:46.717]                             name <- restart$name
[09:31:46.717]                             if (is.null(name)) 
[09:31:46.717]                               next
[09:31:46.717]                             if (!grepl(pattern, name)) 
[09:31:46.717]                               next
[09:31:46.717]                             invokeRestart(restart)
[09:31:46.717]                             muffled <- TRUE
[09:31:46.717]                             break
[09:31:46.717]                           }
[09:31:46.717]                         }
[09:31:46.717]                       }
[09:31:46.717]                       invisible(muffled)
[09:31:46.717]                     }
[09:31:46.717]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.717]                   }
[09:31:46.717]                 }
[09:31:46.717]                 else {
[09:31:46.717]                   if (TRUE) {
[09:31:46.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.717]                     {
[09:31:46.717]                       inherits <- base::inherits
[09:31:46.717]                       invokeRestart <- base::invokeRestart
[09:31:46.717]                       is.null <- base::is.null
[09:31:46.717]                       muffled <- FALSE
[09:31:46.717]                       if (inherits(cond, "message")) {
[09:31:46.717]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.717]                         if (muffled) 
[09:31:46.717]                           invokeRestart("muffleMessage")
[09:31:46.717]                       }
[09:31:46.717]                       else if (inherits(cond, "warning")) {
[09:31:46.717]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.717]                         if (muffled) 
[09:31:46.717]                           invokeRestart("muffleWarning")
[09:31:46.717]                       }
[09:31:46.717]                       else if (inherits(cond, "condition")) {
[09:31:46.717]                         if (!is.null(pattern)) {
[09:31:46.717]                           computeRestarts <- base::computeRestarts
[09:31:46.717]                           grepl <- base::grepl
[09:31:46.717]                           restarts <- computeRestarts(cond)
[09:31:46.717]                           for (restart in restarts) {
[09:31:46.717]                             name <- restart$name
[09:31:46.717]                             if (is.null(name)) 
[09:31:46.717]                               next
[09:31:46.717]                             if (!grepl(pattern, name)) 
[09:31:46.717]                               next
[09:31:46.717]                             invokeRestart(restart)
[09:31:46.717]                             muffled <- TRUE
[09:31:46.717]                             break
[09:31:46.717]                           }
[09:31:46.717]                         }
[09:31:46.717]                       }
[09:31:46.717]                       invisible(muffled)
[09:31:46.717]                     }
[09:31:46.717]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.717]                   }
[09:31:46.717]                 }
[09:31:46.717]             }
[09:31:46.717]         }))
[09:31:46.717]     }, error = function(ex) {
[09:31:46.717]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.717]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.717]                 ...future.rng), started = ...future.startTime, 
[09:31:46.717]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.717]             version = "1.8"), class = "FutureResult")
[09:31:46.717]     }, finally = {
[09:31:46.717]         if (!identical(...future.workdir, getwd())) 
[09:31:46.717]             setwd(...future.workdir)
[09:31:46.717]         {
[09:31:46.717]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.717]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.717]             }
[09:31:46.717]             base::options(...future.oldOptions)
[09:31:46.717]             if (.Platform$OS.type == "windows") {
[09:31:46.717]                 old_names <- names(...future.oldEnvVars)
[09:31:46.717]                 envs <- base::Sys.getenv()
[09:31:46.717]                 names <- names(envs)
[09:31:46.717]                 common <- intersect(names, old_names)
[09:31:46.717]                 added <- setdiff(names, old_names)
[09:31:46.717]                 removed <- setdiff(old_names, names)
[09:31:46.717]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.717]                   envs[common]]
[09:31:46.717]                 NAMES <- toupper(changed)
[09:31:46.717]                 args <- list()
[09:31:46.717]                 for (kk in seq_along(NAMES)) {
[09:31:46.717]                   name <- changed[[kk]]
[09:31:46.717]                   NAME <- NAMES[[kk]]
[09:31:46.717]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.717]                     next
[09:31:46.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.717]                 }
[09:31:46.717]                 NAMES <- toupper(added)
[09:31:46.717]                 for (kk in seq_along(NAMES)) {
[09:31:46.717]                   name <- added[[kk]]
[09:31:46.717]                   NAME <- NAMES[[kk]]
[09:31:46.717]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.717]                     next
[09:31:46.717]                   args[[name]] <- ""
[09:31:46.717]                 }
[09:31:46.717]                 NAMES <- toupper(removed)
[09:31:46.717]                 for (kk in seq_along(NAMES)) {
[09:31:46.717]                   name <- removed[[kk]]
[09:31:46.717]                   NAME <- NAMES[[kk]]
[09:31:46.717]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.717]                     next
[09:31:46.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.717]                 }
[09:31:46.717]                 if (length(args) > 0) 
[09:31:46.717]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.717]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.717]             }
[09:31:46.717]             else {
[09:31:46.717]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.717]             }
[09:31:46.717]             {
[09:31:46.717]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.717]                   0L) {
[09:31:46.717]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.717]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.717]                   base::options(opts)
[09:31:46.717]                 }
[09:31:46.717]                 {
[09:31:46.717]                   {
[09:31:46.717]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:46.717]                     NULL
[09:31:46.717]                   }
[09:31:46.717]                   options(future.plan = NULL)
[09:31:46.717]                   if (is.na(NA_character_)) 
[09:31:46.717]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.717]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.717]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.717]                     .init = FALSE)
[09:31:46.717]                 }
[09:31:46.717]             }
[09:31:46.717]         }
[09:31:46.717]     })
[09:31:46.717]     if (TRUE) {
[09:31:46.717]         base::sink(type = "output", split = FALSE)
[09:31:46.717]         if (TRUE) {
[09:31:46.717]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.717]         }
[09:31:46.717]         else {
[09:31:46.717]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.717]         }
[09:31:46.717]         base::close(...future.stdout)
[09:31:46.717]         ...future.stdout <- NULL
[09:31:46.717]     }
[09:31:46.717]     ...future.result$conditions <- ...future.conditions
[09:31:46.717]     ...future.result$finished <- base::Sys.time()
[09:31:46.717]     ...future.result
[09:31:46.717] }
[09:31:46.768] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d4a020fd-dec5-7248-6e9b-560e9778c064
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[1] FALSE
[09:31:46.790] result() for ClusterFuture ...
[09:31:46.791] receiveMessageFromWorker() for ClusterFuture ...
[09:31:46.791] - Validating connection of MultisessionFuture
[09:31:46.800] - received message: FutureResult
[09:31:46.800] - Received FutureResult
[09:31:46.803] - Erased future from FutureRegistry
[09:31:46.803] result() for ClusterFuture ...
[09:31:46.803] - result already collected: FutureResult
[09:31:46.803] result() for ClusterFuture ... done
[09:31:46.803] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:46.804] result() for ClusterFuture ... done
[09:31:46.804] result() for ClusterFuture ...
[09:31:46.804] - result already collected: FutureResult
[09:31:46.804] result() for ClusterFuture ... done
[1] 42
[09:31:46.808] getGlobalsAndPackages() ...
[09:31:46.808] Searching for globals...
[09:31:46.810] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[09:31:46.810] Searching for globals ... DONE
[09:31:46.810] Resolving globals: FALSE
[09:31:46.811] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:46.811] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[09:31:46.811] - globals: [1] ‘a’
[09:31:46.812] 
[09:31:46.812] getGlobalsAndPackages() ... DONE
[09:31:46.823] Packages needed by the future expression (n = 0): <none>
[09:31:46.823] Packages needed by future strategies (n = 0): <none>
[09:31:46.823] {
[09:31:46.823]     {
[09:31:46.823]         {
[09:31:46.823]             ...future.startTime <- base::Sys.time()
[09:31:46.823]             {
[09:31:46.823]                 {
[09:31:46.823]                   {
[09:31:46.823]                     {
[09:31:46.823]                       base::local({
[09:31:46.823]                         has_future <- base::requireNamespace("future", 
[09:31:46.823]                           quietly = TRUE)
[09:31:46.823]                         if (has_future) {
[09:31:46.823]                           ns <- base::getNamespace("future")
[09:31:46.823]                           version <- ns[[".package"]][["version"]]
[09:31:46.823]                           if (is.null(version)) 
[09:31:46.823]                             version <- utils::packageVersion("future")
[09:31:46.823]                         }
[09:31:46.823]                         else {
[09:31:46.823]                           version <- NULL
[09:31:46.823]                         }
[09:31:46.823]                         if (!has_future || version < "1.8.0") {
[09:31:46.823]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.823]                             "", base::R.version$version.string), 
[09:31:46.823]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:46.823]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.823]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.823]                               "release", "version")], collapse = " "), 
[09:31:46.823]                             hostname = base::Sys.info()[["nodename"]])
[09:31:46.823]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.823]                             info)
[09:31:46.823]                           info <- base::paste(info, collapse = "; ")
[09:31:46.823]                           if (!has_future) {
[09:31:46.823]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.823]                               info)
[09:31:46.823]                           }
[09:31:46.823]                           else {
[09:31:46.823]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.823]                               info, version)
[09:31:46.823]                           }
[09:31:46.823]                           base::stop(msg)
[09:31:46.823]                         }
[09:31:46.823]                       })
[09:31:46.823]                     }
[09:31:46.823]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:46.823]                     base::options(mc.cores = 1L)
[09:31:46.823]                   }
[09:31:46.823]                   ...future.strategy.old <- future::plan("list")
[09:31:46.823]                   options(future.plan = NULL)
[09:31:46.823]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.823]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.823]                 }
[09:31:46.823]                 ...future.workdir <- getwd()
[09:31:46.823]             }
[09:31:46.823]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.823]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.823]         }
[09:31:46.823]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.823]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.823]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.823]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.823]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.823]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.823]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.823]             base::names(...future.oldOptions))
[09:31:46.823]     }
[09:31:46.823]     if (FALSE) {
[09:31:46.823]     }
[09:31:46.823]     else {
[09:31:46.823]         if (TRUE) {
[09:31:46.823]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.823]                 open = "w")
[09:31:46.823]         }
[09:31:46.823]         else {
[09:31:46.823]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.823]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.823]         }
[09:31:46.823]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.823]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.823]             base::sink(type = "output", split = FALSE)
[09:31:46.823]             base::close(...future.stdout)
[09:31:46.823]         }, add = TRUE)
[09:31:46.823]     }
[09:31:46.823]     ...future.frame <- base::sys.nframe()
[09:31:46.823]     ...future.conditions <- base::list()
[09:31:46.823]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.823]     if (FALSE) {
[09:31:46.823]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.823]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.823]     }
[09:31:46.823]     ...future.result <- base::tryCatch({
[09:31:46.823]         base::withCallingHandlers({
[09:31:46.823]             ...future.value <- base::withVisible(base::local({
[09:31:46.823]                 ...future.makeSendCondition <- base::local({
[09:31:46.823]                   sendCondition <- NULL
[09:31:46.823]                   function(frame = 1L) {
[09:31:46.823]                     if (is.function(sendCondition)) 
[09:31:46.823]                       return(sendCondition)
[09:31:46.823]                     ns <- getNamespace("parallel")
[09:31:46.823]                     if (exists("sendData", mode = "function", 
[09:31:46.823]                       envir = ns)) {
[09:31:46.823]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:46.823]                         envir = ns)
[09:31:46.823]                       envir <- sys.frame(frame)
[09:31:46.823]                       master <- NULL
[09:31:46.823]                       while (!identical(envir, .GlobalEnv) && 
[09:31:46.823]                         !identical(envir, emptyenv())) {
[09:31:46.823]                         if (exists("master", mode = "list", envir = envir, 
[09:31:46.823]                           inherits = FALSE)) {
[09:31:46.823]                           master <- get("master", mode = "list", 
[09:31:46.823]                             envir = envir, inherits = FALSE)
[09:31:46.823]                           if (inherits(master, c("SOCKnode", 
[09:31:46.823]                             "SOCK0node"))) {
[09:31:46.823]                             sendCondition <<- function(cond) {
[09:31:46.823]                               data <- list(type = "VALUE", value = cond, 
[09:31:46.823]                                 success = TRUE)
[09:31:46.823]                               parallel_sendData(master, data)
[09:31:46.823]                             }
[09:31:46.823]                             return(sendCondition)
[09:31:46.823]                           }
[09:31:46.823]                         }
[09:31:46.823]                         frame <- frame + 1L
[09:31:46.823]                         envir <- sys.frame(frame)
[09:31:46.823]                       }
[09:31:46.823]                     }
[09:31:46.823]                     sendCondition <<- function(cond) NULL
[09:31:46.823]                   }
[09:31:46.823]                 })
[09:31:46.823]                 withCallingHandlers({
[09:31:46.823]                   {
[09:31:46.823]                     b <- 3
[09:31:46.823]                     c <- 2
[09:31:46.823]                     a * b * c
[09:31:46.823]                   }
[09:31:46.823]                 }, immediateCondition = function(cond) {
[09:31:46.823]                   sendCondition <- ...future.makeSendCondition()
[09:31:46.823]                   sendCondition(cond)
[09:31:46.823]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.823]                   {
[09:31:46.823]                     inherits <- base::inherits
[09:31:46.823]                     invokeRestart <- base::invokeRestart
[09:31:46.823]                     is.null <- base::is.null
[09:31:46.823]                     muffled <- FALSE
[09:31:46.823]                     if (inherits(cond, "message")) {
[09:31:46.823]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:46.823]                       if (muffled) 
[09:31:46.823]                         invokeRestart("muffleMessage")
[09:31:46.823]                     }
[09:31:46.823]                     else if (inherits(cond, "warning")) {
[09:31:46.823]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:46.823]                       if (muffled) 
[09:31:46.823]                         invokeRestart("muffleWarning")
[09:31:46.823]                     }
[09:31:46.823]                     else if (inherits(cond, "condition")) {
[09:31:46.823]                       if (!is.null(pattern)) {
[09:31:46.823]                         computeRestarts <- base::computeRestarts
[09:31:46.823]                         grepl <- base::grepl
[09:31:46.823]                         restarts <- computeRestarts(cond)
[09:31:46.823]                         for (restart in restarts) {
[09:31:46.823]                           name <- restart$name
[09:31:46.823]                           if (is.null(name)) 
[09:31:46.823]                             next
[09:31:46.823]                           if (!grepl(pattern, name)) 
[09:31:46.823]                             next
[09:31:46.823]                           invokeRestart(restart)
[09:31:46.823]                           muffled <- TRUE
[09:31:46.823]                           break
[09:31:46.823]                         }
[09:31:46.823]                       }
[09:31:46.823]                     }
[09:31:46.823]                     invisible(muffled)
[09:31:46.823]                   }
[09:31:46.823]                   muffleCondition(cond)
[09:31:46.823]                 })
[09:31:46.823]             }))
[09:31:46.823]             future::FutureResult(value = ...future.value$value, 
[09:31:46.823]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.823]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.823]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.823]                     ...future.globalenv.names))
[09:31:46.823]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.823]         }, condition = base::local({
[09:31:46.823]             c <- base::c
[09:31:46.823]             inherits <- base::inherits
[09:31:46.823]             invokeRestart <- base::invokeRestart
[09:31:46.823]             length <- base::length
[09:31:46.823]             list <- base::list
[09:31:46.823]             seq.int <- base::seq.int
[09:31:46.823]             signalCondition <- base::signalCondition
[09:31:46.823]             sys.calls <- base::sys.calls
[09:31:46.823]             `[[` <- base::`[[`
[09:31:46.823]             `+` <- base::`+`
[09:31:46.823]             `<<-` <- base::`<<-`
[09:31:46.823]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.823]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.823]                   3L)]
[09:31:46.823]             }
[09:31:46.823]             function(cond) {
[09:31:46.823]                 is_error <- inherits(cond, "error")
[09:31:46.823]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.823]                   NULL)
[09:31:46.823]                 if (is_error) {
[09:31:46.823]                   sessionInformation <- function() {
[09:31:46.823]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.823]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.823]                       search = base::search(), system = base::Sys.info())
[09:31:46.823]                   }
[09:31:46.823]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.823]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.823]                     cond$call), session = sessionInformation(), 
[09:31:46.823]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.823]                   signalCondition(cond)
[09:31:46.823]                 }
[09:31:46.823]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.823]                 "immediateCondition"))) {
[09:31:46.823]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.823]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.823]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.823]                   if (TRUE && !signal) {
[09:31:46.823]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.823]                     {
[09:31:46.823]                       inherits <- base::inherits
[09:31:46.823]                       invokeRestart <- base::invokeRestart
[09:31:46.823]                       is.null <- base::is.null
[09:31:46.823]                       muffled <- FALSE
[09:31:46.823]                       if (inherits(cond, "message")) {
[09:31:46.823]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.823]                         if (muffled) 
[09:31:46.823]                           invokeRestart("muffleMessage")
[09:31:46.823]                       }
[09:31:46.823]                       else if (inherits(cond, "warning")) {
[09:31:46.823]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.823]                         if (muffled) 
[09:31:46.823]                           invokeRestart("muffleWarning")
[09:31:46.823]                       }
[09:31:46.823]                       else if (inherits(cond, "condition")) {
[09:31:46.823]                         if (!is.null(pattern)) {
[09:31:46.823]                           computeRestarts <- base::computeRestarts
[09:31:46.823]                           grepl <- base::grepl
[09:31:46.823]                           restarts <- computeRestarts(cond)
[09:31:46.823]                           for (restart in restarts) {
[09:31:46.823]                             name <- restart$name
[09:31:46.823]                             if (is.null(name)) 
[09:31:46.823]                               next
[09:31:46.823]                             if (!grepl(pattern, name)) 
[09:31:46.823]                               next
[09:31:46.823]                             invokeRestart(restart)
[09:31:46.823]                             muffled <- TRUE
[09:31:46.823]                             break
[09:31:46.823]                           }
[09:31:46.823]                         }
[09:31:46.823]                       }
[09:31:46.823]                       invisible(muffled)
[09:31:46.823]                     }
[09:31:46.823]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.823]                   }
[09:31:46.823]                 }
[09:31:46.823]                 else {
[09:31:46.823]                   if (TRUE) {
[09:31:46.823]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.823]                     {
[09:31:46.823]                       inherits <- base::inherits
[09:31:46.823]                       invokeRestart <- base::invokeRestart
[09:31:46.823]                       is.null <- base::is.null
[09:31:46.823]                       muffled <- FALSE
[09:31:46.823]                       if (inherits(cond, "message")) {
[09:31:46.823]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.823]                         if (muffled) 
[09:31:46.823]                           invokeRestart("muffleMessage")
[09:31:46.823]                       }
[09:31:46.823]                       else if (inherits(cond, "warning")) {
[09:31:46.823]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.823]                         if (muffled) 
[09:31:46.823]                           invokeRestart("muffleWarning")
[09:31:46.823]                       }
[09:31:46.823]                       else if (inherits(cond, "condition")) {
[09:31:46.823]                         if (!is.null(pattern)) {
[09:31:46.823]                           computeRestarts <- base::computeRestarts
[09:31:46.823]                           grepl <- base::grepl
[09:31:46.823]                           restarts <- computeRestarts(cond)
[09:31:46.823]                           for (restart in restarts) {
[09:31:46.823]                             name <- restart$name
[09:31:46.823]                             if (is.null(name)) 
[09:31:46.823]                               next
[09:31:46.823]                             if (!grepl(pattern, name)) 
[09:31:46.823]                               next
[09:31:46.823]                             invokeRestart(restart)
[09:31:46.823]                             muffled <- TRUE
[09:31:46.823]                             break
[09:31:46.823]                           }
[09:31:46.823]                         }
[09:31:46.823]                       }
[09:31:46.823]                       invisible(muffled)
[09:31:46.823]                     }
[09:31:46.823]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.823]                   }
[09:31:46.823]                 }
[09:31:46.823]             }
[09:31:46.823]         }))
[09:31:46.823]     }, error = function(ex) {
[09:31:46.823]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.823]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.823]                 ...future.rng), started = ...future.startTime, 
[09:31:46.823]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.823]             version = "1.8"), class = "FutureResult")
[09:31:46.823]     }, finally = {
[09:31:46.823]         if (!identical(...future.workdir, getwd())) 
[09:31:46.823]             setwd(...future.workdir)
[09:31:46.823]         {
[09:31:46.823]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.823]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.823]             }
[09:31:46.823]             base::options(...future.oldOptions)
[09:31:46.823]             if (.Platform$OS.type == "windows") {
[09:31:46.823]                 old_names <- names(...future.oldEnvVars)
[09:31:46.823]                 envs <- base::Sys.getenv()
[09:31:46.823]                 names <- names(envs)
[09:31:46.823]                 common <- intersect(names, old_names)
[09:31:46.823]                 added <- setdiff(names, old_names)
[09:31:46.823]                 removed <- setdiff(old_names, names)
[09:31:46.823]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.823]                   envs[common]]
[09:31:46.823]                 NAMES <- toupper(changed)
[09:31:46.823]                 args <- list()
[09:31:46.823]                 for (kk in seq_along(NAMES)) {
[09:31:46.823]                   name <- changed[[kk]]
[09:31:46.823]                   NAME <- NAMES[[kk]]
[09:31:46.823]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.823]                     next
[09:31:46.823]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.823]                 }
[09:31:46.823]                 NAMES <- toupper(added)
[09:31:46.823]                 for (kk in seq_along(NAMES)) {
[09:31:46.823]                   name <- added[[kk]]
[09:31:46.823]                   NAME <- NAMES[[kk]]
[09:31:46.823]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.823]                     next
[09:31:46.823]                   args[[name]] <- ""
[09:31:46.823]                 }
[09:31:46.823]                 NAMES <- toupper(removed)
[09:31:46.823]                 for (kk in seq_along(NAMES)) {
[09:31:46.823]                   name <- removed[[kk]]
[09:31:46.823]                   NAME <- NAMES[[kk]]
[09:31:46.823]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.823]                     next
[09:31:46.823]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.823]                 }
[09:31:46.823]                 if (length(args) > 0) 
[09:31:46.823]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.823]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.823]             }
[09:31:46.823]             else {
[09:31:46.823]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.823]             }
[09:31:46.823]             {
[09:31:46.823]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.823]                   0L) {
[09:31:46.823]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.823]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.823]                   base::options(opts)
[09:31:46.823]                 }
[09:31:46.823]                 {
[09:31:46.823]                   {
[09:31:46.823]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:46.823]                     NULL
[09:31:46.823]                   }
[09:31:46.823]                   options(future.plan = NULL)
[09:31:46.823]                   if (is.na(NA_character_)) 
[09:31:46.823]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.823]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.823]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.823]                     .init = FALSE)
[09:31:46.823]                 }
[09:31:46.823]             }
[09:31:46.823]         }
[09:31:46.823]     })
[09:31:46.823]     if (TRUE) {
[09:31:46.823]         base::sink(type = "output", split = FALSE)
[09:31:46.823]         if (TRUE) {
[09:31:46.823]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.823]         }
[09:31:46.823]         else {
[09:31:46.823]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.823]         }
[09:31:46.823]         base::close(...future.stdout)
[09:31:46.823]         ...future.stdout <- NULL
[09:31:46.823]     }
[09:31:46.823]     ...future.result$conditions <- ...future.conditions
[09:31:46.823]     ...future.result$finished <- base::Sys.time()
[09:31:46.823]     ...future.result
[09:31:46.823] }
[09:31:46.826] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[09:31:46.826] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[09:31:46.827] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[09:31:46.827] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[09:31:46.828] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:46.830] receiveMessageFromWorker() for ClusterFuture ...
[09:31:46.830] - Validating connection of MultisessionFuture
[09:31:46.830] - received message: FutureResult
[09:31:46.830] - Received FutureResult
[09:31:46.830] - Erased future from FutureRegistry
[09:31:46.830] result() for ClusterFuture ...
[09:31:46.830] - result already collected: FutureResult
[09:31:46.831] result() for ClusterFuture ... done
[09:31:46.831] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d4a020fd-dec5-7248-6e9b-560e9778c064
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:46.831] result() for ClusterFuture ...
[09:31:46.831] - result already collected: FutureResult
[09:31:46.831] result() for ClusterFuture ... done
[09:31:46.831] result() for ClusterFuture ...
[09:31:46.831] - result already collected: FutureResult
[09:31:46.831] result() for ClusterFuture ... done
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[09:31:46.835] getGlobalsAndPackages() ...
[09:31:46.835] Searching for globals...
[09:31:46.836] - globals found: [2] ‘{’, ‘ii’
[09:31:46.836] Searching for globals ... DONE
[09:31:46.836] Resolving globals: FALSE
[09:31:46.837] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:46.837] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:46.837] - globals: [1] ‘ii’
[09:31:46.838] 
[09:31:46.838] getGlobalsAndPackages() ... DONE
[09:31:46.849] Packages needed by the future expression (n = 0): <none>
[09:31:46.849] Packages needed by future strategies (n = 0): <none>
[09:31:46.849] {
[09:31:46.849]     {
[09:31:46.849]         {
[09:31:46.849]             ...future.startTime <- base::Sys.time()
[09:31:46.849]             {
[09:31:46.849]                 {
[09:31:46.849]                   {
[09:31:46.849]                     {
[09:31:46.849]                       base::local({
[09:31:46.849]                         has_future <- base::requireNamespace("future", 
[09:31:46.849]                           quietly = TRUE)
[09:31:46.849]                         if (has_future) {
[09:31:46.849]                           ns <- base::getNamespace("future")
[09:31:46.849]                           version <- ns[[".package"]][["version"]]
[09:31:46.849]                           if (is.null(version)) 
[09:31:46.849]                             version <- utils::packageVersion("future")
[09:31:46.849]                         }
[09:31:46.849]                         else {
[09:31:46.849]                           version <- NULL
[09:31:46.849]                         }
[09:31:46.849]                         if (!has_future || version < "1.8.0") {
[09:31:46.849]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.849]                             "", base::R.version$version.string), 
[09:31:46.849]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:46.849]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.849]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.849]                               "release", "version")], collapse = " "), 
[09:31:46.849]                             hostname = base::Sys.info()[["nodename"]])
[09:31:46.849]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.849]                             info)
[09:31:46.849]                           info <- base::paste(info, collapse = "; ")
[09:31:46.849]                           if (!has_future) {
[09:31:46.849]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.849]                               info)
[09:31:46.849]                           }
[09:31:46.849]                           else {
[09:31:46.849]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.849]                               info, version)
[09:31:46.849]                           }
[09:31:46.849]                           base::stop(msg)
[09:31:46.849]                         }
[09:31:46.849]                       })
[09:31:46.849]                     }
[09:31:46.849]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:46.849]                     base::options(mc.cores = 1L)
[09:31:46.849]                   }
[09:31:46.849]                   ...future.strategy.old <- future::plan("list")
[09:31:46.849]                   options(future.plan = NULL)
[09:31:46.849]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.849]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.849]                 }
[09:31:46.849]                 ...future.workdir <- getwd()
[09:31:46.849]             }
[09:31:46.849]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.849]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.849]         }
[09:31:46.849]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.849]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.849]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.849]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.849]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.849]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.849]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.849]             base::names(...future.oldOptions))
[09:31:46.849]     }
[09:31:46.849]     if (FALSE) {
[09:31:46.849]     }
[09:31:46.849]     else {
[09:31:46.849]         if (TRUE) {
[09:31:46.849]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.849]                 open = "w")
[09:31:46.849]         }
[09:31:46.849]         else {
[09:31:46.849]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.849]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.849]         }
[09:31:46.849]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.849]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.849]             base::sink(type = "output", split = FALSE)
[09:31:46.849]             base::close(...future.stdout)
[09:31:46.849]         }, add = TRUE)
[09:31:46.849]     }
[09:31:46.849]     ...future.frame <- base::sys.nframe()
[09:31:46.849]     ...future.conditions <- base::list()
[09:31:46.849]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.849]     if (FALSE) {
[09:31:46.849]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.849]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.849]     }
[09:31:46.849]     ...future.result <- base::tryCatch({
[09:31:46.849]         base::withCallingHandlers({
[09:31:46.849]             ...future.value <- base::withVisible(base::local({
[09:31:46.849]                 ...future.makeSendCondition <- base::local({
[09:31:46.849]                   sendCondition <- NULL
[09:31:46.849]                   function(frame = 1L) {
[09:31:46.849]                     if (is.function(sendCondition)) 
[09:31:46.849]                       return(sendCondition)
[09:31:46.849]                     ns <- getNamespace("parallel")
[09:31:46.849]                     if (exists("sendData", mode = "function", 
[09:31:46.849]                       envir = ns)) {
[09:31:46.849]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:46.849]                         envir = ns)
[09:31:46.849]                       envir <- sys.frame(frame)
[09:31:46.849]                       master <- NULL
[09:31:46.849]                       while (!identical(envir, .GlobalEnv) && 
[09:31:46.849]                         !identical(envir, emptyenv())) {
[09:31:46.849]                         if (exists("master", mode = "list", envir = envir, 
[09:31:46.849]                           inherits = FALSE)) {
[09:31:46.849]                           master <- get("master", mode = "list", 
[09:31:46.849]                             envir = envir, inherits = FALSE)
[09:31:46.849]                           if (inherits(master, c("SOCKnode", 
[09:31:46.849]                             "SOCK0node"))) {
[09:31:46.849]                             sendCondition <<- function(cond) {
[09:31:46.849]                               data <- list(type = "VALUE", value = cond, 
[09:31:46.849]                                 success = TRUE)
[09:31:46.849]                               parallel_sendData(master, data)
[09:31:46.849]                             }
[09:31:46.849]                             return(sendCondition)
[09:31:46.849]                           }
[09:31:46.849]                         }
[09:31:46.849]                         frame <- frame + 1L
[09:31:46.849]                         envir <- sys.frame(frame)
[09:31:46.849]                       }
[09:31:46.849]                     }
[09:31:46.849]                     sendCondition <<- function(cond) NULL
[09:31:46.849]                   }
[09:31:46.849]                 })
[09:31:46.849]                 withCallingHandlers({
[09:31:46.849]                   {
[09:31:46.849]                     ii
[09:31:46.849]                   }
[09:31:46.849]                 }, immediateCondition = function(cond) {
[09:31:46.849]                   sendCondition <- ...future.makeSendCondition()
[09:31:46.849]                   sendCondition(cond)
[09:31:46.849]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.849]                   {
[09:31:46.849]                     inherits <- base::inherits
[09:31:46.849]                     invokeRestart <- base::invokeRestart
[09:31:46.849]                     is.null <- base::is.null
[09:31:46.849]                     muffled <- FALSE
[09:31:46.849]                     if (inherits(cond, "message")) {
[09:31:46.849]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:46.849]                       if (muffled) 
[09:31:46.849]                         invokeRestart("muffleMessage")
[09:31:46.849]                     }
[09:31:46.849]                     else if (inherits(cond, "warning")) {
[09:31:46.849]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:46.849]                       if (muffled) 
[09:31:46.849]                         invokeRestart("muffleWarning")
[09:31:46.849]                     }
[09:31:46.849]                     else if (inherits(cond, "condition")) {
[09:31:46.849]                       if (!is.null(pattern)) {
[09:31:46.849]                         computeRestarts <- base::computeRestarts
[09:31:46.849]                         grepl <- base::grepl
[09:31:46.849]                         restarts <- computeRestarts(cond)
[09:31:46.849]                         for (restart in restarts) {
[09:31:46.849]                           name <- restart$name
[09:31:46.849]                           if (is.null(name)) 
[09:31:46.849]                             next
[09:31:46.849]                           if (!grepl(pattern, name)) 
[09:31:46.849]                             next
[09:31:46.849]                           invokeRestart(restart)
[09:31:46.849]                           muffled <- TRUE
[09:31:46.849]                           break
[09:31:46.849]                         }
[09:31:46.849]                       }
[09:31:46.849]                     }
[09:31:46.849]                     invisible(muffled)
[09:31:46.849]                   }
[09:31:46.849]                   muffleCondition(cond)
[09:31:46.849]                 })
[09:31:46.849]             }))
[09:31:46.849]             future::FutureResult(value = ...future.value$value, 
[09:31:46.849]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.849]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.849]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.849]                     ...future.globalenv.names))
[09:31:46.849]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.849]         }, condition = base::local({
[09:31:46.849]             c <- base::c
[09:31:46.849]             inherits <- base::inherits
[09:31:46.849]             invokeRestart <- base::invokeRestart
[09:31:46.849]             length <- base::length
[09:31:46.849]             list <- base::list
[09:31:46.849]             seq.int <- base::seq.int
[09:31:46.849]             signalCondition <- base::signalCondition
[09:31:46.849]             sys.calls <- base::sys.calls
[09:31:46.849]             `[[` <- base::`[[`
[09:31:46.849]             `+` <- base::`+`
[09:31:46.849]             `<<-` <- base::`<<-`
[09:31:46.849]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.849]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.849]                   3L)]
[09:31:46.849]             }
[09:31:46.849]             function(cond) {
[09:31:46.849]                 is_error <- inherits(cond, "error")
[09:31:46.849]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.849]                   NULL)
[09:31:46.849]                 if (is_error) {
[09:31:46.849]                   sessionInformation <- function() {
[09:31:46.849]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.849]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.849]                       search = base::search(), system = base::Sys.info())
[09:31:46.849]                   }
[09:31:46.849]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.849]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.849]                     cond$call), session = sessionInformation(), 
[09:31:46.849]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.849]                   signalCondition(cond)
[09:31:46.849]                 }
[09:31:46.849]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.849]                 "immediateCondition"))) {
[09:31:46.849]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.849]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.849]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.849]                   if (TRUE && !signal) {
[09:31:46.849]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.849]                     {
[09:31:46.849]                       inherits <- base::inherits
[09:31:46.849]                       invokeRestart <- base::invokeRestart
[09:31:46.849]                       is.null <- base::is.null
[09:31:46.849]                       muffled <- FALSE
[09:31:46.849]                       if (inherits(cond, "message")) {
[09:31:46.849]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.849]                         if (muffled) 
[09:31:46.849]                           invokeRestart("muffleMessage")
[09:31:46.849]                       }
[09:31:46.849]                       else if (inherits(cond, "warning")) {
[09:31:46.849]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.849]                         if (muffled) 
[09:31:46.849]                           invokeRestart("muffleWarning")
[09:31:46.849]                       }
[09:31:46.849]                       else if (inherits(cond, "condition")) {
[09:31:46.849]                         if (!is.null(pattern)) {
[09:31:46.849]                           computeRestarts <- base::computeRestarts
[09:31:46.849]                           grepl <- base::grepl
[09:31:46.849]                           restarts <- computeRestarts(cond)
[09:31:46.849]                           for (restart in restarts) {
[09:31:46.849]                             name <- restart$name
[09:31:46.849]                             if (is.null(name)) 
[09:31:46.849]                               next
[09:31:46.849]                             if (!grepl(pattern, name)) 
[09:31:46.849]                               next
[09:31:46.849]                             invokeRestart(restart)
[09:31:46.849]                             muffled <- TRUE
[09:31:46.849]                             break
[09:31:46.849]                           }
[09:31:46.849]                         }
[09:31:46.849]                       }
[09:31:46.849]                       invisible(muffled)
[09:31:46.849]                     }
[09:31:46.849]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.849]                   }
[09:31:46.849]                 }
[09:31:46.849]                 else {
[09:31:46.849]                   if (TRUE) {
[09:31:46.849]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.849]                     {
[09:31:46.849]                       inherits <- base::inherits
[09:31:46.849]                       invokeRestart <- base::invokeRestart
[09:31:46.849]                       is.null <- base::is.null
[09:31:46.849]                       muffled <- FALSE
[09:31:46.849]                       if (inherits(cond, "message")) {
[09:31:46.849]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.849]                         if (muffled) 
[09:31:46.849]                           invokeRestart("muffleMessage")
[09:31:46.849]                       }
[09:31:46.849]                       else if (inherits(cond, "warning")) {
[09:31:46.849]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.849]                         if (muffled) 
[09:31:46.849]                           invokeRestart("muffleWarning")
[09:31:46.849]                       }
[09:31:46.849]                       else if (inherits(cond, "condition")) {
[09:31:46.849]                         if (!is.null(pattern)) {
[09:31:46.849]                           computeRestarts <- base::computeRestarts
[09:31:46.849]                           grepl <- base::grepl
[09:31:46.849]                           restarts <- computeRestarts(cond)
[09:31:46.849]                           for (restart in restarts) {
[09:31:46.849]                             name <- restart$name
[09:31:46.849]                             if (is.null(name)) 
[09:31:46.849]                               next
[09:31:46.849]                             if (!grepl(pattern, name)) 
[09:31:46.849]                               next
[09:31:46.849]                             invokeRestart(restart)
[09:31:46.849]                             muffled <- TRUE
[09:31:46.849]                             break
[09:31:46.849]                           }
[09:31:46.849]                         }
[09:31:46.849]                       }
[09:31:46.849]                       invisible(muffled)
[09:31:46.849]                     }
[09:31:46.849]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.849]                   }
[09:31:46.849]                 }
[09:31:46.849]             }
[09:31:46.849]         }))
[09:31:46.849]     }, error = function(ex) {
[09:31:46.849]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.849]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.849]                 ...future.rng), started = ...future.startTime, 
[09:31:46.849]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.849]             version = "1.8"), class = "FutureResult")
[09:31:46.849]     }, finally = {
[09:31:46.849]         if (!identical(...future.workdir, getwd())) 
[09:31:46.849]             setwd(...future.workdir)
[09:31:46.849]         {
[09:31:46.849]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.849]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.849]             }
[09:31:46.849]             base::options(...future.oldOptions)
[09:31:46.849]             if (.Platform$OS.type == "windows") {
[09:31:46.849]                 old_names <- names(...future.oldEnvVars)
[09:31:46.849]                 envs <- base::Sys.getenv()
[09:31:46.849]                 names <- names(envs)
[09:31:46.849]                 common <- intersect(names, old_names)
[09:31:46.849]                 added <- setdiff(names, old_names)
[09:31:46.849]                 removed <- setdiff(old_names, names)
[09:31:46.849]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.849]                   envs[common]]
[09:31:46.849]                 NAMES <- toupper(changed)
[09:31:46.849]                 args <- list()
[09:31:46.849]                 for (kk in seq_along(NAMES)) {
[09:31:46.849]                   name <- changed[[kk]]
[09:31:46.849]                   NAME <- NAMES[[kk]]
[09:31:46.849]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.849]                     next
[09:31:46.849]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.849]                 }
[09:31:46.849]                 NAMES <- toupper(added)
[09:31:46.849]                 for (kk in seq_along(NAMES)) {
[09:31:46.849]                   name <- added[[kk]]
[09:31:46.849]                   NAME <- NAMES[[kk]]
[09:31:46.849]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.849]                     next
[09:31:46.849]                   args[[name]] <- ""
[09:31:46.849]                 }
[09:31:46.849]                 NAMES <- toupper(removed)
[09:31:46.849]                 for (kk in seq_along(NAMES)) {
[09:31:46.849]                   name <- removed[[kk]]
[09:31:46.849]                   NAME <- NAMES[[kk]]
[09:31:46.849]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.849]                     next
[09:31:46.849]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.849]                 }
[09:31:46.849]                 if (length(args) > 0) 
[09:31:46.849]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.849]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.849]             }
[09:31:46.849]             else {
[09:31:46.849]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.849]             }
[09:31:46.849]             {
[09:31:46.849]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.849]                   0L) {
[09:31:46.849]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.849]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.849]                   base::options(opts)
[09:31:46.849]                 }
[09:31:46.849]                 {
[09:31:46.849]                   {
[09:31:46.849]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:46.849]                     NULL
[09:31:46.849]                   }
[09:31:46.849]                   options(future.plan = NULL)
[09:31:46.849]                   if (is.na(NA_character_)) 
[09:31:46.849]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.849]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.849]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.849]                     .init = FALSE)
[09:31:46.849]                 }
[09:31:46.849]             }
[09:31:46.849]         }
[09:31:46.849]     })
[09:31:46.849]     if (TRUE) {
[09:31:46.849]         base::sink(type = "output", split = FALSE)
[09:31:46.849]         if (TRUE) {
[09:31:46.849]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.849]         }
[09:31:46.849]         else {
[09:31:46.849]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.849]         }
[09:31:46.849]         base::close(...future.stdout)
[09:31:46.849]         ...future.stdout <- NULL
[09:31:46.849]     }
[09:31:46.849]     ...future.result$conditions <- ...future.conditions
[09:31:46.849]     ...future.result$finished <- base::Sys.time()
[09:31:46.849]     ...future.result
[09:31:46.849] }
[09:31:46.852] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[09:31:46.852] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[09:31:46.852] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[09:31:46.853] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[09:31:46.853] MultisessionFuture started
 - Creating multisession future #1 ...
[09:31:46.858] getGlobalsAndPackages() ...
[09:31:46.858] Searching for globals...
[09:31:46.859] - globals found: [2] ‘{’, ‘ii’
[09:31:46.859] Searching for globals ... DONE
[09:31:46.859] Resolving globals: FALSE
[09:31:46.860] The total size of the 1 globals is 56 bytes (56 bytes)
[09:31:46.860] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[09:31:46.860] - globals: [1] ‘ii’
[09:31:46.861] 
[09:31:46.861] getGlobalsAndPackages() ... DONE
[09:31:46.872] Packages needed by the future expression (n = 0): <none>
[09:31:46.872] Packages needed by future strategies (n = 0): <none>
[09:31:46.872] {
[09:31:46.872]     {
[09:31:46.872]         {
[09:31:46.872]             ...future.startTime <- base::Sys.time()
[09:31:46.872]             {
[09:31:46.872]                 {
[09:31:46.872]                   {
[09:31:46.872]                     {
[09:31:46.872]                       base::local({
[09:31:46.872]                         has_future <- base::requireNamespace("future", 
[09:31:46.872]                           quietly = TRUE)
[09:31:46.872]                         if (has_future) {
[09:31:46.872]                           ns <- base::getNamespace("future")
[09:31:46.872]                           version <- ns[[".package"]][["version"]]
[09:31:46.872]                           if (is.null(version)) 
[09:31:46.872]                             version <- utils::packageVersion("future")
[09:31:46.872]                         }
[09:31:46.872]                         else {
[09:31:46.872]                           version <- NULL
[09:31:46.872]                         }
[09:31:46.872]                         if (!has_future || version < "1.8.0") {
[09:31:46.872]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.872]                             "", base::R.version$version.string), 
[09:31:46.872]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:46.872]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.872]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.872]                               "release", "version")], collapse = " "), 
[09:31:46.872]                             hostname = base::Sys.info()[["nodename"]])
[09:31:46.872]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.872]                             info)
[09:31:46.872]                           info <- base::paste(info, collapse = "; ")
[09:31:46.872]                           if (!has_future) {
[09:31:46.872]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.872]                               info)
[09:31:46.872]                           }
[09:31:46.872]                           else {
[09:31:46.872]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.872]                               info, version)
[09:31:46.872]                           }
[09:31:46.872]                           base::stop(msg)
[09:31:46.872]                         }
[09:31:46.872]                       })
[09:31:46.872]                     }
[09:31:46.872]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:46.872]                     base::options(mc.cores = 1L)
[09:31:46.872]                   }
[09:31:46.872]                   ...future.strategy.old <- future::plan("list")
[09:31:46.872]                   options(future.plan = NULL)
[09:31:46.872]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.872]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.872]                 }
[09:31:46.872]                 ...future.workdir <- getwd()
[09:31:46.872]             }
[09:31:46.872]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.872]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.872]         }
[09:31:46.872]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.872]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.872]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.872]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.872]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.872]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.872]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.872]             base::names(...future.oldOptions))
[09:31:46.872]     }
[09:31:46.872]     if (FALSE) {
[09:31:46.872]     }
[09:31:46.872]     else {
[09:31:46.872]         if (TRUE) {
[09:31:46.872]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.872]                 open = "w")
[09:31:46.872]         }
[09:31:46.872]         else {
[09:31:46.872]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.872]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.872]         }
[09:31:46.872]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.872]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.872]             base::sink(type = "output", split = FALSE)
[09:31:46.872]             base::close(...future.stdout)
[09:31:46.872]         }, add = TRUE)
[09:31:46.872]     }
[09:31:46.872]     ...future.frame <- base::sys.nframe()
[09:31:46.872]     ...future.conditions <- base::list()
[09:31:46.872]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.872]     if (FALSE) {
[09:31:46.872]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.872]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.872]     }
[09:31:46.872]     ...future.result <- base::tryCatch({
[09:31:46.872]         base::withCallingHandlers({
[09:31:46.872]             ...future.value <- base::withVisible(base::local({
[09:31:46.872]                 ...future.makeSendCondition <- base::local({
[09:31:46.872]                   sendCondition <- NULL
[09:31:46.872]                   function(frame = 1L) {
[09:31:46.872]                     if (is.function(sendCondition)) 
[09:31:46.872]                       return(sendCondition)
[09:31:46.872]                     ns <- getNamespace("parallel")
[09:31:46.872]                     if (exists("sendData", mode = "function", 
[09:31:46.872]                       envir = ns)) {
[09:31:46.872]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:46.872]                         envir = ns)
[09:31:46.872]                       envir <- sys.frame(frame)
[09:31:46.872]                       master <- NULL
[09:31:46.872]                       while (!identical(envir, .GlobalEnv) && 
[09:31:46.872]                         !identical(envir, emptyenv())) {
[09:31:46.872]                         if (exists("master", mode = "list", envir = envir, 
[09:31:46.872]                           inherits = FALSE)) {
[09:31:46.872]                           master <- get("master", mode = "list", 
[09:31:46.872]                             envir = envir, inherits = FALSE)
[09:31:46.872]                           if (inherits(master, c("SOCKnode", 
[09:31:46.872]                             "SOCK0node"))) {
[09:31:46.872]                             sendCondition <<- function(cond) {
[09:31:46.872]                               data <- list(type = "VALUE", value = cond, 
[09:31:46.872]                                 success = TRUE)
[09:31:46.872]                               parallel_sendData(master, data)
[09:31:46.872]                             }
[09:31:46.872]                             return(sendCondition)
[09:31:46.872]                           }
[09:31:46.872]                         }
[09:31:46.872]                         frame <- frame + 1L
[09:31:46.872]                         envir <- sys.frame(frame)
[09:31:46.872]                       }
[09:31:46.872]                     }
[09:31:46.872]                     sendCondition <<- function(cond) NULL
[09:31:46.872]                   }
[09:31:46.872]                 })
[09:31:46.872]                 withCallingHandlers({
[09:31:46.872]                   {
[09:31:46.872]                     ii
[09:31:46.872]                   }
[09:31:46.872]                 }, immediateCondition = function(cond) {
[09:31:46.872]                   sendCondition <- ...future.makeSendCondition()
[09:31:46.872]                   sendCondition(cond)
[09:31:46.872]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.872]                   {
[09:31:46.872]                     inherits <- base::inherits
[09:31:46.872]                     invokeRestart <- base::invokeRestart
[09:31:46.872]                     is.null <- base::is.null
[09:31:46.872]                     muffled <- FALSE
[09:31:46.872]                     if (inherits(cond, "message")) {
[09:31:46.872]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:46.872]                       if (muffled) 
[09:31:46.872]                         invokeRestart("muffleMessage")
[09:31:46.872]                     }
[09:31:46.872]                     else if (inherits(cond, "warning")) {
[09:31:46.872]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:46.872]                       if (muffled) 
[09:31:46.872]                         invokeRestart("muffleWarning")
[09:31:46.872]                     }
[09:31:46.872]                     else if (inherits(cond, "condition")) {
[09:31:46.872]                       if (!is.null(pattern)) {
[09:31:46.872]                         computeRestarts <- base::computeRestarts
[09:31:46.872]                         grepl <- base::grepl
[09:31:46.872]                         restarts <- computeRestarts(cond)
[09:31:46.872]                         for (restart in restarts) {
[09:31:46.872]                           name <- restart$name
[09:31:46.872]                           if (is.null(name)) 
[09:31:46.872]                             next
[09:31:46.872]                           if (!grepl(pattern, name)) 
[09:31:46.872]                             next
[09:31:46.872]                           invokeRestart(restart)
[09:31:46.872]                           muffled <- TRUE
[09:31:46.872]                           break
[09:31:46.872]                         }
[09:31:46.872]                       }
[09:31:46.872]                     }
[09:31:46.872]                     invisible(muffled)
[09:31:46.872]                   }
[09:31:46.872]                   muffleCondition(cond)
[09:31:46.872]                 })
[09:31:46.872]             }))
[09:31:46.872]             future::FutureResult(value = ...future.value$value, 
[09:31:46.872]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.872]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.872]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.872]                     ...future.globalenv.names))
[09:31:46.872]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.872]         }, condition = base::local({
[09:31:46.872]             c <- base::c
[09:31:46.872]             inherits <- base::inherits
[09:31:46.872]             invokeRestart <- base::invokeRestart
[09:31:46.872]             length <- base::length
[09:31:46.872]             list <- base::list
[09:31:46.872]             seq.int <- base::seq.int
[09:31:46.872]             signalCondition <- base::signalCondition
[09:31:46.872]             sys.calls <- base::sys.calls
[09:31:46.872]             `[[` <- base::`[[`
[09:31:46.872]             `+` <- base::`+`
[09:31:46.872]             `<<-` <- base::`<<-`
[09:31:46.872]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.872]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.872]                   3L)]
[09:31:46.872]             }
[09:31:46.872]             function(cond) {
[09:31:46.872]                 is_error <- inherits(cond, "error")
[09:31:46.872]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.872]                   NULL)
[09:31:46.872]                 if (is_error) {
[09:31:46.872]                   sessionInformation <- function() {
[09:31:46.872]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.872]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.872]                       search = base::search(), system = base::Sys.info())
[09:31:46.872]                   }
[09:31:46.872]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.872]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.872]                     cond$call), session = sessionInformation(), 
[09:31:46.872]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.872]                   signalCondition(cond)
[09:31:46.872]                 }
[09:31:46.872]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.872]                 "immediateCondition"))) {
[09:31:46.872]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.872]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.872]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.872]                   if (TRUE && !signal) {
[09:31:46.872]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.872]                     {
[09:31:46.872]                       inherits <- base::inherits
[09:31:46.872]                       invokeRestart <- base::invokeRestart
[09:31:46.872]                       is.null <- base::is.null
[09:31:46.872]                       muffled <- FALSE
[09:31:46.872]                       if (inherits(cond, "message")) {
[09:31:46.872]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.872]                         if (muffled) 
[09:31:46.872]                           invokeRestart("muffleMessage")
[09:31:46.872]                       }
[09:31:46.872]                       else if (inherits(cond, "warning")) {
[09:31:46.872]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.872]                         if (muffled) 
[09:31:46.872]                           invokeRestart("muffleWarning")
[09:31:46.872]                       }
[09:31:46.872]                       else if (inherits(cond, "condition")) {
[09:31:46.872]                         if (!is.null(pattern)) {
[09:31:46.872]                           computeRestarts <- base::computeRestarts
[09:31:46.872]                           grepl <- base::grepl
[09:31:46.872]                           restarts <- computeRestarts(cond)
[09:31:46.872]                           for (restart in restarts) {
[09:31:46.872]                             name <- restart$name
[09:31:46.872]                             if (is.null(name)) 
[09:31:46.872]                               next
[09:31:46.872]                             if (!grepl(pattern, name)) 
[09:31:46.872]                               next
[09:31:46.872]                             invokeRestart(restart)
[09:31:46.872]                             muffled <- TRUE
[09:31:46.872]                             break
[09:31:46.872]                           }
[09:31:46.872]                         }
[09:31:46.872]                       }
[09:31:46.872]                       invisible(muffled)
[09:31:46.872]                     }
[09:31:46.872]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.872]                   }
[09:31:46.872]                 }
[09:31:46.872]                 else {
[09:31:46.872]                   if (TRUE) {
[09:31:46.872]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.872]                     {
[09:31:46.872]                       inherits <- base::inherits
[09:31:46.872]                       invokeRestart <- base::invokeRestart
[09:31:46.872]                       is.null <- base::is.null
[09:31:46.872]                       muffled <- FALSE
[09:31:46.872]                       if (inherits(cond, "message")) {
[09:31:46.872]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.872]                         if (muffled) 
[09:31:46.872]                           invokeRestart("muffleMessage")
[09:31:46.872]                       }
[09:31:46.872]                       else if (inherits(cond, "warning")) {
[09:31:46.872]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.872]                         if (muffled) 
[09:31:46.872]                           invokeRestart("muffleWarning")
[09:31:46.872]                       }
[09:31:46.872]                       else if (inherits(cond, "condition")) {
[09:31:46.872]                         if (!is.null(pattern)) {
[09:31:46.872]                           computeRestarts <- base::computeRestarts
[09:31:46.872]                           grepl <- base::grepl
[09:31:46.872]                           restarts <- computeRestarts(cond)
[09:31:46.872]                           for (restart in restarts) {
[09:31:46.872]                             name <- restart$name
[09:31:46.872]                             if (is.null(name)) 
[09:31:46.872]                               next
[09:31:46.872]                             if (!grepl(pattern, name)) 
[09:31:46.872]                               next
[09:31:46.872]                             invokeRestart(restart)
[09:31:46.872]                             muffled <- TRUE
[09:31:46.872]                             break
[09:31:46.872]                           }
[09:31:46.872]                         }
[09:31:46.872]                       }
[09:31:46.872]                       invisible(muffled)
[09:31:46.872]                     }
[09:31:46.872]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.872]                   }
[09:31:46.872]                 }
[09:31:46.872]             }
[09:31:46.872]         }))
[09:31:46.872]     }, error = function(ex) {
[09:31:46.872]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.872]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.872]                 ...future.rng), started = ...future.startTime, 
[09:31:46.872]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.872]             version = "1.8"), class = "FutureResult")
[09:31:46.872]     }, finally = {
[09:31:46.872]         if (!identical(...future.workdir, getwd())) 
[09:31:46.872]             setwd(...future.workdir)
[09:31:46.872]         {
[09:31:46.872]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.872]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.872]             }
[09:31:46.872]             base::options(...future.oldOptions)
[09:31:46.872]             if (.Platform$OS.type == "windows") {
[09:31:46.872]                 old_names <- names(...future.oldEnvVars)
[09:31:46.872]                 envs <- base::Sys.getenv()
[09:31:46.872]                 names <- names(envs)
[09:31:46.872]                 common <- intersect(names, old_names)
[09:31:46.872]                 added <- setdiff(names, old_names)
[09:31:46.872]                 removed <- setdiff(old_names, names)
[09:31:46.872]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.872]                   envs[common]]
[09:31:46.872]                 NAMES <- toupper(changed)
[09:31:46.872]                 args <- list()
[09:31:46.872]                 for (kk in seq_along(NAMES)) {
[09:31:46.872]                   name <- changed[[kk]]
[09:31:46.872]                   NAME <- NAMES[[kk]]
[09:31:46.872]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.872]                     next
[09:31:46.872]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.872]                 }
[09:31:46.872]                 NAMES <- toupper(added)
[09:31:46.872]                 for (kk in seq_along(NAMES)) {
[09:31:46.872]                   name <- added[[kk]]
[09:31:46.872]                   NAME <- NAMES[[kk]]
[09:31:46.872]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.872]                     next
[09:31:46.872]                   args[[name]] <- ""
[09:31:46.872]                 }
[09:31:46.872]                 NAMES <- toupper(removed)
[09:31:46.872]                 for (kk in seq_along(NAMES)) {
[09:31:46.872]                   name <- removed[[kk]]
[09:31:46.872]                   NAME <- NAMES[[kk]]
[09:31:46.872]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.872]                     next
[09:31:46.872]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.872]                 }
[09:31:46.872]                 if (length(args) > 0) 
[09:31:46.872]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.872]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.872]             }
[09:31:46.872]             else {
[09:31:46.872]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.872]             }
[09:31:46.872]             {
[09:31:46.872]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.872]                   0L) {
[09:31:46.872]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.872]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.872]                   base::options(opts)
[09:31:46.872]                 }
[09:31:46.872]                 {
[09:31:46.872]                   {
[09:31:46.872]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:46.872]                     NULL
[09:31:46.872]                   }
[09:31:46.872]                   options(future.plan = NULL)
[09:31:46.872]                   if (is.na(NA_character_)) 
[09:31:46.872]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.872]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.872]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.872]                     .init = FALSE)
[09:31:46.872]                 }
[09:31:46.872]             }
[09:31:46.872]         }
[09:31:46.872]     })
[09:31:46.872]     if (TRUE) {
[09:31:46.872]         base::sink(type = "output", split = FALSE)
[09:31:46.872]         if (TRUE) {
[09:31:46.872]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.872]         }
[09:31:46.872]         else {
[09:31:46.872]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.872]         }
[09:31:46.872]         base::close(...future.stdout)
[09:31:46.872]         ...future.stdout <- NULL
[09:31:46.872]     }
[09:31:46.872]     ...future.result$conditions <- ...future.conditions
[09:31:46.872]     ...future.result$finished <- base::Sys.time()
[09:31:46.872]     ...future.result
[09:31:46.872] }
[09:31:46.924] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[09:31:46.925] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[09:31:46.925] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[09:31:46.925] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[09:31:46.926] MultisessionFuture started
 - Resolving 2 multisession futures
[09:31:46.926] result() for ClusterFuture ...
[09:31:46.926] receiveMessageFromWorker() for ClusterFuture ...
[09:31:46.926] - Validating connection of MultisessionFuture
[09:31:46.958] - received message: FutureResult
[09:31:46.958] - Received FutureResult
[09:31:46.958] - Erased future from FutureRegistry
[09:31:46.958] result() for ClusterFuture ...
[09:31:46.958] - result already collected: FutureResult
[09:31:46.958] result() for ClusterFuture ... done
[09:31:46.959] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:46.959] result() for ClusterFuture ... done
[09:31:46.959] result() for ClusterFuture ...
[09:31:46.959] - result already collected: FutureResult
[09:31:46.959] result() for ClusterFuture ... done
[09:31:46.959] result() for ClusterFuture ...
[09:31:46.959] receiveMessageFromWorker() for ClusterFuture ...
[09:31:46.959] - Validating connection of MultisessionFuture
[09:31:46.960] - received message: FutureResult
[09:31:46.960] - Received FutureResult
[09:31:46.960] - Erased future from FutureRegistry
[09:31:46.960] result() for ClusterFuture ...
[09:31:46.960] - result already collected: FutureResult
[09:31:46.960] result() for ClusterFuture ... done
[09:31:46.960] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:46.960] result() for ClusterFuture ... done
[09:31:46.961] result() for ClusterFuture ...
[09:31:46.961] - result already collected: FutureResult
[09:31:46.961] result() for ClusterFuture ... done
*** multisession() - workers inherit .libPaths()
[09:31:46.961] getGlobalsAndPackages() ...
[09:31:46.961] Searching for globals...
[09:31:46.962] - globals found: [1] ‘.libPaths’
[09:31:46.962] Searching for globals ... DONE
[09:31:46.962] Resolving globals: FALSE
[09:31:46.962] 
[09:31:46.963] 
[09:31:46.963] getGlobalsAndPackages() ... DONE
[09:31:46.963] run() for ‘Future’ ...
[09:31:46.963] - state: ‘created’
[09:31:46.963] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:46.964] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:46.964] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:46.964]   - Field: ‘label’
[09:31:46.964]   - Field: ‘local’
[09:31:46.964]   - Field: ‘owner’
[09:31:46.964]   - Field: ‘envir’
[09:31:46.964]   - Field: ‘packages’
[09:31:46.964]   - Field: ‘gc’
[09:31:46.965]   - Field: ‘conditions’
[09:31:46.965]   - Field: ‘expr’
[09:31:46.965]   - Field: ‘uuid’
[09:31:46.965]   - Field: ‘seed’
[09:31:46.965]   - Field: ‘version’
[09:31:46.965]   - Field: ‘result’
[09:31:46.965]   - Field: ‘asynchronous’
[09:31:46.965]   - Field: ‘calls’
[09:31:46.965]   - Field: ‘globals’
[09:31:46.966]   - Field: ‘stdout’
[09:31:46.966]   - Field: ‘earlySignal’
[09:31:46.966]   - Field: ‘lazy’
[09:31:46.966]   - Field: ‘state’
[09:31:46.966] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:46.966] - Launch lazy future ...
[09:31:46.966] Packages needed by the future expression (n = 0): <none>
[09:31:46.967] Packages needed by future strategies (n = 0): <none>
[09:31:46.967] {
[09:31:46.967]     {
[09:31:46.967]         {
[09:31:46.967]             ...future.startTime <- base::Sys.time()
[09:31:46.967]             {
[09:31:46.967]                 {
[09:31:46.967]                   {
[09:31:46.967]                     base::local({
[09:31:46.967]                       has_future <- base::requireNamespace("future", 
[09:31:46.967]                         quietly = TRUE)
[09:31:46.967]                       if (has_future) {
[09:31:46.967]                         ns <- base::getNamespace("future")
[09:31:46.967]                         version <- ns[[".package"]][["version"]]
[09:31:46.967]                         if (is.null(version)) 
[09:31:46.967]                           version <- utils::packageVersion("future")
[09:31:46.967]                       }
[09:31:46.967]                       else {
[09:31:46.967]                         version <- NULL
[09:31:46.967]                       }
[09:31:46.967]                       if (!has_future || version < "1.8.0") {
[09:31:46.967]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.967]                           "", base::R.version$version.string), 
[09:31:46.967]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:46.967]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.967]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.967]                             "release", "version")], collapse = " "), 
[09:31:46.967]                           hostname = base::Sys.info()[["nodename"]])
[09:31:46.967]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.967]                           info)
[09:31:46.967]                         info <- base::paste(info, collapse = "; ")
[09:31:46.967]                         if (!has_future) {
[09:31:46.967]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.967]                             info)
[09:31:46.967]                         }
[09:31:46.967]                         else {
[09:31:46.967]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.967]                             info, version)
[09:31:46.967]                         }
[09:31:46.967]                         base::stop(msg)
[09:31:46.967]                       }
[09:31:46.967]                     })
[09:31:46.967]                   }
[09:31:46.967]                   ...future.strategy.old <- future::plan("list")
[09:31:46.967]                   options(future.plan = NULL)
[09:31:46.967]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.967]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.967]                 }
[09:31:46.967]                 ...future.workdir <- getwd()
[09:31:46.967]             }
[09:31:46.967]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.967]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.967]         }
[09:31:46.967]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.967]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.967]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.967]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.967]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.967]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.967]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.967]             base::names(...future.oldOptions))
[09:31:46.967]     }
[09:31:46.967]     if (FALSE) {
[09:31:46.967]     }
[09:31:46.967]     else {
[09:31:46.967]         if (TRUE) {
[09:31:46.967]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.967]                 open = "w")
[09:31:46.967]         }
[09:31:46.967]         else {
[09:31:46.967]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.967]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.967]         }
[09:31:46.967]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.967]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.967]             base::sink(type = "output", split = FALSE)
[09:31:46.967]             base::close(...future.stdout)
[09:31:46.967]         }, add = TRUE)
[09:31:46.967]     }
[09:31:46.967]     ...future.frame <- base::sys.nframe()
[09:31:46.967]     ...future.conditions <- base::list()
[09:31:46.967]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.967]     if (FALSE) {
[09:31:46.967]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.967]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.967]     }
[09:31:46.967]     ...future.result <- base::tryCatch({
[09:31:46.967]         base::withCallingHandlers({
[09:31:46.967]             ...future.value <- base::withVisible(base::local(.libPaths()))
[09:31:46.967]             future::FutureResult(value = ...future.value$value, 
[09:31:46.967]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.967]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.967]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.967]                     ...future.globalenv.names))
[09:31:46.967]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.967]         }, condition = base::local({
[09:31:46.967]             c <- base::c
[09:31:46.967]             inherits <- base::inherits
[09:31:46.967]             invokeRestart <- base::invokeRestart
[09:31:46.967]             length <- base::length
[09:31:46.967]             list <- base::list
[09:31:46.967]             seq.int <- base::seq.int
[09:31:46.967]             signalCondition <- base::signalCondition
[09:31:46.967]             sys.calls <- base::sys.calls
[09:31:46.967]             `[[` <- base::`[[`
[09:31:46.967]             `+` <- base::`+`
[09:31:46.967]             `<<-` <- base::`<<-`
[09:31:46.967]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.967]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.967]                   3L)]
[09:31:46.967]             }
[09:31:46.967]             function(cond) {
[09:31:46.967]                 is_error <- inherits(cond, "error")
[09:31:46.967]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.967]                   NULL)
[09:31:46.967]                 if (is_error) {
[09:31:46.967]                   sessionInformation <- function() {
[09:31:46.967]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.967]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.967]                       search = base::search(), system = base::Sys.info())
[09:31:46.967]                   }
[09:31:46.967]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.967]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.967]                     cond$call), session = sessionInformation(), 
[09:31:46.967]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.967]                   signalCondition(cond)
[09:31:46.967]                 }
[09:31:46.967]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.967]                 "immediateCondition"))) {
[09:31:46.967]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.967]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.967]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.967]                   if (TRUE && !signal) {
[09:31:46.967]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.967]                     {
[09:31:46.967]                       inherits <- base::inherits
[09:31:46.967]                       invokeRestart <- base::invokeRestart
[09:31:46.967]                       is.null <- base::is.null
[09:31:46.967]                       muffled <- FALSE
[09:31:46.967]                       if (inherits(cond, "message")) {
[09:31:46.967]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.967]                         if (muffled) 
[09:31:46.967]                           invokeRestart("muffleMessage")
[09:31:46.967]                       }
[09:31:46.967]                       else if (inherits(cond, "warning")) {
[09:31:46.967]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.967]                         if (muffled) 
[09:31:46.967]                           invokeRestart("muffleWarning")
[09:31:46.967]                       }
[09:31:46.967]                       else if (inherits(cond, "condition")) {
[09:31:46.967]                         if (!is.null(pattern)) {
[09:31:46.967]                           computeRestarts <- base::computeRestarts
[09:31:46.967]                           grepl <- base::grepl
[09:31:46.967]                           restarts <- computeRestarts(cond)
[09:31:46.967]                           for (restart in restarts) {
[09:31:46.967]                             name <- restart$name
[09:31:46.967]                             if (is.null(name)) 
[09:31:46.967]                               next
[09:31:46.967]                             if (!grepl(pattern, name)) 
[09:31:46.967]                               next
[09:31:46.967]                             invokeRestart(restart)
[09:31:46.967]                             muffled <- TRUE
[09:31:46.967]                             break
[09:31:46.967]                           }
[09:31:46.967]                         }
[09:31:46.967]                       }
[09:31:46.967]                       invisible(muffled)
[09:31:46.967]                     }
[09:31:46.967]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.967]                   }
[09:31:46.967]                 }
[09:31:46.967]                 else {
[09:31:46.967]                   if (TRUE) {
[09:31:46.967]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.967]                     {
[09:31:46.967]                       inherits <- base::inherits
[09:31:46.967]                       invokeRestart <- base::invokeRestart
[09:31:46.967]                       is.null <- base::is.null
[09:31:46.967]                       muffled <- FALSE
[09:31:46.967]                       if (inherits(cond, "message")) {
[09:31:46.967]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.967]                         if (muffled) 
[09:31:46.967]                           invokeRestart("muffleMessage")
[09:31:46.967]                       }
[09:31:46.967]                       else if (inherits(cond, "warning")) {
[09:31:46.967]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.967]                         if (muffled) 
[09:31:46.967]                           invokeRestart("muffleWarning")
[09:31:46.967]                       }
[09:31:46.967]                       else if (inherits(cond, "condition")) {
[09:31:46.967]                         if (!is.null(pattern)) {
[09:31:46.967]                           computeRestarts <- base::computeRestarts
[09:31:46.967]                           grepl <- base::grepl
[09:31:46.967]                           restarts <- computeRestarts(cond)
[09:31:46.967]                           for (restart in restarts) {
[09:31:46.967]                             name <- restart$name
[09:31:46.967]                             if (is.null(name)) 
[09:31:46.967]                               next
[09:31:46.967]                             if (!grepl(pattern, name)) 
[09:31:46.967]                               next
[09:31:46.967]                             invokeRestart(restart)
[09:31:46.967]                             muffled <- TRUE
[09:31:46.967]                             break
[09:31:46.967]                           }
[09:31:46.967]                         }
[09:31:46.967]                       }
[09:31:46.967]                       invisible(muffled)
[09:31:46.967]                     }
[09:31:46.967]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.967]                   }
[09:31:46.967]                 }
[09:31:46.967]             }
[09:31:46.967]         }))
[09:31:46.967]     }, error = function(ex) {
[09:31:46.967]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.967]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.967]                 ...future.rng), started = ...future.startTime, 
[09:31:46.967]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.967]             version = "1.8"), class = "FutureResult")
[09:31:46.967]     }, finally = {
[09:31:46.967]         if (!identical(...future.workdir, getwd())) 
[09:31:46.967]             setwd(...future.workdir)
[09:31:46.967]         {
[09:31:46.967]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.967]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.967]             }
[09:31:46.967]             base::options(...future.oldOptions)
[09:31:46.967]             if (.Platform$OS.type == "windows") {
[09:31:46.967]                 old_names <- names(...future.oldEnvVars)
[09:31:46.967]                 envs <- base::Sys.getenv()
[09:31:46.967]                 names <- names(envs)
[09:31:46.967]                 common <- intersect(names, old_names)
[09:31:46.967]                 added <- setdiff(names, old_names)
[09:31:46.967]                 removed <- setdiff(old_names, names)
[09:31:46.967]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.967]                   envs[common]]
[09:31:46.967]                 NAMES <- toupper(changed)
[09:31:46.967]                 args <- list()
[09:31:46.967]                 for (kk in seq_along(NAMES)) {
[09:31:46.967]                   name <- changed[[kk]]
[09:31:46.967]                   NAME <- NAMES[[kk]]
[09:31:46.967]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.967]                     next
[09:31:46.967]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.967]                 }
[09:31:46.967]                 NAMES <- toupper(added)
[09:31:46.967]                 for (kk in seq_along(NAMES)) {
[09:31:46.967]                   name <- added[[kk]]
[09:31:46.967]                   NAME <- NAMES[[kk]]
[09:31:46.967]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.967]                     next
[09:31:46.967]                   args[[name]] <- ""
[09:31:46.967]                 }
[09:31:46.967]                 NAMES <- toupper(removed)
[09:31:46.967]                 for (kk in seq_along(NAMES)) {
[09:31:46.967]                   name <- removed[[kk]]
[09:31:46.967]                   NAME <- NAMES[[kk]]
[09:31:46.967]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.967]                     next
[09:31:46.967]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.967]                 }
[09:31:46.967]                 if (length(args) > 0) 
[09:31:46.967]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.967]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.967]             }
[09:31:46.967]             else {
[09:31:46.967]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.967]             }
[09:31:46.967]             {
[09:31:46.967]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.967]                   0L) {
[09:31:46.967]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.967]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.967]                   base::options(opts)
[09:31:46.967]                 }
[09:31:46.967]                 {
[09:31:46.967]                   {
[09:31:46.967]                     NULL
[09:31:46.967]                     RNGkind("Mersenne-Twister")
[09:31:46.967]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:46.967]                       inherits = FALSE)
[09:31:46.967]                   }
[09:31:46.967]                   options(future.plan = NULL)
[09:31:46.967]                   if (is.na(NA_character_)) 
[09:31:46.967]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.967]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.967]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.967]                     .init = FALSE)
[09:31:46.967]                 }
[09:31:46.967]             }
[09:31:46.967]         }
[09:31:46.967]     })
[09:31:46.967]     if (TRUE) {
[09:31:46.967]         base::sink(type = "output", split = FALSE)
[09:31:46.967]         if (TRUE) {
[09:31:46.967]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.967]         }
[09:31:46.967]         else {
[09:31:46.967]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.967]         }
[09:31:46.967]         base::close(...future.stdout)
[09:31:46.967]         ...future.stdout <- NULL
[09:31:46.967]     }
[09:31:46.967]     ...future.result$conditions <- ...future.conditions
[09:31:46.967]     ...future.result$finished <- base::Sys.time()
[09:31:46.967]     ...future.result
[09:31:46.967] }
[09:31:46.969] plan(): Setting new future strategy stack:
[09:31:46.969] List of future strategies:
[09:31:46.969] 1. sequential:
[09:31:46.969]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.969]    - tweaked: FALSE
[09:31:46.969]    - call: NULL
[09:31:46.970] plan(): nbrOfWorkers() = 1
[09:31:46.973] plan(): Setting new future strategy stack:
[09:31:46.973] List of future strategies:
[09:31:46.973] 1. sequential:
[09:31:46.973]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:46.973]    - tweaked: FALSE
[09:31:46.973]    - call: future::plan("sequential")
[09:31:46.974] plan(): nbrOfWorkers() = 1
[09:31:46.974] SequentialFuture started (and completed)
[09:31:46.974] - Launch lazy future ... done
[09:31:46.974] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[09:31:46.979] getGlobalsAndPackages() ...
[09:31:46.979] 
[09:31:46.979] - globals: [0] <none>
[09:31:46.979] getGlobalsAndPackages() ... DONE
[09:31:46.990] Packages needed by the future expression (n = 0): <none>
[09:31:46.990] Packages needed by future strategies (n = 0): <none>
[09:31:46.990] {
[09:31:46.990]     {
[09:31:46.990]         {
[09:31:46.990]             ...future.startTime <- base::Sys.time()
[09:31:46.990]             {
[09:31:46.990]                 {
[09:31:46.990]                   {
[09:31:46.990]                     {
[09:31:46.990]                       base::local({
[09:31:46.990]                         has_future <- base::requireNamespace("future", 
[09:31:46.990]                           quietly = TRUE)
[09:31:46.990]                         if (has_future) {
[09:31:46.990]                           ns <- base::getNamespace("future")
[09:31:46.990]                           version <- ns[[".package"]][["version"]]
[09:31:46.990]                           if (is.null(version)) 
[09:31:46.990]                             version <- utils::packageVersion("future")
[09:31:46.990]                         }
[09:31:46.990]                         else {
[09:31:46.990]                           version <- NULL
[09:31:46.990]                         }
[09:31:46.990]                         if (!has_future || version < "1.8.0") {
[09:31:46.990]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:46.990]                             "", base::R.version$version.string), 
[09:31:46.990]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:46.990]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:46.990]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:46.990]                               "release", "version")], collapse = " "), 
[09:31:46.990]                             hostname = base::Sys.info()[["nodename"]])
[09:31:46.990]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:46.990]                             info)
[09:31:46.990]                           info <- base::paste(info, collapse = "; ")
[09:31:46.990]                           if (!has_future) {
[09:31:46.990]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:46.990]                               info)
[09:31:46.990]                           }
[09:31:46.990]                           else {
[09:31:46.990]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:46.990]                               info, version)
[09:31:46.990]                           }
[09:31:46.990]                           base::stop(msg)
[09:31:46.990]                         }
[09:31:46.990]                       })
[09:31:46.990]                     }
[09:31:46.990]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:46.990]                     base::options(mc.cores = 1L)
[09:31:46.990]                   }
[09:31:46.990]                   ...future.strategy.old <- future::plan("list")
[09:31:46.990]                   options(future.plan = NULL)
[09:31:46.990]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.990]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:46.990]                 }
[09:31:46.990]                 ...future.workdir <- getwd()
[09:31:46.990]             }
[09:31:46.990]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:46.990]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:46.990]         }
[09:31:46.990]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:46.990]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:46.990]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:46.990]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:46.990]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:46.990]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:46.990]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:46.990]             base::names(...future.oldOptions))
[09:31:46.990]     }
[09:31:46.990]     if (FALSE) {
[09:31:46.990]     }
[09:31:46.990]     else {
[09:31:46.990]         if (TRUE) {
[09:31:46.990]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:46.990]                 open = "w")
[09:31:46.990]         }
[09:31:46.990]         else {
[09:31:46.990]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:46.990]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:46.990]         }
[09:31:46.990]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:46.990]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:46.990]             base::sink(type = "output", split = FALSE)
[09:31:46.990]             base::close(...future.stdout)
[09:31:46.990]         }, add = TRUE)
[09:31:46.990]     }
[09:31:46.990]     ...future.frame <- base::sys.nframe()
[09:31:46.990]     ...future.conditions <- base::list()
[09:31:46.990]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:46.990]     if (FALSE) {
[09:31:46.990]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:46.990]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:46.990]     }
[09:31:46.990]     ...future.result <- base::tryCatch({
[09:31:46.990]         base::withCallingHandlers({
[09:31:46.990]             ...future.value <- base::withVisible(base::local({
[09:31:46.990]                 ...future.makeSendCondition <- base::local({
[09:31:46.990]                   sendCondition <- NULL
[09:31:46.990]                   function(frame = 1L) {
[09:31:46.990]                     if (is.function(sendCondition)) 
[09:31:46.990]                       return(sendCondition)
[09:31:46.990]                     ns <- getNamespace("parallel")
[09:31:46.990]                     if (exists("sendData", mode = "function", 
[09:31:46.990]                       envir = ns)) {
[09:31:46.990]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:46.990]                         envir = ns)
[09:31:46.990]                       envir <- sys.frame(frame)
[09:31:46.990]                       master <- NULL
[09:31:46.990]                       while (!identical(envir, .GlobalEnv) && 
[09:31:46.990]                         !identical(envir, emptyenv())) {
[09:31:46.990]                         if (exists("master", mode = "list", envir = envir, 
[09:31:46.990]                           inherits = FALSE)) {
[09:31:46.990]                           master <- get("master", mode = "list", 
[09:31:46.990]                             envir = envir, inherits = FALSE)
[09:31:46.990]                           if (inherits(master, c("SOCKnode", 
[09:31:46.990]                             "SOCK0node"))) {
[09:31:46.990]                             sendCondition <<- function(cond) {
[09:31:46.990]                               data <- list(type = "VALUE", value = cond, 
[09:31:46.990]                                 success = TRUE)
[09:31:46.990]                               parallel_sendData(master, data)
[09:31:46.990]                             }
[09:31:46.990]                             return(sendCondition)
[09:31:46.990]                           }
[09:31:46.990]                         }
[09:31:46.990]                         frame <- frame + 1L
[09:31:46.990]                         envir <- sys.frame(frame)
[09:31:46.990]                       }
[09:31:46.990]                     }
[09:31:46.990]                     sendCondition <<- function(cond) NULL
[09:31:46.990]                   }
[09:31:46.990]                 })
[09:31:46.990]                 withCallingHandlers({
[09:31:46.990]                   {
[09:31:46.990]                     stop("Whoops!")
[09:31:46.990]                     1
[09:31:46.990]                   }
[09:31:46.990]                 }, immediateCondition = function(cond) {
[09:31:46.990]                   sendCondition <- ...future.makeSendCondition()
[09:31:46.990]                   sendCondition(cond)
[09:31:46.990]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.990]                   {
[09:31:46.990]                     inherits <- base::inherits
[09:31:46.990]                     invokeRestart <- base::invokeRestart
[09:31:46.990]                     is.null <- base::is.null
[09:31:46.990]                     muffled <- FALSE
[09:31:46.990]                     if (inherits(cond, "message")) {
[09:31:46.990]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:46.990]                       if (muffled) 
[09:31:46.990]                         invokeRestart("muffleMessage")
[09:31:46.990]                     }
[09:31:46.990]                     else if (inherits(cond, "warning")) {
[09:31:46.990]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:46.990]                       if (muffled) 
[09:31:46.990]                         invokeRestart("muffleWarning")
[09:31:46.990]                     }
[09:31:46.990]                     else if (inherits(cond, "condition")) {
[09:31:46.990]                       if (!is.null(pattern)) {
[09:31:46.990]                         computeRestarts <- base::computeRestarts
[09:31:46.990]                         grepl <- base::grepl
[09:31:46.990]                         restarts <- computeRestarts(cond)
[09:31:46.990]                         for (restart in restarts) {
[09:31:46.990]                           name <- restart$name
[09:31:46.990]                           if (is.null(name)) 
[09:31:46.990]                             next
[09:31:46.990]                           if (!grepl(pattern, name)) 
[09:31:46.990]                             next
[09:31:46.990]                           invokeRestart(restart)
[09:31:46.990]                           muffled <- TRUE
[09:31:46.990]                           break
[09:31:46.990]                         }
[09:31:46.990]                       }
[09:31:46.990]                     }
[09:31:46.990]                     invisible(muffled)
[09:31:46.990]                   }
[09:31:46.990]                   muffleCondition(cond)
[09:31:46.990]                 })
[09:31:46.990]             }))
[09:31:46.990]             future::FutureResult(value = ...future.value$value, 
[09:31:46.990]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.990]                   ...future.rng), globalenv = if (FALSE) 
[09:31:46.990]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:46.990]                     ...future.globalenv.names))
[09:31:46.990]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:46.990]         }, condition = base::local({
[09:31:46.990]             c <- base::c
[09:31:46.990]             inherits <- base::inherits
[09:31:46.990]             invokeRestart <- base::invokeRestart
[09:31:46.990]             length <- base::length
[09:31:46.990]             list <- base::list
[09:31:46.990]             seq.int <- base::seq.int
[09:31:46.990]             signalCondition <- base::signalCondition
[09:31:46.990]             sys.calls <- base::sys.calls
[09:31:46.990]             `[[` <- base::`[[`
[09:31:46.990]             `+` <- base::`+`
[09:31:46.990]             `<<-` <- base::`<<-`
[09:31:46.990]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:46.990]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:46.990]                   3L)]
[09:31:46.990]             }
[09:31:46.990]             function(cond) {
[09:31:46.990]                 is_error <- inherits(cond, "error")
[09:31:46.990]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:46.990]                   NULL)
[09:31:46.990]                 if (is_error) {
[09:31:46.990]                   sessionInformation <- function() {
[09:31:46.990]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:46.990]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:46.990]                       search = base::search(), system = base::Sys.info())
[09:31:46.990]                   }
[09:31:46.990]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.990]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:46.990]                     cond$call), session = sessionInformation(), 
[09:31:46.990]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:46.990]                   signalCondition(cond)
[09:31:46.990]                 }
[09:31:46.990]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:46.990]                 "immediateCondition"))) {
[09:31:46.990]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:46.990]                   ...future.conditions[[length(...future.conditions) + 
[09:31:46.990]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:46.990]                   if (TRUE && !signal) {
[09:31:46.990]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.990]                     {
[09:31:46.990]                       inherits <- base::inherits
[09:31:46.990]                       invokeRestart <- base::invokeRestart
[09:31:46.990]                       is.null <- base::is.null
[09:31:46.990]                       muffled <- FALSE
[09:31:46.990]                       if (inherits(cond, "message")) {
[09:31:46.990]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.990]                         if (muffled) 
[09:31:46.990]                           invokeRestart("muffleMessage")
[09:31:46.990]                       }
[09:31:46.990]                       else if (inherits(cond, "warning")) {
[09:31:46.990]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.990]                         if (muffled) 
[09:31:46.990]                           invokeRestart("muffleWarning")
[09:31:46.990]                       }
[09:31:46.990]                       else if (inherits(cond, "condition")) {
[09:31:46.990]                         if (!is.null(pattern)) {
[09:31:46.990]                           computeRestarts <- base::computeRestarts
[09:31:46.990]                           grepl <- base::grepl
[09:31:46.990]                           restarts <- computeRestarts(cond)
[09:31:46.990]                           for (restart in restarts) {
[09:31:46.990]                             name <- restart$name
[09:31:46.990]                             if (is.null(name)) 
[09:31:46.990]                               next
[09:31:46.990]                             if (!grepl(pattern, name)) 
[09:31:46.990]                               next
[09:31:46.990]                             invokeRestart(restart)
[09:31:46.990]                             muffled <- TRUE
[09:31:46.990]                             break
[09:31:46.990]                           }
[09:31:46.990]                         }
[09:31:46.990]                       }
[09:31:46.990]                       invisible(muffled)
[09:31:46.990]                     }
[09:31:46.990]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.990]                   }
[09:31:46.990]                 }
[09:31:46.990]                 else {
[09:31:46.990]                   if (TRUE) {
[09:31:46.990]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:46.990]                     {
[09:31:46.990]                       inherits <- base::inherits
[09:31:46.990]                       invokeRestart <- base::invokeRestart
[09:31:46.990]                       is.null <- base::is.null
[09:31:46.990]                       muffled <- FALSE
[09:31:46.990]                       if (inherits(cond, "message")) {
[09:31:46.990]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:46.990]                         if (muffled) 
[09:31:46.990]                           invokeRestart("muffleMessage")
[09:31:46.990]                       }
[09:31:46.990]                       else if (inherits(cond, "warning")) {
[09:31:46.990]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:46.990]                         if (muffled) 
[09:31:46.990]                           invokeRestart("muffleWarning")
[09:31:46.990]                       }
[09:31:46.990]                       else if (inherits(cond, "condition")) {
[09:31:46.990]                         if (!is.null(pattern)) {
[09:31:46.990]                           computeRestarts <- base::computeRestarts
[09:31:46.990]                           grepl <- base::grepl
[09:31:46.990]                           restarts <- computeRestarts(cond)
[09:31:46.990]                           for (restart in restarts) {
[09:31:46.990]                             name <- restart$name
[09:31:46.990]                             if (is.null(name)) 
[09:31:46.990]                               next
[09:31:46.990]                             if (!grepl(pattern, name)) 
[09:31:46.990]                               next
[09:31:46.990]                             invokeRestart(restart)
[09:31:46.990]                             muffled <- TRUE
[09:31:46.990]                             break
[09:31:46.990]                           }
[09:31:46.990]                         }
[09:31:46.990]                       }
[09:31:46.990]                       invisible(muffled)
[09:31:46.990]                     }
[09:31:46.990]                     muffleCondition(cond, pattern = "^muffle")
[09:31:46.990]                   }
[09:31:46.990]                 }
[09:31:46.990]             }
[09:31:46.990]         }))
[09:31:46.990]     }, error = function(ex) {
[09:31:46.990]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:46.990]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:46.990]                 ...future.rng), started = ...future.startTime, 
[09:31:46.990]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:46.990]             version = "1.8"), class = "FutureResult")
[09:31:46.990]     }, finally = {
[09:31:46.990]         if (!identical(...future.workdir, getwd())) 
[09:31:46.990]             setwd(...future.workdir)
[09:31:46.990]         {
[09:31:46.990]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:46.990]                 ...future.oldOptions$nwarnings <- NULL
[09:31:46.990]             }
[09:31:46.990]             base::options(...future.oldOptions)
[09:31:46.990]             if (.Platform$OS.type == "windows") {
[09:31:46.990]                 old_names <- names(...future.oldEnvVars)
[09:31:46.990]                 envs <- base::Sys.getenv()
[09:31:46.990]                 names <- names(envs)
[09:31:46.990]                 common <- intersect(names, old_names)
[09:31:46.990]                 added <- setdiff(names, old_names)
[09:31:46.990]                 removed <- setdiff(old_names, names)
[09:31:46.990]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:46.990]                   envs[common]]
[09:31:46.990]                 NAMES <- toupper(changed)
[09:31:46.990]                 args <- list()
[09:31:46.990]                 for (kk in seq_along(NAMES)) {
[09:31:46.990]                   name <- changed[[kk]]
[09:31:46.990]                   NAME <- NAMES[[kk]]
[09:31:46.990]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.990]                     next
[09:31:46.990]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.990]                 }
[09:31:46.990]                 NAMES <- toupper(added)
[09:31:46.990]                 for (kk in seq_along(NAMES)) {
[09:31:46.990]                   name <- added[[kk]]
[09:31:46.990]                   NAME <- NAMES[[kk]]
[09:31:46.990]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.990]                     next
[09:31:46.990]                   args[[name]] <- ""
[09:31:46.990]                 }
[09:31:46.990]                 NAMES <- toupper(removed)
[09:31:46.990]                 for (kk in seq_along(NAMES)) {
[09:31:46.990]                   name <- removed[[kk]]
[09:31:46.990]                   NAME <- NAMES[[kk]]
[09:31:46.990]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:46.990]                     next
[09:31:46.990]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:46.990]                 }
[09:31:46.990]                 if (length(args) > 0) 
[09:31:46.990]                   base::do.call(base::Sys.setenv, args = args)
[09:31:46.990]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:46.990]             }
[09:31:46.990]             else {
[09:31:46.990]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:46.990]             }
[09:31:46.990]             {
[09:31:46.990]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:46.990]                   0L) {
[09:31:46.990]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:46.990]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:46.990]                   base::options(opts)
[09:31:46.990]                 }
[09:31:46.990]                 {
[09:31:46.990]                   {
[09:31:46.990]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:46.990]                     NULL
[09:31:46.990]                   }
[09:31:46.990]                   options(future.plan = NULL)
[09:31:46.990]                   if (is.na(NA_character_)) 
[09:31:46.990]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:46.990]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:46.990]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:46.990]                     .init = FALSE)
[09:31:46.990]                 }
[09:31:46.990]             }
[09:31:46.990]         }
[09:31:46.990]     })
[09:31:46.990]     if (TRUE) {
[09:31:46.990]         base::sink(type = "output", split = FALSE)
[09:31:46.990]         if (TRUE) {
[09:31:46.990]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:46.990]         }
[09:31:46.990]         else {
[09:31:46.990]             ...future.result["stdout"] <- base::list(NULL)
[09:31:46.990]         }
[09:31:46.990]         base::close(...future.stdout)
[09:31:46.990]         ...future.stdout <- NULL
[09:31:46.990]     }
[09:31:46.990]     ...future.result$conditions <- ...future.conditions
[09:31:46.990]     ...future.result$finished <- base::Sys.time()
[09:31:46.990]     ...future.result
[09:31:46.990] }
[09:31:46.993] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:46.996] receiveMessageFromWorker() for ClusterFuture ...
[09:31:46.996] - Validating connection of MultisessionFuture
[09:31:46.996] - received message: FutureResult
[09:31:46.996] - Received FutureResult
[09:31:46.997] - Erased future from FutureRegistry
[09:31:46.997] result() for ClusterFuture ...
[09:31:46.997] - result already collected: FutureResult
[09:31:46.997] result() for ClusterFuture ... done
[09:31:46.997] signalConditions() ...
[09:31:46.997]  - include = ‘immediateCondition’
[09:31:46.997]  - exclude = 
[09:31:46.997]  - resignal = FALSE
[09:31:46.997]  - Number of conditions: 1
[09:31:46.997] signalConditions() ... done
[09:31:46.997] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d4a020fd-dec5-7248-6e9b-560e9778c064
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:46.998] result() for ClusterFuture ...
[09:31:46.998] - result already collected: FutureResult
[09:31:46.998] result() for ClusterFuture ... done
[09:31:46.998] result() for ClusterFuture ...
[09:31:46.998] - result already collected: FutureResult
[09:31:46.998] result() for ClusterFuture ... done
[09:31:46.998] signalConditions() ...
[09:31:46.998]  - include = ‘immediateCondition’
[09:31:46.998]  - exclude = 
[09:31:46.998]  - resignal = FALSE
[09:31:46.998]  - Number of conditions: 1
[09:31:46.999] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[09:31:46.999] result() for ClusterFuture ...
[09:31:46.999] - result already collected: FutureResult
[09:31:46.999] result() for ClusterFuture ... done
[09:31:46.999] result() for ClusterFuture ...
[09:31:46.999] - result already collected: FutureResult
[09:31:46.999] result() for ClusterFuture ... done
[09:31:46.999] signalConditions() ...
[09:31:47.000]  - include = ‘immediateCondition’
[09:31:47.000]  - exclude = 
[09:31:47.000]  - resignal = FALSE
[09:31:47.000]  - Number of conditions: 1
[09:31:47.000] signalConditions() ... done
[09:31:47.000] Future state: ‘finished’
[09:31:47.000] result() for ClusterFuture ...
[09:31:47.000] - result already collected: FutureResult
[09:31:47.000] result() for ClusterFuture ... done
[09:31:47.000] signalConditions() ...
[09:31:47.000]  - include = ‘condition’
[09:31:47.001]  - exclude = ‘immediateCondition’
[09:31:47.001]  - resignal = TRUE
[09:31:47.001]  - Number of conditions: 1
[09:31:47.001]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:47.001] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[09:31:47.001] result() for ClusterFuture ...
[09:31:47.001] - result already collected: FutureResult
[09:31:47.002] result() for ClusterFuture ... done
[09:31:47.002] result() for ClusterFuture ...
[09:31:47.002] - result already collected: FutureResult
[09:31:47.002] result() for ClusterFuture ... done
[09:31:47.002] signalConditions() ...
[09:31:47.002]  - include = ‘immediateCondition’
[09:31:47.002]  - exclude = 
[09:31:47.002]  - resignal = FALSE
[09:31:47.002]  - Number of conditions: 1
[09:31:47.002] signalConditions() ... done
[09:31:47.002] Future state: ‘finished’
[09:31:47.003] result() for ClusterFuture ...
[09:31:47.003] - result already collected: FutureResult
[09:31:47.003] result() for ClusterFuture ... done
[09:31:47.003] signalConditions() ...
[09:31:47.003]  - include = ‘condition’
[09:31:47.003]  - exclude = ‘immediateCondition’
[09:31:47.003]  - resignal = TRUE
[09:31:47.003]  - Number of conditions: 1
[09:31:47.003]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[09:31:47.003] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[09:31:47.007] getGlobalsAndPackages() ...
[09:31:47.007] 
[09:31:47.007] - globals: [0] <none>
[09:31:47.007] getGlobalsAndPackages() ... DONE
[09:31:47.017] Packages needed by the future expression (n = 0): <none>
[09:31:47.018] Packages needed by future strategies (n = 0): <none>
[09:31:47.018] {
[09:31:47.018]     {
[09:31:47.018]         {
[09:31:47.018]             ...future.startTime <- base::Sys.time()
[09:31:47.018]             {
[09:31:47.018]                 {
[09:31:47.018]                   {
[09:31:47.018]                     {
[09:31:47.018]                       base::local({
[09:31:47.018]                         has_future <- base::requireNamespace("future", 
[09:31:47.018]                           quietly = TRUE)
[09:31:47.018]                         if (has_future) {
[09:31:47.018]                           ns <- base::getNamespace("future")
[09:31:47.018]                           version <- ns[[".package"]][["version"]]
[09:31:47.018]                           if (is.null(version)) 
[09:31:47.018]                             version <- utils::packageVersion("future")
[09:31:47.018]                         }
[09:31:47.018]                         else {
[09:31:47.018]                           version <- NULL
[09:31:47.018]                         }
[09:31:47.018]                         if (!has_future || version < "1.8.0") {
[09:31:47.018]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:47.018]                             "", base::R.version$version.string), 
[09:31:47.018]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:47.018]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:47.018]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:47.018]                               "release", "version")], collapse = " "), 
[09:31:47.018]                             hostname = base::Sys.info()[["nodename"]])
[09:31:47.018]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:47.018]                             info)
[09:31:47.018]                           info <- base::paste(info, collapse = "; ")
[09:31:47.018]                           if (!has_future) {
[09:31:47.018]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:47.018]                               info)
[09:31:47.018]                           }
[09:31:47.018]                           else {
[09:31:47.018]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:47.018]                               info, version)
[09:31:47.018]                           }
[09:31:47.018]                           base::stop(msg)
[09:31:47.018]                         }
[09:31:47.018]                       })
[09:31:47.018]                     }
[09:31:47.018]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:47.018]                     base::options(mc.cores = 1L)
[09:31:47.018]                   }
[09:31:47.018]                   ...future.strategy.old <- future::plan("list")
[09:31:47.018]                   options(future.plan = NULL)
[09:31:47.018]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.018]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:47.018]                 }
[09:31:47.018]                 ...future.workdir <- getwd()
[09:31:47.018]             }
[09:31:47.018]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:47.018]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:47.018]         }
[09:31:47.018]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:47.018]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:47.018]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:47.018]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:47.018]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:47.018]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:47.018]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:47.018]             base::names(...future.oldOptions))
[09:31:47.018]     }
[09:31:47.018]     if (FALSE) {
[09:31:47.018]     }
[09:31:47.018]     else {
[09:31:47.018]         if (TRUE) {
[09:31:47.018]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:47.018]                 open = "w")
[09:31:47.018]         }
[09:31:47.018]         else {
[09:31:47.018]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:47.018]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:47.018]         }
[09:31:47.018]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:47.018]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:47.018]             base::sink(type = "output", split = FALSE)
[09:31:47.018]             base::close(...future.stdout)
[09:31:47.018]         }, add = TRUE)
[09:31:47.018]     }
[09:31:47.018]     ...future.frame <- base::sys.nframe()
[09:31:47.018]     ...future.conditions <- base::list()
[09:31:47.018]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:47.018]     if (FALSE) {
[09:31:47.018]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:47.018]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:47.018]     }
[09:31:47.018]     ...future.result <- base::tryCatch({
[09:31:47.018]         base::withCallingHandlers({
[09:31:47.018]             ...future.value <- base::withVisible(base::local({
[09:31:47.018]                 ...future.makeSendCondition <- base::local({
[09:31:47.018]                   sendCondition <- NULL
[09:31:47.018]                   function(frame = 1L) {
[09:31:47.018]                     if (is.function(sendCondition)) 
[09:31:47.018]                       return(sendCondition)
[09:31:47.018]                     ns <- getNamespace("parallel")
[09:31:47.018]                     if (exists("sendData", mode = "function", 
[09:31:47.018]                       envir = ns)) {
[09:31:47.018]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:47.018]                         envir = ns)
[09:31:47.018]                       envir <- sys.frame(frame)
[09:31:47.018]                       master <- NULL
[09:31:47.018]                       while (!identical(envir, .GlobalEnv) && 
[09:31:47.018]                         !identical(envir, emptyenv())) {
[09:31:47.018]                         if (exists("master", mode = "list", envir = envir, 
[09:31:47.018]                           inherits = FALSE)) {
[09:31:47.018]                           master <- get("master", mode = "list", 
[09:31:47.018]                             envir = envir, inherits = FALSE)
[09:31:47.018]                           if (inherits(master, c("SOCKnode", 
[09:31:47.018]                             "SOCK0node"))) {
[09:31:47.018]                             sendCondition <<- function(cond) {
[09:31:47.018]                               data <- list(type = "VALUE", value = cond, 
[09:31:47.018]                                 success = TRUE)
[09:31:47.018]                               parallel_sendData(master, data)
[09:31:47.018]                             }
[09:31:47.018]                             return(sendCondition)
[09:31:47.018]                           }
[09:31:47.018]                         }
[09:31:47.018]                         frame <- frame + 1L
[09:31:47.018]                         envir <- sys.frame(frame)
[09:31:47.018]                       }
[09:31:47.018]                     }
[09:31:47.018]                     sendCondition <<- function(cond) NULL
[09:31:47.018]                   }
[09:31:47.018]                 })
[09:31:47.018]                 withCallingHandlers({
[09:31:47.018]                   {
[09:31:47.018]                     stop(structure(list(message = "boom"), class = c("MyError", 
[09:31:47.018]                       "error", "condition")))
[09:31:47.018]                   }
[09:31:47.018]                 }, immediateCondition = function(cond) {
[09:31:47.018]                   sendCondition <- ...future.makeSendCondition()
[09:31:47.018]                   sendCondition(cond)
[09:31:47.018]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.018]                   {
[09:31:47.018]                     inherits <- base::inherits
[09:31:47.018]                     invokeRestart <- base::invokeRestart
[09:31:47.018]                     is.null <- base::is.null
[09:31:47.018]                     muffled <- FALSE
[09:31:47.018]                     if (inherits(cond, "message")) {
[09:31:47.018]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:47.018]                       if (muffled) 
[09:31:47.018]                         invokeRestart("muffleMessage")
[09:31:47.018]                     }
[09:31:47.018]                     else if (inherits(cond, "warning")) {
[09:31:47.018]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:47.018]                       if (muffled) 
[09:31:47.018]                         invokeRestart("muffleWarning")
[09:31:47.018]                     }
[09:31:47.018]                     else if (inherits(cond, "condition")) {
[09:31:47.018]                       if (!is.null(pattern)) {
[09:31:47.018]                         computeRestarts <- base::computeRestarts
[09:31:47.018]                         grepl <- base::grepl
[09:31:47.018]                         restarts <- computeRestarts(cond)
[09:31:47.018]                         for (restart in restarts) {
[09:31:47.018]                           name <- restart$name
[09:31:47.018]                           if (is.null(name)) 
[09:31:47.018]                             next
[09:31:47.018]                           if (!grepl(pattern, name)) 
[09:31:47.018]                             next
[09:31:47.018]                           invokeRestart(restart)
[09:31:47.018]                           muffled <- TRUE
[09:31:47.018]                           break
[09:31:47.018]                         }
[09:31:47.018]                       }
[09:31:47.018]                     }
[09:31:47.018]                     invisible(muffled)
[09:31:47.018]                   }
[09:31:47.018]                   muffleCondition(cond)
[09:31:47.018]                 })
[09:31:47.018]             }))
[09:31:47.018]             future::FutureResult(value = ...future.value$value, 
[09:31:47.018]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.018]                   ...future.rng), globalenv = if (FALSE) 
[09:31:47.018]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:47.018]                     ...future.globalenv.names))
[09:31:47.018]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:47.018]         }, condition = base::local({
[09:31:47.018]             c <- base::c
[09:31:47.018]             inherits <- base::inherits
[09:31:47.018]             invokeRestart <- base::invokeRestart
[09:31:47.018]             length <- base::length
[09:31:47.018]             list <- base::list
[09:31:47.018]             seq.int <- base::seq.int
[09:31:47.018]             signalCondition <- base::signalCondition
[09:31:47.018]             sys.calls <- base::sys.calls
[09:31:47.018]             `[[` <- base::`[[`
[09:31:47.018]             `+` <- base::`+`
[09:31:47.018]             `<<-` <- base::`<<-`
[09:31:47.018]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:47.018]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:47.018]                   3L)]
[09:31:47.018]             }
[09:31:47.018]             function(cond) {
[09:31:47.018]                 is_error <- inherits(cond, "error")
[09:31:47.018]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:47.018]                   NULL)
[09:31:47.018]                 if (is_error) {
[09:31:47.018]                   sessionInformation <- function() {
[09:31:47.018]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:47.018]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:47.018]                       search = base::search(), system = base::Sys.info())
[09:31:47.018]                   }
[09:31:47.018]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.018]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:47.018]                     cond$call), session = sessionInformation(), 
[09:31:47.018]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:47.018]                   signalCondition(cond)
[09:31:47.018]                 }
[09:31:47.018]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:47.018]                 "immediateCondition"))) {
[09:31:47.018]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:47.018]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.018]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:47.018]                   if (TRUE && !signal) {
[09:31:47.018]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.018]                     {
[09:31:47.018]                       inherits <- base::inherits
[09:31:47.018]                       invokeRestart <- base::invokeRestart
[09:31:47.018]                       is.null <- base::is.null
[09:31:47.018]                       muffled <- FALSE
[09:31:47.018]                       if (inherits(cond, "message")) {
[09:31:47.018]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.018]                         if (muffled) 
[09:31:47.018]                           invokeRestart("muffleMessage")
[09:31:47.018]                       }
[09:31:47.018]                       else if (inherits(cond, "warning")) {
[09:31:47.018]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.018]                         if (muffled) 
[09:31:47.018]                           invokeRestart("muffleWarning")
[09:31:47.018]                       }
[09:31:47.018]                       else if (inherits(cond, "condition")) {
[09:31:47.018]                         if (!is.null(pattern)) {
[09:31:47.018]                           computeRestarts <- base::computeRestarts
[09:31:47.018]                           grepl <- base::grepl
[09:31:47.018]                           restarts <- computeRestarts(cond)
[09:31:47.018]                           for (restart in restarts) {
[09:31:47.018]                             name <- restart$name
[09:31:47.018]                             if (is.null(name)) 
[09:31:47.018]                               next
[09:31:47.018]                             if (!grepl(pattern, name)) 
[09:31:47.018]                               next
[09:31:47.018]                             invokeRestart(restart)
[09:31:47.018]                             muffled <- TRUE
[09:31:47.018]                             break
[09:31:47.018]                           }
[09:31:47.018]                         }
[09:31:47.018]                       }
[09:31:47.018]                       invisible(muffled)
[09:31:47.018]                     }
[09:31:47.018]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.018]                   }
[09:31:47.018]                 }
[09:31:47.018]                 else {
[09:31:47.018]                   if (TRUE) {
[09:31:47.018]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.018]                     {
[09:31:47.018]                       inherits <- base::inherits
[09:31:47.018]                       invokeRestart <- base::invokeRestart
[09:31:47.018]                       is.null <- base::is.null
[09:31:47.018]                       muffled <- FALSE
[09:31:47.018]                       if (inherits(cond, "message")) {
[09:31:47.018]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.018]                         if (muffled) 
[09:31:47.018]                           invokeRestart("muffleMessage")
[09:31:47.018]                       }
[09:31:47.018]                       else if (inherits(cond, "warning")) {
[09:31:47.018]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.018]                         if (muffled) 
[09:31:47.018]                           invokeRestart("muffleWarning")
[09:31:47.018]                       }
[09:31:47.018]                       else if (inherits(cond, "condition")) {
[09:31:47.018]                         if (!is.null(pattern)) {
[09:31:47.018]                           computeRestarts <- base::computeRestarts
[09:31:47.018]                           grepl <- base::grepl
[09:31:47.018]                           restarts <- computeRestarts(cond)
[09:31:47.018]                           for (restart in restarts) {
[09:31:47.018]                             name <- restart$name
[09:31:47.018]                             if (is.null(name)) 
[09:31:47.018]                               next
[09:31:47.018]                             if (!grepl(pattern, name)) 
[09:31:47.018]                               next
[09:31:47.018]                             invokeRestart(restart)
[09:31:47.018]                             muffled <- TRUE
[09:31:47.018]                             break
[09:31:47.018]                           }
[09:31:47.018]                         }
[09:31:47.018]                       }
[09:31:47.018]                       invisible(muffled)
[09:31:47.018]                     }
[09:31:47.018]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.018]                   }
[09:31:47.018]                 }
[09:31:47.018]             }
[09:31:47.018]         }))
[09:31:47.018]     }, error = function(ex) {
[09:31:47.018]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:47.018]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.018]                 ...future.rng), started = ...future.startTime, 
[09:31:47.018]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:47.018]             version = "1.8"), class = "FutureResult")
[09:31:47.018]     }, finally = {
[09:31:47.018]         if (!identical(...future.workdir, getwd())) 
[09:31:47.018]             setwd(...future.workdir)
[09:31:47.018]         {
[09:31:47.018]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:47.018]                 ...future.oldOptions$nwarnings <- NULL
[09:31:47.018]             }
[09:31:47.018]             base::options(...future.oldOptions)
[09:31:47.018]             if (.Platform$OS.type == "windows") {
[09:31:47.018]                 old_names <- names(...future.oldEnvVars)
[09:31:47.018]                 envs <- base::Sys.getenv()
[09:31:47.018]                 names <- names(envs)
[09:31:47.018]                 common <- intersect(names, old_names)
[09:31:47.018]                 added <- setdiff(names, old_names)
[09:31:47.018]                 removed <- setdiff(old_names, names)
[09:31:47.018]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:47.018]                   envs[common]]
[09:31:47.018]                 NAMES <- toupper(changed)
[09:31:47.018]                 args <- list()
[09:31:47.018]                 for (kk in seq_along(NAMES)) {
[09:31:47.018]                   name <- changed[[kk]]
[09:31:47.018]                   NAME <- NAMES[[kk]]
[09:31:47.018]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.018]                     next
[09:31:47.018]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.018]                 }
[09:31:47.018]                 NAMES <- toupper(added)
[09:31:47.018]                 for (kk in seq_along(NAMES)) {
[09:31:47.018]                   name <- added[[kk]]
[09:31:47.018]                   NAME <- NAMES[[kk]]
[09:31:47.018]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.018]                     next
[09:31:47.018]                   args[[name]] <- ""
[09:31:47.018]                 }
[09:31:47.018]                 NAMES <- toupper(removed)
[09:31:47.018]                 for (kk in seq_along(NAMES)) {
[09:31:47.018]                   name <- removed[[kk]]
[09:31:47.018]                   NAME <- NAMES[[kk]]
[09:31:47.018]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.018]                     next
[09:31:47.018]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.018]                 }
[09:31:47.018]                 if (length(args) > 0) 
[09:31:47.018]                   base::do.call(base::Sys.setenv, args = args)
[09:31:47.018]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:47.018]             }
[09:31:47.018]             else {
[09:31:47.018]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:47.018]             }
[09:31:47.018]             {
[09:31:47.018]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:47.018]                   0L) {
[09:31:47.018]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:47.018]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:47.018]                   base::options(opts)
[09:31:47.018]                 }
[09:31:47.018]                 {
[09:31:47.018]                   {
[09:31:47.018]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:47.018]                     NULL
[09:31:47.018]                   }
[09:31:47.018]                   options(future.plan = NULL)
[09:31:47.018]                   if (is.na(NA_character_)) 
[09:31:47.018]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.018]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:47.018]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:47.018]                     .init = FALSE)
[09:31:47.018]                 }
[09:31:47.018]             }
[09:31:47.018]         }
[09:31:47.018]     })
[09:31:47.018]     if (TRUE) {
[09:31:47.018]         base::sink(type = "output", split = FALSE)
[09:31:47.018]         if (TRUE) {
[09:31:47.018]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:47.018]         }
[09:31:47.018]         else {
[09:31:47.018]             ...future.result["stdout"] <- base::list(NULL)
[09:31:47.018]         }
[09:31:47.018]         base::close(...future.stdout)
[09:31:47.018]         ...future.stdout <- NULL
[09:31:47.018]     }
[09:31:47.018]     ...future.result$conditions <- ...future.conditions
[09:31:47.018]     ...future.result$finished <- base::Sys.time()
[09:31:47.018]     ...future.result
[09:31:47.018] }
[09:31:47.021] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:47.022] receiveMessageFromWorker() for ClusterFuture ...
[09:31:47.022] - Validating connection of MultisessionFuture
[09:31:47.023] - received message: FutureResult
[09:31:47.023] - Received FutureResult
[09:31:47.023] - Erased future from FutureRegistry
[09:31:47.023] result() for ClusterFuture ...
[09:31:47.023] - result already collected: FutureResult
[09:31:47.023] result() for ClusterFuture ... done
[09:31:47.023] signalConditions() ...
[09:31:47.023]  - include = ‘immediateCondition’
[09:31:47.023]  - exclude = 
[09:31:47.023]  - resignal = FALSE
[09:31:47.023]  - Number of conditions: 1
[09:31:47.024] signalConditions() ... done
[09:31:47.024] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d4a020fd-dec5-7248-6e9b-560e9778c064
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:47.024] result() for ClusterFuture ...
[09:31:47.024] - result already collected: FutureResult
[09:31:47.024] result() for ClusterFuture ... done
[09:31:47.024] result() for ClusterFuture ...
[09:31:47.024] - result already collected: FutureResult
[09:31:47.024] result() for ClusterFuture ... done
[09:31:47.024] signalConditions() ...
[09:31:47.024]  - include = ‘immediateCondition’
[09:31:47.025]  - exclude = 
[09:31:47.025]  - resignal = FALSE
[09:31:47.025]  - Number of conditions: 1
[09:31:47.025] signalConditions() ... done
<MyError: boom>
[09:31:47.025] result() for ClusterFuture ...
[09:31:47.025] - result already collected: FutureResult
[09:31:47.025] result() for ClusterFuture ... done
[09:31:47.025] result() for ClusterFuture ...
[09:31:47.025] - result already collected: FutureResult
[09:31:47.025] result() for ClusterFuture ... done
[09:31:47.025] signalConditions() ...
[09:31:47.026]  - include = ‘immediateCondition’
[09:31:47.026]  - exclude = 
[09:31:47.026]  - resignal = FALSE
[09:31:47.026]  - Number of conditions: 1
[09:31:47.026] signalConditions() ... done
[09:31:47.026] Future state: ‘finished’
[09:31:47.026] result() for ClusterFuture ...
[09:31:47.026] - result already collected: FutureResult
[09:31:47.026] result() for ClusterFuture ... done
[09:31:47.026] signalConditions() ...
[09:31:47.026]  - include = ‘condition’
[09:31:47.027]  - exclude = ‘immediateCondition’
[09:31:47.027]  - resignal = TRUE
[09:31:47.027]  - Number of conditions: 1
[09:31:47.027]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[09:31:47.027] signalConditions() ... done
Testing with 2 cores ... DONE
> 
> 
> message("*** multisession() - too large globals ...")
*** multisession() - too large globals ...
> ooptsT <- options(future.globals.maxSize = object.size(1:1014))
> 
> limit <- getOption("future.globals.maxSize")
> cat(sprintf("Max total size of globals: %g bytes\n", limit))
Max total size of globals: 4104 bytes
> 
> for (workers in unique(c(1L, availableCores()))) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message("Max number of sessions: ", workers)
+ 
+   ## A large object
+   a <- 1:1014
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   f <- multisession({ sum(a) }, globals = TRUE, workers = workers)
+   print(f)
+   rm(list = "a")
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+ 
+   ## A too large object
+   a <- 1:1015
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   res <- try(f <- multisession({ sum(a) }, globals = TRUE, workers = workers), silent = TRUE)
+   rm(list = "a")
+   stopifnot(inherits(res, "try-error"))
+ } ## for (workers in ...)
Max number of sessions: 1
a: 4104 bytes
[09:31:47.042] getGlobalsAndPackages() ...
[09:31:47.042] Searching for globals...
[09:31:47.043] - globals found: [3] ‘{’, ‘sum’, ‘a’
[09:31:47.043] Searching for globals ... DONE
[09:31:47.043] Resolving globals: FALSE
[09:31:47.044] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[09:31:47.044] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[09:31:47.044] - globals: [1] ‘a’
[09:31:47.044] 
[09:31:47.044] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d4a020fd-dec5-7248-6e9b-560e9778c064
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:47.045] Packages needed by the future expression (n = 0): <none>
[09:31:47.045] Packages needed by future strategies (n = 0): <none>
[09:31:47.046] {
[09:31:47.046]     {
[09:31:47.046]         {
[09:31:47.046]             ...future.startTime <- base::Sys.time()
[09:31:47.046]             {
[09:31:47.046]                 {
[09:31:47.046]                   {
[09:31:47.046]                     base::local({
[09:31:47.046]                       has_future <- base::requireNamespace("future", 
[09:31:47.046]                         quietly = TRUE)
[09:31:47.046]                       if (has_future) {
[09:31:47.046]                         ns <- base::getNamespace("future")
[09:31:47.046]                         version <- ns[[".package"]][["version"]]
[09:31:47.046]                         if (is.null(version)) 
[09:31:47.046]                           version <- utils::packageVersion("future")
[09:31:47.046]                       }
[09:31:47.046]                       else {
[09:31:47.046]                         version <- NULL
[09:31:47.046]                       }
[09:31:47.046]                       if (!has_future || version < "1.8.0") {
[09:31:47.046]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:47.046]                           "", base::R.version$version.string), 
[09:31:47.046]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:47.046]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:47.046]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:47.046]                             "release", "version")], collapse = " "), 
[09:31:47.046]                           hostname = base::Sys.info()[["nodename"]])
[09:31:47.046]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:47.046]                           info)
[09:31:47.046]                         info <- base::paste(info, collapse = "; ")
[09:31:47.046]                         if (!has_future) {
[09:31:47.046]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:47.046]                             info)
[09:31:47.046]                         }
[09:31:47.046]                         else {
[09:31:47.046]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:47.046]                             info, version)
[09:31:47.046]                         }
[09:31:47.046]                         base::stop(msg)
[09:31:47.046]                       }
[09:31:47.046]                     })
[09:31:47.046]                   }
[09:31:47.046]                   ...future.strategy.old <- future::plan("list")
[09:31:47.046]                   options(future.plan = NULL)
[09:31:47.046]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.046]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:47.046]                 }
[09:31:47.046]                 ...future.workdir <- getwd()
[09:31:47.046]             }
[09:31:47.046]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:47.046]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:47.046]         }
[09:31:47.046]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:47.046]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[09:31:47.046]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:47.046]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:47.046]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:47.046]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:47.046]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:47.046]             base::names(...future.oldOptions))
[09:31:47.046]     }
[09:31:47.046]     if (FALSE) {
[09:31:47.046]     }
[09:31:47.046]     else {
[09:31:47.046]         if (TRUE) {
[09:31:47.046]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:47.046]                 open = "w")
[09:31:47.046]         }
[09:31:47.046]         else {
[09:31:47.046]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:47.046]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:47.046]         }
[09:31:47.046]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:47.046]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:47.046]             base::sink(type = "output", split = FALSE)
[09:31:47.046]             base::close(...future.stdout)
[09:31:47.046]         }, add = TRUE)
[09:31:47.046]     }
[09:31:47.046]     ...future.frame <- base::sys.nframe()
[09:31:47.046]     ...future.conditions <- base::list()
[09:31:47.046]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:47.046]     if (FALSE) {
[09:31:47.046]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:47.046]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:47.046]     }
[09:31:47.046]     ...future.result <- base::tryCatch({
[09:31:47.046]         base::withCallingHandlers({
[09:31:47.046]             ...future.value <- base::withVisible(base::local({
[09:31:47.046]                 sum(a)
[09:31:47.046]             }))
[09:31:47.046]             future::FutureResult(value = ...future.value$value, 
[09:31:47.046]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.046]                   ...future.rng), globalenv = if (FALSE) 
[09:31:47.046]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:47.046]                     ...future.globalenv.names))
[09:31:47.046]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:47.046]         }, condition = base::local({
[09:31:47.046]             c <- base::c
[09:31:47.046]             inherits <- base::inherits
[09:31:47.046]             invokeRestart <- base::invokeRestart
[09:31:47.046]             length <- base::length
[09:31:47.046]             list <- base::list
[09:31:47.046]             seq.int <- base::seq.int
[09:31:47.046]             signalCondition <- base::signalCondition
[09:31:47.046]             sys.calls <- base::sys.calls
[09:31:47.046]             `[[` <- base::`[[`
[09:31:47.046]             `+` <- base::`+`
[09:31:47.046]             `<<-` <- base::`<<-`
[09:31:47.046]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:47.046]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:47.046]                   3L)]
[09:31:47.046]             }
[09:31:47.046]             function(cond) {
[09:31:47.046]                 is_error <- inherits(cond, "error")
[09:31:47.046]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:47.046]                   NULL)
[09:31:47.046]                 if (is_error) {
[09:31:47.046]                   sessionInformation <- function() {
[09:31:47.046]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:47.046]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:47.046]                       search = base::search(), system = base::Sys.info())
[09:31:47.046]                   }
[09:31:47.046]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.046]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:47.046]                     cond$call), session = sessionInformation(), 
[09:31:47.046]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:47.046]                   signalCondition(cond)
[09:31:47.046]                 }
[09:31:47.046]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:47.046]                 "immediateCondition"))) {
[09:31:47.046]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:47.046]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.046]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:47.046]                   if (TRUE && !signal) {
[09:31:47.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.046]                     {
[09:31:47.046]                       inherits <- base::inherits
[09:31:47.046]                       invokeRestart <- base::invokeRestart
[09:31:47.046]                       is.null <- base::is.null
[09:31:47.046]                       muffled <- FALSE
[09:31:47.046]                       if (inherits(cond, "message")) {
[09:31:47.046]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.046]                         if (muffled) 
[09:31:47.046]                           invokeRestart("muffleMessage")
[09:31:47.046]                       }
[09:31:47.046]                       else if (inherits(cond, "warning")) {
[09:31:47.046]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.046]                         if (muffled) 
[09:31:47.046]                           invokeRestart("muffleWarning")
[09:31:47.046]                       }
[09:31:47.046]                       else if (inherits(cond, "condition")) {
[09:31:47.046]                         if (!is.null(pattern)) {
[09:31:47.046]                           computeRestarts <- base::computeRestarts
[09:31:47.046]                           grepl <- base::grepl
[09:31:47.046]                           restarts <- computeRestarts(cond)
[09:31:47.046]                           for (restart in restarts) {
[09:31:47.046]                             name <- restart$name
[09:31:47.046]                             if (is.null(name)) 
[09:31:47.046]                               next
[09:31:47.046]                             if (!grepl(pattern, name)) 
[09:31:47.046]                               next
[09:31:47.046]                             invokeRestart(restart)
[09:31:47.046]                             muffled <- TRUE
[09:31:47.046]                             break
[09:31:47.046]                           }
[09:31:47.046]                         }
[09:31:47.046]                       }
[09:31:47.046]                       invisible(muffled)
[09:31:47.046]                     }
[09:31:47.046]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.046]                   }
[09:31:47.046]                 }
[09:31:47.046]                 else {
[09:31:47.046]                   if (TRUE) {
[09:31:47.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.046]                     {
[09:31:47.046]                       inherits <- base::inherits
[09:31:47.046]                       invokeRestart <- base::invokeRestart
[09:31:47.046]                       is.null <- base::is.null
[09:31:47.046]                       muffled <- FALSE
[09:31:47.046]                       if (inherits(cond, "message")) {
[09:31:47.046]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.046]                         if (muffled) 
[09:31:47.046]                           invokeRestart("muffleMessage")
[09:31:47.046]                       }
[09:31:47.046]                       else if (inherits(cond, "warning")) {
[09:31:47.046]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.046]                         if (muffled) 
[09:31:47.046]                           invokeRestart("muffleWarning")
[09:31:47.046]                       }
[09:31:47.046]                       else if (inherits(cond, "condition")) {
[09:31:47.046]                         if (!is.null(pattern)) {
[09:31:47.046]                           computeRestarts <- base::computeRestarts
[09:31:47.046]                           grepl <- base::grepl
[09:31:47.046]                           restarts <- computeRestarts(cond)
[09:31:47.046]                           for (restart in restarts) {
[09:31:47.046]                             name <- restart$name
[09:31:47.046]                             if (is.null(name)) 
[09:31:47.046]                               next
[09:31:47.046]                             if (!grepl(pattern, name)) 
[09:31:47.046]                               next
[09:31:47.046]                             invokeRestart(restart)
[09:31:47.046]                             muffled <- TRUE
[09:31:47.046]                             break
[09:31:47.046]                           }
[09:31:47.046]                         }
[09:31:47.046]                       }
[09:31:47.046]                       invisible(muffled)
[09:31:47.046]                     }
[09:31:47.046]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.046]                   }
[09:31:47.046]                 }
[09:31:47.046]             }
[09:31:47.046]         }))
[09:31:47.046]     }, error = function(ex) {
[09:31:47.046]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:47.046]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.046]                 ...future.rng), started = ...future.startTime, 
[09:31:47.046]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:47.046]             version = "1.8"), class = "FutureResult")
[09:31:47.046]     }, finally = {
[09:31:47.046]         if (!identical(...future.workdir, getwd())) 
[09:31:47.046]             setwd(...future.workdir)
[09:31:47.046]         {
[09:31:47.046]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:47.046]                 ...future.oldOptions$nwarnings <- NULL
[09:31:47.046]             }
[09:31:47.046]             base::options(...future.oldOptions)
[09:31:47.046]             if (.Platform$OS.type == "windows") {
[09:31:47.046]                 old_names <- names(...future.oldEnvVars)
[09:31:47.046]                 envs <- base::Sys.getenv()
[09:31:47.046]                 names <- names(envs)
[09:31:47.046]                 common <- intersect(names, old_names)
[09:31:47.046]                 added <- setdiff(names, old_names)
[09:31:47.046]                 removed <- setdiff(old_names, names)
[09:31:47.046]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:47.046]                   envs[common]]
[09:31:47.046]                 NAMES <- toupper(changed)
[09:31:47.046]                 args <- list()
[09:31:47.046]                 for (kk in seq_along(NAMES)) {
[09:31:47.046]                   name <- changed[[kk]]
[09:31:47.046]                   NAME <- NAMES[[kk]]
[09:31:47.046]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.046]                     next
[09:31:47.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.046]                 }
[09:31:47.046]                 NAMES <- toupper(added)
[09:31:47.046]                 for (kk in seq_along(NAMES)) {
[09:31:47.046]                   name <- added[[kk]]
[09:31:47.046]                   NAME <- NAMES[[kk]]
[09:31:47.046]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.046]                     next
[09:31:47.046]                   args[[name]] <- ""
[09:31:47.046]                 }
[09:31:47.046]                 NAMES <- toupper(removed)
[09:31:47.046]                 for (kk in seq_along(NAMES)) {
[09:31:47.046]                   name <- removed[[kk]]
[09:31:47.046]                   NAME <- NAMES[[kk]]
[09:31:47.046]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.046]                     next
[09:31:47.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.046]                 }
[09:31:47.046]                 if (length(args) > 0) 
[09:31:47.046]                   base::do.call(base::Sys.setenv, args = args)
[09:31:47.046]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:47.046]             }
[09:31:47.046]             else {
[09:31:47.046]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:47.046]             }
[09:31:47.046]             {
[09:31:47.046]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:47.046]                   0L) {
[09:31:47.046]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:47.046]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:47.046]                   base::options(opts)
[09:31:47.046]                 }
[09:31:47.046]                 {
[09:31:47.046]                   {
[09:31:47.046]                     NULL
[09:31:47.046]                     RNGkind("Mersenne-Twister")
[09:31:47.046]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:47.046]                       inherits = FALSE)
[09:31:47.046]                   }
[09:31:47.046]                   options(future.plan = NULL)
[09:31:47.046]                   if (is.na(NA_character_)) 
[09:31:47.046]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.046]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:47.046]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:47.046]                     .init = FALSE)
[09:31:47.046]                 }
[09:31:47.046]             }
[09:31:47.046]         }
[09:31:47.046]     })
[09:31:47.046]     if (TRUE) {
[09:31:47.046]         base::sink(type = "output", split = FALSE)
[09:31:47.046]         if (TRUE) {
[09:31:47.046]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:47.046]         }
[09:31:47.046]         else {
[09:31:47.046]             ...future.result["stdout"] <- base::list(NULL)
[09:31:47.046]         }
[09:31:47.046]         base::close(...future.stdout)
[09:31:47.046]         ...future.stdout <- NULL
[09:31:47.046]     }
[09:31:47.046]     ...future.result$conditions <- ...future.conditions
[09:31:47.046]     ...future.result$finished <- base::Sys.time()
[09:31:47.046]     ...future.result
[09:31:47.046] }
[09:31:47.047] assign_globals() ...
[09:31:47.047] List of 1
[09:31:47.047]  $ a: int [1:1014] 1 2 3 4 5 6 7 8 9 10 ...
[09:31:47.047]  - attr(*, "where")=List of 1
[09:31:47.047]   ..$ a:<environment: R_EmptyEnv> 
[09:31:47.047]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:47.047]  - attr(*, "resolved")= logi FALSE
[09:31:47.047]  - attr(*, "total_size")= num 4104
[09:31:47.049] - copied ‘a’ to environment
[09:31:47.050] assign_globals() ... done
[09:31:47.050] plan(): Setting new future strategy stack:
[09:31:47.050] List of future strategies:
[09:31:47.050] 1. sequential:
[09:31:47.050]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:47.050]    - tweaked: FALSE
[09:31:47.050]    - call: NULL
[09:31:47.050] plan(): nbrOfWorkers() = 1
[09:31:47.051] plan(): Setting new future strategy stack:
[09:31:47.051] List of future strategies:
[09:31:47.051] 1. sequential:
[09:31:47.051]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:47.051]    - tweaked: FALSE
[09:31:47.051]    - call: future::plan("sequential")
[09:31:47.052] plan(): nbrOfWorkers() = 1
[09:31:47.052] SequentialFuture started (and completed)
[1] 514605
a: 4112 bytes
[09:31:47.052] getGlobalsAndPackages() ...
[09:31:47.052] Searching for globals...
[09:31:47.053] - globals found: [3] ‘{’, ‘sum’, ‘a’
[09:31:47.053] Searching for globals ... DONE
[09:31:47.053] Resolving globals: FALSE
[09:31:47.053] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[09:31:47.054] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
Max number of sessions: 2
a: 4104 bytes
[09:31:47.054] getGlobalsAndPackages() ...
[09:31:47.054] Searching for globals...
[09:31:47.055] - globals found: [3] ‘{’, ‘sum’, ‘a’
[09:31:47.055] Searching for globals ... DONE
[09:31:47.055] Resolving globals: FALSE
[09:31:47.055] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[09:31:47.056] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[09:31:47.056] - globals: [1] ‘a’
[09:31:47.056] 
[09:31:47.056] getGlobalsAndPackages() ... DONE
[09:31:47.066] Packages needed by the future expression (n = 0): <none>
[09:31:47.066] Packages needed by future strategies (n = 0): <none>
[09:31:47.067] {
[09:31:47.067]     {
[09:31:47.067]         {
[09:31:47.067]             ...future.startTime <- base::Sys.time()
[09:31:47.067]             {
[09:31:47.067]                 {
[09:31:47.067]                   {
[09:31:47.067]                     {
[09:31:47.067]                       base::local({
[09:31:47.067]                         has_future <- base::requireNamespace("future", 
[09:31:47.067]                           quietly = TRUE)
[09:31:47.067]                         if (has_future) {
[09:31:47.067]                           ns <- base::getNamespace("future")
[09:31:47.067]                           version <- ns[[".package"]][["version"]]
[09:31:47.067]                           if (is.null(version)) 
[09:31:47.067]                             version <- utils::packageVersion("future")
[09:31:47.067]                         }
[09:31:47.067]                         else {
[09:31:47.067]                           version <- NULL
[09:31:47.067]                         }
[09:31:47.067]                         if (!has_future || version < "1.8.0") {
[09:31:47.067]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:47.067]                             "", base::R.version$version.string), 
[09:31:47.067]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:47.067]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:47.067]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:47.067]                               "release", "version")], collapse = " "), 
[09:31:47.067]                             hostname = base::Sys.info()[["nodename"]])
[09:31:47.067]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:47.067]                             info)
[09:31:47.067]                           info <- base::paste(info, collapse = "; ")
[09:31:47.067]                           if (!has_future) {
[09:31:47.067]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:47.067]                               info)
[09:31:47.067]                           }
[09:31:47.067]                           else {
[09:31:47.067]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:47.067]                               info, version)
[09:31:47.067]                           }
[09:31:47.067]                           base::stop(msg)
[09:31:47.067]                         }
[09:31:47.067]                       })
[09:31:47.067]                     }
[09:31:47.067]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:47.067]                     base::options(mc.cores = 1L)
[09:31:47.067]                   }
[09:31:47.067]                   ...future.strategy.old <- future::plan("list")
[09:31:47.067]                   options(future.plan = NULL)
[09:31:47.067]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.067]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:47.067]                 }
[09:31:47.067]                 ...future.workdir <- getwd()
[09:31:47.067]             }
[09:31:47.067]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:47.067]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:47.067]         }
[09:31:47.067]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:47.067]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[09:31:47.067]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:47.067]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:47.067]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:47.067]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:47.067]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:47.067]             base::names(...future.oldOptions))
[09:31:47.067]     }
[09:31:47.067]     if (FALSE) {
[09:31:47.067]     }
[09:31:47.067]     else {
[09:31:47.067]         if (TRUE) {
[09:31:47.067]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:47.067]                 open = "w")
[09:31:47.067]         }
[09:31:47.067]         else {
[09:31:47.067]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:47.067]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:47.067]         }
[09:31:47.067]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:47.067]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:47.067]             base::sink(type = "output", split = FALSE)
[09:31:47.067]             base::close(...future.stdout)
[09:31:47.067]         }, add = TRUE)
[09:31:47.067]     }
[09:31:47.067]     ...future.frame <- base::sys.nframe()
[09:31:47.067]     ...future.conditions <- base::list()
[09:31:47.067]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:47.067]     if (FALSE) {
[09:31:47.067]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:47.067]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:47.067]     }
[09:31:47.067]     ...future.result <- base::tryCatch({
[09:31:47.067]         base::withCallingHandlers({
[09:31:47.067]             ...future.value <- base::withVisible(base::local({
[09:31:47.067]                 ...future.makeSendCondition <- base::local({
[09:31:47.067]                   sendCondition <- NULL
[09:31:47.067]                   function(frame = 1L) {
[09:31:47.067]                     if (is.function(sendCondition)) 
[09:31:47.067]                       return(sendCondition)
[09:31:47.067]                     ns <- getNamespace("parallel")
[09:31:47.067]                     if (exists("sendData", mode = "function", 
[09:31:47.067]                       envir = ns)) {
[09:31:47.067]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:47.067]                         envir = ns)
[09:31:47.067]                       envir <- sys.frame(frame)
[09:31:47.067]                       master <- NULL
[09:31:47.067]                       while (!identical(envir, .GlobalEnv) && 
[09:31:47.067]                         !identical(envir, emptyenv())) {
[09:31:47.067]                         if (exists("master", mode = "list", envir = envir, 
[09:31:47.067]                           inherits = FALSE)) {
[09:31:47.067]                           master <- get("master", mode = "list", 
[09:31:47.067]                             envir = envir, inherits = FALSE)
[09:31:47.067]                           if (inherits(master, c("SOCKnode", 
[09:31:47.067]                             "SOCK0node"))) {
[09:31:47.067]                             sendCondition <<- function(cond) {
[09:31:47.067]                               data <- list(type = "VALUE", value = cond, 
[09:31:47.067]                                 success = TRUE)
[09:31:47.067]                               parallel_sendData(master, data)
[09:31:47.067]                             }
[09:31:47.067]                             return(sendCondition)
[09:31:47.067]                           }
[09:31:47.067]                         }
[09:31:47.067]                         frame <- frame + 1L
[09:31:47.067]                         envir <- sys.frame(frame)
[09:31:47.067]                       }
[09:31:47.067]                     }
[09:31:47.067]                     sendCondition <<- function(cond) NULL
[09:31:47.067]                   }
[09:31:47.067]                 })
[09:31:47.067]                 withCallingHandlers({
[09:31:47.067]                   {
[09:31:47.067]                     sum(a)
[09:31:47.067]                   }
[09:31:47.067]                 }, immediateCondition = function(cond) {
[09:31:47.067]                   sendCondition <- ...future.makeSendCondition()
[09:31:47.067]                   sendCondition(cond)
[09:31:47.067]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.067]                   {
[09:31:47.067]                     inherits <- base::inherits
[09:31:47.067]                     invokeRestart <- base::invokeRestart
[09:31:47.067]                     is.null <- base::is.null
[09:31:47.067]                     muffled <- FALSE
[09:31:47.067]                     if (inherits(cond, "message")) {
[09:31:47.067]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:47.067]                       if (muffled) 
[09:31:47.067]                         invokeRestart("muffleMessage")
[09:31:47.067]                     }
[09:31:47.067]                     else if (inherits(cond, "warning")) {
[09:31:47.067]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:47.067]                       if (muffled) 
[09:31:47.067]                         invokeRestart("muffleWarning")
[09:31:47.067]                     }
[09:31:47.067]                     else if (inherits(cond, "condition")) {
[09:31:47.067]                       if (!is.null(pattern)) {
[09:31:47.067]                         computeRestarts <- base::computeRestarts
[09:31:47.067]                         grepl <- base::grepl
[09:31:47.067]                         restarts <- computeRestarts(cond)
[09:31:47.067]                         for (restart in restarts) {
[09:31:47.067]                           name <- restart$name
[09:31:47.067]                           if (is.null(name)) 
[09:31:47.067]                             next
[09:31:47.067]                           if (!grepl(pattern, name)) 
[09:31:47.067]                             next
[09:31:47.067]                           invokeRestart(restart)
[09:31:47.067]                           muffled <- TRUE
[09:31:47.067]                           break
[09:31:47.067]                         }
[09:31:47.067]                       }
[09:31:47.067]                     }
[09:31:47.067]                     invisible(muffled)
[09:31:47.067]                   }
[09:31:47.067]                   muffleCondition(cond)
[09:31:47.067]                 })
[09:31:47.067]             }))
[09:31:47.067]             future::FutureResult(value = ...future.value$value, 
[09:31:47.067]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.067]                   ...future.rng), globalenv = if (FALSE) 
[09:31:47.067]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:47.067]                     ...future.globalenv.names))
[09:31:47.067]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:47.067]         }, condition = base::local({
[09:31:47.067]             c <- base::c
[09:31:47.067]             inherits <- base::inherits
[09:31:47.067]             invokeRestart <- base::invokeRestart
[09:31:47.067]             length <- base::length
[09:31:47.067]             list <- base::list
[09:31:47.067]             seq.int <- base::seq.int
[09:31:47.067]             signalCondition <- base::signalCondition
[09:31:47.067]             sys.calls <- base::sys.calls
[09:31:47.067]             `[[` <- base::`[[`
[09:31:47.067]             `+` <- base::`+`
[09:31:47.067]             `<<-` <- base::`<<-`
[09:31:47.067]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:47.067]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:47.067]                   3L)]
[09:31:47.067]             }
[09:31:47.067]             function(cond) {
[09:31:47.067]                 is_error <- inherits(cond, "error")
[09:31:47.067]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:47.067]                   NULL)
[09:31:47.067]                 if (is_error) {
[09:31:47.067]                   sessionInformation <- function() {
[09:31:47.067]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:47.067]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:47.067]                       search = base::search(), system = base::Sys.info())
[09:31:47.067]                   }
[09:31:47.067]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.067]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:47.067]                     cond$call), session = sessionInformation(), 
[09:31:47.067]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:47.067]                   signalCondition(cond)
[09:31:47.067]                 }
[09:31:47.067]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:47.067]                 "immediateCondition"))) {
[09:31:47.067]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:47.067]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.067]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:47.067]                   if (TRUE && !signal) {
[09:31:47.067]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.067]                     {
[09:31:47.067]                       inherits <- base::inherits
[09:31:47.067]                       invokeRestart <- base::invokeRestart
[09:31:47.067]                       is.null <- base::is.null
[09:31:47.067]                       muffled <- FALSE
[09:31:47.067]                       if (inherits(cond, "message")) {
[09:31:47.067]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.067]                         if (muffled) 
[09:31:47.067]                           invokeRestart("muffleMessage")
[09:31:47.067]                       }
[09:31:47.067]                       else if (inherits(cond, "warning")) {
[09:31:47.067]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.067]                         if (muffled) 
[09:31:47.067]                           invokeRestart("muffleWarning")
[09:31:47.067]                       }
[09:31:47.067]                       else if (inherits(cond, "condition")) {
[09:31:47.067]                         if (!is.null(pattern)) {
[09:31:47.067]                           computeRestarts <- base::computeRestarts
[09:31:47.067]                           grepl <- base::grepl
[09:31:47.067]                           restarts <- computeRestarts(cond)
[09:31:47.067]                           for (restart in restarts) {
[09:31:47.067]                             name <- restart$name
[09:31:47.067]                             if (is.null(name)) 
[09:31:47.067]                               next
[09:31:47.067]                             if (!grepl(pattern, name)) 
[09:31:47.067]                               next
[09:31:47.067]                             invokeRestart(restart)
[09:31:47.067]                             muffled <- TRUE
[09:31:47.067]                             break
[09:31:47.067]                           }
[09:31:47.067]                         }
[09:31:47.067]                       }
[09:31:47.067]                       invisible(muffled)
[09:31:47.067]                     }
[09:31:47.067]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.067]                   }
[09:31:47.067]                 }
[09:31:47.067]                 else {
[09:31:47.067]                   if (TRUE) {
[09:31:47.067]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.067]                     {
[09:31:47.067]                       inherits <- base::inherits
[09:31:47.067]                       invokeRestart <- base::invokeRestart
[09:31:47.067]                       is.null <- base::is.null
[09:31:47.067]                       muffled <- FALSE
[09:31:47.067]                       if (inherits(cond, "message")) {
[09:31:47.067]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.067]                         if (muffled) 
[09:31:47.067]                           invokeRestart("muffleMessage")
[09:31:47.067]                       }
[09:31:47.067]                       else if (inherits(cond, "warning")) {
[09:31:47.067]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.067]                         if (muffled) 
[09:31:47.067]                           invokeRestart("muffleWarning")
[09:31:47.067]                       }
[09:31:47.067]                       else if (inherits(cond, "condition")) {
[09:31:47.067]                         if (!is.null(pattern)) {
[09:31:47.067]                           computeRestarts <- base::computeRestarts
[09:31:47.067]                           grepl <- base::grepl
[09:31:47.067]                           restarts <- computeRestarts(cond)
[09:31:47.067]                           for (restart in restarts) {
[09:31:47.067]                             name <- restart$name
[09:31:47.067]                             if (is.null(name)) 
[09:31:47.067]                               next
[09:31:47.067]                             if (!grepl(pattern, name)) 
[09:31:47.067]                               next
[09:31:47.067]                             invokeRestart(restart)
[09:31:47.067]                             muffled <- TRUE
[09:31:47.067]                             break
[09:31:47.067]                           }
[09:31:47.067]                         }
[09:31:47.067]                       }
[09:31:47.067]                       invisible(muffled)
[09:31:47.067]                     }
[09:31:47.067]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.067]                   }
[09:31:47.067]                 }
[09:31:47.067]             }
[09:31:47.067]         }))
[09:31:47.067]     }, error = function(ex) {
[09:31:47.067]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:47.067]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.067]                 ...future.rng), started = ...future.startTime, 
[09:31:47.067]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:47.067]             version = "1.8"), class = "FutureResult")
[09:31:47.067]     }, finally = {
[09:31:47.067]         if (!identical(...future.workdir, getwd())) 
[09:31:47.067]             setwd(...future.workdir)
[09:31:47.067]         {
[09:31:47.067]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:47.067]                 ...future.oldOptions$nwarnings <- NULL
[09:31:47.067]             }
[09:31:47.067]             base::options(...future.oldOptions)
[09:31:47.067]             if (.Platform$OS.type == "windows") {
[09:31:47.067]                 old_names <- names(...future.oldEnvVars)
[09:31:47.067]                 envs <- base::Sys.getenv()
[09:31:47.067]                 names <- names(envs)
[09:31:47.067]                 common <- intersect(names, old_names)
[09:31:47.067]                 added <- setdiff(names, old_names)
[09:31:47.067]                 removed <- setdiff(old_names, names)
[09:31:47.067]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:47.067]                   envs[common]]
[09:31:47.067]                 NAMES <- toupper(changed)
[09:31:47.067]                 args <- list()
[09:31:47.067]                 for (kk in seq_along(NAMES)) {
[09:31:47.067]                   name <- changed[[kk]]
[09:31:47.067]                   NAME <- NAMES[[kk]]
[09:31:47.067]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.067]                     next
[09:31:47.067]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.067]                 }
[09:31:47.067]                 NAMES <- toupper(added)
[09:31:47.067]                 for (kk in seq_along(NAMES)) {
[09:31:47.067]                   name <- added[[kk]]
[09:31:47.067]                   NAME <- NAMES[[kk]]
[09:31:47.067]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.067]                     next
[09:31:47.067]                   args[[name]] <- ""
[09:31:47.067]                 }
[09:31:47.067]                 NAMES <- toupper(removed)
[09:31:47.067]                 for (kk in seq_along(NAMES)) {
[09:31:47.067]                   name <- removed[[kk]]
[09:31:47.067]                   NAME <- NAMES[[kk]]
[09:31:47.067]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.067]                     next
[09:31:47.067]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.067]                 }
[09:31:47.067]                 if (length(args) > 0) 
[09:31:47.067]                   base::do.call(base::Sys.setenv, args = args)
[09:31:47.067]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:47.067]             }
[09:31:47.067]             else {
[09:31:47.067]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:47.067]             }
[09:31:47.067]             {
[09:31:47.067]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:47.067]                   0L) {
[09:31:47.067]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:47.067]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:47.067]                   base::options(opts)
[09:31:47.067]                 }
[09:31:47.067]                 {
[09:31:47.067]                   {
[09:31:47.067]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:47.067]                     NULL
[09:31:47.067]                   }
[09:31:47.067]                   options(future.plan = NULL)
[09:31:47.067]                   if (is.na(NA_character_)) 
[09:31:47.067]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.067]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:47.067]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:47.067]                     .init = FALSE)
[09:31:47.067]                 }
[09:31:47.067]             }
[09:31:47.067]         }
[09:31:47.067]     })
[09:31:47.067]     if (TRUE) {
[09:31:47.067]         base::sink(type = "output", split = FALSE)
[09:31:47.067]         if (TRUE) {
[09:31:47.067]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:47.067]         }
[09:31:47.067]         else {
[09:31:47.067]             ...future.result["stdout"] <- base::list(NULL)
[09:31:47.067]         }
[09:31:47.067]         base::close(...future.stdout)
[09:31:47.067]         ...future.stdout <- NULL
[09:31:47.067]     }
[09:31:47.067]     ...future.result$conditions <- ...future.conditions
[09:31:47.067]     ...future.result$finished <- base::Sys.time()
[09:31:47.067]     ...future.result
[09:31:47.067] }
[09:31:47.069] Exporting 1 global objects (4.01 KiB) to cluster node #1 ...
[09:31:47.069] Exporting ‘a’ (4.01 KiB) to cluster node #1 ...
[09:31:47.070] Exporting ‘a’ (4.01 KiB) to cluster node #1 ... DONE
[09:31:47.070] Exporting 1 global objects (4.01 KiB) to cluster node #1 ... DONE
[09:31:47.070] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:47.072] receiveMessageFromWorker() for ClusterFuture ...
[09:31:47.072] - Validating connection of MultisessionFuture
[09:31:47.072] - received message: FutureResult
[09:31:47.072] - Received FutureResult
[09:31:47.072] - Erased future from FutureRegistry
[09:31:47.072] result() for ClusterFuture ...
[09:31:47.072] - result already collected: FutureResult
[09:31:47.073] result() for ClusterFuture ... done
[09:31:47.073] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d4a020fd-dec5-7248-6e9b-560e9778c064
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:47.073] result() for ClusterFuture ...
[09:31:47.073] - result already collected: FutureResult
[09:31:47.073] result() for ClusterFuture ... done
[09:31:47.073] result() for ClusterFuture ...
[09:31:47.073] - result already collected: FutureResult
[09:31:47.073] result() for ClusterFuture ... done
[1] 514605
a: 4112 bytes
[09:31:47.073] getGlobalsAndPackages() ...
[09:31:47.074] Searching for globals...
[09:31:47.074] - globals found: [3] ‘{’, ‘sum’, ‘a’
[09:31:47.074] Searching for globals ... DONE
[09:31:47.075] Resolving globals: FALSE
[09:31:47.075] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[09:31:47.075] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
> 
> ## Undo options changed in this test
> options(ooptsT)
> 
> message("*** multisession() - too large globals ... DONE")
*** multisession() - too large globals ... DONE
> 
> message("*** multisession(..., workers = 1L) ...")
*** multisession(..., workers = 1L) ...
> 
> a <- 2
> b <- 3
> yTruth <- a * b
> 
> f <- multisession({ a * b }, globals = TRUE, workers = 1L)
[09:31:47.076] getGlobalsAndPackages() ...
[09:31:47.076] Searching for globals...
[09:31:47.077] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[09:31:47.077] Searching for globals ... DONE
[09:31:47.077] Resolving globals: FALSE
[09:31:47.077] The total size of the 2 globals is 112 bytes (112 bytes)
[09:31:47.077] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[09:31:47.078] - globals: [2] ‘a’, ‘b’
[09:31:47.078] 
[09:31:47.078] getGlobalsAndPackages() ... DONE
> rm(list = c("a", "b"))
> 
> v <- value(f)
[09:31:47.078] Packages needed by the future expression (n = 0): <none>
[09:31:47.078] Packages needed by future strategies (n = 0): <none>
[09:31:47.079] {
[09:31:47.079]     {
[09:31:47.079]         {
[09:31:47.079]             ...future.startTime <- base::Sys.time()
[09:31:47.079]             {
[09:31:47.079]                 {
[09:31:47.079]                   {
[09:31:47.079]                     base::local({
[09:31:47.079]                       has_future <- base::requireNamespace("future", 
[09:31:47.079]                         quietly = TRUE)
[09:31:47.079]                       if (has_future) {
[09:31:47.079]                         ns <- base::getNamespace("future")
[09:31:47.079]                         version <- ns[[".package"]][["version"]]
[09:31:47.079]                         if (is.null(version)) 
[09:31:47.079]                           version <- utils::packageVersion("future")
[09:31:47.079]                       }
[09:31:47.079]                       else {
[09:31:47.079]                         version <- NULL
[09:31:47.079]                       }
[09:31:47.079]                       if (!has_future || version < "1.8.0") {
[09:31:47.079]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:47.079]                           "", base::R.version$version.string), 
[09:31:47.079]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:47.079]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:47.079]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:47.079]                             "release", "version")], collapse = " "), 
[09:31:47.079]                           hostname = base::Sys.info()[["nodename"]])
[09:31:47.079]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:47.079]                           info)
[09:31:47.079]                         info <- base::paste(info, collapse = "; ")
[09:31:47.079]                         if (!has_future) {
[09:31:47.079]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:47.079]                             info)
[09:31:47.079]                         }
[09:31:47.079]                         else {
[09:31:47.079]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:47.079]                             info, version)
[09:31:47.079]                         }
[09:31:47.079]                         base::stop(msg)
[09:31:47.079]                       }
[09:31:47.079]                     })
[09:31:47.079]                   }
[09:31:47.079]                   ...future.strategy.old <- future::plan("list")
[09:31:47.079]                   options(future.plan = NULL)
[09:31:47.079]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.079]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:47.079]                 }
[09:31:47.079]                 ...future.workdir <- getwd()
[09:31:47.079]             }
[09:31:47.079]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:47.079]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:47.079]         }
[09:31:47.079]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:47.079]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:47.079]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:47.079]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:47.079]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:47.079]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:47.079]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:47.079]             base::names(...future.oldOptions))
[09:31:47.079]     }
[09:31:47.079]     if (FALSE) {
[09:31:47.079]     }
[09:31:47.079]     else {
[09:31:47.079]         if (TRUE) {
[09:31:47.079]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:47.079]                 open = "w")
[09:31:47.079]         }
[09:31:47.079]         else {
[09:31:47.079]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:47.079]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:47.079]         }
[09:31:47.079]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:47.079]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:47.079]             base::sink(type = "output", split = FALSE)
[09:31:47.079]             base::close(...future.stdout)
[09:31:47.079]         }, add = TRUE)
[09:31:47.079]     }
[09:31:47.079]     ...future.frame <- base::sys.nframe()
[09:31:47.079]     ...future.conditions <- base::list()
[09:31:47.079]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:47.079]     if (FALSE) {
[09:31:47.079]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:47.079]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:47.079]     }
[09:31:47.079]     ...future.result <- base::tryCatch({
[09:31:47.079]         base::withCallingHandlers({
[09:31:47.079]             ...future.value <- base::withVisible(base::local({
[09:31:47.079]                 a * b
[09:31:47.079]             }))
[09:31:47.079]             future::FutureResult(value = ...future.value$value, 
[09:31:47.079]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.079]                   ...future.rng), globalenv = if (FALSE) 
[09:31:47.079]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:47.079]                     ...future.globalenv.names))
[09:31:47.079]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:47.079]         }, condition = base::local({
[09:31:47.079]             c <- base::c
[09:31:47.079]             inherits <- base::inherits
[09:31:47.079]             invokeRestart <- base::invokeRestart
[09:31:47.079]             length <- base::length
[09:31:47.079]             list <- base::list
[09:31:47.079]             seq.int <- base::seq.int
[09:31:47.079]             signalCondition <- base::signalCondition
[09:31:47.079]             sys.calls <- base::sys.calls
[09:31:47.079]             `[[` <- base::`[[`
[09:31:47.079]             `+` <- base::`+`
[09:31:47.079]             `<<-` <- base::`<<-`
[09:31:47.079]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:47.079]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:47.079]                   3L)]
[09:31:47.079]             }
[09:31:47.079]             function(cond) {
[09:31:47.079]                 is_error <- inherits(cond, "error")
[09:31:47.079]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:47.079]                   NULL)
[09:31:47.079]                 if (is_error) {
[09:31:47.079]                   sessionInformation <- function() {
[09:31:47.079]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:47.079]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:47.079]                       search = base::search(), system = base::Sys.info())
[09:31:47.079]                   }
[09:31:47.079]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.079]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:47.079]                     cond$call), session = sessionInformation(), 
[09:31:47.079]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:47.079]                   signalCondition(cond)
[09:31:47.079]                 }
[09:31:47.079]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:47.079]                 "immediateCondition"))) {
[09:31:47.079]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:47.079]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.079]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:47.079]                   if (TRUE && !signal) {
[09:31:47.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.079]                     {
[09:31:47.079]                       inherits <- base::inherits
[09:31:47.079]                       invokeRestart <- base::invokeRestart
[09:31:47.079]                       is.null <- base::is.null
[09:31:47.079]                       muffled <- FALSE
[09:31:47.079]                       if (inherits(cond, "message")) {
[09:31:47.079]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.079]                         if (muffled) 
[09:31:47.079]                           invokeRestart("muffleMessage")
[09:31:47.079]                       }
[09:31:47.079]                       else if (inherits(cond, "warning")) {
[09:31:47.079]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.079]                         if (muffled) 
[09:31:47.079]                           invokeRestart("muffleWarning")
[09:31:47.079]                       }
[09:31:47.079]                       else if (inherits(cond, "condition")) {
[09:31:47.079]                         if (!is.null(pattern)) {
[09:31:47.079]                           computeRestarts <- base::computeRestarts
[09:31:47.079]                           grepl <- base::grepl
[09:31:47.079]                           restarts <- computeRestarts(cond)
[09:31:47.079]                           for (restart in restarts) {
[09:31:47.079]                             name <- restart$name
[09:31:47.079]                             if (is.null(name)) 
[09:31:47.079]                               next
[09:31:47.079]                             if (!grepl(pattern, name)) 
[09:31:47.079]                               next
[09:31:47.079]                             invokeRestart(restart)
[09:31:47.079]                             muffled <- TRUE
[09:31:47.079]                             break
[09:31:47.079]                           }
[09:31:47.079]                         }
[09:31:47.079]                       }
[09:31:47.079]                       invisible(muffled)
[09:31:47.079]                     }
[09:31:47.079]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.079]                   }
[09:31:47.079]                 }
[09:31:47.079]                 else {
[09:31:47.079]                   if (TRUE) {
[09:31:47.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.079]                     {
[09:31:47.079]                       inherits <- base::inherits
[09:31:47.079]                       invokeRestart <- base::invokeRestart
[09:31:47.079]                       is.null <- base::is.null
[09:31:47.079]                       muffled <- FALSE
[09:31:47.079]                       if (inherits(cond, "message")) {
[09:31:47.079]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.079]                         if (muffled) 
[09:31:47.079]                           invokeRestart("muffleMessage")
[09:31:47.079]                       }
[09:31:47.079]                       else if (inherits(cond, "warning")) {
[09:31:47.079]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.079]                         if (muffled) 
[09:31:47.079]                           invokeRestart("muffleWarning")
[09:31:47.079]                       }
[09:31:47.079]                       else if (inherits(cond, "condition")) {
[09:31:47.079]                         if (!is.null(pattern)) {
[09:31:47.079]                           computeRestarts <- base::computeRestarts
[09:31:47.079]                           grepl <- base::grepl
[09:31:47.079]                           restarts <- computeRestarts(cond)
[09:31:47.079]                           for (restart in restarts) {
[09:31:47.079]                             name <- restart$name
[09:31:47.079]                             if (is.null(name)) 
[09:31:47.079]                               next
[09:31:47.079]                             if (!grepl(pattern, name)) 
[09:31:47.079]                               next
[09:31:47.079]                             invokeRestart(restart)
[09:31:47.079]                             muffled <- TRUE
[09:31:47.079]                             break
[09:31:47.079]                           }
[09:31:47.079]                         }
[09:31:47.079]                       }
[09:31:47.079]                       invisible(muffled)
[09:31:47.079]                     }
[09:31:47.079]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.079]                   }
[09:31:47.079]                 }
[09:31:47.079]             }
[09:31:47.079]         }))
[09:31:47.079]     }, error = function(ex) {
[09:31:47.079]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:47.079]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.079]                 ...future.rng), started = ...future.startTime, 
[09:31:47.079]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:47.079]             version = "1.8"), class = "FutureResult")
[09:31:47.079]     }, finally = {
[09:31:47.079]         if (!identical(...future.workdir, getwd())) 
[09:31:47.079]             setwd(...future.workdir)
[09:31:47.079]         {
[09:31:47.079]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:47.079]                 ...future.oldOptions$nwarnings <- NULL
[09:31:47.079]             }
[09:31:47.079]             base::options(...future.oldOptions)
[09:31:47.079]             if (.Platform$OS.type == "windows") {
[09:31:47.079]                 old_names <- names(...future.oldEnvVars)
[09:31:47.079]                 envs <- base::Sys.getenv()
[09:31:47.079]                 names <- names(envs)
[09:31:47.079]                 common <- intersect(names, old_names)
[09:31:47.079]                 added <- setdiff(names, old_names)
[09:31:47.079]                 removed <- setdiff(old_names, names)
[09:31:47.079]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:47.079]                   envs[common]]
[09:31:47.079]                 NAMES <- toupper(changed)
[09:31:47.079]                 args <- list()
[09:31:47.079]                 for (kk in seq_along(NAMES)) {
[09:31:47.079]                   name <- changed[[kk]]
[09:31:47.079]                   NAME <- NAMES[[kk]]
[09:31:47.079]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.079]                     next
[09:31:47.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.079]                 }
[09:31:47.079]                 NAMES <- toupper(added)
[09:31:47.079]                 for (kk in seq_along(NAMES)) {
[09:31:47.079]                   name <- added[[kk]]
[09:31:47.079]                   NAME <- NAMES[[kk]]
[09:31:47.079]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.079]                     next
[09:31:47.079]                   args[[name]] <- ""
[09:31:47.079]                 }
[09:31:47.079]                 NAMES <- toupper(removed)
[09:31:47.079]                 for (kk in seq_along(NAMES)) {
[09:31:47.079]                   name <- removed[[kk]]
[09:31:47.079]                   NAME <- NAMES[[kk]]
[09:31:47.079]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.079]                     next
[09:31:47.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.079]                 }
[09:31:47.079]                 if (length(args) > 0) 
[09:31:47.079]                   base::do.call(base::Sys.setenv, args = args)
[09:31:47.079]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:47.079]             }
[09:31:47.079]             else {
[09:31:47.079]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:47.079]             }
[09:31:47.079]             {
[09:31:47.079]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:47.079]                   0L) {
[09:31:47.079]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:47.079]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:47.079]                   base::options(opts)
[09:31:47.079]                 }
[09:31:47.079]                 {
[09:31:47.079]                   {
[09:31:47.079]                     NULL
[09:31:47.079]                     RNGkind("Mersenne-Twister")
[09:31:47.079]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:47.079]                       inherits = FALSE)
[09:31:47.079]                   }
[09:31:47.079]                   options(future.plan = NULL)
[09:31:47.079]                   if (is.na(NA_character_)) 
[09:31:47.079]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.079]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:47.079]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:47.079]                     .init = FALSE)
[09:31:47.079]                 }
[09:31:47.079]             }
[09:31:47.079]         }
[09:31:47.079]     })
[09:31:47.079]     if (TRUE) {
[09:31:47.079]         base::sink(type = "output", split = FALSE)
[09:31:47.079]         if (TRUE) {
[09:31:47.079]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:47.079]         }
[09:31:47.079]         else {
[09:31:47.079]             ...future.result["stdout"] <- base::list(NULL)
[09:31:47.079]         }
[09:31:47.079]         base::close(...future.stdout)
[09:31:47.079]         ...future.stdout <- NULL
[09:31:47.079]     }
[09:31:47.079]     ...future.result$conditions <- ...future.conditions
[09:31:47.079]     ...future.result$finished <- base::Sys.time()
[09:31:47.079]     ...future.result
[09:31:47.079] }
[09:31:47.080] assign_globals() ...
[09:31:47.080] List of 2
[09:31:47.080]  $ a: num 2
[09:31:47.080]  $ b: num 3
[09:31:47.080]  - attr(*, "where")=List of 2
[09:31:47.080]   ..$ a:<environment: R_EmptyEnv> 
[09:31:47.080]   ..$ b:<environment: R_EmptyEnv> 
[09:31:47.080]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:47.080]  - attr(*, "resolved")= logi FALSE
[09:31:47.080]  - attr(*, "total_size")= num 112
[09:31:47.085] - copied ‘a’ to environment
[09:31:47.085] - copied ‘b’ to environment
[09:31:47.085] assign_globals() ... done
[09:31:47.085] plan(): Setting new future strategy stack:
[09:31:47.085] List of future strategies:
[09:31:47.085] 1. sequential:
[09:31:47.085]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:47.085]    - tweaked: FALSE
[09:31:47.085]    - call: NULL
[09:31:47.085] plan(): nbrOfWorkers() = 1
[09:31:47.086] plan(): Setting new future strategy stack:
[09:31:47.086] List of future strategies:
[09:31:47.086] 1. sequential:
[09:31:47.086]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:47.086]    - tweaked: FALSE
[09:31:47.086]    - call: future::plan("sequential")
[09:31:47.087] plan(): nbrOfWorkers() = 1
[09:31:47.087] SequentialFuture started (and completed)
> print(v)
[1] 6
> stopifnot(v == yTruth)
> 
> message("*** multisession(..., workers = 1L) ... DONE")
*** multisession(..., workers = 1L) ... DONE
> 
> message("*** multisession(..., gc = TRUE) ...")
*** multisession(..., gc = TRUE) ...
> plan(multisession, workers = 2L)
[09:31:47.088] plan(): Setting new future strategy stack:
[09:31:47.088] List of future strategies:
[09:31:47.088] 1. multisession:
[09:31:47.088]    - args: function (..., workers = 2L, envir = parent.frame())
[09:31:47.088]    - tweaked: TRUE
[09:31:47.088]    - call: plan(multisession, workers = 2L)
[09:31:47.102] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:31:47.102] multisession:
[09:31:47.102] - args: function (..., workers = 2L, envir = parent.frame())
[09:31:47.102] - tweaked: TRUE
[09:31:47.102] - call: plan(multisession, workers = 2L)
[09:31:47.103] getGlobalsAndPackages() ...
[09:31:47.103] Not searching for globals
[09:31:47.103] - globals: [0] <none>
[09:31:47.103] getGlobalsAndPackages() ... DONE
[09:31:47.103] [local output] makeClusterPSOCK() ...
[09:31:47.107] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:31:47.107] [local output] Base port: 11489
[09:31:47.107] [local output] Getting setup options for 2 cluster nodes ...
[09:31:47.107] [local output]  - Node 1 of 2 ...
[09:31:47.108] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:47.108] [local output] Rscript port: 11489

[09:31:47.108] [local output]  - Node 2 of 2 ...
[09:31:47.109] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:47.109] [local output] Rscript port: 11489

[09:31:47.109] [local output] Getting setup options for 2 cluster nodes ... done
[09:31:47.110] [local output]  - Parallel setup requested for some PSOCK nodes
[09:31:47.110] [local output] Setting up PSOCK nodes in parallel
[09:31:47.110] List of 36
[09:31:47.110]  $ worker          : chr "localhost"
[09:31:47.110]   ..- attr(*, "localhost")= logi TRUE
[09:31:47.110]  $ master          : chr "localhost"
[09:31:47.110]  $ port            : int 11489
[09:31:47.110]  $ connectTimeout  : num 120
[09:31:47.110]  $ timeout         : num 2592000
[09:31:47.110]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:31:47.110]  $ homogeneous     : logi TRUE
[09:31:47.110]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:31:47.110]  $ rscript_envs    : NULL
[09:31:47.110]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:47.110]  $ rscript_startup : NULL
[09:31:47.110]  $ rscript_sh      : chr "sh"
[09:31:47.110]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:47.110]  $ methods         : logi TRUE
[09:31:47.110]  $ socketOptions   : chr "no-delay"
[09:31:47.110]  $ useXDR          : logi FALSE
[09:31:47.110]  $ outfile         : chr "/dev/null"
[09:31:47.110]  $ renice          : int NA
[09:31:47.110]  $ rshcmd          : NULL
[09:31:47.110]  $ user            : chr(0) 
[09:31:47.110]  $ revtunnel       : logi FALSE
[09:31:47.110]  $ rshlogfile      : NULL
[09:31:47.110]  $ rshopts         : chr(0) 
[09:31:47.110]  $ rank            : int 1
[09:31:47.110]  $ manual          : logi FALSE
[09:31:47.110]  $ dryrun          : logi FALSE
[09:31:47.110]  $ quiet           : logi FALSE
[09:31:47.110]  $ setup_strategy  : chr "parallel"
[09:31:47.110]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:47.110]  $ pidfile         : chr "/tmp/Rtmp1Uz65Q/worker.rank=1.parallelly.parent=45638.b2463ace5584.pid"
[09:31:47.110]  $ rshcmd_label    : NULL
[09:31:47.110]  $ rsh_call        : NULL
[09:31:47.110]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:47.110]  $ localMachine    : logi TRUE
[09:31:47.110]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:31:47.110]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:31:47.110]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:31:47.110]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:31:47.110]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:31:47.110]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:31:47.110]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:31:47.110]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:31:47.110]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:31:47.110]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:31:47.110]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:31:47.110]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:31:47.110]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:31:47.110]  $ arguments       :List of 28
[09:31:47.110]   ..$ worker          : chr "localhost"
[09:31:47.110]   ..$ master          : NULL
[09:31:47.110]   ..$ port            : int 11489
[09:31:47.110]   ..$ connectTimeout  : num 120
[09:31:47.110]   ..$ timeout         : num 2592000
[09:31:47.110]   ..$ rscript         : NULL
[09:31:47.110]   ..$ homogeneous     : NULL
[09:31:47.110]   ..$ rscript_args    : NULL
[09:31:47.110]   ..$ rscript_envs    : NULL
[09:31:47.110]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:47.110]   ..$ rscript_startup : NULL
[09:31:47.110]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:31:47.110]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:47.110]   ..$ methods         : logi TRUE
[09:31:47.110]   ..$ socketOptions   : chr "no-delay"
[09:31:47.110]   ..$ useXDR          : logi FALSE
[09:31:47.110]   ..$ outfile         : chr "/dev/null"
[09:31:47.110]   ..$ renice          : int NA
[09:31:47.110]   ..$ rshcmd          : NULL
[09:31:47.110]   ..$ user            : NULL
[09:31:47.110]   ..$ revtunnel       : logi NA
[09:31:47.110]   ..$ rshlogfile      : NULL
[09:31:47.110]   ..$ rshopts         : NULL
[09:31:47.110]   ..$ rank            : int 1
[09:31:47.110]   ..$ manual          : logi FALSE
[09:31:47.110]   ..$ dryrun          : logi FALSE
[09:31:47.110]   ..$ quiet           : logi FALSE
[09:31:47.110]   ..$ setup_strategy  : chr "parallel"
[09:31:47.110]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:31:47.126] [local output] System call to launch all workers:
[09:31:47.126] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp1Uz65Q/worker.rank=1.parallelly.parent=45638.b2463ace5584.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11489 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:31:47.126] [local output] Starting PSOCK main server
[09:31:47.128] [local output] Workers launched
[09:31:47.128] [local output] Waiting for workers to connect back
[09:31:47.128]  - [local output] 0 workers out of 2 ready
[09:31:47.371]  - [local output] 0 workers out of 2 ready
[09:31:47.372]  - [local output] 1 workers out of 2 ready
[09:31:47.374]  - [local output] 1 workers out of 2 ready
[09:31:47.374]  - [local output] 2 workers out of 2 ready
[09:31:47.374] [local output] Launching of workers completed
[09:31:47.375] [local output] Collecting session information from workers
[09:31:47.375] [local output]  - Worker #1 of 2
[09:31:47.376] [local output]  - Worker #2 of 2
[09:31:47.376] [local output] makeClusterPSOCK() ... done
[09:31:47.386] Packages needed by the future expression (n = 0): <none>
[09:31:47.386] Packages needed by future strategies (n = 0): <none>
[09:31:47.387] {
[09:31:47.387]     {
[09:31:47.387]         {
[09:31:47.387]             ...future.startTime <- base::Sys.time()
[09:31:47.387]             {
[09:31:47.387]                 {
[09:31:47.387]                   {
[09:31:47.387]                     {
[09:31:47.387]                       base::local({
[09:31:47.387]                         has_future <- base::requireNamespace("future", 
[09:31:47.387]                           quietly = TRUE)
[09:31:47.387]                         if (has_future) {
[09:31:47.387]                           ns <- base::getNamespace("future")
[09:31:47.387]                           version <- ns[[".package"]][["version"]]
[09:31:47.387]                           if (is.null(version)) 
[09:31:47.387]                             version <- utils::packageVersion("future")
[09:31:47.387]                         }
[09:31:47.387]                         else {
[09:31:47.387]                           version <- NULL
[09:31:47.387]                         }
[09:31:47.387]                         if (!has_future || version < "1.8.0") {
[09:31:47.387]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:47.387]                             "", base::R.version$version.string), 
[09:31:47.387]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:47.387]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:47.387]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:47.387]                               "release", "version")], collapse = " "), 
[09:31:47.387]                             hostname = base::Sys.info()[["nodename"]])
[09:31:47.387]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:47.387]                             info)
[09:31:47.387]                           info <- base::paste(info, collapse = "; ")
[09:31:47.387]                           if (!has_future) {
[09:31:47.387]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:47.387]                               info)
[09:31:47.387]                           }
[09:31:47.387]                           else {
[09:31:47.387]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:47.387]                               info, version)
[09:31:47.387]                           }
[09:31:47.387]                           base::stop(msg)
[09:31:47.387]                         }
[09:31:47.387]                       })
[09:31:47.387]                     }
[09:31:47.387]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:47.387]                     base::options(mc.cores = 1L)
[09:31:47.387]                   }
[09:31:47.387]                   ...future.strategy.old <- future::plan("list")
[09:31:47.387]                   options(future.plan = NULL)
[09:31:47.387]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.387]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:47.387]                 }
[09:31:47.387]                 ...future.workdir <- getwd()
[09:31:47.387]             }
[09:31:47.387]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:47.387]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:47.387]         }
[09:31:47.387]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:47.387]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:47.387]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:47.387]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:47.387]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:47.387]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:47.387]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:47.387]             base::names(...future.oldOptions))
[09:31:47.387]     }
[09:31:47.387]     if (FALSE) {
[09:31:47.387]     }
[09:31:47.387]     else {
[09:31:47.387]         if (TRUE) {
[09:31:47.387]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:47.387]                 open = "w")
[09:31:47.387]         }
[09:31:47.387]         else {
[09:31:47.387]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:47.387]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:47.387]         }
[09:31:47.387]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:47.387]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:47.387]             base::sink(type = "output", split = FALSE)
[09:31:47.387]             base::close(...future.stdout)
[09:31:47.387]         }, add = TRUE)
[09:31:47.387]     }
[09:31:47.387]     ...future.frame <- base::sys.nframe()
[09:31:47.387]     ...future.conditions <- base::list()
[09:31:47.387]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:47.387]     if (FALSE) {
[09:31:47.387]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:47.387]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:47.387]     }
[09:31:47.387]     ...future.result <- base::tryCatch({
[09:31:47.387]         base::withCallingHandlers({
[09:31:47.387]             ...future.value <- base::withVisible(base::local({
[09:31:47.387]                 ...future.makeSendCondition <- base::local({
[09:31:47.387]                   sendCondition <- NULL
[09:31:47.387]                   function(frame = 1L) {
[09:31:47.387]                     if (is.function(sendCondition)) 
[09:31:47.387]                       return(sendCondition)
[09:31:47.387]                     ns <- getNamespace("parallel")
[09:31:47.387]                     if (exists("sendData", mode = "function", 
[09:31:47.387]                       envir = ns)) {
[09:31:47.387]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:47.387]                         envir = ns)
[09:31:47.387]                       envir <- sys.frame(frame)
[09:31:47.387]                       master <- NULL
[09:31:47.387]                       while (!identical(envir, .GlobalEnv) && 
[09:31:47.387]                         !identical(envir, emptyenv())) {
[09:31:47.387]                         if (exists("master", mode = "list", envir = envir, 
[09:31:47.387]                           inherits = FALSE)) {
[09:31:47.387]                           master <- get("master", mode = "list", 
[09:31:47.387]                             envir = envir, inherits = FALSE)
[09:31:47.387]                           if (inherits(master, c("SOCKnode", 
[09:31:47.387]                             "SOCK0node"))) {
[09:31:47.387]                             sendCondition <<- function(cond) {
[09:31:47.387]                               data <- list(type = "VALUE", value = cond, 
[09:31:47.387]                                 success = TRUE)
[09:31:47.387]                               parallel_sendData(master, data)
[09:31:47.387]                             }
[09:31:47.387]                             return(sendCondition)
[09:31:47.387]                           }
[09:31:47.387]                         }
[09:31:47.387]                         frame <- frame + 1L
[09:31:47.387]                         envir <- sys.frame(frame)
[09:31:47.387]                       }
[09:31:47.387]                     }
[09:31:47.387]                     sendCondition <<- function(cond) NULL
[09:31:47.387]                   }
[09:31:47.387]                 })
[09:31:47.387]                 withCallingHandlers({
[09:31:47.387]                   NA
[09:31:47.387]                 }, immediateCondition = function(cond) {
[09:31:47.387]                   sendCondition <- ...future.makeSendCondition()
[09:31:47.387]                   sendCondition(cond)
[09:31:47.387]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.387]                   {
[09:31:47.387]                     inherits <- base::inherits
[09:31:47.387]                     invokeRestart <- base::invokeRestart
[09:31:47.387]                     is.null <- base::is.null
[09:31:47.387]                     muffled <- FALSE
[09:31:47.387]                     if (inherits(cond, "message")) {
[09:31:47.387]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:47.387]                       if (muffled) 
[09:31:47.387]                         invokeRestart("muffleMessage")
[09:31:47.387]                     }
[09:31:47.387]                     else if (inherits(cond, "warning")) {
[09:31:47.387]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:47.387]                       if (muffled) 
[09:31:47.387]                         invokeRestart("muffleWarning")
[09:31:47.387]                     }
[09:31:47.387]                     else if (inherits(cond, "condition")) {
[09:31:47.387]                       if (!is.null(pattern)) {
[09:31:47.387]                         computeRestarts <- base::computeRestarts
[09:31:47.387]                         grepl <- base::grepl
[09:31:47.387]                         restarts <- computeRestarts(cond)
[09:31:47.387]                         for (restart in restarts) {
[09:31:47.387]                           name <- restart$name
[09:31:47.387]                           if (is.null(name)) 
[09:31:47.387]                             next
[09:31:47.387]                           if (!grepl(pattern, name)) 
[09:31:47.387]                             next
[09:31:47.387]                           invokeRestart(restart)
[09:31:47.387]                           muffled <- TRUE
[09:31:47.387]                           break
[09:31:47.387]                         }
[09:31:47.387]                       }
[09:31:47.387]                     }
[09:31:47.387]                     invisible(muffled)
[09:31:47.387]                   }
[09:31:47.387]                   muffleCondition(cond)
[09:31:47.387]                 })
[09:31:47.387]             }))
[09:31:47.387]             future::FutureResult(value = ...future.value$value, 
[09:31:47.387]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.387]                   ...future.rng), globalenv = if (FALSE) 
[09:31:47.387]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:47.387]                     ...future.globalenv.names))
[09:31:47.387]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:47.387]         }, condition = base::local({
[09:31:47.387]             c <- base::c
[09:31:47.387]             inherits <- base::inherits
[09:31:47.387]             invokeRestart <- base::invokeRestart
[09:31:47.387]             length <- base::length
[09:31:47.387]             list <- base::list
[09:31:47.387]             seq.int <- base::seq.int
[09:31:47.387]             signalCondition <- base::signalCondition
[09:31:47.387]             sys.calls <- base::sys.calls
[09:31:47.387]             `[[` <- base::`[[`
[09:31:47.387]             `+` <- base::`+`
[09:31:47.387]             `<<-` <- base::`<<-`
[09:31:47.387]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:47.387]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:47.387]                   3L)]
[09:31:47.387]             }
[09:31:47.387]             function(cond) {
[09:31:47.387]                 is_error <- inherits(cond, "error")
[09:31:47.387]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:47.387]                   NULL)
[09:31:47.387]                 if (is_error) {
[09:31:47.387]                   sessionInformation <- function() {
[09:31:47.387]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:47.387]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:47.387]                       search = base::search(), system = base::Sys.info())
[09:31:47.387]                   }
[09:31:47.387]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.387]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:47.387]                     cond$call), session = sessionInformation(), 
[09:31:47.387]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:47.387]                   signalCondition(cond)
[09:31:47.387]                 }
[09:31:47.387]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:47.387]                 "immediateCondition"))) {
[09:31:47.387]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:47.387]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.387]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:47.387]                   if (TRUE && !signal) {
[09:31:47.387]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.387]                     {
[09:31:47.387]                       inherits <- base::inherits
[09:31:47.387]                       invokeRestart <- base::invokeRestart
[09:31:47.387]                       is.null <- base::is.null
[09:31:47.387]                       muffled <- FALSE
[09:31:47.387]                       if (inherits(cond, "message")) {
[09:31:47.387]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.387]                         if (muffled) 
[09:31:47.387]                           invokeRestart("muffleMessage")
[09:31:47.387]                       }
[09:31:47.387]                       else if (inherits(cond, "warning")) {
[09:31:47.387]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.387]                         if (muffled) 
[09:31:47.387]                           invokeRestart("muffleWarning")
[09:31:47.387]                       }
[09:31:47.387]                       else if (inherits(cond, "condition")) {
[09:31:47.387]                         if (!is.null(pattern)) {
[09:31:47.387]                           computeRestarts <- base::computeRestarts
[09:31:47.387]                           grepl <- base::grepl
[09:31:47.387]                           restarts <- computeRestarts(cond)
[09:31:47.387]                           for (restart in restarts) {
[09:31:47.387]                             name <- restart$name
[09:31:47.387]                             if (is.null(name)) 
[09:31:47.387]                               next
[09:31:47.387]                             if (!grepl(pattern, name)) 
[09:31:47.387]                               next
[09:31:47.387]                             invokeRestart(restart)
[09:31:47.387]                             muffled <- TRUE
[09:31:47.387]                             break
[09:31:47.387]                           }
[09:31:47.387]                         }
[09:31:47.387]                       }
[09:31:47.387]                       invisible(muffled)
[09:31:47.387]                     }
[09:31:47.387]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.387]                   }
[09:31:47.387]                 }
[09:31:47.387]                 else {
[09:31:47.387]                   if (TRUE) {
[09:31:47.387]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.387]                     {
[09:31:47.387]                       inherits <- base::inherits
[09:31:47.387]                       invokeRestart <- base::invokeRestart
[09:31:47.387]                       is.null <- base::is.null
[09:31:47.387]                       muffled <- FALSE
[09:31:47.387]                       if (inherits(cond, "message")) {
[09:31:47.387]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.387]                         if (muffled) 
[09:31:47.387]                           invokeRestart("muffleMessage")
[09:31:47.387]                       }
[09:31:47.387]                       else if (inherits(cond, "warning")) {
[09:31:47.387]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.387]                         if (muffled) 
[09:31:47.387]                           invokeRestart("muffleWarning")
[09:31:47.387]                       }
[09:31:47.387]                       else if (inherits(cond, "condition")) {
[09:31:47.387]                         if (!is.null(pattern)) {
[09:31:47.387]                           computeRestarts <- base::computeRestarts
[09:31:47.387]                           grepl <- base::grepl
[09:31:47.387]                           restarts <- computeRestarts(cond)
[09:31:47.387]                           for (restart in restarts) {
[09:31:47.387]                             name <- restart$name
[09:31:47.387]                             if (is.null(name)) 
[09:31:47.387]                               next
[09:31:47.387]                             if (!grepl(pattern, name)) 
[09:31:47.387]                               next
[09:31:47.387]                             invokeRestart(restart)
[09:31:47.387]                             muffled <- TRUE
[09:31:47.387]                             break
[09:31:47.387]                           }
[09:31:47.387]                         }
[09:31:47.387]                       }
[09:31:47.387]                       invisible(muffled)
[09:31:47.387]                     }
[09:31:47.387]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.387]                   }
[09:31:47.387]                 }
[09:31:47.387]             }
[09:31:47.387]         }))
[09:31:47.387]     }, error = function(ex) {
[09:31:47.387]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:47.387]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.387]                 ...future.rng), started = ...future.startTime, 
[09:31:47.387]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:47.387]             version = "1.8"), class = "FutureResult")
[09:31:47.387]     }, finally = {
[09:31:47.387]         if (!identical(...future.workdir, getwd())) 
[09:31:47.387]             setwd(...future.workdir)
[09:31:47.387]         {
[09:31:47.387]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:47.387]                 ...future.oldOptions$nwarnings <- NULL
[09:31:47.387]             }
[09:31:47.387]             base::options(...future.oldOptions)
[09:31:47.387]             if (.Platform$OS.type == "windows") {
[09:31:47.387]                 old_names <- names(...future.oldEnvVars)
[09:31:47.387]                 envs <- base::Sys.getenv()
[09:31:47.387]                 names <- names(envs)
[09:31:47.387]                 common <- intersect(names, old_names)
[09:31:47.387]                 added <- setdiff(names, old_names)
[09:31:47.387]                 removed <- setdiff(old_names, names)
[09:31:47.387]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:47.387]                   envs[common]]
[09:31:47.387]                 NAMES <- toupper(changed)
[09:31:47.387]                 args <- list()
[09:31:47.387]                 for (kk in seq_along(NAMES)) {
[09:31:47.387]                   name <- changed[[kk]]
[09:31:47.387]                   NAME <- NAMES[[kk]]
[09:31:47.387]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.387]                     next
[09:31:47.387]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.387]                 }
[09:31:47.387]                 NAMES <- toupper(added)
[09:31:47.387]                 for (kk in seq_along(NAMES)) {
[09:31:47.387]                   name <- added[[kk]]
[09:31:47.387]                   NAME <- NAMES[[kk]]
[09:31:47.387]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.387]                     next
[09:31:47.387]                   args[[name]] <- ""
[09:31:47.387]                 }
[09:31:47.387]                 NAMES <- toupper(removed)
[09:31:47.387]                 for (kk in seq_along(NAMES)) {
[09:31:47.387]                   name <- removed[[kk]]
[09:31:47.387]                   NAME <- NAMES[[kk]]
[09:31:47.387]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.387]                     next
[09:31:47.387]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.387]                 }
[09:31:47.387]                 if (length(args) > 0) 
[09:31:47.387]                   base::do.call(base::Sys.setenv, args = args)
[09:31:47.387]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:47.387]             }
[09:31:47.387]             else {
[09:31:47.387]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:47.387]             }
[09:31:47.387]             {
[09:31:47.387]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:47.387]                   0L) {
[09:31:47.387]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:47.387]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:47.387]                   base::options(opts)
[09:31:47.387]                 }
[09:31:47.387]                 {
[09:31:47.387]                   {
[09:31:47.387]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:47.387]                     NULL
[09:31:47.387]                   }
[09:31:47.387]                   options(future.plan = NULL)
[09:31:47.387]                   if (is.na(NA_character_)) 
[09:31:47.387]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.387]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:47.387]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:47.387]                     .init = FALSE)
[09:31:47.387]                 }
[09:31:47.387]             }
[09:31:47.387]         }
[09:31:47.387]     })
[09:31:47.387]     if (TRUE) {
[09:31:47.387]         base::sink(type = "output", split = FALSE)
[09:31:47.387]         if (TRUE) {
[09:31:47.387]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:47.387]         }
[09:31:47.387]         else {
[09:31:47.387]             ...future.result["stdout"] <- base::list(NULL)
[09:31:47.387]         }
[09:31:47.387]         base::close(...future.stdout)
[09:31:47.387]         ...future.stdout <- NULL
[09:31:47.387]     }
[09:31:47.387]     ...future.result$conditions <- ...future.conditions
[09:31:47.387]     ...future.result$finished <- base::Sys.time()
[09:31:47.387]     ...future.result
[09:31:47.387] }
[09:31:47.438] MultisessionFuture started
[09:31:47.438] result() for ClusterFuture ...
[09:31:47.438] receiveMessageFromWorker() for ClusterFuture ...
[09:31:47.438] - Validating connection of MultisessionFuture
[09:31:47.469] - received message: FutureResult
[09:31:47.469] - Received FutureResult
[09:31:47.470] - Erased future from FutureRegistry
[09:31:47.470] result() for ClusterFuture ...
[09:31:47.470] - result already collected: FutureResult
[09:31:47.470] result() for ClusterFuture ... done
[09:31:47.470] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:47.470] result() for ClusterFuture ... done
[09:31:47.470] result() for ClusterFuture ...
[09:31:47.470] - result already collected: FutureResult
[09:31:47.470] result() for ClusterFuture ... done
[09:31:47.471] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:31:47.471] plan(): nbrOfWorkers() = 2
> 
> f <- future({ gc() })
[09:31:47.471] getGlobalsAndPackages() ...
[09:31:47.471] Searching for globals...
[09:31:47.472] - globals found: [2] ‘{’, ‘gc’
[09:31:47.472] Searching for globals ... DONE
[09:31:47.472] Resolving globals: FALSE
[09:31:47.472] 
[09:31:47.473] 
[09:31:47.473] getGlobalsAndPackages() ... DONE
[09:31:47.473] run() for ‘Future’ ...
[09:31:47.473] - state: ‘created’
[09:31:47.473] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:47.484] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:47.484] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:47.484]   - Field: ‘node’
[09:31:47.484]   - Field: ‘label’
[09:31:47.484]   - Field: ‘local’
[09:31:47.484]   - Field: ‘owner’
[09:31:47.484]   - Field: ‘envir’
[09:31:47.484]   - Field: ‘workers’
[09:31:47.484]   - Field: ‘packages’
[09:31:47.485]   - Field: ‘gc’
[09:31:47.485]   - Field: ‘conditions’
[09:31:47.485]   - Field: ‘persistent’
[09:31:47.485]   - Field: ‘expr’
[09:31:47.485]   - Field: ‘uuid’
[09:31:47.485]   - Field: ‘seed’
[09:31:47.485]   - Field: ‘version’
[09:31:47.485]   - Field: ‘result’
[09:31:47.485]   - Field: ‘asynchronous’
[09:31:47.485]   - Field: ‘calls’
[09:31:47.485]   - Field: ‘globals’
[09:31:47.485]   - Field: ‘stdout’
[09:31:47.486]   - Field: ‘earlySignal’
[09:31:47.486]   - Field: ‘lazy’
[09:31:47.486]   - Field: ‘state’
[09:31:47.486] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:47.486] - Launch lazy future ...
[09:31:47.486] Packages needed by the future expression (n = 0): <none>
[09:31:47.486] Packages needed by future strategies (n = 0): <none>
[09:31:47.487] {
[09:31:47.487]     {
[09:31:47.487]         {
[09:31:47.487]             ...future.startTime <- base::Sys.time()
[09:31:47.487]             {
[09:31:47.487]                 {
[09:31:47.487]                   {
[09:31:47.487]                     {
[09:31:47.487]                       base::local({
[09:31:47.487]                         has_future <- base::requireNamespace("future", 
[09:31:47.487]                           quietly = TRUE)
[09:31:47.487]                         if (has_future) {
[09:31:47.487]                           ns <- base::getNamespace("future")
[09:31:47.487]                           version <- ns[[".package"]][["version"]]
[09:31:47.487]                           if (is.null(version)) 
[09:31:47.487]                             version <- utils::packageVersion("future")
[09:31:47.487]                         }
[09:31:47.487]                         else {
[09:31:47.487]                           version <- NULL
[09:31:47.487]                         }
[09:31:47.487]                         if (!has_future || version < "1.8.0") {
[09:31:47.487]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:47.487]                             "", base::R.version$version.string), 
[09:31:47.487]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:47.487]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:47.487]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:47.487]                               "release", "version")], collapse = " "), 
[09:31:47.487]                             hostname = base::Sys.info()[["nodename"]])
[09:31:47.487]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:47.487]                             info)
[09:31:47.487]                           info <- base::paste(info, collapse = "; ")
[09:31:47.487]                           if (!has_future) {
[09:31:47.487]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:47.487]                               info)
[09:31:47.487]                           }
[09:31:47.487]                           else {
[09:31:47.487]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:47.487]                               info, version)
[09:31:47.487]                           }
[09:31:47.487]                           base::stop(msg)
[09:31:47.487]                         }
[09:31:47.487]                       })
[09:31:47.487]                     }
[09:31:47.487]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:47.487]                     base::options(mc.cores = 1L)
[09:31:47.487]                   }
[09:31:47.487]                   ...future.strategy.old <- future::plan("list")
[09:31:47.487]                   options(future.plan = NULL)
[09:31:47.487]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.487]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:47.487]                 }
[09:31:47.487]                 ...future.workdir <- getwd()
[09:31:47.487]             }
[09:31:47.487]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:47.487]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:47.487]         }
[09:31:47.487]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:47.487]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:47.487]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:47.487]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:47.487]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:47.487]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:47.487]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:47.487]             base::names(...future.oldOptions))
[09:31:47.487]     }
[09:31:47.487]     if (FALSE) {
[09:31:47.487]     }
[09:31:47.487]     else {
[09:31:47.487]         if (TRUE) {
[09:31:47.487]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:47.487]                 open = "w")
[09:31:47.487]         }
[09:31:47.487]         else {
[09:31:47.487]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:47.487]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:47.487]         }
[09:31:47.487]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:47.487]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:47.487]             base::sink(type = "output", split = FALSE)
[09:31:47.487]             base::close(...future.stdout)
[09:31:47.487]         }, add = TRUE)
[09:31:47.487]     }
[09:31:47.487]     ...future.frame <- base::sys.nframe()
[09:31:47.487]     ...future.conditions <- base::list()
[09:31:47.487]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:47.487]     if (FALSE) {
[09:31:47.487]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:47.487]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:47.487]     }
[09:31:47.487]     ...future.result <- base::tryCatch({
[09:31:47.487]         base::withCallingHandlers({
[09:31:47.487]             ...future.value <- base::withVisible(base::local({
[09:31:47.487]                 ...future.makeSendCondition <- base::local({
[09:31:47.487]                   sendCondition <- NULL
[09:31:47.487]                   function(frame = 1L) {
[09:31:47.487]                     if (is.function(sendCondition)) 
[09:31:47.487]                       return(sendCondition)
[09:31:47.487]                     ns <- getNamespace("parallel")
[09:31:47.487]                     if (exists("sendData", mode = "function", 
[09:31:47.487]                       envir = ns)) {
[09:31:47.487]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:47.487]                         envir = ns)
[09:31:47.487]                       envir <- sys.frame(frame)
[09:31:47.487]                       master <- NULL
[09:31:47.487]                       while (!identical(envir, .GlobalEnv) && 
[09:31:47.487]                         !identical(envir, emptyenv())) {
[09:31:47.487]                         if (exists("master", mode = "list", envir = envir, 
[09:31:47.487]                           inherits = FALSE)) {
[09:31:47.487]                           master <- get("master", mode = "list", 
[09:31:47.487]                             envir = envir, inherits = FALSE)
[09:31:47.487]                           if (inherits(master, c("SOCKnode", 
[09:31:47.487]                             "SOCK0node"))) {
[09:31:47.487]                             sendCondition <<- function(cond) {
[09:31:47.487]                               data <- list(type = "VALUE", value = cond, 
[09:31:47.487]                                 success = TRUE)
[09:31:47.487]                               parallel_sendData(master, data)
[09:31:47.487]                             }
[09:31:47.487]                             return(sendCondition)
[09:31:47.487]                           }
[09:31:47.487]                         }
[09:31:47.487]                         frame <- frame + 1L
[09:31:47.487]                         envir <- sys.frame(frame)
[09:31:47.487]                       }
[09:31:47.487]                     }
[09:31:47.487]                     sendCondition <<- function(cond) NULL
[09:31:47.487]                   }
[09:31:47.487]                 })
[09:31:47.487]                 withCallingHandlers({
[09:31:47.487]                   {
[09:31:47.487]                     gc()
[09:31:47.487]                   }
[09:31:47.487]                 }, immediateCondition = function(cond) {
[09:31:47.487]                   sendCondition <- ...future.makeSendCondition()
[09:31:47.487]                   sendCondition(cond)
[09:31:47.487]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.487]                   {
[09:31:47.487]                     inherits <- base::inherits
[09:31:47.487]                     invokeRestart <- base::invokeRestart
[09:31:47.487]                     is.null <- base::is.null
[09:31:47.487]                     muffled <- FALSE
[09:31:47.487]                     if (inherits(cond, "message")) {
[09:31:47.487]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:47.487]                       if (muffled) 
[09:31:47.487]                         invokeRestart("muffleMessage")
[09:31:47.487]                     }
[09:31:47.487]                     else if (inherits(cond, "warning")) {
[09:31:47.487]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:47.487]                       if (muffled) 
[09:31:47.487]                         invokeRestart("muffleWarning")
[09:31:47.487]                     }
[09:31:47.487]                     else if (inherits(cond, "condition")) {
[09:31:47.487]                       if (!is.null(pattern)) {
[09:31:47.487]                         computeRestarts <- base::computeRestarts
[09:31:47.487]                         grepl <- base::grepl
[09:31:47.487]                         restarts <- computeRestarts(cond)
[09:31:47.487]                         for (restart in restarts) {
[09:31:47.487]                           name <- restart$name
[09:31:47.487]                           if (is.null(name)) 
[09:31:47.487]                             next
[09:31:47.487]                           if (!grepl(pattern, name)) 
[09:31:47.487]                             next
[09:31:47.487]                           invokeRestart(restart)
[09:31:47.487]                           muffled <- TRUE
[09:31:47.487]                           break
[09:31:47.487]                         }
[09:31:47.487]                       }
[09:31:47.487]                     }
[09:31:47.487]                     invisible(muffled)
[09:31:47.487]                   }
[09:31:47.487]                   muffleCondition(cond)
[09:31:47.487]                 })
[09:31:47.487]             }))
[09:31:47.487]             future::FutureResult(value = ...future.value$value, 
[09:31:47.487]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.487]                   ...future.rng), globalenv = if (FALSE) 
[09:31:47.487]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:47.487]                     ...future.globalenv.names))
[09:31:47.487]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:47.487]         }, condition = base::local({
[09:31:47.487]             c <- base::c
[09:31:47.487]             inherits <- base::inherits
[09:31:47.487]             invokeRestart <- base::invokeRestart
[09:31:47.487]             length <- base::length
[09:31:47.487]             list <- base::list
[09:31:47.487]             seq.int <- base::seq.int
[09:31:47.487]             signalCondition <- base::signalCondition
[09:31:47.487]             sys.calls <- base::sys.calls
[09:31:47.487]             `[[` <- base::`[[`
[09:31:47.487]             `+` <- base::`+`
[09:31:47.487]             `<<-` <- base::`<<-`
[09:31:47.487]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:47.487]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:47.487]                   3L)]
[09:31:47.487]             }
[09:31:47.487]             function(cond) {
[09:31:47.487]                 is_error <- inherits(cond, "error")
[09:31:47.487]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:47.487]                   NULL)
[09:31:47.487]                 if (is_error) {
[09:31:47.487]                   sessionInformation <- function() {
[09:31:47.487]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:47.487]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:47.487]                       search = base::search(), system = base::Sys.info())
[09:31:47.487]                   }
[09:31:47.487]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.487]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:47.487]                     cond$call), session = sessionInformation(), 
[09:31:47.487]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:47.487]                   signalCondition(cond)
[09:31:47.487]                 }
[09:31:47.487]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:47.487]                 "immediateCondition"))) {
[09:31:47.487]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:47.487]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.487]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:47.487]                   if (TRUE && !signal) {
[09:31:47.487]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.487]                     {
[09:31:47.487]                       inherits <- base::inherits
[09:31:47.487]                       invokeRestart <- base::invokeRestart
[09:31:47.487]                       is.null <- base::is.null
[09:31:47.487]                       muffled <- FALSE
[09:31:47.487]                       if (inherits(cond, "message")) {
[09:31:47.487]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.487]                         if (muffled) 
[09:31:47.487]                           invokeRestart("muffleMessage")
[09:31:47.487]                       }
[09:31:47.487]                       else if (inherits(cond, "warning")) {
[09:31:47.487]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.487]                         if (muffled) 
[09:31:47.487]                           invokeRestart("muffleWarning")
[09:31:47.487]                       }
[09:31:47.487]                       else if (inherits(cond, "condition")) {
[09:31:47.487]                         if (!is.null(pattern)) {
[09:31:47.487]                           computeRestarts <- base::computeRestarts
[09:31:47.487]                           grepl <- base::grepl
[09:31:47.487]                           restarts <- computeRestarts(cond)
[09:31:47.487]                           for (restart in restarts) {
[09:31:47.487]                             name <- restart$name
[09:31:47.487]                             if (is.null(name)) 
[09:31:47.487]                               next
[09:31:47.487]                             if (!grepl(pattern, name)) 
[09:31:47.487]                               next
[09:31:47.487]                             invokeRestart(restart)
[09:31:47.487]                             muffled <- TRUE
[09:31:47.487]                             break
[09:31:47.487]                           }
[09:31:47.487]                         }
[09:31:47.487]                       }
[09:31:47.487]                       invisible(muffled)
[09:31:47.487]                     }
[09:31:47.487]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.487]                   }
[09:31:47.487]                 }
[09:31:47.487]                 else {
[09:31:47.487]                   if (TRUE) {
[09:31:47.487]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.487]                     {
[09:31:47.487]                       inherits <- base::inherits
[09:31:47.487]                       invokeRestart <- base::invokeRestart
[09:31:47.487]                       is.null <- base::is.null
[09:31:47.487]                       muffled <- FALSE
[09:31:47.487]                       if (inherits(cond, "message")) {
[09:31:47.487]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.487]                         if (muffled) 
[09:31:47.487]                           invokeRestart("muffleMessage")
[09:31:47.487]                       }
[09:31:47.487]                       else if (inherits(cond, "warning")) {
[09:31:47.487]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.487]                         if (muffled) 
[09:31:47.487]                           invokeRestart("muffleWarning")
[09:31:47.487]                       }
[09:31:47.487]                       else if (inherits(cond, "condition")) {
[09:31:47.487]                         if (!is.null(pattern)) {
[09:31:47.487]                           computeRestarts <- base::computeRestarts
[09:31:47.487]                           grepl <- base::grepl
[09:31:47.487]                           restarts <- computeRestarts(cond)
[09:31:47.487]                           for (restart in restarts) {
[09:31:47.487]                             name <- restart$name
[09:31:47.487]                             if (is.null(name)) 
[09:31:47.487]                               next
[09:31:47.487]                             if (!grepl(pattern, name)) 
[09:31:47.487]                               next
[09:31:47.487]                             invokeRestart(restart)
[09:31:47.487]                             muffled <- TRUE
[09:31:47.487]                             break
[09:31:47.487]                           }
[09:31:47.487]                         }
[09:31:47.487]                       }
[09:31:47.487]                       invisible(muffled)
[09:31:47.487]                     }
[09:31:47.487]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.487]                   }
[09:31:47.487]                 }
[09:31:47.487]             }
[09:31:47.487]         }))
[09:31:47.487]     }, error = function(ex) {
[09:31:47.487]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:47.487]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.487]                 ...future.rng), started = ...future.startTime, 
[09:31:47.487]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:47.487]             version = "1.8"), class = "FutureResult")
[09:31:47.487]     }, finally = {
[09:31:47.487]         if (!identical(...future.workdir, getwd())) 
[09:31:47.487]             setwd(...future.workdir)
[09:31:47.487]         {
[09:31:47.487]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:47.487]                 ...future.oldOptions$nwarnings <- NULL
[09:31:47.487]             }
[09:31:47.487]             base::options(...future.oldOptions)
[09:31:47.487]             if (.Platform$OS.type == "windows") {
[09:31:47.487]                 old_names <- names(...future.oldEnvVars)
[09:31:47.487]                 envs <- base::Sys.getenv()
[09:31:47.487]                 names <- names(envs)
[09:31:47.487]                 common <- intersect(names, old_names)
[09:31:47.487]                 added <- setdiff(names, old_names)
[09:31:47.487]                 removed <- setdiff(old_names, names)
[09:31:47.487]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:47.487]                   envs[common]]
[09:31:47.487]                 NAMES <- toupper(changed)
[09:31:47.487]                 args <- list()
[09:31:47.487]                 for (kk in seq_along(NAMES)) {
[09:31:47.487]                   name <- changed[[kk]]
[09:31:47.487]                   NAME <- NAMES[[kk]]
[09:31:47.487]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.487]                     next
[09:31:47.487]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.487]                 }
[09:31:47.487]                 NAMES <- toupper(added)
[09:31:47.487]                 for (kk in seq_along(NAMES)) {
[09:31:47.487]                   name <- added[[kk]]
[09:31:47.487]                   NAME <- NAMES[[kk]]
[09:31:47.487]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.487]                     next
[09:31:47.487]                   args[[name]] <- ""
[09:31:47.487]                 }
[09:31:47.487]                 NAMES <- toupper(removed)
[09:31:47.487]                 for (kk in seq_along(NAMES)) {
[09:31:47.487]                   name <- removed[[kk]]
[09:31:47.487]                   NAME <- NAMES[[kk]]
[09:31:47.487]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.487]                     next
[09:31:47.487]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.487]                 }
[09:31:47.487]                 if (length(args) > 0) 
[09:31:47.487]                   base::do.call(base::Sys.setenv, args = args)
[09:31:47.487]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:47.487]             }
[09:31:47.487]             else {
[09:31:47.487]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:47.487]             }
[09:31:47.487]             {
[09:31:47.487]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:47.487]                   0L) {
[09:31:47.487]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:47.487]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:47.487]                   base::options(opts)
[09:31:47.487]                 }
[09:31:47.487]                 {
[09:31:47.487]                   {
[09:31:47.487]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:47.487]                     NULL
[09:31:47.487]                   }
[09:31:47.487]                   options(future.plan = NULL)
[09:31:47.487]                   if (is.na(NA_character_)) 
[09:31:47.487]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.487]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:47.487]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:47.487]                     .init = FALSE)
[09:31:47.487]                 }
[09:31:47.487]             }
[09:31:47.487]         }
[09:31:47.487]     })
[09:31:47.487]     if (TRUE) {
[09:31:47.487]         base::sink(type = "output", split = FALSE)
[09:31:47.487]         if (TRUE) {
[09:31:47.487]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:47.487]         }
[09:31:47.487]         else {
[09:31:47.487]             ...future.result["stdout"] <- base::list(NULL)
[09:31:47.487]         }
[09:31:47.487]         base::close(...future.stdout)
[09:31:47.487]         ...future.stdout <- NULL
[09:31:47.487]     }
[09:31:47.487]     ...future.result$conditions <- ...future.conditions
[09:31:47.487]     ...future.result$finished <- base::Sys.time()
[09:31:47.487]     ...future.result
[09:31:47.487] }
[09:31:47.489] MultisessionFuture started
[09:31:47.490] - Launch lazy future ... done
[09:31:47.490] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[09:31:47.490] result() for ClusterFuture ...
[09:31:47.490] receiveMessageFromWorker() for ClusterFuture ...
[09:31:47.490] - Validating connection of MultisessionFuture
[09:31:47.515] - received message: FutureResult
[09:31:47.515] - Received FutureResult
[09:31:47.515] - Erased future from FutureRegistry
[09:31:47.515] result() for ClusterFuture ...
[09:31:47.515] - result already collected: FutureResult
[09:31:47.515] result() for ClusterFuture ... done
[09:31:47.515] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:47.516] result() for ClusterFuture ... done
[09:31:47.516] result() for ClusterFuture ...
[09:31:47.516] - result already collected: FutureResult
[09:31:47.516] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 407014 21.8     692222   37   692222 37.0
Vcells 729668  5.6    8388608   64  1923668 14.7
> 
> f <- future({ integer(10e6) })
[09:31:47.516] getGlobalsAndPackages() ...
[09:31:47.516] Searching for globals...
[09:31:47.517] - globals found: [2] ‘{’, ‘integer’
[09:31:47.517] Searching for globals ... DONE
[09:31:47.517] Resolving globals: FALSE
[09:31:47.518] 
[09:31:47.518] 
[09:31:47.518] getGlobalsAndPackages() ... DONE
[09:31:47.518] run() for ‘Future’ ...
[09:31:47.518] - state: ‘created’
[09:31:47.518] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:47.529] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:47.529] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:47.529]   - Field: ‘node’
[09:31:47.529]   - Field: ‘label’
[09:31:47.529]   - Field: ‘local’
[09:31:47.529]   - Field: ‘owner’
[09:31:47.529]   - Field: ‘envir’
[09:31:47.529]   - Field: ‘workers’
[09:31:47.530]   - Field: ‘packages’
[09:31:47.530]   - Field: ‘gc’
[09:31:47.530]   - Field: ‘conditions’
[09:31:47.530]   - Field: ‘persistent’
[09:31:47.530]   - Field: ‘expr’
[09:31:47.530]   - Field: ‘uuid’
[09:31:47.530]   - Field: ‘seed’
[09:31:47.530]   - Field: ‘version’
[09:31:47.530]   - Field: ‘result’
[09:31:47.530]   - Field: ‘asynchronous’
[09:31:47.530]   - Field: ‘calls’
[09:31:47.531]   - Field: ‘globals’
[09:31:47.531]   - Field: ‘stdout’
[09:31:47.531]   - Field: ‘earlySignal’
[09:31:47.531]   - Field: ‘lazy’
[09:31:47.531]   - Field: ‘state’
[09:31:47.531] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:47.531] - Launch lazy future ...
[09:31:47.531] Packages needed by the future expression (n = 0): <none>
[09:31:47.531] Packages needed by future strategies (n = 0): <none>
[09:31:47.534] {
[09:31:47.534]     {
[09:31:47.534]         {
[09:31:47.534]             ...future.startTime <- base::Sys.time()
[09:31:47.534]             {
[09:31:47.534]                 {
[09:31:47.534]                   {
[09:31:47.534]                     {
[09:31:47.534]                       base::local({
[09:31:47.534]                         has_future <- base::requireNamespace("future", 
[09:31:47.534]                           quietly = TRUE)
[09:31:47.534]                         if (has_future) {
[09:31:47.534]                           ns <- base::getNamespace("future")
[09:31:47.534]                           version <- ns[[".package"]][["version"]]
[09:31:47.534]                           if (is.null(version)) 
[09:31:47.534]                             version <- utils::packageVersion("future")
[09:31:47.534]                         }
[09:31:47.534]                         else {
[09:31:47.534]                           version <- NULL
[09:31:47.534]                         }
[09:31:47.534]                         if (!has_future || version < "1.8.0") {
[09:31:47.534]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:47.534]                             "", base::R.version$version.string), 
[09:31:47.534]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:47.534]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:47.534]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:47.534]                               "release", "version")], collapse = " "), 
[09:31:47.534]                             hostname = base::Sys.info()[["nodename"]])
[09:31:47.534]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:47.534]                             info)
[09:31:47.534]                           info <- base::paste(info, collapse = "; ")
[09:31:47.534]                           if (!has_future) {
[09:31:47.534]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:47.534]                               info)
[09:31:47.534]                           }
[09:31:47.534]                           else {
[09:31:47.534]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:47.534]                               info, version)
[09:31:47.534]                           }
[09:31:47.534]                           base::stop(msg)
[09:31:47.534]                         }
[09:31:47.534]                       })
[09:31:47.534]                     }
[09:31:47.534]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:47.534]                     base::options(mc.cores = 1L)
[09:31:47.534]                   }
[09:31:47.534]                   ...future.strategy.old <- future::plan("list")
[09:31:47.534]                   options(future.plan = NULL)
[09:31:47.534]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.534]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:47.534]                 }
[09:31:47.534]                 ...future.workdir <- getwd()
[09:31:47.534]             }
[09:31:47.534]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:47.534]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:47.534]         }
[09:31:47.534]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:47.534]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:47.534]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:47.534]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:47.534]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:47.534]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:47.534]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:47.534]             base::names(...future.oldOptions))
[09:31:47.534]     }
[09:31:47.534]     if (FALSE) {
[09:31:47.534]     }
[09:31:47.534]     else {
[09:31:47.534]         if (TRUE) {
[09:31:47.534]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:47.534]                 open = "w")
[09:31:47.534]         }
[09:31:47.534]         else {
[09:31:47.534]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:47.534]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:47.534]         }
[09:31:47.534]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:47.534]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:47.534]             base::sink(type = "output", split = FALSE)
[09:31:47.534]             base::close(...future.stdout)
[09:31:47.534]         }, add = TRUE)
[09:31:47.534]     }
[09:31:47.534]     ...future.frame <- base::sys.nframe()
[09:31:47.534]     ...future.conditions <- base::list()
[09:31:47.534]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:47.534]     if (FALSE) {
[09:31:47.534]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:47.534]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:47.534]     }
[09:31:47.534]     ...future.result <- base::tryCatch({
[09:31:47.534]         base::withCallingHandlers({
[09:31:47.534]             ...future.value <- base::withVisible(base::local({
[09:31:47.534]                 ...future.makeSendCondition <- base::local({
[09:31:47.534]                   sendCondition <- NULL
[09:31:47.534]                   function(frame = 1L) {
[09:31:47.534]                     if (is.function(sendCondition)) 
[09:31:47.534]                       return(sendCondition)
[09:31:47.534]                     ns <- getNamespace("parallel")
[09:31:47.534]                     if (exists("sendData", mode = "function", 
[09:31:47.534]                       envir = ns)) {
[09:31:47.534]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:47.534]                         envir = ns)
[09:31:47.534]                       envir <- sys.frame(frame)
[09:31:47.534]                       master <- NULL
[09:31:47.534]                       while (!identical(envir, .GlobalEnv) && 
[09:31:47.534]                         !identical(envir, emptyenv())) {
[09:31:47.534]                         if (exists("master", mode = "list", envir = envir, 
[09:31:47.534]                           inherits = FALSE)) {
[09:31:47.534]                           master <- get("master", mode = "list", 
[09:31:47.534]                             envir = envir, inherits = FALSE)
[09:31:47.534]                           if (inherits(master, c("SOCKnode", 
[09:31:47.534]                             "SOCK0node"))) {
[09:31:47.534]                             sendCondition <<- function(cond) {
[09:31:47.534]                               data <- list(type = "VALUE", value = cond, 
[09:31:47.534]                                 success = TRUE)
[09:31:47.534]                               parallel_sendData(master, data)
[09:31:47.534]                             }
[09:31:47.534]                             return(sendCondition)
[09:31:47.534]                           }
[09:31:47.534]                         }
[09:31:47.534]                         frame <- frame + 1L
[09:31:47.534]                         envir <- sys.frame(frame)
[09:31:47.534]                       }
[09:31:47.534]                     }
[09:31:47.534]                     sendCondition <<- function(cond) NULL
[09:31:47.534]                   }
[09:31:47.534]                 })
[09:31:47.534]                 withCallingHandlers({
[09:31:47.534]                   {
[09:31:47.534]                     integer(1e+07)
[09:31:47.534]                   }
[09:31:47.534]                 }, immediateCondition = function(cond) {
[09:31:47.534]                   sendCondition <- ...future.makeSendCondition()
[09:31:47.534]                   sendCondition(cond)
[09:31:47.534]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.534]                   {
[09:31:47.534]                     inherits <- base::inherits
[09:31:47.534]                     invokeRestart <- base::invokeRestart
[09:31:47.534]                     is.null <- base::is.null
[09:31:47.534]                     muffled <- FALSE
[09:31:47.534]                     if (inherits(cond, "message")) {
[09:31:47.534]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:47.534]                       if (muffled) 
[09:31:47.534]                         invokeRestart("muffleMessage")
[09:31:47.534]                     }
[09:31:47.534]                     else if (inherits(cond, "warning")) {
[09:31:47.534]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:47.534]                       if (muffled) 
[09:31:47.534]                         invokeRestart("muffleWarning")
[09:31:47.534]                     }
[09:31:47.534]                     else if (inherits(cond, "condition")) {
[09:31:47.534]                       if (!is.null(pattern)) {
[09:31:47.534]                         computeRestarts <- base::computeRestarts
[09:31:47.534]                         grepl <- base::grepl
[09:31:47.534]                         restarts <- computeRestarts(cond)
[09:31:47.534]                         for (restart in restarts) {
[09:31:47.534]                           name <- restart$name
[09:31:47.534]                           if (is.null(name)) 
[09:31:47.534]                             next
[09:31:47.534]                           if (!grepl(pattern, name)) 
[09:31:47.534]                             next
[09:31:47.534]                           invokeRestart(restart)
[09:31:47.534]                           muffled <- TRUE
[09:31:47.534]                           break
[09:31:47.534]                         }
[09:31:47.534]                       }
[09:31:47.534]                     }
[09:31:47.534]                     invisible(muffled)
[09:31:47.534]                   }
[09:31:47.534]                   muffleCondition(cond)
[09:31:47.534]                 })
[09:31:47.534]             }))
[09:31:47.534]             future::FutureResult(value = ...future.value$value, 
[09:31:47.534]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.534]                   ...future.rng), globalenv = if (FALSE) 
[09:31:47.534]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:47.534]                     ...future.globalenv.names))
[09:31:47.534]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:47.534]         }, condition = base::local({
[09:31:47.534]             c <- base::c
[09:31:47.534]             inherits <- base::inherits
[09:31:47.534]             invokeRestart <- base::invokeRestart
[09:31:47.534]             length <- base::length
[09:31:47.534]             list <- base::list
[09:31:47.534]             seq.int <- base::seq.int
[09:31:47.534]             signalCondition <- base::signalCondition
[09:31:47.534]             sys.calls <- base::sys.calls
[09:31:47.534]             `[[` <- base::`[[`
[09:31:47.534]             `+` <- base::`+`
[09:31:47.534]             `<<-` <- base::`<<-`
[09:31:47.534]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:47.534]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:47.534]                   3L)]
[09:31:47.534]             }
[09:31:47.534]             function(cond) {
[09:31:47.534]                 is_error <- inherits(cond, "error")
[09:31:47.534]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:47.534]                   NULL)
[09:31:47.534]                 if (is_error) {
[09:31:47.534]                   sessionInformation <- function() {
[09:31:47.534]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:47.534]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:47.534]                       search = base::search(), system = base::Sys.info())
[09:31:47.534]                   }
[09:31:47.534]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.534]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:47.534]                     cond$call), session = sessionInformation(), 
[09:31:47.534]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:47.534]                   signalCondition(cond)
[09:31:47.534]                 }
[09:31:47.534]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:47.534]                 "immediateCondition"))) {
[09:31:47.534]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:47.534]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.534]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:47.534]                   if (TRUE && !signal) {
[09:31:47.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.534]                     {
[09:31:47.534]                       inherits <- base::inherits
[09:31:47.534]                       invokeRestart <- base::invokeRestart
[09:31:47.534]                       is.null <- base::is.null
[09:31:47.534]                       muffled <- FALSE
[09:31:47.534]                       if (inherits(cond, "message")) {
[09:31:47.534]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.534]                         if (muffled) 
[09:31:47.534]                           invokeRestart("muffleMessage")
[09:31:47.534]                       }
[09:31:47.534]                       else if (inherits(cond, "warning")) {
[09:31:47.534]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.534]                         if (muffled) 
[09:31:47.534]                           invokeRestart("muffleWarning")
[09:31:47.534]                       }
[09:31:47.534]                       else if (inherits(cond, "condition")) {
[09:31:47.534]                         if (!is.null(pattern)) {
[09:31:47.534]                           computeRestarts <- base::computeRestarts
[09:31:47.534]                           grepl <- base::grepl
[09:31:47.534]                           restarts <- computeRestarts(cond)
[09:31:47.534]                           for (restart in restarts) {
[09:31:47.534]                             name <- restart$name
[09:31:47.534]                             if (is.null(name)) 
[09:31:47.534]                               next
[09:31:47.534]                             if (!grepl(pattern, name)) 
[09:31:47.534]                               next
[09:31:47.534]                             invokeRestart(restart)
[09:31:47.534]                             muffled <- TRUE
[09:31:47.534]                             break
[09:31:47.534]                           }
[09:31:47.534]                         }
[09:31:47.534]                       }
[09:31:47.534]                       invisible(muffled)
[09:31:47.534]                     }
[09:31:47.534]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.534]                   }
[09:31:47.534]                 }
[09:31:47.534]                 else {
[09:31:47.534]                   if (TRUE) {
[09:31:47.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.534]                     {
[09:31:47.534]                       inherits <- base::inherits
[09:31:47.534]                       invokeRestart <- base::invokeRestart
[09:31:47.534]                       is.null <- base::is.null
[09:31:47.534]                       muffled <- FALSE
[09:31:47.534]                       if (inherits(cond, "message")) {
[09:31:47.534]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.534]                         if (muffled) 
[09:31:47.534]                           invokeRestart("muffleMessage")
[09:31:47.534]                       }
[09:31:47.534]                       else if (inherits(cond, "warning")) {
[09:31:47.534]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.534]                         if (muffled) 
[09:31:47.534]                           invokeRestart("muffleWarning")
[09:31:47.534]                       }
[09:31:47.534]                       else if (inherits(cond, "condition")) {
[09:31:47.534]                         if (!is.null(pattern)) {
[09:31:47.534]                           computeRestarts <- base::computeRestarts
[09:31:47.534]                           grepl <- base::grepl
[09:31:47.534]                           restarts <- computeRestarts(cond)
[09:31:47.534]                           for (restart in restarts) {
[09:31:47.534]                             name <- restart$name
[09:31:47.534]                             if (is.null(name)) 
[09:31:47.534]                               next
[09:31:47.534]                             if (!grepl(pattern, name)) 
[09:31:47.534]                               next
[09:31:47.534]                             invokeRestart(restart)
[09:31:47.534]                             muffled <- TRUE
[09:31:47.534]                             break
[09:31:47.534]                           }
[09:31:47.534]                         }
[09:31:47.534]                       }
[09:31:47.534]                       invisible(muffled)
[09:31:47.534]                     }
[09:31:47.534]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.534]                   }
[09:31:47.534]                 }
[09:31:47.534]             }
[09:31:47.534]         }))
[09:31:47.534]     }, error = function(ex) {
[09:31:47.534]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:47.534]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.534]                 ...future.rng), started = ...future.startTime, 
[09:31:47.534]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:47.534]             version = "1.8"), class = "FutureResult")
[09:31:47.534]     }, finally = {
[09:31:47.534]         if (!identical(...future.workdir, getwd())) 
[09:31:47.534]             setwd(...future.workdir)
[09:31:47.534]         {
[09:31:47.534]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:47.534]                 ...future.oldOptions$nwarnings <- NULL
[09:31:47.534]             }
[09:31:47.534]             base::options(...future.oldOptions)
[09:31:47.534]             if (.Platform$OS.type == "windows") {
[09:31:47.534]                 old_names <- names(...future.oldEnvVars)
[09:31:47.534]                 envs <- base::Sys.getenv()
[09:31:47.534]                 names <- names(envs)
[09:31:47.534]                 common <- intersect(names, old_names)
[09:31:47.534]                 added <- setdiff(names, old_names)
[09:31:47.534]                 removed <- setdiff(old_names, names)
[09:31:47.534]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:47.534]                   envs[common]]
[09:31:47.534]                 NAMES <- toupper(changed)
[09:31:47.534]                 args <- list()
[09:31:47.534]                 for (kk in seq_along(NAMES)) {
[09:31:47.534]                   name <- changed[[kk]]
[09:31:47.534]                   NAME <- NAMES[[kk]]
[09:31:47.534]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.534]                     next
[09:31:47.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.534]                 }
[09:31:47.534]                 NAMES <- toupper(added)
[09:31:47.534]                 for (kk in seq_along(NAMES)) {
[09:31:47.534]                   name <- added[[kk]]
[09:31:47.534]                   NAME <- NAMES[[kk]]
[09:31:47.534]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.534]                     next
[09:31:47.534]                   args[[name]] <- ""
[09:31:47.534]                 }
[09:31:47.534]                 NAMES <- toupper(removed)
[09:31:47.534]                 for (kk in seq_along(NAMES)) {
[09:31:47.534]                   name <- removed[[kk]]
[09:31:47.534]                   NAME <- NAMES[[kk]]
[09:31:47.534]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.534]                     next
[09:31:47.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.534]                 }
[09:31:47.534]                 if (length(args) > 0) 
[09:31:47.534]                   base::do.call(base::Sys.setenv, args = args)
[09:31:47.534]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:47.534]             }
[09:31:47.534]             else {
[09:31:47.534]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:47.534]             }
[09:31:47.534]             {
[09:31:47.534]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:47.534]                   0L) {
[09:31:47.534]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:47.534]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:47.534]                   base::options(opts)
[09:31:47.534]                 }
[09:31:47.534]                 {
[09:31:47.534]                   {
[09:31:47.534]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:47.534]                     NULL
[09:31:47.534]                   }
[09:31:47.534]                   options(future.plan = NULL)
[09:31:47.534]                   if (is.na(NA_character_)) 
[09:31:47.534]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.534]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:47.534]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:47.534]                     .init = FALSE)
[09:31:47.534]                 }
[09:31:47.534]             }
[09:31:47.534]         }
[09:31:47.534]     })
[09:31:47.534]     if (TRUE) {
[09:31:47.534]         base::sink(type = "output", split = FALSE)
[09:31:47.534]         if (TRUE) {
[09:31:47.534]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:47.534]         }
[09:31:47.534]         else {
[09:31:47.534]             ...future.result["stdout"] <- base::list(NULL)
[09:31:47.534]         }
[09:31:47.534]         base::close(...future.stdout)
[09:31:47.534]         ...future.stdout <- NULL
[09:31:47.534]     }
[09:31:47.534]     ...future.result$conditions <- ...future.conditions
[09:31:47.534]     ...future.result$finished <- base::Sys.time()
[09:31:47.534]     ...future.result
[09:31:47.534] }
[09:31:47.537] MultisessionFuture started
[09:31:47.537] - Launch lazy future ... done
[09:31:47.537] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[09:31:47.537] result() for ClusterFuture ...
[09:31:47.537] receiveMessageFromWorker() for ClusterFuture ...
[09:31:47.537] - Validating connection of MultisessionFuture
[09:31:47.603] - received message: FutureResult
[09:31:47.604] - Received FutureResult
[09:31:47.604] - Erased future from FutureRegistry
[09:31:47.604] result() for ClusterFuture ...
[09:31:47.604] - result already collected: FutureResult
[09:31:47.604] result() for ClusterFuture ... done
[09:31:47.604] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:47.604] result() for ClusterFuture ... done
[09:31:47.604] result() for ClusterFuture ...
[09:31:47.604] - result already collected: FutureResult
[09:31:47.604] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[09:31:47.605] getGlobalsAndPackages() ...
[09:31:47.605] Searching for globals...
[09:31:47.606] - globals found: [2] ‘{’, ‘gc’
[09:31:47.606] Searching for globals ... DONE
[09:31:47.606] Resolving globals: FALSE
[09:31:47.606] 
[09:31:47.606] 
[09:31:47.607] getGlobalsAndPackages() ... DONE
[09:31:47.607] run() for ‘Future’ ...
[09:31:47.607] - state: ‘created’
[09:31:47.607] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:47.619] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:47.619] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:47.619]   - Field: ‘node’
[09:31:47.619]   - Field: ‘label’
[09:31:47.619]   - Field: ‘local’
[09:31:47.619]   - Field: ‘owner’
[09:31:47.619]   - Field: ‘envir’
[09:31:47.619]   - Field: ‘workers’
[09:31:47.619]   - Field: ‘packages’
[09:31:47.619]   - Field: ‘gc’
[09:31:47.620]   - Field: ‘conditions’
[09:31:47.620]   - Field: ‘persistent’
[09:31:47.620]   - Field: ‘expr’
[09:31:47.620]   - Field: ‘uuid’
[09:31:47.620]   - Field: ‘seed’
[09:31:47.620]   - Field: ‘version’
[09:31:47.620]   - Field: ‘result’
[09:31:47.620]   - Field: ‘asynchronous’
[09:31:47.620]   - Field: ‘calls’
[09:31:47.620]   - Field: ‘globals’
[09:31:47.620]   - Field: ‘stdout’
[09:31:47.620]   - Field: ‘earlySignal’
[09:31:47.621]   - Field: ‘lazy’
[09:31:47.621]   - Field: ‘state’
[09:31:47.621] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:47.621] - Launch lazy future ...
[09:31:47.621] Packages needed by the future expression (n = 0): <none>
[09:31:47.621] Packages needed by future strategies (n = 0): <none>
[09:31:47.622] {
[09:31:47.622]     {
[09:31:47.622]         {
[09:31:47.622]             ...future.startTime <- base::Sys.time()
[09:31:47.622]             {
[09:31:47.622]                 {
[09:31:47.622]                   {
[09:31:47.622]                     {
[09:31:47.622]                       base::local({
[09:31:47.622]                         has_future <- base::requireNamespace("future", 
[09:31:47.622]                           quietly = TRUE)
[09:31:47.622]                         if (has_future) {
[09:31:47.622]                           ns <- base::getNamespace("future")
[09:31:47.622]                           version <- ns[[".package"]][["version"]]
[09:31:47.622]                           if (is.null(version)) 
[09:31:47.622]                             version <- utils::packageVersion("future")
[09:31:47.622]                         }
[09:31:47.622]                         else {
[09:31:47.622]                           version <- NULL
[09:31:47.622]                         }
[09:31:47.622]                         if (!has_future || version < "1.8.0") {
[09:31:47.622]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:47.622]                             "", base::R.version$version.string), 
[09:31:47.622]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:47.622]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:47.622]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:47.622]                               "release", "version")], collapse = " "), 
[09:31:47.622]                             hostname = base::Sys.info()[["nodename"]])
[09:31:47.622]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:47.622]                             info)
[09:31:47.622]                           info <- base::paste(info, collapse = "; ")
[09:31:47.622]                           if (!has_future) {
[09:31:47.622]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:47.622]                               info)
[09:31:47.622]                           }
[09:31:47.622]                           else {
[09:31:47.622]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:47.622]                               info, version)
[09:31:47.622]                           }
[09:31:47.622]                           base::stop(msg)
[09:31:47.622]                         }
[09:31:47.622]                       })
[09:31:47.622]                     }
[09:31:47.622]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:47.622]                     base::options(mc.cores = 1L)
[09:31:47.622]                   }
[09:31:47.622]                   ...future.strategy.old <- future::plan("list")
[09:31:47.622]                   options(future.plan = NULL)
[09:31:47.622]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.622]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:47.622]                 }
[09:31:47.622]                 ...future.workdir <- getwd()
[09:31:47.622]             }
[09:31:47.622]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:47.622]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:47.622]         }
[09:31:47.622]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:47.622]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:47.622]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:47.622]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:47.622]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:47.622]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:47.622]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:47.622]             base::names(...future.oldOptions))
[09:31:47.622]     }
[09:31:47.622]     if (FALSE) {
[09:31:47.622]     }
[09:31:47.622]     else {
[09:31:47.622]         if (TRUE) {
[09:31:47.622]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:47.622]                 open = "w")
[09:31:47.622]         }
[09:31:47.622]         else {
[09:31:47.622]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:47.622]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:47.622]         }
[09:31:47.622]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:47.622]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:47.622]             base::sink(type = "output", split = FALSE)
[09:31:47.622]             base::close(...future.stdout)
[09:31:47.622]         }, add = TRUE)
[09:31:47.622]     }
[09:31:47.622]     ...future.frame <- base::sys.nframe()
[09:31:47.622]     ...future.conditions <- base::list()
[09:31:47.622]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:47.622]     if (FALSE) {
[09:31:47.622]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:47.622]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:47.622]     }
[09:31:47.622]     ...future.result <- base::tryCatch({
[09:31:47.622]         base::withCallingHandlers({
[09:31:47.622]             ...future.value <- base::withVisible(base::local({
[09:31:47.622]                 ...future.makeSendCondition <- base::local({
[09:31:47.622]                   sendCondition <- NULL
[09:31:47.622]                   function(frame = 1L) {
[09:31:47.622]                     if (is.function(sendCondition)) 
[09:31:47.622]                       return(sendCondition)
[09:31:47.622]                     ns <- getNamespace("parallel")
[09:31:47.622]                     if (exists("sendData", mode = "function", 
[09:31:47.622]                       envir = ns)) {
[09:31:47.622]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:47.622]                         envir = ns)
[09:31:47.622]                       envir <- sys.frame(frame)
[09:31:47.622]                       master <- NULL
[09:31:47.622]                       while (!identical(envir, .GlobalEnv) && 
[09:31:47.622]                         !identical(envir, emptyenv())) {
[09:31:47.622]                         if (exists("master", mode = "list", envir = envir, 
[09:31:47.622]                           inherits = FALSE)) {
[09:31:47.622]                           master <- get("master", mode = "list", 
[09:31:47.622]                             envir = envir, inherits = FALSE)
[09:31:47.622]                           if (inherits(master, c("SOCKnode", 
[09:31:47.622]                             "SOCK0node"))) {
[09:31:47.622]                             sendCondition <<- function(cond) {
[09:31:47.622]                               data <- list(type = "VALUE", value = cond, 
[09:31:47.622]                                 success = TRUE)
[09:31:47.622]                               parallel_sendData(master, data)
[09:31:47.622]                             }
[09:31:47.622]                             return(sendCondition)
[09:31:47.622]                           }
[09:31:47.622]                         }
[09:31:47.622]                         frame <- frame + 1L
[09:31:47.622]                         envir <- sys.frame(frame)
[09:31:47.622]                       }
[09:31:47.622]                     }
[09:31:47.622]                     sendCondition <<- function(cond) NULL
[09:31:47.622]                   }
[09:31:47.622]                 })
[09:31:47.622]                 withCallingHandlers({
[09:31:47.622]                   {
[09:31:47.622]                     gc()
[09:31:47.622]                   }
[09:31:47.622]                 }, immediateCondition = function(cond) {
[09:31:47.622]                   sendCondition <- ...future.makeSendCondition()
[09:31:47.622]                   sendCondition(cond)
[09:31:47.622]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.622]                   {
[09:31:47.622]                     inherits <- base::inherits
[09:31:47.622]                     invokeRestart <- base::invokeRestart
[09:31:47.622]                     is.null <- base::is.null
[09:31:47.622]                     muffled <- FALSE
[09:31:47.622]                     if (inherits(cond, "message")) {
[09:31:47.622]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:47.622]                       if (muffled) 
[09:31:47.622]                         invokeRestart("muffleMessage")
[09:31:47.622]                     }
[09:31:47.622]                     else if (inherits(cond, "warning")) {
[09:31:47.622]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:47.622]                       if (muffled) 
[09:31:47.622]                         invokeRestart("muffleWarning")
[09:31:47.622]                     }
[09:31:47.622]                     else if (inherits(cond, "condition")) {
[09:31:47.622]                       if (!is.null(pattern)) {
[09:31:47.622]                         computeRestarts <- base::computeRestarts
[09:31:47.622]                         grepl <- base::grepl
[09:31:47.622]                         restarts <- computeRestarts(cond)
[09:31:47.622]                         for (restart in restarts) {
[09:31:47.622]                           name <- restart$name
[09:31:47.622]                           if (is.null(name)) 
[09:31:47.622]                             next
[09:31:47.622]                           if (!grepl(pattern, name)) 
[09:31:47.622]                             next
[09:31:47.622]                           invokeRestart(restart)
[09:31:47.622]                           muffled <- TRUE
[09:31:47.622]                           break
[09:31:47.622]                         }
[09:31:47.622]                       }
[09:31:47.622]                     }
[09:31:47.622]                     invisible(muffled)
[09:31:47.622]                   }
[09:31:47.622]                   muffleCondition(cond)
[09:31:47.622]                 })
[09:31:47.622]             }))
[09:31:47.622]             future::FutureResult(value = ...future.value$value, 
[09:31:47.622]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.622]                   ...future.rng), globalenv = if (FALSE) 
[09:31:47.622]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:47.622]                     ...future.globalenv.names))
[09:31:47.622]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:47.622]         }, condition = base::local({
[09:31:47.622]             c <- base::c
[09:31:47.622]             inherits <- base::inherits
[09:31:47.622]             invokeRestart <- base::invokeRestart
[09:31:47.622]             length <- base::length
[09:31:47.622]             list <- base::list
[09:31:47.622]             seq.int <- base::seq.int
[09:31:47.622]             signalCondition <- base::signalCondition
[09:31:47.622]             sys.calls <- base::sys.calls
[09:31:47.622]             `[[` <- base::`[[`
[09:31:47.622]             `+` <- base::`+`
[09:31:47.622]             `<<-` <- base::`<<-`
[09:31:47.622]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:47.622]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:47.622]                   3L)]
[09:31:47.622]             }
[09:31:47.622]             function(cond) {
[09:31:47.622]                 is_error <- inherits(cond, "error")
[09:31:47.622]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:47.622]                   NULL)
[09:31:47.622]                 if (is_error) {
[09:31:47.622]                   sessionInformation <- function() {
[09:31:47.622]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:47.622]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:47.622]                       search = base::search(), system = base::Sys.info())
[09:31:47.622]                   }
[09:31:47.622]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.622]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:47.622]                     cond$call), session = sessionInformation(), 
[09:31:47.622]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:47.622]                   signalCondition(cond)
[09:31:47.622]                 }
[09:31:47.622]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:47.622]                 "immediateCondition"))) {
[09:31:47.622]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:47.622]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.622]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:47.622]                   if (TRUE && !signal) {
[09:31:47.622]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.622]                     {
[09:31:47.622]                       inherits <- base::inherits
[09:31:47.622]                       invokeRestart <- base::invokeRestart
[09:31:47.622]                       is.null <- base::is.null
[09:31:47.622]                       muffled <- FALSE
[09:31:47.622]                       if (inherits(cond, "message")) {
[09:31:47.622]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.622]                         if (muffled) 
[09:31:47.622]                           invokeRestart("muffleMessage")
[09:31:47.622]                       }
[09:31:47.622]                       else if (inherits(cond, "warning")) {
[09:31:47.622]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.622]                         if (muffled) 
[09:31:47.622]                           invokeRestart("muffleWarning")
[09:31:47.622]                       }
[09:31:47.622]                       else if (inherits(cond, "condition")) {
[09:31:47.622]                         if (!is.null(pattern)) {
[09:31:47.622]                           computeRestarts <- base::computeRestarts
[09:31:47.622]                           grepl <- base::grepl
[09:31:47.622]                           restarts <- computeRestarts(cond)
[09:31:47.622]                           for (restart in restarts) {
[09:31:47.622]                             name <- restart$name
[09:31:47.622]                             if (is.null(name)) 
[09:31:47.622]                               next
[09:31:47.622]                             if (!grepl(pattern, name)) 
[09:31:47.622]                               next
[09:31:47.622]                             invokeRestart(restart)
[09:31:47.622]                             muffled <- TRUE
[09:31:47.622]                             break
[09:31:47.622]                           }
[09:31:47.622]                         }
[09:31:47.622]                       }
[09:31:47.622]                       invisible(muffled)
[09:31:47.622]                     }
[09:31:47.622]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.622]                   }
[09:31:47.622]                 }
[09:31:47.622]                 else {
[09:31:47.622]                   if (TRUE) {
[09:31:47.622]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.622]                     {
[09:31:47.622]                       inherits <- base::inherits
[09:31:47.622]                       invokeRestart <- base::invokeRestart
[09:31:47.622]                       is.null <- base::is.null
[09:31:47.622]                       muffled <- FALSE
[09:31:47.622]                       if (inherits(cond, "message")) {
[09:31:47.622]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.622]                         if (muffled) 
[09:31:47.622]                           invokeRestart("muffleMessage")
[09:31:47.622]                       }
[09:31:47.622]                       else if (inherits(cond, "warning")) {
[09:31:47.622]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.622]                         if (muffled) 
[09:31:47.622]                           invokeRestart("muffleWarning")
[09:31:47.622]                       }
[09:31:47.622]                       else if (inherits(cond, "condition")) {
[09:31:47.622]                         if (!is.null(pattern)) {
[09:31:47.622]                           computeRestarts <- base::computeRestarts
[09:31:47.622]                           grepl <- base::grepl
[09:31:47.622]                           restarts <- computeRestarts(cond)
[09:31:47.622]                           for (restart in restarts) {
[09:31:47.622]                             name <- restart$name
[09:31:47.622]                             if (is.null(name)) 
[09:31:47.622]                               next
[09:31:47.622]                             if (!grepl(pattern, name)) 
[09:31:47.622]                               next
[09:31:47.622]                             invokeRestart(restart)
[09:31:47.622]                             muffled <- TRUE
[09:31:47.622]                             break
[09:31:47.622]                           }
[09:31:47.622]                         }
[09:31:47.622]                       }
[09:31:47.622]                       invisible(muffled)
[09:31:47.622]                     }
[09:31:47.622]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.622]                   }
[09:31:47.622]                 }
[09:31:47.622]             }
[09:31:47.622]         }))
[09:31:47.622]     }, error = function(ex) {
[09:31:47.622]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:47.622]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.622]                 ...future.rng), started = ...future.startTime, 
[09:31:47.622]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:47.622]             version = "1.8"), class = "FutureResult")
[09:31:47.622]     }, finally = {
[09:31:47.622]         if (!identical(...future.workdir, getwd())) 
[09:31:47.622]             setwd(...future.workdir)
[09:31:47.622]         {
[09:31:47.622]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:47.622]                 ...future.oldOptions$nwarnings <- NULL
[09:31:47.622]             }
[09:31:47.622]             base::options(...future.oldOptions)
[09:31:47.622]             if (.Platform$OS.type == "windows") {
[09:31:47.622]                 old_names <- names(...future.oldEnvVars)
[09:31:47.622]                 envs <- base::Sys.getenv()
[09:31:47.622]                 names <- names(envs)
[09:31:47.622]                 common <- intersect(names, old_names)
[09:31:47.622]                 added <- setdiff(names, old_names)
[09:31:47.622]                 removed <- setdiff(old_names, names)
[09:31:47.622]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:47.622]                   envs[common]]
[09:31:47.622]                 NAMES <- toupper(changed)
[09:31:47.622]                 args <- list()
[09:31:47.622]                 for (kk in seq_along(NAMES)) {
[09:31:47.622]                   name <- changed[[kk]]
[09:31:47.622]                   NAME <- NAMES[[kk]]
[09:31:47.622]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.622]                     next
[09:31:47.622]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.622]                 }
[09:31:47.622]                 NAMES <- toupper(added)
[09:31:47.622]                 for (kk in seq_along(NAMES)) {
[09:31:47.622]                   name <- added[[kk]]
[09:31:47.622]                   NAME <- NAMES[[kk]]
[09:31:47.622]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.622]                     next
[09:31:47.622]                   args[[name]] <- ""
[09:31:47.622]                 }
[09:31:47.622]                 NAMES <- toupper(removed)
[09:31:47.622]                 for (kk in seq_along(NAMES)) {
[09:31:47.622]                   name <- removed[[kk]]
[09:31:47.622]                   NAME <- NAMES[[kk]]
[09:31:47.622]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.622]                     next
[09:31:47.622]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.622]                 }
[09:31:47.622]                 if (length(args) > 0) 
[09:31:47.622]                   base::do.call(base::Sys.setenv, args = args)
[09:31:47.622]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:47.622]             }
[09:31:47.622]             else {
[09:31:47.622]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:47.622]             }
[09:31:47.622]             {
[09:31:47.622]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:47.622]                   0L) {
[09:31:47.622]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:47.622]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:47.622]                   base::options(opts)
[09:31:47.622]                 }
[09:31:47.622]                 {
[09:31:47.622]                   {
[09:31:47.622]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:47.622]                     NULL
[09:31:47.622]                   }
[09:31:47.622]                   options(future.plan = NULL)
[09:31:47.622]                   if (is.na(NA_character_)) 
[09:31:47.622]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.622]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:47.622]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:47.622]                     .init = FALSE)
[09:31:47.622]                 }
[09:31:47.622]             }
[09:31:47.622]         }
[09:31:47.622]     })
[09:31:47.622]     if (TRUE) {
[09:31:47.622]         base::sink(type = "output", split = FALSE)
[09:31:47.622]         if (TRUE) {
[09:31:47.622]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:47.622]         }
[09:31:47.622]         else {
[09:31:47.622]             ...future.result["stdout"] <- base::list(NULL)
[09:31:47.622]         }
[09:31:47.622]         base::close(...future.stdout)
[09:31:47.622]         ...future.stdout <- NULL
[09:31:47.622]     }
[09:31:47.622]     ...future.result$conditions <- ...future.conditions
[09:31:47.622]     ...future.result$finished <- base::Sys.time()
[09:31:47.622]     ...future.result
[09:31:47.622] }
[09:31:47.624] MultisessionFuture started
[09:31:47.625] - Launch lazy future ... done
[09:31:47.625] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[09:31:47.625] result() for ClusterFuture ...
[09:31:47.625] receiveMessageFromWorker() for ClusterFuture ...
[09:31:47.625] - Validating connection of MultisessionFuture
[09:31:47.649] - received message: FutureResult
[09:31:47.649] - Received FutureResult
[09:31:47.650] - Erased future from FutureRegistry
[09:31:47.650] result() for ClusterFuture ...
[09:31:47.650] - result already collected: FutureResult
[09:31:47.650] result() for ClusterFuture ... done
[09:31:47.650] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:47.650] result() for ClusterFuture ... done
[09:31:47.650] result() for ClusterFuture ...
[09:31:47.650] - result already collected: FutureResult
[09:31:47.650] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 407009 21.8     692222   37   692222 37.0
Vcells 729658  5.6    8388608   64  5751575 43.9
> 
> f <- future({ integer(10e6) }, gc = TRUE)
[09:31:47.651] getGlobalsAndPackages() ...
[09:31:47.651] Searching for globals...
[09:31:47.652] - globals found: [2] ‘{’, ‘integer’
[09:31:47.652] Searching for globals ... DONE
[09:31:47.652] Resolving globals: FALSE
[09:31:47.652] 
[09:31:47.652] 
[09:31:47.652] getGlobalsAndPackages() ... DONE
[09:31:47.653] run() for ‘Future’ ...
[09:31:47.653] - state: ‘created’
[09:31:47.653] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:47.664] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:47.664] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:47.664]   - Field: ‘node’
[09:31:47.664]   - Field: ‘label’
[09:31:47.664]   - Field: ‘local’
[09:31:47.664]   - Field: ‘owner’
[09:31:47.664]   - Field: ‘envir’
[09:31:47.664]   - Field: ‘workers’
[09:31:47.664]   - Field: ‘packages’
[09:31:47.665]   - Field: ‘gc’
[09:31:47.665]   - Field: ‘conditions’
[09:31:47.665]   - Field: ‘persistent’
[09:31:47.665]   - Field: ‘expr’
[09:31:47.665]   - Field: ‘uuid’
[09:31:47.665]   - Field: ‘seed’
[09:31:47.665]   - Field: ‘version’
[09:31:47.665]   - Field: ‘result’
[09:31:47.665]   - Field: ‘asynchronous’
[09:31:47.665]   - Field: ‘calls’
[09:31:47.665]   - Field: ‘globals’
[09:31:47.666]   - Field: ‘stdout’
[09:31:47.666]   - Field: ‘earlySignal’
[09:31:47.666]   - Field: ‘lazy’
[09:31:47.666]   - Field: ‘state’
[09:31:47.666] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:47.666] - Launch lazy future ...
[09:31:47.666] Packages needed by the future expression (n = 0): <none>
[09:31:47.666] Packages needed by future strategies (n = 0): <none>
[09:31:47.667] {
[09:31:47.667]     {
[09:31:47.667]         {
[09:31:47.667]             ...future.startTime <- base::Sys.time()
[09:31:47.667]             {
[09:31:47.667]                 {
[09:31:47.667]                   {
[09:31:47.667]                     {
[09:31:47.667]                       base::local({
[09:31:47.667]                         has_future <- base::requireNamespace("future", 
[09:31:47.667]                           quietly = TRUE)
[09:31:47.667]                         if (has_future) {
[09:31:47.667]                           ns <- base::getNamespace("future")
[09:31:47.667]                           version <- ns[[".package"]][["version"]]
[09:31:47.667]                           if (is.null(version)) 
[09:31:47.667]                             version <- utils::packageVersion("future")
[09:31:47.667]                         }
[09:31:47.667]                         else {
[09:31:47.667]                           version <- NULL
[09:31:47.667]                         }
[09:31:47.667]                         if (!has_future || version < "1.8.0") {
[09:31:47.667]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:47.667]                             "", base::R.version$version.string), 
[09:31:47.667]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:47.667]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:47.667]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:47.667]                               "release", "version")], collapse = " "), 
[09:31:47.667]                             hostname = base::Sys.info()[["nodename"]])
[09:31:47.667]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:47.667]                             info)
[09:31:47.667]                           info <- base::paste(info, collapse = "; ")
[09:31:47.667]                           if (!has_future) {
[09:31:47.667]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:47.667]                               info)
[09:31:47.667]                           }
[09:31:47.667]                           else {
[09:31:47.667]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:47.667]                               info, version)
[09:31:47.667]                           }
[09:31:47.667]                           base::stop(msg)
[09:31:47.667]                         }
[09:31:47.667]                       })
[09:31:47.667]                     }
[09:31:47.667]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:47.667]                     base::options(mc.cores = 1L)
[09:31:47.667]                   }
[09:31:47.667]                   ...future.strategy.old <- future::plan("list")
[09:31:47.667]                   options(future.plan = NULL)
[09:31:47.667]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.667]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:47.667]                 }
[09:31:47.667]                 ...future.workdir <- getwd()
[09:31:47.667]             }
[09:31:47.667]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:47.667]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:47.667]         }
[09:31:47.667]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:47.667]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:47.667]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:47.667]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:47.667]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:47.667]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:47.667]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:47.667]             base::names(...future.oldOptions))
[09:31:47.667]     }
[09:31:47.667]     if (FALSE) {
[09:31:47.667]     }
[09:31:47.667]     else {
[09:31:47.667]         if (TRUE) {
[09:31:47.667]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:47.667]                 open = "w")
[09:31:47.667]         }
[09:31:47.667]         else {
[09:31:47.667]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:47.667]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:47.667]         }
[09:31:47.667]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:47.667]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:47.667]             base::sink(type = "output", split = FALSE)
[09:31:47.667]             base::close(...future.stdout)
[09:31:47.667]         }, add = TRUE)
[09:31:47.667]     }
[09:31:47.667]     ...future.frame <- base::sys.nframe()
[09:31:47.667]     ...future.conditions <- base::list()
[09:31:47.667]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:47.667]     if (FALSE) {
[09:31:47.667]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:47.667]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:47.667]     }
[09:31:47.667]     ...future.result <- base::tryCatch({
[09:31:47.667]         base::withCallingHandlers({
[09:31:47.667]             ...future.value <- base::withVisible(base::local({
[09:31:47.667]                 ...future.makeSendCondition <- base::local({
[09:31:47.667]                   sendCondition <- NULL
[09:31:47.667]                   function(frame = 1L) {
[09:31:47.667]                     if (is.function(sendCondition)) 
[09:31:47.667]                       return(sendCondition)
[09:31:47.667]                     ns <- getNamespace("parallel")
[09:31:47.667]                     if (exists("sendData", mode = "function", 
[09:31:47.667]                       envir = ns)) {
[09:31:47.667]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:47.667]                         envir = ns)
[09:31:47.667]                       envir <- sys.frame(frame)
[09:31:47.667]                       master <- NULL
[09:31:47.667]                       while (!identical(envir, .GlobalEnv) && 
[09:31:47.667]                         !identical(envir, emptyenv())) {
[09:31:47.667]                         if (exists("master", mode = "list", envir = envir, 
[09:31:47.667]                           inherits = FALSE)) {
[09:31:47.667]                           master <- get("master", mode = "list", 
[09:31:47.667]                             envir = envir, inherits = FALSE)
[09:31:47.667]                           if (inherits(master, c("SOCKnode", 
[09:31:47.667]                             "SOCK0node"))) {
[09:31:47.667]                             sendCondition <<- function(cond) {
[09:31:47.667]                               data <- list(type = "VALUE", value = cond, 
[09:31:47.667]                                 success = TRUE)
[09:31:47.667]                               parallel_sendData(master, data)
[09:31:47.667]                             }
[09:31:47.667]                             return(sendCondition)
[09:31:47.667]                           }
[09:31:47.667]                         }
[09:31:47.667]                         frame <- frame + 1L
[09:31:47.667]                         envir <- sys.frame(frame)
[09:31:47.667]                       }
[09:31:47.667]                     }
[09:31:47.667]                     sendCondition <<- function(cond) NULL
[09:31:47.667]                   }
[09:31:47.667]                 })
[09:31:47.667]                 withCallingHandlers({
[09:31:47.667]                   {
[09:31:47.667]                     integer(1e+07)
[09:31:47.667]                   }
[09:31:47.667]                 }, immediateCondition = function(cond) {
[09:31:47.667]                   sendCondition <- ...future.makeSendCondition()
[09:31:47.667]                   sendCondition(cond)
[09:31:47.667]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.667]                   {
[09:31:47.667]                     inherits <- base::inherits
[09:31:47.667]                     invokeRestart <- base::invokeRestart
[09:31:47.667]                     is.null <- base::is.null
[09:31:47.667]                     muffled <- FALSE
[09:31:47.667]                     if (inherits(cond, "message")) {
[09:31:47.667]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:47.667]                       if (muffled) 
[09:31:47.667]                         invokeRestart("muffleMessage")
[09:31:47.667]                     }
[09:31:47.667]                     else if (inherits(cond, "warning")) {
[09:31:47.667]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:47.667]                       if (muffled) 
[09:31:47.667]                         invokeRestart("muffleWarning")
[09:31:47.667]                     }
[09:31:47.667]                     else if (inherits(cond, "condition")) {
[09:31:47.667]                       if (!is.null(pattern)) {
[09:31:47.667]                         computeRestarts <- base::computeRestarts
[09:31:47.667]                         grepl <- base::grepl
[09:31:47.667]                         restarts <- computeRestarts(cond)
[09:31:47.667]                         for (restart in restarts) {
[09:31:47.667]                           name <- restart$name
[09:31:47.667]                           if (is.null(name)) 
[09:31:47.667]                             next
[09:31:47.667]                           if (!grepl(pattern, name)) 
[09:31:47.667]                             next
[09:31:47.667]                           invokeRestart(restart)
[09:31:47.667]                           muffled <- TRUE
[09:31:47.667]                           break
[09:31:47.667]                         }
[09:31:47.667]                       }
[09:31:47.667]                     }
[09:31:47.667]                     invisible(muffled)
[09:31:47.667]                   }
[09:31:47.667]                   muffleCondition(cond)
[09:31:47.667]                 })
[09:31:47.667]             }))
[09:31:47.667]             future::FutureResult(value = ...future.value$value, 
[09:31:47.667]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.667]                   ...future.rng), globalenv = if (FALSE) 
[09:31:47.667]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:47.667]                     ...future.globalenv.names))
[09:31:47.667]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:47.667]         }, condition = base::local({
[09:31:47.667]             c <- base::c
[09:31:47.667]             inherits <- base::inherits
[09:31:47.667]             invokeRestart <- base::invokeRestart
[09:31:47.667]             length <- base::length
[09:31:47.667]             list <- base::list
[09:31:47.667]             seq.int <- base::seq.int
[09:31:47.667]             signalCondition <- base::signalCondition
[09:31:47.667]             sys.calls <- base::sys.calls
[09:31:47.667]             `[[` <- base::`[[`
[09:31:47.667]             `+` <- base::`+`
[09:31:47.667]             `<<-` <- base::`<<-`
[09:31:47.667]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:47.667]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:47.667]                   3L)]
[09:31:47.667]             }
[09:31:47.667]             function(cond) {
[09:31:47.667]                 is_error <- inherits(cond, "error")
[09:31:47.667]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:47.667]                   NULL)
[09:31:47.667]                 if (is_error) {
[09:31:47.667]                   sessionInformation <- function() {
[09:31:47.667]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:47.667]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:47.667]                       search = base::search(), system = base::Sys.info())
[09:31:47.667]                   }
[09:31:47.667]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.667]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:47.667]                     cond$call), session = sessionInformation(), 
[09:31:47.667]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:47.667]                   signalCondition(cond)
[09:31:47.667]                 }
[09:31:47.667]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:47.667]                 "immediateCondition"))) {
[09:31:47.667]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:47.667]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.667]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:47.667]                   if (TRUE && !signal) {
[09:31:47.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.667]                     {
[09:31:47.667]                       inherits <- base::inherits
[09:31:47.667]                       invokeRestart <- base::invokeRestart
[09:31:47.667]                       is.null <- base::is.null
[09:31:47.667]                       muffled <- FALSE
[09:31:47.667]                       if (inherits(cond, "message")) {
[09:31:47.667]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.667]                         if (muffled) 
[09:31:47.667]                           invokeRestart("muffleMessage")
[09:31:47.667]                       }
[09:31:47.667]                       else if (inherits(cond, "warning")) {
[09:31:47.667]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.667]                         if (muffled) 
[09:31:47.667]                           invokeRestart("muffleWarning")
[09:31:47.667]                       }
[09:31:47.667]                       else if (inherits(cond, "condition")) {
[09:31:47.667]                         if (!is.null(pattern)) {
[09:31:47.667]                           computeRestarts <- base::computeRestarts
[09:31:47.667]                           grepl <- base::grepl
[09:31:47.667]                           restarts <- computeRestarts(cond)
[09:31:47.667]                           for (restart in restarts) {
[09:31:47.667]                             name <- restart$name
[09:31:47.667]                             if (is.null(name)) 
[09:31:47.667]                               next
[09:31:47.667]                             if (!grepl(pattern, name)) 
[09:31:47.667]                               next
[09:31:47.667]                             invokeRestart(restart)
[09:31:47.667]                             muffled <- TRUE
[09:31:47.667]                             break
[09:31:47.667]                           }
[09:31:47.667]                         }
[09:31:47.667]                       }
[09:31:47.667]                       invisible(muffled)
[09:31:47.667]                     }
[09:31:47.667]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.667]                   }
[09:31:47.667]                 }
[09:31:47.667]                 else {
[09:31:47.667]                   if (TRUE) {
[09:31:47.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.667]                     {
[09:31:47.667]                       inherits <- base::inherits
[09:31:47.667]                       invokeRestart <- base::invokeRestart
[09:31:47.667]                       is.null <- base::is.null
[09:31:47.667]                       muffled <- FALSE
[09:31:47.667]                       if (inherits(cond, "message")) {
[09:31:47.667]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.667]                         if (muffled) 
[09:31:47.667]                           invokeRestart("muffleMessage")
[09:31:47.667]                       }
[09:31:47.667]                       else if (inherits(cond, "warning")) {
[09:31:47.667]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.667]                         if (muffled) 
[09:31:47.667]                           invokeRestart("muffleWarning")
[09:31:47.667]                       }
[09:31:47.667]                       else if (inherits(cond, "condition")) {
[09:31:47.667]                         if (!is.null(pattern)) {
[09:31:47.667]                           computeRestarts <- base::computeRestarts
[09:31:47.667]                           grepl <- base::grepl
[09:31:47.667]                           restarts <- computeRestarts(cond)
[09:31:47.667]                           for (restart in restarts) {
[09:31:47.667]                             name <- restart$name
[09:31:47.667]                             if (is.null(name)) 
[09:31:47.667]                               next
[09:31:47.667]                             if (!grepl(pattern, name)) 
[09:31:47.667]                               next
[09:31:47.667]                             invokeRestart(restart)
[09:31:47.667]                             muffled <- TRUE
[09:31:47.667]                             break
[09:31:47.667]                           }
[09:31:47.667]                         }
[09:31:47.667]                       }
[09:31:47.667]                       invisible(muffled)
[09:31:47.667]                     }
[09:31:47.667]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.667]                   }
[09:31:47.667]                 }
[09:31:47.667]             }
[09:31:47.667]         }))
[09:31:47.667]     }, error = function(ex) {
[09:31:47.667]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:47.667]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.667]                 ...future.rng), started = ...future.startTime, 
[09:31:47.667]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:47.667]             version = "1.8"), class = "FutureResult")
[09:31:47.667]     }, finally = {
[09:31:47.667]         if (!identical(...future.workdir, getwd())) 
[09:31:47.667]             setwd(...future.workdir)
[09:31:47.667]         {
[09:31:47.667]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:47.667]                 ...future.oldOptions$nwarnings <- NULL
[09:31:47.667]             }
[09:31:47.667]             base::options(...future.oldOptions)
[09:31:47.667]             if (.Platform$OS.type == "windows") {
[09:31:47.667]                 old_names <- names(...future.oldEnvVars)
[09:31:47.667]                 envs <- base::Sys.getenv()
[09:31:47.667]                 names <- names(envs)
[09:31:47.667]                 common <- intersect(names, old_names)
[09:31:47.667]                 added <- setdiff(names, old_names)
[09:31:47.667]                 removed <- setdiff(old_names, names)
[09:31:47.667]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:47.667]                   envs[common]]
[09:31:47.667]                 NAMES <- toupper(changed)
[09:31:47.667]                 args <- list()
[09:31:47.667]                 for (kk in seq_along(NAMES)) {
[09:31:47.667]                   name <- changed[[kk]]
[09:31:47.667]                   NAME <- NAMES[[kk]]
[09:31:47.667]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.667]                     next
[09:31:47.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.667]                 }
[09:31:47.667]                 NAMES <- toupper(added)
[09:31:47.667]                 for (kk in seq_along(NAMES)) {
[09:31:47.667]                   name <- added[[kk]]
[09:31:47.667]                   NAME <- NAMES[[kk]]
[09:31:47.667]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.667]                     next
[09:31:47.667]                   args[[name]] <- ""
[09:31:47.667]                 }
[09:31:47.667]                 NAMES <- toupper(removed)
[09:31:47.667]                 for (kk in seq_along(NAMES)) {
[09:31:47.667]                   name <- removed[[kk]]
[09:31:47.667]                   NAME <- NAMES[[kk]]
[09:31:47.667]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.667]                     next
[09:31:47.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.667]                 }
[09:31:47.667]                 if (length(args) > 0) 
[09:31:47.667]                   base::do.call(base::Sys.setenv, args = args)
[09:31:47.667]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:47.667]             }
[09:31:47.667]             else {
[09:31:47.667]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:47.667]             }
[09:31:47.667]             {
[09:31:47.667]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:47.667]                   0L) {
[09:31:47.667]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:47.667]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:47.667]                   base::options(opts)
[09:31:47.667]                 }
[09:31:47.667]                 {
[09:31:47.667]                   {
[09:31:47.667]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:47.667]                     NULL
[09:31:47.667]                   }
[09:31:47.667]                   options(future.plan = NULL)
[09:31:47.667]                   if (is.na(NA_character_)) 
[09:31:47.667]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.667]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:47.667]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:47.667]                     .init = FALSE)
[09:31:47.667]                 }
[09:31:47.667]             }
[09:31:47.667]         }
[09:31:47.667]     })
[09:31:47.667]     if (TRUE) {
[09:31:47.667]         base::sink(type = "output", split = FALSE)
[09:31:47.667]         if (TRUE) {
[09:31:47.667]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:47.667]         }
[09:31:47.667]         else {
[09:31:47.667]             ...future.result["stdout"] <- base::list(NULL)
[09:31:47.667]         }
[09:31:47.667]         base::close(...future.stdout)
[09:31:47.667]         ...future.stdout <- NULL
[09:31:47.667]     }
[09:31:47.667]     ...future.result$conditions <- ...future.conditions
[09:31:47.667]     ...future.result$finished <- base::Sys.time()
[09:31:47.667]     ...future.result
[09:31:47.667] }
[09:31:47.670] MultisessionFuture started
[09:31:47.670] - Launch lazy future ... done
[09:31:47.670] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[09:31:47.670] result() for ClusterFuture ...
[09:31:47.670] receiveMessageFromWorker() for ClusterFuture ...
[09:31:47.670] - Validating connection of MultisessionFuture
[09:31:47.746] - received message: FutureResult
[09:31:47.747] - Received FutureResult
[09:31:47.747] - Erased future from FutureRegistry
[09:31:47.747] result() for ClusterFuture ...
[09:31:47.747] - result already collected: FutureResult
[09:31:47.747] result() for ClusterFuture ... done
[09:31:47.747] - Garbage collecting worker ...
[09:31:47.978] - Garbage collecting worker ... done
[09:31:47.978] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:47.978] result() for ClusterFuture ... done
[09:31:47.978] result() for ClusterFuture ...
[09:31:47.979] - result already collected: FutureResult
[09:31:47.979] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[09:31:47.979] getGlobalsAndPackages() ...
[09:31:47.979] Searching for globals...
[09:31:47.980] - globals found: [2] ‘{’, ‘gc’
[09:31:47.980] Searching for globals ... DONE
[09:31:47.980] Resolving globals: FALSE
[09:31:47.981] 
[09:31:47.981] 
[09:31:47.981] getGlobalsAndPackages() ... DONE
[09:31:47.981] run() for ‘Future’ ...
[09:31:47.981] - state: ‘created’
[09:31:47.981] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:47.992] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:47.992] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:47.992]   - Field: ‘node’
[09:31:47.992]   - Field: ‘label’
[09:31:47.992]   - Field: ‘local’
[09:31:47.993]   - Field: ‘owner’
[09:31:47.993]   - Field: ‘envir’
[09:31:47.993]   - Field: ‘workers’
[09:31:47.993]   - Field: ‘packages’
[09:31:47.993]   - Field: ‘gc’
[09:31:47.993]   - Field: ‘conditions’
[09:31:47.993]   - Field: ‘persistent’
[09:31:47.993]   - Field: ‘expr’
[09:31:47.993]   - Field: ‘uuid’
[09:31:47.993]   - Field: ‘seed’
[09:31:47.993]   - Field: ‘version’
[09:31:47.994]   - Field: ‘result’
[09:31:47.994]   - Field: ‘asynchronous’
[09:31:47.994]   - Field: ‘calls’
[09:31:47.994]   - Field: ‘globals’
[09:31:47.994]   - Field: ‘stdout’
[09:31:47.994]   - Field: ‘earlySignal’
[09:31:47.994]   - Field: ‘lazy’
[09:31:47.994]   - Field: ‘state’
[09:31:47.994] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:47.994] - Launch lazy future ...
[09:31:47.995] Packages needed by the future expression (n = 0): <none>
[09:31:47.995] Packages needed by future strategies (n = 0): <none>
[09:31:47.995] {
[09:31:47.995]     {
[09:31:47.995]         {
[09:31:47.995]             ...future.startTime <- base::Sys.time()
[09:31:47.995]             {
[09:31:47.995]                 {
[09:31:47.995]                   {
[09:31:47.995]                     {
[09:31:47.995]                       base::local({
[09:31:47.995]                         has_future <- base::requireNamespace("future", 
[09:31:47.995]                           quietly = TRUE)
[09:31:47.995]                         if (has_future) {
[09:31:47.995]                           ns <- base::getNamespace("future")
[09:31:47.995]                           version <- ns[[".package"]][["version"]]
[09:31:47.995]                           if (is.null(version)) 
[09:31:47.995]                             version <- utils::packageVersion("future")
[09:31:47.995]                         }
[09:31:47.995]                         else {
[09:31:47.995]                           version <- NULL
[09:31:47.995]                         }
[09:31:47.995]                         if (!has_future || version < "1.8.0") {
[09:31:47.995]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:47.995]                             "", base::R.version$version.string), 
[09:31:47.995]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:47.995]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:47.995]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:47.995]                               "release", "version")], collapse = " "), 
[09:31:47.995]                             hostname = base::Sys.info()[["nodename"]])
[09:31:47.995]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:47.995]                             info)
[09:31:47.995]                           info <- base::paste(info, collapse = "; ")
[09:31:47.995]                           if (!has_future) {
[09:31:47.995]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:47.995]                               info)
[09:31:47.995]                           }
[09:31:47.995]                           else {
[09:31:47.995]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:47.995]                               info, version)
[09:31:47.995]                           }
[09:31:47.995]                           base::stop(msg)
[09:31:47.995]                         }
[09:31:47.995]                       })
[09:31:47.995]                     }
[09:31:47.995]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:47.995]                     base::options(mc.cores = 1L)
[09:31:47.995]                   }
[09:31:47.995]                   ...future.strategy.old <- future::plan("list")
[09:31:47.995]                   options(future.plan = NULL)
[09:31:47.995]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.995]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:47.995]                 }
[09:31:47.995]                 ...future.workdir <- getwd()
[09:31:47.995]             }
[09:31:47.995]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:47.995]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:47.995]         }
[09:31:47.995]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:47.995]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:47.995]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:47.995]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:47.995]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:47.995]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:47.995]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:47.995]             base::names(...future.oldOptions))
[09:31:47.995]     }
[09:31:47.995]     if (FALSE) {
[09:31:47.995]     }
[09:31:47.995]     else {
[09:31:47.995]         if (TRUE) {
[09:31:47.995]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:47.995]                 open = "w")
[09:31:47.995]         }
[09:31:47.995]         else {
[09:31:47.995]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:47.995]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:47.995]         }
[09:31:47.995]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:47.995]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:47.995]             base::sink(type = "output", split = FALSE)
[09:31:47.995]             base::close(...future.stdout)
[09:31:47.995]         }, add = TRUE)
[09:31:47.995]     }
[09:31:47.995]     ...future.frame <- base::sys.nframe()
[09:31:47.995]     ...future.conditions <- base::list()
[09:31:47.995]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:47.995]     if (FALSE) {
[09:31:47.995]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:47.995]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:47.995]     }
[09:31:47.995]     ...future.result <- base::tryCatch({
[09:31:47.995]         base::withCallingHandlers({
[09:31:47.995]             ...future.value <- base::withVisible(base::local({
[09:31:47.995]                 ...future.makeSendCondition <- base::local({
[09:31:47.995]                   sendCondition <- NULL
[09:31:47.995]                   function(frame = 1L) {
[09:31:47.995]                     if (is.function(sendCondition)) 
[09:31:47.995]                       return(sendCondition)
[09:31:47.995]                     ns <- getNamespace("parallel")
[09:31:47.995]                     if (exists("sendData", mode = "function", 
[09:31:47.995]                       envir = ns)) {
[09:31:47.995]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:47.995]                         envir = ns)
[09:31:47.995]                       envir <- sys.frame(frame)
[09:31:47.995]                       master <- NULL
[09:31:47.995]                       while (!identical(envir, .GlobalEnv) && 
[09:31:47.995]                         !identical(envir, emptyenv())) {
[09:31:47.995]                         if (exists("master", mode = "list", envir = envir, 
[09:31:47.995]                           inherits = FALSE)) {
[09:31:47.995]                           master <- get("master", mode = "list", 
[09:31:47.995]                             envir = envir, inherits = FALSE)
[09:31:47.995]                           if (inherits(master, c("SOCKnode", 
[09:31:47.995]                             "SOCK0node"))) {
[09:31:47.995]                             sendCondition <<- function(cond) {
[09:31:47.995]                               data <- list(type = "VALUE", value = cond, 
[09:31:47.995]                                 success = TRUE)
[09:31:47.995]                               parallel_sendData(master, data)
[09:31:47.995]                             }
[09:31:47.995]                             return(sendCondition)
[09:31:47.995]                           }
[09:31:47.995]                         }
[09:31:47.995]                         frame <- frame + 1L
[09:31:47.995]                         envir <- sys.frame(frame)
[09:31:47.995]                       }
[09:31:47.995]                     }
[09:31:47.995]                     sendCondition <<- function(cond) NULL
[09:31:47.995]                   }
[09:31:47.995]                 })
[09:31:47.995]                 withCallingHandlers({
[09:31:47.995]                   {
[09:31:47.995]                     gc()
[09:31:47.995]                   }
[09:31:47.995]                 }, immediateCondition = function(cond) {
[09:31:47.995]                   sendCondition <- ...future.makeSendCondition()
[09:31:47.995]                   sendCondition(cond)
[09:31:47.995]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.995]                   {
[09:31:47.995]                     inherits <- base::inherits
[09:31:47.995]                     invokeRestart <- base::invokeRestart
[09:31:47.995]                     is.null <- base::is.null
[09:31:47.995]                     muffled <- FALSE
[09:31:47.995]                     if (inherits(cond, "message")) {
[09:31:47.995]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:47.995]                       if (muffled) 
[09:31:47.995]                         invokeRestart("muffleMessage")
[09:31:47.995]                     }
[09:31:47.995]                     else if (inherits(cond, "warning")) {
[09:31:47.995]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:47.995]                       if (muffled) 
[09:31:47.995]                         invokeRestart("muffleWarning")
[09:31:47.995]                     }
[09:31:47.995]                     else if (inherits(cond, "condition")) {
[09:31:47.995]                       if (!is.null(pattern)) {
[09:31:47.995]                         computeRestarts <- base::computeRestarts
[09:31:47.995]                         grepl <- base::grepl
[09:31:47.995]                         restarts <- computeRestarts(cond)
[09:31:47.995]                         for (restart in restarts) {
[09:31:47.995]                           name <- restart$name
[09:31:47.995]                           if (is.null(name)) 
[09:31:47.995]                             next
[09:31:47.995]                           if (!grepl(pattern, name)) 
[09:31:47.995]                             next
[09:31:47.995]                           invokeRestart(restart)
[09:31:47.995]                           muffled <- TRUE
[09:31:47.995]                           break
[09:31:47.995]                         }
[09:31:47.995]                       }
[09:31:47.995]                     }
[09:31:47.995]                     invisible(muffled)
[09:31:47.995]                   }
[09:31:47.995]                   muffleCondition(cond)
[09:31:47.995]                 })
[09:31:47.995]             }))
[09:31:47.995]             future::FutureResult(value = ...future.value$value, 
[09:31:47.995]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.995]                   ...future.rng), globalenv = if (FALSE) 
[09:31:47.995]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:47.995]                     ...future.globalenv.names))
[09:31:47.995]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:47.995]         }, condition = base::local({
[09:31:47.995]             c <- base::c
[09:31:47.995]             inherits <- base::inherits
[09:31:47.995]             invokeRestart <- base::invokeRestart
[09:31:47.995]             length <- base::length
[09:31:47.995]             list <- base::list
[09:31:47.995]             seq.int <- base::seq.int
[09:31:47.995]             signalCondition <- base::signalCondition
[09:31:47.995]             sys.calls <- base::sys.calls
[09:31:47.995]             `[[` <- base::`[[`
[09:31:47.995]             `+` <- base::`+`
[09:31:47.995]             `<<-` <- base::`<<-`
[09:31:47.995]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:47.995]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:47.995]                   3L)]
[09:31:47.995]             }
[09:31:47.995]             function(cond) {
[09:31:47.995]                 is_error <- inherits(cond, "error")
[09:31:47.995]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:47.995]                   NULL)
[09:31:47.995]                 if (is_error) {
[09:31:47.995]                   sessionInformation <- function() {
[09:31:47.995]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:47.995]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:47.995]                       search = base::search(), system = base::Sys.info())
[09:31:47.995]                   }
[09:31:47.995]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.995]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:47.995]                     cond$call), session = sessionInformation(), 
[09:31:47.995]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:47.995]                   signalCondition(cond)
[09:31:47.995]                 }
[09:31:47.995]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:47.995]                 "immediateCondition"))) {
[09:31:47.995]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:47.995]                   ...future.conditions[[length(...future.conditions) + 
[09:31:47.995]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:47.995]                   if (TRUE && !signal) {
[09:31:47.995]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.995]                     {
[09:31:47.995]                       inherits <- base::inherits
[09:31:47.995]                       invokeRestart <- base::invokeRestart
[09:31:47.995]                       is.null <- base::is.null
[09:31:47.995]                       muffled <- FALSE
[09:31:47.995]                       if (inherits(cond, "message")) {
[09:31:47.995]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.995]                         if (muffled) 
[09:31:47.995]                           invokeRestart("muffleMessage")
[09:31:47.995]                       }
[09:31:47.995]                       else if (inherits(cond, "warning")) {
[09:31:47.995]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.995]                         if (muffled) 
[09:31:47.995]                           invokeRestart("muffleWarning")
[09:31:47.995]                       }
[09:31:47.995]                       else if (inherits(cond, "condition")) {
[09:31:47.995]                         if (!is.null(pattern)) {
[09:31:47.995]                           computeRestarts <- base::computeRestarts
[09:31:47.995]                           grepl <- base::grepl
[09:31:47.995]                           restarts <- computeRestarts(cond)
[09:31:47.995]                           for (restart in restarts) {
[09:31:47.995]                             name <- restart$name
[09:31:47.995]                             if (is.null(name)) 
[09:31:47.995]                               next
[09:31:47.995]                             if (!grepl(pattern, name)) 
[09:31:47.995]                               next
[09:31:47.995]                             invokeRestart(restart)
[09:31:47.995]                             muffled <- TRUE
[09:31:47.995]                             break
[09:31:47.995]                           }
[09:31:47.995]                         }
[09:31:47.995]                       }
[09:31:47.995]                       invisible(muffled)
[09:31:47.995]                     }
[09:31:47.995]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.995]                   }
[09:31:47.995]                 }
[09:31:47.995]                 else {
[09:31:47.995]                   if (TRUE) {
[09:31:47.995]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:47.995]                     {
[09:31:47.995]                       inherits <- base::inherits
[09:31:47.995]                       invokeRestart <- base::invokeRestart
[09:31:47.995]                       is.null <- base::is.null
[09:31:47.995]                       muffled <- FALSE
[09:31:47.995]                       if (inherits(cond, "message")) {
[09:31:47.995]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:47.995]                         if (muffled) 
[09:31:47.995]                           invokeRestart("muffleMessage")
[09:31:47.995]                       }
[09:31:47.995]                       else if (inherits(cond, "warning")) {
[09:31:47.995]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:47.995]                         if (muffled) 
[09:31:47.995]                           invokeRestart("muffleWarning")
[09:31:47.995]                       }
[09:31:47.995]                       else if (inherits(cond, "condition")) {
[09:31:47.995]                         if (!is.null(pattern)) {
[09:31:47.995]                           computeRestarts <- base::computeRestarts
[09:31:47.995]                           grepl <- base::grepl
[09:31:47.995]                           restarts <- computeRestarts(cond)
[09:31:47.995]                           for (restart in restarts) {
[09:31:47.995]                             name <- restart$name
[09:31:47.995]                             if (is.null(name)) 
[09:31:47.995]                               next
[09:31:47.995]                             if (!grepl(pattern, name)) 
[09:31:47.995]                               next
[09:31:47.995]                             invokeRestart(restart)
[09:31:47.995]                             muffled <- TRUE
[09:31:47.995]                             break
[09:31:47.995]                           }
[09:31:47.995]                         }
[09:31:47.995]                       }
[09:31:47.995]                       invisible(muffled)
[09:31:47.995]                     }
[09:31:47.995]                     muffleCondition(cond, pattern = "^muffle")
[09:31:47.995]                   }
[09:31:47.995]                 }
[09:31:47.995]             }
[09:31:47.995]         }))
[09:31:47.995]     }, error = function(ex) {
[09:31:47.995]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:47.995]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:47.995]                 ...future.rng), started = ...future.startTime, 
[09:31:47.995]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:47.995]             version = "1.8"), class = "FutureResult")
[09:31:47.995]     }, finally = {
[09:31:47.995]         if (!identical(...future.workdir, getwd())) 
[09:31:47.995]             setwd(...future.workdir)
[09:31:47.995]         {
[09:31:47.995]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:47.995]                 ...future.oldOptions$nwarnings <- NULL
[09:31:47.995]             }
[09:31:47.995]             base::options(...future.oldOptions)
[09:31:47.995]             if (.Platform$OS.type == "windows") {
[09:31:47.995]                 old_names <- names(...future.oldEnvVars)
[09:31:47.995]                 envs <- base::Sys.getenv()
[09:31:47.995]                 names <- names(envs)
[09:31:47.995]                 common <- intersect(names, old_names)
[09:31:47.995]                 added <- setdiff(names, old_names)
[09:31:47.995]                 removed <- setdiff(old_names, names)
[09:31:47.995]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:47.995]                   envs[common]]
[09:31:47.995]                 NAMES <- toupper(changed)
[09:31:47.995]                 args <- list()
[09:31:47.995]                 for (kk in seq_along(NAMES)) {
[09:31:47.995]                   name <- changed[[kk]]
[09:31:47.995]                   NAME <- NAMES[[kk]]
[09:31:47.995]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.995]                     next
[09:31:47.995]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.995]                 }
[09:31:47.995]                 NAMES <- toupper(added)
[09:31:47.995]                 for (kk in seq_along(NAMES)) {
[09:31:47.995]                   name <- added[[kk]]
[09:31:47.995]                   NAME <- NAMES[[kk]]
[09:31:47.995]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.995]                     next
[09:31:47.995]                   args[[name]] <- ""
[09:31:47.995]                 }
[09:31:47.995]                 NAMES <- toupper(removed)
[09:31:47.995]                 for (kk in seq_along(NAMES)) {
[09:31:47.995]                   name <- removed[[kk]]
[09:31:47.995]                   NAME <- NAMES[[kk]]
[09:31:47.995]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:47.995]                     next
[09:31:47.995]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:47.995]                 }
[09:31:47.995]                 if (length(args) > 0) 
[09:31:47.995]                   base::do.call(base::Sys.setenv, args = args)
[09:31:47.995]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:47.995]             }
[09:31:47.995]             else {
[09:31:47.995]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:47.995]             }
[09:31:47.995]             {
[09:31:47.995]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:47.995]                   0L) {
[09:31:47.995]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:47.995]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:47.995]                   base::options(opts)
[09:31:47.995]                 }
[09:31:47.995]                 {
[09:31:47.995]                   {
[09:31:47.995]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:47.995]                     NULL
[09:31:47.995]                   }
[09:31:47.995]                   options(future.plan = NULL)
[09:31:47.995]                   if (is.na(NA_character_)) 
[09:31:47.995]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:47.995]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:47.995]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:47.995]                     .init = FALSE)
[09:31:47.995]                 }
[09:31:47.995]             }
[09:31:47.995]         }
[09:31:47.995]     })
[09:31:47.995]     if (TRUE) {
[09:31:47.995]         base::sink(type = "output", split = FALSE)
[09:31:47.995]         if (TRUE) {
[09:31:47.995]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:47.995]         }
[09:31:47.995]         else {
[09:31:47.995]             ...future.result["stdout"] <- base::list(NULL)
[09:31:47.995]         }
[09:31:47.995]         base::close(...future.stdout)
[09:31:47.995]         ...future.stdout <- NULL
[09:31:47.995]     }
[09:31:47.995]     ...future.result$conditions <- ...future.conditions
[09:31:47.995]     ...future.result$finished <- base::Sys.time()
[09:31:47.995]     ...future.result
[09:31:47.995] }
[09:31:47.998] MultisessionFuture started
[09:31:47.998] - Launch lazy future ... done
[09:31:47.998] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[09:31:47.998] result() for ClusterFuture ...
[09:31:47.999] receiveMessageFromWorker() for ClusterFuture ...
[09:31:47.999] - Validating connection of MultisessionFuture
[09:31:48.062] - received message: FutureResult
[09:31:48.062] - Received FutureResult
[09:31:48.062] - Erased future from FutureRegistry
[09:31:48.062] result() for ClusterFuture ...
[09:31:48.062] - result already collected: FutureResult
[09:31:48.063] result() for ClusterFuture ... done
[09:31:48.063] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:48.063] result() for ClusterFuture ... done
[09:31:48.063] result() for ClusterFuture ...
[09:31:48.063] - result already collected: FutureResult
[09:31:48.063] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger  (Mb) max used  (Mb)
Ncells 407154 21.8     899071  48.1   692222  37.0
Vcells 729747  5.6   13476992 102.9 15806168 120.6
> 
> message("*** multisession(..., gc = TRUE) ... TRUE")
*** multisession(..., gc = TRUE) ... TRUE
> 
> 
> message("*** multisession(...) - stopping with plan() change ...")
*** multisession(...) - stopping with plan() change ...
>   
> plan(multisession, workers = 2L)
[09:31:48.064] plan(): Setting new future strategy stack:
[09:31:48.064] List of future strategies:
[09:31:48.064] 1. multisession:
[09:31:48.064]    - args: function (..., workers = 2L, envir = parent.frame())
[09:31:48.064]    - tweaked: TRUE
[09:31:48.064]    - call: plan(multisession, workers = 2L)
[09:31:48.065] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:31:48.065] multisession:
[09:31:48.065] - args: function (..., workers = 2L, envir = parent.frame())
[09:31:48.065] - tweaked: TRUE
[09:31:48.065] - call: plan(multisession, workers = 2L)
[09:31:48.065] getGlobalsAndPackages() ...
[09:31:48.065] Not searching for globals
[09:31:48.066] - globals: [0] <none>
[09:31:48.066] getGlobalsAndPackages() ... DONE
[09:31:48.066] [local output] makeClusterPSOCK() ...
[09:31:48.071] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:31:48.072] [local output] Base port: 11838
[09:31:48.072] [local output] Getting setup options for 2 cluster nodes ...
[09:31:48.072] [local output]  - Node 1 of 2 ...
[09:31:48.073] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:48.074] [local output] Rscript port: 11838

[09:31:48.074] [local output]  - Node 2 of 2 ...
[09:31:48.075] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:48.076] [local output] Rscript port: 11838

[09:31:48.076] [local output] Getting setup options for 2 cluster nodes ... done
[09:31:48.076] [local output]  - Parallel setup requested for some PSOCK nodes
[09:31:48.077] [local output] Setting up PSOCK nodes in parallel
[09:31:48.077] List of 36
[09:31:48.077]  $ worker          : chr "localhost"
[09:31:48.077]   ..- attr(*, "localhost")= logi TRUE
[09:31:48.077]  $ master          : chr "localhost"
[09:31:48.077]  $ port            : int 11838
[09:31:48.077]  $ connectTimeout  : num 120
[09:31:48.077]  $ timeout         : num 2592000
[09:31:48.077]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:31:48.077]  $ homogeneous     : logi TRUE
[09:31:48.077]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:31:48.077]  $ rscript_envs    : NULL
[09:31:48.077]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:48.077]  $ rscript_startup : NULL
[09:31:48.077]  $ rscript_sh      : chr "sh"
[09:31:48.077]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:48.077]  $ methods         : logi TRUE
[09:31:48.077]  $ socketOptions   : chr "no-delay"
[09:31:48.077]  $ useXDR          : logi FALSE
[09:31:48.077]  $ outfile         : chr "/dev/null"
[09:31:48.077]  $ renice          : int NA
[09:31:48.077]  $ rshcmd          : NULL
[09:31:48.077]  $ user            : chr(0) 
[09:31:48.077]  $ revtunnel       : logi FALSE
[09:31:48.077]  $ rshlogfile      : NULL
[09:31:48.077]  $ rshopts         : chr(0) 
[09:31:48.077]  $ rank            : int 1
[09:31:48.077]  $ manual          : logi FALSE
[09:31:48.077]  $ dryrun          : logi FALSE
[09:31:48.077]  $ quiet           : logi FALSE
[09:31:48.077]  $ setup_strategy  : chr "parallel"
[09:31:48.077]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:48.077]  $ pidfile         : chr "/tmp/Rtmp1Uz65Q/worker.rank=1.parallelly.parent=45638.b2462aed5ae.pid"
[09:31:48.077]  $ rshcmd_label    : NULL
[09:31:48.077]  $ rsh_call        : NULL
[09:31:48.077]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:48.077]  $ localMachine    : logi TRUE
[09:31:48.077]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:31:48.077]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:31:48.077]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:31:48.077]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:31:48.077]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:31:48.077]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:31:48.077]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:31:48.077]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:31:48.077]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:31:48.077]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:31:48.077]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:31:48.077]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:31:48.077]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:31:48.077]  $ arguments       :List of 28
[09:31:48.077]   ..$ worker          : chr "localhost"
[09:31:48.077]   ..$ master          : NULL
[09:31:48.077]   ..$ port            : int 11838
[09:31:48.077]   ..$ connectTimeout  : num 120
[09:31:48.077]   ..$ timeout         : num 2592000
[09:31:48.077]   ..$ rscript         : NULL
[09:31:48.077]   ..$ homogeneous     : NULL
[09:31:48.077]   ..$ rscript_args    : NULL
[09:31:48.077]   ..$ rscript_envs    : NULL
[09:31:48.077]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:48.077]   ..$ rscript_startup : NULL
[09:31:48.077]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:31:48.077]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:48.077]   ..$ methods         : logi TRUE
[09:31:48.077]   ..$ socketOptions   : chr "no-delay"
[09:31:48.077]   ..$ useXDR          : logi FALSE
[09:31:48.077]   ..$ outfile         : chr "/dev/null"
[09:31:48.077]   ..$ renice          : int NA
[09:31:48.077]   ..$ rshcmd          : NULL
[09:31:48.077]   ..$ user            : NULL
[09:31:48.077]   ..$ revtunnel       : logi NA
[09:31:48.077]   ..$ rshlogfile      : NULL
[09:31:48.077]   ..$ rshopts         : NULL
[09:31:48.077]   ..$ rank            : int 1
[09:31:48.077]   ..$ manual          : logi FALSE
[09:31:48.077]   ..$ dryrun          : logi FALSE
[09:31:48.077]   ..$ quiet           : logi FALSE
[09:31:48.077]   ..$ setup_strategy  : chr "parallel"
[09:31:48.077]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:31:48.098] [local output] System call to launch all workers:
[09:31:48.098] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp1Uz65Q/worker.rank=1.parallelly.parent=45638.b2462aed5ae.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11838 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:31:48.098] [local output] Starting PSOCK main server
[09:31:48.099] [local output] Workers launched
[09:31:48.099] [local output] Waiting for workers to connect back
[09:31:48.100]  - [local output] 0 workers out of 2 ready
[09:31:48.338]  - [local output] 0 workers out of 2 ready
[09:31:48.338]  - [local output] 1 workers out of 2 ready
[09:31:48.344]  - [local output] 1 workers out of 2 ready
[09:31:48.345]  - [local output] 2 workers out of 2 ready
[09:31:48.345] [local output] Launching of workers completed
[09:31:48.345] [local output] Collecting session information from workers
[09:31:48.346] [local output]  - Worker #1 of 2
[09:31:48.346] [local output]  - Worker #2 of 2
[09:31:48.346] [local output] makeClusterPSOCK() ... done
[09:31:48.357] Packages needed by the future expression (n = 0): <none>
[09:31:48.357] Packages needed by future strategies (n = 0): <none>
[09:31:48.358] {
[09:31:48.358]     {
[09:31:48.358]         {
[09:31:48.358]             ...future.startTime <- base::Sys.time()
[09:31:48.358]             {
[09:31:48.358]                 {
[09:31:48.358]                   {
[09:31:48.358]                     {
[09:31:48.358]                       base::local({
[09:31:48.358]                         has_future <- base::requireNamespace("future", 
[09:31:48.358]                           quietly = TRUE)
[09:31:48.358]                         if (has_future) {
[09:31:48.358]                           ns <- base::getNamespace("future")
[09:31:48.358]                           version <- ns[[".package"]][["version"]]
[09:31:48.358]                           if (is.null(version)) 
[09:31:48.358]                             version <- utils::packageVersion("future")
[09:31:48.358]                         }
[09:31:48.358]                         else {
[09:31:48.358]                           version <- NULL
[09:31:48.358]                         }
[09:31:48.358]                         if (!has_future || version < "1.8.0") {
[09:31:48.358]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:48.358]                             "", base::R.version$version.string), 
[09:31:48.358]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:48.358]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:48.358]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:48.358]                               "release", "version")], collapse = " "), 
[09:31:48.358]                             hostname = base::Sys.info()[["nodename"]])
[09:31:48.358]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:48.358]                             info)
[09:31:48.358]                           info <- base::paste(info, collapse = "; ")
[09:31:48.358]                           if (!has_future) {
[09:31:48.358]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:48.358]                               info)
[09:31:48.358]                           }
[09:31:48.358]                           else {
[09:31:48.358]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:48.358]                               info, version)
[09:31:48.358]                           }
[09:31:48.358]                           base::stop(msg)
[09:31:48.358]                         }
[09:31:48.358]                       })
[09:31:48.358]                     }
[09:31:48.358]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:48.358]                     base::options(mc.cores = 1L)
[09:31:48.358]                   }
[09:31:48.358]                   ...future.strategy.old <- future::plan("list")
[09:31:48.358]                   options(future.plan = NULL)
[09:31:48.358]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:48.358]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:48.358]                 }
[09:31:48.358]                 ...future.workdir <- getwd()
[09:31:48.358]             }
[09:31:48.358]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:48.358]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:48.358]         }
[09:31:48.358]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:48.358]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:48.358]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:48.358]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:48.358]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:48.358]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:48.358]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:48.358]             base::names(...future.oldOptions))
[09:31:48.358]     }
[09:31:48.358]     if (FALSE) {
[09:31:48.358]     }
[09:31:48.358]     else {
[09:31:48.358]         if (TRUE) {
[09:31:48.358]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:48.358]                 open = "w")
[09:31:48.358]         }
[09:31:48.358]         else {
[09:31:48.358]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:48.358]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:48.358]         }
[09:31:48.358]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:48.358]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:48.358]             base::sink(type = "output", split = FALSE)
[09:31:48.358]             base::close(...future.stdout)
[09:31:48.358]         }, add = TRUE)
[09:31:48.358]     }
[09:31:48.358]     ...future.frame <- base::sys.nframe()
[09:31:48.358]     ...future.conditions <- base::list()
[09:31:48.358]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:48.358]     if (FALSE) {
[09:31:48.358]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:48.358]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:48.358]     }
[09:31:48.358]     ...future.result <- base::tryCatch({
[09:31:48.358]         base::withCallingHandlers({
[09:31:48.358]             ...future.value <- base::withVisible(base::local({
[09:31:48.358]                 ...future.makeSendCondition <- base::local({
[09:31:48.358]                   sendCondition <- NULL
[09:31:48.358]                   function(frame = 1L) {
[09:31:48.358]                     if (is.function(sendCondition)) 
[09:31:48.358]                       return(sendCondition)
[09:31:48.358]                     ns <- getNamespace("parallel")
[09:31:48.358]                     if (exists("sendData", mode = "function", 
[09:31:48.358]                       envir = ns)) {
[09:31:48.358]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:48.358]                         envir = ns)
[09:31:48.358]                       envir <- sys.frame(frame)
[09:31:48.358]                       master <- NULL
[09:31:48.358]                       while (!identical(envir, .GlobalEnv) && 
[09:31:48.358]                         !identical(envir, emptyenv())) {
[09:31:48.358]                         if (exists("master", mode = "list", envir = envir, 
[09:31:48.358]                           inherits = FALSE)) {
[09:31:48.358]                           master <- get("master", mode = "list", 
[09:31:48.358]                             envir = envir, inherits = FALSE)
[09:31:48.358]                           if (inherits(master, c("SOCKnode", 
[09:31:48.358]                             "SOCK0node"))) {
[09:31:48.358]                             sendCondition <<- function(cond) {
[09:31:48.358]                               data <- list(type = "VALUE", value = cond, 
[09:31:48.358]                                 success = TRUE)
[09:31:48.358]                               parallel_sendData(master, data)
[09:31:48.358]                             }
[09:31:48.358]                             return(sendCondition)
[09:31:48.358]                           }
[09:31:48.358]                         }
[09:31:48.358]                         frame <- frame + 1L
[09:31:48.358]                         envir <- sys.frame(frame)
[09:31:48.358]                       }
[09:31:48.358]                     }
[09:31:48.358]                     sendCondition <<- function(cond) NULL
[09:31:48.358]                   }
[09:31:48.358]                 })
[09:31:48.358]                 withCallingHandlers({
[09:31:48.358]                   NA
[09:31:48.358]                 }, immediateCondition = function(cond) {
[09:31:48.358]                   sendCondition <- ...future.makeSendCondition()
[09:31:48.358]                   sendCondition(cond)
[09:31:48.358]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:48.358]                   {
[09:31:48.358]                     inherits <- base::inherits
[09:31:48.358]                     invokeRestart <- base::invokeRestart
[09:31:48.358]                     is.null <- base::is.null
[09:31:48.358]                     muffled <- FALSE
[09:31:48.358]                     if (inherits(cond, "message")) {
[09:31:48.358]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:48.358]                       if (muffled) 
[09:31:48.358]                         invokeRestart("muffleMessage")
[09:31:48.358]                     }
[09:31:48.358]                     else if (inherits(cond, "warning")) {
[09:31:48.358]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:48.358]                       if (muffled) 
[09:31:48.358]                         invokeRestart("muffleWarning")
[09:31:48.358]                     }
[09:31:48.358]                     else if (inherits(cond, "condition")) {
[09:31:48.358]                       if (!is.null(pattern)) {
[09:31:48.358]                         computeRestarts <- base::computeRestarts
[09:31:48.358]                         grepl <- base::grepl
[09:31:48.358]                         restarts <- computeRestarts(cond)
[09:31:48.358]                         for (restart in restarts) {
[09:31:48.358]                           name <- restart$name
[09:31:48.358]                           if (is.null(name)) 
[09:31:48.358]                             next
[09:31:48.358]                           if (!grepl(pattern, name)) 
[09:31:48.358]                             next
[09:31:48.358]                           invokeRestart(restart)
[09:31:48.358]                           muffled <- TRUE
[09:31:48.358]                           break
[09:31:48.358]                         }
[09:31:48.358]                       }
[09:31:48.358]                     }
[09:31:48.358]                     invisible(muffled)
[09:31:48.358]                   }
[09:31:48.358]                   muffleCondition(cond)
[09:31:48.358]                 })
[09:31:48.358]             }))
[09:31:48.358]             future::FutureResult(value = ...future.value$value, 
[09:31:48.358]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:48.358]                   ...future.rng), globalenv = if (FALSE) 
[09:31:48.358]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:48.358]                     ...future.globalenv.names))
[09:31:48.358]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:48.358]         }, condition = base::local({
[09:31:48.358]             c <- base::c
[09:31:48.358]             inherits <- base::inherits
[09:31:48.358]             invokeRestart <- base::invokeRestart
[09:31:48.358]             length <- base::length
[09:31:48.358]             list <- base::list
[09:31:48.358]             seq.int <- base::seq.int
[09:31:48.358]             signalCondition <- base::signalCondition
[09:31:48.358]             sys.calls <- base::sys.calls
[09:31:48.358]             `[[` <- base::`[[`
[09:31:48.358]             `+` <- base::`+`
[09:31:48.358]             `<<-` <- base::`<<-`
[09:31:48.358]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:48.358]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:48.358]                   3L)]
[09:31:48.358]             }
[09:31:48.358]             function(cond) {
[09:31:48.358]                 is_error <- inherits(cond, "error")
[09:31:48.358]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:48.358]                   NULL)
[09:31:48.358]                 if (is_error) {
[09:31:48.358]                   sessionInformation <- function() {
[09:31:48.358]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:48.358]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:48.358]                       search = base::search(), system = base::Sys.info())
[09:31:48.358]                   }
[09:31:48.358]                   ...future.conditions[[length(...future.conditions) + 
[09:31:48.358]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:48.358]                     cond$call), session = sessionInformation(), 
[09:31:48.358]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:48.358]                   signalCondition(cond)
[09:31:48.358]                 }
[09:31:48.358]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:48.358]                 "immediateCondition"))) {
[09:31:48.358]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:48.358]                   ...future.conditions[[length(...future.conditions) + 
[09:31:48.358]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:48.358]                   if (TRUE && !signal) {
[09:31:48.358]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:48.358]                     {
[09:31:48.358]                       inherits <- base::inherits
[09:31:48.358]                       invokeRestart <- base::invokeRestart
[09:31:48.358]                       is.null <- base::is.null
[09:31:48.358]                       muffled <- FALSE
[09:31:48.358]                       if (inherits(cond, "message")) {
[09:31:48.358]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:48.358]                         if (muffled) 
[09:31:48.358]                           invokeRestart("muffleMessage")
[09:31:48.358]                       }
[09:31:48.358]                       else if (inherits(cond, "warning")) {
[09:31:48.358]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:48.358]                         if (muffled) 
[09:31:48.358]                           invokeRestart("muffleWarning")
[09:31:48.358]                       }
[09:31:48.358]                       else if (inherits(cond, "condition")) {
[09:31:48.358]                         if (!is.null(pattern)) {
[09:31:48.358]                           computeRestarts <- base::computeRestarts
[09:31:48.358]                           grepl <- base::grepl
[09:31:48.358]                           restarts <- computeRestarts(cond)
[09:31:48.358]                           for (restart in restarts) {
[09:31:48.358]                             name <- restart$name
[09:31:48.358]                             if (is.null(name)) 
[09:31:48.358]                               next
[09:31:48.358]                             if (!grepl(pattern, name)) 
[09:31:48.358]                               next
[09:31:48.358]                             invokeRestart(restart)
[09:31:48.358]                             muffled <- TRUE
[09:31:48.358]                             break
[09:31:48.358]                           }
[09:31:48.358]                         }
[09:31:48.358]                       }
[09:31:48.358]                       invisible(muffled)
[09:31:48.358]                     }
[09:31:48.358]                     muffleCondition(cond, pattern = "^muffle")
[09:31:48.358]                   }
[09:31:48.358]                 }
[09:31:48.358]                 else {
[09:31:48.358]                   if (TRUE) {
[09:31:48.358]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:48.358]                     {
[09:31:48.358]                       inherits <- base::inherits
[09:31:48.358]                       invokeRestart <- base::invokeRestart
[09:31:48.358]                       is.null <- base::is.null
[09:31:48.358]                       muffled <- FALSE
[09:31:48.358]                       if (inherits(cond, "message")) {
[09:31:48.358]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:48.358]                         if (muffled) 
[09:31:48.358]                           invokeRestart("muffleMessage")
[09:31:48.358]                       }
[09:31:48.358]                       else if (inherits(cond, "warning")) {
[09:31:48.358]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:48.358]                         if (muffled) 
[09:31:48.358]                           invokeRestart("muffleWarning")
[09:31:48.358]                       }
[09:31:48.358]                       else if (inherits(cond, "condition")) {
[09:31:48.358]                         if (!is.null(pattern)) {
[09:31:48.358]                           computeRestarts <- base::computeRestarts
[09:31:48.358]                           grepl <- base::grepl
[09:31:48.358]                           restarts <- computeRestarts(cond)
[09:31:48.358]                           for (restart in restarts) {
[09:31:48.358]                             name <- restart$name
[09:31:48.358]                             if (is.null(name)) 
[09:31:48.358]                               next
[09:31:48.358]                             if (!grepl(pattern, name)) 
[09:31:48.358]                               next
[09:31:48.358]                             invokeRestart(restart)
[09:31:48.358]                             muffled <- TRUE
[09:31:48.358]                             break
[09:31:48.358]                           }
[09:31:48.358]                         }
[09:31:48.358]                       }
[09:31:48.358]                       invisible(muffled)
[09:31:48.358]                     }
[09:31:48.358]                     muffleCondition(cond, pattern = "^muffle")
[09:31:48.358]                   }
[09:31:48.358]                 }
[09:31:48.358]             }
[09:31:48.358]         }))
[09:31:48.358]     }, error = function(ex) {
[09:31:48.358]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:48.358]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:48.358]                 ...future.rng), started = ...future.startTime, 
[09:31:48.358]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:48.358]             version = "1.8"), class = "FutureResult")
[09:31:48.358]     }, finally = {
[09:31:48.358]         if (!identical(...future.workdir, getwd())) 
[09:31:48.358]             setwd(...future.workdir)
[09:31:48.358]         {
[09:31:48.358]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:48.358]                 ...future.oldOptions$nwarnings <- NULL
[09:31:48.358]             }
[09:31:48.358]             base::options(...future.oldOptions)
[09:31:48.358]             if (.Platform$OS.type == "windows") {
[09:31:48.358]                 old_names <- names(...future.oldEnvVars)
[09:31:48.358]                 envs <- base::Sys.getenv()
[09:31:48.358]                 names <- names(envs)
[09:31:48.358]                 common <- intersect(names, old_names)
[09:31:48.358]                 added <- setdiff(names, old_names)
[09:31:48.358]                 removed <- setdiff(old_names, names)
[09:31:48.358]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:48.358]                   envs[common]]
[09:31:48.358]                 NAMES <- toupper(changed)
[09:31:48.358]                 args <- list()
[09:31:48.358]                 for (kk in seq_along(NAMES)) {
[09:31:48.358]                   name <- changed[[kk]]
[09:31:48.358]                   NAME <- NAMES[[kk]]
[09:31:48.358]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:48.358]                     next
[09:31:48.358]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:48.358]                 }
[09:31:48.358]                 NAMES <- toupper(added)
[09:31:48.358]                 for (kk in seq_along(NAMES)) {
[09:31:48.358]                   name <- added[[kk]]
[09:31:48.358]                   NAME <- NAMES[[kk]]
[09:31:48.358]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:48.358]                     next
[09:31:48.358]                   args[[name]] <- ""
[09:31:48.358]                 }
[09:31:48.358]                 NAMES <- toupper(removed)
[09:31:48.358]                 for (kk in seq_along(NAMES)) {
[09:31:48.358]                   name <- removed[[kk]]
[09:31:48.358]                   NAME <- NAMES[[kk]]
[09:31:48.358]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:48.358]                     next
[09:31:48.358]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:48.358]                 }
[09:31:48.358]                 if (length(args) > 0) 
[09:31:48.358]                   base::do.call(base::Sys.setenv, args = args)
[09:31:48.358]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:48.358]             }
[09:31:48.358]             else {
[09:31:48.358]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:48.358]             }
[09:31:48.358]             {
[09:31:48.358]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:48.358]                   0L) {
[09:31:48.358]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:48.358]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:48.358]                   base::options(opts)
[09:31:48.358]                 }
[09:31:48.358]                 {
[09:31:48.358]                   {
[09:31:48.358]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:48.358]                     NULL
[09:31:48.358]                   }
[09:31:48.358]                   options(future.plan = NULL)
[09:31:48.358]                   if (is.na(NA_character_)) 
[09:31:48.358]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:48.358]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:48.358]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:48.358]                     .init = FALSE)
[09:31:48.358]                 }
[09:31:48.358]             }
[09:31:48.358]         }
[09:31:48.358]     })
[09:31:48.358]     if (TRUE) {
[09:31:48.358]         base::sink(type = "output", split = FALSE)
[09:31:48.358]         if (TRUE) {
[09:31:48.358]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:48.358]         }
[09:31:48.358]         else {
[09:31:48.358]             ...future.result["stdout"] <- base::list(NULL)
[09:31:48.358]         }
[09:31:48.358]         base::close(...future.stdout)
[09:31:48.358]         ...future.stdout <- NULL
[09:31:48.358]     }
[09:31:48.358]     ...future.result$conditions <- ...future.conditions
[09:31:48.358]     ...future.result$finished <- base::Sys.time()
[09:31:48.358]     ...future.result
[09:31:48.358] }
[09:31:48.408] MultisessionFuture started
[09:31:48.408] result() for ClusterFuture ...
[09:31:48.409] receiveMessageFromWorker() for ClusterFuture ...
[09:31:48.409] - Validating connection of MultisessionFuture
[09:31:48.440] - received message: FutureResult
[09:31:48.440] - Received FutureResult
[09:31:48.440] - Erased future from FutureRegistry
[09:31:48.440] result() for ClusterFuture ...
[09:31:48.440] - result already collected: FutureResult
[09:31:48.440] result() for ClusterFuture ... done
[09:31:48.440] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:48.441] result() for ClusterFuture ... done
[09:31:48.441] result() for ClusterFuture ...
[09:31:48.441] - result already collected: FutureResult
[09:31:48.441] result() for ClusterFuture ... done
[09:31:48.441] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:31:48.441] plan(): nbrOfWorkers() = 2
> f <- future(1L)
[09:31:48.441] getGlobalsAndPackages() ...
[09:31:48.441] Searching for globals...
[09:31:48.442] 
[09:31:48.442] Searching for globals ... DONE
[09:31:48.442] - globals: [0] <none>
[09:31:48.442] getGlobalsAndPackages() ... DONE
[09:31:48.442] run() for ‘Future’ ...
[09:31:48.442] - state: ‘created’
[09:31:48.442] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:48.453] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:48.453] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:48.453]   - Field: ‘node’
[09:31:48.453]   - Field: ‘label’
[09:31:48.453]   - Field: ‘local’
[09:31:48.453]   - Field: ‘owner’
[09:31:48.453]   - Field: ‘envir’
[09:31:48.454]   - Field: ‘workers’
[09:31:48.454]   - Field: ‘packages’
[09:31:48.454]   - Field: ‘gc’
[09:31:48.454]   - Field: ‘conditions’
[09:31:48.454]   - Field: ‘persistent’
[09:31:48.454]   - Field: ‘expr’
[09:31:48.454]   - Field: ‘uuid’
[09:31:48.454]   - Field: ‘seed’
[09:31:48.454]   - Field: ‘version’
[09:31:48.454]   - Field: ‘result’
[09:31:48.454]   - Field: ‘asynchronous’
[09:31:48.454]   - Field: ‘calls’
[09:31:48.455]   - Field: ‘globals’
[09:31:48.455]   - Field: ‘stdout’
[09:31:48.455]   - Field: ‘earlySignal’
[09:31:48.455]   - Field: ‘lazy’
[09:31:48.455]   - Field: ‘state’
[09:31:48.455] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:48.455] - Launch lazy future ...
[09:31:48.455] Packages needed by the future expression (n = 0): <none>
[09:31:48.456] Packages needed by future strategies (n = 0): <none>
[09:31:48.456] {
[09:31:48.456]     {
[09:31:48.456]         {
[09:31:48.456]             ...future.startTime <- base::Sys.time()
[09:31:48.456]             {
[09:31:48.456]                 {
[09:31:48.456]                   {
[09:31:48.456]                     {
[09:31:48.456]                       base::local({
[09:31:48.456]                         has_future <- base::requireNamespace("future", 
[09:31:48.456]                           quietly = TRUE)
[09:31:48.456]                         if (has_future) {
[09:31:48.456]                           ns <- base::getNamespace("future")
[09:31:48.456]                           version <- ns[[".package"]][["version"]]
[09:31:48.456]                           if (is.null(version)) 
[09:31:48.456]                             version <- utils::packageVersion("future")
[09:31:48.456]                         }
[09:31:48.456]                         else {
[09:31:48.456]                           version <- NULL
[09:31:48.456]                         }
[09:31:48.456]                         if (!has_future || version < "1.8.0") {
[09:31:48.456]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:48.456]                             "", base::R.version$version.string), 
[09:31:48.456]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:48.456]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:48.456]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:48.456]                               "release", "version")], collapse = " "), 
[09:31:48.456]                             hostname = base::Sys.info()[["nodename"]])
[09:31:48.456]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:48.456]                             info)
[09:31:48.456]                           info <- base::paste(info, collapse = "; ")
[09:31:48.456]                           if (!has_future) {
[09:31:48.456]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:48.456]                               info)
[09:31:48.456]                           }
[09:31:48.456]                           else {
[09:31:48.456]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:48.456]                               info, version)
[09:31:48.456]                           }
[09:31:48.456]                           base::stop(msg)
[09:31:48.456]                         }
[09:31:48.456]                       })
[09:31:48.456]                     }
[09:31:48.456]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:48.456]                     base::options(mc.cores = 1L)
[09:31:48.456]                   }
[09:31:48.456]                   ...future.strategy.old <- future::plan("list")
[09:31:48.456]                   options(future.plan = NULL)
[09:31:48.456]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:48.456]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:48.456]                 }
[09:31:48.456]                 ...future.workdir <- getwd()
[09:31:48.456]             }
[09:31:48.456]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:48.456]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:48.456]         }
[09:31:48.456]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:48.456]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:48.456]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:48.456]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:48.456]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:48.456]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:48.456]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:48.456]             base::names(...future.oldOptions))
[09:31:48.456]     }
[09:31:48.456]     if (FALSE) {
[09:31:48.456]     }
[09:31:48.456]     else {
[09:31:48.456]         if (TRUE) {
[09:31:48.456]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:48.456]                 open = "w")
[09:31:48.456]         }
[09:31:48.456]         else {
[09:31:48.456]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:48.456]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:48.456]         }
[09:31:48.456]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:48.456]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:48.456]             base::sink(type = "output", split = FALSE)
[09:31:48.456]             base::close(...future.stdout)
[09:31:48.456]         }, add = TRUE)
[09:31:48.456]     }
[09:31:48.456]     ...future.frame <- base::sys.nframe()
[09:31:48.456]     ...future.conditions <- base::list()
[09:31:48.456]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:48.456]     if (FALSE) {
[09:31:48.456]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:48.456]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:48.456]     }
[09:31:48.456]     ...future.result <- base::tryCatch({
[09:31:48.456]         base::withCallingHandlers({
[09:31:48.456]             ...future.value <- base::withVisible(base::local({
[09:31:48.456]                 ...future.makeSendCondition <- base::local({
[09:31:48.456]                   sendCondition <- NULL
[09:31:48.456]                   function(frame = 1L) {
[09:31:48.456]                     if (is.function(sendCondition)) 
[09:31:48.456]                       return(sendCondition)
[09:31:48.456]                     ns <- getNamespace("parallel")
[09:31:48.456]                     if (exists("sendData", mode = "function", 
[09:31:48.456]                       envir = ns)) {
[09:31:48.456]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:48.456]                         envir = ns)
[09:31:48.456]                       envir <- sys.frame(frame)
[09:31:48.456]                       master <- NULL
[09:31:48.456]                       while (!identical(envir, .GlobalEnv) && 
[09:31:48.456]                         !identical(envir, emptyenv())) {
[09:31:48.456]                         if (exists("master", mode = "list", envir = envir, 
[09:31:48.456]                           inherits = FALSE)) {
[09:31:48.456]                           master <- get("master", mode = "list", 
[09:31:48.456]                             envir = envir, inherits = FALSE)
[09:31:48.456]                           if (inherits(master, c("SOCKnode", 
[09:31:48.456]                             "SOCK0node"))) {
[09:31:48.456]                             sendCondition <<- function(cond) {
[09:31:48.456]                               data <- list(type = "VALUE", value = cond, 
[09:31:48.456]                                 success = TRUE)
[09:31:48.456]                               parallel_sendData(master, data)
[09:31:48.456]                             }
[09:31:48.456]                             return(sendCondition)
[09:31:48.456]                           }
[09:31:48.456]                         }
[09:31:48.456]                         frame <- frame + 1L
[09:31:48.456]                         envir <- sys.frame(frame)
[09:31:48.456]                       }
[09:31:48.456]                     }
[09:31:48.456]                     sendCondition <<- function(cond) NULL
[09:31:48.456]                   }
[09:31:48.456]                 })
[09:31:48.456]                 withCallingHandlers({
[09:31:48.456]                   1L
[09:31:48.456]                 }, immediateCondition = function(cond) {
[09:31:48.456]                   sendCondition <- ...future.makeSendCondition()
[09:31:48.456]                   sendCondition(cond)
[09:31:48.456]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:48.456]                   {
[09:31:48.456]                     inherits <- base::inherits
[09:31:48.456]                     invokeRestart <- base::invokeRestart
[09:31:48.456]                     is.null <- base::is.null
[09:31:48.456]                     muffled <- FALSE
[09:31:48.456]                     if (inherits(cond, "message")) {
[09:31:48.456]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:48.456]                       if (muffled) 
[09:31:48.456]                         invokeRestart("muffleMessage")
[09:31:48.456]                     }
[09:31:48.456]                     else if (inherits(cond, "warning")) {
[09:31:48.456]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:48.456]                       if (muffled) 
[09:31:48.456]                         invokeRestart("muffleWarning")
[09:31:48.456]                     }
[09:31:48.456]                     else if (inherits(cond, "condition")) {
[09:31:48.456]                       if (!is.null(pattern)) {
[09:31:48.456]                         computeRestarts <- base::computeRestarts
[09:31:48.456]                         grepl <- base::grepl
[09:31:48.456]                         restarts <- computeRestarts(cond)
[09:31:48.456]                         for (restart in restarts) {
[09:31:48.456]                           name <- restart$name
[09:31:48.456]                           if (is.null(name)) 
[09:31:48.456]                             next
[09:31:48.456]                           if (!grepl(pattern, name)) 
[09:31:48.456]                             next
[09:31:48.456]                           invokeRestart(restart)
[09:31:48.456]                           muffled <- TRUE
[09:31:48.456]                           break
[09:31:48.456]                         }
[09:31:48.456]                       }
[09:31:48.456]                     }
[09:31:48.456]                     invisible(muffled)
[09:31:48.456]                   }
[09:31:48.456]                   muffleCondition(cond)
[09:31:48.456]                 })
[09:31:48.456]             }))
[09:31:48.456]             future::FutureResult(value = ...future.value$value, 
[09:31:48.456]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:48.456]                   ...future.rng), globalenv = if (FALSE) 
[09:31:48.456]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:48.456]                     ...future.globalenv.names))
[09:31:48.456]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:48.456]         }, condition = base::local({
[09:31:48.456]             c <- base::c
[09:31:48.456]             inherits <- base::inherits
[09:31:48.456]             invokeRestart <- base::invokeRestart
[09:31:48.456]             length <- base::length
[09:31:48.456]             list <- base::list
[09:31:48.456]             seq.int <- base::seq.int
[09:31:48.456]             signalCondition <- base::signalCondition
[09:31:48.456]             sys.calls <- base::sys.calls
[09:31:48.456]             `[[` <- base::`[[`
[09:31:48.456]             `+` <- base::`+`
[09:31:48.456]             `<<-` <- base::`<<-`
[09:31:48.456]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:48.456]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:48.456]                   3L)]
[09:31:48.456]             }
[09:31:48.456]             function(cond) {
[09:31:48.456]                 is_error <- inherits(cond, "error")
[09:31:48.456]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:48.456]                   NULL)
[09:31:48.456]                 if (is_error) {
[09:31:48.456]                   sessionInformation <- function() {
[09:31:48.456]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:48.456]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:48.456]                       search = base::search(), system = base::Sys.info())
[09:31:48.456]                   }
[09:31:48.456]                   ...future.conditions[[length(...future.conditions) + 
[09:31:48.456]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:48.456]                     cond$call), session = sessionInformation(), 
[09:31:48.456]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:48.456]                   signalCondition(cond)
[09:31:48.456]                 }
[09:31:48.456]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:48.456]                 "immediateCondition"))) {
[09:31:48.456]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:48.456]                   ...future.conditions[[length(...future.conditions) + 
[09:31:48.456]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:48.456]                   if (TRUE && !signal) {
[09:31:48.456]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:48.456]                     {
[09:31:48.456]                       inherits <- base::inherits
[09:31:48.456]                       invokeRestart <- base::invokeRestart
[09:31:48.456]                       is.null <- base::is.null
[09:31:48.456]                       muffled <- FALSE
[09:31:48.456]                       if (inherits(cond, "message")) {
[09:31:48.456]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:48.456]                         if (muffled) 
[09:31:48.456]                           invokeRestart("muffleMessage")
[09:31:48.456]                       }
[09:31:48.456]                       else if (inherits(cond, "warning")) {
[09:31:48.456]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:48.456]                         if (muffled) 
[09:31:48.456]                           invokeRestart("muffleWarning")
[09:31:48.456]                       }
[09:31:48.456]                       else if (inherits(cond, "condition")) {
[09:31:48.456]                         if (!is.null(pattern)) {
[09:31:48.456]                           computeRestarts <- base::computeRestarts
[09:31:48.456]                           grepl <- base::grepl
[09:31:48.456]                           restarts <- computeRestarts(cond)
[09:31:48.456]                           for (restart in restarts) {
[09:31:48.456]                             name <- restart$name
[09:31:48.456]                             if (is.null(name)) 
[09:31:48.456]                               next
[09:31:48.456]                             if (!grepl(pattern, name)) 
[09:31:48.456]                               next
[09:31:48.456]                             invokeRestart(restart)
[09:31:48.456]                             muffled <- TRUE
[09:31:48.456]                             break
[09:31:48.456]                           }
[09:31:48.456]                         }
[09:31:48.456]                       }
[09:31:48.456]                       invisible(muffled)
[09:31:48.456]                     }
[09:31:48.456]                     muffleCondition(cond, pattern = "^muffle")
[09:31:48.456]                   }
[09:31:48.456]                 }
[09:31:48.456]                 else {
[09:31:48.456]                   if (TRUE) {
[09:31:48.456]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:48.456]                     {
[09:31:48.456]                       inherits <- base::inherits
[09:31:48.456]                       invokeRestart <- base::invokeRestart
[09:31:48.456]                       is.null <- base::is.null
[09:31:48.456]                       muffled <- FALSE
[09:31:48.456]                       if (inherits(cond, "message")) {
[09:31:48.456]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:48.456]                         if (muffled) 
[09:31:48.456]                           invokeRestart("muffleMessage")
[09:31:48.456]                       }
[09:31:48.456]                       else if (inherits(cond, "warning")) {
[09:31:48.456]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:48.456]                         if (muffled) 
[09:31:48.456]                           invokeRestart("muffleWarning")
[09:31:48.456]                       }
[09:31:48.456]                       else if (inherits(cond, "condition")) {
[09:31:48.456]                         if (!is.null(pattern)) {
[09:31:48.456]                           computeRestarts <- base::computeRestarts
[09:31:48.456]                           grepl <- base::grepl
[09:31:48.456]                           restarts <- computeRestarts(cond)
[09:31:48.456]                           for (restart in restarts) {
[09:31:48.456]                             name <- restart$name
[09:31:48.456]                             if (is.null(name)) 
[09:31:48.456]                               next
[09:31:48.456]                             if (!grepl(pattern, name)) 
[09:31:48.456]                               next
[09:31:48.456]                             invokeRestart(restart)
[09:31:48.456]                             muffled <- TRUE
[09:31:48.456]                             break
[09:31:48.456]                           }
[09:31:48.456]                         }
[09:31:48.456]                       }
[09:31:48.456]                       invisible(muffled)
[09:31:48.456]                     }
[09:31:48.456]                     muffleCondition(cond, pattern = "^muffle")
[09:31:48.456]                   }
[09:31:48.456]                 }
[09:31:48.456]             }
[09:31:48.456]         }))
[09:31:48.456]     }, error = function(ex) {
[09:31:48.456]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:48.456]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:48.456]                 ...future.rng), started = ...future.startTime, 
[09:31:48.456]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:48.456]             version = "1.8"), class = "FutureResult")
[09:31:48.456]     }, finally = {
[09:31:48.456]         if (!identical(...future.workdir, getwd())) 
[09:31:48.456]             setwd(...future.workdir)
[09:31:48.456]         {
[09:31:48.456]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:48.456]                 ...future.oldOptions$nwarnings <- NULL
[09:31:48.456]             }
[09:31:48.456]             base::options(...future.oldOptions)
[09:31:48.456]             if (.Platform$OS.type == "windows") {
[09:31:48.456]                 old_names <- names(...future.oldEnvVars)
[09:31:48.456]                 envs <- base::Sys.getenv()
[09:31:48.456]                 names <- names(envs)
[09:31:48.456]                 common <- intersect(names, old_names)
[09:31:48.456]                 added <- setdiff(names, old_names)
[09:31:48.456]                 removed <- setdiff(old_names, names)
[09:31:48.456]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:48.456]                   envs[common]]
[09:31:48.456]                 NAMES <- toupper(changed)
[09:31:48.456]                 args <- list()
[09:31:48.456]                 for (kk in seq_along(NAMES)) {
[09:31:48.456]                   name <- changed[[kk]]
[09:31:48.456]                   NAME <- NAMES[[kk]]
[09:31:48.456]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:48.456]                     next
[09:31:48.456]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:48.456]                 }
[09:31:48.456]                 NAMES <- toupper(added)
[09:31:48.456]                 for (kk in seq_along(NAMES)) {
[09:31:48.456]                   name <- added[[kk]]
[09:31:48.456]                   NAME <- NAMES[[kk]]
[09:31:48.456]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:48.456]                     next
[09:31:48.456]                   args[[name]] <- ""
[09:31:48.456]                 }
[09:31:48.456]                 NAMES <- toupper(removed)
[09:31:48.456]                 for (kk in seq_along(NAMES)) {
[09:31:48.456]                   name <- removed[[kk]]
[09:31:48.456]                   NAME <- NAMES[[kk]]
[09:31:48.456]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:48.456]                     next
[09:31:48.456]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:48.456]                 }
[09:31:48.456]                 if (length(args) > 0) 
[09:31:48.456]                   base::do.call(base::Sys.setenv, args = args)
[09:31:48.456]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:48.456]             }
[09:31:48.456]             else {
[09:31:48.456]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:48.456]             }
[09:31:48.456]             {
[09:31:48.456]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:48.456]                   0L) {
[09:31:48.456]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:48.456]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:48.456]                   base::options(opts)
[09:31:48.456]                 }
[09:31:48.456]                 {
[09:31:48.456]                   {
[09:31:48.456]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:48.456]                     NULL
[09:31:48.456]                   }
[09:31:48.456]                   options(future.plan = NULL)
[09:31:48.456]                   if (is.na(NA_character_)) 
[09:31:48.456]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:48.456]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:48.456]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:48.456]                     .init = FALSE)
[09:31:48.456]                 }
[09:31:48.456]             }
[09:31:48.456]         }
[09:31:48.456]     })
[09:31:48.456]     if (TRUE) {
[09:31:48.456]         base::sink(type = "output", split = FALSE)
[09:31:48.456]         if (TRUE) {
[09:31:48.456]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:48.456]         }
[09:31:48.456]         else {
[09:31:48.456]             ...future.result["stdout"] <- base::list(NULL)
[09:31:48.456]         }
[09:31:48.456]         base::close(...future.stdout)
[09:31:48.456]         ...future.stdout <- NULL
[09:31:48.456]     }
[09:31:48.456]     ...future.result$conditions <- ...future.conditions
[09:31:48.456]     ...future.result$finished <- base::Sys.time()
[09:31:48.456]     ...future.result
[09:31:48.456] }
[09:31:48.459] MultisessionFuture started
[09:31:48.459] - Launch lazy future ... done
[09:31:48.459] run() for ‘MultisessionFuture’ ... done
> cl <- ClusterRegistry("get")
> stopifnot(inherits(cl, "cluster"), length(cl) >= 1L)
> 
> plan(sequential)
[09:31:48.459] plan(): Setting new future strategy stack:
[09:31:48.459] List of future strategies:
[09:31:48.459] 1. sequential:
[09:31:48.459]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:48.459]    - tweaked: FALSE
[09:31:48.459]    - call: plan(sequential)
[09:31:48.460] plan(): nbrOfWorkers() = 1
> cl <- ClusterRegistry("get")
> stopifnot(is.null(cl), length(cl) == 0L)
>   
> message("*** multisession(...) - stopping with plan() change ... DONE")
*** multisession(...) - stopping with plan() change ... DONE
> 
> message("*** multisession() ... DONE")
*** multisession() ... DONE
> 
> source("incl/end.R")
[09:31:48.461] plan(): Setting new future strategy stack:
[09:31:48.461] List of future strategies:
[09:31:48.461] 1. FutureStrategy:
[09:31:48.461]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:48.461]    - tweaked: FALSE
[09:31:48.461]    - call: future::plan(oplan)
[09:31:48.462] plan(): nbrOfWorkers() = 1
> 
