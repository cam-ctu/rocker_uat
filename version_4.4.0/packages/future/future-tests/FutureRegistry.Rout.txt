
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:39:32.883] plan(): Setting new future strategy stack:
[17:39:32.883] List of future strategies:
[17:39:32.883] 1. sequential:
[17:39:32.883]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:32.883]    - tweaked: FALSE
[17:39:32.883]    - call: future::plan("sequential")
[17:39:32.894] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-fe9766ff-07b2-9885-32f3-30f78f125d8c', 'list') ...
list()
*** FutureRegistry('multicore-fe9766ff-07b2-9885-32f3-30f78f125d8c', 'add') ...
[17:39:32.931] getGlobalsAndPackages() ...
[17:39:32.931] Searching for globals...
[17:39:32.936] - globals found: [1] ‘{’
[17:39:32.936] Searching for globals ... DONE
[17:39:32.936] Resolving globals: FALSE
[17:39:32.936] 
[17:39:32.937] 
[17:39:32.937] getGlobalsAndPackages() ... DONE
[17:39:32.937] run() for ‘Future’ ...
[17:39:32.937] - state: ‘created’
[17:39:32.938] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:32.938] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:32.938] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:32.938]   - Field: ‘label’
[17:39:32.938]   - Field: ‘local’
[17:39:32.938]   - Field: ‘owner’
[17:39:32.938]   - Field: ‘envir’
[17:39:32.939]   - Field: ‘packages’
[17:39:32.939]   - Field: ‘gc’
[17:39:32.939]   - Field: ‘conditions’
[17:39:32.939]   - Field: ‘expr’
[17:39:32.939]   - Field: ‘uuid’
[17:39:32.939]   - Field: ‘seed’
[17:39:32.939]   - Field: ‘version’
[17:39:32.939]   - Field: ‘result’
[17:39:32.939]   - Field: ‘asynchronous’
[17:39:32.939]   - Field: ‘calls’
[17:39:32.939]   - Field: ‘globals’
[17:39:32.939]   - Field: ‘stdout’
[17:39:32.940]   - Field: ‘earlySignal’
[17:39:32.940]   - Field: ‘lazy’
[17:39:32.940]   - Field: ‘state’
[17:39:32.940] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:32.940] - Launch lazy future ...
[17:39:32.941] Packages needed by the future expression (n = 0): <none>
[17:39:32.941] Packages needed by future strategies (n = 0): <none>
[17:39:32.942] {
[17:39:32.942]     {
[17:39:32.942]         {
[17:39:32.942]             ...future.startTime <- base::Sys.time()
[17:39:32.942]             {
[17:39:32.942]                 {
[17:39:32.942]                   {
[17:39:32.942]                     base::local({
[17:39:32.942]                       has_future <- base::requireNamespace("future", 
[17:39:32.942]                         quietly = TRUE)
[17:39:32.942]                       if (has_future) {
[17:39:32.942]                         ns <- base::getNamespace("future")
[17:39:32.942]                         version <- ns[[".package"]][["version"]]
[17:39:32.942]                         if (is.null(version)) 
[17:39:32.942]                           version <- utils::packageVersion("future")
[17:39:32.942]                       }
[17:39:32.942]                       else {
[17:39:32.942]                         version <- NULL
[17:39:32.942]                       }
[17:39:32.942]                       if (!has_future || version < "1.8.0") {
[17:39:32.942]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:32.942]                           "", base::R.version$version.string), 
[17:39:32.942]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:32.942]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:32.942]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:32.942]                             "release", "version")], collapse = " "), 
[17:39:32.942]                           hostname = base::Sys.info()[["nodename"]])
[17:39:32.942]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:32.942]                           info)
[17:39:32.942]                         info <- base::paste(info, collapse = "; ")
[17:39:32.942]                         if (!has_future) {
[17:39:32.942]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:32.942]                             info)
[17:39:32.942]                         }
[17:39:32.942]                         else {
[17:39:32.942]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:32.942]                             info, version)
[17:39:32.942]                         }
[17:39:32.942]                         base::stop(msg)
[17:39:32.942]                       }
[17:39:32.942]                     })
[17:39:32.942]                   }
[17:39:32.942]                   ...future.strategy.old <- future::plan("list")
[17:39:32.942]                   options(future.plan = NULL)
[17:39:32.942]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:32.942]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:32.942]                 }
[17:39:32.942]                 ...future.workdir <- getwd()
[17:39:32.942]             }
[17:39:32.942]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:32.942]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:32.942]         }
[17:39:32.942]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:32.942]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:32.942]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:32.942]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:32.942]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:32.942]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:32.942]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:32.942]             base::names(...future.oldOptions))
[17:39:32.942]     }
[17:39:32.942]     if (FALSE) {
[17:39:32.942]     }
[17:39:32.942]     else {
[17:39:32.942]         if (TRUE) {
[17:39:32.942]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:32.942]                 open = "w")
[17:39:32.942]         }
[17:39:32.942]         else {
[17:39:32.942]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:32.942]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:32.942]         }
[17:39:32.942]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:32.942]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:32.942]             base::sink(type = "output", split = FALSE)
[17:39:32.942]             base::close(...future.stdout)
[17:39:32.942]         }, add = TRUE)
[17:39:32.942]     }
[17:39:32.942]     ...future.frame <- base::sys.nframe()
[17:39:32.942]     ...future.conditions <- base::list()
[17:39:32.942]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:32.942]     if (FALSE) {
[17:39:32.942]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:32.942]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:32.942]     }
[17:39:32.942]     ...future.result <- base::tryCatch({
[17:39:32.942]         base::withCallingHandlers({
[17:39:32.942]             ...future.value <- base::withVisible(base::local({
[17:39:32.942]                 1
[17:39:32.942]             }))
[17:39:32.942]             future::FutureResult(value = ...future.value$value, 
[17:39:32.942]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:32.942]                   ...future.rng), globalenv = if (FALSE) 
[17:39:32.942]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:32.942]                     ...future.globalenv.names))
[17:39:32.942]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:32.942]         }, condition = base::local({
[17:39:32.942]             c <- base::c
[17:39:32.942]             inherits <- base::inherits
[17:39:32.942]             invokeRestart <- base::invokeRestart
[17:39:32.942]             length <- base::length
[17:39:32.942]             list <- base::list
[17:39:32.942]             seq.int <- base::seq.int
[17:39:32.942]             signalCondition <- base::signalCondition
[17:39:32.942]             sys.calls <- base::sys.calls
[17:39:32.942]             `[[` <- base::`[[`
[17:39:32.942]             `+` <- base::`+`
[17:39:32.942]             `<<-` <- base::`<<-`
[17:39:32.942]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:32.942]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:32.942]                   3L)]
[17:39:32.942]             }
[17:39:32.942]             function(cond) {
[17:39:32.942]                 is_error <- inherits(cond, "error")
[17:39:32.942]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:32.942]                   NULL)
[17:39:32.942]                 if (is_error) {
[17:39:32.942]                   sessionInformation <- function() {
[17:39:32.942]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:32.942]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:32.942]                       search = base::search(), system = base::Sys.info())
[17:39:32.942]                   }
[17:39:32.942]                   ...future.conditions[[length(...future.conditions) + 
[17:39:32.942]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:32.942]                     cond$call), session = sessionInformation(), 
[17:39:32.942]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:32.942]                   signalCondition(cond)
[17:39:32.942]                 }
[17:39:32.942]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:32.942]                 "immediateCondition"))) {
[17:39:32.942]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:32.942]                   ...future.conditions[[length(...future.conditions) + 
[17:39:32.942]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:32.942]                   if (TRUE && !signal) {
[17:39:32.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:32.942]                     {
[17:39:32.942]                       inherits <- base::inherits
[17:39:32.942]                       invokeRestart <- base::invokeRestart
[17:39:32.942]                       is.null <- base::is.null
[17:39:32.942]                       muffled <- FALSE
[17:39:32.942]                       if (inherits(cond, "message")) {
[17:39:32.942]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:32.942]                         if (muffled) 
[17:39:32.942]                           invokeRestart("muffleMessage")
[17:39:32.942]                       }
[17:39:32.942]                       else if (inherits(cond, "warning")) {
[17:39:32.942]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:32.942]                         if (muffled) 
[17:39:32.942]                           invokeRestart("muffleWarning")
[17:39:32.942]                       }
[17:39:32.942]                       else if (inherits(cond, "condition")) {
[17:39:32.942]                         if (!is.null(pattern)) {
[17:39:32.942]                           computeRestarts <- base::computeRestarts
[17:39:32.942]                           grepl <- base::grepl
[17:39:32.942]                           restarts <- computeRestarts(cond)
[17:39:32.942]                           for (restart in restarts) {
[17:39:32.942]                             name <- restart$name
[17:39:32.942]                             if (is.null(name)) 
[17:39:32.942]                               next
[17:39:32.942]                             if (!grepl(pattern, name)) 
[17:39:32.942]                               next
[17:39:32.942]                             invokeRestart(restart)
[17:39:32.942]                             muffled <- TRUE
[17:39:32.942]                             break
[17:39:32.942]                           }
[17:39:32.942]                         }
[17:39:32.942]                       }
[17:39:32.942]                       invisible(muffled)
[17:39:32.942]                     }
[17:39:32.942]                     muffleCondition(cond, pattern = "^muffle")
[17:39:32.942]                   }
[17:39:32.942]                 }
[17:39:32.942]                 else {
[17:39:32.942]                   if (TRUE) {
[17:39:32.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:32.942]                     {
[17:39:32.942]                       inherits <- base::inherits
[17:39:32.942]                       invokeRestart <- base::invokeRestart
[17:39:32.942]                       is.null <- base::is.null
[17:39:32.942]                       muffled <- FALSE
[17:39:32.942]                       if (inherits(cond, "message")) {
[17:39:32.942]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:32.942]                         if (muffled) 
[17:39:32.942]                           invokeRestart("muffleMessage")
[17:39:32.942]                       }
[17:39:32.942]                       else if (inherits(cond, "warning")) {
[17:39:32.942]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:32.942]                         if (muffled) 
[17:39:32.942]                           invokeRestart("muffleWarning")
[17:39:32.942]                       }
[17:39:32.942]                       else if (inherits(cond, "condition")) {
[17:39:32.942]                         if (!is.null(pattern)) {
[17:39:32.942]                           computeRestarts <- base::computeRestarts
[17:39:32.942]                           grepl <- base::grepl
[17:39:32.942]                           restarts <- computeRestarts(cond)
[17:39:32.942]                           for (restart in restarts) {
[17:39:32.942]                             name <- restart$name
[17:39:32.942]                             if (is.null(name)) 
[17:39:32.942]                               next
[17:39:32.942]                             if (!grepl(pattern, name)) 
[17:39:32.942]                               next
[17:39:32.942]                             invokeRestart(restart)
[17:39:32.942]                             muffled <- TRUE
[17:39:32.942]                             break
[17:39:32.942]                           }
[17:39:32.942]                         }
[17:39:32.942]                       }
[17:39:32.942]                       invisible(muffled)
[17:39:32.942]                     }
[17:39:32.942]                     muffleCondition(cond, pattern = "^muffle")
[17:39:32.942]                   }
[17:39:32.942]                 }
[17:39:32.942]             }
[17:39:32.942]         }))
[17:39:32.942]     }, error = function(ex) {
[17:39:32.942]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:32.942]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:32.942]                 ...future.rng), started = ...future.startTime, 
[17:39:32.942]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:32.942]             version = "1.8"), class = "FutureResult")
[17:39:32.942]     }, finally = {
[17:39:32.942]         if (!identical(...future.workdir, getwd())) 
[17:39:32.942]             setwd(...future.workdir)
[17:39:32.942]         {
[17:39:32.942]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:32.942]                 ...future.oldOptions$nwarnings <- NULL
[17:39:32.942]             }
[17:39:32.942]             base::options(...future.oldOptions)
[17:39:32.942]             if (.Platform$OS.type == "windows") {
[17:39:32.942]                 old_names <- names(...future.oldEnvVars)
[17:39:32.942]                 envs <- base::Sys.getenv()
[17:39:32.942]                 names <- names(envs)
[17:39:32.942]                 common <- intersect(names, old_names)
[17:39:32.942]                 added <- setdiff(names, old_names)
[17:39:32.942]                 removed <- setdiff(old_names, names)
[17:39:32.942]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:32.942]                   envs[common]]
[17:39:32.942]                 NAMES <- toupper(changed)
[17:39:32.942]                 args <- list()
[17:39:32.942]                 for (kk in seq_along(NAMES)) {
[17:39:32.942]                   name <- changed[[kk]]
[17:39:32.942]                   NAME <- NAMES[[kk]]
[17:39:32.942]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.942]                     next
[17:39:32.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:32.942]                 }
[17:39:32.942]                 NAMES <- toupper(added)
[17:39:32.942]                 for (kk in seq_along(NAMES)) {
[17:39:32.942]                   name <- added[[kk]]
[17:39:32.942]                   NAME <- NAMES[[kk]]
[17:39:32.942]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.942]                     next
[17:39:32.942]                   args[[name]] <- ""
[17:39:32.942]                 }
[17:39:32.942]                 NAMES <- toupper(removed)
[17:39:32.942]                 for (kk in seq_along(NAMES)) {
[17:39:32.942]                   name <- removed[[kk]]
[17:39:32.942]                   NAME <- NAMES[[kk]]
[17:39:32.942]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.942]                     next
[17:39:32.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:32.942]                 }
[17:39:32.942]                 if (length(args) > 0) 
[17:39:32.942]                   base::do.call(base::Sys.setenv, args = args)
[17:39:32.942]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:32.942]             }
[17:39:32.942]             else {
[17:39:32.942]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:32.942]             }
[17:39:32.942]             {
[17:39:32.942]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:32.942]                   0L) {
[17:39:32.942]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:32.942]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:32.942]                   base::options(opts)
[17:39:32.942]                 }
[17:39:32.942]                 {
[17:39:32.942]                   {
[17:39:32.942]                     NULL
[17:39:32.942]                     RNGkind("Mersenne-Twister")
[17:39:32.942]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:32.942]                       inherits = FALSE)
[17:39:32.942]                   }
[17:39:32.942]                   options(future.plan = NULL)
[17:39:32.942]                   if (is.na(NA_character_)) 
[17:39:32.942]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:32.942]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:32.942]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:32.942]                     .init = FALSE)
[17:39:32.942]                 }
[17:39:32.942]             }
[17:39:32.942]         }
[17:39:32.942]     })
[17:39:32.942]     if (TRUE) {
[17:39:32.942]         base::sink(type = "output", split = FALSE)
[17:39:32.942]         if (TRUE) {
[17:39:32.942]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:32.942]         }
[17:39:32.942]         else {
[17:39:32.942]             ...future.result["stdout"] <- base::list(NULL)
[17:39:32.942]         }
[17:39:32.942]         base::close(...future.stdout)
[17:39:32.942]         ...future.stdout <- NULL
[17:39:32.942]     }
[17:39:32.942]     ...future.result$conditions <- ...future.conditions
[17:39:32.942]     ...future.result$finished <- base::Sys.time()
[17:39:32.942]     ...future.result
[17:39:32.942] }
[17:39:32.943] plan(): Setting new future strategy stack:
[17:39:32.943] List of future strategies:
[17:39:32.943] 1. sequential:
[17:39:32.943]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:32.943]    - tweaked: FALSE
[17:39:32.943]    - call: NULL
[17:39:32.944] plan(): nbrOfWorkers() = 1
[17:39:32.945] plan(): Setting new future strategy stack:
[17:39:32.945] List of future strategies:
[17:39:32.945] 1. sequential:
[17:39:32.945]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:32.945]    - tweaked: FALSE
[17:39:32.945]    - call: future::plan("sequential")
[17:39:32.946] plan(): nbrOfWorkers() = 1
[17:39:32.946] SequentialFuture started (and completed)
[17:39:32.946] - Launch lazy future ... done
[17:39:32.946] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: fe9766ff-07b2-9885-32f3-30f78f125d8c
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-fe9766ff-07b2-9885-32f3-30f78f125d8c', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: fe9766ff-07b2-9885-32f3-30f78f125d8c
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-fe9766ff-07b2-9885-32f3-30f78f125d8c', 'remove') ...
*** FutureRegistry('multicore-fe9766ff-07b2-9885-32f3-30f78f125d8c', 'list') ...
list()
*** FutureRegistry('multicore-fe9766ff-07b2-9885-32f3-30f78f125d8c', 'add') ...
[17:39:32.950] getGlobalsAndPackages() ...
[17:39:32.950] Searching for globals...
[17:39:32.951] - globals found: [1] ‘{’
[17:39:32.951] Searching for globals ... DONE
[17:39:32.951] Resolving globals: FALSE
[17:39:32.951] 
[17:39:32.951] 
[17:39:32.951] getGlobalsAndPackages() ... DONE
[17:39:32.952] run() for ‘Future’ ...
[17:39:32.952] - state: ‘created’
[17:39:32.952] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:32.952] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:32.952] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:32.952]   - Field: ‘label’
[17:39:32.952]   - Field: ‘local’
[17:39:32.953]   - Field: ‘owner’
[17:39:32.953]   - Field: ‘envir’
[17:39:32.953]   - Field: ‘packages’
[17:39:32.953]   - Field: ‘gc’
[17:39:32.953]   - Field: ‘conditions’
[17:39:32.953]   - Field: ‘expr’
[17:39:32.953]   - Field: ‘uuid’
[17:39:32.953]   - Field: ‘seed’
[17:39:32.953]   - Field: ‘version’
[17:39:32.953]   - Field: ‘result’
[17:39:32.953]   - Field: ‘asynchronous’
[17:39:32.953]   - Field: ‘calls’
[17:39:32.954]   - Field: ‘globals’
[17:39:32.954]   - Field: ‘stdout’
[17:39:32.954]   - Field: ‘earlySignal’
[17:39:32.954]   - Field: ‘lazy’
[17:39:32.954]   - Field: ‘state’
[17:39:32.954] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:32.954] - Launch lazy future ...
[17:39:32.954] Packages needed by the future expression (n = 0): <none>
[17:39:32.954] Packages needed by future strategies (n = 0): <none>
[17:39:32.955] {
[17:39:32.955]     {
[17:39:32.955]         {
[17:39:32.955]             ...future.startTime <- base::Sys.time()
[17:39:32.955]             {
[17:39:32.955]                 {
[17:39:32.955]                   {
[17:39:32.955]                     base::local({
[17:39:32.955]                       has_future <- base::requireNamespace("future", 
[17:39:32.955]                         quietly = TRUE)
[17:39:32.955]                       if (has_future) {
[17:39:32.955]                         ns <- base::getNamespace("future")
[17:39:32.955]                         version <- ns[[".package"]][["version"]]
[17:39:32.955]                         if (is.null(version)) 
[17:39:32.955]                           version <- utils::packageVersion("future")
[17:39:32.955]                       }
[17:39:32.955]                       else {
[17:39:32.955]                         version <- NULL
[17:39:32.955]                       }
[17:39:32.955]                       if (!has_future || version < "1.8.0") {
[17:39:32.955]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:32.955]                           "", base::R.version$version.string), 
[17:39:32.955]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:32.955]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:32.955]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:32.955]                             "release", "version")], collapse = " "), 
[17:39:32.955]                           hostname = base::Sys.info()[["nodename"]])
[17:39:32.955]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:32.955]                           info)
[17:39:32.955]                         info <- base::paste(info, collapse = "; ")
[17:39:32.955]                         if (!has_future) {
[17:39:32.955]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:32.955]                             info)
[17:39:32.955]                         }
[17:39:32.955]                         else {
[17:39:32.955]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:32.955]                             info, version)
[17:39:32.955]                         }
[17:39:32.955]                         base::stop(msg)
[17:39:32.955]                       }
[17:39:32.955]                     })
[17:39:32.955]                   }
[17:39:32.955]                   ...future.strategy.old <- future::plan("list")
[17:39:32.955]                   options(future.plan = NULL)
[17:39:32.955]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:32.955]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:32.955]                 }
[17:39:32.955]                 ...future.workdir <- getwd()
[17:39:32.955]             }
[17:39:32.955]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:32.955]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:32.955]         }
[17:39:32.955]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:32.955]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:32.955]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:32.955]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:32.955]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:32.955]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:32.955]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:32.955]             base::names(...future.oldOptions))
[17:39:32.955]     }
[17:39:32.955]     if (FALSE) {
[17:39:32.955]     }
[17:39:32.955]     else {
[17:39:32.955]         if (TRUE) {
[17:39:32.955]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:32.955]                 open = "w")
[17:39:32.955]         }
[17:39:32.955]         else {
[17:39:32.955]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:32.955]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:32.955]         }
[17:39:32.955]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:32.955]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:32.955]             base::sink(type = "output", split = FALSE)
[17:39:32.955]             base::close(...future.stdout)
[17:39:32.955]         }, add = TRUE)
[17:39:32.955]     }
[17:39:32.955]     ...future.frame <- base::sys.nframe()
[17:39:32.955]     ...future.conditions <- base::list()
[17:39:32.955]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:32.955]     if (FALSE) {
[17:39:32.955]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:32.955]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:32.955]     }
[17:39:32.955]     ...future.result <- base::tryCatch({
[17:39:32.955]         base::withCallingHandlers({
[17:39:32.955]             ...future.value <- base::withVisible(base::local({
[17:39:32.955]                 2
[17:39:32.955]             }))
[17:39:32.955]             future::FutureResult(value = ...future.value$value, 
[17:39:32.955]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:32.955]                   ...future.rng), globalenv = if (FALSE) 
[17:39:32.955]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:32.955]                     ...future.globalenv.names))
[17:39:32.955]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:32.955]         }, condition = base::local({
[17:39:32.955]             c <- base::c
[17:39:32.955]             inherits <- base::inherits
[17:39:32.955]             invokeRestart <- base::invokeRestart
[17:39:32.955]             length <- base::length
[17:39:32.955]             list <- base::list
[17:39:32.955]             seq.int <- base::seq.int
[17:39:32.955]             signalCondition <- base::signalCondition
[17:39:32.955]             sys.calls <- base::sys.calls
[17:39:32.955]             `[[` <- base::`[[`
[17:39:32.955]             `+` <- base::`+`
[17:39:32.955]             `<<-` <- base::`<<-`
[17:39:32.955]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:32.955]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:32.955]                   3L)]
[17:39:32.955]             }
[17:39:32.955]             function(cond) {
[17:39:32.955]                 is_error <- inherits(cond, "error")
[17:39:32.955]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:32.955]                   NULL)
[17:39:32.955]                 if (is_error) {
[17:39:32.955]                   sessionInformation <- function() {
[17:39:32.955]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:32.955]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:32.955]                       search = base::search(), system = base::Sys.info())
[17:39:32.955]                   }
[17:39:32.955]                   ...future.conditions[[length(...future.conditions) + 
[17:39:32.955]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:32.955]                     cond$call), session = sessionInformation(), 
[17:39:32.955]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:32.955]                   signalCondition(cond)
[17:39:32.955]                 }
[17:39:32.955]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:32.955]                 "immediateCondition"))) {
[17:39:32.955]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:32.955]                   ...future.conditions[[length(...future.conditions) + 
[17:39:32.955]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:32.955]                   if (TRUE && !signal) {
[17:39:32.955]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:32.955]                     {
[17:39:32.955]                       inherits <- base::inherits
[17:39:32.955]                       invokeRestart <- base::invokeRestart
[17:39:32.955]                       is.null <- base::is.null
[17:39:32.955]                       muffled <- FALSE
[17:39:32.955]                       if (inherits(cond, "message")) {
[17:39:32.955]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:32.955]                         if (muffled) 
[17:39:32.955]                           invokeRestart("muffleMessage")
[17:39:32.955]                       }
[17:39:32.955]                       else if (inherits(cond, "warning")) {
[17:39:32.955]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:32.955]                         if (muffled) 
[17:39:32.955]                           invokeRestart("muffleWarning")
[17:39:32.955]                       }
[17:39:32.955]                       else if (inherits(cond, "condition")) {
[17:39:32.955]                         if (!is.null(pattern)) {
[17:39:32.955]                           computeRestarts <- base::computeRestarts
[17:39:32.955]                           grepl <- base::grepl
[17:39:32.955]                           restarts <- computeRestarts(cond)
[17:39:32.955]                           for (restart in restarts) {
[17:39:32.955]                             name <- restart$name
[17:39:32.955]                             if (is.null(name)) 
[17:39:32.955]                               next
[17:39:32.955]                             if (!grepl(pattern, name)) 
[17:39:32.955]                               next
[17:39:32.955]                             invokeRestart(restart)
[17:39:32.955]                             muffled <- TRUE
[17:39:32.955]                             break
[17:39:32.955]                           }
[17:39:32.955]                         }
[17:39:32.955]                       }
[17:39:32.955]                       invisible(muffled)
[17:39:32.955]                     }
[17:39:32.955]                     muffleCondition(cond, pattern = "^muffle")
[17:39:32.955]                   }
[17:39:32.955]                 }
[17:39:32.955]                 else {
[17:39:32.955]                   if (TRUE) {
[17:39:32.955]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:32.955]                     {
[17:39:32.955]                       inherits <- base::inherits
[17:39:32.955]                       invokeRestart <- base::invokeRestart
[17:39:32.955]                       is.null <- base::is.null
[17:39:32.955]                       muffled <- FALSE
[17:39:32.955]                       if (inherits(cond, "message")) {
[17:39:32.955]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:32.955]                         if (muffled) 
[17:39:32.955]                           invokeRestart("muffleMessage")
[17:39:32.955]                       }
[17:39:32.955]                       else if (inherits(cond, "warning")) {
[17:39:32.955]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:32.955]                         if (muffled) 
[17:39:32.955]                           invokeRestart("muffleWarning")
[17:39:32.955]                       }
[17:39:32.955]                       else if (inherits(cond, "condition")) {
[17:39:32.955]                         if (!is.null(pattern)) {
[17:39:32.955]                           computeRestarts <- base::computeRestarts
[17:39:32.955]                           grepl <- base::grepl
[17:39:32.955]                           restarts <- computeRestarts(cond)
[17:39:32.955]                           for (restart in restarts) {
[17:39:32.955]                             name <- restart$name
[17:39:32.955]                             if (is.null(name)) 
[17:39:32.955]                               next
[17:39:32.955]                             if (!grepl(pattern, name)) 
[17:39:32.955]                               next
[17:39:32.955]                             invokeRestart(restart)
[17:39:32.955]                             muffled <- TRUE
[17:39:32.955]                             break
[17:39:32.955]                           }
[17:39:32.955]                         }
[17:39:32.955]                       }
[17:39:32.955]                       invisible(muffled)
[17:39:32.955]                     }
[17:39:32.955]                     muffleCondition(cond, pattern = "^muffle")
[17:39:32.955]                   }
[17:39:32.955]                 }
[17:39:32.955]             }
[17:39:32.955]         }))
[17:39:32.955]     }, error = function(ex) {
[17:39:32.955]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:32.955]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:32.955]                 ...future.rng), started = ...future.startTime, 
[17:39:32.955]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:32.955]             version = "1.8"), class = "FutureResult")
[17:39:32.955]     }, finally = {
[17:39:32.955]         if (!identical(...future.workdir, getwd())) 
[17:39:32.955]             setwd(...future.workdir)
[17:39:32.955]         {
[17:39:32.955]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:32.955]                 ...future.oldOptions$nwarnings <- NULL
[17:39:32.955]             }
[17:39:32.955]             base::options(...future.oldOptions)
[17:39:32.955]             if (.Platform$OS.type == "windows") {
[17:39:32.955]                 old_names <- names(...future.oldEnvVars)
[17:39:32.955]                 envs <- base::Sys.getenv()
[17:39:32.955]                 names <- names(envs)
[17:39:32.955]                 common <- intersect(names, old_names)
[17:39:32.955]                 added <- setdiff(names, old_names)
[17:39:32.955]                 removed <- setdiff(old_names, names)
[17:39:32.955]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:32.955]                   envs[common]]
[17:39:32.955]                 NAMES <- toupper(changed)
[17:39:32.955]                 args <- list()
[17:39:32.955]                 for (kk in seq_along(NAMES)) {
[17:39:32.955]                   name <- changed[[kk]]
[17:39:32.955]                   NAME <- NAMES[[kk]]
[17:39:32.955]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.955]                     next
[17:39:32.955]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:32.955]                 }
[17:39:32.955]                 NAMES <- toupper(added)
[17:39:32.955]                 for (kk in seq_along(NAMES)) {
[17:39:32.955]                   name <- added[[kk]]
[17:39:32.955]                   NAME <- NAMES[[kk]]
[17:39:32.955]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.955]                     next
[17:39:32.955]                   args[[name]] <- ""
[17:39:32.955]                 }
[17:39:32.955]                 NAMES <- toupper(removed)
[17:39:32.955]                 for (kk in seq_along(NAMES)) {
[17:39:32.955]                   name <- removed[[kk]]
[17:39:32.955]                   NAME <- NAMES[[kk]]
[17:39:32.955]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.955]                     next
[17:39:32.955]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:32.955]                 }
[17:39:32.955]                 if (length(args) > 0) 
[17:39:32.955]                   base::do.call(base::Sys.setenv, args = args)
[17:39:32.955]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:32.955]             }
[17:39:32.955]             else {
[17:39:32.955]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:32.955]             }
[17:39:32.955]             {
[17:39:32.955]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:32.955]                   0L) {
[17:39:32.955]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:32.955]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:32.955]                   base::options(opts)
[17:39:32.955]                 }
[17:39:32.955]                 {
[17:39:32.955]                   {
[17:39:32.955]                     NULL
[17:39:32.955]                     RNGkind("Mersenne-Twister")
[17:39:32.955]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:32.955]                       inherits = FALSE)
[17:39:32.955]                   }
[17:39:32.955]                   options(future.plan = NULL)
[17:39:32.955]                   if (is.na(NA_character_)) 
[17:39:32.955]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:32.955]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:32.955]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:32.955]                     .init = FALSE)
[17:39:32.955]                 }
[17:39:32.955]             }
[17:39:32.955]         }
[17:39:32.955]     })
[17:39:32.955]     if (TRUE) {
[17:39:32.955]         base::sink(type = "output", split = FALSE)
[17:39:32.955]         if (TRUE) {
[17:39:32.955]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:32.955]         }
[17:39:32.955]         else {
[17:39:32.955]             ...future.result["stdout"] <- base::list(NULL)
[17:39:32.955]         }
[17:39:32.955]         base::close(...future.stdout)
[17:39:32.955]         ...future.stdout <- NULL
[17:39:32.955]     }
[17:39:32.955]     ...future.result$conditions <- ...future.conditions
[17:39:32.955]     ...future.result$finished <- base::Sys.time()
[17:39:32.955]     ...future.result
[17:39:32.955] }
[17:39:32.956] plan(): Setting new future strategy stack:
[17:39:32.957] List of future strategies:
[17:39:32.957] 1. sequential:
[17:39:32.957]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:32.957]    - tweaked: FALSE
[17:39:32.957]    - call: NULL
[17:39:32.957] plan(): nbrOfWorkers() = 1
[17:39:32.958] plan(): Setting new future strategy stack:
[17:39:32.958] List of future strategies:
[17:39:32.958] 1. sequential:
[17:39:32.958]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:32.958]    - tweaked: FALSE
[17:39:32.958]    - call: future::plan("sequential")
[17:39:32.958] plan(): nbrOfWorkers() = 1
[17:39:32.958] SequentialFuture started (and completed)
[17:39:32.959] - Launch lazy future ... done
[17:39:32.959] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: fe9766ff-07b2-9885-32f3-30f78f125d8c
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-fe9766ff-07b2-9885-32f3-30f78f125d8c', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: fe9766ff-07b2-9885-32f3-30f78f125d8c
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-fe9766ff-07b2-9885-32f3-30f78f125d8c', 'collect-first') ...
[17:39:32.960] resolved() for ‘SequentialFuture’ ...
[17:39:32.960] - state: ‘finished’
[17:39:32.960] - run: FALSE
[17:39:32.960] - result: ‘FutureResult’
[17:39:32.960] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-fe9766ff-07b2-9885-32f3-30f78f125d8c', 'add') ...
[17:39:32.961] getGlobalsAndPackages() ...
[17:39:32.961] Searching for globals...
[17:39:32.961] - globals found: [1] ‘{’
[17:39:32.961] Searching for globals ... DONE
[17:39:32.962] Resolving globals: FALSE
[17:39:32.962] 
[17:39:32.962] 
[17:39:32.962] getGlobalsAndPackages() ... DONE
[17:39:32.962] run() for ‘Future’ ...
[17:39:32.962] - state: ‘created’
[17:39:32.962] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:32.963] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:32.963] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:32.963]   - Field: ‘label’
[17:39:32.963]   - Field: ‘local’
[17:39:32.963]   - Field: ‘owner’
[17:39:32.963]   - Field: ‘envir’
[17:39:32.963]   - Field: ‘packages’
[17:39:32.963]   - Field: ‘gc’
[17:39:32.963]   - Field: ‘conditions’
[17:39:32.964]   - Field: ‘expr’
[17:39:32.964]   - Field: ‘uuid’
[17:39:32.964]   - Field: ‘seed’
[17:39:32.964]   - Field: ‘version’
[17:39:32.964]   - Field: ‘result’
[17:39:32.964]   - Field: ‘asynchronous’
[17:39:32.964]   - Field: ‘calls’
[17:39:32.964]   - Field: ‘globals’
[17:39:32.964]   - Field: ‘stdout’
[17:39:32.964]   - Field: ‘earlySignal’
[17:39:32.964]   - Field: ‘lazy’
[17:39:32.965]   - Field: ‘state’
[17:39:32.965] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:32.965] - Launch lazy future ...
[17:39:32.965] Packages needed by the future expression (n = 0): <none>
[17:39:32.965] Packages needed by future strategies (n = 0): <none>
[17:39:32.965] {
[17:39:32.965]     {
[17:39:32.965]         {
[17:39:32.965]             ...future.startTime <- base::Sys.time()
[17:39:32.965]             {
[17:39:32.965]                 {
[17:39:32.965]                   {
[17:39:32.965]                     base::local({
[17:39:32.965]                       has_future <- base::requireNamespace("future", 
[17:39:32.965]                         quietly = TRUE)
[17:39:32.965]                       if (has_future) {
[17:39:32.965]                         ns <- base::getNamespace("future")
[17:39:32.965]                         version <- ns[[".package"]][["version"]]
[17:39:32.965]                         if (is.null(version)) 
[17:39:32.965]                           version <- utils::packageVersion("future")
[17:39:32.965]                       }
[17:39:32.965]                       else {
[17:39:32.965]                         version <- NULL
[17:39:32.965]                       }
[17:39:32.965]                       if (!has_future || version < "1.8.0") {
[17:39:32.965]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:32.965]                           "", base::R.version$version.string), 
[17:39:32.965]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:32.965]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:32.965]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:32.965]                             "release", "version")], collapse = " "), 
[17:39:32.965]                           hostname = base::Sys.info()[["nodename"]])
[17:39:32.965]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:32.965]                           info)
[17:39:32.965]                         info <- base::paste(info, collapse = "; ")
[17:39:32.965]                         if (!has_future) {
[17:39:32.965]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:32.965]                             info)
[17:39:32.965]                         }
[17:39:32.965]                         else {
[17:39:32.965]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:32.965]                             info, version)
[17:39:32.965]                         }
[17:39:32.965]                         base::stop(msg)
[17:39:32.965]                       }
[17:39:32.965]                     })
[17:39:32.965]                   }
[17:39:32.965]                   ...future.strategy.old <- future::plan("list")
[17:39:32.965]                   options(future.plan = NULL)
[17:39:32.965]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:32.965]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:32.965]                 }
[17:39:32.965]                 ...future.workdir <- getwd()
[17:39:32.965]             }
[17:39:32.965]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:32.965]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:32.965]         }
[17:39:32.965]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:32.965]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:32.965]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:32.965]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:32.965]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:32.965]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:32.965]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:32.965]             base::names(...future.oldOptions))
[17:39:32.965]     }
[17:39:32.965]     if (FALSE) {
[17:39:32.965]     }
[17:39:32.965]     else {
[17:39:32.965]         if (TRUE) {
[17:39:32.965]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:32.965]                 open = "w")
[17:39:32.965]         }
[17:39:32.965]         else {
[17:39:32.965]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:32.965]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:32.965]         }
[17:39:32.965]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:32.965]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:32.965]             base::sink(type = "output", split = FALSE)
[17:39:32.965]             base::close(...future.stdout)
[17:39:32.965]         }, add = TRUE)
[17:39:32.965]     }
[17:39:32.965]     ...future.frame <- base::sys.nframe()
[17:39:32.965]     ...future.conditions <- base::list()
[17:39:32.965]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:32.965]     if (FALSE) {
[17:39:32.965]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:32.965]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:32.965]     }
[17:39:32.965]     ...future.result <- base::tryCatch({
[17:39:32.965]         base::withCallingHandlers({
[17:39:32.965]             ...future.value <- base::withVisible(base::local({
[17:39:32.965]                 2
[17:39:32.965]             }))
[17:39:32.965]             future::FutureResult(value = ...future.value$value, 
[17:39:32.965]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:32.965]                   ...future.rng), globalenv = if (FALSE) 
[17:39:32.965]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:32.965]                     ...future.globalenv.names))
[17:39:32.965]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:32.965]         }, condition = base::local({
[17:39:32.965]             c <- base::c
[17:39:32.965]             inherits <- base::inherits
[17:39:32.965]             invokeRestart <- base::invokeRestart
[17:39:32.965]             length <- base::length
[17:39:32.965]             list <- base::list
[17:39:32.965]             seq.int <- base::seq.int
[17:39:32.965]             signalCondition <- base::signalCondition
[17:39:32.965]             sys.calls <- base::sys.calls
[17:39:32.965]             `[[` <- base::`[[`
[17:39:32.965]             `+` <- base::`+`
[17:39:32.965]             `<<-` <- base::`<<-`
[17:39:32.965]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:32.965]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:32.965]                   3L)]
[17:39:32.965]             }
[17:39:32.965]             function(cond) {
[17:39:32.965]                 is_error <- inherits(cond, "error")
[17:39:32.965]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:32.965]                   NULL)
[17:39:32.965]                 if (is_error) {
[17:39:32.965]                   sessionInformation <- function() {
[17:39:32.965]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:32.965]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:32.965]                       search = base::search(), system = base::Sys.info())
[17:39:32.965]                   }
[17:39:32.965]                   ...future.conditions[[length(...future.conditions) + 
[17:39:32.965]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:32.965]                     cond$call), session = sessionInformation(), 
[17:39:32.965]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:32.965]                   signalCondition(cond)
[17:39:32.965]                 }
[17:39:32.965]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:32.965]                 "immediateCondition"))) {
[17:39:32.965]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:32.965]                   ...future.conditions[[length(...future.conditions) + 
[17:39:32.965]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:32.965]                   if (TRUE && !signal) {
[17:39:32.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:32.965]                     {
[17:39:32.965]                       inherits <- base::inherits
[17:39:32.965]                       invokeRestart <- base::invokeRestart
[17:39:32.965]                       is.null <- base::is.null
[17:39:32.965]                       muffled <- FALSE
[17:39:32.965]                       if (inherits(cond, "message")) {
[17:39:32.965]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:32.965]                         if (muffled) 
[17:39:32.965]                           invokeRestart("muffleMessage")
[17:39:32.965]                       }
[17:39:32.965]                       else if (inherits(cond, "warning")) {
[17:39:32.965]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:32.965]                         if (muffled) 
[17:39:32.965]                           invokeRestart("muffleWarning")
[17:39:32.965]                       }
[17:39:32.965]                       else if (inherits(cond, "condition")) {
[17:39:32.965]                         if (!is.null(pattern)) {
[17:39:32.965]                           computeRestarts <- base::computeRestarts
[17:39:32.965]                           grepl <- base::grepl
[17:39:32.965]                           restarts <- computeRestarts(cond)
[17:39:32.965]                           for (restart in restarts) {
[17:39:32.965]                             name <- restart$name
[17:39:32.965]                             if (is.null(name)) 
[17:39:32.965]                               next
[17:39:32.965]                             if (!grepl(pattern, name)) 
[17:39:32.965]                               next
[17:39:32.965]                             invokeRestart(restart)
[17:39:32.965]                             muffled <- TRUE
[17:39:32.965]                             break
[17:39:32.965]                           }
[17:39:32.965]                         }
[17:39:32.965]                       }
[17:39:32.965]                       invisible(muffled)
[17:39:32.965]                     }
[17:39:32.965]                     muffleCondition(cond, pattern = "^muffle")
[17:39:32.965]                   }
[17:39:32.965]                 }
[17:39:32.965]                 else {
[17:39:32.965]                   if (TRUE) {
[17:39:32.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:32.965]                     {
[17:39:32.965]                       inherits <- base::inherits
[17:39:32.965]                       invokeRestart <- base::invokeRestart
[17:39:32.965]                       is.null <- base::is.null
[17:39:32.965]                       muffled <- FALSE
[17:39:32.965]                       if (inherits(cond, "message")) {
[17:39:32.965]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:32.965]                         if (muffled) 
[17:39:32.965]                           invokeRestart("muffleMessage")
[17:39:32.965]                       }
[17:39:32.965]                       else if (inherits(cond, "warning")) {
[17:39:32.965]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:32.965]                         if (muffled) 
[17:39:32.965]                           invokeRestart("muffleWarning")
[17:39:32.965]                       }
[17:39:32.965]                       else if (inherits(cond, "condition")) {
[17:39:32.965]                         if (!is.null(pattern)) {
[17:39:32.965]                           computeRestarts <- base::computeRestarts
[17:39:32.965]                           grepl <- base::grepl
[17:39:32.965]                           restarts <- computeRestarts(cond)
[17:39:32.965]                           for (restart in restarts) {
[17:39:32.965]                             name <- restart$name
[17:39:32.965]                             if (is.null(name)) 
[17:39:32.965]                               next
[17:39:32.965]                             if (!grepl(pattern, name)) 
[17:39:32.965]                               next
[17:39:32.965]                             invokeRestart(restart)
[17:39:32.965]                             muffled <- TRUE
[17:39:32.965]                             break
[17:39:32.965]                           }
[17:39:32.965]                         }
[17:39:32.965]                       }
[17:39:32.965]                       invisible(muffled)
[17:39:32.965]                     }
[17:39:32.965]                     muffleCondition(cond, pattern = "^muffle")
[17:39:32.965]                   }
[17:39:32.965]                 }
[17:39:32.965]             }
[17:39:32.965]         }))
[17:39:32.965]     }, error = function(ex) {
[17:39:32.965]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:32.965]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:32.965]                 ...future.rng), started = ...future.startTime, 
[17:39:32.965]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:32.965]             version = "1.8"), class = "FutureResult")
[17:39:32.965]     }, finally = {
[17:39:32.965]         if (!identical(...future.workdir, getwd())) 
[17:39:32.965]             setwd(...future.workdir)
[17:39:32.965]         {
[17:39:32.965]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:32.965]                 ...future.oldOptions$nwarnings <- NULL
[17:39:32.965]             }
[17:39:32.965]             base::options(...future.oldOptions)
[17:39:32.965]             if (.Platform$OS.type == "windows") {
[17:39:32.965]                 old_names <- names(...future.oldEnvVars)
[17:39:32.965]                 envs <- base::Sys.getenv()
[17:39:32.965]                 names <- names(envs)
[17:39:32.965]                 common <- intersect(names, old_names)
[17:39:32.965]                 added <- setdiff(names, old_names)
[17:39:32.965]                 removed <- setdiff(old_names, names)
[17:39:32.965]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:32.965]                   envs[common]]
[17:39:32.965]                 NAMES <- toupper(changed)
[17:39:32.965]                 args <- list()
[17:39:32.965]                 for (kk in seq_along(NAMES)) {
[17:39:32.965]                   name <- changed[[kk]]
[17:39:32.965]                   NAME <- NAMES[[kk]]
[17:39:32.965]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.965]                     next
[17:39:32.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:32.965]                 }
[17:39:32.965]                 NAMES <- toupper(added)
[17:39:32.965]                 for (kk in seq_along(NAMES)) {
[17:39:32.965]                   name <- added[[kk]]
[17:39:32.965]                   NAME <- NAMES[[kk]]
[17:39:32.965]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.965]                     next
[17:39:32.965]                   args[[name]] <- ""
[17:39:32.965]                 }
[17:39:32.965]                 NAMES <- toupper(removed)
[17:39:32.965]                 for (kk in seq_along(NAMES)) {
[17:39:32.965]                   name <- removed[[kk]]
[17:39:32.965]                   NAME <- NAMES[[kk]]
[17:39:32.965]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.965]                     next
[17:39:32.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:32.965]                 }
[17:39:32.965]                 if (length(args) > 0) 
[17:39:32.965]                   base::do.call(base::Sys.setenv, args = args)
[17:39:32.965]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:32.965]             }
[17:39:32.965]             else {
[17:39:32.965]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:32.965]             }
[17:39:32.965]             {
[17:39:32.965]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:32.965]                   0L) {
[17:39:32.965]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:32.965]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:32.965]                   base::options(opts)
[17:39:32.965]                 }
[17:39:32.965]                 {
[17:39:32.965]                   {
[17:39:32.965]                     NULL
[17:39:32.965]                     RNGkind("Mersenne-Twister")
[17:39:32.965]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:32.965]                       inherits = FALSE)
[17:39:32.965]                   }
[17:39:32.965]                   options(future.plan = NULL)
[17:39:32.965]                   if (is.na(NA_character_)) 
[17:39:32.965]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:32.965]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:32.965]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:32.965]                     .init = FALSE)
[17:39:32.965]                 }
[17:39:32.965]             }
[17:39:32.965]         }
[17:39:32.965]     })
[17:39:32.965]     if (TRUE) {
[17:39:32.965]         base::sink(type = "output", split = FALSE)
[17:39:32.965]         if (TRUE) {
[17:39:32.965]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:32.965]         }
[17:39:32.965]         else {
[17:39:32.965]             ...future.result["stdout"] <- base::list(NULL)
[17:39:32.965]         }
[17:39:32.965]         base::close(...future.stdout)
[17:39:32.965]         ...future.stdout <- NULL
[17:39:32.965]     }
[17:39:32.965]     ...future.result$conditions <- ...future.conditions
[17:39:32.965]     ...future.result$finished <- base::Sys.time()
[17:39:32.965]     ...future.result
[17:39:32.965] }
[17:39:32.967] plan(): Setting new future strategy stack:
[17:39:32.967] List of future strategies:
[17:39:32.967] 1. sequential:
[17:39:32.967]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:32.967]    - tweaked: FALSE
[17:39:32.967]    - call: NULL
[17:39:32.968] plan(): nbrOfWorkers() = 1
[17:39:32.968] plan(): Setting new future strategy stack:
[17:39:32.968] List of future strategies:
[17:39:32.968] 1. sequential:
[17:39:32.968]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:32.968]    - tweaked: FALSE
[17:39:32.968]    - call: future::plan("sequential")
[17:39:32.969] plan(): nbrOfWorkers() = 1
[17:39:32.969] SequentialFuture started (and completed)
[17:39:32.969] - Launch lazy future ... done
[17:39:32.969] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: fe9766ff-07b2-9885-32f3-30f78f125d8c
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-fe9766ff-07b2-9885-32f3-30f78f125d8c', 'reset') ...
*** FutureRegistry('multicore-fe9766ff-07b2-9885-32f3-30f78f125d8c', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[17:39:32.970] getGlobalsAndPackages() ...
[17:39:32.970] Searching for globals...
[17:39:32.971] - globals found: [1] ‘{’
[17:39:32.971] Searching for globals ... DONE
[17:39:32.971] Resolving globals: FALSE
[17:39:32.971] 
[17:39:32.971] 
[17:39:32.971] getGlobalsAndPackages() ... DONE
[17:39:32.971] run() for ‘Future’ ...
[17:39:32.972] - state: ‘created’
[17:39:32.972] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:32.974] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:32.974] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:32.974]   - Field: ‘label’
[17:39:32.974]   - Field: ‘local’
[17:39:32.974]   - Field: ‘owner’
[17:39:32.974]   - Field: ‘envir’
[17:39:32.975]   - Field: ‘packages’
[17:39:32.975]   - Field: ‘gc’
[17:39:32.975]   - Field: ‘conditions’
[17:39:32.975]   - Field: ‘expr’
[17:39:32.975]   - Field: ‘uuid’
[17:39:32.975]   - Field: ‘seed’
[17:39:32.975]   - Field: ‘version’
[17:39:32.975]   - Field: ‘result’
[17:39:32.975]   - Field: ‘asynchronous’
[17:39:32.975]   - Field: ‘calls’
[17:39:32.975]   - Field: ‘globals’
[17:39:32.976]   - Field: ‘stdout’
[17:39:32.976]   - Field: ‘earlySignal’
[17:39:32.976]   - Field: ‘lazy’
[17:39:32.976]   - Field: ‘state’
[17:39:32.976] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:32.976] - Launch lazy future ...
[17:39:32.976] Packages needed by the future expression (n = 0): <none>
[17:39:32.976] Packages needed by future strategies (n = 0): <none>
[17:39:32.977] {
[17:39:32.977]     {
[17:39:32.977]         {
[17:39:32.977]             ...future.startTime <- base::Sys.time()
[17:39:32.977]             {
[17:39:32.977]                 {
[17:39:32.977]                   {
[17:39:32.977]                     base::local({
[17:39:32.977]                       has_future <- base::requireNamespace("future", 
[17:39:32.977]                         quietly = TRUE)
[17:39:32.977]                       if (has_future) {
[17:39:32.977]                         ns <- base::getNamespace("future")
[17:39:32.977]                         version <- ns[[".package"]][["version"]]
[17:39:32.977]                         if (is.null(version)) 
[17:39:32.977]                           version <- utils::packageVersion("future")
[17:39:32.977]                       }
[17:39:32.977]                       else {
[17:39:32.977]                         version <- NULL
[17:39:32.977]                       }
[17:39:32.977]                       if (!has_future || version < "1.8.0") {
[17:39:32.977]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:32.977]                           "", base::R.version$version.string), 
[17:39:32.977]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:32.977]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:32.977]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:32.977]                             "release", "version")], collapse = " "), 
[17:39:32.977]                           hostname = base::Sys.info()[["nodename"]])
[17:39:32.977]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:32.977]                           info)
[17:39:32.977]                         info <- base::paste(info, collapse = "; ")
[17:39:32.977]                         if (!has_future) {
[17:39:32.977]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:32.977]                             info)
[17:39:32.977]                         }
[17:39:32.977]                         else {
[17:39:32.977]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:32.977]                             info, version)
[17:39:32.977]                         }
[17:39:32.977]                         base::stop(msg)
[17:39:32.977]                       }
[17:39:32.977]                     })
[17:39:32.977]                   }
[17:39:32.977]                   ...future.strategy.old <- future::plan("list")
[17:39:32.977]                   options(future.plan = NULL)
[17:39:32.977]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:32.977]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:32.977]                 }
[17:39:32.977]                 ...future.workdir <- getwd()
[17:39:32.977]             }
[17:39:32.977]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:32.977]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:32.977]         }
[17:39:32.977]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:32.977]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:32.977]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:32.977]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:32.977]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:32.977]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:32.977]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:32.977]             base::names(...future.oldOptions))
[17:39:32.977]     }
[17:39:32.977]     if (FALSE) {
[17:39:32.977]     }
[17:39:32.977]     else {
[17:39:32.977]         if (TRUE) {
[17:39:32.977]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:32.977]                 open = "w")
[17:39:32.977]         }
[17:39:32.977]         else {
[17:39:32.977]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:32.977]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:32.977]         }
[17:39:32.977]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:32.977]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:32.977]             base::sink(type = "output", split = FALSE)
[17:39:32.977]             base::close(...future.stdout)
[17:39:32.977]         }, add = TRUE)
[17:39:32.977]     }
[17:39:32.977]     ...future.frame <- base::sys.nframe()
[17:39:32.977]     ...future.conditions <- base::list()
[17:39:32.977]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:32.977]     if (FALSE) {
[17:39:32.977]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:32.977]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:32.977]     }
[17:39:32.977]     ...future.result <- base::tryCatch({
[17:39:32.977]         base::withCallingHandlers({
[17:39:32.977]             ...future.value <- base::withVisible(base::local({
[17:39:32.977]                 1
[17:39:32.977]             }))
[17:39:32.977]             future::FutureResult(value = ...future.value$value, 
[17:39:32.977]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:32.977]                   ...future.rng), globalenv = if (FALSE) 
[17:39:32.977]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:32.977]                     ...future.globalenv.names))
[17:39:32.977]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:32.977]         }, condition = base::local({
[17:39:32.977]             c <- base::c
[17:39:32.977]             inherits <- base::inherits
[17:39:32.977]             invokeRestart <- base::invokeRestart
[17:39:32.977]             length <- base::length
[17:39:32.977]             list <- base::list
[17:39:32.977]             seq.int <- base::seq.int
[17:39:32.977]             signalCondition <- base::signalCondition
[17:39:32.977]             sys.calls <- base::sys.calls
[17:39:32.977]             `[[` <- base::`[[`
[17:39:32.977]             `+` <- base::`+`
[17:39:32.977]             `<<-` <- base::`<<-`
[17:39:32.977]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:32.977]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:32.977]                   3L)]
[17:39:32.977]             }
[17:39:32.977]             function(cond) {
[17:39:32.977]                 is_error <- inherits(cond, "error")
[17:39:32.977]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:32.977]                   NULL)
[17:39:32.977]                 if (is_error) {
[17:39:32.977]                   sessionInformation <- function() {
[17:39:32.977]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:32.977]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:32.977]                       search = base::search(), system = base::Sys.info())
[17:39:32.977]                   }
[17:39:32.977]                   ...future.conditions[[length(...future.conditions) + 
[17:39:32.977]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:32.977]                     cond$call), session = sessionInformation(), 
[17:39:32.977]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:32.977]                   signalCondition(cond)
[17:39:32.977]                 }
[17:39:32.977]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:32.977]                 "immediateCondition"))) {
[17:39:32.977]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:32.977]                   ...future.conditions[[length(...future.conditions) + 
[17:39:32.977]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:32.977]                   if (TRUE && !signal) {
[17:39:32.977]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:32.977]                     {
[17:39:32.977]                       inherits <- base::inherits
[17:39:32.977]                       invokeRestart <- base::invokeRestart
[17:39:32.977]                       is.null <- base::is.null
[17:39:32.977]                       muffled <- FALSE
[17:39:32.977]                       if (inherits(cond, "message")) {
[17:39:32.977]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:32.977]                         if (muffled) 
[17:39:32.977]                           invokeRestart("muffleMessage")
[17:39:32.977]                       }
[17:39:32.977]                       else if (inherits(cond, "warning")) {
[17:39:32.977]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:32.977]                         if (muffled) 
[17:39:32.977]                           invokeRestart("muffleWarning")
[17:39:32.977]                       }
[17:39:32.977]                       else if (inherits(cond, "condition")) {
[17:39:32.977]                         if (!is.null(pattern)) {
[17:39:32.977]                           computeRestarts <- base::computeRestarts
[17:39:32.977]                           grepl <- base::grepl
[17:39:32.977]                           restarts <- computeRestarts(cond)
[17:39:32.977]                           for (restart in restarts) {
[17:39:32.977]                             name <- restart$name
[17:39:32.977]                             if (is.null(name)) 
[17:39:32.977]                               next
[17:39:32.977]                             if (!grepl(pattern, name)) 
[17:39:32.977]                               next
[17:39:32.977]                             invokeRestart(restart)
[17:39:32.977]                             muffled <- TRUE
[17:39:32.977]                             break
[17:39:32.977]                           }
[17:39:32.977]                         }
[17:39:32.977]                       }
[17:39:32.977]                       invisible(muffled)
[17:39:32.977]                     }
[17:39:32.977]                     muffleCondition(cond, pattern = "^muffle")
[17:39:32.977]                   }
[17:39:32.977]                 }
[17:39:32.977]                 else {
[17:39:32.977]                   if (TRUE) {
[17:39:32.977]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:32.977]                     {
[17:39:32.977]                       inherits <- base::inherits
[17:39:32.977]                       invokeRestart <- base::invokeRestart
[17:39:32.977]                       is.null <- base::is.null
[17:39:32.977]                       muffled <- FALSE
[17:39:32.977]                       if (inherits(cond, "message")) {
[17:39:32.977]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:32.977]                         if (muffled) 
[17:39:32.977]                           invokeRestart("muffleMessage")
[17:39:32.977]                       }
[17:39:32.977]                       else if (inherits(cond, "warning")) {
[17:39:32.977]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:32.977]                         if (muffled) 
[17:39:32.977]                           invokeRestart("muffleWarning")
[17:39:32.977]                       }
[17:39:32.977]                       else if (inherits(cond, "condition")) {
[17:39:32.977]                         if (!is.null(pattern)) {
[17:39:32.977]                           computeRestarts <- base::computeRestarts
[17:39:32.977]                           grepl <- base::grepl
[17:39:32.977]                           restarts <- computeRestarts(cond)
[17:39:32.977]                           for (restart in restarts) {
[17:39:32.977]                             name <- restart$name
[17:39:32.977]                             if (is.null(name)) 
[17:39:32.977]                               next
[17:39:32.977]                             if (!grepl(pattern, name)) 
[17:39:32.977]                               next
[17:39:32.977]                             invokeRestart(restart)
[17:39:32.977]                             muffled <- TRUE
[17:39:32.977]                             break
[17:39:32.977]                           }
[17:39:32.977]                         }
[17:39:32.977]                       }
[17:39:32.977]                       invisible(muffled)
[17:39:32.977]                     }
[17:39:32.977]                     muffleCondition(cond, pattern = "^muffle")
[17:39:32.977]                   }
[17:39:32.977]                 }
[17:39:32.977]             }
[17:39:32.977]         }))
[17:39:32.977]     }, error = function(ex) {
[17:39:32.977]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:32.977]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:32.977]                 ...future.rng), started = ...future.startTime, 
[17:39:32.977]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:32.977]             version = "1.8"), class = "FutureResult")
[17:39:32.977]     }, finally = {
[17:39:32.977]         if (!identical(...future.workdir, getwd())) 
[17:39:32.977]             setwd(...future.workdir)
[17:39:32.977]         {
[17:39:32.977]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:32.977]                 ...future.oldOptions$nwarnings <- NULL
[17:39:32.977]             }
[17:39:32.977]             base::options(...future.oldOptions)
[17:39:32.977]             if (.Platform$OS.type == "windows") {
[17:39:32.977]                 old_names <- names(...future.oldEnvVars)
[17:39:32.977]                 envs <- base::Sys.getenv()
[17:39:32.977]                 names <- names(envs)
[17:39:32.977]                 common <- intersect(names, old_names)
[17:39:32.977]                 added <- setdiff(names, old_names)
[17:39:32.977]                 removed <- setdiff(old_names, names)
[17:39:32.977]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:32.977]                   envs[common]]
[17:39:32.977]                 NAMES <- toupper(changed)
[17:39:32.977]                 args <- list()
[17:39:32.977]                 for (kk in seq_along(NAMES)) {
[17:39:32.977]                   name <- changed[[kk]]
[17:39:32.977]                   NAME <- NAMES[[kk]]
[17:39:32.977]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.977]                     next
[17:39:32.977]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:32.977]                 }
[17:39:32.977]                 NAMES <- toupper(added)
[17:39:32.977]                 for (kk in seq_along(NAMES)) {
[17:39:32.977]                   name <- added[[kk]]
[17:39:32.977]                   NAME <- NAMES[[kk]]
[17:39:32.977]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.977]                     next
[17:39:32.977]                   args[[name]] <- ""
[17:39:32.977]                 }
[17:39:32.977]                 NAMES <- toupper(removed)
[17:39:32.977]                 for (kk in seq_along(NAMES)) {
[17:39:32.977]                   name <- removed[[kk]]
[17:39:32.977]                   NAME <- NAMES[[kk]]
[17:39:32.977]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.977]                     next
[17:39:32.977]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:32.977]                 }
[17:39:32.977]                 if (length(args) > 0) 
[17:39:32.977]                   base::do.call(base::Sys.setenv, args = args)
[17:39:32.977]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:32.977]             }
[17:39:32.977]             else {
[17:39:32.977]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:32.977]             }
[17:39:32.977]             {
[17:39:32.977]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:32.977]                   0L) {
[17:39:32.977]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:32.977]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:32.977]                   base::options(opts)
[17:39:32.977]                 }
[17:39:32.977]                 {
[17:39:32.977]                   {
[17:39:32.977]                     NULL
[17:39:32.977]                     RNGkind("Mersenne-Twister")
[17:39:32.977]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:32.977]                       inherits = FALSE)
[17:39:32.977]                   }
[17:39:32.977]                   options(future.plan = NULL)
[17:39:32.977]                   if (is.na(NA_character_)) 
[17:39:32.977]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:32.977]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:32.977]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:32.977]                     .init = FALSE)
[17:39:32.977]                 }
[17:39:32.977]             }
[17:39:32.977]         }
[17:39:32.977]     })
[17:39:32.977]     if (TRUE) {
[17:39:32.977]         base::sink(type = "output", split = FALSE)
[17:39:32.977]         if (TRUE) {
[17:39:32.977]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:32.977]         }
[17:39:32.977]         else {
[17:39:32.977]             ...future.result["stdout"] <- base::list(NULL)
[17:39:32.977]         }
[17:39:32.977]         base::close(...future.stdout)
[17:39:32.977]         ...future.stdout <- NULL
[17:39:32.977]     }
[17:39:32.977]     ...future.result$conditions <- ...future.conditions
[17:39:32.977]     ...future.result$finished <- base::Sys.time()
[17:39:32.977]     ...future.result
[17:39:32.977] }
[17:39:32.978] plan(): Setting new future strategy stack:
[17:39:32.978] List of future strategies:
[17:39:32.978] 1. sequential:
[17:39:32.978]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:32.978]    - tweaked: FALSE
[17:39:32.978]    - call: NULL
[17:39:32.979] plan(): nbrOfWorkers() = 1
[17:39:32.980] plan(): Setting new future strategy stack:
[17:39:32.980] List of future strategies:
[17:39:32.980] 1. sequential:
[17:39:32.980]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:32.980]    - tweaked: FALSE
[17:39:32.980]    - call: future::plan("sequential")
[17:39:32.980] plan(): nbrOfWorkers() = 1
[17:39:32.980] SequentialFuture started (and completed)
[17:39:32.980] - Launch lazy future ... done
[17:39:32.980] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: fe9766ff-07b2-9885-32f3-30f78f125d8c
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: fe9766ff-07b2-9885-32f3-30f78f125d8c
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[17:39:32.982] getGlobalsAndPackages() ...
[17:39:32.982] Searching for globals...
[17:39:32.982] - globals found: [1] ‘{’
[17:39:32.982] Searching for globals ... DONE
[17:39:32.982] Resolving globals: FALSE
[17:39:32.983] 
[17:39:32.983] 
[17:39:32.983] getGlobalsAndPackages() ... DONE
[17:39:32.983] run() for ‘Future’ ...
[17:39:32.983] - state: ‘created’
[17:39:32.983] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:32.983] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:32.984] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:32.984]   - Field: ‘label’
[17:39:32.984]   - Field: ‘local’
[17:39:32.984]   - Field: ‘owner’
[17:39:32.984]   - Field: ‘envir’
[17:39:32.984]   - Field: ‘packages’
[17:39:32.984]   - Field: ‘gc’
[17:39:32.984]   - Field: ‘conditions’
[17:39:32.984]   - Field: ‘expr’
[17:39:32.984]   - Field: ‘uuid’
[17:39:32.985]   - Field: ‘seed’
[17:39:32.985]   - Field: ‘version’
[17:39:32.985]   - Field: ‘result’
[17:39:32.985]   - Field: ‘asynchronous’
[17:39:32.985]   - Field: ‘calls’
[17:39:32.985]   - Field: ‘globals’
[17:39:32.985]   - Field: ‘stdout’
[17:39:32.985]   - Field: ‘earlySignal’
[17:39:32.985]   - Field: ‘lazy’
[17:39:32.985]   - Field: ‘state’
[17:39:32.985] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:32.986] - Launch lazy future ...
[17:39:32.986] Packages needed by the future expression (n = 0): <none>
[17:39:32.986] Packages needed by future strategies (n = 0): <none>
[17:39:32.986] {
[17:39:32.986]     {
[17:39:32.986]         {
[17:39:32.986]             ...future.startTime <- base::Sys.time()
[17:39:32.986]             {
[17:39:32.986]                 {
[17:39:32.986]                   {
[17:39:32.986]                     base::local({
[17:39:32.986]                       has_future <- base::requireNamespace("future", 
[17:39:32.986]                         quietly = TRUE)
[17:39:32.986]                       if (has_future) {
[17:39:32.986]                         ns <- base::getNamespace("future")
[17:39:32.986]                         version <- ns[[".package"]][["version"]]
[17:39:32.986]                         if (is.null(version)) 
[17:39:32.986]                           version <- utils::packageVersion("future")
[17:39:32.986]                       }
[17:39:32.986]                       else {
[17:39:32.986]                         version <- NULL
[17:39:32.986]                       }
[17:39:32.986]                       if (!has_future || version < "1.8.0") {
[17:39:32.986]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:32.986]                           "", base::R.version$version.string), 
[17:39:32.986]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:32.986]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:32.986]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:32.986]                             "release", "version")], collapse = " "), 
[17:39:32.986]                           hostname = base::Sys.info()[["nodename"]])
[17:39:32.986]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:32.986]                           info)
[17:39:32.986]                         info <- base::paste(info, collapse = "; ")
[17:39:32.986]                         if (!has_future) {
[17:39:32.986]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:32.986]                             info)
[17:39:32.986]                         }
[17:39:32.986]                         else {
[17:39:32.986]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:32.986]                             info, version)
[17:39:32.986]                         }
[17:39:32.986]                         base::stop(msg)
[17:39:32.986]                       }
[17:39:32.986]                     })
[17:39:32.986]                   }
[17:39:32.986]                   ...future.strategy.old <- future::plan("list")
[17:39:32.986]                   options(future.plan = NULL)
[17:39:32.986]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:32.986]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:32.986]                 }
[17:39:32.986]                 ...future.workdir <- getwd()
[17:39:32.986]             }
[17:39:32.986]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:32.986]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:32.986]         }
[17:39:32.986]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:32.986]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:32.986]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:32.986]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:32.986]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:32.986]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:32.986]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:32.986]             base::names(...future.oldOptions))
[17:39:32.986]     }
[17:39:32.986]     if (FALSE) {
[17:39:32.986]     }
[17:39:32.986]     else {
[17:39:32.986]         if (TRUE) {
[17:39:32.986]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:32.986]                 open = "w")
[17:39:32.986]         }
[17:39:32.986]         else {
[17:39:32.986]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:32.986]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:32.986]         }
[17:39:32.986]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:32.986]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:32.986]             base::sink(type = "output", split = FALSE)
[17:39:32.986]             base::close(...future.stdout)
[17:39:32.986]         }, add = TRUE)
[17:39:32.986]     }
[17:39:32.986]     ...future.frame <- base::sys.nframe()
[17:39:32.986]     ...future.conditions <- base::list()
[17:39:32.986]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:32.986]     if (FALSE) {
[17:39:32.986]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:32.986]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:32.986]     }
[17:39:32.986]     ...future.result <- base::tryCatch({
[17:39:32.986]         base::withCallingHandlers({
[17:39:32.986]             ...future.value <- base::withVisible(base::local({
[17:39:32.986]                 2
[17:39:32.986]             }))
[17:39:32.986]             future::FutureResult(value = ...future.value$value, 
[17:39:32.986]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:32.986]                   ...future.rng), globalenv = if (FALSE) 
[17:39:32.986]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:32.986]                     ...future.globalenv.names))
[17:39:32.986]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:32.986]         }, condition = base::local({
[17:39:32.986]             c <- base::c
[17:39:32.986]             inherits <- base::inherits
[17:39:32.986]             invokeRestart <- base::invokeRestart
[17:39:32.986]             length <- base::length
[17:39:32.986]             list <- base::list
[17:39:32.986]             seq.int <- base::seq.int
[17:39:32.986]             signalCondition <- base::signalCondition
[17:39:32.986]             sys.calls <- base::sys.calls
[17:39:32.986]             `[[` <- base::`[[`
[17:39:32.986]             `+` <- base::`+`
[17:39:32.986]             `<<-` <- base::`<<-`
[17:39:32.986]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:32.986]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:32.986]                   3L)]
[17:39:32.986]             }
[17:39:32.986]             function(cond) {
[17:39:32.986]                 is_error <- inherits(cond, "error")
[17:39:32.986]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:32.986]                   NULL)
[17:39:32.986]                 if (is_error) {
[17:39:32.986]                   sessionInformation <- function() {
[17:39:32.986]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:32.986]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:32.986]                       search = base::search(), system = base::Sys.info())
[17:39:32.986]                   }
[17:39:32.986]                   ...future.conditions[[length(...future.conditions) + 
[17:39:32.986]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:32.986]                     cond$call), session = sessionInformation(), 
[17:39:32.986]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:32.986]                   signalCondition(cond)
[17:39:32.986]                 }
[17:39:32.986]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:32.986]                 "immediateCondition"))) {
[17:39:32.986]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:32.986]                   ...future.conditions[[length(...future.conditions) + 
[17:39:32.986]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:32.986]                   if (TRUE && !signal) {
[17:39:32.986]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:32.986]                     {
[17:39:32.986]                       inherits <- base::inherits
[17:39:32.986]                       invokeRestart <- base::invokeRestart
[17:39:32.986]                       is.null <- base::is.null
[17:39:32.986]                       muffled <- FALSE
[17:39:32.986]                       if (inherits(cond, "message")) {
[17:39:32.986]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:32.986]                         if (muffled) 
[17:39:32.986]                           invokeRestart("muffleMessage")
[17:39:32.986]                       }
[17:39:32.986]                       else if (inherits(cond, "warning")) {
[17:39:32.986]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:32.986]                         if (muffled) 
[17:39:32.986]                           invokeRestart("muffleWarning")
[17:39:32.986]                       }
[17:39:32.986]                       else if (inherits(cond, "condition")) {
[17:39:32.986]                         if (!is.null(pattern)) {
[17:39:32.986]                           computeRestarts <- base::computeRestarts
[17:39:32.986]                           grepl <- base::grepl
[17:39:32.986]                           restarts <- computeRestarts(cond)
[17:39:32.986]                           for (restart in restarts) {
[17:39:32.986]                             name <- restart$name
[17:39:32.986]                             if (is.null(name)) 
[17:39:32.986]                               next
[17:39:32.986]                             if (!grepl(pattern, name)) 
[17:39:32.986]                               next
[17:39:32.986]                             invokeRestart(restart)
[17:39:32.986]                             muffled <- TRUE
[17:39:32.986]                             break
[17:39:32.986]                           }
[17:39:32.986]                         }
[17:39:32.986]                       }
[17:39:32.986]                       invisible(muffled)
[17:39:32.986]                     }
[17:39:32.986]                     muffleCondition(cond, pattern = "^muffle")
[17:39:32.986]                   }
[17:39:32.986]                 }
[17:39:32.986]                 else {
[17:39:32.986]                   if (TRUE) {
[17:39:32.986]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:32.986]                     {
[17:39:32.986]                       inherits <- base::inherits
[17:39:32.986]                       invokeRestart <- base::invokeRestart
[17:39:32.986]                       is.null <- base::is.null
[17:39:32.986]                       muffled <- FALSE
[17:39:32.986]                       if (inherits(cond, "message")) {
[17:39:32.986]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:32.986]                         if (muffled) 
[17:39:32.986]                           invokeRestart("muffleMessage")
[17:39:32.986]                       }
[17:39:32.986]                       else if (inherits(cond, "warning")) {
[17:39:32.986]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:32.986]                         if (muffled) 
[17:39:32.986]                           invokeRestart("muffleWarning")
[17:39:32.986]                       }
[17:39:32.986]                       else if (inherits(cond, "condition")) {
[17:39:32.986]                         if (!is.null(pattern)) {
[17:39:32.986]                           computeRestarts <- base::computeRestarts
[17:39:32.986]                           grepl <- base::grepl
[17:39:32.986]                           restarts <- computeRestarts(cond)
[17:39:32.986]                           for (restart in restarts) {
[17:39:32.986]                             name <- restart$name
[17:39:32.986]                             if (is.null(name)) 
[17:39:32.986]                               next
[17:39:32.986]                             if (!grepl(pattern, name)) 
[17:39:32.986]                               next
[17:39:32.986]                             invokeRestart(restart)
[17:39:32.986]                             muffled <- TRUE
[17:39:32.986]                             break
[17:39:32.986]                           }
[17:39:32.986]                         }
[17:39:32.986]                       }
[17:39:32.986]                       invisible(muffled)
[17:39:32.986]                     }
[17:39:32.986]                     muffleCondition(cond, pattern = "^muffle")
[17:39:32.986]                   }
[17:39:32.986]                 }
[17:39:32.986]             }
[17:39:32.986]         }))
[17:39:32.986]     }, error = function(ex) {
[17:39:32.986]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:32.986]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:32.986]                 ...future.rng), started = ...future.startTime, 
[17:39:32.986]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:32.986]             version = "1.8"), class = "FutureResult")
[17:39:32.986]     }, finally = {
[17:39:32.986]         if (!identical(...future.workdir, getwd())) 
[17:39:32.986]             setwd(...future.workdir)
[17:39:32.986]         {
[17:39:32.986]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:32.986]                 ...future.oldOptions$nwarnings <- NULL
[17:39:32.986]             }
[17:39:32.986]             base::options(...future.oldOptions)
[17:39:32.986]             if (.Platform$OS.type == "windows") {
[17:39:32.986]                 old_names <- names(...future.oldEnvVars)
[17:39:32.986]                 envs <- base::Sys.getenv()
[17:39:32.986]                 names <- names(envs)
[17:39:32.986]                 common <- intersect(names, old_names)
[17:39:32.986]                 added <- setdiff(names, old_names)
[17:39:32.986]                 removed <- setdiff(old_names, names)
[17:39:32.986]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:32.986]                   envs[common]]
[17:39:32.986]                 NAMES <- toupper(changed)
[17:39:32.986]                 args <- list()
[17:39:32.986]                 for (kk in seq_along(NAMES)) {
[17:39:32.986]                   name <- changed[[kk]]
[17:39:32.986]                   NAME <- NAMES[[kk]]
[17:39:32.986]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.986]                     next
[17:39:32.986]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:32.986]                 }
[17:39:32.986]                 NAMES <- toupper(added)
[17:39:32.986]                 for (kk in seq_along(NAMES)) {
[17:39:32.986]                   name <- added[[kk]]
[17:39:32.986]                   NAME <- NAMES[[kk]]
[17:39:32.986]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.986]                     next
[17:39:32.986]                   args[[name]] <- ""
[17:39:32.986]                 }
[17:39:32.986]                 NAMES <- toupper(removed)
[17:39:32.986]                 for (kk in seq_along(NAMES)) {
[17:39:32.986]                   name <- removed[[kk]]
[17:39:32.986]                   NAME <- NAMES[[kk]]
[17:39:32.986]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:32.986]                     next
[17:39:32.986]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:32.986]                 }
[17:39:32.986]                 if (length(args) > 0) 
[17:39:32.986]                   base::do.call(base::Sys.setenv, args = args)
[17:39:32.986]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:32.986]             }
[17:39:32.986]             else {
[17:39:32.986]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:32.986]             }
[17:39:32.986]             {
[17:39:32.986]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:32.986]                   0L) {
[17:39:32.986]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:32.986]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:32.986]                   base::options(opts)
[17:39:32.986]                 }
[17:39:32.986]                 {
[17:39:32.986]                   {
[17:39:32.986]                     NULL
[17:39:32.986]                     RNGkind("Mersenne-Twister")
[17:39:32.986]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:32.986]                       inherits = FALSE)
[17:39:32.986]                   }
[17:39:32.986]                   options(future.plan = NULL)
[17:39:32.986]                   if (is.na(NA_character_)) 
[17:39:32.986]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:32.986]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:32.986]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:32.986]                     .init = FALSE)
[17:39:32.986]                 }
[17:39:32.986]             }
[17:39:32.986]         }
[17:39:32.986]     })
[17:39:32.986]     if (TRUE) {
[17:39:32.986]         base::sink(type = "output", split = FALSE)
[17:39:32.986]         if (TRUE) {
[17:39:32.986]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:32.986]         }
[17:39:32.986]         else {
[17:39:32.986]             ...future.result["stdout"] <- base::list(NULL)
[17:39:32.986]         }
[17:39:32.986]         base::close(...future.stdout)
[17:39:32.986]         ...future.stdout <- NULL
[17:39:32.986]     }
[17:39:32.986]     ...future.result$conditions <- ...future.conditions
[17:39:32.986]     ...future.result$finished <- base::Sys.time()
[17:39:32.986]     ...future.result
[17:39:32.986] }
[17:39:32.988] plan(): Setting new future strategy stack:
[17:39:32.988] List of future strategies:
[17:39:32.988] 1. sequential:
[17:39:32.988]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:32.988]    - tweaked: FALSE
[17:39:32.988]    - call: NULL
[17:39:32.988] plan(): nbrOfWorkers() = 1
[17:39:32.989] plan(): Setting new future strategy stack:
[17:39:32.989] List of future strategies:
[17:39:32.989] 1. sequential:
[17:39:32.989]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:32.989]    - tweaked: FALSE
[17:39:32.989]    - call: future::plan("sequential")
[17:39:32.990] plan(): nbrOfWorkers() = 1
[17:39:32.990] SequentialFuture started (and completed)
[17:39:32.990] - Launch lazy future ... done
[17:39:32.990] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: fe9766ff-07b2-9885-32f3-30f78f125d8c
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: fe9766ff-07b2-9885-32f3-30f78f125d8c
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[17:39:32.999] resolved() for ‘SequentialFuture’ ...
[17:39:32.999] - state: ‘finished’
[17:39:32.999] - run: FALSE
[17:39:32.999] - result: ‘FutureResult’
[17:39:32.999] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[17:39:32.999] getGlobalsAndPackages() ...
[17:39:33.000] Searching for globals...
[17:39:33.000] - globals found: [1] ‘{’
[17:39:33.000] Searching for globals ... DONE
[17:39:33.000] Resolving globals: FALSE
[17:39:33.001] 
[17:39:33.001] 
[17:39:33.001] getGlobalsAndPackages() ... DONE
[17:39:33.001] run() for ‘Future’ ...
[17:39:33.001] - state: ‘created’
[17:39:33.001] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:33.001] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:33.002] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:33.002]   - Field: ‘label’
[17:39:33.002]   - Field: ‘local’
[17:39:33.002]   - Field: ‘owner’
[17:39:33.002]   - Field: ‘envir’
[17:39:33.002]   - Field: ‘packages’
[17:39:33.002]   - Field: ‘gc’
[17:39:33.002]   - Field: ‘conditions’
[17:39:33.002]   - Field: ‘expr’
[17:39:33.002]   - Field: ‘uuid’
[17:39:33.002]   - Field: ‘seed’
[17:39:33.003]   - Field: ‘version’
[17:39:33.003]   - Field: ‘result’
[17:39:33.003]   - Field: ‘asynchronous’
[17:39:33.003]   - Field: ‘calls’
[17:39:33.003]   - Field: ‘globals’
[17:39:33.003]   - Field: ‘stdout’
[17:39:33.003]   - Field: ‘earlySignal’
[17:39:33.005]   - Field: ‘lazy’
[17:39:33.005]   - Field: ‘state’
[17:39:33.005] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:33.005] - Launch lazy future ...
[17:39:33.005] Packages needed by the future expression (n = 0): <none>
[17:39:33.005] Packages needed by future strategies (n = 0): <none>
[17:39:33.006] {
[17:39:33.006]     {
[17:39:33.006]         {
[17:39:33.006]             ...future.startTime <- base::Sys.time()
[17:39:33.006]             {
[17:39:33.006]                 {
[17:39:33.006]                   {
[17:39:33.006]                     base::local({
[17:39:33.006]                       has_future <- base::requireNamespace("future", 
[17:39:33.006]                         quietly = TRUE)
[17:39:33.006]                       if (has_future) {
[17:39:33.006]                         ns <- base::getNamespace("future")
[17:39:33.006]                         version <- ns[[".package"]][["version"]]
[17:39:33.006]                         if (is.null(version)) 
[17:39:33.006]                           version <- utils::packageVersion("future")
[17:39:33.006]                       }
[17:39:33.006]                       else {
[17:39:33.006]                         version <- NULL
[17:39:33.006]                       }
[17:39:33.006]                       if (!has_future || version < "1.8.0") {
[17:39:33.006]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:33.006]                           "", base::R.version$version.string), 
[17:39:33.006]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:33.006]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:33.006]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:33.006]                             "release", "version")], collapse = " "), 
[17:39:33.006]                           hostname = base::Sys.info()[["nodename"]])
[17:39:33.006]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:33.006]                           info)
[17:39:33.006]                         info <- base::paste(info, collapse = "; ")
[17:39:33.006]                         if (!has_future) {
[17:39:33.006]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:33.006]                             info)
[17:39:33.006]                         }
[17:39:33.006]                         else {
[17:39:33.006]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:33.006]                             info, version)
[17:39:33.006]                         }
[17:39:33.006]                         base::stop(msg)
[17:39:33.006]                       }
[17:39:33.006]                     })
[17:39:33.006]                   }
[17:39:33.006]                   ...future.strategy.old <- future::plan("list")
[17:39:33.006]                   options(future.plan = NULL)
[17:39:33.006]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:33.006]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:33.006]                 }
[17:39:33.006]                 ...future.workdir <- getwd()
[17:39:33.006]             }
[17:39:33.006]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:33.006]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:33.006]         }
[17:39:33.006]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:33.006]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:33.006]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:33.006]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:33.006]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:33.006]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:33.006]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:33.006]             base::names(...future.oldOptions))
[17:39:33.006]     }
[17:39:33.006]     if (FALSE) {
[17:39:33.006]     }
[17:39:33.006]     else {
[17:39:33.006]         if (TRUE) {
[17:39:33.006]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:33.006]                 open = "w")
[17:39:33.006]         }
[17:39:33.006]         else {
[17:39:33.006]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:33.006]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:33.006]         }
[17:39:33.006]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:33.006]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:33.006]             base::sink(type = "output", split = FALSE)
[17:39:33.006]             base::close(...future.stdout)
[17:39:33.006]         }, add = TRUE)
[17:39:33.006]     }
[17:39:33.006]     ...future.frame <- base::sys.nframe()
[17:39:33.006]     ...future.conditions <- base::list()
[17:39:33.006]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:33.006]     if (FALSE) {
[17:39:33.006]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:33.006]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:33.006]     }
[17:39:33.006]     ...future.result <- base::tryCatch({
[17:39:33.006]         base::withCallingHandlers({
[17:39:33.006]             ...future.value <- base::withVisible(base::local({
[17:39:33.006]                 2
[17:39:33.006]             }))
[17:39:33.006]             future::FutureResult(value = ...future.value$value, 
[17:39:33.006]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:33.006]                   ...future.rng), globalenv = if (FALSE) 
[17:39:33.006]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:33.006]                     ...future.globalenv.names))
[17:39:33.006]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:33.006]         }, condition = base::local({
[17:39:33.006]             c <- base::c
[17:39:33.006]             inherits <- base::inherits
[17:39:33.006]             invokeRestart <- base::invokeRestart
[17:39:33.006]             length <- base::length
[17:39:33.006]             list <- base::list
[17:39:33.006]             seq.int <- base::seq.int
[17:39:33.006]             signalCondition <- base::signalCondition
[17:39:33.006]             sys.calls <- base::sys.calls
[17:39:33.006]             `[[` <- base::`[[`
[17:39:33.006]             `+` <- base::`+`
[17:39:33.006]             `<<-` <- base::`<<-`
[17:39:33.006]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:33.006]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:33.006]                   3L)]
[17:39:33.006]             }
[17:39:33.006]             function(cond) {
[17:39:33.006]                 is_error <- inherits(cond, "error")
[17:39:33.006]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:33.006]                   NULL)
[17:39:33.006]                 if (is_error) {
[17:39:33.006]                   sessionInformation <- function() {
[17:39:33.006]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:33.006]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:33.006]                       search = base::search(), system = base::Sys.info())
[17:39:33.006]                   }
[17:39:33.006]                   ...future.conditions[[length(...future.conditions) + 
[17:39:33.006]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:33.006]                     cond$call), session = sessionInformation(), 
[17:39:33.006]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:33.006]                   signalCondition(cond)
[17:39:33.006]                 }
[17:39:33.006]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:33.006]                 "immediateCondition"))) {
[17:39:33.006]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:33.006]                   ...future.conditions[[length(...future.conditions) + 
[17:39:33.006]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:33.006]                   if (TRUE && !signal) {
[17:39:33.006]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:33.006]                     {
[17:39:33.006]                       inherits <- base::inherits
[17:39:33.006]                       invokeRestart <- base::invokeRestart
[17:39:33.006]                       is.null <- base::is.null
[17:39:33.006]                       muffled <- FALSE
[17:39:33.006]                       if (inherits(cond, "message")) {
[17:39:33.006]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:33.006]                         if (muffled) 
[17:39:33.006]                           invokeRestart("muffleMessage")
[17:39:33.006]                       }
[17:39:33.006]                       else if (inherits(cond, "warning")) {
[17:39:33.006]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:33.006]                         if (muffled) 
[17:39:33.006]                           invokeRestart("muffleWarning")
[17:39:33.006]                       }
[17:39:33.006]                       else if (inherits(cond, "condition")) {
[17:39:33.006]                         if (!is.null(pattern)) {
[17:39:33.006]                           computeRestarts <- base::computeRestarts
[17:39:33.006]                           grepl <- base::grepl
[17:39:33.006]                           restarts <- computeRestarts(cond)
[17:39:33.006]                           for (restart in restarts) {
[17:39:33.006]                             name <- restart$name
[17:39:33.006]                             if (is.null(name)) 
[17:39:33.006]                               next
[17:39:33.006]                             if (!grepl(pattern, name)) 
[17:39:33.006]                               next
[17:39:33.006]                             invokeRestart(restart)
[17:39:33.006]                             muffled <- TRUE
[17:39:33.006]                             break
[17:39:33.006]                           }
[17:39:33.006]                         }
[17:39:33.006]                       }
[17:39:33.006]                       invisible(muffled)
[17:39:33.006]                     }
[17:39:33.006]                     muffleCondition(cond, pattern = "^muffle")
[17:39:33.006]                   }
[17:39:33.006]                 }
[17:39:33.006]                 else {
[17:39:33.006]                   if (TRUE) {
[17:39:33.006]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:33.006]                     {
[17:39:33.006]                       inherits <- base::inherits
[17:39:33.006]                       invokeRestart <- base::invokeRestart
[17:39:33.006]                       is.null <- base::is.null
[17:39:33.006]                       muffled <- FALSE
[17:39:33.006]                       if (inherits(cond, "message")) {
[17:39:33.006]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:33.006]                         if (muffled) 
[17:39:33.006]                           invokeRestart("muffleMessage")
[17:39:33.006]                       }
[17:39:33.006]                       else if (inherits(cond, "warning")) {
[17:39:33.006]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:33.006]                         if (muffled) 
[17:39:33.006]                           invokeRestart("muffleWarning")
[17:39:33.006]                       }
[17:39:33.006]                       else if (inherits(cond, "condition")) {
[17:39:33.006]                         if (!is.null(pattern)) {
[17:39:33.006]                           computeRestarts <- base::computeRestarts
[17:39:33.006]                           grepl <- base::grepl
[17:39:33.006]                           restarts <- computeRestarts(cond)
[17:39:33.006]                           for (restart in restarts) {
[17:39:33.006]                             name <- restart$name
[17:39:33.006]                             if (is.null(name)) 
[17:39:33.006]                               next
[17:39:33.006]                             if (!grepl(pattern, name)) 
[17:39:33.006]                               next
[17:39:33.006]                             invokeRestart(restart)
[17:39:33.006]                             muffled <- TRUE
[17:39:33.006]                             break
[17:39:33.006]                           }
[17:39:33.006]                         }
[17:39:33.006]                       }
[17:39:33.006]                       invisible(muffled)
[17:39:33.006]                     }
[17:39:33.006]                     muffleCondition(cond, pattern = "^muffle")
[17:39:33.006]                   }
[17:39:33.006]                 }
[17:39:33.006]             }
[17:39:33.006]         }))
[17:39:33.006]     }, error = function(ex) {
[17:39:33.006]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:33.006]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:33.006]                 ...future.rng), started = ...future.startTime, 
[17:39:33.006]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:33.006]             version = "1.8"), class = "FutureResult")
[17:39:33.006]     }, finally = {
[17:39:33.006]         if (!identical(...future.workdir, getwd())) 
[17:39:33.006]             setwd(...future.workdir)
[17:39:33.006]         {
[17:39:33.006]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:33.006]                 ...future.oldOptions$nwarnings <- NULL
[17:39:33.006]             }
[17:39:33.006]             base::options(...future.oldOptions)
[17:39:33.006]             if (.Platform$OS.type == "windows") {
[17:39:33.006]                 old_names <- names(...future.oldEnvVars)
[17:39:33.006]                 envs <- base::Sys.getenv()
[17:39:33.006]                 names <- names(envs)
[17:39:33.006]                 common <- intersect(names, old_names)
[17:39:33.006]                 added <- setdiff(names, old_names)
[17:39:33.006]                 removed <- setdiff(old_names, names)
[17:39:33.006]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:33.006]                   envs[common]]
[17:39:33.006]                 NAMES <- toupper(changed)
[17:39:33.006]                 args <- list()
[17:39:33.006]                 for (kk in seq_along(NAMES)) {
[17:39:33.006]                   name <- changed[[kk]]
[17:39:33.006]                   NAME <- NAMES[[kk]]
[17:39:33.006]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:33.006]                     next
[17:39:33.006]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:33.006]                 }
[17:39:33.006]                 NAMES <- toupper(added)
[17:39:33.006]                 for (kk in seq_along(NAMES)) {
[17:39:33.006]                   name <- added[[kk]]
[17:39:33.006]                   NAME <- NAMES[[kk]]
[17:39:33.006]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:33.006]                     next
[17:39:33.006]                   args[[name]] <- ""
[17:39:33.006]                 }
[17:39:33.006]                 NAMES <- toupper(removed)
[17:39:33.006]                 for (kk in seq_along(NAMES)) {
[17:39:33.006]                   name <- removed[[kk]]
[17:39:33.006]                   NAME <- NAMES[[kk]]
[17:39:33.006]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:33.006]                     next
[17:39:33.006]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:33.006]                 }
[17:39:33.006]                 if (length(args) > 0) 
[17:39:33.006]                   base::do.call(base::Sys.setenv, args = args)
[17:39:33.006]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:33.006]             }
[17:39:33.006]             else {
[17:39:33.006]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:33.006]             }
[17:39:33.006]             {
[17:39:33.006]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:33.006]                   0L) {
[17:39:33.006]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:33.006]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:33.006]                   base::options(opts)
[17:39:33.006]                 }
[17:39:33.006]                 {
[17:39:33.006]                   {
[17:39:33.006]                     NULL
[17:39:33.006]                     RNGkind("Mersenne-Twister")
[17:39:33.006]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:33.006]                       inherits = FALSE)
[17:39:33.006]                   }
[17:39:33.006]                   options(future.plan = NULL)
[17:39:33.006]                   if (is.na(NA_character_)) 
[17:39:33.006]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:33.006]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:33.006]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:33.006]                     .init = FALSE)
[17:39:33.006]                 }
[17:39:33.006]             }
[17:39:33.006]         }
[17:39:33.006]     })
[17:39:33.006]     if (TRUE) {
[17:39:33.006]         base::sink(type = "output", split = FALSE)
[17:39:33.006]         if (TRUE) {
[17:39:33.006]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:33.006]         }
[17:39:33.006]         else {
[17:39:33.006]             ...future.result["stdout"] <- base::list(NULL)
[17:39:33.006]         }
[17:39:33.006]         base::close(...future.stdout)
[17:39:33.006]         ...future.stdout <- NULL
[17:39:33.006]     }
[17:39:33.006]     ...future.result$conditions <- ...future.conditions
[17:39:33.006]     ...future.result$finished <- base::Sys.time()
[17:39:33.006]     ...future.result
[17:39:33.006] }
[17:39:33.007] plan(): Setting new future strategy stack:
[17:39:33.008] List of future strategies:
[17:39:33.008] 1. sequential:
[17:39:33.008]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:33.008]    - tweaked: FALSE
[17:39:33.008]    - call: NULL
[17:39:33.008] plan(): nbrOfWorkers() = 1
[17:39:33.009] plan(): Setting new future strategy stack:
[17:39:33.009] List of future strategies:
[17:39:33.009] 1. sequential:
[17:39:33.009]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:33.009]    - tweaked: FALSE
[17:39:33.009]    - call: future::plan("sequential")
[17:39:33.009] plan(): nbrOfWorkers() = 1
[17:39:33.009] SequentialFuture started (and completed)
[17:39:33.010] - Launch lazy future ... done
[17:39:33.010] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: fe9766ff-07b2-9885-32f3-30f78f125d8c
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[17:39:33.011] getGlobalsAndPackages() ...
[17:39:33.011] Searching for globals...
[17:39:33.011] 
[17:39:33.011] Searching for globals ... DONE
[17:39:33.011] - globals: [0] <none>
[17:39:33.011] getGlobalsAndPackages() ... DONE
[17:39:33.011] run() for ‘Future’ ...
[17:39:33.012] - state: ‘created’
[17:39:33.012] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:33.012] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:33.012] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:33.012]   - Field: ‘label’
[17:39:33.012]   - Field: ‘local’
[17:39:33.012]   - Field: ‘owner’
[17:39:33.012]   - Field: ‘envir’
[17:39:33.012]   - Field: ‘packages’
[17:39:33.013]   - Field: ‘gc’
[17:39:33.013]   - Field: ‘conditions’
[17:39:33.013]   - Field: ‘expr’
[17:39:33.013]   - Field: ‘uuid’
[17:39:33.013]   - Field: ‘seed’
[17:39:33.013]   - Field: ‘version’
[17:39:33.013]   - Field: ‘result’
[17:39:33.013]   - Field: ‘asynchronous’
[17:39:33.013]   - Field: ‘calls’
[17:39:33.013]   - Field: ‘globals’
[17:39:33.013]   - Field: ‘stdout’
[17:39:33.014]   - Field: ‘earlySignal’
[17:39:33.014]   - Field: ‘lazy’
[17:39:33.014]   - Field: ‘state’
[17:39:33.014] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:33.014] - Launch lazy future ...
[17:39:33.014] Packages needed by the future expression (n = 0): <none>
[17:39:33.014] Packages needed by future strategies (n = 0): <none>
[17:39:33.015] {
[17:39:33.015]     {
[17:39:33.015]         {
[17:39:33.015]             ...future.startTime <- base::Sys.time()
[17:39:33.015]             {
[17:39:33.015]                 {
[17:39:33.015]                   {
[17:39:33.015]                     base::local({
[17:39:33.015]                       has_future <- base::requireNamespace("future", 
[17:39:33.015]                         quietly = TRUE)
[17:39:33.015]                       if (has_future) {
[17:39:33.015]                         ns <- base::getNamespace("future")
[17:39:33.015]                         version <- ns[[".package"]][["version"]]
[17:39:33.015]                         if (is.null(version)) 
[17:39:33.015]                           version <- utils::packageVersion("future")
[17:39:33.015]                       }
[17:39:33.015]                       else {
[17:39:33.015]                         version <- NULL
[17:39:33.015]                       }
[17:39:33.015]                       if (!has_future || version < "1.8.0") {
[17:39:33.015]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:33.015]                           "", base::R.version$version.string), 
[17:39:33.015]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:33.015]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:33.015]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:33.015]                             "release", "version")], collapse = " "), 
[17:39:33.015]                           hostname = base::Sys.info()[["nodename"]])
[17:39:33.015]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:33.015]                           info)
[17:39:33.015]                         info <- base::paste(info, collapse = "; ")
[17:39:33.015]                         if (!has_future) {
[17:39:33.015]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:33.015]                             info)
[17:39:33.015]                         }
[17:39:33.015]                         else {
[17:39:33.015]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:33.015]                             info, version)
[17:39:33.015]                         }
[17:39:33.015]                         base::stop(msg)
[17:39:33.015]                       }
[17:39:33.015]                     })
[17:39:33.015]                   }
[17:39:33.015]                   ...future.strategy.old <- future::plan("list")
[17:39:33.015]                   options(future.plan = NULL)
[17:39:33.015]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:33.015]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:33.015]                 }
[17:39:33.015]                 ...future.workdir <- getwd()
[17:39:33.015]             }
[17:39:33.015]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:33.015]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:33.015]         }
[17:39:33.015]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:33.015]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:33.015]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:33.015]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:33.015]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:33.015]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:33.015]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:33.015]             base::names(...future.oldOptions))
[17:39:33.015]     }
[17:39:33.015]     if (FALSE) {
[17:39:33.015]     }
[17:39:33.015]     else {
[17:39:33.015]         if (TRUE) {
[17:39:33.015]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:33.015]                 open = "w")
[17:39:33.015]         }
[17:39:33.015]         else {
[17:39:33.015]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:33.015]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:33.015]         }
[17:39:33.015]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:33.015]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:33.015]             base::sink(type = "output", split = FALSE)
[17:39:33.015]             base::close(...future.stdout)
[17:39:33.015]         }, add = TRUE)
[17:39:33.015]     }
[17:39:33.015]     ...future.frame <- base::sys.nframe()
[17:39:33.015]     ...future.conditions <- base::list()
[17:39:33.015]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:33.015]     if (FALSE) {
[17:39:33.015]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:33.015]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:33.015]     }
[17:39:33.015]     ...future.result <- base::tryCatch({
[17:39:33.015]         base::withCallingHandlers({
[17:39:33.015]             ...future.value <- base::withVisible(base::local(1))
[17:39:33.015]             future::FutureResult(value = ...future.value$value, 
[17:39:33.015]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:33.015]                   ...future.rng), globalenv = if (FALSE) 
[17:39:33.015]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:33.015]                     ...future.globalenv.names))
[17:39:33.015]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:33.015]         }, condition = base::local({
[17:39:33.015]             c <- base::c
[17:39:33.015]             inherits <- base::inherits
[17:39:33.015]             invokeRestart <- base::invokeRestart
[17:39:33.015]             length <- base::length
[17:39:33.015]             list <- base::list
[17:39:33.015]             seq.int <- base::seq.int
[17:39:33.015]             signalCondition <- base::signalCondition
[17:39:33.015]             sys.calls <- base::sys.calls
[17:39:33.015]             `[[` <- base::`[[`
[17:39:33.015]             `+` <- base::`+`
[17:39:33.015]             `<<-` <- base::`<<-`
[17:39:33.015]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:33.015]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:33.015]                   3L)]
[17:39:33.015]             }
[17:39:33.015]             function(cond) {
[17:39:33.015]                 is_error <- inherits(cond, "error")
[17:39:33.015]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:33.015]                   NULL)
[17:39:33.015]                 if (is_error) {
[17:39:33.015]                   sessionInformation <- function() {
[17:39:33.015]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:33.015]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:33.015]                       search = base::search(), system = base::Sys.info())
[17:39:33.015]                   }
[17:39:33.015]                   ...future.conditions[[length(...future.conditions) + 
[17:39:33.015]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:33.015]                     cond$call), session = sessionInformation(), 
[17:39:33.015]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:33.015]                   signalCondition(cond)
[17:39:33.015]                 }
[17:39:33.015]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:33.015]                 "immediateCondition"))) {
[17:39:33.015]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:33.015]                   ...future.conditions[[length(...future.conditions) + 
[17:39:33.015]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:33.015]                   if (TRUE && !signal) {
[17:39:33.015]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:33.015]                     {
[17:39:33.015]                       inherits <- base::inherits
[17:39:33.015]                       invokeRestart <- base::invokeRestart
[17:39:33.015]                       is.null <- base::is.null
[17:39:33.015]                       muffled <- FALSE
[17:39:33.015]                       if (inherits(cond, "message")) {
[17:39:33.015]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:33.015]                         if (muffled) 
[17:39:33.015]                           invokeRestart("muffleMessage")
[17:39:33.015]                       }
[17:39:33.015]                       else if (inherits(cond, "warning")) {
[17:39:33.015]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:33.015]                         if (muffled) 
[17:39:33.015]                           invokeRestart("muffleWarning")
[17:39:33.015]                       }
[17:39:33.015]                       else if (inherits(cond, "condition")) {
[17:39:33.015]                         if (!is.null(pattern)) {
[17:39:33.015]                           computeRestarts <- base::computeRestarts
[17:39:33.015]                           grepl <- base::grepl
[17:39:33.015]                           restarts <- computeRestarts(cond)
[17:39:33.015]                           for (restart in restarts) {
[17:39:33.015]                             name <- restart$name
[17:39:33.015]                             if (is.null(name)) 
[17:39:33.015]                               next
[17:39:33.015]                             if (!grepl(pattern, name)) 
[17:39:33.015]                               next
[17:39:33.015]                             invokeRestart(restart)
[17:39:33.015]                             muffled <- TRUE
[17:39:33.015]                             break
[17:39:33.015]                           }
[17:39:33.015]                         }
[17:39:33.015]                       }
[17:39:33.015]                       invisible(muffled)
[17:39:33.015]                     }
[17:39:33.015]                     muffleCondition(cond, pattern = "^muffle")
[17:39:33.015]                   }
[17:39:33.015]                 }
[17:39:33.015]                 else {
[17:39:33.015]                   if (TRUE) {
[17:39:33.015]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:33.015]                     {
[17:39:33.015]                       inherits <- base::inherits
[17:39:33.015]                       invokeRestart <- base::invokeRestart
[17:39:33.015]                       is.null <- base::is.null
[17:39:33.015]                       muffled <- FALSE
[17:39:33.015]                       if (inherits(cond, "message")) {
[17:39:33.015]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:33.015]                         if (muffled) 
[17:39:33.015]                           invokeRestart("muffleMessage")
[17:39:33.015]                       }
[17:39:33.015]                       else if (inherits(cond, "warning")) {
[17:39:33.015]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:33.015]                         if (muffled) 
[17:39:33.015]                           invokeRestart("muffleWarning")
[17:39:33.015]                       }
[17:39:33.015]                       else if (inherits(cond, "condition")) {
[17:39:33.015]                         if (!is.null(pattern)) {
[17:39:33.015]                           computeRestarts <- base::computeRestarts
[17:39:33.015]                           grepl <- base::grepl
[17:39:33.015]                           restarts <- computeRestarts(cond)
[17:39:33.015]                           for (restart in restarts) {
[17:39:33.015]                             name <- restart$name
[17:39:33.015]                             if (is.null(name)) 
[17:39:33.015]                               next
[17:39:33.015]                             if (!grepl(pattern, name)) 
[17:39:33.015]                               next
[17:39:33.015]                             invokeRestart(restart)
[17:39:33.015]                             muffled <- TRUE
[17:39:33.015]                             break
[17:39:33.015]                           }
[17:39:33.015]                         }
[17:39:33.015]                       }
[17:39:33.015]                       invisible(muffled)
[17:39:33.015]                     }
[17:39:33.015]                     muffleCondition(cond, pattern = "^muffle")
[17:39:33.015]                   }
[17:39:33.015]                 }
[17:39:33.015]             }
[17:39:33.015]         }))
[17:39:33.015]     }, error = function(ex) {
[17:39:33.015]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:33.015]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:33.015]                 ...future.rng), started = ...future.startTime, 
[17:39:33.015]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:33.015]             version = "1.8"), class = "FutureResult")
[17:39:33.015]     }, finally = {
[17:39:33.015]         if (!identical(...future.workdir, getwd())) 
[17:39:33.015]             setwd(...future.workdir)
[17:39:33.015]         {
[17:39:33.015]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:33.015]                 ...future.oldOptions$nwarnings <- NULL
[17:39:33.015]             }
[17:39:33.015]             base::options(...future.oldOptions)
[17:39:33.015]             if (.Platform$OS.type == "windows") {
[17:39:33.015]                 old_names <- names(...future.oldEnvVars)
[17:39:33.015]                 envs <- base::Sys.getenv()
[17:39:33.015]                 names <- names(envs)
[17:39:33.015]                 common <- intersect(names, old_names)
[17:39:33.015]                 added <- setdiff(names, old_names)
[17:39:33.015]                 removed <- setdiff(old_names, names)
[17:39:33.015]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:33.015]                   envs[common]]
[17:39:33.015]                 NAMES <- toupper(changed)
[17:39:33.015]                 args <- list()
[17:39:33.015]                 for (kk in seq_along(NAMES)) {
[17:39:33.015]                   name <- changed[[kk]]
[17:39:33.015]                   NAME <- NAMES[[kk]]
[17:39:33.015]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:33.015]                     next
[17:39:33.015]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:33.015]                 }
[17:39:33.015]                 NAMES <- toupper(added)
[17:39:33.015]                 for (kk in seq_along(NAMES)) {
[17:39:33.015]                   name <- added[[kk]]
[17:39:33.015]                   NAME <- NAMES[[kk]]
[17:39:33.015]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:33.015]                     next
[17:39:33.015]                   args[[name]] <- ""
[17:39:33.015]                 }
[17:39:33.015]                 NAMES <- toupper(removed)
[17:39:33.015]                 for (kk in seq_along(NAMES)) {
[17:39:33.015]                   name <- removed[[kk]]
[17:39:33.015]                   NAME <- NAMES[[kk]]
[17:39:33.015]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:33.015]                     next
[17:39:33.015]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:33.015]                 }
[17:39:33.015]                 if (length(args) > 0) 
[17:39:33.015]                   base::do.call(base::Sys.setenv, args = args)
[17:39:33.015]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:33.015]             }
[17:39:33.015]             else {
[17:39:33.015]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:33.015]             }
[17:39:33.015]             {
[17:39:33.015]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:33.015]                   0L) {
[17:39:33.015]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:33.015]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:33.015]                   base::options(opts)
[17:39:33.015]                 }
[17:39:33.015]                 {
[17:39:33.015]                   {
[17:39:33.015]                     NULL
[17:39:33.015]                     RNGkind("Mersenne-Twister")
[17:39:33.015]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:33.015]                       inherits = FALSE)
[17:39:33.015]                   }
[17:39:33.015]                   options(future.plan = NULL)
[17:39:33.015]                   if (is.na(NA_character_)) 
[17:39:33.015]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:33.015]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:33.015]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:33.015]                     .init = FALSE)
[17:39:33.015]                 }
[17:39:33.015]             }
[17:39:33.015]         }
[17:39:33.015]     })
[17:39:33.015]     if (TRUE) {
[17:39:33.015]         base::sink(type = "output", split = FALSE)
[17:39:33.015]         if (TRUE) {
[17:39:33.015]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:33.015]         }
[17:39:33.015]         else {
[17:39:33.015]             ...future.result["stdout"] <- base::list(NULL)
[17:39:33.015]         }
[17:39:33.015]         base::close(...future.stdout)
[17:39:33.015]         ...future.stdout <- NULL
[17:39:33.015]     }
[17:39:33.015]     ...future.result$conditions <- ...future.conditions
[17:39:33.015]     ...future.result$finished <- base::Sys.time()
[17:39:33.015]     ...future.result
[17:39:33.015] }
[17:39:33.016] plan(): Setting new future strategy stack:
[17:39:33.016] List of future strategies:
[17:39:33.016] 1. sequential:
[17:39:33.016]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:33.016]    - tweaked: FALSE
[17:39:33.016]    - call: NULL
[17:39:33.017] plan(): nbrOfWorkers() = 1
[17:39:33.017] plan(): Setting new future strategy stack:
[17:39:33.018] List of future strategies:
[17:39:33.018] 1. sequential:
[17:39:33.018]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:33.018]    - tweaked: FALSE
[17:39:33.018]    - call: future::plan("sequential")
[17:39:33.018] plan(): nbrOfWorkers() = 1
[17:39:33.018] SequentialFuture started (and completed)
[17:39:33.018] - Launch lazy future ... done
[17:39:33.018] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: fe9766ff-07b2-9885-32f3-30f78f125d8c
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[17:39:33.019] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[17:39:33.019] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[17:39:33.020] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[17:39:33.020] plan(): Setting new future strategy stack:
[17:39:33.021] List of future strategies:
[17:39:33.021] 1. FutureStrategy:
[17:39:33.021]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:33.021]    - tweaked: FALSE
[17:39:33.021]    - call: future::plan(oplan)
[17:39:33.031] plan(): nbrOfWorkers() = 1
> 
