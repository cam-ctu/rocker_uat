
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:39:47.144] plan(): Setting new future strategy stack:
[17:39:47.144] List of future strategies:
[17:39:47.144] 1. sequential:
[17:39:47.144]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.144]    - tweaked: FALSE
[17:39:47.144]    - call: future::plan("sequential")
[17:39:47.155] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** Globals w/ non-standard evaluation (NSE) ...")
*** Globals w/ non-standard evaluation (NSE) ...
> 
> data <- data.frame(x = 1:5, y = 1:5)
> v0 <- subset(data, x < 3)$y
> 
> for (strategy in supportedStrategies()) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("- Strategy: %s ...", strategy))
+   
+   plan(strategy)
+ 
+   ## Assert option is passed on to future
+   options(future.globals.onMissing = "error")
+   opt1 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt1, "error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   opt2 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt2, "ignore"))
+ 
+   options(future.globals.onMissing = "error")
+   res <- try({ v1 %<-% subset(data, x < 3)$y }, silent = TRUE)
+   stopifnot(inherits(res, "try-error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   v2 %<-% subset(data, x < 3)$y
+   stopifnot(identical(v2, v0))
+ 
+   ## Nested futures (requires option is passed on to future)
+   plan(list(sequential, strategy))
+   options(future.globals.onMissing = "ignore")
+   v3 %<-% {
+     a %<-% subset(data, x < 3)$y
+     a
+   } %lazy% TRUE
+   stopifnot(identical(v3, v0))
+ 
+   message(sprintf("- Strategy: %s ... DONE", strategy))
+ }
- Strategy: sequential ...
[17:39:47.187] plan(): Setting new future strategy stack:
[17:39:47.187] List of future strategies:
[17:39:47.187] 1. sequential:
[17:39:47.187]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.187]    - tweaked: FALSE
[17:39:47.187]    - call: plan(strategy)
[17:39:47.200] plan(): nbrOfWorkers() = 1
[17:39:47.202] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:39:47.202] Searching for globals...
[17:39:47.206] - globals found: [1] ‘getOption’
[17:39:47.206] Searching for globals ... DONE
[17:39:47.206] Resolving globals: FALSE
[17:39:47.207] 
[17:39:47.207] 
[17:39:47.207] getGlobalsAndPackages() ... DONE
[17:39:47.208] run() for ‘Future’ ...
[17:39:47.208] - state: ‘created’
[17:39:47.208] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:47.208] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:47.209] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:47.209]   - Field: ‘label’
[17:39:47.209]   - Field: ‘local’
[17:39:47.209]   - Field: ‘owner’
[17:39:47.209]   - Field: ‘envir’
[17:39:47.209]   - Field: ‘packages’
[17:39:47.209]   - Field: ‘gc’
[17:39:47.209]   - Field: ‘conditions’
[17:39:47.209]   - Field: ‘expr’
[17:39:47.209]   - Field: ‘uuid’
[17:39:47.209]   - Field: ‘seed’
[17:39:47.210]   - Field: ‘version’
[17:39:47.210]   - Field: ‘result’
[17:39:47.210]   - Field: ‘asynchronous’
[17:39:47.210]   - Field: ‘calls’
[17:39:47.210]   - Field: ‘globals’
[17:39:47.210]   - Field: ‘stdout’
[17:39:47.210]   - Field: ‘earlySignal’
[17:39:47.210]   - Field: ‘lazy’
[17:39:47.210]   - Field: ‘state’
[17:39:47.210] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:47.210] - Launch lazy future ...
[17:39:47.211] Packages needed by the future expression (n = 0): <none>
[17:39:47.211] Packages needed by future strategies (n = 0): <none>
[17:39:47.212] {
[17:39:47.212]     {
[17:39:47.212]         {
[17:39:47.212]             ...future.startTime <- base::Sys.time()
[17:39:47.212]             {
[17:39:47.212]                 {
[17:39:47.212]                   {
[17:39:47.212]                     base::local({
[17:39:47.212]                       has_future <- base::requireNamespace("future", 
[17:39:47.212]                         quietly = TRUE)
[17:39:47.212]                       if (has_future) {
[17:39:47.212]                         ns <- base::getNamespace("future")
[17:39:47.212]                         version <- ns[[".package"]][["version"]]
[17:39:47.212]                         if (is.null(version)) 
[17:39:47.212]                           version <- utils::packageVersion("future")
[17:39:47.212]                       }
[17:39:47.212]                       else {
[17:39:47.212]                         version <- NULL
[17:39:47.212]                       }
[17:39:47.212]                       if (!has_future || version < "1.8.0") {
[17:39:47.212]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:47.212]                           "", base::R.version$version.string), 
[17:39:47.212]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:47.212]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:47.212]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:47.212]                             "release", "version")], collapse = " "), 
[17:39:47.212]                           hostname = base::Sys.info()[["nodename"]])
[17:39:47.212]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:47.212]                           info)
[17:39:47.212]                         info <- base::paste(info, collapse = "; ")
[17:39:47.212]                         if (!has_future) {
[17:39:47.212]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:47.212]                             info)
[17:39:47.212]                         }
[17:39:47.212]                         else {
[17:39:47.212]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:47.212]                             info, version)
[17:39:47.212]                         }
[17:39:47.212]                         base::stop(msg)
[17:39:47.212]                       }
[17:39:47.212]                     })
[17:39:47.212]                   }
[17:39:47.212]                   ...future.strategy.old <- future::plan("list")
[17:39:47.212]                   options(future.plan = NULL)
[17:39:47.212]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.212]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:47.212]                 }
[17:39:47.212]                 ...future.workdir <- getwd()
[17:39:47.212]             }
[17:39:47.212]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:47.212]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:47.212]         }
[17:39:47.212]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[17:39:47.212]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:47.212]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[17:39:47.212]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:47.212]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:47.212]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:47.212]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:47.212]             base::names(...future.oldOptions))
[17:39:47.212]     }
[17:39:47.212]     if (FALSE) {
[17:39:47.212]     }
[17:39:47.212]     else {
[17:39:47.212]         if (TRUE) {
[17:39:47.212]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:47.212]                 open = "w")
[17:39:47.212]         }
[17:39:47.212]         else {
[17:39:47.212]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:47.212]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:47.212]         }
[17:39:47.212]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:47.212]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:47.212]             base::sink(type = "output", split = FALSE)
[17:39:47.212]             base::close(...future.stdout)
[17:39:47.212]         }, add = TRUE)
[17:39:47.212]     }
[17:39:47.212]     ...future.frame <- base::sys.nframe()
[17:39:47.212]     ...future.conditions <- base::list()
[17:39:47.212]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:47.212]     if (FALSE) {
[17:39:47.212]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:47.212]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:47.212]     }
[17:39:47.212]     ...future.result <- base::tryCatch({
[17:39:47.212]         base::withCallingHandlers({
[17:39:47.212]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[17:39:47.212]             future::FutureResult(value = ...future.value$value, 
[17:39:47.212]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.212]                   ...future.rng), globalenv = if (FALSE) 
[17:39:47.212]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:47.212]                     ...future.globalenv.names))
[17:39:47.212]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:47.212]         }, condition = base::local({
[17:39:47.212]             c <- base::c
[17:39:47.212]             inherits <- base::inherits
[17:39:47.212]             invokeRestart <- base::invokeRestart
[17:39:47.212]             length <- base::length
[17:39:47.212]             list <- base::list
[17:39:47.212]             seq.int <- base::seq.int
[17:39:47.212]             signalCondition <- base::signalCondition
[17:39:47.212]             sys.calls <- base::sys.calls
[17:39:47.212]             `[[` <- base::`[[`
[17:39:47.212]             `+` <- base::`+`
[17:39:47.212]             `<<-` <- base::`<<-`
[17:39:47.212]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:47.212]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:47.212]                   3L)]
[17:39:47.212]             }
[17:39:47.212]             function(cond) {
[17:39:47.212]                 is_error <- inherits(cond, "error")
[17:39:47.212]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:47.212]                   NULL)
[17:39:47.212]                 if (is_error) {
[17:39:47.212]                   sessionInformation <- function() {
[17:39:47.212]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:47.212]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:47.212]                       search = base::search(), system = base::Sys.info())
[17:39:47.212]                   }
[17:39:47.212]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.212]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:47.212]                     cond$call), session = sessionInformation(), 
[17:39:47.212]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:47.212]                   signalCondition(cond)
[17:39:47.212]                 }
[17:39:47.212]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:47.212]                 "immediateCondition"))) {
[17:39:47.212]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:47.212]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.212]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:47.212]                   if (TRUE && !signal) {
[17:39:47.212]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.212]                     {
[17:39:47.212]                       inherits <- base::inherits
[17:39:47.212]                       invokeRestart <- base::invokeRestart
[17:39:47.212]                       is.null <- base::is.null
[17:39:47.212]                       muffled <- FALSE
[17:39:47.212]                       if (inherits(cond, "message")) {
[17:39:47.212]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.212]                         if (muffled) 
[17:39:47.212]                           invokeRestart("muffleMessage")
[17:39:47.212]                       }
[17:39:47.212]                       else if (inherits(cond, "warning")) {
[17:39:47.212]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.212]                         if (muffled) 
[17:39:47.212]                           invokeRestart("muffleWarning")
[17:39:47.212]                       }
[17:39:47.212]                       else if (inherits(cond, "condition")) {
[17:39:47.212]                         if (!is.null(pattern)) {
[17:39:47.212]                           computeRestarts <- base::computeRestarts
[17:39:47.212]                           grepl <- base::grepl
[17:39:47.212]                           restarts <- computeRestarts(cond)
[17:39:47.212]                           for (restart in restarts) {
[17:39:47.212]                             name <- restart$name
[17:39:47.212]                             if (is.null(name)) 
[17:39:47.212]                               next
[17:39:47.212]                             if (!grepl(pattern, name)) 
[17:39:47.212]                               next
[17:39:47.212]                             invokeRestart(restart)
[17:39:47.212]                             muffled <- TRUE
[17:39:47.212]                             break
[17:39:47.212]                           }
[17:39:47.212]                         }
[17:39:47.212]                       }
[17:39:47.212]                       invisible(muffled)
[17:39:47.212]                     }
[17:39:47.212]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.212]                   }
[17:39:47.212]                 }
[17:39:47.212]                 else {
[17:39:47.212]                   if (TRUE) {
[17:39:47.212]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.212]                     {
[17:39:47.212]                       inherits <- base::inherits
[17:39:47.212]                       invokeRestart <- base::invokeRestart
[17:39:47.212]                       is.null <- base::is.null
[17:39:47.212]                       muffled <- FALSE
[17:39:47.212]                       if (inherits(cond, "message")) {
[17:39:47.212]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.212]                         if (muffled) 
[17:39:47.212]                           invokeRestart("muffleMessage")
[17:39:47.212]                       }
[17:39:47.212]                       else if (inherits(cond, "warning")) {
[17:39:47.212]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.212]                         if (muffled) 
[17:39:47.212]                           invokeRestart("muffleWarning")
[17:39:47.212]                       }
[17:39:47.212]                       else if (inherits(cond, "condition")) {
[17:39:47.212]                         if (!is.null(pattern)) {
[17:39:47.212]                           computeRestarts <- base::computeRestarts
[17:39:47.212]                           grepl <- base::grepl
[17:39:47.212]                           restarts <- computeRestarts(cond)
[17:39:47.212]                           for (restart in restarts) {
[17:39:47.212]                             name <- restart$name
[17:39:47.212]                             if (is.null(name)) 
[17:39:47.212]                               next
[17:39:47.212]                             if (!grepl(pattern, name)) 
[17:39:47.212]                               next
[17:39:47.212]                             invokeRestart(restart)
[17:39:47.212]                             muffled <- TRUE
[17:39:47.212]                             break
[17:39:47.212]                           }
[17:39:47.212]                         }
[17:39:47.212]                       }
[17:39:47.212]                       invisible(muffled)
[17:39:47.212]                     }
[17:39:47.212]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.212]                   }
[17:39:47.212]                 }
[17:39:47.212]             }
[17:39:47.212]         }))
[17:39:47.212]     }, error = function(ex) {
[17:39:47.212]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:47.212]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.212]                 ...future.rng), started = ...future.startTime, 
[17:39:47.212]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:47.212]             version = "1.8"), class = "FutureResult")
[17:39:47.212]     }, finally = {
[17:39:47.212]         if (!identical(...future.workdir, getwd())) 
[17:39:47.212]             setwd(...future.workdir)
[17:39:47.212]         {
[17:39:47.212]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:47.212]                 ...future.oldOptions$nwarnings <- NULL
[17:39:47.212]             }
[17:39:47.212]             base::options(...future.oldOptions)
[17:39:47.212]             if (.Platform$OS.type == "windows") {
[17:39:47.212]                 old_names <- names(...future.oldEnvVars)
[17:39:47.212]                 envs <- base::Sys.getenv()
[17:39:47.212]                 names <- names(envs)
[17:39:47.212]                 common <- intersect(names, old_names)
[17:39:47.212]                 added <- setdiff(names, old_names)
[17:39:47.212]                 removed <- setdiff(old_names, names)
[17:39:47.212]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:47.212]                   envs[common]]
[17:39:47.212]                 NAMES <- toupper(changed)
[17:39:47.212]                 args <- list()
[17:39:47.212]                 for (kk in seq_along(NAMES)) {
[17:39:47.212]                   name <- changed[[kk]]
[17:39:47.212]                   NAME <- NAMES[[kk]]
[17:39:47.212]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.212]                     next
[17:39:47.212]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.212]                 }
[17:39:47.212]                 NAMES <- toupper(added)
[17:39:47.212]                 for (kk in seq_along(NAMES)) {
[17:39:47.212]                   name <- added[[kk]]
[17:39:47.212]                   NAME <- NAMES[[kk]]
[17:39:47.212]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.212]                     next
[17:39:47.212]                   args[[name]] <- ""
[17:39:47.212]                 }
[17:39:47.212]                 NAMES <- toupper(removed)
[17:39:47.212]                 for (kk in seq_along(NAMES)) {
[17:39:47.212]                   name <- removed[[kk]]
[17:39:47.212]                   NAME <- NAMES[[kk]]
[17:39:47.212]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.212]                     next
[17:39:47.212]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.212]                 }
[17:39:47.212]                 if (length(args) > 0) 
[17:39:47.212]                   base::do.call(base::Sys.setenv, args = args)
[17:39:47.212]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:47.212]             }
[17:39:47.212]             else {
[17:39:47.212]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:47.212]             }
[17:39:47.212]             {
[17:39:47.212]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:47.212]                   0L) {
[17:39:47.212]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:47.212]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:47.212]                   base::options(opts)
[17:39:47.212]                 }
[17:39:47.212]                 {
[17:39:47.212]                   {
[17:39:47.212]                     NULL
[17:39:47.212]                     RNGkind("Mersenne-Twister")
[17:39:47.212]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:47.212]                       inherits = FALSE)
[17:39:47.212]                   }
[17:39:47.212]                   options(future.plan = NULL)
[17:39:47.212]                   if (is.na(NA_character_)) 
[17:39:47.212]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.212]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:47.212]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:47.212]                     .init = FALSE)
[17:39:47.212]                 }
[17:39:47.212]             }
[17:39:47.212]         }
[17:39:47.212]     })
[17:39:47.212]     if (TRUE) {
[17:39:47.212]         base::sink(type = "output", split = FALSE)
[17:39:47.212]         if (TRUE) {
[17:39:47.212]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:47.212]         }
[17:39:47.212]         else {
[17:39:47.212]             ...future.result["stdout"] <- base::list(NULL)
[17:39:47.212]         }
[17:39:47.212]         base::close(...future.stdout)
[17:39:47.212]         ...future.stdout <- NULL
[17:39:47.212]     }
[17:39:47.212]     ...future.result$conditions <- ...future.conditions
[17:39:47.212]     ...future.result$finished <- base::Sys.time()
[17:39:47.212]     ...future.result
[17:39:47.212] }
[17:39:47.214] plan(): Setting new future strategy stack:
[17:39:47.214] List of future strategies:
[17:39:47.214] 1. sequential:
[17:39:47.214]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.214]    - tweaked: FALSE
[17:39:47.214]    - call: NULL
[17:39:47.215] plan(): nbrOfWorkers() = 1
[17:39:47.216] plan(): Setting new future strategy stack:
[17:39:47.216] List of future strategies:
[17:39:47.216] 1. sequential:
[17:39:47.216]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.216]    - tweaked: FALSE
[17:39:47.216]    - call: plan(strategy)
[17:39:47.216] plan(): nbrOfWorkers() = 1
[17:39:47.217] SequentialFuture started (and completed)
[17:39:47.217] - Launch lazy future ... done
[17:39:47.217] run() for ‘SequentialFuture’ ... done
[17:39:47.218] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:47.218] Searching for globals...
[17:39:47.218] - globals found: [1] ‘getOption’
[17:39:47.218] Searching for globals ... DONE
[17:39:47.219] Resolving globals: FALSE
[17:39:47.219] 
[17:39:47.219] 
[17:39:47.219] getGlobalsAndPackages() ... DONE
[17:39:47.219] run() for ‘Future’ ...
[17:39:47.219] - state: ‘created’
[17:39:47.219] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:47.220] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:47.220] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:47.220]   - Field: ‘label’
[17:39:47.220]   - Field: ‘local’
[17:39:47.220]   - Field: ‘owner’
[17:39:47.220]   - Field: ‘envir’
[17:39:47.220]   - Field: ‘packages’
[17:39:47.220]   - Field: ‘gc’
[17:39:47.220]   - Field: ‘conditions’
[17:39:47.221]   - Field: ‘expr’
[17:39:47.221]   - Field: ‘uuid’
[17:39:47.221]   - Field: ‘seed’
[17:39:47.221]   - Field: ‘version’
[17:39:47.221]   - Field: ‘result’
[17:39:47.221]   - Field: ‘asynchronous’
[17:39:47.221]   - Field: ‘calls’
[17:39:47.221]   - Field: ‘globals’
[17:39:47.221]   - Field: ‘stdout’
[17:39:47.221]   - Field: ‘earlySignal’
[17:39:47.221]   - Field: ‘lazy’
[17:39:47.222]   - Field: ‘state’
[17:39:47.222] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:47.222] - Launch lazy future ...
[17:39:47.222] Packages needed by the future expression (n = 0): <none>
[17:39:47.222] Packages needed by future strategies (n = 0): <none>
[17:39:47.222] {
[17:39:47.222]     {
[17:39:47.222]         {
[17:39:47.222]             ...future.startTime <- base::Sys.time()
[17:39:47.222]             {
[17:39:47.222]                 {
[17:39:47.222]                   {
[17:39:47.222]                     base::local({
[17:39:47.222]                       has_future <- base::requireNamespace("future", 
[17:39:47.222]                         quietly = TRUE)
[17:39:47.222]                       if (has_future) {
[17:39:47.222]                         ns <- base::getNamespace("future")
[17:39:47.222]                         version <- ns[[".package"]][["version"]]
[17:39:47.222]                         if (is.null(version)) 
[17:39:47.222]                           version <- utils::packageVersion("future")
[17:39:47.222]                       }
[17:39:47.222]                       else {
[17:39:47.222]                         version <- NULL
[17:39:47.222]                       }
[17:39:47.222]                       if (!has_future || version < "1.8.0") {
[17:39:47.222]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:47.222]                           "", base::R.version$version.string), 
[17:39:47.222]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:47.222]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:47.222]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:47.222]                             "release", "version")], collapse = " "), 
[17:39:47.222]                           hostname = base::Sys.info()[["nodename"]])
[17:39:47.222]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:47.222]                           info)
[17:39:47.222]                         info <- base::paste(info, collapse = "; ")
[17:39:47.222]                         if (!has_future) {
[17:39:47.222]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:47.222]                             info)
[17:39:47.222]                         }
[17:39:47.222]                         else {
[17:39:47.222]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:47.222]                             info, version)
[17:39:47.222]                         }
[17:39:47.222]                         base::stop(msg)
[17:39:47.222]                       }
[17:39:47.222]                     })
[17:39:47.222]                   }
[17:39:47.222]                   ...future.strategy.old <- future::plan("list")
[17:39:47.222]                   options(future.plan = NULL)
[17:39:47.222]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.222]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:47.222]                 }
[17:39:47.222]                 ...future.workdir <- getwd()
[17:39:47.222]             }
[17:39:47.222]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:47.222]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:47.222]         }
[17:39:47.222]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:47.222]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:47.222]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:47.222]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:47.222]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:47.222]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:47.222]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:47.222]             base::names(...future.oldOptions))
[17:39:47.222]     }
[17:39:47.222]     if (FALSE) {
[17:39:47.222]     }
[17:39:47.222]     else {
[17:39:47.222]         if (TRUE) {
[17:39:47.222]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:47.222]                 open = "w")
[17:39:47.222]         }
[17:39:47.222]         else {
[17:39:47.222]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:47.222]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:47.222]         }
[17:39:47.222]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:47.222]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:47.222]             base::sink(type = "output", split = FALSE)
[17:39:47.222]             base::close(...future.stdout)
[17:39:47.222]         }, add = TRUE)
[17:39:47.222]     }
[17:39:47.222]     ...future.frame <- base::sys.nframe()
[17:39:47.222]     ...future.conditions <- base::list()
[17:39:47.222]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:47.222]     if (FALSE) {
[17:39:47.222]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:47.222]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:47.222]     }
[17:39:47.222]     ...future.result <- base::tryCatch({
[17:39:47.222]         base::withCallingHandlers({
[17:39:47.222]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[17:39:47.222]             future::FutureResult(value = ...future.value$value, 
[17:39:47.222]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.222]                   ...future.rng), globalenv = if (FALSE) 
[17:39:47.222]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:47.222]                     ...future.globalenv.names))
[17:39:47.222]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:47.222]         }, condition = base::local({
[17:39:47.222]             c <- base::c
[17:39:47.222]             inherits <- base::inherits
[17:39:47.222]             invokeRestart <- base::invokeRestart
[17:39:47.222]             length <- base::length
[17:39:47.222]             list <- base::list
[17:39:47.222]             seq.int <- base::seq.int
[17:39:47.222]             signalCondition <- base::signalCondition
[17:39:47.222]             sys.calls <- base::sys.calls
[17:39:47.222]             `[[` <- base::`[[`
[17:39:47.222]             `+` <- base::`+`
[17:39:47.222]             `<<-` <- base::`<<-`
[17:39:47.222]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:47.222]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:47.222]                   3L)]
[17:39:47.222]             }
[17:39:47.222]             function(cond) {
[17:39:47.222]                 is_error <- inherits(cond, "error")
[17:39:47.222]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:47.222]                   NULL)
[17:39:47.222]                 if (is_error) {
[17:39:47.222]                   sessionInformation <- function() {
[17:39:47.222]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:47.222]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:47.222]                       search = base::search(), system = base::Sys.info())
[17:39:47.222]                   }
[17:39:47.222]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.222]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:47.222]                     cond$call), session = sessionInformation(), 
[17:39:47.222]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:47.222]                   signalCondition(cond)
[17:39:47.222]                 }
[17:39:47.222]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:47.222]                 "immediateCondition"))) {
[17:39:47.222]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:47.222]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.222]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:47.222]                   if (TRUE && !signal) {
[17:39:47.222]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.222]                     {
[17:39:47.222]                       inherits <- base::inherits
[17:39:47.222]                       invokeRestart <- base::invokeRestart
[17:39:47.222]                       is.null <- base::is.null
[17:39:47.222]                       muffled <- FALSE
[17:39:47.222]                       if (inherits(cond, "message")) {
[17:39:47.222]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.222]                         if (muffled) 
[17:39:47.222]                           invokeRestart("muffleMessage")
[17:39:47.222]                       }
[17:39:47.222]                       else if (inherits(cond, "warning")) {
[17:39:47.222]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.222]                         if (muffled) 
[17:39:47.222]                           invokeRestart("muffleWarning")
[17:39:47.222]                       }
[17:39:47.222]                       else if (inherits(cond, "condition")) {
[17:39:47.222]                         if (!is.null(pattern)) {
[17:39:47.222]                           computeRestarts <- base::computeRestarts
[17:39:47.222]                           grepl <- base::grepl
[17:39:47.222]                           restarts <- computeRestarts(cond)
[17:39:47.222]                           for (restart in restarts) {
[17:39:47.222]                             name <- restart$name
[17:39:47.222]                             if (is.null(name)) 
[17:39:47.222]                               next
[17:39:47.222]                             if (!grepl(pattern, name)) 
[17:39:47.222]                               next
[17:39:47.222]                             invokeRestart(restart)
[17:39:47.222]                             muffled <- TRUE
[17:39:47.222]                             break
[17:39:47.222]                           }
[17:39:47.222]                         }
[17:39:47.222]                       }
[17:39:47.222]                       invisible(muffled)
[17:39:47.222]                     }
[17:39:47.222]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.222]                   }
[17:39:47.222]                 }
[17:39:47.222]                 else {
[17:39:47.222]                   if (TRUE) {
[17:39:47.222]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.222]                     {
[17:39:47.222]                       inherits <- base::inherits
[17:39:47.222]                       invokeRestart <- base::invokeRestart
[17:39:47.222]                       is.null <- base::is.null
[17:39:47.222]                       muffled <- FALSE
[17:39:47.222]                       if (inherits(cond, "message")) {
[17:39:47.222]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.222]                         if (muffled) 
[17:39:47.222]                           invokeRestart("muffleMessage")
[17:39:47.222]                       }
[17:39:47.222]                       else if (inherits(cond, "warning")) {
[17:39:47.222]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.222]                         if (muffled) 
[17:39:47.222]                           invokeRestart("muffleWarning")
[17:39:47.222]                       }
[17:39:47.222]                       else if (inherits(cond, "condition")) {
[17:39:47.222]                         if (!is.null(pattern)) {
[17:39:47.222]                           computeRestarts <- base::computeRestarts
[17:39:47.222]                           grepl <- base::grepl
[17:39:47.222]                           restarts <- computeRestarts(cond)
[17:39:47.222]                           for (restart in restarts) {
[17:39:47.222]                             name <- restart$name
[17:39:47.222]                             if (is.null(name)) 
[17:39:47.222]                               next
[17:39:47.222]                             if (!grepl(pattern, name)) 
[17:39:47.222]                               next
[17:39:47.222]                             invokeRestart(restart)
[17:39:47.222]                             muffled <- TRUE
[17:39:47.222]                             break
[17:39:47.222]                           }
[17:39:47.222]                         }
[17:39:47.222]                       }
[17:39:47.222]                       invisible(muffled)
[17:39:47.222]                     }
[17:39:47.222]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.222]                   }
[17:39:47.222]                 }
[17:39:47.222]             }
[17:39:47.222]         }))
[17:39:47.222]     }, error = function(ex) {
[17:39:47.222]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:47.222]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.222]                 ...future.rng), started = ...future.startTime, 
[17:39:47.222]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:47.222]             version = "1.8"), class = "FutureResult")
[17:39:47.222]     }, finally = {
[17:39:47.222]         if (!identical(...future.workdir, getwd())) 
[17:39:47.222]             setwd(...future.workdir)
[17:39:47.222]         {
[17:39:47.222]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:47.222]                 ...future.oldOptions$nwarnings <- NULL
[17:39:47.222]             }
[17:39:47.222]             base::options(...future.oldOptions)
[17:39:47.222]             if (.Platform$OS.type == "windows") {
[17:39:47.222]                 old_names <- names(...future.oldEnvVars)
[17:39:47.222]                 envs <- base::Sys.getenv()
[17:39:47.222]                 names <- names(envs)
[17:39:47.222]                 common <- intersect(names, old_names)
[17:39:47.222]                 added <- setdiff(names, old_names)
[17:39:47.222]                 removed <- setdiff(old_names, names)
[17:39:47.222]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:47.222]                   envs[common]]
[17:39:47.222]                 NAMES <- toupper(changed)
[17:39:47.222]                 args <- list()
[17:39:47.222]                 for (kk in seq_along(NAMES)) {
[17:39:47.222]                   name <- changed[[kk]]
[17:39:47.222]                   NAME <- NAMES[[kk]]
[17:39:47.222]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.222]                     next
[17:39:47.222]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.222]                 }
[17:39:47.222]                 NAMES <- toupper(added)
[17:39:47.222]                 for (kk in seq_along(NAMES)) {
[17:39:47.222]                   name <- added[[kk]]
[17:39:47.222]                   NAME <- NAMES[[kk]]
[17:39:47.222]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.222]                     next
[17:39:47.222]                   args[[name]] <- ""
[17:39:47.222]                 }
[17:39:47.222]                 NAMES <- toupper(removed)
[17:39:47.222]                 for (kk in seq_along(NAMES)) {
[17:39:47.222]                   name <- removed[[kk]]
[17:39:47.222]                   NAME <- NAMES[[kk]]
[17:39:47.222]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.222]                     next
[17:39:47.222]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.222]                 }
[17:39:47.222]                 if (length(args) > 0) 
[17:39:47.222]                   base::do.call(base::Sys.setenv, args = args)
[17:39:47.222]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:47.222]             }
[17:39:47.222]             else {
[17:39:47.222]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:47.222]             }
[17:39:47.222]             {
[17:39:47.222]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:47.222]                   0L) {
[17:39:47.222]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:47.222]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:47.222]                   base::options(opts)
[17:39:47.222]                 }
[17:39:47.222]                 {
[17:39:47.222]                   {
[17:39:47.222]                     NULL
[17:39:47.222]                     RNGkind("Mersenne-Twister")
[17:39:47.222]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:47.222]                       inherits = FALSE)
[17:39:47.222]                   }
[17:39:47.222]                   options(future.plan = NULL)
[17:39:47.222]                   if (is.na(NA_character_)) 
[17:39:47.222]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.222]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:47.222]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:47.222]                     .init = FALSE)
[17:39:47.222]                 }
[17:39:47.222]             }
[17:39:47.222]         }
[17:39:47.222]     })
[17:39:47.222]     if (TRUE) {
[17:39:47.222]         base::sink(type = "output", split = FALSE)
[17:39:47.222]         if (TRUE) {
[17:39:47.222]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:47.222]         }
[17:39:47.222]         else {
[17:39:47.222]             ...future.result["stdout"] <- base::list(NULL)
[17:39:47.222]         }
[17:39:47.222]         base::close(...future.stdout)
[17:39:47.222]         ...future.stdout <- NULL
[17:39:47.222]     }
[17:39:47.222]     ...future.result$conditions <- ...future.conditions
[17:39:47.222]     ...future.result$finished <- base::Sys.time()
[17:39:47.222]     ...future.result
[17:39:47.222] }
[17:39:47.224] plan(): Setting new future strategy stack:
[17:39:47.224] List of future strategies:
[17:39:47.224] 1. sequential:
[17:39:47.224]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.224]    - tweaked: FALSE
[17:39:47.224]    - call: NULL
[17:39:47.225] plan(): nbrOfWorkers() = 1
[17:39:47.225] plan(): Setting new future strategy stack:
[17:39:47.225] List of future strategies:
[17:39:47.225] 1. sequential:
[17:39:47.225]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.225]    - tweaked: FALSE
[17:39:47.225]    - call: plan(strategy)
[17:39:47.226] plan(): nbrOfWorkers() = 1
[17:39:47.226] SequentialFuture started (and completed)
[17:39:47.226] - Launch lazy future ... done
[17:39:47.226] run() for ‘SequentialFuture’ ... done
[17:39:47.227] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:39:47.227] Searching for globals...
[17:39:47.228] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:47.228] Searching for globals...
[17:39:47.229] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:39:47.229] Searching for globals ... DONE
[17:39:47.229] Resolving globals: FALSE
[17:39:47.230] The total size of the 1 globals is 160 bytes (160 bytes)
[17:39:47.231] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:39:47.231] - globals: [1] ‘data’
[17:39:47.231] 
[17:39:47.231] getGlobalsAndPackages() ... DONE
[17:39:47.231] run() for ‘Future’ ...
[17:39:47.231] - state: ‘created’
[17:39:47.232] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:47.232] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:47.232] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:47.232]   - Field: ‘label’
[17:39:47.232]   - Field: ‘local’
[17:39:47.232]   - Field: ‘owner’
[17:39:47.232]   - Field: ‘envir’
[17:39:47.232]   - Field: ‘packages’
[17:39:47.233]   - Field: ‘gc’
[17:39:47.233]   - Field: ‘conditions’
[17:39:47.233]   - Field: ‘expr’
[17:39:47.233]   - Field: ‘uuid’
[17:39:47.233]   - Field: ‘seed’
[17:39:47.233]   - Field: ‘version’
[17:39:47.233]   - Field: ‘result’
[17:39:47.233]   - Field: ‘asynchronous’
[17:39:47.236]   - Field: ‘calls’
[17:39:47.236]   - Field: ‘globals’
[17:39:47.236]   - Field: ‘stdout’
[17:39:47.236]   - Field: ‘earlySignal’
[17:39:47.236]   - Field: ‘lazy’
[17:39:47.236]   - Field: ‘state’
[17:39:47.236] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:47.237] - Launch lazy future ...
[17:39:47.237] Packages needed by the future expression (n = 0): <none>
[17:39:47.237] Packages needed by future strategies (n = 0): <none>
[17:39:47.237] {
[17:39:47.237]     {
[17:39:47.237]         {
[17:39:47.237]             ...future.startTime <- base::Sys.time()
[17:39:47.237]             {
[17:39:47.237]                 {
[17:39:47.237]                   {
[17:39:47.237]                     base::local({
[17:39:47.237]                       has_future <- base::requireNamespace("future", 
[17:39:47.237]                         quietly = TRUE)
[17:39:47.237]                       if (has_future) {
[17:39:47.237]                         ns <- base::getNamespace("future")
[17:39:47.237]                         version <- ns[[".package"]][["version"]]
[17:39:47.237]                         if (is.null(version)) 
[17:39:47.237]                           version <- utils::packageVersion("future")
[17:39:47.237]                       }
[17:39:47.237]                       else {
[17:39:47.237]                         version <- NULL
[17:39:47.237]                       }
[17:39:47.237]                       if (!has_future || version < "1.8.0") {
[17:39:47.237]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:47.237]                           "", base::R.version$version.string), 
[17:39:47.237]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:47.237]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:47.237]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:47.237]                             "release", "version")], collapse = " "), 
[17:39:47.237]                           hostname = base::Sys.info()[["nodename"]])
[17:39:47.237]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:47.237]                           info)
[17:39:47.237]                         info <- base::paste(info, collapse = "; ")
[17:39:47.237]                         if (!has_future) {
[17:39:47.237]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:47.237]                             info)
[17:39:47.237]                         }
[17:39:47.237]                         else {
[17:39:47.237]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:47.237]                             info, version)
[17:39:47.237]                         }
[17:39:47.237]                         base::stop(msg)
[17:39:47.237]                       }
[17:39:47.237]                     })
[17:39:47.237]                   }
[17:39:47.237]                   ...future.strategy.old <- future::plan("list")
[17:39:47.237]                   options(future.plan = NULL)
[17:39:47.237]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.237]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:47.237]                 }
[17:39:47.237]                 ...future.workdir <- getwd()
[17:39:47.237]             }
[17:39:47.237]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:47.237]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:47.237]         }
[17:39:47.237]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:47.237]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:47.237]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:47.237]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:47.237]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:47.237]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:47.237]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:47.237]             base::names(...future.oldOptions))
[17:39:47.237]     }
[17:39:47.237]     if (FALSE) {
[17:39:47.237]     }
[17:39:47.237]     else {
[17:39:47.237]         if (TRUE) {
[17:39:47.237]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:47.237]                 open = "w")
[17:39:47.237]         }
[17:39:47.237]         else {
[17:39:47.237]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:47.237]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:47.237]         }
[17:39:47.237]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:47.237]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:47.237]             base::sink(type = "output", split = FALSE)
[17:39:47.237]             base::close(...future.stdout)
[17:39:47.237]         }, add = TRUE)
[17:39:47.237]     }
[17:39:47.237]     ...future.frame <- base::sys.nframe()
[17:39:47.237]     ...future.conditions <- base::list()
[17:39:47.237]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:47.237]     if (FALSE) {
[17:39:47.237]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:47.237]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:47.237]     }
[17:39:47.237]     ...future.result <- base::tryCatch({
[17:39:47.237]         base::withCallingHandlers({
[17:39:47.237]             ...future.value <- base::withVisible(base::local(subset(data, 
[17:39:47.237]                 x < 3)$y))
[17:39:47.237]             future::FutureResult(value = ...future.value$value, 
[17:39:47.237]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.237]                   ...future.rng), globalenv = if (FALSE) 
[17:39:47.237]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:47.237]                     ...future.globalenv.names))
[17:39:47.237]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:47.237]         }, condition = base::local({
[17:39:47.237]             c <- base::c
[17:39:47.237]             inherits <- base::inherits
[17:39:47.237]             invokeRestart <- base::invokeRestart
[17:39:47.237]             length <- base::length
[17:39:47.237]             list <- base::list
[17:39:47.237]             seq.int <- base::seq.int
[17:39:47.237]             signalCondition <- base::signalCondition
[17:39:47.237]             sys.calls <- base::sys.calls
[17:39:47.237]             `[[` <- base::`[[`
[17:39:47.237]             `+` <- base::`+`
[17:39:47.237]             `<<-` <- base::`<<-`
[17:39:47.237]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:47.237]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:47.237]                   3L)]
[17:39:47.237]             }
[17:39:47.237]             function(cond) {
[17:39:47.237]                 is_error <- inherits(cond, "error")
[17:39:47.237]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:47.237]                   NULL)
[17:39:47.237]                 if (is_error) {
[17:39:47.237]                   sessionInformation <- function() {
[17:39:47.237]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:47.237]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:47.237]                       search = base::search(), system = base::Sys.info())
[17:39:47.237]                   }
[17:39:47.237]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.237]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:47.237]                     cond$call), session = sessionInformation(), 
[17:39:47.237]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:47.237]                   signalCondition(cond)
[17:39:47.237]                 }
[17:39:47.237]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:47.237]                 "immediateCondition"))) {
[17:39:47.237]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:47.237]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.237]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:47.237]                   if (TRUE && !signal) {
[17:39:47.237]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.237]                     {
[17:39:47.237]                       inherits <- base::inherits
[17:39:47.237]                       invokeRestart <- base::invokeRestart
[17:39:47.237]                       is.null <- base::is.null
[17:39:47.237]                       muffled <- FALSE
[17:39:47.237]                       if (inherits(cond, "message")) {
[17:39:47.237]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.237]                         if (muffled) 
[17:39:47.237]                           invokeRestart("muffleMessage")
[17:39:47.237]                       }
[17:39:47.237]                       else if (inherits(cond, "warning")) {
[17:39:47.237]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.237]                         if (muffled) 
[17:39:47.237]                           invokeRestart("muffleWarning")
[17:39:47.237]                       }
[17:39:47.237]                       else if (inherits(cond, "condition")) {
[17:39:47.237]                         if (!is.null(pattern)) {
[17:39:47.237]                           computeRestarts <- base::computeRestarts
[17:39:47.237]                           grepl <- base::grepl
[17:39:47.237]                           restarts <- computeRestarts(cond)
[17:39:47.237]                           for (restart in restarts) {
[17:39:47.237]                             name <- restart$name
[17:39:47.237]                             if (is.null(name)) 
[17:39:47.237]                               next
[17:39:47.237]                             if (!grepl(pattern, name)) 
[17:39:47.237]                               next
[17:39:47.237]                             invokeRestart(restart)
[17:39:47.237]                             muffled <- TRUE
[17:39:47.237]                             break
[17:39:47.237]                           }
[17:39:47.237]                         }
[17:39:47.237]                       }
[17:39:47.237]                       invisible(muffled)
[17:39:47.237]                     }
[17:39:47.237]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.237]                   }
[17:39:47.237]                 }
[17:39:47.237]                 else {
[17:39:47.237]                   if (TRUE) {
[17:39:47.237]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.237]                     {
[17:39:47.237]                       inherits <- base::inherits
[17:39:47.237]                       invokeRestart <- base::invokeRestart
[17:39:47.237]                       is.null <- base::is.null
[17:39:47.237]                       muffled <- FALSE
[17:39:47.237]                       if (inherits(cond, "message")) {
[17:39:47.237]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.237]                         if (muffled) 
[17:39:47.237]                           invokeRestart("muffleMessage")
[17:39:47.237]                       }
[17:39:47.237]                       else if (inherits(cond, "warning")) {
[17:39:47.237]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.237]                         if (muffled) 
[17:39:47.237]                           invokeRestart("muffleWarning")
[17:39:47.237]                       }
[17:39:47.237]                       else if (inherits(cond, "condition")) {
[17:39:47.237]                         if (!is.null(pattern)) {
[17:39:47.237]                           computeRestarts <- base::computeRestarts
[17:39:47.237]                           grepl <- base::grepl
[17:39:47.237]                           restarts <- computeRestarts(cond)
[17:39:47.237]                           for (restart in restarts) {
[17:39:47.237]                             name <- restart$name
[17:39:47.237]                             if (is.null(name)) 
[17:39:47.237]                               next
[17:39:47.237]                             if (!grepl(pattern, name)) 
[17:39:47.237]                               next
[17:39:47.237]                             invokeRestart(restart)
[17:39:47.237]                             muffled <- TRUE
[17:39:47.237]                             break
[17:39:47.237]                           }
[17:39:47.237]                         }
[17:39:47.237]                       }
[17:39:47.237]                       invisible(muffled)
[17:39:47.237]                     }
[17:39:47.237]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.237]                   }
[17:39:47.237]                 }
[17:39:47.237]             }
[17:39:47.237]         }))
[17:39:47.237]     }, error = function(ex) {
[17:39:47.237]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:47.237]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.237]                 ...future.rng), started = ...future.startTime, 
[17:39:47.237]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:47.237]             version = "1.8"), class = "FutureResult")
[17:39:47.237]     }, finally = {
[17:39:47.237]         if (!identical(...future.workdir, getwd())) 
[17:39:47.237]             setwd(...future.workdir)
[17:39:47.237]         {
[17:39:47.237]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:47.237]                 ...future.oldOptions$nwarnings <- NULL
[17:39:47.237]             }
[17:39:47.237]             base::options(...future.oldOptions)
[17:39:47.237]             if (.Platform$OS.type == "windows") {
[17:39:47.237]                 old_names <- names(...future.oldEnvVars)
[17:39:47.237]                 envs <- base::Sys.getenv()
[17:39:47.237]                 names <- names(envs)
[17:39:47.237]                 common <- intersect(names, old_names)
[17:39:47.237]                 added <- setdiff(names, old_names)
[17:39:47.237]                 removed <- setdiff(old_names, names)
[17:39:47.237]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:47.237]                   envs[common]]
[17:39:47.237]                 NAMES <- toupper(changed)
[17:39:47.237]                 args <- list()
[17:39:47.237]                 for (kk in seq_along(NAMES)) {
[17:39:47.237]                   name <- changed[[kk]]
[17:39:47.237]                   NAME <- NAMES[[kk]]
[17:39:47.237]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.237]                     next
[17:39:47.237]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.237]                 }
[17:39:47.237]                 NAMES <- toupper(added)
[17:39:47.237]                 for (kk in seq_along(NAMES)) {
[17:39:47.237]                   name <- added[[kk]]
[17:39:47.237]                   NAME <- NAMES[[kk]]
[17:39:47.237]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.237]                     next
[17:39:47.237]                   args[[name]] <- ""
[17:39:47.237]                 }
[17:39:47.237]                 NAMES <- toupper(removed)
[17:39:47.237]                 for (kk in seq_along(NAMES)) {
[17:39:47.237]                   name <- removed[[kk]]
[17:39:47.237]                   NAME <- NAMES[[kk]]
[17:39:47.237]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.237]                     next
[17:39:47.237]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.237]                 }
[17:39:47.237]                 if (length(args) > 0) 
[17:39:47.237]                   base::do.call(base::Sys.setenv, args = args)
[17:39:47.237]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:47.237]             }
[17:39:47.237]             else {
[17:39:47.237]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:47.237]             }
[17:39:47.237]             {
[17:39:47.237]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:47.237]                   0L) {
[17:39:47.237]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:47.237]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:47.237]                   base::options(opts)
[17:39:47.237]                 }
[17:39:47.237]                 {
[17:39:47.237]                   {
[17:39:47.237]                     NULL
[17:39:47.237]                     RNGkind("Mersenne-Twister")
[17:39:47.237]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:47.237]                       inherits = FALSE)
[17:39:47.237]                   }
[17:39:47.237]                   options(future.plan = NULL)
[17:39:47.237]                   if (is.na(NA_character_)) 
[17:39:47.237]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.237]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:47.237]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:47.237]                     .init = FALSE)
[17:39:47.237]                 }
[17:39:47.237]             }
[17:39:47.237]         }
[17:39:47.237]     })
[17:39:47.237]     if (TRUE) {
[17:39:47.237]         base::sink(type = "output", split = FALSE)
[17:39:47.237]         if (TRUE) {
[17:39:47.237]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:47.237]         }
[17:39:47.237]         else {
[17:39:47.237]             ...future.result["stdout"] <- base::list(NULL)
[17:39:47.237]         }
[17:39:47.237]         base::close(...future.stdout)
[17:39:47.237]         ...future.stdout <- NULL
[17:39:47.237]     }
[17:39:47.237]     ...future.result$conditions <- ...future.conditions
[17:39:47.237]     ...future.result$finished <- base::Sys.time()
[17:39:47.237]     ...future.result
[17:39:47.237] }
[17:39:47.239] assign_globals() ...
[17:39:47.239] List of 1
[17:39:47.239]  $ data:'data.frame':	5 obs. of  2 variables:
[17:39:47.239]   ..$ x: int [1:5] 1 2 3 4 5
[17:39:47.239]   ..$ y: int [1:5] 1 2 3 4 5
[17:39:47.239]  - attr(*, "where")=List of 1
[17:39:47.239]   ..$ data:<environment: R_EmptyEnv> 
[17:39:47.239]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:47.239]  - attr(*, "resolved")= logi FALSE
[17:39:47.239]  - attr(*, "total_size")= num 160
[17:39:47.239]  - attr(*, "already-done")= logi TRUE
[17:39:47.245] - copied ‘data’ to environment
[17:39:47.245] assign_globals() ... done
[17:39:47.245] plan(): Setting new future strategy stack:
[17:39:47.245] List of future strategies:
[17:39:47.245] 1. sequential:
[17:39:47.245]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.245]    - tweaked: FALSE
[17:39:47.245]    - call: NULL
[17:39:47.245] plan(): nbrOfWorkers() = 1
[17:39:47.246] plan(): Setting new future strategy stack:
[17:39:47.246] List of future strategies:
[17:39:47.246] 1. sequential:
[17:39:47.246]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.246]    - tweaked: FALSE
[17:39:47.246]    - call: plan(strategy)
[17:39:47.247] plan(): nbrOfWorkers() = 1
[17:39:47.247] SequentialFuture started (and completed)
[17:39:47.247] - Launch lazy future ... done
[17:39:47.247] run() for ‘SequentialFuture’ ... done
[17:39:47.247] plan(): Setting new future strategy stack:
[17:39:47.248] List of future strategies:
[17:39:47.248] 1. sequential:
[17:39:47.248]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.248]    - tweaked: FALSE
[17:39:47.248]    - call: plan(list(sequential, strategy))
[17:39:47.248] 2. sequential:
[17:39:47.248]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.248]    - tweaked: FALSE
[17:39:47.248]    - call: plan(list(sequential, strategy))
[17:39:47.248] plan(): nbrOfWorkers() = 1
[17:39:47.248] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:47.249] Searching for globals...
[17:39:47.254] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[17:39:47.254] Searching for globals ... DONE
[17:39:47.254] Resolving globals: FALSE
[17:39:47.254] The total size of the 1 globals is 160 bytes (160 bytes)
[17:39:47.255] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:39:47.255] - globals: [1] ‘data’
[17:39:47.255] - packages: [1] ‘future’
[17:39:47.255] getGlobalsAndPackages() ... DONE
[17:39:47.255] run() for ‘Future’ ...
[17:39:47.255] - state: ‘created’
[17:39:47.256] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:47.256] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:47.256] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:47.256]   - Field: ‘label’
[17:39:47.256]   - Field: ‘local’
[17:39:47.256]   - Field: ‘owner’
[17:39:47.256]   - Field: ‘envir’
[17:39:47.256]   - Field: ‘packages’
[17:39:47.257]   - Field: ‘gc’
[17:39:47.257]   - Field: ‘conditions’
[17:39:47.257]   - Field: ‘expr’
[17:39:47.257]   - Field: ‘uuid’
[17:39:47.257]   - Field: ‘seed’
[17:39:47.257]   - Field: ‘version’
[17:39:47.257]   - Field: ‘result’
[17:39:47.257]   - Field: ‘asynchronous’
[17:39:47.257]   - Field: ‘calls’
[17:39:47.257]   - Field: ‘globals’
[17:39:47.257]   - Field: ‘stdout’
[17:39:47.258]   - Field: ‘earlySignal’
[17:39:47.258]   - Field: ‘lazy’
[17:39:47.258]   - Field: ‘state’
[17:39:47.258] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:47.258] - Launch lazy future ...
[17:39:47.258] Packages needed by the future expression (n = 1): ‘future’
[17:39:47.258] Packages needed by future strategies (n = 1): ‘future’
[17:39:47.259] {
[17:39:47.259]     {
[17:39:47.259]         {
[17:39:47.259]             ...future.startTime <- base::Sys.time()
[17:39:47.259]             {
[17:39:47.259]                 {
[17:39:47.259]                   {
[17:39:47.259]                     {
[17:39:47.259]                       base::local({
[17:39:47.259]                         has_future <- base::requireNamespace("future", 
[17:39:47.259]                           quietly = TRUE)
[17:39:47.259]                         if (has_future) {
[17:39:47.259]                           ns <- base::getNamespace("future")
[17:39:47.259]                           version <- ns[[".package"]][["version"]]
[17:39:47.259]                           if (is.null(version)) 
[17:39:47.259]                             version <- utils::packageVersion("future")
[17:39:47.259]                         }
[17:39:47.259]                         else {
[17:39:47.259]                           version <- NULL
[17:39:47.259]                         }
[17:39:47.259]                         if (!has_future || version < "1.8.0") {
[17:39:47.259]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:47.259]                             "", base::R.version$version.string), 
[17:39:47.259]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:47.259]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:47.259]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:47.259]                               "release", "version")], collapse = " "), 
[17:39:47.259]                             hostname = base::Sys.info()[["nodename"]])
[17:39:47.259]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:47.259]                             info)
[17:39:47.259]                           info <- base::paste(info, collapse = "; ")
[17:39:47.259]                           if (!has_future) {
[17:39:47.259]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:47.259]                               info)
[17:39:47.259]                           }
[17:39:47.259]                           else {
[17:39:47.259]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:47.259]                               info, version)
[17:39:47.259]                           }
[17:39:47.259]                           base::stop(msg)
[17:39:47.259]                         }
[17:39:47.259]                       })
[17:39:47.259]                     }
[17:39:47.259]                     base::local({
[17:39:47.259]                       for (pkg in "future") {
[17:39:47.259]                         base::loadNamespace(pkg)
[17:39:47.259]                         base::library(pkg, character.only = TRUE)
[17:39:47.259]                       }
[17:39:47.259]                     })
[17:39:47.259]                   }
[17:39:47.259]                   ...future.strategy.old <- future::plan("list")
[17:39:47.259]                   options(future.plan = NULL)
[17:39:47.259]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.259]                   future::plan(list(function (..., envir = parent.frame()) 
[17:39:47.259]                   {
[17:39:47.259]                     future <- SequentialFuture(..., envir = envir)
[17:39:47.259]                     if (!future$lazy) 
[17:39:47.259]                       future <- run(future)
[17:39:47.259]                     invisible(future)
[17:39:47.259]                   }), .cleanup = FALSE, .init = FALSE)
[17:39:47.259]                 }
[17:39:47.259]                 ...future.workdir <- getwd()
[17:39:47.259]             }
[17:39:47.259]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:47.259]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:47.259]         }
[17:39:47.259]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:47.259]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:47.259]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:47.259]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:47.259]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:47.259]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:47.259]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:47.259]             base::names(...future.oldOptions))
[17:39:47.259]     }
[17:39:47.259]     if (FALSE) {
[17:39:47.259]     }
[17:39:47.259]     else {
[17:39:47.259]         if (TRUE) {
[17:39:47.259]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:47.259]                 open = "w")
[17:39:47.259]         }
[17:39:47.259]         else {
[17:39:47.259]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:47.259]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:47.259]         }
[17:39:47.259]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:47.259]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:47.259]             base::sink(type = "output", split = FALSE)
[17:39:47.259]             base::close(...future.stdout)
[17:39:47.259]         }, add = TRUE)
[17:39:47.259]     }
[17:39:47.259]     ...future.frame <- base::sys.nframe()
[17:39:47.259]     ...future.conditions <- base::list()
[17:39:47.259]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:47.259]     if (FALSE) {
[17:39:47.259]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:47.259]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:47.259]     }
[17:39:47.259]     ...future.result <- base::tryCatch({
[17:39:47.259]         base::withCallingHandlers({
[17:39:47.259]             ...future.value <- base::withVisible(base::local({
[17:39:47.259]                 a %<-% subset(data, x < 3)$y
[17:39:47.259]                 a
[17:39:47.259]             }))
[17:39:47.259]             future::FutureResult(value = ...future.value$value, 
[17:39:47.259]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.259]                   ...future.rng), globalenv = if (FALSE) 
[17:39:47.259]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:47.259]                     ...future.globalenv.names))
[17:39:47.259]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:47.259]         }, condition = base::local({
[17:39:47.259]             c <- base::c
[17:39:47.259]             inherits <- base::inherits
[17:39:47.259]             invokeRestart <- base::invokeRestart
[17:39:47.259]             length <- base::length
[17:39:47.259]             list <- base::list
[17:39:47.259]             seq.int <- base::seq.int
[17:39:47.259]             signalCondition <- base::signalCondition
[17:39:47.259]             sys.calls <- base::sys.calls
[17:39:47.259]             `[[` <- base::`[[`
[17:39:47.259]             `+` <- base::`+`
[17:39:47.259]             `<<-` <- base::`<<-`
[17:39:47.259]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:47.259]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:47.259]                   3L)]
[17:39:47.259]             }
[17:39:47.259]             function(cond) {
[17:39:47.259]                 is_error <- inherits(cond, "error")
[17:39:47.259]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:47.259]                   NULL)
[17:39:47.259]                 if (is_error) {
[17:39:47.259]                   sessionInformation <- function() {
[17:39:47.259]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:47.259]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:47.259]                       search = base::search(), system = base::Sys.info())
[17:39:47.259]                   }
[17:39:47.259]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.259]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:47.259]                     cond$call), session = sessionInformation(), 
[17:39:47.259]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:47.259]                   signalCondition(cond)
[17:39:47.259]                 }
[17:39:47.259]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:47.259]                 "immediateCondition"))) {
[17:39:47.259]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:47.259]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.259]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:47.259]                   if (TRUE && !signal) {
[17:39:47.259]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.259]                     {
[17:39:47.259]                       inherits <- base::inherits
[17:39:47.259]                       invokeRestart <- base::invokeRestart
[17:39:47.259]                       is.null <- base::is.null
[17:39:47.259]                       muffled <- FALSE
[17:39:47.259]                       if (inherits(cond, "message")) {
[17:39:47.259]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.259]                         if (muffled) 
[17:39:47.259]                           invokeRestart("muffleMessage")
[17:39:47.259]                       }
[17:39:47.259]                       else if (inherits(cond, "warning")) {
[17:39:47.259]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.259]                         if (muffled) 
[17:39:47.259]                           invokeRestart("muffleWarning")
[17:39:47.259]                       }
[17:39:47.259]                       else if (inherits(cond, "condition")) {
[17:39:47.259]                         if (!is.null(pattern)) {
[17:39:47.259]                           computeRestarts <- base::computeRestarts
[17:39:47.259]                           grepl <- base::grepl
[17:39:47.259]                           restarts <- computeRestarts(cond)
[17:39:47.259]                           for (restart in restarts) {
[17:39:47.259]                             name <- restart$name
[17:39:47.259]                             if (is.null(name)) 
[17:39:47.259]                               next
[17:39:47.259]                             if (!grepl(pattern, name)) 
[17:39:47.259]                               next
[17:39:47.259]                             invokeRestart(restart)
[17:39:47.259]                             muffled <- TRUE
[17:39:47.259]                             break
[17:39:47.259]                           }
[17:39:47.259]                         }
[17:39:47.259]                       }
[17:39:47.259]                       invisible(muffled)
[17:39:47.259]                     }
[17:39:47.259]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.259]                   }
[17:39:47.259]                 }
[17:39:47.259]                 else {
[17:39:47.259]                   if (TRUE) {
[17:39:47.259]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.259]                     {
[17:39:47.259]                       inherits <- base::inherits
[17:39:47.259]                       invokeRestart <- base::invokeRestart
[17:39:47.259]                       is.null <- base::is.null
[17:39:47.259]                       muffled <- FALSE
[17:39:47.259]                       if (inherits(cond, "message")) {
[17:39:47.259]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.259]                         if (muffled) 
[17:39:47.259]                           invokeRestart("muffleMessage")
[17:39:47.259]                       }
[17:39:47.259]                       else if (inherits(cond, "warning")) {
[17:39:47.259]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.259]                         if (muffled) 
[17:39:47.259]                           invokeRestart("muffleWarning")
[17:39:47.259]                       }
[17:39:47.259]                       else if (inherits(cond, "condition")) {
[17:39:47.259]                         if (!is.null(pattern)) {
[17:39:47.259]                           computeRestarts <- base::computeRestarts
[17:39:47.259]                           grepl <- base::grepl
[17:39:47.259]                           restarts <- computeRestarts(cond)
[17:39:47.259]                           for (restart in restarts) {
[17:39:47.259]                             name <- restart$name
[17:39:47.259]                             if (is.null(name)) 
[17:39:47.259]                               next
[17:39:47.259]                             if (!grepl(pattern, name)) 
[17:39:47.259]                               next
[17:39:47.259]                             invokeRestart(restart)
[17:39:47.259]                             muffled <- TRUE
[17:39:47.259]                             break
[17:39:47.259]                           }
[17:39:47.259]                         }
[17:39:47.259]                       }
[17:39:47.259]                       invisible(muffled)
[17:39:47.259]                     }
[17:39:47.259]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.259]                   }
[17:39:47.259]                 }
[17:39:47.259]             }
[17:39:47.259]         }))
[17:39:47.259]     }, error = function(ex) {
[17:39:47.259]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:47.259]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.259]                 ...future.rng), started = ...future.startTime, 
[17:39:47.259]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:47.259]             version = "1.8"), class = "FutureResult")
[17:39:47.259]     }, finally = {
[17:39:47.259]         if (!identical(...future.workdir, getwd())) 
[17:39:47.259]             setwd(...future.workdir)
[17:39:47.259]         {
[17:39:47.259]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:47.259]                 ...future.oldOptions$nwarnings <- NULL
[17:39:47.259]             }
[17:39:47.259]             base::options(...future.oldOptions)
[17:39:47.259]             if (.Platform$OS.type == "windows") {
[17:39:47.259]                 old_names <- names(...future.oldEnvVars)
[17:39:47.259]                 envs <- base::Sys.getenv()
[17:39:47.259]                 names <- names(envs)
[17:39:47.259]                 common <- intersect(names, old_names)
[17:39:47.259]                 added <- setdiff(names, old_names)
[17:39:47.259]                 removed <- setdiff(old_names, names)
[17:39:47.259]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:47.259]                   envs[common]]
[17:39:47.259]                 NAMES <- toupper(changed)
[17:39:47.259]                 args <- list()
[17:39:47.259]                 for (kk in seq_along(NAMES)) {
[17:39:47.259]                   name <- changed[[kk]]
[17:39:47.259]                   NAME <- NAMES[[kk]]
[17:39:47.259]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.259]                     next
[17:39:47.259]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.259]                 }
[17:39:47.259]                 NAMES <- toupper(added)
[17:39:47.259]                 for (kk in seq_along(NAMES)) {
[17:39:47.259]                   name <- added[[kk]]
[17:39:47.259]                   NAME <- NAMES[[kk]]
[17:39:47.259]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.259]                     next
[17:39:47.259]                   args[[name]] <- ""
[17:39:47.259]                 }
[17:39:47.259]                 NAMES <- toupper(removed)
[17:39:47.259]                 for (kk in seq_along(NAMES)) {
[17:39:47.259]                   name <- removed[[kk]]
[17:39:47.259]                   NAME <- NAMES[[kk]]
[17:39:47.259]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.259]                     next
[17:39:47.259]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.259]                 }
[17:39:47.259]                 if (length(args) > 0) 
[17:39:47.259]                   base::do.call(base::Sys.setenv, args = args)
[17:39:47.259]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:47.259]             }
[17:39:47.259]             else {
[17:39:47.259]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:47.259]             }
[17:39:47.259]             {
[17:39:47.259]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:47.259]                   0L) {
[17:39:47.259]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:47.259]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:47.259]                   base::options(opts)
[17:39:47.259]                 }
[17:39:47.259]                 {
[17:39:47.259]                   {
[17:39:47.259]                     NULL
[17:39:47.259]                     RNGkind("Mersenne-Twister")
[17:39:47.259]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:47.259]                       inherits = FALSE)
[17:39:47.259]                   }
[17:39:47.259]                   options(future.plan = NULL)
[17:39:47.259]                   if (is.na(NA_character_)) 
[17:39:47.259]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.259]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:47.259]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:47.259]                     .init = FALSE)
[17:39:47.259]                 }
[17:39:47.259]             }
[17:39:47.259]         }
[17:39:47.259]     })
[17:39:47.259]     if (TRUE) {
[17:39:47.259]         base::sink(type = "output", split = FALSE)
[17:39:47.259]         if (TRUE) {
[17:39:47.259]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:47.259]         }
[17:39:47.259]         else {
[17:39:47.259]             ...future.result["stdout"] <- base::list(NULL)
[17:39:47.259]         }
[17:39:47.259]         base::close(...future.stdout)
[17:39:47.259]         ...future.stdout <- NULL
[17:39:47.259]     }
[17:39:47.259]     ...future.result$conditions <- ...future.conditions
[17:39:47.259]     ...future.result$finished <- base::Sys.time()
[17:39:47.259]     ...future.result
[17:39:47.259] }
[17:39:47.260] assign_globals() ...
[17:39:47.261] List of 1
[17:39:47.261]  $ data:'data.frame':	5 obs. of  2 variables:
[17:39:47.261]   ..$ x: int [1:5] 1 2 3 4 5
[17:39:47.261]   ..$ y: int [1:5] 1 2 3 4 5
[17:39:47.261]  - attr(*, "where")=List of 1
[17:39:47.261]   ..$ data:<environment: R_EmptyEnv> 
[17:39:47.261]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:47.261]  - attr(*, "resolved")= logi FALSE
[17:39:47.261]  - attr(*, "total_size")= num 160
[17:39:47.261]  - attr(*, "already-done")= logi TRUE
[17:39:47.264] - copied ‘data’ to environment
[17:39:47.264] assign_globals() ... done
[17:39:47.264] plan(): Setting new future strategy stack:
[17:39:47.264] List of future strategies:
[17:39:47.264] 1. sequential:
[17:39:47.264]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.264]    - tweaked: FALSE
[17:39:47.264]    - call: plan(list(sequential, strategy))
[17:39:47.265] plan(): nbrOfWorkers() = 1
[17:39:47.296] plan(): Setting new future strategy stack:
[17:39:47.296] List of future strategies:
[17:39:47.296] 1. sequential:
[17:39:47.296]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.296]    - tweaked: FALSE
[17:39:47.296]    - call: plan(list(sequential, strategy))
[17:39:47.296] 2. sequential:
[17:39:47.296]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.296]    - tweaked: FALSE
[17:39:47.296]    - call: plan(list(sequential, strategy))
[17:39:47.297] plan(): nbrOfWorkers() = 1
[17:39:47.297] SequentialFuture started (and completed)
[17:39:47.297] signalConditions() ...
[17:39:47.297]  - include = ‘immediateCondition’
[17:39:47.297]  - exclude = 
[17:39:47.297]  - resignal = FALSE
[17:39:47.298]  - Number of conditions: 53
[17:39:47.298] signalConditions() ... done
[17:39:47.298] - Launch lazy future ... done
[17:39:47.298] run() for ‘SequentialFuture’ ... done
[17:39:47.298] signalConditions() ...
[17:39:47.298]  - include = ‘immediateCondition’
[17:39:47.298]  - exclude = 
[17:39:47.298]  - resignal = FALSE
[17:39:47.298]  - Number of conditions: 53
[17:39:47.298] signalConditions() ... done
[17:39:47.298] Future state: ‘finished’
[17:39:47.299] signalConditions() ...
[17:39:47.299]  - include = ‘condition’
[17:39:47.299]  - exclude = ‘immediateCondition’
[17:39:47.299]  - resignal = TRUE
[17:39:47.299]  - Number of conditions: 53
[17:39:47.299]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.265] getGlobalsAndPackages() ...
[17:39:47.299]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:47.299]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.280] Searching for globals...
[17:39:47.299]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.281] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:39:47.300]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.282] Searching for globals ... DONE
[17:39:47.300]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.282] Resolving globals: FALSE
[17:39:47.300]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.282] The total size of the 1 globals is 160 bytes (160 bytes)
[17:39:47.300]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.283] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:39:47.300]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.283] - globals: [1] ‘data’
[17:39:47.300]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.283] 
[17:39:47.300]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.283] getGlobalsAndPackages() ... DONE
[17:39:47.300]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.283] run() for ‘Future’ ...
[17:39:47.301]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.283] - state: ‘created’
[17:39:47.301]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.283] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:47.301]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.284] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:47.301]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.284] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:47.301]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.284]   - Field: ‘label’
[17:39:47.301]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.284]   - Field: ‘local’
[17:39:47.301]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.284]   - Field: ‘owner’
[17:39:47.302]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.284]   - Field: ‘envir’
[17:39:47.302]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.284]   - Field: ‘packages’
[17:39:47.302]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.284]   - Field: ‘gc’
[17:39:47.302]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.285]   - Field: ‘conditions’
[17:39:47.302]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.285]   - Field: ‘expr’
[17:39:47.302]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.285]   - Field: ‘uuid’
[17:39:47.302]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.285]   - Field: ‘seed’
[17:39:47.302]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.285]   - Field: ‘version’
[17:39:47.303]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.285]   - Field: ‘result’
[17:39:47.303]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.285]   - Field: ‘asynchronous’
[17:39:47.303]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.285]   - Field: ‘calls’
[17:39:47.303]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.285]   - Field: ‘globals’
[17:39:47.303]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.285]   - Field: ‘stdout’
[17:39:47.303]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.286]   - Field: ‘earlySignal’
[17:39:47.303]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.286]   - Field: ‘lazy’
[17:39:47.303]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.286]   - Field: ‘state’
[17:39:47.304]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.286] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:47.304]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.286] - Launch lazy future ...
[17:39:47.304]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.286] Packages needed by the future expression (n = 0): <none>
[17:39:47.304]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.286] Packages needed by future strategies (n = 0): <none>
[17:39:47.304]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.287] {
[17:39:47.287]     {
[17:39:47.287]         {
[17:39:47.287]             ...future.startTime <- base::Sys.time()
[17:39:47.287]             {
[17:39:47.287]                 {
[17:39:47.287]                   {
[17:39:47.287]                     base::local({
[17:39:47.287]                       has_future <- base::requireNamespace("future", 
[17:39:47.287]                         quietly = TRUE)
[17:39:47.287]                       if (has_future) {
[17:39:47.287]                         ns <- base::getNamespace("future")
[17:39:47.287]                         version <- ns[[".package"]][["version"]]
[17:39:47.287]                         if (is.null(version)) 
[17:39:47.287]                           version <- utils::packageVersion("future")
[17:39:47.287]                       }
[17:39:47.287]                       else {
[17:39:47.287]                         version <- NULL
[17:39:47.287]                       }
[17:39:47.287]                       if (!has_future || version < "1.8.0") {
[17:39:47.287]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:47.287]                           "", base::R.version$version.string), 
[17:39:47.287]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:47.287]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:47.287]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:47.287]                             "release", "version")], collapse = " "), 
[17:39:47.287]                           hostname = base::Sys.info()[["nodename"]])
[17:39:47.287]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:47.287]                           info)
[17:39:47.287]                         info <- base::paste(info, collapse = "; ")
[17:39:47.287]                         if (!has_future) {
[17:39:47.287]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:47.287]                             info)
[17:39:47.287]                         }
[17:39:47.287]                         else {
[17:39:47.287]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:47.287]                             info, version)
[17:39:47.287]                         }
[17:39:47.287]                         base::stop(msg)
[17:39:47.287]                       }
[17:39:47.287]                     })
[17:39:47.287]                   }
[17:39:47.287]                   ...future.strategy.old <- future::plan("list")
[17:39:47.287]                   options(future.plan = NULL)
[17:39:47.287]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.287]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:47.287]                 }
[17:39:47.287]                 ...future.workdir <- getwd()
[17:39:47.287]             }
[17:39:47.287]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:47.287]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:47.287]         }
[17:39:47.287]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:47.287]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:47.287]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:47.287]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:47.287]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:47.287]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:47.287]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:47.287]             base::names(...future.oldOptions))
[17:39:47.287]     }
[17:39:47.287]     if (FALSE) {
[17:39:47.287]     }
[17:39:47.287]     else {
[17:39:47.287]         if (TRUE) {
[17:39:47.287]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:47.287]                 open = "w")
[17:39:47.287]         }
[17:39:47.287]         else {
[17:39:47.287]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:47.287]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:47.287]         }
[17:39:47.287]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:47.287]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:47.287]             base::sink(type = "output", split = FALSE)
[17:39:47.287]             base::close(...future.stdout)
[17:39:47.287]         }, add = TRUE)
[17:39:47.287]     }
[17:39:47.287]     ...future.frame <- base::sys.nframe()
[17:39:47.287]     ...future.conditions <- base::list()
[17:39:47.287]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:47.287]     if (FALSE) {
[17:39:47.287]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:47.287]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:47.287]     }
[17:39:47.287]     ...future.result <- base::tryCatch({
[17:39:47.287]         base::withCallingHandlers({
[17:39:47.287]             ...future.value <- base::withVisible(base::local(subset(data, 
[17:39:47.287]                 x < 3)$y))
[17:39:47.287]             future::FutureResult(value = ...future.value$value, 
[17:39:47.287]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.287]                   ...future.rng), globalenv = if (FALSE) 
[17:39:47.287]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:47.287]                     ...future.globalenv.names))
[17:39:47.287]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:47.287]         }, condition = base::local({
[17:39:47.287]             c <- base::c
[17:39:47.287]             inherits <- base::inherits
[17:39:47.287]             invokeRestart <- base::invokeRestart
[17:39:47.287]             length <- base::length
[17:39:47.287]             list <- base::list
[17:39:47.287]             seq.int <- base::seq.int
[17:39:47.287]             signalCondition <- base::signalCondition
[17:39:47.287]             sys.calls <- base::sys.calls
[17:39:47.287]             `[[` <- base::`[[`
[17:39:47.287]             `+` <- base::`+`
[17:39:47.287]             `<<-` <- base::`<<-`
[17:39:47.287]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:47.287]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:47.287]                   3L)]
[17:39:47.287]             }
[17:39:47.287]             function(cond) {
[17:39:47.287]                 is_error <- inherits(cond, "error")
[17:39:47.287]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:47.287]                   NULL)
[17:39:47.287]                 if (is_error) {
[17:39:47.287]                   sessionInformation <- function() {
[17:39:47.287]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:47.287]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:47.287]                       search = base::search(), system = base::Sys.info())
[17:39:47.287]                   }
[17:39:47.287]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.287]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:47.287]                     cond$call), session = sessionInformation(), 
[17:39:47.287]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:47.287]                   signalCondition(cond)
[17:39:47.287]                 }
[17:39:47.287]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:47.287]                 "immediateCondition"))) {
[17:39:47.287]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:47.287]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.287]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:47.287]                   if (TRUE && !signal) {
[17:39:47.287]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.287]                     {
[17:39:47.287]                       inherits <- base::inherits
[17:39:47.287]                       invokeRestart <- base::invokeRestart
[17:39:47.287]                       is.null <- base::is.null
[17:39:47.287]                       muffled <- FALSE
[17:39:47.287]                       if (inherits(cond, "message")) {
[17:39:47.287]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.287]                         if (muffled) 
[17:39:47.287]                           invokeRestart("muffleMessage")
[17:39:47.287]                       }
[17:39:47.287]                       else if (inherits(cond, "warning")) {
[17:39:47.287]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.287]                         if (muffled) 
[17:39:47.287]                           invokeRestart("muffleWarning")
[17:39:47.287]                       }
[17:39:47.287]                       else if (inherits(cond, "condition")) {
[17:39:47.287]                         if (!is.null(pattern)) {
[17:39:47.287]                           computeRestarts <- base::computeRestarts
[17:39:47.287]                           grepl <- base::grepl
[17:39:47.287]                           restarts <- computeRestarts(cond)
[17:39:47.287]                           for (restart in restarts) {
[17:39:47.287]                             name <- restart$name
[17:39:47.287]                             if (is.null(name)) 
[17:39:47.287]                               next
[17:39:47.287]                             if (!grepl(pattern, name)) 
[17:39:47.287]                               next
[17:39:47.287]                             invokeRestart(restart)
[17:39:47.287]                             muffled <- TRUE
[17:39:47.287]                             break
[17:39:47.287]                           }
[17:39:47.287]                         }
[17:39:47.287]                       }
[17:39:47.287]                       invisible(muffled)
[17:39:47.287]                     }
[17:39:47.287]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.287]                   }
[17:39:47.287]                 }
[17:39:47.287]                 else {
[17:39:47.287]                   if (TRUE) {
[17:39:47.287]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.287]                     {
[17:39:47.287]                       inherits <- base::inherits
[17:39:47.287]                       invokeRestart <- base::invokeRestart
[17:39:47.287]                       is.null <- base::is.null
[17:39:47.287]                       muffled <- FALSE
[17:39:47.287]                       if (inherits(cond, "message")) {
[17:39:47.287]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.287]                         if (muffled) 
[17:39:47.287]                           invokeRestart("muffleMessage")
[17:39:47.287]                       }
[17:39:47.287]                       else if (inherits(cond, "warning")) {
[17:39:47.287]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.287]                         if (muffled) 
[17:39:47.287]                           invokeRestart("muffleWarning")
[17:39:47.287]                       }
[17:39:47.287]                       else if (inherits(cond, "condition")) {
[17:39:47.287]                         if (!is.null(pattern)) {
[17:39:47.287]                           computeRestarts <- base::computeRestarts
[17:39:47.287]                           grepl <- base::grepl
[17:39:47.287]                           restarts <- computeRestarts(cond)
[17:39:47.287]                           for (restart in restarts) {
[17:39:47.287]                             name <- restart$name
[17:39:47.287]                             if (is.null(name)) 
[17:39:47.287]                               next
[17:39:47.287]                             if (!grepl(pattern, name)) 
[17:39:47.287]                               next
[17:39:47.287]                             invokeRestart(restart)
[17:39:47.287]                             muffled <- TRUE
[17:39:47.287]                             break
[17:39:47.287]                           }
[17:39:47.287]                         }
[17:39:47.287]                       }
[17:39:47.287]                       invisible(muffled)
[17:39:47.287]                     }
[17:39:47.287]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.287]                   }
[17:39:47.287]                 }
[17:39:47.287]             }
[17:39:47.287]         }))
[17:39:47.287]     }, error = function(ex) {
[17:39:47.287]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:47.287]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.287]                 ...future.rng), started = ...future.startTime, 
[17:39:47.287]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:47.287]             version = "1.8"), class = "FutureResult")
[17:39:47.287]     }, finally = {
[17:39:47.287]         if (!identical(...future.workdir, getwd())) 
[17:39:47.287]             setwd(...future.workdir)
[17:39:47.287]         {
[17:39:47.287]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:47.287]                 ...future.oldOptions$nwarnings <- NULL
[17:39:47.287]             }
[17:39:47.287]             base::options(...future.oldOptions)
[17:39:47.287]             if (.Platform$OS.type == "windows") {
[17:39:47.287]                 old_names <- names(...future.oldEnvVars)
[17:39:47.287]                 envs <- base::Sys.getenv()
[17:39:47.287]                 names <- names(envs)
[17:39:47.287]                 common <- intersect(names, old_names)
[17:39:47.287]                 added <- setdiff(names, old_names)
[17:39:47.287]                 removed <- setdiff(old_names, names)
[17:39:47.287]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:47.287]                   envs[common]]
[17:39:47.287]                 NAMES <- toupper(changed)
[17:39:47.287]                 args <- list()
[17:39:47.287]                 for (kk in seq_along(NAMES)) {
[17:39:47.287]                   name <- changed[[kk]]
[17:39:47.287]                   NAME <- NAMES[[kk]]
[17:39:47.287]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.287]                     next
[17:39:47.287]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.287]                 }
[17:39:47.287]                 NAMES <- toupper(added)
[17:39:47.287]                 for (kk in seq_along(NAMES)) {
[17:39:47.287]                   name <- added[[kk]]
[17:39:47.287]                   NAME <- NAMES[[kk]]
[17:39:47.287]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.287]                     next
[17:39:47.287]                   args[[name]] <- ""
[17:39:47.287]                 }
[17:39:47.287]                 NAMES <- toupper(removed)
[17:39:47.287]                 for (kk in seq_along(NAMES)) {
[17:39:47.287]                   name <- removed[[kk]]
[17:39:47.287]                   NAME <- NAMES[[kk]]
[17:39:47.287]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.287]                     next
[17:39:47.287]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.287]                 }
[17:39:47.287]                 if (length(args) > 0) 
[17:39:47.287]                   base::do.call(base::Sys.setenv, args = args)
[17:39:47.287]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:47.287]             }
[17:39:47.287]             else {
[17:39:47.287]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:47.287]             }
[17:39:47.287]             {
[17:39:47.287]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:47.287]                   0L) {
[17:39:47.287]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:47.287]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:47.287]                   base::options(opts)
[17:39:47.287]                 }
[17:39:47.287]                 {
[17:39:47.287]                   {
[17:39:47.287]                     NULL
[17:39:47.287]                     RNGkind("Mersenne-Twister")
[17:39:47.287]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:47.287]                       inherits = FALSE)
[17:39:47.287]                   }
[17:39:47.287]                   options(future.plan = NULL)
[17:39:47.287]                   if (is.na(NA_character_)) 
[17:39:47.287]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.287]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:47.287]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:47.287]                     .init = FALSE)
[17:39:47.287]                 }
[17:39:47.287]             }
[17:39:47.287]         }
[17:39:47.287]     })
[17:39:47.287]     if (TRUE) {
[17:39:47.287]         base::sink(type = "output", split = FALSE)
[17:39:47.287]         if (TRUE) {
[17:39:47.287]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:47.287]         }
[17:39:47.287]         else {
[17:39:47.287]             ...future.result["stdout"] <- base::list(NULL)
[17:39:47.287]         }
[17:39:47.287]         base::close(...future.stdout)
[17:39:47.287]         ...future.stdout <- NULL
[17:39:47.287]     }
[17:39:47.287]     ...future.result$conditions <- ...future.conditions
[17:39:47.287]     ...future.result$finished <- base::Sys.time()
[17:39:47.287]     ...future.result
[17:39:47.287] }
[17:39:47.304]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.288] assign_globals() ...
[17:39:47.304]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.288] List of 1
[17:39:47.288]  $ data:'data.frame':	5 obs. of  2 variables:
[17:39:47.288]   ..$ x: int [1:5] 1 2 3 4 5
[17:39:47.288]   ..$ y: int [1:5] 1 2 3 4 5
[17:39:47.288]  - attr(*, "where")=List of 1
[17:39:47.288]   ..$ data:<environment: R_EmptyEnv> 
[17:39:47.288]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:47.288]  - attr(*, "resolved")= logi FALSE
[17:39:47.288]  - attr(*, "total_size")= num 160
[17:39:47.288]  - attr(*, "already-done")= logi TRUE
[17:39:47.304]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.293] - copied ‘data’ to environment
[17:39:47.305]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.293] assign_globals() ... done
[17:39:47.305]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.293] plan(): Setting new future strategy stack:
[17:39:47.305]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.293] List of future strategies:
[17:39:47.293] 1. sequential:
[17:39:47.293]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.293]    - tweaked: FALSE
[17:39:47.293]    - call: NULL
[17:39:47.305]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.294] plan(): nbrOfWorkers() = 1
[17:39:47.305]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.295] plan(): Setting new future strategy stack:
[17:39:47.305]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.295] List of future strategies:
[17:39:47.295] 1. sequential:
[17:39:47.295]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.295]    - tweaked: FALSE
[17:39:47.295]    - call: plan(list(sequential, strategy))
[17:39:47.305]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.295] plan(): nbrOfWorkers() = 1
[17:39:47.305]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.295] SequentialFuture started (and completed)
[17:39:47.306]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.296] - Launch lazy future ... done
[17:39:47.306]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.296] run() for ‘SequentialFuture’ ... done
[17:39:47.306] signalConditions() ... done
- Strategy: sequential ... DONE
- Strategy: multicore ...
[17:39:47.306] plan(): Setting new future strategy stack:
[17:39:47.306] List of future strategies:
[17:39:47.306] 1. multicore:
[17:39:47.306]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:47.306]    - tweaked: FALSE
[17:39:47.306]    - call: plan(strategy)
[17:39:47.310] plan(): nbrOfWorkers() = 2
[17:39:47.311] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:39:47.311] Searching for globals...
[17:39:47.311] - globals found: [1] ‘getOption’
[17:39:47.311] Searching for globals ... DONE
[17:39:47.311] Resolving globals: FALSE
[17:39:47.312] 
[17:39:47.312] 
[17:39:47.312] getGlobalsAndPackages() ... DONE
[17:39:47.312] run() for ‘Future’ ...
[17:39:47.312] - state: ‘created’
[17:39:47.312] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:47.316] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:47.316] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:47.316]   - Field: ‘label’
[17:39:47.316]   - Field: ‘local’
[17:39:47.316]   - Field: ‘owner’
[17:39:47.316]   - Field: ‘envir’
[17:39:47.317]   - Field: ‘workers’
[17:39:47.317]   - Field: ‘packages’
[17:39:47.317]   - Field: ‘gc’
[17:39:47.317]   - Field: ‘job’
[17:39:47.317]   - Field: ‘conditions’
[17:39:47.317]   - Field: ‘expr’
[17:39:47.317]   - Field: ‘uuid’
[17:39:47.317]   - Field: ‘seed’
[17:39:47.317]   - Field: ‘version’
[17:39:47.317]   - Field: ‘result’
[17:39:47.318]   - Field: ‘asynchronous’
[17:39:47.318]   - Field: ‘calls’
[17:39:47.318]   - Field: ‘globals’
[17:39:47.318]   - Field: ‘stdout’
[17:39:47.318]   - Field: ‘earlySignal’
[17:39:47.318]   - Field: ‘lazy’
[17:39:47.318]   - Field: ‘state’
[17:39:47.318] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:47.318] - Launch lazy future ...
[17:39:47.320] Packages needed by the future expression (n = 0): <none>
[17:39:47.320] Packages needed by future strategies (n = 0): <none>
[17:39:47.321] {
[17:39:47.321]     {
[17:39:47.321]         {
[17:39:47.321]             ...future.startTime <- base::Sys.time()
[17:39:47.321]             {
[17:39:47.321]                 {
[17:39:47.321]                   {
[17:39:47.321]                     {
[17:39:47.321]                       base::local({
[17:39:47.321]                         has_future <- base::requireNamespace("future", 
[17:39:47.321]                           quietly = TRUE)
[17:39:47.321]                         if (has_future) {
[17:39:47.321]                           ns <- base::getNamespace("future")
[17:39:47.321]                           version <- ns[[".package"]][["version"]]
[17:39:47.321]                           if (is.null(version)) 
[17:39:47.321]                             version <- utils::packageVersion("future")
[17:39:47.321]                         }
[17:39:47.321]                         else {
[17:39:47.321]                           version <- NULL
[17:39:47.321]                         }
[17:39:47.321]                         if (!has_future || version < "1.8.0") {
[17:39:47.321]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:47.321]                             "", base::R.version$version.string), 
[17:39:47.321]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:47.321]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:47.321]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:47.321]                               "release", "version")], collapse = " "), 
[17:39:47.321]                             hostname = base::Sys.info()[["nodename"]])
[17:39:47.321]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:47.321]                             info)
[17:39:47.321]                           info <- base::paste(info, collapse = "; ")
[17:39:47.321]                           if (!has_future) {
[17:39:47.321]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:47.321]                               info)
[17:39:47.321]                           }
[17:39:47.321]                           else {
[17:39:47.321]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:47.321]                               info, version)
[17:39:47.321]                           }
[17:39:47.321]                           base::stop(msg)
[17:39:47.321]                         }
[17:39:47.321]                       })
[17:39:47.321]                     }
[17:39:47.321]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:47.321]                     base::options(mc.cores = 1L)
[17:39:47.321]                   }
[17:39:47.321]                   ...future.strategy.old <- future::plan("list")
[17:39:47.321]                   options(future.plan = NULL)
[17:39:47.321]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.321]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:47.321]                 }
[17:39:47.321]                 ...future.workdir <- getwd()
[17:39:47.321]             }
[17:39:47.321]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:47.321]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:47.321]         }
[17:39:47.321]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[17:39:47.321]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:47.321]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[17:39:47.321]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:47.321]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:47.321]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:47.321]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:47.321]             base::names(...future.oldOptions))
[17:39:47.321]     }
[17:39:47.321]     if (FALSE) {
[17:39:47.321]     }
[17:39:47.321]     else {
[17:39:47.321]         if (TRUE) {
[17:39:47.321]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:47.321]                 open = "w")
[17:39:47.321]         }
[17:39:47.321]         else {
[17:39:47.321]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:47.321]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:47.321]         }
[17:39:47.321]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:47.321]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:47.321]             base::sink(type = "output", split = FALSE)
[17:39:47.321]             base::close(...future.stdout)
[17:39:47.321]         }, add = TRUE)
[17:39:47.321]     }
[17:39:47.321]     ...future.frame <- base::sys.nframe()
[17:39:47.321]     ...future.conditions <- base::list()
[17:39:47.321]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:47.321]     if (FALSE) {
[17:39:47.321]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:47.321]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:47.321]     }
[17:39:47.321]     ...future.result <- base::tryCatch({
[17:39:47.321]         base::withCallingHandlers({
[17:39:47.321]             ...future.value <- base::withVisible(base::local({
[17:39:47.321]                 withCallingHandlers({
[17:39:47.321]                   getOption("future.globals.onMissing")
[17:39:47.321]                 }, immediateCondition = function(cond) {
[17:39:47.321]                   save_rds <- function (object, pathname, ...) 
[17:39:47.321]                   {
[17:39:47.321]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:47.321]                     if (file_test("-f", pathname_tmp)) {
[17:39:47.321]                       fi_tmp <- file.info(pathname_tmp)
[17:39:47.321]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:47.321]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:47.321]                         fi_tmp[["mtime"]])
[17:39:47.321]                     }
[17:39:47.321]                     tryCatch({
[17:39:47.321]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:47.321]                     }, error = function(ex) {
[17:39:47.321]                       msg <- conditionMessage(ex)
[17:39:47.321]                       fi_tmp <- file.info(pathname_tmp)
[17:39:47.321]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:47.321]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:47.321]                         fi_tmp[["mtime"]], msg)
[17:39:47.321]                       ex$message <- msg
[17:39:47.321]                       stop(ex)
[17:39:47.321]                     })
[17:39:47.321]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:47.321]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:47.321]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:47.321]                       fi_tmp <- file.info(pathname_tmp)
[17:39:47.321]                       fi <- file.info(pathname)
[17:39:47.321]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:47.321]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:47.321]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:47.321]                         fi[["size"]], fi[["mtime"]])
[17:39:47.321]                       stop(msg)
[17:39:47.321]                     }
[17:39:47.321]                     invisible(pathname)
[17:39:47.321]                   }
[17:39:47.321]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:47.321]                     rootPath = tempdir()) 
[17:39:47.321]                   {
[17:39:47.321]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:47.321]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:47.321]                       tmpdir = path, fileext = ".rds")
[17:39:47.321]                     save_rds(obj, file)
[17:39:47.321]                   }
[17:39:47.321]                   saveImmediateCondition(cond, path = "/tmp/RtmpAfZTdK/.future/immediateConditions")
[17:39:47.321]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.321]                   {
[17:39:47.321]                     inherits <- base::inherits
[17:39:47.321]                     invokeRestart <- base::invokeRestart
[17:39:47.321]                     is.null <- base::is.null
[17:39:47.321]                     muffled <- FALSE
[17:39:47.321]                     if (inherits(cond, "message")) {
[17:39:47.321]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:47.321]                       if (muffled) 
[17:39:47.321]                         invokeRestart("muffleMessage")
[17:39:47.321]                     }
[17:39:47.321]                     else if (inherits(cond, "warning")) {
[17:39:47.321]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:47.321]                       if (muffled) 
[17:39:47.321]                         invokeRestart("muffleWarning")
[17:39:47.321]                     }
[17:39:47.321]                     else if (inherits(cond, "condition")) {
[17:39:47.321]                       if (!is.null(pattern)) {
[17:39:47.321]                         computeRestarts <- base::computeRestarts
[17:39:47.321]                         grepl <- base::grepl
[17:39:47.321]                         restarts <- computeRestarts(cond)
[17:39:47.321]                         for (restart in restarts) {
[17:39:47.321]                           name <- restart$name
[17:39:47.321]                           if (is.null(name)) 
[17:39:47.321]                             next
[17:39:47.321]                           if (!grepl(pattern, name)) 
[17:39:47.321]                             next
[17:39:47.321]                           invokeRestart(restart)
[17:39:47.321]                           muffled <- TRUE
[17:39:47.321]                           break
[17:39:47.321]                         }
[17:39:47.321]                       }
[17:39:47.321]                     }
[17:39:47.321]                     invisible(muffled)
[17:39:47.321]                   }
[17:39:47.321]                   muffleCondition(cond)
[17:39:47.321]                 })
[17:39:47.321]             }))
[17:39:47.321]             future::FutureResult(value = ...future.value$value, 
[17:39:47.321]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.321]                   ...future.rng), globalenv = if (FALSE) 
[17:39:47.321]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:47.321]                     ...future.globalenv.names))
[17:39:47.321]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:47.321]         }, condition = base::local({
[17:39:47.321]             c <- base::c
[17:39:47.321]             inherits <- base::inherits
[17:39:47.321]             invokeRestart <- base::invokeRestart
[17:39:47.321]             length <- base::length
[17:39:47.321]             list <- base::list
[17:39:47.321]             seq.int <- base::seq.int
[17:39:47.321]             signalCondition <- base::signalCondition
[17:39:47.321]             sys.calls <- base::sys.calls
[17:39:47.321]             `[[` <- base::`[[`
[17:39:47.321]             `+` <- base::`+`
[17:39:47.321]             `<<-` <- base::`<<-`
[17:39:47.321]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:47.321]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:47.321]                   3L)]
[17:39:47.321]             }
[17:39:47.321]             function(cond) {
[17:39:47.321]                 is_error <- inherits(cond, "error")
[17:39:47.321]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:47.321]                   NULL)
[17:39:47.321]                 if (is_error) {
[17:39:47.321]                   sessionInformation <- function() {
[17:39:47.321]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:47.321]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:47.321]                       search = base::search(), system = base::Sys.info())
[17:39:47.321]                   }
[17:39:47.321]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.321]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:47.321]                     cond$call), session = sessionInformation(), 
[17:39:47.321]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:47.321]                   signalCondition(cond)
[17:39:47.321]                 }
[17:39:47.321]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:47.321]                 "immediateCondition"))) {
[17:39:47.321]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:47.321]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.321]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:47.321]                   if (TRUE && !signal) {
[17:39:47.321]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.321]                     {
[17:39:47.321]                       inherits <- base::inherits
[17:39:47.321]                       invokeRestart <- base::invokeRestart
[17:39:47.321]                       is.null <- base::is.null
[17:39:47.321]                       muffled <- FALSE
[17:39:47.321]                       if (inherits(cond, "message")) {
[17:39:47.321]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.321]                         if (muffled) 
[17:39:47.321]                           invokeRestart("muffleMessage")
[17:39:47.321]                       }
[17:39:47.321]                       else if (inherits(cond, "warning")) {
[17:39:47.321]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.321]                         if (muffled) 
[17:39:47.321]                           invokeRestart("muffleWarning")
[17:39:47.321]                       }
[17:39:47.321]                       else if (inherits(cond, "condition")) {
[17:39:47.321]                         if (!is.null(pattern)) {
[17:39:47.321]                           computeRestarts <- base::computeRestarts
[17:39:47.321]                           grepl <- base::grepl
[17:39:47.321]                           restarts <- computeRestarts(cond)
[17:39:47.321]                           for (restart in restarts) {
[17:39:47.321]                             name <- restart$name
[17:39:47.321]                             if (is.null(name)) 
[17:39:47.321]                               next
[17:39:47.321]                             if (!grepl(pattern, name)) 
[17:39:47.321]                               next
[17:39:47.321]                             invokeRestart(restart)
[17:39:47.321]                             muffled <- TRUE
[17:39:47.321]                             break
[17:39:47.321]                           }
[17:39:47.321]                         }
[17:39:47.321]                       }
[17:39:47.321]                       invisible(muffled)
[17:39:47.321]                     }
[17:39:47.321]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.321]                   }
[17:39:47.321]                 }
[17:39:47.321]                 else {
[17:39:47.321]                   if (TRUE) {
[17:39:47.321]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.321]                     {
[17:39:47.321]                       inherits <- base::inherits
[17:39:47.321]                       invokeRestart <- base::invokeRestart
[17:39:47.321]                       is.null <- base::is.null
[17:39:47.321]                       muffled <- FALSE
[17:39:47.321]                       if (inherits(cond, "message")) {
[17:39:47.321]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.321]                         if (muffled) 
[17:39:47.321]                           invokeRestart("muffleMessage")
[17:39:47.321]                       }
[17:39:47.321]                       else if (inherits(cond, "warning")) {
[17:39:47.321]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.321]                         if (muffled) 
[17:39:47.321]                           invokeRestart("muffleWarning")
[17:39:47.321]                       }
[17:39:47.321]                       else if (inherits(cond, "condition")) {
[17:39:47.321]                         if (!is.null(pattern)) {
[17:39:47.321]                           computeRestarts <- base::computeRestarts
[17:39:47.321]                           grepl <- base::grepl
[17:39:47.321]                           restarts <- computeRestarts(cond)
[17:39:47.321]                           for (restart in restarts) {
[17:39:47.321]                             name <- restart$name
[17:39:47.321]                             if (is.null(name)) 
[17:39:47.321]                               next
[17:39:47.321]                             if (!grepl(pattern, name)) 
[17:39:47.321]                               next
[17:39:47.321]                             invokeRestart(restart)
[17:39:47.321]                             muffled <- TRUE
[17:39:47.321]                             break
[17:39:47.321]                           }
[17:39:47.321]                         }
[17:39:47.321]                       }
[17:39:47.321]                       invisible(muffled)
[17:39:47.321]                     }
[17:39:47.321]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.321]                   }
[17:39:47.321]                 }
[17:39:47.321]             }
[17:39:47.321]         }))
[17:39:47.321]     }, error = function(ex) {
[17:39:47.321]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:47.321]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.321]                 ...future.rng), started = ...future.startTime, 
[17:39:47.321]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:47.321]             version = "1.8"), class = "FutureResult")
[17:39:47.321]     }, finally = {
[17:39:47.321]         if (!identical(...future.workdir, getwd())) 
[17:39:47.321]             setwd(...future.workdir)
[17:39:47.321]         {
[17:39:47.321]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:47.321]                 ...future.oldOptions$nwarnings <- NULL
[17:39:47.321]             }
[17:39:47.321]             base::options(...future.oldOptions)
[17:39:47.321]             if (.Platform$OS.type == "windows") {
[17:39:47.321]                 old_names <- names(...future.oldEnvVars)
[17:39:47.321]                 envs <- base::Sys.getenv()
[17:39:47.321]                 names <- names(envs)
[17:39:47.321]                 common <- intersect(names, old_names)
[17:39:47.321]                 added <- setdiff(names, old_names)
[17:39:47.321]                 removed <- setdiff(old_names, names)
[17:39:47.321]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:47.321]                   envs[common]]
[17:39:47.321]                 NAMES <- toupper(changed)
[17:39:47.321]                 args <- list()
[17:39:47.321]                 for (kk in seq_along(NAMES)) {
[17:39:47.321]                   name <- changed[[kk]]
[17:39:47.321]                   NAME <- NAMES[[kk]]
[17:39:47.321]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.321]                     next
[17:39:47.321]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.321]                 }
[17:39:47.321]                 NAMES <- toupper(added)
[17:39:47.321]                 for (kk in seq_along(NAMES)) {
[17:39:47.321]                   name <- added[[kk]]
[17:39:47.321]                   NAME <- NAMES[[kk]]
[17:39:47.321]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.321]                     next
[17:39:47.321]                   args[[name]] <- ""
[17:39:47.321]                 }
[17:39:47.321]                 NAMES <- toupper(removed)
[17:39:47.321]                 for (kk in seq_along(NAMES)) {
[17:39:47.321]                   name <- removed[[kk]]
[17:39:47.321]                   NAME <- NAMES[[kk]]
[17:39:47.321]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.321]                     next
[17:39:47.321]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.321]                 }
[17:39:47.321]                 if (length(args) > 0) 
[17:39:47.321]                   base::do.call(base::Sys.setenv, args = args)
[17:39:47.321]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:47.321]             }
[17:39:47.321]             else {
[17:39:47.321]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:47.321]             }
[17:39:47.321]             {
[17:39:47.321]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:47.321]                   0L) {
[17:39:47.321]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:47.321]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:47.321]                   base::options(opts)
[17:39:47.321]                 }
[17:39:47.321]                 {
[17:39:47.321]                   {
[17:39:47.321]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:47.321]                     NULL
[17:39:47.321]                   }
[17:39:47.321]                   options(future.plan = NULL)
[17:39:47.321]                   if (is.na(NA_character_)) 
[17:39:47.321]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.321]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:47.321]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:47.321]                     .init = FALSE)
[17:39:47.321]                 }
[17:39:47.321]             }
[17:39:47.321]         }
[17:39:47.321]     })
[17:39:47.321]     if (TRUE) {
[17:39:47.321]         base::sink(type = "output", split = FALSE)
[17:39:47.321]         if (TRUE) {
[17:39:47.321]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:47.321]         }
[17:39:47.321]         else {
[17:39:47.321]             ...future.result["stdout"] <- base::list(NULL)
[17:39:47.321]         }
[17:39:47.321]         base::close(...future.stdout)
[17:39:47.321]         ...future.stdout <- NULL
[17:39:47.321]     }
[17:39:47.321]     ...future.result$conditions <- ...future.conditions
[17:39:47.321]     ...future.result$finished <- base::Sys.time()
[17:39:47.321]     ...future.result
[17:39:47.321] }
[17:39:47.324] requestCore(): workers = 2
[17:39:47.328] MulticoreFuture started
[17:39:47.333] - Launch lazy future ... done
[17:39:47.333] plan(): Setting new future strategy stack:
[17:39:47.333] run() for ‘MulticoreFuture’ ... done
[17:39:47.334] List of future strategies:
[17:39:47.334] 1. sequential:
[17:39:47.334]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.334]    - tweaked: FALSE
[17:39:47.334]    - call: NULL
[17:39:47.335] result() for MulticoreFuture ...
[17:39:47.335] plan(): nbrOfWorkers() = 1
[17:39:47.337] plan(): Setting new future strategy stack:
[17:39:47.337] List of future strategies:
[17:39:47.337] 1. multicore:
[17:39:47.337]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:47.337]    - tweaked: FALSE
[17:39:47.337]    - call: plan(strategy)
[17:39:47.342] plan(): nbrOfWorkers() = 2
[17:39:47.347] result() for MulticoreFuture ...
[17:39:47.347] result() for MulticoreFuture ... done
[17:39:47.347] result() for MulticoreFuture ... done
[17:39:47.347] result() for MulticoreFuture ...
[17:39:47.348] result() for MulticoreFuture ... done
[17:39:47.348] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:47.348] Searching for globals...
[17:39:47.349] - globals found: [1] ‘getOption’
[17:39:47.349] Searching for globals ... DONE
[17:39:47.349] Resolving globals: FALSE
[17:39:47.350] 
[17:39:47.350] 
[17:39:47.350] getGlobalsAndPackages() ... DONE
[17:39:47.350] run() for ‘Future’ ...
[17:39:47.350] - state: ‘created’
[17:39:47.350] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:47.354] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:47.355] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:47.355]   - Field: ‘label’
[17:39:47.355]   - Field: ‘local’
[17:39:47.355]   - Field: ‘owner’
[17:39:47.355]   - Field: ‘envir’
[17:39:47.355]   - Field: ‘workers’
[17:39:47.355]   - Field: ‘packages’
[17:39:47.355]   - Field: ‘gc’
[17:39:47.356]   - Field: ‘job’
[17:39:47.356]   - Field: ‘conditions’
[17:39:47.356]   - Field: ‘expr’
[17:39:47.356]   - Field: ‘uuid’
[17:39:47.356]   - Field: ‘seed’
[17:39:47.356]   - Field: ‘version’
[17:39:47.356]   - Field: ‘result’
[17:39:47.356]   - Field: ‘asynchronous’
[17:39:47.356]   - Field: ‘calls’
[17:39:47.357]   - Field: ‘globals’
[17:39:47.357]   - Field: ‘stdout’
[17:39:47.357]   - Field: ‘earlySignal’
[17:39:47.357]   - Field: ‘lazy’
[17:39:47.357]   - Field: ‘state’
[17:39:47.357] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:47.357] - Launch lazy future ...
[17:39:47.357] Packages needed by the future expression (n = 0): <none>
[17:39:47.358] Packages needed by future strategies (n = 0): <none>
[17:39:47.358] {
[17:39:47.358]     {
[17:39:47.358]         {
[17:39:47.358]             ...future.startTime <- base::Sys.time()
[17:39:47.358]             {
[17:39:47.358]                 {
[17:39:47.358]                   {
[17:39:47.358]                     {
[17:39:47.358]                       base::local({
[17:39:47.358]                         has_future <- base::requireNamespace("future", 
[17:39:47.358]                           quietly = TRUE)
[17:39:47.358]                         if (has_future) {
[17:39:47.358]                           ns <- base::getNamespace("future")
[17:39:47.358]                           version <- ns[[".package"]][["version"]]
[17:39:47.358]                           if (is.null(version)) 
[17:39:47.358]                             version <- utils::packageVersion("future")
[17:39:47.358]                         }
[17:39:47.358]                         else {
[17:39:47.358]                           version <- NULL
[17:39:47.358]                         }
[17:39:47.358]                         if (!has_future || version < "1.8.0") {
[17:39:47.358]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:47.358]                             "", base::R.version$version.string), 
[17:39:47.358]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:47.358]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:47.358]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:47.358]                               "release", "version")], collapse = " "), 
[17:39:47.358]                             hostname = base::Sys.info()[["nodename"]])
[17:39:47.358]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:47.358]                             info)
[17:39:47.358]                           info <- base::paste(info, collapse = "; ")
[17:39:47.358]                           if (!has_future) {
[17:39:47.358]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:47.358]                               info)
[17:39:47.358]                           }
[17:39:47.358]                           else {
[17:39:47.358]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:47.358]                               info, version)
[17:39:47.358]                           }
[17:39:47.358]                           base::stop(msg)
[17:39:47.358]                         }
[17:39:47.358]                       })
[17:39:47.358]                     }
[17:39:47.358]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:47.358]                     base::options(mc.cores = 1L)
[17:39:47.358]                   }
[17:39:47.358]                   ...future.strategy.old <- future::plan("list")
[17:39:47.358]                   options(future.plan = NULL)
[17:39:47.358]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.358]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:47.358]                 }
[17:39:47.358]                 ...future.workdir <- getwd()
[17:39:47.358]             }
[17:39:47.358]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:47.358]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:47.358]         }
[17:39:47.358]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:47.358]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:47.358]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:47.358]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:47.358]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:47.358]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:47.358]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:47.358]             base::names(...future.oldOptions))
[17:39:47.358]     }
[17:39:47.358]     if (FALSE) {
[17:39:47.358]     }
[17:39:47.358]     else {
[17:39:47.358]         if (TRUE) {
[17:39:47.358]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:47.358]                 open = "w")
[17:39:47.358]         }
[17:39:47.358]         else {
[17:39:47.358]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:47.358]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:47.358]         }
[17:39:47.358]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:47.358]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:47.358]             base::sink(type = "output", split = FALSE)
[17:39:47.358]             base::close(...future.stdout)
[17:39:47.358]         }, add = TRUE)
[17:39:47.358]     }
[17:39:47.358]     ...future.frame <- base::sys.nframe()
[17:39:47.358]     ...future.conditions <- base::list()
[17:39:47.358]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:47.358]     if (FALSE) {
[17:39:47.358]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:47.358]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:47.358]     }
[17:39:47.358]     ...future.result <- base::tryCatch({
[17:39:47.358]         base::withCallingHandlers({
[17:39:47.358]             ...future.value <- base::withVisible(base::local({
[17:39:47.358]                 withCallingHandlers({
[17:39:47.358]                   getOption("future.globals.onMissing")
[17:39:47.358]                 }, immediateCondition = function(cond) {
[17:39:47.358]                   save_rds <- function (object, pathname, ...) 
[17:39:47.358]                   {
[17:39:47.358]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:47.358]                     if (file_test("-f", pathname_tmp)) {
[17:39:47.358]                       fi_tmp <- file.info(pathname_tmp)
[17:39:47.358]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:47.358]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:47.358]                         fi_tmp[["mtime"]])
[17:39:47.358]                     }
[17:39:47.358]                     tryCatch({
[17:39:47.358]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:47.358]                     }, error = function(ex) {
[17:39:47.358]                       msg <- conditionMessage(ex)
[17:39:47.358]                       fi_tmp <- file.info(pathname_tmp)
[17:39:47.358]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:47.358]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:47.358]                         fi_tmp[["mtime"]], msg)
[17:39:47.358]                       ex$message <- msg
[17:39:47.358]                       stop(ex)
[17:39:47.358]                     })
[17:39:47.358]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:47.358]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:47.358]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:47.358]                       fi_tmp <- file.info(pathname_tmp)
[17:39:47.358]                       fi <- file.info(pathname)
[17:39:47.358]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:47.358]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:47.358]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:47.358]                         fi[["size"]], fi[["mtime"]])
[17:39:47.358]                       stop(msg)
[17:39:47.358]                     }
[17:39:47.358]                     invisible(pathname)
[17:39:47.358]                   }
[17:39:47.358]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:47.358]                     rootPath = tempdir()) 
[17:39:47.358]                   {
[17:39:47.358]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:47.358]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:47.358]                       tmpdir = path, fileext = ".rds")
[17:39:47.358]                     save_rds(obj, file)
[17:39:47.358]                   }
[17:39:47.358]                   saveImmediateCondition(cond, path = "/tmp/RtmpAfZTdK/.future/immediateConditions")
[17:39:47.358]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.358]                   {
[17:39:47.358]                     inherits <- base::inherits
[17:39:47.358]                     invokeRestart <- base::invokeRestart
[17:39:47.358]                     is.null <- base::is.null
[17:39:47.358]                     muffled <- FALSE
[17:39:47.358]                     if (inherits(cond, "message")) {
[17:39:47.358]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:47.358]                       if (muffled) 
[17:39:47.358]                         invokeRestart("muffleMessage")
[17:39:47.358]                     }
[17:39:47.358]                     else if (inherits(cond, "warning")) {
[17:39:47.358]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:47.358]                       if (muffled) 
[17:39:47.358]                         invokeRestart("muffleWarning")
[17:39:47.358]                     }
[17:39:47.358]                     else if (inherits(cond, "condition")) {
[17:39:47.358]                       if (!is.null(pattern)) {
[17:39:47.358]                         computeRestarts <- base::computeRestarts
[17:39:47.358]                         grepl <- base::grepl
[17:39:47.358]                         restarts <- computeRestarts(cond)
[17:39:47.358]                         for (restart in restarts) {
[17:39:47.358]                           name <- restart$name
[17:39:47.358]                           if (is.null(name)) 
[17:39:47.358]                             next
[17:39:47.358]                           if (!grepl(pattern, name)) 
[17:39:47.358]                             next
[17:39:47.358]                           invokeRestart(restart)
[17:39:47.358]                           muffled <- TRUE
[17:39:47.358]                           break
[17:39:47.358]                         }
[17:39:47.358]                       }
[17:39:47.358]                     }
[17:39:47.358]                     invisible(muffled)
[17:39:47.358]                   }
[17:39:47.358]                   muffleCondition(cond)
[17:39:47.358]                 })
[17:39:47.358]             }))
[17:39:47.358]             future::FutureResult(value = ...future.value$value, 
[17:39:47.358]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.358]                   ...future.rng), globalenv = if (FALSE) 
[17:39:47.358]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:47.358]                     ...future.globalenv.names))
[17:39:47.358]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:47.358]         }, condition = base::local({
[17:39:47.358]             c <- base::c
[17:39:47.358]             inherits <- base::inherits
[17:39:47.358]             invokeRestart <- base::invokeRestart
[17:39:47.358]             length <- base::length
[17:39:47.358]             list <- base::list
[17:39:47.358]             seq.int <- base::seq.int
[17:39:47.358]             signalCondition <- base::signalCondition
[17:39:47.358]             sys.calls <- base::sys.calls
[17:39:47.358]             `[[` <- base::`[[`
[17:39:47.358]             `+` <- base::`+`
[17:39:47.358]             `<<-` <- base::`<<-`
[17:39:47.358]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:47.358]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:47.358]                   3L)]
[17:39:47.358]             }
[17:39:47.358]             function(cond) {
[17:39:47.358]                 is_error <- inherits(cond, "error")
[17:39:47.358]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:47.358]                   NULL)
[17:39:47.358]                 if (is_error) {
[17:39:47.358]                   sessionInformation <- function() {
[17:39:47.358]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:47.358]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:47.358]                       search = base::search(), system = base::Sys.info())
[17:39:47.358]                   }
[17:39:47.358]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.358]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:47.358]                     cond$call), session = sessionInformation(), 
[17:39:47.358]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:47.358]                   signalCondition(cond)
[17:39:47.358]                 }
[17:39:47.358]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:47.358]                 "immediateCondition"))) {
[17:39:47.358]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:47.358]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.358]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:47.358]                   if (TRUE && !signal) {
[17:39:47.358]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.358]                     {
[17:39:47.358]                       inherits <- base::inherits
[17:39:47.358]                       invokeRestart <- base::invokeRestart
[17:39:47.358]                       is.null <- base::is.null
[17:39:47.358]                       muffled <- FALSE
[17:39:47.358]                       if (inherits(cond, "message")) {
[17:39:47.358]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.358]                         if (muffled) 
[17:39:47.358]                           invokeRestart("muffleMessage")
[17:39:47.358]                       }
[17:39:47.358]                       else if (inherits(cond, "warning")) {
[17:39:47.358]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.358]                         if (muffled) 
[17:39:47.358]                           invokeRestart("muffleWarning")
[17:39:47.358]                       }
[17:39:47.358]                       else if (inherits(cond, "condition")) {
[17:39:47.358]                         if (!is.null(pattern)) {
[17:39:47.358]                           computeRestarts <- base::computeRestarts
[17:39:47.358]                           grepl <- base::grepl
[17:39:47.358]                           restarts <- computeRestarts(cond)
[17:39:47.358]                           for (restart in restarts) {
[17:39:47.358]                             name <- restart$name
[17:39:47.358]                             if (is.null(name)) 
[17:39:47.358]                               next
[17:39:47.358]                             if (!grepl(pattern, name)) 
[17:39:47.358]                               next
[17:39:47.358]                             invokeRestart(restart)
[17:39:47.358]                             muffled <- TRUE
[17:39:47.358]                             break
[17:39:47.358]                           }
[17:39:47.358]                         }
[17:39:47.358]                       }
[17:39:47.358]                       invisible(muffled)
[17:39:47.358]                     }
[17:39:47.358]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.358]                   }
[17:39:47.358]                 }
[17:39:47.358]                 else {
[17:39:47.358]                   if (TRUE) {
[17:39:47.358]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.358]                     {
[17:39:47.358]                       inherits <- base::inherits
[17:39:47.358]                       invokeRestart <- base::invokeRestart
[17:39:47.358]                       is.null <- base::is.null
[17:39:47.358]                       muffled <- FALSE
[17:39:47.358]                       if (inherits(cond, "message")) {
[17:39:47.358]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.358]                         if (muffled) 
[17:39:47.358]                           invokeRestart("muffleMessage")
[17:39:47.358]                       }
[17:39:47.358]                       else if (inherits(cond, "warning")) {
[17:39:47.358]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.358]                         if (muffled) 
[17:39:47.358]                           invokeRestart("muffleWarning")
[17:39:47.358]                       }
[17:39:47.358]                       else if (inherits(cond, "condition")) {
[17:39:47.358]                         if (!is.null(pattern)) {
[17:39:47.358]                           computeRestarts <- base::computeRestarts
[17:39:47.358]                           grepl <- base::grepl
[17:39:47.358]                           restarts <- computeRestarts(cond)
[17:39:47.358]                           for (restart in restarts) {
[17:39:47.358]                             name <- restart$name
[17:39:47.358]                             if (is.null(name)) 
[17:39:47.358]                               next
[17:39:47.358]                             if (!grepl(pattern, name)) 
[17:39:47.358]                               next
[17:39:47.358]                             invokeRestart(restart)
[17:39:47.358]                             muffled <- TRUE
[17:39:47.358]                             break
[17:39:47.358]                           }
[17:39:47.358]                         }
[17:39:47.358]                       }
[17:39:47.358]                       invisible(muffled)
[17:39:47.358]                     }
[17:39:47.358]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.358]                   }
[17:39:47.358]                 }
[17:39:47.358]             }
[17:39:47.358]         }))
[17:39:47.358]     }, error = function(ex) {
[17:39:47.358]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:47.358]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.358]                 ...future.rng), started = ...future.startTime, 
[17:39:47.358]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:47.358]             version = "1.8"), class = "FutureResult")
[17:39:47.358]     }, finally = {
[17:39:47.358]         if (!identical(...future.workdir, getwd())) 
[17:39:47.358]             setwd(...future.workdir)
[17:39:47.358]         {
[17:39:47.358]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:47.358]                 ...future.oldOptions$nwarnings <- NULL
[17:39:47.358]             }
[17:39:47.358]             base::options(...future.oldOptions)
[17:39:47.358]             if (.Platform$OS.type == "windows") {
[17:39:47.358]                 old_names <- names(...future.oldEnvVars)
[17:39:47.358]                 envs <- base::Sys.getenv()
[17:39:47.358]                 names <- names(envs)
[17:39:47.358]                 common <- intersect(names, old_names)
[17:39:47.358]                 added <- setdiff(names, old_names)
[17:39:47.358]                 removed <- setdiff(old_names, names)
[17:39:47.358]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:47.358]                   envs[common]]
[17:39:47.358]                 NAMES <- toupper(changed)
[17:39:47.358]                 args <- list()
[17:39:47.358]                 for (kk in seq_along(NAMES)) {
[17:39:47.358]                   name <- changed[[kk]]
[17:39:47.358]                   NAME <- NAMES[[kk]]
[17:39:47.358]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.358]                     next
[17:39:47.358]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.358]                 }
[17:39:47.358]                 NAMES <- toupper(added)
[17:39:47.358]                 for (kk in seq_along(NAMES)) {
[17:39:47.358]                   name <- added[[kk]]
[17:39:47.358]                   NAME <- NAMES[[kk]]
[17:39:47.358]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.358]                     next
[17:39:47.358]                   args[[name]] <- ""
[17:39:47.358]                 }
[17:39:47.358]                 NAMES <- toupper(removed)
[17:39:47.358]                 for (kk in seq_along(NAMES)) {
[17:39:47.358]                   name <- removed[[kk]]
[17:39:47.358]                   NAME <- NAMES[[kk]]
[17:39:47.358]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.358]                     next
[17:39:47.358]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.358]                 }
[17:39:47.358]                 if (length(args) > 0) 
[17:39:47.358]                   base::do.call(base::Sys.setenv, args = args)
[17:39:47.358]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:47.358]             }
[17:39:47.358]             else {
[17:39:47.358]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:47.358]             }
[17:39:47.358]             {
[17:39:47.358]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:47.358]                   0L) {
[17:39:47.358]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:47.358]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:47.358]                   base::options(opts)
[17:39:47.358]                 }
[17:39:47.358]                 {
[17:39:47.358]                   {
[17:39:47.358]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:47.358]                     NULL
[17:39:47.358]                   }
[17:39:47.358]                   options(future.plan = NULL)
[17:39:47.358]                   if (is.na(NA_character_)) 
[17:39:47.358]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.358]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:47.358]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:47.358]                     .init = FALSE)
[17:39:47.358]                 }
[17:39:47.358]             }
[17:39:47.358]         }
[17:39:47.358]     })
[17:39:47.358]     if (TRUE) {
[17:39:47.358]         base::sink(type = "output", split = FALSE)
[17:39:47.358]         if (TRUE) {
[17:39:47.358]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:47.358]         }
[17:39:47.358]         else {
[17:39:47.358]             ...future.result["stdout"] <- base::list(NULL)
[17:39:47.358]         }
[17:39:47.358]         base::close(...future.stdout)
[17:39:47.358]         ...future.stdout <- NULL
[17:39:47.358]     }
[17:39:47.358]     ...future.result$conditions <- ...future.conditions
[17:39:47.358]     ...future.result$finished <- base::Sys.time()
[17:39:47.358]     ...future.result
[17:39:47.358] }
[17:39:47.361] requestCore(): workers = 2
[17:39:47.363] MulticoreFuture started
[17:39:47.363] - Launch lazy future ... done
[17:39:47.363] run() for ‘MulticoreFuture’ ... done
[17:39:47.364] result() for MulticoreFuture ...
[17:39:47.364] plan(): Setting new future strategy stack:
[17:39:47.364] List of future strategies:
[17:39:47.364] 1. sequential:
[17:39:47.364]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.364]    - tweaked: FALSE
[17:39:47.364]    - call: NULL
[17:39:47.365] plan(): nbrOfWorkers() = 1
[17:39:47.367] plan(): Setting new future strategy stack:
[17:39:47.367] List of future strategies:
[17:39:47.367] 1. multicore:
[17:39:47.367]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:47.367]    - tweaked: FALSE
[17:39:47.367]    - call: plan(strategy)
[17:39:47.372] plan(): nbrOfWorkers() = 2
[17:39:47.373] result() for MulticoreFuture ...
[17:39:47.373] result() for MulticoreFuture ... done
[17:39:47.373] result() for MulticoreFuture ... done
[17:39:47.373] result() for MulticoreFuture ...
[17:39:47.373] result() for MulticoreFuture ... done
[17:39:47.374] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:39:47.374] Searching for globals...
[17:39:47.376] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:47.376] Searching for globals...
[17:39:47.377] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:39:47.377] Searching for globals ... DONE
[17:39:47.377] Resolving globals: FALSE
[17:39:47.378] The total size of the 1 globals is 160 bytes (160 bytes)
[17:39:47.379] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:39:47.379] - globals: [1] ‘data’
[17:39:47.379] 
[17:39:47.379] getGlobalsAndPackages() ... DONE
[17:39:47.379] run() for ‘Future’ ...
[17:39:47.379] - state: ‘created’
[17:39:47.380] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:47.384] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:47.384] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:47.384]   - Field: ‘label’
[17:39:47.384]   - Field: ‘local’
[17:39:47.384]   - Field: ‘owner’
[17:39:47.384]   - Field: ‘envir’
[17:39:47.385]   - Field: ‘workers’
[17:39:47.385]   - Field: ‘packages’
[17:39:47.385]   - Field: ‘gc’
[17:39:47.385]   - Field: ‘job’
[17:39:47.385]   - Field: ‘conditions’
[17:39:47.385]   - Field: ‘expr’
[17:39:47.385]   - Field: ‘uuid’
[17:39:47.385]   - Field: ‘seed’
[17:39:47.385]   - Field: ‘version’
[17:39:47.386]   - Field: ‘result’
[17:39:47.386]   - Field: ‘asynchronous’
[17:39:47.386]   - Field: ‘calls’
[17:39:47.386]   - Field: ‘globals’
[17:39:47.386]   - Field: ‘stdout’
[17:39:47.386]   - Field: ‘earlySignal’
[17:39:47.386]   - Field: ‘lazy’
[17:39:47.386]   - Field: ‘state’
[17:39:47.386] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:47.386] - Launch lazy future ...
[17:39:47.387] Packages needed by the future expression (n = 0): <none>
[17:39:47.387] Packages needed by future strategies (n = 0): <none>
[17:39:47.387] {
[17:39:47.387]     {
[17:39:47.387]         {
[17:39:47.387]             ...future.startTime <- base::Sys.time()
[17:39:47.387]             {
[17:39:47.387]                 {
[17:39:47.387]                   {
[17:39:47.387]                     {
[17:39:47.387]                       base::local({
[17:39:47.387]                         has_future <- base::requireNamespace("future", 
[17:39:47.387]                           quietly = TRUE)
[17:39:47.387]                         if (has_future) {
[17:39:47.387]                           ns <- base::getNamespace("future")
[17:39:47.387]                           version <- ns[[".package"]][["version"]]
[17:39:47.387]                           if (is.null(version)) 
[17:39:47.387]                             version <- utils::packageVersion("future")
[17:39:47.387]                         }
[17:39:47.387]                         else {
[17:39:47.387]                           version <- NULL
[17:39:47.387]                         }
[17:39:47.387]                         if (!has_future || version < "1.8.0") {
[17:39:47.387]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:47.387]                             "", base::R.version$version.string), 
[17:39:47.387]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:47.387]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:47.387]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:47.387]                               "release", "version")], collapse = " "), 
[17:39:47.387]                             hostname = base::Sys.info()[["nodename"]])
[17:39:47.387]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:47.387]                             info)
[17:39:47.387]                           info <- base::paste(info, collapse = "; ")
[17:39:47.387]                           if (!has_future) {
[17:39:47.387]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:47.387]                               info)
[17:39:47.387]                           }
[17:39:47.387]                           else {
[17:39:47.387]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:47.387]                               info, version)
[17:39:47.387]                           }
[17:39:47.387]                           base::stop(msg)
[17:39:47.387]                         }
[17:39:47.387]                       })
[17:39:47.387]                     }
[17:39:47.387]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:47.387]                     base::options(mc.cores = 1L)
[17:39:47.387]                   }
[17:39:47.387]                   ...future.strategy.old <- future::plan("list")
[17:39:47.387]                   options(future.plan = NULL)
[17:39:47.387]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.387]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:47.387]                 }
[17:39:47.387]                 ...future.workdir <- getwd()
[17:39:47.387]             }
[17:39:47.387]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:47.387]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:47.387]         }
[17:39:47.387]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:47.387]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:47.387]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:47.387]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:47.387]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:47.387]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:47.387]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:47.387]             base::names(...future.oldOptions))
[17:39:47.387]     }
[17:39:47.387]     if (FALSE) {
[17:39:47.387]     }
[17:39:47.387]     else {
[17:39:47.387]         if (TRUE) {
[17:39:47.387]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:47.387]                 open = "w")
[17:39:47.387]         }
[17:39:47.387]         else {
[17:39:47.387]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:47.387]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:47.387]         }
[17:39:47.387]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:47.387]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:47.387]             base::sink(type = "output", split = FALSE)
[17:39:47.387]             base::close(...future.stdout)
[17:39:47.387]         }, add = TRUE)
[17:39:47.387]     }
[17:39:47.387]     ...future.frame <- base::sys.nframe()
[17:39:47.387]     ...future.conditions <- base::list()
[17:39:47.387]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:47.387]     if (FALSE) {
[17:39:47.387]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:47.387]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:47.387]     }
[17:39:47.387]     ...future.result <- base::tryCatch({
[17:39:47.387]         base::withCallingHandlers({
[17:39:47.387]             ...future.value <- base::withVisible(base::local({
[17:39:47.387]                 withCallingHandlers({
[17:39:47.387]                   subset(data, x < 3)$y
[17:39:47.387]                 }, immediateCondition = function(cond) {
[17:39:47.387]                   save_rds <- function (object, pathname, ...) 
[17:39:47.387]                   {
[17:39:47.387]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:47.387]                     if (file_test("-f", pathname_tmp)) {
[17:39:47.387]                       fi_tmp <- file.info(pathname_tmp)
[17:39:47.387]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:47.387]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:47.387]                         fi_tmp[["mtime"]])
[17:39:47.387]                     }
[17:39:47.387]                     tryCatch({
[17:39:47.387]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:47.387]                     }, error = function(ex) {
[17:39:47.387]                       msg <- conditionMessage(ex)
[17:39:47.387]                       fi_tmp <- file.info(pathname_tmp)
[17:39:47.387]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:47.387]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:47.387]                         fi_tmp[["mtime"]], msg)
[17:39:47.387]                       ex$message <- msg
[17:39:47.387]                       stop(ex)
[17:39:47.387]                     })
[17:39:47.387]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:47.387]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:47.387]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:47.387]                       fi_tmp <- file.info(pathname_tmp)
[17:39:47.387]                       fi <- file.info(pathname)
[17:39:47.387]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:47.387]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:47.387]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:47.387]                         fi[["size"]], fi[["mtime"]])
[17:39:47.387]                       stop(msg)
[17:39:47.387]                     }
[17:39:47.387]                     invisible(pathname)
[17:39:47.387]                   }
[17:39:47.387]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:47.387]                     rootPath = tempdir()) 
[17:39:47.387]                   {
[17:39:47.387]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:47.387]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:47.387]                       tmpdir = path, fileext = ".rds")
[17:39:47.387]                     save_rds(obj, file)
[17:39:47.387]                   }
[17:39:47.387]                   saveImmediateCondition(cond, path = "/tmp/RtmpAfZTdK/.future/immediateConditions")
[17:39:47.387]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.387]                   {
[17:39:47.387]                     inherits <- base::inherits
[17:39:47.387]                     invokeRestart <- base::invokeRestart
[17:39:47.387]                     is.null <- base::is.null
[17:39:47.387]                     muffled <- FALSE
[17:39:47.387]                     if (inherits(cond, "message")) {
[17:39:47.387]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:47.387]                       if (muffled) 
[17:39:47.387]                         invokeRestart("muffleMessage")
[17:39:47.387]                     }
[17:39:47.387]                     else if (inherits(cond, "warning")) {
[17:39:47.387]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:47.387]                       if (muffled) 
[17:39:47.387]                         invokeRestart("muffleWarning")
[17:39:47.387]                     }
[17:39:47.387]                     else if (inherits(cond, "condition")) {
[17:39:47.387]                       if (!is.null(pattern)) {
[17:39:47.387]                         computeRestarts <- base::computeRestarts
[17:39:47.387]                         grepl <- base::grepl
[17:39:47.387]                         restarts <- computeRestarts(cond)
[17:39:47.387]                         for (restart in restarts) {
[17:39:47.387]                           name <- restart$name
[17:39:47.387]                           if (is.null(name)) 
[17:39:47.387]                             next
[17:39:47.387]                           if (!grepl(pattern, name)) 
[17:39:47.387]                             next
[17:39:47.387]                           invokeRestart(restart)
[17:39:47.387]                           muffled <- TRUE
[17:39:47.387]                           break
[17:39:47.387]                         }
[17:39:47.387]                       }
[17:39:47.387]                     }
[17:39:47.387]                     invisible(muffled)
[17:39:47.387]                   }
[17:39:47.387]                   muffleCondition(cond)
[17:39:47.387]                 })
[17:39:47.387]             }))
[17:39:47.387]             future::FutureResult(value = ...future.value$value, 
[17:39:47.387]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.387]                   ...future.rng), globalenv = if (FALSE) 
[17:39:47.387]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:47.387]                     ...future.globalenv.names))
[17:39:47.387]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:47.387]         }, condition = base::local({
[17:39:47.387]             c <- base::c
[17:39:47.387]             inherits <- base::inherits
[17:39:47.387]             invokeRestart <- base::invokeRestart
[17:39:47.387]             length <- base::length
[17:39:47.387]             list <- base::list
[17:39:47.387]             seq.int <- base::seq.int
[17:39:47.387]             signalCondition <- base::signalCondition
[17:39:47.387]             sys.calls <- base::sys.calls
[17:39:47.387]             `[[` <- base::`[[`
[17:39:47.387]             `+` <- base::`+`
[17:39:47.387]             `<<-` <- base::`<<-`
[17:39:47.387]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:47.387]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:47.387]                   3L)]
[17:39:47.387]             }
[17:39:47.387]             function(cond) {
[17:39:47.387]                 is_error <- inherits(cond, "error")
[17:39:47.387]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:47.387]                   NULL)
[17:39:47.387]                 if (is_error) {
[17:39:47.387]                   sessionInformation <- function() {
[17:39:47.387]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:47.387]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:47.387]                       search = base::search(), system = base::Sys.info())
[17:39:47.387]                   }
[17:39:47.387]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.387]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:47.387]                     cond$call), session = sessionInformation(), 
[17:39:47.387]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:47.387]                   signalCondition(cond)
[17:39:47.387]                 }
[17:39:47.387]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:47.387]                 "immediateCondition"))) {
[17:39:47.387]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:47.387]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.387]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:47.387]                   if (TRUE && !signal) {
[17:39:47.387]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.387]                     {
[17:39:47.387]                       inherits <- base::inherits
[17:39:47.387]                       invokeRestart <- base::invokeRestart
[17:39:47.387]                       is.null <- base::is.null
[17:39:47.387]                       muffled <- FALSE
[17:39:47.387]                       if (inherits(cond, "message")) {
[17:39:47.387]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.387]                         if (muffled) 
[17:39:47.387]                           invokeRestart("muffleMessage")
[17:39:47.387]                       }
[17:39:47.387]                       else if (inherits(cond, "warning")) {
[17:39:47.387]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.387]                         if (muffled) 
[17:39:47.387]                           invokeRestart("muffleWarning")
[17:39:47.387]                       }
[17:39:47.387]                       else if (inherits(cond, "condition")) {
[17:39:47.387]                         if (!is.null(pattern)) {
[17:39:47.387]                           computeRestarts <- base::computeRestarts
[17:39:47.387]                           grepl <- base::grepl
[17:39:47.387]                           restarts <- computeRestarts(cond)
[17:39:47.387]                           for (restart in restarts) {
[17:39:47.387]                             name <- restart$name
[17:39:47.387]                             if (is.null(name)) 
[17:39:47.387]                               next
[17:39:47.387]                             if (!grepl(pattern, name)) 
[17:39:47.387]                               next
[17:39:47.387]                             invokeRestart(restart)
[17:39:47.387]                             muffled <- TRUE
[17:39:47.387]                             break
[17:39:47.387]                           }
[17:39:47.387]                         }
[17:39:47.387]                       }
[17:39:47.387]                       invisible(muffled)
[17:39:47.387]                     }
[17:39:47.387]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.387]                   }
[17:39:47.387]                 }
[17:39:47.387]                 else {
[17:39:47.387]                   if (TRUE) {
[17:39:47.387]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.387]                     {
[17:39:47.387]                       inherits <- base::inherits
[17:39:47.387]                       invokeRestart <- base::invokeRestart
[17:39:47.387]                       is.null <- base::is.null
[17:39:47.387]                       muffled <- FALSE
[17:39:47.387]                       if (inherits(cond, "message")) {
[17:39:47.387]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.387]                         if (muffled) 
[17:39:47.387]                           invokeRestart("muffleMessage")
[17:39:47.387]                       }
[17:39:47.387]                       else if (inherits(cond, "warning")) {
[17:39:47.387]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.387]                         if (muffled) 
[17:39:47.387]                           invokeRestart("muffleWarning")
[17:39:47.387]                       }
[17:39:47.387]                       else if (inherits(cond, "condition")) {
[17:39:47.387]                         if (!is.null(pattern)) {
[17:39:47.387]                           computeRestarts <- base::computeRestarts
[17:39:47.387]                           grepl <- base::grepl
[17:39:47.387]                           restarts <- computeRestarts(cond)
[17:39:47.387]                           for (restart in restarts) {
[17:39:47.387]                             name <- restart$name
[17:39:47.387]                             if (is.null(name)) 
[17:39:47.387]                               next
[17:39:47.387]                             if (!grepl(pattern, name)) 
[17:39:47.387]                               next
[17:39:47.387]                             invokeRestart(restart)
[17:39:47.387]                             muffled <- TRUE
[17:39:47.387]                             break
[17:39:47.387]                           }
[17:39:47.387]                         }
[17:39:47.387]                       }
[17:39:47.387]                       invisible(muffled)
[17:39:47.387]                     }
[17:39:47.387]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.387]                   }
[17:39:47.387]                 }
[17:39:47.387]             }
[17:39:47.387]         }))
[17:39:47.387]     }, error = function(ex) {
[17:39:47.387]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:47.387]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.387]                 ...future.rng), started = ...future.startTime, 
[17:39:47.387]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:47.387]             version = "1.8"), class = "FutureResult")
[17:39:47.387]     }, finally = {
[17:39:47.387]         if (!identical(...future.workdir, getwd())) 
[17:39:47.387]             setwd(...future.workdir)
[17:39:47.387]         {
[17:39:47.387]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:47.387]                 ...future.oldOptions$nwarnings <- NULL
[17:39:47.387]             }
[17:39:47.387]             base::options(...future.oldOptions)
[17:39:47.387]             if (.Platform$OS.type == "windows") {
[17:39:47.387]                 old_names <- names(...future.oldEnvVars)
[17:39:47.387]                 envs <- base::Sys.getenv()
[17:39:47.387]                 names <- names(envs)
[17:39:47.387]                 common <- intersect(names, old_names)
[17:39:47.387]                 added <- setdiff(names, old_names)
[17:39:47.387]                 removed <- setdiff(old_names, names)
[17:39:47.387]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:47.387]                   envs[common]]
[17:39:47.387]                 NAMES <- toupper(changed)
[17:39:47.387]                 args <- list()
[17:39:47.387]                 for (kk in seq_along(NAMES)) {
[17:39:47.387]                   name <- changed[[kk]]
[17:39:47.387]                   NAME <- NAMES[[kk]]
[17:39:47.387]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.387]                     next
[17:39:47.387]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.387]                 }
[17:39:47.387]                 NAMES <- toupper(added)
[17:39:47.387]                 for (kk in seq_along(NAMES)) {
[17:39:47.387]                   name <- added[[kk]]
[17:39:47.387]                   NAME <- NAMES[[kk]]
[17:39:47.387]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.387]                     next
[17:39:47.387]                   args[[name]] <- ""
[17:39:47.387]                 }
[17:39:47.387]                 NAMES <- toupper(removed)
[17:39:47.387]                 for (kk in seq_along(NAMES)) {
[17:39:47.387]                   name <- removed[[kk]]
[17:39:47.387]                   NAME <- NAMES[[kk]]
[17:39:47.387]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.387]                     next
[17:39:47.387]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.387]                 }
[17:39:47.387]                 if (length(args) > 0) 
[17:39:47.387]                   base::do.call(base::Sys.setenv, args = args)
[17:39:47.387]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:47.387]             }
[17:39:47.387]             else {
[17:39:47.387]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:47.387]             }
[17:39:47.387]             {
[17:39:47.387]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:47.387]                   0L) {
[17:39:47.387]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:47.387]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:47.387]                   base::options(opts)
[17:39:47.387]                 }
[17:39:47.387]                 {
[17:39:47.387]                   {
[17:39:47.387]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:47.387]                     NULL
[17:39:47.387]                   }
[17:39:47.387]                   options(future.plan = NULL)
[17:39:47.387]                   if (is.na(NA_character_)) 
[17:39:47.387]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.387]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:47.387]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:47.387]                     .init = FALSE)
[17:39:47.387]                 }
[17:39:47.387]             }
[17:39:47.387]         }
[17:39:47.387]     })
[17:39:47.387]     if (TRUE) {
[17:39:47.387]         base::sink(type = "output", split = FALSE)
[17:39:47.387]         if (TRUE) {
[17:39:47.387]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:47.387]         }
[17:39:47.387]         else {
[17:39:47.387]             ...future.result["stdout"] <- base::list(NULL)
[17:39:47.387]         }
[17:39:47.387]         base::close(...future.stdout)
[17:39:47.387]         ...future.stdout <- NULL
[17:39:47.387]     }
[17:39:47.387]     ...future.result$conditions <- ...future.conditions
[17:39:47.387]     ...future.result$finished <- base::Sys.time()
[17:39:47.387]     ...future.result
[17:39:47.387] }
[17:39:47.390] assign_globals() ...
[17:39:47.390] List of 1
[17:39:47.390]  $ data:'data.frame':	5 obs. of  2 variables:
[17:39:47.390]   ..$ x: int [1:5] 1 2 3 4 5
[17:39:47.390]   ..$ y: int [1:5] 1 2 3 4 5
[17:39:47.390]  - attr(*, "where")=List of 1
[17:39:47.390]   ..$ data:<environment: R_EmptyEnv> 
[17:39:47.390]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:47.390]  - attr(*, "resolved")= logi FALSE
[17:39:47.390]  - attr(*, "total_size")= num 160
[17:39:47.390]  - attr(*, "already-done")= logi TRUE
[17:39:47.397] - copied ‘data’ to environment
[17:39:47.397] assign_globals() ... done
[17:39:47.397] requestCore(): workers = 2
[17:39:47.399] MulticoreFuture started
[17:39:47.400] - Launch lazy future ... done
[17:39:47.400] run() for ‘MulticoreFuture’ ... done
[17:39:47.400] result() for MulticoreFuture ...
[17:39:47.400] plan(): Setting new future strategy stack:
[17:39:47.401] List of future strategies:
[17:39:47.401] 1. sequential:
[17:39:47.401]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.401]    - tweaked: FALSE
[17:39:47.401]    - call: NULL
[17:39:47.402] plan(): nbrOfWorkers() = 1
[17:39:47.404] plan(): Setting new future strategy stack:
[17:39:47.405] List of future strategies:
[17:39:47.405] 1. multicore:
[17:39:47.405]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:47.405]    - tweaked: FALSE
[17:39:47.405]    - call: plan(strategy)
[17:39:47.410] plan(): nbrOfWorkers() = 2
[17:39:47.411] result() for MulticoreFuture ...
[17:39:47.411] result() for MulticoreFuture ... done
[17:39:47.411] result() for MulticoreFuture ... done
[17:39:47.411] result() for MulticoreFuture ...
[17:39:47.411] result() for MulticoreFuture ... done
[17:39:47.412] plan(): Setting new future strategy stack:
[17:39:47.412] List of future strategies:
[17:39:47.412] 1. sequential:
[17:39:47.412]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.412]    - tweaked: FALSE
[17:39:47.412]    - call: plan(list(sequential, strategy))
[17:39:47.412] 2. multicore:
[17:39:47.412]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:47.412]    - tweaked: FALSE
[17:39:47.412]    - call: plan(list(sequential, strategy))
[17:39:47.413] plan(): nbrOfWorkers() = 1
[17:39:47.413] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:47.413] Searching for globals...
[17:39:47.417] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[17:39:47.417] Searching for globals ... DONE
[17:39:47.417] Resolving globals: FALSE
[17:39:47.418] The total size of the 1 globals is 160 bytes (160 bytes)
[17:39:47.419] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:39:47.419] - globals: [1] ‘data’
[17:39:47.419] - packages: [1] ‘future’
[17:39:47.419] getGlobalsAndPackages() ... DONE
[17:39:47.419] run() for ‘Future’ ...
[17:39:47.420] - state: ‘created’
[17:39:47.420] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:47.420] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:47.420] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:47.420]   - Field: ‘label’
[17:39:47.421]   - Field: ‘local’
[17:39:47.421]   - Field: ‘owner’
[17:39:47.421]   - Field: ‘envir’
[17:39:47.421]   - Field: ‘packages’
[17:39:47.421]   - Field: ‘gc’
[17:39:47.421]   - Field: ‘conditions’
[17:39:47.421]   - Field: ‘expr’
[17:39:47.421]   - Field: ‘uuid’
[17:39:47.421]   - Field: ‘seed’
[17:39:47.421]   - Field: ‘version’
[17:39:47.422]   - Field: ‘result’
[17:39:47.422]   - Field: ‘asynchronous’
[17:39:47.422]   - Field: ‘calls’
[17:39:47.422]   - Field: ‘globals’
[17:39:47.422]   - Field: ‘stdout’
[17:39:47.422]   - Field: ‘earlySignal’
[17:39:47.422]   - Field: ‘lazy’
[17:39:47.422]   - Field: ‘state’
[17:39:47.422] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:47.423] - Launch lazy future ...
[17:39:47.423] Packages needed by the future expression (n = 1): ‘future’
[17:39:47.423] Packages needed by future strategies (n = 1): ‘future’
[17:39:47.424] {
[17:39:47.424]     {
[17:39:47.424]         {
[17:39:47.424]             ...future.startTime <- base::Sys.time()
[17:39:47.424]             {
[17:39:47.424]                 {
[17:39:47.424]                   {
[17:39:47.424]                     {
[17:39:47.424]                       base::local({
[17:39:47.424]                         has_future <- base::requireNamespace("future", 
[17:39:47.424]                           quietly = TRUE)
[17:39:47.424]                         if (has_future) {
[17:39:47.424]                           ns <- base::getNamespace("future")
[17:39:47.424]                           version <- ns[[".package"]][["version"]]
[17:39:47.424]                           if (is.null(version)) 
[17:39:47.424]                             version <- utils::packageVersion("future")
[17:39:47.424]                         }
[17:39:47.424]                         else {
[17:39:47.424]                           version <- NULL
[17:39:47.424]                         }
[17:39:47.424]                         if (!has_future || version < "1.8.0") {
[17:39:47.424]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:47.424]                             "", base::R.version$version.string), 
[17:39:47.424]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:47.424]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:47.424]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:47.424]                               "release", "version")], collapse = " "), 
[17:39:47.424]                             hostname = base::Sys.info()[["nodename"]])
[17:39:47.424]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:47.424]                             info)
[17:39:47.424]                           info <- base::paste(info, collapse = "; ")
[17:39:47.424]                           if (!has_future) {
[17:39:47.424]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:47.424]                               info)
[17:39:47.424]                           }
[17:39:47.424]                           else {
[17:39:47.424]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:47.424]                               info, version)
[17:39:47.424]                           }
[17:39:47.424]                           base::stop(msg)
[17:39:47.424]                         }
[17:39:47.424]                       })
[17:39:47.424]                     }
[17:39:47.424]                     base::local({
[17:39:47.424]                       for (pkg in "future") {
[17:39:47.424]                         base::loadNamespace(pkg)
[17:39:47.424]                         base::library(pkg, character.only = TRUE)
[17:39:47.424]                       }
[17:39:47.424]                     })
[17:39:47.424]                   }
[17:39:47.424]                   ...future.strategy.old <- future::plan("list")
[17:39:47.424]                   options(future.plan = NULL)
[17:39:47.424]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.424]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:39:47.424]                     envir = parent.frame()) 
[17:39:47.424]                   {
[17:39:47.424]                     default_workers <- missing(workers)
[17:39:47.424]                     if (is.function(workers)) 
[17:39:47.424]                       workers <- workers()
[17:39:47.424]                     workers <- structure(as.integer(workers), 
[17:39:47.424]                       class = class(workers))
[17:39:47.424]                     stop_if_not(is.finite(workers), workers >= 
[17:39:47.424]                       1L)
[17:39:47.424]                     if ((workers == 1L && !inherits(workers, 
[17:39:47.424]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:39:47.424]                       if (default_workers) 
[17:39:47.424]                         supportsMulticore(warn = TRUE)
[17:39:47.424]                       return(sequential(..., envir = envir))
[17:39:47.424]                     }
[17:39:47.424]                     oopts <- options(mc.cores = workers)
[17:39:47.424]                     on.exit(options(oopts))
[17:39:47.424]                     future <- MulticoreFuture(..., workers = workers, 
[17:39:47.424]                       envir = envir)
[17:39:47.424]                     if (!future$lazy) 
[17:39:47.424]                       future <- run(future)
[17:39:47.424]                     invisible(future)
[17:39:47.424]                   }), .cleanup = FALSE, .init = FALSE)
[17:39:47.424]                 }
[17:39:47.424]                 ...future.workdir <- getwd()
[17:39:47.424]             }
[17:39:47.424]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:47.424]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:47.424]         }
[17:39:47.424]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:47.424]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:47.424]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:47.424]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:47.424]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:47.424]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:47.424]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:47.424]             base::names(...future.oldOptions))
[17:39:47.424]     }
[17:39:47.424]     if (FALSE) {
[17:39:47.424]     }
[17:39:47.424]     else {
[17:39:47.424]         if (TRUE) {
[17:39:47.424]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:47.424]                 open = "w")
[17:39:47.424]         }
[17:39:47.424]         else {
[17:39:47.424]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:47.424]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:47.424]         }
[17:39:47.424]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:47.424]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:47.424]             base::sink(type = "output", split = FALSE)
[17:39:47.424]             base::close(...future.stdout)
[17:39:47.424]         }, add = TRUE)
[17:39:47.424]     }
[17:39:47.424]     ...future.frame <- base::sys.nframe()
[17:39:47.424]     ...future.conditions <- base::list()
[17:39:47.424]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:47.424]     if (FALSE) {
[17:39:47.424]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:47.424]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:47.424]     }
[17:39:47.424]     ...future.result <- base::tryCatch({
[17:39:47.424]         base::withCallingHandlers({
[17:39:47.424]             ...future.value <- base::withVisible(base::local({
[17:39:47.424]                 a %<-% subset(data, x < 3)$y
[17:39:47.424]                 a
[17:39:47.424]             }))
[17:39:47.424]             future::FutureResult(value = ...future.value$value, 
[17:39:47.424]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.424]                   ...future.rng), globalenv = if (FALSE) 
[17:39:47.424]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:47.424]                     ...future.globalenv.names))
[17:39:47.424]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:47.424]         }, condition = base::local({
[17:39:47.424]             c <- base::c
[17:39:47.424]             inherits <- base::inherits
[17:39:47.424]             invokeRestart <- base::invokeRestart
[17:39:47.424]             length <- base::length
[17:39:47.424]             list <- base::list
[17:39:47.424]             seq.int <- base::seq.int
[17:39:47.424]             signalCondition <- base::signalCondition
[17:39:47.424]             sys.calls <- base::sys.calls
[17:39:47.424]             `[[` <- base::`[[`
[17:39:47.424]             `+` <- base::`+`
[17:39:47.424]             `<<-` <- base::`<<-`
[17:39:47.424]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:47.424]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:47.424]                   3L)]
[17:39:47.424]             }
[17:39:47.424]             function(cond) {
[17:39:47.424]                 is_error <- inherits(cond, "error")
[17:39:47.424]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:47.424]                   NULL)
[17:39:47.424]                 if (is_error) {
[17:39:47.424]                   sessionInformation <- function() {
[17:39:47.424]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:47.424]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:47.424]                       search = base::search(), system = base::Sys.info())
[17:39:47.424]                   }
[17:39:47.424]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.424]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:47.424]                     cond$call), session = sessionInformation(), 
[17:39:47.424]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:47.424]                   signalCondition(cond)
[17:39:47.424]                 }
[17:39:47.424]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:47.424]                 "immediateCondition"))) {
[17:39:47.424]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:47.424]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.424]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:47.424]                   if (TRUE && !signal) {
[17:39:47.424]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.424]                     {
[17:39:47.424]                       inherits <- base::inherits
[17:39:47.424]                       invokeRestart <- base::invokeRestart
[17:39:47.424]                       is.null <- base::is.null
[17:39:47.424]                       muffled <- FALSE
[17:39:47.424]                       if (inherits(cond, "message")) {
[17:39:47.424]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.424]                         if (muffled) 
[17:39:47.424]                           invokeRestart("muffleMessage")
[17:39:47.424]                       }
[17:39:47.424]                       else if (inherits(cond, "warning")) {
[17:39:47.424]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.424]                         if (muffled) 
[17:39:47.424]                           invokeRestart("muffleWarning")
[17:39:47.424]                       }
[17:39:47.424]                       else if (inherits(cond, "condition")) {
[17:39:47.424]                         if (!is.null(pattern)) {
[17:39:47.424]                           computeRestarts <- base::computeRestarts
[17:39:47.424]                           grepl <- base::grepl
[17:39:47.424]                           restarts <- computeRestarts(cond)
[17:39:47.424]                           for (restart in restarts) {
[17:39:47.424]                             name <- restart$name
[17:39:47.424]                             if (is.null(name)) 
[17:39:47.424]                               next
[17:39:47.424]                             if (!grepl(pattern, name)) 
[17:39:47.424]                               next
[17:39:47.424]                             invokeRestart(restart)
[17:39:47.424]                             muffled <- TRUE
[17:39:47.424]                             break
[17:39:47.424]                           }
[17:39:47.424]                         }
[17:39:47.424]                       }
[17:39:47.424]                       invisible(muffled)
[17:39:47.424]                     }
[17:39:47.424]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.424]                   }
[17:39:47.424]                 }
[17:39:47.424]                 else {
[17:39:47.424]                   if (TRUE) {
[17:39:47.424]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.424]                     {
[17:39:47.424]                       inherits <- base::inherits
[17:39:47.424]                       invokeRestart <- base::invokeRestart
[17:39:47.424]                       is.null <- base::is.null
[17:39:47.424]                       muffled <- FALSE
[17:39:47.424]                       if (inherits(cond, "message")) {
[17:39:47.424]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.424]                         if (muffled) 
[17:39:47.424]                           invokeRestart("muffleMessage")
[17:39:47.424]                       }
[17:39:47.424]                       else if (inherits(cond, "warning")) {
[17:39:47.424]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.424]                         if (muffled) 
[17:39:47.424]                           invokeRestart("muffleWarning")
[17:39:47.424]                       }
[17:39:47.424]                       else if (inherits(cond, "condition")) {
[17:39:47.424]                         if (!is.null(pattern)) {
[17:39:47.424]                           computeRestarts <- base::computeRestarts
[17:39:47.424]                           grepl <- base::grepl
[17:39:47.424]                           restarts <- computeRestarts(cond)
[17:39:47.424]                           for (restart in restarts) {
[17:39:47.424]                             name <- restart$name
[17:39:47.424]                             if (is.null(name)) 
[17:39:47.424]                               next
[17:39:47.424]                             if (!grepl(pattern, name)) 
[17:39:47.424]                               next
[17:39:47.424]                             invokeRestart(restart)
[17:39:47.424]                             muffled <- TRUE
[17:39:47.424]                             break
[17:39:47.424]                           }
[17:39:47.424]                         }
[17:39:47.424]                       }
[17:39:47.424]                       invisible(muffled)
[17:39:47.424]                     }
[17:39:47.424]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.424]                   }
[17:39:47.424]                 }
[17:39:47.424]             }
[17:39:47.424]         }))
[17:39:47.424]     }, error = function(ex) {
[17:39:47.424]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:47.424]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.424]                 ...future.rng), started = ...future.startTime, 
[17:39:47.424]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:47.424]             version = "1.8"), class = "FutureResult")
[17:39:47.424]     }, finally = {
[17:39:47.424]         if (!identical(...future.workdir, getwd())) 
[17:39:47.424]             setwd(...future.workdir)
[17:39:47.424]         {
[17:39:47.424]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:47.424]                 ...future.oldOptions$nwarnings <- NULL
[17:39:47.424]             }
[17:39:47.424]             base::options(...future.oldOptions)
[17:39:47.424]             if (.Platform$OS.type == "windows") {
[17:39:47.424]                 old_names <- names(...future.oldEnvVars)
[17:39:47.424]                 envs <- base::Sys.getenv()
[17:39:47.424]                 names <- names(envs)
[17:39:47.424]                 common <- intersect(names, old_names)
[17:39:47.424]                 added <- setdiff(names, old_names)
[17:39:47.424]                 removed <- setdiff(old_names, names)
[17:39:47.424]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:47.424]                   envs[common]]
[17:39:47.424]                 NAMES <- toupper(changed)
[17:39:47.424]                 args <- list()
[17:39:47.424]                 for (kk in seq_along(NAMES)) {
[17:39:47.424]                   name <- changed[[kk]]
[17:39:47.424]                   NAME <- NAMES[[kk]]
[17:39:47.424]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.424]                     next
[17:39:47.424]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.424]                 }
[17:39:47.424]                 NAMES <- toupper(added)
[17:39:47.424]                 for (kk in seq_along(NAMES)) {
[17:39:47.424]                   name <- added[[kk]]
[17:39:47.424]                   NAME <- NAMES[[kk]]
[17:39:47.424]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.424]                     next
[17:39:47.424]                   args[[name]] <- ""
[17:39:47.424]                 }
[17:39:47.424]                 NAMES <- toupper(removed)
[17:39:47.424]                 for (kk in seq_along(NAMES)) {
[17:39:47.424]                   name <- removed[[kk]]
[17:39:47.424]                   NAME <- NAMES[[kk]]
[17:39:47.424]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.424]                     next
[17:39:47.424]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.424]                 }
[17:39:47.424]                 if (length(args) > 0) 
[17:39:47.424]                   base::do.call(base::Sys.setenv, args = args)
[17:39:47.424]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:47.424]             }
[17:39:47.424]             else {
[17:39:47.424]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:47.424]             }
[17:39:47.424]             {
[17:39:47.424]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:47.424]                   0L) {
[17:39:47.424]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:47.424]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:47.424]                   base::options(opts)
[17:39:47.424]                 }
[17:39:47.424]                 {
[17:39:47.424]                   {
[17:39:47.424]                     NULL
[17:39:47.424]                     RNGkind("Mersenne-Twister")
[17:39:47.424]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:47.424]                       inherits = FALSE)
[17:39:47.424]                   }
[17:39:47.424]                   options(future.plan = NULL)
[17:39:47.424]                   if (is.na(NA_character_)) 
[17:39:47.424]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.424]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:47.424]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:47.424]                     .init = FALSE)
[17:39:47.424]                 }
[17:39:47.424]             }
[17:39:47.424]         }
[17:39:47.424]     })
[17:39:47.424]     if (TRUE) {
[17:39:47.424]         base::sink(type = "output", split = FALSE)
[17:39:47.424]         if (TRUE) {
[17:39:47.424]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:47.424]         }
[17:39:47.424]         else {
[17:39:47.424]             ...future.result["stdout"] <- base::list(NULL)
[17:39:47.424]         }
[17:39:47.424]         base::close(...future.stdout)
[17:39:47.424]         ...future.stdout <- NULL
[17:39:47.424]     }
[17:39:47.424]     ...future.result$conditions <- ...future.conditions
[17:39:47.424]     ...future.result$finished <- base::Sys.time()
[17:39:47.424]     ...future.result
[17:39:47.424] }
[17:39:47.426] assign_globals() ...
[17:39:47.426] List of 1
[17:39:47.426]  $ data:'data.frame':	5 obs. of  2 variables:
[17:39:47.426]   ..$ x: int [1:5] 1 2 3 4 5
[17:39:47.426]   ..$ y: int [1:5] 1 2 3 4 5
[17:39:47.426]  - attr(*, "where")=List of 1
[17:39:47.426]   ..$ data:<environment: R_EmptyEnv> 
[17:39:47.426]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:47.426]  - attr(*, "resolved")= logi FALSE
[17:39:47.426]  - attr(*, "total_size")= num 160
[17:39:47.426]  - attr(*, "already-done")= logi TRUE
[17:39:47.430] - copied ‘data’ to environment
[17:39:47.430] assign_globals() ... done
[17:39:47.430] plan(): Setting new future strategy stack:
[17:39:47.430] List of future strategies:
[17:39:47.430] 1. multicore:
[17:39:47.430]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:47.430]    - tweaked: FALSE
[17:39:47.430]    - call: plan(list(sequential, strategy))
[17:39:47.434] plan(): nbrOfWorkers() = 2
[17:39:47.486] plan(): Setting new future strategy stack:
[17:39:47.486] List of future strategies:
[17:39:47.486] 1. sequential:
[17:39:47.486]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:47.486]    - tweaked: FALSE
[17:39:47.486]    - call: plan(list(sequential, strategy))
[17:39:47.486] 2. multicore:
[17:39:47.486]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:47.486]    - tweaked: FALSE
[17:39:47.486]    - call: plan(list(sequential, strategy))
[17:39:47.487] plan(): nbrOfWorkers() = 1
[17:39:47.487] SequentialFuture started (and completed)
[17:39:47.487] signalConditions() ...
[17:39:47.487]  - include = ‘immediateCondition’
[17:39:47.487]  - exclude = 
[17:39:47.487]  - resignal = FALSE
[17:39:47.487]  - Number of conditions: 56
[17:39:47.488] signalConditions() ... done
[17:39:47.488] - Launch lazy future ... done
[17:39:47.488] run() for ‘SequentialFuture’ ... done
[17:39:47.488] signalConditions() ...
[17:39:47.488]  - include = ‘immediateCondition’
[17:39:47.488]  - exclude = 
[17:39:47.489]  - resignal = FALSE
[17:39:47.489]  - Number of conditions: 56
[17:39:47.489] signalConditions() ... done
[17:39:47.489] Future state: ‘finished’
[17:39:47.489] signalConditions() ...
[17:39:47.489]  - include = ‘condition’
[17:39:47.489]  - exclude = ‘immediateCondition’
[17:39:47.490]  - resignal = TRUE
[17:39:47.490]  - Number of conditions: 56
[17:39:47.490]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.435] getGlobalsAndPackages() ...
[17:39:47.490]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:47.490]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.451] Searching for globals...
[17:39:47.490]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.452] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:39:47.490]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.452] Searching for globals ... DONE
[17:39:47.491]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.452] Resolving globals: FALSE
[17:39:47.491]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.453] The total size of the 1 globals is 160 bytes (160 bytes)
[17:39:47.491]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.453] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:39:47.491]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.453] - globals: [1] ‘data’
[17:39:47.491]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.454] 
[17:39:47.491]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.454] getGlobalsAndPackages() ... DONE
[17:39:47.492]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.454] run() for ‘Future’ ...
[17:39:47.492]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.454] - state: ‘created’
[17:39:47.492]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.454] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:47.492]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.458] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:47.492]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.458] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:47.492]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.458]   - Field: ‘label’
[17:39:47.493]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.458]   - Field: ‘local’
[17:39:47.493]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.458]   - Field: ‘owner’
[17:39:47.493]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.459]   - Field: ‘envir’
[17:39:47.493]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.459]   - Field: ‘workers’
[17:39:47.493]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.459]   - Field: ‘packages’
[17:39:47.493]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.459]   - Field: ‘gc’
[17:39:47.494]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.459]   - Field: ‘job’
[17:39:47.494]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.459]   - Field: ‘conditions’
[17:39:47.494]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.459]   - Field: ‘expr’
[17:39:47.494]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.459]   - Field: ‘uuid’
[17:39:47.494]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.459]   - Field: ‘seed’
[17:39:47.494]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.459]   - Field: ‘version’
[17:39:47.495]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.460]   - Field: ‘result’
[17:39:47.495]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.460]   - Field: ‘asynchronous’
[17:39:47.495]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.460]   - Field: ‘calls’
[17:39:47.495]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.460]   - Field: ‘globals’
[17:39:47.495]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.460]   - Field: ‘stdout’
[17:39:47.495]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.460]   - Field: ‘earlySignal’
[17:39:47.496]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.460]   - Field: ‘lazy’
[17:39:47.496]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.460]   - Field: ‘state’
[17:39:47.496]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.461] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:47.496]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.461] - Launch lazy future ...
[17:39:47.496]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.461] Packages needed by the future expression (n = 0): <none>
[17:39:47.496]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.461] Packages needed by future strategies (n = 0): <none>
[17:39:47.496]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.461] {
[17:39:47.461]     {
[17:39:47.461]         {
[17:39:47.461]             ...future.startTime <- base::Sys.time()
[17:39:47.461]             {
[17:39:47.461]                 {
[17:39:47.461]                   {
[17:39:47.461]                     {
[17:39:47.461]                       base::local({
[17:39:47.461]                         has_future <- base::requireNamespace("future", 
[17:39:47.461]                           quietly = TRUE)
[17:39:47.461]                         if (has_future) {
[17:39:47.461]                           ns <- base::getNamespace("future")
[17:39:47.461]                           version <- ns[[".package"]][["version"]]
[17:39:47.461]                           if (is.null(version)) 
[17:39:47.461]                             version <- utils::packageVersion("future")
[17:39:47.461]                         }
[17:39:47.461]                         else {
[17:39:47.461]                           version <- NULL
[17:39:47.461]                         }
[17:39:47.461]                         if (!has_future || version < "1.8.0") {
[17:39:47.461]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:47.461]                             "", base::R.version$version.string), 
[17:39:47.461]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:47.461]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:47.461]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:47.461]                               "release", "version")], collapse = " "), 
[17:39:47.461]                             hostname = base::Sys.info()[["nodename"]])
[17:39:47.461]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:47.461]                             info)
[17:39:47.461]                           info <- base::paste(info, collapse = "; ")
[17:39:47.461]                           if (!has_future) {
[17:39:47.461]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:47.461]                               info)
[17:39:47.461]                           }
[17:39:47.461]                           else {
[17:39:47.461]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:47.461]                               info, version)
[17:39:47.461]                           }
[17:39:47.461]                           base::stop(msg)
[17:39:47.461]                         }
[17:39:47.461]                       })
[17:39:47.461]                     }
[17:39:47.461]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:47.461]                     base::options(mc.cores = 1L)
[17:39:47.461]                   }
[17:39:47.461]                   ...future.strategy.old <- future::plan("list")
[17:39:47.461]                   options(future.plan = NULL)
[17:39:47.461]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.461]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:47.461]                 }
[17:39:47.461]                 ...future.workdir <- getwd()
[17:39:47.461]             }
[17:39:47.461]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:47.461]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:47.461]         }
[17:39:47.461]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:47.461]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:47.461]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:47.461]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:47.461]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:47.461]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:47.461]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:47.461]             base::names(...future.oldOptions))
[17:39:47.461]     }
[17:39:47.461]     if (FALSE) {
[17:39:47.461]     }
[17:39:47.461]     else {
[17:39:47.461]         if (TRUE) {
[17:39:47.461]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:47.461]                 open = "w")
[17:39:47.461]         }
[17:39:47.461]         else {
[17:39:47.461]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:47.461]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:47.461]         }
[17:39:47.461]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:47.461]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:47.461]             base::sink(type = "output", split = FALSE)
[17:39:47.461]             base::close(...future.stdout)
[17:39:47.461]         }, add = TRUE)
[17:39:47.461]     }
[17:39:47.461]     ...future.frame <- base::sys.nframe()
[17:39:47.461]     ...future.conditions <- base::list()
[17:39:47.461]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:47.461]     if (FALSE) {
[17:39:47.461]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:47.461]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:47.461]     }
[17:39:47.461]     ...future.result <- base::tryCatch({
[17:39:47.461]         base::withCallingHandlers({
[17:39:47.461]             ...future.value <- base::withVisible(base::local({
[17:39:47.461]                 withCallingHandlers({
[17:39:47.461]                   subset(data, x < 3)$y
[17:39:47.461]                 }, immediateCondition = function(cond) {
[17:39:47.461]                   save_rds <- function (object, pathname, ...) 
[17:39:47.461]                   {
[17:39:47.461]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:47.461]                     if (file_test("-f", pathname_tmp)) {
[17:39:47.461]                       fi_tmp <- file.info(pathname_tmp)
[17:39:47.461]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:47.461]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:47.461]                         fi_tmp[["mtime"]])
[17:39:47.461]                     }
[17:39:47.461]                     tryCatch({
[17:39:47.461]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:47.461]                     }, error = function(ex) {
[17:39:47.461]                       msg <- conditionMessage(ex)
[17:39:47.461]                       fi_tmp <- file.info(pathname_tmp)
[17:39:47.461]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:47.461]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:47.461]                         fi_tmp[["mtime"]], msg)
[17:39:47.461]                       ex$message <- msg
[17:39:47.461]                       stop(ex)
[17:39:47.461]                     })
[17:39:47.461]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:47.461]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:47.461]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:47.461]                       fi_tmp <- file.info(pathname_tmp)
[17:39:47.461]                       fi <- file.info(pathname)
[17:39:47.461]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:47.461]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:47.461]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:47.461]                         fi[["size"]], fi[["mtime"]])
[17:39:47.461]                       stop(msg)
[17:39:47.461]                     }
[17:39:47.461]                     invisible(pathname)
[17:39:47.461]                   }
[17:39:47.461]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:47.461]                     rootPath = tempdir()) 
[17:39:47.461]                   {
[17:39:47.461]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:47.461]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:47.461]                       tmpdir = path, fileext = ".rds")
[17:39:47.461]                     save_rds(obj, file)
[17:39:47.461]                   }
[17:39:47.461]                   saveImmediateCondition(cond, path = "/tmp/RtmpAfZTdK/.future/immediateConditions")
[17:39:47.461]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.461]                   {
[17:39:47.461]                     inherits <- base::inherits
[17:39:47.461]                     invokeRestart <- base::invokeRestart
[17:39:47.461]                     is.null <- base::is.null
[17:39:47.461]                     muffled <- FALSE
[17:39:47.461]                     if (inherits(cond, "message")) {
[17:39:47.461]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:47.461]                       if (muffled) 
[17:39:47.461]                         invokeRestart("muffleMessage")
[17:39:47.461]                     }
[17:39:47.461]                     else if (inherits(cond, "warning")) {
[17:39:47.461]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:47.461]                       if (muffled) 
[17:39:47.461]                         invokeRestart("muffleWarning")
[17:39:47.461]                     }
[17:39:47.461]                     else if (inherits(cond, "condition")) {
[17:39:47.461]                       if (!is.null(pattern)) {
[17:39:47.461]                         computeRestarts <- base::computeRestarts
[17:39:47.461]                         grepl <- base::grepl
[17:39:47.461]                         restarts <- computeRestarts(cond)
[17:39:47.461]                         for (restart in restarts) {
[17:39:47.461]                           name <- restart$name
[17:39:47.461]                           if (is.null(name)) 
[17:39:47.461]                             next
[17:39:47.461]                           if (!grepl(pattern, name)) 
[17:39:47.461]                             next
[17:39:47.461]                           invokeRestart(restart)
[17:39:47.461]                           muffled <- TRUE
[17:39:47.461]                           break
[17:39:47.461]                         }
[17:39:47.461]                       }
[17:39:47.461]                     }
[17:39:47.461]                     invisible(muffled)
[17:39:47.461]                   }
[17:39:47.461]                   muffleCondition(cond)
[17:39:47.461]                 })
[17:39:47.461]             }))
[17:39:47.461]             future::FutureResult(value = ...future.value$value, 
[17:39:47.461]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.461]                   ...future.rng), globalenv = if (FALSE) 
[17:39:47.461]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:47.461]                     ...future.globalenv.names))
[17:39:47.461]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:47.461]         }, condition = base::local({
[17:39:47.461]             c <- base::c
[17:39:47.461]             inherits <- base::inherits
[17:39:47.461]             invokeRestart <- base::invokeRestart
[17:39:47.461]             length <- base::length
[17:39:47.461]             list <- base::list
[17:39:47.461]             seq.int <- base::seq.int
[17:39:47.461]             signalCondition <- base::signalCondition
[17:39:47.461]             sys.calls <- base::sys.calls
[17:39:47.461]             `[[` <- base::`[[`
[17:39:47.461]             `+` <- base::`+`
[17:39:47.461]             `<<-` <- base::`<<-`
[17:39:47.461]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:47.461]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:47.461]                   3L)]
[17:39:47.461]             }
[17:39:47.461]             function(cond) {
[17:39:47.461]                 is_error <- inherits(cond, "error")
[17:39:47.461]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:47.461]                   NULL)
[17:39:47.461]                 if (is_error) {
[17:39:47.461]                   sessionInformation <- function() {
[17:39:47.461]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:47.461]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:47.461]                       search = base::search(), system = base::Sys.info())
[17:39:47.461]                   }
[17:39:47.461]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.461]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:47.461]                     cond$call), session = sessionInformation(), 
[17:39:47.461]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:47.461]                   signalCondition(cond)
[17:39:47.461]                 }
[17:39:47.461]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:47.461]                 "immediateCondition"))) {
[17:39:47.461]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:47.461]                   ...future.conditions[[length(...future.conditions) + 
[17:39:47.461]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:47.461]                   if (TRUE && !signal) {
[17:39:47.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.461]                     {
[17:39:47.461]                       inherits <- base::inherits
[17:39:47.461]                       invokeRestart <- base::invokeRestart
[17:39:47.461]                       is.null <- base::is.null
[17:39:47.461]                       muffled <- FALSE
[17:39:47.461]                       if (inherits(cond, "message")) {
[17:39:47.461]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.461]                         if (muffled) 
[17:39:47.461]                           invokeRestart("muffleMessage")
[17:39:47.461]                       }
[17:39:47.461]                       else if (inherits(cond, "warning")) {
[17:39:47.461]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.461]                         if (muffled) 
[17:39:47.461]                           invokeRestart("muffleWarning")
[17:39:47.461]                       }
[17:39:47.461]                       else if (inherits(cond, "condition")) {
[17:39:47.461]                         if (!is.null(pattern)) {
[17:39:47.461]                           computeRestarts <- base::computeRestarts
[17:39:47.461]                           grepl <- base::grepl
[17:39:47.461]                           restarts <- computeRestarts(cond)
[17:39:47.461]                           for (restart in restarts) {
[17:39:47.461]                             name <- restart$name
[17:39:47.461]                             if (is.null(name)) 
[17:39:47.461]                               next
[17:39:47.461]                             if (!grepl(pattern, name)) 
[17:39:47.461]                               next
[17:39:47.461]                             invokeRestart(restart)
[17:39:47.461]                             muffled <- TRUE
[17:39:47.461]                             break
[17:39:47.461]                           }
[17:39:47.461]                         }
[17:39:47.461]                       }
[17:39:47.461]                       invisible(muffled)
[17:39:47.461]                     }
[17:39:47.461]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.461]                   }
[17:39:47.461]                 }
[17:39:47.461]                 else {
[17:39:47.461]                   if (TRUE) {
[17:39:47.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:47.461]                     {
[17:39:47.461]                       inherits <- base::inherits
[17:39:47.461]                       invokeRestart <- base::invokeRestart
[17:39:47.461]                       is.null <- base::is.null
[17:39:47.461]                       muffled <- FALSE
[17:39:47.461]                       if (inherits(cond, "message")) {
[17:39:47.461]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:47.461]                         if (muffled) 
[17:39:47.461]                           invokeRestart("muffleMessage")
[17:39:47.461]                       }
[17:39:47.461]                       else if (inherits(cond, "warning")) {
[17:39:47.461]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:47.461]                         if (muffled) 
[17:39:47.461]                           invokeRestart("muffleWarning")
[17:39:47.461]                       }
[17:39:47.461]                       else if (inherits(cond, "condition")) {
[17:39:47.461]                         if (!is.null(pattern)) {
[17:39:47.461]                           computeRestarts <- base::computeRestarts
[17:39:47.461]                           grepl <- base::grepl
[17:39:47.461]                           restarts <- computeRestarts(cond)
[17:39:47.461]                           for (restart in restarts) {
[17:39:47.461]                             name <- restart$name
[17:39:47.461]                             if (is.null(name)) 
[17:39:47.461]                               next
[17:39:47.461]                             if (!grepl(pattern, name)) 
[17:39:47.461]                               next
[17:39:47.461]                             invokeRestart(restart)
[17:39:47.461]                             muffled <- TRUE
[17:39:47.461]                             break
[17:39:47.461]                           }
[17:39:47.461]                         }
[17:39:47.461]                       }
[17:39:47.461]                       invisible(muffled)
[17:39:47.461]                     }
[17:39:47.461]                     muffleCondition(cond, pattern = "^muffle")
[17:39:47.461]                   }
[17:39:47.461]                 }
[17:39:47.461]             }
[17:39:47.461]         }))
[17:39:47.461]     }, error = function(ex) {
[17:39:47.461]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:47.461]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:47.461]                 ...future.rng), started = ...future.startTime, 
[17:39:47.461]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:47.461]             version = "1.8"), class = "FutureResult")
[17:39:47.461]     }, finally = {
[17:39:47.461]         if (!identical(...future.workdir, getwd())) 
[17:39:47.461]             setwd(...future.workdir)
[17:39:47.461]         {
[17:39:47.461]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:47.461]                 ...future.oldOptions$nwarnings <- NULL
[17:39:47.461]             }
[17:39:47.461]             base::options(...future.oldOptions)
[17:39:47.461]             if (.Platform$OS.type == "windows") {
[17:39:47.461]                 old_names <- names(...future.oldEnvVars)
[17:39:47.461]                 envs <- base::Sys.getenv()
[17:39:47.461]                 names <- names(envs)
[17:39:47.461]                 common <- intersect(names, old_names)
[17:39:47.461]                 added <- setdiff(names, old_names)
[17:39:47.461]                 removed <- setdiff(old_names, names)
[17:39:47.461]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:47.461]                   envs[common]]
[17:39:47.461]                 NAMES <- toupper(changed)
[17:39:47.461]                 args <- list()
[17:39:47.461]                 for (kk in seq_along(NAMES)) {
[17:39:47.461]                   name <- changed[[kk]]
[17:39:47.461]                   NAME <- NAMES[[kk]]
[17:39:47.461]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.461]                     next
[17:39:47.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.461]                 }
[17:39:47.461]                 NAMES <- toupper(added)
[17:39:47.461]                 for (kk in seq_along(NAMES)) {
[17:39:47.461]                   name <- added[[kk]]
[17:39:47.461]                   NAME <- NAMES[[kk]]
[17:39:47.461]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.461]                     next
[17:39:47.461]                   args[[name]] <- ""
[17:39:47.461]                 }
[17:39:47.461]                 NAMES <- toupper(removed)
[17:39:47.461]                 for (kk in seq_along(NAMES)) {
[17:39:47.461]                   name <- removed[[kk]]
[17:39:47.461]                   NAME <- NAMES[[kk]]
[17:39:47.461]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:47.461]                     next
[17:39:47.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:47.461]                 }
[17:39:47.461]                 if (length(args) > 0) 
[17:39:47.461]                   base::do.call(base::Sys.setenv, args = args)
[17:39:47.461]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:47.461]             }
[17:39:47.461]             else {
[17:39:47.461]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:47.461]             }
[17:39:47.461]             {
[17:39:47.461]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:47.461]                   0L) {
[17:39:47.461]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:47.461]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:47.461]                   base::options(opts)
[17:39:47.461]                 }
[17:39:47.461]                 {
[17:39:47.461]                   {
[17:39:47.461]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:47.461]                     NULL
[17:39:47.461]                   }
[17:39:47.461]                   options(future.plan = NULL)
[17:39:47.461]                   if (is.na(NA_character_)) 
[17:39:47.461]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:47.461]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:47.461]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:47.461]                     .init = FALSE)
[17:39:47.461]                 }
[17:39:47.461]             }
[17:39:47.461]         }
[17:39:47.461]     })
[17:39:47.461]     if (TRUE) {
[17:39:47.461]         base::sink(type = "output", split = FALSE)
[17:39:47.461]         if (TRUE) {
[17:39:47.461]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:47.461]         }
[17:39:47.461]         else {
[17:39:47.461]             ...future.result["stdout"] <- base::list(NULL)
[17:39:47.461]         }
[17:39:47.461]         base::close(...future.stdout)
[17:39:47.461]         ...future.stdout <- NULL
[17:39:47.461]     }
[17:39:47.461]     ...future.result$conditions <- ...future.conditions
[17:39:47.461]     ...future.result$finished <- base::Sys.time()
[17:39:47.461]     ...future.result
[17:39:47.461] }
[17:39:47.497]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.464] assign_globals() ...
[17:39:47.497]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.464] List of 1
[17:39:47.464]  $ data:'data.frame':	5 obs. of  2 variables:
[17:39:47.464]   ..$ x: int [1:5] 1 2 3 4 5
[17:39:47.464]   ..$ y: int [1:5] 1 2 3 4 5
[17:39:47.464]  - attr(*, "where")=List of 1
[17:39:47.464]   ..$ data:<environment: R_EmptyEnv> 
[17:39:47.464]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:47.464]  - attr(*, "resolved")= logi FALSE
[17:39:47.464]  - attr(*, "total_size")= num 160
[17:39:47.464]  - attr(*, "already-done")= logi TRUE
[17:39:47.497]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.469] - copied ‘data’ to environment
[17:39:47.497]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.469] assign_globals() ... done
[17:39:47.497]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.469] requestCore(): workers = 2
[17:39:47.497]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.472] MulticoreFuture started
[17:39:47.498]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.473] - Launch lazy future ... done
[17:39:47.498]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.473] run() for ‘MulticoreFuture’ ... done
[17:39:47.498]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.474] result() for MulticoreFuture ...
[17:39:47.498]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.484] result() for MulticoreFuture ...
[17:39:47.498]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.484] result() for MulticoreFuture ... done
[17:39:47.498]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.484] result() for MulticoreFuture ... done
[17:39:47.499]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.484] result() for MulticoreFuture ...
[17:39:47.499]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:47.485] result() for MulticoreFuture ... done
[17:39:47.499] signalConditions() ... done
- Strategy: multicore ... DONE
- Strategy: multisession ...
[17:39:47.499] plan(): Setting new future strategy stack:
[17:39:47.499] List of future strategies:
[17:39:47.499] 1. multisession:
[17:39:47.499]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:47.499]    - tweaked: FALSE
[17:39:47.499]    - call: plan(strategy)
[17:39:47.500] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:39:47.500] multisession:
[17:39:47.500] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:47.500] - tweaked: FALSE
[17:39:47.500] - call: plan(strategy)
[17:39:47.506] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:47.506] Not searching for globals
[17:39:47.507] - globals: [0] <none>
[17:39:47.507] getGlobalsAndPackages() ... DONE
[17:39:47.507] [local output] makeClusterPSOCK() ...
[17:39:47.552] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:39:47.553] [local output] Base port: 11515
[17:39:47.553] [local output] Getting setup options for 2 cluster nodes ...
[17:39:47.553] [local output]  - Node 1 of 2 ...
[17:39:47.554] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:47.554] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpAfZTdK/worker.rank=1.parallelly.parent=43591.aa4771134cb0.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpAfZTdK/worker.rank=1.parallelly.parent=43591.aa4771134cb0.pid")'’
[17:39:47.747] - Possible to infer worker's PID: TRUE
[17:39:47.747] [local output] Rscript port: 11515

[17:39:47.748] [local output]  - Node 2 of 2 ...
[17:39:47.748] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:47.749] [local output] Rscript port: 11515

[17:39:47.749] [local output] Getting setup options for 2 cluster nodes ... done
[17:39:47.749] [local output]  - Parallel setup requested for some PSOCK nodes
[17:39:47.750] [local output] Setting up PSOCK nodes in parallel
[17:39:47.750] List of 36
[17:39:47.750]  $ worker          : chr "localhost"
[17:39:47.750]   ..- attr(*, "localhost")= logi TRUE
[17:39:47.750]  $ master          : chr "localhost"
[17:39:47.750]  $ port            : int 11515
[17:39:47.750]  $ connectTimeout  : num 120
[17:39:47.750]  $ timeout         : num 2592000
[17:39:47.750]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:39:47.750]  $ homogeneous     : logi TRUE
[17:39:47.750]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:39:47.750]  $ rscript_envs    : NULL
[17:39:47.750]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:47.750]  $ rscript_startup : NULL
[17:39:47.750]  $ rscript_sh      : chr "sh"
[17:39:47.750]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:47.750]  $ methods         : logi TRUE
[17:39:47.750]  $ socketOptions   : chr "no-delay"
[17:39:47.750]  $ useXDR          : logi FALSE
[17:39:47.750]  $ outfile         : chr "/dev/null"
[17:39:47.750]  $ renice          : int NA
[17:39:47.750]  $ rshcmd          : NULL
[17:39:47.750]  $ user            : chr(0) 
[17:39:47.750]  $ revtunnel       : logi FALSE
[17:39:47.750]  $ rshlogfile      : NULL
[17:39:47.750]  $ rshopts         : chr(0) 
[17:39:47.750]  $ rank            : int 1
[17:39:47.750]  $ manual          : logi FALSE
[17:39:47.750]  $ dryrun          : logi FALSE
[17:39:47.750]  $ quiet           : logi FALSE
[17:39:47.750]  $ setup_strategy  : chr "parallel"
[17:39:47.750]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:47.750]  $ pidfile         : chr "/tmp/RtmpAfZTdK/worker.rank=1.parallelly.parent=43591.aa4771134cb0.pid"
[17:39:47.750]  $ rshcmd_label    : NULL
[17:39:47.750]  $ rsh_call        : NULL
[17:39:47.750]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:47.750]  $ localMachine    : logi TRUE
[17:39:47.750]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:39:47.750]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:39:47.750]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:39:47.750]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:39:47.750]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:39:47.750]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:39:47.750]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:39:47.750]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:39:47.750]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:39:47.750]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:39:47.750]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:39:47.750]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:39:47.750]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:39:47.750]  $ arguments       :List of 28
[17:39:47.750]   ..$ worker          : chr "localhost"
[17:39:47.750]   ..$ master          : NULL
[17:39:47.750]   ..$ port            : int 11515
[17:39:47.750]   ..$ connectTimeout  : num 120
[17:39:47.750]   ..$ timeout         : num 2592000
[17:39:47.750]   ..$ rscript         : NULL
[17:39:47.750]   ..$ homogeneous     : NULL
[17:39:47.750]   ..$ rscript_args    : NULL
[17:39:47.750]   ..$ rscript_envs    : NULL
[17:39:47.750]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:47.750]   ..$ rscript_startup : NULL
[17:39:47.750]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:39:47.750]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:47.750]   ..$ methods         : logi TRUE
[17:39:47.750]   ..$ socketOptions   : chr "no-delay"
[17:39:47.750]   ..$ useXDR          : logi FALSE
[17:39:47.750]   ..$ outfile         : chr "/dev/null"
[17:39:47.750]   ..$ renice          : int NA
[17:39:47.750]   ..$ rshcmd          : NULL
[17:39:47.750]   ..$ user            : NULL
[17:39:47.750]   ..$ revtunnel       : logi NA
[17:39:47.750]   ..$ rshlogfile      : NULL
[17:39:47.750]   ..$ rshopts         : NULL
[17:39:47.750]   ..$ rank            : int 1
[17:39:47.750]   ..$ manual          : logi FALSE
[17:39:47.750]   ..$ dryrun          : logi FALSE
[17:39:47.750]   ..$ quiet           : logi FALSE
[17:39:47.750]   ..$ setup_strategy  : chr "parallel"
[17:39:47.750]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:39:47.767] [local output] System call to launch all workers:
[17:39:47.767] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpAfZTdK/worker.rank=1.parallelly.parent=43591.aa4771134cb0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11515 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:39:47.767] [local output] Starting PSOCK main server
[17:39:47.773] [local output] Workers launched
[17:39:47.774] [local output] Waiting for workers to connect back
[17:39:47.774]  - [local output] 0 workers out of 2 ready
[17:39:48.017]  - [local output] 0 workers out of 2 ready
[17:39:48.017]  - [local output] 1 workers out of 2 ready
[17:39:48.018]  - [local output] 1 workers out of 2 ready
[17:39:48.018]  - [local output] 2 workers out of 2 ready
[17:39:48.018] [local output] Launching of workers completed
[17:39:48.019] [local output] Collecting session information from workers
[17:39:48.019] [local output]  - Worker #1 of 2
[17:39:48.020] [local output]  - Worker #2 of 2
[17:39:48.020] [local output] makeClusterPSOCK() ... done
[17:39:48.033] Packages needed by the future expression (n = 0): <none>
[17:39:48.033] Packages needed by future strategies (n = 0): <none>
[17:39:48.033] {
[17:39:48.033]     {
[17:39:48.033]         {
[17:39:48.033]             ...future.startTime <- base::Sys.time()
[17:39:48.033]             {
[17:39:48.033]                 {
[17:39:48.033]                   {
[17:39:48.033]                     {
[17:39:48.033]                       base::local({
[17:39:48.033]                         has_future <- base::requireNamespace("future", 
[17:39:48.033]                           quietly = TRUE)
[17:39:48.033]                         if (has_future) {
[17:39:48.033]                           ns <- base::getNamespace("future")
[17:39:48.033]                           version <- ns[[".package"]][["version"]]
[17:39:48.033]                           if (is.null(version)) 
[17:39:48.033]                             version <- utils::packageVersion("future")
[17:39:48.033]                         }
[17:39:48.033]                         else {
[17:39:48.033]                           version <- NULL
[17:39:48.033]                         }
[17:39:48.033]                         if (!has_future || version < "1.8.0") {
[17:39:48.033]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:48.033]                             "", base::R.version$version.string), 
[17:39:48.033]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:48.033]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:48.033]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:48.033]                               "release", "version")], collapse = " "), 
[17:39:48.033]                             hostname = base::Sys.info()[["nodename"]])
[17:39:48.033]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:48.033]                             info)
[17:39:48.033]                           info <- base::paste(info, collapse = "; ")
[17:39:48.033]                           if (!has_future) {
[17:39:48.033]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:48.033]                               info)
[17:39:48.033]                           }
[17:39:48.033]                           else {
[17:39:48.033]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:48.033]                               info, version)
[17:39:48.033]                           }
[17:39:48.033]                           base::stop(msg)
[17:39:48.033]                         }
[17:39:48.033]                       })
[17:39:48.033]                     }
[17:39:48.033]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:48.033]                     base::options(mc.cores = 1L)
[17:39:48.033]                   }
[17:39:48.033]                   ...future.strategy.old <- future::plan("list")
[17:39:48.033]                   options(future.plan = NULL)
[17:39:48.033]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:48.033]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:48.033]                 }
[17:39:48.033]                 ...future.workdir <- getwd()
[17:39:48.033]             }
[17:39:48.033]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:48.033]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:48.033]         }
[17:39:48.033]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:48.033]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:48.033]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:48.033]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:48.033]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:48.033]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:48.033]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:48.033]             base::names(...future.oldOptions))
[17:39:48.033]     }
[17:39:48.033]     if (FALSE) {
[17:39:48.033]     }
[17:39:48.033]     else {
[17:39:48.033]         if (TRUE) {
[17:39:48.033]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:48.033]                 open = "w")
[17:39:48.033]         }
[17:39:48.033]         else {
[17:39:48.033]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:48.033]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:48.033]         }
[17:39:48.033]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:48.033]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:48.033]             base::sink(type = "output", split = FALSE)
[17:39:48.033]             base::close(...future.stdout)
[17:39:48.033]         }, add = TRUE)
[17:39:48.033]     }
[17:39:48.033]     ...future.frame <- base::sys.nframe()
[17:39:48.033]     ...future.conditions <- base::list()
[17:39:48.033]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:48.033]     if (FALSE) {
[17:39:48.033]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:48.033]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:48.033]     }
[17:39:48.033]     ...future.result <- base::tryCatch({
[17:39:48.033]         base::withCallingHandlers({
[17:39:48.033]             ...future.value <- base::withVisible(base::local({
[17:39:48.033]                 ...future.makeSendCondition <- base::local({
[17:39:48.033]                   sendCondition <- NULL
[17:39:48.033]                   function(frame = 1L) {
[17:39:48.033]                     if (is.function(sendCondition)) 
[17:39:48.033]                       return(sendCondition)
[17:39:48.033]                     ns <- getNamespace("parallel")
[17:39:48.033]                     if (exists("sendData", mode = "function", 
[17:39:48.033]                       envir = ns)) {
[17:39:48.033]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:48.033]                         envir = ns)
[17:39:48.033]                       envir <- sys.frame(frame)
[17:39:48.033]                       master <- NULL
[17:39:48.033]                       while (!identical(envir, .GlobalEnv) && 
[17:39:48.033]                         !identical(envir, emptyenv())) {
[17:39:48.033]                         if (exists("master", mode = "list", envir = envir, 
[17:39:48.033]                           inherits = FALSE)) {
[17:39:48.033]                           master <- get("master", mode = "list", 
[17:39:48.033]                             envir = envir, inherits = FALSE)
[17:39:48.033]                           if (inherits(master, c("SOCKnode", 
[17:39:48.033]                             "SOCK0node"))) {
[17:39:48.033]                             sendCondition <<- function(cond) {
[17:39:48.033]                               data <- list(type = "VALUE", value = cond, 
[17:39:48.033]                                 success = TRUE)
[17:39:48.033]                               parallel_sendData(master, data)
[17:39:48.033]                             }
[17:39:48.033]                             return(sendCondition)
[17:39:48.033]                           }
[17:39:48.033]                         }
[17:39:48.033]                         frame <- frame + 1L
[17:39:48.033]                         envir <- sys.frame(frame)
[17:39:48.033]                       }
[17:39:48.033]                     }
[17:39:48.033]                     sendCondition <<- function(cond) NULL
[17:39:48.033]                   }
[17:39:48.033]                 })
[17:39:48.033]                 withCallingHandlers({
[17:39:48.033]                   NA
[17:39:48.033]                 }, immediateCondition = function(cond) {
[17:39:48.033]                   sendCondition <- ...future.makeSendCondition()
[17:39:48.033]                   sendCondition(cond)
[17:39:48.033]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.033]                   {
[17:39:48.033]                     inherits <- base::inherits
[17:39:48.033]                     invokeRestart <- base::invokeRestart
[17:39:48.033]                     is.null <- base::is.null
[17:39:48.033]                     muffled <- FALSE
[17:39:48.033]                     if (inherits(cond, "message")) {
[17:39:48.033]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:48.033]                       if (muffled) 
[17:39:48.033]                         invokeRestart("muffleMessage")
[17:39:48.033]                     }
[17:39:48.033]                     else if (inherits(cond, "warning")) {
[17:39:48.033]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:48.033]                       if (muffled) 
[17:39:48.033]                         invokeRestart("muffleWarning")
[17:39:48.033]                     }
[17:39:48.033]                     else if (inherits(cond, "condition")) {
[17:39:48.033]                       if (!is.null(pattern)) {
[17:39:48.033]                         computeRestarts <- base::computeRestarts
[17:39:48.033]                         grepl <- base::grepl
[17:39:48.033]                         restarts <- computeRestarts(cond)
[17:39:48.033]                         for (restart in restarts) {
[17:39:48.033]                           name <- restart$name
[17:39:48.033]                           if (is.null(name)) 
[17:39:48.033]                             next
[17:39:48.033]                           if (!grepl(pattern, name)) 
[17:39:48.033]                             next
[17:39:48.033]                           invokeRestart(restart)
[17:39:48.033]                           muffled <- TRUE
[17:39:48.033]                           break
[17:39:48.033]                         }
[17:39:48.033]                       }
[17:39:48.033]                     }
[17:39:48.033]                     invisible(muffled)
[17:39:48.033]                   }
[17:39:48.033]                   muffleCondition(cond)
[17:39:48.033]                 })
[17:39:48.033]             }))
[17:39:48.033]             future::FutureResult(value = ...future.value$value, 
[17:39:48.033]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:48.033]                   ...future.rng), globalenv = if (FALSE) 
[17:39:48.033]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:48.033]                     ...future.globalenv.names))
[17:39:48.033]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:48.033]         }, condition = base::local({
[17:39:48.033]             c <- base::c
[17:39:48.033]             inherits <- base::inherits
[17:39:48.033]             invokeRestart <- base::invokeRestart
[17:39:48.033]             length <- base::length
[17:39:48.033]             list <- base::list
[17:39:48.033]             seq.int <- base::seq.int
[17:39:48.033]             signalCondition <- base::signalCondition
[17:39:48.033]             sys.calls <- base::sys.calls
[17:39:48.033]             `[[` <- base::`[[`
[17:39:48.033]             `+` <- base::`+`
[17:39:48.033]             `<<-` <- base::`<<-`
[17:39:48.033]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:48.033]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:48.033]                   3L)]
[17:39:48.033]             }
[17:39:48.033]             function(cond) {
[17:39:48.033]                 is_error <- inherits(cond, "error")
[17:39:48.033]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:48.033]                   NULL)
[17:39:48.033]                 if (is_error) {
[17:39:48.033]                   sessionInformation <- function() {
[17:39:48.033]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:48.033]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:48.033]                       search = base::search(), system = base::Sys.info())
[17:39:48.033]                   }
[17:39:48.033]                   ...future.conditions[[length(...future.conditions) + 
[17:39:48.033]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:48.033]                     cond$call), session = sessionInformation(), 
[17:39:48.033]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:48.033]                   signalCondition(cond)
[17:39:48.033]                 }
[17:39:48.033]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:48.033]                 "immediateCondition"))) {
[17:39:48.033]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:48.033]                   ...future.conditions[[length(...future.conditions) + 
[17:39:48.033]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:48.033]                   if (TRUE && !signal) {
[17:39:48.033]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.033]                     {
[17:39:48.033]                       inherits <- base::inherits
[17:39:48.033]                       invokeRestart <- base::invokeRestart
[17:39:48.033]                       is.null <- base::is.null
[17:39:48.033]                       muffled <- FALSE
[17:39:48.033]                       if (inherits(cond, "message")) {
[17:39:48.033]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:48.033]                         if (muffled) 
[17:39:48.033]                           invokeRestart("muffleMessage")
[17:39:48.033]                       }
[17:39:48.033]                       else if (inherits(cond, "warning")) {
[17:39:48.033]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:48.033]                         if (muffled) 
[17:39:48.033]                           invokeRestart("muffleWarning")
[17:39:48.033]                       }
[17:39:48.033]                       else if (inherits(cond, "condition")) {
[17:39:48.033]                         if (!is.null(pattern)) {
[17:39:48.033]                           computeRestarts <- base::computeRestarts
[17:39:48.033]                           grepl <- base::grepl
[17:39:48.033]                           restarts <- computeRestarts(cond)
[17:39:48.033]                           for (restart in restarts) {
[17:39:48.033]                             name <- restart$name
[17:39:48.033]                             if (is.null(name)) 
[17:39:48.033]                               next
[17:39:48.033]                             if (!grepl(pattern, name)) 
[17:39:48.033]                               next
[17:39:48.033]                             invokeRestart(restart)
[17:39:48.033]                             muffled <- TRUE
[17:39:48.033]                             break
[17:39:48.033]                           }
[17:39:48.033]                         }
[17:39:48.033]                       }
[17:39:48.033]                       invisible(muffled)
[17:39:48.033]                     }
[17:39:48.033]                     muffleCondition(cond, pattern = "^muffle")
[17:39:48.033]                   }
[17:39:48.033]                 }
[17:39:48.033]                 else {
[17:39:48.033]                   if (TRUE) {
[17:39:48.033]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.033]                     {
[17:39:48.033]                       inherits <- base::inherits
[17:39:48.033]                       invokeRestart <- base::invokeRestart
[17:39:48.033]                       is.null <- base::is.null
[17:39:48.033]                       muffled <- FALSE
[17:39:48.033]                       if (inherits(cond, "message")) {
[17:39:48.033]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:48.033]                         if (muffled) 
[17:39:48.033]                           invokeRestart("muffleMessage")
[17:39:48.033]                       }
[17:39:48.033]                       else if (inherits(cond, "warning")) {
[17:39:48.033]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:48.033]                         if (muffled) 
[17:39:48.033]                           invokeRestart("muffleWarning")
[17:39:48.033]                       }
[17:39:48.033]                       else if (inherits(cond, "condition")) {
[17:39:48.033]                         if (!is.null(pattern)) {
[17:39:48.033]                           computeRestarts <- base::computeRestarts
[17:39:48.033]                           grepl <- base::grepl
[17:39:48.033]                           restarts <- computeRestarts(cond)
[17:39:48.033]                           for (restart in restarts) {
[17:39:48.033]                             name <- restart$name
[17:39:48.033]                             if (is.null(name)) 
[17:39:48.033]                               next
[17:39:48.033]                             if (!grepl(pattern, name)) 
[17:39:48.033]                               next
[17:39:48.033]                             invokeRestart(restart)
[17:39:48.033]                             muffled <- TRUE
[17:39:48.033]                             break
[17:39:48.033]                           }
[17:39:48.033]                         }
[17:39:48.033]                       }
[17:39:48.033]                       invisible(muffled)
[17:39:48.033]                     }
[17:39:48.033]                     muffleCondition(cond, pattern = "^muffle")
[17:39:48.033]                   }
[17:39:48.033]                 }
[17:39:48.033]             }
[17:39:48.033]         }))
[17:39:48.033]     }, error = function(ex) {
[17:39:48.033]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:48.033]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:48.033]                 ...future.rng), started = ...future.startTime, 
[17:39:48.033]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:48.033]             version = "1.8"), class = "FutureResult")
[17:39:48.033]     }, finally = {
[17:39:48.033]         if (!identical(...future.workdir, getwd())) 
[17:39:48.033]             setwd(...future.workdir)
[17:39:48.033]         {
[17:39:48.033]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:48.033]                 ...future.oldOptions$nwarnings <- NULL
[17:39:48.033]             }
[17:39:48.033]             base::options(...future.oldOptions)
[17:39:48.033]             if (.Platform$OS.type == "windows") {
[17:39:48.033]                 old_names <- names(...future.oldEnvVars)
[17:39:48.033]                 envs <- base::Sys.getenv()
[17:39:48.033]                 names <- names(envs)
[17:39:48.033]                 common <- intersect(names, old_names)
[17:39:48.033]                 added <- setdiff(names, old_names)
[17:39:48.033]                 removed <- setdiff(old_names, names)
[17:39:48.033]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:48.033]                   envs[common]]
[17:39:48.033]                 NAMES <- toupper(changed)
[17:39:48.033]                 args <- list()
[17:39:48.033]                 for (kk in seq_along(NAMES)) {
[17:39:48.033]                   name <- changed[[kk]]
[17:39:48.033]                   NAME <- NAMES[[kk]]
[17:39:48.033]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.033]                     next
[17:39:48.033]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:48.033]                 }
[17:39:48.033]                 NAMES <- toupper(added)
[17:39:48.033]                 for (kk in seq_along(NAMES)) {
[17:39:48.033]                   name <- added[[kk]]
[17:39:48.033]                   NAME <- NAMES[[kk]]
[17:39:48.033]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.033]                     next
[17:39:48.033]                   args[[name]] <- ""
[17:39:48.033]                 }
[17:39:48.033]                 NAMES <- toupper(removed)
[17:39:48.033]                 for (kk in seq_along(NAMES)) {
[17:39:48.033]                   name <- removed[[kk]]
[17:39:48.033]                   NAME <- NAMES[[kk]]
[17:39:48.033]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.033]                     next
[17:39:48.033]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:48.033]                 }
[17:39:48.033]                 if (length(args) > 0) 
[17:39:48.033]                   base::do.call(base::Sys.setenv, args = args)
[17:39:48.033]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:48.033]             }
[17:39:48.033]             else {
[17:39:48.033]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:48.033]             }
[17:39:48.033]             {
[17:39:48.033]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:48.033]                   0L) {
[17:39:48.033]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:48.033]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:48.033]                   base::options(opts)
[17:39:48.033]                 }
[17:39:48.033]                 {
[17:39:48.033]                   {
[17:39:48.033]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:48.033]                     NULL
[17:39:48.033]                   }
[17:39:48.033]                   options(future.plan = NULL)
[17:39:48.033]                   if (is.na(NA_character_)) 
[17:39:48.033]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:48.033]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:48.033]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:48.033]                     .init = FALSE)
[17:39:48.033]                 }
[17:39:48.033]             }
[17:39:48.033]         }
[17:39:48.033]     })
[17:39:48.033]     if (TRUE) {
[17:39:48.033]         base::sink(type = "output", split = FALSE)
[17:39:48.033]         if (TRUE) {
[17:39:48.033]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:48.033]         }
[17:39:48.033]         else {
[17:39:48.033]             ...future.result["stdout"] <- base::list(NULL)
[17:39:48.033]         }
[17:39:48.033]         base::close(...future.stdout)
[17:39:48.033]         ...future.stdout <- NULL
[17:39:48.033]     }
[17:39:48.033]     ...future.result$conditions <- ...future.conditions
[17:39:48.033]     ...future.result$finished <- base::Sys.time()
[17:39:48.033]     ...future.result
[17:39:48.033] }
[17:39:48.087] MultisessionFuture started
[17:39:48.088] result() for ClusterFuture ...
[17:39:48.088] receiveMessageFromWorker() for ClusterFuture ...
[17:39:48.088] - Validating connection of MultisessionFuture
[17:39:48.121] - received message: FutureResult
[17:39:48.121] - Received FutureResult
[17:39:48.121] - Erased future from FutureRegistry
[17:39:48.121] result() for ClusterFuture ...
[17:39:48.121] - result already collected: FutureResult
[17:39:48.122] result() for ClusterFuture ... done
[17:39:48.122] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:48.122] result() for ClusterFuture ... done
[17:39:48.122] result() for ClusterFuture ...
[17:39:48.122] - result already collected: FutureResult
[17:39:48.122] result() for ClusterFuture ... done
[17:39:48.122] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:39:48.126] plan(): nbrOfWorkers() = 2
[17:39:48.127] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:39:48.127] Searching for globals...
[17:39:48.128] - globals found: [1] ‘getOption’
[17:39:48.128] Searching for globals ... DONE
[17:39:48.128] Resolving globals: FALSE
[17:39:48.128] 
[17:39:48.128] 
[17:39:48.128] getGlobalsAndPackages() ... DONE
[17:39:48.129] run() for ‘Future’ ...
[17:39:48.129] - state: ‘created’
[17:39:48.129] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:48.143] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:48.143] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:48.144]   - Field: ‘node’
[17:39:48.144]   - Field: ‘label’
[17:39:48.144]   - Field: ‘local’
[17:39:48.144]   - Field: ‘owner’
[17:39:48.144]   - Field: ‘envir’
[17:39:48.144]   - Field: ‘workers’
[17:39:48.144]   - Field: ‘packages’
[17:39:48.144]   - Field: ‘gc’
[17:39:48.144]   - Field: ‘conditions’
[17:39:48.145]   - Field: ‘persistent’
[17:39:48.145]   - Field: ‘expr’
[17:39:48.145]   - Field: ‘uuid’
[17:39:48.145]   - Field: ‘seed’
[17:39:48.145]   - Field: ‘version’
[17:39:48.145]   - Field: ‘result’
[17:39:48.145]   - Field: ‘asynchronous’
[17:39:48.145]   - Field: ‘calls’
[17:39:48.145]   - Field: ‘globals’
[17:39:48.146]   - Field: ‘stdout’
[17:39:48.146]   - Field: ‘earlySignal’
[17:39:48.146]   - Field: ‘lazy’
[17:39:48.146]   - Field: ‘state’
[17:39:48.146] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:48.146] - Launch lazy future ...
[17:39:48.146] Packages needed by the future expression (n = 0): <none>
[17:39:48.147] Packages needed by future strategies (n = 0): <none>
[17:39:48.147] {
[17:39:48.147]     {
[17:39:48.147]         {
[17:39:48.147]             ...future.startTime <- base::Sys.time()
[17:39:48.147]             {
[17:39:48.147]                 {
[17:39:48.147]                   {
[17:39:48.147]                     {
[17:39:48.147]                       base::local({
[17:39:48.147]                         has_future <- base::requireNamespace("future", 
[17:39:48.147]                           quietly = TRUE)
[17:39:48.147]                         if (has_future) {
[17:39:48.147]                           ns <- base::getNamespace("future")
[17:39:48.147]                           version <- ns[[".package"]][["version"]]
[17:39:48.147]                           if (is.null(version)) 
[17:39:48.147]                             version <- utils::packageVersion("future")
[17:39:48.147]                         }
[17:39:48.147]                         else {
[17:39:48.147]                           version <- NULL
[17:39:48.147]                         }
[17:39:48.147]                         if (!has_future || version < "1.8.0") {
[17:39:48.147]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:48.147]                             "", base::R.version$version.string), 
[17:39:48.147]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:48.147]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:48.147]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:48.147]                               "release", "version")], collapse = " "), 
[17:39:48.147]                             hostname = base::Sys.info()[["nodename"]])
[17:39:48.147]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:48.147]                             info)
[17:39:48.147]                           info <- base::paste(info, collapse = "; ")
[17:39:48.147]                           if (!has_future) {
[17:39:48.147]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:48.147]                               info)
[17:39:48.147]                           }
[17:39:48.147]                           else {
[17:39:48.147]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:48.147]                               info, version)
[17:39:48.147]                           }
[17:39:48.147]                           base::stop(msg)
[17:39:48.147]                         }
[17:39:48.147]                       })
[17:39:48.147]                     }
[17:39:48.147]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:48.147]                     base::options(mc.cores = 1L)
[17:39:48.147]                   }
[17:39:48.147]                   ...future.strategy.old <- future::plan("list")
[17:39:48.147]                   options(future.plan = NULL)
[17:39:48.147]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:48.147]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:48.147]                 }
[17:39:48.147]                 ...future.workdir <- getwd()
[17:39:48.147]             }
[17:39:48.147]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:48.147]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:48.147]         }
[17:39:48.147]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[17:39:48.147]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:48.147]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[17:39:48.147]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:48.147]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:48.147]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:48.147]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:48.147]             base::names(...future.oldOptions))
[17:39:48.147]     }
[17:39:48.147]     if (FALSE) {
[17:39:48.147]     }
[17:39:48.147]     else {
[17:39:48.147]         if (TRUE) {
[17:39:48.147]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:48.147]                 open = "w")
[17:39:48.147]         }
[17:39:48.147]         else {
[17:39:48.147]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:48.147]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:48.147]         }
[17:39:48.147]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:48.147]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:48.147]             base::sink(type = "output", split = FALSE)
[17:39:48.147]             base::close(...future.stdout)
[17:39:48.147]         }, add = TRUE)
[17:39:48.147]     }
[17:39:48.147]     ...future.frame <- base::sys.nframe()
[17:39:48.147]     ...future.conditions <- base::list()
[17:39:48.147]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:48.147]     if (FALSE) {
[17:39:48.147]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:48.147]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:48.147]     }
[17:39:48.147]     ...future.result <- base::tryCatch({
[17:39:48.147]         base::withCallingHandlers({
[17:39:48.147]             ...future.value <- base::withVisible(base::local({
[17:39:48.147]                 ...future.makeSendCondition <- base::local({
[17:39:48.147]                   sendCondition <- NULL
[17:39:48.147]                   function(frame = 1L) {
[17:39:48.147]                     if (is.function(sendCondition)) 
[17:39:48.147]                       return(sendCondition)
[17:39:48.147]                     ns <- getNamespace("parallel")
[17:39:48.147]                     if (exists("sendData", mode = "function", 
[17:39:48.147]                       envir = ns)) {
[17:39:48.147]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:48.147]                         envir = ns)
[17:39:48.147]                       envir <- sys.frame(frame)
[17:39:48.147]                       master <- NULL
[17:39:48.147]                       while (!identical(envir, .GlobalEnv) && 
[17:39:48.147]                         !identical(envir, emptyenv())) {
[17:39:48.147]                         if (exists("master", mode = "list", envir = envir, 
[17:39:48.147]                           inherits = FALSE)) {
[17:39:48.147]                           master <- get("master", mode = "list", 
[17:39:48.147]                             envir = envir, inherits = FALSE)
[17:39:48.147]                           if (inherits(master, c("SOCKnode", 
[17:39:48.147]                             "SOCK0node"))) {
[17:39:48.147]                             sendCondition <<- function(cond) {
[17:39:48.147]                               data <- list(type = "VALUE", value = cond, 
[17:39:48.147]                                 success = TRUE)
[17:39:48.147]                               parallel_sendData(master, data)
[17:39:48.147]                             }
[17:39:48.147]                             return(sendCondition)
[17:39:48.147]                           }
[17:39:48.147]                         }
[17:39:48.147]                         frame <- frame + 1L
[17:39:48.147]                         envir <- sys.frame(frame)
[17:39:48.147]                       }
[17:39:48.147]                     }
[17:39:48.147]                     sendCondition <<- function(cond) NULL
[17:39:48.147]                   }
[17:39:48.147]                 })
[17:39:48.147]                 withCallingHandlers({
[17:39:48.147]                   getOption("future.globals.onMissing")
[17:39:48.147]                 }, immediateCondition = function(cond) {
[17:39:48.147]                   sendCondition <- ...future.makeSendCondition()
[17:39:48.147]                   sendCondition(cond)
[17:39:48.147]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.147]                   {
[17:39:48.147]                     inherits <- base::inherits
[17:39:48.147]                     invokeRestart <- base::invokeRestart
[17:39:48.147]                     is.null <- base::is.null
[17:39:48.147]                     muffled <- FALSE
[17:39:48.147]                     if (inherits(cond, "message")) {
[17:39:48.147]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:48.147]                       if (muffled) 
[17:39:48.147]                         invokeRestart("muffleMessage")
[17:39:48.147]                     }
[17:39:48.147]                     else if (inherits(cond, "warning")) {
[17:39:48.147]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:48.147]                       if (muffled) 
[17:39:48.147]                         invokeRestart("muffleWarning")
[17:39:48.147]                     }
[17:39:48.147]                     else if (inherits(cond, "condition")) {
[17:39:48.147]                       if (!is.null(pattern)) {
[17:39:48.147]                         computeRestarts <- base::computeRestarts
[17:39:48.147]                         grepl <- base::grepl
[17:39:48.147]                         restarts <- computeRestarts(cond)
[17:39:48.147]                         for (restart in restarts) {
[17:39:48.147]                           name <- restart$name
[17:39:48.147]                           if (is.null(name)) 
[17:39:48.147]                             next
[17:39:48.147]                           if (!grepl(pattern, name)) 
[17:39:48.147]                             next
[17:39:48.147]                           invokeRestart(restart)
[17:39:48.147]                           muffled <- TRUE
[17:39:48.147]                           break
[17:39:48.147]                         }
[17:39:48.147]                       }
[17:39:48.147]                     }
[17:39:48.147]                     invisible(muffled)
[17:39:48.147]                   }
[17:39:48.147]                   muffleCondition(cond)
[17:39:48.147]                 })
[17:39:48.147]             }))
[17:39:48.147]             future::FutureResult(value = ...future.value$value, 
[17:39:48.147]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:48.147]                   ...future.rng), globalenv = if (FALSE) 
[17:39:48.147]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:48.147]                     ...future.globalenv.names))
[17:39:48.147]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:48.147]         }, condition = base::local({
[17:39:48.147]             c <- base::c
[17:39:48.147]             inherits <- base::inherits
[17:39:48.147]             invokeRestart <- base::invokeRestart
[17:39:48.147]             length <- base::length
[17:39:48.147]             list <- base::list
[17:39:48.147]             seq.int <- base::seq.int
[17:39:48.147]             signalCondition <- base::signalCondition
[17:39:48.147]             sys.calls <- base::sys.calls
[17:39:48.147]             `[[` <- base::`[[`
[17:39:48.147]             `+` <- base::`+`
[17:39:48.147]             `<<-` <- base::`<<-`
[17:39:48.147]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:48.147]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:48.147]                   3L)]
[17:39:48.147]             }
[17:39:48.147]             function(cond) {
[17:39:48.147]                 is_error <- inherits(cond, "error")
[17:39:48.147]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:48.147]                   NULL)
[17:39:48.147]                 if (is_error) {
[17:39:48.147]                   sessionInformation <- function() {
[17:39:48.147]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:48.147]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:48.147]                       search = base::search(), system = base::Sys.info())
[17:39:48.147]                   }
[17:39:48.147]                   ...future.conditions[[length(...future.conditions) + 
[17:39:48.147]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:48.147]                     cond$call), session = sessionInformation(), 
[17:39:48.147]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:48.147]                   signalCondition(cond)
[17:39:48.147]                 }
[17:39:48.147]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:48.147]                 "immediateCondition"))) {
[17:39:48.147]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:48.147]                   ...future.conditions[[length(...future.conditions) + 
[17:39:48.147]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:48.147]                   if (TRUE && !signal) {
[17:39:48.147]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.147]                     {
[17:39:48.147]                       inherits <- base::inherits
[17:39:48.147]                       invokeRestart <- base::invokeRestart
[17:39:48.147]                       is.null <- base::is.null
[17:39:48.147]                       muffled <- FALSE
[17:39:48.147]                       if (inherits(cond, "message")) {
[17:39:48.147]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:48.147]                         if (muffled) 
[17:39:48.147]                           invokeRestart("muffleMessage")
[17:39:48.147]                       }
[17:39:48.147]                       else if (inherits(cond, "warning")) {
[17:39:48.147]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:48.147]                         if (muffled) 
[17:39:48.147]                           invokeRestart("muffleWarning")
[17:39:48.147]                       }
[17:39:48.147]                       else if (inherits(cond, "condition")) {
[17:39:48.147]                         if (!is.null(pattern)) {
[17:39:48.147]                           computeRestarts <- base::computeRestarts
[17:39:48.147]                           grepl <- base::grepl
[17:39:48.147]                           restarts <- computeRestarts(cond)
[17:39:48.147]                           for (restart in restarts) {
[17:39:48.147]                             name <- restart$name
[17:39:48.147]                             if (is.null(name)) 
[17:39:48.147]                               next
[17:39:48.147]                             if (!grepl(pattern, name)) 
[17:39:48.147]                               next
[17:39:48.147]                             invokeRestart(restart)
[17:39:48.147]                             muffled <- TRUE
[17:39:48.147]                             break
[17:39:48.147]                           }
[17:39:48.147]                         }
[17:39:48.147]                       }
[17:39:48.147]                       invisible(muffled)
[17:39:48.147]                     }
[17:39:48.147]                     muffleCondition(cond, pattern = "^muffle")
[17:39:48.147]                   }
[17:39:48.147]                 }
[17:39:48.147]                 else {
[17:39:48.147]                   if (TRUE) {
[17:39:48.147]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.147]                     {
[17:39:48.147]                       inherits <- base::inherits
[17:39:48.147]                       invokeRestart <- base::invokeRestart
[17:39:48.147]                       is.null <- base::is.null
[17:39:48.147]                       muffled <- FALSE
[17:39:48.147]                       if (inherits(cond, "message")) {
[17:39:48.147]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:48.147]                         if (muffled) 
[17:39:48.147]                           invokeRestart("muffleMessage")
[17:39:48.147]                       }
[17:39:48.147]                       else if (inherits(cond, "warning")) {
[17:39:48.147]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:48.147]                         if (muffled) 
[17:39:48.147]                           invokeRestart("muffleWarning")
[17:39:48.147]                       }
[17:39:48.147]                       else if (inherits(cond, "condition")) {
[17:39:48.147]                         if (!is.null(pattern)) {
[17:39:48.147]                           computeRestarts <- base::computeRestarts
[17:39:48.147]                           grepl <- base::grepl
[17:39:48.147]                           restarts <- computeRestarts(cond)
[17:39:48.147]                           for (restart in restarts) {
[17:39:48.147]                             name <- restart$name
[17:39:48.147]                             if (is.null(name)) 
[17:39:48.147]                               next
[17:39:48.147]                             if (!grepl(pattern, name)) 
[17:39:48.147]                               next
[17:39:48.147]                             invokeRestart(restart)
[17:39:48.147]                             muffled <- TRUE
[17:39:48.147]                             break
[17:39:48.147]                           }
[17:39:48.147]                         }
[17:39:48.147]                       }
[17:39:48.147]                       invisible(muffled)
[17:39:48.147]                     }
[17:39:48.147]                     muffleCondition(cond, pattern = "^muffle")
[17:39:48.147]                   }
[17:39:48.147]                 }
[17:39:48.147]             }
[17:39:48.147]         }))
[17:39:48.147]     }, error = function(ex) {
[17:39:48.147]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:48.147]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:48.147]                 ...future.rng), started = ...future.startTime, 
[17:39:48.147]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:48.147]             version = "1.8"), class = "FutureResult")
[17:39:48.147]     }, finally = {
[17:39:48.147]         if (!identical(...future.workdir, getwd())) 
[17:39:48.147]             setwd(...future.workdir)
[17:39:48.147]         {
[17:39:48.147]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:48.147]                 ...future.oldOptions$nwarnings <- NULL
[17:39:48.147]             }
[17:39:48.147]             base::options(...future.oldOptions)
[17:39:48.147]             if (.Platform$OS.type == "windows") {
[17:39:48.147]                 old_names <- names(...future.oldEnvVars)
[17:39:48.147]                 envs <- base::Sys.getenv()
[17:39:48.147]                 names <- names(envs)
[17:39:48.147]                 common <- intersect(names, old_names)
[17:39:48.147]                 added <- setdiff(names, old_names)
[17:39:48.147]                 removed <- setdiff(old_names, names)
[17:39:48.147]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:48.147]                   envs[common]]
[17:39:48.147]                 NAMES <- toupper(changed)
[17:39:48.147]                 args <- list()
[17:39:48.147]                 for (kk in seq_along(NAMES)) {
[17:39:48.147]                   name <- changed[[kk]]
[17:39:48.147]                   NAME <- NAMES[[kk]]
[17:39:48.147]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.147]                     next
[17:39:48.147]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:48.147]                 }
[17:39:48.147]                 NAMES <- toupper(added)
[17:39:48.147]                 for (kk in seq_along(NAMES)) {
[17:39:48.147]                   name <- added[[kk]]
[17:39:48.147]                   NAME <- NAMES[[kk]]
[17:39:48.147]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.147]                     next
[17:39:48.147]                   args[[name]] <- ""
[17:39:48.147]                 }
[17:39:48.147]                 NAMES <- toupper(removed)
[17:39:48.147]                 for (kk in seq_along(NAMES)) {
[17:39:48.147]                   name <- removed[[kk]]
[17:39:48.147]                   NAME <- NAMES[[kk]]
[17:39:48.147]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.147]                     next
[17:39:48.147]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:48.147]                 }
[17:39:48.147]                 if (length(args) > 0) 
[17:39:48.147]                   base::do.call(base::Sys.setenv, args = args)
[17:39:48.147]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:48.147]             }
[17:39:48.147]             else {
[17:39:48.147]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:48.147]             }
[17:39:48.147]             {
[17:39:48.147]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:48.147]                   0L) {
[17:39:48.147]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:48.147]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:48.147]                   base::options(opts)
[17:39:48.147]                 }
[17:39:48.147]                 {
[17:39:48.147]                   {
[17:39:48.147]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:48.147]                     NULL
[17:39:48.147]                   }
[17:39:48.147]                   options(future.plan = NULL)
[17:39:48.147]                   if (is.na(NA_character_)) 
[17:39:48.147]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:48.147]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:48.147]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:48.147]                     .init = FALSE)
[17:39:48.147]                 }
[17:39:48.147]             }
[17:39:48.147]         }
[17:39:48.147]     })
[17:39:48.147]     if (TRUE) {
[17:39:48.147]         base::sink(type = "output", split = FALSE)
[17:39:48.147]         if (TRUE) {
[17:39:48.147]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:48.147]         }
[17:39:48.147]         else {
[17:39:48.147]             ...future.result["stdout"] <- base::list(NULL)
[17:39:48.147]         }
[17:39:48.147]         base::close(...future.stdout)
[17:39:48.147]         ...future.stdout <- NULL
[17:39:48.147]     }
[17:39:48.147]     ...future.result$conditions <- ...future.conditions
[17:39:48.147]     ...future.result$finished <- base::Sys.time()
[17:39:48.147]     ...future.result
[17:39:48.147] }
[17:39:48.150] MultisessionFuture started
[17:39:48.151] - Launch lazy future ... done
[17:39:48.151] run() for ‘MultisessionFuture’ ... done
[17:39:48.151] result() for ClusterFuture ...
[17:39:48.151] receiveMessageFromWorker() for ClusterFuture ...
[17:39:48.151] - Validating connection of MultisessionFuture
[17:39:48.152] - received message: FutureResult
[17:39:48.153] - Received FutureResult
[17:39:48.153] - Erased future from FutureRegistry
[17:39:48.153] result() for ClusterFuture ...
[17:39:48.153] - result already collected: FutureResult
[17:39:48.153] result() for ClusterFuture ... done
[17:39:48.153] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:48.153] result() for ClusterFuture ... done
[17:39:48.153] result() for ClusterFuture ...
[17:39:48.153] - result already collected: FutureResult
[17:39:48.154] result() for ClusterFuture ... done
[17:39:48.154] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:48.154] Searching for globals...
[17:39:48.155] - globals found: [1] ‘getOption’
[17:39:48.155] Searching for globals ... DONE
[17:39:48.155] Resolving globals: FALSE
[17:39:48.155] 
[17:39:48.155] 
[17:39:48.156] getGlobalsAndPackages() ... DONE
[17:39:48.156] run() for ‘Future’ ...
[17:39:48.156] - state: ‘created’
[17:39:48.156] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:48.171] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:48.171] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:48.171]   - Field: ‘node’
[17:39:48.171]   - Field: ‘label’
[17:39:48.171]   - Field: ‘local’
[17:39:48.171]   - Field: ‘owner’
[17:39:48.171]   - Field: ‘envir’
[17:39:48.171]   - Field: ‘workers’
[17:39:48.171]   - Field: ‘packages’
[17:39:48.171]   - Field: ‘gc’
[17:39:48.172]   - Field: ‘conditions’
[17:39:48.172]   - Field: ‘persistent’
[17:39:48.172]   - Field: ‘expr’
[17:39:48.172]   - Field: ‘uuid’
[17:39:48.172]   - Field: ‘seed’
[17:39:48.172]   - Field: ‘version’
[17:39:48.172]   - Field: ‘result’
[17:39:48.172]   - Field: ‘asynchronous’
[17:39:48.173]   - Field: ‘calls’
[17:39:48.173]   - Field: ‘globals’
[17:39:48.173]   - Field: ‘stdout’
[17:39:48.173]   - Field: ‘earlySignal’
[17:39:48.173]   - Field: ‘lazy’
[17:39:48.173]   - Field: ‘state’
[17:39:48.173] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:48.173] - Launch lazy future ...
[17:39:48.174] Packages needed by the future expression (n = 0): <none>
[17:39:48.174] Packages needed by future strategies (n = 0): <none>
[17:39:48.174] {
[17:39:48.174]     {
[17:39:48.174]         {
[17:39:48.174]             ...future.startTime <- base::Sys.time()
[17:39:48.174]             {
[17:39:48.174]                 {
[17:39:48.174]                   {
[17:39:48.174]                     {
[17:39:48.174]                       base::local({
[17:39:48.174]                         has_future <- base::requireNamespace("future", 
[17:39:48.174]                           quietly = TRUE)
[17:39:48.174]                         if (has_future) {
[17:39:48.174]                           ns <- base::getNamespace("future")
[17:39:48.174]                           version <- ns[[".package"]][["version"]]
[17:39:48.174]                           if (is.null(version)) 
[17:39:48.174]                             version <- utils::packageVersion("future")
[17:39:48.174]                         }
[17:39:48.174]                         else {
[17:39:48.174]                           version <- NULL
[17:39:48.174]                         }
[17:39:48.174]                         if (!has_future || version < "1.8.0") {
[17:39:48.174]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:48.174]                             "", base::R.version$version.string), 
[17:39:48.174]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:48.174]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:48.174]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:48.174]                               "release", "version")], collapse = " "), 
[17:39:48.174]                             hostname = base::Sys.info()[["nodename"]])
[17:39:48.174]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:48.174]                             info)
[17:39:48.174]                           info <- base::paste(info, collapse = "; ")
[17:39:48.174]                           if (!has_future) {
[17:39:48.174]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:48.174]                               info)
[17:39:48.174]                           }
[17:39:48.174]                           else {
[17:39:48.174]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:48.174]                               info, version)
[17:39:48.174]                           }
[17:39:48.174]                           base::stop(msg)
[17:39:48.174]                         }
[17:39:48.174]                       })
[17:39:48.174]                     }
[17:39:48.174]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:48.174]                     base::options(mc.cores = 1L)
[17:39:48.174]                   }
[17:39:48.174]                   ...future.strategy.old <- future::plan("list")
[17:39:48.174]                   options(future.plan = NULL)
[17:39:48.174]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:48.174]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:48.174]                 }
[17:39:48.174]                 ...future.workdir <- getwd()
[17:39:48.174]             }
[17:39:48.174]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:48.174]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:48.174]         }
[17:39:48.174]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:48.174]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:48.174]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:48.174]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:48.174]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:48.174]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:48.174]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:48.174]             base::names(...future.oldOptions))
[17:39:48.174]     }
[17:39:48.174]     if (FALSE) {
[17:39:48.174]     }
[17:39:48.174]     else {
[17:39:48.174]         if (TRUE) {
[17:39:48.174]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:48.174]                 open = "w")
[17:39:48.174]         }
[17:39:48.174]         else {
[17:39:48.174]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:48.174]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:48.174]         }
[17:39:48.174]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:48.174]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:48.174]             base::sink(type = "output", split = FALSE)
[17:39:48.174]             base::close(...future.stdout)
[17:39:48.174]         }, add = TRUE)
[17:39:48.174]     }
[17:39:48.174]     ...future.frame <- base::sys.nframe()
[17:39:48.174]     ...future.conditions <- base::list()
[17:39:48.174]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:48.174]     if (FALSE) {
[17:39:48.174]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:48.174]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:48.174]     }
[17:39:48.174]     ...future.result <- base::tryCatch({
[17:39:48.174]         base::withCallingHandlers({
[17:39:48.174]             ...future.value <- base::withVisible(base::local({
[17:39:48.174]                 ...future.makeSendCondition <- base::local({
[17:39:48.174]                   sendCondition <- NULL
[17:39:48.174]                   function(frame = 1L) {
[17:39:48.174]                     if (is.function(sendCondition)) 
[17:39:48.174]                       return(sendCondition)
[17:39:48.174]                     ns <- getNamespace("parallel")
[17:39:48.174]                     if (exists("sendData", mode = "function", 
[17:39:48.174]                       envir = ns)) {
[17:39:48.174]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:48.174]                         envir = ns)
[17:39:48.174]                       envir <- sys.frame(frame)
[17:39:48.174]                       master <- NULL
[17:39:48.174]                       while (!identical(envir, .GlobalEnv) && 
[17:39:48.174]                         !identical(envir, emptyenv())) {
[17:39:48.174]                         if (exists("master", mode = "list", envir = envir, 
[17:39:48.174]                           inherits = FALSE)) {
[17:39:48.174]                           master <- get("master", mode = "list", 
[17:39:48.174]                             envir = envir, inherits = FALSE)
[17:39:48.174]                           if (inherits(master, c("SOCKnode", 
[17:39:48.174]                             "SOCK0node"))) {
[17:39:48.174]                             sendCondition <<- function(cond) {
[17:39:48.174]                               data <- list(type = "VALUE", value = cond, 
[17:39:48.174]                                 success = TRUE)
[17:39:48.174]                               parallel_sendData(master, data)
[17:39:48.174]                             }
[17:39:48.174]                             return(sendCondition)
[17:39:48.174]                           }
[17:39:48.174]                         }
[17:39:48.174]                         frame <- frame + 1L
[17:39:48.174]                         envir <- sys.frame(frame)
[17:39:48.174]                       }
[17:39:48.174]                     }
[17:39:48.174]                     sendCondition <<- function(cond) NULL
[17:39:48.174]                   }
[17:39:48.174]                 })
[17:39:48.174]                 withCallingHandlers({
[17:39:48.174]                   getOption("future.globals.onMissing")
[17:39:48.174]                 }, immediateCondition = function(cond) {
[17:39:48.174]                   sendCondition <- ...future.makeSendCondition()
[17:39:48.174]                   sendCondition(cond)
[17:39:48.174]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.174]                   {
[17:39:48.174]                     inherits <- base::inherits
[17:39:48.174]                     invokeRestart <- base::invokeRestart
[17:39:48.174]                     is.null <- base::is.null
[17:39:48.174]                     muffled <- FALSE
[17:39:48.174]                     if (inherits(cond, "message")) {
[17:39:48.174]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:48.174]                       if (muffled) 
[17:39:48.174]                         invokeRestart("muffleMessage")
[17:39:48.174]                     }
[17:39:48.174]                     else if (inherits(cond, "warning")) {
[17:39:48.174]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:48.174]                       if (muffled) 
[17:39:48.174]                         invokeRestart("muffleWarning")
[17:39:48.174]                     }
[17:39:48.174]                     else if (inherits(cond, "condition")) {
[17:39:48.174]                       if (!is.null(pattern)) {
[17:39:48.174]                         computeRestarts <- base::computeRestarts
[17:39:48.174]                         grepl <- base::grepl
[17:39:48.174]                         restarts <- computeRestarts(cond)
[17:39:48.174]                         for (restart in restarts) {
[17:39:48.174]                           name <- restart$name
[17:39:48.174]                           if (is.null(name)) 
[17:39:48.174]                             next
[17:39:48.174]                           if (!grepl(pattern, name)) 
[17:39:48.174]                             next
[17:39:48.174]                           invokeRestart(restart)
[17:39:48.174]                           muffled <- TRUE
[17:39:48.174]                           break
[17:39:48.174]                         }
[17:39:48.174]                       }
[17:39:48.174]                     }
[17:39:48.174]                     invisible(muffled)
[17:39:48.174]                   }
[17:39:48.174]                   muffleCondition(cond)
[17:39:48.174]                 })
[17:39:48.174]             }))
[17:39:48.174]             future::FutureResult(value = ...future.value$value, 
[17:39:48.174]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:48.174]                   ...future.rng), globalenv = if (FALSE) 
[17:39:48.174]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:48.174]                     ...future.globalenv.names))
[17:39:48.174]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:48.174]         }, condition = base::local({
[17:39:48.174]             c <- base::c
[17:39:48.174]             inherits <- base::inherits
[17:39:48.174]             invokeRestart <- base::invokeRestart
[17:39:48.174]             length <- base::length
[17:39:48.174]             list <- base::list
[17:39:48.174]             seq.int <- base::seq.int
[17:39:48.174]             signalCondition <- base::signalCondition
[17:39:48.174]             sys.calls <- base::sys.calls
[17:39:48.174]             `[[` <- base::`[[`
[17:39:48.174]             `+` <- base::`+`
[17:39:48.174]             `<<-` <- base::`<<-`
[17:39:48.174]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:48.174]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:48.174]                   3L)]
[17:39:48.174]             }
[17:39:48.174]             function(cond) {
[17:39:48.174]                 is_error <- inherits(cond, "error")
[17:39:48.174]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:48.174]                   NULL)
[17:39:48.174]                 if (is_error) {
[17:39:48.174]                   sessionInformation <- function() {
[17:39:48.174]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:48.174]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:48.174]                       search = base::search(), system = base::Sys.info())
[17:39:48.174]                   }
[17:39:48.174]                   ...future.conditions[[length(...future.conditions) + 
[17:39:48.174]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:48.174]                     cond$call), session = sessionInformation(), 
[17:39:48.174]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:48.174]                   signalCondition(cond)
[17:39:48.174]                 }
[17:39:48.174]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:48.174]                 "immediateCondition"))) {
[17:39:48.174]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:48.174]                   ...future.conditions[[length(...future.conditions) + 
[17:39:48.174]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:48.174]                   if (TRUE && !signal) {
[17:39:48.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.174]                     {
[17:39:48.174]                       inherits <- base::inherits
[17:39:48.174]                       invokeRestart <- base::invokeRestart
[17:39:48.174]                       is.null <- base::is.null
[17:39:48.174]                       muffled <- FALSE
[17:39:48.174]                       if (inherits(cond, "message")) {
[17:39:48.174]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:48.174]                         if (muffled) 
[17:39:48.174]                           invokeRestart("muffleMessage")
[17:39:48.174]                       }
[17:39:48.174]                       else if (inherits(cond, "warning")) {
[17:39:48.174]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:48.174]                         if (muffled) 
[17:39:48.174]                           invokeRestart("muffleWarning")
[17:39:48.174]                       }
[17:39:48.174]                       else if (inherits(cond, "condition")) {
[17:39:48.174]                         if (!is.null(pattern)) {
[17:39:48.174]                           computeRestarts <- base::computeRestarts
[17:39:48.174]                           grepl <- base::grepl
[17:39:48.174]                           restarts <- computeRestarts(cond)
[17:39:48.174]                           for (restart in restarts) {
[17:39:48.174]                             name <- restart$name
[17:39:48.174]                             if (is.null(name)) 
[17:39:48.174]                               next
[17:39:48.174]                             if (!grepl(pattern, name)) 
[17:39:48.174]                               next
[17:39:48.174]                             invokeRestart(restart)
[17:39:48.174]                             muffled <- TRUE
[17:39:48.174]                             break
[17:39:48.174]                           }
[17:39:48.174]                         }
[17:39:48.174]                       }
[17:39:48.174]                       invisible(muffled)
[17:39:48.174]                     }
[17:39:48.174]                     muffleCondition(cond, pattern = "^muffle")
[17:39:48.174]                   }
[17:39:48.174]                 }
[17:39:48.174]                 else {
[17:39:48.174]                   if (TRUE) {
[17:39:48.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.174]                     {
[17:39:48.174]                       inherits <- base::inherits
[17:39:48.174]                       invokeRestart <- base::invokeRestart
[17:39:48.174]                       is.null <- base::is.null
[17:39:48.174]                       muffled <- FALSE
[17:39:48.174]                       if (inherits(cond, "message")) {
[17:39:48.174]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:48.174]                         if (muffled) 
[17:39:48.174]                           invokeRestart("muffleMessage")
[17:39:48.174]                       }
[17:39:48.174]                       else if (inherits(cond, "warning")) {
[17:39:48.174]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:48.174]                         if (muffled) 
[17:39:48.174]                           invokeRestart("muffleWarning")
[17:39:48.174]                       }
[17:39:48.174]                       else if (inherits(cond, "condition")) {
[17:39:48.174]                         if (!is.null(pattern)) {
[17:39:48.174]                           computeRestarts <- base::computeRestarts
[17:39:48.174]                           grepl <- base::grepl
[17:39:48.174]                           restarts <- computeRestarts(cond)
[17:39:48.174]                           for (restart in restarts) {
[17:39:48.174]                             name <- restart$name
[17:39:48.174]                             if (is.null(name)) 
[17:39:48.174]                               next
[17:39:48.174]                             if (!grepl(pattern, name)) 
[17:39:48.174]                               next
[17:39:48.174]                             invokeRestart(restart)
[17:39:48.174]                             muffled <- TRUE
[17:39:48.174]                             break
[17:39:48.174]                           }
[17:39:48.174]                         }
[17:39:48.174]                       }
[17:39:48.174]                       invisible(muffled)
[17:39:48.174]                     }
[17:39:48.174]                     muffleCondition(cond, pattern = "^muffle")
[17:39:48.174]                   }
[17:39:48.174]                 }
[17:39:48.174]             }
[17:39:48.174]         }))
[17:39:48.174]     }, error = function(ex) {
[17:39:48.174]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:48.174]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:48.174]                 ...future.rng), started = ...future.startTime, 
[17:39:48.174]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:48.174]             version = "1.8"), class = "FutureResult")
[17:39:48.174]     }, finally = {
[17:39:48.174]         if (!identical(...future.workdir, getwd())) 
[17:39:48.174]             setwd(...future.workdir)
[17:39:48.174]         {
[17:39:48.174]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:48.174]                 ...future.oldOptions$nwarnings <- NULL
[17:39:48.174]             }
[17:39:48.174]             base::options(...future.oldOptions)
[17:39:48.174]             if (.Platform$OS.type == "windows") {
[17:39:48.174]                 old_names <- names(...future.oldEnvVars)
[17:39:48.174]                 envs <- base::Sys.getenv()
[17:39:48.174]                 names <- names(envs)
[17:39:48.174]                 common <- intersect(names, old_names)
[17:39:48.174]                 added <- setdiff(names, old_names)
[17:39:48.174]                 removed <- setdiff(old_names, names)
[17:39:48.174]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:48.174]                   envs[common]]
[17:39:48.174]                 NAMES <- toupper(changed)
[17:39:48.174]                 args <- list()
[17:39:48.174]                 for (kk in seq_along(NAMES)) {
[17:39:48.174]                   name <- changed[[kk]]
[17:39:48.174]                   NAME <- NAMES[[kk]]
[17:39:48.174]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.174]                     next
[17:39:48.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:48.174]                 }
[17:39:48.174]                 NAMES <- toupper(added)
[17:39:48.174]                 for (kk in seq_along(NAMES)) {
[17:39:48.174]                   name <- added[[kk]]
[17:39:48.174]                   NAME <- NAMES[[kk]]
[17:39:48.174]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.174]                     next
[17:39:48.174]                   args[[name]] <- ""
[17:39:48.174]                 }
[17:39:48.174]                 NAMES <- toupper(removed)
[17:39:48.174]                 for (kk in seq_along(NAMES)) {
[17:39:48.174]                   name <- removed[[kk]]
[17:39:48.174]                   NAME <- NAMES[[kk]]
[17:39:48.174]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.174]                     next
[17:39:48.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:48.174]                 }
[17:39:48.174]                 if (length(args) > 0) 
[17:39:48.174]                   base::do.call(base::Sys.setenv, args = args)
[17:39:48.174]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:48.174]             }
[17:39:48.174]             else {
[17:39:48.174]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:48.174]             }
[17:39:48.174]             {
[17:39:48.174]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:48.174]                   0L) {
[17:39:48.174]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:48.174]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:48.174]                   base::options(opts)
[17:39:48.174]                 }
[17:39:48.174]                 {
[17:39:48.174]                   {
[17:39:48.174]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:48.174]                     NULL
[17:39:48.174]                   }
[17:39:48.174]                   options(future.plan = NULL)
[17:39:48.174]                   if (is.na(NA_character_)) 
[17:39:48.174]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:48.174]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:48.174]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:48.174]                     .init = FALSE)
[17:39:48.174]                 }
[17:39:48.174]             }
[17:39:48.174]         }
[17:39:48.174]     })
[17:39:48.174]     if (TRUE) {
[17:39:48.174]         base::sink(type = "output", split = FALSE)
[17:39:48.174]         if (TRUE) {
[17:39:48.174]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:48.174]         }
[17:39:48.174]         else {
[17:39:48.174]             ...future.result["stdout"] <- base::list(NULL)
[17:39:48.174]         }
[17:39:48.174]         base::close(...future.stdout)
[17:39:48.174]         ...future.stdout <- NULL
[17:39:48.174]     }
[17:39:48.174]     ...future.result$conditions <- ...future.conditions
[17:39:48.174]     ...future.result$finished <- base::Sys.time()
[17:39:48.174]     ...future.result
[17:39:48.174] }
[17:39:48.178] MultisessionFuture started
[17:39:48.178] - Launch lazy future ... done
[17:39:48.178] run() for ‘MultisessionFuture’ ... done
[17:39:48.178] result() for ClusterFuture ...
[17:39:48.178] receiveMessageFromWorker() for ClusterFuture ...
[17:39:48.179] - Validating connection of MultisessionFuture
[17:39:48.183] - received message: FutureResult
[17:39:48.183] - Received FutureResult
[17:39:48.183] - Erased future from FutureRegistry
[17:39:48.184] result() for ClusterFuture ...
[17:39:48.184] - result already collected: FutureResult
[17:39:48.184] result() for ClusterFuture ... done
[17:39:48.184] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:48.184] result() for ClusterFuture ... done
[17:39:48.184] result() for ClusterFuture ...
[17:39:48.184] - result already collected: FutureResult
[17:39:48.184] result() for ClusterFuture ... done
[17:39:48.185] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:39:48.185] Searching for globals...
[17:39:48.187] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:48.187] Searching for globals...
[17:39:48.188] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:39:48.188] Searching for globals ... DONE
[17:39:48.188] Resolving globals: FALSE
[17:39:48.189] The total size of the 1 globals is 160 bytes (160 bytes)
[17:39:48.189] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:39:48.189] - globals: [1] ‘data’
[17:39:48.190] 
[17:39:48.190] getGlobalsAndPackages() ... DONE
[17:39:48.190] run() for ‘Future’ ...
[17:39:48.190] - state: ‘created’
[17:39:48.190] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:48.205] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:48.205] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:48.205]   - Field: ‘node’
[17:39:48.205]   - Field: ‘label’
[17:39:48.205]   - Field: ‘local’
[17:39:48.205]   - Field: ‘owner’
[17:39:48.205]   - Field: ‘envir’
[17:39:48.206]   - Field: ‘workers’
[17:39:48.206]   - Field: ‘packages’
[17:39:48.206]   - Field: ‘gc’
[17:39:48.206]   - Field: ‘conditions’
[17:39:48.206]   - Field: ‘persistent’
[17:39:48.206]   - Field: ‘expr’
[17:39:48.206]   - Field: ‘uuid’
[17:39:48.206]   - Field: ‘seed’
[17:39:48.206]   - Field: ‘version’
[17:39:48.206]   - Field: ‘result’
[17:39:48.207]   - Field: ‘asynchronous’
[17:39:48.207]   - Field: ‘calls’
[17:39:48.207]   - Field: ‘globals’
[17:39:48.207]   - Field: ‘stdout’
[17:39:48.207]   - Field: ‘earlySignal’
[17:39:48.207]   - Field: ‘lazy’
[17:39:48.207]   - Field: ‘state’
[17:39:48.207] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:48.208] - Launch lazy future ...
[17:39:48.208] Packages needed by the future expression (n = 0): <none>
[17:39:48.208] Packages needed by future strategies (n = 0): <none>
[17:39:48.209] {
[17:39:48.209]     {
[17:39:48.209]         {
[17:39:48.209]             ...future.startTime <- base::Sys.time()
[17:39:48.209]             {
[17:39:48.209]                 {
[17:39:48.209]                   {
[17:39:48.209]                     {
[17:39:48.209]                       base::local({
[17:39:48.209]                         has_future <- base::requireNamespace("future", 
[17:39:48.209]                           quietly = TRUE)
[17:39:48.209]                         if (has_future) {
[17:39:48.209]                           ns <- base::getNamespace("future")
[17:39:48.209]                           version <- ns[[".package"]][["version"]]
[17:39:48.209]                           if (is.null(version)) 
[17:39:48.209]                             version <- utils::packageVersion("future")
[17:39:48.209]                         }
[17:39:48.209]                         else {
[17:39:48.209]                           version <- NULL
[17:39:48.209]                         }
[17:39:48.209]                         if (!has_future || version < "1.8.0") {
[17:39:48.209]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:48.209]                             "", base::R.version$version.string), 
[17:39:48.209]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:48.209]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:48.209]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:48.209]                               "release", "version")], collapse = " "), 
[17:39:48.209]                             hostname = base::Sys.info()[["nodename"]])
[17:39:48.209]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:48.209]                             info)
[17:39:48.209]                           info <- base::paste(info, collapse = "; ")
[17:39:48.209]                           if (!has_future) {
[17:39:48.209]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:48.209]                               info)
[17:39:48.209]                           }
[17:39:48.209]                           else {
[17:39:48.209]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:48.209]                               info, version)
[17:39:48.209]                           }
[17:39:48.209]                           base::stop(msg)
[17:39:48.209]                         }
[17:39:48.209]                       })
[17:39:48.209]                     }
[17:39:48.209]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:48.209]                     base::options(mc.cores = 1L)
[17:39:48.209]                   }
[17:39:48.209]                   ...future.strategy.old <- future::plan("list")
[17:39:48.209]                   options(future.plan = NULL)
[17:39:48.209]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:48.209]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:48.209]                 }
[17:39:48.209]                 ...future.workdir <- getwd()
[17:39:48.209]             }
[17:39:48.209]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:48.209]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:48.209]         }
[17:39:48.209]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:48.209]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:48.209]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:48.209]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:48.209]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:48.209]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:48.209]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:48.209]             base::names(...future.oldOptions))
[17:39:48.209]     }
[17:39:48.209]     if (FALSE) {
[17:39:48.209]     }
[17:39:48.209]     else {
[17:39:48.209]         if (TRUE) {
[17:39:48.209]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:48.209]                 open = "w")
[17:39:48.209]         }
[17:39:48.209]         else {
[17:39:48.209]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:48.209]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:48.209]         }
[17:39:48.209]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:48.209]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:48.209]             base::sink(type = "output", split = FALSE)
[17:39:48.209]             base::close(...future.stdout)
[17:39:48.209]         }, add = TRUE)
[17:39:48.209]     }
[17:39:48.209]     ...future.frame <- base::sys.nframe()
[17:39:48.209]     ...future.conditions <- base::list()
[17:39:48.209]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:48.209]     if (FALSE) {
[17:39:48.209]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:48.209]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:48.209]     }
[17:39:48.209]     ...future.result <- base::tryCatch({
[17:39:48.209]         base::withCallingHandlers({
[17:39:48.209]             ...future.value <- base::withVisible(base::local({
[17:39:48.209]                 ...future.makeSendCondition <- base::local({
[17:39:48.209]                   sendCondition <- NULL
[17:39:48.209]                   function(frame = 1L) {
[17:39:48.209]                     if (is.function(sendCondition)) 
[17:39:48.209]                       return(sendCondition)
[17:39:48.209]                     ns <- getNamespace("parallel")
[17:39:48.209]                     if (exists("sendData", mode = "function", 
[17:39:48.209]                       envir = ns)) {
[17:39:48.209]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:48.209]                         envir = ns)
[17:39:48.209]                       envir <- sys.frame(frame)
[17:39:48.209]                       master <- NULL
[17:39:48.209]                       while (!identical(envir, .GlobalEnv) && 
[17:39:48.209]                         !identical(envir, emptyenv())) {
[17:39:48.209]                         if (exists("master", mode = "list", envir = envir, 
[17:39:48.209]                           inherits = FALSE)) {
[17:39:48.209]                           master <- get("master", mode = "list", 
[17:39:48.209]                             envir = envir, inherits = FALSE)
[17:39:48.209]                           if (inherits(master, c("SOCKnode", 
[17:39:48.209]                             "SOCK0node"))) {
[17:39:48.209]                             sendCondition <<- function(cond) {
[17:39:48.209]                               data <- list(type = "VALUE", value = cond, 
[17:39:48.209]                                 success = TRUE)
[17:39:48.209]                               parallel_sendData(master, data)
[17:39:48.209]                             }
[17:39:48.209]                             return(sendCondition)
[17:39:48.209]                           }
[17:39:48.209]                         }
[17:39:48.209]                         frame <- frame + 1L
[17:39:48.209]                         envir <- sys.frame(frame)
[17:39:48.209]                       }
[17:39:48.209]                     }
[17:39:48.209]                     sendCondition <<- function(cond) NULL
[17:39:48.209]                   }
[17:39:48.209]                 })
[17:39:48.209]                 withCallingHandlers({
[17:39:48.209]                   subset(data, x < 3)$y
[17:39:48.209]                 }, immediateCondition = function(cond) {
[17:39:48.209]                   sendCondition <- ...future.makeSendCondition()
[17:39:48.209]                   sendCondition(cond)
[17:39:48.209]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.209]                   {
[17:39:48.209]                     inherits <- base::inherits
[17:39:48.209]                     invokeRestart <- base::invokeRestart
[17:39:48.209]                     is.null <- base::is.null
[17:39:48.209]                     muffled <- FALSE
[17:39:48.209]                     if (inherits(cond, "message")) {
[17:39:48.209]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:48.209]                       if (muffled) 
[17:39:48.209]                         invokeRestart("muffleMessage")
[17:39:48.209]                     }
[17:39:48.209]                     else if (inherits(cond, "warning")) {
[17:39:48.209]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:48.209]                       if (muffled) 
[17:39:48.209]                         invokeRestart("muffleWarning")
[17:39:48.209]                     }
[17:39:48.209]                     else if (inherits(cond, "condition")) {
[17:39:48.209]                       if (!is.null(pattern)) {
[17:39:48.209]                         computeRestarts <- base::computeRestarts
[17:39:48.209]                         grepl <- base::grepl
[17:39:48.209]                         restarts <- computeRestarts(cond)
[17:39:48.209]                         for (restart in restarts) {
[17:39:48.209]                           name <- restart$name
[17:39:48.209]                           if (is.null(name)) 
[17:39:48.209]                             next
[17:39:48.209]                           if (!grepl(pattern, name)) 
[17:39:48.209]                             next
[17:39:48.209]                           invokeRestart(restart)
[17:39:48.209]                           muffled <- TRUE
[17:39:48.209]                           break
[17:39:48.209]                         }
[17:39:48.209]                       }
[17:39:48.209]                     }
[17:39:48.209]                     invisible(muffled)
[17:39:48.209]                   }
[17:39:48.209]                   muffleCondition(cond)
[17:39:48.209]                 })
[17:39:48.209]             }))
[17:39:48.209]             future::FutureResult(value = ...future.value$value, 
[17:39:48.209]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:48.209]                   ...future.rng), globalenv = if (FALSE) 
[17:39:48.209]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:48.209]                     ...future.globalenv.names))
[17:39:48.209]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:48.209]         }, condition = base::local({
[17:39:48.209]             c <- base::c
[17:39:48.209]             inherits <- base::inherits
[17:39:48.209]             invokeRestart <- base::invokeRestart
[17:39:48.209]             length <- base::length
[17:39:48.209]             list <- base::list
[17:39:48.209]             seq.int <- base::seq.int
[17:39:48.209]             signalCondition <- base::signalCondition
[17:39:48.209]             sys.calls <- base::sys.calls
[17:39:48.209]             `[[` <- base::`[[`
[17:39:48.209]             `+` <- base::`+`
[17:39:48.209]             `<<-` <- base::`<<-`
[17:39:48.209]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:48.209]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:48.209]                   3L)]
[17:39:48.209]             }
[17:39:48.209]             function(cond) {
[17:39:48.209]                 is_error <- inherits(cond, "error")
[17:39:48.209]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:48.209]                   NULL)
[17:39:48.209]                 if (is_error) {
[17:39:48.209]                   sessionInformation <- function() {
[17:39:48.209]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:48.209]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:48.209]                       search = base::search(), system = base::Sys.info())
[17:39:48.209]                   }
[17:39:48.209]                   ...future.conditions[[length(...future.conditions) + 
[17:39:48.209]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:48.209]                     cond$call), session = sessionInformation(), 
[17:39:48.209]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:48.209]                   signalCondition(cond)
[17:39:48.209]                 }
[17:39:48.209]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:48.209]                 "immediateCondition"))) {
[17:39:48.209]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:48.209]                   ...future.conditions[[length(...future.conditions) + 
[17:39:48.209]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:48.209]                   if (TRUE && !signal) {
[17:39:48.209]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.209]                     {
[17:39:48.209]                       inherits <- base::inherits
[17:39:48.209]                       invokeRestart <- base::invokeRestart
[17:39:48.209]                       is.null <- base::is.null
[17:39:48.209]                       muffled <- FALSE
[17:39:48.209]                       if (inherits(cond, "message")) {
[17:39:48.209]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:48.209]                         if (muffled) 
[17:39:48.209]                           invokeRestart("muffleMessage")
[17:39:48.209]                       }
[17:39:48.209]                       else if (inherits(cond, "warning")) {
[17:39:48.209]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:48.209]                         if (muffled) 
[17:39:48.209]                           invokeRestart("muffleWarning")
[17:39:48.209]                       }
[17:39:48.209]                       else if (inherits(cond, "condition")) {
[17:39:48.209]                         if (!is.null(pattern)) {
[17:39:48.209]                           computeRestarts <- base::computeRestarts
[17:39:48.209]                           grepl <- base::grepl
[17:39:48.209]                           restarts <- computeRestarts(cond)
[17:39:48.209]                           for (restart in restarts) {
[17:39:48.209]                             name <- restart$name
[17:39:48.209]                             if (is.null(name)) 
[17:39:48.209]                               next
[17:39:48.209]                             if (!grepl(pattern, name)) 
[17:39:48.209]                               next
[17:39:48.209]                             invokeRestart(restart)
[17:39:48.209]                             muffled <- TRUE
[17:39:48.209]                             break
[17:39:48.209]                           }
[17:39:48.209]                         }
[17:39:48.209]                       }
[17:39:48.209]                       invisible(muffled)
[17:39:48.209]                     }
[17:39:48.209]                     muffleCondition(cond, pattern = "^muffle")
[17:39:48.209]                   }
[17:39:48.209]                 }
[17:39:48.209]                 else {
[17:39:48.209]                   if (TRUE) {
[17:39:48.209]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.209]                     {
[17:39:48.209]                       inherits <- base::inherits
[17:39:48.209]                       invokeRestart <- base::invokeRestart
[17:39:48.209]                       is.null <- base::is.null
[17:39:48.209]                       muffled <- FALSE
[17:39:48.209]                       if (inherits(cond, "message")) {
[17:39:48.209]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:48.209]                         if (muffled) 
[17:39:48.209]                           invokeRestart("muffleMessage")
[17:39:48.209]                       }
[17:39:48.209]                       else if (inherits(cond, "warning")) {
[17:39:48.209]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:48.209]                         if (muffled) 
[17:39:48.209]                           invokeRestart("muffleWarning")
[17:39:48.209]                       }
[17:39:48.209]                       else if (inherits(cond, "condition")) {
[17:39:48.209]                         if (!is.null(pattern)) {
[17:39:48.209]                           computeRestarts <- base::computeRestarts
[17:39:48.209]                           grepl <- base::grepl
[17:39:48.209]                           restarts <- computeRestarts(cond)
[17:39:48.209]                           for (restart in restarts) {
[17:39:48.209]                             name <- restart$name
[17:39:48.209]                             if (is.null(name)) 
[17:39:48.209]                               next
[17:39:48.209]                             if (!grepl(pattern, name)) 
[17:39:48.209]                               next
[17:39:48.209]                             invokeRestart(restart)
[17:39:48.209]                             muffled <- TRUE
[17:39:48.209]                             break
[17:39:48.209]                           }
[17:39:48.209]                         }
[17:39:48.209]                       }
[17:39:48.209]                       invisible(muffled)
[17:39:48.209]                     }
[17:39:48.209]                     muffleCondition(cond, pattern = "^muffle")
[17:39:48.209]                   }
[17:39:48.209]                 }
[17:39:48.209]             }
[17:39:48.209]         }))
[17:39:48.209]     }, error = function(ex) {
[17:39:48.209]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:48.209]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:48.209]                 ...future.rng), started = ...future.startTime, 
[17:39:48.209]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:48.209]             version = "1.8"), class = "FutureResult")
[17:39:48.209]     }, finally = {
[17:39:48.209]         if (!identical(...future.workdir, getwd())) 
[17:39:48.209]             setwd(...future.workdir)
[17:39:48.209]         {
[17:39:48.209]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:48.209]                 ...future.oldOptions$nwarnings <- NULL
[17:39:48.209]             }
[17:39:48.209]             base::options(...future.oldOptions)
[17:39:48.209]             if (.Platform$OS.type == "windows") {
[17:39:48.209]                 old_names <- names(...future.oldEnvVars)
[17:39:48.209]                 envs <- base::Sys.getenv()
[17:39:48.209]                 names <- names(envs)
[17:39:48.209]                 common <- intersect(names, old_names)
[17:39:48.209]                 added <- setdiff(names, old_names)
[17:39:48.209]                 removed <- setdiff(old_names, names)
[17:39:48.209]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:48.209]                   envs[common]]
[17:39:48.209]                 NAMES <- toupper(changed)
[17:39:48.209]                 args <- list()
[17:39:48.209]                 for (kk in seq_along(NAMES)) {
[17:39:48.209]                   name <- changed[[kk]]
[17:39:48.209]                   NAME <- NAMES[[kk]]
[17:39:48.209]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.209]                     next
[17:39:48.209]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:48.209]                 }
[17:39:48.209]                 NAMES <- toupper(added)
[17:39:48.209]                 for (kk in seq_along(NAMES)) {
[17:39:48.209]                   name <- added[[kk]]
[17:39:48.209]                   NAME <- NAMES[[kk]]
[17:39:48.209]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.209]                     next
[17:39:48.209]                   args[[name]] <- ""
[17:39:48.209]                 }
[17:39:48.209]                 NAMES <- toupper(removed)
[17:39:48.209]                 for (kk in seq_along(NAMES)) {
[17:39:48.209]                   name <- removed[[kk]]
[17:39:48.209]                   NAME <- NAMES[[kk]]
[17:39:48.209]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.209]                     next
[17:39:48.209]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:48.209]                 }
[17:39:48.209]                 if (length(args) > 0) 
[17:39:48.209]                   base::do.call(base::Sys.setenv, args = args)
[17:39:48.209]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:48.209]             }
[17:39:48.209]             else {
[17:39:48.209]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:48.209]             }
[17:39:48.209]             {
[17:39:48.209]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:48.209]                   0L) {
[17:39:48.209]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:48.209]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:48.209]                   base::options(opts)
[17:39:48.209]                 }
[17:39:48.209]                 {
[17:39:48.209]                   {
[17:39:48.209]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:48.209]                     NULL
[17:39:48.209]                   }
[17:39:48.209]                   options(future.plan = NULL)
[17:39:48.209]                   if (is.na(NA_character_)) 
[17:39:48.209]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:48.209]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:48.209]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:48.209]                     .init = FALSE)
[17:39:48.209]                 }
[17:39:48.209]             }
[17:39:48.209]         }
[17:39:48.209]     })
[17:39:48.209]     if (TRUE) {
[17:39:48.209]         base::sink(type = "output", split = FALSE)
[17:39:48.209]         if (TRUE) {
[17:39:48.209]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:48.209]         }
[17:39:48.209]         else {
[17:39:48.209]             ...future.result["stdout"] <- base::list(NULL)
[17:39:48.209]         }
[17:39:48.209]         base::close(...future.stdout)
[17:39:48.209]         ...future.stdout <- NULL
[17:39:48.209]     }
[17:39:48.209]     ...future.result$conditions <- ...future.conditions
[17:39:48.209]     ...future.result$finished <- base::Sys.time()
[17:39:48.209]     ...future.result
[17:39:48.209] }
[17:39:48.212] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[17:39:48.212] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[17:39:48.212] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[17:39:48.212] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[17:39:48.213] MultisessionFuture started
[17:39:48.213] - Launch lazy future ... done
[17:39:48.213] run() for ‘MultisessionFuture’ ... done
[17:39:48.213] result() for ClusterFuture ...
[17:39:48.213] receiveMessageFromWorker() for ClusterFuture ...
[17:39:48.214] - Validating connection of MultisessionFuture
[17:39:48.215] - received message: FutureResult
[17:39:48.215] - Received FutureResult
[17:39:48.215] - Erased future from FutureRegistry
[17:39:48.215] result() for ClusterFuture ...
[17:39:48.215] - result already collected: FutureResult
[17:39:48.215] result() for ClusterFuture ... done
[17:39:48.216] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:48.216] result() for ClusterFuture ... done
[17:39:48.216] result() for ClusterFuture ...
[17:39:48.216] - result already collected: FutureResult
[17:39:48.216] result() for ClusterFuture ... done
[17:39:48.216] plan(): Setting new future strategy stack:
[17:39:48.216] List of future strategies:
[17:39:48.216] 1. sequential:
[17:39:48.216]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:48.216]    - tweaked: FALSE
[17:39:48.216]    - call: plan(list(sequential, strategy))
[17:39:48.216] 2. multisession:
[17:39:48.216]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:48.216]    - tweaked: FALSE
[17:39:48.216]    - call: plan(list(sequential, strategy))
[17:39:48.217] plan(): nbrOfWorkers() = 1
[17:39:48.218] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:48.218] Searching for globals...
[17:39:48.227] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[17:39:48.227] Searching for globals ... DONE
[17:39:48.227] Resolving globals: FALSE
[17:39:48.228] The total size of the 1 globals is 160 bytes (160 bytes)
[17:39:48.229] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:39:48.229] - globals: [1] ‘data’
[17:39:48.229] - packages: [1] ‘future’
[17:39:48.229] getGlobalsAndPackages() ... DONE
[17:39:48.230] run() for ‘Future’ ...
[17:39:48.230] - state: ‘created’
[17:39:48.230] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:48.231] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:48.231] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:48.231]   - Field: ‘label’
[17:39:48.231]   - Field: ‘local’
[17:39:48.231]   - Field: ‘owner’
[17:39:48.231]   - Field: ‘envir’
[17:39:48.232]   - Field: ‘packages’
[17:39:48.232]   - Field: ‘gc’
[17:39:48.232]   - Field: ‘conditions’
[17:39:48.232]   - Field: ‘expr’
[17:39:48.232]   - Field: ‘uuid’
[17:39:48.232]   - Field: ‘seed’
[17:39:48.232]   - Field: ‘version’
[17:39:48.233]   - Field: ‘result’
[17:39:48.233]   - Field: ‘asynchronous’
[17:39:48.233]   - Field: ‘calls’
[17:39:48.233]   - Field: ‘globals’
[17:39:48.233]   - Field: ‘stdout’
[17:39:48.233]   - Field: ‘earlySignal’
[17:39:48.233]   - Field: ‘lazy’
[17:39:48.233]   - Field: ‘state’
[17:39:48.233] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:48.234] - Launch lazy future ...
[17:39:48.234] Packages needed by the future expression (n = 1): ‘future’
[17:39:48.234] Packages needed by future strategies (n = 1): ‘future’
[17:39:48.235] {
[17:39:48.235]     {
[17:39:48.235]         {
[17:39:48.235]             ...future.startTime <- base::Sys.time()
[17:39:48.235]             {
[17:39:48.235]                 {
[17:39:48.235]                   {
[17:39:48.235]                     {
[17:39:48.235]                       base::local({
[17:39:48.235]                         has_future <- base::requireNamespace("future", 
[17:39:48.235]                           quietly = TRUE)
[17:39:48.235]                         if (has_future) {
[17:39:48.235]                           ns <- base::getNamespace("future")
[17:39:48.235]                           version <- ns[[".package"]][["version"]]
[17:39:48.235]                           if (is.null(version)) 
[17:39:48.235]                             version <- utils::packageVersion("future")
[17:39:48.235]                         }
[17:39:48.235]                         else {
[17:39:48.235]                           version <- NULL
[17:39:48.235]                         }
[17:39:48.235]                         if (!has_future || version < "1.8.0") {
[17:39:48.235]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:48.235]                             "", base::R.version$version.string), 
[17:39:48.235]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:48.235]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:48.235]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:48.235]                               "release", "version")], collapse = " "), 
[17:39:48.235]                             hostname = base::Sys.info()[["nodename"]])
[17:39:48.235]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:48.235]                             info)
[17:39:48.235]                           info <- base::paste(info, collapse = "; ")
[17:39:48.235]                           if (!has_future) {
[17:39:48.235]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:48.235]                               info)
[17:39:48.235]                           }
[17:39:48.235]                           else {
[17:39:48.235]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:48.235]                               info, version)
[17:39:48.235]                           }
[17:39:48.235]                           base::stop(msg)
[17:39:48.235]                         }
[17:39:48.235]                       })
[17:39:48.235]                     }
[17:39:48.235]                     base::local({
[17:39:48.235]                       for (pkg in "future") {
[17:39:48.235]                         base::loadNamespace(pkg)
[17:39:48.235]                         base::library(pkg, character.only = TRUE)
[17:39:48.235]                       }
[17:39:48.235]                     })
[17:39:48.235]                   }
[17:39:48.235]                   ...future.strategy.old <- future::plan("list")
[17:39:48.235]                   options(future.plan = NULL)
[17:39:48.235]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:48.235]                   future::plan(list(function (..., workers = availableCores(), 
[17:39:48.235]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:39:48.235]                     envir = parent.frame()) 
[17:39:48.235]                   {
[17:39:48.235]                     if (is.function(workers)) 
[17:39:48.235]                       workers <- workers()
[17:39:48.235]                     workers <- structure(as.integer(workers), 
[17:39:48.235]                       class = class(workers))
[17:39:48.235]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:39:48.235]                       workers >= 1)
[17:39:48.235]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:39:48.235]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:39:48.235]                     }
[17:39:48.235]                     future <- MultisessionFuture(..., workers = workers, 
[17:39:48.235]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:39:48.235]                       envir = envir)
[17:39:48.235]                     if (!future$lazy) 
[17:39:48.235]                       future <- run(future)
[17:39:48.235]                     invisible(future)
[17:39:48.235]                   }), .cleanup = FALSE, .init = FALSE)
[17:39:48.235]                 }
[17:39:48.235]                 ...future.workdir <- getwd()
[17:39:48.235]             }
[17:39:48.235]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:48.235]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:48.235]         }
[17:39:48.235]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:48.235]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:48.235]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:48.235]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:48.235]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:48.235]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:48.235]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:48.235]             base::names(...future.oldOptions))
[17:39:48.235]     }
[17:39:48.235]     if (FALSE) {
[17:39:48.235]     }
[17:39:48.235]     else {
[17:39:48.235]         if (TRUE) {
[17:39:48.235]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:48.235]                 open = "w")
[17:39:48.235]         }
[17:39:48.235]         else {
[17:39:48.235]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:48.235]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:48.235]         }
[17:39:48.235]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:48.235]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:48.235]             base::sink(type = "output", split = FALSE)
[17:39:48.235]             base::close(...future.stdout)
[17:39:48.235]         }, add = TRUE)
[17:39:48.235]     }
[17:39:48.235]     ...future.frame <- base::sys.nframe()
[17:39:48.235]     ...future.conditions <- base::list()
[17:39:48.235]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:48.235]     if (FALSE) {
[17:39:48.235]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:48.235]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:48.235]     }
[17:39:48.235]     ...future.result <- base::tryCatch({
[17:39:48.235]         base::withCallingHandlers({
[17:39:48.235]             ...future.value <- base::withVisible(base::local({
[17:39:48.235]                 a %<-% subset(data, x < 3)$y
[17:39:48.235]                 a
[17:39:48.235]             }))
[17:39:48.235]             future::FutureResult(value = ...future.value$value, 
[17:39:48.235]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:48.235]                   ...future.rng), globalenv = if (FALSE) 
[17:39:48.235]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:48.235]                     ...future.globalenv.names))
[17:39:48.235]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:48.235]         }, condition = base::local({
[17:39:48.235]             c <- base::c
[17:39:48.235]             inherits <- base::inherits
[17:39:48.235]             invokeRestart <- base::invokeRestart
[17:39:48.235]             length <- base::length
[17:39:48.235]             list <- base::list
[17:39:48.235]             seq.int <- base::seq.int
[17:39:48.235]             signalCondition <- base::signalCondition
[17:39:48.235]             sys.calls <- base::sys.calls
[17:39:48.235]             `[[` <- base::`[[`
[17:39:48.235]             `+` <- base::`+`
[17:39:48.235]             `<<-` <- base::`<<-`
[17:39:48.235]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:48.235]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:48.235]                   3L)]
[17:39:48.235]             }
[17:39:48.235]             function(cond) {
[17:39:48.235]                 is_error <- inherits(cond, "error")
[17:39:48.235]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:48.235]                   NULL)
[17:39:48.235]                 if (is_error) {
[17:39:48.235]                   sessionInformation <- function() {
[17:39:48.235]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:48.235]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:48.235]                       search = base::search(), system = base::Sys.info())
[17:39:48.235]                   }
[17:39:48.235]                   ...future.conditions[[length(...future.conditions) + 
[17:39:48.235]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:48.235]                     cond$call), session = sessionInformation(), 
[17:39:48.235]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:48.235]                   signalCondition(cond)
[17:39:48.235]                 }
[17:39:48.235]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:48.235]                 "immediateCondition"))) {
[17:39:48.235]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:48.235]                   ...future.conditions[[length(...future.conditions) + 
[17:39:48.235]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:48.235]                   if (TRUE && !signal) {
[17:39:48.235]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.235]                     {
[17:39:48.235]                       inherits <- base::inherits
[17:39:48.235]                       invokeRestart <- base::invokeRestart
[17:39:48.235]                       is.null <- base::is.null
[17:39:48.235]                       muffled <- FALSE
[17:39:48.235]                       if (inherits(cond, "message")) {
[17:39:48.235]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:48.235]                         if (muffled) 
[17:39:48.235]                           invokeRestart("muffleMessage")
[17:39:48.235]                       }
[17:39:48.235]                       else if (inherits(cond, "warning")) {
[17:39:48.235]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:48.235]                         if (muffled) 
[17:39:48.235]                           invokeRestart("muffleWarning")
[17:39:48.235]                       }
[17:39:48.235]                       else if (inherits(cond, "condition")) {
[17:39:48.235]                         if (!is.null(pattern)) {
[17:39:48.235]                           computeRestarts <- base::computeRestarts
[17:39:48.235]                           grepl <- base::grepl
[17:39:48.235]                           restarts <- computeRestarts(cond)
[17:39:48.235]                           for (restart in restarts) {
[17:39:48.235]                             name <- restart$name
[17:39:48.235]                             if (is.null(name)) 
[17:39:48.235]                               next
[17:39:48.235]                             if (!grepl(pattern, name)) 
[17:39:48.235]                               next
[17:39:48.235]                             invokeRestart(restart)
[17:39:48.235]                             muffled <- TRUE
[17:39:48.235]                             break
[17:39:48.235]                           }
[17:39:48.235]                         }
[17:39:48.235]                       }
[17:39:48.235]                       invisible(muffled)
[17:39:48.235]                     }
[17:39:48.235]                     muffleCondition(cond, pattern = "^muffle")
[17:39:48.235]                   }
[17:39:48.235]                 }
[17:39:48.235]                 else {
[17:39:48.235]                   if (TRUE) {
[17:39:48.235]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.235]                     {
[17:39:48.235]                       inherits <- base::inherits
[17:39:48.235]                       invokeRestart <- base::invokeRestart
[17:39:48.235]                       is.null <- base::is.null
[17:39:48.235]                       muffled <- FALSE
[17:39:48.235]                       if (inherits(cond, "message")) {
[17:39:48.235]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:48.235]                         if (muffled) 
[17:39:48.235]                           invokeRestart("muffleMessage")
[17:39:48.235]                       }
[17:39:48.235]                       else if (inherits(cond, "warning")) {
[17:39:48.235]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:48.235]                         if (muffled) 
[17:39:48.235]                           invokeRestart("muffleWarning")
[17:39:48.235]                       }
[17:39:48.235]                       else if (inherits(cond, "condition")) {
[17:39:48.235]                         if (!is.null(pattern)) {
[17:39:48.235]                           computeRestarts <- base::computeRestarts
[17:39:48.235]                           grepl <- base::grepl
[17:39:48.235]                           restarts <- computeRestarts(cond)
[17:39:48.235]                           for (restart in restarts) {
[17:39:48.235]                             name <- restart$name
[17:39:48.235]                             if (is.null(name)) 
[17:39:48.235]                               next
[17:39:48.235]                             if (!grepl(pattern, name)) 
[17:39:48.235]                               next
[17:39:48.235]                             invokeRestart(restart)
[17:39:48.235]                             muffled <- TRUE
[17:39:48.235]                             break
[17:39:48.235]                           }
[17:39:48.235]                         }
[17:39:48.235]                       }
[17:39:48.235]                       invisible(muffled)
[17:39:48.235]                     }
[17:39:48.235]                     muffleCondition(cond, pattern = "^muffle")
[17:39:48.235]                   }
[17:39:48.235]                 }
[17:39:48.235]             }
[17:39:48.235]         }))
[17:39:48.235]     }, error = function(ex) {
[17:39:48.235]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:48.235]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:48.235]                 ...future.rng), started = ...future.startTime, 
[17:39:48.235]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:48.235]             version = "1.8"), class = "FutureResult")
[17:39:48.235]     }, finally = {
[17:39:48.235]         if (!identical(...future.workdir, getwd())) 
[17:39:48.235]             setwd(...future.workdir)
[17:39:48.235]         {
[17:39:48.235]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:48.235]                 ...future.oldOptions$nwarnings <- NULL
[17:39:48.235]             }
[17:39:48.235]             base::options(...future.oldOptions)
[17:39:48.235]             if (.Platform$OS.type == "windows") {
[17:39:48.235]                 old_names <- names(...future.oldEnvVars)
[17:39:48.235]                 envs <- base::Sys.getenv()
[17:39:48.235]                 names <- names(envs)
[17:39:48.235]                 common <- intersect(names, old_names)
[17:39:48.235]                 added <- setdiff(names, old_names)
[17:39:48.235]                 removed <- setdiff(old_names, names)
[17:39:48.235]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:48.235]                   envs[common]]
[17:39:48.235]                 NAMES <- toupper(changed)
[17:39:48.235]                 args <- list()
[17:39:48.235]                 for (kk in seq_along(NAMES)) {
[17:39:48.235]                   name <- changed[[kk]]
[17:39:48.235]                   NAME <- NAMES[[kk]]
[17:39:48.235]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.235]                     next
[17:39:48.235]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:48.235]                 }
[17:39:48.235]                 NAMES <- toupper(added)
[17:39:48.235]                 for (kk in seq_along(NAMES)) {
[17:39:48.235]                   name <- added[[kk]]
[17:39:48.235]                   NAME <- NAMES[[kk]]
[17:39:48.235]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.235]                     next
[17:39:48.235]                   args[[name]] <- ""
[17:39:48.235]                 }
[17:39:48.235]                 NAMES <- toupper(removed)
[17:39:48.235]                 for (kk in seq_along(NAMES)) {
[17:39:48.235]                   name <- removed[[kk]]
[17:39:48.235]                   NAME <- NAMES[[kk]]
[17:39:48.235]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.235]                     next
[17:39:48.235]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:48.235]                 }
[17:39:48.235]                 if (length(args) > 0) 
[17:39:48.235]                   base::do.call(base::Sys.setenv, args = args)
[17:39:48.235]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:48.235]             }
[17:39:48.235]             else {
[17:39:48.235]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:48.235]             }
[17:39:48.235]             {
[17:39:48.235]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:48.235]                   0L) {
[17:39:48.235]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:48.235]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:48.235]                   base::options(opts)
[17:39:48.235]                 }
[17:39:48.235]                 {
[17:39:48.235]                   {
[17:39:48.235]                     NULL
[17:39:48.235]                     RNGkind("Mersenne-Twister")
[17:39:48.235]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:48.235]                       inherits = FALSE)
[17:39:48.235]                   }
[17:39:48.235]                   options(future.plan = NULL)
[17:39:48.235]                   if (is.na(NA_character_)) 
[17:39:48.235]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:48.235]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:48.235]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:48.235]                     .init = FALSE)
[17:39:48.235]                 }
[17:39:48.235]             }
[17:39:48.235]         }
[17:39:48.235]     })
[17:39:48.235]     if (TRUE) {
[17:39:48.235]         base::sink(type = "output", split = FALSE)
[17:39:48.235]         if (TRUE) {
[17:39:48.235]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:48.235]         }
[17:39:48.235]         else {
[17:39:48.235]             ...future.result["stdout"] <- base::list(NULL)
[17:39:48.235]         }
[17:39:48.235]         base::close(...future.stdout)
[17:39:48.235]         ...future.stdout <- NULL
[17:39:48.235]     }
[17:39:48.235]     ...future.result$conditions <- ...future.conditions
[17:39:48.235]     ...future.result$finished <- base::Sys.time()
[17:39:48.235]     ...future.result
[17:39:48.235] }
[17:39:48.237] assign_globals() ...
[17:39:48.237] List of 1
[17:39:48.237]  $ data:'data.frame':	5 obs. of  2 variables:
[17:39:48.237]   ..$ x: int [1:5] 1 2 3 4 5
[17:39:48.237]   ..$ y: int [1:5] 1 2 3 4 5
[17:39:48.237]  - attr(*, "where")=List of 1
[17:39:48.237]   ..$ data:<environment: R_EmptyEnv> 
[17:39:48.237]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:39:48.237]  - attr(*, "resolved")= logi FALSE
[17:39:48.237]  - attr(*, "total_size")= num 160
[17:39:48.237]  - attr(*, "already-done")= logi TRUE
[17:39:48.240] - copied ‘data’ to environment
[17:39:48.240] assign_globals() ... done
[17:39:48.240] plan(): Setting new future strategy stack:
[17:39:48.241] List of future strategies:
[17:39:48.241] 1. multisession:
[17:39:48.241]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:48.241]    - tweaked: FALSE
[17:39:48.241]    - call: plan(list(sequential, strategy))
[17:39:48.244] plan(): nbrOfWorkers() = 2
[17:39:48.643] plan(): Setting new future strategy stack:
[17:39:48.643] List of future strategies:
[17:39:48.643] 1. sequential:
[17:39:48.643]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:48.643]    - tweaked: FALSE
[17:39:48.643]    - call: plan(list(sequential, strategy))
[17:39:48.643] 2. multisession:
[17:39:48.643]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:48.643]    - tweaked: FALSE
[17:39:48.643]    - call: plan(list(sequential, strategy))
[17:39:48.644] plan(): nbrOfWorkers() = 1
[17:39:48.644] SequentialFuture started (and completed)
[17:39:48.644] signalConditions() ...
[17:39:48.644]  - include = ‘immediateCondition’
[17:39:48.644]  - exclude = 
[17:39:48.644]  - resignal = FALSE
[17:39:48.644]  - Number of conditions: 93
[17:39:48.645] signalConditions() ... done
[17:39:48.645] - Launch lazy future ... done
[17:39:48.645] run() for ‘SequentialFuture’ ... done
[17:39:48.645] signalConditions() ...
[17:39:48.645]  - include = ‘immediateCondition’
[17:39:48.645]  - exclude = 
[17:39:48.645]  - resignal = FALSE
[17:39:48.645]  - Number of conditions: 93
[17:39:48.645] signalConditions() ... done
[17:39:48.645] Future state: ‘finished’
[17:39:48.646] signalConditions() ...
[17:39:48.646]  - include = ‘condition’
[17:39:48.646]  - exclude = ‘immediateCondition’
[17:39:48.646]  - resignal = TRUE
[17:39:48.646]  - Number of conditions: 93
[17:39:48.646]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.245] getGlobalsAndPackages() ...
[17:39:48.646]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:39:48.646]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.258] Searching for globals...
[17:39:48.646]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.259] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:39:48.647]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.259] Searching for globals ... DONE
[17:39:48.647]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.259] Resolving globals: FALSE
[17:39:48.647]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.260] The total size of the 1 globals is 160 bytes (160 bytes)
[17:39:48.647]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.260] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:39:48.647]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.260] - globals: [1] ‘data’
[17:39:48.647]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.260] 
[17:39:48.647]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.261] getGlobalsAndPackages() ... DONE
[17:39:48.648]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.261] run() for ‘Future’ ...
[17:39:48.648]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.261] - state: ‘created’
[17:39:48.648]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.261] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:48.648]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.265] [local output] makeClusterPSOCK() ...
[17:39:48.648]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.268] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:39:48.648]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.269] [local output] Base port: 11316
[17:39:48.648]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.269] [local output] Getting setup options for 2 cluster nodes ...
[17:39:48.648]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.269] [local output]  - Node 1 of 2 ...
[17:39:48.649]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.269] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:48.649]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.270] [local output] Rscript port: 11316

[17:39:48.649]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.270] [local output]  - Node 2 of 2 ...
[17:39:48.649]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.270] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:48.649]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.271] [local output] Rscript port: 11316

[17:39:48.649]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.271] [local output] Getting setup options for 2 cluster nodes ... done
[17:39:48.649]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.271] [local output]  - Parallel setup requested for some PSOCK nodes
[17:39:48.649]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.272] [local output] Setting up PSOCK nodes in parallel
[17:39:48.650]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.272] List of 36
[17:39:48.272]  $ worker          : chr "localhost"
[17:39:48.272]   ..- attr(*, "localhost")= logi TRUE
[17:39:48.272]  $ master          : chr "localhost"
[17:39:48.272]  $ port            : int 11316
[17:39:48.272]  $ connectTimeout  : num 120
[17:39:48.272]  $ timeout         : num 2592000
[17:39:48.272]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:39:48.272]  $ homogeneous     : logi TRUE
[17:39:48.272]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:39:48.272]  $ rscript_envs    : NULL
[17:39:48.272]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:48.272]  $ rscript_startup : NULL
[17:39:48.272]  $ rscript_sh      : chr "sh"
[17:39:48.272]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:48.272]  $ methods         : logi TRUE
[17:39:48.272]  $ socketOptions   : chr "no-delay"
[17:39:48.272]  $ useXDR          : logi FALSE
[17:39:48.272]  $ outfile         : chr "/dev/null"
[17:39:48.272]  $ renice          : int NA
[17:39:48.272]  $ rshcmd          : NULL
[17:39:48.272]  $ user            : chr(0) 
[17:39:48.272]  $ revtunnel       : logi FALSE
[17:39:48.272]  $ rshlogfile      : NULL
[17:39:48.272]  $ rshopts         : chr(0) 
[17:39:48.272]  $ rank            : int 1
[17:39:48.272]  $ manual          : logi FALSE
[17:39:48.272]  $ dryrun          : logi FALSE
[17:39:48.272]  $ quiet           : logi FALSE
[17:39:48.272]  $ setup_strategy  : chr "parallel"
[17:39:48.272]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:48.272]  $ pidfile         : chr "/tmp/RtmpAfZTdK/worker.rank=1.parallelly.parent=43591.aa4731d1bddb.pid"
[17:39:48.272]  $ rshcmd_label    : NULL
[17:39:48.272]  $ rsh_call        : NULL
[17:39:48.272]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:48.272]  $ localMachine    : logi TRUE
[17:39:48.272]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:39:48.272]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:39:48.272]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:39:48.272]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:39:48.272]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:39:48.272]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:39:48.272]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:39:48.272]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:39:48.272]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:39:48.272]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:39:48.272]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:39:48.272]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:39:48.272]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:39:48.272]  $ arguments       :List of 28
[17:39:48.272]   ..$ worker          : chr "localhost"
[17:39:48.272]   ..$ master          : NULL
[17:39:48.272]   ..$ port            : int 11316
[17:39:48.272]   ..$ connectTimeout  : num 120
[17:39:48.272]   ..$ timeout         : num 2592000
[17:39:48.272]   ..$ rscript         : NULL
[17:39:48.272]   ..$ homogeneous     : NULL
[17:39:48.272]   ..$ rscript_args    : NULL
[17:39:48.272]   ..$ rscript_envs    : NULL
[17:39:48.272]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:48.272]   ..$ rscript_startup : NULL
[17:39:48.272]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:39:48.272]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:48.272]   ..$ methods         : logi TRUE
[17:39:48.272]   ..$ socketOptions   : chr "no-delay"
[17:39:48.272]   ..$ useXDR          : logi FALSE
[17:39:48.272]   ..$ outfile         : chr "/dev/null"
[17:39:48.272]   ..$ renice          : int NA
[17:39:48.272]   ..$ rshcmd          : NULL
[17:39:48.272]   ..$ user            : NULL
[17:39:48.272]   ..$ revtunnel       : logi NA
[17:39:48.272]   ..$ rshlogfile      : NULL
[17:39:48.272]   ..$ rshopts         : NULL
[17:39:48.272]   ..$ rank            : int 1
[17:39:48.272]   ..$ manual          : logi FALSE
[17:39:48.272]   ..$ dryrun          : logi FALSE
[17:39:48.272]   ..$ quiet           : logi FALSE
[17:39:48.272]   ..$ setup_strategy  : chr "parallel"
[17:39:48.272]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:39:48.650]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.288] [local output] System call to launch all workers:
[17:39:48.650]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.288] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpAfZTdK/worker.rank=1.parallelly.parent=43591.aa4731d1bddb.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11316 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:39:48.650]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.288] [local output] Starting PSOCK main server
[17:39:48.650]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.290] [local output] Workers launched
[17:39:48.650]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.290] [local output] Waiting for workers to connect back
[17:39:48.650]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.290]  - [local output] 0 workers out of 2 ready
[17:39:48.650]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.533]  - [local output] 0 workers out of 2 ready
[17:39:48.651]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.533]  - [local output] 1 workers out of 2 ready
[17:39:48.651]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.537]  - [local output] 1 workers out of 2 ready
[17:39:48.651]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.538]  - [local output] 2 workers out of 2 ready
[17:39:48.651]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.538] [local output] Launching of workers completed
[17:39:48.651]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.538] [local output] Collecting session information from workers
[17:39:48.651]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.539] [local output]  - Worker #1 of 2
[17:39:48.651]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.539] [local output]  - Worker #2 of 2
[17:39:48.651]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.539] [local output] makeClusterPSOCK() ... done
[17:39:48.651]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.550] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:48.652]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.550] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:48.652]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.550]   - Field: ‘node’
[17:39:48.652]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.550]   - Field: ‘label’
[17:39:48.652]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.550]   - Field: ‘local’
[17:39:48.652]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.550]   - Field: ‘owner’
[17:39:48.652]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.550]   - Field: ‘envir’
[17:39:48.652]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.550]   - Field: ‘workers’
[17:39:48.653]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.551]   - Field: ‘packages’
[17:39:48.653]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.551]   - Field: ‘gc’
[17:39:48.653]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.551]   - Field: ‘conditions’
[17:39:48.653]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.551]   - Field: ‘persistent’
[17:39:48.653]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.551]   - Field: ‘expr’
[17:39:48.653]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.551]   - Field: ‘uuid’
[17:39:48.653]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.551]   - Field: ‘seed’
[17:39:48.653]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.551]   - Field: ‘version’
[17:39:48.653]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.551]   - Field: ‘result’
[17:39:48.654]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.552]   - Field: ‘asynchronous’
[17:39:48.654]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.552]   - Field: ‘calls’
[17:39:48.654]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.552]   - Field: ‘globals’
[17:39:48.654]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.552]   - Field: ‘stdout’
[17:39:48.654]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.552]   - Field: ‘earlySignal’
[17:39:48.654]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.552]   - Field: ‘lazy’
[17:39:48.654]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.552]   - Field: ‘state’
[17:39:48.654]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.552] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:48.655]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.552] - Launch lazy future ...
[17:39:48.655]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.553] Packages needed by the future expression (n = 0): <none>
[17:39:48.655]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.553] Packages needed by future strategies (n = 0): <none>
[17:39:48.655]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.553] {
[17:39:48.553]     {
[17:39:48.553]         {
[17:39:48.553]             ...future.startTime <- base::Sys.time()
[17:39:48.553]             {
[17:39:48.553]                 {
[17:39:48.553]                   {
[17:39:48.553]                     {
[17:39:48.553]                       base::local({
[17:39:48.553]                         has_future <- base::requireNamespace("future", 
[17:39:48.553]                           quietly = TRUE)
[17:39:48.553]                         if (has_future) {
[17:39:48.553]                           ns <- base::getNamespace("future")
[17:39:48.553]                           version <- ns[[".package"]][["version"]]
[17:39:48.553]                           if (is.null(version)) 
[17:39:48.553]                             version <- utils::packageVersion("future")
[17:39:48.553]                         }
[17:39:48.553]                         else {
[17:39:48.553]                           version <- NULL
[17:39:48.553]                         }
[17:39:48.553]                         if (!has_future || version < "1.8.0") {
[17:39:48.553]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:48.553]                             "", base::R.version$version.string), 
[17:39:48.553]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:48.553]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:48.553]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:48.553]                               "release", "version")], collapse = " "), 
[17:39:48.553]                             hostname = base::Sys.info()[["nodename"]])
[17:39:48.553]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:48.553]                             info)
[17:39:48.553]                           info <- base::paste(info, collapse = "; ")
[17:39:48.553]                           if (!has_future) {
[17:39:48.553]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:48.553]                               info)
[17:39:48.553]                           }
[17:39:48.553]                           else {
[17:39:48.553]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:48.553]                               info, version)
[17:39:48.553]                           }
[17:39:48.553]                           base::stop(msg)
[17:39:48.553]                         }
[17:39:48.553]                       })
[17:39:48.553]                     }
[17:39:48.553]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:48.553]                     base::options(mc.cores = 1L)
[17:39:48.553]                   }
[17:39:48.553]                   ...future.strategy.old <- future::plan("list")
[17:39:48.553]                   options(future.plan = NULL)
[17:39:48.553]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:48.553]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:48.553]                 }
[17:39:48.553]                 ...future.workdir <- getwd()
[17:39:48.553]             }
[17:39:48.553]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:48.553]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:48.553]         }
[17:39:48.553]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:39:48.553]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:48.553]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:39:48.553]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:48.553]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:48.553]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:48.553]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:48.553]             base::names(...future.oldOptions))
[17:39:48.553]     }
[17:39:48.553]     if (FALSE) {
[17:39:48.553]     }
[17:39:48.553]     else {
[17:39:48.553]         if (TRUE) {
[17:39:48.553]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:48.553]                 open = "w")
[17:39:48.553]         }
[17:39:48.553]         else {
[17:39:48.553]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:48.553]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:48.553]         }
[17:39:48.553]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:48.553]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:48.553]             base::sink(type = "output", split = FALSE)
[17:39:48.553]             base::close(...future.stdout)
[17:39:48.553]         }, add = TRUE)
[17:39:48.553]     }
[17:39:48.553]     ...future.frame <- base::sys.nframe()
[17:39:48.553]     ...future.conditions <- base::list()
[17:39:48.553]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:48.553]     if (FALSE) {
[17:39:48.553]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:48.553]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:48.553]     }
[17:39:48.553]     ...future.result <- base::tryCatch({
[17:39:48.553]         base::withCallingHandlers({
[17:39:48.553]             ...future.value <- base::withVisible(base::local({
[17:39:48.553]                 ...future.makeSendCondition <- base::local({
[17:39:48.553]                   sendCondition <- NULL
[17:39:48.553]                   function(frame = 1L) {
[17:39:48.553]                     if (is.function(sendCondition)) 
[17:39:48.553]                       return(sendCondition)
[17:39:48.553]                     ns <- getNamespace("parallel")
[17:39:48.553]                     if (exists("sendData", mode = "function", 
[17:39:48.553]                       envir = ns)) {
[17:39:48.553]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:48.553]                         envir = ns)
[17:39:48.553]                       envir <- sys.frame(frame)
[17:39:48.553]                       master <- NULL
[17:39:48.553]                       while (!identical(envir, .GlobalEnv) && 
[17:39:48.553]                         !identical(envir, emptyenv())) {
[17:39:48.553]                         if (exists("master", mode = "list", envir = envir, 
[17:39:48.553]                           inherits = FALSE)) {
[17:39:48.553]                           master <- get("master", mode = "list", 
[17:39:48.553]                             envir = envir, inherits = FALSE)
[17:39:48.553]                           if (inherits(master, c("SOCKnode", 
[17:39:48.553]                             "SOCK0node"))) {
[17:39:48.553]                             sendCondition <<- function(cond) {
[17:39:48.553]                               data <- list(type = "VALUE", value = cond, 
[17:39:48.553]                                 success = TRUE)
[17:39:48.553]                               parallel_sendData(master, data)
[17:39:48.553]                             }
[17:39:48.553]                             return(sendCondition)
[17:39:48.553]                           }
[17:39:48.553]                         }
[17:39:48.553]                         frame <- frame + 1L
[17:39:48.553]                         envir <- sys.frame(frame)
[17:39:48.553]                       }
[17:39:48.553]                     }
[17:39:48.553]                     sendCondition <<- function(cond) NULL
[17:39:48.553]                   }
[17:39:48.553]                 })
[17:39:48.553]                 withCallingHandlers({
[17:39:48.553]                   subset(data, x < 3)$y
[17:39:48.553]                 }, immediateCondition = function(cond) {
[17:39:48.553]                   sendCondition <- ...future.makeSendCondition()
[17:39:48.553]                   sendCondition(cond)
[17:39:48.553]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.553]                   {
[17:39:48.553]                     inherits <- base::inherits
[17:39:48.553]                     invokeRestart <- base::invokeRestart
[17:39:48.553]                     is.null <- base::is.null
[17:39:48.553]                     muffled <- FALSE
[17:39:48.553]                     if (inherits(cond, "message")) {
[17:39:48.553]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:48.553]                       if (muffled) 
[17:39:48.553]                         invokeRestart("muffleMessage")
[17:39:48.553]                     }
[17:39:48.553]                     else if (inherits(cond, "warning")) {
[17:39:48.553]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:48.553]                       if (muffled) 
[17:39:48.553]                         invokeRestart("muffleWarning")
[17:39:48.553]                     }
[17:39:48.553]                     else if (inherits(cond, "condition")) {
[17:39:48.553]                       if (!is.null(pattern)) {
[17:39:48.553]                         computeRestarts <- base::computeRestarts
[17:39:48.553]                         grepl <- base::grepl
[17:39:48.553]                         restarts <- computeRestarts(cond)
[17:39:48.553]                         for (restart in restarts) {
[17:39:48.553]                           name <- restart$name
[17:39:48.553]                           if (is.null(name)) 
[17:39:48.553]                             next
[17:39:48.553]                           if (!grepl(pattern, name)) 
[17:39:48.553]                             next
[17:39:48.553]                           invokeRestart(restart)
[17:39:48.553]                           muffled <- TRUE
[17:39:48.553]                           break
[17:39:48.553]                         }
[17:39:48.553]                       }
[17:39:48.553]                     }
[17:39:48.553]                     invisible(muffled)
[17:39:48.553]                   }
[17:39:48.553]                   muffleCondition(cond)
[17:39:48.553]                 })
[17:39:48.553]             }))
[17:39:48.553]             future::FutureResult(value = ...future.value$value, 
[17:39:48.553]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:48.553]                   ...future.rng), globalenv = if (FALSE) 
[17:39:48.553]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:48.553]                     ...future.globalenv.names))
[17:39:48.553]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:48.553]         }, condition = base::local({
[17:39:48.553]             c <- base::c
[17:39:48.553]             inherits <- base::inherits
[17:39:48.553]             invokeRestart <- base::invokeRestart
[17:39:48.553]             length <- base::length
[17:39:48.553]             list <- base::list
[17:39:48.553]             seq.int <- base::seq.int
[17:39:48.553]             signalCondition <- base::signalCondition
[17:39:48.553]             sys.calls <- base::sys.calls
[17:39:48.553]             `[[` <- base::`[[`
[17:39:48.553]             `+` <- base::`+`
[17:39:48.553]             `<<-` <- base::`<<-`
[17:39:48.553]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:48.553]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:48.553]                   3L)]
[17:39:48.553]             }
[17:39:48.553]             function(cond) {
[17:39:48.553]                 is_error <- inherits(cond, "error")
[17:39:48.553]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:48.553]                   NULL)
[17:39:48.553]                 if (is_error) {
[17:39:48.553]                   sessionInformation <- function() {
[17:39:48.553]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:48.553]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:48.553]                       search = base::search(), system = base::Sys.info())
[17:39:48.553]                   }
[17:39:48.553]                   ...future.conditions[[length(...future.conditions) + 
[17:39:48.553]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:48.553]                     cond$call), session = sessionInformation(), 
[17:39:48.553]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:48.553]                   signalCondition(cond)
[17:39:48.553]                 }
[17:39:48.553]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:48.553]                 "immediateCondition"))) {
[17:39:48.553]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:48.553]                   ...future.conditions[[length(...future.conditions) + 
[17:39:48.553]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:48.553]                   if (TRUE && !signal) {
[17:39:48.553]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.553]                     {
[17:39:48.553]                       inherits <- base::inherits
[17:39:48.553]                       invokeRestart <- base::invokeRestart
[17:39:48.553]                       is.null <- base::is.null
[17:39:48.553]                       muffled <- FALSE
[17:39:48.553]                       if (inherits(cond, "message")) {
[17:39:48.553]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:48.553]                         if (muffled) 
[17:39:48.553]                           invokeRestart("muffleMessage")
[17:39:48.553]                       }
[17:39:48.553]                       else if (inherits(cond, "warning")) {
[17:39:48.553]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:48.553]                         if (muffled) 
[17:39:48.553]                           invokeRestart("muffleWarning")
[17:39:48.553]                       }
[17:39:48.553]                       else if (inherits(cond, "condition")) {
[17:39:48.553]                         if (!is.null(pattern)) {
[17:39:48.553]                           computeRestarts <- base::computeRestarts
[17:39:48.553]                           grepl <- base::grepl
[17:39:48.553]                           restarts <- computeRestarts(cond)
[17:39:48.553]                           for (restart in restarts) {
[17:39:48.553]                             name <- restart$name
[17:39:48.553]                             if (is.null(name)) 
[17:39:48.553]                               next
[17:39:48.553]                             if (!grepl(pattern, name)) 
[17:39:48.553]                               next
[17:39:48.553]                             invokeRestart(restart)
[17:39:48.553]                             muffled <- TRUE
[17:39:48.553]                             break
[17:39:48.553]                           }
[17:39:48.553]                         }
[17:39:48.553]                       }
[17:39:48.553]                       invisible(muffled)
[17:39:48.553]                     }
[17:39:48.553]                     muffleCondition(cond, pattern = "^muffle")
[17:39:48.553]                   }
[17:39:48.553]                 }
[17:39:48.553]                 else {
[17:39:48.553]                   if (TRUE) {
[17:39:48.553]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:48.553]                     {
[17:39:48.553]                       inherits <- base::inherits
[17:39:48.553]                       invokeRestart <- base::invokeRestart
[17:39:48.553]                       is.null <- base::is.null
[17:39:48.553]                       muffled <- FALSE
[17:39:48.553]                       if (inherits(cond, "message")) {
[17:39:48.553]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:48.553]                         if (muffled) 
[17:39:48.553]                           invokeRestart("muffleMessage")
[17:39:48.553]                       }
[17:39:48.553]                       else if (inherits(cond, "warning")) {
[17:39:48.553]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:48.553]                         if (muffled) 
[17:39:48.553]                           invokeRestart("muffleWarning")
[17:39:48.553]                       }
[17:39:48.553]                       else if (inherits(cond, "condition")) {
[17:39:48.553]                         if (!is.null(pattern)) {
[17:39:48.553]                           computeRestarts <- base::computeRestarts
[17:39:48.553]                           grepl <- base::grepl
[17:39:48.553]                           restarts <- computeRestarts(cond)
[17:39:48.553]                           for (restart in restarts) {
[17:39:48.553]                             name <- restart$name
[17:39:48.553]                             if (is.null(name)) 
[17:39:48.553]                               next
[17:39:48.553]                             if (!grepl(pattern, name)) 
[17:39:48.553]                               next
[17:39:48.553]                             invokeRestart(restart)
[17:39:48.553]                             muffled <- TRUE
[17:39:48.553]                             break
[17:39:48.553]                           }
[17:39:48.553]                         }
[17:39:48.553]                       }
[17:39:48.553]                       invisible(muffled)
[17:39:48.553]                     }
[17:39:48.553]                     muffleCondition(cond, pattern = "^muffle")
[17:39:48.553]                   }
[17:39:48.553]                 }
[17:39:48.553]             }
[17:39:48.553]         }))
[17:39:48.553]     }, error = function(ex) {
[17:39:48.553]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:48.553]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:48.553]                 ...future.rng), started = ...future.startTime, 
[17:39:48.553]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:48.553]             version = "1.8"), class = "FutureResult")
[17:39:48.553]     }, finally = {
[17:39:48.553]         if (!identical(...future.workdir, getwd())) 
[17:39:48.553]             setwd(...future.workdir)
[17:39:48.553]         {
[17:39:48.553]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:48.553]                 ...future.oldOptions$nwarnings <- NULL
[17:39:48.553]             }
[17:39:48.553]             base::options(...future.oldOptions)
[17:39:48.553]             if (.Platform$OS.type == "windows") {
[17:39:48.553]                 old_names <- names(...future.oldEnvVars)
[17:39:48.553]                 envs <- base::Sys.getenv()
[17:39:48.553]                 names <- names(envs)
[17:39:48.553]                 common <- intersect(names, old_names)
[17:39:48.553]                 added <- setdiff(names, old_names)
[17:39:48.553]                 removed <- setdiff(old_names, names)
[17:39:48.553]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:48.553]                   envs[common]]
[17:39:48.553]                 NAMES <- toupper(changed)
[17:39:48.553]                 args <- list()
[17:39:48.553]                 for (kk in seq_along(NAMES)) {
[17:39:48.553]                   name <- changed[[kk]]
[17:39:48.553]                   NAME <- NAMES[[kk]]
[17:39:48.553]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.553]                     next
[17:39:48.553]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:48.553]                 }
[17:39:48.553]                 NAMES <- toupper(added)
[17:39:48.553]                 for (kk in seq_along(NAMES)) {
[17:39:48.553]                   name <- added[[kk]]
[17:39:48.553]                   NAME <- NAMES[[kk]]
[17:39:48.553]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.553]                     next
[17:39:48.553]                   args[[name]] <- ""
[17:39:48.553]                 }
[17:39:48.553]                 NAMES <- toupper(removed)
[17:39:48.553]                 for (kk in seq_along(NAMES)) {
[17:39:48.553]                   name <- removed[[kk]]
[17:39:48.553]                   NAME <- NAMES[[kk]]
[17:39:48.553]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:48.553]                     next
[17:39:48.553]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:48.553]                 }
[17:39:48.553]                 if (length(args) > 0) 
[17:39:48.553]                   base::do.call(base::Sys.setenv, args = args)
[17:39:48.553]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:48.553]             }
[17:39:48.553]             else {
[17:39:48.553]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:48.553]             }
[17:39:48.553]             {
[17:39:48.553]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:48.553]                   0L) {
[17:39:48.553]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:48.553]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:48.553]                   base::options(opts)
[17:39:48.553]                 }
[17:39:48.553]                 {
[17:39:48.553]                   {
[17:39:48.553]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:48.553]                     NULL
[17:39:48.553]                   }
[17:39:48.553]                   options(future.plan = NULL)
[17:39:48.553]                   if (is.na(NA_character_)) 
[17:39:48.553]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:48.553]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:48.553]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:48.553]                     .init = FALSE)
[17:39:48.553]                 }
[17:39:48.553]             }
[17:39:48.553]         }
[17:39:48.553]     })
[17:39:48.553]     if (TRUE) {
[17:39:48.553]         base::sink(type = "output", split = FALSE)
[17:39:48.553]         if (TRUE) {
[17:39:48.553]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:48.553]         }
[17:39:48.553]         else {
[17:39:48.553]             ...future.result["stdout"] <- base::list(NULL)
[17:39:48.553]         }
[17:39:48.553]         base::close(...future.stdout)
[17:39:48.553]         ...future.stdout <- NULL
[17:39:48.553]     }
[17:39:48.553]     ...future.result$conditions <- ...future.conditions
[17:39:48.553]     ...future.result$finished <- base::Sys.time()
[17:39:48.553]     ...future.result
[17:39:48.553] }
[17:39:48.655]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.605] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[17:39:48.655]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.605] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[17:39:48.655]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.605] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[17:39:48.655]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.606] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[17:39:48.656]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.606] MultisessionFuture started
[17:39:48.656]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.606] - Launch lazy future ... done
[17:39:48.656]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.606] run() for ‘MultisessionFuture’ ... done
[17:39:48.656]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.607] result() for ClusterFuture ...
[17:39:48.656]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.607] receiveMessageFromWorker() for ClusterFuture ...
[17:39:48.656]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.607] - Validating connection of MultisessionFuture
[17:39:48.656]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.639] - received message: FutureResult
[17:39:48.657]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.640] - Received FutureResult
[17:39:48.657]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.642] - Erased future from FutureRegistry
[17:39:48.657]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.642] result() for ClusterFuture ...
[17:39:48.657]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.642] - result already collected: FutureResult
[17:39:48.657]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.642] result() for ClusterFuture ... done
[17:39:48.657]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.642] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:48.657]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.642] result() for ClusterFuture ... done
[17:39:48.657]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.642] result() for ClusterFuture ...
[17:39:48.657]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.643] - result already collected: FutureResult
[17:39:48.658]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[17:39:48.643] result() for ClusterFuture ... done
[17:39:48.658] signalConditions() ... done
- Strategy: multisession ... DONE
> 
> 
> message("*** Globals w/ non-standard evaluation (NSE) ... DONE")
*** Globals w/ non-standard evaluation (NSE) ... DONE
> 
> source("incl/end.R")
[17:39:48.658] plan(): Setting new future strategy stack:
[17:39:48.659] List of future strategies:
[17:39:48.659] 1. FutureStrategy:
[17:39:48.659]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:48.659]    - tweaked: FALSE
[17:39:48.659]    - call: future::plan(oplan)
[17:39:48.659] plan(): nbrOfWorkers() = 1
> 
