
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:31:24.662] plan(): Setting new future strategy stack:
[09:31:24.663] List of future strategies:
[09:31:24.663] 1. sequential:
[09:31:24.663]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.663]    - tweaked: FALSE
[09:31:24.663]    - call: future::plan("sequential")
[09:31:24.673] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** Globals w/ non-standard evaluation (NSE) ...")
*** Globals w/ non-standard evaluation (NSE) ...
> 
> data <- data.frame(x = 1:5, y = 1:5)
> v0 <- subset(data, x < 3)$y
> 
> for (strategy in supportedStrategies()) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("- Strategy: %s ...", strategy))
+   
+   plan(strategy)
+ 
+   ## Assert option is passed on to future
+   options(future.globals.onMissing = "error")
+   opt1 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt1, "error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   opt2 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt2, "ignore"))
+ 
+   options(future.globals.onMissing = "error")
+   res <- try({ v1 %<-% subset(data, x < 3)$y }, silent = TRUE)
+   stopifnot(inherits(res, "try-error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   v2 %<-% subset(data, x < 3)$y
+   stopifnot(identical(v2, v0))
+ 
+   ## Nested futures (requires option is passed on to future)
+   plan(list(sequential, strategy))
+   options(future.globals.onMissing = "ignore")
+   v3 %<-% {
+     a %<-% subset(data, x < 3)$y
+     a
+   } %lazy% TRUE
+   stopifnot(identical(v3, v0))
+ 
+   message(sprintf("- Strategy: %s ... DONE", strategy))
+ }
- Strategy: sequential ...
[09:31:24.703] plan(): Setting new future strategy stack:
[09:31:24.704] List of future strategies:
[09:31:24.704] 1. sequential:
[09:31:24.704]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.704]    - tweaked: FALSE
[09:31:24.704]    - call: plan(strategy)
[09:31:24.715] plan(): nbrOfWorkers() = 1
[09:31:24.717] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[09:31:24.717] Searching for globals...
[09:31:24.721] - globals found: [1] ‘getOption’
[09:31:24.721] Searching for globals ... DONE
[09:31:24.721] Resolving globals: FALSE
[09:31:24.722] 
[09:31:24.722] 
[09:31:24.722] getGlobalsAndPackages() ... DONE
[09:31:24.722] run() for ‘Future’ ...
[09:31:24.722] - state: ‘created’
[09:31:24.723] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:24.723] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:24.723] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:24.723]   - Field: ‘label’
[09:31:24.723]   - Field: ‘local’
[09:31:24.723]   - Field: ‘owner’
[09:31:24.723]   - Field: ‘envir’
[09:31:24.724]   - Field: ‘packages’
[09:31:24.724]   - Field: ‘gc’
[09:31:24.724]   - Field: ‘conditions’
[09:31:24.724]   - Field: ‘expr’
[09:31:24.724]   - Field: ‘uuid’
[09:31:24.724]   - Field: ‘seed’
[09:31:24.724]   - Field: ‘version’
[09:31:24.724]   - Field: ‘result’
[09:31:24.724]   - Field: ‘asynchronous’
[09:31:24.724]   - Field: ‘calls’
[09:31:24.724]   - Field: ‘globals’
[09:31:24.725]   - Field: ‘stdout’
[09:31:24.725]   - Field: ‘earlySignal’
[09:31:24.725]   - Field: ‘lazy’
[09:31:24.725]   - Field: ‘state’
[09:31:24.725] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:24.725] - Launch lazy future ...
[09:31:24.726] Packages needed by the future expression (n = 0): <none>
[09:31:24.726] Packages needed by future strategies (n = 0): <none>
[09:31:24.726] {
[09:31:24.726]     {
[09:31:24.726]         {
[09:31:24.726]             ...future.startTime <- base::Sys.time()
[09:31:24.726]             {
[09:31:24.726]                 {
[09:31:24.726]                   {
[09:31:24.726]                     base::local({
[09:31:24.726]                       has_future <- base::requireNamespace("future", 
[09:31:24.726]                         quietly = TRUE)
[09:31:24.726]                       if (has_future) {
[09:31:24.726]                         ns <- base::getNamespace("future")
[09:31:24.726]                         version <- ns[[".package"]][["version"]]
[09:31:24.726]                         if (is.null(version)) 
[09:31:24.726]                           version <- utils::packageVersion("future")
[09:31:24.726]                       }
[09:31:24.726]                       else {
[09:31:24.726]                         version <- NULL
[09:31:24.726]                       }
[09:31:24.726]                       if (!has_future || version < "1.8.0") {
[09:31:24.726]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:24.726]                           "", base::R.version$version.string), 
[09:31:24.726]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:24.726]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:24.726]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:24.726]                             "release", "version")], collapse = " "), 
[09:31:24.726]                           hostname = base::Sys.info()[["nodename"]])
[09:31:24.726]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:24.726]                           info)
[09:31:24.726]                         info <- base::paste(info, collapse = "; ")
[09:31:24.726]                         if (!has_future) {
[09:31:24.726]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:24.726]                             info)
[09:31:24.726]                         }
[09:31:24.726]                         else {
[09:31:24.726]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:24.726]                             info, version)
[09:31:24.726]                         }
[09:31:24.726]                         base::stop(msg)
[09:31:24.726]                       }
[09:31:24.726]                     })
[09:31:24.726]                   }
[09:31:24.726]                   ...future.strategy.old <- future::plan("list")
[09:31:24.726]                   options(future.plan = NULL)
[09:31:24.726]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.726]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:24.726]                 }
[09:31:24.726]                 ...future.workdir <- getwd()
[09:31:24.726]             }
[09:31:24.726]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:24.726]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:24.726]         }
[09:31:24.726]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[09:31:24.726]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:24.726]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[09:31:24.726]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:24.726]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:24.726]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:24.726]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:24.726]             base::names(...future.oldOptions))
[09:31:24.726]     }
[09:31:24.726]     if (FALSE) {
[09:31:24.726]     }
[09:31:24.726]     else {
[09:31:24.726]         if (TRUE) {
[09:31:24.726]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:24.726]                 open = "w")
[09:31:24.726]         }
[09:31:24.726]         else {
[09:31:24.726]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:24.726]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:24.726]         }
[09:31:24.726]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:24.726]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:24.726]             base::sink(type = "output", split = FALSE)
[09:31:24.726]             base::close(...future.stdout)
[09:31:24.726]         }, add = TRUE)
[09:31:24.726]     }
[09:31:24.726]     ...future.frame <- base::sys.nframe()
[09:31:24.726]     ...future.conditions <- base::list()
[09:31:24.726]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:24.726]     if (FALSE) {
[09:31:24.726]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:24.726]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:24.726]     }
[09:31:24.726]     ...future.result <- base::tryCatch({
[09:31:24.726]         base::withCallingHandlers({
[09:31:24.726]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[09:31:24.726]             future::FutureResult(value = ...future.value$value, 
[09:31:24.726]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.726]                   ...future.rng), globalenv = if (FALSE) 
[09:31:24.726]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:24.726]                     ...future.globalenv.names))
[09:31:24.726]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:24.726]         }, condition = base::local({
[09:31:24.726]             c <- base::c
[09:31:24.726]             inherits <- base::inherits
[09:31:24.726]             invokeRestart <- base::invokeRestart
[09:31:24.726]             length <- base::length
[09:31:24.726]             list <- base::list
[09:31:24.726]             seq.int <- base::seq.int
[09:31:24.726]             signalCondition <- base::signalCondition
[09:31:24.726]             sys.calls <- base::sys.calls
[09:31:24.726]             `[[` <- base::`[[`
[09:31:24.726]             `+` <- base::`+`
[09:31:24.726]             `<<-` <- base::`<<-`
[09:31:24.726]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:24.726]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:24.726]                   3L)]
[09:31:24.726]             }
[09:31:24.726]             function(cond) {
[09:31:24.726]                 is_error <- inherits(cond, "error")
[09:31:24.726]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:24.726]                   NULL)
[09:31:24.726]                 if (is_error) {
[09:31:24.726]                   sessionInformation <- function() {
[09:31:24.726]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:24.726]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:24.726]                       search = base::search(), system = base::Sys.info())
[09:31:24.726]                   }
[09:31:24.726]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.726]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:24.726]                     cond$call), session = sessionInformation(), 
[09:31:24.726]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:24.726]                   signalCondition(cond)
[09:31:24.726]                 }
[09:31:24.726]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:24.726]                 "immediateCondition"))) {
[09:31:24.726]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:24.726]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.726]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:24.726]                   if (TRUE && !signal) {
[09:31:24.726]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.726]                     {
[09:31:24.726]                       inherits <- base::inherits
[09:31:24.726]                       invokeRestart <- base::invokeRestart
[09:31:24.726]                       is.null <- base::is.null
[09:31:24.726]                       muffled <- FALSE
[09:31:24.726]                       if (inherits(cond, "message")) {
[09:31:24.726]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.726]                         if (muffled) 
[09:31:24.726]                           invokeRestart("muffleMessage")
[09:31:24.726]                       }
[09:31:24.726]                       else if (inherits(cond, "warning")) {
[09:31:24.726]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.726]                         if (muffled) 
[09:31:24.726]                           invokeRestart("muffleWarning")
[09:31:24.726]                       }
[09:31:24.726]                       else if (inherits(cond, "condition")) {
[09:31:24.726]                         if (!is.null(pattern)) {
[09:31:24.726]                           computeRestarts <- base::computeRestarts
[09:31:24.726]                           grepl <- base::grepl
[09:31:24.726]                           restarts <- computeRestarts(cond)
[09:31:24.726]                           for (restart in restarts) {
[09:31:24.726]                             name <- restart$name
[09:31:24.726]                             if (is.null(name)) 
[09:31:24.726]                               next
[09:31:24.726]                             if (!grepl(pattern, name)) 
[09:31:24.726]                               next
[09:31:24.726]                             invokeRestart(restart)
[09:31:24.726]                             muffled <- TRUE
[09:31:24.726]                             break
[09:31:24.726]                           }
[09:31:24.726]                         }
[09:31:24.726]                       }
[09:31:24.726]                       invisible(muffled)
[09:31:24.726]                     }
[09:31:24.726]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.726]                   }
[09:31:24.726]                 }
[09:31:24.726]                 else {
[09:31:24.726]                   if (TRUE) {
[09:31:24.726]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.726]                     {
[09:31:24.726]                       inherits <- base::inherits
[09:31:24.726]                       invokeRestart <- base::invokeRestart
[09:31:24.726]                       is.null <- base::is.null
[09:31:24.726]                       muffled <- FALSE
[09:31:24.726]                       if (inherits(cond, "message")) {
[09:31:24.726]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.726]                         if (muffled) 
[09:31:24.726]                           invokeRestart("muffleMessage")
[09:31:24.726]                       }
[09:31:24.726]                       else if (inherits(cond, "warning")) {
[09:31:24.726]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.726]                         if (muffled) 
[09:31:24.726]                           invokeRestart("muffleWarning")
[09:31:24.726]                       }
[09:31:24.726]                       else if (inherits(cond, "condition")) {
[09:31:24.726]                         if (!is.null(pattern)) {
[09:31:24.726]                           computeRestarts <- base::computeRestarts
[09:31:24.726]                           grepl <- base::grepl
[09:31:24.726]                           restarts <- computeRestarts(cond)
[09:31:24.726]                           for (restart in restarts) {
[09:31:24.726]                             name <- restart$name
[09:31:24.726]                             if (is.null(name)) 
[09:31:24.726]                               next
[09:31:24.726]                             if (!grepl(pattern, name)) 
[09:31:24.726]                               next
[09:31:24.726]                             invokeRestart(restart)
[09:31:24.726]                             muffled <- TRUE
[09:31:24.726]                             break
[09:31:24.726]                           }
[09:31:24.726]                         }
[09:31:24.726]                       }
[09:31:24.726]                       invisible(muffled)
[09:31:24.726]                     }
[09:31:24.726]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.726]                   }
[09:31:24.726]                 }
[09:31:24.726]             }
[09:31:24.726]         }))
[09:31:24.726]     }, error = function(ex) {
[09:31:24.726]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:24.726]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.726]                 ...future.rng), started = ...future.startTime, 
[09:31:24.726]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:24.726]             version = "1.8"), class = "FutureResult")
[09:31:24.726]     }, finally = {
[09:31:24.726]         if (!identical(...future.workdir, getwd())) 
[09:31:24.726]             setwd(...future.workdir)
[09:31:24.726]         {
[09:31:24.726]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:24.726]                 ...future.oldOptions$nwarnings <- NULL
[09:31:24.726]             }
[09:31:24.726]             base::options(...future.oldOptions)
[09:31:24.726]             if (.Platform$OS.type == "windows") {
[09:31:24.726]                 old_names <- names(...future.oldEnvVars)
[09:31:24.726]                 envs <- base::Sys.getenv()
[09:31:24.726]                 names <- names(envs)
[09:31:24.726]                 common <- intersect(names, old_names)
[09:31:24.726]                 added <- setdiff(names, old_names)
[09:31:24.726]                 removed <- setdiff(old_names, names)
[09:31:24.726]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:24.726]                   envs[common]]
[09:31:24.726]                 NAMES <- toupper(changed)
[09:31:24.726]                 args <- list()
[09:31:24.726]                 for (kk in seq_along(NAMES)) {
[09:31:24.726]                   name <- changed[[kk]]
[09:31:24.726]                   NAME <- NAMES[[kk]]
[09:31:24.726]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.726]                     next
[09:31:24.726]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.726]                 }
[09:31:24.726]                 NAMES <- toupper(added)
[09:31:24.726]                 for (kk in seq_along(NAMES)) {
[09:31:24.726]                   name <- added[[kk]]
[09:31:24.726]                   NAME <- NAMES[[kk]]
[09:31:24.726]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.726]                     next
[09:31:24.726]                   args[[name]] <- ""
[09:31:24.726]                 }
[09:31:24.726]                 NAMES <- toupper(removed)
[09:31:24.726]                 for (kk in seq_along(NAMES)) {
[09:31:24.726]                   name <- removed[[kk]]
[09:31:24.726]                   NAME <- NAMES[[kk]]
[09:31:24.726]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.726]                     next
[09:31:24.726]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.726]                 }
[09:31:24.726]                 if (length(args) > 0) 
[09:31:24.726]                   base::do.call(base::Sys.setenv, args = args)
[09:31:24.726]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:24.726]             }
[09:31:24.726]             else {
[09:31:24.726]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:24.726]             }
[09:31:24.726]             {
[09:31:24.726]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:24.726]                   0L) {
[09:31:24.726]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:24.726]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:24.726]                   base::options(opts)
[09:31:24.726]                 }
[09:31:24.726]                 {
[09:31:24.726]                   {
[09:31:24.726]                     NULL
[09:31:24.726]                     RNGkind("Mersenne-Twister")
[09:31:24.726]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:24.726]                       inherits = FALSE)
[09:31:24.726]                   }
[09:31:24.726]                   options(future.plan = NULL)
[09:31:24.726]                   if (is.na(NA_character_)) 
[09:31:24.726]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.726]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:24.726]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:24.726]                     .init = FALSE)
[09:31:24.726]                 }
[09:31:24.726]             }
[09:31:24.726]         }
[09:31:24.726]     })
[09:31:24.726]     if (TRUE) {
[09:31:24.726]         base::sink(type = "output", split = FALSE)
[09:31:24.726]         if (TRUE) {
[09:31:24.726]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:24.726]         }
[09:31:24.726]         else {
[09:31:24.726]             ...future.result["stdout"] <- base::list(NULL)
[09:31:24.726]         }
[09:31:24.726]         base::close(...future.stdout)
[09:31:24.726]         ...future.stdout <- NULL
[09:31:24.726]     }
[09:31:24.726]     ...future.result$conditions <- ...future.conditions
[09:31:24.726]     ...future.result$finished <- base::Sys.time()
[09:31:24.726]     ...future.result
[09:31:24.726] }
[09:31:24.728] plan(): Setting new future strategy stack:
[09:31:24.728] List of future strategies:
[09:31:24.728] 1. sequential:
[09:31:24.728]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.728]    - tweaked: FALSE
[09:31:24.728]    - call: NULL
[09:31:24.729] plan(): nbrOfWorkers() = 1
[09:31:24.730] plan(): Setting new future strategy stack:
[09:31:24.730] List of future strategies:
[09:31:24.730] 1. sequential:
[09:31:24.730]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.730]    - tweaked: FALSE
[09:31:24.730]    - call: plan(strategy)
[09:31:24.730] plan(): nbrOfWorkers() = 1
[09:31:24.731] SequentialFuture started (and completed)
[09:31:24.731] - Launch lazy future ... done
[09:31:24.731] run() for ‘SequentialFuture’ ... done
[09:31:24.732] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:24.732] Searching for globals...
[09:31:24.732] - globals found: [1] ‘getOption’
[09:31:24.733] Searching for globals ... DONE
[09:31:24.733] Resolving globals: FALSE
[09:31:24.733] 
[09:31:24.733] 
[09:31:24.733] getGlobalsAndPackages() ... DONE
[09:31:24.733] run() for ‘Future’ ...
[09:31:24.733] - state: ‘created’
[09:31:24.733] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:24.734] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:24.734] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:24.734]   - Field: ‘label’
[09:31:24.734]   - Field: ‘local’
[09:31:24.734]   - Field: ‘owner’
[09:31:24.734]   - Field: ‘envir’
[09:31:24.734]   - Field: ‘packages’
[09:31:24.734]   - Field: ‘gc’
[09:31:24.734]   - Field: ‘conditions’
[09:31:24.735]   - Field: ‘expr’
[09:31:24.735]   - Field: ‘uuid’
[09:31:24.735]   - Field: ‘seed’
[09:31:24.735]   - Field: ‘version’
[09:31:24.735]   - Field: ‘result’
[09:31:24.735]   - Field: ‘asynchronous’
[09:31:24.735]   - Field: ‘calls’
[09:31:24.735]   - Field: ‘globals’
[09:31:24.735]   - Field: ‘stdout’
[09:31:24.735]   - Field: ‘earlySignal’
[09:31:24.735]   - Field: ‘lazy’
[09:31:24.735]   - Field: ‘state’
[09:31:24.736] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:24.736] - Launch lazy future ...
[09:31:24.736] Packages needed by the future expression (n = 0): <none>
[09:31:24.736] Packages needed by future strategies (n = 0): <none>
[09:31:24.736] {
[09:31:24.736]     {
[09:31:24.736]         {
[09:31:24.736]             ...future.startTime <- base::Sys.time()
[09:31:24.736]             {
[09:31:24.736]                 {
[09:31:24.736]                   {
[09:31:24.736]                     base::local({
[09:31:24.736]                       has_future <- base::requireNamespace("future", 
[09:31:24.736]                         quietly = TRUE)
[09:31:24.736]                       if (has_future) {
[09:31:24.736]                         ns <- base::getNamespace("future")
[09:31:24.736]                         version <- ns[[".package"]][["version"]]
[09:31:24.736]                         if (is.null(version)) 
[09:31:24.736]                           version <- utils::packageVersion("future")
[09:31:24.736]                       }
[09:31:24.736]                       else {
[09:31:24.736]                         version <- NULL
[09:31:24.736]                       }
[09:31:24.736]                       if (!has_future || version < "1.8.0") {
[09:31:24.736]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:24.736]                           "", base::R.version$version.string), 
[09:31:24.736]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:24.736]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:24.736]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:24.736]                             "release", "version")], collapse = " "), 
[09:31:24.736]                           hostname = base::Sys.info()[["nodename"]])
[09:31:24.736]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:24.736]                           info)
[09:31:24.736]                         info <- base::paste(info, collapse = "; ")
[09:31:24.736]                         if (!has_future) {
[09:31:24.736]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:24.736]                             info)
[09:31:24.736]                         }
[09:31:24.736]                         else {
[09:31:24.736]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:24.736]                             info, version)
[09:31:24.736]                         }
[09:31:24.736]                         base::stop(msg)
[09:31:24.736]                       }
[09:31:24.736]                     })
[09:31:24.736]                   }
[09:31:24.736]                   ...future.strategy.old <- future::plan("list")
[09:31:24.736]                   options(future.plan = NULL)
[09:31:24.736]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.736]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:24.736]                 }
[09:31:24.736]                 ...future.workdir <- getwd()
[09:31:24.736]             }
[09:31:24.736]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:24.736]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:24.736]         }
[09:31:24.736]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:24.736]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:24.736]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:24.736]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:24.736]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:24.736]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:24.736]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:24.736]             base::names(...future.oldOptions))
[09:31:24.736]     }
[09:31:24.736]     if (FALSE) {
[09:31:24.736]     }
[09:31:24.736]     else {
[09:31:24.736]         if (TRUE) {
[09:31:24.736]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:24.736]                 open = "w")
[09:31:24.736]         }
[09:31:24.736]         else {
[09:31:24.736]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:24.736]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:24.736]         }
[09:31:24.736]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:24.736]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:24.736]             base::sink(type = "output", split = FALSE)
[09:31:24.736]             base::close(...future.stdout)
[09:31:24.736]         }, add = TRUE)
[09:31:24.736]     }
[09:31:24.736]     ...future.frame <- base::sys.nframe()
[09:31:24.736]     ...future.conditions <- base::list()
[09:31:24.736]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:24.736]     if (FALSE) {
[09:31:24.736]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:24.736]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:24.736]     }
[09:31:24.736]     ...future.result <- base::tryCatch({
[09:31:24.736]         base::withCallingHandlers({
[09:31:24.736]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[09:31:24.736]             future::FutureResult(value = ...future.value$value, 
[09:31:24.736]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.736]                   ...future.rng), globalenv = if (FALSE) 
[09:31:24.736]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:24.736]                     ...future.globalenv.names))
[09:31:24.736]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:24.736]         }, condition = base::local({
[09:31:24.736]             c <- base::c
[09:31:24.736]             inherits <- base::inherits
[09:31:24.736]             invokeRestart <- base::invokeRestart
[09:31:24.736]             length <- base::length
[09:31:24.736]             list <- base::list
[09:31:24.736]             seq.int <- base::seq.int
[09:31:24.736]             signalCondition <- base::signalCondition
[09:31:24.736]             sys.calls <- base::sys.calls
[09:31:24.736]             `[[` <- base::`[[`
[09:31:24.736]             `+` <- base::`+`
[09:31:24.736]             `<<-` <- base::`<<-`
[09:31:24.736]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:24.736]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:24.736]                   3L)]
[09:31:24.736]             }
[09:31:24.736]             function(cond) {
[09:31:24.736]                 is_error <- inherits(cond, "error")
[09:31:24.736]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:24.736]                   NULL)
[09:31:24.736]                 if (is_error) {
[09:31:24.736]                   sessionInformation <- function() {
[09:31:24.736]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:24.736]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:24.736]                       search = base::search(), system = base::Sys.info())
[09:31:24.736]                   }
[09:31:24.736]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.736]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:24.736]                     cond$call), session = sessionInformation(), 
[09:31:24.736]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:24.736]                   signalCondition(cond)
[09:31:24.736]                 }
[09:31:24.736]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:24.736]                 "immediateCondition"))) {
[09:31:24.736]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:24.736]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.736]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:24.736]                   if (TRUE && !signal) {
[09:31:24.736]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.736]                     {
[09:31:24.736]                       inherits <- base::inherits
[09:31:24.736]                       invokeRestart <- base::invokeRestart
[09:31:24.736]                       is.null <- base::is.null
[09:31:24.736]                       muffled <- FALSE
[09:31:24.736]                       if (inherits(cond, "message")) {
[09:31:24.736]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.736]                         if (muffled) 
[09:31:24.736]                           invokeRestart("muffleMessage")
[09:31:24.736]                       }
[09:31:24.736]                       else if (inherits(cond, "warning")) {
[09:31:24.736]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.736]                         if (muffled) 
[09:31:24.736]                           invokeRestart("muffleWarning")
[09:31:24.736]                       }
[09:31:24.736]                       else if (inherits(cond, "condition")) {
[09:31:24.736]                         if (!is.null(pattern)) {
[09:31:24.736]                           computeRestarts <- base::computeRestarts
[09:31:24.736]                           grepl <- base::grepl
[09:31:24.736]                           restarts <- computeRestarts(cond)
[09:31:24.736]                           for (restart in restarts) {
[09:31:24.736]                             name <- restart$name
[09:31:24.736]                             if (is.null(name)) 
[09:31:24.736]                               next
[09:31:24.736]                             if (!grepl(pattern, name)) 
[09:31:24.736]                               next
[09:31:24.736]                             invokeRestart(restart)
[09:31:24.736]                             muffled <- TRUE
[09:31:24.736]                             break
[09:31:24.736]                           }
[09:31:24.736]                         }
[09:31:24.736]                       }
[09:31:24.736]                       invisible(muffled)
[09:31:24.736]                     }
[09:31:24.736]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.736]                   }
[09:31:24.736]                 }
[09:31:24.736]                 else {
[09:31:24.736]                   if (TRUE) {
[09:31:24.736]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.736]                     {
[09:31:24.736]                       inherits <- base::inherits
[09:31:24.736]                       invokeRestart <- base::invokeRestart
[09:31:24.736]                       is.null <- base::is.null
[09:31:24.736]                       muffled <- FALSE
[09:31:24.736]                       if (inherits(cond, "message")) {
[09:31:24.736]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.736]                         if (muffled) 
[09:31:24.736]                           invokeRestart("muffleMessage")
[09:31:24.736]                       }
[09:31:24.736]                       else if (inherits(cond, "warning")) {
[09:31:24.736]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.736]                         if (muffled) 
[09:31:24.736]                           invokeRestart("muffleWarning")
[09:31:24.736]                       }
[09:31:24.736]                       else if (inherits(cond, "condition")) {
[09:31:24.736]                         if (!is.null(pattern)) {
[09:31:24.736]                           computeRestarts <- base::computeRestarts
[09:31:24.736]                           grepl <- base::grepl
[09:31:24.736]                           restarts <- computeRestarts(cond)
[09:31:24.736]                           for (restart in restarts) {
[09:31:24.736]                             name <- restart$name
[09:31:24.736]                             if (is.null(name)) 
[09:31:24.736]                               next
[09:31:24.736]                             if (!grepl(pattern, name)) 
[09:31:24.736]                               next
[09:31:24.736]                             invokeRestart(restart)
[09:31:24.736]                             muffled <- TRUE
[09:31:24.736]                             break
[09:31:24.736]                           }
[09:31:24.736]                         }
[09:31:24.736]                       }
[09:31:24.736]                       invisible(muffled)
[09:31:24.736]                     }
[09:31:24.736]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.736]                   }
[09:31:24.736]                 }
[09:31:24.736]             }
[09:31:24.736]         }))
[09:31:24.736]     }, error = function(ex) {
[09:31:24.736]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:24.736]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.736]                 ...future.rng), started = ...future.startTime, 
[09:31:24.736]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:24.736]             version = "1.8"), class = "FutureResult")
[09:31:24.736]     }, finally = {
[09:31:24.736]         if (!identical(...future.workdir, getwd())) 
[09:31:24.736]             setwd(...future.workdir)
[09:31:24.736]         {
[09:31:24.736]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:24.736]                 ...future.oldOptions$nwarnings <- NULL
[09:31:24.736]             }
[09:31:24.736]             base::options(...future.oldOptions)
[09:31:24.736]             if (.Platform$OS.type == "windows") {
[09:31:24.736]                 old_names <- names(...future.oldEnvVars)
[09:31:24.736]                 envs <- base::Sys.getenv()
[09:31:24.736]                 names <- names(envs)
[09:31:24.736]                 common <- intersect(names, old_names)
[09:31:24.736]                 added <- setdiff(names, old_names)
[09:31:24.736]                 removed <- setdiff(old_names, names)
[09:31:24.736]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:24.736]                   envs[common]]
[09:31:24.736]                 NAMES <- toupper(changed)
[09:31:24.736]                 args <- list()
[09:31:24.736]                 for (kk in seq_along(NAMES)) {
[09:31:24.736]                   name <- changed[[kk]]
[09:31:24.736]                   NAME <- NAMES[[kk]]
[09:31:24.736]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.736]                     next
[09:31:24.736]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.736]                 }
[09:31:24.736]                 NAMES <- toupper(added)
[09:31:24.736]                 for (kk in seq_along(NAMES)) {
[09:31:24.736]                   name <- added[[kk]]
[09:31:24.736]                   NAME <- NAMES[[kk]]
[09:31:24.736]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.736]                     next
[09:31:24.736]                   args[[name]] <- ""
[09:31:24.736]                 }
[09:31:24.736]                 NAMES <- toupper(removed)
[09:31:24.736]                 for (kk in seq_along(NAMES)) {
[09:31:24.736]                   name <- removed[[kk]]
[09:31:24.736]                   NAME <- NAMES[[kk]]
[09:31:24.736]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.736]                     next
[09:31:24.736]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.736]                 }
[09:31:24.736]                 if (length(args) > 0) 
[09:31:24.736]                   base::do.call(base::Sys.setenv, args = args)
[09:31:24.736]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:24.736]             }
[09:31:24.736]             else {
[09:31:24.736]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:24.736]             }
[09:31:24.736]             {
[09:31:24.736]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:24.736]                   0L) {
[09:31:24.736]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:24.736]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:24.736]                   base::options(opts)
[09:31:24.736]                 }
[09:31:24.736]                 {
[09:31:24.736]                   {
[09:31:24.736]                     NULL
[09:31:24.736]                     RNGkind("Mersenne-Twister")
[09:31:24.736]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:24.736]                       inherits = FALSE)
[09:31:24.736]                   }
[09:31:24.736]                   options(future.plan = NULL)
[09:31:24.736]                   if (is.na(NA_character_)) 
[09:31:24.736]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.736]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:24.736]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:24.736]                     .init = FALSE)
[09:31:24.736]                 }
[09:31:24.736]             }
[09:31:24.736]         }
[09:31:24.736]     })
[09:31:24.736]     if (TRUE) {
[09:31:24.736]         base::sink(type = "output", split = FALSE)
[09:31:24.736]         if (TRUE) {
[09:31:24.736]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:24.736]         }
[09:31:24.736]         else {
[09:31:24.736]             ...future.result["stdout"] <- base::list(NULL)
[09:31:24.736]         }
[09:31:24.736]         base::close(...future.stdout)
[09:31:24.736]         ...future.stdout <- NULL
[09:31:24.736]     }
[09:31:24.736]     ...future.result$conditions <- ...future.conditions
[09:31:24.736]     ...future.result$finished <- base::Sys.time()
[09:31:24.736]     ...future.result
[09:31:24.736] }
[09:31:24.738] plan(): Setting new future strategy stack:
[09:31:24.738] List of future strategies:
[09:31:24.738] 1. sequential:
[09:31:24.738]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.738]    - tweaked: FALSE
[09:31:24.738]    - call: NULL
[09:31:24.739] plan(): nbrOfWorkers() = 1
[09:31:24.739] plan(): Setting new future strategy stack:
[09:31:24.739] List of future strategies:
[09:31:24.739] 1. sequential:
[09:31:24.739]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.739]    - tweaked: FALSE
[09:31:24.739]    - call: plan(strategy)
[09:31:24.740] plan(): nbrOfWorkers() = 1
[09:31:24.740] SequentialFuture started (and completed)
[09:31:24.740] - Launch lazy future ... done
[09:31:24.740] run() for ‘SequentialFuture’ ... done
[09:31:24.741] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[09:31:24.741] Searching for globals...
[09:31:24.742] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:24.742] Searching for globals...
[09:31:24.743] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[09:31:24.743] Searching for globals ... DONE
[09:31:24.743] Resolving globals: FALSE
[09:31:24.744] The total size of the 1 globals is 160 bytes (160 bytes)
[09:31:24.745] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[09:31:24.745] - globals: [1] ‘data’
[09:31:24.745] 
[09:31:24.745] getGlobalsAndPackages() ... DONE
[09:31:24.745] run() for ‘Future’ ...
[09:31:24.745] - state: ‘created’
[09:31:24.745] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:24.746] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:24.746] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:24.746]   - Field: ‘label’
[09:31:24.746]   - Field: ‘local’
[09:31:24.746]   - Field: ‘owner’
[09:31:24.746]   - Field: ‘envir’
[09:31:24.746]   - Field: ‘packages’
[09:31:24.746]   - Field: ‘gc’
[09:31:24.746]   - Field: ‘conditions’
[09:31:24.746]   - Field: ‘expr’
[09:31:24.746]   - Field: ‘uuid’
[09:31:24.747]   - Field: ‘seed’
[09:31:24.747]   - Field: ‘version’
[09:31:24.747]   - Field: ‘result’
[09:31:24.747]   - Field: ‘asynchronous’
[09:31:24.749]   - Field: ‘calls’
[09:31:24.749]   - Field: ‘globals’
[09:31:24.749]   - Field: ‘stdout’
[09:31:24.749]   - Field: ‘earlySignal’
[09:31:24.749]   - Field: ‘lazy’
[09:31:24.749]   - Field: ‘state’
[09:31:24.749] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:24.749] - Launch lazy future ...
[09:31:24.750] Packages needed by the future expression (n = 0): <none>
[09:31:24.750] Packages needed by future strategies (n = 0): <none>
[09:31:24.750] {
[09:31:24.750]     {
[09:31:24.750]         {
[09:31:24.750]             ...future.startTime <- base::Sys.time()
[09:31:24.750]             {
[09:31:24.750]                 {
[09:31:24.750]                   {
[09:31:24.750]                     base::local({
[09:31:24.750]                       has_future <- base::requireNamespace("future", 
[09:31:24.750]                         quietly = TRUE)
[09:31:24.750]                       if (has_future) {
[09:31:24.750]                         ns <- base::getNamespace("future")
[09:31:24.750]                         version <- ns[[".package"]][["version"]]
[09:31:24.750]                         if (is.null(version)) 
[09:31:24.750]                           version <- utils::packageVersion("future")
[09:31:24.750]                       }
[09:31:24.750]                       else {
[09:31:24.750]                         version <- NULL
[09:31:24.750]                       }
[09:31:24.750]                       if (!has_future || version < "1.8.0") {
[09:31:24.750]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:24.750]                           "", base::R.version$version.string), 
[09:31:24.750]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:24.750]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:24.750]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:24.750]                             "release", "version")], collapse = " "), 
[09:31:24.750]                           hostname = base::Sys.info()[["nodename"]])
[09:31:24.750]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:24.750]                           info)
[09:31:24.750]                         info <- base::paste(info, collapse = "; ")
[09:31:24.750]                         if (!has_future) {
[09:31:24.750]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:24.750]                             info)
[09:31:24.750]                         }
[09:31:24.750]                         else {
[09:31:24.750]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:24.750]                             info, version)
[09:31:24.750]                         }
[09:31:24.750]                         base::stop(msg)
[09:31:24.750]                       }
[09:31:24.750]                     })
[09:31:24.750]                   }
[09:31:24.750]                   ...future.strategy.old <- future::plan("list")
[09:31:24.750]                   options(future.plan = NULL)
[09:31:24.750]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.750]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:24.750]                 }
[09:31:24.750]                 ...future.workdir <- getwd()
[09:31:24.750]             }
[09:31:24.750]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:24.750]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:24.750]         }
[09:31:24.750]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:24.750]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:24.750]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:24.750]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:24.750]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:24.750]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:24.750]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:24.750]             base::names(...future.oldOptions))
[09:31:24.750]     }
[09:31:24.750]     if (FALSE) {
[09:31:24.750]     }
[09:31:24.750]     else {
[09:31:24.750]         if (TRUE) {
[09:31:24.750]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:24.750]                 open = "w")
[09:31:24.750]         }
[09:31:24.750]         else {
[09:31:24.750]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:24.750]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:24.750]         }
[09:31:24.750]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:24.750]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:24.750]             base::sink(type = "output", split = FALSE)
[09:31:24.750]             base::close(...future.stdout)
[09:31:24.750]         }, add = TRUE)
[09:31:24.750]     }
[09:31:24.750]     ...future.frame <- base::sys.nframe()
[09:31:24.750]     ...future.conditions <- base::list()
[09:31:24.750]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:24.750]     if (FALSE) {
[09:31:24.750]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:24.750]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:24.750]     }
[09:31:24.750]     ...future.result <- base::tryCatch({
[09:31:24.750]         base::withCallingHandlers({
[09:31:24.750]             ...future.value <- base::withVisible(base::local(subset(data, 
[09:31:24.750]                 x < 3)$y))
[09:31:24.750]             future::FutureResult(value = ...future.value$value, 
[09:31:24.750]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.750]                   ...future.rng), globalenv = if (FALSE) 
[09:31:24.750]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:24.750]                     ...future.globalenv.names))
[09:31:24.750]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:24.750]         }, condition = base::local({
[09:31:24.750]             c <- base::c
[09:31:24.750]             inherits <- base::inherits
[09:31:24.750]             invokeRestart <- base::invokeRestart
[09:31:24.750]             length <- base::length
[09:31:24.750]             list <- base::list
[09:31:24.750]             seq.int <- base::seq.int
[09:31:24.750]             signalCondition <- base::signalCondition
[09:31:24.750]             sys.calls <- base::sys.calls
[09:31:24.750]             `[[` <- base::`[[`
[09:31:24.750]             `+` <- base::`+`
[09:31:24.750]             `<<-` <- base::`<<-`
[09:31:24.750]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:24.750]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:24.750]                   3L)]
[09:31:24.750]             }
[09:31:24.750]             function(cond) {
[09:31:24.750]                 is_error <- inherits(cond, "error")
[09:31:24.750]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:24.750]                   NULL)
[09:31:24.750]                 if (is_error) {
[09:31:24.750]                   sessionInformation <- function() {
[09:31:24.750]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:24.750]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:24.750]                       search = base::search(), system = base::Sys.info())
[09:31:24.750]                   }
[09:31:24.750]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.750]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:24.750]                     cond$call), session = sessionInformation(), 
[09:31:24.750]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:24.750]                   signalCondition(cond)
[09:31:24.750]                 }
[09:31:24.750]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:24.750]                 "immediateCondition"))) {
[09:31:24.750]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:24.750]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.750]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:24.750]                   if (TRUE && !signal) {
[09:31:24.750]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.750]                     {
[09:31:24.750]                       inherits <- base::inherits
[09:31:24.750]                       invokeRestart <- base::invokeRestart
[09:31:24.750]                       is.null <- base::is.null
[09:31:24.750]                       muffled <- FALSE
[09:31:24.750]                       if (inherits(cond, "message")) {
[09:31:24.750]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.750]                         if (muffled) 
[09:31:24.750]                           invokeRestart("muffleMessage")
[09:31:24.750]                       }
[09:31:24.750]                       else if (inherits(cond, "warning")) {
[09:31:24.750]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.750]                         if (muffled) 
[09:31:24.750]                           invokeRestart("muffleWarning")
[09:31:24.750]                       }
[09:31:24.750]                       else if (inherits(cond, "condition")) {
[09:31:24.750]                         if (!is.null(pattern)) {
[09:31:24.750]                           computeRestarts <- base::computeRestarts
[09:31:24.750]                           grepl <- base::grepl
[09:31:24.750]                           restarts <- computeRestarts(cond)
[09:31:24.750]                           for (restart in restarts) {
[09:31:24.750]                             name <- restart$name
[09:31:24.750]                             if (is.null(name)) 
[09:31:24.750]                               next
[09:31:24.750]                             if (!grepl(pattern, name)) 
[09:31:24.750]                               next
[09:31:24.750]                             invokeRestart(restart)
[09:31:24.750]                             muffled <- TRUE
[09:31:24.750]                             break
[09:31:24.750]                           }
[09:31:24.750]                         }
[09:31:24.750]                       }
[09:31:24.750]                       invisible(muffled)
[09:31:24.750]                     }
[09:31:24.750]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.750]                   }
[09:31:24.750]                 }
[09:31:24.750]                 else {
[09:31:24.750]                   if (TRUE) {
[09:31:24.750]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.750]                     {
[09:31:24.750]                       inherits <- base::inherits
[09:31:24.750]                       invokeRestart <- base::invokeRestart
[09:31:24.750]                       is.null <- base::is.null
[09:31:24.750]                       muffled <- FALSE
[09:31:24.750]                       if (inherits(cond, "message")) {
[09:31:24.750]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.750]                         if (muffled) 
[09:31:24.750]                           invokeRestart("muffleMessage")
[09:31:24.750]                       }
[09:31:24.750]                       else if (inherits(cond, "warning")) {
[09:31:24.750]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.750]                         if (muffled) 
[09:31:24.750]                           invokeRestart("muffleWarning")
[09:31:24.750]                       }
[09:31:24.750]                       else if (inherits(cond, "condition")) {
[09:31:24.750]                         if (!is.null(pattern)) {
[09:31:24.750]                           computeRestarts <- base::computeRestarts
[09:31:24.750]                           grepl <- base::grepl
[09:31:24.750]                           restarts <- computeRestarts(cond)
[09:31:24.750]                           for (restart in restarts) {
[09:31:24.750]                             name <- restart$name
[09:31:24.750]                             if (is.null(name)) 
[09:31:24.750]                               next
[09:31:24.750]                             if (!grepl(pattern, name)) 
[09:31:24.750]                               next
[09:31:24.750]                             invokeRestart(restart)
[09:31:24.750]                             muffled <- TRUE
[09:31:24.750]                             break
[09:31:24.750]                           }
[09:31:24.750]                         }
[09:31:24.750]                       }
[09:31:24.750]                       invisible(muffled)
[09:31:24.750]                     }
[09:31:24.750]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.750]                   }
[09:31:24.750]                 }
[09:31:24.750]             }
[09:31:24.750]         }))
[09:31:24.750]     }, error = function(ex) {
[09:31:24.750]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:24.750]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.750]                 ...future.rng), started = ...future.startTime, 
[09:31:24.750]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:24.750]             version = "1.8"), class = "FutureResult")
[09:31:24.750]     }, finally = {
[09:31:24.750]         if (!identical(...future.workdir, getwd())) 
[09:31:24.750]             setwd(...future.workdir)
[09:31:24.750]         {
[09:31:24.750]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:24.750]                 ...future.oldOptions$nwarnings <- NULL
[09:31:24.750]             }
[09:31:24.750]             base::options(...future.oldOptions)
[09:31:24.750]             if (.Platform$OS.type == "windows") {
[09:31:24.750]                 old_names <- names(...future.oldEnvVars)
[09:31:24.750]                 envs <- base::Sys.getenv()
[09:31:24.750]                 names <- names(envs)
[09:31:24.750]                 common <- intersect(names, old_names)
[09:31:24.750]                 added <- setdiff(names, old_names)
[09:31:24.750]                 removed <- setdiff(old_names, names)
[09:31:24.750]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:24.750]                   envs[common]]
[09:31:24.750]                 NAMES <- toupper(changed)
[09:31:24.750]                 args <- list()
[09:31:24.750]                 for (kk in seq_along(NAMES)) {
[09:31:24.750]                   name <- changed[[kk]]
[09:31:24.750]                   NAME <- NAMES[[kk]]
[09:31:24.750]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.750]                     next
[09:31:24.750]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.750]                 }
[09:31:24.750]                 NAMES <- toupper(added)
[09:31:24.750]                 for (kk in seq_along(NAMES)) {
[09:31:24.750]                   name <- added[[kk]]
[09:31:24.750]                   NAME <- NAMES[[kk]]
[09:31:24.750]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.750]                     next
[09:31:24.750]                   args[[name]] <- ""
[09:31:24.750]                 }
[09:31:24.750]                 NAMES <- toupper(removed)
[09:31:24.750]                 for (kk in seq_along(NAMES)) {
[09:31:24.750]                   name <- removed[[kk]]
[09:31:24.750]                   NAME <- NAMES[[kk]]
[09:31:24.750]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.750]                     next
[09:31:24.750]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.750]                 }
[09:31:24.750]                 if (length(args) > 0) 
[09:31:24.750]                   base::do.call(base::Sys.setenv, args = args)
[09:31:24.750]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:24.750]             }
[09:31:24.750]             else {
[09:31:24.750]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:24.750]             }
[09:31:24.750]             {
[09:31:24.750]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:24.750]                   0L) {
[09:31:24.750]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:24.750]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:24.750]                   base::options(opts)
[09:31:24.750]                 }
[09:31:24.750]                 {
[09:31:24.750]                   {
[09:31:24.750]                     NULL
[09:31:24.750]                     RNGkind("Mersenne-Twister")
[09:31:24.750]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:24.750]                       inherits = FALSE)
[09:31:24.750]                   }
[09:31:24.750]                   options(future.plan = NULL)
[09:31:24.750]                   if (is.na(NA_character_)) 
[09:31:24.750]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.750]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:24.750]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:24.750]                     .init = FALSE)
[09:31:24.750]                 }
[09:31:24.750]             }
[09:31:24.750]         }
[09:31:24.750]     })
[09:31:24.750]     if (TRUE) {
[09:31:24.750]         base::sink(type = "output", split = FALSE)
[09:31:24.750]         if (TRUE) {
[09:31:24.750]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:24.750]         }
[09:31:24.750]         else {
[09:31:24.750]             ...future.result["stdout"] <- base::list(NULL)
[09:31:24.750]         }
[09:31:24.750]         base::close(...future.stdout)
[09:31:24.750]         ...future.stdout <- NULL
[09:31:24.750]     }
[09:31:24.750]     ...future.result$conditions <- ...future.conditions
[09:31:24.750]     ...future.result$finished <- base::Sys.time()
[09:31:24.750]     ...future.result
[09:31:24.750] }
[09:31:24.752] assign_globals() ...
[09:31:24.752] List of 1
[09:31:24.752]  $ data:'data.frame':	5 obs. of  2 variables:
[09:31:24.752]   ..$ x: int [1:5] 1 2 3 4 5
[09:31:24.752]   ..$ y: int [1:5] 1 2 3 4 5
[09:31:24.752]  - attr(*, "where")=List of 1
[09:31:24.752]   ..$ data:<environment: R_EmptyEnv> 
[09:31:24.752]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:24.752]  - attr(*, "resolved")= logi FALSE
[09:31:24.752]  - attr(*, "total_size")= num 160
[09:31:24.752]  - attr(*, "already-done")= logi TRUE
[09:31:24.757] - copied ‘data’ to environment
[09:31:24.757] assign_globals() ... done
[09:31:24.757] plan(): Setting new future strategy stack:
[09:31:24.757] List of future strategies:
[09:31:24.757] 1. sequential:
[09:31:24.757]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.757]    - tweaked: FALSE
[09:31:24.757]    - call: NULL
[09:31:24.758] plan(): nbrOfWorkers() = 1
[09:31:24.759] plan(): Setting new future strategy stack:
[09:31:24.759] List of future strategies:
[09:31:24.759] 1. sequential:
[09:31:24.759]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.759]    - tweaked: FALSE
[09:31:24.759]    - call: plan(strategy)
[09:31:24.759] plan(): nbrOfWorkers() = 1
[09:31:24.759] SequentialFuture started (and completed)
[09:31:24.759] - Launch lazy future ... done
[09:31:24.759] run() for ‘SequentialFuture’ ... done
[09:31:24.760] plan(): Setting new future strategy stack:
[09:31:24.760] List of future strategies:
[09:31:24.760] 1. sequential:
[09:31:24.760]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.760]    - tweaked: FALSE
[09:31:24.760]    - call: plan(list(sequential, strategy))
[09:31:24.760] 2. sequential:
[09:31:24.760]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.760]    - tweaked: FALSE
[09:31:24.760]    - call: plan(list(sequential, strategy))
[09:31:24.760] plan(): nbrOfWorkers() = 1
[09:31:24.761] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:24.761] Searching for globals...
[09:31:24.765] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[09:31:24.766] Searching for globals ... DONE
[09:31:24.766] Resolving globals: FALSE
[09:31:24.766] The total size of the 1 globals is 160 bytes (160 bytes)
[09:31:24.766] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[09:31:24.767] - globals: [1] ‘data’
[09:31:24.767] - packages: [1] ‘future’
[09:31:24.767] getGlobalsAndPackages() ... DONE
[09:31:24.767] run() for ‘Future’ ...
[09:31:24.767] - state: ‘created’
[09:31:24.767] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:24.768] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:24.768] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:24.768]   - Field: ‘label’
[09:31:24.768]   - Field: ‘local’
[09:31:24.768]   - Field: ‘owner’
[09:31:24.768]   - Field: ‘envir’
[09:31:24.768]   - Field: ‘packages’
[09:31:24.768]   - Field: ‘gc’
[09:31:24.768]   - Field: ‘conditions’
[09:31:24.768]   - Field: ‘expr’
[09:31:24.769]   - Field: ‘uuid’
[09:31:24.769]   - Field: ‘seed’
[09:31:24.769]   - Field: ‘version’
[09:31:24.769]   - Field: ‘result’
[09:31:24.769]   - Field: ‘asynchronous’
[09:31:24.769]   - Field: ‘calls’
[09:31:24.769]   - Field: ‘globals’
[09:31:24.769]   - Field: ‘stdout’
[09:31:24.769]   - Field: ‘earlySignal’
[09:31:24.769]   - Field: ‘lazy’
[09:31:24.769]   - Field: ‘state’
[09:31:24.770] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:24.770] - Launch lazy future ...
[09:31:24.770] Packages needed by the future expression (n = 1): ‘future’
[09:31:24.770] Packages needed by future strategies (n = 1): ‘future’
[09:31:24.770] {
[09:31:24.770]     {
[09:31:24.770]         {
[09:31:24.770]             ...future.startTime <- base::Sys.time()
[09:31:24.770]             {
[09:31:24.770]                 {
[09:31:24.770]                   {
[09:31:24.770]                     {
[09:31:24.770]                       base::local({
[09:31:24.770]                         has_future <- base::requireNamespace("future", 
[09:31:24.770]                           quietly = TRUE)
[09:31:24.770]                         if (has_future) {
[09:31:24.770]                           ns <- base::getNamespace("future")
[09:31:24.770]                           version <- ns[[".package"]][["version"]]
[09:31:24.770]                           if (is.null(version)) 
[09:31:24.770]                             version <- utils::packageVersion("future")
[09:31:24.770]                         }
[09:31:24.770]                         else {
[09:31:24.770]                           version <- NULL
[09:31:24.770]                         }
[09:31:24.770]                         if (!has_future || version < "1.8.0") {
[09:31:24.770]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:24.770]                             "", base::R.version$version.string), 
[09:31:24.770]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:24.770]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:24.770]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:24.770]                               "release", "version")], collapse = " "), 
[09:31:24.770]                             hostname = base::Sys.info()[["nodename"]])
[09:31:24.770]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:24.770]                             info)
[09:31:24.770]                           info <- base::paste(info, collapse = "; ")
[09:31:24.770]                           if (!has_future) {
[09:31:24.770]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:24.770]                               info)
[09:31:24.770]                           }
[09:31:24.770]                           else {
[09:31:24.770]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:24.770]                               info, version)
[09:31:24.770]                           }
[09:31:24.770]                           base::stop(msg)
[09:31:24.770]                         }
[09:31:24.770]                       })
[09:31:24.770]                     }
[09:31:24.770]                     base::local({
[09:31:24.770]                       for (pkg in "future") {
[09:31:24.770]                         base::loadNamespace(pkg)
[09:31:24.770]                         base::library(pkg, character.only = TRUE)
[09:31:24.770]                       }
[09:31:24.770]                     })
[09:31:24.770]                   }
[09:31:24.770]                   ...future.strategy.old <- future::plan("list")
[09:31:24.770]                   options(future.plan = NULL)
[09:31:24.770]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.770]                   future::plan(list(function (..., envir = parent.frame()) 
[09:31:24.770]                   {
[09:31:24.770]                     future <- SequentialFuture(..., envir = envir)
[09:31:24.770]                     if (!future$lazy) 
[09:31:24.770]                       future <- run(future)
[09:31:24.770]                     invisible(future)
[09:31:24.770]                   }), .cleanup = FALSE, .init = FALSE)
[09:31:24.770]                 }
[09:31:24.770]                 ...future.workdir <- getwd()
[09:31:24.770]             }
[09:31:24.770]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:24.770]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:24.770]         }
[09:31:24.770]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:24.770]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:24.770]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:24.770]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:24.770]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:24.770]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:24.770]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:24.770]             base::names(...future.oldOptions))
[09:31:24.770]     }
[09:31:24.770]     if (FALSE) {
[09:31:24.770]     }
[09:31:24.770]     else {
[09:31:24.770]         if (TRUE) {
[09:31:24.770]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:24.770]                 open = "w")
[09:31:24.770]         }
[09:31:24.770]         else {
[09:31:24.770]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:24.770]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:24.770]         }
[09:31:24.770]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:24.770]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:24.770]             base::sink(type = "output", split = FALSE)
[09:31:24.770]             base::close(...future.stdout)
[09:31:24.770]         }, add = TRUE)
[09:31:24.770]     }
[09:31:24.770]     ...future.frame <- base::sys.nframe()
[09:31:24.770]     ...future.conditions <- base::list()
[09:31:24.770]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:24.770]     if (FALSE) {
[09:31:24.770]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:24.770]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:24.770]     }
[09:31:24.770]     ...future.result <- base::tryCatch({
[09:31:24.770]         base::withCallingHandlers({
[09:31:24.770]             ...future.value <- base::withVisible(base::local({
[09:31:24.770]                 a %<-% subset(data, x < 3)$y
[09:31:24.770]                 a
[09:31:24.770]             }))
[09:31:24.770]             future::FutureResult(value = ...future.value$value, 
[09:31:24.770]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.770]                   ...future.rng), globalenv = if (FALSE) 
[09:31:24.770]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:24.770]                     ...future.globalenv.names))
[09:31:24.770]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:24.770]         }, condition = base::local({
[09:31:24.770]             c <- base::c
[09:31:24.770]             inherits <- base::inherits
[09:31:24.770]             invokeRestart <- base::invokeRestart
[09:31:24.770]             length <- base::length
[09:31:24.770]             list <- base::list
[09:31:24.770]             seq.int <- base::seq.int
[09:31:24.770]             signalCondition <- base::signalCondition
[09:31:24.770]             sys.calls <- base::sys.calls
[09:31:24.770]             `[[` <- base::`[[`
[09:31:24.770]             `+` <- base::`+`
[09:31:24.770]             `<<-` <- base::`<<-`
[09:31:24.770]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:24.770]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:24.770]                   3L)]
[09:31:24.770]             }
[09:31:24.770]             function(cond) {
[09:31:24.770]                 is_error <- inherits(cond, "error")
[09:31:24.770]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:24.770]                   NULL)
[09:31:24.770]                 if (is_error) {
[09:31:24.770]                   sessionInformation <- function() {
[09:31:24.770]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:24.770]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:24.770]                       search = base::search(), system = base::Sys.info())
[09:31:24.770]                   }
[09:31:24.770]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.770]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:24.770]                     cond$call), session = sessionInformation(), 
[09:31:24.770]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:24.770]                   signalCondition(cond)
[09:31:24.770]                 }
[09:31:24.770]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:24.770]                 "immediateCondition"))) {
[09:31:24.770]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:24.770]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.770]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:24.770]                   if (TRUE && !signal) {
[09:31:24.770]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.770]                     {
[09:31:24.770]                       inherits <- base::inherits
[09:31:24.770]                       invokeRestart <- base::invokeRestart
[09:31:24.770]                       is.null <- base::is.null
[09:31:24.770]                       muffled <- FALSE
[09:31:24.770]                       if (inherits(cond, "message")) {
[09:31:24.770]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.770]                         if (muffled) 
[09:31:24.770]                           invokeRestart("muffleMessage")
[09:31:24.770]                       }
[09:31:24.770]                       else if (inherits(cond, "warning")) {
[09:31:24.770]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.770]                         if (muffled) 
[09:31:24.770]                           invokeRestart("muffleWarning")
[09:31:24.770]                       }
[09:31:24.770]                       else if (inherits(cond, "condition")) {
[09:31:24.770]                         if (!is.null(pattern)) {
[09:31:24.770]                           computeRestarts <- base::computeRestarts
[09:31:24.770]                           grepl <- base::grepl
[09:31:24.770]                           restarts <- computeRestarts(cond)
[09:31:24.770]                           for (restart in restarts) {
[09:31:24.770]                             name <- restart$name
[09:31:24.770]                             if (is.null(name)) 
[09:31:24.770]                               next
[09:31:24.770]                             if (!grepl(pattern, name)) 
[09:31:24.770]                               next
[09:31:24.770]                             invokeRestart(restart)
[09:31:24.770]                             muffled <- TRUE
[09:31:24.770]                             break
[09:31:24.770]                           }
[09:31:24.770]                         }
[09:31:24.770]                       }
[09:31:24.770]                       invisible(muffled)
[09:31:24.770]                     }
[09:31:24.770]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.770]                   }
[09:31:24.770]                 }
[09:31:24.770]                 else {
[09:31:24.770]                   if (TRUE) {
[09:31:24.770]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.770]                     {
[09:31:24.770]                       inherits <- base::inherits
[09:31:24.770]                       invokeRestart <- base::invokeRestart
[09:31:24.770]                       is.null <- base::is.null
[09:31:24.770]                       muffled <- FALSE
[09:31:24.770]                       if (inherits(cond, "message")) {
[09:31:24.770]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.770]                         if (muffled) 
[09:31:24.770]                           invokeRestart("muffleMessage")
[09:31:24.770]                       }
[09:31:24.770]                       else if (inherits(cond, "warning")) {
[09:31:24.770]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.770]                         if (muffled) 
[09:31:24.770]                           invokeRestart("muffleWarning")
[09:31:24.770]                       }
[09:31:24.770]                       else if (inherits(cond, "condition")) {
[09:31:24.770]                         if (!is.null(pattern)) {
[09:31:24.770]                           computeRestarts <- base::computeRestarts
[09:31:24.770]                           grepl <- base::grepl
[09:31:24.770]                           restarts <- computeRestarts(cond)
[09:31:24.770]                           for (restart in restarts) {
[09:31:24.770]                             name <- restart$name
[09:31:24.770]                             if (is.null(name)) 
[09:31:24.770]                               next
[09:31:24.770]                             if (!grepl(pattern, name)) 
[09:31:24.770]                               next
[09:31:24.770]                             invokeRestart(restart)
[09:31:24.770]                             muffled <- TRUE
[09:31:24.770]                             break
[09:31:24.770]                           }
[09:31:24.770]                         }
[09:31:24.770]                       }
[09:31:24.770]                       invisible(muffled)
[09:31:24.770]                     }
[09:31:24.770]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.770]                   }
[09:31:24.770]                 }
[09:31:24.770]             }
[09:31:24.770]         }))
[09:31:24.770]     }, error = function(ex) {
[09:31:24.770]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:24.770]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.770]                 ...future.rng), started = ...future.startTime, 
[09:31:24.770]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:24.770]             version = "1.8"), class = "FutureResult")
[09:31:24.770]     }, finally = {
[09:31:24.770]         if (!identical(...future.workdir, getwd())) 
[09:31:24.770]             setwd(...future.workdir)
[09:31:24.770]         {
[09:31:24.770]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:24.770]                 ...future.oldOptions$nwarnings <- NULL
[09:31:24.770]             }
[09:31:24.770]             base::options(...future.oldOptions)
[09:31:24.770]             if (.Platform$OS.type == "windows") {
[09:31:24.770]                 old_names <- names(...future.oldEnvVars)
[09:31:24.770]                 envs <- base::Sys.getenv()
[09:31:24.770]                 names <- names(envs)
[09:31:24.770]                 common <- intersect(names, old_names)
[09:31:24.770]                 added <- setdiff(names, old_names)
[09:31:24.770]                 removed <- setdiff(old_names, names)
[09:31:24.770]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:24.770]                   envs[common]]
[09:31:24.770]                 NAMES <- toupper(changed)
[09:31:24.770]                 args <- list()
[09:31:24.770]                 for (kk in seq_along(NAMES)) {
[09:31:24.770]                   name <- changed[[kk]]
[09:31:24.770]                   NAME <- NAMES[[kk]]
[09:31:24.770]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.770]                     next
[09:31:24.770]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.770]                 }
[09:31:24.770]                 NAMES <- toupper(added)
[09:31:24.770]                 for (kk in seq_along(NAMES)) {
[09:31:24.770]                   name <- added[[kk]]
[09:31:24.770]                   NAME <- NAMES[[kk]]
[09:31:24.770]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.770]                     next
[09:31:24.770]                   args[[name]] <- ""
[09:31:24.770]                 }
[09:31:24.770]                 NAMES <- toupper(removed)
[09:31:24.770]                 for (kk in seq_along(NAMES)) {
[09:31:24.770]                   name <- removed[[kk]]
[09:31:24.770]                   NAME <- NAMES[[kk]]
[09:31:24.770]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.770]                     next
[09:31:24.770]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.770]                 }
[09:31:24.770]                 if (length(args) > 0) 
[09:31:24.770]                   base::do.call(base::Sys.setenv, args = args)
[09:31:24.770]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:24.770]             }
[09:31:24.770]             else {
[09:31:24.770]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:24.770]             }
[09:31:24.770]             {
[09:31:24.770]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:24.770]                   0L) {
[09:31:24.770]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:24.770]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:24.770]                   base::options(opts)
[09:31:24.770]                 }
[09:31:24.770]                 {
[09:31:24.770]                   {
[09:31:24.770]                     NULL
[09:31:24.770]                     RNGkind("Mersenne-Twister")
[09:31:24.770]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:24.770]                       inherits = FALSE)
[09:31:24.770]                   }
[09:31:24.770]                   options(future.plan = NULL)
[09:31:24.770]                   if (is.na(NA_character_)) 
[09:31:24.770]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.770]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:24.770]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:24.770]                     .init = FALSE)
[09:31:24.770]                 }
[09:31:24.770]             }
[09:31:24.770]         }
[09:31:24.770]     })
[09:31:24.770]     if (TRUE) {
[09:31:24.770]         base::sink(type = "output", split = FALSE)
[09:31:24.770]         if (TRUE) {
[09:31:24.770]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:24.770]         }
[09:31:24.770]         else {
[09:31:24.770]             ...future.result["stdout"] <- base::list(NULL)
[09:31:24.770]         }
[09:31:24.770]         base::close(...future.stdout)
[09:31:24.770]         ...future.stdout <- NULL
[09:31:24.770]     }
[09:31:24.770]     ...future.result$conditions <- ...future.conditions
[09:31:24.770]     ...future.result$finished <- base::Sys.time()
[09:31:24.770]     ...future.result
[09:31:24.770] }
[09:31:24.772] assign_globals() ...
[09:31:24.772] List of 1
[09:31:24.772]  $ data:'data.frame':	5 obs. of  2 variables:
[09:31:24.772]   ..$ x: int [1:5] 1 2 3 4 5
[09:31:24.772]   ..$ y: int [1:5] 1 2 3 4 5
[09:31:24.772]  - attr(*, "where")=List of 1
[09:31:24.772]   ..$ data:<environment: R_EmptyEnv> 
[09:31:24.772]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:24.772]  - attr(*, "resolved")= logi FALSE
[09:31:24.772]  - attr(*, "total_size")= num 160
[09:31:24.772]  - attr(*, "already-done")= logi TRUE
[09:31:24.775] - copied ‘data’ to environment
[09:31:24.775] assign_globals() ... done
[09:31:24.776] plan(): Setting new future strategy stack:
[09:31:24.776] List of future strategies:
[09:31:24.776] 1. sequential:
[09:31:24.776]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.776]    - tweaked: FALSE
[09:31:24.776]    - call: plan(list(sequential, strategy))
[09:31:24.776] plan(): nbrOfWorkers() = 1
[09:31:24.808] plan(): Setting new future strategy stack:
[09:31:24.808] List of future strategies:
[09:31:24.808] 1. sequential:
[09:31:24.808]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.808]    - tweaked: FALSE
[09:31:24.808]    - call: plan(list(sequential, strategy))
[09:31:24.808] 2. sequential:
[09:31:24.808]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.808]    - tweaked: FALSE
[09:31:24.808]    - call: plan(list(sequential, strategy))
[09:31:24.809] plan(): nbrOfWorkers() = 1
[09:31:24.809] SequentialFuture started (and completed)
[09:31:24.809] signalConditions() ...
[09:31:24.809]  - include = ‘immediateCondition’
[09:31:24.809]  - exclude = 
[09:31:24.809]  - resignal = FALSE
[09:31:24.810]  - Number of conditions: 53
[09:31:24.810] signalConditions() ... done
[09:31:24.810] - Launch lazy future ... done
[09:31:24.810] run() for ‘SequentialFuture’ ... done
[09:31:24.810] signalConditions() ...
[09:31:24.810]  - include = ‘immediateCondition’
[09:31:24.810]  - exclude = 
[09:31:24.810]  - resignal = FALSE
[09:31:24.810]  - Number of conditions: 53
[09:31:24.810] signalConditions() ... done
[09:31:24.811] Future state: ‘finished’
[09:31:24.811] signalConditions() ...
[09:31:24.811]  - include = ‘condition’
[09:31:24.811]  - exclude = ‘immediateCondition’
[09:31:24.811]  - resignal = TRUE
[09:31:24.811]  - Number of conditions: 53
[09:31:24.811]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.777] getGlobalsAndPackages() ...
[09:31:24.811]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:24.811]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.791] Searching for globals...
[09:31:24.812]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.792] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[09:31:24.812]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.793] Searching for globals ... DONE
[09:31:24.812]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.793] Resolving globals: FALSE
[09:31:24.812]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.793] The total size of the 1 globals is 160 bytes (160 bytes)
[09:31:24.812]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.794] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[09:31:24.812]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.794] - globals: [1] ‘data’
[09:31:24.812]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.794] 
[09:31:24.813]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.794] getGlobalsAndPackages() ... DONE
[09:31:24.813]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.794] run() for ‘Future’ ...
[09:31:24.813]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.794] - state: ‘created’
[09:31:24.813]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.794] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:24.813]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.795] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:24.813]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.795] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:24.813]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.795]   - Field: ‘label’
[09:31:24.813]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.795]   - Field: ‘local’
[09:31:24.814]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.795]   - Field: ‘owner’
[09:31:24.814]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.795]   - Field: ‘envir’
[09:31:24.814]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.795]   - Field: ‘packages’
[09:31:24.814]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.796]   - Field: ‘gc’
[09:31:24.814]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.796]   - Field: ‘conditions’
[09:31:24.814]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.796]   - Field: ‘expr’
[09:31:24.814]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.796]   - Field: ‘uuid’
[09:31:24.814]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.796]   - Field: ‘seed’
[09:31:24.815]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.796]   - Field: ‘version’
[09:31:24.815]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.796]   - Field: ‘result’
[09:31:24.815]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.796]   - Field: ‘asynchronous’
[09:31:24.815]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.796]   - Field: ‘calls’
[09:31:24.815]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.796]   - Field: ‘globals’
[09:31:24.815]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.797]   - Field: ‘stdout’
[09:31:24.815]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.797]   - Field: ‘earlySignal’
[09:31:24.815]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.797]   - Field: ‘lazy’
[09:31:24.816]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.797]   - Field: ‘state’
[09:31:24.816]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.797] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:24.816]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.797] - Launch lazy future ...
[09:31:24.816]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.797] Packages needed by the future expression (n = 0): <none>
[09:31:24.816]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.798] Packages needed by future strategies (n = 0): <none>
[09:31:24.816]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.798] {
[09:31:24.798]     {
[09:31:24.798]         {
[09:31:24.798]             ...future.startTime <- base::Sys.time()
[09:31:24.798]             {
[09:31:24.798]                 {
[09:31:24.798]                   {
[09:31:24.798]                     base::local({
[09:31:24.798]                       has_future <- base::requireNamespace("future", 
[09:31:24.798]                         quietly = TRUE)
[09:31:24.798]                       if (has_future) {
[09:31:24.798]                         ns <- base::getNamespace("future")
[09:31:24.798]                         version <- ns[[".package"]][["version"]]
[09:31:24.798]                         if (is.null(version)) 
[09:31:24.798]                           version <- utils::packageVersion("future")
[09:31:24.798]                       }
[09:31:24.798]                       else {
[09:31:24.798]                         version <- NULL
[09:31:24.798]                       }
[09:31:24.798]                       if (!has_future || version < "1.8.0") {
[09:31:24.798]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:24.798]                           "", base::R.version$version.string), 
[09:31:24.798]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:24.798]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:24.798]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:24.798]                             "release", "version")], collapse = " "), 
[09:31:24.798]                           hostname = base::Sys.info()[["nodename"]])
[09:31:24.798]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:24.798]                           info)
[09:31:24.798]                         info <- base::paste(info, collapse = "; ")
[09:31:24.798]                         if (!has_future) {
[09:31:24.798]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:24.798]                             info)
[09:31:24.798]                         }
[09:31:24.798]                         else {
[09:31:24.798]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:24.798]                             info, version)
[09:31:24.798]                         }
[09:31:24.798]                         base::stop(msg)
[09:31:24.798]                       }
[09:31:24.798]                     })
[09:31:24.798]                   }
[09:31:24.798]                   ...future.strategy.old <- future::plan("list")
[09:31:24.798]                   options(future.plan = NULL)
[09:31:24.798]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.798]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:24.798]                 }
[09:31:24.798]                 ...future.workdir <- getwd()
[09:31:24.798]             }
[09:31:24.798]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:24.798]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:24.798]         }
[09:31:24.798]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:24.798]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:24.798]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:24.798]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:24.798]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:24.798]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:24.798]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:24.798]             base::names(...future.oldOptions))
[09:31:24.798]     }
[09:31:24.798]     if (FALSE) {
[09:31:24.798]     }
[09:31:24.798]     else {
[09:31:24.798]         if (TRUE) {
[09:31:24.798]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:24.798]                 open = "w")
[09:31:24.798]         }
[09:31:24.798]         else {
[09:31:24.798]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:24.798]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:24.798]         }
[09:31:24.798]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:24.798]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:24.798]             base::sink(type = "output", split = FALSE)
[09:31:24.798]             base::close(...future.stdout)
[09:31:24.798]         }, add = TRUE)
[09:31:24.798]     }
[09:31:24.798]     ...future.frame <- base::sys.nframe()
[09:31:24.798]     ...future.conditions <- base::list()
[09:31:24.798]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:24.798]     if (FALSE) {
[09:31:24.798]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:24.798]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:24.798]     }
[09:31:24.798]     ...future.result <- base::tryCatch({
[09:31:24.798]         base::withCallingHandlers({
[09:31:24.798]             ...future.value <- base::withVisible(base::local(subset(data, 
[09:31:24.798]                 x < 3)$y))
[09:31:24.798]             future::FutureResult(value = ...future.value$value, 
[09:31:24.798]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.798]                   ...future.rng), globalenv = if (FALSE) 
[09:31:24.798]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:24.798]                     ...future.globalenv.names))
[09:31:24.798]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:24.798]         }, condition = base::local({
[09:31:24.798]             c <- base::c
[09:31:24.798]             inherits <- base::inherits
[09:31:24.798]             invokeRestart <- base::invokeRestart
[09:31:24.798]             length <- base::length
[09:31:24.798]             list <- base::list
[09:31:24.798]             seq.int <- base::seq.int
[09:31:24.798]             signalCondition <- base::signalCondition
[09:31:24.798]             sys.calls <- base::sys.calls
[09:31:24.798]             `[[` <- base::`[[`
[09:31:24.798]             `+` <- base::`+`
[09:31:24.798]             `<<-` <- base::`<<-`
[09:31:24.798]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:24.798]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:24.798]                   3L)]
[09:31:24.798]             }
[09:31:24.798]             function(cond) {
[09:31:24.798]                 is_error <- inherits(cond, "error")
[09:31:24.798]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:24.798]                   NULL)
[09:31:24.798]                 if (is_error) {
[09:31:24.798]                   sessionInformation <- function() {
[09:31:24.798]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:24.798]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:24.798]                       search = base::search(), system = base::Sys.info())
[09:31:24.798]                   }
[09:31:24.798]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.798]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:24.798]                     cond$call), session = sessionInformation(), 
[09:31:24.798]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:24.798]                   signalCondition(cond)
[09:31:24.798]                 }
[09:31:24.798]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:24.798]                 "immediateCondition"))) {
[09:31:24.798]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:24.798]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.798]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:24.798]                   if (TRUE && !signal) {
[09:31:24.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.798]                     {
[09:31:24.798]                       inherits <- base::inherits
[09:31:24.798]                       invokeRestart <- base::invokeRestart
[09:31:24.798]                       is.null <- base::is.null
[09:31:24.798]                       muffled <- FALSE
[09:31:24.798]                       if (inherits(cond, "message")) {
[09:31:24.798]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.798]                         if (muffled) 
[09:31:24.798]                           invokeRestart("muffleMessage")
[09:31:24.798]                       }
[09:31:24.798]                       else if (inherits(cond, "warning")) {
[09:31:24.798]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.798]                         if (muffled) 
[09:31:24.798]                           invokeRestart("muffleWarning")
[09:31:24.798]                       }
[09:31:24.798]                       else if (inherits(cond, "condition")) {
[09:31:24.798]                         if (!is.null(pattern)) {
[09:31:24.798]                           computeRestarts <- base::computeRestarts
[09:31:24.798]                           grepl <- base::grepl
[09:31:24.798]                           restarts <- computeRestarts(cond)
[09:31:24.798]                           for (restart in restarts) {
[09:31:24.798]                             name <- restart$name
[09:31:24.798]                             if (is.null(name)) 
[09:31:24.798]                               next
[09:31:24.798]                             if (!grepl(pattern, name)) 
[09:31:24.798]                               next
[09:31:24.798]                             invokeRestart(restart)
[09:31:24.798]                             muffled <- TRUE
[09:31:24.798]                             break
[09:31:24.798]                           }
[09:31:24.798]                         }
[09:31:24.798]                       }
[09:31:24.798]                       invisible(muffled)
[09:31:24.798]                     }
[09:31:24.798]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.798]                   }
[09:31:24.798]                 }
[09:31:24.798]                 else {
[09:31:24.798]                   if (TRUE) {
[09:31:24.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.798]                     {
[09:31:24.798]                       inherits <- base::inherits
[09:31:24.798]                       invokeRestart <- base::invokeRestart
[09:31:24.798]                       is.null <- base::is.null
[09:31:24.798]                       muffled <- FALSE
[09:31:24.798]                       if (inherits(cond, "message")) {
[09:31:24.798]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.798]                         if (muffled) 
[09:31:24.798]                           invokeRestart("muffleMessage")
[09:31:24.798]                       }
[09:31:24.798]                       else if (inherits(cond, "warning")) {
[09:31:24.798]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.798]                         if (muffled) 
[09:31:24.798]                           invokeRestart("muffleWarning")
[09:31:24.798]                       }
[09:31:24.798]                       else if (inherits(cond, "condition")) {
[09:31:24.798]                         if (!is.null(pattern)) {
[09:31:24.798]                           computeRestarts <- base::computeRestarts
[09:31:24.798]                           grepl <- base::grepl
[09:31:24.798]                           restarts <- computeRestarts(cond)
[09:31:24.798]                           for (restart in restarts) {
[09:31:24.798]                             name <- restart$name
[09:31:24.798]                             if (is.null(name)) 
[09:31:24.798]                               next
[09:31:24.798]                             if (!grepl(pattern, name)) 
[09:31:24.798]                               next
[09:31:24.798]                             invokeRestart(restart)
[09:31:24.798]                             muffled <- TRUE
[09:31:24.798]                             break
[09:31:24.798]                           }
[09:31:24.798]                         }
[09:31:24.798]                       }
[09:31:24.798]                       invisible(muffled)
[09:31:24.798]                     }
[09:31:24.798]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.798]                   }
[09:31:24.798]                 }
[09:31:24.798]             }
[09:31:24.798]         }))
[09:31:24.798]     }, error = function(ex) {
[09:31:24.798]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:24.798]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.798]                 ...future.rng), started = ...future.startTime, 
[09:31:24.798]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:24.798]             version = "1.8"), class = "FutureResult")
[09:31:24.798]     }, finally = {
[09:31:24.798]         if (!identical(...future.workdir, getwd())) 
[09:31:24.798]             setwd(...future.workdir)
[09:31:24.798]         {
[09:31:24.798]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:24.798]                 ...future.oldOptions$nwarnings <- NULL
[09:31:24.798]             }
[09:31:24.798]             base::options(...future.oldOptions)
[09:31:24.798]             if (.Platform$OS.type == "windows") {
[09:31:24.798]                 old_names <- names(...future.oldEnvVars)
[09:31:24.798]                 envs <- base::Sys.getenv()
[09:31:24.798]                 names <- names(envs)
[09:31:24.798]                 common <- intersect(names, old_names)
[09:31:24.798]                 added <- setdiff(names, old_names)
[09:31:24.798]                 removed <- setdiff(old_names, names)
[09:31:24.798]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:24.798]                   envs[common]]
[09:31:24.798]                 NAMES <- toupper(changed)
[09:31:24.798]                 args <- list()
[09:31:24.798]                 for (kk in seq_along(NAMES)) {
[09:31:24.798]                   name <- changed[[kk]]
[09:31:24.798]                   NAME <- NAMES[[kk]]
[09:31:24.798]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.798]                     next
[09:31:24.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.798]                 }
[09:31:24.798]                 NAMES <- toupper(added)
[09:31:24.798]                 for (kk in seq_along(NAMES)) {
[09:31:24.798]                   name <- added[[kk]]
[09:31:24.798]                   NAME <- NAMES[[kk]]
[09:31:24.798]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.798]                     next
[09:31:24.798]                   args[[name]] <- ""
[09:31:24.798]                 }
[09:31:24.798]                 NAMES <- toupper(removed)
[09:31:24.798]                 for (kk in seq_along(NAMES)) {
[09:31:24.798]                   name <- removed[[kk]]
[09:31:24.798]                   NAME <- NAMES[[kk]]
[09:31:24.798]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.798]                     next
[09:31:24.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.798]                 }
[09:31:24.798]                 if (length(args) > 0) 
[09:31:24.798]                   base::do.call(base::Sys.setenv, args = args)
[09:31:24.798]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:24.798]             }
[09:31:24.798]             else {
[09:31:24.798]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:24.798]             }
[09:31:24.798]             {
[09:31:24.798]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:24.798]                   0L) {
[09:31:24.798]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:24.798]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:24.798]                   base::options(opts)
[09:31:24.798]                 }
[09:31:24.798]                 {
[09:31:24.798]                   {
[09:31:24.798]                     NULL
[09:31:24.798]                     RNGkind("Mersenne-Twister")
[09:31:24.798]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:24.798]                       inherits = FALSE)
[09:31:24.798]                   }
[09:31:24.798]                   options(future.plan = NULL)
[09:31:24.798]                   if (is.na(NA_character_)) 
[09:31:24.798]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.798]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:24.798]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:24.798]                     .init = FALSE)
[09:31:24.798]                 }
[09:31:24.798]             }
[09:31:24.798]         }
[09:31:24.798]     })
[09:31:24.798]     if (TRUE) {
[09:31:24.798]         base::sink(type = "output", split = FALSE)
[09:31:24.798]         if (TRUE) {
[09:31:24.798]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:24.798]         }
[09:31:24.798]         else {
[09:31:24.798]             ...future.result["stdout"] <- base::list(NULL)
[09:31:24.798]         }
[09:31:24.798]         base::close(...future.stdout)
[09:31:24.798]         ...future.stdout <- NULL
[09:31:24.798]     }
[09:31:24.798]     ...future.result$conditions <- ...future.conditions
[09:31:24.798]     ...future.result$finished <- base::Sys.time()
[09:31:24.798]     ...future.result
[09:31:24.798] }
[09:31:24.816]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.800] assign_globals() ...
[09:31:24.817]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.800] List of 1
[09:31:24.800]  $ data:'data.frame':	5 obs. of  2 variables:
[09:31:24.800]   ..$ x: int [1:5] 1 2 3 4 5
[09:31:24.800]   ..$ y: int [1:5] 1 2 3 4 5
[09:31:24.800]  - attr(*, "where")=List of 1
[09:31:24.800]   ..$ data:<environment: R_EmptyEnv> 
[09:31:24.800]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:24.800]  - attr(*, "resolved")= logi FALSE
[09:31:24.800]  - attr(*, "total_size")= num 160
[09:31:24.800]  - attr(*, "already-done")= logi TRUE
[09:31:24.817]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.805] - copied ‘data’ to environment
[09:31:24.817]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.805] assign_globals() ... done
[09:31:24.817]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.805] plan(): Setting new future strategy stack:
[09:31:24.817]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.805] List of future strategies:
[09:31:24.805] 1. sequential:
[09:31:24.805]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.805]    - tweaked: FALSE
[09:31:24.805]    - call: NULL
[09:31:24.817]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.806] plan(): nbrOfWorkers() = 1
[09:31:24.817]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.807] plan(): Setting new future strategy stack:
[09:31:24.817]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.807] List of future strategies:
[09:31:24.807] 1. sequential:
[09:31:24.807]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.807]    - tweaked: FALSE
[09:31:24.807]    - call: plan(list(sequential, strategy))
[09:31:24.818]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.807] plan(): nbrOfWorkers() = 1
[09:31:24.818]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.807] SequentialFuture started (and completed)
[09:31:24.818]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.808] - Launch lazy future ... done
[09:31:24.818]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.808] run() for ‘SequentialFuture’ ... done
[09:31:24.818] signalConditions() ... done
- Strategy: sequential ... DONE
- Strategy: multicore ...
[09:31:24.819] plan(): Setting new future strategy stack:
[09:31:24.819] List of future strategies:
[09:31:24.819] 1. multicore:
[09:31:24.819]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:24.819]    - tweaked: FALSE
[09:31:24.819]    - call: plan(strategy)
[09:31:24.822] plan(): nbrOfWorkers() = 2
[09:31:24.823] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[09:31:24.823] Searching for globals...
[09:31:24.823] - globals found: [1] ‘getOption’
[09:31:24.824] Searching for globals ... DONE
[09:31:24.824] Resolving globals: FALSE
[09:31:24.824] 
[09:31:24.824] 
[09:31:24.824] getGlobalsAndPackages() ... DONE
[09:31:24.824] run() for ‘Future’ ...
[09:31:24.825] - state: ‘created’
[09:31:24.825] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:24.828] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:24.828] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:24.828]   - Field: ‘label’
[09:31:24.829]   - Field: ‘local’
[09:31:24.829]   - Field: ‘owner’
[09:31:24.829]   - Field: ‘envir’
[09:31:24.829]   - Field: ‘workers’
[09:31:24.829]   - Field: ‘packages’
[09:31:24.829]   - Field: ‘gc’
[09:31:24.829]   - Field: ‘job’
[09:31:24.829]   - Field: ‘conditions’
[09:31:24.829]   - Field: ‘expr’
[09:31:24.829]   - Field: ‘uuid’
[09:31:24.829]   - Field: ‘seed’
[09:31:24.830]   - Field: ‘version’
[09:31:24.830]   - Field: ‘result’
[09:31:24.830]   - Field: ‘asynchronous’
[09:31:24.830]   - Field: ‘calls’
[09:31:24.830]   - Field: ‘globals’
[09:31:24.830]   - Field: ‘stdout’
[09:31:24.830]   - Field: ‘earlySignal’
[09:31:24.830]   - Field: ‘lazy’
[09:31:24.830]   - Field: ‘state’
[09:31:24.830] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:24.830] - Launch lazy future ...
[09:31:24.831] Packages needed by the future expression (n = 0): <none>
[09:31:24.831] Packages needed by future strategies (n = 0): <none>
[09:31:24.832] {
[09:31:24.832]     {
[09:31:24.832]         {
[09:31:24.832]             ...future.startTime <- base::Sys.time()
[09:31:24.832]             {
[09:31:24.832]                 {
[09:31:24.832]                   {
[09:31:24.832]                     {
[09:31:24.832]                       base::local({
[09:31:24.832]                         has_future <- base::requireNamespace("future", 
[09:31:24.832]                           quietly = TRUE)
[09:31:24.832]                         if (has_future) {
[09:31:24.832]                           ns <- base::getNamespace("future")
[09:31:24.832]                           version <- ns[[".package"]][["version"]]
[09:31:24.832]                           if (is.null(version)) 
[09:31:24.832]                             version <- utils::packageVersion("future")
[09:31:24.832]                         }
[09:31:24.832]                         else {
[09:31:24.832]                           version <- NULL
[09:31:24.832]                         }
[09:31:24.832]                         if (!has_future || version < "1.8.0") {
[09:31:24.832]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:24.832]                             "", base::R.version$version.string), 
[09:31:24.832]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:24.832]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:24.832]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:24.832]                               "release", "version")], collapse = " "), 
[09:31:24.832]                             hostname = base::Sys.info()[["nodename"]])
[09:31:24.832]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:24.832]                             info)
[09:31:24.832]                           info <- base::paste(info, collapse = "; ")
[09:31:24.832]                           if (!has_future) {
[09:31:24.832]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:24.832]                               info)
[09:31:24.832]                           }
[09:31:24.832]                           else {
[09:31:24.832]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:24.832]                               info, version)
[09:31:24.832]                           }
[09:31:24.832]                           base::stop(msg)
[09:31:24.832]                         }
[09:31:24.832]                       })
[09:31:24.832]                     }
[09:31:24.832]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:24.832]                     base::options(mc.cores = 1L)
[09:31:24.832]                   }
[09:31:24.832]                   ...future.strategy.old <- future::plan("list")
[09:31:24.832]                   options(future.plan = NULL)
[09:31:24.832]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.832]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:24.832]                 }
[09:31:24.832]                 ...future.workdir <- getwd()
[09:31:24.832]             }
[09:31:24.832]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:24.832]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:24.832]         }
[09:31:24.832]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[09:31:24.832]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:24.832]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[09:31:24.832]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:24.832]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:24.832]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:24.832]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:24.832]             base::names(...future.oldOptions))
[09:31:24.832]     }
[09:31:24.832]     if (FALSE) {
[09:31:24.832]     }
[09:31:24.832]     else {
[09:31:24.832]         if (TRUE) {
[09:31:24.832]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:24.832]                 open = "w")
[09:31:24.832]         }
[09:31:24.832]         else {
[09:31:24.832]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:24.832]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:24.832]         }
[09:31:24.832]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:24.832]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:24.832]             base::sink(type = "output", split = FALSE)
[09:31:24.832]             base::close(...future.stdout)
[09:31:24.832]         }, add = TRUE)
[09:31:24.832]     }
[09:31:24.832]     ...future.frame <- base::sys.nframe()
[09:31:24.832]     ...future.conditions <- base::list()
[09:31:24.832]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:24.832]     if (FALSE) {
[09:31:24.832]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:24.832]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:24.832]     }
[09:31:24.832]     ...future.result <- base::tryCatch({
[09:31:24.832]         base::withCallingHandlers({
[09:31:24.832]             ...future.value <- base::withVisible(base::local({
[09:31:24.832]                 withCallingHandlers({
[09:31:24.832]                   getOption("future.globals.onMissing")
[09:31:24.832]                 }, immediateCondition = function(cond) {
[09:31:24.832]                   save_rds <- function (object, pathname, ...) 
[09:31:24.832]                   {
[09:31:24.832]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:24.832]                     if (file_test("-f", pathname_tmp)) {
[09:31:24.832]                       fi_tmp <- file.info(pathname_tmp)
[09:31:24.832]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:24.832]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:24.832]                         fi_tmp[["mtime"]])
[09:31:24.832]                     }
[09:31:24.832]                     tryCatch({
[09:31:24.832]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:24.832]                     }, error = function(ex) {
[09:31:24.832]                       msg <- conditionMessage(ex)
[09:31:24.832]                       fi_tmp <- file.info(pathname_tmp)
[09:31:24.832]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:24.832]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:24.832]                         fi_tmp[["mtime"]], msg)
[09:31:24.832]                       ex$message <- msg
[09:31:24.832]                       stop(ex)
[09:31:24.832]                     })
[09:31:24.832]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:24.832]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:24.832]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:24.832]                       fi_tmp <- file.info(pathname_tmp)
[09:31:24.832]                       fi <- file.info(pathname)
[09:31:24.832]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:24.832]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:24.832]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:24.832]                         fi[["size"]], fi[["mtime"]])
[09:31:24.832]                       stop(msg)
[09:31:24.832]                     }
[09:31:24.832]                     invisible(pathname)
[09:31:24.832]                   }
[09:31:24.832]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:24.832]                     rootPath = tempdir()) 
[09:31:24.832]                   {
[09:31:24.832]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:24.832]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:24.832]                       tmpdir = path, fileext = ".rds")
[09:31:24.832]                     save_rds(obj, file)
[09:31:24.832]                   }
[09:31:24.832]                   saveImmediateCondition(cond, path = "/tmp/RtmpUzkrDI/.future/immediateConditions")
[09:31:24.832]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.832]                   {
[09:31:24.832]                     inherits <- base::inherits
[09:31:24.832]                     invokeRestart <- base::invokeRestart
[09:31:24.832]                     is.null <- base::is.null
[09:31:24.832]                     muffled <- FALSE
[09:31:24.832]                     if (inherits(cond, "message")) {
[09:31:24.832]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:24.832]                       if (muffled) 
[09:31:24.832]                         invokeRestart("muffleMessage")
[09:31:24.832]                     }
[09:31:24.832]                     else if (inherits(cond, "warning")) {
[09:31:24.832]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:24.832]                       if (muffled) 
[09:31:24.832]                         invokeRestart("muffleWarning")
[09:31:24.832]                     }
[09:31:24.832]                     else if (inherits(cond, "condition")) {
[09:31:24.832]                       if (!is.null(pattern)) {
[09:31:24.832]                         computeRestarts <- base::computeRestarts
[09:31:24.832]                         grepl <- base::grepl
[09:31:24.832]                         restarts <- computeRestarts(cond)
[09:31:24.832]                         for (restart in restarts) {
[09:31:24.832]                           name <- restart$name
[09:31:24.832]                           if (is.null(name)) 
[09:31:24.832]                             next
[09:31:24.832]                           if (!grepl(pattern, name)) 
[09:31:24.832]                             next
[09:31:24.832]                           invokeRestart(restart)
[09:31:24.832]                           muffled <- TRUE
[09:31:24.832]                           break
[09:31:24.832]                         }
[09:31:24.832]                       }
[09:31:24.832]                     }
[09:31:24.832]                     invisible(muffled)
[09:31:24.832]                   }
[09:31:24.832]                   muffleCondition(cond)
[09:31:24.832]                 })
[09:31:24.832]             }))
[09:31:24.832]             future::FutureResult(value = ...future.value$value, 
[09:31:24.832]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.832]                   ...future.rng), globalenv = if (FALSE) 
[09:31:24.832]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:24.832]                     ...future.globalenv.names))
[09:31:24.832]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:24.832]         }, condition = base::local({
[09:31:24.832]             c <- base::c
[09:31:24.832]             inherits <- base::inherits
[09:31:24.832]             invokeRestart <- base::invokeRestart
[09:31:24.832]             length <- base::length
[09:31:24.832]             list <- base::list
[09:31:24.832]             seq.int <- base::seq.int
[09:31:24.832]             signalCondition <- base::signalCondition
[09:31:24.832]             sys.calls <- base::sys.calls
[09:31:24.832]             `[[` <- base::`[[`
[09:31:24.832]             `+` <- base::`+`
[09:31:24.832]             `<<-` <- base::`<<-`
[09:31:24.832]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:24.832]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:24.832]                   3L)]
[09:31:24.832]             }
[09:31:24.832]             function(cond) {
[09:31:24.832]                 is_error <- inherits(cond, "error")
[09:31:24.832]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:24.832]                   NULL)
[09:31:24.832]                 if (is_error) {
[09:31:24.832]                   sessionInformation <- function() {
[09:31:24.832]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:24.832]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:24.832]                       search = base::search(), system = base::Sys.info())
[09:31:24.832]                   }
[09:31:24.832]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.832]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:24.832]                     cond$call), session = sessionInformation(), 
[09:31:24.832]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:24.832]                   signalCondition(cond)
[09:31:24.832]                 }
[09:31:24.832]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:24.832]                 "immediateCondition"))) {
[09:31:24.832]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:24.832]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.832]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:24.832]                   if (TRUE && !signal) {
[09:31:24.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.832]                     {
[09:31:24.832]                       inherits <- base::inherits
[09:31:24.832]                       invokeRestart <- base::invokeRestart
[09:31:24.832]                       is.null <- base::is.null
[09:31:24.832]                       muffled <- FALSE
[09:31:24.832]                       if (inherits(cond, "message")) {
[09:31:24.832]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.832]                         if (muffled) 
[09:31:24.832]                           invokeRestart("muffleMessage")
[09:31:24.832]                       }
[09:31:24.832]                       else if (inherits(cond, "warning")) {
[09:31:24.832]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.832]                         if (muffled) 
[09:31:24.832]                           invokeRestart("muffleWarning")
[09:31:24.832]                       }
[09:31:24.832]                       else if (inherits(cond, "condition")) {
[09:31:24.832]                         if (!is.null(pattern)) {
[09:31:24.832]                           computeRestarts <- base::computeRestarts
[09:31:24.832]                           grepl <- base::grepl
[09:31:24.832]                           restarts <- computeRestarts(cond)
[09:31:24.832]                           for (restart in restarts) {
[09:31:24.832]                             name <- restart$name
[09:31:24.832]                             if (is.null(name)) 
[09:31:24.832]                               next
[09:31:24.832]                             if (!grepl(pattern, name)) 
[09:31:24.832]                               next
[09:31:24.832]                             invokeRestart(restart)
[09:31:24.832]                             muffled <- TRUE
[09:31:24.832]                             break
[09:31:24.832]                           }
[09:31:24.832]                         }
[09:31:24.832]                       }
[09:31:24.832]                       invisible(muffled)
[09:31:24.832]                     }
[09:31:24.832]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.832]                   }
[09:31:24.832]                 }
[09:31:24.832]                 else {
[09:31:24.832]                   if (TRUE) {
[09:31:24.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.832]                     {
[09:31:24.832]                       inherits <- base::inherits
[09:31:24.832]                       invokeRestart <- base::invokeRestart
[09:31:24.832]                       is.null <- base::is.null
[09:31:24.832]                       muffled <- FALSE
[09:31:24.832]                       if (inherits(cond, "message")) {
[09:31:24.832]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.832]                         if (muffled) 
[09:31:24.832]                           invokeRestart("muffleMessage")
[09:31:24.832]                       }
[09:31:24.832]                       else if (inherits(cond, "warning")) {
[09:31:24.832]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.832]                         if (muffled) 
[09:31:24.832]                           invokeRestart("muffleWarning")
[09:31:24.832]                       }
[09:31:24.832]                       else if (inherits(cond, "condition")) {
[09:31:24.832]                         if (!is.null(pattern)) {
[09:31:24.832]                           computeRestarts <- base::computeRestarts
[09:31:24.832]                           grepl <- base::grepl
[09:31:24.832]                           restarts <- computeRestarts(cond)
[09:31:24.832]                           for (restart in restarts) {
[09:31:24.832]                             name <- restart$name
[09:31:24.832]                             if (is.null(name)) 
[09:31:24.832]                               next
[09:31:24.832]                             if (!grepl(pattern, name)) 
[09:31:24.832]                               next
[09:31:24.832]                             invokeRestart(restart)
[09:31:24.832]                             muffled <- TRUE
[09:31:24.832]                             break
[09:31:24.832]                           }
[09:31:24.832]                         }
[09:31:24.832]                       }
[09:31:24.832]                       invisible(muffled)
[09:31:24.832]                     }
[09:31:24.832]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.832]                   }
[09:31:24.832]                 }
[09:31:24.832]             }
[09:31:24.832]         }))
[09:31:24.832]     }, error = function(ex) {
[09:31:24.832]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:24.832]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.832]                 ...future.rng), started = ...future.startTime, 
[09:31:24.832]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:24.832]             version = "1.8"), class = "FutureResult")
[09:31:24.832]     }, finally = {
[09:31:24.832]         if (!identical(...future.workdir, getwd())) 
[09:31:24.832]             setwd(...future.workdir)
[09:31:24.832]         {
[09:31:24.832]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:24.832]                 ...future.oldOptions$nwarnings <- NULL
[09:31:24.832]             }
[09:31:24.832]             base::options(...future.oldOptions)
[09:31:24.832]             if (.Platform$OS.type == "windows") {
[09:31:24.832]                 old_names <- names(...future.oldEnvVars)
[09:31:24.832]                 envs <- base::Sys.getenv()
[09:31:24.832]                 names <- names(envs)
[09:31:24.832]                 common <- intersect(names, old_names)
[09:31:24.832]                 added <- setdiff(names, old_names)
[09:31:24.832]                 removed <- setdiff(old_names, names)
[09:31:24.832]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:24.832]                   envs[common]]
[09:31:24.832]                 NAMES <- toupper(changed)
[09:31:24.832]                 args <- list()
[09:31:24.832]                 for (kk in seq_along(NAMES)) {
[09:31:24.832]                   name <- changed[[kk]]
[09:31:24.832]                   NAME <- NAMES[[kk]]
[09:31:24.832]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.832]                     next
[09:31:24.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.832]                 }
[09:31:24.832]                 NAMES <- toupper(added)
[09:31:24.832]                 for (kk in seq_along(NAMES)) {
[09:31:24.832]                   name <- added[[kk]]
[09:31:24.832]                   NAME <- NAMES[[kk]]
[09:31:24.832]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.832]                     next
[09:31:24.832]                   args[[name]] <- ""
[09:31:24.832]                 }
[09:31:24.832]                 NAMES <- toupper(removed)
[09:31:24.832]                 for (kk in seq_along(NAMES)) {
[09:31:24.832]                   name <- removed[[kk]]
[09:31:24.832]                   NAME <- NAMES[[kk]]
[09:31:24.832]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.832]                     next
[09:31:24.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.832]                 }
[09:31:24.832]                 if (length(args) > 0) 
[09:31:24.832]                   base::do.call(base::Sys.setenv, args = args)
[09:31:24.832]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:24.832]             }
[09:31:24.832]             else {
[09:31:24.832]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:24.832]             }
[09:31:24.832]             {
[09:31:24.832]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:24.832]                   0L) {
[09:31:24.832]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:24.832]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:24.832]                   base::options(opts)
[09:31:24.832]                 }
[09:31:24.832]                 {
[09:31:24.832]                   {
[09:31:24.832]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:24.832]                     NULL
[09:31:24.832]                   }
[09:31:24.832]                   options(future.plan = NULL)
[09:31:24.832]                   if (is.na(NA_character_)) 
[09:31:24.832]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.832]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:24.832]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:24.832]                     .init = FALSE)
[09:31:24.832]                 }
[09:31:24.832]             }
[09:31:24.832]         }
[09:31:24.832]     })
[09:31:24.832]     if (TRUE) {
[09:31:24.832]         base::sink(type = "output", split = FALSE)
[09:31:24.832]         if (TRUE) {
[09:31:24.832]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:24.832]         }
[09:31:24.832]         else {
[09:31:24.832]             ...future.result["stdout"] <- base::list(NULL)
[09:31:24.832]         }
[09:31:24.832]         base::close(...future.stdout)
[09:31:24.832]         ...future.stdout <- NULL
[09:31:24.832]     }
[09:31:24.832]     ...future.result$conditions <- ...future.conditions
[09:31:24.832]     ...future.result$finished <- base::Sys.time()
[09:31:24.832]     ...future.result
[09:31:24.832] }
[09:31:24.834] requestCore(): workers = 2
[09:31:24.837] MulticoreFuture started
[09:31:24.842] - Launch lazy future ... done
[09:31:24.843] run() for ‘MulticoreFuture’ ... done
[09:31:24.843] plan(): Setting new future strategy stack:
[09:31:24.843] List of future strategies:
[09:31:24.843] 1. sequential:
[09:31:24.843]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.843]    - tweaked: FALSE
[09:31:24.843]    - call: NULL
[09:31:24.844] result() for MulticoreFuture ...
[09:31:24.844] plan(): nbrOfWorkers() = 1
[09:31:24.846] plan(): Setting new future strategy stack:
[09:31:24.846] List of future strategies:
[09:31:24.846] 1. multicore:
[09:31:24.846]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:24.846]    - tweaked: FALSE
[09:31:24.846]    - call: plan(strategy)
[09:31:24.851] plan(): nbrOfWorkers() = 2
[09:31:24.855] result() for MulticoreFuture ...
[09:31:24.856] result() for MulticoreFuture ... done
[09:31:24.856] result() for MulticoreFuture ... done
[09:31:24.856] result() for MulticoreFuture ...
[09:31:24.856] result() for MulticoreFuture ... done
[09:31:24.856] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:24.857] Searching for globals...
[09:31:24.857] - globals found: [1] ‘getOption’
[09:31:24.857] Searching for globals ... DONE
[09:31:24.858] Resolving globals: FALSE
[09:31:24.858] 
[09:31:24.858] 
[09:31:24.858] getGlobalsAndPackages() ... DONE
[09:31:24.858] run() for ‘Future’ ...
[09:31:24.858] - state: ‘created’
[09:31:24.859] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:24.862] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:24.863] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:24.863]   - Field: ‘label’
[09:31:24.863]   - Field: ‘local’
[09:31:24.863]   - Field: ‘owner’
[09:31:24.863]   - Field: ‘envir’
[09:31:24.863]   - Field: ‘workers’
[09:31:24.863]   - Field: ‘packages’
[09:31:24.863]   - Field: ‘gc’
[09:31:24.864]   - Field: ‘job’
[09:31:24.864]   - Field: ‘conditions’
[09:31:24.864]   - Field: ‘expr’
[09:31:24.864]   - Field: ‘uuid’
[09:31:24.864]   - Field: ‘seed’
[09:31:24.864]   - Field: ‘version’
[09:31:24.864]   - Field: ‘result’
[09:31:24.864]   - Field: ‘asynchronous’
[09:31:24.864]   - Field: ‘calls’
[09:31:24.865]   - Field: ‘globals’
[09:31:24.865]   - Field: ‘stdout’
[09:31:24.865]   - Field: ‘earlySignal’
[09:31:24.865]   - Field: ‘lazy’
[09:31:24.865]   - Field: ‘state’
[09:31:24.865] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:24.865] - Launch lazy future ...
[09:31:24.865] Packages needed by the future expression (n = 0): <none>
[09:31:24.866] Packages needed by future strategies (n = 0): <none>
[09:31:24.866] {
[09:31:24.866]     {
[09:31:24.866]         {
[09:31:24.866]             ...future.startTime <- base::Sys.time()
[09:31:24.866]             {
[09:31:24.866]                 {
[09:31:24.866]                   {
[09:31:24.866]                     {
[09:31:24.866]                       base::local({
[09:31:24.866]                         has_future <- base::requireNamespace("future", 
[09:31:24.866]                           quietly = TRUE)
[09:31:24.866]                         if (has_future) {
[09:31:24.866]                           ns <- base::getNamespace("future")
[09:31:24.866]                           version <- ns[[".package"]][["version"]]
[09:31:24.866]                           if (is.null(version)) 
[09:31:24.866]                             version <- utils::packageVersion("future")
[09:31:24.866]                         }
[09:31:24.866]                         else {
[09:31:24.866]                           version <- NULL
[09:31:24.866]                         }
[09:31:24.866]                         if (!has_future || version < "1.8.0") {
[09:31:24.866]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:24.866]                             "", base::R.version$version.string), 
[09:31:24.866]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:24.866]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:24.866]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:24.866]                               "release", "version")], collapse = " "), 
[09:31:24.866]                             hostname = base::Sys.info()[["nodename"]])
[09:31:24.866]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:24.866]                             info)
[09:31:24.866]                           info <- base::paste(info, collapse = "; ")
[09:31:24.866]                           if (!has_future) {
[09:31:24.866]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:24.866]                               info)
[09:31:24.866]                           }
[09:31:24.866]                           else {
[09:31:24.866]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:24.866]                               info, version)
[09:31:24.866]                           }
[09:31:24.866]                           base::stop(msg)
[09:31:24.866]                         }
[09:31:24.866]                       })
[09:31:24.866]                     }
[09:31:24.866]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:24.866]                     base::options(mc.cores = 1L)
[09:31:24.866]                   }
[09:31:24.866]                   ...future.strategy.old <- future::plan("list")
[09:31:24.866]                   options(future.plan = NULL)
[09:31:24.866]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.866]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:24.866]                 }
[09:31:24.866]                 ...future.workdir <- getwd()
[09:31:24.866]             }
[09:31:24.866]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:24.866]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:24.866]         }
[09:31:24.866]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:24.866]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:24.866]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:24.866]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:24.866]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:24.866]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:24.866]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:24.866]             base::names(...future.oldOptions))
[09:31:24.866]     }
[09:31:24.866]     if (FALSE) {
[09:31:24.866]     }
[09:31:24.866]     else {
[09:31:24.866]         if (TRUE) {
[09:31:24.866]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:24.866]                 open = "w")
[09:31:24.866]         }
[09:31:24.866]         else {
[09:31:24.866]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:24.866]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:24.866]         }
[09:31:24.866]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:24.866]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:24.866]             base::sink(type = "output", split = FALSE)
[09:31:24.866]             base::close(...future.stdout)
[09:31:24.866]         }, add = TRUE)
[09:31:24.866]     }
[09:31:24.866]     ...future.frame <- base::sys.nframe()
[09:31:24.866]     ...future.conditions <- base::list()
[09:31:24.866]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:24.866]     if (FALSE) {
[09:31:24.866]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:24.866]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:24.866]     }
[09:31:24.866]     ...future.result <- base::tryCatch({
[09:31:24.866]         base::withCallingHandlers({
[09:31:24.866]             ...future.value <- base::withVisible(base::local({
[09:31:24.866]                 withCallingHandlers({
[09:31:24.866]                   getOption("future.globals.onMissing")
[09:31:24.866]                 }, immediateCondition = function(cond) {
[09:31:24.866]                   save_rds <- function (object, pathname, ...) 
[09:31:24.866]                   {
[09:31:24.866]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:24.866]                     if (file_test("-f", pathname_tmp)) {
[09:31:24.866]                       fi_tmp <- file.info(pathname_tmp)
[09:31:24.866]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:24.866]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:24.866]                         fi_tmp[["mtime"]])
[09:31:24.866]                     }
[09:31:24.866]                     tryCatch({
[09:31:24.866]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:24.866]                     }, error = function(ex) {
[09:31:24.866]                       msg <- conditionMessage(ex)
[09:31:24.866]                       fi_tmp <- file.info(pathname_tmp)
[09:31:24.866]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:24.866]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:24.866]                         fi_tmp[["mtime"]], msg)
[09:31:24.866]                       ex$message <- msg
[09:31:24.866]                       stop(ex)
[09:31:24.866]                     })
[09:31:24.866]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:24.866]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:24.866]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:24.866]                       fi_tmp <- file.info(pathname_tmp)
[09:31:24.866]                       fi <- file.info(pathname)
[09:31:24.866]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:24.866]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:24.866]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:24.866]                         fi[["size"]], fi[["mtime"]])
[09:31:24.866]                       stop(msg)
[09:31:24.866]                     }
[09:31:24.866]                     invisible(pathname)
[09:31:24.866]                   }
[09:31:24.866]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:24.866]                     rootPath = tempdir()) 
[09:31:24.866]                   {
[09:31:24.866]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:24.866]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:24.866]                       tmpdir = path, fileext = ".rds")
[09:31:24.866]                     save_rds(obj, file)
[09:31:24.866]                   }
[09:31:24.866]                   saveImmediateCondition(cond, path = "/tmp/RtmpUzkrDI/.future/immediateConditions")
[09:31:24.866]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.866]                   {
[09:31:24.866]                     inherits <- base::inherits
[09:31:24.866]                     invokeRestart <- base::invokeRestart
[09:31:24.866]                     is.null <- base::is.null
[09:31:24.866]                     muffled <- FALSE
[09:31:24.866]                     if (inherits(cond, "message")) {
[09:31:24.866]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:24.866]                       if (muffled) 
[09:31:24.866]                         invokeRestart("muffleMessage")
[09:31:24.866]                     }
[09:31:24.866]                     else if (inherits(cond, "warning")) {
[09:31:24.866]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:24.866]                       if (muffled) 
[09:31:24.866]                         invokeRestart("muffleWarning")
[09:31:24.866]                     }
[09:31:24.866]                     else if (inherits(cond, "condition")) {
[09:31:24.866]                       if (!is.null(pattern)) {
[09:31:24.866]                         computeRestarts <- base::computeRestarts
[09:31:24.866]                         grepl <- base::grepl
[09:31:24.866]                         restarts <- computeRestarts(cond)
[09:31:24.866]                         for (restart in restarts) {
[09:31:24.866]                           name <- restart$name
[09:31:24.866]                           if (is.null(name)) 
[09:31:24.866]                             next
[09:31:24.866]                           if (!grepl(pattern, name)) 
[09:31:24.866]                             next
[09:31:24.866]                           invokeRestart(restart)
[09:31:24.866]                           muffled <- TRUE
[09:31:24.866]                           break
[09:31:24.866]                         }
[09:31:24.866]                       }
[09:31:24.866]                     }
[09:31:24.866]                     invisible(muffled)
[09:31:24.866]                   }
[09:31:24.866]                   muffleCondition(cond)
[09:31:24.866]                 })
[09:31:24.866]             }))
[09:31:24.866]             future::FutureResult(value = ...future.value$value, 
[09:31:24.866]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.866]                   ...future.rng), globalenv = if (FALSE) 
[09:31:24.866]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:24.866]                     ...future.globalenv.names))
[09:31:24.866]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:24.866]         }, condition = base::local({
[09:31:24.866]             c <- base::c
[09:31:24.866]             inherits <- base::inherits
[09:31:24.866]             invokeRestart <- base::invokeRestart
[09:31:24.866]             length <- base::length
[09:31:24.866]             list <- base::list
[09:31:24.866]             seq.int <- base::seq.int
[09:31:24.866]             signalCondition <- base::signalCondition
[09:31:24.866]             sys.calls <- base::sys.calls
[09:31:24.866]             `[[` <- base::`[[`
[09:31:24.866]             `+` <- base::`+`
[09:31:24.866]             `<<-` <- base::`<<-`
[09:31:24.866]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:24.866]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:24.866]                   3L)]
[09:31:24.866]             }
[09:31:24.866]             function(cond) {
[09:31:24.866]                 is_error <- inherits(cond, "error")
[09:31:24.866]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:24.866]                   NULL)
[09:31:24.866]                 if (is_error) {
[09:31:24.866]                   sessionInformation <- function() {
[09:31:24.866]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:24.866]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:24.866]                       search = base::search(), system = base::Sys.info())
[09:31:24.866]                   }
[09:31:24.866]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.866]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:24.866]                     cond$call), session = sessionInformation(), 
[09:31:24.866]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:24.866]                   signalCondition(cond)
[09:31:24.866]                 }
[09:31:24.866]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:24.866]                 "immediateCondition"))) {
[09:31:24.866]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:24.866]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.866]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:24.866]                   if (TRUE && !signal) {
[09:31:24.866]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.866]                     {
[09:31:24.866]                       inherits <- base::inherits
[09:31:24.866]                       invokeRestart <- base::invokeRestart
[09:31:24.866]                       is.null <- base::is.null
[09:31:24.866]                       muffled <- FALSE
[09:31:24.866]                       if (inherits(cond, "message")) {
[09:31:24.866]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.866]                         if (muffled) 
[09:31:24.866]                           invokeRestart("muffleMessage")
[09:31:24.866]                       }
[09:31:24.866]                       else if (inherits(cond, "warning")) {
[09:31:24.866]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.866]                         if (muffled) 
[09:31:24.866]                           invokeRestart("muffleWarning")
[09:31:24.866]                       }
[09:31:24.866]                       else if (inherits(cond, "condition")) {
[09:31:24.866]                         if (!is.null(pattern)) {
[09:31:24.866]                           computeRestarts <- base::computeRestarts
[09:31:24.866]                           grepl <- base::grepl
[09:31:24.866]                           restarts <- computeRestarts(cond)
[09:31:24.866]                           for (restart in restarts) {
[09:31:24.866]                             name <- restart$name
[09:31:24.866]                             if (is.null(name)) 
[09:31:24.866]                               next
[09:31:24.866]                             if (!grepl(pattern, name)) 
[09:31:24.866]                               next
[09:31:24.866]                             invokeRestart(restart)
[09:31:24.866]                             muffled <- TRUE
[09:31:24.866]                             break
[09:31:24.866]                           }
[09:31:24.866]                         }
[09:31:24.866]                       }
[09:31:24.866]                       invisible(muffled)
[09:31:24.866]                     }
[09:31:24.866]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.866]                   }
[09:31:24.866]                 }
[09:31:24.866]                 else {
[09:31:24.866]                   if (TRUE) {
[09:31:24.866]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.866]                     {
[09:31:24.866]                       inherits <- base::inherits
[09:31:24.866]                       invokeRestart <- base::invokeRestart
[09:31:24.866]                       is.null <- base::is.null
[09:31:24.866]                       muffled <- FALSE
[09:31:24.866]                       if (inherits(cond, "message")) {
[09:31:24.866]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.866]                         if (muffled) 
[09:31:24.866]                           invokeRestart("muffleMessage")
[09:31:24.866]                       }
[09:31:24.866]                       else if (inherits(cond, "warning")) {
[09:31:24.866]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.866]                         if (muffled) 
[09:31:24.866]                           invokeRestart("muffleWarning")
[09:31:24.866]                       }
[09:31:24.866]                       else if (inherits(cond, "condition")) {
[09:31:24.866]                         if (!is.null(pattern)) {
[09:31:24.866]                           computeRestarts <- base::computeRestarts
[09:31:24.866]                           grepl <- base::grepl
[09:31:24.866]                           restarts <- computeRestarts(cond)
[09:31:24.866]                           for (restart in restarts) {
[09:31:24.866]                             name <- restart$name
[09:31:24.866]                             if (is.null(name)) 
[09:31:24.866]                               next
[09:31:24.866]                             if (!grepl(pattern, name)) 
[09:31:24.866]                               next
[09:31:24.866]                             invokeRestart(restart)
[09:31:24.866]                             muffled <- TRUE
[09:31:24.866]                             break
[09:31:24.866]                           }
[09:31:24.866]                         }
[09:31:24.866]                       }
[09:31:24.866]                       invisible(muffled)
[09:31:24.866]                     }
[09:31:24.866]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.866]                   }
[09:31:24.866]                 }
[09:31:24.866]             }
[09:31:24.866]         }))
[09:31:24.866]     }, error = function(ex) {
[09:31:24.866]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:24.866]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.866]                 ...future.rng), started = ...future.startTime, 
[09:31:24.866]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:24.866]             version = "1.8"), class = "FutureResult")
[09:31:24.866]     }, finally = {
[09:31:24.866]         if (!identical(...future.workdir, getwd())) 
[09:31:24.866]             setwd(...future.workdir)
[09:31:24.866]         {
[09:31:24.866]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:24.866]                 ...future.oldOptions$nwarnings <- NULL
[09:31:24.866]             }
[09:31:24.866]             base::options(...future.oldOptions)
[09:31:24.866]             if (.Platform$OS.type == "windows") {
[09:31:24.866]                 old_names <- names(...future.oldEnvVars)
[09:31:24.866]                 envs <- base::Sys.getenv()
[09:31:24.866]                 names <- names(envs)
[09:31:24.866]                 common <- intersect(names, old_names)
[09:31:24.866]                 added <- setdiff(names, old_names)
[09:31:24.866]                 removed <- setdiff(old_names, names)
[09:31:24.866]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:24.866]                   envs[common]]
[09:31:24.866]                 NAMES <- toupper(changed)
[09:31:24.866]                 args <- list()
[09:31:24.866]                 for (kk in seq_along(NAMES)) {
[09:31:24.866]                   name <- changed[[kk]]
[09:31:24.866]                   NAME <- NAMES[[kk]]
[09:31:24.866]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.866]                     next
[09:31:24.866]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.866]                 }
[09:31:24.866]                 NAMES <- toupper(added)
[09:31:24.866]                 for (kk in seq_along(NAMES)) {
[09:31:24.866]                   name <- added[[kk]]
[09:31:24.866]                   NAME <- NAMES[[kk]]
[09:31:24.866]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.866]                     next
[09:31:24.866]                   args[[name]] <- ""
[09:31:24.866]                 }
[09:31:24.866]                 NAMES <- toupper(removed)
[09:31:24.866]                 for (kk in seq_along(NAMES)) {
[09:31:24.866]                   name <- removed[[kk]]
[09:31:24.866]                   NAME <- NAMES[[kk]]
[09:31:24.866]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.866]                     next
[09:31:24.866]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.866]                 }
[09:31:24.866]                 if (length(args) > 0) 
[09:31:24.866]                   base::do.call(base::Sys.setenv, args = args)
[09:31:24.866]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:24.866]             }
[09:31:24.866]             else {
[09:31:24.866]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:24.866]             }
[09:31:24.866]             {
[09:31:24.866]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:24.866]                   0L) {
[09:31:24.866]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:24.866]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:24.866]                   base::options(opts)
[09:31:24.866]                 }
[09:31:24.866]                 {
[09:31:24.866]                   {
[09:31:24.866]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:24.866]                     NULL
[09:31:24.866]                   }
[09:31:24.866]                   options(future.plan = NULL)
[09:31:24.866]                   if (is.na(NA_character_)) 
[09:31:24.866]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.866]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:24.866]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:24.866]                     .init = FALSE)
[09:31:24.866]                 }
[09:31:24.866]             }
[09:31:24.866]         }
[09:31:24.866]     })
[09:31:24.866]     if (TRUE) {
[09:31:24.866]         base::sink(type = "output", split = FALSE)
[09:31:24.866]         if (TRUE) {
[09:31:24.866]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:24.866]         }
[09:31:24.866]         else {
[09:31:24.866]             ...future.result["stdout"] <- base::list(NULL)
[09:31:24.866]         }
[09:31:24.866]         base::close(...future.stdout)
[09:31:24.866]         ...future.stdout <- NULL
[09:31:24.866]     }
[09:31:24.866]     ...future.result$conditions <- ...future.conditions
[09:31:24.866]     ...future.result$finished <- base::Sys.time()
[09:31:24.866]     ...future.result
[09:31:24.866] }
[09:31:24.868] requestCore(): workers = 2
[09:31:24.870] MulticoreFuture started
[09:31:24.870] - Launch lazy future ... done
[09:31:24.871] run() for ‘MulticoreFuture’ ... done
[09:31:24.871] result() for MulticoreFuture ...
[09:31:24.871] plan(): Setting new future strategy stack:
[09:31:24.871] List of future strategies:
[09:31:24.871] 1. sequential:
[09:31:24.871]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.871]    - tweaked: FALSE
[09:31:24.871]    - call: NULL
[09:31:24.872] plan(): nbrOfWorkers() = 1
[09:31:24.874] plan(): Setting new future strategy stack:
[09:31:24.874] List of future strategies:
[09:31:24.874] 1. multicore:
[09:31:24.874]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:24.874]    - tweaked: FALSE
[09:31:24.874]    - call: plan(strategy)
[09:31:24.879] plan(): nbrOfWorkers() = 2
[09:31:24.880] result() for MulticoreFuture ...
[09:31:24.880] result() for MulticoreFuture ... done
[09:31:24.881] result() for MulticoreFuture ... done
[09:31:24.881] result() for MulticoreFuture ...
[09:31:24.881] result() for MulticoreFuture ... done
[09:31:24.881] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[09:31:24.882] Searching for globals...
[09:31:24.883] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:24.883] Searching for globals...
[09:31:24.884] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[09:31:24.885] Searching for globals ... DONE
[09:31:24.885] Resolving globals: FALSE
[09:31:24.885] The total size of the 1 globals is 160 bytes (160 bytes)
[09:31:24.886] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[09:31:24.886] - globals: [1] ‘data’
[09:31:24.886] 
[09:31:24.886] getGlobalsAndPackages() ... DONE
[09:31:24.887] run() for ‘Future’ ...
[09:31:24.887] - state: ‘created’
[09:31:24.887] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:24.891] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:24.891] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:24.891]   - Field: ‘label’
[09:31:24.891]   - Field: ‘local’
[09:31:24.891]   - Field: ‘owner’
[09:31:24.891]   - Field: ‘envir’
[09:31:24.891]   - Field: ‘workers’
[09:31:24.891]   - Field: ‘packages’
[09:31:24.892]   - Field: ‘gc’
[09:31:24.892]   - Field: ‘job’
[09:31:24.892]   - Field: ‘conditions’
[09:31:24.892]   - Field: ‘expr’
[09:31:24.892]   - Field: ‘uuid’
[09:31:24.892]   - Field: ‘seed’
[09:31:24.892]   - Field: ‘version’
[09:31:24.892]   - Field: ‘result’
[09:31:24.892]   - Field: ‘asynchronous’
[09:31:24.893]   - Field: ‘calls’
[09:31:24.893]   - Field: ‘globals’
[09:31:24.893]   - Field: ‘stdout’
[09:31:24.893]   - Field: ‘earlySignal’
[09:31:24.893]   - Field: ‘lazy’
[09:31:24.893]   - Field: ‘state’
[09:31:24.893] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:24.893] - Launch lazy future ...
[09:31:24.894] Packages needed by the future expression (n = 0): <none>
[09:31:24.894] Packages needed by future strategies (n = 0): <none>
[09:31:24.894] {
[09:31:24.894]     {
[09:31:24.894]         {
[09:31:24.894]             ...future.startTime <- base::Sys.time()
[09:31:24.894]             {
[09:31:24.894]                 {
[09:31:24.894]                   {
[09:31:24.894]                     {
[09:31:24.894]                       base::local({
[09:31:24.894]                         has_future <- base::requireNamespace("future", 
[09:31:24.894]                           quietly = TRUE)
[09:31:24.894]                         if (has_future) {
[09:31:24.894]                           ns <- base::getNamespace("future")
[09:31:24.894]                           version <- ns[[".package"]][["version"]]
[09:31:24.894]                           if (is.null(version)) 
[09:31:24.894]                             version <- utils::packageVersion("future")
[09:31:24.894]                         }
[09:31:24.894]                         else {
[09:31:24.894]                           version <- NULL
[09:31:24.894]                         }
[09:31:24.894]                         if (!has_future || version < "1.8.0") {
[09:31:24.894]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:24.894]                             "", base::R.version$version.string), 
[09:31:24.894]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:24.894]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:24.894]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:24.894]                               "release", "version")], collapse = " "), 
[09:31:24.894]                             hostname = base::Sys.info()[["nodename"]])
[09:31:24.894]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:24.894]                             info)
[09:31:24.894]                           info <- base::paste(info, collapse = "; ")
[09:31:24.894]                           if (!has_future) {
[09:31:24.894]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:24.894]                               info)
[09:31:24.894]                           }
[09:31:24.894]                           else {
[09:31:24.894]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:24.894]                               info, version)
[09:31:24.894]                           }
[09:31:24.894]                           base::stop(msg)
[09:31:24.894]                         }
[09:31:24.894]                       })
[09:31:24.894]                     }
[09:31:24.894]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:24.894]                     base::options(mc.cores = 1L)
[09:31:24.894]                   }
[09:31:24.894]                   ...future.strategy.old <- future::plan("list")
[09:31:24.894]                   options(future.plan = NULL)
[09:31:24.894]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.894]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:24.894]                 }
[09:31:24.894]                 ...future.workdir <- getwd()
[09:31:24.894]             }
[09:31:24.894]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:24.894]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:24.894]         }
[09:31:24.894]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:24.894]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:24.894]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:24.894]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:24.894]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:24.894]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:24.894]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:24.894]             base::names(...future.oldOptions))
[09:31:24.894]     }
[09:31:24.894]     if (FALSE) {
[09:31:24.894]     }
[09:31:24.894]     else {
[09:31:24.894]         if (TRUE) {
[09:31:24.894]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:24.894]                 open = "w")
[09:31:24.894]         }
[09:31:24.894]         else {
[09:31:24.894]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:24.894]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:24.894]         }
[09:31:24.894]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:24.894]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:24.894]             base::sink(type = "output", split = FALSE)
[09:31:24.894]             base::close(...future.stdout)
[09:31:24.894]         }, add = TRUE)
[09:31:24.894]     }
[09:31:24.894]     ...future.frame <- base::sys.nframe()
[09:31:24.894]     ...future.conditions <- base::list()
[09:31:24.894]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:24.894]     if (FALSE) {
[09:31:24.894]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:24.894]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:24.894]     }
[09:31:24.894]     ...future.result <- base::tryCatch({
[09:31:24.894]         base::withCallingHandlers({
[09:31:24.894]             ...future.value <- base::withVisible(base::local({
[09:31:24.894]                 withCallingHandlers({
[09:31:24.894]                   subset(data, x < 3)$y
[09:31:24.894]                 }, immediateCondition = function(cond) {
[09:31:24.894]                   save_rds <- function (object, pathname, ...) 
[09:31:24.894]                   {
[09:31:24.894]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:24.894]                     if (file_test("-f", pathname_tmp)) {
[09:31:24.894]                       fi_tmp <- file.info(pathname_tmp)
[09:31:24.894]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:24.894]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:24.894]                         fi_tmp[["mtime"]])
[09:31:24.894]                     }
[09:31:24.894]                     tryCatch({
[09:31:24.894]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:24.894]                     }, error = function(ex) {
[09:31:24.894]                       msg <- conditionMessage(ex)
[09:31:24.894]                       fi_tmp <- file.info(pathname_tmp)
[09:31:24.894]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:24.894]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:24.894]                         fi_tmp[["mtime"]], msg)
[09:31:24.894]                       ex$message <- msg
[09:31:24.894]                       stop(ex)
[09:31:24.894]                     })
[09:31:24.894]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:24.894]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:24.894]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:24.894]                       fi_tmp <- file.info(pathname_tmp)
[09:31:24.894]                       fi <- file.info(pathname)
[09:31:24.894]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:24.894]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:24.894]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:24.894]                         fi[["size"]], fi[["mtime"]])
[09:31:24.894]                       stop(msg)
[09:31:24.894]                     }
[09:31:24.894]                     invisible(pathname)
[09:31:24.894]                   }
[09:31:24.894]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:24.894]                     rootPath = tempdir()) 
[09:31:24.894]                   {
[09:31:24.894]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:24.894]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:24.894]                       tmpdir = path, fileext = ".rds")
[09:31:24.894]                     save_rds(obj, file)
[09:31:24.894]                   }
[09:31:24.894]                   saveImmediateCondition(cond, path = "/tmp/RtmpUzkrDI/.future/immediateConditions")
[09:31:24.894]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.894]                   {
[09:31:24.894]                     inherits <- base::inherits
[09:31:24.894]                     invokeRestart <- base::invokeRestart
[09:31:24.894]                     is.null <- base::is.null
[09:31:24.894]                     muffled <- FALSE
[09:31:24.894]                     if (inherits(cond, "message")) {
[09:31:24.894]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:24.894]                       if (muffled) 
[09:31:24.894]                         invokeRestart("muffleMessage")
[09:31:24.894]                     }
[09:31:24.894]                     else if (inherits(cond, "warning")) {
[09:31:24.894]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:24.894]                       if (muffled) 
[09:31:24.894]                         invokeRestart("muffleWarning")
[09:31:24.894]                     }
[09:31:24.894]                     else if (inherits(cond, "condition")) {
[09:31:24.894]                       if (!is.null(pattern)) {
[09:31:24.894]                         computeRestarts <- base::computeRestarts
[09:31:24.894]                         grepl <- base::grepl
[09:31:24.894]                         restarts <- computeRestarts(cond)
[09:31:24.894]                         for (restart in restarts) {
[09:31:24.894]                           name <- restart$name
[09:31:24.894]                           if (is.null(name)) 
[09:31:24.894]                             next
[09:31:24.894]                           if (!grepl(pattern, name)) 
[09:31:24.894]                             next
[09:31:24.894]                           invokeRestart(restart)
[09:31:24.894]                           muffled <- TRUE
[09:31:24.894]                           break
[09:31:24.894]                         }
[09:31:24.894]                       }
[09:31:24.894]                     }
[09:31:24.894]                     invisible(muffled)
[09:31:24.894]                   }
[09:31:24.894]                   muffleCondition(cond)
[09:31:24.894]                 })
[09:31:24.894]             }))
[09:31:24.894]             future::FutureResult(value = ...future.value$value, 
[09:31:24.894]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.894]                   ...future.rng), globalenv = if (FALSE) 
[09:31:24.894]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:24.894]                     ...future.globalenv.names))
[09:31:24.894]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:24.894]         }, condition = base::local({
[09:31:24.894]             c <- base::c
[09:31:24.894]             inherits <- base::inherits
[09:31:24.894]             invokeRestart <- base::invokeRestart
[09:31:24.894]             length <- base::length
[09:31:24.894]             list <- base::list
[09:31:24.894]             seq.int <- base::seq.int
[09:31:24.894]             signalCondition <- base::signalCondition
[09:31:24.894]             sys.calls <- base::sys.calls
[09:31:24.894]             `[[` <- base::`[[`
[09:31:24.894]             `+` <- base::`+`
[09:31:24.894]             `<<-` <- base::`<<-`
[09:31:24.894]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:24.894]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:24.894]                   3L)]
[09:31:24.894]             }
[09:31:24.894]             function(cond) {
[09:31:24.894]                 is_error <- inherits(cond, "error")
[09:31:24.894]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:24.894]                   NULL)
[09:31:24.894]                 if (is_error) {
[09:31:24.894]                   sessionInformation <- function() {
[09:31:24.894]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:24.894]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:24.894]                       search = base::search(), system = base::Sys.info())
[09:31:24.894]                   }
[09:31:24.894]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.894]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:24.894]                     cond$call), session = sessionInformation(), 
[09:31:24.894]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:24.894]                   signalCondition(cond)
[09:31:24.894]                 }
[09:31:24.894]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:24.894]                 "immediateCondition"))) {
[09:31:24.894]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:24.894]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.894]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:24.894]                   if (TRUE && !signal) {
[09:31:24.894]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.894]                     {
[09:31:24.894]                       inherits <- base::inherits
[09:31:24.894]                       invokeRestart <- base::invokeRestart
[09:31:24.894]                       is.null <- base::is.null
[09:31:24.894]                       muffled <- FALSE
[09:31:24.894]                       if (inherits(cond, "message")) {
[09:31:24.894]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.894]                         if (muffled) 
[09:31:24.894]                           invokeRestart("muffleMessage")
[09:31:24.894]                       }
[09:31:24.894]                       else if (inherits(cond, "warning")) {
[09:31:24.894]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.894]                         if (muffled) 
[09:31:24.894]                           invokeRestart("muffleWarning")
[09:31:24.894]                       }
[09:31:24.894]                       else if (inherits(cond, "condition")) {
[09:31:24.894]                         if (!is.null(pattern)) {
[09:31:24.894]                           computeRestarts <- base::computeRestarts
[09:31:24.894]                           grepl <- base::grepl
[09:31:24.894]                           restarts <- computeRestarts(cond)
[09:31:24.894]                           for (restart in restarts) {
[09:31:24.894]                             name <- restart$name
[09:31:24.894]                             if (is.null(name)) 
[09:31:24.894]                               next
[09:31:24.894]                             if (!grepl(pattern, name)) 
[09:31:24.894]                               next
[09:31:24.894]                             invokeRestart(restart)
[09:31:24.894]                             muffled <- TRUE
[09:31:24.894]                             break
[09:31:24.894]                           }
[09:31:24.894]                         }
[09:31:24.894]                       }
[09:31:24.894]                       invisible(muffled)
[09:31:24.894]                     }
[09:31:24.894]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.894]                   }
[09:31:24.894]                 }
[09:31:24.894]                 else {
[09:31:24.894]                   if (TRUE) {
[09:31:24.894]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.894]                     {
[09:31:24.894]                       inherits <- base::inherits
[09:31:24.894]                       invokeRestart <- base::invokeRestart
[09:31:24.894]                       is.null <- base::is.null
[09:31:24.894]                       muffled <- FALSE
[09:31:24.894]                       if (inherits(cond, "message")) {
[09:31:24.894]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.894]                         if (muffled) 
[09:31:24.894]                           invokeRestart("muffleMessage")
[09:31:24.894]                       }
[09:31:24.894]                       else if (inherits(cond, "warning")) {
[09:31:24.894]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.894]                         if (muffled) 
[09:31:24.894]                           invokeRestart("muffleWarning")
[09:31:24.894]                       }
[09:31:24.894]                       else if (inherits(cond, "condition")) {
[09:31:24.894]                         if (!is.null(pattern)) {
[09:31:24.894]                           computeRestarts <- base::computeRestarts
[09:31:24.894]                           grepl <- base::grepl
[09:31:24.894]                           restarts <- computeRestarts(cond)
[09:31:24.894]                           for (restart in restarts) {
[09:31:24.894]                             name <- restart$name
[09:31:24.894]                             if (is.null(name)) 
[09:31:24.894]                               next
[09:31:24.894]                             if (!grepl(pattern, name)) 
[09:31:24.894]                               next
[09:31:24.894]                             invokeRestart(restart)
[09:31:24.894]                             muffled <- TRUE
[09:31:24.894]                             break
[09:31:24.894]                           }
[09:31:24.894]                         }
[09:31:24.894]                       }
[09:31:24.894]                       invisible(muffled)
[09:31:24.894]                     }
[09:31:24.894]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.894]                   }
[09:31:24.894]                 }
[09:31:24.894]             }
[09:31:24.894]         }))
[09:31:24.894]     }, error = function(ex) {
[09:31:24.894]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:24.894]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.894]                 ...future.rng), started = ...future.startTime, 
[09:31:24.894]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:24.894]             version = "1.8"), class = "FutureResult")
[09:31:24.894]     }, finally = {
[09:31:24.894]         if (!identical(...future.workdir, getwd())) 
[09:31:24.894]             setwd(...future.workdir)
[09:31:24.894]         {
[09:31:24.894]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:24.894]                 ...future.oldOptions$nwarnings <- NULL
[09:31:24.894]             }
[09:31:24.894]             base::options(...future.oldOptions)
[09:31:24.894]             if (.Platform$OS.type == "windows") {
[09:31:24.894]                 old_names <- names(...future.oldEnvVars)
[09:31:24.894]                 envs <- base::Sys.getenv()
[09:31:24.894]                 names <- names(envs)
[09:31:24.894]                 common <- intersect(names, old_names)
[09:31:24.894]                 added <- setdiff(names, old_names)
[09:31:24.894]                 removed <- setdiff(old_names, names)
[09:31:24.894]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:24.894]                   envs[common]]
[09:31:24.894]                 NAMES <- toupper(changed)
[09:31:24.894]                 args <- list()
[09:31:24.894]                 for (kk in seq_along(NAMES)) {
[09:31:24.894]                   name <- changed[[kk]]
[09:31:24.894]                   NAME <- NAMES[[kk]]
[09:31:24.894]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.894]                     next
[09:31:24.894]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.894]                 }
[09:31:24.894]                 NAMES <- toupper(added)
[09:31:24.894]                 for (kk in seq_along(NAMES)) {
[09:31:24.894]                   name <- added[[kk]]
[09:31:24.894]                   NAME <- NAMES[[kk]]
[09:31:24.894]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.894]                     next
[09:31:24.894]                   args[[name]] <- ""
[09:31:24.894]                 }
[09:31:24.894]                 NAMES <- toupper(removed)
[09:31:24.894]                 for (kk in seq_along(NAMES)) {
[09:31:24.894]                   name <- removed[[kk]]
[09:31:24.894]                   NAME <- NAMES[[kk]]
[09:31:24.894]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.894]                     next
[09:31:24.894]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.894]                 }
[09:31:24.894]                 if (length(args) > 0) 
[09:31:24.894]                   base::do.call(base::Sys.setenv, args = args)
[09:31:24.894]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:24.894]             }
[09:31:24.894]             else {
[09:31:24.894]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:24.894]             }
[09:31:24.894]             {
[09:31:24.894]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:24.894]                   0L) {
[09:31:24.894]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:24.894]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:24.894]                   base::options(opts)
[09:31:24.894]                 }
[09:31:24.894]                 {
[09:31:24.894]                   {
[09:31:24.894]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:24.894]                     NULL
[09:31:24.894]                   }
[09:31:24.894]                   options(future.plan = NULL)
[09:31:24.894]                   if (is.na(NA_character_)) 
[09:31:24.894]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.894]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:24.894]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:24.894]                     .init = FALSE)
[09:31:24.894]                 }
[09:31:24.894]             }
[09:31:24.894]         }
[09:31:24.894]     })
[09:31:24.894]     if (TRUE) {
[09:31:24.894]         base::sink(type = "output", split = FALSE)
[09:31:24.894]         if (TRUE) {
[09:31:24.894]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:24.894]         }
[09:31:24.894]         else {
[09:31:24.894]             ...future.result["stdout"] <- base::list(NULL)
[09:31:24.894]         }
[09:31:24.894]         base::close(...future.stdout)
[09:31:24.894]         ...future.stdout <- NULL
[09:31:24.894]     }
[09:31:24.894]     ...future.result$conditions <- ...future.conditions
[09:31:24.894]     ...future.result$finished <- base::Sys.time()
[09:31:24.894]     ...future.result
[09:31:24.894] }
[09:31:24.897] assign_globals() ...
[09:31:24.897] List of 1
[09:31:24.897]  $ data:'data.frame':	5 obs. of  2 variables:
[09:31:24.897]   ..$ x: int [1:5] 1 2 3 4 5
[09:31:24.897]   ..$ y: int [1:5] 1 2 3 4 5
[09:31:24.897]  - attr(*, "where")=List of 1
[09:31:24.897]   ..$ data:<environment: R_EmptyEnv> 
[09:31:24.897]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:24.897]  - attr(*, "resolved")= logi FALSE
[09:31:24.897]  - attr(*, "total_size")= num 160
[09:31:24.897]  - attr(*, "already-done")= logi TRUE
[09:31:24.902] - copied ‘data’ to environment
[09:31:24.903] assign_globals() ... done
[09:31:24.903] requestCore(): workers = 2
[09:31:24.905] MulticoreFuture started
[09:31:24.905] - Launch lazy future ... done
[09:31:24.905] run() for ‘MulticoreFuture’ ... done
[09:31:24.906] plan(): Setting new future strategy stack:
[09:31:24.906] result() for MulticoreFuture ...
[09:31:24.906] List of future strategies:
[09:31:24.906] 1. sequential:
[09:31:24.906]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.906]    - tweaked: FALSE
[09:31:24.906]    - call: NULL
[09:31:24.907] plan(): nbrOfWorkers() = 1
[09:31:24.909] plan(): Setting new future strategy stack:
[09:31:24.909] List of future strategies:
[09:31:24.909] 1. multicore:
[09:31:24.909]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:24.909]    - tweaked: FALSE
[09:31:24.909]    - call: plan(strategy)
[09:31:24.914] plan(): nbrOfWorkers() = 2
[09:31:24.915] result() for MulticoreFuture ...
[09:31:24.915] result() for MulticoreFuture ... done
[09:31:24.916] result() for MulticoreFuture ... done
[09:31:24.916] result() for MulticoreFuture ...
[09:31:24.916] result() for MulticoreFuture ... done
[09:31:24.916] plan(): Setting new future strategy stack:
[09:31:24.916] List of future strategies:
[09:31:24.916] 1. sequential:
[09:31:24.916]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.916]    - tweaked: FALSE
[09:31:24.916]    - call: plan(list(sequential, strategy))
[09:31:24.916] 2. multicore:
[09:31:24.916]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:24.916]    - tweaked: FALSE
[09:31:24.916]    - call: plan(list(sequential, strategy))
[09:31:24.917] plan(): nbrOfWorkers() = 1
[09:31:24.918] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:24.918] Searching for globals...
[09:31:24.922] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[09:31:24.922] Searching for globals ... DONE
[09:31:24.922] Resolving globals: FALSE
[09:31:24.923] The total size of the 1 globals is 160 bytes (160 bytes)
[09:31:24.923] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[09:31:24.923] - globals: [1] ‘data’
[09:31:24.923] - packages: [1] ‘future’
[09:31:24.924] getGlobalsAndPackages() ... DONE
[09:31:24.924] run() for ‘Future’ ...
[09:31:24.924] - state: ‘created’
[09:31:24.924] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:24.925] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:24.925] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:24.925]   - Field: ‘label’
[09:31:24.925]   - Field: ‘local’
[09:31:24.925]   - Field: ‘owner’
[09:31:24.925]   - Field: ‘envir’
[09:31:24.925]   - Field: ‘packages’
[09:31:24.925]   - Field: ‘gc’
[09:31:24.926]   - Field: ‘conditions’
[09:31:24.926]   - Field: ‘expr’
[09:31:24.926]   - Field: ‘uuid’
[09:31:24.926]   - Field: ‘seed’
[09:31:24.926]   - Field: ‘version’
[09:31:24.926]   - Field: ‘result’
[09:31:24.926]   - Field: ‘asynchronous’
[09:31:24.926]   - Field: ‘calls’
[09:31:24.926]   - Field: ‘globals’
[09:31:24.926]   - Field: ‘stdout’
[09:31:24.927]   - Field: ‘earlySignal’
[09:31:24.927]   - Field: ‘lazy’
[09:31:24.927]   - Field: ‘state’
[09:31:24.927] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:24.927] - Launch lazy future ...
[09:31:24.927] Packages needed by the future expression (n = 1): ‘future’
[09:31:24.927] Packages needed by future strategies (n = 1): ‘future’
[09:31:24.928] {
[09:31:24.928]     {
[09:31:24.928]         {
[09:31:24.928]             ...future.startTime <- base::Sys.time()
[09:31:24.928]             {
[09:31:24.928]                 {
[09:31:24.928]                   {
[09:31:24.928]                     {
[09:31:24.928]                       base::local({
[09:31:24.928]                         has_future <- base::requireNamespace("future", 
[09:31:24.928]                           quietly = TRUE)
[09:31:24.928]                         if (has_future) {
[09:31:24.928]                           ns <- base::getNamespace("future")
[09:31:24.928]                           version <- ns[[".package"]][["version"]]
[09:31:24.928]                           if (is.null(version)) 
[09:31:24.928]                             version <- utils::packageVersion("future")
[09:31:24.928]                         }
[09:31:24.928]                         else {
[09:31:24.928]                           version <- NULL
[09:31:24.928]                         }
[09:31:24.928]                         if (!has_future || version < "1.8.0") {
[09:31:24.928]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:24.928]                             "", base::R.version$version.string), 
[09:31:24.928]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:24.928]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:24.928]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:24.928]                               "release", "version")], collapse = " "), 
[09:31:24.928]                             hostname = base::Sys.info()[["nodename"]])
[09:31:24.928]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:24.928]                             info)
[09:31:24.928]                           info <- base::paste(info, collapse = "; ")
[09:31:24.928]                           if (!has_future) {
[09:31:24.928]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:24.928]                               info)
[09:31:24.928]                           }
[09:31:24.928]                           else {
[09:31:24.928]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:24.928]                               info, version)
[09:31:24.928]                           }
[09:31:24.928]                           base::stop(msg)
[09:31:24.928]                         }
[09:31:24.928]                       })
[09:31:24.928]                     }
[09:31:24.928]                     base::local({
[09:31:24.928]                       for (pkg in "future") {
[09:31:24.928]                         base::loadNamespace(pkg)
[09:31:24.928]                         base::library(pkg, character.only = TRUE)
[09:31:24.928]                       }
[09:31:24.928]                     })
[09:31:24.928]                   }
[09:31:24.928]                   ...future.strategy.old <- future::plan("list")
[09:31:24.928]                   options(future.plan = NULL)
[09:31:24.928]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.928]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[09:31:24.928]                     envir = parent.frame()) 
[09:31:24.928]                   {
[09:31:24.928]                     default_workers <- missing(workers)
[09:31:24.928]                     if (is.function(workers)) 
[09:31:24.928]                       workers <- workers()
[09:31:24.928]                     workers <- structure(as.integer(workers), 
[09:31:24.928]                       class = class(workers))
[09:31:24.928]                     stop_if_not(is.finite(workers), workers >= 
[09:31:24.928]                       1L)
[09:31:24.928]                     if ((workers == 1L && !inherits(workers, 
[09:31:24.928]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[09:31:24.928]                       if (default_workers) 
[09:31:24.928]                         supportsMulticore(warn = TRUE)
[09:31:24.928]                       return(sequential(..., envir = envir))
[09:31:24.928]                     }
[09:31:24.928]                     oopts <- options(mc.cores = workers)
[09:31:24.928]                     on.exit(options(oopts))
[09:31:24.928]                     future <- MulticoreFuture(..., workers = workers, 
[09:31:24.928]                       envir = envir)
[09:31:24.928]                     if (!future$lazy) 
[09:31:24.928]                       future <- run(future)
[09:31:24.928]                     invisible(future)
[09:31:24.928]                   }), .cleanup = FALSE, .init = FALSE)
[09:31:24.928]                 }
[09:31:24.928]                 ...future.workdir <- getwd()
[09:31:24.928]             }
[09:31:24.928]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:24.928]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:24.928]         }
[09:31:24.928]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:24.928]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:24.928]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:24.928]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:24.928]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:24.928]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:24.928]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:24.928]             base::names(...future.oldOptions))
[09:31:24.928]     }
[09:31:24.928]     if (FALSE) {
[09:31:24.928]     }
[09:31:24.928]     else {
[09:31:24.928]         if (TRUE) {
[09:31:24.928]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:24.928]                 open = "w")
[09:31:24.928]         }
[09:31:24.928]         else {
[09:31:24.928]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:24.928]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:24.928]         }
[09:31:24.928]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:24.928]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:24.928]             base::sink(type = "output", split = FALSE)
[09:31:24.928]             base::close(...future.stdout)
[09:31:24.928]         }, add = TRUE)
[09:31:24.928]     }
[09:31:24.928]     ...future.frame <- base::sys.nframe()
[09:31:24.928]     ...future.conditions <- base::list()
[09:31:24.928]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:24.928]     if (FALSE) {
[09:31:24.928]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:24.928]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:24.928]     }
[09:31:24.928]     ...future.result <- base::tryCatch({
[09:31:24.928]         base::withCallingHandlers({
[09:31:24.928]             ...future.value <- base::withVisible(base::local({
[09:31:24.928]                 a %<-% subset(data, x < 3)$y
[09:31:24.928]                 a
[09:31:24.928]             }))
[09:31:24.928]             future::FutureResult(value = ...future.value$value, 
[09:31:24.928]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.928]                   ...future.rng), globalenv = if (FALSE) 
[09:31:24.928]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:24.928]                     ...future.globalenv.names))
[09:31:24.928]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:24.928]         }, condition = base::local({
[09:31:24.928]             c <- base::c
[09:31:24.928]             inherits <- base::inherits
[09:31:24.928]             invokeRestart <- base::invokeRestart
[09:31:24.928]             length <- base::length
[09:31:24.928]             list <- base::list
[09:31:24.928]             seq.int <- base::seq.int
[09:31:24.928]             signalCondition <- base::signalCondition
[09:31:24.928]             sys.calls <- base::sys.calls
[09:31:24.928]             `[[` <- base::`[[`
[09:31:24.928]             `+` <- base::`+`
[09:31:24.928]             `<<-` <- base::`<<-`
[09:31:24.928]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:24.928]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:24.928]                   3L)]
[09:31:24.928]             }
[09:31:24.928]             function(cond) {
[09:31:24.928]                 is_error <- inherits(cond, "error")
[09:31:24.928]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:24.928]                   NULL)
[09:31:24.928]                 if (is_error) {
[09:31:24.928]                   sessionInformation <- function() {
[09:31:24.928]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:24.928]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:24.928]                       search = base::search(), system = base::Sys.info())
[09:31:24.928]                   }
[09:31:24.928]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.928]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:24.928]                     cond$call), session = sessionInformation(), 
[09:31:24.928]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:24.928]                   signalCondition(cond)
[09:31:24.928]                 }
[09:31:24.928]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:24.928]                 "immediateCondition"))) {
[09:31:24.928]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:24.928]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.928]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:24.928]                   if (TRUE && !signal) {
[09:31:24.928]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.928]                     {
[09:31:24.928]                       inherits <- base::inherits
[09:31:24.928]                       invokeRestart <- base::invokeRestart
[09:31:24.928]                       is.null <- base::is.null
[09:31:24.928]                       muffled <- FALSE
[09:31:24.928]                       if (inherits(cond, "message")) {
[09:31:24.928]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.928]                         if (muffled) 
[09:31:24.928]                           invokeRestart("muffleMessage")
[09:31:24.928]                       }
[09:31:24.928]                       else if (inherits(cond, "warning")) {
[09:31:24.928]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.928]                         if (muffled) 
[09:31:24.928]                           invokeRestart("muffleWarning")
[09:31:24.928]                       }
[09:31:24.928]                       else if (inherits(cond, "condition")) {
[09:31:24.928]                         if (!is.null(pattern)) {
[09:31:24.928]                           computeRestarts <- base::computeRestarts
[09:31:24.928]                           grepl <- base::grepl
[09:31:24.928]                           restarts <- computeRestarts(cond)
[09:31:24.928]                           for (restart in restarts) {
[09:31:24.928]                             name <- restart$name
[09:31:24.928]                             if (is.null(name)) 
[09:31:24.928]                               next
[09:31:24.928]                             if (!grepl(pattern, name)) 
[09:31:24.928]                               next
[09:31:24.928]                             invokeRestart(restart)
[09:31:24.928]                             muffled <- TRUE
[09:31:24.928]                             break
[09:31:24.928]                           }
[09:31:24.928]                         }
[09:31:24.928]                       }
[09:31:24.928]                       invisible(muffled)
[09:31:24.928]                     }
[09:31:24.928]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.928]                   }
[09:31:24.928]                 }
[09:31:24.928]                 else {
[09:31:24.928]                   if (TRUE) {
[09:31:24.928]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.928]                     {
[09:31:24.928]                       inherits <- base::inherits
[09:31:24.928]                       invokeRestart <- base::invokeRestart
[09:31:24.928]                       is.null <- base::is.null
[09:31:24.928]                       muffled <- FALSE
[09:31:24.928]                       if (inherits(cond, "message")) {
[09:31:24.928]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.928]                         if (muffled) 
[09:31:24.928]                           invokeRestart("muffleMessage")
[09:31:24.928]                       }
[09:31:24.928]                       else if (inherits(cond, "warning")) {
[09:31:24.928]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.928]                         if (muffled) 
[09:31:24.928]                           invokeRestart("muffleWarning")
[09:31:24.928]                       }
[09:31:24.928]                       else if (inherits(cond, "condition")) {
[09:31:24.928]                         if (!is.null(pattern)) {
[09:31:24.928]                           computeRestarts <- base::computeRestarts
[09:31:24.928]                           grepl <- base::grepl
[09:31:24.928]                           restarts <- computeRestarts(cond)
[09:31:24.928]                           for (restart in restarts) {
[09:31:24.928]                             name <- restart$name
[09:31:24.928]                             if (is.null(name)) 
[09:31:24.928]                               next
[09:31:24.928]                             if (!grepl(pattern, name)) 
[09:31:24.928]                               next
[09:31:24.928]                             invokeRestart(restart)
[09:31:24.928]                             muffled <- TRUE
[09:31:24.928]                             break
[09:31:24.928]                           }
[09:31:24.928]                         }
[09:31:24.928]                       }
[09:31:24.928]                       invisible(muffled)
[09:31:24.928]                     }
[09:31:24.928]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.928]                   }
[09:31:24.928]                 }
[09:31:24.928]             }
[09:31:24.928]         }))
[09:31:24.928]     }, error = function(ex) {
[09:31:24.928]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:24.928]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.928]                 ...future.rng), started = ...future.startTime, 
[09:31:24.928]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:24.928]             version = "1.8"), class = "FutureResult")
[09:31:24.928]     }, finally = {
[09:31:24.928]         if (!identical(...future.workdir, getwd())) 
[09:31:24.928]             setwd(...future.workdir)
[09:31:24.928]         {
[09:31:24.928]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:24.928]                 ...future.oldOptions$nwarnings <- NULL
[09:31:24.928]             }
[09:31:24.928]             base::options(...future.oldOptions)
[09:31:24.928]             if (.Platform$OS.type == "windows") {
[09:31:24.928]                 old_names <- names(...future.oldEnvVars)
[09:31:24.928]                 envs <- base::Sys.getenv()
[09:31:24.928]                 names <- names(envs)
[09:31:24.928]                 common <- intersect(names, old_names)
[09:31:24.928]                 added <- setdiff(names, old_names)
[09:31:24.928]                 removed <- setdiff(old_names, names)
[09:31:24.928]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:24.928]                   envs[common]]
[09:31:24.928]                 NAMES <- toupper(changed)
[09:31:24.928]                 args <- list()
[09:31:24.928]                 for (kk in seq_along(NAMES)) {
[09:31:24.928]                   name <- changed[[kk]]
[09:31:24.928]                   NAME <- NAMES[[kk]]
[09:31:24.928]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.928]                     next
[09:31:24.928]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.928]                 }
[09:31:24.928]                 NAMES <- toupper(added)
[09:31:24.928]                 for (kk in seq_along(NAMES)) {
[09:31:24.928]                   name <- added[[kk]]
[09:31:24.928]                   NAME <- NAMES[[kk]]
[09:31:24.928]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.928]                     next
[09:31:24.928]                   args[[name]] <- ""
[09:31:24.928]                 }
[09:31:24.928]                 NAMES <- toupper(removed)
[09:31:24.928]                 for (kk in seq_along(NAMES)) {
[09:31:24.928]                   name <- removed[[kk]]
[09:31:24.928]                   NAME <- NAMES[[kk]]
[09:31:24.928]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.928]                     next
[09:31:24.928]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.928]                 }
[09:31:24.928]                 if (length(args) > 0) 
[09:31:24.928]                   base::do.call(base::Sys.setenv, args = args)
[09:31:24.928]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:24.928]             }
[09:31:24.928]             else {
[09:31:24.928]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:24.928]             }
[09:31:24.928]             {
[09:31:24.928]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:24.928]                   0L) {
[09:31:24.928]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:24.928]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:24.928]                   base::options(opts)
[09:31:24.928]                 }
[09:31:24.928]                 {
[09:31:24.928]                   {
[09:31:24.928]                     NULL
[09:31:24.928]                     RNGkind("Mersenne-Twister")
[09:31:24.928]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:24.928]                       inherits = FALSE)
[09:31:24.928]                   }
[09:31:24.928]                   options(future.plan = NULL)
[09:31:24.928]                   if (is.na(NA_character_)) 
[09:31:24.928]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.928]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:24.928]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:24.928]                     .init = FALSE)
[09:31:24.928]                 }
[09:31:24.928]             }
[09:31:24.928]         }
[09:31:24.928]     })
[09:31:24.928]     if (TRUE) {
[09:31:24.928]         base::sink(type = "output", split = FALSE)
[09:31:24.928]         if (TRUE) {
[09:31:24.928]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:24.928]         }
[09:31:24.928]         else {
[09:31:24.928]             ...future.result["stdout"] <- base::list(NULL)
[09:31:24.928]         }
[09:31:24.928]         base::close(...future.stdout)
[09:31:24.928]         ...future.stdout <- NULL
[09:31:24.928]     }
[09:31:24.928]     ...future.result$conditions <- ...future.conditions
[09:31:24.928]     ...future.result$finished <- base::Sys.time()
[09:31:24.928]     ...future.result
[09:31:24.928] }
[09:31:24.930] assign_globals() ...
[09:31:24.930] List of 1
[09:31:24.930]  $ data:'data.frame':	5 obs. of  2 variables:
[09:31:24.930]   ..$ x: int [1:5] 1 2 3 4 5
[09:31:24.930]   ..$ y: int [1:5] 1 2 3 4 5
[09:31:24.930]  - attr(*, "where")=List of 1
[09:31:24.930]   ..$ data:<environment: R_EmptyEnv> 
[09:31:24.930]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:24.930]  - attr(*, "resolved")= logi FALSE
[09:31:24.930]  - attr(*, "total_size")= num 160
[09:31:24.930]  - attr(*, "already-done")= logi TRUE
[09:31:24.934] - copied ‘data’ to environment
[09:31:24.934] assign_globals() ... done
[09:31:24.934] plan(): Setting new future strategy stack:
[09:31:24.935] List of future strategies:
[09:31:24.935] 1. multicore:
[09:31:24.935]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:24.935]    - tweaked: FALSE
[09:31:24.935]    - call: plan(list(sequential, strategy))
[09:31:24.938] plan(): nbrOfWorkers() = 2
[09:31:24.985] plan(): Setting new future strategy stack:
[09:31:24.986] List of future strategies:
[09:31:24.986] 1. sequential:
[09:31:24.986]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:24.986]    - tweaked: FALSE
[09:31:24.986]    - call: plan(list(sequential, strategy))
[09:31:24.986] 2. multicore:
[09:31:24.986]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:24.986]    - tweaked: FALSE
[09:31:24.986]    - call: plan(list(sequential, strategy))
[09:31:24.986] plan(): nbrOfWorkers() = 1
[09:31:24.987] SequentialFuture started (and completed)
[09:31:24.987] signalConditions() ...
[09:31:24.987]  - include = ‘immediateCondition’
[09:31:24.987]  - exclude = 
[09:31:24.987]  - resignal = FALSE
[09:31:24.987]  - Number of conditions: 56
[09:31:24.987] signalConditions() ... done
[09:31:24.988] - Launch lazy future ... done
[09:31:24.988] run() for ‘SequentialFuture’ ... done
[09:31:24.988] signalConditions() ...
[09:31:24.988]  - include = ‘immediateCondition’
[09:31:24.988]  - exclude = 
[09:31:24.988]  - resignal = FALSE
[09:31:24.988]  - Number of conditions: 56
[09:31:24.989] signalConditions() ... done
[09:31:24.989] Future state: ‘finished’
[09:31:24.989] signalConditions() ...
[09:31:24.989]  - include = ‘condition’
[09:31:24.989]  - exclude = ‘immediateCondition’
[09:31:24.989]  - resignal = TRUE
[09:31:24.989]  - Number of conditions: 56
[09:31:24.989]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.939] getGlobalsAndPackages() ...
[09:31:24.990]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:24.990]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.955] Searching for globals...
[09:31:24.990]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.956] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[09:31:24.990]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.956] Searching for globals ... DONE
[09:31:24.990]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.956] Resolving globals: FALSE
[09:31:24.990]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.956] The total size of the 1 globals is 160 bytes (160 bytes)
[09:31:24.990]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.957] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[09:31:24.991]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.957] - globals: [1] ‘data’
[09:31:24.991]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.957] 
[09:31:24.991]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.957] getGlobalsAndPackages() ... DONE
[09:31:24.991]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.957] run() for ‘Future’ ...
[09:31:24.991]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.957] - state: ‘created’
[09:31:24.991]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.957] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:24.992]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.961] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:24.992]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.961] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:24.992]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.961]   - Field: ‘label’
[09:31:24.992]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.961]   - Field: ‘local’
[09:31:24.992]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.961]   - Field: ‘owner’
[09:31:24.992]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.962]   - Field: ‘envir’
[09:31:24.993]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.962]   - Field: ‘workers’
[09:31:24.993]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.962]   - Field: ‘packages’
[09:31:24.993]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.962]   - Field: ‘gc’
[09:31:24.993]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.962]   - Field: ‘job’
[09:31:24.993]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.962]   - Field: ‘conditions’
[09:31:24.993]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.962]   - Field: ‘expr’
[09:31:24.993]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.962]   - Field: ‘uuid’
[09:31:24.994]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.962]   - Field: ‘seed’
[09:31:24.994]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.962]   - Field: ‘version’
[09:31:24.994]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.963]   - Field: ‘result’
[09:31:24.994]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.963]   - Field: ‘asynchronous’
[09:31:24.994]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.963]   - Field: ‘calls’
[09:31:24.994]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.963]   - Field: ‘globals’
[09:31:24.995]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.963]   - Field: ‘stdout’
[09:31:24.995]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.963]   - Field: ‘earlySignal’
[09:31:24.995]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.963]   - Field: ‘lazy’
[09:31:24.995]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.963]   - Field: ‘state’
[09:31:24.995]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.963] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:24.995]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.963] - Launch lazy future ...
[09:31:24.995]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.964] Packages needed by the future expression (n = 0): <none>
[09:31:24.996]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.964] Packages needed by future strategies (n = 0): <none>
[09:31:24.996]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.964] {
[09:31:24.964]     {
[09:31:24.964]         {
[09:31:24.964]             ...future.startTime <- base::Sys.time()
[09:31:24.964]             {
[09:31:24.964]                 {
[09:31:24.964]                   {
[09:31:24.964]                     {
[09:31:24.964]                       base::local({
[09:31:24.964]                         has_future <- base::requireNamespace("future", 
[09:31:24.964]                           quietly = TRUE)
[09:31:24.964]                         if (has_future) {
[09:31:24.964]                           ns <- base::getNamespace("future")
[09:31:24.964]                           version <- ns[[".package"]][["version"]]
[09:31:24.964]                           if (is.null(version)) 
[09:31:24.964]                             version <- utils::packageVersion("future")
[09:31:24.964]                         }
[09:31:24.964]                         else {
[09:31:24.964]                           version <- NULL
[09:31:24.964]                         }
[09:31:24.964]                         if (!has_future || version < "1.8.0") {
[09:31:24.964]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:24.964]                             "", base::R.version$version.string), 
[09:31:24.964]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:24.964]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:24.964]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:24.964]                               "release", "version")], collapse = " "), 
[09:31:24.964]                             hostname = base::Sys.info()[["nodename"]])
[09:31:24.964]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:24.964]                             info)
[09:31:24.964]                           info <- base::paste(info, collapse = "; ")
[09:31:24.964]                           if (!has_future) {
[09:31:24.964]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:24.964]                               info)
[09:31:24.964]                           }
[09:31:24.964]                           else {
[09:31:24.964]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:24.964]                               info, version)
[09:31:24.964]                           }
[09:31:24.964]                           base::stop(msg)
[09:31:24.964]                         }
[09:31:24.964]                       })
[09:31:24.964]                     }
[09:31:24.964]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:24.964]                     base::options(mc.cores = 1L)
[09:31:24.964]                   }
[09:31:24.964]                   ...future.strategy.old <- future::plan("list")
[09:31:24.964]                   options(future.plan = NULL)
[09:31:24.964]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.964]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:24.964]                 }
[09:31:24.964]                 ...future.workdir <- getwd()
[09:31:24.964]             }
[09:31:24.964]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:24.964]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:24.964]         }
[09:31:24.964]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:24.964]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:24.964]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:24.964]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:24.964]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:24.964]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:24.964]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:24.964]             base::names(...future.oldOptions))
[09:31:24.964]     }
[09:31:24.964]     if (FALSE) {
[09:31:24.964]     }
[09:31:24.964]     else {
[09:31:24.964]         if (TRUE) {
[09:31:24.964]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:24.964]                 open = "w")
[09:31:24.964]         }
[09:31:24.964]         else {
[09:31:24.964]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:24.964]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:24.964]         }
[09:31:24.964]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:24.964]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:24.964]             base::sink(type = "output", split = FALSE)
[09:31:24.964]             base::close(...future.stdout)
[09:31:24.964]         }, add = TRUE)
[09:31:24.964]     }
[09:31:24.964]     ...future.frame <- base::sys.nframe()
[09:31:24.964]     ...future.conditions <- base::list()
[09:31:24.964]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:24.964]     if (FALSE) {
[09:31:24.964]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:24.964]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:24.964]     }
[09:31:24.964]     ...future.result <- base::tryCatch({
[09:31:24.964]         base::withCallingHandlers({
[09:31:24.964]             ...future.value <- base::withVisible(base::local({
[09:31:24.964]                 withCallingHandlers({
[09:31:24.964]                   subset(data, x < 3)$y
[09:31:24.964]                 }, immediateCondition = function(cond) {
[09:31:24.964]                   save_rds <- function (object, pathname, ...) 
[09:31:24.964]                   {
[09:31:24.964]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:24.964]                     if (file_test("-f", pathname_tmp)) {
[09:31:24.964]                       fi_tmp <- file.info(pathname_tmp)
[09:31:24.964]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:24.964]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:24.964]                         fi_tmp[["mtime"]])
[09:31:24.964]                     }
[09:31:24.964]                     tryCatch({
[09:31:24.964]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:24.964]                     }, error = function(ex) {
[09:31:24.964]                       msg <- conditionMessage(ex)
[09:31:24.964]                       fi_tmp <- file.info(pathname_tmp)
[09:31:24.964]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:24.964]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:24.964]                         fi_tmp[["mtime"]], msg)
[09:31:24.964]                       ex$message <- msg
[09:31:24.964]                       stop(ex)
[09:31:24.964]                     })
[09:31:24.964]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:24.964]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:24.964]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:24.964]                       fi_tmp <- file.info(pathname_tmp)
[09:31:24.964]                       fi <- file.info(pathname)
[09:31:24.964]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:24.964]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:24.964]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:24.964]                         fi[["size"]], fi[["mtime"]])
[09:31:24.964]                       stop(msg)
[09:31:24.964]                     }
[09:31:24.964]                     invisible(pathname)
[09:31:24.964]                   }
[09:31:24.964]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:24.964]                     rootPath = tempdir()) 
[09:31:24.964]                   {
[09:31:24.964]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:24.964]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:24.964]                       tmpdir = path, fileext = ".rds")
[09:31:24.964]                     save_rds(obj, file)
[09:31:24.964]                   }
[09:31:24.964]                   saveImmediateCondition(cond, path = "/tmp/RtmpUzkrDI/.future/immediateConditions")
[09:31:24.964]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.964]                   {
[09:31:24.964]                     inherits <- base::inherits
[09:31:24.964]                     invokeRestart <- base::invokeRestart
[09:31:24.964]                     is.null <- base::is.null
[09:31:24.964]                     muffled <- FALSE
[09:31:24.964]                     if (inherits(cond, "message")) {
[09:31:24.964]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:24.964]                       if (muffled) 
[09:31:24.964]                         invokeRestart("muffleMessage")
[09:31:24.964]                     }
[09:31:24.964]                     else if (inherits(cond, "warning")) {
[09:31:24.964]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:24.964]                       if (muffled) 
[09:31:24.964]                         invokeRestart("muffleWarning")
[09:31:24.964]                     }
[09:31:24.964]                     else if (inherits(cond, "condition")) {
[09:31:24.964]                       if (!is.null(pattern)) {
[09:31:24.964]                         computeRestarts <- base::computeRestarts
[09:31:24.964]                         grepl <- base::grepl
[09:31:24.964]                         restarts <- computeRestarts(cond)
[09:31:24.964]                         for (restart in restarts) {
[09:31:24.964]                           name <- restart$name
[09:31:24.964]                           if (is.null(name)) 
[09:31:24.964]                             next
[09:31:24.964]                           if (!grepl(pattern, name)) 
[09:31:24.964]                             next
[09:31:24.964]                           invokeRestart(restart)
[09:31:24.964]                           muffled <- TRUE
[09:31:24.964]                           break
[09:31:24.964]                         }
[09:31:24.964]                       }
[09:31:24.964]                     }
[09:31:24.964]                     invisible(muffled)
[09:31:24.964]                   }
[09:31:24.964]                   muffleCondition(cond)
[09:31:24.964]                 })
[09:31:24.964]             }))
[09:31:24.964]             future::FutureResult(value = ...future.value$value, 
[09:31:24.964]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.964]                   ...future.rng), globalenv = if (FALSE) 
[09:31:24.964]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:24.964]                     ...future.globalenv.names))
[09:31:24.964]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:24.964]         }, condition = base::local({
[09:31:24.964]             c <- base::c
[09:31:24.964]             inherits <- base::inherits
[09:31:24.964]             invokeRestart <- base::invokeRestart
[09:31:24.964]             length <- base::length
[09:31:24.964]             list <- base::list
[09:31:24.964]             seq.int <- base::seq.int
[09:31:24.964]             signalCondition <- base::signalCondition
[09:31:24.964]             sys.calls <- base::sys.calls
[09:31:24.964]             `[[` <- base::`[[`
[09:31:24.964]             `+` <- base::`+`
[09:31:24.964]             `<<-` <- base::`<<-`
[09:31:24.964]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:24.964]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:24.964]                   3L)]
[09:31:24.964]             }
[09:31:24.964]             function(cond) {
[09:31:24.964]                 is_error <- inherits(cond, "error")
[09:31:24.964]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:24.964]                   NULL)
[09:31:24.964]                 if (is_error) {
[09:31:24.964]                   sessionInformation <- function() {
[09:31:24.964]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:24.964]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:24.964]                       search = base::search(), system = base::Sys.info())
[09:31:24.964]                   }
[09:31:24.964]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.964]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:24.964]                     cond$call), session = sessionInformation(), 
[09:31:24.964]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:24.964]                   signalCondition(cond)
[09:31:24.964]                 }
[09:31:24.964]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:24.964]                 "immediateCondition"))) {
[09:31:24.964]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:24.964]                   ...future.conditions[[length(...future.conditions) + 
[09:31:24.964]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:24.964]                   if (TRUE && !signal) {
[09:31:24.964]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.964]                     {
[09:31:24.964]                       inherits <- base::inherits
[09:31:24.964]                       invokeRestart <- base::invokeRestart
[09:31:24.964]                       is.null <- base::is.null
[09:31:24.964]                       muffled <- FALSE
[09:31:24.964]                       if (inherits(cond, "message")) {
[09:31:24.964]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.964]                         if (muffled) 
[09:31:24.964]                           invokeRestart("muffleMessage")
[09:31:24.964]                       }
[09:31:24.964]                       else if (inherits(cond, "warning")) {
[09:31:24.964]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.964]                         if (muffled) 
[09:31:24.964]                           invokeRestart("muffleWarning")
[09:31:24.964]                       }
[09:31:24.964]                       else if (inherits(cond, "condition")) {
[09:31:24.964]                         if (!is.null(pattern)) {
[09:31:24.964]                           computeRestarts <- base::computeRestarts
[09:31:24.964]                           grepl <- base::grepl
[09:31:24.964]                           restarts <- computeRestarts(cond)
[09:31:24.964]                           for (restart in restarts) {
[09:31:24.964]                             name <- restart$name
[09:31:24.964]                             if (is.null(name)) 
[09:31:24.964]                               next
[09:31:24.964]                             if (!grepl(pattern, name)) 
[09:31:24.964]                               next
[09:31:24.964]                             invokeRestart(restart)
[09:31:24.964]                             muffled <- TRUE
[09:31:24.964]                             break
[09:31:24.964]                           }
[09:31:24.964]                         }
[09:31:24.964]                       }
[09:31:24.964]                       invisible(muffled)
[09:31:24.964]                     }
[09:31:24.964]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.964]                   }
[09:31:24.964]                 }
[09:31:24.964]                 else {
[09:31:24.964]                   if (TRUE) {
[09:31:24.964]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:24.964]                     {
[09:31:24.964]                       inherits <- base::inherits
[09:31:24.964]                       invokeRestart <- base::invokeRestart
[09:31:24.964]                       is.null <- base::is.null
[09:31:24.964]                       muffled <- FALSE
[09:31:24.964]                       if (inherits(cond, "message")) {
[09:31:24.964]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:24.964]                         if (muffled) 
[09:31:24.964]                           invokeRestart("muffleMessage")
[09:31:24.964]                       }
[09:31:24.964]                       else if (inherits(cond, "warning")) {
[09:31:24.964]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:24.964]                         if (muffled) 
[09:31:24.964]                           invokeRestart("muffleWarning")
[09:31:24.964]                       }
[09:31:24.964]                       else if (inherits(cond, "condition")) {
[09:31:24.964]                         if (!is.null(pattern)) {
[09:31:24.964]                           computeRestarts <- base::computeRestarts
[09:31:24.964]                           grepl <- base::grepl
[09:31:24.964]                           restarts <- computeRestarts(cond)
[09:31:24.964]                           for (restart in restarts) {
[09:31:24.964]                             name <- restart$name
[09:31:24.964]                             if (is.null(name)) 
[09:31:24.964]                               next
[09:31:24.964]                             if (!grepl(pattern, name)) 
[09:31:24.964]                               next
[09:31:24.964]                             invokeRestart(restart)
[09:31:24.964]                             muffled <- TRUE
[09:31:24.964]                             break
[09:31:24.964]                           }
[09:31:24.964]                         }
[09:31:24.964]                       }
[09:31:24.964]                       invisible(muffled)
[09:31:24.964]                     }
[09:31:24.964]                     muffleCondition(cond, pattern = "^muffle")
[09:31:24.964]                   }
[09:31:24.964]                 }
[09:31:24.964]             }
[09:31:24.964]         }))
[09:31:24.964]     }, error = function(ex) {
[09:31:24.964]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:24.964]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:24.964]                 ...future.rng), started = ...future.startTime, 
[09:31:24.964]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:24.964]             version = "1.8"), class = "FutureResult")
[09:31:24.964]     }, finally = {
[09:31:24.964]         if (!identical(...future.workdir, getwd())) 
[09:31:24.964]             setwd(...future.workdir)
[09:31:24.964]         {
[09:31:24.964]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:24.964]                 ...future.oldOptions$nwarnings <- NULL
[09:31:24.964]             }
[09:31:24.964]             base::options(...future.oldOptions)
[09:31:24.964]             if (.Platform$OS.type == "windows") {
[09:31:24.964]                 old_names <- names(...future.oldEnvVars)
[09:31:24.964]                 envs <- base::Sys.getenv()
[09:31:24.964]                 names <- names(envs)
[09:31:24.964]                 common <- intersect(names, old_names)
[09:31:24.964]                 added <- setdiff(names, old_names)
[09:31:24.964]                 removed <- setdiff(old_names, names)
[09:31:24.964]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:24.964]                   envs[common]]
[09:31:24.964]                 NAMES <- toupper(changed)
[09:31:24.964]                 args <- list()
[09:31:24.964]                 for (kk in seq_along(NAMES)) {
[09:31:24.964]                   name <- changed[[kk]]
[09:31:24.964]                   NAME <- NAMES[[kk]]
[09:31:24.964]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.964]                     next
[09:31:24.964]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.964]                 }
[09:31:24.964]                 NAMES <- toupper(added)
[09:31:24.964]                 for (kk in seq_along(NAMES)) {
[09:31:24.964]                   name <- added[[kk]]
[09:31:24.964]                   NAME <- NAMES[[kk]]
[09:31:24.964]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.964]                     next
[09:31:24.964]                   args[[name]] <- ""
[09:31:24.964]                 }
[09:31:24.964]                 NAMES <- toupper(removed)
[09:31:24.964]                 for (kk in seq_along(NAMES)) {
[09:31:24.964]                   name <- removed[[kk]]
[09:31:24.964]                   NAME <- NAMES[[kk]]
[09:31:24.964]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:24.964]                     next
[09:31:24.964]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:24.964]                 }
[09:31:24.964]                 if (length(args) > 0) 
[09:31:24.964]                   base::do.call(base::Sys.setenv, args = args)
[09:31:24.964]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:24.964]             }
[09:31:24.964]             else {
[09:31:24.964]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:24.964]             }
[09:31:24.964]             {
[09:31:24.964]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:24.964]                   0L) {
[09:31:24.964]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:24.964]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:24.964]                   base::options(opts)
[09:31:24.964]                 }
[09:31:24.964]                 {
[09:31:24.964]                   {
[09:31:24.964]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:24.964]                     NULL
[09:31:24.964]                   }
[09:31:24.964]                   options(future.plan = NULL)
[09:31:24.964]                   if (is.na(NA_character_)) 
[09:31:24.964]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:24.964]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:24.964]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:24.964]                     .init = FALSE)
[09:31:24.964]                 }
[09:31:24.964]             }
[09:31:24.964]         }
[09:31:24.964]     })
[09:31:24.964]     if (TRUE) {
[09:31:24.964]         base::sink(type = "output", split = FALSE)
[09:31:24.964]         if (TRUE) {
[09:31:24.964]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:24.964]         }
[09:31:24.964]         else {
[09:31:24.964]             ...future.result["stdout"] <- base::list(NULL)
[09:31:24.964]         }
[09:31:24.964]         base::close(...future.stdout)
[09:31:24.964]         ...future.stdout <- NULL
[09:31:24.964]     }
[09:31:24.964]     ...future.result$conditions <- ...future.conditions
[09:31:24.964]     ...future.result$finished <- base::Sys.time()
[09:31:24.964]     ...future.result
[09:31:24.964] }
[09:31:24.996]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.966] assign_globals() ...
[09:31:24.996]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.966] List of 1
[09:31:24.966]  $ data:'data.frame':	5 obs. of  2 variables:
[09:31:24.966]   ..$ x: int [1:5] 1 2 3 4 5
[09:31:24.966]   ..$ y: int [1:5] 1 2 3 4 5
[09:31:24.966]  - attr(*, "where")=List of 1
[09:31:24.966]   ..$ data:<environment: R_EmptyEnv> 
[09:31:24.966]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:24.966]  - attr(*, "resolved")= logi FALSE
[09:31:24.966]  - attr(*, "total_size")= num 160
[09:31:24.966]  - attr(*, "already-done")= logi TRUE
[09:31:24.996]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.971] - copied ‘data’ to environment
[09:31:24.997]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.971] assign_globals() ... done
[09:31:24.997]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.971] requestCore(): workers = 2
[09:31:24.997]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.973] MulticoreFuture started
[09:31:24.997]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.973] - Launch lazy future ... done
[09:31:24.997]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.974] run() for ‘MulticoreFuture’ ... done
[09:31:24.997]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.974] result() for MulticoreFuture ...
[09:31:24.997]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.984] result() for MulticoreFuture ...
[09:31:24.998]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.984] result() for MulticoreFuture ... done
[09:31:24.998]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.984] result() for MulticoreFuture ... done
[09:31:24.998]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.984] result() for MulticoreFuture ...
[09:31:24.998]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:24.985] result() for MulticoreFuture ... done
[09:31:24.998] signalConditions() ... done
- Strategy: multicore ... DONE
- Strategy: multisession ...
[09:31:24.999] plan(): Setting new future strategy stack:
[09:31:24.999] List of future strategies:
[09:31:24.999] 1. multisession:
[09:31:24.999]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:24.999]    - tweaked: FALSE
[09:31:24.999]    - call: plan(strategy)
[09:31:24.999] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:31:24.999] multisession:
[09:31:24.999] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:24.999] - tweaked: FALSE
[09:31:24.999] - call: plan(strategy)
[09:31:25.005] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:25.005] Not searching for globals
[09:31:25.006] - globals: [0] <none>
[09:31:25.006] getGlobalsAndPackages() ... DONE
[09:31:25.006] [local output] makeClusterPSOCK() ...
[09:31:25.046] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:31:25.048] [local output] Base port: 11546
[09:31:25.048] [local output] Getting setup options for 2 cluster nodes ...
[09:31:25.048] [local output]  - Node 1 of 2 ...
[09:31:25.048] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:25.049] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpUzkrDI/worker.rank=1.parallelly.parent=43588.aa445b3414b7.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpUzkrDI/worker.rank=1.parallelly.parent=43588.aa445b3414b7.pid")'’
[09:31:25.234] - Possible to infer worker's PID: TRUE
[09:31:25.234] [local output] Rscript port: 11546

[09:31:25.235] [local output]  - Node 2 of 2 ...
[09:31:25.235] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:25.235] [local output] Rscript port: 11546

[09:31:25.236] [local output] Getting setup options for 2 cluster nodes ... done
[09:31:25.236] [local output]  - Parallel setup requested for some PSOCK nodes
[09:31:25.236] [local output] Setting up PSOCK nodes in parallel
[09:31:25.237] List of 36
[09:31:25.237]  $ worker          : chr "localhost"
[09:31:25.237]   ..- attr(*, "localhost")= logi TRUE
[09:31:25.237]  $ master          : chr "localhost"
[09:31:25.237]  $ port            : int 11546
[09:31:25.237]  $ connectTimeout  : num 120
[09:31:25.237]  $ timeout         : num 2592000
[09:31:25.237]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:31:25.237]  $ homogeneous     : logi TRUE
[09:31:25.237]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:31:25.237]  $ rscript_envs    : NULL
[09:31:25.237]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:25.237]  $ rscript_startup : NULL
[09:31:25.237]  $ rscript_sh      : chr "sh"
[09:31:25.237]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:25.237]  $ methods         : logi TRUE
[09:31:25.237]  $ socketOptions   : chr "no-delay"
[09:31:25.237]  $ useXDR          : logi FALSE
[09:31:25.237]  $ outfile         : chr "/dev/null"
[09:31:25.237]  $ renice          : int NA
[09:31:25.237]  $ rshcmd          : NULL
[09:31:25.237]  $ user            : chr(0) 
[09:31:25.237]  $ revtunnel       : logi FALSE
[09:31:25.237]  $ rshlogfile      : NULL
[09:31:25.237]  $ rshopts         : chr(0) 
[09:31:25.237]  $ rank            : int 1
[09:31:25.237]  $ manual          : logi FALSE
[09:31:25.237]  $ dryrun          : logi FALSE
[09:31:25.237]  $ quiet           : logi FALSE
[09:31:25.237]  $ setup_strategy  : chr "parallel"
[09:31:25.237]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:25.237]  $ pidfile         : chr "/tmp/RtmpUzkrDI/worker.rank=1.parallelly.parent=43588.aa445b3414b7.pid"
[09:31:25.237]  $ rshcmd_label    : NULL
[09:31:25.237]  $ rsh_call        : NULL
[09:31:25.237]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:25.237]  $ localMachine    : logi TRUE
[09:31:25.237]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:31:25.237]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:31:25.237]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:31:25.237]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:31:25.237]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:31:25.237]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:31:25.237]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:31:25.237]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:31:25.237]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:31:25.237]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:31:25.237]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:31:25.237]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:31:25.237]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:31:25.237]  $ arguments       :List of 28
[09:31:25.237]   ..$ worker          : chr "localhost"
[09:31:25.237]   ..$ master          : NULL
[09:31:25.237]   ..$ port            : int 11546
[09:31:25.237]   ..$ connectTimeout  : num 120
[09:31:25.237]   ..$ timeout         : num 2592000
[09:31:25.237]   ..$ rscript         : NULL
[09:31:25.237]   ..$ homogeneous     : NULL
[09:31:25.237]   ..$ rscript_args    : NULL
[09:31:25.237]   ..$ rscript_envs    : NULL
[09:31:25.237]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:25.237]   ..$ rscript_startup : NULL
[09:31:25.237]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:31:25.237]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:25.237]   ..$ methods         : logi TRUE
[09:31:25.237]   ..$ socketOptions   : chr "no-delay"
[09:31:25.237]   ..$ useXDR          : logi FALSE
[09:31:25.237]   ..$ outfile         : chr "/dev/null"
[09:31:25.237]   ..$ renice          : int NA
[09:31:25.237]   ..$ rshcmd          : NULL
[09:31:25.237]   ..$ user            : NULL
[09:31:25.237]   ..$ revtunnel       : logi NA
[09:31:25.237]   ..$ rshlogfile      : NULL
[09:31:25.237]   ..$ rshopts         : NULL
[09:31:25.237]   ..$ rank            : int 1
[09:31:25.237]   ..$ manual          : logi FALSE
[09:31:25.237]   ..$ dryrun          : logi FALSE
[09:31:25.237]   ..$ quiet           : logi FALSE
[09:31:25.237]   ..$ setup_strategy  : chr "parallel"
[09:31:25.237]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:31:25.253] [local output] System call to launch all workers:
[09:31:25.253] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpUzkrDI/worker.rank=1.parallelly.parent=43588.aa445b3414b7.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11546 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:31:25.253] [local output] Starting PSOCK main server
[09:31:25.258] [local output] Workers launched
[09:31:25.259] [local output] Waiting for workers to connect back
[09:31:25.259]  - [local output] 0 workers out of 2 ready
[09:31:25.498]  - [local output] 0 workers out of 2 ready
[09:31:25.499]  - [local output] 1 workers out of 2 ready
[09:31:25.501]  - [local output] 1 workers out of 2 ready
[09:31:25.501]  - [local output] 2 workers out of 2 ready
[09:31:25.502] [local output] Launching of workers completed
[09:31:25.502] [local output] Collecting session information from workers
[09:31:25.502] [local output]  - Worker #1 of 2
[09:31:25.503] [local output]  - Worker #2 of 2
[09:31:25.503] [local output] makeClusterPSOCK() ... done
[09:31:25.516] Packages needed by the future expression (n = 0): <none>
[09:31:25.516] Packages needed by future strategies (n = 0): <none>
[09:31:25.517] {
[09:31:25.517]     {
[09:31:25.517]         {
[09:31:25.517]             ...future.startTime <- base::Sys.time()
[09:31:25.517]             {
[09:31:25.517]                 {
[09:31:25.517]                   {
[09:31:25.517]                     {
[09:31:25.517]                       base::local({
[09:31:25.517]                         has_future <- base::requireNamespace("future", 
[09:31:25.517]                           quietly = TRUE)
[09:31:25.517]                         if (has_future) {
[09:31:25.517]                           ns <- base::getNamespace("future")
[09:31:25.517]                           version <- ns[[".package"]][["version"]]
[09:31:25.517]                           if (is.null(version)) 
[09:31:25.517]                             version <- utils::packageVersion("future")
[09:31:25.517]                         }
[09:31:25.517]                         else {
[09:31:25.517]                           version <- NULL
[09:31:25.517]                         }
[09:31:25.517]                         if (!has_future || version < "1.8.0") {
[09:31:25.517]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:25.517]                             "", base::R.version$version.string), 
[09:31:25.517]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:25.517]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:25.517]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:25.517]                               "release", "version")], collapse = " "), 
[09:31:25.517]                             hostname = base::Sys.info()[["nodename"]])
[09:31:25.517]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:25.517]                             info)
[09:31:25.517]                           info <- base::paste(info, collapse = "; ")
[09:31:25.517]                           if (!has_future) {
[09:31:25.517]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:25.517]                               info)
[09:31:25.517]                           }
[09:31:25.517]                           else {
[09:31:25.517]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:25.517]                               info, version)
[09:31:25.517]                           }
[09:31:25.517]                           base::stop(msg)
[09:31:25.517]                         }
[09:31:25.517]                       })
[09:31:25.517]                     }
[09:31:25.517]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:25.517]                     base::options(mc.cores = 1L)
[09:31:25.517]                   }
[09:31:25.517]                   ...future.strategy.old <- future::plan("list")
[09:31:25.517]                   options(future.plan = NULL)
[09:31:25.517]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:25.517]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:25.517]                 }
[09:31:25.517]                 ...future.workdir <- getwd()
[09:31:25.517]             }
[09:31:25.517]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:25.517]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:25.517]         }
[09:31:25.517]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:25.517]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:25.517]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:25.517]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:25.517]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:25.517]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:25.517]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:25.517]             base::names(...future.oldOptions))
[09:31:25.517]     }
[09:31:25.517]     if (FALSE) {
[09:31:25.517]     }
[09:31:25.517]     else {
[09:31:25.517]         if (TRUE) {
[09:31:25.517]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:25.517]                 open = "w")
[09:31:25.517]         }
[09:31:25.517]         else {
[09:31:25.517]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:25.517]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:25.517]         }
[09:31:25.517]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:25.517]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:25.517]             base::sink(type = "output", split = FALSE)
[09:31:25.517]             base::close(...future.stdout)
[09:31:25.517]         }, add = TRUE)
[09:31:25.517]     }
[09:31:25.517]     ...future.frame <- base::sys.nframe()
[09:31:25.517]     ...future.conditions <- base::list()
[09:31:25.517]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:25.517]     if (FALSE) {
[09:31:25.517]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:25.517]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:25.517]     }
[09:31:25.517]     ...future.result <- base::tryCatch({
[09:31:25.517]         base::withCallingHandlers({
[09:31:25.517]             ...future.value <- base::withVisible(base::local({
[09:31:25.517]                 ...future.makeSendCondition <- base::local({
[09:31:25.517]                   sendCondition <- NULL
[09:31:25.517]                   function(frame = 1L) {
[09:31:25.517]                     if (is.function(sendCondition)) 
[09:31:25.517]                       return(sendCondition)
[09:31:25.517]                     ns <- getNamespace("parallel")
[09:31:25.517]                     if (exists("sendData", mode = "function", 
[09:31:25.517]                       envir = ns)) {
[09:31:25.517]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:25.517]                         envir = ns)
[09:31:25.517]                       envir <- sys.frame(frame)
[09:31:25.517]                       master <- NULL
[09:31:25.517]                       while (!identical(envir, .GlobalEnv) && 
[09:31:25.517]                         !identical(envir, emptyenv())) {
[09:31:25.517]                         if (exists("master", mode = "list", envir = envir, 
[09:31:25.517]                           inherits = FALSE)) {
[09:31:25.517]                           master <- get("master", mode = "list", 
[09:31:25.517]                             envir = envir, inherits = FALSE)
[09:31:25.517]                           if (inherits(master, c("SOCKnode", 
[09:31:25.517]                             "SOCK0node"))) {
[09:31:25.517]                             sendCondition <<- function(cond) {
[09:31:25.517]                               data <- list(type = "VALUE", value = cond, 
[09:31:25.517]                                 success = TRUE)
[09:31:25.517]                               parallel_sendData(master, data)
[09:31:25.517]                             }
[09:31:25.517]                             return(sendCondition)
[09:31:25.517]                           }
[09:31:25.517]                         }
[09:31:25.517]                         frame <- frame + 1L
[09:31:25.517]                         envir <- sys.frame(frame)
[09:31:25.517]                       }
[09:31:25.517]                     }
[09:31:25.517]                     sendCondition <<- function(cond) NULL
[09:31:25.517]                   }
[09:31:25.517]                 })
[09:31:25.517]                 withCallingHandlers({
[09:31:25.517]                   NA
[09:31:25.517]                 }, immediateCondition = function(cond) {
[09:31:25.517]                   sendCondition <- ...future.makeSendCondition()
[09:31:25.517]                   sendCondition(cond)
[09:31:25.517]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.517]                   {
[09:31:25.517]                     inherits <- base::inherits
[09:31:25.517]                     invokeRestart <- base::invokeRestart
[09:31:25.517]                     is.null <- base::is.null
[09:31:25.517]                     muffled <- FALSE
[09:31:25.517]                     if (inherits(cond, "message")) {
[09:31:25.517]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:25.517]                       if (muffled) 
[09:31:25.517]                         invokeRestart("muffleMessage")
[09:31:25.517]                     }
[09:31:25.517]                     else if (inherits(cond, "warning")) {
[09:31:25.517]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:25.517]                       if (muffled) 
[09:31:25.517]                         invokeRestart("muffleWarning")
[09:31:25.517]                     }
[09:31:25.517]                     else if (inherits(cond, "condition")) {
[09:31:25.517]                       if (!is.null(pattern)) {
[09:31:25.517]                         computeRestarts <- base::computeRestarts
[09:31:25.517]                         grepl <- base::grepl
[09:31:25.517]                         restarts <- computeRestarts(cond)
[09:31:25.517]                         for (restart in restarts) {
[09:31:25.517]                           name <- restart$name
[09:31:25.517]                           if (is.null(name)) 
[09:31:25.517]                             next
[09:31:25.517]                           if (!grepl(pattern, name)) 
[09:31:25.517]                             next
[09:31:25.517]                           invokeRestart(restart)
[09:31:25.517]                           muffled <- TRUE
[09:31:25.517]                           break
[09:31:25.517]                         }
[09:31:25.517]                       }
[09:31:25.517]                     }
[09:31:25.517]                     invisible(muffled)
[09:31:25.517]                   }
[09:31:25.517]                   muffleCondition(cond)
[09:31:25.517]                 })
[09:31:25.517]             }))
[09:31:25.517]             future::FutureResult(value = ...future.value$value, 
[09:31:25.517]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:25.517]                   ...future.rng), globalenv = if (FALSE) 
[09:31:25.517]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:25.517]                     ...future.globalenv.names))
[09:31:25.517]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:25.517]         }, condition = base::local({
[09:31:25.517]             c <- base::c
[09:31:25.517]             inherits <- base::inherits
[09:31:25.517]             invokeRestart <- base::invokeRestart
[09:31:25.517]             length <- base::length
[09:31:25.517]             list <- base::list
[09:31:25.517]             seq.int <- base::seq.int
[09:31:25.517]             signalCondition <- base::signalCondition
[09:31:25.517]             sys.calls <- base::sys.calls
[09:31:25.517]             `[[` <- base::`[[`
[09:31:25.517]             `+` <- base::`+`
[09:31:25.517]             `<<-` <- base::`<<-`
[09:31:25.517]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:25.517]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:25.517]                   3L)]
[09:31:25.517]             }
[09:31:25.517]             function(cond) {
[09:31:25.517]                 is_error <- inherits(cond, "error")
[09:31:25.517]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:25.517]                   NULL)
[09:31:25.517]                 if (is_error) {
[09:31:25.517]                   sessionInformation <- function() {
[09:31:25.517]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:25.517]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:25.517]                       search = base::search(), system = base::Sys.info())
[09:31:25.517]                   }
[09:31:25.517]                   ...future.conditions[[length(...future.conditions) + 
[09:31:25.517]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:25.517]                     cond$call), session = sessionInformation(), 
[09:31:25.517]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:25.517]                   signalCondition(cond)
[09:31:25.517]                 }
[09:31:25.517]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:25.517]                 "immediateCondition"))) {
[09:31:25.517]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:25.517]                   ...future.conditions[[length(...future.conditions) + 
[09:31:25.517]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:25.517]                   if (TRUE && !signal) {
[09:31:25.517]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.517]                     {
[09:31:25.517]                       inherits <- base::inherits
[09:31:25.517]                       invokeRestart <- base::invokeRestart
[09:31:25.517]                       is.null <- base::is.null
[09:31:25.517]                       muffled <- FALSE
[09:31:25.517]                       if (inherits(cond, "message")) {
[09:31:25.517]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:25.517]                         if (muffled) 
[09:31:25.517]                           invokeRestart("muffleMessage")
[09:31:25.517]                       }
[09:31:25.517]                       else if (inherits(cond, "warning")) {
[09:31:25.517]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:25.517]                         if (muffled) 
[09:31:25.517]                           invokeRestart("muffleWarning")
[09:31:25.517]                       }
[09:31:25.517]                       else if (inherits(cond, "condition")) {
[09:31:25.517]                         if (!is.null(pattern)) {
[09:31:25.517]                           computeRestarts <- base::computeRestarts
[09:31:25.517]                           grepl <- base::grepl
[09:31:25.517]                           restarts <- computeRestarts(cond)
[09:31:25.517]                           for (restart in restarts) {
[09:31:25.517]                             name <- restart$name
[09:31:25.517]                             if (is.null(name)) 
[09:31:25.517]                               next
[09:31:25.517]                             if (!grepl(pattern, name)) 
[09:31:25.517]                               next
[09:31:25.517]                             invokeRestart(restart)
[09:31:25.517]                             muffled <- TRUE
[09:31:25.517]                             break
[09:31:25.517]                           }
[09:31:25.517]                         }
[09:31:25.517]                       }
[09:31:25.517]                       invisible(muffled)
[09:31:25.517]                     }
[09:31:25.517]                     muffleCondition(cond, pattern = "^muffle")
[09:31:25.517]                   }
[09:31:25.517]                 }
[09:31:25.517]                 else {
[09:31:25.517]                   if (TRUE) {
[09:31:25.517]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.517]                     {
[09:31:25.517]                       inherits <- base::inherits
[09:31:25.517]                       invokeRestart <- base::invokeRestart
[09:31:25.517]                       is.null <- base::is.null
[09:31:25.517]                       muffled <- FALSE
[09:31:25.517]                       if (inherits(cond, "message")) {
[09:31:25.517]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:25.517]                         if (muffled) 
[09:31:25.517]                           invokeRestart("muffleMessage")
[09:31:25.517]                       }
[09:31:25.517]                       else if (inherits(cond, "warning")) {
[09:31:25.517]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:25.517]                         if (muffled) 
[09:31:25.517]                           invokeRestart("muffleWarning")
[09:31:25.517]                       }
[09:31:25.517]                       else if (inherits(cond, "condition")) {
[09:31:25.517]                         if (!is.null(pattern)) {
[09:31:25.517]                           computeRestarts <- base::computeRestarts
[09:31:25.517]                           grepl <- base::grepl
[09:31:25.517]                           restarts <- computeRestarts(cond)
[09:31:25.517]                           for (restart in restarts) {
[09:31:25.517]                             name <- restart$name
[09:31:25.517]                             if (is.null(name)) 
[09:31:25.517]                               next
[09:31:25.517]                             if (!grepl(pattern, name)) 
[09:31:25.517]                               next
[09:31:25.517]                             invokeRestart(restart)
[09:31:25.517]                             muffled <- TRUE
[09:31:25.517]                             break
[09:31:25.517]                           }
[09:31:25.517]                         }
[09:31:25.517]                       }
[09:31:25.517]                       invisible(muffled)
[09:31:25.517]                     }
[09:31:25.517]                     muffleCondition(cond, pattern = "^muffle")
[09:31:25.517]                   }
[09:31:25.517]                 }
[09:31:25.517]             }
[09:31:25.517]         }))
[09:31:25.517]     }, error = function(ex) {
[09:31:25.517]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:25.517]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:25.517]                 ...future.rng), started = ...future.startTime, 
[09:31:25.517]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:25.517]             version = "1.8"), class = "FutureResult")
[09:31:25.517]     }, finally = {
[09:31:25.517]         if (!identical(...future.workdir, getwd())) 
[09:31:25.517]             setwd(...future.workdir)
[09:31:25.517]         {
[09:31:25.517]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:25.517]                 ...future.oldOptions$nwarnings <- NULL
[09:31:25.517]             }
[09:31:25.517]             base::options(...future.oldOptions)
[09:31:25.517]             if (.Platform$OS.type == "windows") {
[09:31:25.517]                 old_names <- names(...future.oldEnvVars)
[09:31:25.517]                 envs <- base::Sys.getenv()
[09:31:25.517]                 names <- names(envs)
[09:31:25.517]                 common <- intersect(names, old_names)
[09:31:25.517]                 added <- setdiff(names, old_names)
[09:31:25.517]                 removed <- setdiff(old_names, names)
[09:31:25.517]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:25.517]                   envs[common]]
[09:31:25.517]                 NAMES <- toupper(changed)
[09:31:25.517]                 args <- list()
[09:31:25.517]                 for (kk in seq_along(NAMES)) {
[09:31:25.517]                   name <- changed[[kk]]
[09:31:25.517]                   NAME <- NAMES[[kk]]
[09:31:25.517]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.517]                     next
[09:31:25.517]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:25.517]                 }
[09:31:25.517]                 NAMES <- toupper(added)
[09:31:25.517]                 for (kk in seq_along(NAMES)) {
[09:31:25.517]                   name <- added[[kk]]
[09:31:25.517]                   NAME <- NAMES[[kk]]
[09:31:25.517]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.517]                     next
[09:31:25.517]                   args[[name]] <- ""
[09:31:25.517]                 }
[09:31:25.517]                 NAMES <- toupper(removed)
[09:31:25.517]                 for (kk in seq_along(NAMES)) {
[09:31:25.517]                   name <- removed[[kk]]
[09:31:25.517]                   NAME <- NAMES[[kk]]
[09:31:25.517]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.517]                     next
[09:31:25.517]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:25.517]                 }
[09:31:25.517]                 if (length(args) > 0) 
[09:31:25.517]                   base::do.call(base::Sys.setenv, args = args)
[09:31:25.517]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:25.517]             }
[09:31:25.517]             else {
[09:31:25.517]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:25.517]             }
[09:31:25.517]             {
[09:31:25.517]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:25.517]                   0L) {
[09:31:25.517]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:25.517]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:25.517]                   base::options(opts)
[09:31:25.517]                 }
[09:31:25.517]                 {
[09:31:25.517]                   {
[09:31:25.517]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:25.517]                     NULL
[09:31:25.517]                   }
[09:31:25.517]                   options(future.plan = NULL)
[09:31:25.517]                   if (is.na(NA_character_)) 
[09:31:25.517]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:25.517]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:25.517]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:25.517]                     .init = FALSE)
[09:31:25.517]                 }
[09:31:25.517]             }
[09:31:25.517]         }
[09:31:25.517]     })
[09:31:25.517]     if (TRUE) {
[09:31:25.517]         base::sink(type = "output", split = FALSE)
[09:31:25.517]         if (TRUE) {
[09:31:25.517]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:25.517]         }
[09:31:25.517]         else {
[09:31:25.517]             ...future.result["stdout"] <- base::list(NULL)
[09:31:25.517]         }
[09:31:25.517]         base::close(...future.stdout)
[09:31:25.517]         ...future.stdout <- NULL
[09:31:25.517]     }
[09:31:25.517]     ...future.result$conditions <- ...future.conditions
[09:31:25.517]     ...future.result$finished <- base::Sys.time()
[09:31:25.517]     ...future.result
[09:31:25.517] }
[09:31:25.567] MultisessionFuture started
[09:31:25.567] result() for ClusterFuture ...
[09:31:25.568] receiveMessageFromWorker() for ClusterFuture ...
[09:31:25.568] - Validating connection of MultisessionFuture
[09:31:25.599] - received message: FutureResult
[09:31:25.599] - Received FutureResult
[09:31:25.600] - Erased future from FutureRegistry
[09:31:25.600] result() for ClusterFuture ...
[09:31:25.600] - result already collected: FutureResult
[09:31:25.600] result() for ClusterFuture ... done
[09:31:25.600] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:25.600] result() for ClusterFuture ... done
[09:31:25.600] result() for ClusterFuture ...
[09:31:25.600] - result already collected: FutureResult
[09:31:25.601] result() for ClusterFuture ... done
[09:31:25.601] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:31:25.605] plan(): nbrOfWorkers() = 2
[09:31:25.605] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[09:31:25.605] Searching for globals...
[09:31:25.606] - globals found: [1] ‘getOption’
[09:31:25.606] Searching for globals ... DONE
[09:31:25.606] Resolving globals: FALSE
[09:31:25.606] 
[09:31:25.606] 
[09:31:25.607] getGlobalsAndPackages() ... DONE
[09:31:25.607] run() for ‘Future’ ...
[09:31:25.607] - state: ‘created’
[09:31:25.607] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:25.621] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:25.621] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:25.621]   - Field: ‘node’
[09:31:25.621]   - Field: ‘label’
[09:31:25.621]   - Field: ‘local’
[09:31:25.622]   - Field: ‘owner’
[09:31:25.622]   - Field: ‘envir’
[09:31:25.622]   - Field: ‘workers’
[09:31:25.622]   - Field: ‘packages’
[09:31:25.622]   - Field: ‘gc’
[09:31:25.622]   - Field: ‘conditions’
[09:31:25.622]   - Field: ‘persistent’
[09:31:25.622]   - Field: ‘expr’
[09:31:25.622]   - Field: ‘uuid’
[09:31:25.623]   - Field: ‘seed’
[09:31:25.623]   - Field: ‘version’
[09:31:25.623]   - Field: ‘result’
[09:31:25.623]   - Field: ‘asynchronous’
[09:31:25.623]   - Field: ‘calls’
[09:31:25.623]   - Field: ‘globals’
[09:31:25.623]   - Field: ‘stdout’
[09:31:25.623]   - Field: ‘earlySignal’
[09:31:25.623]   - Field: ‘lazy’
[09:31:25.624]   - Field: ‘state’
[09:31:25.624] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:25.624] - Launch lazy future ...
[09:31:25.624] Packages needed by the future expression (n = 0): <none>
[09:31:25.624] Packages needed by future strategies (n = 0): <none>
[09:31:25.625] {
[09:31:25.625]     {
[09:31:25.625]         {
[09:31:25.625]             ...future.startTime <- base::Sys.time()
[09:31:25.625]             {
[09:31:25.625]                 {
[09:31:25.625]                   {
[09:31:25.625]                     {
[09:31:25.625]                       base::local({
[09:31:25.625]                         has_future <- base::requireNamespace("future", 
[09:31:25.625]                           quietly = TRUE)
[09:31:25.625]                         if (has_future) {
[09:31:25.625]                           ns <- base::getNamespace("future")
[09:31:25.625]                           version <- ns[[".package"]][["version"]]
[09:31:25.625]                           if (is.null(version)) 
[09:31:25.625]                             version <- utils::packageVersion("future")
[09:31:25.625]                         }
[09:31:25.625]                         else {
[09:31:25.625]                           version <- NULL
[09:31:25.625]                         }
[09:31:25.625]                         if (!has_future || version < "1.8.0") {
[09:31:25.625]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:25.625]                             "", base::R.version$version.string), 
[09:31:25.625]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:25.625]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:25.625]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:25.625]                               "release", "version")], collapse = " "), 
[09:31:25.625]                             hostname = base::Sys.info()[["nodename"]])
[09:31:25.625]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:25.625]                             info)
[09:31:25.625]                           info <- base::paste(info, collapse = "; ")
[09:31:25.625]                           if (!has_future) {
[09:31:25.625]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:25.625]                               info)
[09:31:25.625]                           }
[09:31:25.625]                           else {
[09:31:25.625]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:25.625]                               info, version)
[09:31:25.625]                           }
[09:31:25.625]                           base::stop(msg)
[09:31:25.625]                         }
[09:31:25.625]                       })
[09:31:25.625]                     }
[09:31:25.625]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:25.625]                     base::options(mc.cores = 1L)
[09:31:25.625]                   }
[09:31:25.625]                   ...future.strategy.old <- future::plan("list")
[09:31:25.625]                   options(future.plan = NULL)
[09:31:25.625]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:25.625]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:25.625]                 }
[09:31:25.625]                 ...future.workdir <- getwd()
[09:31:25.625]             }
[09:31:25.625]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:25.625]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:25.625]         }
[09:31:25.625]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[09:31:25.625]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:25.625]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[09:31:25.625]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:25.625]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:25.625]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:25.625]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:25.625]             base::names(...future.oldOptions))
[09:31:25.625]     }
[09:31:25.625]     if (FALSE) {
[09:31:25.625]     }
[09:31:25.625]     else {
[09:31:25.625]         if (TRUE) {
[09:31:25.625]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:25.625]                 open = "w")
[09:31:25.625]         }
[09:31:25.625]         else {
[09:31:25.625]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:25.625]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:25.625]         }
[09:31:25.625]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:25.625]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:25.625]             base::sink(type = "output", split = FALSE)
[09:31:25.625]             base::close(...future.stdout)
[09:31:25.625]         }, add = TRUE)
[09:31:25.625]     }
[09:31:25.625]     ...future.frame <- base::sys.nframe()
[09:31:25.625]     ...future.conditions <- base::list()
[09:31:25.625]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:25.625]     if (FALSE) {
[09:31:25.625]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:25.625]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:25.625]     }
[09:31:25.625]     ...future.result <- base::tryCatch({
[09:31:25.625]         base::withCallingHandlers({
[09:31:25.625]             ...future.value <- base::withVisible(base::local({
[09:31:25.625]                 ...future.makeSendCondition <- base::local({
[09:31:25.625]                   sendCondition <- NULL
[09:31:25.625]                   function(frame = 1L) {
[09:31:25.625]                     if (is.function(sendCondition)) 
[09:31:25.625]                       return(sendCondition)
[09:31:25.625]                     ns <- getNamespace("parallel")
[09:31:25.625]                     if (exists("sendData", mode = "function", 
[09:31:25.625]                       envir = ns)) {
[09:31:25.625]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:25.625]                         envir = ns)
[09:31:25.625]                       envir <- sys.frame(frame)
[09:31:25.625]                       master <- NULL
[09:31:25.625]                       while (!identical(envir, .GlobalEnv) && 
[09:31:25.625]                         !identical(envir, emptyenv())) {
[09:31:25.625]                         if (exists("master", mode = "list", envir = envir, 
[09:31:25.625]                           inherits = FALSE)) {
[09:31:25.625]                           master <- get("master", mode = "list", 
[09:31:25.625]                             envir = envir, inherits = FALSE)
[09:31:25.625]                           if (inherits(master, c("SOCKnode", 
[09:31:25.625]                             "SOCK0node"))) {
[09:31:25.625]                             sendCondition <<- function(cond) {
[09:31:25.625]                               data <- list(type = "VALUE", value = cond, 
[09:31:25.625]                                 success = TRUE)
[09:31:25.625]                               parallel_sendData(master, data)
[09:31:25.625]                             }
[09:31:25.625]                             return(sendCondition)
[09:31:25.625]                           }
[09:31:25.625]                         }
[09:31:25.625]                         frame <- frame + 1L
[09:31:25.625]                         envir <- sys.frame(frame)
[09:31:25.625]                       }
[09:31:25.625]                     }
[09:31:25.625]                     sendCondition <<- function(cond) NULL
[09:31:25.625]                   }
[09:31:25.625]                 })
[09:31:25.625]                 withCallingHandlers({
[09:31:25.625]                   getOption("future.globals.onMissing")
[09:31:25.625]                 }, immediateCondition = function(cond) {
[09:31:25.625]                   sendCondition <- ...future.makeSendCondition()
[09:31:25.625]                   sendCondition(cond)
[09:31:25.625]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.625]                   {
[09:31:25.625]                     inherits <- base::inherits
[09:31:25.625]                     invokeRestart <- base::invokeRestart
[09:31:25.625]                     is.null <- base::is.null
[09:31:25.625]                     muffled <- FALSE
[09:31:25.625]                     if (inherits(cond, "message")) {
[09:31:25.625]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:25.625]                       if (muffled) 
[09:31:25.625]                         invokeRestart("muffleMessage")
[09:31:25.625]                     }
[09:31:25.625]                     else if (inherits(cond, "warning")) {
[09:31:25.625]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:25.625]                       if (muffled) 
[09:31:25.625]                         invokeRestart("muffleWarning")
[09:31:25.625]                     }
[09:31:25.625]                     else if (inherits(cond, "condition")) {
[09:31:25.625]                       if (!is.null(pattern)) {
[09:31:25.625]                         computeRestarts <- base::computeRestarts
[09:31:25.625]                         grepl <- base::grepl
[09:31:25.625]                         restarts <- computeRestarts(cond)
[09:31:25.625]                         for (restart in restarts) {
[09:31:25.625]                           name <- restart$name
[09:31:25.625]                           if (is.null(name)) 
[09:31:25.625]                             next
[09:31:25.625]                           if (!grepl(pattern, name)) 
[09:31:25.625]                             next
[09:31:25.625]                           invokeRestart(restart)
[09:31:25.625]                           muffled <- TRUE
[09:31:25.625]                           break
[09:31:25.625]                         }
[09:31:25.625]                       }
[09:31:25.625]                     }
[09:31:25.625]                     invisible(muffled)
[09:31:25.625]                   }
[09:31:25.625]                   muffleCondition(cond)
[09:31:25.625]                 })
[09:31:25.625]             }))
[09:31:25.625]             future::FutureResult(value = ...future.value$value, 
[09:31:25.625]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:25.625]                   ...future.rng), globalenv = if (FALSE) 
[09:31:25.625]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:25.625]                     ...future.globalenv.names))
[09:31:25.625]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:25.625]         }, condition = base::local({
[09:31:25.625]             c <- base::c
[09:31:25.625]             inherits <- base::inherits
[09:31:25.625]             invokeRestart <- base::invokeRestart
[09:31:25.625]             length <- base::length
[09:31:25.625]             list <- base::list
[09:31:25.625]             seq.int <- base::seq.int
[09:31:25.625]             signalCondition <- base::signalCondition
[09:31:25.625]             sys.calls <- base::sys.calls
[09:31:25.625]             `[[` <- base::`[[`
[09:31:25.625]             `+` <- base::`+`
[09:31:25.625]             `<<-` <- base::`<<-`
[09:31:25.625]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:25.625]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:25.625]                   3L)]
[09:31:25.625]             }
[09:31:25.625]             function(cond) {
[09:31:25.625]                 is_error <- inherits(cond, "error")
[09:31:25.625]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:25.625]                   NULL)
[09:31:25.625]                 if (is_error) {
[09:31:25.625]                   sessionInformation <- function() {
[09:31:25.625]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:25.625]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:25.625]                       search = base::search(), system = base::Sys.info())
[09:31:25.625]                   }
[09:31:25.625]                   ...future.conditions[[length(...future.conditions) + 
[09:31:25.625]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:25.625]                     cond$call), session = sessionInformation(), 
[09:31:25.625]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:25.625]                   signalCondition(cond)
[09:31:25.625]                 }
[09:31:25.625]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:25.625]                 "immediateCondition"))) {
[09:31:25.625]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:25.625]                   ...future.conditions[[length(...future.conditions) + 
[09:31:25.625]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:25.625]                   if (TRUE && !signal) {
[09:31:25.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.625]                     {
[09:31:25.625]                       inherits <- base::inherits
[09:31:25.625]                       invokeRestart <- base::invokeRestart
[09:31:25.625]                       is.null <- base::is.null
[09:31:25.625]                       muffled <- FALSE
[09:31:25.625]                       if (inherits(cond, "message")) {
[09:31:25.625]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:25.625]                         if (muffled) 
[09:31:25.625]                           invokeRestart("muffleMessage")
[09:31:25.625]                       }
[09:31:25.625]                       else if (inherits(cond, "warning")) {
[09:31:25.625]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:25.625]                         if (muffled) 
[09:31:25.625]                           invokeRestart("muffleWarning")
[09:31:25.625]                       }
[09:31:25.625]                       else if (inherits(cond, "condition")) {
[09:31:25.625]                         if (!is.null(pattern)) {
[09:31:25.625]                           computeRestarts <- base::computeRestarts
[09:31:25.625]                           grepl <- base::grepl
[09:31:25.625]                           restarts <- computeRestarts(cond)
[09:31:25.625]                           for (restart in restarts) {
[09:31:25.625]                             name <- restart$name
[09:31:25.625]                             if (is.null(name)) 
[09:31:25.625]                               next
[09:31:25.625]                             if (!grepl(pattern, name)) 
[09:31:25.625]                               next
[09:31:25.625]                             invokeRestart(restart)
[09:31:25.625]                             muffled <- TRUE
[09:31:25.625]                             break
[09:31:25.625]                           }
[09:31:25.625]                         }
[09:31:25.625]                       }
[09:31:25.625]                       invisible(muffled)
[09:31:25.625]                     }
[09:31:25.625]                     muffleCondition(cond, pattern = "^muffle")
[09:31:25.625]                   }
[09:31:25.625]                 }
[09:31:25.625]                 else {
[09:31:25.625]                   if (TRUE) {
[09:31:25.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.625]                     {
[09:31:25.625]                       inherits <- base::inherits
[09:31:25.625]                       invokeRestart <- base::invokeRestart
[09:31:25.625]                       is.null <- base::is.null
[09:31:25.625]                       muffled <- FALSE
[09:31:25.625]                       if (inherits(cond, "message")) {
[09:31:25.625]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:25.625]                         if (muffled) 
[09:31:25.625]                           invokeRestart("muffleMessage")
[09:31:25.625]                       }
[09:31:25.625]                       else if (inherits(cond, "warning")) {
[09:31:25.625]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:25.625]                         if (muffled) 
[09:31:25.625]                           invokeRestart("muffleWarning")
[09:31:25.625]                       }
[09:31:25.625]                       else if (inherits(cond, "condition")) {
[09:31:25.625]                         if (!is.null(pattern)) {
[09:31:25.625]                           computeRestarts <- base::computeRestarts
[09:31:25.625]                           grepl <- base::grepl
[09:31:25.625]                           restarts <- computeRestarts(cond)
[09:31:25.625]                           for (restart in restarts) {
[09:31:25.625]                             name <- restart$name
[09:31:25.625]                             if (is.null(name)) 
[09:31:25.625]                               next
[09:31:25.625]                             if (!grepl(pattern, name)) 
[09:31:25.625]                               next
[09:31:25.625]                             invokeRestart(restart)
[09:31:25.625]                             muffled <- TRUE
[09:31:25.625]                             break
[09:31:25.625]                           }
[09:31:25.625]                         }
[09:31:25.625]                       }
[09:31:25.625]                       invisible(muffled)
[09:31:25.625]                     }
[09:31:25.625]                     muffleCondition(cond, pattern = "^muffle")
[09:31:25.625]                   }
[09:31:25.625]                 }
[09:31:25.625]             }
[09:31:25.625]         }))
[09:31:25.625]     }, error = function(ex) {
[09:31:25.625]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:25.625]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:25.625]                 ...future.rng), started = ...future.startTime, 
[09:31:25.625]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:25.625]             version = "1.8"), class = "FutureResult")
[09:31:25.625]     }, finally = {
[09:31:25.625]         if (!identical(...future.workdir, getwd())) 
[09:31:25.625]             setwd(...future.workdir)
[09:31:25.625]         {
[09:31:25.625]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:25.625]                 ...future.oldOptions$nwarnings <- NULL
[09:31:25.625]             }
[09:31:25.625]             base::options(...future.oldOptions)
[09:31:25.625]             if (.Platform$OS.type == "windows") {
[09:31:25.625]                 old_names <- names(...future.oldEnvVars)
[09:31:25.625]                 envs <- base::Sys.getenv()
[09:31:25.625]                 names <- names(envs)
[09:31:25.625]                 common <- intersect(names, old_names)
[09:31:25.625]                 added <- setdiff(names, old_names)
[09:31:25.625]                 removed <- setdiff(old_names, names)
[09:31:25.625]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:25.625]                   envs[common]]
[09:31:25.625]                 NAMES <- toupper(changed)
[09:31:25.625]                 args <- list()
[09:31:25.625]                 for (kk in seq_along(NAMES)) {
[09:31:25.625]                   name <- changed[[kk]]
[09:31:25.625]                   NAME <- NAMES[[kk]]
[09:31:25.625]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.625]                     next
[09:31:25.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:25.625]                 }
[09:31:25.625]                 NAMES <- toupper(added)
[09:31:25.625]                 for (kk in seq_along(NAMES)) {
[09:31:25.625]                   name <- added[[kk]]
[09:31:25.625]                   NAME <- NAMES[[kk]]
[09:31:25.625]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.625]                     next
[09:31:25.625]                   args[[name]] <- ""
[09:31:25.625]                 }
[09:31:25.625]                 NAMES <- toupper(removed)
[09:31:25.625]                 for (kk in seq_along(NAMES)) {
[09:31:25.625]                   name <- removed[[kk]]
[09:31:25.625]                   NAME <- NAMES[[kk]]
[09:31:25.625]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.625]                     next
[09:31:25.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:25.625]                 }
[09:31:25.625]                 if (length(args) > 0) 
[09:31:25.625]                   base::do.call(base::Sys.setenv, args = args)
[09:31:25.625]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:25.625]             }
[09:31:25.625]             else {
[09:31:25.625]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:25.625]             }
[09:31:25.625]             {
[09:31:25.625]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:25.625]                   0L) {
[09:31:25.625]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:25.625]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:25.625]                   base::options(opts)
[09:31:25.625]                 }
[09:31:25.625]                 {
[09:31:25.625]                   {
[09:31:25.625]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:25.625]                     NULL
[09:31:25.625]                   }
[09:31:25.625]                   options(future.plan = NULL)
[09:31:25.625]                   if (is.na(NA_character_)) 
[09:31:25.625]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:25.625]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:25.625]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:25.625]                     .init = FALSE)
[09:31:25.625]                 }
[09:31:25.625]             }
[09:31:25.625]         }
[09:31:25.625]     })
[09:31:25.625]     if (TRUE) {
[09:31:25.625]         base::sink(type = "output", split = FALSE)
[09:31:25.625]         if (TRUE) {
[09:31:25.625]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:25.625]         }
[09:31:25.625]         else {
[09:31:25.625]             ...future.result["stdout"] <- base::list(NULL)
[09:31:25.625]         }
[09:31:25.625]         base::close(...future.stdout)
[09:31:25.625]         ...future.stdout <- NULL
[09:31:25.625]     }
[09:31:25.625]     ...future.result$conditions <- ...future.conditions
[09:31:25.625]     ...future.result$finished <- base::Sys.time()
[09:31:25.625]     ...future.result
[09:31:25.625] }
[09:31:25.628] MultisessionFuture started
[09:31:25.628] - Launch lazy future ... done
[09:31:25.628] run() for ‘MultisessionFuture’ ... done
[09:31:25.629] result() for ClusterFuture ...
[09:31:25.629] receiveMessageFromWorker() for ClusterFuture ...
[09:31:25.629] - Validating connection of MultisessionFuture
[09:31:25.630] - received message: FutureResult
[09:31:25.630] - Received FutureResult
[09:31:25.630] - Erased future from FutureRegistry
[09:31:25.630] result() for ClusterFuture ...
[09:31:25.630] - result already collected: FutureResult
[09:31:25.631] result() for ClusterFuture ... done
[09:31:25.631] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:25.631] result() for ClusterFuture ... done
[09:31:25.631] result() for ClusterFuture ...
[09:31:25.631] - result already collected: FutureResult
[09:31:25.631] result() for ClusterFuture ... done
[09:31:25.631] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:25.632] Searching for globals...
[09:31:25.632] - globals found: [1] ‘getOption’
[09:31:25.632] Searching for globals ... DONE
[09:31:25.633] Resolving globals: FALSE
[09:31:25.633] 
[09:31:25.633] 
[09:31:25.633] getGlobalsAndPackages() ... DONE
[09:31:25.633] run() for ‘Future’ ...
[09:31:25.633] - state: ‘created’
[09:31:25.634] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:25.647] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:25.648] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:25.648]   - Field: ‘node’
[09:31:25.648]   - Field: ‘label’
[09:31:25.648]   - Field: ‘local’
[09:31:25.648]   - Field: ‘owner’
[09:31:25.648]   - Field: ‘envir’
[09:31:25.648]   - Field: ‘workers’
[09:31:25.648]   - Field: ‘packages’
[09:31:25.648]   - Field: ‘gc’
[09:31:25.649]   - Field: ‘conditions’
[09:31:25.649]   - Field: ‘persistent’
[09:31:25.649]   - Field: ‘expr’
[09:31:25.649]   - Field: ‘uuid’
[09:31:25.649]   - Field: ‘seed’
[09:31:25.649]   - Field: ‘version’
[09:31:25.649]   - Field: ‘result’
[09:31:25.649]   - Field: ‘asynchronous’
[09:31:25.649]   - Field: ‘calls’
[09:31:25.650]   - Field: ‘globals’
[09:31:25.650]   - Field: ‘stdout’
[09:31:25.650]   - Field: ‘earlySignal’
[09:31:25.650]   - Field: ‘lazy’
[09:31:25.650]   - Field: ‘state’
[09:31:25.650] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:25.650] - Launch lazy future ...
[09:31:25.651] Packages needed by the future expression (n = 0): <none>
[09:31:25.651] Packages needed by future strategies (n = 0): <none>
[09:31:25.651] {
[09:31:25.651]     {
[09:31:25.651]         {
[09:31:25.651]             ...future.startTime <- base::Sys.time()
[09:31:25.651]             {
[09:31:25.651]                 {
[09:31:25.651]                   {
[09:31:25.651]                     {
[09:31:25.651]                       base::local({
[09:31:25.651]                         has_future <- base::requireNamespace("future", 
[09:31:25.651]                           quietly = TRUE)
[09:31:25.651]                         if (has_future) {
[09:31:25.651]                           ns <- base::getNamespace("future")
[09:31:25.651]                           version <- ns[[".package"]][["version"]]
[09:31:25.651]                           if (is.null(version)) 
[09:31:25.651]                             version <- utils::packageVersion("future")
[09:31:25.651]                         }
[09:31:25.651]                         else {
[09:31:25.651]                           version <- NULL
[09:31:25.651]                         }
[09:31:25.651]                         if (!has_future || version < "1.8.0") {
[09:31:25.651]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:25.651]                             "", base::R.version$version.string), 
[09:31:25.651]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:25.651]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:25.651]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:25.651]                               "release", "version")], collapse = " "), 
[09:31:25.651]                             hostname = base::Sys.info()[["nodename"]])
[09:31:25.651]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:25.651]                             info)
[09:31:25.651]                           info <- base::paste(info, collapse = "; ")
[09:31:25.651]                           if (!has_future) {
[09:31:25.651]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:25.651]                               info)
[09:31:25.651]                           }
[09:31:25.651]                           else {
[09:31:25.651]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:25.651]                               info, version)
[09:31:25.651]                           }
[09:31:25.651]                           base::stop(msg)
[09:31:25.651]                         }
[09:31:25.651]                       })
[09:31:25.651]                     }
[09:31:25.651]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:25.651]                     base::options(mc.cores = 1L)
[09:31:25.651]                   }
[09:31:25.651]                   ...future.strategy.old <- future::plan("list")
[09:31:25.651]                   options(future.plan = NULL)
[09:31:25.651]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:25.651]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:25.651]                 }
[09:31:25.651]                 ...future.workdir <- getwd()
[09:31:25.651]             }
[09:31:25.651]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:25.651]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:25.651]         }
[09:31:25.651]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:25.651]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:25.651]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:25.651]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:25.651]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:25.651]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:25.651]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:25.651]             base::names(...future.oldOptions))
[09:31:25.651]     }
[09:31:25.651]     if (FALSE) {
[09:31:25.651]     }
[09:31:25.651]     else {
[09:31:25.651]         if (TRUE) {
[09:31:25.651]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:25.651]                 open = "w")
[09:31:25.651]         }
[09:31:25.651]         else {
[09:31:25.651]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:25.651]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:25.651]         }
[09:31:25.651]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:25.651]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:25.651]             base::sink(type = "output", split = FALSE)
[09:31:25.651]             base::close(...future.stdout)
[09:31:25.651]         }, add = TRUE)
[09:31:25.651]     }
[09:31:25.651]     ...future.frame <- base::sys.nframe()
[09:31:25.651]     ...future.conditions <- base::list()
[09:31:25.651]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:25.651]     if (FALSE) {
[09:31:25.651]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:25.651]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:25.651]     }
[09:31:25.651]     ...future.result <- base::tryCatch({
[09:31:25.651]         base::withCallingHandlers({
[09:31:25.651]             ...future.value <- base::withVisible(base::local({
[09:31:25.651]                 ...future.makeSendCondition <- base::local({
[09:31:25.651]                   sendCondition <- NULL
[09:31:25.651]                   function(frame = 1L) {
[09:31:25.651]                     if (is.function(sendCondition)) 
[09:31:25.651]                       return(sendCondition)
[09:31:25.651]                     ns <- getNamespace("parallel")
[09:31:25.651]                     if (exists("sendData", mode = "function", 
[09:31:25.651]                       envir = ns)) {
[09:31:25.651]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:25.651]                         envir = ns)
[09:31:25.651]                       envir <- sys.frame(frame)
[09:31:25.651]                       master <- NULL
[09:31:25.651]                       while (!identical(envir, .GlobalEnv) && 
[09:31:25.651]                         !identical(envir, emptyenv())) {
[09:31:25.651]                         if (exists("master", mode = "list", envir = envir, 
[09:31:25.651]                           inherits = FALSE)) {
[09:31:25.651]                           master <- get("master", mode = "list", 
[09:31:25.651]                             envir = envir, inherits = FALSE)
[09:31:25.651]                           if (inherits(master, c("SOCKnode", 
[09:31:25.651]                             "SOCK0node"))) {
[09:31:25.651]                             sendCondition <<- function(cond) {
[09:31:25.651]                               data <- list(type = "VALUE", value = cond, 
[09:31:25.651]                                 success = TRUE)
[09:31:25.651]                               parallel_sendData(master, data)
[09:31:25.651]                             }
[09:31:25.651]                             return(sendCondition)
[09:31:25.651]                           }
[09:31:25.651]                         }
[09:31:25.651]                         frame <- frame + 1L
[09:31:25.651]                         envir <- sys.frame(frame)
[09:31:25.651]                       }
[09:31:25.651]                     }
[09:31:25.651]                     sendCondition <<- function(cond) NULL
[09:31:25.651]                   }
[09:31:25.651]                 })
[09:31:25.651]                 withCallingHandlers({
[09:31:25.651]                   getOption("future.globals.onMissing")
[09:31:25.651]                 }, immediateCondition = function(cond) {
[09:31:25.651]                   sendCondition <- ...future.makeSendCondition()
[09:31:25.651]                   sendCondition(cond)
[09:31:25.651]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.651]                   {
[09:31:25.651]                     inherits <- base::inherits
[09:31:25.651]                     invokeRestart <- base::invokeRestart
[09:31:25.651]                     is.null <- base::is.null
[09:31:25.651]                     muffled <- FALSE
[09:31:25.651]                     if (inherits(cond, "message")) {
[09:31:25.651]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:25.651]                       if (muffled) 
[09:31:25.651]                         invokeRestart("muffleMessage")
[09:31:25.651]                     }
[09:31:25.651]                     else if (inherits(cond, "warning")) {
[09:31:25.651]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:25.651]                       if (muffled) 
[09:31:25.651]                         invokeRestart("muffleWarning")
[09:31:25.651]                     }
[09:31:25.651]                     else if (inherits(cond, "condition")) {
[09:31:25.651]                       if (!is.null(pattern)) {
[09:31:25.651]                         computeRestarts <- base::computeRestarts
[09:31:25.651]                         grepl <- base::grepl
[09:31:25.651]                         restarts <- computeRestarts(cond)
[09:31:25.651]                         for (restart in restarts) {
[09:31:25.651]                           name <- restart$name
[09:31:25.651]                           if (is.null(name)) 
[09:31:25.651]                             next
[09:31:25.651]                           if (!grepl(pattern, name)) 
[09:31:25.651]                             next
[09:31:25.651]                           invokeRestart(restart)
[09:31:25.651]                           muffled <- TRUE
[09:31:25.651]                           break
[09:31:25.651]                         }
[09:31:25.651]                       }
[09:31:25.651]                     }
[09:31:25.651]                     invisible(muffled)
[09:31:25.651]                   }
[09:31:25.651]                   muffleCondition(cond)
[09:31:25.651]                 })
[09:31:25.651]             }))
[09:31:25.651]             future::FutureResult(value = ...future.value$value, 
[09:31:25.651]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:25.651]                   ...future.rng), globalenv = if (FALSE) 
[09:31:25.651]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:25.651]                     ...future.globalenv.names))
[09:31:25.651]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:25.651]         }, condition = base::local({
[09:31:25.651]             c <- base::c
[09:31:25.651]             inherits <- base::inherits
[09:31:25.651]             invokeRestart <- base::invokeRestart
[09:31:25.651]             length <- base::length
[09:31:25.651]             list <- base::list
[09:31:25.651]             seq.int <- base::seq.int
[09:31:25.651]             signalCondition <- base::signalCondition
[09:31:25.651]             sys.calls <- base::sys.calls
[09:31:25.651]             `[[` <- base::`[[`
[09:31:25.651]             `+` <- base::`+`
[09:31:25.651]             `<<-` <- base::`<<-`
[09:31:25.651]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:25.651]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:25.651]                   3L)]
[09:31:25.651]             }
[09:31:25.651]             function(cond) {
[09:31:25.651]                 is_error <- inherits(cond, "error")
[09:31:25.651]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:25.651]                   NULL)
[09:31:25.651]                 if (is_error) {
[09:31:25.651]                   sessionInformation <- function() {
[09:31:25.651]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:25.651]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:25.651]                       search = base::search(), system = base::Sys.info())
[09:31:25.651]                   }
[09:31:25.651]                   ...future.conditions[[length(...future.conditions) + 
[09:31:25.651]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:25.651]                     cond$call), session = sessionInformation(), 
[09:31:25.651]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:25.651]                   signalCondition(cond)
[09:31:25.651]                 }
[09:31:25.651]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:25.651]                 "immediateCondition"))) {
[09:31:25.651]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:25.651]                   ...future.conditions[[length(...future.conditions) + 
[09:31:25.651]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:25.651]                   if (TRUE && !signal) {
[09:31:25.651]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.651]                     {
[09:31:25.651]                       inherits <- base::inherits
[09:31:25.651]                       invokeRestart <- base::invokeRestart
[09:31:25.651]                       is.null <- base::is.null
[09:31:25.651]                       muffled <- FALSE
[09:31:25.651]                       if (inherits(cond, "message")) {
[09:31:25.651]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:25.651]                         if (muffled) 
[09:31:25.651]                           invokeRestart("muffleMessage")
[09:31:25.651]                       }
[09:31:25.651]                       else if (inherits(cond, "warning")) {
[09:31:25.651]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:25.651]                         if (muffled) 
[09:31:25.651]                           invokeRestart("muffleWarning")
[09:31:25.651]                       }
[09:31:25.651]                       else if (inherits(cond, "condition")) {
[09:31:25.651]                         if (!is.null(pattern)) {
[09:31:25.651]                           computeRestarts <- base::computeRestarts
[09:31:25.651]                           grepl <- base::grepl
[09:31:25.651]                           restarts <- computeRestarts(cond)
[09:31:25.651]                           for (restart in restarts) {
[09:31:25.651]                             name <- restart$name
[09:31:25.651]                             if (is.null(name)) 
[09:31:25.651]                               next
[09:31:25.651]                             if (!grepl(pattern, name)) 
[09:31:25.651]                               next
[09:31:25.651]                             invokeRestart(restart)
[09:31:25.651]                             muffled <- TRUE
[09:31:25.651]                             break
[09:31:25.651]                           }
[09:31:25.651]                         }
[09:31:25.651]                       }
[09:31:25.651]                       invisible(muffled)
[09:31:25.651]                     }
[09:31:25.651]                     muffleCondition(cond, pattern = "^muffle")
[09:31:25.651]                   }
[09:31:25.651]                 }
[09:31:25.651]                 else {
[09:31:25.651]                   if (TRUE) {
[09:31:25.651]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.651]                     {
[09:31:25.651]                       inherits <- base::inherits
[09:31:25.651]                       invokeRestart <- base::invokeRestart
[09:31:25.651]                       is.null <- base::is.null
[09:31:25.651]                       muffled <- FALSE
[09:31:25.651]                       if (inherits(cond, "message")) {
[09:31:25.651]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:25.651]                         if (muffled) 
[09:31:25.651]                           invokeRestart("muffleMessage")
[09:31:25.651]                       }
[09:31:25.651]                       else if (inherits(cond, "warning")) {
[09:31:25.651]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:25.651]                         if (muffled) 
[09:31:25.651]                           invokeRestart("muffleWarning")
[09:31:25.651]                       }
[09:31:25.651]                       else if (inherits(cond, "condition")) {
[09:31:25.651]                         if (!is.null(pattern)) {
[09:31:25.651]                           computeRestarts <- base::computeRestarts
[09:31:25.651]                           grepl <- base::grepl
[09:31:25.651]                           restarts <- computeRestarts(cond)
[09:31:25.651]                           for (restart in restarts) {
[09:31:25.651]                             name <- restart$name
[09:31:25.651]                             if (is.null(name)) 
[09:31:25.651]                               next
[09:31:25.651]                             if (!grepl(pattern, name)) 
[09:31:25.651]                               next
[09:31:25.651]                             invokeRestart(restart)
[09:31:25.651]                             muffled <- TRUE
[09:31:25.651]                             break
[09:31:25.651]                           }
[09:31:25.651]                         }
[09:31:25.651]                       }
[09:31:25.651]                       invisible(muffled)
[09:31:25.651]                     }
[09:31:25.651]                     muffleCondition(cond, pattern = "^muffle")
[09:31:25.651]                   }
[09:31:25.651]                 }
[09:31:25.651]             }
[09:31:25.651]         }))
[09:31:25.651]     }, error = function(ex) {
[09:31:25.651]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:25.651]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:25.651]                 ...future.rng), started = ...future.startTime, 
[09:31:25.651]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:25.651]             version = "1.8"), class = "FutureResult")
[09:31:25.651]     }, finally = {
[09:31:25.651]         if (!identical(...future.workdir, getwd())) 
[09:31:25.651]             setwd(...future.workdir)
[09:31:25.651]         {
[09:31:25.651]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:25.651]                 ...future.oldOptions$nwarnings <- NULL
[09:31:25.651]             }
[09:31:25.651]             base::options(...future.oldOptions)
[09:31:25.651]             if (.Platform$OS.type == "windows") {
[09:31:25.651]                 old_names <- names(...future.oldEnvVars)
[09:31:25.651]                 envs <- base::Sys.getenv()
[09:31:25.651]                 names <- names(envs)
[09:31:25.651]                 common <- intersect(names, old_names)
[09:31:25.651]                 added <- setdiff(names, old_names)
[09:31:25.651]                 removed <- setdiff(old_names, names)
[09:31:25.651]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:25.651]                   envs[common]]
[09:31:25.651]                 NAMES <- toupper(changed)
[09:31:25.651]                 args <- list()
[09:31:25.651]                 for (kk in seq_along(NAMES)) {
[09:31:25.651]                   name <- changed[[kk]]
[09:31:25.651]                   NAME <- NAMES[[kk]]
[09:31:25.651]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.651]                     next
[09:31:25.651]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:25.651]                 }
[09:31:25.651]                 NAMES <- toupper(added)
[09:31:25.651]                 for (kk in seq_along(NAMES)) {
[09:31:25.651]                   name <- added[[kk]]
[09:31:25.651]                   NAME <- NAMES[[kk]]
[09:31:25.651]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.651]                     next
[09:31:25.651]                   args[[name]] <- ""
[09:31:25.651]                 }
[09:31:25.651]                 NAMES <- toupper(removed)
[09:31:25.651]                 for (kk in seq_along(NAMES)) {
[09:31:25.651]                   name <- removed[[kk]]
[09:31:25.651]                   NAME <- NAMES[[kk]]
[09:31:25.651]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.651]                     next
[09:31:25.651]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:25.651]                 }
[09:31:25.651]                 if (length(args) > 0) 
[09:31:25.651]                   base::do.call(base::Sys.setenv, args = args)
[09:31:25.651]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:25.651]             }
[09:31:25.651]             else {
[09:31:25.651]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:25.651]             }
[09:31:25.651]             {
[09:31:25.651]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:25.651]                   0L) {
[09:31:25.651]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:25.651]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:25.651]                   base::options(opts)
[09:31:25.651]                 }
[09:31:25.651]                 {
[09:31:25.651]                   {
[09:31:25.651]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:25.651]                     NULL
[09:31:25.651]                   }
[09:31:25.651]                   options(future.plan = NULL)
[09:31:25.651]                   if (is.na(NA_character_)) 
[09:31:25.651]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:25.651]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:25.651]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:25.651]                     .init = FALSE)
[09:31:25.651]                 }
[09:31:25.651]             }
[09:31:25.651]         }
[09:31:25.651]     })
[09:31:25.651]     if (TRUE) {
[09:31:25.651]         base::sink(type = "output", split = FALSE)
[09:31:25.651]         if (TRUE) {
[09:31:25.651]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:25.651]         }
[09:31:25.651]         else {
[09:31:25.651]             ...future.result["stdout"] <- base::list(NULL)
[09:31:25.651]         }
[09:31:25.651]         base::close(...future.stdout)
[09:31:25.651]         ...future.stdout <- NULL
[09:31:25.651]     }
[09:31:25.651]     ...future.result$conditions <- ...future.conditions
[09:31:25.651]     ...future.result$finished <- base::Sys.time()
[09:31:25.651]     ...future.result
[09:31:25.651] }
[09:31:25.654] MultisessionFuture started
[09:31:25.655] - Launch lazy future ... done
[09:31:25.655] run() for ‘MultisessionFuture’ ... done
[09:31:25.655] result() for ClusterFuture ...
[09:31:25.655] receiveMessageFromWorker() for ClusterFuture ...
[09:31:25.655] - Validating connection of MultisessionFuture
[09:31:25.659] - received message: FutureResult
[09:31:25.660] - Received FutureResult
[09:31:25.660] - Erased future from FutureRegistry
[09:31:25.660] result() for ClusterFuture ...
[09:31:25.660] - result already collected: FutureResult
[09:31:25.660] result() for ClusterFuture ... done
[09:31:25.660] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:25.660] result() for ClusterFuture ... done
[09:31:25.660] result() for ClusterFuture ...
[09:31:25.660] - result already collected: FutureResult
[09:31:25.661] result() for ClusterFuture ... done
[09:31:25.661] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[09:31:25.661] Searching for globals...
[09:31:25.663] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:25.663] Searching for globals...
[09:31:25.664] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[09:31:25.664] Searching for globals ... DONE
[09:31:25.664] Resolving globals: FALSE
[09:31:25.665] The total size of the 1 globals is 160 bytes (160 bytes)
[09:31:25.665] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[09:31:25.665] - globals: [1] ‘data’
[09:31:25.666] 
[09:31:25.666] getGlobalsAndPackages() ... DONE
[09:31:25.666] run() for ‘Future’ ...
[09:31:25.666] - state: ‘created’
[09:31:25.666] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:25.680] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:25.680] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:25.680]   - Field: ‘node’
[09:31:25.681]   - Field: ‘label’
[09:31:25.681]   - Field: ‘local’
[09:31:25.681]   - Field: ‘owner’
[09:31:25.681]   - Field: ‘envir’
[09:31:25.681]   - Field: ‘workers’
[09:31:25.681]   - Field: ‘packages’
[09:31:25.681]   - Field: ‘gc’
[09:31:25.681]   - Field: ‘conditions’
[09:31:25.681]   - Field: ‘persistent’
[09:31:25.682]   - Field: ‘expr’
[09:31:25.682]   - Field: ‘uuid’
[09:31:25.682]   - Field: ‘seed’
[09:31:25.682]   - Field: ‘version’
[09:31:25.682]   - Field: ‘result’
[09:31:25.682]   - Field: ‘asynchronous’
[09:31:25.682]   - Field: ‘calls’
[09:31:25.682]   - Field: ‘globals’
[09:31:25.682]   - Field: ‘stdout’
[09:31:25.683]   - Field: ‘earlySignal’
[09:31:25.683]   - Field: ‘lazy’
[09:31:25.683]   - Field: ‘state’
[09:31:25.683] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:25.683] - Launch lazy future ...
[09:31:25.683] Packages needed by the future expression (n = 0): <none>
[09:31:25.683] Packages needed by future strategies (n = 0): <none>
[09:31:25.684] {
[09:31:25.684]     {
[09:31:25.684]         {
[09:31:25.684]             ...future.startTime <- base::Sys.time()
[09:31:25.684]             {
[09:31:25.684]                 {
[09:31:25.684]                   {
[09:31:25.684]                     {
[09:31:25.684]                       base::local({
[09:31:25.684]                         has_future <- base::requireNamespace("future", 
[09:31:25.684]                           quietly = TRUE)
[09:31:25.684]                         if (has_future) {
[09:31:25.684]                           ns <- base::getNamespace("future")
[09:31:25.684]                           version <- ns[[".package"]][["version"]]
[09:31:25.684]                           if (is.null(version)) 
[09:31:25.684]                             version <- utils::packageVersion("future")
[09:31:25.684]                         }
[09:31:25.684]                         else {
[09:31:25.684]                           version <- NULL
[09:31:25.684]                         }
[09:31:25.684]                         if (!has_future || version < "1.8.0") {
[09:31:25.684]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:25.684]                             "", base::R.version$version.string), 
[09:31:25.684]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:25.684]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:25.684]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:25.684]                               "release", "version")], collapse = " "), 
[09:31:25.684]                             hostname = base::Sys.info()[["nodename"]])
[09:31:25.684]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:25.684]                             info)
[09:31:25.684]                           info <- base::paste(info, collapse = "; ")
[09:31:25.684]                           if (!has_future) {
[09:31:25.684]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:25.684]                               info)
[09:31:25.684]                           }
[09:31:25.684]                           else {
[09:31:25.684]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:25.684]                               info, version)
[09:31:25.684]                           }
[09:31:25.684]                           base::stop(msg)
[09:31:25.684]                         }
[09:31:25.684]                       })
[09:31:25.684]                     }
[09:31:25.684]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:25.684]                     base::options(mc.cores = 1L)
[09:31:25.684]                   }
[09:31:25.684]                   ...future.strategy.old <- future::plan("list")
[09:31:25.684]                   options(future.plan = NULL)
[09:31:25.684]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:25.684]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:25.684]                 }
[09:31:25.684]                 ...future.workdir <- getwd()
[09:31:25.684]             }
[09:31:25.684]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:25.684]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:25.684]         }
[09:31:25.684]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:25.684]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:25.684]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:25.684]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:25.684]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:25.684]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:25.684]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:25.684]             base::names(...future.oldOptions))
[09:31:25.684]     }
[09:31:25.684]     if (FALSE) {
[09:31:25.684]     }
[09:31:25.684]     else {
[09:31:25.684]         if (TRUE) {
[09:31:25.684]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:25.684]                 open = "w")
[09:31:25.684]         }
[09:31:25.684]         else {
[09:31:25.684]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:25.684]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:25.684]         }
[09:31:25.684]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:25.684]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:25.684]             base::sink(type = "output", split = FALSE)
[09:31:25.684]             base::close(...future.stdout)
[09:31:25.684]         }, add = TRUE)
[09:31:25.684]     }
[09:31:25.684]     ...future.frame <- base::sys.nframe()
[09:31:25.684]     ...future.conditions <- base::list()
[09:31:25.684]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:25.684]     if (FALSE) {
[09:31:25.684]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:25.684]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:25.684]     }
[09:31:25.684]     ...future.result <- base::tryCatch({
[09:31:25.684]         base::withCallingHandlers({
[09:31:25.684]             ...future.value <- base::withVisible(base::local({
[09:31:25.684]                 ...future.makeSendCondition <- base::local({
[09:31:25.684]                   sendCondition <- NULL
[09:31:25.684]                   function(frame = 1L) {
[09:31:25.684]                     if (is.function(sendCondition)) 
[09:31:25.684]                       return(sendCondition)
[09:31:25.684]                     ns <- getNamespace("parallel")
[09:31:25.684]                     if (exists("sendData", mode = "function", 
[09:31:25.684]                       envir = ns)) {
[09:31:25.684]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:25.684]                         envir = ns)
[09:31:25.684]                       envir <- sys.frame(frame)
[09:31:25.684]                       master <- NULL
[09:31:25.684]                       while (!identical(envir, .GlobalEnv) && 
[09:31:25.684]                         !identical(envir, emptyenv())) {
[09:31:25.684]                         if (exists("master", mode = "list", envir = envir, 
[09:31:25.684]                           inherits = FALSE)) {
[09:31:25.684]                           master <- get("master", mode = "list", 
[09:31:25.684]                             envir = envir, inherits = FALSE)
[09:31:25.684]                           if (inherits(master, c("SOCKnode", 
[09:31:25.684]                             "SOCK0node"))) {
[09:31:25.684]                             sendCondition <<- function(cond) {
[09:31:25.684]                               data <- list(type = "VALUE", value = cond, 
[09:31:25.684]                                 success = TRUE)
[09:31:25.684]                               parallel_sendData(master, data)
[09:31:25.684]                             }
[09:31:25.684]                             return(sendCondition)
[09:31:25.684]                           }
[09:31:25.684]                         }
[09:31:25.684]                         frame <- frame + 1L
[09:31:25.684]                         envir <- sys.frame(frame)
[09:31:25.684]                       }
[09:31:25.684]                     }
[09:31:25.684]                     sendCondition <<- function(cond) NULL
[09:31:25.684]                   }
[09:31:25.684]                 })
[09:31:25.684]                 withCallingHandlers({
[09:31:25.684]                   subset(data, x < 3)$y
[09:31:25.684]                 }, immediateCondition = function(cond) {
[09:31:25.684]                   sendCondition <- ...future.makeSendCondition()
[09:31:25.684]                   sendCondition(cond)
[09:31:25.684]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.684]                   {
[09:31:25.684]                     inherits <- base::inherits
[09:31:25.684]                     invokeRestart <- base::invokeRestart
[09:31:25.684]                     is.null <- base::is.null
[09:31:25.684]                     muffled <- FALSE
[09:31:25.684]                     if (inherits(cond, "message")) {
[09:31:25.684]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:25.684]                       if (muffled) 
[09:31:25.684]                         invokeRestart("muffleMessage")
[09:31:25.684]                     }
[09:31:25.684]                     else if (inherits(cond, "warning")) {
[09:31:25.684]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:25.684]                       if (muffled) 
[09:31:25.684]                         invokeRestart("muffleWarning")
[09:31:25.684]                     }
[09:31:25.684]                     else if (inherits(cond, "condition")) {
[09:31:25.684]                       if (!is.null(pattern)) {
[09:31:25.684]                         computeRestarts <- base::computeRestarts
[09:31:25.684]                         grepl <- base::grepl
[09:31:25.684]                         restarts <- computeRestarts(cond)
[09:31:25.684]                         for (restart in restarts) {
[09:31:25.684]                           name <- restart$name
[09:31:25.684]                           if (is.null(name)) 
[09:31:25.684]                             next
[09:31:25.684]                           if (!grepl(pattern, name)) 
[09:31:25.684]                             next
[09:31:25.684]                           invokeRestart(restart)
[09:31:25.684]                           muffled <- TRUE
[09:31:25.684]                           break
[09:31:25.684]                         }
[09:31:25.684]                       }
[09:31:25.684]                     }
[09:31:25.684]                     invisible(muffled)
[09:31:25.684]                   }
[09:31:25.684]                   muffleCondition(cond)
[09:31:25.684]                 })
[09:31:25.684]             }))
[09:31:25.684]             future::FutureResult(value = ...future.value$value, 
[09:31:25.684]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:25.684]                   ...future.rng), globalenv = if (FALSE) 
[09:31:25.684]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:25.684]                     ...future.globalenv.names))
[09:31:25.684]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:25.684]         }, condition = base::local({
[09:31:25.684]             c <- base::c
[09:31:25.684]             inherits <- base::inherits
[09:31:25.684]             invokeRestart <- base::invokeRestart
[09:31:25.684]             length <- base::length
[09:31:25.684]             list <- base::list
[09:31:25.684]             seq.int <- base::seq.int
[09:31:25.684]             signalCondition <- base::signalCondition
[09:31:25.684]             sys.calls <- base::sys.calls
[09:31:25.684]             `[[` <- base::`[[`
[09:31:25.684]             `+` <- base::`+`
[09:31:25.684]             `<<-` <- base::`<<-`
[09:31:25.684]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:25.684]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:25.684]                   3L)]
[09:31:25.684]             }
[09:31:25.684]             function(cond) {
[09:31:25.684]                 is_error <- inherits(cond, "error")
[09:31:25.684]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:25.684]                   NULL)
[09:31:25.684]                 if (is_error) {
[09:31:25.684]                   sessionInformation <- function() {
[09:31:25.684]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:25.684]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:25.684]                       search = base::search(), system = base::Sys.info())
[09:31:25.684]                   }
[09:31:25.684]                   ...future.conditions[[length(...future.conditions) + 
[09:31:25.684]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:25.684]                     cond$call), session = sessionInformation(), 
[09:31:25.684]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:25.684]                   signalCondition(cond)
[09:31:25.684]                 }
[09:31:25.684]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:25.684]                 "immediateCondition"))) {
[09:31:25.684]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:25.684]                   ...future.conditions[[length(...future.conditions) + 
[09:31:25.684]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:25.684]                   if (TRUE && !signal) {
[09:31:25.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.684]                     {
[09:31:25.684]                       inherits <- base::inherits
[09:31:25.684]                       invokeRestart <- base::invokeRestart
[09:31:25.684]                       is.null <- base::is.null
[09:31:25.684]                       muffled <- FALSE
[09:31:25.684]                       if (inherits(cond, "message")) {
[09:31:25.684]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:25.684]                         if (muffled) 
[09:31:25.684]                           invokeRestart("muffleMessage")
[09:31:25.684]                       }
[09:31:25.684]                       else if (inherits(cond, "warning")) {
[09:31:25.684]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:25.684]                         if (muffled) 
[09:31:25.684]                           invokeRestart("muffleWarning")
[09:31:25.684]                       }
[09:31:25.684]                       else if (inherits(cond, "condition")) {
[09:31:25.684]                         if (!is.null(pattern)) {
[09:31:25.684]                           computeRestarts <- base::computeRestarts
[09:31:25.684]                           grepl <- base::grepl
[09:31:25.684]                           restarts <- computeRestarts(cond)
[09:31:25.684]                           for (restart in restarts) {
[09:31:25.684]                             name <- restart$name
[09:31:25.684]                             if (is.null(name)) 
[09:31:25.684]                               next
[09:31:25.684]                             if (!grepl(pattern, name)) 
[09:31:25.684]                               next
[09:31:25.684]                             invokeRestart(restart)
[09:31:25.684]                             muffled <- TRUE
[09:31:25.684]                             break
[09:31:25.684]                           }
[09:31:25.684]                         }
[09:31:25.684]                       }
[09:31:25.684]                       invisible(muffled)
[09:31:25.684]                     }
[09:31:25.684]                     muffleCondition(cond, pattern = "^muffle")
[09:31:25.684]                   }
[09:31:25.684]                 }
[09:31:25.684]                 else {
[09:31:25.684]                   if (TRUE) {
[09:31:25.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.684]                     {
[09:31:25.684]                       inherits <- base::inherits
[09:31:25.684]                       invokeRestart <- base::invokeRestart
[09:31:25.684]                       is.null <- base::is.null
[09:31:25.684]                       muffled <- FALSE
[09:31:25.684]                       if (inherits(cond, "message")) {
[09:31:25.684]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:25.684]                         if (muffled) 
[09:31:25.684]                           invokeRestart("muffleMessage")
[09:31:25.684]                       }
[09:31:25.684]                       else if (inherits(cond, "warning")) {
[09:31:25.684]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:25.684]                         if (muffled) 
[09:31:25.684]                           invokeRestart("muffleWarning")
[09:31:25.684]                       }
[09:31:25.684]                       else if (inherits(cond, "condition")) {
[09:31:25.684]                         if (!is.null(pattern)) {
[09:31:25.684]                           computeRestarts <- base::computeRestarts
[09:31:25.684]                           grepl <- base::grepl
[09:31:25.684]                           restarts <- computeRestarts(cond)
[09:31:25.684]                           for (restart in restarts) {
[09:31:25.684]                             name <- restart$name
[09:31:25.684]                             if (is.null(name)) 
[09:31:25.684]                               next
[09:31:25.684]                             if (!grepl(pattern, name)) 
[09:31:25.684]                               next
[09:31:25.684]                             invokeRestart(restart)
[09:31:25.684]                             muffled <- TRUE
[09:31:25.684]                             break
[09:31:25.684]                           }
[09:31:25.684]                         }
[09:31:25.684]                       }
[09:31:25.684]                       invisible(muffled)
[09:31:25.684]                     }
[09:31:25.684]                     muffleCondition(cond, pattern = "^muffle")
[09:31:25.684]                   }
[09:31:25.684]                 }
[09:31:25.684]             }
[09:31:25.684]         }))
[09:31:25.684]     }, error = function(ex) {
[09:31:25.684]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:25.684]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:25.684]                 ...future.rng), started = ...future.startTime, 
[09:31:25.684]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:25.684]             version = "1.8"), class = "FutureResult")
[09:31:25.684]     }, finally = {
[09:31:25.684]         if (!identical(...future.workdir, getwd())) 
[09:31:25.684]             setwd(...future.workdir)
[09:31:25.684]         {
[09:31:25.684]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:25.684]                 ...future.oldOptions$nwarnings <- NULL
[09:31:25.684]             }
[09:31:25.684]             base::options(...future.oldOptions)
[09:31:25.684]             if (.Platform$OS.type == "windows") {
[09:31:25.684]                 old_names <- names(...future.oldEnvVars)
[09:31:25.684]                 envs <- base::Sys.getenv()
[09:31:25.684]                 names <- names(envs)
[09:31:25.684]                 common <- intersect(names, old_names)
[09:31:25.684]                 added <- setdiff(names, old_names)
[09:31:25.684]                 removed <- setdiff(old_names, names)
[09:31:25.684]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:25.684]                   envs[common]]
[09:31:25.684]                 NAMES <- toupper(changed)
[09:31:25.684]                 args <- list()
[09:31:25.684]                 for (kk in seq_along(NAMES)) {
[09:31:25.684]                   name <- changed[[kk]]
[09:31:25.684]                   NAME <- NAMES[[kk]]
[09:31:25.684]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.684]                     next
[09:31:25.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:25.684]                 }
[09:31:25.684]                 NAMES <- toupper(added)
[09:31:25.684]                 for (kk in seq_along(NAMES)) {
[09:31:25.684]                   name <- added[[kk]]
[09:31:25.684]                   NAME <- NAMES[[kk]]
[09:31:25.684]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.684]                     next
[09:31:25.684]                   args[[name]] <- ""
[09:31:25.684]                 }
[09:31:25.684]                 NAMES <- toupper(removed)
[09:31:25.684]                 for (kk in seq_along(NAMES)) {
[09:31:25.684]                   name <- removed[[kk]]
[09:31:25.684]                   NAME <- NAMES[[kk]]
[09:31:25.684]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.684]                     next
[09:31:25.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:25.684]                 }
[09:31:25.684]                 if (length(args) > 0) 
[09:31:25.684]                   base::do.call(base::Sys.setenv, args = args)
[09:31:25.684]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:25.684]             }
[09:31:25.684]             else {
[09:31:25.684]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:25.684]             }
[09:31:25.684]             {
[09:31:25.684]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:25.684]                   0L) {
[09:31:25.684]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:25.684]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:25.684]                   base::options(opts)
[09:31:25.684]                 }
[09:31:25.684]                 {
[09:31:25.684]                   {
[09:31:25.684]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:25.684]                     NULL
[09:31:25.684]                   }
[09:31:25.684]                   options(future.plan = NULL)
[09:31:25.684]                   if (is.na(NA_character_)) 
[09:31:25.684]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:25.684]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:25.684]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:25.684]                     .init = FALSE)
[09:31:25.684]                 }
[09:31:25.684]             }
[09:31:25.684]         }
[09:31:25.684]     })
[09:31:25.684]     if (TRUE) {
[09:31:25.684]         base::sink(type = "output", split = FALSE)
[09:31:25.684]         if (TRUE) {
[09:31:25.684]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:25.684]         }
[09:31:25.684]         else {
[09:31:25.684]             ...future.result["stdout"] <- base::list(NULL)
[09:31:25.684]         }
[09:31:25.684]         base::close(...future.stdout)
[09:31:25.684]         ...future.stdout <- NULL
[09:31:25.684]     }
[09:31:25.684]     ...future.result$conditions <- ...future.conditions
[09:31:25.684]     ...future.result$finished <- base::Sys.time()
[09:31:25.684]     ...future.result
[09:31:25.684] }
[09:31:25.687] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[09:31:25.687] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[09:31:25.687] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[09:31:25.687] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[09:31:25.688] MultisessionFuture started
[09:31:25.688] - Launch lazy future ... done
[09:31:25.688] run() for ‘MultisessionFuture’ ... done
[09:31:25.689] result() for ClusterFuture ...
[09:31:25.689] receiveMessageFromWorker() for ClusterFuture ...
[09:31:25.689] - Validating connection of MultisessionFuture
[09:31:25.690] - received message: FutureResult
[09:31:25.690] - Received FutureResult
[09:31:25.690] - Erased future from FutureRegistry
[09:31:25.691] result() for ClusterFuture ...
[09:31:25.691] - result already collected: FutureResult
[09:31:25.691] result() for ClusterFuture ... done
[09:31:25.691] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:25.691] result() for ClusterFuture ... done
[09:31:25.691] result() for ClusterFuture ...
[09:31:25.691] - result already collected: FutureResult
[09:31:25.691] result() for ClusterFuture ... done
[09:31:25.692] plan(): Setting new future strategy stack:
[09:31:25.692] List of future strategies:
[09:31:25.692] 1. sequential:
[09:31:25.692]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:25.692]    - tweaked: FALSE
[09:31:25.692]    - call: plan(list(sequential, strategy))
[09:31:25.692] 2. multisession:
[09:31:25.692]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:25.692]    - tweaked: FALSE
[09:31:25.692]    - call: plan(list(sequential, strategy))
[09:31:25.693] plan(): nbrOfWorkers() = 1
[09:31:25.693] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:25.693] Searching for globals...
[09:31:25.699] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[09:31:25.700] Searching for globals ... DONE
[09:31:25.700] Resolving globals: FALSE
[09:31:25.700] The total size of the 1 globals is 160 bytes (160 bytes)
[09:31:25.701] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[09:31:25.701] - globals: [1] ‘data’
[09:31:25.701] - packages: [1] ‘future’
[09:31:25.701] getGlobalsAndPackages() ... DONE
[09:31:25.701] run() for ‘Future’ ...
[09:31:25.701] - state: ‘created’
[09:31:25.701] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:25.702] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:25.702] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:25.702]   - Field: ‘label’
[09:31:25.702]   - Field: ‘local’
[09:31:25.702]   - Field: ‘owner’
[09:31:25.702]   - Field: ‘envir’
[09:31:25.702]   - Field: ‘packages’
[09:31:25.702]   - Field: ‘gc’
[09:31:25.702]   - Field: ‘conditions’
[09:31:25.702]   - Field: ‘expr’
[09:31:25.703]   - Field: ‘uuid’
[09:31:25.703]   - Field: ‘seed’
[09:31:25.703]   - Field: ‘version’
[09:31:25.703]   - Field: ‘result’
[09:31:25.703]   - Field: ‘asynchronous’
[09:31:25.703]   - Field: ‘calls’
[09:31:25.703]   - Field: ‘globals’
[09:31:25.703]   - Field: ‘stdout’
[09:31:25.703]   - Field: ‘earlySignal’
[09:31:25.703]   - Field: ‘lazy’
[09:31:25.703]   - Field: ‘state’
[09:31:25.703] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:25.704] - Launch lazy future ...
[09:31:25.704] Packages needed by the future expression (n = 1): ‘future’
[09:31:25.704] Packages needed by future strategies (n = 1): ‘future’
[09:31:25.704] {
[09:31:25.704]     {
[09:31:25.704]         {
[09:31:25.704]             ...future.startTime <- base::Sys.time()
[09:31:25.704]             {
[09:31:25.704]                 {
[09:31:25.704]                   {
[09:31:25.704]                     {
[09:31:25.704]                       base::local({
[09:31:25.704]                         has_future <- base::requireNamespace("future", 
[09:31:25.704]                           quietly = TRUE)
[09:31:25.704]                         if (has_future) {
[09:31:25.704]                           ns <- base::getNamespace("future")
[09:31:25.704]                           version <- ns[[".package"]][["version"]]
[09:31:25.704]                           if (is.null(version)) 
[09:31:25.704]                             version <- utils::packageVersion("future")
[09:31:25.704]                         }
[09:31:25.704]                         else {
[09:31:25.704]                           version <- NULL
[09:31:25.704]                         }
[09:31:25.704]                         if (!has_future || version < "1.8.0") {
[09:31:25.704]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:25.704]                             "", base::R.version$version.string), 
[09:31:25.704]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:25.704]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:25.704]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:25.704]                               "release", "version")], collapse = " "), 
[09:31:25.704]                             hostname = base::Sys.info()[["nodename"]])
[09:31:25.704]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:25.704]                             info)
[09:31:25.704]                           info <- base::paste(info, collapse = "; ")
[09:31:25.704]                           if (!has_future) {
[09:31:25.704]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:25.704]                               info)
[09:31:25.704]                           }
[09:31:25.704]                           else {
[09:31:25.704]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:25.704]                               info, version)
[09:31:25.704]                           }
[09:31:25.704]                           base::stop(msg)
[09:31:25.704]                         }
[09:31:25.704]                       })
[09:31:25.704]                     }
[09:31:25.704]                     base::local({
[09:31:25.704]                       for (pkg in "future") {
[09:31:25.704]                         base::loadNamespace(pkg)
[09:31:25.704]                         base::library(pkg, character.only = TRUE)
[09:31:25.704]                       }
[09:31:25.704]                     })
[09:31:25.704]                   }
[09:31:25.704]                   ...future.strategy.old <- future::plan("list")
[09:31:25.704]                   options(future.plan = NULL)
[09:31:25.704]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:25.704]                   future::plan(list(function (..., workers = availableCores(), 
[09:31:25.704]                     lazy = FALSE, rscript_libs = .libPaths(), 
[09:31:25.704]                     envir = parent.frame()) 
[09:31:25.704]                   {
[09:31:25.704]                     if (is.function(workers)) 
[09:31:25.704]                       workers <- workers()
[09:31:25.704]                     workers <- structure(as.integer(workers), 
[09:31:25.704]                       class = class(workers))
[09:31:25.704]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[09:31:25.704]                       workers >= 1)
[09:31:25.704]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[09:31:25.704]                       return(sequential(..., lazy = TRUE, envir = envir))
[09:31:25.704]                     }
[09:31:25.704]                     future <- MultisessionFuture(..., workers = workers, 
[09:31:25.704]                       lazy = lazy, rscript_libs = rscript_libs, 
[09:31:25.704]                       envir = envir)
[09:31:25.704]                     if (!future$lazy) 
[09:31:25.704]                       future <- run(future)
[09:31:25.704]                     invisible(future)
[09:31:25.704]                   }), .cleanup = FALSE, .init = FALSE)
[09:31:25.704]                 }
[09:31:25.704]                 ...future.workdir <- getwd()
[09:31:25.704]             }
[09:31:25.704]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:25.704]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:25.704]         }
[09:31:25.704]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:25.704]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:25.704]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:25.704]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:25.704]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:25.704]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:25.704]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:25.704]             base::names(...future.oldOptions))
[09:31:25.704]     }
[09:31:25.704]     if (FALSE) {
[09:31:25.704]     }
[09:31:25.704]     else {
[09:31:25.704]         if (TRUE) {
[09:31:25.704]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:25.704]                 open = "w")
[09:31:25.704]         }
[09:31:25.704]         else {
[09:31:25.704]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:25.704]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:25.704]         }
[09:31:25.704]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:25.704]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:25.704]             base::sink(type = "output", split = FALSE)
[09:31:25.704]             base::close(...future.stdout)
[09:31:25.704]         }, add = TRUE)
[09:31:25.704]     }
[09:31:25.704]     ...future.frame <- base::sys.nframe()
[09:31:25.704]     ...future.conditions <- base::list()
[09:31:25.704]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:25.704]     if (FALSE) {
[09:31:25.704]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:25.704]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:25.704]     }
[09:31:25.704]     ...future.result <- base::tryCatch({
[09:31:25.704]         base::withCallingHandlers({
[09:31:25.704]             ...future.value <- base::withVisible(base::local({
[09:31:25.704]                 a %<-% subset(data, x < 3)$y
[09:31:25.704]                 a
[09:31:25.704]             }))
[09:31:25.704]             future::FutureResult(value = ...future.value$value, 
[09:31:25.704]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:25.704]                   ...future.rng), globalenv = if (FALSE) 
[09:31:25.704]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:25.704]                     ...future.globalenv.names))
[09:31:25.704]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:25.704]         }, condition = base::local({
[09:31:25.704]             c <- base::c
[09:31:25.704]             inherits <- base::inherits
[09:31:25.704]             invokeRestart <- base::invokeRestart
[09:31:25.704]             length <- base::length
[09:31:25.704]             list <- base::list
[09:31:25.704]             seq.int <- base::seq.int
[09:31:25.704]             signalCondition <- base::signalCondition
[09:31:25.704]             sys.calls <- base::sys.calls
[09:31:25.704]             `[[` <- base::`[[`
[09:31:25.704]             `+` <- base::`+`
[09:31:25.704]             `<<-` <- base::`<<-`
[09:31:25.704]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:25.704]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:25.704]                   3L)]
[09:31:25.704]             }
[09:31:25.704]             function(cond) {
[09:31:25.704]                 is_error <- inherits(cond, "error")
[09:31:25.704]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:25.704]                   NULL)
[09:31:25.704]                 if (is_error) {
[09:31:25.704]                   sessionInformation <- function() {
[09:31:25.704]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:25.704]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:25.704]                       search = base::search(), system = base::Sys.info())
[09:31:25.704]                   }
[09:31:25.704]                   ...future.conditions[[length(...future.conditions) + 
[09:31:25.704]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:25.704]                     cond$call), session = sessionInformation(), 
[09:31:25.704]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:25.704]                   signalCondition(cond)
[09:31:25.704]                 }
[09:31:25.704]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:25.704]                 "immediateCondition"))) {
[09:31:25.704]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:25.704]                   ...future.conditions[[length(...future.conditions) + 
[09:31:25.704]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:25.704]                   if (TRUE && !signal) {
[09:31:25.704]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.704]                     {
[09:31:25.704]                       inherits <- base::inherits
[09:31:25.704]                       invokeRestart <- base::invokeRestart
[09:31:25.704]                       is.null <- base::is.null
[09:31:25.704]                       muffled <- FALSE
[09:31:25.704]                       if (inherits(cond, "message")) {
[09:31:25.704]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:25.704]                         if (muffled) 
[09:31:25.704]                           invokeRestart("muffleMessage")
[09:31:25.704]                       }
[09:31:25.704]                       else if (inherits(cond, "warning")) {
[09:31:25.704]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:25.704]                         if (muffled) 
[09:31:25.704]                           invokeRestart("muffleWarning")
[09:31:25.704]                       }
[09:31:25.704]                       else if (inherits(cond, "condition")) {
[09:31:25.704]                         if (!is.null(pattern)) {
[09:31:25.704]                           computeRestarts <- base::computeRestarts
[09:31:25.704]                           grepl <- base::grepl
[09:31:25.704]                           restarts <- computeRestarts(cond)
[09:31:25.704]                           for (restart in restarts) {
[09:31:25.704]                             name <- restart$name
[09:31:25.704]                             if (is.null(name)) 
[09:31:25.704]                               next
[09:31:25.704]                             if (!grepl(pattern, name)) 
[09:31:25.704]                               next
[09:31:25.704]                             invokeRestart(restart)
[09:31:25.704]                             muffled <- TRUE
[09:31:25.704]                             break
[09:31:25.704]                           }
[09:31:25.704]                         }
[09:31:25.704]                       }
[09:31:25.704]                       invisible(muffled)
[09:31:25.704]                     }
[09:31:25.704]                     muffleCondition(cond, pattern = "^muffle")
[09:31:25.704]                   }
[09:31:25.704]                 }
[09:31:25.704]                 else {
[09:31:25.704]                   if (TRUE) {
[09:31:25.704]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:25.704]                     {
[09:31:25.704]                       inherits <- base::inherits
[09:31:25.704]                       invokeRestart <- base::invokeRestart
[09:31:25.704]                       is.null <- base::is.null
[09:31:25.704]                       muffled <- FALSE
[09:31:25.704]                       if (inherits(cond, "message")) {
[09:31:25.704]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:25.704]                         if (muffled) 
[09:31:25.704]                           invokeRestart("muffleMessage")
[09:31:25.704]                       }
[09:31:25.704]                       else if (inherits(cond, "warning")) {
[09:31:25.704]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:25.704]                         if (muffled) 
[09:31:25.704]                           invokeRestart("muffleWarning")
[09:31:25.704]                       }
[09:31:25.704]                       else if (inherits(cond, "condition")) {
[09:31:25.704]                         if (!is.null(pattern)) {
[09:31:25.704]                           computeRestarts <- base::computeRestarts
[09:31:25.704]                           grepl <- base::grepl
[09:31:25.704]                           restarts <- computeRestarts(cond)
[09:31:25.704]                           for (restart in restarts) {
[09:31:25.704]                             name <- restart$name
[09:31:25.704]                             if (is.null(name)) 
[09:31:25.704]                               next
[09:31:25.704]                             if (!grepl(pattern, name)) 
[09:31:25.704]                               next
[09:31:25.704]                             invokeRestart(restart)
[09:31:25.704]                             muffled <- TRUE
[09:31:25.704]                             break
[09:31:25.704]                           }
[09:31:25.704]                         }
[09:31:25.704]                       }
[09:31:25.704]                       invisible(muffled)
[09:31:25.704]                     }
[09:31:25.704]                     muffleCondition(cond, pattern = "^muffle")
[09:31:25.704]                   }
[09:31:25.704]                 }
[09:31:25.704]             }
[09:31:25.704]         }))
[09:31:25.704]     }, error = function(ex) {
[09:31:25.704]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:25.704]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:25.704]                 ...future.rng), started = ...future.startTime, 
[09:31:25.704]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:25.704]             version = "1.8"), class = "FutureResult")
[09:31:25.704]     }, finally = {
[09:31:25.704]         if (!identical(...future.workdir, getwd())) 
[09:31:25.704]             setwd(...future.workdir)
[09:31:25.704]         {
[09:31:25.704]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:25.704]                 ...future.oldOptions$nwarnings <- NULL
[09:31:25.704]             }
[09:31:25.704]             base::options(...future.oldOptions)
[09:31:25.704]             if (.Platform$OS.type == "windows") {
[09:31:25.704]                 old_names <- names(...future.oldEnvVars)
[09:31:25.704]                 envs <- base::Sys.getenv()
[09:31:25.704]                 names <- names(envs)
[09:31:25.704]                 common <- intersect(names, old_names)
[09:31:25.704]                 added <- setdiff(names, old_names)
[09:31:25.704]                 removed <- setdiff(old_names, names)
[09:31:25.704]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:25.704]                   envs[common]]
[09:31:25.704]                 NAMES <- toupper(changed)
[09:31:25.704]                 args <- list()
[09:31:25.704]                 for (kk in seq_along(NAMES)) {
[09:31:25.704]                   name <- changed[[kk]]
[09:31:25.704]                   NAME <- NAMES[[kk]]
[09:31:25.704]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.704]                     next
[09:31:25.704]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:25.704]                 }
[09:31:25.704]                 NAMES <- toupper(added)
[09:31:25.704]                 for (kk in seq_along(NAMES)) {
[09:31:25.704]                   name <- added[[kk]]
[09:31:25.704]                   NAME <- NAMES[[kk]]
[09:31:25.704]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.704]                     next
[09:31:25.704]                   args[[name]] <- ""
[09:31:25.704]                 }
[09:31:25.704]                 NAMES <- toupper(removed)
[09:31:25.704]                 for (kk in seq_along(NAMES)) {
[09:31:25.704]                   name <- removed[[kk]]
[09:31:25.704]                   NAME <- NAMES[[kk]]
[09:31:25.704]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:25.704]                     next
[09:31:25.704]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:25.704]                 }
[09:31:25.704]                 if (length(args) > 0) 
[09:31:25.704]                   base::do.call(base::Sys.setenv, args = args)
[09:31:25.704]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:25.704]             }
[09:31:25.704]             else {
[09:31:25.704]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:25.704]             }
[09:31:25.704]             {
[09:31:25.704]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:25.704]                   0L) {
[09:31:25.704]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:25.704]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:25.704]                   base::options(opts)
[09:31:25.704]                 }
[09:31:25.704]                 {
[09:31:25.704]                   {
[09:31:25.704]                     NULL
[09:31:25.704]                     RNGkind("Mersenne-Twister")
[09:31:25.704]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:25.704]                       inherits = FALSE)
[09:31:25.704]                   }
[09:31:25.704]                   options(future.plan = NULL)
[09:31:25.704]                   if (is.na(NA_character_)) 
[09:31:25.704]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:25.704]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:25.704]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:25.704]                     .init = FALSE)
[09:31:25.704]                 }
[09:31:25.704]             }
[09:31:25.704]         }
[09:31:25.704]     })
[09:31:25.704]     if (TRUE) {
[09:31:25.704]         base::sink(type = "output", split = FALSE)
[09:31:25.704]         if (TRUE) {
[09:31:25.704]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:25.704]         }
[09:31:25.704]         else {
[09:31:25.704]             ...future.result["stdout"] <- base::list(NULL)
[09:31:25.704]         }
[09:31:25.704]         base::close(...future.stdout)
[09:31:25.704]         ...future.stdout <- NULL
[09:31:25.704]     }
[09:31:25.704]     ...future.result$conditions <- ...future.conditions
[09:31:25.704]     ...future.result$finished <- base::Sys.time()
[09:31:25.704]     ...future.result
[09:31:25.704] }
[09:31:25.706] assign_globals() ...
[09:31:25.706] List of 1
[09:31:25.706]  $ data:'data.frame':	5 obs. of  2 variables:
[09:31:25.706]   ..$ x: int [1:5] 1 2 3 4 5
[09:31:25.706]   ..$ y: int [1:5] 1 2 3 4 5
[09:31:25.706]  - attr(*, "where")=List of 1
[09:31:25.706]   ..$ data:<environment: R_EmptyEnv> 
[09:31:25.706]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:31:25.706]  - attr(*, "resolved")= logi FALSE
[09:31:25.706]  - attr(*, "total_size")= num 160
[09:31:25.706]  - attr(*, "already-done")= logi TRUE
[09:31:25.710] - copied ‘data’ to environment
[09:31:25.710] assign_globals() ... done
[09:31:25.711] plan(): Setting new future strategy stack:
[09:31:25.711] List of future strategies:
[09:31:25.711] 1. multisession:
[09:31:25.711]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:25.711]    - tweaked: FALSE
[09:31:25.711]    - call: plan(list(sequential, strategy))
[09:31:25.715] plan(): nbrOfWorkers() = 2
[09:31:26.114] plan(): Setting new future strategy stack:
[09:31:26.115] List of future strategies:
[09:31:26.115] 1. sequential:
[09:31:26.115]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:26.115]    - tweaked: FALSE
[09:31:26.115]    - call: plan(list(sequential, strategy))
[09:31:26.115] 2. multisession:
[09:31:26.115]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:26.115]    - tweaked: FALSE
[09:31:26.115]    - call: plan(list(sequential, strategy))
[09:31:26.115] plan(): nbrOfWorkers() = 1
[09:31:26.115] SequentialFuture started (and completed)
[09:31:26.115] signalConditions() ...
[09:31:26.115]  - include = ‘immediateCondition’
[09:31:26.116]  - exclude = 
[09:31:26.116]  - resignal = FALSE
[09:31:26.116]  - Number of conditions: 93
[09:31:26.116] signalConditions() ... done
[09:31:26.116] - Launch lazy future ... done
[09:31:26.116] run() for ‘SequentialFuture’ ... done
[09:31:26.116] signalConditions() ...
[09:31:26.116]  - include = ‘immediateCondition’
[09:31:26.116]  - exclude = 
[09:31:26.116]  - resignal = FALSE
[09:31:26.117]  - Number of conditions: 93
[09:31:26.117] signalConditions() ... done
[09:31:26.117] Future state: ‘finished’
[09:31:26.117] signalConditions() ...
[09:31:26.117]  - include = ‘condition’
[09:31:26.117]  - exclude = ‘immediateCondition’
[09:31:26.117]  - resignal = TRUE
[09:31:26.117]  - Number of conditions: 93
[09:31:26.117]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.715] getGlobalsAndPackages() ...
[09:31:26.117]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[09:31:26.118]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.728] Searching for globals...
[09:31:26.118]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.729] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[09:31:26.118]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.729] Searching for globals ... DONE
[09:31:26.118]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.730] Resolving globals: FALSE
[09:31:26.118]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.730] The total size of the 1 globals is 160 bytes (160 bytes)
[09:31:26.118]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.730] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[09:31:26.118]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.731] - globals: [1] ‘data’
[09:31:26.118]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.731] 
[09:31:26.119]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.731] getGlobalsAndPackages() ... DONE
[09:31:26.119]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.731] run() for ‘Future’ ...
[09:31:26.119]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.731] - state: ‘created’
[09:31:26.119]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.731] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:26.119]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.735] [local output] makeClusterPSOCK() ...
[09:31:26.119]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.738] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:31:26.119]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.738] [local output] Base port: 11363
[09:31:26.120]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.738] [local output] Getting setup options for 2 cluster nodes ...
[09:31:26.120]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.738] [local output]  - Node 1 of 2 ...
[09:31:26.120]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.739] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:26.120]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.739] [local output] Rscript port: 11363

[09:31:26.120]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.740] [local output]  - Node 2 of 2 ...
[09:31:26.120]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.740] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:26.120]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.741] [local output] Rscript port: 11363

[09:31:26.120]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.741] [local output] Getting setup options for 2 cluster nodes ... done
[09:31:26.121]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.741] [local output]  - Parallel setup requested for some PSOCK nodes
[09:31:26.121]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.741] [local output] Setting up PSOCK nodes in parallel
[09:31:26.121]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.741] List of 36
[09:31:25.741]  $ worker          : chr "localhost"
[09:31:25.741]   ..- attr(*, "localhost")= logi TRUE
[09:31:25.741]  $ master          : chr "localhost"
[09:31:25.741]  $ port            : int 11363
[09:31:25.741]  $ connectTimeout  : num 120
[09:31:25.741]  $ timeout         : num 2592000
[09:31:25.741]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:31:25.741]  $ homogeneous     : logi TRUE
[09:31:25.741]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:31:25.741]  $ rscript_envs    : NULL
[09:31:25.741]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:25.741]  $ rscript_startup : NULL
[09:31:25.741]  $ rscript_sh      : chr "sh"
[09:31:25.741]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:25.741]  $ methods         : logi TRUE
[09:31:25.741]  $ socketOptions   : chr "no-delay"
[09:31:25.741]  $ useXDR          : logi FALSE
[09:31:25.741]  $ outfile         : chr "/dev/null"
[09:31:25.741]  $ renice          : int NA
[09:31:25.741]  $ rshcmd          : NULL
[09:31:25.741]  $ user            : chr(0) 
[09:31:25.741]  $ revtunnel       : logi FALSE
[09:31:25.741]  $ rshlogfile      : NULL
[09:31:25.741]  $ rshopts         : chr(0) 
[09:31:25.741]  $ rank            : int 1
[09:31:25.741]  $ manual          : logi FALSE
[09:31:25.741]  $ dryrun          : logi FALSE
[09:31:25.741]  $ quiet           : logi FALSE
[09:31:25.741]  $ setup_strategy  : chr "parallel"
[09:31:25.741]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:25.741]  $ pidfile         : chr "/tmp/RtmpUzkrDI/worker.rank=1.parallelly.parent=43588.aa44428bf81a.pid"
[09:31:25.741]  $ rshcmd_label    : NULL
[09:31:25.741]  $ rsh_call        : NULL
[09:31:25.741]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:25.741]  $ localMachine    : logi TRUE
[09:31:25.741]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:31:25.741]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:31:25.741]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:31:25.741]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:31:25.741]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:31:25.741]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:31:25.741]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:31:25.741]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:31:25.741]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:31:25.741]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:31:25.741]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:31:25.741]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:31:25.741]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:31:25.741]  $ arguments       :List of 28
[09:31:25.741]   ..$ worker          : chr "localhost"
[09:31:25.741]   ..$ master          : NULL
[09:31:25.741]   ..$ port            : int 11363
[09:31:25.741]   ..$ connectTimeout  : num 120
[09:31:25.741]   ..$ timeout         : num 2592000
[09:31:25.741]   ..$ rscript         : NULL
[09:31:25.741]   ..$ homogeneous     : NULL
[09:31:25.741]   ..$ rscript_args    : NULL
[09:31:25.741]   ..$ rscript_envs    : NULL
[09:31:25.741]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:25.741]   ..$ rscript_startup : NULL
[09:31:25.741]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:31:25.741]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:25.741]   ..$ methods         : logi TRUE
[09:31:25.741]   ..$ socketOptions   : chr "no-delay"
[09:31:25.741]   ..$ useXDR          : logi FALSE
[09:31:25.741]   ..$ outfile         : chr "/dev/null"
[09:31:25.741]   ..$ renice          : int NA
[09:31:25.741]   ..$ rshcmd          : NULL
[09:31:25.741]   ..$ user            : NULL
[09:31:25.741]   ..$ revtunnel       : logi NA
[09:31:25.741]   ..$ rshlogfile      : NULL
[09:31:25.741]   ..$ rshopts         : NULL
[09:31:25.741]   ..$ rank            : int 1
[09:31:25.741]   ..$ manual          : logi FALSE
[09:31:25.741]   ..$ dryrun          : logi FALSE
[09:31:25.741]   ..$ quiet           : logi FALSE
[09:31:25.741]   ..$ setup_strategy  : chr "parallel"
[09:31:25.741]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:31:26.121]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.757] [local output] System call to launch all workers:
[09:31:26.121]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.758] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpUzkrDI/worker.rank=1.parallelly.parent=43588.aa44428bf81a.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11363 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:31:26.121]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.758] [local output] Starting PSOCK main server
[09:31:26.121]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.759] [local output] Workers launched
[09:31:26.121]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.759] [local output] Waiting for workers to connect back
[09:31:26.122]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:25.760]  - [local output] 0 workers out of 2 ready
[09:31:26.122]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.000]  - [local output] 0 workers out of 2 ready
[09:31:26.122]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.001]  - [local output] 1 workers out of 2 ready
[09:31:26.122]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.010]  - [local output] 1 workers out of 2 ready
[09:31:26.122]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.011]  - [local output] 2 workers out of 2 ready
[09:31:26.122]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.011] [local output] Launching of workers completed
[09:31:26.122]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.011] [local output] Collecting session information from workers
[09:31:26.122]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.011] [local output]  - Worker #1 of 2
[09:31:26.123]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.012] [local output]  - Worker #2 of 2
[09:31:26.123]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.012] [local output] makeClusterPSOCK() ... done
[09:31:26.123]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.022] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:26.123]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.022] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:26.123]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.023]   - Field: ‘node’
[09:31:26.123]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.023]   - Field: ‘label’
[09:31:26.123]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.023]   - Field: ‘local’
[09:31:26.123]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.023]   - Field: ‘owner’
[09:31:26.123]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.023]   - Field: ‘envir’
[09:31:26.124]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.023]   - Field: ‘workers’
[09:31:26.124]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.023]   - Field: ‘packages’
[09:31:26.124]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.023]   - Field: ‘gc’
[09:31:26.124]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.023]   - Field: ‘conditions’
[09:31:26.124]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.024]   - Field: ‘persistent’
[09:31:26.124]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.024]   - Field: ‘expr’
[09:31:26.124]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.024]   - Field: ‘uuid’
[09:31:26.124]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.024]   - Field: ‘seed’
[09:31:26.125]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.024]   - Field: ‘version’
[09:31:26.125]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.024]   - Field: ‘result’
[09:31:26.125]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.024]   - Field: ‘asynchronous’
[09:31:26.125]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.024]   - Field: ‘calls’
[09:31:26.125]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.024]   - Field: ‘globals’
[09:31:26.125]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.025]   - Field: ‘stdout’
[09:31:26.125]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.025]   - Field: ‘earlySignal’
[09:31:26.125]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.025]   - Field: ‘lazy’
[09:31:26.126]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.025]   - Field: ‘state’
[09:31:26.126]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.025] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:26.126]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.025] - Launch lazy future ...
[09:31:26.126]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.025] Packages needed by the future expression (n = 0): <none>
[09:31:26.126]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.025] Packages needed by future strategies (n = 0): <none>
[09:31:26.126]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.026] {
[09:31:26.026]     {
[09:31:26.026]         {
[09:31:26.026]             ...future.startTime <- base::Sys.time()
[09:31:26.026]             {
[09:31:26.026]                 {
[09:31:26.026]                   {
[09:31:26.026]                     {
[09:31:26.026]                       base::local({
[09:31:26.026]                         has_future <- base::requireNamespace("future", 
[09:31:26.026]                           quietly = TRUE)
[09:31:26.026]                         if (has_future) {
[09:31:26.026]                           ns <- base::getNamespace("future")
[09:31:26.026]                           version <- ns[[".package"]][["version"]]
[09:31:26.026]                           if (is.null(version)) 
[09:31:26.026]                             version <- utils::packageVersion("future")
[09:31:26.026]                         }
[09:31:26.026]                         else {
[09:31:26.026]                           version <- NULL
[09:31:26.026]                         }
[09:31:26.026]                         if (!has_future || version < "1.8.0") {
[09:31:26.026]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:26.026]                             "", base::R.version$version.string), 
[09:31:26.026]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:26.026]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:26.026]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:26.026]                               "release", "version")], collapse = " "), 
[09:31:26.026]                             hostname = base::Sys.info()[["nodename"]])
[09:31:26.026]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:26.026]                             info)
[09:31:26.026]                           info <- base::paste(info, collapse = "; ")
[09:31:26.026]                           if (!has_future) {
[09:31:26.026]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:26.026]                               info)
[09:31:26.026]                           }
[09:31:26.026]                           else {
[09:31:26.026]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:26.026]                               info, version)
[09:31:26.026]                           }
[09:31:26.026]                           base::stop(msg)
[09:31:26.026]                         }
[09:31:26.026]                       })
[09:31:26.026]                     }
[09:31:26.026]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:26.026]                     base::options(mc.cores = 1L)
[09:31:26.026]                   }
[09:31:26.026]                   ...future.strategy.old <- future::plan("list")
[09:31:26.026]                   options(future.plan = NULL)
[09:31:26.026]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:26.026]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:26.026]                 }
[09:31:26.026]                 ...future.workdir <- getwd()
[09:31:26.026]             }
[09:31:26.026]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:26.026]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:26.026]         }
[09:31:26.026]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[09:31:26.026]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:26.026]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[09:31:26.026]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:26.026]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:26.026]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:26.026]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:26.026]             base::names(...future.oldOptions))
[09:31:26.026]     }
[09:31:26.026]     if (FALSE) {
[09:31:26.026]     }
[09:31:26.026]     else {
[09:31:26.026]         if (TRUE) {
[09:31:26.026]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:26.026]                 open = "w")
[09:31:26.026]         }
[09:31:26.026]         else {
[09:31:26.026]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:26.026]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:26.026]         }
[09:31:26.026]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:26.026]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:26.026]             base::sink(type = "output", split = FALSE)
[09:31:26.026]             base::close(...future.stdout)
[09:31:26.026]         }, add = TRUE)
[09:31:26.026]     }
[09:31:26.026]     ...future.frame <- base::sys.nframe()
[09:31:26.026]     ...future.conditions <- base::list()
[09:31:26.026]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:26.026]     if (FALSE) {
[09:31:26.026]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:26.026]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:26.026]     }
[09:31:26.026]     ...future.result <- base::tryCatch({
[09:31:26.026]         base::withCallingHandlers({
[09:31:26.026]             ...future.value <- base::withVisible(base::local({
[09:31:26.026]                 ...future.makeSendCondition <- base::local({
[09:31:26.026]                   sendCondition <- NULL
[09:31:26.026]                   function(frame = 1L) {
[09:31:26.026]                     if (is.function(sendCondition)) 
[09:31:26.026]                       return(sendCondition)
[09:31:26.026]                     ns <- getNamespace("parallel")
[09:31:26.026]                     if (exists("sendData", mode = "function", 
[09:31:26.026]                       envir = ns)) {
[09:31:26.026]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:26.026]                         envir = ns)
[09:31:26.026]                       envir <- sys.frame(frame)
[09:31:26.026]                       master <- NULL
[09:31:26.026]                       while (!identical(envir, .GlobalEnv) && 
[09:31:26.026]                         !identical(envir, emptyenv())) {
[09:31:26.026]                         if (exists("master", mode = "list", envir = envir, 
[09:31:26.026]                           inherits = FALSE)) {
[09:31:26.026]                           master <- get("master", mode = "list", 
[09:31:26.026]                             envir = envir, inherits = FALSE)
[09:31:26.026]                           if (inherits(master, c("SOCKnode", 
[09:31:26.026]                             "SOCK0node"))) {
[09:31:26.026]                             sendCondition <<- function(cond) {
[09:31:26.026]                               data <- list(type = "VALUE", value = cond, 
[09:31:26.026]                                 success = TRUE)
[09:31:26.026]                               parallel_sendData(master, data)
[09:31:26.026]                             }
[09:31:26.026]                             return(sendCondition)
[09:31:26.026]                           }
[09:31:26.026]                         }
[09:31:26.026]                         frame <- frame + 1L
[09:31:26.026]                         envir <- sys.frame(frame)
[09:31:26.026]                       }
[09:31:26.026]                     }
[09:31:26.026]                     sendCondition <<- function(cond) NULL
[09:31:26.026]                   }
[09:31:26.026]                 })
[09:31:26.026]                 withCallingHandlers({
[09:31:26.026]                   subset(data, x < 3)$y
[09:31:26.026]                 }, immediateCondition = function(cond) {
[09:31:26.026]                   sendCondition <- ...future.makeSendCondition()
[09:31:26.026]                   sendCondition(cond)
[09:31:26.026]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:26.026]                   {
[09:31:26.026]                     inherits <- base::inherits
[09:31:26.026]                     invokeRestart <- base::invokeRestart
[09:31:26.026]                     is.null <- base::is.null
[09:31:26.026]                     muffled <- FALSE
[09:31:26.026]                     if (inherits(cond, "message")) {
[09:31:26.026]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:26.026]                       if (muffled) 
[09:31:26.026]                         invokeRestart("muffleMessage")
[09:31:26.026]                     }
[09:31:26.026]                     else if (inherits(cond, "warning")) {
[09:31:26.026]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:26.026]                       if (muffled) 
[09:31:26.026]                         invokeRestart("muffleWarning")
[09:31:26.026]                     }
[09:31:26.026]                     else if (inherits(cond, "condition")) {
[09:31:26.026]                       if (!is.null(pattern)) {
[09:31:26.026]                         computeRestarts <- base::computeRestarts
[09:31:26.026]                         grepl <- base::grepl
[09:31:26.026]                         restarts <- computeRestarts(cond)
[09:31:26.026]                         for (restart in restarts) {
[09:31:26.026]                           name <- restart$name
[09:31:26.026]                           if (is.null(name)) 
[09:31:26.026]                             next
[09:31:26.026]                           if (!grepl(pattern, name)) 
[09:31:26.026]                             next
[09:31:26.026]                           invokeRestart(restart)
[09:31:26.026]                           muffled <- TRUE
[09:31:26.026]                           break
[09:31:26.026]                         }
[09:31:26.026]                       }
[09:31:26.026]                     }
[09:31:26.026]                     invisible(muffled)
[09:31:26.026]                   }
[09:31:26.026]                   muffleCondition(cond)
[09:31:26.026]                 })
[09:31:26.026]             }))
[09:31:26.026]             future::FutureResult(value = ...future.value$value, 
[09:31:26.026]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:26.026]                   ...future.rng), globalenv = if (FALSE) 
[09:31:26.026]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:26.026]                     ...future.globalenv.names))
[09:31:26.026]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:26.026]         }, condition = base::local({
[09:31:26.026]             c <- base::c
[09:31:26.026]             inherits <- base::inherits
[09:31:26.026]             invokeRestart <- base::invokeRestart
[09:31:26.026]             length <- base::length
[09:31:26.026]             list <- base::list
[09:31:26.026]             seq.int <- base::seq.int
[09:31:26.026]             signalCondition <- base::signalCondition
[09:31:26.026]             sys.calls <- base::sys.calls
[09:31:26.026]             `[[` <- base::`[[`
[09:31:26.026]             `+` <- base::`+`
[09:31:26.026]             `<<-` <- base::`<<-`
[09:31:26.026]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:26.026]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:26.026]                   3L)]
[09:31:26.026]             }
[09:31:26.026]             function(cond) {
[09:31:26.026]                 is_error <- inherits(cond, "error")
[09:31:26.026]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:26.026]                   NULL)
[09:31:26.026]                 if (is_error) {
[09:31:26.026]                   sessionInformation <- function() {
[09:31:26.026]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:26.026]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:26.026]                       search = base::search(), system = base::Sys.info())
[09:31:26.026]                   }
[09:31:26.026]                   ...future.conditions[[length(...future.conditions) + 
[09:31:26.026]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:26.026]                     cond$call), session = sessionInformation(), 
[09:31:26.026]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:26.026]                   signalCondition(cond)
[09:31:26.026]                 }
[09:31:26.026]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:26.026]                 "immediateCondition"))) {
[09:31:26.026]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:26.026]                   ...future.conditions[[length(...future.conditions) + 
[09:31:26.026]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:26.026]                   if (TRUE && !signal) {
[09:31:26.026]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:26.026]                     {
[09:31:26.026]                       inherits <- base::inherits
[09:31:26.026]                       invokeRestart <- base::invokeRestart
[09:31:26.026]                       is.null <- base::is.null
[09:31:26.026]                       muffled <- FALSE
[09:31:26.026]                       if (inherits(cond, "message")) {
[09:31:26.026]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:26.026]                         if (muffled) 
[09:31:26.026]                           invokeRestart("muffleMessage")
[09:31:26.026]                       }
[09:31:26.026]                       else if (inherits(cond, "warning")) {
[09:31:26.026]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:26.026]                         if (muffled) 
[09:31:26.026]                           invokeRestart("muffleWarning")
[09:31:26.026]                       }
[09:31:26.026]                       else if (inherits(cond, "condition")) {
[09:31:26.026]                         if (!is.null(pattern)) {
[09:31:26.026]                           computeRestarts <- base::computeRestarts
[09:31:26.026]                           grepl <- base::grepl
[09:31:26.026]                           restarts <- computeRestarts(cond)
[09:31:26.026]                           for (restart in restarts) {
[09:31:26.026]                             name <- restart$name
[09:31:26.026]                             if (is.null(name)) 
[09:31:26.026]                               next
[09:31:26.026]                             if (!grepl(pattern, name)) 
[09:31:26.026]                               next
[09:31:26.026]                             invokeRestart(restart)
[09:31:26.026]                             muffled <- TRUE
[09:31:26.026]                             break
[09:31:26.026]                           }
[09:31:26.026]                         }
[09:31:26.026]                       }
[09:31:26.026]                       invisible(muffled)
[09:31:26.026]                     }
[09:31:26.026]                     muffleCondition(cond, pattern = "^muffle")
[09:31:26.026]                   }
[09:31:26.026]                 }
[09:31:26.026]                 else {
[09:31:26.026]                   if (TRUE) {
[09:31:26.026]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:26.026]                     {
[09:31:26.026]                       inherits <- base::inherits
[09:31:26.026]                       invokeRestart <- base::invokeRestart
[09:31:26.026]                       is.null <- base::is.null
[09:31:26.026]                       muffled <- FALSE
[09:31:26.026]                       if (inherits(cond, "message")) {
[09:31:26.026]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:26.026]                         if (muffled) 
[09:31:26.026]                           invokeRestart("muffleMessage")
[09:31:26.026]                       }
[09:31:26.026]                       else if (inherits(cond, "warning")) {
[09:31:26.026]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:26.026]                         if (muffled) 
[09:31:26.026]                           invokeRestart("muffleWarning")
[09:31:26.026]                       }
[09:31:26.026]                       else if (inherits(cond, "condition")) {
[09:31:26.026]                         if (!is.null(pattern)) {
[09:31:26.026]                           computeRestarts <- base::computeRestarts
[09:31:26.026]                           grepl <- base::grepl
[09:31:26.026]                           restarts <- computeRestarts(cond)
[09:31:26.026]                           for (restart in restarts) {
[09:31:26.026]                             name <- restart$name
[09:31:26.026]                             if (is.null(name)) 
[09:31:26.026]                               next
[09:31:26.026]                             if (!grepl(pattern, name)) 
[09:31:26.026]                               next
[09:31:26.026]                             invokeRestart(restart)
[09:31:26.026]                             muffled <- TRUE
[09:31:26.026]                             break
[09:31:26.026]                           }
[09:31:26.026]                         }
[09:31:26.026]                       }
[09:31:26.026]                       invisible(muffled)
[09:31:26.026]                     }
[09:31:26.026]                     muffleCondition(cond, pattern = "^muffle")
[09:31:26.026]                   }
[09:31:26.026]                 }
[09:31:26.026]             }
[09:31:26.026]         }))
[09:31:26.026]     }, error = function(ex) {
[09:31:26.026]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:26.026]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:26.026]                 ...future.rng), started = ...future.startTime, 
[09:31:26.026]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:26.026]             version = "1.8"), class = "FutureResult")
[09:31:26.026]     }, finally = {
[09:31:26.026]         if (!identical(...future.workdir, getwd())) 
[09:31:26.026]             setwd(...future.workdir)
[09:31:26.026]         {
[09:31:26.026]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:26.026]                 ...future.oldOptions$nwarnings <- NULL
[09:31:26.026]             }
[09:31:26.026]             base::options(...future.oldOptions)
[09:31:26.026]             if (.Platform$OS.type == "windows") {
[09:31:26.026]                 old_names <- names(...future.oldEnvVars)
[09:31:26.026]                 envs <- base::Sys.getenv()
[09:31:26.026]                 names <- names(envs)
[09:31:26.026]                 common <- intersect(names, old_names)
[09:31:26.026]                 added <- setdiff(names, old_names)
[09:31:26.026]                 removed <- setdiff(old_names, names)
[09:31:26.026]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:26.026]                   envs[common]]
[09:31:26.026]                 NAMES <- toupper(changed)
[09:31:26.026]                 args <- list()
[09:31:26.026]                 for (kk in seq_along(NAMES)) {
[09:31:26.026]                   name <- changed[[kk]]
[09:31:26.026]                   NAME <- NAMES[[kk]]
[09:31:26.026]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:26.026]                     next
[09:31:26.026]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:26.026]                 }
[09:31:26.026]                 NAMES <- toupper(added)
[09:31:26.026]                 for (kk in seq_along(NAMES)) {
[09:31:26.026]                   name <- added[[kk]]
[09:31:26.026]                   NAME <- NAMES[[kk]]
[09:31:26.026]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:26.026]                     next
[09:31:26.026]                   args[[name]] <- ""
[09:31:26.026]                 }
[09:31:26.026]                 NAMES <- toupper(removed)
[09:31:26.026]                 for (kk in seq_along(NAMES)) {
[09:31:26.026]                   name <- removed[[kk]]
[09:31:26.026]                   NAME <- NAMES[[kk]]
[09:31:26.026]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:26.026]                     next
[09:31:26.026]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:26.026]                 }
[09:31:26.026]                 if (length(args) > 0) 
[09:31:26.026]                   base::do.call(base::Sys.setenv, args = args)
[09:31:26.026]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:26.026]             }
[09:31:26.026]             else {
[09:31:26.026]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:26.026]             }
[09:31:26.026]             {
[09:31:26.026]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:26.026]                   0L) {
[09:31:26.026]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:26.026]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:26.026]                   base::options(opts)
[09:31:26.026]                 }
[09:31:26.026]                 {
[09:31:26.026]                   {
[09:31:26.026]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:26.026]                     NULL
[09:31:26.026]                   }
[09:31:26.026]                   options(future.plan = NULL)
[09:31:26.026]                   if (is.na(NA_character_)) 
[09:31:26.026]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:26.026]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:26.026]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:26.026]                     .init = FALSE)
[09:31:26.026]                 }
[09:31:26.026]             }
[09:31:26.026]         }
[09:31:26.026]     })
[09:31:26.026]     if (TRUE) {
[09:31:26.026]         base::sink(type = "output", split = FALSE)
[09:31:26.026]         if (TRUE) {
[09:31:26.026]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:26.026]         }
[09:31:26.026]         else {
[09:31:26.026]             ...future.result["stdout"] <- base::list(NULL)
[09:31:26.026]         }
[09:31:26.026]         base::close(...future.stdout)
[09:31:26.026]         ...future.stdout <- NULL
[09:31:26.026]     }
[09:31:26.026]     ...future.result$conditions <- ...future.conditions
[09:31:26.026]     ...future.result$finished <- base::Sys.time()
[09:31:26.026]     ...future.result
[09:31:26.026] }
[09:31:26.126]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.077] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[09:31:26.126]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.077] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[09:31:26.127]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.078] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[09:31:26.127]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.078] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[09:31:26.127]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.078] MultisessionFuture started
[09:31:26.127]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.079] - Launch lazy future ... done
[09:31:26.127]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.079] run() for ‘MultisessionFuture’ ... done
[09:31:26.127]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.079] result() for ClusterFuture ...
[09:31:26.127]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.079] receiveMessageFromWorker() for ClusterFuture ...
[09:31:26.127]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.079] - Validating connection of MultisessionFuture
[09:31:26.128]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.111] - received message: FutureResult
[09:31:26.128]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.111] - Received FutureResult
[09:31:26.128]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.113] - Erased future from FutureRegistry
[09:31:26.128]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.113] result() for ClusterFuture ...
[09:31:26.128]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.113] - result already collected: FutureResult
[09:31:26.128]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.113] result() for ClusterFuture ... done
[09:31:26.128]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.114] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:26.128]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.114] result() for ClusterFuture ... done
[09:31:26.129]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.114] result() for ClusterFuture ...
[09:31:26.129]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.114] - result already collected: FutureResult
[09:31:26.129]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[09:31:26.114] result() for ClusterFuture ... done
[09:31:26.129] signalConditions() ... done
- Strategy: multisession ... DONE
> 
> 
> message("*** Globals w/ non-standard evaluation (NSE) ... DONE")
*** Globals w/ non-standard evaluation (NSE) ... DONE
> 
> source("incl/end.R")
[09:31:26.130] plan(): Setting new future strategy stack:
[09:31:26.130] List of future strategies:
[09:31:26.130] 1. FutureStrategy:
[09:31:26.130]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:26.130]    - tweaked: FALSE
[09:31:26.130]    - call: future::plan(oplan)
[09:31:26.130] plan(): nbrOfWorkers() = 1
> 
