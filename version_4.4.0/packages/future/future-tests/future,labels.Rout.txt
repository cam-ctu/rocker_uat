
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:39:21.541] plan(): Setting new future strategy stack:
[17:39:21.542] List of future strategies:
[17:39:21.542] 1. sequential:
[17:39:21.542]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.542]    - tweaked: FALSE
[17:39:21.542]    - call: future::plan("sequential")
[17:39:21.553] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[17:39:21.580] plan(): Setting new future strategy stack:
[17:39:21.580] List of future strategies:
[17:39:21.580] 1. sequential:
[17:39:21.580]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.580]    - tweaked: FALSE
[17:39:21.580]    - call: plan(strategy)
[17:39:21.593] plan(): nbrOfWorkers() = 1
[17:39:21.594] getGlobalsAndPackages() ...
[17:39:21.594] Searching for globals...
[17:39:21.597] 
[17:39:21.597] Searching for globals ... DONE
[17:39:21.597] - globals: [0] <none>
[17:39:21.597] getGlobalsAndPackages() ... DONE
[17:39:21.598] Packages needed by the future expression (n = 0): <none>
[17:39:21.598] Packages needed by future strategies (n = 0): <none>
[17:39:21.599] {
[17:39:21.599]     {
[17:39:21.599]         {
[17:39:21.599]             ...future.startTime <- base::Sys.time()
[17:39:21.599]             {
[17:39:21.599]                 {
[17:39:21.599]                   {
[17:39:21.599]                     base::local({
[17:39:21.599]                       has_future <- base::requireNamespace("future", 
[17:39:21.599]                         quietly = TRUE)
[17:39:21.599]                       if (has_future) {
[17:39:21.599]                         ns <- base::getNamespace("future")
[17:39:21.599]                         version <- ns[[".package"]][["version"]]
[17:39:21.599]                         if (is.null(version)) 
[17:39:21.599]                           version <- utils::packageVersion("future")
[17:39:21.599]                       }
[17:39:21.599]                       else {
[17:39:21.599]                         version <- NULL
[17:39:21.599]                       }
[17:39:21.599]                       if (!has_future || version < "1.8.0") {
[17:39:21.599]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.599]                           "", base::R.version$version.string), 
[17:39:21.599]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:21.599]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.599]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.599]                             "release", "version")], collapse = " "), 
[17:39:21.599]                           hostname = base::Sys.info()[["nodename"]])
[17:39:21.599]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.599]                           info)
[17:39:21.599]                         info <- base::paste(info, collapse = "; ")
[17:39:21.599]                         if (!has_future) {
[17:39:21.599]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.599]                             info)
[17:39:21.599]                         }
[17:39:21.599]                         else {
[17:39:21.599]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.599]                             info, version)
[17:39:21.599]                         }
[17:39:21.599]                         base::stop(msg)
[17:39:21.599]                       }
[17:39:21.599]                     })
[17:39:21.599]                   }
[17:39:21.599]                   ...future.strategy.old <- future::plan("list")
[17:39:21.599]                   options(future.plan = NULL)
[17:39:21.599]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.599]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.599]                 }
[17:39:21.599]                 ...future.workdir <- getwd()
[17:39:21.599]             }
[17:39:21.599]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.599]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.599]         }
[17:39:21.599]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.599]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.599]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.599]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.599]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.599]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.599]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.599]             base::names(...future.oldOptions))
[17:39:21.599]     }
[17:39:21.599]     if (FALSE) {
[17:39:21.599]     }
[17:39:21.599]     else {
[17:39:21.599]         if (TRUE) {
[17:39:21.599]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.599]                 open = "w")
[17:39:21.599]         }
[17:39:21.599]         else {
[17:39:21.599]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.599]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.599]         }
[17:39:21.599]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.599]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.599]             base::sink(type = "output", split = FALSE)
[17:39:21.599]             base::close(...future.stdout)
[17:39:21.599]         }, add = TRUE)
[17:39:21.599]     }
[17:39:21.599]     ...future.frame <- base::sys.nframe()
[17:39:21.599]     ...future.conditions <- base::list()
[17:39:21.599]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.599]     if (FALSE) {
[17:39:21.599]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.599]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.599]     }
[17:39:21.599]     ...future.result <- base::tryCatch({
[17:39:21.599]         base::withCallingHandlers({
[17:39:21.599]             ...future.value <- base::withVisible(base::local(42))
[17:39:21.599]             future::FutureResult(value = ...future.value$value, 
[17:39:21.599]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.599]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.599]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.599]                     ...future.globalenv.names))
[17:39:21.599]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.599]         }, condition = base::local({
[17:39:21.599]             c <- base::c
[17:39:21.599]             inherits <- base::inherits
[17:39:21.599]             invokeRestart <- base::invokeRestart
[17:39:21.599]             length <- base::length
[17:39:21.599]             list <- base::list
[17:39:21.599]             seq.int <- base::seq.int
[17:39:21.599]             signalCondition <- base::signalCondition
[17:39:21.599]             sys.calls <- base::sys.calls
[17:39:21.599]             `[[` <- base::`[[`
[17:39:21.599]             `+` <- base::`+`
[17:39:21.599]             `<<-` <- base::`<<-`
[17:39:21.599]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.599]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.599]                   3L)]
[17:39:21.599]             }
[17:39:21.599]             function(cond) {
[17:39:21.599]                 is_error <- inherits(cond, "error")
[17:39:21.599]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.599]                   NULL)
[17:39:21.599]                 if (is_error) {
[17:39:21.599]                   sessionInformation <- function() {
[17:39:21.599]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.599]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.599]                       search = base::search(), system = base::Sys.info())
[17:39:21.599]                   }
[17:39:21.599]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.599]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.599]                     cond$call), session = sessionInformation(), 
[17:39:21.599]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.599]                   signalCondition(cond)
[17:39:21.599]                 }
[17:39:21.599]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.599]                 "immediateCondition"))) {
[17:39:21.599]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.599]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.599]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.599]                   if (TRUE && !signal) {
[17:39:21.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.599]                     {
[17:39:21.599]                       inherits <- base::inherits
[17:39:21.599]                       invokeRestart <- base::invokeRestart
[17:39:21.599]                       is.null <- base::is.null
[17:39:21.599]                       muffled <- FALSE
[17:39:21.599]                       if (inherits(cond, "message")) {
[17:39:21.599]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.599]                         if (muffled) 
[17:39:21.599]                           invokeRestart("muffleMessage")
[17:39:21.599]                       }
[17:39:21.599]                       else if (inherits(cond, "warning")) {
[17:39:21.599]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.599]                         if (muffled) 
[17:39:21.599]                           invokeRestart("muffleWarning")
[17:39:21.599]                       }
[17:39:21.599]                       else if (inherits(cond, "condition")) {
[17:39:21.599]                         if (!is.null(pattern)) {
[17:39:21.599]                           computeRestarts <- base::computeRestarts
[17:39:21.599]                           grepl <- base::grepl
[17:39:21.599]                           restarts <- computeRestarts(cond)
[17:39:21.599]                           for (restart in restarts) {
[17:39:21.599]                             name <- restart$name
[17:39:21.599]                             if (is.null(name)) 
[17:39:21.599]                               next
[17:39:21.599]                             if (!grepl(pattern, name)) 
[17:39:21.599]                               next
[17:39:21.599]                             invokeRestart(restart)
[17:39:21.599]                             muffled <- TRUE
[17:39:21.599]                             break
[17:39:21.599]                           }
[17:39:21.599]                         }
[17:39:21.599]                       }
[17:39:21.599]                       invisible(muffled)
[17:39:21.599]                     }
[17:39:21.599]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.599]                   }
[17:39:21.599]                 }
[17:39:21.599]                 else {
[17:39:21.599]                   if (TRUE) {
[17:39:21.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.599]                     {
[17:39:21.599]                       inherits <- base::inherits
[17:39:21.599]                       invokeRestart <- base::invokeRestart
[17:39:21.599]                       is.null <- base::is.null
[17:39:21.599]                       muffled <- FALSE
[17:39:21.599]                       if (inherits(cond, "message")) {
[17:39:21.599]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.599]                         if (muffled) 
[17:39:21.599]                           invokeRestart("muffleMessage")
[17:39:21.599]                       }
[17:39:21.599]                       else if (inherits(cond, "warning")) {
[17:39:21.599]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.599]                         if (muffled) 
[17:39:21.599]                           invokeRestart("muffleWarning")
[17:39:21.599]                       }
[17:39:21.599]                       else if (inherits(cond, "condition")) {
[17:39:21.599]                         if (!is.null(pattern)) {
[17:39:21.599]                           computeRestarts <- base::computeRestarts
[17:39:21.599]                           grepl <- base::grepl
[17:39:21.599]                           restarts <- computeRestarts(cond)
[17:39:21.599]                           for (restart in restarts) {
[17:39:21.599]                             name <- restart$name
[17:39:21.599]                             if (is.null(name)) 
[17:39:21.599]                               next
[17:39:21.599]                             if (!grepl(pattern, name)) 
[17:39:21.599]                               next
[17:39:21.599]                             invokeRestart(restart)
[17:39:21.599]                             muffled <- TRUE
[17:39:21.599]                             break
[17:39:21.599]                           }
[17:39:21.599]                         }
[17:39:21.599]                       }
[17:39:21.599]                       invisible(muffled)
[17:39:21.599]                     }
[17:39:21.599]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.599]                   }
[17:39:21.599]                 }
[17:39:21.599]             }
[17:39:21.599]         }))
[17:39:21.599]     }, error = function(ex) {
[17:39:21.599]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.599]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.599]                 ...future.rng), started = ...future.startTime, 
[17:39:21.599]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.599]             version = "1.8"), class = "FutureResult")
[17:39:21.599]     }, finally = {
[17:39:21.599]         if (!identical(...future.workdir, getwd())) 
[17:39:21.599]             setwd(...future.workdir)
[17:39:21.599]         {
[17:39:21.599]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.599]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.599]             }
[17:39:21.599]             base::options(...future.oldOptions)
[17:39:21.599]             if (.Platform$OS.type == "windows") {
[17:39:21.599]                 old_names <- names(...future.oldEnvVars)
[17:39:21.599]                 envs <- base::Sys.getenv()
[17:39:21.599]                 names <- names(envs)
[17:39:21.599]                 common <- intersect(names, old_names)
[17:39:21.599]                 added <- setdiff(names, old_names)
[17:39:21.599]                 removed <- setdiff(old_names, names)
[17:39:21.599]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.599]                   envs[common]]
[17:39:21.599]                 NAMES <- toupper(changed)
[17:39:21.599]                 args <- list()
[17:39:21.599]                 for (kk in seq_along(NAMES)) {
[17:39:21.599]                   name <- changed[[kk]]
[17:39:21.599]                   NAME <- NAMES[[kk]]
[17:39:21.599]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.599]                     next
[17:39:21.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.599]                 }
[17:39:21.599]                 NAMES <- toupper(added)
[17:39:21.599]                 for (kk in seq_along(NAMES)) {
[17:39:21.599]                   name <- added[[kk]]
[17:39:21.599]                   NAME <- NAMES[[kk]]
[17:39:21.599]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.599]                     next
[17:39:21.599]                   args[[name]] <- ""
[17:39:21.599]                 }
[17:39:21.599]                 NAMES <- toupper(removed)
[17:39:21.599]                 for (kk in seq_along(NAMES)) {
[17:39:21.599]                   name <- removed[[kk]]
[17:39:21.599]                   NAME <- NAMES[[kk]]
[17:39:21.599]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.599]                     next
[17:39:21.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.599]                 }
[17:39:21.599]                 if (length(args) > 0) 
[17:39:21.599]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.599]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.599]             }
[17:39:21.599]             else {
[17:39:21.599]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.599]             }
[17:39:21.599]             {
[17:39:21.599]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.599]                   0L) {
[17:39:21.599]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.599]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.599]                   base::options(opts)
[17:39:21.599]                 }
[17:39:21.599]                 {
[17:39:21.599]                   {
[17:39:21.599]                     NULL
[17:39:21.599]                     RNGkind("Mersenne-Twister")
[17:39:21.599]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:21.599]                       inherits = FALSE)
[17:39:21.599]                   }
[17:39:21.599]                   options(future.plan = NULL)
[17:39:21.599]                   if (is.na(NA_character_)) 
[17:39:21.599]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.599]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.599]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.599]                     .init = FALSE)
[17:39:21.599]                 }
[17:39:21.599]             }
[17:39:21.599]         }
[17:39:21.599]     })
[17:39:21.599]     if (TRUE) {
[17:39:21.599]         base::sink(type = "output", split = FALSE)
[17:39:21.599]         if (TRUE) {
[17:39:21.599]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.599]         }
[17:39:21.599]         else {
[17:39:21.599]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.599]         }
[17:39:21.599]         base::close(...future.stdout)
[17:39:21.599]         ...future.stdout <- NULL
[17:39:21.599]     }
[17:39:21.599]     ...future.result$conditions <- ...future.conditions
[17:39:21.599]     ...future.result$finished <- base::Sys.time()
[17:39:21.599]     ...future.result
[17:39:21.599] }
[17:39:21.601] plan(): Setting new future strategy stack:
[17:39:21.601] List of future strategies:
[17:39:21.601] 1. sequential:
[17:39:21.601]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.601]    - tweaked: FALSE
[17:39:21.601]    - call: NULL
[17:39:21.601] plan(): nbrOfWorkers() = 1
[17:39:21.602] plan(): Setting new future strategy stack:
[17:39:21.602] List of future strategies:
[17:39:21.602] 1. sequential:
[17:39:21.602]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.602]    - tweaked: FALSE
[17:39:21.602]    - call: plan(strategy)
[17:39:21.603] plan(): nbrOfWorkers() = 1
[17:39:21.603] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:21.605] getGlobalsAndPackages() ...
[17:39:21.605] Searching for globals...
[17:39:21.605] 
[17:39:21.605] Searching for globals ... DONE
[17:39:21.605] - globals: [0] <none>
[17:39:21.605] getGlobalsAndPackages() ... DONE
[17:39:21.606] run() for ‘Future’ ...
[17:39:21.606] - state: ‘created’
[17:39:21.606] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:21.606] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:21.606] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:21.606]   - Field: ‘label’
[17:39:21.607]   - Field: ‘local’
[17:39:21.607]   - Field: ‘owner’
[17:39:21.607]   - Field: ‘envir’
[17:39:21.607]   - Field: ‘packages’
[17:39:21.607]   - Field: ‘gc’
[17:39:21.607]   - Field: ‘conditions’
[17:39:21.607]   - Field: ‘expr’
[17:39:21.607]   - Field: ‘uuid’
[17:39:21.607]   - Field: ‘seed’
[17:39:21.607]   - Field: ‘version’
[17:39:21.607]   - Field: ‘result’
[17:39:21.608]   - Field: ‘asynchronous’
[17:39:21.608]   - Field: ‘calls’
[17:39:21.608]   - Field: ‘globals’
[17:39:21.608]   - Field: ‘stdout’
[17:39:21.608]   - Field: ‘earlySignal’
[17:39:21.608]   - Field: ‘lazy’
[17:39:21.608]   - Field: ‘state’
[17:39:21.608] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:21.608] - Launch lazy future ...
[17:39:21.609] Packages needed by the future expression (n = 0): <none>
[17:39:21.609] Packages needed by future strategies (n = 0): <none>
[17:39:21.609] {
[17:39:21.609]     {
[17:39:21.609]         {
[17:39:21.609]             ...future.startTime <- base::Sys.time()
[17:39:21.609]             {
[17:39:21.609]                 {
[17:39:21.609]                   {
[17:39:21.609]                     base::local({
[17:39:21.609]                       has_future <- base::requireNamespace("future", 
[17:39:21.609]                         quietly = TRUE)
[17:39:21.609]                       if (has_future) {
[17:39:21.609]                         ns <- base::getNamespace("future")
[17:39:21.609]                         version <- ns[[".package"]][["version"]]
[17:39:21.609]                         if (is.null(version)) 
[17:39:21.609]                           version <- utils::packageVersion("future")
[17:39:21.609]                       }
[17:39:21.609]                       else {
[17:39:21.609]                         version <- NULL
[17:39:21.609]                       }
[17:39:21.609]                       if (!has_future || version < "1.8.0") {
[17:39:21.609]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.609]                           "", base::R.version$version.string), 
[17:39:21.609]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:21.609]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.609]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.609]                             "release", "version")], collapse = " "), 
[17:39:21.609]                           hostname = base::Sys.info()[["nodename"]])
[17:39:21.609]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.609]                           info)
[17:39:21.609]                         info <- base::paste(info, collapse = "; ")
[17:39:21.609]                         if (!has_future) {
[17:39:21.609]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.609]                             info)
[17:39:21.609]                         }
[17:39:21.609]                         else {
[17:39:21.609]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.609]                             info, version)
[17:39:21.609]                         }
[17:39:21.609]                         base::stop(msg)
[17:39:21.609]                       }
[17:39:21.609]                     })
[17:39:21.609]                   }
[17:39:21.609]                   ...future.strategy.old <- future::plan("list")
[17:39:21.609]                   options(future.plan = NULL)
[17:39:21.609]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.609]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.609]                 }
[17:39:21.609]                 ...future.workdir <- getwd()
[17:39:21.609]             }
[17:39:21.609]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.609]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.609]         }
[17:39:21.609]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.609]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.609]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.609]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.609]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.609]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.609]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.609]             base::names(...future.oldOptions))
[17:39:21.609]     }
[17:39:21.609]     if (FALSE) {
[17:39:21.609]     }
[17:39:21.609]     else {
[17:39:21.609]         if (TRUE) {
[17:39:21.609]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.609]                 open = "w")
[17:39:21.609]         }
[17:39:21.609]         else {
[17:39:21.609]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.609]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.609]         }
[17:39:21.609]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.609]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.609]             base::sink(type = "output", split = FALSE)
[17:39:21.609]             base::close(...future.stdout)
[17:39:21.609]         }, add = TRUE)
[17:39:21.609]     }
[17:39:21.609]     ...future.frame <- base::sys.nframe()
[17:39:21.609]     ...future.conditions <- base::list()
[17:39:21.609]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.609]     if (FALSE) {
[17:39:21.609]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.609]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.609]     }
[17:39:21.609]     ...future.result <- base::tryCatch({
[17:39:21.609]         base::withCallingHandlers({
[17:39:21.609]             ...future.value <- base::withVisible(base::local(42))
[17:39:21.609]             future::FutureResult(value = ...future.value$value, 
[17:39:21.609]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.609]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.609]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.609]                     ...future.globalenv.names))
[17:39:21.609]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.609]         }, condition = base::local({
[17:39:21.609]             c <- base::c
[17:39:21.609]             inherits <- base::inherits
[17:39:21.609]             invokeRestart <- base::invokeRestart
[17:39:21.609]             length <- base::length
[17:39:21.609]             list <- base::list
[17:39:21.609]             seq.int <- base::seq.int
[17:39:21.609]             signalCondition <- base::signalCondition
[17:39:21.609]             sys.calls <- base::sys.calls
[17:39:21.609]             `[[` <- base::`[[`
[17:39:21.609]             `+` <- base::`+`
[17:39:21.609]             `<<-` <- base::`<<-`
[17:39:21.609]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.609]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.609]                   3L)]
[17:39:21.609]             }
[17:39:21.609]             function(cond) {
[17:39:21.609]                 is_error <- inherits(cond, "error")
[17:39:21.609]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.609]                   NULL)
[17:39:21.609]                 if (is_error) {
[17:39:21.609]                   sessionInformation <- function() {
[17:39:21.609]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.609]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.609]                       search = base::search(), system = base::Sys.info())
[17:39:21.609]                   }
[17:39:21.609]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.609]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.609]                     cond$call), session = sessionInformation(), 
[17:39:21.609]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.609]                   signalCondition(cond)
[17:39:21.609]                 }
[17:39:21.609]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.609]                 "immediateCondition"))) {
[17:39:21.609]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.609]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.609]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.609]                   if (TRUE && !signal) {
[17:39:21.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.609]                     {
[17:39:21.609]                       inherits <- base::inherits
[17:39:21.609]                       invokeRestart <- base::invokeRestart
[17:39:21.609]                       is.null <- base::is.null
[17:39:21.609]                       muffled <- FALSE
[17:39:21.609]                       if (inherits(cond, "message")) {
[17:39:21.609]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.609]                         if (muffled) 
[17:39:21.609]                           invokeRestart("muffleMessage")
[17:39:21.609]                       }
[17:39:21.609]                       else if (inherits(cond, "warning")) {
[17:39:21.609]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.609]                         if (muffled) 
[17:39:21.609]                           invokeRestart("muffleWarning")
[17:39:21.609]                       }
[17:39:21.609]                       else if (inherits(cond, "condition")) {
[17:39:21.609]                         if (!is.null(pattern)) {
[17:39:21.609]                           computeRestarts <- base::computeRestarts
[17:39:21.609]                           grepl <- base::grepl
[17:39:21.609]                           restarts <- computeRestarts(cond)
[17:39:21.609]                           for (restart in restarts) {
[17:39:21.609]                             name <- restart$name
[17:39:21.609]                             if (is.null(name)) 
[17:39:21.609]                               next
[17:39:21.609]                             if (!grepl(pattern, name)) 
[17:39:21.609]                               next
[17:39:21.609]                             invokeRestart(restart)
[17:39:21.609]                             muffled <- TRUE
[17:39:21.609]                             break
[17:39:21.609]                           }
[17:39:21.609]                         }
[17:39:21.609]                       }
[17:39:21.609]                       invisible(muffled)
[17:39:21.609]                     }
[17:39:21.609]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.609]                   }
[17:39:21.609]                 }
[17:39:21.609]                 else {
[17:39:21.609]                   if (TRUE) {
[17:39:21.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.609]                     {
[17:39:21.609]                       inherits <- base::inherits
[17:39:21.609]                       invokeRestart <- base::invokeRestart
[17:39:21.609]                       is.null <- base::is.null
[17:39:21.609]                       muffled <- FALSE
[17:39:21.609]                       if (inherits(cond, "message")) {
[17:39:21.609]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.609]                         if (muffled) 
[17:39:21.609]                           invokeRestart("muffleMessage")
[17:39:21.609]                       }
[17:39:21.609]                       else if (inherits(cond, "warning")) {
[17:39:21.609]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.609]                         if (muffled) 
[17:39:21.609]                           invokeRestart("muffleWarning")
[17:39:21.609]                       }
[17:39:21.609]                       else if (inherits(cond, "condition")) {
[17:39:21.609]                         if (!is.null(pattern)) {
[17:39:21.609]                           computeRestarts <- base::computeRestarts
[17:39:21.609]                           grepl <- base::grepl
[17:39:21.609]                           restarts <- computeRestarts(cond)
[17:39:21.609]                           for (restart in restarts) {
[17:39:21.609]                             name <- restart$name
[17:39:21.609]                             if (is.null(name)) 
[17:39:21.609]                               next
[17:39:21.609]                             if (!grepl(pattern, name)) 
[17:39:21.609]                               next
[17:39:21.609]                             invokeRestart(restart)
[17:39:21.609]                             muffled <- TRUE
[17:39:21.609]                             break
[17:39:21.609]                           }
[17:39:21.609]                         }
[17:39:21.609]                       }
[17:39:21.609]                       invisible(muffled)
[17:39:21.609]                     }
[17:39:21.609]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.609]                   }
[17:39:21.609]                 }
[17:39:21.609]             }
[17:39:21.609]         }))
[17:39:21.609]     }, error = function(ex) {
[17:39:21.609]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.609]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.609]                 ...future.rng), started = ...future.startTime, 
[17:39:21.609]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.609]             version = "1.8"), class = "FutureResult")
[17:39:21.609]     }, finally = {
[17:39:21.609]         if (!identical(...future.workdir, getwd())) 
[17:39:21.609]             setwd(...future.workdir)
[17:39:21.609]         {
[17:39:21.609]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.609]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.609]             }
[17:39:21.609]             base::options(...future.oldOptions)
[17:39:21.609]             if (.Platform$OS.type == "windows") {
[17:39:21.609]                 old_names <- names(...future.oldEnvVars)
[17:39:21.609]                 envs <- base::Sys.getenv()
[17:39:21.609]                 names <- names(envs)
[17:39:21.609]                 common <- intersect(names, old_names)
[17:39:21.609]                 added <- setdiff(names, old_names)
[17:39:21.609]                 removed <- setdiff(old_names, names)
[17:39:21.609]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.609]                   envs[common]]
[17:39:21.609]                 NAMES <- toupper(changed)
[17:39:21.609]                 args <- list()
[17:39:21.609]                 for (kk in seq_along(NAMES)) {
[17:39:21.609]                   name <- changed[[kk]]
[17:39:21.609]                   NAME <- NAMES[[kk]]
[17:39:21.609]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.609]                     next
[17:39:21.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.609]                 }
[17:39:21.609]                 NAMES <- toupper(added)
[17:39:21.609]                 for (kk in seq_along(NAMES)) {
[17:39:21.609]                   name <- added[[kk]]
[17:39:21.609]                   NAME <- NAMES[[kk]]
[17:39:21.609]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.609]                     next
[17:39:21.609]                   args[[name]] <- ""
[17:39:21.609]                 }
[17:39:21.609]                 NAMES <- toupper(removed)
[17:39:21.609]                 for (kk in seq_along(NAMES)) {
[17:39:21.609]                   name <- removed[[kk]]
[17:39:21.609]                   NAME <- NAMES[[kk]]
[17:39:21.609]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.609]                     next
[17:39:21.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.609]                 }
[17:39:21.609]                 if (length(args) > 0) 
[17:39:21.609]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.609]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.609]             }
[17:39:21.609]             else {
[17:39:21.609]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.609]             }
[17:39:21.609]             {
[17:39:21.609]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.609]                   0L) {
[17:39:21.609]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.609]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.609]                   base::options(opts)
[17:39:21.609]                 }
[17:39:21.609]                 {
[17:39:21.609]                   {
[17:39:21.609]                     NULL
[17:39:21.609]                     RNGkind("Mersenne-Twister")
[17:39:21.609]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:21.609]                       inherits = FALSE)
[17:39:21.609]                   }
[17:39:21.609]                   options(future.plan = NULL)
[17:39:21.609]                   if (is.na(NA_character_)) 
[17:39:21.609]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.609]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.609]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.609]                     .init = FALSE)
[17:39:21.609]                 }
[17:39:21.609]             }
[17:39:21.609]         }
[17:39:21.609]     })
[17:39:21.609]     if (TRUE) {
[17:39:21.609]         base::sink(type = "output", split = FALSE)
[17:39:21.609]         if (TRUE) {
[17:39:21.609]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.609]         }
[17:39:21.609]         else {
[17:39:21.609]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.609]         }
[17:39:21.609]         base::close(...future.stdout)
[17:39:21.609]         ...future.stdout <- NULL
[17:39:21.609]     }
[17:39:21.609]     ...future.result$conditions <- ...future.conditions
[17:39:21.609]     ...future.result$finished <- base::Sys.time()
[17:39:21.609]     ...future.result
[17:39:21.609] }
[17:39:21.611] plan(): Setting new future strategy stack:
[17:39:21.611] List of future strategies:
[17:39:21.611] 1. sequential:
[17:39:21.611]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.611]    - tweaked: FALSE
[17:39:21.611]    - call: NULL
[17:39:21.611] plan(): nbrOfWorkers() = 1
[17:39:21.612] plan(): Setting new future strategy stack:
[17:39:21.612] List of future strategies:
[17:39:21.612] 1. sequential:
[17:39:21.612]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.612]    - tweaked: FALSE
[17:39:21.612]    - call: plan(strategy)
[17:39:21.612] plan(): nbrOfWorkers() = 1
[17:39:21.613] SequentialFuture started (and completed)
[17:39:21.613] - Launch lazy future ... done
[17:39:21.613] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:21.614] getGlobalsAndPackages() ...
[17:39:21.614] Searching for globals...
[17:39:21.616] - globals found: [1] ‘{’
[17:39:21.616] Searching for globals ... DONE
[17:39:21.616] Resolving globals: FALSE
[17:39:21.616] 
[17:39:21.616] 
[17:39:21.617] getGlobalsAndPackages() ... DONE
[17:39:21.617] run() for ‘Future’ ...
[17:39:21.617] - state: ‘created’
[17:39:21.617] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:21.617] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:21.617] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:21.617]   - Field: ‘label’
[17:39:21.618]   - Field: ‘local’
[17:39:21.618]   - Field: ‘owner’
[17:39:21.618]   - Field: ‘envir’
[17:39:21.618]   - Field: ‘packages’
[17:39:21.618]   - Field: ‘gc’
[17:39:21.618]   - Field: ‘conditions’
[17:39:21.618]   - Field: ‘expr’
[17:39:21.618]   - Field: ‘uuid’
[17:39:21.618]   - Field: ‘seed’
[17:39:21.618]   - Field: ‘version’
[17:39:21.618]   - Field: ‘result’
[17:39:21.619]   - Field: ‘asynchronous’
[17:39:21.619]   - Field: ‘calls’
[17:39:21.619]   - Field: ‘globals’
[17:39:21.619]   - Field: ‘stdout’
[17:39:21.619]   - Field: ‘earlySignal’
[17:39:21.619]   - Field: ‘lazy’
[17:39:21.619]   - Field: ‘state’
[17:39:21.619] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:21.619] - Launch lazy future ...
[17:39:21.619] Packages needed by the future expression (n = 0): <none>
[17:39:21.620] Packages needed by future strategies (n = 0): <none>
[17:39:21.620] {
[17:39:21.620]     {
[17:39:21.620]         {
[17:39:21.620]             ...future.startTime <- base::Sys.time()
[17:39:21.620]             {
[17:39:21.620]                 {
[17:39:21.620]                   {
[17:39:21.620]                     base::local({
[17:39:21.620]                       has_future <- base::requireNamespace("future", 
[17:39:21.620]                         quietly = TRUE)
[17:39:21.620]                       if (has_future) {
[17:39:21.620]                         ns <- base::getNamespace("future")
[17:39:21.620]                         version <- ns[[".package"]][["version"]]
[17:39:21.620]                         if (is.null(version)) 
[17:39:21.620]                           version <- utils::packageVersion("future")
[17:39:21.620]                       }
[17:39:21.620]                       else {
[17:39:21.620]                         version <- NULL
[17:39:21.620]                       }
[17:39:21.620]                       if (!has_future || version < "1.8.0") {
[17:39:21.620]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.620]                           "", base::R.version$version.string), 
[17:39:21.620]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:21.620]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.620]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.620]                             "release", "version")], collapse = " "), 
[17:39:21.620]                           hostname = base::Sys.info()[["nodename"]])
[17:39:21.620]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.620]                           info)
[17:39:21.620]                         info <- base::paste(info, collapse = "; ")
[17:39:21.620]                         if (!has_future) {
[17:39:21.620]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.620]                             info)
[17:39:21.620]                         }
[17:39:21.620]                         else {
[17:39:21.620]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.620]                             info, version)
[17:39:21.620]                         }
[17:39:21.620]                         base::stop(msg)
[17:39:21.620]                       }
[17:39:21.620]                     })
[17:39:21.620]                   }
[17:39:21.620]                   ...future.strategy.old <- future::plan("list")
[17:39:21.620]                   options(future.plan = NULL)
[17:39:21.620]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.620]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.620]                 }
[17:39:21.620]                 ...future.workdir <- getwd()
[17:39:21.620]             }
[17:39:21.620]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.620]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.620]         }
[17:39:21.620]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.620]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.620]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.620]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.620]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.620]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.620]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.620]             base::names(...future.oldOptions))
[17:39:21.620]     }
[17:39:21.620]     if (FALSE) {
[17:39:21.620]     }
[17:39:21.620]     else {
[17:39:21.620]         if (TRUE) {
[17:39:21.620]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.620]                 open = "w")
[17:39:21.620]         }
[17:39:21.620]         else {
[17:39:21.620]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.620]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.620]         }
[17:39:21.620]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.620]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.620]             base::sink(type = "output", split = FALSE)
[17:39:21.620]             base::close(...future.stdout)
[17:39:21.620]         }, add = TRUE)
[17:39:21.620]     }
[17:39:21.620]     ...future.frame <- base::sys.nframe()
[17:39:21.620]     ...future.conditions <- base::list()
[17:39:21.620]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.620]     if (FALSE) {
[17:39:21.620]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.620]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.620]     }
[17:39:21.620]     ...future.result <- base::tryCatch({
[17:39:21.620]         base::withCallingHandlers({
[17:39:21.620]             ...future.value <- base::withVisible(base::local({
[17:39:21.620]                 42
[17:39:21.620]             }))
[17:39:21.620]             future::FutureResult(value = ...future.value$value, 
[17:39:21.620]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.620]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.620]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.620]                     ...future.globalenv.names))
[17:39:21.620]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.620]         }, condition = base::local({
[17:39:21.620]             c <- base::c
[17:39:21.620]             inherits <- base::inherits
[17:39:21.620]             invokeRestart <- base::invokeRestart
[17:39:21.620]             length <- base::length
[17:39:21.620]             list <- base::list
[17:39:21.620]             seq.int <- base::seq.int
[17:39:21.620]             signalCondition <- base::signalCondition
[17:39:21.620]             sys.calls <- base::sys.calls
[17:39:21.620]             `[[` <- base::`[[`
[17:39:21.620]             `+` <- base::`+`
[17:39:21.620]             `<<-` <- base::`<<-`
[17:39:21.620]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.620]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.620]                   3L)]
[17:39:21.620]             }
[17:39:21.620]             function(cond) {
[17:39:21.620]                 is_error <- inherits(cond, "error")
[17:39:21.620]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.620]                   NULL)
[17:39:21.620]                 if (is_error) {
[17:39:21.620]                   sessionInformation <- function() {
[17:39:21.620]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.620]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.620]                       search = base::search(), system = base::Sys.info())
[17:39:21.620]                   }
[17:39:21.620]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.620]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.620]                     cond$call), session = sessionInformation(), 
[17:39:21.620]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.620]                   signalCondition(cond)
[17:39:21.620]                 }
[17:39:21.620]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.620]                 "immediateCondition"))) {
[17:39:21.620]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.620]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.620]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.620]                   if (TRUE && !signal) {
[17:39:21.620]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.620]                     {
[17:39:21.620]                       inherits <- base::inherits
[17:39:21.620]                       invokeRestart <- base::invokeRestart
[17:39:21.620]                       is.null <- base::is.null
[17:39:21.620]                       muffled <- FALSE
[17:39:21.620]                       if (inherits(cond, "message")) {
[17:39:21.620]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.620]                         if (muffled) 
[17:39:21.620]                           invokeRestart("muffleMessage")
[17:39:21.620]                       }
[17:39:21.620]                       else if (inherits(cond, "warning")) {
[17:39:21.620]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.620]                         if (muffled) 
[17:39:21.620]                           invokeRestart("muffleWarning")
[17:39:21.620]                       }
[17:39:21.620]                       else if (inherits(cond, "condition")) {
[17:39:21.620]                         if (!is.null(pattern)) {
[17:39:21.620]                           computeRestarts <- base::computeRestarts
[17:39:21.620]                           grepl <- base::grepl
[17:39:21.620]                           restarts <- computeRestarts(cond)
[17:39:21.620]                           for (restart in restarts) {
[17:39:21.620]                             name <- restart$name
[17:39:21.620]                             if (is.null(name)) 
[17:39:21.620]                               next
[17:39:21.620]                             if (!grepl(pattern, name)) 
[17:39:21.620]                               next
[17:39:21.620]                             invokeRestart(restart)
[17:39:21.620]                             muffled <- TRUE
[17:39:21.620]                             break
[17:39:21.620]                           }
[17:39:21.620]                         }
[17:39:21.620]                       }
[17:39:21.620]                       invisible(muffled)
[17:39:21.620]                     }
[17:39:21.620]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.620]                   }
[17:39:21.620]                 }
[17:39:21.620]                 else {
[17:39:21.620]                   if (TRUE) {
[17:39:21.620]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.620]                     {
[17:39:21.620]                       inherits <- base::inherits
[17:39:21.620]                       invokeRestart <- base::invokeRestart
[17:39:21.620]                       is.null <- base::is.null
[17:39:21.620]                       muffled <- FALSE
[17:39:21.620]                       if (inherits(cond, "message")) {
[17:39:21.620]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.620]                         if (muffled) 
[17:39:21.620]                           invokeRestart("muffleMessage")
[17:39:21.620]                       }
[17:39:21.620]                       else if (inherits(cond, "warning")) {
[17:39:21.620]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.620]                         if (muffled) 
[17:39:21.620]                           invokeRestart("muffleWarning")
[17:39:21.620]                       }
[17:39:21.620]                       else if (inherits(cond, "condition")) {
[17:39:21.620]                         if (!is.null(pattern)) {
[17:39:21.620]                           computeRestarts <- base::computeRestarts
[17:39:21.620]                           grepl <- base::grepl
[17:39:21.620]                           restarts <- computeRestarts(cond)
[17:39:21.620]                           for (restart in restarts) {
[17:39:21.620]                             name <- restart$name
[17:39:21.620]                             if (is.null(name)) 
[17:39:21.620]                               next
[17:39:21.620]                             if (!grepl(pattern, name)) 
[17:39:21.620]                               next
[17:39:21.620]                             invokeRestart(restart)
[17:39:21.620]                             muffled <- TRUE
[17:39:21.620]                             break
[17:39:21.620]                           }
[17:39:21.620]                         }
[17:39:21.620]                       }
[17:39:21.620]                       invisible(muffled)
[17:39:21.620]                     }
[17:39:21.620]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.620]                   }
[17:39:21.620]                 }
[17:39:21.620]             }
[17:39:21.620]         }))
[17:39:21.620]     }, error = function(ex) {
[17:39:21.620]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.620]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.620]                 ...future.rng), started = ...future.startTime, 
[17:39:21.620]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.620]             version = "1.8"), class = "FutureResult")
[17:39:21.620]     }, finally = {
[17:39:21.620]         if (!identical(...future.workdir, getwd())) 
[17:39:21.620]             setwd(...future.workdir)
[17:39:21.620]         {
[17:39:21.620]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.620]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.620]             }
[17:39:21.620]             base::options(...future.oldOptions)
[17:39:21.620]             if (.Platform$OS.type == "windows") {
[17:39:21.620]                 old_names <- names(...future.oldEnvVars)
[17:39:21.620]                 envs <- base::Sys.getenv()
[17:39:21.620]                 names <- names(envs)
[17:39:21.620]                 common <- intersect(names, old_names)
[17:39:21.620]                 added <- setdiff(names, old_names)
[17:39:21.620]                 removed <- setdiff(old_names, names)
[17:39:21.620]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.620]                   envs[common]]
[17:39:21.620]                 NAMES <- toupper(changed)
[17:39:21.620]                 args <- list()
[17:39:21.620]                 for (kk in seq_along(NAMES)) {
[17:39:21.620]                   name <- changed[[kk]]
[17:39:21.620]                   NAME <- NAMES[[kk]]
[17:39:21.620]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.620]                     next
[17:39:21.620]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.620]                 }
[17:39:21.620]                 NAMES <- toupper(added)
[17:39:21.620]                 for (kk in seq_along(NAMES)) {
[17:39:21.620]                   name <- added[[kk]]
[17:39:21.620]                   NAME <- NAMES[[kk]]
[17:39:21.620]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.620]                     next
[17:39:21.620]                   args[[name]] <- ""
[17:39:21.620]                 }
[17:39:21.620]                 NAMES <- toupper(removed)
[17:39:21.620]                 for (kk in seq_along(NAMES)) {
[17:39:21.620]                   name <- removed[[kk]]
[17:39:21.620]                   NAME <- NAMES[[kk]]
[17:39:21.620]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.620]                     next
[17:39:21.620]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.620]                 }
[17:39:21.620]                 if (length(args) > 0) 
[17:39:21.620]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.620]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.620]             }
[17:39:21.620]             else {
[17:39:21.620]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.620]             }
[17:39:21.620]             {
[17:39:21.620]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.620]                   0L) {
[17:39:21.620]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.620]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.620]                   base::options(opts)
[17:39:21.620]                 }
[17:39:21.620]                 {
[17:39:21.620]                   {
[17:39:21.620]                     NULL
[17:39:21.620]                     RNGkind("Mersenne-Twister")
[17:39:21.620]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:21.620]                       inherits = FALSE)
[17:39:21.620]                   }
[17:39:21.620]                   options(future.plan = NULL)
[17:39:21.620]                   if (is.na(NA_character_)) 
[17:39:21.620]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.620]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.620]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.620]                     .init = FALSE)
[17:39:21.620]                 }
[17:39:21.620]             }
[17:39:21.620]         }
[17:39:21.620]     })
[17:39:21.620]     if (TRUE) {
[17:39:21.620]         base::sink(type = "output", split = FALSE)
[17:39:21.620]         if (TRUE) {
[17:39:21.620]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.620]         }
[17:39:21.620]         else {
[17:39:21.620]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.620]         }
[17:39:21.620]         base::close(...future.stdout)
[17:39:21.620]         ...future.stdout <- NULL
[17:39:21.620]     }
[17:39:21.620]     ...future.result$conditions <- ...future.conditions
[17:39:21.620]     ...future.result$finished <- base::Sys.time()
[17:39:21.620]     ...future.result
[17:39:21.620] }
[17:39:21.622] plan(): Setting new future strategy stack:
[17:39:21.622] List of future strategies:
[17:39:21.622] 1. sequential:
[17:39:21.622]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.622]    - tweaked: FALSE
[17:39:21.622]    - call: NULL
[17:39:21.622] plan(): nbrOfWorkers() = 1
[17:39:21.623] plan(): Setting new future strategy stack:
[17:39:21.623] List of future strategies:
[17:39:21.623] 1. sequential:
[17:39:21.623]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.623]    - tweaked: FALSE
[17:39:21.623]    - call: plan(strategy)
[17:39:21.623] plan(): nbrOfWorkers() = 1
[17:39:21.624] SequentialFuture started (and completed)
[17:39:21.624] - Launch lazy future ... done
[17:39:21.624] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:21.625] getGlobalsAndPackages() ...
[17:39:21.625] Searching for globals...
[17:39:21.625] 
[17:39:21.625] Searching for globals ... DONE
[17:39:21.625] - globals: [0] <none>
[17:39:21.625] getGlobalsAndPackages() ... DONE
[17:39:21.626] Packages needed by the future expression (n = 0): <none>
[17:39:21.626] Packages needed by future strategies (n = 0): <none>
[17:39:21.626] {
[17:39:21.626]     {
[17:39:21.626]         {
[17:39:21.626]             ...future.startTime <- base::Sys.time()
[17:39:21.626]             {
[17:39:21.626]                 {
[17:39:21.626]                   {
[17:39:21.626]                     base::local({
[17:39:21.626]                       has_future <- base::requireNamespace("future", 
[17:39:21.626]                         quietly = TRUE)
[17:39:21.626]                       if (has_future) {
[17:39:21.626]                         ns <- base::getNamespace("future")
[17:39:21.626]                         version <- ns[[".package"]][["version"]]
[17:39:21.626]                         if (is.null(version)) 
[17:39:21.626]                           version <- utils::packageVersion("future")
[17:39:21.626]                       }
[17:39:21.626]                       else {
[17:39:21.626]                         version <- NULL
[17:39:21.626]                       }
[17:39:21.626]                       if (!has_future || version < "1.8.0") {
[17:39:21.626]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.626]                           "", base::R.version$version.string), 
[17:39:21.626]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:21.626]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.626]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.626]                             "release", "version")], collapse = " "), 
[17:39:21.626]                           hostname = base::Sys.info()[["nodename"]])
[17:39:21.626]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.626]                           info)
[17:39:21.626]                         info <- base::paste(info, collapse = "; ")
[17:39:21.626]                         if (!has_future) {
[17:39:21.626]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.626]                             info)
[17:39:21.626]                         }
[17:39:21.626]                         else {
[17:39:21.626]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.626]                             info, version)
[17:39:21.626]                         }
[17:39:21.626]                         base::stop(msg)
[17:39:21.626]                       }
[17:39:21.626]                     })
[17:39:21.626]                   }
[17:39:21.626]                   ...future.strategy.old <- future::plan("list")
[17:39:21.626]                   options(future.plan = NULL)
[17:39:21.626]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.626]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.626]                 }
[17:39:21.626]                 ...future.workdir <- getwd()
[17:39:21.626]             }
[17:39:21.626]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.626]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.626]         }
[17:39:21.626]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.626]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.626]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.626]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.626]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.626]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.626]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.626]             base::names(...future.oldOptions))
[17:39:21.626]     }
[17:39:21.626]     if (FALSE) {
[17:39:21.626]     }
[17:39:21.626]     else {
[17:39:21.626]         if (TRUE) {
[17:39:21.626]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.626]                 open = "w")
[17:39:21.626]         }
[17:39:21.626]         else {
[17:39:21.626]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.626]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.626]         }
[17:39:21.626]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.626]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.626]             base::sink(type = "output", split = FALSE)
[17:39:21.626]             base::close(...future.stdout)
[17:39:21.626]         }, add = TRUE)
[17:39:21.626]     }
[17:39:21.626]     ...future.frame <- base::sys.nframe()
[17:39:21.626]     ...future.conditions <- base::list()
[17:39:21.626]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.626]     if (FALSE) {
[17:39:21.626]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.626]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.626]     }
[17:39:21.626]     ...future.result <- base::tryCatch({
[17:39:21.626]         base::withCallingHandlers({
[17:39:21.626]             ...future.value <- base::withVisible(base::local(42))
[17:39:21.626]             future::FutureResult(value = ...future.value$value, 
[17:39:21.626]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.626]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.626]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.626]                     ...future.globalenv.names))
[17:39:21.626]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.626]         }, condition = base::local({
[17:39:21.626]             c <- base::c
[17:39:21.626]             inherits <- base::inherits
[17:39:21.626]             invokeRestart <- base::invokeRestart
[17:39:21.626]             length <- base::length
[17:39:21.626]             list <- base::list
[17:39:21.626]             seq.int <- base::seq.int
[17:39:21.626]             signalCondition <- base::signalCondition
[17:39:21.626]             sys.calls <- base::sys.calls
[17:39:21.626]             `[[` <- base::`[[`
[17:39:21.626]             `+` <- base::`+`
[17:39:21.626]             `<<-` <- base::`<<-`
[17:39:21.626]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.626]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.626]                   3L)]
[17:39:21.626]             }
[17:39:21.626]             function(cond) {
[17:39:21.626]                 is_error <- inherits(cond, "error")
[17:39:21.626]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.626]                   NULL)
[17:39:21.626]                 if (is_error) {
[17:39:21.626]                   sessionInformation <- function() {
[17:39:21.626]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.626]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.626]                       search = base::search(), system = base::Sys.info())
[17:39:21.626]                   }
[17:39:21.626]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.626]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.626]                     cond$call), session = sessionInformation(), 
[17:39:21.626]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.626]                   signalCondition(cond)
[17:39:21.626]                 }
[17:39:21.626]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.626]                 "immediateCondition"))) {
[17:39:21.626]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.626]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.626]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.626]                   if (TRUE && !signal) {
[17:39:21.626]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.626]                     {
[17:39:21.626]                       inherits <- base::inherits
[17:39:21.626]                       invokeRestart <- base::invokeRestart
[17:39:21.626]                       is.null <- base::is.null
[17:39:21.626]                       muffled <- FALSE
[17:39:21.626]                       if (inherits(cond, "message")) {
[17:39:21.626]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.626]                         if (muffled) 
[17:39:21.626]                           invokeRestart("muffleMessage")
[17:39:21.626]                       }
[17:39:21.626]                       else if (inherits(cond, "warning")) {
[17:39:21.626]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.626]                         if (muffled) 
[17:39:21.626]                           invokeRestart("muffleWarning")
[17:39:21.626]                       }
[17:39:21.626]                       else if (inherits(cond, "condition")) {
[17:39:21.626]                         if (!is.null(pattern)) {
[17:39:21.626]                           computeRestarts <- base::computeRestarts
[17:39:21.626]                           grepl <- base::grepl
[17:39:21.626]                           restarts <- computeRestarts(cond)
[17:39:21.626]                           for (restart in restarts) {
[17:39:21.626]                             name <- restart$name
[17:39:21.626]                             if (is.null(name)) 
[17:39:21.626]                               next
[17:39:21.626]                             if (!grepl(pattern, name)) 
[17:39:21.626]                               next
[17:39:21.626]                             invokeRestart(restart)
[17:39:21.626]                             muffled <- TRUE
[17:39:21.626]                             break
[17:39:21.626]                           }
[17:39:21.626]                         }
[17:39:21.626]                       }
[17:39:21.626]                       invisible(muffled)
[17:39:21.626]                     }
[17:39:21.626]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.626]                   }
[17:39:21.626]                 }
[17:39:21.626]                 else {
[17:39:21.626]                   if (TRUE) {
[17:39:21.626]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.626]                     {
[17:39:21.626]                       inherits <- base::inherits
[17:39:21.626]                       invokeRestart <- base::invokeRestart
[17:39:21.626]                       is.null <- base::is.null
[17:39:21.626]                       muffled <- FALSE
[17:39:21.626]                       if (inherits(cond, "message")) {
[17:39:21.626]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.626]                         if (muffled) 
[17:39:21.626]                           invokeRestart("muffleMessage")
[17:39:21.626]                       }
[17:39:21.626]                       else if (inherits(cond, "warning")) {
[17:39:21.626]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.626]                         if (muffled) 
[17:39:21.626]                           invokeRestart("muffleWarning")
[17:39:21.626]                       }
[17:39:21.626]                       else if (inherits(cond, "condition")) {
[17:39:21.626]                         if (!is.null(pattern)) {
[17:39:21.626]                           computeRestarts <- base::computeRestarts
[17:39:21.626]                           grepl <- base::grepl
[17:39:21.626]                           restarts <- computeRestarts(cond)
[17:39:21.626]                           for (restart in restarts) {
[17:39:21.626]                             name <- restart$name
[17:39:21.626]                             if (is.null(name)) 
[17:39:21.626]                               next
[17:39:21.626]                             if (!grepl(pattern, name)) 
[17:39:21.626]                               next
[17:39:21.626]                             invokeRestart(restart)
[17:39:21.626]                             muffled <- TRUE
[17:39:21.626]                             break
[17:39:21.626]                           }
[17:39:21.626]                         }
[17:39:21.626]                       }
[17:39:21.626]                       invisible(muffled)
[17:39:21.626]                     }
[17:39:21.626]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.626]                   }
[17:39:21.626]                 }
[17:39:21.626]             }
[17:39:21.626]         }))
[17:39:21.626]     }, error = function(ex) {
[17:39:21.626]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.626]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.626]                 ...future.rng), started = ...future.startTime, 
[17:39:21.626]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.626]             version = "1.8"), class = "FutureResult")
[17:39:21.626]     }, finally = {
[17:39:21.626]         if (!identical(...future.workdir, getwd())) 
[17:39:21.626]             setwd(...future.workdir)
[17:39:21.626]         {
[17:39:21.626]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.626]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.626]             }
[17:39:21.626]             base::options(...future.oldOptions)
[17:39:21.626]             if (.Platform$OS.type == "windows") {
[17:39:21.626]                 old_names <- names(...future.oldEnvVars)
[17:39:21.626]                 envs <- base::Sys.getenv()
[17:39:21.626]                 names <- names(envs)
[17:39:21.626]                 common <- intersect(names, old_names)
[17:39:21.626]                 added <- setdiff(names, old_names)
[17:39:21.626]                 removed <- setdiff(old_names, names)
[17:39:21.626]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.626]                   envs[common]]
[17:39:21.626]                 NAMES <- toupper(changed)
[17:39:21.626]                 args <- list()
[17:39:21.626]                 for (kk in seq_along(NAMES)) {
[17:39:21.626]                   name <- changed[[kk]]
[17:39:21.626]                   NAME <- NAMES[[kk]]
[17:39:21.626]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.626]                     next
[17:39:21.626]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.626]                 }
[17:39:21.626]                 NAMES <- toupper(added)
[17:39:21.626]                 for (kk in seq_along(NAMES)) {
[17:39:21.626]                   name <- added[[kk]]
[17:39:21.626]                   NAME <- NAMES[[kk]]
[17:39:21.626]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.626]                     next
[17:39:21.626]                   args[[name]] <- ""
[17:39:21.626]                 }
[17:39:21.626]                 NAMES <- toupper(removed)
[17:39:21.626]                 for (kk in seq_along(NAMES)) {
[17:39:21.626]                   name <- removed[[kk]]
[17:39:21.626]                   NAME <- NAMES[[kk]]
[17:39:21.626]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.626]                     next
[17:39:21.626]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.626]                 }
[17:39:21.626]                 if (length(args) > 0) 
[17:39:21.626]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.626]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.626]             }
[17:39:21.626]             else {
[17:39:21.626]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.626]             }
[17:39:21.626]             {
[17:39:21.626]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.626]                   0L) {
[17:39:21.626]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.626]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.626]                   base::options(opts)
[17:39:21.626]                 }
[17:39:21.626]                 {
[17:39:21.626]                   {
[17:39:21.626]                     NULL
[17:39:21.626]                     RNGkind("Mersenne-Twister")
[17:39:21.626]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:21.626]                       inherits = FALSE)
[17:39:21.626]                   }
[17:39:21.626]                   options(future.plan = NULL)
[17:39:21.626]                   if (is.na(NA_character_)) 
[17:39:21.626]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.626]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.626]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.626]                     .init = FALSE)
[17:39:21.626]                 }
[17:39:21.626]             }
[17:39:21.626]         }
[17:39:21.626]     })
[17:39:21.626]     if (TRUE) {
[17:39:21.626]         base::sink(type = "output", split = FALSE)
[17:39:21.626]         if (TRUE) {
[17:39:21.626]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.626]         }
[17:39:21.626]         else {
[17:39:21.626]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.626]         }
[17:39:21.626]         base::close(...future.stdout)
[17:39:21.626]         ...future.stdout <- NULL
[17:39:21.626]     }
[17:39:21.626]     ...future.result$conditions <- ...future.conditions
[17:39:21.626]     ...future.result$finished <- base::Sys.time()
[17:39:21.626]     ...future.result
[17:39:21.626] }
[17:39:21.628] plan(): Setting new future strategy stack:
[17:39:21.628] List of future strategies:
[17:39:21.628] 1. sequential:
[17:39:21.628]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.628]    - tweaked: FALSE
[17:39:21.628]    - call: NULL
[17:39:21.628] plan(): nbrOfWorkers() = 1
[17:39:21.629] plan(): Setting new future strategy stack:
[17:39:21.629] List of future strategies:
[17:39:21.629] 1. sequential:
[17:39:21.629]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.629]    - tweaked: FALSE
[17:39:21.629]    - call: plan(strategy)
[17:39:21.629] plan(): nbrOfWorkers() = 1
[17:39:21.630] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:21.630] getGlobalsAndPackages() ...
[17:39:21.630] Searching for globals...
[17:39:21.631] 
[17:39:21.631] Searching for globals ... DONE
[17:39:21.631] - globals: [0] <none>
[17:39:21.631] getGlobalsAndPackages() ... DONE
[17:39:21.631] run() for ‘Future’ ...
[17:39:21.631] - state: ‘created’
[17:39:21.631] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:21.632] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:21.632] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:21.632]   - Field: ‘label’
[17:39:21.632]   - Field: ‘local’
[17:39:21.632]   - Field: ‘owner’
[17:39:21.632]   - Field: ‘envir’
[17:39:21.632]   - Field: ‘packages’
[17:39:21.632]   - Field: ‘gc’
[17:39:21.632]   - Field: ‘conditions’
[17:39:21.633]   - Field: ‘expr’
[17:39:21.633]   - Field: ‘uuid’
[17:39:21.633]   - Field: ‘seed’
[17:39:21.633]   - Field: ‘version’
[17:39:21.633]   - Field: ‘result’
[17:39:21.633]   - Field: ‘asynchronous’
[17:39:21.633]   - Field: ‘calls’
[17:39:21.633]   - Field: ‘globals’
[17:39:21.633]   - Field: ‘stdout’
[17:39:21.633]   - Field: ‘earlySignal’
[17:39:21.633]   - Field: ‘lazy’
[17:39:21.633]   - Field: ‘state’
[17:39:21.634] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:21.634] - Launch lazy future ...
[17:39:21.634] Packages needed by the future expression (n = 0): <none>
[17:39:21.634] Packages needed by future strategies (n = 0): <none>
[17:39:21.634] {
[17:39:21.634]     {
[17:39:21.634]         {
[17:39:21.634]             ...future.startTime <- base::Sys.time()
[17:39:21.634]             {
[17:39:21.634]                 {
[17:39:21.634]                   {
[17:39:21.634]                     base::local({
[17:39:21.634]                       has_future <- base::requireNamespace("future", 
[17:39:21.634]                         quietly = TRUE)
[17:39:21.634]                       if (has_future) {
[17:39:21.634]                         ns <- base::getNamespace("future")
[17:39:21.634]                         version <- ns[[".package"]][["version"]]
[17:39:21.634]                         if (is.null(version)) 
[17:39:21.634]                           version <- utils::packageVersion("future")
[17:39:21.634]                       }
[17:39:21.634]                       else {
[17:39:21.634]                         version <- NULL
[17:39:21.634]                       }
[17:39:21.634]                       if (!has_future || version < "1.8.0") {
[17:39:21.634]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.634]                           "", base::R.version$version.string), 
[17:39:21.634]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:21.634]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.634]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.634]                             "release", "version")], collapse = " "), 
[17:39:21.634]                           hostname = base::Sys.info()[["nodename"]])
[17:39:21.634]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.634]                           info)
[17:39:21.634]                         info <- base::paste(info, collapse = "; ")
[17:39:21.634]                         if (!has_future) {
[17:39:21.634]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.634]                             info)
[17:39:21.634]                         }
[17:39:21.634]                         else {
[17:39:21.634]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.634]                             info, version)
[17:39:21.634]                         }
[17:39:21.634]                         base::stop(msg)
[17:39:21.634]                       }
[17:39:21.634]                     })
[17:39:21.634]                   }
[17:39:21.634]                   ...future.strategy.old <- future::plan("list")
[17:39:21.634]                   options(future.plan = NULL)
[17:39:21.634]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.634]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.634]                 }
[17:39:21.634]                 ...future.workdir <- getwd()
[17:39:21.634]             }
[17:39:21.634]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.634]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.634]         }
[17:39:21.634]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.634]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.634]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.634]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.634]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.634]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.634]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.634]             base::names(...future.oldOptions))
[17:39:21.634]     }
[17:39:21.634]     if (FALSE) {
[17:39:21.634]     }
[17:39:21.634]     else {
[17:39:21.634]         if (TRUE) {
[17:39:21.634]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.634]                 open = "w")
[17:39:21.634]         }
[17:39:21.634]         else {
[17:39:21.634]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.634]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.634]         }
[17:39:21.634]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.634]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.634]             base::sink(type = "output", split = FALSE)
[17:39:21.634]             base::close(...future.stdout)
[17:39:21.634]         }, add = TRUE)
[17:39:21.634]     }
[17:39:21.634]     ...future.frame <- base::sys.nframe()
[17:39:21.634]     ...future.conditions <- base::list()
[17:39:21.634]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.634]     if (FALSE) {
[17:39:21.634]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.634]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.634]     }
[17:39:21.634]     ...future.result <- base::tryCatch({
[17:39:21.634]         base::withCallingHandlers({
[17:39:21.634]             ...future.value <- base::withVisible(base::local(42))
[17:39:21.634]             future::FutureResult(value = ...future.value$value, 
[17:39:21.634]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.634]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.634]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.634]                     ...future.globalenv.names))
[17:39:21.634]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.634]         }, condition = base::local({
[17:39:21.634]             c <- base::c
[17:39:21.634]             inherits <- base::inherits
[17:39:21.634]             invokeRestart <- base::invokeRestart
[17:39:21.634]             length <- base::length
[17:39:21.634]             list <- base::list
[17:39:21.634]             seq.int <- base::seq.int
[17:39:21.634]             signalCondition <- base::signalCondition
[17:39:21.634]             sys.calls <- base::sys.calls
[17:39:21.634]             `[[` <- base::`[[`
[17:39:21.634]             `+` <- base::`+`
[17:39:21.634]             `<<-` <- base::`<<-`
[17:39:21.634]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.634]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.634]                   3L)]
[17:39:21.634]             }
[17:39:21.634]             function(cond) {
[17:39:21.634]                 is_error <- inherits(cond, "error")
[17:39:21.634]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.634]                   NULL)
[17:39:21.634]                 if (is_error) {
[17:39:21.634]                   sessionInformation <- function() {
[17:39:21.634]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.634]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.634]                       search = base::search(), system = base::Sys.info())
[17:39:21.634]                   }
[17:39:21.634]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.634]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.634]                     cond$call), session = sessionInformation(), 
[17:39:21.634]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.634]                   signalCondition(cond)
[17:39:21.634]                 }
[17:39:21.634]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.634]                 "immediateCondition"))) {
[17:39:21.634]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.634]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.634]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.634]                   if (TRUE && !signal) {
[17:39:21.634]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.634]                     {
[17:39:21.634]                       inherits <- base::inherits
[17:39:21.634]                       invokeRestart <- base::invokeRestart
[17:39:21.634]                       is.null <- base::is.null
[17:39:21.634]                       muffled <- FALSE
[17:39:21.634]                       if (inherits(cond, "message")) {
[17:39:21.634]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.634]                         if (muffled) 
[17:39:21.634]                           invokeRestart("muffleMessage")
[17:39:21.634]                       }
[17:39:21.634]                       else if (inherits(cond, "warning")) {
[17:39:21.634]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.634]                         if (muffled) 
[17:39:21.634]                           invokeRestart("muffleWarning")
[17:39:21.634]                       }
[17:39:21.634]                       else if (inherits(cond, "condition")) {
[17:39:21.634]                         if (!is.null(pattern)) {
[17:39:21.634]                           computeRestarts <- base::computeRestarts
[17:39:21.634]                           grepl <- base::grepl
[17:39:21.634]                           restarts <- computeRestarts(cond)
[17:39:21.634]                           for (restart in restarts) {
[17:39:21.634]                             name <- restart$name
[17:39:21.634]                             if (is.null(name)) 
[17:39:21.634]                               next
[17:39:21.634]                             if (!grepl(pattern, name)) 
[17:39:21.634]                               next
[17:39:21.634]                             invokeRestart(restart)
[17:39:21.634]                             muffled <- TRUE
[17:39:21.634]                             break
[17:39:21.634]                           }
[17:39:21.634]                         }
[17:39:21.634]                       }
[17:39:21.634]                       invisible(muffled)
[17:39:21.634]                     }
[17:39:21.634]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.634]                   }
[17:39:21.634]                 }
[17:39:21.634]                 else {
[17:39:21.634]                   if (TRUE) {
[17:39:21.634]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.634]                     {
[17:39:21.634]                       inherits <- base::inherits
[17:39:21.634]                       invokeRestart <- base::invokeRestart
[17:39:21.634]                       is.null <- base::is.null
[17:39:21.634]                       muffled <- FALSE
[17:39:21.634]                       if (inherits(cond, "message")) {
[17:39:21.634]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.634]                         if (muffled) 
[17:39:21.634]                           invokeRestart("muffleMessage")
[17:39:21.634]                       }
[17:39:21.634]                       else if (inherits(cond, "warning")) {
[17:39:21.634]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.634]                         if (muffled) 
[17:39:21.634]                           invokeRestart("muffleWarning")
[17:39:21.634]                       }
[17:39:21.634]                       else if (inherits(cond, "condition")) {
[17:39:21.634]                         if (!is.null(pattern)) {
[17:39:21.634]                           computeRestarts <- base::computeRestarts
[17:39:21.634]                           grepl <- base::grepl
[17:39:21.634]                           restarts <- computeRestarts(cond)
[17:39:21.634]                           for (restart in restarts) {
[17:39:21.634]                             name <- restart$name
[17:39:21.634]                             if (is.null(name)) 
[17:39:21.634]                               next
[17:39:21.634]                             if (!grepl(pattern, name)) 
[17:39:21.634]                               next
[17:39:21.634]                             invokeRestart(restart)
[17:39:21.634]                             muffled <- TRUE
[17:39:21.634]                             break
[17:39:21.634]                           }
[17:39:21.634]                         }
[17:39:21.634]                       }
[17:39:21.634]                       invisible(muffled)
[17:39:21.634]                     }
[17:39:21.634]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.634]                   }
[17:39:21.634]                 }
[17:39:21.634]             }
[17:39:21.634]         }))
[17:39:21.634]     }, error = function(ex) {
[17:39:21.634]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.634]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.634]                 ...future.rng), started = ...future.startTime, 
[17:39:21.634]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.634]             version = "1.8"), class = "FutureResult")
[17:39:21.634]     }, finally = {
[17:39:21.634]         if (!identical(...future.workdir, getwd())) 
[17:39:21.634]             setwd(...future.workdir)
[17:39:21.634]         {
[17:39:21.634]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.634]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.634]             }
[17:39:21.634]             base::options(...future.oldOptions)
[17:39:21.634]             if (.Platform$OS.type == "windows") {
[17:39:21.634]                 old_names <- names(...future.oldEnvVars)
[17:39:21.634]                 envs <- base::Sys.getenv()
[17:39:21.634]                 names <- names(envs)
[17:39:21.634]                 common <- intersect(names, old_names)
[17:39:21.634]                 added <- setdiff(names, old_names)
[17:39:21.634]                 removed <- setdiff(old_names, names)
[17:39:21.634]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.634]                   envs[common]]
[17:39:21.634]                 NAMES <- toupper(changed)
[17:39:21.634]                 args <- list()
[17:39:21.634]                 for (kk in seq_along(NAMES)) {
[17:39:21.634]                   name <- changed[[kk]]
[17:39:21.634]                   NAME <- NAMES[[kk]]
[17:39:21.634]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.634]                     next
[17:39:21.634]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.634]                 }
[17:39:21.634]                 NAMES <- toupper(added)
[17:39:21.634]                 for (kk in seq_along(NAMES)) {
[17:39:21.634]                   name <- added[[kk]]
[17:39:21.634]                   NAME <- NAMES[[kk]]
[17:39:21.634]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.634]                     next
[17:39:21.634]                   args[[name]] <- ""
[17:39:21.634]                 }
[17:39:21.634]                 NAMES <- toupper(removed)
[17:39:21.634]                 for (kk in seq_along(NAMES)) {
[17:39:21.634]                   name <- removed[[kk]]
[17:39:21.634]                   NAME <- NAMES[[kk]]
[17:39:21.634]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.634]                     next
[17:39:21.634]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.634]                 }
[17:39:21.634]                 if (length(args) > 0) 
[17:39:21.634]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.634]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.634]             }
[17:39:21.634]             else {
[17:39:21.634]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.634]             }
[17:39:21.634]             {
[17:39:21.634]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.634]                   0L) {
[17:39:21.634]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.634]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.634]                   base::options(opts)
[17:39:21.634]                 }
[17:39:21.634]                 {
[17:39:21.634]                   {
[17:39:21.634]                     NULL
[17:39:21.634]                     RNGkind("Mersenne-Twister")
[17:39:21.634]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:21.634]                       inherits = FALSE)
[17:39:21.634]                   }
[17:39:21.634]                   options(future.plan = NULL)
[17:39:21.634]                   if (is.na(NA_character_)) 
[17:39:21.634]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.634]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.634]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.634]                     .init = FALSE)
[17:39:21.634]                 }
[17:39:21.634]             }
[17:39:21.634]         }
[17:39:21.634]     })
[17:39:21.634]     if (TRUE) {
[17:39:21.634]         base::sink(type = "output", split = FALSE)
[17:39:21.634]         if (TRUE) {
[17:39:21.634]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.634]         }
[17:39:21.634]         else {
[17:39:21.634]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.634]         }
[17:39:21.634]         base::close(...future.stdout)
[17:39:21.634]         ...future.stdout <- NULL
[17:39:21.634]     }
[17:39:21.634]     ...future.result$conditions <- ...future.conditions
[17:39:21.634]     ...future.result$finished <- base::Sys.time()
[17:39:21.634]     ...future.result
[17:39:21.634] }
[17:39:21.636] plan(): Setting new future strategy stack:
[17:39:21.639] List of future strategies:
[17:39:21.639] 1. sequential:
[17:39:21.639]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.639]    - tweaked: FALSE
[17:39:21.639]    - call: NULL
[17:39:21.639] plan(): nbrOfWorkers() = 1
[17:39:21.640] plan(): Setting new future strategy stack:
[17:39:21.640] List of future strategies:
[17:39:21.640] 1. sequential:
[17:39:21.640]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.640]    - tweaked: FALSE
[17:39:21.640]    - call: plan(strategy)
[17:39:21.641] plan(): nbrOfWorkers() = 1
[17:39:21.641] SequentialFuture started (and completed)
[17:39:21.641] - Launch lazy future ... done
[17:39:21.641] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:21.642] getGlobalsAndPackages() ...
[17:39:21.642] Searching for globals...
[17:39:21.642] - globals found: [1] ‘{’
[17:39:21.643] Searching for globals ... DONE
[17:39:21.643] Resolving globals: FALSE
[17:39:21.643] 
[17:39:21.643] 
[17:39:21.643] getGlobalsAndPackages() ... DONE
[17:39:21.643] run() for ‘Future’ ...
[17:39:21.643] - state: ‘created’
[17:39:21.643] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:39:21.644] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:39:21.644] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:39:21.644]   - Field: ‘label’
[17:39:21.644]   - Field: ‘local’
[17:39:21.644]   - Field: ‘owner’
[17:39:21.644]   - Field: ‘envir’
[17:39:21.644]   - Field: ‘packages’
[17:39:21.644]   - Field: ‘gc’
[17:39:21.645]   - Field: ‘conditions’
[17:39:21.645]   - Field: ‘expr’
[17:39:21.645]   - Field: ‘uuid’
[17:39:21.645]   - Field: ‘seed’
[17:39:21.645]   - Field: ‘version’
[17:39:21.645]   - Field: ‘result’
[17:39:21.645]   - Field: ‘asynchronous’
[17:39:21.645]   - Field: ‘calls’
[17:39:21.645]   - Field: ‘globals’
[17:39:21.645]   - Field: ‘stdout’
[17:39:21.645]   - Field: ‘earlySignal’
[17:39:21.645]   - Field: ‘lazy’
[17:39:21.646]   - Field: ‘state’
[17:39:21.646] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:39:21.646] - Launch lazy future ...
[17:39:21.646] Packages needed by the future expression (n = 0): <none>
[17:39:21.646] Packages needed by future strategies (n = 0): <none>
[17:39:21.646] {
[17:39:21.646]     {
[17:39:21.646]         {
[17:39:21.646]             ...future.startTime <- base::Sys.time()
[17:39:21.646]             {
[17:39:21.646]                 {
[17:39:21.646]                   {
[17:39:21.646]                     base::local({
[17:39:21.646]                       has_future <- base::requireNamespace("future", 
[17:39:21.646]                         quietly = TRUE)
[17:39:21.646]                       if (has_future) {
[17:39:21.646]                         ns <- base::getNamespace("future")
[17:39:21.646]                         version <- ns[[".package"]][["version"]]
[17:39:21.646]                         if (is.null(version)) 
[17:39:21.646]                           version <- utils::packageVersion("future")
[17:39:21.646]                       }
[17:39:21.646]                       else {
[17:39:21.646]                         version <- NULL
[17:39:21.646]                       }
[17:39:21.646]                       if (!has_future || version < "1.8.0") {
[17:39:21.646]                         info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.646]                           "", base::R.version$version.string), 
[17:39:21.646]                           platform = base::sprintf("%s (%s-bit)", 
[17:39:21.646]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.646]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.646]                             "release", "version")], collapse = " "), 
[17:39:21.646]                           hostname = base::Sys.info()[["nodename"]])
[17:39:21.646]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.646]                           info)
[17:39:21.646]                         info <- base::paste(info, collapse = "; ")
[17:39:21.646]                         if (!has_future) {
[17:39:21.646]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.646]                             info)
[17:39:21.646]                         }
[17:39:21.646]                         else {
[17:39:21.646]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.646]                             info, version)
[17:39:21.646]                         }
[17:39:21.646]                         base::stop(msg)
[17:39:21.646]                       }
[17:39:21.646]                     })
[17:39:21.646]                   }
[17:39:21.646]                   ...future.strategy.old <- future::plan("list")
[17:39:21.646]                   options(future.plan = NULL)
[17:39:21.646]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.646]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.646]                 }
[17:39:21.646]                 ...future.workdir <- getwd()
[17:39:21.646]             }
[17:39:21.646]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.646]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.646]         }
[17:39:21.646]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.646]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.646]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.646]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.646]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.646]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.646]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.646]             base::names(...future.oldOptions))
[17:39:21.646]     }
[17:39:21.646]     if (FALSE) {
[17:39:21.646]     }
[17:39:21.646]     else {
[17:39:21.646]         if (TRUE) {
[17:39:21.646]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.646]                 open = "w")
[17:39:21.646]         }
[17:39:21.646]         else {
[17:39:21.646]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.646]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.646]         }
[17:39:21.646]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.646]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.646]             base::sink(type = "output", split = FALSE)
[17:39:21.646]             base::close(...future.stdout)
[17:39:21.646]         }, add = TRUE)
[17:39:21.646]     }
[17:39:21.646]     ...future.frame <- base::sys.nframe()
[17:39:21.646]     ...future.conditions <- base::list()
[17:39:21.646]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.646]     if (FALSE) {
[17:39:21.646]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.646]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.646]     }
[17:39:21.646]     ...future.result <- base::tryCatch({
[17:39:21.646]         base::withCallingHandlers({
[17:39:21.646]             ...future.value <- base::withVisible(base::local({
[17:39:21.646]                 42
[17:39:21.646]             }))
[17:39:21.646]             future::FutureResult(value = ...future.value$value, 
[17:39:21.646]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.646]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.646]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.646]                     ...future.globalenv.names))
[17:39:21.646]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.646]         }, condition = base::local({
[17:39:21.646]             c <- base::c
[17:39:21.646]             inherits <- base::inherits
[17:39:21.646]             invokeRestart <- base::invokeRestart
[17:39:21.646]             length <- base::length
[17:39:21.646]             list <- base::list
[17:39:21.646]             seq.int <- base::seq.int
[17:39:21.646]             signalCondition <- base::signalCondition
[17:39:21.646]             sys.calls <- base::sys.calls
[17:39:21.646]             `[[` <- base::`[[`
[17:39:21.646]             `+` <- base::`+`
[17:39:21.646]             `<<-` <- base::`<<-`
[17:39:21.646]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.646]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.646]                   3L)]
[17:39:21.646]             }
[17:39:21.646]             function(cond) {
[17:39:21.646]                 is_error <- inherits(cond, "error")
[17:39:21.646]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.646]                   NULL)
[17:39:21.646]                 if (is_error) {
[17:39:21.646]                   sessionInformation <- function() {
[17:39:21.646]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.646]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.646]                       search = base::search(), system = base::Sys.info())
[17:39:21.646]                   }
[17:39:21.646]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.646]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.646]                     cond$call), session = sessionInformation(), 
[17:39:21.646]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.646]                   signalCondition(cond)
[17:39:21.646]                 }
[17:39:21.646]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.646]                 "immediateCondition"))) {
[17:39:21.646]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.646]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.646]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.646]                   if (TRUE && !signal) {
[17:39:21.646]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.646]                     {
[17:39:21.646]                       inherits <- base::inherits
[17:39:21.646]                       invokeRestart <- base::invokeRestart
[17:39:21.646]                       is.null <- base::is.null
[17:39:21.646]                       muffled <- FALSE
[17:39:21.646]                       if (inherits(cond, "message")) {
[17:39:21.646]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.646]                         if (muffled) 
[17:39:21.646]                           invokeRestart("muffleMessage")
[17:39:21.646]                       }
[17:39:21.646]                       else if (inherits(cond, "warning")) {
[17:39:21.646]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.646]                         if (muffled) 
[17:39:21.646]                           invokeRestart("muffleWarning")
[17:39:21.646]                       }
[17:39:21.646]                       else if (inherits(cond, "condition")) {
[17:39:21.646]                         if (!is.null(pattern)) {
[17:39:21.646]                           computeRestarts <- base::computeRestarts
[17:39:21.646]                           grepl <- base::grepl
[17:39:21.646]                           restarts <- computeRestarts(cond)
[17:39:21.646]                           for (restart in restarts) {
[17:39:21.646]                             name <- restart$name
[17:39:21.646]                             if (is.null(name)) 
[17:39:21.646]                               next
[17:39:21.646]                             if (!grepl(pattern, name)) 
[17:39:21.646]                               next
[17:39:21.646]                             invokeRestart(restart)
[17:39:21.646]                             muffled <- TRUE
[17:39:21.646]                             break
[17:39:21.646]                           }
[17:39:21.646]                         }
[17:39:21.646]                       }
[17:39:21.646]                       invisible(muffled)
[17:39:21.646]                     }
[17:39:21.646]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.646]                   }
[17:39:21.646]                 }
[17:39:21.646]                 else {
[17:39:21.646]                   if (TRUE) {
[17:39:21.646]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.646]                     {
[17:39:21.646]                       inherits <- base::inherits
[17:39:21.646]                       invokeRestart <- base::invokeRestart
[17:39:21.646]                       is.null <- base::is.null
[17:39:21.646]                       muffled <- FALSE
[17:39:21.646]                       if (inherits(cond, "message")) {
[17:39:21.646]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.646]                         if (muffled) 
[17:39:21.646]                           invokeRestart("muffleMessage")
[17:39:21.646]                       }
[17:39:21.646]                       else if (inherits(cond, "warning")) {
[17:39:21.646]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.646]                         if (muffled) 
[17:39:21.646]                           invokeRestart("muffleWarning")
[17:39:21.646]                       }
[17:39:21.646]                       else if (inherits(cond, "condition")) {
[17:39:21.646]                         if (!is.null(pattern)) {
[17:39:21.646]                           computeRestarts <- base::computeRestarts
[17:39:21.646]                           grepl <- base::grepl
[17:39:21.646]                           restarts <- computeRestarts(cond)
[17:39:21.646]                           for (restart in restarts) {
[17:39:21.646]                             name <- restart$name
[17:39:21.646]                             if (is.null(name)) 
[17:39:21.646]                               next
[17:39:21.646]                             if (!grepl(pattern, name)) 
[17:39:21.646]                               next
[17:39:21.646]                             invokeRestart(restart)
[17:39:21.646]                             muffled <- TRUE
[17:39:21.646]                             break
[17:39:21.646]                           }
[17:39:21.646]                         }
[17:39:21.646]                       }
[17:39:21.646]                       invisible(muffled)
[17:39:21.646]                     }
[17:39:21.646]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.646]                   }
[17:39:21.646]                 }
[17:39:21.646]             }
[17:39:21.646]         }))
[17:39:21.646]     }, error = function(ex) {
[17:39:21.646]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.646]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.646]                 ...future.rng), started = ...future.startTime, 
[17:39:21.646]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.646]             version = "1.8"), class = "FutureResult")
[17:39:21.646]     }, finally = {
[17:39:21.646]         if (!identical(...future.workdir, getwd())) 
[17:39:21.646]             setwd(...future.workdir)
[17:39:21.646]         {
[17:39:21.646]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.646]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.646]             }
[17:39:21.646]             base::options(...future.oldOptions)
[17:39:21.646]             if (.Platform$OS.type == "windows") {
[17:39:21.646]                 old_names <- names(...future.oldEnvVars)
[17:39:21.646]                 envs <- base::Sys.getenv()
[17:39:21.646]                 names <- names(envs)
[17:39:21.646]                 common <- intersect(names, old_names)
[17:39:21.646]                 added <- setdiff(names, old_names)
[17:39:21.646]                 removed <- setdiff(old_names, names)
[17:39:21.646]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.646]                   envs[common]]
[17:39:21.646]                 NAMES <- toupper(changed)
[17:39:21.646]                 args <- list()
[17:39:21.646]                 for (kk in seq_along(NAMES)) {
[17:39:21.646]                   name <- changed[[kk]]
[17:39:21.646]                   NAME <- NAMES[[kk]]
[17:39:21.646]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.646]                     next
[17:39:21.646]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.646]                 }
[17:39:21.646]                 NAMES <- toupper(added)
[17:39:21.646]                 for (kk in seq_along(NAMES)) {
[17:39:21.646]                   name <- added[[kk]]
[17:39:21.646]                   NAME <- NAMES[[kk]]
[17:39:21.646]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.646]                     next
[17:39:21.646]                   args[[name]] <- ""
[17:39:21.646]                 }
[17:39:21.646]                 NAMES <- toupper(removed)
[17:39:21.646]                 for (kk in seq_along(NAMES)) {
[17:39:21.646]                   name <- removed[[kk]]
[17:39:21.646]                   NAME <- NAMES[[kk]]
[17:39:21.646]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.646]                     next
[17:39:21.646]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.646]                 }
[17:39:21.646]                 if (length(args) > 0) 
[17:39:21.646]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.646]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.646]             }
[17:39:21.646]             else {
[17:39:21.646]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.646]             }
[17:39:21.646]             {
[17:39:21.646]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.646]                   0L) {
[17:39:21.646]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.646]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.646]                   base::options(opts)
[17:39:21.646]                 }
[17:39:21.646]                 {
[17:39:21.646]                   {
[17:39:21.646]                     NULL
[17:39:21.646]                     RNGkind("Mersenne-Twister")
[17:39:21.646]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:39:21.646]                       inherits = FALSE)
[17:39:21.646]                   }
[17:39:21.646]                   options(future.plan = NULL)
[17:39:21.646]                   if (is.na(NA_character_)) 
[17:39:21.646]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.646]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.646]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.646]                     .init = FALSE)
[17:39:21.646]                 }
[17:39:21.646]             }
[17:39:21.646]         }
[17:39:21.646]     })
[17:39:21.646]     if (TRUE) {
[17:39:21.646]         base::sink(type = "output", split = FALSE)
[17:39:21.646]         if (TRUE) {
[17:39:21.646]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.646]         }
[17:39:21.646]         else {
[17:39:21.646]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.646]         }
[17:39:21.646]         base::close(...future.stdout)
[17:39:21.646]         ...future.stdout <- NULL
[17:39:21.646]     }
[17:39:21.646]     ...future.result$conditions <- ...future.conditions
[17:39:21.646]     ...future.result$finished <- base::Sys.time()
[17:39:21.646]     ...future.result
[17:39:21.646] }
[17:39:21.648] plan(): Setting new future strategy stack:
[17:39:21.648] List of future strategies:
[17:39:21.648] 1. sequential:
[17:39:21.648]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.648]    - tweaked: FALSE
[17:39:21.648]    - call: NULL
[17:39:21.649] plan(): nbrOfWorkers() = 1
[17:39:21.649] plan(): Setting new future strategy stack:
[17:39:21.649] List of future strategies:
[17:39:21.649] 1. sequential:
[17:39:21.649]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.649]    - tweaked: FALSE
[17:39:21.649]    - call: plan(strategy)
[17:39:21.650] plan(): nbrOfWorkers() = 1
[17:39:21.650] SequentialFuture started (and completed)
[17:39:21.650] - Launch lazy future ... done
[17:39:21.650] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[17:39:21.651] plan(): Setting new future strategy stack:
[17:39:21.651] List of future strategies:
[17:39:21.651] 1. multicore:
[17:39:21.651]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:21.651]    - tweaked: FALSE
[17:39:21.651]    - call: plan(strategy)
[17:39:21.655] plan(): nbrOfWorkers() = 2
[17:39:21.658] getGlobalsAndPackages() ...
[17:39:21.658] 
[17:39:21.659] - globals: [0] <none>
[17:39:21.659] getGlobalsAndPackages() ... DONE
[17:39:21.660] Packages needed by the future expression (n = 0): <none>
[17:39:21.660] Packages needed by future strategies (n = 0): <none>
[17:39:21.660] {
[17:39:21.660]     {
[17:39:21.660]         {
[17:39:21.660]             ...future.startTime <- base::Sys.time()
[17:39:21.660]             {
[17:39:21.660]                 {
[17:39:21.660]                   {
[17:39:21.660]                     {
[17:39:21.660]                       base::local({
[17:39:21.660]                         has_future <- base::requireNamespace("future", 
[17:39:21.660]                           quietly = TRUE)
[17:39:21.660]                         if (has_future) {
[17:39:21.660]                           ns <- base::getNamespace("future")
[17:39:21.660]                           version <- ns[[".package"]][["version"]]
[17:39:21.660]                           if (is.null(version)) 
[17:39:21.660]                             version <- utils::packageVersion("future")
[17:39:21.660]                         }
[17:39:21.660]                         else {
[17:39:21.660]                           version <- NULL
[17:39:21.660]                         }
[17:39:21.660]                         if (!has_future || version < "1.8.0") {
[17:39:21.660]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.660]                             "", base::R.version$version.string), 
[17:39:21.660]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:21.660]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.660]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.660]                               "release", "version")], collapse = " "), 
[17:39:21.660]                             hostname = base::Sys.info()[["nodename"]])
[17:39:21.660]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.660]                             info)
[17:39:21.660]                           info <- base::paste(info, collapse = "; ")
[17:39:21.660]                           if (!has_future) {
[17:39:21.660]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.660]                               info)
[17:39:21.660]                           }
[17:39:21.660]                           else {
[17:39:21.660]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.660]                               info, version)
[17:39:21.660]                           }
[17:39:21.660]                           base::stop(msg)
[17:39:21.660]                         }
[17:39:21.660]                       })
[17:39:21.660]                     }
[17:39:21.660]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:21.660]                     base::options(mc.cores = 1L)
[17:39:21.660]                   }
[17:39:21.660]                   ...future.strategy.old <- future::plan("list")
[17:39:21.660]                   options(future.plan = NULL)
[17:39:21.660]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.660]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.660]                 }
[17:39:21.660]                 ...future.workdir <- getwd()
[17:39:21.660]             }
[17:39:21.660]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.660]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.660]         }
[17:39:21.660]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.660]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.660]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.660]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.660]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.660]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.660]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.660]             base::names(...future.oldOptions))
[17:39:21.660]     }
[17:39:21.660]     if (FALSE) {
[17:39:21.660]     }
[17:39:21.660]     else {
[17:39:21.660]         if (TRUE) {
[17:39:21.660]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.660]                 open = "w")
[17:39:21.660]         }
[17:39:21.660]         else {
[17:39:21.660]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.660]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.660]         }
[17:39:21.660]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.660]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.660]             base::sink(type = "output", split = FALSE)
[17:39:21.660]             base::close(...future.stdout)
[17:39:21.660]         }, add = TRUE)
[17:39:21.660]     }
[17:39:21.660]     ...future.frame <- base::sys.nframe()
[17:39:21.660]     ...future.conditions <- base::list()
[17:39:21.660]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.660]     if (FALSE) {
[17:39:21.660]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.660]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.660]     }
[17:39:21.660]     ...future.result <- base::tryCatch({
[17:39:21.660]         base::withCallingHandlers({
[17:39:21.660]             ...future.value <- base::withVisible(base::local({
[17:39:21.660]                 withCallingHandlers({
[17:39:21.660]                   42
[17:39:21.660]                 }, immediateCondition = function(cond) {
[17:39:21.660]                   save_rds <- function (object, pathname, ...) 
[17:39:21.660]                   {
[17:39:21.660]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:21.660]                     if (file_test("-f", pathname_tmp)) {
[17:39:21.660]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.660]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:21.660]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.660]                         fi_tmp[["mtime"]])
[17:39:21.660]                     }
[17:39:21.660]                     tryCatch({
[17:39:21.660]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:21.660]                     }, error = function(ex) {
[17:39:21.660]                       msg <- conditionMessage(ex)
[17:39:21.660]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.660]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:21.660]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.660]                         fi_tmp[["mtime"]], msg)
[17:39:21.660]                       ex$message <- msg
[17:39:21.660]                       stop(ex)
[17:39:21.660]                     })
[17:39:21.660]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:21.660]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:21.660]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:21.660]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.660]                       fi <- file.info(pathname)
[17:39:21.660]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:21.660]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.660]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:21.660]                         fi[["size"]], fi[["mtime"]])
[17:39:21.660]                       stop(msg)
[17:39:21.660]                     }
[17:39:21.660]                     invisible(pathname)
[17:39:21.660]                   }
[17:39:21.660]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:21.660]                     rootPath = tempdir()) 
[17:39:21.660]                   {
[17:39:21.660]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:21.660]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:21.660]                       tmpdir = path, fileext = ".rds")
[17:39:21.660]                     save_rds(obj, file)
[17:39:21.660]                   }
[17:39:21.660]                   saveImmediateCondition(cond, path = "/tmp/RtmpwpZk8w/.future/immediateConditions")
[17:39:21.660]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.660]                   {
[17:39:21.660]                     inherits <- base::inherits
[17:39:21.660]                     invokeRestart <- base::invokeRestart
[17:39:21.660]                     is.null <- base::is.null
[17:39:21.660]                     muffled <- FALSE
[17:39:21.660]                     if (inherits(cond, "message")) {
[17:39:21.660]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:21.660]                       if (muffled) 
[17:39:21.660]                         invokeRestart("muffleMessage")
[17:39:21.660]                     }
[17:39:21.660]                     else if (inherits(cond, "warning")) {
[17:39:21.660]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:21.660]                       if (muffled) 
[17:39:21.660]                         invokeRestart("muffleWarning")
[17:39:21.660]                     }
[17:39:21.660]                     else if (inherits(cond, "condition")) {
[17:39:21.660]                       if (!is.null(pattern)) {
[17:39:21.660]                         computeRestarts <- base::computeRestarts
[17:39:21.660]                         grepl <- base::grepl
[17:39:21.660]                         restarts <- computeRestarts(cond)
[17:39:21.660]                         for (restart in restarts) {
[17:39:21.660]                           name <- restart$name
[17:39:21.660]                           if (is.null(name)) 
[17:39:21.660]                             next
[17:39:21.660]                           if (!grepl(pattern, name)) 
[17:39:21.660]                             next
[17:39:21.660]                           invokeRestart(restart)
[17:39:21.660]                           muffled <- TRUE
[17:39:21.660]                           break
[17:39:21.660]                         }
[17:39:21.660]                       }
[17:39:21.660]                     }
[17:39:21.660]                     invisible(muffled)
[17:39:21.660]                   }
[17:39:21.660]                   muffleCondition(cond)
[17:39:21.660]                 })
[17:39:21.660]             }))
[17:39:21.660]             future::FutureResult(value = ...future.value$value, 
[17:39:21.660]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.660]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.660]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.660]                     ...future.globalenv.names))
[17:39:21.660]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.660]         }, condition = base::local({
[17:39:21.660]             c <- base::c
[17:39:21.660]             inherits <- base::inherits
[17:39:21.660]             invokeRestart <- base::invokeRestart
[17:39:21.660]             length <- base::length
[17:39:21.660]             list <- base::list
[17:39:21.660]             seq.int <- base::seq.int
[17:39:21.660]             signalCondition <- base::signalCondition
[17:39:21.660]             sys.calls <- base::sys.calls
[17:39:21.660]             `[[` <- base::`[[`
[17:39:21.660]             `+` <- base::`+`
[17:39:21.660]             `<<-` <- base::`<<-`
[17:39:21.660]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.660]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.660]                   3L)]
[17:39:21.660]             }
[17:39:21.660]             function(cond) {
[17:39:21.660]                 is_error <- inherits(cond, "error")
[17:39:21.660]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.660]                   NULL)
[17:39:21.660]                 if (is_error) {
[17:39:21.660]                   sessionInformation <- function() {
[17:39:21.660]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.660]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.660]                       search = base::search(), system = base::Sys.info())
[17:39:21.660]                   }
[17:39:21.660]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.660]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.660]                     cond$call), session = sessionInformation(), 
[17:39:21.660]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.660]                   signalCondition(cond)
[17:39:21.660]                 }
[17:39:21.660]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.660]                 "immediateCondition"))) {
[17:39:21.660]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.660]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.660]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.660]                   if (TRUE && !signal) {
[17:39:21.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.660]                     {
[17:39:21.660]                       inherits <- base::inherits
[17:39:21.660]                       invokeRestart <- base::invokeRestart
[17:39:21.660]                       is.null <- base::is.null
[17:39:21.660]                       muffled <- FALSE
[17:39:21.660]                       if (inherits(cond, "message")) {
[17:39:21.660]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.660]                         if (muffled) 
[17:39:21.660]                           invokeRestart("muffleMessage")
[17:39:21.660]                       }
[17:39:21.660]                       else if (inherits(cond, "warning")) {
[17:39:21.660]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.660]                         if (muffled) 
[17:39:21.660]                           invokeRestart("muffleWarning")
[17:39:21.660]                       }
[17:39:21.660]                       else if (inherits(cond, "condition")) {
[17:39:21.660]                         if (!is.null(pattern)) {
[17:39:21.660]                           computeRestarts <- base::computeRestarts
[17:39:21.660]                           grepl <- base::grepl
[17:39:21.660]                           restarts <- computeRestarts(cond)
[17:39:21.660]                           for (restart in restarts) {
[17:39:21.660]                             name <- restart$name
[17:39:21.660]                             if (is.null(name)) 
[17:39:21.660]                               next
[17:39:21.660]                             if (!grepl(pattern, name)) 
[17:39:21.660]                               next
[17:39:21.660]                             invokeRestart(restart)
[17:39:21.660]                             muffled <- TRUE
[17:39:21.660]                             break
[17:39:21.660]                           }
[17:39:21.660]                         }
[17:39:21.660]                       }
[17:39:21.660]                       invisible(muffled)
[17:39:21.660]                     }
[17:39:21.660]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.660]                   }
[17:39:21.660]                 }
[17:39:21.660]                 else {
[17:39:21.660]                   if (TRUE) {
[17:39:21.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.660]                     {
[17:39:21.660]                       inherits <- base::inherits
[17:39:21.660]                       invokeRestart <- base::invokeRestart
[17:39:21.660]                       is.null <- base::is.null
[17:39:21.660]                       muffled <- FALSE
[17:39:21.660]                       if (inherits(cond, "message")) {
[17:39:21.660]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.660]                         if (muffled) 
[17:39:21.660]                           invokeRestart("muffleMessage")
[17:39:21.660]                       }
[17:39:21.660]                       else if (inherits(cond, "warning")) {
[17:39:21.660]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.660]                         if (muffled) 
[17:39:21.660]                           invokeRestart("muffleWarning")
[17:39:21.660]                       }
[17:39:21.660]                       else if (inherits(cond, "condition")) {
[17:39:21.660]                         if (!is.null(pattern)) {
[17:39:21.660]                           computeRestarts <- base::computeRestarts
[17:39:21.660]                           grepl <- base::grepl
[17:39:21.660]                           restarts <- computeRestarts(cond)
[17:39:21.660]                           for (restart in restarts) {
[17:39:21.660]                             name <- restart$name
[17:39:21.660]                             if (is.null(name)) 
[17:39:21.660]                               next
[17:39:21.660]                             if (!grepl(pattern, name)) 
[17:39:21.660]                               next
[17:39:21.660]                             invokeRestart(restart)
[17:39:21.660]                             muffled <- TRUE
[17:39:21.660]                             break
[17:39:21.660]                           }
[17:39:21.660]                         }
[17:39:21.660]                       }
[17:39:21.660]                       invisible(muffled)
[17:39:21.660]                     }
[17:39:21.660]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.660]                   }
[17:39:21.660]                 }
[17:39:21.660]             }
[17:39:21.660]         }))
[17:39:21.660]     }, error = function(ex) {
[17:39:21.660]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.660]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.660]                 ...future.rng), started = ...future.startTime, 
[17:39:21.660]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.660]             version = "1.8"), class = "FutureResult")
[17:39:21.660]     }, finally = {
[17:39:21.660]         if (!identical(...future.workdir, getwd())) 
[17:39:21.660]             setwd(...future.workdir)
[17:39:21.660]         {
[17:39:21.660]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.660]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.660]             }
[17:39:21.660]             base::options(...future.oldOptions)
[17:39:21.660]             if (.Platform$OS.type == "windows") {
[17:39:21.660]                 old_names <- names(...future.oldEnvVars)
[17:39:21.660]                 envs <- base::Sys.getenv()
[17:39:21.660]                 names <- names(envs)
[17:39:21.660]                 common <- intersect(names, old_names)
[17:39:21.660]                 added <- setdiff(names, old_names)
[17:39:21.660]                 removed <- setdiff(old_names, names)
[17:39:21.660]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.660]                   envs[common]]
[17:39:21.660]                 NAMES <- toupper(changed)
[17:39:21.660]                 args <- list()
[17:39:21.660]                 for (kk in seq_along(NAMES)) {
[17:39:21.660]                   name <- changed[[kk]]
[17:39:21.660]                   NAME <- NAMES[[kk]]
[17:39:21.660]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.660]                     next
[17:39:21.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.660]                 }
[17:39:21.660]                 NAMES <- toupper(added)
[17:39:21.660]                 for (kk in seq_along(NAMES)) {
[17:39:21.660]                   name <- added[[kk]]
[17:39:21.660]                   NAME <- NAMES[[kk]]
[17:39:21.660]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.660]                     next
[17:39:21.660]                   args[[name]] <- ""
[17:39:21.660]                 }
[17:39:21.660]                 NAMES <- toupper(removed)
[17:39:21.660]                 for (kk in seq_along(NAMES)) {
[17:39:21.660]                   name <- removed[[kk]]
[17:39:21.660]                   NAME <- NAMES[[kk]]
[17:39:21.660]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.660]                     next
[17:39:21.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.660]                 }
[17:39:21.660]                 if (length(args) > 0) 
[17:39:21.660]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.660]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.660]             }
[17:39:21.660]             else {
[17:39:21.660]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.660]             }
[17:39:21.660]             {
[17:39:21.660]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.660]                   0L) {
[17:39:21.660]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.660]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.660]                   base::options(opts)
[17:39:21.660]                 }
[17:39:21.660]                 {
[17:39:21.660]                   {
[17:39:21.660]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:21.660]                     NULL
[17:39:21.660]                   }
[17:39:21.660]                   options(future.plan = NULL)
[17:39:21.660]                   if (is.na(NA_character_)) 
[17:39:21.660]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.660]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.660]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.660]                     .init = FALSE)
[17:39:21.660]                 }
[17:39:21.660]             }
[17:39:21.660]         }
[17:39:21.660]     })
[17:39:21.660]     if (TRUE) {
[17:39:21.660]         base::sink(type = "output", split = FALSE)
[17:39:21.660]         if (TRUE) {
[17:39:21.660]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.660]         }
[17:39:21.660]         else {
[17:39:21.660]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.660]         }
[17:39:21.660]         base::close(...future.stdout)
[17:39:21.660]         ...future.stdout <- NULL
[17:39:21.660]     }
[17:39:21.660]     ...future.result$conditions <- ...future.conditions
[17:39:21.660]     ...future.result$finished <- base::Sys.time()
[17:39:21.660]     ...future.result
[17:39:21.660] }
[17:39:21.663] requestCore(): workers = 2
[17:39:21.665] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
[17:39:21.666] plan(): Setting new future strategy stack:
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:39:21.666] List of future strategies:
[17:39:21.666] 1. sequential:
[17:39:21.666]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.666]    - tweaked: FALSE
[17:39:21.666]    - call: NULL
[17:39:21.667] plan(): nbrOfWorkers() = 1
[17:39:21.669] plan(): Setting new future strategy stack:
[17:39:21.670] List of future strategies:
[17:39:21.670] 1. multicore:
[17:39:21.670]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:21.670]    - tweaked: FALSE
[17:39:21.670]    - call: plan(strategy)
[17:39:21.675] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:21.676] result() for MulticoreFuture ...
[17:39:21.681] result() for MulticoreFuture ...
[17:39:21.681] result() for MulticoreFuture ... done
[17:39:21.681] result() for MulticoreFuture ... done
[17:39:21.681] result() for MulticoreFuture ...
[17:39:21.681] result() for MulticoreFuture ... done
[17:39:21.682] getGlobalsAndPackages() ...
[17:39:21.682] Searching for globals...
[17:39:21.682] 
[17:39:21.682] Searching for globals ... DONE
[17:39:21.682] - globals: [0] <none>
[17:39:21.682] getGlobalsAndPackages() ... DONE
[17:39:21.683] run() for ‘Future’ ...
[17:39:21.683] - state: ‘created’
[17:39:21.683] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:21.687] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:21.687] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:21.687]   - Field: ‘label’
[17:39:21.687]   - Field: ‘local’
[17:39:21.688]   - Field: ‘owner’
[17:39:21.688]   - Field: ‘envir’
[17:39:21.688]   - Field: ‘workers’
[17:39:21.688]   - Field: ‘packages’
[17:39:21.688]   - Field: ‘gc’
[17:39:21.688]   - Field: ‘job’
[17:39:21.688]   - Field: ‘conditions’
[17:39:21.688]   - Field: ‘expr’
[17:39:21.689]   - Field: ‘uuid’
[17:39:21.689]   - Field: ‘seed’
[17:39:21.689]   - Field: ‘version’
[17:39:21.689]   - Field: ‘result’
[17:39:21.689]   - Field: ‘asynchronous’
[17:39:21.689]   - Field: ‘calls’
[17:39:21.689]   - Field: ‘globals’
[17:39:21.689]   - Field: ‘stdout’
[17:39:21.689]   - Field: ‘earlySignal’
[17:39:21.690]   - Field: ‘lazy’
[17:39:21.690]   - Field: ‘state’
[17:39:21.690] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:21.690] - Launch lazy future ...
[17:39:21.690] Packages needed by the future expression (n = 0): <none>
[17:39:21.690] Packages needed by future strategies (n = 0): <none>
[17:39:21.691] {
[17:39:21.691]     {
[17:39:21.691]         {
[17:39:21.691]             ...future.startTime <- base::Sys.time()
[17:39:21.691]             {
[17:39:21.691]                 {
[17:39:21.691]                   {
[17:39:21.691]                     {
[17:39:21.691]                       base::local({
[17:39:21.691]                         has_future <- base::requireNamespace("future", 
[17:39:21.691]                           quietly = TRUE)
[17:39:21.691]                         if (has_future) {
[17:39:21.691]                           ns <- base::getNamespace("future")
[17:39:21.691]                           version <- ns[[".package"]][["version"]]
[17:39:21.691]                           if (is.null(version)) 
[17:39:21.691]                             version <- utils::packageVersion("future")
[17:39:21.691]                         }
[17:39:21.691]                         else {
[17:39:21.691]                           version <- NULL
[17:39:21.691]                         }
[17:39:21.691]                         if (!has_future || version < "1.8.0") {
[17:39:21.691]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.691]                             "", base::R.version$version.string), 
[17:39:21.691]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:21.691]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.691]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.691]                               "release", "version")], collapse = " "), 
[17:39:21.691]                             hostname = base::Sys.info()[["nodename"]])
[17:39:21.691]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.691]                             info)
[17:39:21.691]                           info <- base::paste(info, collapse = "; ")
[17:39:21.691]                           if (!has_future) {
[17:39:21.691]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.691]                               info)
[17:39:21.691]                           }
[17:39:21.691]                           else {
[17:39:21.691]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.691]                               info, version)
[17:39:21.691]                           }
[17:39:21.691]                           base::stop(msg)
[17:39:21.691]                         }
[17:39:21.691]                       })
[17:39:21.691]                     }
[17:39:21.691]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:21.691]                     base::options(mc.cores = 1L)
[17:39:21.691]                   }
[17:39:21.691]                   ...future.strategy.old <- future::plan("list")
[17:39:21.691]                   options(future.plan = NULL)
[17:39:21.691]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.691]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.691]                 }
[17:39:21.691]                 ...future.workdir <- getwd()
[17:39:21.691]             }
[17:39:21.691]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.691]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.691]         }
[17:39:21.691]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.691]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.691]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.691]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.691]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.691]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.691]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.691]             base::names(...future.oldOptions))
[17:39:21.691]     }
[17:39:21.691]     if (FALSE) {
[17:39:21.691]     }
[17:39:21.691]     else {
[17:39:21.691]         if (TRUE) {
[17:39:21.691]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.691]                 open = "w")
[17:39:21.691]         }
[17:39:21.691]         else {
[17:39:21.691]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.691]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.691]         }
[17:39:21.691]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.691]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.691]             base::sink(type = "output", split = FALSE)
[17:39:21.691]             base::close(...future.stdout)
[17:39:21.691]         }, add = TRUE)
[17:39:21.691]     }
[17:39:21.691]     ...future.frame <- base::sys.nframe()
[17:39:21.691]     ...future.conditions <- base::list()
[17:39:21.691]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.691]     if (FALSE) {
[17:39:21.691]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.691]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.691]     }
[17:39:21.691]     ...future.result <- base::tryCatch({
[17:39:21.691]         base::withCallingHandlers({
[17:39:21.691]             ...future.value <- base::withVisible(base::local({
[17:39:21.691]                 withCallingHandlers({
[17:39:21.691]                   42
[17:39:21.691]                 }, immediateCondition = function(cond) {
[17:39:21.691]                   save_rds <- function (object, pathname, ...) 
[17:39:21.691]                   {
[17:39:21.691]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:21.691]                     if (file_test("-f", pathname_tmp)) {
[17:39:21.691]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.691]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:21.691]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.691]                         fi_tmp[["mtime"]])
[17:39:21.691]                     }
[17:39:21.691]                     tryCatch({
[17:39:21.691]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:21.691]                     }, error = function(ex) {
[17:39:21.691]                       msg <- conditionMessage(ex)
[17:39:21.691]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.691]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:21.691]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.691]                         fi_tmp[["mtime"]], msg)
[17:39:21.691]                       ex$message <- msg
[17:39:21.691]                       stop(ex)
[17:39:21.691]                     })
[17:39:21.691]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:21.691]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:21.691]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:21.691]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.691]                       fi <- file.info(pathname)
[17:39:21.691]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:21.691]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.691]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:21.691]                         fi[["size"]], fi[["mtime"]])
[17:39:21.691]                       stop(msg)
[17:39:21.691]                     }
[17:39:21.691]                     invisible(pathname)
[17:39:21.691]                   }
[17:39:21.691]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:21.691]                     rootPath = tempdir()) 
[17:39:21.691]                   {
[17:39:21.691]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:21.691]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:21.691]                       tmpdir = path, fileext = ".rds")
[17:39:21.691]                     save_rds(obj, file)
[17:39:21.691]                   }
[17:39:21.691]                   saveImmediateCondition(cond, path = "/tmp/RtmpwpZk8w/.future/immediateConditions")
[17:39:21.691]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.691]                   {
[17:39:21.691]                     inherits <- base::inherits
[17:39:21.691]                     invokeRestart <- base::invokeRestart
[17:39:21.691]                     is.null <- base::is.null
[17:39:21.691]                     muffled <- FALSE
[17:39:21.691]                     if (inherits(cond, "message")) {
[17:39:21.691]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:21.691]                       if (muffled) 
[17:39:21.691]                         invokeRestart("muffleMessage")
[17:39:21.691]                     }
[17:39:21.691]                     else if (inherits(cond, "warning")) {
[17:39:21.691]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:21.691]                       if (muffled) 
[17:39:21.691]                         invokeRestart("muffleWarning")
[17:39:21.691]                     }
[17:39:21.691]                     else if (inherits(cond, "condition")) {
[17:39:21.691]                       if (!is.null(pattern)) {
[17:39:21.691]                         computeRestarts <- base::computeRestarts
[17:39:21.691]                         grepl <- base::grepl
[17:39:21.691]                         restarts <- computeRestarts(cond)
[17:39:21.691]                         for (restart in restarts) {
[17:39:21.691]                           name <- restart$name
[17:39:21.691]                           if (is.null(name)) 
[17:39:21.691]                             next
[17:39:21.691]                           if (!grepl(pattern, name)) 
[17:39:21.691]                             next
[17:39:21.691]                           invokeRestart(restart)
[17:39:21.691]                           muffled <- TRUE
[17:39:21.691]                           break
[17:39:21.691]                         }
[17:39:21.691]                       }
[17:39:21.691]                     }
[17:39:21.691]                     invisible(muffled)
[17:39:21.691]                   }
[17:39:21.691]                   muffleCondition(cond)
[17:39:21.691]                 })
[17:39:21.691]             }))
[17:39:21.691]             future::FutureResult(value = ...future.value$value, 
[17:39:21.691]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.691]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.691]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.691]                     ...future.globalenv.names))
[17:39:21.691]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.691]         }, condition = base::local({
[17:39:21.691]             c <- base::c
[17:39:21.691]             inherits <- base::inherits
[17:39:21.691]             invokeRestart <- base::invokeRestart
[17:39:21.691]             length <- base::length
[17:39:21.691]             list <- base::list
[17:39:21.691]             seq.int <- base::seq.int
[17:39:21.691]             signalCondition <- base::signalCondition
[17:39:21.691]             sys.calls <- base::sys.calls
[17:39:21.691]             `[[` <- base::`[[`
[17:39:21.691]             `+` <- base::`+`
[17:39:21.691]             `<<-` <- base::`<<-`
[17:39:21.691]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.691]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.691]                   3L)]
[17:39:21.691]             }
[17:39:21.691]             function(cond) {
[17:39:21.691]                 is_error <- inherits(cond, "error")
[17:39:21.691]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.691]                   NULL)
[17:39:21.691]                 if (is_error) {
[17:39:21.691]                   sessionInformation <- function() {
[17:39:21.691]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.691]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.691]                       search = base::search(), system = base::Sys.info())
[17:39:21.691]                   }
[17:39:21.691]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.691]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.691]                     cond$call), session = sessionInformation(), 
[17:39:21.691]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.691]                   signalCondition(cond)
[17:39:21.691]                 }
[17:39:21.691]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.691]                 "immediateCondition"))) {
[17:39:21.691]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.691]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.691]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.691]                   if (TRUE && !signal) {
[17:39:21.691]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.691]                     {
[17:39:21.691]                       inherits <- base::inherits
[17:39:21.691]                       invokeRestart <- base::invokeRestart
[17:39:21.691]                       is.null <- base::is.null
[17:39:21.691]                       muffled <- FALSE
[17:39:21.691]                       if (inherits(cond, "message")) {
[17:39:21.691]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.691]                         if (muffled) 
[17:39:21.691]                           invokeRestart("muffleMessage")
[17:39:21.691]                       }
[17:39:21.691]                       else if (inherits(cond, "warning")) {
[17:39:21.691]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.691]                         if (muffled) 
[17:39:21.691]                           invokeRestart("muffleWarning")
[17:39:21.691]                       }
[17:39:21.691]                       else if (inherits(cond, "condition")) {
[17:39:21.691]                         if (!is.null(pattern)) {
[17:39:21.691]                           computeRestarts <- base::computeRestarts
[17:39:21.691]                           grepl <- base::grepl
[17:39:21.691]                           restarts <- computeRestarts(cond)
[17:39:21.691]                           for (restart in restarts) {
[17:39:21.691]                             name <- restart$name
[17:39:21.691]                             if (is.null(name)) 
[17:39:21.691]                               next
[17:39:21.691]                             if (!grepl(pattern, name)) 
[17:39:21.691]                               next
[17:39:21.691]                             invokeRestart(restart)
[17:39:21.691]                             muffled <- TRUE
[17:39:21.691]                             break
[17:39:21.691]                           }
[17:39:21.691]                         }
[17:39:21.691]                       }
[17:39:21.691]                       invisible(muffled)
[17:39:21.691]                     }
[17:39:21.691]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.691]                   }
[17:39:21.691]                 }
[17:39:21.691]                 else {
[17:39:21.691]                   if (TRUE) {
[17:39:21.691]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.691]                     {
[17:39:21.691]                       inherits <- base::inherits
[17:39:21.691]                       invokeRestart <- base::invokeRestart
[17:39:21.691]                       is.null <- base::is.null
[17:39:21.691]                       muffled <- FALSE
[17:39:21.691]                       if (inherits(cond, "message")) {
[17:39:21.691]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.691]                         if (muffled) 
[17:39:21.691]                           invokeRestart("muffleMessage")
[17:39:21.691]                       }
[17:39:21.691]                       else if (inherits(cond, "warning")) {
[17:39:21.691]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.691]                         if (muffled) 
[17:39:21.691]                           invokeRestart("muffleWarning")
[17:39:21.691]                       }
[17:39:21.691]                       else if (inherits(cond, "condition")) {
[17:39:21.691]                         if (!is.null(pattern)) {
[17:39:21.691]                           computeRestarts <- base::computeRestarts
[17:39:21.691]                           grepl <- base::grepl
[17:39:21.691]                           restarts <- computeRestarts(cond)
[17:39:21.691]                           for (restart in restarts) {
[17:39:21.691]                             name <- restart$name
[17:39:21.691]                             if (is.null(name)) 
[17:39:21.691]                               next
[17:39:21.691]                             if (!grepl(pattern, name)) 
[17:39:21.691]                               next
[17:39:21.691]                             invokeRestart(restart)
[17:39:21.691]                             muffled <- TRUE
[17:39:21.691]                             break
[17:39:21.691]                           }
[17:39:21.691]                         }
[17:39:21.691]                       }
[17:39:21.691]                       invisible(muffled)
[17:39:21.691]                     }
[17:39:21.691]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.691]                   }
[17:39:21.691]                 }
[17:39:21.691]             }
[17:39:21.691]         }))
[17:39:21.691]     }, error = function(ex) {
[17:39:21.691]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.691]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.691]                 ...future.rng), started = ...future.startTime, 
[17:39:21.691]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.691]             version = "1.8"), class = "FutureResult")
[17:39:21.691]     }, finally = {
[17:39:21.691]         if (!identical(...future.workdir, getwd())) 
[17:39:21.691]             setwd(...future.workdir)
[17:39:21.691]         {
[17:39:21.691]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.691]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.691]             }
[17:39:21.691]             base::options(...future.oldOptions)
[17:39:21.691]             if (.Platform$OS.type == "windows") {
[17:39:21.691]                 old_names <- names(...future.oldEnvVars)
[17:39:21.691]                 envs <- base::Sys.getenv()
[17:39:21.691]                 names <- names(envs)
[17:39:21.691]                 common <- intersect(names, old_names)
[17:39:21.691]                 added <- setdiff(names, old_names)
[17:39:21.691]                 removed <- setdiff(old_names, names)
[17:39:21.691]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.691]                   envs[common]]
[17:39:21.691]                 NAMES <- toupper(changed)
[17:39:21.691]                 args <- list()
[17:39:21.691]                 for (kk in seq_along(NAMES)) {
[17:39:21.691]                   name <- changed[[kk]]
[17:39:21.691]                   NAME <- NAMES[[kk]]
[17:39:21.691]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.691]                     next
[17:39:21.691]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.691]                 }
[17:39:21.691]                 NAMES <- toupper(added)
[17:39:21.691]                 for (kk in seq_along(NAMES)) {
[17:39:21.691]                   name <- added[[kk]]
[17:39:21.691]                   NAME <- NAMES[[kk]]
[17:39:21.691]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.691]                     next
[17:39:21.691]                   args[[name]] <- ""
[17:39:21.691]                 }
[17:39:21.691]                 NAMES <- toupper(removed)
[17:39:21.691]                 for (kk in seq_along(NAMES)) {
[17:39:21.691]                   name <- removed[[kk]]
[17:39:21.691]                   NAME <- NAMES[[kk]]
[17:39:21.691]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.691]                     next
[17:39:21.691]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.691]                 }
[17:39:21.691]                 if (length(args) > 0) 
[17:39:21.691]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.691]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.691]             }
[17:39:21.691]             else {
[17:39:21.691]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.691]             }
[17:39:21.691]             {
[17:39:21.691]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.691]                   0L) {
[17:39:21.691]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.691]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.691]                   base::options(opts)
[17:39:21.691]                 }
[17:39:21.691]                 {
[17:39:21.691]                   {
[17:39:21.691]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:21.691]                     NULL
[17:39:21.691]                   }
[17:39:21.691]                   options(future.plan = NULL)
[17:39:21.691]                   if (is.na(NA_character_)) 
[17:39:21.691]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.691]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.691]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.691]                     .init = FALSE)
[17:39:21.691]                 }
[17:39:21.691]             }
[17:39:21.691]         }
[17:39:21.691]     })
[17:39:21.691]     if (TRUE) {
[17:39:21.691]         base::sink(type = "output", split = FALSE)
[17:39:21.691]         if (TRUE) {
[17:39:21.691]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.691]         }
[17:39:21.691]         else {
[17:39:21.691]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.691]         }
[17:39:21.691]         base::close(...future.stdout)
[17:39:21.691]         ...future.stdout <- NULL
[17:39:21.691]     }
[17:39:21.691]     ...future.result$conditions <- ...future.conditions
[17:39:21.691]     ...future.result$finished <- base::Sys.time()
[17:39:21.691]     ...future.result
[17:39:21.691] }
[17:39:21.693] requestCore(): workers = 2
[17:39:21.695] MulticoreFuture started
[17:39:21.696] - Launch lazy future ... done
[17:39:21.696] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:39:21.696] plan(): Setting new future strategy stack:
[17:39:21.697] List of future strategies:
[17:39:21.697] 1. sequential:
[17:39:21.697]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.697]    - tweaked: FALSE
[17:39:21.697]    - call: NULL
[17:39:21.698] plan(): nbrOfWorkers() = 1
[17:39:21.699] plan(): Setting new future strategy stack:
[17:39:21.700] List of future strategies:
[17:39:21.700] 1. multicore:
[17:39:21.700]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:21.700]    - tweaked: FALSE
[17:39:21.700]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:21.707] result() for MulticoreFuture ...
[17:39:21.711] plan(): nbrOfWorkers() = 2
[17:39:21.712] result() for MulticoreFuture ...
[17:39:21.712] result() for MulticoreFuture ... done
[17:39:21.712] result() for MulticoreFuture ... done
[17:39:21.712] result() for MulticoreFuture ...
[17:39:21.712] result() for MulticoreFuture ... done
[17:39:21.713] getGlobalsAndPackages() ...
[17:39:21.713] Searching for globals...
[17:39:21.714] - globals found: [1] ‘{’
[17:39:21.717] Searching for globals ... DONE
[17:39:21.717] Resolving globals: FALSE
[17:39:21.718] 
[17:39:21.718] 
[17:39:21.718] getGlobalsAndPackages() ... DONE
[17:39:21.718] run() for ‘Future’ ...
[17:39:21.718] - state: ‘created’
[17:39:21.719] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:21.723] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:21.723] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:21.723]   - Field: ‘label’
[17:39:21.724]   - Field: ‘local’
[17:39:21.724]   - Field: ‘owner’
[17:39:21.724]   - Field: ‘envir’
[17:39:21.724]   - Field: ‘workers’
[17:39:21.724]   - Field: ‘packages’
[17:39:21.724]   - Field: ‘gc’
[17:39:21.724]   - Field: ‘job’
[17:39:21.725]   - Field: ‘conditions’
[17:39:21.725]   - Field: ‘expr’
[17:39:21.725]   - Field: ‘uuid’
[17:39:21.725]   - Field: ‘seed’
[17:39:21.725]   - Field: ‘version’
[17:39:21.725]   - Field: ‘result’
[17:39:21.725]   - Field: ‘asynchronous’
[17:39:21.725]   - Field: ‘calls’
[17:39:21.726]   - Field: ‘globals’
[17:39:21.726]   - Field: ‘stdout’
[17:39:21.726]   - Field: ‘earlySignal’
[17:39:21.726]   - Field: ‘lazy’
[17:39:21.726]   - Field: ‘state’
[17:39:21.726] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:21.726] - Launch lazy future ...
[17:39:21.727] Packages needed by the future expression (n = 0): <none>
[17:39:21.727] Packages needed by future strategies (n = 0): <none>
[17:39:21.727] {
[17:39:21.727]     {
[17:39:21.727]         {
[17:39:21.727]             ...future.startTime <- base::Sys.time()
[17:39:21.727]             {
[17:39:21.727]                 {
[17:39:21.727]                   {
[17:39:21.727]                     {
[17:39:21.727]                       base::local({
[17:39:21.727]                         has_future <- base::requireNamespace("future", 
[17:39:21.727]                           quietly = TRUE)
[17:39:21.727]                         if (has_future) {
[17:39:21.727]                           ns <- base::getNamespace("future")
[17:39:21.727]                           version <- ns[[".package"]][["version"]]
[17:39:21.727]                           if (is.null(version)) 
[17:39:21.727]                             version <- utils::packageVersion("future")
[17:39:21.727]                         }
[17:39:21.727]                         else {
[17:39:21.727]                           version <- NULL
[17:39:21.727]                         }
[17:39:21.727]                         if (!has_future || version < "1.8.0") {
[17:39:21.727]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.727]                             "", base::R.version$version.string), 
[17:39:21.727]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:21.727]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.727]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.727]                               "release", "version")], collapse = " "), 
[17:39:21.727]                             hostname = base::Sys.info()[["nodename"]])
[17:39:21.727]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.727]                             info)
[17:39:21.727]                           info <- base::paste(info, collapse = "; ")
[17:39:21.727]                           if (!has_future) {
[17:39:21.727]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.727]                               info)
[17:39:21.727]                           }
[17:39:21.727]                           else {
[17:39:21.727]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.727]                               info, version)
[17:39:21.727]                           }
[17:39:21.727]                           base::stop(msg)
[17:39:21.727]                         }
[17:39:21.727]                       })
[17:39:21.727]                     }
[17:39:21.727]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:21.727]                     base::options(mc.cores = 1L)
[17:39:21.727]                   }
[17:39:21.727]                   ...future.strategy.old <- future::plan("list")
[17:39:21.727]                   options(future.plan = NULL)
[17:39:21.727]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.727]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.727]                 }
[17:39:21.727]                 ...future.workdir <- getwd()
[17:39:21.727]             }
[17:39:21.727]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.727]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.727]         }
[17:39:21.727]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.727]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.727]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.727]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.727]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.727]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.727]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.727]             base::names(...future.oldOptions))
[17:39:21.727]     }
[17:39:21.727]     if (FALSE) {
[17:39:21.727]     }
[17:39:21.727]     else {
[17:39:21.727]         if (TRUE) {
[17:39:21.727]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.727]                 open = "w")
[17:39:21.727]         }
[17:39:21.727]         else {
[17:39:21.727]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.727]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.727]         }
[17:39:21.727]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.727]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.727]             base::sink(type = "output", split = FALSE)
[17:39:21.727]             base::close(...future.stdout)
[17:39:21.727]         }, add = TRUE)
[17:39:21.727]     }
[17:39:21.727]     ...future.frame <- base::sys.nframe()
[17:39:21.727]     ...future.conditions <- base::list()
[17:39:21.727]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.727]     if (FALSE) {
[17:39:21.727]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.727]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.727]     }
[17:39:21.727]     ...future.result <- base::tryCatch({
[17:39:21.727]         base::withCallingHandlers({
[17:39:21.727]             ...future.value <- base::withVisible(base::local({
[17:39:21.727]                 withCallingHandlers({
[17:39:21.727]                   {
[17:39:21.727]                     42
[17:39:21.727]                   }
[17:39:21.727]                 }, immediateCondition = function(cond) {
[17:39:21.727]                   save_rds <- function (object, pathname, ...) 
[17:39:21.727]                   {
[17:39:21.727]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:21.727]                     if (file_test("-f", pathname_tmp)) {
[17:39:21.727]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.727]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:21.727]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.727]                         fi_tmp[["mtime"]])
[17:39:21.727]                     }
[17:39:21.727]                     tryCatch({
[17:39:21.727]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:21.727]                     }, error = function(ex) {
[17:39:21.727]                       msg <- conditionMessage(ex)
[17:39:21.727]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.727]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:21.727]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.727]                         fi_tmp[["mtime"]], msg)
[17:39:21.727]                       ex$message <- msg
[17:39:21.727]                       stop(ex)
[17:39:21.727]                     })
[17:39:21.727]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:21.727]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:21.727]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:21.727]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.727]                       fi <- file.info(pathname)
[17:39:21.727]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:21.727]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.727]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:21.727]                         fi[["size"]], fi[["mtime"]])
[17:39:21.727]                       stop(msg)
[17:39:21.727]                     }
[17:39:21.727]                     invisible(pathname)
[17:39:21.727]                   }
[17:39:21.727]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:21.727]                     rootPath = tempdir()) 
[17:39:21.727]                   {
[17:39:21.727]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:21.727]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:21.727]                       tmpdir = path, fileext = ".rds")
[17:39:21.727]                     save_rds(obj, file)
[17:39:21.727]                   }
[17:39:21.727]                   saveImmediateCondition(cond, path = "/tmp/RtmpwpZk8w/.future/immediateConditions")
[17:39:21.727]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.727]                   {
[17:39:21.727]                     inherits <- base::inherits
[17:39:21.727]                     invokeRestart <- base::invokeRestart
[17:39:21.727]                     is.null <- base::is.null
[17:39:21.727]                     muffled <- FALSE
[17:39:21.727]                     if (inherits(cond, "message")) {
[17:39:21.727]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:21.727]                       if (muffled) 
[17:39:21.727]                         invokeRestart("muffleMessage")
[17:39:21.727]                     }
[17:39:21.727]                     else if (inherits(cond, "warning")) {
[17:39:21.727]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:21.727]                       if (muffled) 
[17:39:21.727]                         invokeRestart("muffleWarning")
[17:39:21.727]                     }
[17:39:21.727]                     else if (inherits(cond, "condition")) {
[17:39:21.727]                       if (!is.null(pattern)) {
[17:39:21.727]                         computeRestarts <- base::computeRestarts
[17:39:21.727]                         grepl <- base::grepl
[17:39:21.727]                         restarts <- computeRestarts(cond)
[17:39:21.727]                         for (restart in restarts) {
[17:39:21.727]                           name <- restart$name
[17:39:21.727]                           if (is.null(name)) 
[17:39:21.727]                             next
[17:39:21.727]                           if (!grepl(pattern, name)) 
[17:39:21.727]                             next
[17:39:21.727]                           invokeRestart(restart)
[17:39:21.727]                           muffled <- TRUE
[17:39:21.727]                           break
[17:39:21.727]                         }
[17:39:21.727]                       }
[17:39:21.727]                     }
[17:39:21.727]                     invisible(muffled)
[17:39:21.727]                   }
[17:39:21.727]                   muffleCondition(cond)
[17:39:21.727]                 })
[17:39:21.727]             }))
[17:39:21.727]             future::FutureResult(value = ...future.value$value, 
[17:39:21.727]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.727]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.727]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.727]                     ...future.globalenv.names))
[17:39:21.727]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.727]         }, condition = base::local({
[17:39:21.727]             c <- base::c
[17:39:21.727]             inherits <- base::inherits
[17:39:21.727]             invokeRestart <- base::invokeRestart
[17:39:21.727]             length <- base::length
[17:39:21.727]             list <- base::list
[17:39:21.727]             seq.int <- base::seq.int
[17:39:21.727]             signalCondition <- base::signalCondition
[17:39:21.727]             sys.calls <- base::sys.calls
[17:39:21.727]             `[[` <- base::`[[`
[17:39:21.727]             `+` <- base::`+`
[17:39:21.727]             `<<-` <- base::`<<-`
[17:39:21.727]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.727]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.727]                   3L)]
[17:39:21.727]             }
[17:39:21.727]             function(cond) {
[17:39:21.727]                 is_error <- inherits(cond, "error")
[17:39:21.727]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.727]                   NULL)
[17:39:21.727]                 if (is_error) {
[17:39:21.727]                   sessionInformation <- function() {
[17:39:21.727]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.727]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.727]                       search = base::search(), system = base::Sys.info())
[17:39:21.727]                   }
[17:39:21.727]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.727]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.727]                     cond$call), session = sessionInformation(), 
[17:39:21.727]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.727]                   signalCondition(cond)
[17:39:21.727]                 }
[17:39:21.727]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.727]                 "immediateCondition"))) {
[17:39:21.727]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.727]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.727]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.727]                   if (TRUE && !signal) {
[17:39:21.727]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.727]                     {
[17:39:21.727]                       inherits <- base::inherits
[17:39:21.727]                       invokeRestart <- base::invokeRestart
[17:39:21.727]                       is.null <- base::is.null
[17:39:21.727]                       muffled <- FALSE
[17:39:21.727]                       if (inherits(cond, "message")) {
[17:39:21.727]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.727]                         if (muffled) 
[17:39:21.727]                           invokeRestart("muffleMessage")
[17:39:21.727]                       }
[17:39:21.727]                       else if (inherits(cond, "warning")) {
[17:39:21.727]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.727]                         if (muffled) 
[17:39:21.727]                           invokeRestart("muffleWarning")
[17:39:21.727]                       }
[17:39:21.727]                       else if (inherits(cond, "condition")) {
[17:39:21.727]                         if (!is.null(pattern)) {
[17:39:21.727]                           computeRestarts <- base::computeRestarts
[17:39:21.727]                           grepl <- base::grepl
[17:39:21.727]                           restarts <- computeRestarts(cond)
[17:39:21.727]                           for (restart in restarts) {
[17:39:21.727]                             name <- restart$name
[17:39:21.727]                             if (is.null(name)) 
[17:39:21.727]                               next
[17:39:21.727]                             if (!grepl(pattern, name)) 
[17:39:21.727]                               next
[17:39:21.727]                             invokeRestart(restart)
[17:39:21.727]                             muffled <- TRUE
[17:39:21.727]                             break
[17:39:21.727]                           }
[17:39:21.727]                         }
[17:39:21.727]                       }
[17:39:21.727]                       invisible(muffled)
[17:39:21.727]                     }
[17:39:21.727]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.727]                   }
[17:39:21.727]                 }
[17:39:21.727]                 else {
[17:39:21.727]                   if (TRUE) {
[17:39:21.727]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.727]                     {
[17:39:21.727]                       inherits <- base::inherits
[17:39:21.727]                       invokeRestart <- base::invokeRestart
[17:39:21.727]                       is.null <- base::is.null
[17:39:21.727]                       muffled <- FALSE
[17:39:21.727]                       if (inherits(cond, "message")) {
[17:39:21.727]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.727]                         if (muffled) 
[17:39:21.727]                           invokeRestart("muffleMessage")
[17:39:21.727]                       }
[17:39:21.727]                       else if (inherits(cond, "warning")) {
[17:39:21.727]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.727]                         if (muffled) 
[17:39:21.727]                           invokeRestart("muffleWarning")
[17:39:21.727]                       }
[17:39:21.727]                       else if (inherits(cond, "condition")) {
[17:39:21.727]                         if (!is.null(pattern)) {
[17:39:21.727]                           computeRestarts <- base::computeRestarts
[17:39:21.727]                           grepl <- base::grepl
[17:39:21.727]                           restarts <- computeRestarts(cond)
[17:39:21.727]                           for (restart in restarts) {
[17:39:21.727]                             name <- restart$name
[17:39:21.727]                             if (is.null(name)) 
[17:39:21.727]                               next
[17:39:21.727]                             if (!grepl(pattern, name)) 
[17:39:21.727]                               next
[17:39:21.727]                             invokeRestart(restart)
[17:39:21.727]                             muffled <- TRUE
[17:39:21.727]                             break
[17:39:21.727]                           }
[17:39:21.727]                         }
[17:39:21.727]                       }
[17:39:21.727]                       invisible(muffled)
[17:39:21.727]                     }
[17:39:21.727]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.727]                   }
[17:39:21.727]                 }
[17:39:21.727]             }
[17:39:21.727]         }))
[17:39:21.727]     }, error = function(ex) {
[17:39:21.727]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.727]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.727]                 ...future.rng), started = ...future.startTime, 
[17:39:21.727]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.727]             version = "1.8"), class = "FutureResult")
[17:39:21.727]     }, finally = {
[17:39:21.727]         if (!identical(...future.workdir, getwd())) 
[17:39:21.727]             setwd(...future.workdir)
[17:39:21.727]         {
[17:39:21.727]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.727]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.727]             }
[17:39:21.727]             base::options(...future.oldOptions)
[17:39:21.727]             if (.Platform$OS.type == "windows") {
[17:39:21.727]                 old_names <- names(...future.oldEnvVars)
[17:39:21.727]                 envs <- base::Sys.getenv()
[17:39:21.727]                 names <- names(envs)
[17:39:21.727]                 common <- intersect(names, old_names)
[17:39:21.727]                 added <- setdiff(names, old_names)
[17:39:21.727]                 removed <- setdiff(old_names, names)
[17:39:21.727]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.727]                   envs[common]]
[17:39:21.727]                 NAMES <- toupper(changed)
[17:39:21.727]                 args <- list()
[17:39:21.727]                 for (kk in seq_along(NAMES)) {
[17:39:21.727]                   name <- changed[[kk]]
[17:39:21.727]                   NAME <- NAMES[[kk]]
[17:39:21.727]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.727]                     next
[17:39:21.727]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.727]                 }
[17:39:21.727]                 NAMES <- toupper(added)
[17:39:21.727]                 for (kk in seq_along(NAMES)) {
[17:39:21.727]                   name <- added[[kk]]
[17:39:21.727]                   NAME <- NAMES[[kk]]
[17:39:21.727]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.727]                     next
[17:39:21.727]                   args[[name]] <- ""
[17:39:21.727]                 }
[17:39:21.727]                 NAMES <- toupper(removed)
[17:39:21.727]                 for (kk in seq_along(NAMES)) {
[17:39:21.727]                   name <- removed[[kk]]
[17:39:21.727]                   NAME <- NAMES[[kk]]
[17:39:21.727]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.727]                     next
[17:39:21.727]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.727]                 }
[17:39:21.727]                 if (length(args) > 0) 
[17:39:21.727]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.727]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.727]             }
[17:39:21.727]             else {
[17:39:21.727]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.727]             }
[17:39:21.727]             {
[17:39:21.727]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.727]                   0L) {
[17:39:21.727]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.727]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.727]                   base::options(opts)
[17:39:21.727]                 }
[17:39:21.727]                 {
[17:39:21.727]                   {
[17:39:21.727]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:21.727]                     NULL
[17:39:21.727]                   }
[17:39:21.727]                   options(future.plan = NULL)
[17:39:21.727]                   if (is.na(NA_character_)) 
[17:39:21.727]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.727]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.727]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.727]                     .init = FALSE)
[17:39:21.727]                 }
[17:39:21.727]             }
[17:39:21.727]         }
[17:39:21.727]     })
[17:39:21.727]     if (TRUE) {
[17:39:21.727]         base::sink(type = "output", split = FALSE)
[17:39:21.727]         if (TRUE) {
[17:39:21.727]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.727]         }
[17:39:21.727]         else {
[17:39:21.727]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.727]         }
[17:39:21.727]         base::close(...future.stdout)
[17:39:21.727]         ...future.stdout <- NULL
[17:39:21.727]     }
[17:39:21.727]     ...future.result$conditions <- ...future.conditions
[17:39:21.727]     ...future.result$finished <- base::Sys.time()
[17:39:21.727]     ...future.result
[17:39:21.727] }
[17:39:21.730] requestCore(): workers = 2
[17:39:21.732] MulticoreFuture started
[17:39:21.732] - Launch lazy future ... done
[17:39:21.732] run() for ‘MulticoreFuture’ ... done
[17:39:21.733] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:39:21.733] List of future strategies:
[17:39:21.733] 1. sequential:
[17:39:21.733]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.733]    - tweaked: FALSE
[17:39:21.733]    - call: NULL
[17:39:21.734] plan(): nbrOfWorkers() = 1
[17:39:21.736] plan(): Setting new future strategy stack:
[17:39:21.736] List of future strategies:
[17:39:21.736] 1. multicore:
[17:39:21.736]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:21.736]    - tweaked: FALSE
[17:39:21.736]    - call: plan(strategy)
[17:39:21.742] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:21.742] result() for MulticoreFuture ...
[17:39:21.743] result() for MulticoreFuture ...
[17:39:21.744] result() for MulticoreFuture ... done
[17:39:21.744] result() for MulticoreFuture ... done
[17:39:21.744] result() for MulticoreFuture ...
[17:39:21.744] result() for MulticoreFuture ... done
[17:39:21.748] getGlobalsAndPackages() ...
[17:39:21.748] 
[17:39:21.748] - globals: [0] <none>
[17:39:21.748] getGlobalsAndPackages() ... DONE
[17:39:21.749] Packages needed by the future expression (n = 0): <none>
[17:39:21.749] Packages needed by future strategies (n = 0): <none>
[17:39:21.750] {
[17:39:21.750]     {
[17:39:21.750]         {
[17:39:21.750]             ...future.startTime <- base::Sys.time()
[17:39:21.750]             {
[17:39:21.750]                 {
[17:39:21.750]                   {
[17:39:21.750]                     {
[17:39:21.750]                       base::local({
[17:39:21.750]                         has_future <- base::requireNamespace("future", 
[17:39:21.750]                           quietly = TRUE)
[17:39:21.750]                         if (has_future) {
[17:39:21.750]                           ns <- base::getNamespace("future")
[17:39:21.750]                           version <- ns[[".package"]][["version"]]
[17:39:21.750]                           if (is.null(version)) 
[17:39:21.750]                             version <- utils::packageVersion("future")
[17:39:21.750]                         }
[17:39:21.750]                         else {
[17:39:21.750]                           version <- NULL
[17:39:21.750]                         }
[17:39:21.750]                         if (!has_future || version < "1.8.0") {
[17:39:21.750]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.750]                             "", base::R.version$version.string), 
[17:39:21.750]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:21.750]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.750]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.750]                               "release", "version")], collapse = " "), 
[17:39:21.750]                             hostname = base::Sys.info()[["nodename"]])
[17:39:21.750]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.750]                             info)
[17:39:21.750]                           info <- base::paste(info, collapse = "; ")
[17:39:21.750]                           if (!has_future) {
[17:39:21.750]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.750]                               info)
[17:39:21.750]                           }
[17:39:21.750]                           else {
[17:39:21.750]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.750]                               info, version)
[17:39:21.750]                           }
[17:39:21.750]                           base::stop(msg)
[17:39:21.750]                         }
[17:39:21.750]                       })
[17:39:21.750]                     }
[17:39:21.750]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:21.750]                     base::options(mc.cores = 1L)
[17:39:21.750]                   }
[17:39:21.750]                   ...future.strategy.old <- future::plan("list")
[17:39:21.750]                   options(future.plan = NULL)
[17:39:21.750]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.750]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.750]                 }
[17:39:21.750]                 ...future.workdir <- getwd()
[17:39:21.750]             }
[17:39:21.750]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.750]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.750]         }
[17:39:21.750]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.750]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.750]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.750]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.750]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.750]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.750]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.750]             base::names(...future.oldOptions))
[17:39:21.750]     }
[17:39:21.750]     if (FALSE) {
[17:39:21.750]     }
[17:39:21.750]     else {
[17:39:21.750]         if (TRUE) {
[17:39:21.750]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.750]                 open = "w")
[17:39:21.750]         }
[17:39:21.750]         else {
[17:39:21.750]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.750]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.750]         }
[17:39:21.750]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.750]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.750]             base::sink(type = "output", split = FALSE)
[17:39:21.750]             base::close(...future.stdout)
[17:39:21.750]         }, add = TRUE)
[17:39:21.750]     }
[17:39:21.750]     ...future.frame <- base::sys.nframe()
[17:39:21.750]     ...future.conditions <- base::list()
[17:39:21.750]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.750]     if (FALSE) {
[17:39:21.750]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.750]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.750]     }
[17:39:21.750]     ...future.result <- base::tryCatch({
[17:39:21.750]         base::withCallingHandlers({
[17:39:21.750]             ...future.value <- base::withVisible(base::local({
[17:39:21.750]                 withCallingHandlers({
[17:39:21.750]                   42
[17:39:21.750]                 }, immediateCondition = function(cond) {
[17:39:21.750]                   save_rds <- function (object, pathname, ...) 
[17:39:21.750]                   {
[17:39:21.750]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:21.750]                     if (file_test("-f", pathname_tmp)) {
[17:39:21.750]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.750]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:21.750]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.750]                         fi_tmp[["mtime"]])
[17:39:21.750]                     }
[17:39:21.750]                     tryCatch({
[17:39:21.750]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:21.750]                     }, error = function(ex) {
[17:39:21.750]                       msg <- conditionMessage(ex)
[17:39:21.750]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.750]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:21.750]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.750]                         fi_tmp[["mtime"]], msg)
[17:39:21.750]                       ex$message <- msg
[17:39:21.750]                       stop(ex)
[17:39:21.750]                     })
[17:39:21.750]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:21.750]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:21.750]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:21.750]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.750]                       fi <- file.info(pathname)
[17:39:21.750]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:21.750]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.750]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:21.750]                         fi[["size"]], fi[["mtime"]])
[17:39:21.750]                       stop(msg)
[17:39:21.750]                     }
[17:39:21.750]                     invisible(pathname)
[17:39:21.750]                   }
[17:39:21.750]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:21.750]                     rootPath = tempdir()) 
[17:39:21.750]                   {
[17:39:21.750]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:21.750]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:21.750]                       tmpdir = path, fileext = ".rds")
[17:39:21.750]                     save_rds(obj, file)
[17:39:21.750]                   }
[17:39:21.750]                   saveImmediateCondition(cond, path = "/tmp/RtmpwpZk8w/.future/immediateConditions")
[17:39:21.750]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.750]                   {
[17:39:21.750]                     inherits <- base::inherits
[17:39:21.750]                     invokeRestart <- base::invokeRestart
[17:39:21.750]                     is.null <- base::is.null
[17:39:21.750]                     muffled <- FALSE
[17:39:21.750]                     if (inherits(cond, "message")) {
[17:39:21.750]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:21.750]                       if (muffled) 
[17:39:21.750]                         invokeRestart("muffleMessage")
[17:39:21.750]                     }
[17:39:21.750]                     else if (inherits(cond, "warning")) {
[17:39:21.750]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:21.750]                       if (muffled) 
[17:39:21.750]                         invokeRestart("muffleWarning")
[17:39:21.750]                     }
[17:39:21.750]                     else if (inherits(cond, "condition")) {
[17:39:21.750]                       if (!is.null(pattern)) {
[17:39:21.750]                         computeRestarts <- base::computeRestarts
[17:39:21.750]                         grepl <- base::grepl
[17:39:21.750]                         restarts <- computeRestarts(cond)
[17:39:21.750]                         for (restart in restarts) {
[17:39:21.750]                           name <- restart$name
[17:39:21.750]                           if (is.null(name)) 
[17:39:21.750]                             next
[17:39:21.750]                           if (!grepl(pattern, name)) 
[17:39:21.750]                             next
[17:39:21.750]                           invokeRestart(restart)
[17:39:21.750]                           muffled <- TRUE
[17:39:21.750]                           break
[17:39:21.750]                         }
[17:39:21.750]                       }
[17:39:21.750]                     }
[17:39:21.750]                     invisible(muffled)
[17:39:21.750]                   }
[17:39:21.750]                   muffleCondition(cond)
[17:39:21.750]                 })
[17:39:21.750]             }))
[17:39:21.750]             future::FutureResult(value = ...future.value$value, 
[17:39:21.750]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.750]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.750]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.750]                     ...future.globalenv.names))
[17:39:21.750]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.750]         }, condition = base::local({
[17:39:21.750]             c <- base::c
[17:39:21.750]             inherits <- base::inherits
[17:39:21.750]             invokeRestart <- base::invokeRestart
[17:39:21.750]             length <- base::length
[17:39:21.750]             list <- base::list
[17:39:21.750]             seq.int <- base::seq.int
[17:39:21.750]             signalCondition <- base::signalCondition
[17:39:21.750]             sys.calls <- base::sys.calls
[17:39:21.750]             `[[` <- base::`[[`
[17:39:21.750]             `+` <- base::`+`
[17:39:21.750]             `<<-` <- base::`<<-`
[17:39:21.750]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.750]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.750]                   3L)]
[17:39:21.750]             }
[17:39:21.750]             function(cond) {
[17:39:21.750]                 is_error <- inherits(cond, "error")
[17:39:21.750]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.750]                   NULL)
[17:39:21.750]                 if (is_error) {
[17:39:21.750]                   sessionInformation <- function() {
[17:39:21.750]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.750]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.750]                       search = base::search(), system = base::Sys.info())
[17:39:21.750]                   }
[17:39:21.750]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.750]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.750]                     cond$call), session = sessionInformation(), 
[17:39:21.750]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.750]                   signalCondition(cond)
[17:39:21.750]                 }
[17:39:21.750]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.750]                 "immediateCondition"))) {
[17:39:21.750]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.750]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.750]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.750]                   if (TRUE && !signal) {
[17:39:21.750]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.750]                     {
[17:39:21.750]                       inherits <- base::inherits
[17:39:21.750]                       invokeRestart <- base::invokeRestart
[17:39:21.750]                       is.null <- base::is.null
[17:39:21.750]                       muffled <- FALSE
[17:39:21.750]                       if (inherits(cond, "message")) {
[17:39:21.750]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.750]                         if (muffled) 
[17:39:21.750]                           invokeRestart("muffleMessage")
[17:39:21.750]                       }
[17:39:21.750]                       else if (inherits(cond, "warning")) {
[17:39:21.750]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.750]                         if (muffled) 
[17:39:21.750]                           invokeRestart("muffleWarning")
[17:39:21.750]                       }
[17:39:21.750]                       else if (inherits(cond, "condition")) {
[17:39:21.750]                         if (!is.null(pattern)) {
[17:39:21.750]                           computeRestarts <- base::computeRestarts
[17:39:21.750]                           grepl <- base::grepl
[17:39:21.750]                           restarts <- computeRestarts(cond)
[17:39:21.750]                           for (restart in restarts) {
[17:39:21.750]                             name <- restart$name
[17:39:21.750]                             if (is.null(name)) 
[17:39:21.750]                               next
[17:39:21.750]                             if (!grepl(pattern, name)) 
[17:39:21.750]                               next
[17:39:21.750]                             invokeRestart(restart)
[17:39:21.750]                             muffled <- TRUE
[17:39:21.750]                             break
[17:39:21.750]                           }
[17:39:21.750]                         }
[17:39:21.750]                       }
[17:39:21.750]                       invisible(muffled)
[17:39:21.750]                     }
[17:39:21.750]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.750]                   }
[17:39:21.750]                 }
[17:39:21.750]                 else {
[17:39:21.750]                   if (TRUE) {
[17:39:21.750]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.750]                     {
[17:39:21.750]                       inherits <- base::inherits
[17:39:21.750]                       invokeRestart <- base::invokeRestart
[17:39:21.750]                       is.null <- base::is.null
[17:39:21.750]                       muffled <- FALSE
[17:39:21.750]                       if (inherits(cond, "message")) {
[17:39:21.750]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.750]                         if (muffled) 
[17:39:21.750]                           invokeRestart("muffleMessage")
[17:39:21.750]                       }
[17:39:21.750]                       else if (inherits(cond, "warning")) {
[17:39:21.750]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.750]                         if (muffled) 
[17:39:21.750]                           invokeRestart("muffleWarning")
[17:39:21.750]                       }
[17:39:21.750]                       else if (inherits(cond, "condition")) {
[17:39:21.750]                         if (!is.null(pattern)) {
[17:39:21.750]                           computeRestarts <- base::computeRestarts
[17:39:21.750]                           grepl <- base::grepl
[17:39:21.750]                           restarts <- computeRestarts(cond)
[17:39:21.750]                           for (restart in restarts) {
[17:39:21.750]                             name <- restart$name
[17:39:21.750]                             if (is.null(name)) 
[17:39:21.750]                               next
[17:39:21.750]                             if (!grepl(pattern, name)) 
[17:39:21.750]                               next
[17:39:21.750]                             invokeRestart(restart)
[17:39:21.750]                             muffled <- TRUE
[17:39:21.750]                             break
[17:39:21.750]                           }
[17:39:21.750]                         }
[17:39:21.750]                       }
[17:39:21.750]                       invisible(muffled)
[17:39:21.750]                     }
[17:39:21.750]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.750]                   }
[17:39:21.750]                 }
[17:39:21.750]             }
[17:39:21.750]         }))
[17:39:21.750]     }, error = function(ex) {
[17:39:21.750]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.750]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.750]                 ...future.rng), started = ...future.startTime, 
[17:39:21.750]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.750]             version = "1.8"), class = "FutureResult")
[17:39:21.750]     }, finally = {
[17:39:21.750]         if (!identical(...future.workdir, getwd())) 
[17:39:21.750]             setwd(...future.workdir)
[17:39:21.750]         {
[17:39:21.750]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.750]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.750]             }
[17:39:21.750]             base::options(...future.oldOptions)
[17:39:21.750]             if (.Platform$OS.type == "windows") {
[17:39:21.750]                 old_names <- names(...future.oldEnvVars)
[17:39:21.750]                 envs <- base::Sys.getenv()
[17:39:21.750]                 names <- names(envs)
[17:39:21.750]                 common <- intersect(names, old_names)
[17:39:21.750]                 added <- setdiff(names, old_names)
[17:39:21.750]                 removed <- setdiff(old_names, names)
[17:39:21.750]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.750]                   envs[common]]
[17:39:21.750]                 NAMES <- toupper(changed)
[17:39:21.750]                 args <- list()
[17:39:21.750]                 for (kk in seq_along(NAMES)) {
[17:39:21.750]                   name <- changed[[kk]]
[17:39:21.750]                   NAME <- NAMES[[kk]]
[17:39:21.750]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.750]                     next
[17:39:21.750]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.750]                 }
[17:39:21.750]                 NAMES <- toupper(added)
[17:39:21.750]                 for (kk in seq_along(NAMES)) {
[17:39:21.750]                   name <- added[[kk]]
[17:39:21.750]                   NAME <- NAMES[[kk]]
[17:39:21.750]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.750]                     next
[17:39:21.750]                   args[[name]] <- ""
[17:39:21.750]                 }
[17:39:21.750]                 NAMES <- toupper(removed)
[17:39:21.750]                 for (kk in seq_along(NAMES)) {
[17:39:21.750]                   name <- removed[[kk]]
[17:39:21.750]                   NAME <- NAMES[[kk]]
[17:39:21.750]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.750]                     next
[17:39:21.750]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.750]                 }
[17:39:21.750]                 if (length(args) > 0) 
[17:39:21.750]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.750]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.750]             }
[17:39:21.750]             else {
[17:39:21.750]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.750]             }
[17:39:21.750]             {
[17:39:21.750]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.750]                   0L) {
[17:39:21.750]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.750]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.750]                   base::options(opts)
[17:39:21.750]                 }
[17:39:21.750]                 {
[17:39:21.750]                   {
[17:39:21.750]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:21.750]                     NULL
[17:39:21.750]                   }
[17:39:21.750]                   options(future.plan = NULL)
[17:39:21.750]                   if (is.na(NA_character_)) 
[17:39:21.750]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.750]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.750]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.750]                     .init = FALSE)
[17:39:21.750]                 }
[17:39:21.750]             }
[17:39:21.750]         }
[17:39:21.750]     })
[17:39:21.750]     if (TRUE) {
[17:39:21.750]         base::sink(type = "output", split = FALSE)
[17:39:21.750]         if (TRUE) {
[17:39:21.750]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.750]         }
[17:39:21.750]         else {
[17:39:21.750]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.750]         }
[17:39:21.750]         base::close(...future.stdout)
[17:39:21.750]         ...future.stdout <- NULL
[17:39:21.750]     }
[17:39:21.750]     ...future.result$conditions <- ...future.conditions
[17:39:21.750]     ...future.result$finished <- base::Sys.time()
[17:39:21.750]     ...future.result
[17:39:21.750] }
[17:39:21.753] requestCore(): workers = 2
[17:39:21.754] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:39:21.756] plan(): Setting new future strategy stack:
[17:39:21.756] List of future strategies:
[17:39:21.756] 1. sequential:
[17:39:21.756]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.756]    - tweaked: FALSE
[17:39:21.756]    - call: NULL
[17:39:21.757] plan(): nbrOfWorkers() = 1
[17:39:21.759] plan(): Setting new future strategy stack:
[17:39:21.759] List of future strategies:
[17:39:21.759] 1. multicore:
[17:39:21.759]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:21.759]    - tweaked: FALSE
[17:39:21.759]    - call: plan(strategy)
[17:39:21.764] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:21.765] result() for MulticoreFuture ...
[17:39:21.766] result() for MulticoreFuture ...
[17:39:21.766] result() for MulticoreFuture ... done
[17:39:21.766] result() for MulticoreFuture ... done
[17:39:21.766] result() for MulticoreFuture ...
[17:39:21.766] result() for MulticoreFuture ... done
[17:39:21.767] getGlobalsAndPackages() ...
[17:39:21.767] Searching for globals...
[17:39:21.767] 
[17:39:21.768] Searching for globals ... DONE
[17:39:21.768] - globals: [0] <none>
[17:39:21.768] getGlobalsAndPackages() ... DONE
[17:39:21.768] run() for ‘Future’ ...
[17:39:21.768] - state: ‘created’
[17:39:21.768] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:21.773] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:21.773] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:21.773]   - Field: ‘label’
[17:39:21.773]   - Field: ‘local’
[17:39:21.773]   - Field: ‘owner’
[17:39:21.773]   - Field: ‘envir’
[17:39:21.773]   - Field: ‘workers’
[17:39:21.774]   - Field: ‘packages’
[17:39:21.774]   - Field: ‘gc’
[17:39:21.774]   - Field: ‘job’
[17:39:21.774]   - Field: ‘conditions’
[17:39:21.774]   - Field: ‘expr’
[17:39:21.774]   - Field: ‘uuid’
[17:39:21.774]   - Field: ‘seed’
[17:39:21.774]   - Field: ‘version’
[17:39:21.775]   - Field: ‘result’
[17:39:21.775]   - Field: ‘asynchronous’
[17:39:21.775]   - Field: ‘calls’
[17:39:21.775]   - Field: ‘globals’
[17:39:21.775]   - Field: ‘stdout’
[17:39:21.775]   - Field: ‘earlySignal’
[17:39:21.775]   - Field: ‘lazy’
[17:39:21.775]   - Field: ‘state’
[17:39:21.775] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:21.776] - Launch lazy future ...
[17:39:21.776] Packages needed by the future expression (n = 0): <none>
[17:39:21.776] Packages needed by future strategies (n = 0): <none>
[17:39:21.777] {
[17:39:21.777]     {
[17:39:21.777]         {
[17:39:21.777]             ...future.startTime <- base::Sys.time()
[17:39:21.777]             {
[17:39:21.777]                 {
[17:39:21.777]                   {
[17:39:21.777]                     {
[17:39:21.777]                       base::local({
[17:39:21.777]                         has_future <- base::requireNamespace("future", 
[17:39:21.777]                           quietly = TRUE)
[17:39:21.777]                         if (has_future) {
[17:39:21.777]                           ns <- base::getNamespace("future")
[17:39:21.777]                           version <- ns[[".package"]][["version"]]
[17:39:21.777]                           if (is.null(version)) 
[17:39:21.777]                             version <- utils::packageVersion("future")
[17:39:21.777]                         }
[17:39:21.777]                         else {
[17:39:21.777]                           version <- NULL
[17:39:21.777]                         }
[17:39:21.777]                         if (!has_future || version < "1.8.0") {
[17:39:21.777]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.777]                             "", base::R.version$version.string), 
[17:39:21.777]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:21.777]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.777]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.777]                               "release", "version")], collapse = " "), 
[17:39:21.777]                             hostname = base::Sys.info()[["nodename"]])
[17:39:21.777]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.777]                             info)
[17:39:21.777]                           info <- base::paste(info, collapse = "; ")
[17:39:21.777]                           if (!has_future) {
[17:39:21.777]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.777]                               info)
[17:39:21.777]                           }
[17:39:21.777]                           else {
[17:39:21.777]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.777]                               info, version)
[17:39:21.777]                           }
[17:39:21.777]                           base::stop(msg)
[17:39:21.777]                         }
[17:39:21.777]                       })
[17:39:21.777]                     }
[17:39:21.777]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:21.777]                     base::options(mc.cores = 1L)
[17:39:21.777]                   }
[17:39:21.777]                   ...future.strategy.old <- future::plan("list")
[17:39:21.777]                   options(future.plan = NULL)
[17:39:21.777]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.777]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.777]                 }
[17:39:21.777]                 ...future.workdir <- getwd()
[17:39:21.777]             }
[17:39:21.777]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.777]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.777]         }
[17:39:21.777]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.777]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.777]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.777]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.777]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.777]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.777]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.777]             base::names(...future.oldOptions))
[17:39:21.777]     }
[17:39:21.777]     if (FALSE) {
[17:39:21.777]     }
[17:39:21.777]     else {
[17:39:21.777]         if (TRUE) {
[17:39:21.777]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.777]                 open = "w")
[17:39:21.777]         }
[17:39:21.777]         else {
[17:39:21.777]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.777]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.777]         }
[17:39:21.777]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.777]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.777]             base::sink(type = "output", split = FALSE)
[17:39:21.777]             base::close(...future.stdout)
[17:39:21.777]         }, add = TRUE)
[17:39:21.777]     }
[17:39:21.777]     ...future.frame <- base::sys.nframe()
[17:39:21.777]     ...future.conditions <- base::list()
[17:39:21.777]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.777]     if (FALSE) {
[17:39:21.777]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.777]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.777]     }
[17:39:21.777]     ...future.result <- base::tryCatch({
[17:39:21.777]         base::withCallingHandlers({
[17:39:21.777]             ...future.value <- base::withVisible(base::local({
[17:39:21.777]                 withCallingHandlers({
[17:39:21.777]                   42
[17:39:21.777]                 }, immediateCondition = function(cond) {
[17:39:21.777]                   save_rds <- function (object, pathname, ...) 
[17:39:21.777]                   {
[17:39:21.777]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:21.777]                     if (file_test("-f", pathname_tmp)) {
[17:39:21.777]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.777]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:21.777]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.777]                         fi_tmp[["mtime"]])
[17:39:21.777]                     }
[17:39:21.777]                     tryCatch({
[17:39:21.777]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:21.777]                     }, error = function(ex) {
[17:39:21.777]                       msg <- conditionMessage(ex)
[17:39:21.777]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.777]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:21.777]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.777]                         fi_tmp[["mtime"]], msg)
[17:39:21.777]                       ex$message <- msg
[17:39:21.777]                       stop(ex)
[17:39:21.777]                     })
[17:39:21.777]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:21.777]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:21.777]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:21.777]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.777]                       fi <- file.info(pathname)
[17:39:21.777]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:21.777]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.777]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:21.777]                         fi[["size"]], fi[["mtime"]])
[17:39:21.777]                       stop(msg)
[17:39:21.777]                     }
[17:39:21.777]                     invisible(pathname)
[17:39:21.777]                   }
[17:39:21.777]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:21.777]                     rootPath = tempdir()) 
[17:39:21.777]                   {
[17:39:21.777]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:21.777]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:21.777]                       tmpdir = path, fileext = ".rds")
[17:39:21.777]                     save_rds(obj, file)
[17:39:21.777]                   }
[17:39:21.777]                   saveImmediateCondition(cond, path = "/tmp/RtmpwpZk8w/.future/immediateConditions")
[17:39:21.777]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.777]                   {
[17:39:21.777]                     inherits <- base::inherits
[17:39:21.777]                     invokeRestart <- base::invokeRestart
[17:39:21.777]                     is.null <- base::is.null
[17:39:21.777]                     muffled <- FALSE
[17:39:21.777]                     if (inherits(cond, "message")) {
[17:39:21.777]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:21.777]                       if (muffled) 
[17:39:21.777]                         invokeRestart("muffleMessage")
[17:39:21.777]                     }
[17:39:21.777]                     else if (inherits(cond, "warning")) {
[17:39:21.777]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:21.777]                       if (muffled) 
[17:39:21.777]                         invokeRestart("muffleWarning")
[17:39:21.777]                     }
[17:39:21.777]                     else if (inherits(cond, "condition")) {
[17:39:21.777]                       if (!is.null(pattern)) {
[17:39:21.777]                         computeRestarts <- base::computeRestarts
[17:39:21.777]                         grepl <- base::grepl
[17:39:21.777]                         restarts <- computeRestarts(cond)
[17:39:21.777]                         for (restart in restarts) {
[17:39:21.777]                           name <- restart$name
[17:39:21.777]                           if (is.null(name)) 
[17:39:21.777]                             next
[17:39:21.777]                           if (!grepl(pattern, name)) 
[17:39:21.777]                             next
[17:39:21.777]                           invokeRestart(restart)
[17:39:21.777]                           muffled <- TRUE
[17:39:21.777]                           break
[17:39:21.777]                         }
[17:39:21.777]                       }
[17:39:21.777]                     }
[17:39:21.777]                     invisible(muffled)
[17:39:21.777]                   }
[17:39:21.777]                   muffleCondition(cond)
[17:39:21.777]                 })
[17:39:21.777]             }))
[17:39:21.777]             future::FutureResult(value = ...future.value$value, 
[17:39:21.777]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.777]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.777]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.777]                     ...future.globalenv.names))
[17:39:21.777]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.777]         }, condition = base::local({
[17:39:21.777]             c <- base::c
[17:39:21.777]             inherits <- base::inherits
[17:39:21.777]             invokeRestart <- base::invokeRestart
[17:39:21.777]             length <- base::length
[17:39:21.777]             list <- base::list
[17:39:21.777]             seq.int <- base::seq.int
[17:39:21.777]             signalCondition <- base::signalCondition
[17:39:21.777]             sys.calls <- base::sys.calls
[17:39:21.777]             `[[` <- base::`[[`
[17:39:21.777]             `+` <- base::`+`
[17:39:21.777]             `<<-` <- base::`<<-`
[17:39:21.777]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.777]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.777]                   3L)]
[17:39:21.777]             }
[17:39:21.777]             function(cond) {
[17:39:21.777]                 is_error <- inherits(cond, "error")
[17:39:21.777]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.777]                   NULL)
[17:39:21.777]                 if (is_error) {
[17:39:21.777]                   sessionInformation <- function() {
[17:39:21.777]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.777]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.777]                       search = base::search(), system = base::Sys.info())
[17:39:21.777]                   }
[17:39:21.777]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.777]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.777]                     cond$call), session = sessionInformation(), 
[17:39:21.777]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.777]                   signalCondition(cond)
[17:39:21.777]                 }
[17:39:21.777]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.777]                 "immediateCondition"))) {
[17:39:21.777]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.777]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.777]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.777]                   if (TRUE && !signal) {
[17:39:21.777]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.777]                     {
[17:39:21.777]                       inherits <- base::inherits
[17:39:21.777]                       invokeRestart <- base::invokeRestart
[17:39:21.777]                       is.null <- base::is.null
[17:39:21.777]                       muffled <- FALSE
[17:39:21.777]                       if (inherits(cond, "message")) {
[17:39:21.777]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.777]                         if (muffled) 
[17:39:21.777]                           invokeRestart("muffleMessage")
[17:39:21.777]                       }
[17:39:21.777]                       else if (inherits(cond, "warning")) {
[17:39:21.777]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.777]                         if (muffled) 
[17:39:21.777]                           invokeRestart("muffleWarning")
[17:39:21.777]                       }
[17:39:21.777]                       else if (inherits(cond, "condition")) {
[17:39:21.777]                         if (!is.null(pattern)) {
[17:39:21.777]                           computeRestarts <- base::computeRestarts
[17:39:21.777]                           grepl <- base::grepl
[17:39:21.777]                           restarts <- computeRestarts(cond)
[17:39:21.777]                           for (restart in restarts) {
[17:39:21.777]                             name <- restart$name
[17:39:21.777]                             if (is.null(name)) 
[17:39:21.777]                               next
[17:39:21.777]                             if (!grepl(pattern, name)) 
[17:39:21.777]                               next
[17:39:21.777]                             invokeRestart(restart)
[17:39:21.777]                             muffled <- TRUE
[17:39:21.777]                             break
[17:39:21.777]                           }
[17:39:21.777]                         }
[17:39:21.777]                       }
[17:39:21.777]                       invisible(muffled)
[17:39:21.777]                     }
[17:39:21.777]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.777]                   }
[17:39:21.777]                 }
[17:39:21.777]                 else {
[17:39:21.777]                   if (TRUE) {
[17:39:21.777]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.777]                     {
[17:39:21.777]                       inherits <- base::inherits
[17:39:21.777]                       invokeRestart <- base::invokeRestart
[17:39:21.777]                       is.null <- base::is.null
[17:39:21.777]                       muffled <- FALSE
[17:39:21.777]                       if (inherits(cond, "message")) {
[17:39:21.777]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.777]                         if (muffled) 
[17:39:21.777]                           invokeRestart("muffleMessage")
[17:39:21.777]                       }
[17:39:21.777]                       else if (inherits(cond, "warning")) {
[17:39:21.777]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.777]                         if (muffled) 
[17:39:21.777]                           invokeRestart("muffleWarning")
[17:39:21.777]                       }
[17:39:21.777]                       else if (inherits(cond, "condition")) {
[17:39:21.777]                         if (!is.null(pattern)) {
[17:39:21.777]                           computeRestarts <- base::computeRestarts
[17:39:21.777]                           grepl <- base::grepl
[17:39:21.777]                           restarts <- computeRestarts(cond)
[17:39:21.777]                           for (restart in restarts) {
[17:39:21.777]                             name <- restart$name
[17:39:21.777]                             if (is.null(name)) 
[17:39:21.777]                               next
[17:39:21.777]                             if (!grepl(pattern, name)) 
[17:39:21.777]                               next
[17:39:21.777]                             invokeRestart(restart)
[17:39:21.777]                             muffled <- TRUE
[17:39:21.777]                             break
[17:39:21.777]                           }
[17:39:21.777]                         }
[17:39:21.777]                       }
[17:39:21.777]                       invisible(muffled)
[17:39:21.777]                     }
[17:39:21.777]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.777]                   }
[17:39:21.777]                 }
[17:39:21.777]             }
[17:39:21.777]         }))
[17:39:21.777]     }, error = function(ex) {
[17:39:21.777]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.777]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.777]                 ...future.rng), started = ...future.startTime, 
[17:39:21.777]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.777]             version = "1.8"), class = "FutureResult")
[17:39:21.777]     }, finally = {
[17:39:21.777]         if (!identical(...future.workdir, getwd())) 
[17:39:21.777]             setwd(...future.workdir)
[17:39:21.777]         {
[17:39:21.777]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.777]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.777]             }
[17:39:21.777]             base::options(...future.oldOptions)
[17:39:21.777]             if (.Platform$OS.type == "windows") {
[17:39:21.777]                 old_names <- names(...future.oldEnvVars)
[17:39:21.777]                 envs <- base::Sys.getenv()
[17:39:21.777]                 names <- names(envs)
[17:39:21.777]                 common <- intersect(names, old_names)
[17:39:21.777]                 added <- setdiff(names, old_names)
[17:39:21.777]                 removed <- setdiff(old_names, names)
[17:39:21.777]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.777]                   envs[common]]
[17:39:21.777]                 NAMES <- toupper(changed)
[17:39:21.777]                 args <- list()
[17:39:21.777]                 for (kk in seq_along(NAMES)) {
[17:39:21.777]                   name <- changed[[kk]]
[17:39:21.777]                   NAME <- NAMES[[kk]]
[17:39:21.777]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.777]                     next
[17:39:21.777]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.777]                 }
[17:39:21.777]                 NAMES <- toupper(added)
[17:39:21.777]                 for (kk in seq_along(NAMES)) {
[17:39:21.777]                   name <- added[[kk]]
[17:39:21.777]                   NAME <- NAMES[[kk]]
[17:39:21.777]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.777]                     next
[17:39:21.777]                   args[[name]] <- ""
[17:39:21.777]                 }
[17:39:21.777]                 NAMES <- toupper(removed)
[17:39:21.777]                 for (kk in seq_along(NAMES)) {
[17:39:21.777]                   name <- removed[[kk]]
[17:39:21.777]                   NAME <- NAMES[[kk]]
[17:39:21.777]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.777]                     next
[17:39:21.777]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.777]                 }
[17:39:21.777]                 if (length(args) > 0) 
[17:39:21.777]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.777]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.777]             }
[17:39:21.777]             else {
[17:39:21.777]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.777]             }
[17:39:21.777]             {
[17:39:21.777]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.777]                   0L) {
[17:39:21.777]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.777]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.777]                   base::options(opts)
[17:39:21.777]                 }
[17:39:21.777]                 {
[17:39:21.777]                   {
[17:39:21.777]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:21.777]                     NULL
[17:39:21.777]                   }
[17:39:21.777]                   options(future.plan = NULL)
[17:39:21.777]                   if (is.na(NA_character_)) 
[17:39:21.777]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.777]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.777]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.777]                     .init = FALSE)
[17:39:21.777]                 }
[17:39:21.777]             }
[17:39:21.777]         }
[17:39:21.777]     })
[17:39:21.777]     if (TRUE) {
[17:39:21.777]         base::sink(type = "output", split = FALSE)
[17:39:21.777]         if (TRUE) {
[17:39:21.777]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.777]         }
[17:39:21.777]         else {
[17:39:21.777]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.777]         }
[17:39:21.777]         base::close(...future.stdout)
[17:39:21.777]         ...future.stdout <- NULL
[17:39:21.777]     }
[17:39:21.777]     ...future.result$conditions <- ...future.conditions
[17:39:21.777]     ...future.result$finished <- base::Sys.time()
[17:39:21.777]     ...future.result
[17:39:21.777] }
[17:39:21.779] requestCore(): workers = 2
[17:39:21.781] MulticoreFuture started
[17:39:21.781] - Launch lazy future ... done
[17:39:21.781] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE[17:39:21.782] plan(): Setting new future strategy stack:
)
[17:39:21.782] List of future strategies:
[17:39:21.782] 1. sequential:
[17:39:21.782]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.782]    - tweaked: FALSE
[17:39:21.782]    - call: NULL
[17:39:21.783] plan(): nbrOfWorkers() = 1
[17:39:21.785] plan(): Setting new future strategy stack:
[17:39:21.785] List of future strategies:
[17:39:21.785] 1. multicore:
[17:39:21.785]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:21.785]    - tweaked: FALSE
[17:39:21.785]    - call: plan(strategy)
[17:39:21.790] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:21.791] result() for MulticoreFuture ...
[17:39:21.792] result() for MulticoreFuture ...
[17:39:21.792] result() for MulticoreFuture ... done
[17:39:21.792] result() for MulticoreFuture ... done
[17:39:21.792] result() for MulticoreFuture ...
[17:39:21.792] result() for MulticoreFuture ... done
[17:39:21.793] getGlobalsAndPackages() ...
[17:39:21.793] Searching for globals...
[17:39:21.794] - globals found: [1] ‘{’
[17:39:21.794] Searching for globals ... DONE
[17:39:21.794] Resolving globals: FALSE
[17:39:21.794] 
[17:39:21.795] 
[17:39:21.795] getGlobalsAndPackages() ... DONE
[17:39:21.795] run() for ‘Future’ ...
[17:39:21.795] - state: ‘created’
[17:39:21.795] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:39:21.800] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:21.800] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:39:21.800]   - Field: ‘label’
[17:39:21.800]   - Field: ‘local’
[17:39:21.800]   - Field: ‘owner’
[17:39:21.801]   - Field: ‘envir’
[17:39:21.801]   - Field: ‘workers’
[17:39:21.801]   - Field: ‘packages’
[17:39:21.801]   - Field: ‘gc’
[17:39:21.801]   - Field: ‘job’
[17:39:21.801]   - Field: ‘conditions’
[17:39:21.801]   - Field: ‘expr’
[17:39:21.801]   - Field: ‘uuid’
[17:39:21.802]   - Field: ‘seed’
[17:39:21.802]   - Field: ‘version’
[17:39:21.802]   - Field: ‘result’
[17:39:21.802]   - Field: ‘asynchronous’
[17:39:21.802]   - Field: ‘calls’
[17:39:21.802]   - Field: ‘globals’
[17:39:21.802]   - Field: ‘stdout’
[17:39:21.802]   - Field: ‘earlySignal’
[17:39:21.802]   - Field: ‘lazy’
[17:39:21.803]   - Field: ‘state’
[17:39:21.803] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:39:21.803] - Launch lazy future ...
[17:39:21.803] Packages needed by the future expression (n = 0): <none>
[17:39:21.803] Packages needed by future strategies (n = 0): <none>
[17:39:21.804] {
[17:39:21.804]     {
[17:39:21.804]         {
[17:39:21.804]             ...future.startTime <- base::Sys.time()
[17:39:21.804]             {
[17:39:21.804]                 {
[17:39:21.804]                   {
[17:39:21.804]                     {
[17:39:21.804]                       base::local({
[17:39:21.804]                         has_future <- base::requireNamespace("future", 
[17:39:21.804]                           quietly = TRUE)
[17:39:21.804]                         if (has_future) {
[17:39:21.804]                           ns <- base::getNamespace("future")
[17:39:21.804]                           version <- ns[[".package"]][["version"]]
[17:39:21.804]                           if (is.null(version)) 
[17:39:21.804]                             version <- utils::packageVersion("future")
[17:39:21.804]                         }
[17:39:21.804]                         else {
[17:39:21.804]                           version <- NULL
[17:39:21.804]                         }
[17:39:21.804]                         if (!has_future || version < "1.8.0") {
[17:39:21.804]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:21.804]                             "", base::R.version$version.string), 
[17:39:21.804]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:21.804]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:21.804]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:21.804]                               "release", "version")], collapse = " "), 
[17:39:21.804]                             hostname = base::Sys.info()[["nodename"]])
[17:39:21.804]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:21.804]                             info)
[17:39:21.804]                           info <- base::paste(info, collapse = "; ")
[17:39:21.804]                           if (!has_future) {
[17:39:21.804]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:21.804]                               info)
[17:39:21.804]                           }
[17:39:21.804]                           else {
[17:39:21.804]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:21.804]                               info, version)
[17:39:21.804]                           }
[17:39:21.804]                           base::stop(msg)
[17:39:21.804]                         }
[17:39:21.804]                       })
[17:39:21.804]                     }
[17:39:21.804]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:21.804]                     base::options(mc.cores = 1L)
[17:39:21.804]                   }
[17:39:21.804]                   ...future.strategy.old <- future::plan("list")
[17:39:21.804]                   options(future.plan = NULL)
[17:39:21.804]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.804]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:21.804]                 }
[17:39:21.804]                 ...future.workdir <- getwd()
[17:39:21.804]             }
[17:39:21.804]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:21.804]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:21.804]         }
[17:39:21.804]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:21.804]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:21.804]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:21.804]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:21.804]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:21.804]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:21.804]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:21.804]             base::names(...future.oldOptions))
[17:39:21.804]     }
[17:39:21.804]     if (FALSE) {
[17:39:21.804]     }
[17:39:21.804]     else {
[17:39:21.804]         if (TRUE) {
[17:39:21.804]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:21.804]                 open = "w")
[17:39:21.804]         }
[17:39:21.804]         else {
[17:39:21.804]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:21.804]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:21.804]         }
[17:39:21.804]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:21.804]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:21.804]             base::sink(type = "output", split = FALSE)
[17:39:21.804]             base::close(...future.stdout)
[17:39:21.804]         }, add = TRUE)
[17:39:21.804]     }
[17:39:21.804]     ...future.frame <- base::sys.nframe()
[17:39:21.804]     ...future.conditions <- base::list()
[17:39:21.804]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:21.804]     if (FALSE) {
[17:39:21.804]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:21.804]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:21.804]     }
[17:39:21.804]     ...future.result <- base::tryCatch({
[17:39:21.804]         base::withCallingHandlers({
[17:39:21.804]             ...future.value <- base::withVisible(base::local({
[17:39:21.804]                 withCallingHandlers({
[17:39:21.804]                   {
[17:39:21.804]                     42
[17:39:21.804]                   }
[17:39:21.804]                 }, immediateCondition = function(cond) {
[17:39:21.804]                   save_rds <- function (object, pathname, ...) 
[17:39:21.804]                   {
[17:39:21.804]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:39:21.804]                     if (file_test("-f", pathname_tmp)) {
[17:39:21.804]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.804]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:39:21.804]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.804]                         fi_tmp[["mtime"]])
[17:39:21.804]                     }
[17:39:21.804]                     tryCatch({
[17:39:21.804]                       saveRDS(object, file = pathname_tmp, ...)
[17:39:21.804]                     }, error = function(ex) {
[17:39:21.804]                       msg <- conditionMessage(ex)
[17:39:21.804]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.804]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:39:21.804]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.804]                         fi_tmp[["mtime"]], msg)
[17:39:21.804]                       ex$message <- msg
[17:39:21.804]                       stop(ex)
[17:39:21.804]                     })
[17:39:21.804]                     stopifnot(file_test("-f", pathname_tmp))
[17:39:21.804]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:39:21.804]                     if (!res || file_test("-f", pathname_tmp)) {
[17:39:21.804]                       fi_tmp <- file.info(pathname_tmp)
[17:39:21.804]                       fi <- file.info(pathname)
[17:39:21.804]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:39:21.804]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:39:21.804]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:39:21.804]                         fi[["size"]], fi[["mtime"]])
[17:39:21.804]                       stop(msg)
[17:39:21.804]                     }
[17:39:21.804]                     invisible(pathname)
[17:39:21.804]                   }
[17:39:21.804]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:39:21.804]                     rootPath = tempdir()) 
[17:39:21.804]                   {
[17:39:21.804]                     obj <- list(time = Sys.time(), condition = cond)
[17:39:21.804]                     file <- tempfile(pattern = class(cond)[1], 
[17:39:21.804]                       tmpdir = path, fileext = ".rds")
[17:39:21.804]                     save_rds(obj, file)
[17:39:21.804]                   }
[17:39:21.804]                   saveImmediateCondition(cond, path = "/tmp/RtmpwpZk8w/.future/immediateConditions")
[17:39:21.804]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.804]                   {
[17:39:21.804]                     inherits <- base::inherits
[17:39:21.804]                     invokeRestart <- base::invokeRestart
[17:39:21.804]                     is.null <- base::is.null
[17:39:21.804]                     muffled <- FALSE
[17:39:21.804]                     if (inherits(cond, "message")) {
[17:39:21.804]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:21.804]                       if (muffled) 
[17:39:21.804]                         invokeRestart("muffleMessage")
[17:39:21.804]                     }
[17:39:21.804]                     else if (inherits(cond, "warning")) {
[17:39:21.804]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:21.804]                       if (muffled) 
[17:39:21.804]                         invokeRestart("muffleWarning")
[17:39:21.804]                     }
[17:39:21.804]                     else if (inherits(cond, "condition")) {
[17:39:21.804]                       if (!is.null(pattern)) {
[17:39:21.804]                         computeRestarts <- base::computeRestarts
[17:39:21.804]                         grepl <- base::grepl
[17:39:21.804]                         restarts <- computeRestarts(cond)
[17:39:21.804]                         for (restart in restarts) {
[17:39:21.804]                           name <- restart$name
[17:39:21.804]                           if (is.null(name)) 
[17:39:21.804]                             next
[17:39:21.804]                           if (!grepl(pattern, name)) 
[17:39:21.804]                             next
[17:39:21.804]                           invokeRestart(restart)
[17:39:21.804]                           muffled <- TRUE
[17:39:21.804]                           break
[17:39:21.804]                         }
[17:39:21.804]                       }
[17:39:21.804]                     }
[17:39:21.804]                     invisible(muffled)
[17:39:21.804]                   }
[17:39:21.804]                   muffleCondition(cond)
[17:39:21.804]                 })
[17:39:21.804]             }))
[17:39:21.804]             future::FutureResult(value = ...future.value$value, 
[17:39:21.804]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.804]                   ...future.rng), globalenv = if (FALSE) 
[17:39:21.804]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:21.804]                     ...future.globalenv.names))
[17:39:21.804]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:21.804]         }, condition = base::local({
[17:39:21.804]             c <- base::c
[17:39:21.804]             inherits <- base::inherits
[17:39:21.804]             invokeRestart <- base::invokeRestart
[17:39:21.804]             length <- base::length
[17:39:21.804]             list <- base::list
[17:39:21.804]             seq.int <- base::seq.int
[17:39:21.804]             signalCondition <- base::signalCondition
[17:39:21.804]             sys.calls <- base::sys.calls
[17:39:21.804]             `[[` <- base::`[[`
[17:39:21.804]             `+` <- base::`+`
[17:39:21.804]             `<<-` <- base::`<<-`
[17:39:21.804]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:21.804]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:21.804]                   3L)]
[17:39:21.804]             }
[17:39:21.804]             function(cond) {
[17:39:21.804]                 is_error <- inherits(cond, "error")
[17:39:21.804]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:21.804]                   NULL)
[17:39:21.804]                 if (is_error) {
[17:39:21.804]                   sessionInformation <- function() {
[17:39:21.804]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:21.804]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:21.804]                       search = base::search(), system = base::Sys.info())
[17:39:21.804]                   }
[17:39:21.804]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.804]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:21.804]                     cond$call), session = sessionInformation(), 
[17:39:21.804]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:21.804]                   signalCondition(cond)
[17:39:21.804]                 }
[17:39:21.804]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:21.804]                 "immediateCondition"))) {
[17:39:21.804]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:21.804]                   ...future.conditions[[length(...future.conditions) + 
[17:39:21.804]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:21.804]                   if (TRUE && !signal) {
[17:39:21.804]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.804]                     {
[17:39:21.804]                       inherits <- base::inherits
[17:39:21.804]                       invokeRestart <- base::invokeRestart
[17:39:21.804]                       is.null <- base::is.null
[17:39:21.804]                       muffled <- FALSE
[17:39:21.804]                       if (inherits(cond, "message")) {
[17:39:21.804]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.804]                         if (muffled) 
[17:39:21.804]                           invokeRestart("muffleMessage")
[17:39:21.804]                       }
[17:39:21.804]                       else if (inherits(cond, "warning")) {
[17:39:21.804]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.804]                         if (muffled) 
[17:39:21.804]                           invokeRestart("muffleWarning")
[17:39:21.804]                       }
[17:39:21.804]                       else if (inherits(cond, "condition")) {
[17:39:21.804]                         if (!is.null(pattern)) {
[17:39:21.804]                           computeRestarts <- base::computeRestarts
[17:39:21.804]                           grepl <- base::grepl
[17:39:21.804]                           restarts <- computeRestarts(cond)
[17:39:21.804]                           for (restart in restarts) {
[17:39:21.804]                             name <- restart$name
[17:39:21.804]                             if (is.null(name)) 
[17:39:21.804]                               next
[17:39:21.804]                             if (!grepl(pattern, name)) 
[17:39:21.804]                               next
[17:39:21.804]                             invokeRestart(restart)
[17:39:21.804]                             muffled <- TRUE
[17:39:21.804]                             break
[17:39:21.804]                           }
[17:39:21.804]                         }
[17:39:21.804]                       }
[17:39:21.804]                       invisible(muffled)
[17:39:21.804]                     }
[17:39:21.804]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.804]                   }
[17:39:21.804]                 }
[17:39:21.804]                 else {
[17:39:21.804]                   if (TRUE) {
[17:39:21.804]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:21.804]                     {
[17:39:21.804]                       inherits <- base::inherits
[17:39:21.804]                       invokeRestart <- base::invokeRestart
[17:39:21.804]                       is.null <- base::is.null
[17:39:21.804]                       muffled <- FALSE
[17:39:21.804]                       if (inherits(cond, "message")) {
[17:39:21.804]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:21.804]                         if (muffled) 
[17:39:21.804]                           invokeRestart("muffleMessage")
[17:39:21.804]                       }
[17:39:21.804]                       else if (inherits(cond, "warning")) {
[17:39:21.804]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:21.804]                         if (muffled) 
[17:39:21.804]                           invokeRestart("muffleWarning")
[17:39:21.804]                       }
[17:39:21.804]                       else if (inherits(cond, "condition")) {
[17:39:21.804]                         if (!is.null(pattern)) {
[17:39:21.804]                           computeRestarts <- base::computeRestarts
[17:39:21.804]                           grepl <- base::grepl
[17:39:21.804]                           restarts <- computeRestarts(cond)
[17:39:21.804]                           for (restart in restarts) {
[17:39:21.804]                             name <- restart$name
[17:39:21.804]                             if (is.null(name)) 
[17:39:21.804]                               next
[17:39:21.804]                             if (!grepl(pattern, name)) 
[17:39:21.804]                               next
[17:39:21.804]                             invokeRestart(restart)
[17:39:21.804]                             muffled <- TRUE
[17:39:21.804]                             break
[17:39:21.804]                           }
[17:39:21.804]                         }
[17:39:21.804]                       }
[17:39:21.804]                       invisible(muffled)
[17:39:21.804]                     }
[17:39:21.804]                     muffleCondition(cond, pattern = "^muffle")
[17:39:21.804]                   }
[17:39:21.804]                 }
[17:39:21.804]             }
[17:39:21.804]         }))
[17:39:21.804]     }, error = function(ex) {
[17:39:21.804]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:21.804]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:21.804]                 ...future.rng), started = ...future.startTime, 
[17:39:21.804]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:21.804]             version = "1.8"), class = "FutureResult")
[17:39:21.804]     }, finally = {
[17:39:21.804]         if (!identical(...future.workdir, getwd())) 
[17:39:21.804]             setwd(...future.workdir)
[17:39:21.804]         {
[17:39:21.804]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:21.804]                 ...future.oldOptions$nwarnings <- NULL
[17:39:21.804]             }
[17:39:21.804]             base::options(...future.oldOptions)
[17:39:21.804]             if (.Platform$OS.type == "windows") {
[17:39:21.804]                 old_names <- names(...future.oldEnvVars)
[17:39:21.804]                 envs <- base::Sys.getenv()
[17:39:21.804]                 names <- names(envs)
[17:39:21.804]                 common <- intersect(names, old_names)
[17:39:21.804]                 added <- setdiff(names, old_names)
[17:39:21.804]                 removed <- setdiff(old_names, names)
[17:39:21.804]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:21.804]                   envs[common]]
[17:39:21.804]                 NAMES <- toupper(changed)
[17:39:21.804]                 args <- list()
[17:39:21.804]                 for (kk in seq_along(NAMES)) {
[17:39:21.804]                   name <- changed[[kk]]
[17:39:21.804]                   NAME <- NAMES[[kk]]
[17:39:21.804]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.804]                     next
[17:39:21.804]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.804]                 }
[17:39:21.804]                 NAMES <- toupper(added)
[17:39:21.804]                 for (kk in seq_along(NAMES)) {
[17:39:21.804]                   name <- added[[kk]]
[17:39:21.804]                   NAME <- NAMES[[kk]]
[17:39:21.804]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.804]                     next
[17:39:21.804]                   args[[name]] <- ""
[17:39:21.804]                 }
[17:39:21.804]                 NAMES <- toupper(removed)
[17:39:21.804]                 for (kk in seq_along(NAMES)) {
[17:39:21.804]                   name <- removed[[kk]]
[17:39:21.804]                   NAME <- NAMES[[kk]]
[17:39:21.804]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:21.804]                     next
[17:39:21.804]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:21.804]                 }
[17:39:21.804]                 if (length(args) > 0) 
[17:39:21.804]                   base::do.call(base::Sys.setenv, args = args)
[17:39:21.804]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:21.804]             }
[17:39:21.804]             else {
[17:39:21.804]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:21.804]             }
[17:39:21.804]             {
[17:39:21.804]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:21.804]                   0L) {
[17:39:21.804]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:21.804]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:21.804]                   base::options(opts)
[17:39:21.804]                 }
[17:39:21.804]                 {
[17:39:21.804]                   {
[17:39:21.804]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:21.804]                     NULL
[17:39:21.804]                   }
[17:39:21.804]                   options(future.plan = NULL)
[17:39:21.804]                   if (is.na(NA_character_)) 
[17:39:21.804]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:21.804]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:21.804]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:21.804]                     .init = FALSE)
[17:39:21.804]                 }
[17:39:21.804]             }
[17:39:21.804]         }
[17:39:21.804]     })
[17:39:21.804]     if (TRUE) {
[17:39:21.804]         base::sink(type = "output", split = FALSE)
[17:39:21.804]         if (TRUE) {
[17:39:21.804]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:21.804]         }
[17:39:21.804]         else {
[17:39:21.804]             ...future.result["stdout"] <- base::list(NULL)
[17:39:21.804]         }
[17:39:21.804]         base::close(...future.stdout)
[17:39:21.804]         ...future.stdout <- NULL
[17:39:21.804]     }
[17:39:21.804]     ...future.result$conditions <- ...future.conditions
[17:39:21.804]     ...future.result$finished <- base::Sys.time()
[17:39:21.804]     ...future.result
[17:39:21.804] }
[17:39:21.807] requestCore(): workers = 2
[17:39:21.808] MulticoreFuture started
[17:39:21.809] - Launch lazy future ... done
[17:39:21.809] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[17:39:21.810] plan(): Setting new future strategy stack:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:39:21.810] List of future strategies:
[17:39:21.810] 1. sequential:
[17:39:21.810]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:21.810]    - tweaked: FALSE
[17:39:21.810]    - call: NULL
[17:39:21.811] plan(): nbrOfWorkers() = 1
[17:39:21.813] plan(): Setting new future strategy stack:
[17:39:21.813] List of future strategies:
[17:39:21.813] 1. multicore:
[17:39:21.813]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:39:21.813]    - tweaked: FALSE
[17:39:21.813]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:21.821] result() for MulticoreFuture ...
[17:39:21.823] plan(): nbrOfWorkers() = 2
[17:39:21.824] result() for MulticoreFuture ...
[17:39:21.824] result() for MulticoreFuture ... done
[17:39:21.825] result() for MulticoreFuture ... done
[17:39:21.825] result() for MulticoreFuture ...
[17:39:21.828] result() for MulticoreFuture ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[17:39:21.828] plan(): Setting new future strategy stack:
[17:39:21.829] List of future strategies:
[17:39:21.829] 1. multisession:
[17:39:21.829]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:21.829]    - tweaked: FALSE
[17:39:21.829]    - call: plan(strategy)
[17:39:21.829] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:39:21.829] multisession:
[17:39:21.829] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:39:21.829] - tweaked: FALSE
[17:39:21.829] - call: plan(strategy)
[17:39:21.836] getGlobalsAndPackages() ...
[17:39:21.836] Not searching for globals
[17:39:21.836] - globals: [0] <none>
[17:39:21.836] getGlobalsAndPackages() ... DONE
[17:39:21.837] [local output] makeClusterPSOCK() ...
[17:39:21.879] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:39:21.880] [local output] Base port: 11071
[17:39:21.880] [local output] Getting setup options for 2 cluster nodes ...
[17:39:21.880] [local output]  - Node 1 of 2 ...
[17:39:21.881] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:21.881] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpwpZk8w/worker.rank=1.parallelly.parent=40774.9f46277f13e2.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpwpZk8w/worker.rank=1.parallelly.parent=40774.9f46277f13e2.pid")'’
[17:39:22.071] - Possible to infer worker's PID: TRUE
[17:39:22.071] [local output] Rscript port: 11071

[17:39:22.071] [local output]  - Node 2 of 2 ...
[17:39:22.072] [local output] localMachine=TRUE => revtunnel=FALSE

[17:39:22.072] [local output] Rscript port: 11071

[17:39:22.073] [local output] Getting setup options for 2 cluster nodes ... done
[17:39:22.073] [local output]  - Parallel setup requested for some PSOCK nodes
[17:39:22.073] [local output] Setting up PSOCK nodes in parallel
[17:39:22.073] List of 36
[17:39:22.073]  $ worker          : chr "localhost"
[17:39:22.073]   ..- attr(*, "localhost")= logi TRUE
[17:39:22.073]  $ master          : chr "localhost"
[17:39:22.073]  $ port            : int 11071
[17:39:22.073]  $ connectTimeout  : num 120
[17:39:22.073]  $ timeout         : num 2592000
[17:39:22.073]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:39:22.073]  $ homogeneous     : logi TRUE
[17:39:22.073]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:39:22.073]  $ rscript_envs    : NULL
[17:39:22.073]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:22.073]  $ rscript_startup : NULL
[17:39:22.073]  $ rscript_sh      : chr "sh"
[17:39:22.073]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:22.073]  $ methods         : logi TRUE
[17:39:22.073]  $ socketOptions   : chr "no-delay"
[17:39:22.073]  $ useXDR          : logi FALSE
[17:39:22.073]  $ outfile         : chr "/dev/null"
[17:39:22.073]  $ renice          : int NA
[17:39:22.073]  $ rshcmd          : NULL
[17:39:22.073]  $ user            : chr(0) 
[17:39:22.073]  $ revtunnel       : logi FALSE
[17:39:22.073]  $ rshlogfile      : NULL
[17:39:22.073]  $ rshopts         : chr(0) 
[17:39:22.073]  $ rank            : int 1
[17:39:22.073]  $ manual          : logi FALSE
[17:39:22.073]  $ dryrun          : logi FALSE
[17:39:22.073]  $ quiet           : logi FALSE
[17:39:22.073]  $ setup_strategy  : chr "parallel"
[17:39:22.073]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:22.073]  $ pidfile         : chr "/tmp/RtmpwpZk8w/worker.rank=1.parallelly.parent=40774.9f46277f13e2.pid"
[17:39:22.073]  $ rshcmd_label    : NULL
[17:39:22.073]  $ rsh_call        : NULL
[17:39:22.073]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:39:22.073]  $ localMachine    : logi TRUE
[17:39:22.073]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:39:22.073]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:39:22.073]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:39:22.073]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:39:22.073]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:39:22.073]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:39:22.073]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:39:22.073]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:39:22.073]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:39:22.073]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:39:22.073]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:39:22.073]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:39:22.073]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:39:22.073]  $ arguments       :List of 28
[17:39:22.073]   ..$ worker          : chr "localhost"
[17:39:22.073]   ..$ master          : NULL
[17:39:22.073]   ..$ port            : int 11071
[17:39:22.073]   ..$ connectTimeout  : num 120
[17:39:22.073]   ..$ timeout         : num 2592000
[17:39:22.073]   ..$ rscript         : NULL
[17:39:22.073]   ..$ homogeneous     : NULL
[17:39:22.073]   ..$ rscript_args    : NULL
[17:39:22.073]   ..$ rscript_envs    : NULL
[17:39:22.073]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:39:22.073]   ..$ rscript_startup : NULL
[17:39:22.073]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:39:22.073]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:39:22.073]   ..$ methods         : logi TRUE
[17:39:22.073]   ..$ socketOptions   : chr "no-delay"
[17:39:22.073]   ..$ useXDR          : logi FALSE
[17:39:22.073]   ..$ outfile         : chr "/dev/null"
[17:39:22.073]   ..$ renice          : int NA
[17:39:22.073]   ..$ rshcmd          : NULL
[17:39:22.073]   ..$ user            : NULL
[17:39:22.073]   ..$ revtunnel       : logi NA
[17:39:22.073]   ..$ rshlogfile      : NULL
[17:39:22.073]   ..$ rshopts         : NULL
[17:39:22.073]   ..$ rank            : int 1
[17:39:22.073]   ..$ manual          : logi FALSE
[17:39:22.073]   ..$ dryrun          : logi FALSE
[17:39:22.073]   ..$ quiet           : logi FALSE
[17:39:22.073]   ..$ setup_strategy  : chr "parallel"
[17:39:22.073]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:39:22.092] [local output] System call to launch all workers:
[17:39:22.092] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpwpZk8w/worker.rank=1.parallelly.parent=40774.9f46277f13e2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11071 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:39:22.092] [local output] Starting PSOCK main server
[17:39:22.098] [local output] Workers launched
[17:39:22.098] [local output] Waiting for workers to connect back
[17:39:22.098]  - [local output] 0 workers out of 2 ready
[17:39:22.338]  - [local output] 0 workers out of 2 ready
[17:39:22.338]  - [local output] 1 workers out of 2 ready
[17:39:22.346]  - [local output] 1 workers out of 2 ready
[17:39:22.347]  - [local output] 2 workers out of 2 ready
[17:39:22.347] [local output] Launching of workers completed
[17:39:22.347] [local output] Collecting session information from workers
[17:39:22.348] [local output]  - Worker #1 of 2
[17:39:22.348] [local output]  - Worker #2 of 2
[17:39:22.349] [local output] makeClusterPSOCK() ... done
[17:39:22.360] Packages needed by the future expression (n = 0): <none>
[17:39:22.360] Packages needed by future strategies (n = 0): <none>
[17:39:22.361] {
[17:39:22.361]     {
[17:39:22.361]         {
[17:39:22.361]             ...future.startTime <- base::Sys.time()
[17:39:22.361]             {
[17:39:22.361]                 {
[17:39:22.361]                   {
[17:39:22.361]                     {
[17:39:22.361]                       base::local({
[17:39:22.361]                         has_future <- base::requireNamespace("future", 
[17:39:22.361]                           quietly = TRUE)
[17:39:22.361]                         if (has_future) {
[17:39:22.361]                           ns <- base::getNamespace("future")
[17:39:22.361]                           version <- ns[[".package"]][["version"]]
[17:39:22.361]                           if (is.null(version)) 
[17:39:22.361]                             version <- utils::packageVersion("future")
[17:39:22.361]                         }
[17:39:22.361]                         else {
[17:39:22.361]                           version <- NULL
[17:39:22.361]                         }
[17:39:22.361]                         if (!has_future || version < "1.8.0") {
[17:39:22.361]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:22.361]                             "", base::R.version$version.string), 
[17:39:22.361]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:22.361]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:22.361]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:22.361]                               "release", "version")], collapse = " "), 
[17:39:22.361]                             hostname = base::Sys.info()[["nodename"]])
[17:39:22.361]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:22.361]                             info)
[17:39:22.361]                           info <- base::paste(info, collapse = "; ")
[17:39:22.361]                           if (!has_future) {
[17:39:22.361]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:22.361]                               info)
[17:39:22.361]                           }
[17:39:22.361]                           else {
[17:39:22.361]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:22.361]                               info, version)
[17:39:22.361]                           }
[17:39:22.361]                           base::stop(msg)
[17:39:22.361]                         }
[17:39:22.361]                       })
[17:39:22.361]                     }
[17:39:22.361]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:22.361]                     base::options(mc.cores = 1L)
[17:39:22.361]                   }
[17:39:22.361]                   ...future.strategy.old <- future::plan("list")
[17:39:22.361]                   options(future.plan = NULL)
[17:39:22.361]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.361]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:22.361]                 }
[17:39:22.361]                 ...future.workdir <- getwd()
[17:39:22.361]             }
[17:39:22.361]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:22.361]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:22.361]         }
[17:39:22.361]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:22.361]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:22.361]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:22.361]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:22.361]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:22.361]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:22.361]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:22.361]             base::names(...future.oldOptions))
[17:39:22.361]     }
[17:39:22.361]     if (FALSE) {
[17:39:22.361]     }
[17:39:22.361]     else {
[17:39:22.361]         if (TRUE) {
[17:39:22.361]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:22.361]                 open = "w")
[17:39:22.361]         }
[17:39:22.361]         else {
[17:39:22.361]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:22.361]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:22.361]         }
[17:39:22.361]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:22.361]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:22.361]             base::sink(type = "output", split = FALSE)
[17:39:22.361]             base::close(...future.stdout)
[17:39:22.361]         }, add = TRUE)
[17:39:22.361]     }
[17:39:22.361]     ...future.frame <- base::sys.nframe()
[17:39:22.361]     ...future.conditions <- base::list()
[17:39:22.361]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:22.361]     if (FALSE) {
[17:39:22.361]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:22.361]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:22.361]     }
[17:39:22.361]     ...future.result <- base::tryCatch({
[17:39:22.361]         base::withCallingHandlers({
[17:39:22.361]             ...future.value <- base::withVisible(base::local({
[17:39:22.361]                 ...future.makeSendCondition <- base::local({
[17:39:22.361]                   sendCondition <- NULL
[17:39:22.361]                   function(frame = 1L) {
[17:39:22.361]                     if (is.function(sendCondition)) 
[17:39:22.361]                       return(sendCondition)
[17:39:22.361]                     ns <- getNamespace("parallel")
[17:39:22.361]                     if (exists("sendData", mode = "function", 
[17:39:22.361]                       envir = ns)) {
[17:39:22.361]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:22.361]                         envir = ns)
[17:39:22.361]                       envir <- sys.frame(frame)
[17:39:22.361]                       master <- NULL
[17:39:22.361]                       while (!identical(envir, .GlobalEnv) && 
[17:39:22.361]                         !identical(envir, emptyenv())) {
[17:39:22.361]                         if (exists("master", mode = "list", envir = envir, 
[17:39:22.361]                           inherits = FALSE)) {
[17:39:22.361]                           master <- get("master", mode = "list", 
[17:39:22.361]                             envir = envir, inherits = FALSE)
[17:39:22.361]                           if (inherits(master, c("SOCKnode", 
[17:39:22.361]                             "SOCK0node"))) {
[17:39:22.361]                             sendCondition <<- function(cond) {
[17:39:22.361]                               data <- list(type = "VALUE", value = cond, 
[17:39:22.361]                                 success = TRUE)
[17:39:22.361]                               parallel_sendData(master, data)
[17:39:22.361]                             }
[17:39:22.361]                             return(sendCondition)
[17:39:22.361]                           }
[17:39:22.361]                         }
[17:39:22.361]                         frame <- frame + 1L
[17:39:22.361]                         envir <- sys.frame(frame)
[17:39:22.361]                       }
[17:39:22.361]                     }
[17:39:22.361]                     sendCondition <<- function(cond) NULL
[17:39:22.361]                   }
[17:39:22.361]                 })
[17:39:22.361]                 withCallingHandlers({
[17:39:22.361]                   NA
[17:39:22.361]                 }, immediateCondition = function(cond) {
[17:39:22.361]                   sendCondition <- ...future.makeSendCondition()
[17:39:22.361]                   sendCondition(cond)
[17:39:22.361]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.361]                   {
[17:39:22.361]                     inherits <- base::inherits
[17:39:22.361]                     invokeRestart <- base::invokeRestart
[17:39:22.361]                     is.null <- base::is.null
[17:39:22.361]                     muffled <- FALSE
[17:39:22.361]                     if (inherits(cond, "message")) {
[17:39:22.361]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:22.361]                       if (muffled) 
[17:39:22.361]                         invokeRestart("muffleMessage")
[17:39:22.361]                     }
[17:39:22.361]                     else if (inherits(cond, "warning")) {
[17:39:22.361]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:22.361]                       if (muffled) 
[17:39:22.361]                         invokeRestart("muffleWarning")
[17:39:22.361]                     }
[17:39:22.361]                     else if (inherits(cond, "condition")) {
[17:39:22.361]                       if (!is.null(pattern)) {
[17:39:22.361]                         computeRestarts <- base::computeRestarts
[17:39:22.361]                         grepl <- base::grepl
[17:39:22.361]                         restarts <- computeRestarts(cond)
[17:39:22.361]                         for (restart in restarts) {
[17:39:22.361]                           name <- restart$name
[17:39:22.361]                           if (is.null(name)) 
[17:39:22.361]                             next
[17:39:22.361]                           if (!grepl(pattern, name)) 
[17:39:22.361]                             next
[17:39:22.361]                           invokeRestart(restart)
[17:39:22.361]                           muffled <- TRUE
[17:39:22.361]                           break
[17:39:22.361]                         }
[17:39:22.361]                       }
[17:39:22.361]                     }
[17:39:22.361]                     invisible(muffled)
[17:39:22.361]                   }
[17:39:22.361]                   muffleCondition(cond)
[17:39:22.361]                 })
[17:39:22.361]             }))
[17:39:22.361]             future::FutureResult(value = ...future.value$value, 
[17:39:22.361]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.361]                   ...future.rng), globalenv = if (FALSE) 
[17:39:22.361]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:22.361]                     ...future.globalenv.names))
[17:39:22.361]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:22.361]         }, condition = base::local({
[17:39:22.361]             c <- base::c
[17:39:22.361]             inherits <- base::inherits
[17:39:22.361]             invokeRestart <- base::invokeRestart
[17:39:22.361]             length <- base::length
[17:39:22.361]             list <- base::list
[17:39:22.361]             seq.int <- base::seq.int
[17:39:22.361]             signalCondition <- base::signalCondition
[17:39:22.361]             sys.calls <- base::sys.calls
[17:39:22.361]             `[[` <- base::`[[`
[17:39:22.361]             `+` <- base::`+`
[17:39:22.361]             `<<-` <- base::`<<-`
[17:39:22.361]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:22.361]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:22.361]                   3L)]
[17:39:22.361]             }
[17:39:22.361]             function(cond) {
[17:39:22.361]                 is_error <- inherits(cond, "error")
[17:39:22.361]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:22.361]                   NULL)
[17:39:22.361]                 if (is_error) {
[17:39:22.361]                   sessionInformation <- function() {
[17:39:22.361]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:22.361]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:22.361]                       search = base::search(), system = base::Sys.info())
[17:39:22.361]                   }
[17:39:22.361]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.361]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:22.361]                     cond$call), session = sessionInformation(), 
[17:39:22.361]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:22.361]                   signalCondition(cond)
[17:39:22.361]                 }
[17:39:22.361]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:22.361]                 "immediateCondition"))) {
[17:39:22.361]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:22.361]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.361]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:22.361]                   if (TRUE && !signal) {
[17:39:22.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.361]                     {
[17:39:22.361]                       inherits <- base::inherits
[17:39:22.361]                       invokeRestart <- base::invokeRestart
[17:39:22.361]                       is.null <- base::is.null
[17:39:22.361]                       muffled <- FALSE
[17:39:22.361]                       if (inherits(cond, "message")) {
[17:39:22.361]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.361]                         if (muffled) 
[17:39:22.361]                           invokeRestart("muffleMessage")
[17:39:22.361]                       }
[17:39:22.361]                       else if (inherits(cond, "warning")) {
[17:39:22.361]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.361]                         if (muffled) 
[17:39:22.361]                           invokeRestart("muffleWarning")
[17:39:22.361]                       }
[17:39:22.361]                       else if (inherits(cond, "condition")) {
[17:39:22.361]                         if (!is.null(pattern)) {
[17:39:22.361]                           computeRestarts <- base::computeRestarts
[17:39:22.361]                           grepl <- base::grepl
[17:39:22.361]                           restarts <- computeRestarts(cond)
[17:39:22.361]                           for (restart in restarts) {
[17:39:22.361]                             name <- restart$name
[17:39:22.361]                             if (is.null(name)) 
[17:39:22.361]                               next
[17:39:22.361]                             if (!grepl(pattern, name)) 
[17:39:22.361]                               next
[17:39:22.361]                             invokeRestart(restart)
[17:39:22.361]                             muffled <- TRUE
[17:39:22.361]                             break
[17:39:22.361]                           }
[17:39:22.361]                         }
[17:39:22.361]                       }
[17:39:22.361]                       invisible(muffled)
[17:39:22.361]                     }
[17:39:22.361]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.361]                   }
[17:39:22.361]                 }
[17:39:22.361]                 else {
[17:39:22.361]                   if (TRUE) {
[17:39:22.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.361]                     {
[17:39:22.361]                       inherits <- base::inherits
[17:39:22.361]                       invokeRestart <- base::invokeRestart
[17:39:22.361]                       is.null <- base::is.null
[17:39:22.361]                       muffled <- FALSE
[17:39:22.361]                       if (inherits(cond, "message")) {
[17:39:22.361]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.361]                         if (muffled) 
[17:39:22.361]                           invokeRestart("muffleMessage")
[17:39:22.361]                       }
[17:39:22.361]                       else if (inherits(cond, "warning")) {
[17:39:22.361]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.361]                         if (muffled) 
[17:39:22.361]                           invokeRestart("muffleWarning")
[17:39:22.361]                       }
[17:39:22.361]                       else if (inherits(cond, "condition")) {
[17:39:22.361]                         if (!is.null(pattern)) {
[17:39:22.361]                           computeRestarts <- base::computeRestarts
[17:39:22.361]                           grepl <- base::grepl
[17:39:22.361]                           restarts <- computeRestarts(cond)
[17:39:22.361]                           for (restart in restarts) {
[17:39:22.361]                             name <- restart$name
[17:39:22.361]                             if (is.null(name)) 
[17:39:22.361]                               next
[17:39:22.361]                             if (!grepl(pattern, name)) 
[17:39:22.361]                               next
[17:39:22.361]                             invokeRestart(restart)
[17:39:22.361]                             muffled <- TRUE
[17:39:22.361]                             break
[17:39:22.361]                           }
[17:39:22.361]                         }
[17:39:22.361]                       }
[17:39:22.361]                       invisible(muffled)
[17:39:22.361]                     }
[17:39:22.361]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.361]                   }
[17:39:22.361]                 }
[17:39:22.361]             }
[17:39:22.361]         }))
[17:39:22.361]     }, error = function(ex) {
[17:39:22.361]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:22.361]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.361]                 ...future.rng), started = ...future.startTime, 
[17:39:22.361]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:22.361]             version = "1.8"), class = "FutureResult")
[17:39:22.361]     }, finally = {
[17:39:22.361]         if (!identical(...future.workdir, getwd())) 
[17:39:22.361]             setwd(...future.workdir)
[17:39:22.361]         {
[17:39:22.361]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:22.361]                 ...future.oldOptions$nwarnings <- NULL
[17:39:22.361]             }
[17:39:22.361]             base::options(...future.oldOptions)
[17:39:22.361]             if (.Platform$OS.type == "windows") {
[17:39:22.361]                 old_names <- names(...future.oldEnvVars)
[17:39:22.361]                 envs <- base::Sys.getenv()
[17:39:22.361]                 names <- names(envs)
[17:39:22.361]                 common <- intersect(names, old_names)
[17:39:22.361]                 added <- setdiff(names, old_names)
[17:39:22.361]                 removed <- setdiff(old_names, names)
[17:39:22.361]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:22.361]                   envs[common]]
[17:39:22.361]                 NAMES <- toupper(changed)
[17:39:22.361]                 args <- list()
[17:39:22.361]                 for (kk in seq_along(NAMES)) {
[17:39:22.361]                   name <- changed[[kk]]
[17:39:22.361]                   NAME <- NAMES[[kk]]
[17:39:22.361]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.361]                     next
[17:39:22.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.361]                 }
[17:39:22.361]                 NAMES <- toupper(added)
[17:39:22.361]                 for (kk in seq_along(NAMES)) {
[17:39:22.361]                   name <- added[[kk]]
[17:39:22.361]                   NAME <- NAMES[[kk]]
[17:39:22.361]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.361]                     next
[17:39:22.361]                   args[[name]] <- ""
[17:39:22.361]                 }
[17:39:22.361]                 NAMES <- toupper(removed)
[17:39:22.361]                 for (kk in seq_along(NAMES)) {
[17:39:22.361]                   name <- removed[[kk]]
[17:39:22.361]                   NAME <- NAMES[[kk]]
[17:39:22.361]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.361]                     next
[17:39:22.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.361]                 }
[17:39:22.361]                 if (length(args) > 0) 
[17:39:22.361]                   base::do.call(base::Sys.setenv, args = args)
[17:39:22.361]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:22.361]             }
[17:39:22.361]             else {
[17:39:22.361]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:22.361]             }
[17:39:22.361]             {
[17:39:22.361]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:22.361]                   0L) {
[17:39:22.361]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:22.361]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:22.361]                   base::options(opts)
[17:39:22.361]                 }
[17:39:22.361]                 {
[17:39:22.361]                   {
[17:39:22.361]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:22.361]                     NULL
[17:39:22.361]                   }
[17:39:22.361]                   options(future.plan = NULL)
[17:39:22.361]                   if (is.na(NA_character_)) 
[17:39:22.361]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.361]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:22.361]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:22.361]                     .init = FALSE)
[17:39:22.361]                 }
[17:39:22.361]             }
[17:39:22.361]         }
[17:39:22.361]     })
[17:39:22.361]     if (TRUE) {
[17:39:22.361]         base::sink(type = "output", split = FALSE)
[17:39:22.361]         if (TRUE) {
[17:39:22.361]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:22.361]         }
[17:39:22.361]         else {
[17:39:22.361]             ...future.result["stdout"] <- base::list(NULL)
[17:39:22.361]         }
[17:39:22.361]         base::close(...future.stdout)
[17:39:22.361]         ...future.stdout <- NULL
[17:39:22.361]     }
[17:39:22.361]     ...future.result$conditions <- ...future.conditions
[17:39:22.361]     ...future.result$finished <- base::Sys.time()
[17:39:22.361]     ...future.result
[17:39:22.361] }
[17:39:22.414] MultisessionFuture started
[17:39:22.414] result() for ClusterFuture ...
[17:39:22.415] receiveMessageFromWorker() for ClusterFuture ...
[17:39:22.415] - Validating connection of MultisessionFuture
[17:39:22.447] - received message: FutureResult
[17:39:22.447] - Received FutureResult
[17:39:22.447] - Erased future from FutureRegistry
[17:39:22.447] result() for ClusterFuture ...
[17:39:22.447] - result already collected: FutureResult
[17:39:22.447] result() for ClusterFuture ... done
[17:39:22.447] receiveMessageFromWorker() for ClusterFuture ... done
[17:39:22.448] result() for ClusterFuture ... done
[17:39:22.448] result() for ClusterFuture ...
[17:39:22.448] - result already collected: FutureResult
[17:39:22.448] result() for ClusterFuture ... done
[17:39:22.448] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:39:22.452] plan(): nbrOfWorkers() = 2
[17:39:22.455] getGlobalsAndPackages() ...
[17:39:22.456] 
[17:39:22.456] - globals: [0] <none>
[17:39:22.456] getGlobalsAndPackages() ... DONE
[17:39:22.467] Packages needed by the future expression (n = 0): <none>
[17:39:22.467] Packages needed by future strategies (n = 0): <none>
[17:39:22.468] {
[17:39:22.468]     {
[17:39:22.468]         {
[17:39:22.468]             ...future.startTime <- base::Sys.time()
[17:39:22.468]             {
[17:39:22.468]                 {
[17:39:22.468]                   {
[17:39:22.468]                     {
[17:39:22.468]                       base::local({
[17:39:22.468]                         has_future <- base::requireNamespace("future", 
[17:39:22.468]                           quietly = TRUE)
[17:39:22.468]                         if (has_future) {
[17:39:22.468]                           ns <- base::getNamespace("future")
[17:39:22.468]                           version <- ns[[".package"]][["version"]]
[17:39:22.468]                           if (is.null(version)) 
[17:39:22.468]                             version <- utils::packageVersion("future")
[17:39:22.468]                         }
[17:39:22.468]                         else {
[17:39:22.468]                           version <- NULL
[17:39:22.468]                         }
[17:39:22.468]                         if (!has_future || version < "1.8.0") {
[17:39:22.468]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:22.468]                             "", base::R.version$version.string), 
[17:39:22.468]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:22.468]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:22.468]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:22.468]                               "release", "version")], collapse = " "), 
[17:39:22.468]                             hostname = base::Sys.info()[["nodename"]])
[17:39:22.468]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:22.468]                             info)
[17:39:22.468]                           info <- base::paste(info, collapse = "; ")
[17:39:22.468]                           if (!has_future) {
[17:39:22.468]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:22.468]                               info)
[17:39:22.468]                           }
[17:39:22.468]                           else {
[17:39:22.468]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:22.468]                               info, version)
[17:39:22.468]                           }
[17:39:22.468]                           base::stop(msg)
[17:39:22.468]                         }
[17:39:22.468]                       })
[17:39:22.468]                     }
[17:39:22.468]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:22.468]                     base::options(mc.cores = 1L)
[17:39:22.468]                   }
[17:39:22.468]                   ...future.strategy.old <- future::plan("list")
[17:39:22.468]                   options(future.plan = NULL)
[17:39:22.468]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.468]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:22.468]                 }
[17:39:22.468]                 ...future.workdir <- getwd()
[17:39:22.468]             }
[17:39:22.468]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:22.468]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:22.468]         }
[17:39:22.468]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:22.468]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:22.468]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:22.468]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:22.468]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:22.468]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:22.468]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:22.468]             base::names(...future.oldOptions))
[17:39:22.468]     }
[17:39:22.468]     if (FALSE) {
[17:39:22.468]     }
[17:39:22.468]     else {
[17:39:22.468]         if (TRUE) {
[17:39:22.468]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:22.468]                 open = "w")
[17:39:22.468]         }
[17:39:22.468]         else {
[17:39:22.468]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:22.468]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:22.468]         }
[17:39:22.468]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:22.468]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:22.468]             base::sink(type = "output", split = FALSE)
[17:39:22.468]             base::close(...future.stdout)
[17:39:22.468]         }, add = TRUE)
[17:39:22.468]     }
[17:39:22.468]     ...future.frame <- base::sys.nframe()
[17:39:22.468]     ...future.conditions <- base::list()
[17:39:22.468]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:22.468]     if (FALSE) {
[17:39:22.468]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:22.468]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:22.468]     }
[17:39:22.468]     ...future.result <- base::tryCatch({
[17:39:22.468]         base::withCallingHandlers({
[17:39:22.468]             ...future.value <- base::withVisible(base::local({
[17:39:22.468]                 ...future.makeSendCondition <- base::local({
[17:39:22.468]                   sendCondition <- NULL
[17:39:22.468]                   function(frame = 1L) {
[17:39:22.468]                     if (is.function(sendCondition)) 
[17:39:22.468]                       return(sendCondition)
[17:39:22.468]                     ns <- getNamespace("parallel")
[17:39:22.468]                     if (exists("sendData", mode = "function", 
[17:39:22.468]                       envir = ns)) {
[17:39:22.468]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:22.468]                         envir = ns)
[17:39:22.468]                       envir <- sys.frame(frame)
[17:39:22.468]                       master <- NULL
[17:39:22.468]                       while (!identical(envir, .GlobalEnv) && 
[17:39:22.468]                         !identical(envir, emptyenv())) {
[17:39:22.468]                         if (exists("master", mode = "list", envir = envir, 
[17:39:22.468]                           inherits = FALSE)) {
[17:39:22.468]                           master <- get("master", mode = "list", 
[17:39:22.468]                             envir = envir, inherits = FALSE)
[17:39:22.468]                           if (inherits(master, c("SOCKnode", 
[17:39:22.468]                             "SOCK0node"))) {
[17:39:22.468]                             sendCondition <<- function(cond) {
[17:39:22.468]                               data <- list(type = "VALUE", value = cond, 
[17:39:22.468]                                 success = TRUE)
[17:39:22.468]                               parallel_sendData(master, data)
[17:39:22.468]                             }
[17:39:22.468]                             return(sendCondition)
[17:39:22.468]                           }
[17:39:22.468]                         }
[17:39:22.468]                         frame <- frame + 1L
[17:39:22.468]                         envir <- sys.frame(frame)
[17:39:22.468]                       }
[17:39:22.468]                     }
[17:39:22.468]                     sendCondition <<- function(cond) NULL
[17:39:22.468]                   }
[17:39:22.468]                 })
[17:39:22.468]                 withCallingHandlers({
[17:39:22.468]                   42
[17:39:22.468]                 }, immediateCondition = function(cond) {
[17:39:22.468]                   sendCondition <- ...future.makeSendCondition()
[17:39:22.468]                   sendCondition(cond)
[17:39:22.468]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.468]                   {
[17:39:22.468]                     inherits <- base::inherits
[17:39:22.468]                     invokeRestart <- base::invokeRestart
[17:39:22.468]                     is.null <- base::is.null
[17:39:22.468]                     muffled <- FALSE
[17:39:22.468]                     if (inherits(cond, "message")) {
[17:39:22.468]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:22.468]                       if (muffled) 
[17:39:22.468]                         invokeRestart("muffleMessage")
[17:39:22.468]                     }
[17:39:22.468]                     else if (inherits(cond, "warning")) {
[17:39:22.468]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:22.468]                       if (muffled) 
[17:39:22.468]                         invokeRestart("muffleWarning")
[17:39:22.468]                     }
[17:39:22.468]                     else if (inherits(cond, "condition")) {
[17:39:22.468]                       if (!is.null(pattern)) {
[17:39:22.468]                         computeRestarts <- base::computeRestarts
[17:39:22.468]                         grepl <- base::grepl
[17:39:22.468]                         restarts <- computeRestarts(cond)
[17:39:22.468]                         for (restart in restarts) {
[17:39:22.468]                           name <- restart$name
[17:39:22.468]                           if (is.null(name)) 
[17:39:22.468]                             next
[17:39:22.468]                           if (!grepl(pattern, name)) 
[17:39:22.468]                             next
[17:39:22.468]                           invokeRestart(restart)
[17:39:22.468]                           muffled <- TRUE
[17:39:22.468]                           break
[17:39:22.468]                         }
[17:39:22.468]                       }
[17:39:22.468]                     }
[17:39:22.468]                     invisible(muffled)
[17:39:22.468]                   }
[17:39:22.468]                   muffleCondition(cond)
[17:39:22.468]                 })
[17:39:22.468]             }))
[17:39:22.468]             future::FutureResult(value = ...future.value$value, 
[17:39:22.468]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.468]                   ...future.rng), globalenv = if (FALSE) 
[17:39:22.468]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:22.468]                     ...future.globalenv.names))
[17:39:22.468]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:22.468]         }, condition = base::local({
[17:39:22.468]             c <- base::c
[17:39:22.468]             inherits <- base::inherits
[17:39:22.468]             invokeRestart <- base::invokeRestart
[17:39:22.468]             length <- base::length
[17:39:22.468]             list <- base::list
[17:39:22.468]             seq.int <- base::seq.int
[17:39:22.468]             signalCondition <- base::signalCondition
[17:39:22.468]             sys.calls <- base::sys.calls
[17:39:22.468]             `[[` <- base::`[[`
[17:39:22.468]             `+` <- base::`+`
[17:39:22.468]             `<<-` <- base::`<<-`
[17:39:22.468]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:22.468]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:22.468]                   3L)]
[17:39:22.468]             }
[17:39:22.468]             function(cond) {
[17:39:22.468]                 is_error <- inherits(cond, "error")
[17:39:22.468]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:22.468]                   NULL)
[17:39:22.468]                 if (is_error) {
[17:39:22.468]                   sessionInformation <- function() {
[17:39:22.468]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:22.468]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:22.468]                       search = base::search(), system = base::Sys.info())
[17:39:22.468]                   }
[17:39:22.468]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.468]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:22.468]                     cond$call), session = sessionInformation(), 
[17:39:22.468]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:22.468]                   signalCondition(cond)
[17:39:22.468]                 }
[17:39:22.468]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:22.468]                 "immediateCondition"))) {
[17:39:22.468]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:22.468]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.468]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:22.468]                   if (TRUE && !signal) {
[17:39:22.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.468]                     {
[17:39:22.468]                       inherits <- base::inherits
[17:39:22.468]                       invokeRestart <- base::invokeRestart
[17:39:22.468]                       is.null <- base::is.null
[17:39:22.468]                       muffled <- FALSE
[17:39:22.468]                       if (inherits(cond, "message")) {
[17:39:22.468]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.468]                         if (muffled) 
[17:39:22.468]                           invokeRestart("muffleMessage")
[17:39:22.468]                       }
[17:39:22.468]                       else if (inherits(cond, "warning")) {
[17:39:22.468]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.468]                         if (muffled) 
[17:39:22.468]                           invokeRestart("muffleWarning")
[17:39:22.468]                       }
[17:39:22.468]                       else if (inherits(cond, "condition")) {
[17:39:22.468]                         if (!is.null(pattern)) {
[17:39:22.468]                           computeRestarts <- base::computeRestarts
[17:39:22.468]                           grepl <- base::grepl
[17:39:22.468]                           restarts <- computeRestarts(cond)
[17:39:22.468]                           for (restart in restarts) {
[17:39:22.468]                             name <- restart$name
[17:39:22.468]                             if (is.null(name)) 
[17:39:22.468]                               next
[17:39:22.468]                             if (!grepl(pattern, name)) 
[17:39:22.468]                               next
[17:39:22.468]                             invokeRestart(restart)
[17:39:22.468]                             muffled <- TRUE
[17:39:22.468]                             break
[17:39:22.468]                           }
[17:39:22.468]                         }
[17:39:22.468]                       }
[17:39:22.468]                       invisible(muffled)
[17:39:22.468]                     }
[17:39:22.468]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.468]                   }
[17:39:22.468]                 }
[17:39:22.468]                 else {
[17:39:22.468]                   if (TRUE) {
[17:39:22.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.468]                     {
[17:39:22.468]                       inherits <- base::inherits
[17:39:22.468]                       invokeRestart <- base::invokeRestart
[17:39:22.468]                       is.null <- base::is.null
[17:39:22.468]                       muffled <- FALSE
[17:39:22.468]                       if (inherits(cond, "message")) {
[17:39:22.468]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.468]                         if (muffled) 
[17:39:22.468]                           invokeRestart("muffleMessage")
[17:39:22.468]                       }
[17:39:22.468]                       else if (inherits(cond, "warning")) {
[17:39:22.468]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.468]                         if (muffled) 
[17:39:22.468]                           invokeRestart("muffleWarning")
[17:39:22.468]                       }
[17:39:22.468]                       else if (inherits(cond, "condition")) {
[17:39:22.468]                         if (!is.null(pattern)) {
[17:39:22.468]                           computeRestarts <- base::computeRestarts
[17:39:22.468]                           grepl <- base::grepl
[17:39:22.468]                           restarts <- computeRestarts(cond)
[17:39:22.468]                           for (restart in restarts) {
[17:39:22.468]                             name <- restart$name
[17:39:22.468]                             if (is.null(name)) 
[17:39:22.468]                               next
[17:39:22.468]                             if (!grepl(pattern, name)) 
[17:39:22.468]                               next
[17:39:22.468]                             invokeRestart(restart)
[17:39:22.468]                             muffled <- TRUE
[17:39:22.468]                             break
[17:39:22.468]                           }
[17:39:22.468]                         }
[17:39:22.468]                       }
[17:39:22.468]                       invisible(muffled)
[17:39:22.468]                     }
[17:39:22.468]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.468]                   }
[17:39:22.468]                 }
[17:39:22.468]             }
[17:39:22.468]         }))
[17:39:22.468]     }, error = function(ex) {
[17:39:22.468]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:22.468]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.468]                 ...future.rng), started = ...future.startTime, 
[17:39:22.468]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:22.468]             version = "1.8"), class = "FutureResult")
[17:39:22.468]     }, finally = {
[17:39:22.468]         if (!identical(...future.workdir, getwd())) 
[17:39:22.468]             setwd(...future.workdir)
[17:39:22.468]         {
[17:39:22.468]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:22.468]                 ...future.oldOptions$nwarnings <- NULL
[17:39:22.468]             }
[17:39:22.468]             base::options(...future.oldOptions)
[17:39:22.468]             if (.Platform$OS.type == "windows") {
[17:39:22.468]                 old_names <- names(...future.oldEnvVars)
[17:39:22.468]                 envs <- base::Sys.getenv()
[17:39:22.468]                 names <- names(envs)
[17:39:22.468]                 common <- intersect(names, old_names)
[17:39:22.468]                 added <- setdiff(names, old_names)
[17:39:22.468]                 removed <- setdiff(old_names, names)
[17:39:22.468]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:22.468]                   envs[common]]
[17:39:22.468]                 NAMES <- toupper(changed)
[17:39:22.468]                 args <- list()
[17:39:22.468]                 for (kk in seq_along(NAMES)) {
[17:39:22.468]                   name <- changed[[kk]]
[17:39:22.468]                   NAME <- NAMES[[kk]]
[17:39:22.468]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.468]                     next
[17:39:22.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.468]                 }
[17:39:22.468]                 NAMES <- toupper(added)
[17:39:22.468]                 for (kk in seq_along(NAMES)) {
[17:39:22.468]                   name <- added[[kk]]
[17:39:22.468]                   NAME <- NAMES[[kk]]
[17:39:22.468]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.468]                     next
[17:39:22.468]                   args[[name]] <- ""
[17:39:22.468]                 }
[17:39:22.468]                 NAMES <- toupper(removed)
[17:39:22.468]                 for (kk in seq_along(NAMES)) {
[17:39:22.468]                   name <- removed[[kk]]
[17:39:22.468]                   NAME <- NAMES[[kk]]
[17:39:22.468]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.468]                     next
[17:39:22.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.468]                 }
[17:39:22.468]                 if (length(args) > 0) 
[17:39:22.468]                   base::do.call(base::Sys.setenv, args = args)
[17:39:22.468]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:22.468]             }
[17:39:22.468]             else {
[17:39:22.468]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:22.468]             }
[17:39:22.468]             {
[17:39:22.468]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:22.468]                   0L) {
[17:39:22.468]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:22.468]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:22.468]                   base::options(opts)
[17:39:22.468]                 }
[17:39:22.468]                 {
[17:39:22.468]                   {
[17:39:22.468]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:22.468]                     NULL
[17:39:22.468]                   }
[17:39:22.468]                   options(future.plan = NULL)
[17:39:22.468]                   if (is.na(NA_character_)) 
[17:39:22.468]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.468]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:22.468]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:22.468]                     .init = FALSE)
[17:39:22.468]                 }
[17:39:22.468]             }
[17:39:22.468]         }
[17:39:22.468]     })
[17:39:22.468]     if (TRUE) {
[17:39:22.468]         base::sink(type = "output", split = FALSE)
[17:39:22.468]         if (TRUE) {
[17:39:22.468]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:22.468]         }
[17:39:22.468]         else {
[17:39:22.468]             ...future.result["stdout"] <- base::list(NULL)
[17:39:22.468]         }
[17:39:22.468]         base::close(...future.stdout)
[17:39:22.468]         ...future.stdout <- NULL
[17:39:22.468]     }
[17:39:22.468]     ...future.result$conditions <- ...future.conditions
[17:39:22.468]     ...future.result$finished <- base::Sys.time()
[17:39:22.468]     ...future.result
[17:39:22.468] }
[17:39:22.471] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:39:22.473] receiveMessageFromWorker() for ClusterFuture ...
[17:39:22.473] - Validating connection of MultisessionFuture
[17:39:22.474] - received message: FutureResult
[17:39:22.474] - Received FutureResult
[17:39:22.474] - Erased future from FutureRegistry
[17:39:22.474] result() for ClusterFuture ...
[17:39:22.474] - result already collected: FutureResult
[17:39:22.474] result() for ClusterFuture ... done
[17:39:22.474] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:22.475] result() for ClusterFuture ...
[17:39:22.475] - result already collected: FutureResult
[17:39:22.475] result() for ClusterFuture ... done
[17:39:22.475] result() for ClusterFuture ...
[17:39:22.475] - result already collected: FutureResult
[17:39:22.475] result() for ClusterFuture ... done
[17:39:22.475] getGlobalsAndPackages() ...
[17:39:22.475] Searching for globals...
[17:39:22.476] 
[17:39:22.476] Searching for globals ... DONE
[17:39:22.476] - globals: [0] <none>
[17:39:22.476] getGlobalsAndPackages() ... DONE
[17:39:22.476] run() for ‘Future’ ...
[17:39:22.477] - state: ‘created’
[17:39:22.477] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:22.491] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:22.491] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:22.491]   - Field: ‘node’
[17:39:22.491]   - Field: ‘label’
[17:39:22.492]   - Field: ‘local’
[17:39:22.492]   - Field: ‘owner’
[17:39:22.492]   - Field: ‘envir’
[17:39:22.492]   - Field: ‘workers’
[17:39:22.492]   - Field: ‘packages’
[17:39:22.492]   - Field: ‘gc’
[17:39:22.492]   - Field: ‘conditions’
[17:39:22.492]   - Field: ‘persistent’
[17:39:22.492]   - Field: ‘expr’
[17:39:22.492]   - Field: ‘uuid’
[17:39:22.493]   - Field: ‘seed’
[17:39:22.493]   - Field: ‘version’
[17:39:22.493]   - Field: ‘result’
[17:39:22.493]   - Field: ‘asynchronous’
[17:39:22.493]   - Field: ‘calls’
[17:39:22.493]   - Field: ‘globals’
[17:39:22.493]   - Field: ‘stdout’
[17:39:22.493]   - Field: ‘earlySignal’
[17:39:22.493]   - Field: ‘lazy’
[17:39:22.494]   - Field: ‘state’
[17:39:22.494] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:22.494] - Launch lazy future ...
[17:39:22.494] Packages needed by the future expression (n = 0): <none>
[17:39:22.494] Packages needed by future strategies (n = 0): <none>
[17:39:22.495] {
[17:39:22.495]     {
[17:39:22.495]         {
[17:39:22.495]             ...future.startTime <- base::Sys.time()
[17:39:22.495]             {
[17:39:22.495]                 {
[17:39:22.495]                   {
[17:39:22.495]                     {
[17:39:22.495]                       base::local({
[17:39:22.495]                         has_future <- base::requireNamespace("future", 
[17:39:22.495]                           quietly = TRUE)
[17:39:22.495]                         if (has_future) {
[17:39:22.495]                           ns <- base::getNamespace("future")
[17:39:22.495]                           version <- ns[[".package"]][["version"]]
[17:39:22.495]                           if (is.null(version)) 
[17:39:22.495]                             version <- utils::packageVersion("future")
[17:39:22.495]                         }
[17:39:22.495]                         else {
[17:39:22.495]                           version <- NULL
[17:39:22.495]                         }
[17:39:22.495]                         if (!has_future || version < "1.8.0") {
[17:39:22.495]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:22.495]                             "", base::R.version$version.string), 
[17:39:22.495]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:22.495]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:22.495]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:22.495]                               "release", "version")], collapse = " "), 
[17:39:22.495]                             hostname = base::Sys.info()[["nodename"]])
[17:39:22.495]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:22.495]                             info)
[17:39:22.495]                           info <- base::paste(info, collapse = "; ")
[17:39:22.495]                           if (!has_future) {
[17:39:22.495]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:22.495]                               info)
[17:39:22.495]                           }
[17:39:22.495]                           else {
[17:39:22.495]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:22.495]                               info, version)
[17:39:22.495]                           }
[17:39:22.495]                           base::stop(msg)
[17:39:22.495]                         }
[17:39:22.495]                       })
[17:39:22.495]                     }
[17:39:22.495]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:22.495]                     base::options(mc.cores = 1L)
[17:39:22.495]                   }
[17:39:22.495]                   ...future.strategy.old <- future::plan("list")
[17:39:22.495]                   options(future.plan = NULL)
[17:39:22.495]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.495]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:22.495]                 }
[17:39:22.495]                 ...future.workdir <- getwd()
[17:39:22.495]             }
[17:39:22.495]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:22.495]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:22.495]         }
[17:39:22.495]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:22.495]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:22.495]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:22.495]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:22.495]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:22.495]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:22.495]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:22.495]             base::names(...future.oldOptions))
[17:39:22.495]     }
[17:39:22.495]     if (FALSE) {
[17:39:22.495]     }
[17:39:22.495]     else {
[17:39:22.495]         if (TRUE) {
[17:39:22.495]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:22.495]                 open = "w")
[17:39:22.495]         }
[17:39:22.495]         else {
[17:39:22.495]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:22.495]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:22.495]         }
[17:39:22.495]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:22.495]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:22.495]             base::sink(type = "output", split = FALSE)
[17:39:22.495]             base::close(...future.stdout)
[17:39:22.495]         }, add = TRUE)
[17:39:22.495]     }
[17:39:22.495]     ...future.frame <- base::sys.nframe()
[17:39:22.495]     ...future.conditions <- base::list()
[17:39:22.495]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:22.495]     if (FALSE) {
[17:39:22.495]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:22.495]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:22.495]     }
[17:39:22.495]     ...future.result <- base::tryCatch({
[17:39:22.495]         base::withCallingHandlers({
[17:39:22.495]             ...future.value <- base::withVisible(base::local({
[17:39:22.495]                 ...future.makeSendCondition <- base::local({
[17:39:22.495]                   sendCondition <- NULL
[17:39:22.495]                   function(frame = 1L) {
[17:39:22.495]                     if (is.function(sendCondition)) 
[17:39:22.495]                       return(sendCondition)
[17:39:22.495]                     ns <- getNamespace("parallel")
[17:39:22.495]                     if (exists("sendData", mode = "function", 
[17:39:22.495]                       envir = ns)) {
[17:39:22.495]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:22.495]                         envir = ns)
[17:39:22.495]                       envir <- sys.frame(frame)
[17:39:22.495]                       master <- NULL
[17:39:22.495]                       while (!identical(envir, .GlobalEnv) && 
[17:39:22.495]                         !identical(envir, emptyenv())) {
[17:39:22.495]                         if (exists("master", mode = "list", envir = envir, 
[17:39:22.495]                           inherits = FALSE)) {
[17:39:22.495]                           master <- get("master", mode = "list", 
[17:39:22.495]                             envir = envir, inherits = FALSE)
[17:39:22.495]                           if (inherits(master, c("SOCKnode", 
[17:39:22.495]                             "SOCK0node"))) {
[17:39:22.495]                             sendCondition <<- function(cond) {
[17:39:22.495]                               data <- list(type = "VALUE", value = cond, 
[17:39:22.495]                                 success = TRUE)
[17:39:22.495]                               parallel_sendData(master, data)
[17:39:22.495]                             }
[17:39:22.495]                             return(sendCondition)
[17:39:22.495]                           }
[17:39:22.495]                         }
[17:39:22.495]                         frame <- frame + 1L
[17:39:22.495]                         envir <- sys.frame(frame)
[17:39:22.495]                       }
[17:39:22.495]                     }
[17:39:22.495]                     sendCondition <<- function(cond) NULL
[17:39:22.495]                   }
[17:39:22.495]                 })
[17:39:22.495]                 withCallingHandlers({
[17:39:22.495]                   42
[17:39:22.495]                 }, immediateCondition = function(cond) {
[17:39:22.495]                   sendCondition <- ...future.makeSendCondition()
[17:39:22.495]                   sendCondition(cond)
[17:39:22.495]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.495]                   {
[17:39:22.495]                     inherits <- base::inherits
[17:39:22.495]                     invokeRestart <- base::invokeRestart
[17:39:22.495]                     is.null <- base::is.null
[17:39:22.495]                     muffled <- FALSE
[17:39:22.495]                     if (inherits(cond, "message")) {
[17:39:22.495]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:22.495]                       if (muffled) 
[17:39:22.495]                         invokeRestart("muffleMessage")
[17:39:22.495]                     }
[17:39:22.495]                     else if (inherits(cond, "warning")) {
[17:39:22.495]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:22.495]                       if (muffled) 
[17:39:22.495]                         invokeRestart("muffleWarning")
[17:39:22.495]                     }
[17:39:22.495]                     else if (inherits(cond, "condition")) {
[17:39:22.495]                       if (!is.null(pattern)) {
[17:39:22.495]                         computeRestarts <- base::computeRestarts
[17:39:22.495]                         grepl <- base::grepl
[17:39:22.495]                         restarts <- computeRestarts(cond)
[17:39:22.495]                         for (restart in restarts) {
[17:39:22.495]                           name <- restart$name
[17:39:22.495]                           if (is.null(name)) 
[17:39:22.495]                             next
[17:39:22.495]                           if (!grepl(pattern, name)) 
[17:39:22.495]                             next
[17:39:22.495]                           invokeRestart(restart)
[17:39:22.495]                           muffled <- TRUE
[17:39:22.495]                           break
[17:39:22.495]                         }
[17:39:22.495]                       }
[17:39:22.495]                     }
[17:39:22.495]                     invisible(muffled)
[17:39:22.495]                   }
[17:39:22.495]                   muffleCondition(cond)
[17:39:22.495]                 })
[17:39:22.495]             }))
[17:39:22.495]             future::FutureResult(value = ...future.value$value, 
[17:39:22.495]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.495]                   ...future.rng), globalenv = if (FALSE) 
[17:39:22.495]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:22.495]                     ...future.globalenv.names))
[17:39:22.495]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:22.495]         }, condition = base::local({
[17:39:22.495]             c <- base::c
[17:39:22.495]             inherits <- base::inherits
[17:39:22.495]             invokeRestart <- base::invokeRestart
[17:39:22.495]             length <- base::length
[17:39:22.495]             list <- base::list
[17:39:22.495]             seq.int <- base::seq.int
[17:39:22.495]             signalCondition <- base::signalCondition
[17:39:22.495]             sys.calls <- base::sys.calls
[17:39:22.495]             `[[` <- base::`[[`
[17:39:22.495]             `+` <- base::`+`
[17:39:22.495]             `<<-` <- base::`<<-`
[17:39:22.495]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:22.495]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:22.495]                   3L)]
[17:39:22.495]             }
[17:39:22.495]             function(cond) {
[17:39:22.495]                 is_error <- inherits(cond, "error")
[17:39:22.495]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:22.495]                   NULL)
[17:39:22.495]                 if (is_error) {
[17:39:22.495]                   sessionInformation <- function() {
[17:39:22.495]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:22.495]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:22.495]                       search = base::search(), system = base::Sys.info())
[17:39:22.495]                   }
[17:39:22.495]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.495]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:22.495]                     cond$call), session = sessionInformation(), 
[17:39:22.495]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:22.495]                   signalCondition(cond)
[17:39:22.495]                 }
[17:39:22.495]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:22.495]                 "immediateCondition"))) {
[17:39:22.495]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:22.495]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.495]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:22.495]                   if (TRUE && !signal) {
[17:39:22.495]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.495]                     {
[17:39:22.495]                       inherits <- base::inherits
[17:39:22.495]                       invokeRestart <- base::invokeRestart
[17:39:22.495]                       is.null <- base::is.null
[17:39:22.495]                       muffled <- FALSE
[17:39:22.495]                       if (inherits(cond, "message")) {
[17:39:22.495]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.495]                         if (muffled) 
[17:39:22.495]                           invokeRestart("muffleMessage")
[17:39:22.495]                       }
[17:39:22.495]                       else if (inherits(cond, "warning")) {
[17:39:22.495]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.495]                         if (muffled) 
[17:39:22.495]                           invokeRestart("muffleWarning")
[17:39:22.495]                       }
[17:39:22.495]                       else if (inherits(cond, "condition")) {
[17:39:22.495]                         if (!is.null(pattern)) {
[17:39:22.495]                           computeRestarts <- base::computeRestarts
[17:39:22.495]                           grepl <- base::grepl
[17:39:22.495]                           restarts <- computeRestarts(cond)
[17:39:22.495]                           for (restart in restarts) {
[17:39:22.495]                             name <- restart$name
[17:39:22.495]                             if (is.null(name)) 
[17:39:22.495]                               next
[17:39:22.495]                             if (!grepl(pattern, name)) 
[17:39:22.495]                               next
[17:39:22.495]                             invokeRestart(restart)
[17:39:22.495]                             muffled <- TRUE
[17:39:22.495]                             break
[17:39:22.495]                           }
[17:39:22.495]                         }
[17:39:22.495]                       }
[17:39:22.495]                       invisible(muffled)
[17:39:22.495]                     }
[17:39:22.495]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.495]                   }
[17:39:22.495]                 }
[17:39:22.495]                 else {
[17:39:22.495]                   if (TRUE) {
[17:39:22.495]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.495]                     {
[17:39:22.495]                       inherits <- base::inherits
[17:39:22.495]                       invokeRestart <- base::invokeRestart
[17:39:22.495]                       is.null <- base::is.null
[17:39:22.495]                       muffled <- FALSE
[17:39:22.495]                       if (inherits(cond, "message")) {
[17:39:22.495]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.495]                         if (muffled) 
[17:39:22.495]                           invokeRestart("muffleMessage")
[17:39:22.495]                       }
[17:39:22.495]                       else if (inherits(cond, "warning")) {
[17:39:22.495]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.495]                         if (muffled) 
[17:39:22.495]                           invokeRestart("muffleWarning")
[17:39:22.495]                       }
[17:39:22.495]                       else if (inherits(cond, "condition")) {
[17:39:22.495]                         if (!is.null(pattern)) {
[17:39:22.495]                           computeRestarts <- base::computeRestarts
[17:39:22.495]                           grepl <- base::grepl
[17:39:22.495]                           restarts <- computeRestarts(cond)
[17:39:22.495]                           for (restart in restarts) {
[17:39:22.495]                             name <- restart$name
[17:39:22.495]                             if (is.null(name)) 
[17:39:22.495]                               next
[17:39:22.495]                             if (!grepl(pattern, name)) 
[17:39:22.495]                               next
[17:39:22.495]                             invokeRestart(restart)
[17:39:22.495]                             muffled <- TRUE
[17:39:22.495]                             break
[17:39:22.495]                           }
[17:39:22.495]                         }
[17:39:22.495]                       }
[17:39:22.495]                       invisible(muffled)
[17:39:22.495]                     }
[17:39:22.495]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.495]                   }
[17:39:22.495]                 }
[17:39:22.495]             }
[17:39:22.495]         }))
[17:39:22.495]     }, error = function(ex) {
[17:39:22.495]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:22.495]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.495]                 ...future.rng), started = ...future.startTime, 
[17:39:22.495]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:22.495]             version = "1.8"), class = "FutureResult")
[17:39:22.495]     }, finally = {
[17:39:22.495]         if (!identical(...future.workdir, getwd())) 
[17:39:22.495]             setwd(...future.workdir)
[17:39:22.495]         {
[17:39:22.495]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:22.495]                 ...future.oldOptions$nwarnings <- NULL
[17:39:22.495]             }
[17:39:22.495]             base::options(...future.oldOptions)
[17:39:22.495]             if (.Platform$OS.type == "windows") {
[17:39:22.495]                 old_names <- names(...future.oldEnvVars)
[17:39:22.495]                 envs <- base::Sys.getenv()
[17:39:22.495]                 names <- names(envs)
[17:39:22.495]                 common <- intersect(names, old_names)
[17:39:22.495]                 added <- setdiff(names, old_names)
[17:39:22.495]                 removed <- setdiff(old_names, names)
[17:39:22.495]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:22.495]                   envs[common]]
[17:39:22.495]                 NAMES <- toupper(changed)
[17:39:22.495]                 args <- list()
[17:39:22.495]                 for (kk in seq_along(NAMES)) {
[17:39:22.495]                   name <- changed[[kk]]
[17:39:22.495]                   NAME <- NAMES[[kk]]
[17:39:22.495]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.495]                     next
[17:39:22.495]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.495]                 }
[17:39:22.495]                 NAMES <- toupper(added)
[17:39:22.495]                 for (kk in seq_along(NAMES)) {
[17:39:22.495]                   name <- added[[kk]]
[17:39:22.495]                   NAME <- NAMES[[kk]]
[17:39:22.495]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.495]                     next
[17:39:22.495]                   args[[name]] <- ""
[17:39:22.495]                 }
[17:39:22.495]                 NAMES <- toupper(removed)
[17:39:22.495]                 for (kk in seq_along(NAMES)) {
[17:39:22.495]                   name <- removed[[kk]]
[17:39:22.495]                   NAME <- NAMES[[kk]]
[17:39:22.495]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.495]                     next
[17:39:22.495]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.495]                 }
[17:39:22.495]                 if (length(args) > 0) 
[17:39:22.495]                   base::do.call(base::Sys.setenv, args = args)
[17:39:22.495]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:22.495]             }
[17:39:22.495]             else {
[17:39:22.495]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:22.495]             }
[17:39:22.495]             {
[17:39:22.495]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:22.495]                   0L) {
[17:39:22.495]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:22.495]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:22.495]                   base::options(opts)
[17:39:22.495]                 }
[17:39:22.495]                 {
[17:39:22.495]                   {
[17:39:22.495]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:22.495]                     NULL
[17:39:22.495]                   }
[17:39:22.495]                   options(future.plan = NULL)
[17:39:22.495]                   if (is.na(NA_character_)) 
[17:39:22.495]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.495]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:22.495]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:22.495]                     .init = FALSE)
[17:39:22.495]                 }
[17:39:22.495]             }
[17:39:22.495]         }
[17:39:22.495]     })
[17:39:22.495]     if (TRUE) {
[17:39:22.495]         base::sink(type = "output", split = FALSE)
[17:39:22.495]         if (TRUE) {
[17:39:22.495]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:22.495]         }
[17:39:22.495]         else {
[17:39:22.495]             ...future.result["stdout"] <- base::list(NULL)
[17:39:22.495]         }
[17:39:22.495]         base::close(...future.stdout)
[17:39:22.495]         ...future.stdout <- NULL
[17:39:22.495]     }
[17:39:22.495]     ...future.result$conditions <- ...future.conditions
[17:39:22.495]     ...future.result$finished <- base::Sys.time()
[17:39:22.495]     ...future.result
[17:39:22.495] }
[17:39:22.498] MultisessionFuture started
[17:39:22.498] - Launch lazy future ... done
[17:39:22.499] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:39:22.504] receiveMessageFromWorker() for ClusterFuture ...
[17:39:22.504] - Validating connection of MultisessionFuture
[17:39:22.504] - received message: FutureResult
[17:39:22.505] - Received FutureResult
[17:39:22.505] - Erased future from FutureRegistry
[17:39:22.505] result() for ClusterFuture ...
[17:39:22.505] - result already collected: FutureResult
[17:39:22.505] result() for ClusterFuture ... done
[17:39:22.505] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:22.505] result() for ClusterFuture ...
[17:39:22.505] - result already collected: FutureResult
[17:39:22.506] result() for ClusterFuture ... done
[17:39:22.506] result() for ClusterFuture ...
[17:39:22.506] - result already collected: FutureResult
[17:39:22.506] result() for ClusterFuture ... done
[17:39:22.506] getGlobalsAndPackages() ...
[17:39:22.506] Searching for globals...
[17:39:22.507] - globals found: [1] ‘{’
[17:39:22.507] Searching for globals ... DONE
[17:39:22.507] Resolving globals: FALSE
[17:39:22.508] 
[17:39:22.508] 
[17:39:22.508] getGlobalsAndPackages() ... DONE
[17:39:22.508] run() for ‘Future’ ...
[17:39:22.508] - state: ‘created’
[17:39:22.509] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:22.523] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:22.523] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:22.523]   - Field: ‘node’
[17:39:22.524]   - Field: ‘label’
[17:39:22.524]   - Field: ‘local’
[17:39:22.524]   - Field: ‘owner’
[17:39:22.524]   - Field: ‘envir’
[17:39:22.524]   - Field: ‘workers’
[17:39:22.524]   - Field: ‘packages’
[17:39:22.524]   - Field: ‘gc’
[17:39:22.524]   - Field: ‘conditions’
[17:39:22.524]   - Field: ‘persistent’
[17:39:22.525]   - Field: ‘expr’
[17:39:22.525]   - Field: ‘uuid’
[17:39:22.525]   - Field: ‘seed’
[17:39:22.525]   - Field: ‘version’
[17:39:22.525]   - Field: ‘result’
[17:39:22.525]   - Field: ‘asynchronous’
[17:39:22.525]   - Field: ‘calls’
[17:39:22.525]   - Field: ‘globals’
[17:39:22.525]   - Field: ‘stdout’
[17:39:22.526]   - Field: ‘earlySignal’
[17:39:22.526]   - Field: ‘lazy’
[17:39:22.526]   - Field: ‘state’
[17:39:22.526] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:22.526] - Launch lazy future ...
[17:39:22.526] Packages needed by the future expression (n = 0): <none>
[17:39:22.527] Packages needed by future strategies (n = 0): <none>
[17:39:22.527] {
[17:39:22.527]     {
[17:39:22.527]         {
[17:39:22.527]             ...future.startTime <- base::Sys.time()
[17:39:22.527]             {
[17:39:22.527]                 {
[17:39:22.527]                   {
[17:39:22.527]                     {
[17:39:22.527]                       base::local({
[17:39:22.527]                         has_future <- base::requireNamespace("future", 
[17:39:22.527]                           quietly = TRUE)
[17:39:22.527]                         if (has_future) {
[17:39:22.527]                           ns <- base::getNamespace("future")
[17:39:22.527]                           version <- ns[[".package"]][["version"]]
[17:39:22.527]                           if (is.null(version)) 
[17:39:22.527]                             version <- utils::packageVersion("future")
[17:39:22.527]                         }
[17:39:22.527]                         else {
[17:39:22.527]                           version <- NULL
[17:39:22.527]                         }
[17:39:22.527]                         if (!has_future || version < "1.8.0") {
[17:39:22.527]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:22.527]                             "", base::R.version$version.string), 
[17:39:22.527]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:22.527]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:22.527]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:22.527]                               "release", "version")], collapse = " "), 
[17:39:22.527]                             hostname = base::Sys.info()[["nodename"]])
[17:39:22.527]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:22.527]                             info)
[17:39:22.527]                           info <- base::paste(info, collapse = "; ")
[17:39:22.527]                           if (!has_future) {
[17:39:22.527]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:22.527]                               info)
[17:39:22.527]                           }
[17:39:22.527]                           else {
[17:39:22.527]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:22.527]                               info, version)
[17:39:22.527]                           }
[17:39:22.527]                           base::stop(msg)
[17:39:22.527]                         }
[17:39:22.527]                       })
[17:39:22.527]                     }
[17:39:22.527]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:22.527]                     base::options(mc.cores = 1L)
[17:39:22.527]                   }
[17:39:22.527]                   ...future.strategy.old <- future::plan("list")
[17:39:22.527]                   options(future.plan = NULL)
[17:39:22.527]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.527]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:22.527]                 }
[17:39:22.527]                 ...future.workdir <- getwd()
[17:39:22.527]             }
[17:39:22.527]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:22.527]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:22.527]         }
[17:39:22.527]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:22.527]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:22.527]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:22.527]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:22.527]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:22.527]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:22.527]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:22.527]             base::names(...future.oldOptions))
[17:39:22.527]     }
[17:39:22.527]     if (FALSE) {
[17:39:22.527]     }
[17:39:22.527]     else {
[17:39:22.527]         if (TRUE) {
[17:39:22.527]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:22.527]                 open = "w")
[17:39:22.527]         }
[17:39:22.527]         else {
[17:39:22.527]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:22.527]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:22.527]         }
[17:39:22.527]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:22.527]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:22.527]             base::sink(type = "output", split = FALSE)
[17:39:22.527]             base::close(...future.stdout)
[17:39:22.527]         }, add = TRUE)
[17:39:22.527]     }
[17:39:22.527]     ...future.frame <- base::sys.nframe()
[17:39:22.527]     ...future.conditions <- base::list()
[17:39:22.527]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:22.527]     if (FALSE) {
[17:39:22.527]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:22.527]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:22.527]     }
[17:39:22.527]     ...future.result <- base::tryCatch({
[17:39:22.527]         base::withCallingHandlers({
[17:39:22.527]             ...future.value <- base::withVisible(base::local({
[17:39:22.527]                 ...future.makeSendCondition <- base::local({
[17:39:22.527]                   sendCondition <- NULL
[17:39:22.527]                   function(frame = 1L) {
[17:39:22.527]                     if (is.function(sendCondition)) 
[17:39:22.527]                       return(sendCondition)
[17:39:22.527]                     ns <- getNamespace("parallel")
[17:39:22.527]                     if (exists("sendData", mode = "function", 
[17:39:22.527]                       envir = ns)) {
[17:39:22.527]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:22.527]                         envir = ns)
[17:39:22.527]                       envir <- sys.frame(frame)
[17:39:22.527]                       master <- NULL
[17:39:22.527]                       while (!identical(envir, .GlobalEnv) && 
[17:39:22.527]                         !identical(envir, emptyenv())) {
[17:39:22.527]                         if (exists("master", mode = "list", envir = envir, 
[17:39:22.527]                           inherits = FALSE)) {
[17:39:22.527]                           master <- get("master", mode = "list", 
[17:39:22.527]                             envir = envir, inherits = FALSE)
[17:39:22.527]                           if (inherits(master, c("SOCKnode", 
[17:39:22.527]                             "SOCK0node"))) {
[17:39:22.527]                             sendCondition <<- function(cond) {
[17:39:22.527]                               data <- list(type = "VALUE", value = cond, 
[17:39:22.527]                                 success = TRUE)
[17:39:22.527]                               parallel_sendData(master, data)
[17:39:22.527]                             }
[17:39:22.527]                             return(sendCondition)
[17:39:22.527]                           }
[17:39:22.527]                         }
[17:39:22.527]                         frame <- frame + 1L
[17:39:22.527]                         envir <- sys.frame(frame)
[17:39:22.527]                       }
[17:39:22.527]                     }
[17:39:22.527]                     sendCondition <<- function(cond) NULL
[17:39:22.527]                   }
[17:39:22.527]                 })
[17:39:22.527]                 withCallingHandlers({
[17:39:22.527]                   {
[17:39:22.527]                     42
[17:39:22.527]                   }
[17:39:22.527]                 }, immediateCondition = function(cond) {
[17:39:22.527]                   sendCondition <- ...future.makeSendCondition()
[17:39:22.527]                   sendCondition(cond)
[17:39:22.527]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.527]                   {
[17:39:22.527]                     inherits <- base::inherits
[17:39:22.527]                     invokeRestart <- base::invokeRestart
[17:39:22.527]                     is.null <- base::is.null
[17:39:22.527]                     muffled <- FALSE
[17:39:22.527]                     if (inherits(cond, "message")) {
[17:39:22.527]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:22.527]                       if (muffled) 
[17:39:22.527]                         invokeRestart("muffleMessage")
[17:39:22.527]                     }
[17:39:22.527]                     else if (inherits(cond, "warning")) {
[17:39:22.527]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:22.527]                       if (muffled) 
[17:39:22.527]                         invokeRestart("muffleWarning")
[17:39:22.527]                     }
[17:39:22.527]                     else if (inherits(cond, "condition")) {
[17:39:22.527]                       if (!is.null(pattern)) {
[17:39:22.527]                         computeRestarts <- base::computeRestarts
[17:39:22.527]                         grepl <- base::grepl
[17:39:22.527]                         restarts <- computeRestarts(cond)
[17:39:22.527]                         for (restart in restarts) {
[17:39:22.527]                           name <- restart$name
[17:39:22.527]                           if (is.null(name)) 
[17:39:22.527]                             next
[17:39:22.527]                           if (!grepl(pattern, name)) 
[17:39:22.527]                             next
[17:39:22.527]                           invokeRestart(restart)
[17:39:22.527]                           muffled <- TRUE
[17:39:22.527]                           break
[17:39:22.527]                         }
[17:39:22.527]                       }
[17:39:22.527]                     }
[17:39:22.527]                     invisible(muffled)
[17:39:22.527]                   }
[17:39:22.527]                   muffleCondition(cond)
[17:39:22.527]                 })
[17:39:22.527]             }))
[17:39:22.527]             future::FutureResult(value = ...future.value$value, 
[17:39:22.527]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.527]                   ...future.rng), globalenv = if (FALSE) 
[17:39:22.527]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:22.527]                     ...future.globalenv.names))
[17:39:22.527]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:22.527]         }, condition = base::local({
[17:39:22.527]             c <- base::c
[17:39:22.527]             inherits <- base::inherits
[17:39:22.527]             invokeRestart <- base::invokeRestart
[17:39:22.527]             length <- base::length
[17:39:22.527]             list <- base::list
[17:39:22.527]             seq.int <- base::seq.int
[17:39:22.527]             signalCondition <- base::signalCondition
[17:39:22.527]             sys.calls <- base::sys.calls
[17:39:22.527]             `[[` <- base::`[[`
[17:39:22.527]             `+` <- base::`+`
[17:39:22.527]             `<<-` <- base::`<<-`
[17:39:22.527]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:22.527]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:22.527]                   3L)]
[17:39:22.527]             }
[17:39:22.527]             function(cond) {
[17:39:22.527]                 is_error <- inherits(cond, "error")
[17:39:22.527]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:22.527]                   NULL)
[17:39:22.527]                 if (is_error) {
[17:39:22.527]                   sessionInformation <- function() {
[17:39:22.527]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:22.527]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:22.527]                       search = base::search(), system = base::Sys.info())
[17:39:22.527]                   }
[17:39:22.527]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.527]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:22.527]                     cond$call), session = sessionInformation(), 
[17:39:22.527]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:22.527]                   signalCondition(cond)
[17:39:22.527]                 }
[17:39:22.527]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:22.527]                 "immediateCondition"))) {
[17:39:22.527]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:22.527]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.527]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:22.527]                   if (TRUE && !signal) {
[17:39:22.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.527]                     {
[17:39:22.527]                       inherits <- base::inherits
[17:39:22.527]                       invokeRestart <- base::invokeRestart
[17:39:22.527]                       is.null <- base::is.null
[17:39:22.527]                       muffled <- FALSE
[17:39:22.527]                       if (inherits(cond, "message")) {
[17:39:22.527]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.527]                         if (muffled) 
[17:39:22.527]                           invokeRestart("muffleMessage")
[17:39:22.527]                       }
[17:39:22.527]                       else if (inherits(cond, "warning")) {
[17:39:22.527]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.527]                         if (muffled) 
[17:39:22.527]                           invokeRestart("muffleWarning")
[17:39:22.527]                       }
[17:39:22.527]                       else if (inherits(cond, "condition")) {
[17:39:22.527]                         if (!is.null(pattern)) {
[17:39:22.527]                           computeRestarts <- base::computeRestarts
[17:39:22.527]                           grepl <- base::grepl
[17:39:22.527]                           restarts <- computeRestarts(cond)
[17:39:22.527]                           for (restart in restarts) {
[17:39:22.527]                             name <- restart$name
[17:39:22.527]                             if (is.null(name)) 
[17:39:22.527]                               next
[17:39:22.527]                             if (!grepl(pattern, name)) 
[17:39:22.527]                               next
[17:39:22.527]                             invokeRestart(restart)
[17:39:22.527]                             muffled <- TRUE
[17:39:22.527]                             break
[17:39:22.527]                           }
[17:39:22.527]                         }
[17:39:22.527]                       }
[17:39:22.527]                       invisible(muffled)
[17:39:22.527]                     }
[17:39:22.527]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.527]                   }
[17:39:22.527]                 }
[17:39:22.527]                 else {
[17:39:22.527]                   if (TRUE) {
[17:39:22.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.527]                     {
[17:39:22.527]                       inherits <- base::inherits
[17:39:22.527]                       invokeRestart <- base::invokeRestart
[17:39:22.527]                       is.null <- base::is.null
[17:39:22.527]                       muffled <- FALSE
[17:39:22.527]                       if (inherits(cond, "message")) {
[17:39:22.527]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.527]                         if (muffled) 
[17:39:22.527]                           invokeRestart("muffleMessage")
[17:39:22.527]                       }
[17:39:22.527]                       else if (inherits(cond, "warning")) {
[17:39:22.527]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.527]                         if (muffled) 
[17:39:22.527]                           invokeRestart("muffleWarning")
[17:39:22.527]                       }
[17:39:22.527]                       else if (inherits(cond, "condition")) {
[17:39:22.527]                         if (!is.null(pattern)) {
[17:39:22.527]                           computeRestarts <- base::computeRestarts
[17:39:22.527]                           grepl <- base::grepl
[17:39:22.527]                           restarts <- computeRestarts(cond)
[17:39:22.527]                           for (restart in restarts) {
[17:39:22.527]                             name <- restart$name
[17:39:22.527]                             if (is.null(name)) 
[17:39:22.527]                               next
[17:39:22.527]                             if (!grepl(pattern, name)) 
[17:39:22.527]                               next
[17:39:22.527]                             invokeRestart(restart)
[17:39:22.527]                             muffled <- TRUE
[17:39:22.527]                             break
[17:39:22.527]                           }
[17:39:22.527]                         }
[17:39:22.527]                       }
[17:39:22.527]                       invisible(muffled)
[17:39:22.527]                     }
[17:39:22.527]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.527]                   }
[17:39:22.527]                 }
[17:39:22.527]             }
[17:39:22.527]         }))
[17:39:22.527]     }, error = function(ex) {
[17:39:22.527]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:22.527]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.527]                 ...future.rng), started = ...future.startTime, 
[17:39:22.527]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:22.527]             version = "1.8"), class = "FutureResult")
[17:39:22.527]     }, finally = {
[17:39:22.527]         if (!identical(...future.workdir, getwd())) 
[17:39:22.527]             setwd(...future.workdir)
[17:39:22.527]         {
[17:39:22.527]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:22.527]                 ...future.oldOptions$nwarnings <- NULL
[17:39:22.527]             }
[17:39:22.527]             base::options(...future.oldOptions)
[17:39:22.527]             if (.Platform$OS.type == "windows") {
[17:39:22.527]                 old_names <- names(...future.oldEnvVars)
[17:39:22.527]                 envs <- base::Sys.getenv()
[17:39:22.527]                 names <- names(envs)
[17:39:22.527]                 common <- intersect(names, old_names)
[17:39:22.527]                 added <- setdiff(names, old_names)
[17:39:22.527]                 removed <- setdiff(old_names, names)
[17:39:22.527]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:22.527]                   envs[common]]
[17:39:22.527]                 NAMES <- toupper(changed)
[17:39:22.527]                 args <- list()
[17:39:22.527]                 for (kk in seq_along(NAMES)) {
[17:39:22.527]                   name <- changed[[kk]]
[17:39:22.527]                   NAME <- NAMES[[kk]]
[17:39:22.527]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.527]                     next
[17:39:22.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.527]                 }
[17:39:22.527]                 NAMES <- toupper(added)
[17:39:22.527]                 for (kk in seq_along(NAMES)) {
[17:39:22.527]                   name <- added[[kk]]
[17:39:22.527]                   NAME <- NAMES[[kk]]
[17:39:22.527]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.527]                     next
[17:39:22.527]                   args[[name]] <- ""
[17:39:22.527]                 }
[17:39:22.527]                 NAMES <- toupper(removed)
[17:39:22.527]                 for (kk in seq_along(NAMES)) {
[17:39:22.527]                   name <- removed[[kk]]
[17:39:22.527]                   NAME <- NAMES[[kk]]
[17:39:22.527]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.527]                     next
[17:39:22.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.527]                 }
[17:39:22.527]                 if (length(args) > 0) 
[17:39:22.527]                   base::do.call(base::Sys.setenv, args = args)
[17:39:22.527]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:22.527]             }
[17:39:22.527]             else {
[17:39:22.527]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:22.527]             }
[17:39:22.527]             {
[17:39:22.527]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:22.527]                   0L) {
[17:39:22.527]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:22.527]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:22.527]                   base::options(opts)
[17:39:22.527]                 }
[17:39:22.527]                 {
[17:39:22.527]                   {
[17:39:22.527]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:22.527]                     NULL
[17:39:22.527]                   }
[17:39:22.527]                   options(future.plan = NULL)
[17:39:22.527]                   if (is.na(NA_character_)) 
[17:39:22.527]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.527]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:22.527]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:22.527]                     .init = FALSE)
[17:39:22.527]                 }
[17:39:22.527]             }
[17:39:22.527]         }
[17:39:22.527]     })
[17:39:22.527]     if (TRUE) {
[17:39:22.527]         base::sink(type = "output", split = FALSE)
[17:39:22.527]         if (TRUE) {
[17:39:22.527]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:22.527]         }
[17:39:22.527]         else {
[17:39:22.527]             ...future.result["stdout"] <- base::list(NULL)
[17:39:22.527]         }
[17:39:22.527]         base::close(...future.stdout)
[17:39:22.527]         ...future.stdout <- NULL
[17:39:22.527]     }
[17:39:22.527]     ...future.result$conditions <- ...future.conditions
[17:39:22.527]     ...future.result$finished <- base::Sys.time()
[17:39:22.527]     ...future.result
[17:39:22.527] }
[17:39:22.531] MultisessionFuture started
[17:39:22.531] - Launch lazy future ... done
[17:39:22.531] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:39:22.533] receiveMessageFromWorker() for ClusterFuture ...
[17:39:22.533] - Validating connection of MultisessionFuture
[17:39:22.533] - received message: FutureResult
[17:39:22.534] - Received FutureResult
[17:39:22.534] - Erased future from FutureRegistry
[17:39:22.534] result() for ClusterFuture ...
[17:39:22.534] - result already collected: FutureResult
[17:39:22.534] result() for ClusterFuture ... done
[17:39:22.534] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:22.534] result() for ClusterFuture ...
[17:39:22.535] - result already collected: FutureResult
[17:39:22.535] result() for ClusterFuture ... done
[17:39:22.535] result() for ClusterFuture ...
[17:39:22.535] - result already collected: FutureResult
[17:39:22.535] result() for ClusterFuture ... done
[17:39:22.539] getGlobalsAndPackages() ...
[17:39:22.539] 
[17:39:22.539] - globals: [0] <none>
[17:39:22.539] getGlobalsAndPackages() ... DONE
[17:39:22.550] Packages needed by the future expression (n = 0): <none>
[17:39:22.551] Packages needed by future strategies (n = 0): <none>
[17:39:22.551] {
[17:39:22.551]     {
[17:39:22.551]         {
[17:39:22.551]             ...future.startTime <- base::Sys.time()
[17:39:22.551]             {
[17:39:22.551]                 {
[17:39:22.551]                   {
[17:39:22.551]                     {
[17:39:22.551]                       base::local({
[17:39:22.551]                         has_future <- base::requireNamespace("future", 
[17:39:22.551]                           quietly = TRUE)
[17:39:22.551]                         if (has_future) {
[17:39:22.551]                           ns <- base::getNamespace("future")
[17:39:22.551]                           version <- ns[[".package"]][["version"]]
[17:39:22.551]                           if (is.null(version)) 
[17:39:22.551]                             version <- utils::packageVersion("future")
[17:39:22.551]                         }
[17:39:22.551]                         else {
[17:39:22.551]                           version <- NULL
[17:39:22.551]                         }
[17:39:22.551]                         if (!has_future || version < "1.8.0") {
[17:39:22.551]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:22.551]                             "", base::R.version$version.string), 
[17:39:22.551]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:22.551]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:22.551]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:22.551]                               "release", "version")], collapse = " "), 
[17:39:22.551]                             hostname = base::Sys.info()[["nodename"]])
[17:39:22.551]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:22.551]                             info)
[17:39:22.551]                           info <- base::paste(info, collapse = "; ")
[17:39:22.551]                           if (!has_future) {
[17:39:22.551]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:22.551]                               info)
[17:39:22.551]                           }
[17:39:22.551]                           else {
[17:39:22.551]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:22.551]                               info, version)
[17:39:22.551]                           }
[17:39:22.551]                           base::stop(msg)
[17:39:22.551]                         }
[17:39:22.551]                       })
[17:39:22.551]                     }
[17:39:22.551]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:22.551]                     base::options(mc.cores = 1L)
[17:39:22.551]                   }
[17:39:22.551]                   ...future.strategy.old <- future::plan("list")
[17:39:22.551]                   options(future.plan = NULL)
[17:39:22.551]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.551]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:22.551]                 }
[17:39:22.551]                 ...future.workdir <- getwd()
[17:39:22.551]             }
[17:39:22.551]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:22.551]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:22.551]         }
[17:39:22.551]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:22.551]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:22.551]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:22.551]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:22.551]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:22.551]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:22.551]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:22.551]             base::names(...future.oldOptions))
[17:39:22.551]     }
[17:39:22.551]     if (FALSE) {
[17:39:22.551]     }
[17:39:22.551]     else {
[17:39:22.551]         if (TRUE) {
[17:39:22.551]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:22.551]                 open = "w")
[17:39:22.551]         }
[17:39:22.551]         else {
[17:39:22.551]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:22.551]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:22.551]         }
[17:39:22.551]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:22.551]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:22.551]             base::sink(type = "output", split = FALSE)
[17:39:22.551]             base::close(...future.stdout)
[17:39:22.551]         }, add = TRUE)
[17:39:22.551]     }
[17:39:22.551]     ...future.frame <- base::sys.nframe()
[17:39:22.551]     ...future.conditions <- base::list()
[17:39:22.551]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:22.551]     if (FALSE) {
[17:39:22.551]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:22.551]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:22.551]     }
[17:39:22.551]     ...future.result <- base::tryCatch({
[17:39:22.551]         base::withCallingHandlers({
[17:39:22.551]             ...future.value <- base::withVisible(base::local({
[17:39:22.551]                 ...future.makeSendCondition <- base::local({
[17:39:22.551]                   sendCondition <- NULL
[17:39:22.551]                   function(frame = 1L) {
[17:39:22.551]                     if (is.function(sendCondition)) 
[17:39:22.551]                       return(sendCondition)
[17:39:22.551]                     ns <- getNamespace("parallel")
[17:39:22.551]                     if (exists("sendData", mode = "function", 
[17:39:22.551]                       envir = ns)) {
[17:39:22.551]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:22.551]                         envir = ns)
[17:39:22.551]                       envir <- sys.frame(frame)
[17:39:22.551]                       master <- NULL
[17:39:22.551]                       while (!identical(envir, .GlobalEnv) && 
[17:39:22.551]                         !identical(envir, emptyenv())) {
[17:39:22.551]                         if (exists("master", mode = "list", envir = envir, 
[17:39:22.551]                           inherits = FALSE)) {
[17:39:22.551]                           master <- get("master", mode = "list", 
[17:39:22.551]                             envir = envir, inherits = FALSE)
[17:39:22.551]                           if (inherits(master, c("SOCKnode", 
[17:39:22.551]                             "SOCK0node"))) {
[17:39:22.551]                             sendCondition <<- function(cond) {
[17:39:22.551]                               data <- list(type = "VALUE", value = cond, 
[17:39:22.551]                                 success = TRUE)
[17:39:22.551]                               parallel_sendData(master, data)
[17:39:22.551]                             }
[17:39:22.551]                             return(sendCondition)
[17:39:22.551]                           }
[17:39:22.551]                         }
[17:39:22.551]                         frame <- frame + 1L
[17:39:22.551]                         envir <- sys.frame(frame)
[17:39:22.551]                       }
[17:39:22.551]                     }
[17:39:22.551]                     sendCondition <<- function(cond) NULL
[17:39:22.551]                   }
[17:39:22.551]                 })
[17:39:22.551]                 withCallingHandlers({
[17:39:22.551]                   42
[17:39:22.551]                 }, immediateCondition = function(cond) {
[17:39:22.551]                   sendCondition <- ...future.makeSendCondition()
[17:39:22.551]                   sendCondition(cond)
[17:39:22.551]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.551]                   {
[17:39:22.551]                     inherits <- base::inherits
[17:39:22.551]                     invokeRestart <- base::invokeRestart
[17:39:22.551]                     is.null <- base::is.null
[17:39:22.551]                     muffled <- FALSE
[17:39:22.551]                     if (inherits(cond, "message")) {
[17:39:22.551]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:22.551]                       if (muffled) 
[17:39:22.551]                         invokeRestart("muffleMessage")
[17:39:22.551]                     }
[17:39:22.551]                     else if (inherits(cond, "warning")) {
[17:39:22.551]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:22.551]                       if (muffled) 
[17:39:22.551]                         invokeRestart("muffleWarning")
[17:39:22.551]                     }
[17:39:22.551]                     else if (inherits(cond, "condition")) {
[17:39:22.551]                       if (!is.null(pattern)) {
[17:39:22.551]                         computeRestarts <- base::computeRestarts
[17:39:22.551]                         grepl <- base::grepl
[17:39:22.551]                         restarts <- computeRestarts(cond)
[17:39:22.551]                         for (restart in restarts) {
[17:39:22.551]                           name <- restart$name
[17:39:22.551]                           if (is.null(name)) 
[17:39:22.551]                             next
[17:39:22.551]                           if (!grepl(pattern, name)) 
[17:39:22.551]                             next
[17:39:22.551]                           invokeRestart(restart)
[17:39:22.551]                           muffled <- TRUE
[17:39:22.551]                           break
[17:39:22.551]                         }
[17:39:22.551]                       }
[17:39:22.551]                     }
[17:39:22.551]                     invisible(muffled)
[17:39:22.551]                   }
[17:39:22.551]                   muffleCondition(cond)
[17:39:22.551]                 })
[17:39:22.551]             }))
[17:39:22.551]             future::FutureResult(value = ...future.value$value, 
[17:39:22.551]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.551]                   ...future.rng), globalenv = if (FALSE) 
[17:39:22.551]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:22.551]                     ...future.globalenv.names))
[17:39:22.551]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:22.551]         }, condition = base::local({
[17:39:22.551]             c <- base::c
[17:39:22.551]             inherits <- base::inherits
[17:39:22.551]             invokeRestart <- base::invokeRestart
[17:39:22.551]             length <- base::length
[17:39:22.551]             list <- base::list
[17:39:22.551]             seq.int <- base::seq.int
[17:39:22.551]             signalCondition <- base::signalCondition
[17:39:22.551]             sys.calls <- base::sys.calls
[17:39:22.551]             `[[` <- base::`[[`
[17:39:22.551]             `+` <- base::`+`
[17:39:22.551]             `<<-` <- base::`<<-`
[17:39:22.551]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:22.551]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:22.551]                   3L)]
[17:39:22.551]             }
[17:39:22.551]             function(cond) {
[17:39:22.551]                 is_error <- inherits(cond, "error")
[17:39:22.551]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:22.551]                   NULL)
[17:39:22.551]                 if (is_error) {
[17:39:22.551]                   sessionInformation <- function() {
[17:39:22.551]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:22.551]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:22.551]                       search = base::search(), system = base::Sys.info())
[17:39:22.551]                   }
[17:39:22.551]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.551]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:22.551]                     cond$call), session = sessionInformation(), 
[17:39:22.551]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:22.551]                   signalCondition(cond)
[17:39:22.551]                 }
[17:39:22.551]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:22.551]                 "immediateCondition"))) {
[17:39:22.551]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:22.551]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.551]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:22.551]                   if (TRUE && !signal) {
[17:39:22.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.551]                     {
[17:39:22.551]                       inherits <- base::inherits
[17:39:22.551]                       invokeRestart <- base::invokeRestart
[17:39:22.551]                       is.null <- base::is.null
[17:39:22.551]                       muffled <- FALSE
[17:39:22.551]                       if (inherits(cond, "message")) {
[17:39:22.551]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.551]                         if (muffled) 
[17:39:22.551]                           invokeRestart("muffleMessage")
[17:39:22.551]                       }
[17:39:22.551]                       else if (inherits(cond, "warning")) {
[17:39:22.551]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.551]                         if (muffled) 
[17:39:22.551]                           invokeRestart("muffleWarning")
[17:39:22.551]                       }
[17:39:22.551]                       else if (inherits(cond, "condition")) {
[17:39:22.551]                         if (!is.null(pattern)) {
[17:39:22.551]                           computeRestarts <- base::computeRestarts
[17:39:22.551]                           grepl <- base::grepl
[17:39:22.551]                           restarts <- computeRestarts(cond)
[17:39:22.551]                           for (restart in restarts) {
[17:39:22.551]                             name <- restart$name
[17:39:22.551]                             if (is.null(name)) 
[17:39:22.551]                               next
[17:39:22.551]                             if (!grepl(pattern, name)) 
[17:39:22.551]                               next
[17:39:22.551]                             invokeRestart(restart)
[17:39:22.551]                             muffled <- TRUE
[17:39:22.551]                             break
[17:39:22.551]                           }
[17:39:22.551]                         }
[17:39:22.551]                       }
[17:39:22.551]                       invisible(muffled)
[17:39:22.551]                     }
[17:39:22.551]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.551]                   }
[17:39:22.551]                 }
[17:39:22.551]                 else {
[17:39:22.551]                   if (TRUE) {
[17:39:22.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.551]                     {
[17:39:22.551]                       inherits <- base::inherits
[17:39:22.551]                       invokeRestart <- base::invokeRestart
[17:39:22.551]                       is.null <- base::is.null
[17:39:22.551]                       muffled <- FALSE
[17:39:22.551]                       if (inherits(cond, "message")) {
[17:39:22.551]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.551]                         if (muffled) 
[17:39:22.551]                           invokeRestart("muffleMessage")
[17:39:22.551]                       }
[17:39:22.551]                       else if (inherits(cond, "warning")) {
[17:39:22.551]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.551]                         if (muffled) 
[17:39:22.551]                           invokeRestart("muffleWarning")
[17:39:22.551]                       }
[17:39:22.551]                       else if (inherits(cond, "condition")) {
[17:39:22.551]                         if (!is.null(pattern)) {
[17:39:22.551]                           computeRestarts <- base::computeRestarts
[17:39:22.551]                           grepl <- base::grepl
[17:39:22.551]                           restarts <- computeRestarts(cond)
[17:39:22.551]                           for (restart in restarts) {
[17:39:22.551]                             name <- restart$name
[17:39:22.551]                             if (is.null(name)) 
[17:39:22.551]                               next
[17:39:22.551]                             if (!grepl(pattern, name)) 
[17:39:22.551]                               next
[17:39:22.551]                             invokeRestart(restart)
[17:39:22.551]                             muffled <- TRUE
[17:39:22.551]                             break
[17:39:22.551]                           }
[17:39:22.551]                         }
[17:39:22.551]                       }
[17:39:22.551]                       invisible(muffled)
[17:39:22.551]                     }
[17:39:22.551]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.551]                   }
[17:39:22.551]                 }
[17:39:22.551]             }
[17:39:22.551]         }))
[17:39:22.551]     }, error = function(ex) {
[17:39:22.551]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:22.551]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.551]                 ...future.rng), started = ...future.startTime, 
[17:39:22.551]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:22.551]             version = "1.8"), class = "FutureResult")
[17:39:22.551]     }, finally = {
[17:39:22.551]         if (!identical(...future.workdir, getwd())) 
[17:39:22.551]             setwd(...future.workdir)
[17:39:22.551]         {
[17:39:22.551]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:22.551]                 ...future.oldOptions$nwarnings <- NULL
[17:39:22.551]             }
[17:39:22.551]             base::options(...future.oldOptions)
[17:39:22.551]             if (.Platform$OS.type == "windows") {
[17:39:22.551]                 old_names <- names(...future.oldEnvVars)
[17:39:22.551]                 envs <- base::Sys.getenv()
[17:39:22.551]                 names <- names(envs)
[17:39:22.551]                 common <- intersect(names, old_names)
[17:39:22.551]                 added <- setdiff(names, old_names)
[17:39:22.551]                 removed <- setdiff(old_names, names)
[17:39:22.551]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:22.551]                   envs[common]]
[17:39:22.551]                 NAMES <- toupper(changed)
[17:39:22.551]                 args <- list()
[17:39:22.551]                 for (kk in seq_along(NAMES)) {
[17:39:22.551]                   name <- changed[[kk]]
[17:39:22.551]                   NAME <- NAMES[[kk]]
[17:39:22.551]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.551]                     next
[17:39:22.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.551]                 }
[17:39:22.551]                 NAMES <- toupper(added)
[17:39:22.551]                 for (kk in seq_along(NAMES)) {
[17:39:22.551]                   name <- added[[kk]]
[17:39:22.551]                   NAME <- NAMES[[kk]]
[17:39:22.551]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.551]                     next
[17:39:22.551]                   args[[name]] <- ""
[17:39:22.551]                 }
[17:39:22.551]                 NAMES <- toupper(removed)
[17:39:22.551]                 for (kk in seq_along(NAMES)) {
[17:39:22.551]                   name <- removed[[kk]]
[17:39:22.551]                   NAME <- NAMES[[kk]]
[17:39:22.551]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.551]                     next
[17:39:22.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.551]                 }
[17:39:22.551]                 if (length(args) > 0) 
[17:39:22.551]                   base::do.call(base::Sys.setenv, args = args)
[17:39:22.551]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:22.551]             }
[17:39:22.551]             else {
[17:39:22.551]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:22.551]             }
[17:39:22.551]             {
[17:39:22.551]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:22.551]                   0L) {
[17:39:22.551]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:22.551]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:22.551]                   base::options(opts)
[17:39:22.551]                 }
[17:39:22.551]                 {
[17:39:22.551]                   {
[17:39:22.551]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:22.551]                     NULL
[17:39:22.551]                   }
[17:39:22.551]                   options(future.plan = NULL)
[17:39:22.551]                   if (is.na(NA_character_)) 
[17:39:22.551]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.551]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:22.551]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:22.551]                     .init = FALSE)
[17:39:22.551]                 }
[17:39:22.551]             }
[17:39:22.551]         }
[17:39:22.551]     })
[17:39:22.551]     if (TRUE) {
[17:39:22.551]         base::sink(type = "output", split = FALSE)
[17:39:22.551]         if (TRUE) {
[17:39:22.551]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:22.551]         }
[17:39:22.551]         else {
[17:39:22.551]             ...future.result["stdout"] <- base::list(NULL)
[17:39:22.551]         }
[17:39:22.551]         base::close(...future.stdout)
[17:39:22.551]         ...future.stdout <- NULL
[17:39:22.551]     }
[17:39:22.551]     ...future.result$conditions <- ...future.conditions
[17:39:22.551]     ...future.result$finished <- base::Sys.time()
[17:39:22.551]     ...future.result
[17:39:22.551] }
[17:39:22.557] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:39:22.559] receiveMessageFromWorker() for ClusterFuture ...
[17:39:22.559] - Validating connection of MultisessionFuture
[17:39:22.559] - received message: FutureResult
[17:39:22.560] - Received FutureResult
[17:39:22.560] - Erased future from FutureRegistry
[17:39:22.560] result() for ClusterFuture ...
[17:39:22.560] - result already collected: FutureResult
[17:39:22.560] result() for ClusterFuture ... done
[17:39:22.560] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:22.560] result() for ClusterFuture ...
[17:39:22.560] - result already collected: FutureResult
[17:39:22.560] result() for ClusterFuture ... done
[17:39:22.561] result() for ClusterFuture ...
[17:39:22.561] - result already collected: FutureResult
[17:39:22.561] result() for ClusterFuture ... done
[17:39:22.561] getGlobalsAndPackages() ...
[17:39:22.561] Searching for globals...
[17:39:22.561] 
[17:39:22.561] Searching for globals ... DONE
[17:39:22.561] - globals: [0] <none>
[17:39:22.561] getGlobalsAndPackages() ... DONE
[17:39:22.562] run() for ‘Future’ ...
[17:39:22.562] - state: ‘created’
[17:39:22.562] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:22.576] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:22.576] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:22.576]   - Field: ‘node’
[17:39:22.576]   - Field: ‘label’
[17:39:22.576]   - Field: ‘local’
[17:39:22.576]   - Field: ‘owner’
[17:39:22.577]   - Field: ‘envir’
[17:39:22.577]   - Field: ‘workers’
[17:39:22.577]   - Field: ‘packages’
[17:39:22.577]   - Field: ‘gc’
[17:39:22.577]   - Field: ‘conditions’
[17:39:22.577]   - Field: ‘persistent’
[17:39:22.577]   - Field: ‘expr’
[17:39:22.577]   - Field: ‘uuid’
[17:39:22.577]   - Field: ‘seed’
[17:39:22.577]   - Field: ‘version’
[17:39:22.577]   - Field: ‘result’
[17:39:22.577]   - Field: ‘asynchronous’
[17:39:22.578]   - Field: ‘calls’
[17:39:22.578]   - Field: ‘globals’
[17:39:22.578]   - Field: ‘stdout’
[17:39:22.578]   - Field: ‘earlySignal’
[17:39:22.578]   - Field: ‘lazy’
[17:39:22.578]   - Field: ‘state’
[17:39:22.578] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:22.578] - Launch lazy future ...
[17:39:22.578] Packages needed by the future expression (n = 0): <none>
[17:39:22.579] Packages needed by future strategies (n = 0): <none>
[17:39:22.579] {
[17:39:22.579]     {
[17:39:22.579]         {
[17:39:22.579]             ...future.startTime <- base::Sys.time()
[17:39:22.579]             {
[17:39:22.579]                 {
[17:39:22.579]                   {
[17:39:22.579]                     {
[17:39:22.579]                       base::local({
[17:39:22.579]                         has_future <- base::requireNamespace("future", 
[17:39:22.579]                           quietly = TRUE)
[17:39:22.579]                         if (has_future) {
[17:39:22.579]                           ns <- base::getNamespace("future")
[17:39:22.579]                           version <- ns[[".package"]][["version"]]
[17:39:22.579]                           if (is.null(version)) 
[17:39:22.579]                             version <- utils::packageVersion("future")
[17:39:22.579]                         }
[17:39:22.579]                         else {
[17:39:22.579]                           version <- NULL
[17:39:22.579]                         }
[17:39:22.579]                         if (!has_future || version < "1.8.0") {
[17:39:22.579]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:22.579]                             "", base::R.version$version.string), 
[17:39:22.579]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:22.579]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:22.579]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:22.579]                               "release", "version")], collapse = " "), 
[17:39:22.579]                             hostname = base::Sys.info()[["nodename"]])
[17:39:22.579]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:22.579]                             info)
[17:39:22.579]                           info <- base::paste(info, collapse = "; ")
[17:39:22.579]                           if (!has_future) {
[17:39:22.579]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:22.579]                               info)
[17:39:22.579]                           }
[17:39:22.579]                           else {
[17:39:22.579]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:22.579]                               info, version)
[17:39:22.579]                           }
[17:39:22.579]                           base::stop(msg)
[17:39:22.579]                         }
[17:39:22.579]                       })
[17:39:22.579]                     }
[17:39:22.579]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:22.579]                     base::options(mc.cores = 1L)
[17:39:22.579]                   }
[17:39:22.579]                   ...future.strategy.old <- future::plan("list")
[17:39:22.579]                   options(future.plan = NULL)
[17:39:22.579]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.579]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:22.579]                 }
[17:39:22.579]                 ...future.workdir <- getwd()
[17:39:22.579]             }
[17:39:22.579]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:22.579]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:22.579]         }
[17:39:22.579]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:22.579]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:22.579]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:22.579]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:22.579]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:22.579]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:22.579]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:22.579]             base::names(...future.oldOptions))
[17:39:22.579]     }
[17:39:22.579]     if (FALSE) {
[17:39:22.579]     }
[17:39:22.579]     else {
[17:39:22.579]         if (TRUE) {
[17:39:22.579]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:22.579]                 open = "w")
[17:39:22.579]         }
[17:39:22.579]         else {
[17:39:22.579]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:22.579]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:22.579]         }
[17:39:22.579]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:22.579]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:22.579]             base::sink(type = "output", split = FALSE)
[17:39:22.579]             base::close(...future.stdout)
[17:39:22.579]         }, add = TRUE)
[17:39:22.579]     }
[17:39:22.579]     ...future.frame <- base::sys.nframe()
[17:39:22.579]     ...future.conditions <- base::list()
[17:39:22.579]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:22.579]     if (FALSE) {
[17:39:22.579]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:22.579]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:22.579]     }
[17:39:22.579]     ...future.result <- base::tryCatch({
[17:39:22.579]         base::withCallingHandlers({
[17:39:22.579]             ...future.value <- base::withVisible(base::local({
[17:39:22.579]                 ...future.makeSendCondition <- base::local({
[17:39:22.579]                   sendCondition <- NULL
[17:39:22.579]                   function(frame = 1L) {
[17:39:22.579]                     if (is.function(sendCondition)) 
[17:39:22.579]                       return(sendCondition)
[17:39:22.579]                     ns <- getNamespace("parallel")
[17:39:22.579]                     if (exists("sendData", mode = "function", 
[17:39:22.579]                       envir = ns)) {
[17:39:22.579]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:22.579]                         envir = ns)
[17:39:22.579]                       envir <- sys.frame(frame)
[17:39:22.579]                       master <- NULL
[17:39:22.579]                       while (!identical(envir, .GlobalEnv) && 
[17:39:22.579]                         !identical(envir, emptyenv())) {
[17:39:22.579]                         if (exists("master", mode = "list", envir = envir, 
[17:39:22.579]                           inherits = FALSE)) {
[17:39:22.579]                           master <- get("master", mode = "list", 
[17:39:22.579]                             envir = envir, inherits = FALSE)
[17:39:22.579]                           if (inherits(master, c("SOCKnode", 
[17:39:22.579]                             "SOCK0node"))) {
[17:39:22.579]                             sendCondition <<- function(cond) {
[17:39:22.579]                               data <- list(type = "VALUE", value = cond, 
[17:39:22.579]                                 success = TRUE)
[17:39:22.579]                               parallel_sendData(master, data)
[17:39:22.579]                             }
[17:39:22.579]                             return(sendCondition)
[17:39:22.579]                           }
[17:39:22.579]                         }
[17:39:22.579]                         frame <- frame + 1L
[17:39:22.579]                         envir <- sys.frame(frame)
[17:39:22.579]                       }
[17:39:22.579]                     }
[17:39:22.579]                     sendCondition <<- function(cond) NULL
[17:39:22.579]                   }
[17:39:22.579]                 })
[17:39:22.579]                 withCallingHandlers({
[17:39:22.579]                   42
[17:39:22.579]                 }, immediateCondition = function(cond) {
[17:39:22.579]                   sendCondition <- ...future.makeSendCondition()
[17:39:22.579]                   sendCondition(cond)
[17:39:22.579]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.579]                   {
[17:39:22.579]                     inherits <- base::inherits
[17:39:22.579]                     invokeRestart <- base::invokeRestart
[17:39:22.579]                     is.null <- base::is.null
[17:39:22.579]                     muffled <- FALSE
[17:39:22.579]                     if (inherits(cond, "message")) {
[17:39:22.579]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:22.579]                       if (muffled) 
[17:39:22.579]                         invokeRestart("muffleMessage")
[17:39:22.579]                     }
[17:39:22.579]                     else if (inherits(cond, "warning")) {
[17:39:22.579]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:22.579]                       if (muffled) 
[17:39:22.579]                         invokeRestart("muffleWarning")
[17:39:22.579]                     }
[17:39:22.579]                     else if (inherits(cond, "condition")) {
[17:39:22.579]                       if (!is.null(pattern)) {
[17:39:22.579]                         computeRestarts <- base::computeRestarts
[17:39:22.579]                         grepl <- base::grepl
[17:39:22.579]                         restarts <- computeRestarts(cond)
[17:39:22.579]                         for (restart in restarts) {
[17:39:22.579]                           name <- restart$name
[17:39:22.579]                           if (is.null(name)) 
[17:39:22.579]                             next
[17:39:22.579]                           if (!grepl(pattern, name)) 
[17:39:22.579]                             next
[17:39:22.579]                           invokeRestart(restart)
[17:39:22.579]                           muffled <- TRUE
[17:39:22.579]                           break
[17:39:22.579]                         }
[17:39:22.579]                       }
[17:39:22.579]                     }
[17:39:22.579]                     invisible(muffled)
[17:39:22.579]                   }
[17:39:22.579]                   muffleCondition(cond)
[17:39:22.579]                 })
[17:39:22.579]             }))
[17:39:22.579]             future::FutureResult(value = ...future.value$value, 
[17:39:22.579]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.579]                   ...future.rng), globalenv = if (FALSE) 
[17:39:22.579]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:22.579]                     ...future.globalenv.names))
[17:39:22.579]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:22.579]         }, condition = base::local({
[17:39:22.579]             c <- base::c
[17:39:22.579]             inherits <- base::inherits
[17:39:22.579]             invokeRestart <- base::invokeRestart
[17:39:22.579]             length <- base::length
[17:39:22.579]             list <- base::list
[17:39:22.579]             seq.int <- base::seq.int
[17:39:22.579]             signalCondition <- base::signalCondition
[17:39:22.579]             sys.calls <- base::sys.calls
[17:39:22.579]             `[[` <- base::`[[`
[17:39:22.579]             `+` <- base::`+`
[17:39:22.579]             `<<-` <- base::`<<-`
[17:39:22.579]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:22.579]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:22.579]                   3L)]
[17:39:22.579]             }
[17:39:22.579]             function(cond) {
[17:39:22.579]                 is_error <- inherits(cond, "error")
[17:39:22.579]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:22.579]                   NULL)
[17:39:22.579]                 if (is_error) {
[17:39:22.579]                   sessionInformation <- function() {
[17:39:22.579]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:22.579]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:22.579]                       search = base::search(), system = base::Sys.info())
[17:39:22.579]                   }
[17:39:22.579]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.579]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:22.579]                     cond$call), session = sessionInformation(), 
[17:39:22.579]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:22.579]                   signalCondition(cond)
[17:39:22.579]                 }
[17:39:22.579]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:22.579]                 "immediateCondition"))) {
[17:39:22.579]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:22.579]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.579]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:22.579]                   if (TRUE && !signal) {
[17:39:22.579]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.579]                     {
[17:39:22.579]                       inherits <- base::inherits
[17:39:22.579]                       invokeRestart <- base::invokeRestart
[17:39:22.579]                       is.null <- base::is.null
[17:39:22.579]                       muffled <- FALSE
[17:39:22.579]                       if (inherits(cond, "message")) {
[17:39:22.579]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.579]                         if (muffled) 
[17:39:22.579]                           invokeRestart("muffleMessage")
[17:39:22.579]                       }
[17:39:22.579]                       else if (inherits(cond, "warning")) {
[17:39:22.579]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.579]                         if (muffled) 
[17:39:22.579]                           invokeRestart("muffleWarning")
[17:39:22.579]                       }
[17:39:22.579]                       else if (inherits(cond, "condition")) {
[17:39:22.579]                         if (!is.null(pattern)) {
[17:39:22.579]                           computeRestarts <- base::computeRestarts
[17:39:22.579]                           grepl <- base::grepl
[17:39:22.579]                           restarts <- computeRestarts(cond)
[17:39:22.579]                           for (restart in restarts) {
[17:39:22.579]                             name <- restart$name
[17:39:22.579]                             if (is.null(name)) 
[17:39:22.579]                               next
[17:39:22.579]                             if (!grepl(pattern, name)) 
[17:39:22.579]                               next
[17:39:22.579]                             invokeRestart(restart)
[17:39:22.579]                             muffled <- TRUE
[17:39:22.579]                             break
[17:39:22.579]                           }
[17:39:22.579]                         }
[17:39:22.579]                       }
[17:39:22.579]                       invisible(muffled)
[17:39:22.579]                     }
[17:39:22.579]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.579]                   }
[17:39:22.579]                 }
[17:39:22.579]                 else {
[17:39:22.579]                   if (TRUE) {
[17:39:22.579]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.579]                     {
[17:39:22.579]                       inherits <- base::inherits
[17:39:22.579]                       invokeRestart <- base::invokeRestart
[17:39:22.579]                       is.null <- base::is.null
[17:39:22.579]                       muffled <- FALSE
[17:39:22.579]                       if (inherits(cond, "message")) {
[17:39:22.579]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.579]                         if (muffled) 
[17:39:22.579]                           invokeRestart("muffleMessage")
[17:39:22.579]                       }
[17:39:22.579]                       else if (inherits(cond, "warning")) {
[17:39:22.579]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.579]                         if (muffled) 
[17:39:22.579]                           invokeRestart("muffleWarning")
[17:39:22.579]                       }
[17:39:22.579]                       else if (inherits(cond, "condition")) {
[17:39:22.579]                         if (!is.null(pattern)) {
[17:39:22.579]                           computeRestarts <- base::computeRestarts
[17:39:22.579]                           grepl <- base::grepl
[17:39:22.579]                           restarts <- computeRestarts(cond)
[17:39:22.579]                           for (restart in restarts) {
[17:39:22.579]                             name <- restart$name
[17:39:22.579]                             if (is.null(name)) 
[17:39:22.579]                               next
[17:39:22.579]                             if (!grepl(pattern, name)) 
[17:39:22.579]                               next
[17:39:22.579]                             invokeRestart(restart)
[17:39:22.579]                             muffled <- TRUE
[17:39:22.579]                             break
[17:39:22.579]                           }
[17:39:22.579]                         }
[17:39:22.579]                       }
[17:39:22.579]                       invisible(muffled)
[17:39:22.579]                     }
[17:39:22.579]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.579]                   }
[17:39:22.579]                 }
[17:39:22.579]             }
[17:39:22.579]         }))
[17:39:22.579]     }, error = function(ex) {
[17:39:22.579]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:22.579]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.579]                 ...future.rng), started = ...future.startTime, 
[17:39:22.579]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:22.579]             version = "1.8"), class = "FutureResult")
[17:39:22.579]     }, finally = {
[17:39:22.579]         if (!identical(...future.workdir, getwd())) 
[17:39:22.579]             setwd(...future.workdir)
[17:39:22.579]         {
[17:39:22.579]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:22.579]                 ...future.oldOptions$nwarnings <- NULL
[17:39:22.579]             }
[17:39:22.579]             base::options(...future.oldOptions)
[17:39:22.579]             if (.Platform$OS.type == "windows") {
[17:39:22.579]                 old_names <- names(...future.oldEnvVars)
[17:39:22.579]                 envs <- base::Sys.getenv()
[17:39:22.579]                 names <- names(envs)
[17:39:22.579]                 common <- intersect(names, old_names)
[17:39:22.579]                 added <- setdiff(names, old_names)
[17:39:22.579]                 removed <- setdiff(old_names, names)
[17:39:22.579]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:22.579]                   envs[common]]
[17:39:22.579]                 NAMES <- toupper(changed)
[17:39:22.579]                 args <- list()
[17:39:22.579]                 for (kk in seq_along(NAMES)) {
[17:39:22.579]                   name <- changed[[kk]]
[17:39:22.579]                   NAME <- NAMES[[kk]]
[17:39:22.579]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.579]                     next
[17:39:22.579]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.579]                 }
[17:39:22.579]                 NAMES <- toupper(added)
[17:39:22.579]                 for (kk in seq_along(NAMES)) {
[17:39:22.579]                   name <- added[[kk]]
[17:39:22.579]                   NAME <- NAMES[[kk]]
[17:39:22.579]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.579]                     next
[17:39:22.579]                   args[[name]] <- ""
[17:39:22.579]                 }
[17:39:22.579]                 NAMES <- toupper(removed)
[17:39:22.579]                 for (kk in seq_along(NAMES)) {
[17:39:22.579]                   name <- removed[[kk]]
[17:39:22.579]                   NAME <- NAMES[[kk]]
[17:39:22.579]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.579]                     next
[17:39:22.579]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.579]                 }
[17:39:22.579]                 if (length(args) > 0) 
[17:39:22.579]                   base::do.call(base::Sys.setenv, args = args)
[17:39:22.579]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:22.579]             }
[17:39:22.579]             else {
[17:39:22.579]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:22.579]             }
[17:39:22.579]             {
[17:39:22.579]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:22.579]                   0L) {
[17:39:22.579]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:22.579]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:22.579]                   base::options(opts)
[17:39:22.579]                 }
[17:39:22.579]                 {
[17:39:22.579]                   {
[17:39:22.579]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:22.579]                     NULL
[17:39:22.579]                   }
[17:39:22.579]                   options(future.plan = NULL)
[17:39:22.579]                   if (is.na(NA_character_)) 
[17:39:22.579]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.579]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:22.579]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:22.579]                     .init = FALSE)
[17:39:22.579]                 }
[17:39:22.579]             }
[17:39:22.579]         }
[17:39:22.579]     })
[17:39:22.579]     if (TRUE) {
[17:39:22.579]         base::sink(type = "output", split = FALSE)
[17:39:22.579]         if (TRUE) {
[17:39:22.579]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:22.579]         }
[17:39:22.579]         else {
[17:39:22.579]             ...future.result["stdout"] <- base::list(NULL)
[17:39:22.579]         }
[17:39:22.579]         base::close(...future.stdout)
[17:39:22.579]         ...future.stdout <- NULL
[17:39:22.579]     }
[17:39:22.579]     ...future.result$conditions <- ...future.conditions
[17:39:22.579]     ...future.result$finished <- base::Sys.time()
[17:39:22.579]     ...future.result
[17:39:22.579] }
[17:39:22.582] MultisessionFuture started
[17:39:22.582] - Launch lazy future ... done
[17:39:22.582] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:39:22.583] receiveMessageFromWorker() for ClusterFuture ...
[17:39:22.583] - Validating connection of MultisessionFuture
[17:39:22.584] - received message: FutureResult
[17:39:22.584] - Received FutureResult
[17:39:22.584] - Erased future from FutureRegistry
[17:39:22.584] result() for ClusterFuture ...
[17:39:22.584] - result already collected: FutureResult
[17:39:22.584] result() for ClusterFuture ... done
[17:39:22.584] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:22.584] result() for ClusterFuture ...
[17:39:22.585] - result already collected: FutureResult
[17:39:22.585] result() for ClusterFuture ... done
[17:39:22.585] result() for ClusterFuture ...
[17:39:22.585] - result already collected: FutureResult
[17:39:22.585] result() for ClusterFuture ... done
[17:39:22.585] getGlobalsAndPackages() ...
[17:39:22.585] Searching for globals...
[17:39:22.586] - globals found: [1] ‘{’
[17:39:22.586] Searching for globals ... DONE
[17:39:22.586] Resolving globals: FALSE
[17:39:22.586] 
[17:39:22.586] 
[17:39:22.587] getGlobalsAndPackages() ... DONE
[17:39:22.587] run() for ‘Future’ ...
[17:39:22.587] - state: ‘created’
[17:39:22.587] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:39:22.601] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:22.601] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:39:22.601]   - Field: ‘node’
[17:39:22.601]   - Field: ‘label’
[17:39:22.601]   - Field: ‘local’
[17:39:22.601]   - Field: ‘owner’
[17:39:22.601]   - Field: ‘envir’
[17:39:22.601]   - Field: ‘workers’
[17:39:22.601]   - Field: ‘packages’
[17:39:22.601]   - Field: ‘gc’
[17:39:22.602]   - Field: ‘conditions’
[17:39:22.602]   - Field: ‘persistent’
[17:39:22.602]   - Field: ‘expr’
[17:39:22.602]   - Field: ‘uuid’
[17:39:22.602]   - Field: ‘seed’
[17:39:22.602]   - Field: ‘version’
[17:39:22.602]   - Field: ‘result’
[17:39:22.602]   - Field: ‘asynchronous’
[17:39:22.602]   - Field: ‘calls’
[17:39:22.602]   - Field: ‘globals’
[17:39:22.602]   - Field: ‘stdout’
[17:39:22.602]   - Field: ‘earlySignal’
[17:39:22.603]   - Field: ‘lazy’
[17:39:22.603]   - Field: ‘state’
[17:39:22.603] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:39:22.603] - Launch lazy future ...
[17:39:22.603] Packages needed by the future expression (n = 0): <none>
[17:39:22.603] Packages needed by future strategies (n = 0): <none>
[17:39:22.604] {
[17:39:22.604]     {
[17:39:22.604]         {
[17:39:22.604]             ...future.startTime <- base::Sys.time()
[17:39:22.604]             {
[17:39:22.604]                 {
[17:39:22.604]                   {
[17:39:22.604]                     {
[17:39:22.604]                       base::local({
[17:39:22.604]                         has_future <- base::requireNamespace("future", 
[17:39:22.604]                           quietly = TRUE)
[17:39:22.604]                         if (has_future) {
[17:39:22.604]                           ns <- base::getNamespace("future")
[17:39:22.604]                           version <- ns[[".package"]][["version"]]
[17:39:22.604]                           if (is.null(version)) 
[17:39:22.604]                             version <- utils::packageVersion("future")
[17:39:22.604]                         }
[17:39:22.604]                         else {
[17:39:22.604]                           version <- NULL
[17:39:22.604]                         }
[17:39:22.604]                         if (!has_future || version < "1.8.0") {
[17:39:22.604]                           info <- base::c(r_version = base::gsub("R version ", 
[17:39:22.604]                             "", base::R.version$version.string), 
[17:39:22.604]                             platform = base::sprintf("%s (%s-bit)", 
[17:39:22.604]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:39:22.604]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:39:22.604]                               "release", "version")], collapse = " "), 
[17:39:22.604]                             hostname = base::Sys.info()[["nodename"]])
[17:39:22.604]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:39:22.604]                             info)
[17:39:22.604]                           info <- base::paste(info, collapse = "; ")
[17:39:22.604]                           if (!has_future) {
[17:39:22.604]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:39:22.604]                               info)
[17:39:22.604]                           }
[17:39:22.604]                           else {
[17:39:22.604]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:39:22.604]                               info, version)
[17:39:22.604]                           }
[17:39:22.604]                           base::stop(msg)
[17:39:22.604]                         }
[17:39:22.604]                       })
[17:39:22.604]                     }
[17:39:22.604]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:39:22.604]                     base::options(mc.cores = 1L)
[17:39:22.604]                   }
[17:39:22.604]                   ...future.strategy.old <- future::plan("list")
[17:39:22.604]                   options(future.plan = NULL)
[17:39:22.604]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.604]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:39:22.604]                 }
[17:39:22.604]                 ...future.workdir <- getwd()
[17:39:22.604]             }
[17:39:22.604]             ...future.oldOptions <- base::as.list(base::.Options)
[17:39:22.604]             ...future.oldEnvVars <- base::Sys.getenv()
[17:39:22.604]         }
[17:39:22.604]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:39:22.604]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:39:22.604]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:39:22.604]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:39:22.604]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:39:22.604]             future.stdout.windows.reencode = NULL, width = 80L)
[17:39:22.604]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:39:22.604]             base::names(...future.oldOptions))
[17:39:22.604]     }
[17:39:22.604]     if (FALSE) {
[17:39:22.604]     }
[17:39:22.604]     else {
[17:39:22.604]         if (TRUE) {
[17:39:22.604]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:39:22.604]                 open = "w")
[17:39:22.604]         }
[17:39:22.604]         else {
[17:39:22.604]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:39:22.604]                 windows = "NUL", "/dev/null"), open = "w")
[17:39:22.604]         }
[17:39:22.604]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:39:22.604]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:39:22.604]             base::sink(type = "output", split = FALSE)
[17:39:22.604]             base::close(...future.stdout)
[17:39:22.604]         }, add = TRUE)
[17:39:22.604]     }
[17:39:22.604]     ...future.frame <- base::sys.nframe()
[17:39:22.604]     ...future.conditions <- base::list()
[17:39:22.604]     ...future.rng <- base::globalenv()$.Random.seed
[17:39:22.604]     if (FALSE) {
[17:39:22.604]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:39:22.604]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:39:22.604]     }
[17:39:22.604]     ...future.result <- base::tryCatch({
[17:39:22.604]         base::withCallingHandlers({
[17:39:22.604]             ...future.value <- base::withVisible(base::local({
[17:39:22.604]                 ...future.makeSendCondition <- base::local({
[17:39:22.604]                   sendCondition <- NULL
[17:39:22.604]                   function(frame = 1L) {
[17:39:22.604]                     if (is.function(sendCondition)) 
[17:39:22.604]                       return(sendCondition)
[17:39:22.604]                     ns <- getNamespace("parallel")
[17:39:22.604]                     if (exists("sendData", mode = "function", 
[17:39:22.604]                       envir = ns)) {
[17:39:22.604]                       parallel_sendData <- get("sendData", mode = "function", 
[17:39:22.604]                         envir = ns)
[17:39:22.604]                       envir <- sys.frame(frame)
[17:39:22.604]                       master <- NULL
[17:39:22.604]                       while (!identical(envir, .GlobalEnv) && 
[17:39:22.604]                         !identical(envir, emptyenv())) {
[17:39:22.604]                         if (exists("master", mode = "list", envir = envir, 
[17:39:22.604]                           inherits = FALSE)) {
[17:39:22.604]                           master <- get("master", mode = "list", 
[17:39:22.604]                             envir = envir, inherits = FALSE)
[17:39:22.604]                           if (inherits(master, c("SOCKnode", 
[17:39:22.604]                             "SOCK0node"))) {
[17:39:22.604]                             sendCondition <<- function(cond) {
[17:39:22.604]                               data <- list(type = "VALUE", value = cond, 
[17:39:22.604]                                 success = TRUE)
[17:39:22.604]                               parallel_sendData(master, data)
[17:39:22.604]                             }
[17:39:22.604]                             return(sendCondition)
[17:39:22.604]                           }
[17:39:22.604]                         }
[17:39:22.604]                         frame <- frame + 1L
[17:39:22.604]                         envir <- sys.frame(frame)
[17:39:22.604]                       }
[17:39:22.604]                     }
[17:39:22.604]                     sendCondition <<- function(cond) NULL
[17:39:22.604]                   }
[17:39:22.604]                 })
[17:39:22.604]                 withCallingHandlers({
[17:39:22.604]                   {
[17:39:22.604]                     42
[17:39:22.604]                   }
[17:39:22.604]                 }, immediateCondition = function(cond) {
[17:39:22.604]                   sendCondition <- ...future.makeSendCondition()
[17:39:22.604]                   sendCondition(cond)
[17:39:22.604]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.604]                   {
[17:39:22.604]                     inherits <- base::inherits
[17:39:22.604]                     invokeRestart <- base::invokeRestart
[17:39:22.604]                     is.null <- base::is.null
[17:39:22.604]                     muffled <- FALSE
[17:39:22.604]                     if (inherits(cond, "message")) {
[17:39:22.604]                       muffled <- grepl(pattern, "muffleMessage")
[17:39:22.604]                       if (muffled) 
[17:39:22.604]                         invokeRestart("muffleMessage")
[17:39:22.604]                     }
[17:39:22.604]                     else if (inherits(cond, "warning")) {
[17:39:22.604]                       muffled <- grepl(pattern, "muffleWarning")
[17:39:22.604]                       if (muffled) 
[17:39:22.604]                         invokeRestart("muffleWarning")
[17:39:22.604]                     }
[17:39:22.604]                     else if (inherits(cond, "condition")) {
[17:39:22.604]                       if (!is.null(pattern)) {
[17:39:22.604]                         computeRestarts <- base::computeRestarts
[17:39:22.604]                         grepl <- base::grepl
[17:39:22.604]                         restarts <- computeRestarts(cond)
[17:39:22.604]                         for (restart in restarts) {
[17:39:22.604]                           name <- restart$name
[17:39:22.604]                           if (is.null(name)) 
[17:39:22.604]                             next
[17:39:22.604]                           if (!grepl(pattern, name)) 
[17:39:22.604]                             next
[17:39:22.604]                           invokeRestart(restart)
[17:39:22.604]                           muffled <- TRUE
[17:39:22.604]                           break
[17:39:22.604]                         }
[17:39:22.604]                       }
[17:39:22.604]                     }
[17:39:22.604]                     invisible(muffled)
[17:39:22.604]                   }
[17:39:22.604]                   muffleCondition(cond)
[17:39:22.604]                 })
[17:39:22.604]             }))
[17:39:22.604]             future::FutureResult(value = ...future.value$value, 
[17:39:22.604]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.604]                   ...future.rng), globalenv = if (FALSE) 
[17:39:22.604]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:39:22.604]                     ...future.globalenv.names))
[17:39:22.604]                 else NULL, started = ...future.startTime, version = "1.8")
[17:39:22.604]         }, condition = base::local({
[17:39:22.604]             c <- base::c
[17:39:22.604]             inherits <- base::inherits
[17:39:22.604]             invokeRestart <- base::invokeRestart
[17:39:22.604]             length <- base::length
[17:39:22.604]             list <- base::list
[17:39:22.604]             seq.int <- base::seq.int
[17:39:22.604]             signalCondition <- base::signalCondition
[17:39:22.604]             sys.calls <- base::sys.calls
[17:39:22.604]             `[[` <- base::`[[`
[17:39:22.604]             `+` <- base::`+`
[17:39:22.604]             `<<-` <- base::`<<-`
[17:39:22.604]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:39:22.604]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:39:22.604]                   3L)]
[17:39:22.604]             }
[17:39:22.604]             function(cond) {
[17:39:22.604]                 is_error <- inherits(cond, "error")
[17:39:22.604]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:39:22.604]                   NULL)
[17:39:22.604]                 if (is_error) {
[17:39:22.604]                   sessionInformation <- function() {
[17:39:22.604]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:39:22.604]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:39:22.604]                       search = base::search(), system = base::Sys.info())
[17:39:22.604]                   }
[17:39:22.604]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.604]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:39:22.604]                     cond$call), session = sessionInformation(), 
[17:39:22.604]                     timestamp = base::Sys.time(), signaled = 0L)
[17:39:22.604]                   signalCondition(cond)
[17:39:22.604]                 }
[17:39:22.604]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:39:22.604]                 "immediateCondition"))) {
[17:39:22.604]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:39:22.604]                   ...future.conditions[[length(...future.conditions) + 
[17:39:22.604]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:39:22.604]                   if (TRUE && !signal) {
[17:39:22.604]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.604]                     {
[17:39:22.604]                       inherits <- base::inherits
[17:39:22.604]                       invokeRestart <- base::invokeRestart
[17:39:22.604]                       is.null <- base::is.null
[17:39:22.604]                       muffled <- FALSE
[17:39:22.604]                       if (inherits(cond, "message")) {
[17:39:22.604]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.604]                         if (muffled) 
[17:39:22.604]                           invokeRestart("muffleMessage")
[17:39:22.604]                       }
[17:39:22.604]                       else if (inherits(cond, "warning")) {
[17:39:22.604]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.604]                         if (muffled) 
[17:39:22.604]                           invokeRestart("muffleWarning")
[17:39:22.604]                       }
[17:39:22.604]                       else if (inherits(cond, "condition")) {
[17:39:22.604]                         if (!is.null(pattern)) {
[17:39:22.604]                           computeRestarts <- base::computeRestarts
[17:39:22.604]                           grepl <- base::grepl
[17:39:22.604]                           restarts <- computeRestarts(cond)
[17:39:22.604]                           for (restart in restarts) {
[17:39:22.604]                             name <- restart$name
[17:39:22.604]                             if (is.null(name)) 
[17:39:22.604]                               next
[17:39:22.604]                             if (!grepl(pattern, name)) 
[17:39:22.604]                               next
[17:39:22.604]                             invokeRestart(restart)
[17:39:22.604]                             muffled <- TRUE
[17:39:22.604]                             break
[17:39:22.604]                           }
[17:39:22.604]                         }
[17:39:22.604]                       }
[17:39:22.604]                       invisible(muffled)
[17:39:22.604]                     }
[17:39:22.604]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.604]                   }
[17:39:22.604]                 }
[17:39:22.604]                 else {
[17:39:22.604]                   if (TRUE) {
[17:39:22.604]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:39:22.604]                     {
[17:39:22.604]                       inherits <- base::inherits
[17:39:22.604]                       invokeRestart <- base::invokeRestart
[17:39:22.604]                       is.null <- base::is.null
[17:39:22.604]                       muffled <- FALSE
[17:39:22.604]                       if (inherits(cond, "message")) {
[17:39:22.604]                         muffled <- grepl(pattern, "muffleMessage")
[17:39:22.604]                         if (muffled) 
[17:39:22.604]                           invokeRestart("muffleMessage")
[17:39:22.604]                       }
[17:39:22.604]                       else if (inherits(cond, "warning")) {
[17:39:22.604]                         muffled <- grepl(pattern, "muffleWarning")
[17:39:22.604]                         if (muffled) 
[17:39:22.604]                           invokeRestart("muffleWarning")
[17:39:22.604]                       }
[17:39:22.604]                       else if (inherits(cond, "condition")) {
[17:39:22.604]                         if (!is.null(pattern)) {
[17:39:22.604]                           computeRestarts <- base::computeRestarts
[17:39:22.604]                           grepl <- base::grepl
[17:39:22.604]                           restarts <- computeRestarts(cond)
[17:39:22.604]                           for (restart in restarts) {
[17:39:22.604]                             name <- restart$name
[17:39:22.604]                             if (is.null(name)) 
[17:39:22.604]                               next
[17:39:22.604]                             if (!grepl(pattern, name)) 
[17:39:22.604]                               next
[17:39:22.604]                             invokeRestart(restart)
[17:39:22.604]                             muffled <- TRUE
[17:39:22.604]                             break
[17:39:22.604]                           }
[17:39:22.604]                         }
[17:39:22.604]                       }
[17:39:22.604]                       invisible(muffled)
[17:39:22.604]                     }
[17:39:22.604]                     muffleCondition(cond, pattern = "^muffle")
[17:39:22.604]                   }
[17:39:22.604]                 }
[17:39:22.604]             }
[17:39:22.604]         }))
[17:39:22.604]     }, error = function(ex) {
[17:39:22.604]         base::structure(base::list(value = NULL, visible = NULL, 
[17:39:22.604]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:39:22.604]                 ...future.rng), started = ...future.startTime, 
[17:39:22.604]             finished = Sys.time(), session_uuid = NA_character_, 
[17:39:22.604]             version = "1.8"), class = "FutureResult")
[17:39:22.604]     }, finally = {
[17:39:22.604]         if (!identical(...future.workdir, getwd())) 
[17:39:22.604]             setwd(...future.workdir)
[17:39:22.604]         {
[17:39:22.604]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:39:22.604]                 ...future.oldOptions$nwarnings <- NULL
[17:39:22.604]             }
[17:39:22.604]             base::options(...future.oldOptions)
[17:39:22.604]             if (.Platform$OS.type == "windows") {
[17:39:22.604]                 old_names <- names(...future.oldEnvVars)
[17:39:22.604]                 envs <- base::Sys.getenv()
[17:39:22.604]                 names <- names(envs)
[17:39:22.604]                 common <- intersect(names, old_names)
[17:39:22.604]                 added <- setdiff(names, old_names)
[17:39:22.604]                 removed <- setdiff(old_names, names)
[17:39:22.604]                 changed <- common[...future.oldEnvVars[common] != 
[17:39:22.604]                   envs[common]]
[17:39:22.604]                 NAMES <- toupper(changed)
[17:39:22.604]                 args <- list()
[17:39:22.604]                 for (kk in seq_along(NAMES)) {
[17:39:22.604]                   name <- changed[[kk]]
[17:39:22.604]                   NAME <- NAMES[[kk]]
[17:39:22.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.604]                     next
[17:39:22.604]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.604]                 }
[17:39:22.604]                 NAMES <- toupper(added)
[17:39:22.604]                 for (kk in seq_along(NAMES)) {
[17:39:22.604]                   name <- added[[kk]]
[17:39:22.604]                   NAME <- NAMES[[kk]]
[17:39:22.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.604]                     next
[17:39:22.604]                   args[[name]] <- ""
[17:39:22.604]                 }
[17:39:22.604]                 NAMES <- toupper(removed)
[17:39:22.604]                 for (kk in seq_along(NAMES)) {
[17:39:22.604]                   name <- removed[[kk]]
[17:39:22.604]                   NAME <- NAMES[[kk]]
[17:39:22.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:39:22.604]                     next
[17:39:22.604]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:39:22.604]                 }
[17:39:22.604]                 if (length(args) > 0) 
[17:39:22.604]                   base::do.call(base::Sys.setenv, args = args)
[17:39:22.604]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:39:22.604]             }
[17:39:22.604]             else {
[17:39:22.604]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:39:22.604]             }
[17:39:22.604]             {
[17:39:22.604]                 if (base::length(...future.futureOptionsAdded) > 
[17:39:22.604]                   0L) {
[17:39:22.604]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:39:22.604]                   base::names(opts) <- ...future.futureOptionsAdded
[17:39:22.604]                   base::options(opts)
[17:39:22.604]                 }
[17:39:22.604]                 {
[17:39:22.604]                   {
[17:39:22.604]                     base::options(mc.cores = ...future.mc.cores.old)
[17:39:22.604]                     NULL
[17:39:22.604]                   }
[17:39:22.604]                   options(future.plan = NULL)
[17:39:22.604]                   if (is.na(NA_character_)) 
[17:39:22.604]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:39:22.604]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:39:22.604]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:39:22.604]                     .init = FALSE)
[17:39:22.604]                 }
[17:39:22.604]             }
[17:39:22.604]         }
[17:39:22.604]     })
[17:39:22.604]     if (TRUE) {
[17:39:22.604]         base::sink(type = "output", split = FALSE)
[17:39:22.604]         if (TRUE) {
[17:39:22.604]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:39:22.604]         }
[17:39:22.604]         else {
[17:39:22.604]             ...future.result["stdout"] <- base::list(NULL)
[17:39:22.604]         }
[17:39:22.604]         base::close(...future.stdout)
[17:39:22.604]         ...future.stdout <- NULL
[17:39:22.604]     }
[17:39:22.604]     ...future.result$conditions <- ...future.conditions
[17:39:22.604]     ...future.result$finished <- base::Sys.time()
[17:39:22.604]     ...future.result
[17:39:22.604] }
[17:39:22.607] MultisessionFuture started
[17:39:22.607] - Launch lazy future ... done
[17:39:22.607] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:39:22.609] receiveMessageFromWorker() for ClusterFuture ...
[17:39:22.609] - Validating connection of MultisessionFuture
[17:39:22.609] - received message: FutureResult
[17:39:22.609] - Received FutureResult
[17:39:22.609] - Erased future from FutureRegistry
[17:39:22.609] result() for ClusterFuture ...
[17:39:22.609] - result already collected: FutureResult
[17:39:22.609] result() for ClusterFuture ... done
[17:39:22.609] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4bca863c-18e3-93aa-7617-8924d4428b1b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:39:22.610] result() for ClusterFuture ...
[17:39:22.610] - result already collected: FutureResult
[17:39:22.610] result() for ClusterFuture ... done
[17:39:22.610] result() for ClusterFuture ...
[17:39:22.610] - result already collected: FutureResult
[17:39:22.610] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[17:39:22.611] plan(): Setting new future strategy stack:
[17:39:22.611] List of future strategies:
[17:39:22.611] 1. FutureStrategy:
[17:39:22.611]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:39:22.611]    - tweaked: FALSE
[17:39:22.611]    - call: future::plan(oplan)
[17:39:22.612] plan(): nbrOfWorkers() = 1
> 
