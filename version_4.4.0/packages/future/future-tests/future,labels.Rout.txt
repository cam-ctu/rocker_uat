
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[09:31:00.057] plan(): Setting new future strategy stack:
[09:31:00.057] List of future strategies:
[09:31:00.057] 1. sequential:
[09:31:00.057]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.057]    - tweaked: FALSE
[09:31:00.057]    - call: future::plan("sequential")
[09:31:00.068] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[09:31:00.093] plan(): Setting new future strategy stack:
[09:31:00.093] List of future strategies:
[09:31:00.093] 1. sequential:
[09:31:00.093]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.093]    - tweaked: FALSE
[09:31:00.093]    - call: plan(strategy)
[09:31:00.105] plan(): nbrOfWorkers() = 1
[09:31:00.106] getGlobalsAndPackages() ...
[09:31:00.106] Searching for globals...
[09:31:00.108] 
[09:31:00.108] Searching for globals ... DONE
[09:31:00.109] - globals: [0] <none>
[09:31:00.109] getGlobalsAndPackages() ... DONE
[09:31:00.109] Packages needed by the future expression (n = 0): <none>
[09:31:00.110] Packages needed by future strategies (n = 0): <none>
[09:31:00.110] {
[09:31:00.110]     {
[09:31:00.110]         {
[09:31:00.110]             ...future.startTime <- base::Sys.time()
[09:31:00.110]             {
[09:31:00.110]                 {
[09:31:00.110]                   {
[09:31:00.110]                     base::local({
[09:31:00.110]                       has_future <- base::requireNamespace("future", 
[09:31:00.110]                         quietly = TRUE)
[09:31:00.110]                       if (has_future) {
[09:31:00.110]                         ns <- base::getNamespace("future")
[09:31:00.110]                         version <- ns[[".package"]][["version"]]
[09:31:00.110]                         if (is.null(version)) 
[09:31:00.110]                           version <- utils::packageVersion("future")
[09:31:00.110]                       }
[09:31:00.110]                       else {
[09:31:00.110]                         version <- NULL
[09:31:00.110]                       }
[09:31:00.110]                       if (!has_future || version < "1.8.0") {
[09:31:00.110]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.110]                           "", base::R.version$version.string), 
[09:31:00.110]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:00.110]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.110]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.110]                             "release", "version")], collapse = " "), 
[09:31:00.110]                           hostname = base::Sys.info()[["nodename"]])
[09:31:00.110]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.110]                           info)
[09:31:00.110]                         info <- base::paste(info, collapse = "; ")
[09:31:00.110]                         if (!has_future) {
[09:31:00.110]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.110]                             info)
[09:31:00.110]                         }
[09:31:00.110]                         else {
[09:31:00.110]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.110]                             info, version)
[09:31:00.110]                         }
[09:31:00.110]                         base::stop(msg)
[09:31:00.110]                       }
[09:31:00.110]                     })
[09:31:00.110]                   }
[09:31:00.110]                   ...future.strategy.old <- future::plan("list")
[09:31:00.110]                   options(future.plan = NULL)
[09:31:00.110]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.110]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.110]                 }
[09:31:00.110]                 ...future.workdir <- getwd()
[09:31:00.110]             }
[09:31:00.110]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.110]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.110]         }
[09:31:00.110]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.110]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.110]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.110]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.110]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.110]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.110]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.110]             base::names(...future.oldOptions))
[09:31:00.110]     }
[09:31:00.110]     if (FALSE) {
[09:31:00.110]     }
[09:31:00.110]     else {
[09:31:00.110]         if (TRUE) {
[09:31:00.110]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.110]                 open = "w")
[09:31:00.110]         }
[09:31:00.110]         else {
[09:31:00.110]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.110]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.110]         }
[09:31:00.110]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.110]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.110]             base::sink(type = "output", split = FALSE)
[09:31:00.110]             base::close(...future.stdout)
[09:31:00.110]         }, add = TRUE)
[09:31:00.110]     }
[09:31:00.110]     ...future.frame <- base::sys.nframe()
[09:31:00.110]     ...future.conditions <- base::list()
[09:31:00.110]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.110]     if (FALSE) {
[09:31:00.110]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.110]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.110]     }
[09:31:00.110]     ...future.result <- base::tryCatch({
[09:31:00.110]         base::withCallingHandlers({
[09:31:00.110]             ...future.value <- base::withVisible(base::local(42))
[09:31:00.110]             future::FutureResult(value = ...future.value$value, 
[09:31:00.110]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.110]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.110]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.110]                     ...future.globalenv.names))
[09:31:00.110]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.110]         }, condition = base::local({
[09:31:00.110]             c <- base::c
[09:31:00.110]             inherits <- base::inherits
[09:31:00.110]             invokeRestart <- base::invokeRestart
[09:31:00.110]             length <- base::length
[09:31:00.110]             list <- base::list
[09:31:00.110]             seq.int <- base::seq.int
[09:31:00.110]             signalCondition <- base::signalCondition
[09:31:00.110]             sys.calls <- base::sys.calls
[09:31:00.110]             `[[` <- base::`[[`
[09:31:00.110]             `+` <- base::`+`
[09:31:00.110]             `<<-` <- base::`<<-`
[09:31:00.110]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.110]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.110]                   3L)]
[09:31:00.110]             }
[09:31:00.110]             function(cond) {
[09:31:00.110]                 is_error <- inherits(cond, "error")
[09:31:00.110]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.110]                   NULL)
[09:31:00.110]                 if (is_error) {
[09:31:00.110]                   sessionInformation <- function() {
[09:31:00.110]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.110]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.110]                       search = base::search(), system = base::Sys.info())
[09:31:00.110]                   }
[09:31:00.110]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.110]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.110]                     cond$call), session = sessionInformation(), 
[09:31:00.110]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.110]                   signalCondition(cond)
[09:31:00.110]                 }
[09:31:00.110]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.110]                 "immediateCondition"))) {
[09:31:00.110]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.110]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.110]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.110]                   if (TRUE && !signal) {
[09:31:00.110]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.110]                     {
[09:31:00.110]                       inherits <- base::inherits
[09:31:00.110]                       invokeRestart <- base::invokeRestart
[09:31:00.110]                       is.null <- base::is.null
[09:31:00.110]                       muffled <- FALSE
[09:31:00.110]                       if (inherits(cond, "message")) {
[09:31:00.110]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.110]                         if (muffled) 
[09:31:00.110]                           invokeRestart("muffleMessage")
[09:31:00.110]                       }
[09:31:00.110]                       else if (inherits(cond, "warning")) {
[09:31:00.110]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.110]                         if (muffled) 
[09:31:00.110]                           invokeRestart("muffleWarning")
[09:31:00.110]                       }
[09:31:00.110]                       else if (inherits(cond, "condition")) {
[09:31:00.110]                         if (!is.null(pattern)) {
[09:31:00.110]                           computeRestarts <- base::computeRestarts
[09:31:00.110]                           grepl <- base::grepl
[09:31:00.110]                           restarts <- computeRestarts(cond)
[09:31:00.110]                           for (restart in restarts) {
[09:31:00.110]                             name <- restart$name
[09:31:00.110]                             if (is.null(name)) 
[09:31:00.110]                               next
[09:31:00.110]                             if (!grepl(pattern, name)) 
[09:31:00.110]                               next
[09:31:00.110]                             invokeRestart(restart)
[09:31:00.110]                             muffled <- TRUE
[09:31:00.110]                             break
[09:31:00.110]                           }
[09:31:00.110]                         }
[09:31:00.110]                       }
[09:31:00.110]                       invisible(muffled)
[09:31:00.110]                     }
[09:31:00.110]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.110]                   }
[09:31:00.110]                 }
[09:31:00.110]                 else {
[09:31:00.110]                   if (TRUE) {
[09:31:00.110]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.110]                     {
[09:31:00.110]                       inherits <- base::inherits
[09:31:00.110]                       invokeRestart <- base::invokeRestart
[09:31:00.110]                       is.null <- base::is.null
[09:31:00.110]                       muffled <- FALSE
[09:31:00.110]                       if (inherits(cond, "message")) {
[09:31:00.110]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.110]                         if (muffled) 
[09:31:00.110]                           invokeRestart("muffleMessage")
[09:31:00.110]                       }
[09:31:00.110]                       else if (inherits(cond, "warning")) {
[09:31:00.110]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.110]                         if (muffled) 
[09:31:00.110]                           invokeRestart("muffleWarning")
[09:31:00.110]                       }
[09:31:00.110]                       else if (inherits(cond, "condition")) {
[09:31:00.110]                         if (!is.null(pattern)) {
[09:31:00.110]                           computeRestarts <- base::computeRestarts
[09:31:00.110]                           grepl <- base::grepl
[09:31:00.110]                           restarts <- computeRestarts(cond)
[09:31:00.110]                           for (restart in restarts) {
[09:31:00.110]                             name <- restart$name
[09:31:00.110]                             if (is.null(name)) 
[09:31:00.110]                               next
[09:31:00.110]                             if (!grepl(pattern, name)) 
[09:31:00.110]                               next
[09:31:00.110]                             invokeRestart(restart)
[09:31:00.110]                             muffled <- TRUE
[09:31:00.110]                             break
[09:31:00.110]                           }
[09:31:00.110]                         }
[09:31:00.110]                       }
[09:31:00.110]                       invisible(muffled)
[09:31:00.110]                     }
[09:31:00.110]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.110]                   }
[09:31:00.110]                 }
[09:31:00.110]             }
[09:31:00.110]         }))
[09:31:00.110]     }, error = function(ex) {
[09:31:00.110]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.110]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.110]                 ...future.rng), started = ...future.startTime, 
[09:31:00.110]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.110]             version = "1.8"), class = "FutureResult")
[09:31:00.110]     }, finally = {
[09:31:00.110]         if (!identical(...future.workdir, getwd())) 
[09:31:00.110]             setwd(...future.workdir)
[09:31:00.110]         {
[09:31:00.110]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.110]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.110]             }
[09:31:00.110]             base::options(...future.oldOptions)
[09:31:00.110]             if (.Platform$OS.type == "windows") {
[09:31:00.110]                 old_names <- names(...future.oldEnvVars)
[09:31:00.110]                 envs <- base::Sys.getenv()
[09:31:00.110]                 names <- names(envs)
[09:31:00.110]                 common <- intersect(names, old_names)
[09:31:00.110]                 added <- setdiff(names, old_names)
[09:31:00.110]                 removed <- setdiff(old_names, names)
[09:31:00.110]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.110]                   envs[common]]
[09:31:00.110]                 NAMES <- toupper(changed)
[09:31:00.110]                 args <- list()
[09:31:00.110]                 for (kk in seq_along(NAMES)) {
[09:31:00.110]                   name <- changed[[kk]]
[09:31:00.110]                   NAME <- NAMES[[kk]]
[09:31:00.110]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.110]                     next
[09:31:00.110]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.110]                 }
[09:31:00.110]                 NAMES <- toupper(added)
[09:31:00.110]                 for (kk in seq_along(NAMES)) {
[09:31:00.110]                   name <- added[[kk]]
[09:31:00.110]                   NAME <- NAMES[[kk]]
[09:31:00.110]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.110]                     next
[09:31:00.110]                   args[[name]] <- ""
[09:31:00.110]                 }
[09:31:00.110]                 NAMES <- toupper(removed)
[09:31:00.110]                 for (kk in seq_along(NAMES)) {
[09:31:00.110]                   name <- removed[[kk]]
[09:31:00.110]                   NAME <- NAMES[[kk]]
[09:31:00.110]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.110]                     next
[09:31:00.110]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.110]                 }
[09:31:00.110]                 if (length(args) > 0) 
[09:31:00.110]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.110]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.110]             }
[09:31:00.110]             else {
[09:31:00.110]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.110]             }
[09:31:00.110]             {
[09:31:00.110]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.110]                   0L) {
[09:31:00.110]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.110]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.110]                   base::options(opts)
[09:31:00.110]                 }
[09:31:00.110]                 {
[09:31:00.110]                   {
[09:31:00.110]                     NULL
[09:31:00.110]                     RNGkind("Mersenne-Twister")
[09:31:00.110]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:00.110]                       inherits = FALSE)
[09:31:00.110]                   }
[09:31:00.110]                   options(future.plan = NULL)
[09:31:00.110]                   if (is.na(NA_character_)) 
[09:31:00.110]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.110]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.110]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.110]                     .init = FALSE)
[09:31:00.110]                 }
[09:31:00.110]             }
[09:31:00.110]         }
[09:31:00.110]     })
[09:31:00.110]     if (TRUE) {
[09:31:00.110]         base::sink(type = "output", split = FALSE)
[09:31:00.110]         if (TRUE) {
[09:31:00.110]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.110]         }
[09:31:00.110]         else {
[09:31:00.110]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.110]         }
[09:31:00.110]         base::close(...future.stdout)
[09:31:00.110]         ...future.stdout <- NULL
[09:31:00.110]     }
[09:31:00.110]     ...future.result$conditions <- ...future.conditions
[09:31:00.110]     ...future.result$finished <- base::Sys.time()
[09:31:00.110]     ...future.result
[09:31:00.110] }
[09:31:00.112] plan(): Setting new future strategy stack:
[09:31:00.112] List of future strategies:
[09:31:00.112] 1. sequential:
[09:31:00.112]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.112]    - tweaked: FALSE
[09:31:00.112]    - call: NULL
[09:31:00.113] plan(): nbrOfWorkers() = 1
[09:31:00.114] plan(): Setting new future strategy stack:
[09:31:00.114] List of future strategies:
[09:31:00.114] 1. sequential:
[09:31:00.114]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.114]    - tweaked: FALSE
[09:31:00.114]    - call: plan(strategy)
[09:31:00.114] plan(): nbrOfWorkers() = 1
[09:31:00.114] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:00.116] getGlobalsAndPackages() ...
[09:31:00.116] Searching for globals...
[09:31:00.116] 
[09:31:00.117] Searching for globals ... DONE
[09:31:00.117] - globals: [0] <none>
[09:31:00.117] getGlobalsAndPackages() ... DONE
[09:31:00.117] run() for ‘Future’ ...
[09:31:00.117] - state: ‘created’
[09:31:00.117] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:00.118] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:00.118] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:00.118]   - Field: ‘label’
[09:31:00.118]   - Field: ‘local’
[09:31:00.118]   - Field: ‘owner’
[09:31:00.118]   - Field: ‘envir’
[09:31:00.118]   - Field: ‘packages’
[09:31:00.118]   - Field: ‘gc’
[09:31:00.118]   - Field: ‘conditions’
[09:31:00.118]   - Field: ‘expr’
[09:31:00.118]   - Field: ‘uuid’
[09:31:00.119]   - Field: ‘seed’
[09:31:00.119]   - Field: ‘version’
[09:31:00.119]   - Field: ‘result’
[09:31:00.119]   - Field: ‘asynchronous’
[09:31:00.119]   - Field: ‘calls’
[09:31:00.119]   - Field: ‘globals’
[09:31:00.119]   - Field: ‘stdout’
[09:31:00.119]   - Field: ‘earlySignal’
[09:31:00.119]   - Field: ‘lazy’
[09:31:00.119]   - Field: ‘state’
[09:31:00.119] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:00.119] - Launch lazy future ...
[09:31:00.120] Packages needed by the future expression (n = 0): <none>
[09:31:00.120] Packages needed by future strategies (n = 0): <none>
[09:31:00.120] {
[09:31:00.120]     {
[09:31:00.120]         {
[09:31:00.120]             ...future.startTime <- base::Sys.time()
[09:31:00.120]             {
[09:31:00.120]                 {
[09:31:00.120]                   {
[09:31:00.120]                     base::local({
[09:31:00.120]                       has_future <- base::requireNamespace("future", 
[09:31:00.120]                         quietly = TRUE)
[09:31:00.120]                       if (has_future) {
[09:31:00.120]                         ns <- base::getNamespace("future")
[09:31:00.120]                         version <- ns[[".package"]][["version"]]
[09:31:00.120]                         if (is.null(version)) 
[09:31:00.120]                           version <- utils::packageVersion("future")
[09:31:00.120]                       }
[09:31:00.120]                       else {
[09:31:00.120]                         version <- NULL
[09:31:00.120]                       }
[09:31:00.120]                       if (!has_future || version < "1.8.0") {
[09:31:00.120]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.120]                           "", base::R.version$version.string), 
[09:31:00.120]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:00.120]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.120]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.120]                             "release", "version")], collapse = " "), 
[09:31:00.120]                           hostname = base::Sys.info()[["nodename"]])
[09:31:00.120]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.120]                           info)
[09:31:00.120]                         info <- base::paste(info, collapse = "; ")
[09:31:00.120]                         if (!has_future) {
[09:31:00.120]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.120]                             info)
[09:31:00.120]                         }
[09:31:00.120]                         else {
[09:31:00.120]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.120]                             info, version)
[09:31:00.120]                         }
[09:31:00.120]                         base::stop(msg)
[09:31:00.120]                       }
[09:31:00.120]                     })
[09:31:00.120]                   }
[09:31:00.120]                   ...future.strategy.old <- future::plan("list")
[09:31:00.120]                   options(future.plan = NULL)
[09:31:00.120]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.120]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.120]                 }
[09:31:00.120]                 ...future.workdir <- getwd()
[09:31:00.120]             }
[09:31:00.120]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.120]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.120]         }
[09:31:00.120]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.120]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.120]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.120]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.120]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.120]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.120]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.120]             base::names(...future.oldOptions))
[09:31:00.120]     }
[09:31:00.120]     if (FALSE) {
[09:31:00.120]     }
[09:31:00.120]     else {
[09:31:00.120]         if (TRUE) {
[09:31:00.120]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.120]                 open = "w")
[09:31:00.120]         }
[09:31:00.120]         else {
[09:31:00.120]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.120]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.120]         }
[09:31:00.120]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.120]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.120]             base::sink(type = "output", split = FALSE)
[09:31:00.120]             base::close(...future.stdout)
[09:31:00.120]         }, add = TRUE)
[09:31:00.120]     }
[09:31:00.120]     ...future.frame <- base::sys.nframe()
[09:31:00.120]     ...future.conditions <- base::list()
[09:31:00.120]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.120]     if (FALSE) {
[09:31:00.120]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.120]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.120]     }
[09:31:00.120]     ...future.result <- base::tryCatch({
[09:31:00.120]         base::withCallingHandlers({
[09:31:00.120]             ...future.value <- base::withVisible(base::local(42))
[09:31:00.120]             future::FutureResult(value = ...future.value$value, 
[09:31:00.120]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.120]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.120]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.120]                     ...future.globalenv.names))
[09:31:00.120]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.120]         }, condition = base::local({
[09:31:00.120]             c <- base::c
[09:31:00.120]             inherits <- base::inherits
[09:31:00.120]             invokeRestart <- base::invokeRestart
[09:31:00.120]             length <- base::length
[09:31:00.120]             list <- base::list
[09:31:00.120]             seq.int <- base::seq.int
[09:31:00.120]             signalCondition <- base::signalCondition
[09:31:00.120]             sys.calls <- base::sys.calls
[09:31:00.120]             `[[` <- base::`[[`
[09:31:00.120]             `+` <- base::`+`
[09:31:00.120]             `<<-` <- base::`<<-`
[09:31:00.120]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.120]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.120]                   3L)]
[09:31:00.120]             }
[09:31:00.120]             function(cond) {
[09:31:00.120]                 is_error <- inherits(cond, "error")
[09:31:00.120]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.120]                   NULL)
[09:31:00.120]                 if (is_error) {
[09:31:00.120]                   sessionInformation <- function() {
[09:31:00.120]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.120]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.120]                       search = base::search(), system = base::Sys.info())
[09:31:00.120]                   }
[09:31:00.120]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.120]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.120]                     cond$call), session = sessionInformation(), 
[09:31:00.120]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.120]                   signalCondition(cond)
[09:31:00.120]                 }
[09:31:00.120]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.120]                 "immediateCondition"))) {
[09:31:00.120]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.120]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.120]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.120]                   if (TRUE && !signal) {
[09:31:00.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.120]                     {
[09:31:00.120]                       inherits <- base::inherits
[09:31:00.120]                       invokeRestart <- base::invokeRestart
[09:31:00.120]                       is.null <- base::is.null
[09:31:00.120]                       muffled <- FALSE
[09:31:00.120]                       if (inherits(cond, "message")) {
[09:31:00.120]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.120]                         if (muffled) 
[09:31:00.120]                           invokeRestart("muffleMessage")
[09:31:00.120]                       }
[09:31:00.120]                       else if (inherits(cond, "warning")) {
[09:31:00.120]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.120]                         if (muffled) 
[09:31:00.120]                           invokeRestart("muffleWarning")
[09:31:00.120]                       }
[09:31:00.120]                       else if (inherits(cond, "condition")) {
[09:31:00.120]                         if (!is.null(pattern)) {
[09:31:00.120]                           computeRestarts <- base::computeRestarts
[09:31:00.120]                           grepl <- base::grepl
[09:31:00.120]                           restarts <- computeRestarts(cond)
[09:31:00.120]                           for (restart in restarts) {
[09:31:00.120]                             name <- restart$name
[09:31:00.120]                             if (is.null(name)) 
[09:31:00.120]                               next
[09:31:00.120]                             if (!grepl(pattern, name)) 
[09:31:00.120]                               next
[09:31:00.120]                             invokeRestart(restart)
[09:31:00.120]                             muffled <- TRUE
[09:31:00.120]                             break
[09:31:00.120]                           }
[09:31:00.120]                         }
[09:31:00.120]                       }
[09:31:00.120]                       invisible(muffled)
[09:31:00.120]                     }
[09:31:00.120]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.120]                   }
[09:31:00.120]                 }
[09:31:00.120]                 else {
[09:31:00.120]                   if (TRUE) {
[09:31:00.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.120]                     {
[09:31:00.120]                       inherits <- base::inherits
[09:31:00.120]                       invokeRestart <- base::invokeRestart
[09:31:00.120]                       is.null <- base::is.null
[09:31:00.120]                       muffled <- FALSE
[09:31:00.120]                       if (inherits(cond, "message")) {
[09:31:00.120]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.120]                         if (muffled) 
[09:31:00.120]                           invokeRestart("muffleMessage")
[09:31:00.120]                       }
[09:31:00.120]                       else if (inherits(cond, "warning")) {
[09:31:00.120]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.120]                         if (muffled) 
[09:31:00.120]                           invokeRestart("muffleWarning")
[09:31:00.120]                       }
[09:31:00.120]                       else if (inherits(cond, "condition")) {
[09:31:00.120]                         if (!is.null(pattern)) {
[09:31:00.120]                           computeRestarts <- base::computeRestarts
[09:31:00.120]                           grepl <- base::grepl
[09:31:00.120]                           restarts <- computeRestarts(cond)
[09:31:00.120]                           for (restart in restarts) {
[09:31:00.120]                             name <- restart$name
[09:31:00.120]                             if (is.null(name)) 
[09:31:00.120]                               next
[09:31:00.120]                             if (!grepl(pattern, name)) 
[09:31:00.120]                               next
[09:31:00.120]                             invokeRestart(restart)
[09:31:00.120]                             muffled <- TRUE
[09:31:00.120]                             break
[09:31:00.120]                           }
[09:31:00.120]                         }
[09:31:00.120]                       }
[09:31:00.120]                       invisible(muffled)
[09:31:00.120]                     }
[09:31:00.120]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.120]                   }
[09:31:00.120]                 }
[09:31:00.120]             }
[09:31:00.120]         }))
[09:31:00.120]     }, error = function(ex) {
[09:31:00.120]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.120]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.120]                 ...future.rng), started = ...future.startTime, 
[09:31:00.120]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.120]             version = "1.8"), class = "FutureResult")
[09:31:00.120]     }, finally = {
[09:31:00.120]         if (!identical(...future.workdir, getwd())) 
[09:31:00.120]             setwd(...future.workdir)
[09:31:00.120]         {
[09:31:00.120]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.120]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.120]             }
[09:31:00.120]             base::options(...future.oldOptions)
[09:31:00.120]             if (.Platform$OS.type == "windows") {
[09:31:00.120]                 old_names <- names(...future.oldEnvVars)
[09:31:00.120]                 envs <- base::Sys.getenv()
[09:31:00.120]                 names <- names(envs)
[09:31:00.120]                 common <- intersect(names, old_names)
[09:31:00.120]                 added <- setdiff(names, old_names)
[09:31:00.120]                 removed <- setdiff(old_names, names)
[09:31:00.120]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.120]                   envs[common]]
[09:31:00.120]                 NAMES <- toupper(changed)
[09:31:00.120]                 args <- list()
[09:31:00.120]                 for (kk in seq_along(NAMES)) {
[09:31:00.120]                   name <- changed[[kk]]
[09:31:00.120]                   NAME <- NAMES[[kk]]
[09:31:00.120]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.120]                     next
[09:31:00.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.120]                 }
[09:31:00.120]                 NAMES <- toupper(added)
[09:31:00.120]                 for (kk in seq_along(NAMES)) {
[09:31:00.120]                   name <- added[[kk]]
[09:31:00.120]                   NAME <- NAMES[[kk]]
[09:31:00.120]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.120]                     next
[09:31:00.120]                   args[[name]] <- ""
[09:31:00.120]                 }
[09:31:00.120]                 NAMES <- toupper(removed)
[09:31:00.120]                 for (kk in seq_along(NAMES)) {
[09:31:00.120]                   name <- removed[[kk]]
[09:31:00.120]                   NAME <- NAMES[[kk]]
[09:31:00.120]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.120]                     next
[09:31:00.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.120]                 }
[09:31:00.120]                 if (length(args) > 0) 
[09:31:00.120]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.120]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.120]             }
[09:31:00.120]             else {
[09:31:00.120]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.120]             }
[09:31:00.120]             {
[09:31:00.120]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.120]                   0L) {
[09:31:00.120]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.120]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.120]                   base::options(opts)
[09:31:00.120]                 }
[09:31:00.120]                 {
[09:31:00.120]                   {
[09:31:00.120]                     NULL
[09:31:00.120]                     RNGkind("Mersenne-Twister")
[09:31:00.120]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:00.120]                       inherits = FALSE)
[09:31:00.120]                   }
[09:31:00.120]                   options(future.plan = NULL)
[09:31:00.120]                   if (is.na(NA_character_)) 
[09:31:00.120]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.120]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.120]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.120]                     .init = FALSE)
[09:31:00.120]                 }
[09:31:00.120]             }
[09:31:00.120]         }
[09:31:00.120]     })
[09:31:00.120]     if (TRUE) {
[09:31:00.120]         base::sink(type = "output", split = FALSE)
[09:31:00.120]         if (TRUE) {
[09:31:00.120]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.120]         }
[09:31:00.120]         else {
[09:31:00.120]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.120]         }
[09:31:00.120]         base::close(...future.stdout)
[09:31:00.120]         ...future.stdout <- NULL
[09:31:00.120]     }
[09:31:00.120]     ...future.result$conditions <- ...future.conditions
[09:31:00.120]     ...future.result$finished <- base::Sys.time()
[09:31:00.120]     ...future.result
[09:31:00.120] }
[09:31:00.122] plan(): Setting new future strategy stack:
[09:31:00.122] List of future strategies:
[09:31:00.122] 1. sequential:
[09:31:00.122]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.122]    - tweaked: FALSE
[09:31:00.122]    - call: NULL
[09:31:00.122] plan(): nbrOfWorkers() = 1
[09:31:00.123] plan(): Setting new future strategy stack:
[09:31:00.123] List of future strategies:
[09:31:00.123] 1. sequential:
[09:31:00.123]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.123]    - tweaked: FALSE
[09:31:00.123]    - call: plan(strategy)
[09:31:00.124] plan(): nbrOfWorkers() = 1
[09:31:00.124] SequentialFuture started (and completed)
[09:31:00.124] - Launch lazy future ... done
[09:31:00.124] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:00.125] getGlobalsAndPackages() ...
[09:31:00.125] Searching for globals...
[09:31:00.127] - globals found: [1] ‘{’
[09:31:00.127] Searching for globals ... DONE
[09:31:00.127] Resolving globals: FALSE
[09:31:00.127] 
[09:31:00.127] 
[09:31:00.127] getGlobalsAndPackages() ... DONE
[09:31:00.128] run() for ‘Future’ ...
[09:31:00.128] - state: ‘created’
[09:31:00.128] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:00.128] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:00.128] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:00.128]   - Field: ‘label’
[09:31:00.129]   - Field: ‘local’
[09:31:00.129]   - Field: ‘owner’
[09:31:00.129]   - Field: ‘envir’
[09:31:00.129]   - Field: ‘packages’
[09:31:00.129]   - Field: ‘gc’
[09:31:00.129]   - Field: ‘conditions’
[09:31:00.129]   - Field: ‘expr’
[09:31:00.129]   - Field: ‘uuid’
[09:31:00.129]   - Field: ‘seed’
[09:31:00.129]   - Field: ‘version’
[09:31:00.129]   - Field: ‘result’
[09:31:00.130]   - Field: ‘asynchronous’
[09:31:00.130]   - Field: ‘calls’
[09:31:00.130]   - Field: ‘globals’
[09:31:00.130]   - Field: ‘stdout’
[09:31:00.130]   - Field: ‘earlySignal’
[09:31:00.130]   - Field: ‘lazy’
[09:31:00.130]   - Field: ‘state’
[09:31:00.130] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:00.130] - Launch lazy future ...
[09:31:00.130] Packages needed by the future expression (n = 0): <none>
[09:31:00.131] Packages needed by future strategies (n = 0): <none>
[09:31:00.131] {
[09:31:00.131]     {
[09:31:00.131]         {
[09:31:00.131]             ...future.startTime <- base::Sys.time()
[09:31:00.131]             {
[09:31:00.131]                 {
[09:31:00.131]                   {
[09:31:00.131]                     base::local({
[09:31:00.131]                       has_future <- base::requireNamespace("future", 
[09:31:00.131]                         quietly = TRUE)
[09:31:00.131]                       if (has_future) {
[09:31:00.131]                         ns <- base::getNamespace("future")
[09:31:00.131]                         version <- ns[[".package"]][["version"]]
[09:31:00.131]                         if (is.null(version)) 
[09:31:00.131]                           version <- utils::packageVersion("future")
[09:31:00.131]                       }
[09:31:00.131]                       else {
[09:31:00.131]                         version <- NULL
[09:31:00.131]                       }
[09:31:00.131]                       if (!has_future || version < "1.8.0") {
[09:31:00.131]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.131]                           "", base::R.version$version.string), 
[09:31:00.131]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:00.131]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.131]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.131]                             "release", "version")], collapse = " "), 
[09:31:00.131]                           hostname = base::Sys.info()[["nodename"]])
[09:31:00.131]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.131]                           info)
[09:31:00.131]                         info <- base::paste(info, collapse = "; ")
[09:31:00.131]                         if (!has_future) {
[09:31:00.131]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.131]                             info)
[09:31:00.131]                         }
[09:31:00.131]                         else {
[09:31:00.131]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.131]                             info, version)
[09:31:00.131]                         }
[09:31:00.131]                         base::stop(msg)
[09:31:00.131]                       }
[09:31:00.131]                     })
[09:31:00.131]                   }
[09:31:00.131]                   ...future.strategy.old <- future::plan("list")
[09:31:00.131]                   options(future.plan = NULL)
[09:31:00.131]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.131]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.131]                 }
[09:31:00.131]                 ...future.workdir <- getwd()
[09:31:00.131]             }
[09:31:00.131]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.131]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.131]         }
[09:31:00.131]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.131]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.131]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.131]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.131]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.131]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.131]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.131]             base::names(...future.oldOptions))
[09:31:00.131]     }
[09:31:00.131]     if (FALSE) {
[09:31:00.131]     }
[09:31:00.131]     else {
[09:31:00.131]         if (TRUE) {
[09:31:00.131]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.131]                 open = "w")
[09:31:00.131]         }
[09:31:00.131]         else {
[09:31:00.131]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.131]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.131]         }
[09:31:00.131]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.131]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.131]             base::sink(type = "output", split = FALSE)
[09:31:00.131]             base::close(...future.stdout)
[09:31:00.131]         }, add = TRUE)
[09:31:00.131]     }
[09:31:00.131]     ...future.frame <- base::sys.nframe()
[09:31:00.131]     ...future.conditions <- base::list()
[09:31:00.131]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.131]     if (FALSE) {
[09:31:00.131]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.131]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.131]     }
[09:31:00.131]     ...future.result <- base::tryCatch({
[09:31:00.131]         base::withCallingHandlers({
[09:31:00.131]             ...future.value <- base::withVisible(base::local({
[09:31:00.131]                 42
[09:31:00.131]             }))
[09:31:00.131]             future::FutureResult(value = ...future.value$value, 
[09:31:00.131]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.131]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.131]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.131]                     ...future.globalenv.names))
[09:31:00.131]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.131]         }, condition = base::local({
[09:31:00.131]             c <- base::c
[09:31:00.131]             inherits <- base::inherits
[09:31:00.131]             invokeRestart <- base::invokeRestart
[09:31:00.131]             length <- base::length
[09:31:00.131]             list <- base::list
[09:31:00.131]             seq.int <- base::seq.int
[09:31:00.131]             signalCondition <- base::signalCondition
[09:31:00.131]             sys.calls <- base::sys.calls
[09:31:00.131]             `[[` <- base::`[[`
[09:31:00.131]             `+` <- base::`+`
[09:31:00.131]             `<<-` <- base::`<<-`
[09:31:00.131]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.131]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.131]                   3L)]
[09:31:00.131]             }
[09:31:00.131]             function(cond) {
[09:31:00.131]                 is_error <- inherits(cond, "error")
[09:31:00.131]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.131]                   NULL)
[09:31:00.131]                 if (is_error) {
[09:31:00.131]                   sessionInformation <- function() {
[09:31:00.131]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.131]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.131]                       search = base::search(), system = base::Sys.info())
[09:31:00.131]                   }
[09:31:00.131]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.131]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.131]                     cond$call), session = sessionInformation(), 
[09:31:00.131]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.131]                   signalCondition(cond)
[09:31:00.131]                 }
[09:31:00.131]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.131]                 "immediateCondition"))) {
[09:31:00.131]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.131]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.131]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.131]                   if (TRUE && !signal) {
[09:31:00.131]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.131]                     {
[09:31:00.131]                       inherits <- base::inherits
[09:31:00.131]                       invokeRestart <- base::invokeRestart
[09:31:00.131]                       is.null <- base::is.null
[09:31:00.131]                       muffled <- FALSE
[09:31:00.131]                       if (inherits(cond, "message")) {
[09:31:00.131]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.131]                         if (muffled) 
[09:31:00.131]                           invokeRestart("muffleMessage")
[09:31:00.131]                       }
[09:31:00.131]                       else if (inherits(cond, "warning")) {
[09:31:00.131]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.131]                         if (muffled) 
[09:31:00.131]                           invokeRestart("muffleWarning")
[09:31:00.131]                       }
[09:31:00.131]                       else if (inherits(cond, "condition")) {
[09:31:00.131]                         if (!is.null(pattern)) {
[09:31:00.131]                           computeRestarts <- base::computeRestarts
[09:31:00.131]                           grepl <- base::grepl
[09:31:00.131]                           restarts <- computeRestarts(cond)
[09:31:00.131]                           for (restart in restarts) {
[09:31:00.131]                             name <- restart$name
[09:31:00.131]                             if (is.null(name)) 
[09:31:00.131]                               next
[09:31:00.131]                             if (!grepl(pattern, name)) 
[09:31:00.131]                               next
[09:31:00.131]                             invokeRestart(restart)
[09:31:00.131]                             muffled <- TRUE
[09:31:00.131]                             break
[09:31:00.131]                           }
[09:31:00.131]                         }
[09:31:00.131]                       }
[09:31:00.131]                       invisible(muffled)
[09:31:00.131]                     }
[09:31:00.131]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.131]                   }
[09:31:00.131]                 }
[09:31:00.131]                 else {
[09:31:00.131]                   if (TRUE) {
[09:31:00.131]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.131]                     {
[09:31:00.131]                       inherits <- base::inherits
[09:31:00.131]                       invokeRestart <- base::invokeRestart
[09:31:00.131]                       is.null <- base::is.null
[09:31:00.131]                       muffled <- FALSE
[09:31:00.131]                       if (inherits(cond, "message")) {
[09:31:00.131]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.131]                         if (muffled) 
[09:31:00.131]                           invokeRestart("muffleMessage")
[09:31:00.131]                       }
[09:31:00.131]                       else if (inherits(cond, "warning")) {
[09:31:00.131]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.131]                         if (muffled) 
[09:31:00.131]                           invokeRestart("muffleWarning")
[09:31:00.131]                       }
[09:31:00.131]                       else if (inherits(cond, "condition")) {
[09:31:00.131]                         if (!is.null(pattern)) {
[09:31:00.131]                           computeRestarts <- base::computeRestarts
[09:31:00.131]                           grepl <- base::grepl
[09:31:00.131]                           restarts <- computeRestarts(cond)
[09:31:00.131]                           for (restart in restarts) {
[09:31:00.131]                             name <- restart$name
[09:31:00.131]                             if (is.null(name)) 
[09:31:00.131]                               next
[09:31:00.131]                             if (!grepl(pattern, name)) 
[09:31:00.131]                               next
[09:31:00.131]                             invokeRestart(restart)
[09:31:00.131]                             muffled <- TRUE
[09:31:00.131]                             break
[09:31:00.131]                           }
[09:31:00.131]                         }
[09:31:00.131]                       }
[09:31:00.131]                       invisible(muffled)
[09:31:00.131]                     }
[09:31:00.131]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.131]                   }
[09:31:00.131]                 }
[09:31:00.131]             }
[09:31:00.131]         }))
[09:31:00.131]     }, error = function(ex) {
[09:31:00.131]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.131]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.131]                 ...future.rng), started = ...future.startTime, 
[09:31:00.131]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.131]             version = "1.8"), class = "FutureResult")
[09:31:00.131]     }, finally = {
[09:31:00.131]         if (!identical(...future.workdir, getwd())) 
[09:31:00.131]             setwd(...future.workdir)
[09:31:00.131]         {
[09:31:00.131]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.131]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.131]             }
[09:31:00.131]             base::options(...future.oldOptions)
[09:31:00.131]             if (.Platform$OS.type == "windows") {
[09:31:00.131]                 old_names <- names(...future.oldEnvVars)
[09:31:00.131]                 envs <- base::Sys.getenv()
[09:31:00.131]                 names <- names(envs)
[09:31:00.131]                 common <- intersect(names, old_names)
[09:31:00.131]                 added <- setdiff(names, old_names)
[09:31:00.131]                 removed <- setdiff(old_names, names)
[09:31:00.131]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.131]                   envs[common]]
[09:31:00.131]                 NAMES <- toupper(changed)
[09:31:00.131]                 args <- list()
[09:31:00.131]                 for (kk in seq_along(NAMES)) {
[09:31:00.131]                   name <- changed[[kk]]
[09:31:00.131]                   NAME <- NAMES[[kk]]
[09:31:00.131]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.131]                     next
[09:31:00.131]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.131]                 }
[09:31:00.131]                 NAMES <- toupper(added)
[09:31:00.131]                 for (kk in seq_along(NAMES)) {
[09:31:00.131]                   name <- added[[kk]]
[09:31:00.131]                   NAME <- NAMES[[kk]]
[09:31:00.131]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.131]                     next
[09:31:00.131]                   args[[name]] <- ""
[09:31:00.131]                 }
[09:31:00.131]                 NAMES <- toupper(removed)
[09:31:00.131]                 for (kk in seq_along(NAMES)) {
[09:31:00.131]                   name <- removed[[kk]]
[09:31:00.131]                   NAME <- NAMES[[kk]]
[09:31:00.131]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.131]                     next
[09:31:00.131]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.131]                 }
[09:31:00.131]                 if (length(args) > 0) 
[09:31:00.131]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.131]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.131]             }
[09:31:00.131]             else {
[09:31:00.131]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.131]             }
[09:31:00.131]             {
[09:31:00.131]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.131]                   0L) {
[09:31:00.131]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.131]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.131]                   base::options(opts)
[09:31:00.131]                 }
[09:31:00.131]                 {
[09:31:00.131]                   {
[09:31:00.131]                     NULL
[09:31:00.131]                     RNGkind("Mersenne-Twister")
[09:31:00.131]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:00.131]                       inherits = FALSE)
[09:31:00.131]                   }
[09:31:00.131]                   options(future.plan = NULL)
[09:31:00.131]                   if (is.na(NA_character_)) 
[09:31:00.131]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.131]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.131]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.131]                     .init = FALSE)
[09:31:00.131]                 }
[09:31:00.131]             }
[09:31:00.131]         }
[09:31:00.131]     })
[09:31:00.131]     if (TRUE) {
[09:31:00.131]         base::sink(type = "output", split = FALSE)
[09:31:00.131]         if (TRUE) {
[09:31:00.131]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.131]         }
[09:31:00.131]         else {
[09:31:00.131]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.131]         }
[09:31:00.131]         base::close(...future.stdout)
[09:31:00.131]         ...future.stdout <- NULL
[09:31:00.131]     }
[09:31:00.131]     ...future.result$conditions <- ...future.conditions
[09:31:00.131]     ...future.result$finished <- base::Sys.time()
[09:31:00.131]     ...future.result
[09:31:00.131] }
[09:31:00.133] plan(): Setting new future strategy stack:
[09:31:00.133] List of future strategies:
[09:31:00.133] 1. sequential:
[09:31:00.133]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.133]    - tweaked: FALSE
[09:31:00.133]    - call: NULL
[09:31:00.133] plan(): nbrOfWorkers() = 1
[09:31:00.134] plan(): Setting new future strategy stack:
[09:31:00.134] List of future strategies:
[09:31:00.134] 1. sequential:
[09:31:00.134]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.134]    - tweaked: FALSE
[09:31:00.134]    - call: plan(strategy)
[09:31:00.134] plan(): nbrOfWorkers() = 1
[09:31:00.134] SequentialFuture started (and completed)
[09:31:00.135] - Launch lazy future ... done
[09:31:00.135] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:00.135] getGlobalsAndPackages() ...
[09:31:00.135] Searching for globals...
[09:31:00.136] 
[09:31:00.136] Searching for globals ... DONE
[09:31:00.136] - globals: [0] <none>
[09:31:00.136] getGlobalsAndPackages() ... DONE
[09:31:00.136] Packages needed by the future expression (n = 0): <none>
[09:31:00.136] Packages needed by future strategies (n = 0): <none>
[09:31:00.137] {
[09:31:00.137]     {
[09:31:00.137]         {
[09:31:00.137]             ...future.startTime <- base::Sys.time()
[09:31:00.137]             {
[09:31:00.137]                 {
[09:31:00.137]                   {
[09:31:00.137]                     base::local({
[09:31:00.137]                       has_future <- base::requireNamespace("future", 
[09:31:00.137]                         quietly = TRUE)
[09:31:00.137]                       if (has_future) {
[09:31:00.137]                         ns <- base::getNamespace("future")
[09:31:00.137]                         version <- ns[[".package"]][["version"]]
[09:31:00.137]                         if (is.null(version)) 
[09:31:00.137]                           version <- utils::packageVersion("future")
[09:31:00.137]                       }
[09:31:00.137]                       else {
[09:31:00.137]                         version <- NULL
[09:31:00.137]                       }
[09:31:00.137]                       if (!has_future || version < "1.8.0") {
[09:31:00.137]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.137]                           "", base::R.version$version.string), 
[09:31:00.137]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:00.137]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.137]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.137]                             "release", "version")], collapse = " "), 
[09:31:00.137]                           hostname = base::Sys.info()[["nodename"]])
[09:31:00.137]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.137]                           info)
[09:31:00.137]                         info <- base::paste(info, collapse = "; ")
[09:31:00.137]                         if (!has_future) {
[09:31:00.137]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.137]                             info)
[09:31:00.137]                         }
[09:31:00.137]                         else {
[09:31:00.137]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.137]                             info, version)
[09:31:00.137]                         }
[09:31:00.137]                         base::stop(msg)
[09:31:00.137]                       }
[09:31:00.137]                     })
[09:31:00.137]                   }
[09:31:00.137]                   ...future.strategy.old <- future::plan("list")
[09:31:00.137]                   options(future.plan = NULL)
[09:31:00.137]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.137]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.137]                 }
[09:31:00.137]                 ...future.workdir <- getwd()
[09:31:00.137]             }
[09:31:00.137]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.137]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.137]         }
[09:31:00.137]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.137]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.137]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.137]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.137]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.137]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.137]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.137]             base::names(...future.oldOptions))
[09:31:00.137]     }
[09:31:00.137]     if (FALSE) {
[09:31:00.137]     }
[09:31:00.137]     else {
[09:31:00.137]         if (TRUE) {
[09:31:00.137]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.137]                 open = "w")
[09:31:00.137]         }
[09:31:00.137]         else {
[09:31:00.137]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.137]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.137]         }
[09:31:00.137]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.137]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.137]             base::sink(type = "output", split = FALSE)
[09:31:00.137]             base::close(...future.stdout)
[09:31:00.137]         }, add = TRUE)
[09:31:00.137]     }
[09:31:00.137]     ...future.frame <- base::sys.nframe()
[09:31:00.137]     ...future.conditions <- base::list()
[09:31:00.137]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.137]     if (FALSE) {
[09:31:00.137]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.137]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.137]     }
[09:31:00.137]     ...future.result <- base::tryCatch({
[09:31:00.137]         base::withCallingHandlers({
[09:31:00.137]             ...future.value <- base::withVisible(base::local(42))
[09:31:00.137]             future::FutureResult(value = ...future.value$value, 
[09:31:00.137]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.137]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.137]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.137]                     ...future.globalenv.names))
[09:31:00.137]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.137]         }, condition = base::local({
[09:31:00.137]             c <- base::c
[09:31:00.137]             inherits <- base::inherits
[09:31:00.137]             invokeRestart <- base::invokeRestart
[09:31:00.137]             length <- base::length
[09:31:00.137]             list <- base::list
[09:31:00.137]             seq.int <- base::seq.int
[09:31:00.137]             signalCondition <- base::signalCondition
[09:31:00.137]             sys.calls <- base::sys.calls
[09:31:00.137]             `[[` <- base::`[[`
[09:31:00.137]             `+` <- base::`+`
[09:31:00.137]             `<<-` <- base::`<<-`
[09:31:00.137]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.137]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.137]                   3L)]
[09:31:00.137]             }
[09:31:00.137]             function(cond) {
[09:31:00.137]                 is_error <- inherits(cond, "error")
[09:31:00.137]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.137]                   NULL)
[09:31:00.137]                 if (is_error) {
[09:31:00.137]                   sessionInformation <- function() {
[09:31:00.137]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.137]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.137]                       search = base::search(), system = base::Sys.info())
[09:31:00.137]                   }
[09:31:00.137]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.137]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.137]                     cond$call), session = sessionInformation(), 
[09:31:00.137]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.137]                   signalCondition(cond)
[09:31:00.137]                 }
[09:31:00.137]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.137]                 "immediateCondition"))) {
[09:31:00.137]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.137]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.137]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.137]                   if (TRUE && !signal) {
[09:31:00.137]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.137]                     {
[09:31:00.137]                       inherits <- base::inherits
[09:31:00.137]                       invokeRestart <- base::invokeRestart
[09:31:00.137]                       is.null <- base::is.null
[09:31:00.137]                       muffled <- FALSE
[09:31:00.137]                       if (inherits(cond, "message")) {
[09:31:00.137]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.137]                         if (muffled) 
[09:31:00.137]                           invokeRestart("muffleMessage")
[09:31:00.137]                       }
[09:31:00.137]                       else if (inherits(cond, "warning")) {
[09:31:00.137]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.137]                         if (muffled) 
[09:31:00.137]                           invokeRestart("muffleWarning")
[09:31:00.137]                       }
[09:31:00.137]                       else if (inherits(cond, "condition")) {
[09:31:00.137]                         if (!is.null(pattern)) {
[09:31:00.137]                           computeRestarts <- base::computeRestarts
[09:31:00.137]                           grepl <- base::grepl
[09:31:00.137]                           restarts <- computeRestarts(cond)
[09:31:00.137]                           for (restart in restarts) {
[09:31:00.137]                             name <- restart$name
[09:31:00.137]                             if (is.null(name)) 
[09:31:00.137]                               next
[09:31:00.137]                             if (!grepl(pattern, name)) 
[09:31:00.137]                               next
[09:31:00.137]                             invokeRestart(restart)
[09:31:00.137]                             muffled <- TRUE
[09:31:00.137]                             break
[09:31:00.137]                           }
[09:31:00.137]                         }
[09:31:00.137]                       }
[09:31:00.137]                       invisible(muffled)
[09:31:00.137]                     }
[09:31:00.137]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.137]                   }
[09:31:00.137]                 }
[09:31:00.137]                 else {
[09:31:00.137]                   if (TRUE) {
[09:31:00.137]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.137]                     {
[09:31:00.137]                       inherits <- base::inherits
[09:31:00.137]                       invokeRestart <- base::invokeRestart
[09:31:00.137]                       is.null <- base::is.null
[09:31:00.137]                       muffled <- FALSE
[09:31:00.137]                       if (inherits(cond, "message")) {
[09:31:00.137]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.137]                         if (muffled) 
[09:31:00.137]                           invokeRestart("muffleMessage")
[09:31:00.137]                       }
[09:31:00.137]                       else if (inherits(cond, "warning")) {
[09:31:00.137]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.137]                         if (muffled) 
[09:31:00.137]                           invokeRestart("muffleWarning")
[09:31:00.137]                       }
[09:31:00.137]                       else if (inherits(cond, "condition")) {
[09:31:00.137]                         if (!is.null(pattern)) {
[09:31:00.137]                           computeRestarts <- base::computeRestarts
[09:31:00.137]                           grepl <- base::grepl
[09:31:00.137]                           restarts <- computeRestarts(cond)
[09:31:00.137]                           for (restart in restarts) {
[09:31:00.137]                             name <- restart$name
[09:31:00.137]                             if (is.null(name)) 
[09:31:00.137]                               next
[09:31:00.137]                             if (!grepl(pattern, name)) 
[09:31:00.137]                               next
[09:31:00.137]                             invokeRestart(restart)
[09:31:00.137]                             muffled <- TRUE
[09:31:00.137]                             break
[09:31:00.137]                           }
[09:31:00.137]                         }
[09:31:00.137]                       }
[09:31:00.137]                       invisible(muffled)
[09:31:00.137]                     }
[09:31:00.137]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.137]                   }
[09:31:00.137]                 }
[09:31:00.137]             }
[09:31:00.137]         }))
[09:31:00.137]     }, error = function(ex) {
[09:31:00.137]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.137]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.137]                 ...future.rng), started = ...future.startTime, 
[09:31:00.137]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.137]             version = "1.8"), class = "FutureResult")
[09:31:00.137]     }, finally = {
[09:31:00.137]         if (!identical(...future.workdir, getwd())) 
[09:31:00.137]             setwd(...future.workdir)
[09:31:00.137]         {
[09:31:00.137]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.137]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.137]             }
[09:31:00.137]             base::options(...future.oldOptions)
[09:31:00.137]             if (.Platform$OS.type == "windows") {
[09:31:00.137]                 old_names <- names(...future.oldEnvVars)
[09:31:00.137]                 envs <- base::Sys.getenv()
[09:31:00.137]                 names <- names(envs)
[09:31:00.137]                 common <- intersect(names, old_names)
[09:31:00.137]                 added <- setdiff(names, old_names)
[09:31:00.137]                 removed <- setdiff(old_names, names)
[09:31:00.137]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.137]                   envs[common]]
[09:31:00.137]                 NAMES <- toupper(changed)
[09:31:00.137]                 args <- list()
[09:31:00.137]                 for (kk in seq_along(NAMES)) {
[09:31:00.137]                   name <- changed[[kk]]
[09:31:00.137]                   NAME <- NAMES[[kk]]
[09:31:00.137]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.137]                     next
[09:31:00.137]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.137]                 }
[09:31:00.137]                 NAMES <- toupper(added)
[09:31:00.137]                 for (kk in seq_along(NAMES)) {
[09:31:00.137]                   name <- added[[kk]]
[09:31:00.137]                   NAME <- NAMES[[kk]]
[09:31:00.137]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.137]                     next
[09:31:00.137]                   args[[name]] <- ""
[09:31:00.137]                 }
[09:31:00.137]                 NAMES <- toupper(removed)
[09:31:00.137]                 for (kk in seq_along(NAMES)) {
[09:31:00.137]                   name <- removed[[kk]]
[09:31:00.137]                   NAME <- NAMES[[kk]]
[09:31:00.137]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.137]                     next
[09:31:00.137]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.137]                 }
[09:31:00.137]                 if (length(args) > 0) 
[09:31:00.137]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.137]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.137]             }
[09:31:00.137]             else {
[09:31:00.137]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.137]             }
[09:31:00.137]             {
[09:31:00.137]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.137]                   0L) {
[09:31:00.137]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.137]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.137]                   base::options(opts)
[09:31:00.137]                 }
[09:31:00.137]                 {
[09:31:00.137]                   {
[09:31:00.137]                     NULL
[09:31:00.137]                     RNGkind("Mersenne-Twister")
[09:31:00.137]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:00.137]                       inherits = FALSE)
[09:31:00.137]                   }
[09:31:00.137]                   options(future.plan = NULL)
[09:31:00.137]                   if (is.na(NA_character_)) 
[09:31:00.137]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.137]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.137]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.137]                     .init = FALSE)
[09:31:00.137]                 }
[09:31:00.137]             }
[09:31:00.137]         }
[09:31:00.137]     })
[09:31:00.137]     if (TRUE) {
[09:31:00.137]         base::sink(type = "output", split = FALSE)
[09:31:00.137]         if (TRUE) {
[09:31:00.137]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.137]         }
[09:31:00.137]         else {
[09:31:00.137]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.137]         }
[09:31:00.137]         base::close(...future.stdout)
[09:31:00.137]         ...future.stdout <- NULL
[09:31:00.137]     }
[09:31:00.137]     ...future.result$conditions <- ...future.conditions
[09:31:00.137]     ...future.result$finished <- base::Sys.time()
[09:31:00.137]     ...future.result
[09:31:00.137] }
[09:31:00.138] plan(): Setting new future strategy stack:
[09:31:00.139] List of future strategies:
[09:31:00.139] 1. sequential:
[09:31:00.139]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.139]    - tweaked: FALSE
[09:31:00.139]    - call: NULL
[09:31:00.139] plan(): nbrOfWorkers() = 1
[09:31:00.140] plan(): Setting new future strategy stack:
[09:31:00.140] List of future strategies:
[09:31:00.140] 1. sequential:
[09:31:00.140]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.140]    - tweaked: FALSE
[09:31:00.140]    - call: plan(strategy)
[09:31:00.140] plan(): nbrOfWorkers() = 1
[09:31:00.140] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:00.141] getGlobalsAndPackages() ...
[09:31:00.141] Searching for globals...
[09:31:00.141] 
[09:31:00.141] Searching for globals ... DONE
[09:31:00.141] - globals: [0] <none>
[09:31:00.141] getGlobalsAndPackages() ... DONE
[09:31:00.142] run() for ‘Future’ ...
[09:31:00.142] - state: ‘created’
[09:31:00.142] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:00.142] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:00.142] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:00.142]   - Field: ‘label’
[09:31:00.142]   - Field: ‘local’
[09:31:00.143]   - Field: ‘owner’
[09:31:00.143]   - Field: ‘envir’
[09:31:00.143]   - Field: ‘packages’
[09:31:00.143]   - Field: ‘gc’
[09:31:00.143]   - Field: ‘conditions’
[09:31:00.143]   - Field: ‘expr’
[09:31:00.143]   - Field: ‘uuid’
[09:31:00.143]   - Field: ‘seed’
[09:31:00.143]   - Field: ‘version’
[09:31:00.143]   - Field: ‘result’
[09:31:00.143]   - Field: ‘asynchronous’
[09:31:00.143]   - Field: ‘calls’
[09:31:00.144]   - Field: ‘globals’
[09:31:00.144]   - Field: ‘stdout’
[09:31:00.144]   - Field: ‘earlySignal’
[09:31:00.144]   - Field: ‘lazy’
[09:31:00.144]   - Field: ‘state’
[09:31:00.144] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:00.144] - Launch lazy future ...
[09:31:00.144] Packages needed by the future expression (n = 0): <none>
[09:31:00.144] Packages needed by future strategies (n = 0): <none>
[09:31:00.145] {
[09:31:00.145]     {
[09:31:00.145]         {
[09:31:00.145]             ...future.startTime <- base::Sys.time()
[09:31:00.145]             {
[09:31:00.145]                 {
[09:31:00.145]                   {
[09:31:00.145]                     base::local({
[09:31:00.145]                       has_future <- base::requireNamespace("future", 
[09:31:00.145]                         quietly = TRUE)
[09:31:00.145]                       if (has_future) {
[09:31:00.145]                         ns <- base::getNamespace("future")
[09:31:00.145]                         version <- ns[[".package"]][["version"]]
[09:31:00.145]                         if (is.null(version)) 
[09:31:00.145]                           version <- utils::packageVersion("future")
[09:31:00.145]                       }
[09:31:00.145]                       else {
[09:31:00.145]                         version <- NULL
[09:31:00.145]                       }
[09:31:00.145]                       if (!has_future || version < "1.8.0") {
[09:31:00.145]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.145]                           "", base::R.version$version.string), 
[09:31:00.145]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:00.145]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.145]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.145]                             "release", "version")], collapse = " "), 
[09:31:00.145]                           hostname = base::Sys.info()[["nodename"]])
[09:31:00.145]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.145]                           info)
[09:31:00.145]                         info <- base::paste(info, collapse = "; ")
[09:31:00.145]                         if (!has_future) {
[09:31:00.145]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.145]                             info)
[09:31:00.145]                         }
[09:31:00.145]                         else {
[09:31:00.145]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.145]                             info, version)
[09:31:00.145]                         }
[09:31:00.145]                         base::stop(msg)
[09:31:00.145]                       }
[09:31:00.145]                     })
[09:31:00.145]                   }
[09:31:00.145]                   ...future.strategy.old <- future::plan("list")
[09:31:00.145]                   options(future.plan = NULL)
[09:31:00.145]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.145]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.145]                 }
[09:31:00.145]                 ...future.workdir <- getwd()
[09:31:00.145]             }
[09:31:00.145]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.145]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.145]         }
[09:31:00.145]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.145]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.145]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.145]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.145]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.145]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.145]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.145]             base::names(...future.oldOptions))
[09:31:00.145]     }
[09:31:00.145]     if (FALSE) {
[09:31:00.145]     }
[09:31:00.145]     else {
[09:31:00.145]         if (TRUE) {
[09:31:00.145]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.145]                 open = "w")
[09:31:00.145]         }
[09:31:00.145]         else {
[09:31:00.145]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.145]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.145]         }
[09:31:00.145]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.145]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.145]             base::sink(type = "output", split = FALSE)
[09:31:00.145]             base::close(...future.stdout)
[09:31:00.145]         }, add = TRUE)
[09:31:00.145]     }
[09:31:00.145]     ...future.frame <- base::sys.nframe()
[09:31:00.145]     ...future.conditions <- base::list()
[09:31:00.145]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.145]     if (FALSE) {
[09:31:00.145]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.145]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.145]     }
[09:31:00.145]     ...future.result <- base::tryCatch({
[09:31:00.145]         base::withCallingHandlers({
[09:31:00.145]             ...future.value <- base::withVisible(base::local(42))
[09:31:00.145]             future::FutureResult(value = ...future.value$value, 
[09:31:00.145]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.145]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.145]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.145]                     ...future.globalenv.names))
[09:31:00.145]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.145]         }, condition = base::local({
[09:31:00.145]             c <- base::c
[09:31:00.145]             inherits <- base::inherits
[09:31:00.145]             invokeRestart <- base::invokeRestart
[09:31:00.145]             length <- base::length
[09:31:00.145]             list <- base::list
[09:31:00.145]             seq.int <- base::seq.int
[09:31:00.145]             signalCondition <- base::signalCondition
[09:31:00.145]             sys.calls <- base::sys.calls
[09:31:00.145]             `[[` <- base::`[[`
[09:31:00.145]             `+` <- base::`+`
[09:31:00.145]             `<<-` <- base::`<<-`
[09:31:00.145]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.145]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.145]                   3L)]
[09:31:00.145]             }
[09:31:00.145]             function(cond) {
[09:31:00.145]                 is_error <- inherits(cond, "error")
[09:31:00.145]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.145]                   NULL)
[09:31:00.145]                 if (is_error) {
[09:31:00.145]                   sessionInformation <- function() {
[09:31:00.145]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.145]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.145]                       search = base::search(), system = base::Sys.info())
[09:31:00.145]                   }
[09:31:00.145]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.145]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.145]                     cond$call), session = sessionInformation(), 
[09:31:00.145]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.145]                   signalCondition(cond)
[09:31:00.145]                 }
[09:31:00.145]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.145]                 "immediateCondition"))) {
[09:31:00.145]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.145]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.145]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.145]                   if (TRUE && !signal) {
[09:31:00.145]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.145]                     {
[09:31:00.145]                       inherits <- base::inherits
[09:31:00.145]                       invokeRestart <- base::invokeRestart
[09:31:00.145]                       is.null <- base::is.null
[09:31:00.145]                       muffled <- FALSE
[09:31:00.145]                       if (inherits(cond, "message")) {
[09:31:00.145]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.145]                         if (muffled) 
[09:31:00.145]                           invokeRestart("muffleMessage")
[09:31:00.145]                       }
[09:31:00.145]                       else if (inherits(cond, "warning")) {
[09:31:00.145]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.145]                         if (muffled) 
[09:31:00.145]                           invokeRestart("muffleWarning")
[09:31:00.145]                       }
[09:31:00.145]                       else if (inherits(cond, "condition")) {
[09:31:00.145]                         if (!is.null(pattern)) {
[09:31:00.145]                           computeRestarts <- base::computeRestarts
[09:31:00.145]                           grepl <- base::grepl
[09:31:00.145]                           restarts <- computeRestarts(cond)
[09:31:00.145]                           for (restart in restarts) {
[09:31:00.145]                             name <- restart$name
[09:31:00.145]                             if (is.null(name)) 
[09:31:00.145]                               next
[09:31:00.145]                             if (!grepl(pattern, name)) 
[09:31:00.145]                               next
[09:31:00.145]                             invokeRestart(restart)
[09:31:00.145]                             muffled <- TRUE
[09:31:00.145]                             break
[09:31:00.145]                           }
[09:31:00.145]                         }
[09:31:00.145]                       }
[09:31:00.145]                       invisible(muffled)
[09:31:00.145]                     }
[09:31:00.145]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.145]                   }
[09:31:00.145]                 }
[09:31:00.145]                 else {
[09:31:00.145]                   if (TRUE) {
[09:31:00.145]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.145]                     {
[09:31:00.145]                       inherits <- base::inherits
[09:31:00.145]                       invokeRestart <- base::invokeRestart
[09:31:00.145]                       is.null <- base::is.null
[09:31:00.145]                       muffled <- FALSE
[09:31:00.145]                       if (inherits(cond, "message")) {
[09:31:00.145]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.145]                         if (muffled) 
[09:31:00.145]                           invokeRestart("muffleMessage")
[09:31:00.145]                       }
[09:31:00.145]                       else if (inherits(cond, "warning")) {
[09:31:00.145]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.145]                         if (muffled) 
[09:31:00.145]                           invokeRestart("muffleWarning")
[09:31:00.145]                       }
[09:31:00.145]                       else if (inherits(cond, "condition")) {
[09:31:00.145]                         if (!is.null(pattern)) {
[09:31:00.145]                           computeRestarts <- base::computeRestarts
[09:31:00.145]                           grepl <- base::grepl
[09:31:00.145]                           restarts <- computeRestarts(cond)
[09:31:00.145]                           for (restart in restarts) {
[09:31:00.145]                             name <- restart$name
[09:31:00.145]                             if (is.null(name)) 
[09:31:00.145]                               next
[09:31:00.145]                             if (!grepl(pattern, name)) 
[09:31:00.145]                               next
[09:31:00.145]                             invokeRestart(restart)
[09:31:00.145]                             muffled <- TRUE
[09:31:00.145]                             break
[09:31:00.145]                           }
[09:31:00.145]                         }
[09:31:00.145]                       }
[09:31:00.145]                       invisible(muffled)
[09:31:00.145]                     }
[09:31:00.145]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.145]                   }
[09:31:00.145]                 }
[09:31:00.145]             }
[09:31:00.145]         }))
[09:31:00.145]     }, error = function(ex) {
[09:31:00.145]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.145]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.145]                 ...future.rng), started = ...future.startTime, 
[09:31:00.145]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.145]             version = "1.8"), class = "FutureResult")
[09:31:00.145]     }, finally = {
[09:31:00.145]         if (!identical(...future.workdir, getwd())) 
[09:31:00.145]             setwd(...future.workdir)
[09:31:00.145]         {
[09:31:00.145]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.145]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.145]             }
[09:31:00.145]             base::options(...future.oldOptions)
[09:31:00.145]             if (.Platform$OS.type == "windows") {
[09:31:00.145]                 old_names <- names(...future.oldEnvVars)
[09:31:00.145]                 envs <- base::Sys.getenv()
[09:31:00.145]                 names <- names(envs)
[09:31:00.145]                 common <- intersect(names, old_names)
[09:31:00.145]                 added <- setdiff(names, old_names)
[09:31:00.145]                 removed <- setdiff(old_names, names)
[09:31:00.145]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.145]                   envs[common]]
[09:31:00.145]                 NAMES <- toupper(changed)
[09:31:00.145]                 args <- list()
[09:31:00.145]                 for (kk in seq_along(NAMES)) {
[09:31:00.145]                   name <- changed[[kk]]
[09:31:00.145]                   NAME <- NAMES[[kk]]
[09:31:00.145]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.145]                     next
[09:31:00.145]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.145]                 }
[09:31:00.145]                 NAMES <- toupper(added)
[09:31:00.145]                 for (kk in seq_along(NAMES)) {
[09:31:00.145]                   name <- added[[kk]]
[09:31:00.145]                   NAME <- NAMES[[kk]]
[09:31:00.145]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.145]                     next
[09:31:00.145]                   args[[name]] <- ""
[09:31:00.145]                 }
[09:31:00.145]                 NAMES <- toupper(removed)
[09:31:00.145]                 for (kk in seq_along(NAMES)) {
[09:31:00.145]                   name <- removed[[kk]]
[09:31:00.145]                   NAME <- NAMES[[kk]]
[09:31:00.145]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.145]                     next
[09:31:00.145]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.145]                 }
[09:31:00.145]                 if (length(args) > 0) 
[09:31:00.145]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.145]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.145]             }
[09:31:00.145]             else {
[09:31:00.145]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.145]             }
[09:31:00.145]             {
[09:31:00.145]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.145]                   0L) {
[09:31:00.145]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.145]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.145]                   base::options(opts)
[09:31:00.145]                 }
[09:31:00.145]                 {
[09:31:00.145]                   {
[09:31:00.145]                     NULL
[09:31:00.145]                     RNGkind("Mersenne-Twister")
[09:31:00.145]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:00.145]                       inherits = FALSE)
[09:31:00.145]                   }
[09:31:00.145]                   options(future.plan = NULL)
[09:31:00.145]                   if (is.na(NA_character_)) 
[09:31:00.145]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.145]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.145]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.145]                     .init = FALSE)
[09:31:00.145]                 }
[09:31:00.145]             }
[09:31:00.145]         }
[09:31:00.145]     })
[09:31:00.145]     if (TRUE) {
[09:31:00.145]         base::sink(type = "output", split = FALSE)
[09:31:00.145]         if (TRUE) {
[09:31:00.145]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.145]         }
[09:31:00.145]         else {
[09:31:00.145]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.145]         }
[09:31:00.145]         base::close(...future.stdout)
[09:31:00.145]         ...future.stdout <- NULL
[09:31:00.145]     }
[09:31:00.145]     ...future.result$conditions <- ...future.conditions
[09:31:00.145]     ...future.result$finished <- base::Sys.time()
[09:31:00.145]     ...future.result
[09:31:00.145] }
[09:31:00.147] plan(): Setting new future strategy stack:
[09:31:00.149] List of future strategies:
[09:31:00.149] 1. sequential:
[09:31:00.149]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.149]    - tweaked: FALSE
[09:31:00.149]    - call: NULL
[09:31:00.149] plan(): nbrOfWorkers() = 1
[09:31:00.150] plan(): Setting new future strategy stack:
[09:31:00.150] List of future strategies:
[09:31:00.150] 1. sequential:
[09:31:00.150]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.150]    - tweaked: FALSE
[09:31:00.150]    - call: plan(strategy)
[09:31:00.150] plan(): nbrOfWorkers() = 1
[09:31:00.150] SequentialFuture started (and completed)
[09:31:00.151] - Launch lazy future ... done
[09:31:00.151] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:00.151] getGlobalsAndPackages() ...
[09:31:00.151] Searching for globals...
[09:31:00.152] - globals found: [1] ‘{’
[09:31:00.152] Searching for globals ... DONE
[09:31:00.152] Resolving globals: FALSE
[09:31:00.152] 
[09:31:00.152] 
[09:31:00.153] getGlobalsAndPackages() ... DONE
[09:31:00.153] run() for ‘Future’ ...
[09:31:00.153] - state: ‘created’
[09:31:00.153] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:31:00.153] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:31:00.153] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:31:00.153]   - Field: ‘label’
[09:31:00.153]   - Field: ‘local’
[09:31:00.154]   - Field: ‘owner’
[09:31:00.154]   - Field: ‘envir’
[09:31:00.154]   - Field: ‘packages’
[09:31:00.154]   - Field: ‘gc’
[09:31:00.154]   - Field: ‘conditions’
[09:31:00.154]   - Field: ‘expr’
[09:31:00.154]   - Field: ‘uuid’
[09:31:00.154]   - Field: ‘seed’
[09:31:00.154]   - Field: ‘version’
[09:31:00.154]   - Field: ‘result’
[09:31:00.154]   - Field: ‘asynchronous’
[09:31:00.155]   - Field: ‘calls’
[09:31:00.155]   - Field: ‘globals’
[09:31:00.155]   - Field: ‘stdout’
[09:31:00.155]   - Field: ‘earlySignal’
[09:31:00.155]   - Field: ‘lazy’
[09:31:00.155]   - Field: ‘state’
[09:31:00.155] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:31:00.155] - Launch lazy future ...
[09:31:00.155] Packages needed by the future expression (n = 0): <none>
[09:31:00.155] Packages needed by future strategies (n = 0): <none>
[09:31:00.156] {
[09:31:00.156]     {
[09:31:00.156]         {
[09:31:00.156]             ...future.startTime <- base::Sys.time()
[09:31:00.156]             {
[09:31:00.156]                 {
[09:31:00.156]                   {
[09:31:00.156]                     base::local({
[09:31:00.156]                       has_future <- base::requireNamespace("future", 
[09:31:00.156]                         quietly = TRUE)
[09:31:00.156]                       if (has_future) {
[09:31:00.156]                         ns <- base::getNamespace("future")
[09:31:00.156]                         version <- ns[[".package"]][["version"]]
[09:31:00.156]                         if (is.null(version)) 
[09:31:00.156]                           version <- utils::packageVersion("future")
[09:31:00.156]                       }
[09:31:00.156]                       else {
[09:31:00.156]                         version <- NULL
[09:31:00.156]                       }
[09:31:00.156]                       if (!has_future || version < "1.8.0") {
[09:31:00.156]                         info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.156]                           "", base::R.version$version.string), 
[09:31:00.156]                           platform = base::sprintf("%s (%s-bit)", 
[09:31:00.156]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.156]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.156]                             "release", "version")], collapse = " "), 
[09:31:00.156]                           hostname = base::Sys.info()[["nodename"]])
[09:31:00.156]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.156]                           info)
[09:31:00.156]                         info <- base::paste(info, collapse = "; ")
[09:31:00.156]                         if (!has_future) {
[09:31:00.156]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.156]                             info)
[09:31:00.156]                         }
[09:31:00.156]                         else {
[09:31:00.156]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.156]                             info, version)
[09:31:00.156]                         }
[09:31:00.156]                         base::stop(msg)
[09:31:00.156]                       }
[09:31:00.156]                     })
[09:31:00.156]                   }
[09:31:00.156]                   ...future.strategy.old <- future::plan("list")
[09:31:00.156]                   options(future.plan = NULL)
[09:31:00.156]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.156]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.156]                 }
[09:31:00.156]                 ...future.workdir <- getwd()
[09:31:00.156]             }
[09:31:00.156]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.156]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.156]         }
[09:31:00.156]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.156]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.156]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.156]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.156]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.156]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.156]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.156]             base::names(...future.oldOptions))
[09:31:00.156]     }
[09:31:00.156]     if (FALSE) {
[09:31:00.156]     }
[09:31:00.156]     else {
[09:31:00.156]         if (TRUE) {
[09:31:00.156]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.156]                 open = "w")
[09:31:00.156]         }
[09:31:00.156]         else {
[09:31:00.156]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.156]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.156]         }
[09:31:00.156]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.156]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.156]             base::sink(type = "output", split = FALSE)
[09:31:00.156]             base::close(...future.stdout)
[09:31:00.156]         }, add = TRUE)
[09:31:00.156]     }
[09:31:00.156]     ...future.frame <- base::sys.nframe()
[09:31:00.156]     ...future.conditions <- base::list()
[09:31:00.156]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.156]     if (FALSE) {
[09:31:00.156]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.156]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.156]     }
[09:31:00.156]     ...future.result <- base::tryCatch({
[09:31:00.156]         base::withCallingHandlers({
[09:31:00.156]             ...future.value <- base::withVisible(base::local({
[09:31:00.156]                 42
[09:31:00.156]             }))
[09:31:00.156]             future::FutureResult(value = ...future.value$value, 
[09:31:00.156]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.156]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.156]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.156]                     ...future.globalenv.names))
[09:31:00.156]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.156]         }, condition = base::local({
[09:31:00.156]             c <- base::c
[09:31:00.156]             inherits <- base::inherits
[09:31:00.156]             invokeRestart <- base::invokeRestart
[09:31:00.156]             length <- base::length
[09:31:00.156]             list <- base::list
[09:31:00.156]             seq.int <- base::seq.int
[09:31:00.156]             signalCondition <- base::signalCondition
[09:31:00.156]             sys.calls <- base::sys.calls
[09:31:00.156]             `[[` <- base::`[[`
[09:31:00.156]             `+` <- base::`+`
[09:31:00.156]             `<<-` <- base::`<<-`
[09:31:00.156]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.156]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.156]                   3L)]
[09:31:00.156]             }
[09:31:00.156]             function(cond) {
[09:31:00.156]                 is_error <- inherits(cond, "error")
[09:31:00.156]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.156]                   NULL)
[09:31:00.156]                 if (is_error) {
[09:31:00.156]                   sessionInformation <- function() {
[09:31:00.156]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.156]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.156]                       search = base::search(), system = base::Sys.info())
[09:31:00.156]                   }
[09:31:00.156]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.156]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.156]                     cond$call), session = sessionInformation(), 
[09:31:00.156]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.156]                   signalCondition(cond)
[09:31:00.156]                 }
[09:31:00.156]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.156]                 "immediateCondition"))) {
[09:31:00.156]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.156]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.156]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.156]                   if (TRUE && !signal) {
[09:31:00.156]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.156]                     {
[09:31:00.156]                       inherits <- base::inherits
[09:31:00.156]                       invokeRestart <- base::invokeRestart
[09:31:00.156]                       is.null <- base::is.null
[09:31:00.156]                       muffled <- FALSE
[09:31:00.156]                       if (inherits(cond, "message")) {
[09:31:00.156]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.156]                         if (muffled) 
[09:31:00.156]                           invokeRestart("muffleMessage")
[09:31:00.156]                       }
[09:31:00.156]                       else if (inherits(cond, "warning")) {
[09:31:00.156]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.156]                         if (muffled) 
[09:31:00.156]                           invokeRestart("muffleWarning")
[09:31:00.156]                       }
[09:31:00.156]                       else if (inherits(cond, "condition")) {
[09:31:00.156]                         if (!is.null(pattern)) {
[09:31:00.156]                           computeRestarts <- base::computeRestarts
[09:31:00.156]                           grepl <- base::grepl
[09:31:00.156]                           restarts <- computeRestarts(cond)
[09:31:00.156]                           for (restart in restarts) {
[09:31:00.156]                             name <- restart$name
[09:31:00.156]                             if (is.null(name)) 
[09:31:00.156]                               next
[09:31:00.156]                             if (!grepl(pattern, name)) 
[09:31:00.156]                               next
[09:31:00.156]                             invokeRestart(restart)
[09:31:00.156]                             muffled <- TRUE
[09:31:00.156]                             break
[09:31:00.156]                           }
[09:31:00.156]                         }
[09:31:00.156]                       }
[09:31:00.156]                       invisible(muffled)
[09:31:00.156]                     }
[09:31:00.156]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.156]                   }
[09:31:00.156]                 }
[09:31:00.156]                 else {
[09:31:00.156]                   if (TRUE) {
[09:31:00.156]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.156]                     {
[09:31:00.156]                       inherits <- base::inherits
[09:31:00.156]                       invokeRestart <- base::invokeRestart
[09:31:00.156]                       is.null <- base::is.null
[09:31:00.156]                       muffled <- FALSE
[09:31:00.156]                       if (inherits(cond, "message")) {
[09:31:00.156]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.156]                         if (muffled) 
[09:31:00.156]                           invokeRestart("muffleMessage")
[09:31:00.156]                       }
[09:31:00.156]                       else if (inherits(cond, "warning")) {
[09:31:00.156]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.156]                         if (muffled) 
[09:31:00.156]                           invokeRestart("muffleWarning")
[09:31:00.156]                       }
[09:31:00.156]                       else if (inherits(cond, "condition")) {
[09:31:00.156]                         if (!is.null(pattern)) {
[09:31:00.156]                           computeRestarts <- base::computeRestarts
[09:31:00.156]                           grepl <- base::grepl
[09:31:00.156]                           restarts <- computeRestarts(cond)
[09:31:00.156]                           for (restart in restarts) {
[09:31:00.156]                             name <- restart$name
[09:31:00.156]                             if (is.null(name)) 
[09:31:00.156]                               next
[09:31:00.156]                             if (!grepl(pattern, name)) 
[09:31:00.156]                               next
[09:31:00.156]                             invokeRestart(restart)
[09:31:00.156]                             muffled <- TRUE
[09:31:00.156]                             break
[09:31:00.156]                           }
[09:31:00.156]                         }
[09:31:00.156]                       }
[09:31:00.156]                       invisible(muffled)
[09:31:00.156]                     }
[09:31:00.156]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.156]                   }
[09:31:00.156]                 }
[09:31:00.156]             }
[09:31:00.156]         }))
[09:31:00.156]     }, error = function(ex) {
[09:31:00.156]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.156]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.156]                 ...future.rng), started = ...future.startTime, 
[09:31:00.156]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.156]             version = "1.8"), class = "FutureResult")
[09:31:00.156]     }, finally = {
[09:31:00.156]         if (!identical(...future.workdir, getwd())) 
[09:31:00.156]             setwd(...future.workdir)
[09:31:00.156]         {
[09:31:00.156]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.156]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.156]             }
[09:31:00.156]             base::options(...future.oldOptions)
[09:31:00.156]             if (.Platform$OS.type == "windows") {
[09:31:00.156]                 old_names <- names(...future.oldEnvVars)
[09:31:00.156]                 envs <- base::Sys.getenv()
[09:31:00.156]                 names <- names(envs)
[09:31:00.156]                 common <- intersect(names, old_names)
[09:31:00.156]                 added <- setdiff(names, old_names)
[09:31:00.156]                 removed <- setdiff(old_names, names)
[09:31:00.156]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.156]                   envs[common]]
[09:31:00.156]                 NAMES <- toupper(changed)
[09:31:00.156]                 args <- list()
[09:31:00.156]                 for (kk in seq_along(NAMES)) {
[09:31:00.156]                   name <- changed[[kk]]
[09:31:00.156]                   NAME <- NAMES[[kk]]
[09:31:00.156]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.156]                     next
[09:31:00.156]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.156]                 }
[09:31:00.156]                 NAMES <- toupper(added)
[09:31:00.156]                 for (kk in seq_along(NAMES)) {
[09:31:00.156]                   name <- added[[kk]]
[09:31:00.156]                   NAME <- NAMES[[kk]]
[09:31:00.156]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.156]                     next
[09:31:00.156]                   args[[name]] <- ""
[09:31:00.156]                 }
[09:31:00.156]                 NAMES <- toupper(removed)
[09:31:00.156]                 for (kk in seq_along(NAMES)) {
[09:31:00.156]                   name <- removed[[kk]]
[09:31:00.156]                   NAME <- NAMES[[kk]]
[09:31:00.156]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.156]                     next
[09:31:00.156]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.156]                 }
[09:31:00.156]                 if (length(args) > 0) 
[09:31:00.156]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.156]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.156]             }
[09:31:00.156]             else {
[09:31:00.156]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.156]             }
[09:31:00.156]             {
[09:31:00.156]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.156]                   0L) {
[09:31:00.156]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.156]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.156]                   base::options(opts)
[09:31:00.156]                 }
[09:31:00.156]                 {
[09:31:00.156]                   {
[09:31:00.156]                     NULL
[09:31:00.156]                     RNGkind("Mersenne-Twister")
[09:31:00.156]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[09:31:00.156]                       inherits = FALSE)
[09:31:00.156]                   }
[09:31:00.156]                   options(future.plan = NULL)
[09:31:00.156]                   if (is.na(NA_character_)) 
[09:31:00.156]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.156]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.156]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.156]                     .init = FALSE)
[09:31:00.156]                 }
[09:31:00.156]             }
[09:31:00.156]         }
[09:31:00.156]     })
[09:31:00.156]     if (TRUE) {
[09:31:00.156]         base::sink(type = "output", split = FALSE)
[09:31:00.156]         if (TRUE) {
[09:31:00.156]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.156]         }
[09:31:00.156]         else {
[09:31:00.156]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.156]         }
[09:31:00.156]         base::close(...future.stdout)
[09:31:00.156]         ...future.stdout <- NULL
[09:31:00.156]     }
[09:31:00.156]     ...future.result$conditions <- ...future.conditions
[09:31:00.156]     ...future.result$finished <- base::Sys.time()
[09:31:00.156]     ...future.result
[09:31:00.156] }
[09:31:00.157] plan(): Setting new future strategy stack:
[09:31:00.158] List of future strategies:
[09:31:00.158] 1. sequential:
[09:31:00.158]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.158]    - tweaked: FALSE
[09:31:00.158]    - call: NULL
[09:31:00.158] plan(): nbrOfWorkers() = 1
[09:31:00.159] plan(): Setting new future strategy stack:
[09:31:00.159] List of future strategies:
[09:31:00.159] 1. sequential:
[09:31:00.159]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.159]    - tweaked: FALSE
[09:31:00.159]    - call: plan(strategy)
[09:31:00.159] plan(): nbrOfWorkers() = 1
[09:31:00.159] SequentialFuture started (and completed)
[09:31:00.159] - Launch lazy future ... done
[09:31:00.160] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[09:31:00.160] plan(): Setting new future strategy stack:
[09:31:00.161] List of future strategies:
[09:31:00.161] 1. multicore:
[09:31:00.161]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:00.161]    - tweaked: FALSE
[09:31:00.161]    - call: plan(strategy)
[09:31:00.164] plan(): nbrOfWorkers() = 2
[09:31:00.168] getGlobalsAndPackages() ...
[09:31:00.168] 
[09:31:00.168] - globals: [0] <none>
[09:31:00.168] getGlobalsAndPackages() ... DONE
[09:31:00.169] Packages needed by the future expression (n = 0): <none>
[09:31:00.169] Packages needed by future strategies (n = 0): <none>
[09:31:00.170] {
[09:31:00.170]     {
[09:31:00.170]         {
[09:31:00.170]             ...future.startTime <- base::Sys.time()
[09:31:00.170]             {
[09:31:00.170]                 {
[09:31:00.170]                   {
[09:31:00.170]                     {
[09:31:00.170]                       base::local({
[09:31:00.170]                         has_future <- base::requireNamespace("future", 
[09:31:00.170]                           quietly = TRUE)
[09:31:00.170]                         if (has_future) {
[09:31:00.170]                           ns <- base::getNamespace("future")
[09:31:00.170]                           version <- ns[[".package"]][["version"]]
[09:31:00.170]                           if (is.null(version)) 
[09:31:00.170]                             version <- utils::packageVersion("future")
[09:31:00.170]                         }
[09:31:00.170]                         else {
[09:31:00.170]                           version <- NULL
[09:31:00.170]                         }
[09:31:00.170]                         if (!has_future || version < "1.8.0") {
[09:31:00.170]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.170]                             "", base::R.version$version.string), 
[09:31:00.170]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:00.170]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.170]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.170]                               "release", "version")], collapse = " "), 
[09:31:00.170]                             hostname = base::Sys.info()[["nodename"]])
[09:31:00.170]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.170]                             info)
[09:31:00.170]                           info <- base::paste(info, collapse = "; ")
[09:31:00.170]                           if (!has_future) {
[09:31:00.170]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.170]                               info)
[09:31:00.170]                           }
[09:31:00.170]                           else {
[09:31:00.170]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.170]                               info, version)
[09:31:00.170]                           }
[09:31:00.170]                           base::stop(msg)
[09:31:00.170]                         }
[09:31:00.170]                       })
[09:31:00.170]                     }
[09:31:00.170]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:00.170]                     base::options(mc.cores = 1L)
[09:31:00.170]                   }
[09:31:00.170]                   ...future.strategy.old <- future::plan("list")
[09:31:00.170]                   options(future.plan = NULL)
[09:31:00.170]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.170]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.170]                 }
[09:31:00.170]                 ...future.workdir <- getwd()
[09:31:00.170]             }
[09:31:00.170]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.170]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.170]         }
[09:31:00.170]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.170]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.170]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.170]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.170]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.170]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.170]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.170]             base::names(...future.oldOptions))
[09:31:00.170]     }
[09:31:00.170]     if (FALSE) {
[09:31:00.170]     }
[09:31:00.170]     else {
[09:31:00.170]         if (TRUE) {
[09:31:00.170]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.170]                 open = "w")
[09:31:00.170]         }
[09:31:00.170]         else {
[09:31:00.170]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.170]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.170]         }
[09:31:00.170]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.170]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.170]             base::sink(type = "output", split = FALSE)
[09:31:00.170]             base::close(...future.stdout)
[09:31:00.170]         }, add = TRUE)
[09:31:00.170]     }
[09:31:00.170]     ...future.frame <- base::sys.nframe()
[09:31:00.170]     ...future.conditions <- base::list()
[09:31:00.170]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.170]     if (FALSE) {
[09:31:00.170]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.170]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.170]     }
[09:31:00.170]     ...future.result <- base::tryCatch({
[09:31:00.170]         base::withCallingHandlers({
[09:31:00.170]             ...future.value <- base::withVisible(base::local({
[09:31:00.170]                 withCallingHandlers({
[09:31:00.170]                   42
[09:31:00.170]                 }, immediateCondition = function(cond) {
[09:31:00.170]                   save_rds <- function (object, pathname, ...) 
[09:31:00.170]                   {
[09:31:00.170]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:00.170]                     if (file_test("-f", pathname_tmp)) {
[09:31:00.170]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.170]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:00.170]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.170]                         fi_tmp[["mtime"]])
[09:31:00.170]                     }
[09:31:00.170]                     tryCatch({
[09:31:00.170]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:00.170]                     }, error = function(ex) {
[09:31:00.170]                       msg <- conditionMessage(ex)
[09:31:00.170]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.170]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:00.170]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.170]                         fi_tmp[["mtime"]], msg)
[09:31:00.170]                       ex$message <- msg
[09:31:00.170]                       stop(ex)
[09:31:00.170]                     })
[09:31:00.170]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:00.170]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:00.170]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:00.170]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.170]                       fi <- file.info(pathname)
[09:31:00.170]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:00.170]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.170]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:00.170]                         fi[["size"]], fi[["mtime"]])
[09:31:00.170]                       stop(msg)
[09:31:00.170]                     }
[09:31:00.170]                     invisible(pathname)
[09:31:00.170]                   }
[09:31:00.170]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:00.170]                     rootPath = tempdir()) 
[09:31:00.170]                   {
[09:31:00.170]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:00.170]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:00.170]                       tmpdir = path, fileext = ".rds")
[09:31:00.170]                     save_rds(obj, file)
[09:31:00.170]                   }
[09:31:00.170]                   saveImmediateCondition(cond, path = "/tmp/RtmpShydig/.future/immediateConditions")
[09:31:00.170]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.170]                   {
[09:31:00.170]                     inherits <- base::inherits
[09:31:00.170]                     invokeRestart <- base::invokeRestart
[09:31:00.170]                     is.null <- base::is.null
[09:31:00.170]                     muffled <- FALSE
[09:31:00.170]                     if (inherits(cond, "message")) {
[09:31:00.170]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:00.170]                       if (muffled) 
[09:31:00.170]                         invokeRestart("muffleMessage")
[09:31:00.170]                     }
[09:31:00.170]                     else if (inherits(cond, "warning")) {
[09:31:00.170]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:00.170]                       if (muffled) 
[09:31:00.170]                         invokeRestart("muffleWarning")
[09:31:00.170]                     }
[09:31:00.170]                     else if (inherits(cond, "condition")) {
[09:31:00.170]                       if (!is.null(pattern)) {
[09:31:00.170]                         computeRestarts <- base::computeRestarts
[09:31:00.170]                         grepl <- base::grepl
[09:31:00.170]                         restarts <- computeRestarts(cond)
[09:31:00.170]                         for (restart in restarts) {
[09:31:00.170]                           name <- restart$name
[09:31:00.170]                           if (is.null(name)) 
[09:31:00.170]                             next
[09:31:00.170]                           if (!grepl(pattern, name)) 
[09:31:00.170]                             next
[09:31:00.170]                           invokeRestart(restart)
[09:31:00.170]                           muffled <- TRUE
[09:31:00.170]                           break
[09:31:00.170]                         }
[09:31:00.170]                       }
[09:31:00.170]                     }
[09:31:00.170]                     invisible(muffled)
[09:31:00.170]                   }
[09:31:00.170]                   muffleCondition(cond)
[09:31:00.170]                 })
[09:31:00.170]             }))
[09:31:00.170]             future::FutureResult(value = ...future.value$value, 
[09:31:00.170]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.170]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.170]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.170]                     ...future.globalenv.names))
[09:31:00.170]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.170]         }, condition = base::local({
[09:31:00.170]             c <- base::c
[09:31:00.170]             inherits <- base::inherits
[09:31:00.170]             invokeRestart <- base::invokeRestart
[09:31:00.170]             length <- base::length
[09:31:00.170]             list <- base::list
[09:31:00.170]             seq.int <- base::seq.int
[09:31:00.170]             signalCondition <- base::signalCondition
[09:31:00.170]             sys.calls <- base::sys.calls
[09:31:00.170]             `[[` <- base::`[[`
[09:31:00.170]             `+` <- base::`+`
[09:31:00.170]             `<<-` <- base::`<<-`
[09:31:00.170]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.170]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.170]                   3L)]
[09:31:00.170]             }
[09:31:00.170]             function(cond) {
[09:31:00.170]                 is_error <- inherits(cond, "error")
[09:31:00.170]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.170]                   NULL)
[09:31:00.170]                 if (is_error) {
[09:31:00.170]                   sessionInformation <- function() {
[09:31:00.170]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.170]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.170]                       search = base::search(), system = base::Sys.info())
[09:31:00.170]                   }
[09:31:00.170]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.170]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.170]                     cond$call), session = sessionInformation(), 
[09:31:00.170]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.170]                   signalCondition(cond)
[09:31:00.170]                 }
[09:31:00.170]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.170]                 "immediateCondition"))) {
[09:31:00.170]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.170]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.170]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.170]                   if (TRUE && !signal) {
[09:31:00.170]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.170]                     {
[09:31:00.170]                       inherits <- base::inherits
[09:31:00.170]                       invokeRestart <- base::invokeRestart
[09:31:00.170]                       is.null <- base::is.null
[09:31:00.170]                       muffled <- FALSE
[09:31:00.170]                       if (inherits(cond, "message")) {
[09:31:00.170]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.170]                         if (muffled) 
[09:31:00.170]                           invokeRestart("muffleMessage")
[09:31:00.170]                       }
[09:31:00.170]                       else if (inherits(cond, "warning")) {
[09:31:00.170]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.170]                         if (muffled) 
[09:31:00.170]                           invokeRestart("muffleWarning")
[09:31:00.170]                       }
[09:31:00.170]                       else if (inherits(cond, "condition")) {
[09:31:00.170]                         if (!is.null(pattern)) {
[09:31:00.170]                           computeRestarts <- base::computeRestarts
[09:31:00.170]                           grepl <- base::grepl
[09:31:00.170]                           restarts <- computeRestarts(cond)
[09:31:00.170]                           for (restart in restarts) {
[09:31:00.170]                             name <- restart$name
[09:31:00.170]                             if (is.null(name)) 
[09:31:00.170]                               next
[09:31:00.170]                             if (!grepl(pattern, name)) 
[09:31:00.170]                               next
[09:31:00.170]                             invokeRestart(restart)
[09:31:00.170]                             muffled <- TRUE
[09:31:00.170]                             break
[09:31:00.170]                           }
[09:31:00.170]                         }
[09:31:00.170]                       }
[09:31:00.170]                       invisible(muffled)
[09:31:00.170]                     }
[09:31:00.170]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.170]                   }
[09:31:00.170]                 }
[09:31:00.170]                 else {
[09:31:00.170]                   if (TRUE) {
[09:31:00.170]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.170]                     {
[09:31:00.170]                       inherits <- base::inherits
[09:31:00.170]                       invokeRestart <- base::invokeRestart
[09:31:00.170]                       is.null <- base::is.null
[09:31:00.170]                       muffled <- FALSE
[09:31:00.170]                       if (inherits(cond, "message")) {
[09:31:00.170]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.170]                         if (muffled) 
[09:31:00.170]                           invokeRestart("muffleMessage")
[09:31:00.170]                       }
[09:31:00.170]                       else if (inherits(cond, "warning")) {
[09:31:00.170]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.170]                         if (muffled) 
[09:31:00.170]                           invokeRestart("muffleWarning")
[09:31:00.170]                       }
[09:31:00.170]                       else if (inherits(cond, "condition")) {
[09:31:00.170]                         if (!is.null(pattern)) {
[09:31:00.170]                           computeRestarts <- base::computeRestarts
[09:31:00.170]                           grepl <- base::grepl
[09:31:00.170]                           restarts <- computeRestarts(cond)
[09:31:00.170]                           for (restart in restarts) {
[09:31:00.170]                             name <- restart$name
[09:31:00.170]                             if (is.null(name)) 
[09:31:00.170]                               next
[09:31:00.170]                             if (!grepl(pattern, name)) 
[09:31:00.170]                               next
[09:31:00.170]                             invokeRestart(restart)
[09:31:00.170]                             muffled <- TRUE
[09:31:00.170]                             break
[09:31:00.170]                           }
[09:31:00.170]                         }
[09:31:00.170]                       }
[09:31:00.170]                       invisible(muffled)
[09:31:00.170]                     }
[09:31:00.170]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.170]                   }
[09:31:00.170]                 }
[09:31:00.170]             }
[09:31:00.170]         }))
[09:31:00.170]     }, error = function(ex) {
[09:31:00.170]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.170]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.170]                 ...future.rng), started = ...future.startTime, 
[09:31:00.170]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.170]             version = "1.8"), class = "FutureResult")
[09:31:00.170]     }, finally = {
[09:31:00.170]         if (!identical(...future.workdir, getwd())) 
[09:31:00.170]             setwd(...future.workdir)
[09:31:00.170]         {
[09:31:00.170]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.170]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.170]             }
[09:31:00.170]             base::options(...future.oldOptions)
[09:31:00.170]             if (.Platform$OS.type == "windows") {
[09:31:00.170]                 old_names <- names(...future.oldEnvVars)
[09:31:00.170]                 envs <- base::Sys.getenv()
[09:31:00.170]                 names <- names(envs)
[09:31:00.170]                 common <- intersect(names, old_names)
[09:31:00.170]                 added <- setdiff(names, old_names)
[09:31:00.170]                 removed <- setdiff(old_names, names)
[09:31:00.170]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.170]                   envs[common]]
[09:31:00.170]                 NAMES <- toupper(changed)
[09:31:00.170]                 args <- list()
[09:31:00.170]                 for (kk in seq_along(NAMES)) {
[09:31:00.170]                   name <- changed[[kk]]
[09:31:00.170]                   NAME <- NAMES[[kk]]
[09:31:00.170]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.170]                     next
[09:31:00.170]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.170]                 }
[09:31:00.170]                 NAMES <- toupper(added)
[09:31:00.170]                 for (kk in seq_along(NAMES)) {
[09:31:00.170]                   name <- added[[kk]]
[09:31:00.170]                   NAME <- NAMES[[kk]]
[09:31:00.170]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.170]                     next
[09:31:00.170]                   args[[name]] <- ""
[09:31:00.170]                 }
[09:31:00.170]                 NAMES <- toupper(removed)
[09:31:00.170]                 for (kk in seq_along(NAMES)) {
[09:31:00.170]                   name <- removed[[kk]]
[09:31:00.170]                   NAME <- NAMES[[kk]]
[09:31:00.170]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.170]                     next
[09:31:00.170]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.170]                 }
[09:31:00.170]                 if (length(args) > 0) 
[09:31:00.170]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.170]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.170]             }
[09:31:00.170]             else {
[09:31:00.170]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.170]             }
[09:31:00.170]             {
[09:31:00.170]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.170]                   0L) {
[09:31:00.170]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.170]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.170]                   base::options(opts)
[09:31:00.170]                 }
[09:31:00.170]                 {
[09:31:00.170]                   {
[09:31:00.170]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:00.170]                     NULL
[09:31:00.170]                   }
[09:31:00.170]                   options(future.plan = NULL)
[09:31:00.170]                   if (is.na(NA_character_)) 
[09:31:00.170]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.170]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.170]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.170]                     .init = FALSE)
[09:31:00.170]                 }
[09:31:00.170]             }
[09:31:00.170]         }
[09:31:00.170]     })
[09:31:00.170]     if (TRUE) {
[09:31:00.170]         base::sink(type = "output", split = FALSE)
[09:31:00.170]         if (TRUE) {
[09:31:00.170]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.170]         }
[09:31:00.170]         else {
[09:31:00.170]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.170]         }
[09:31:00.170]         base::close(...future.stdout)
[09:31:00.170]         ...future.stdout <- NULL
[09:31:00.170]     }
[09:31:00.170]     ...future.result$conditions <- ...future.conditions
[09:31:00.170]     ...future.result$finished <- base::Sys.time()
[09:31:00.170]     ...future.result
[09:31:00.170] }
[09:31:00.172] requestCore(): workers = 2
[09:31:00.175] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
[09:31:00.175] plan(): Setting new future strategy stack:
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:00.176] List of future strategies:
[09:31:00.176] 1. sequential:
[09:31:00.176]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.176]    - tweaked: FALSE
[09:31:00.176]    - call: NULL
[09:31:00.177] plan(): nbrOfWorkers() = 1
[09:31:00.179] plan(): Setting new future strategy stack:
[09:31:00.179] List of future strategies:
[09:31:00.179] 1. multicore:
[09:31:00.179]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:00.179]    - tweaked: FALSE
[09:31:00.179]    - call: plan(strategy)
[09:31:00.183] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:00.185] result() for MulticoreFuture ...
[09:31:00.190] result() for MulticoreFuture ...
[09:31:00.190] result() for MulticoreFuture ... done
[09:31:00.190] result() for MulticoreFuture ... done
[09:31:00.190] result() for MulticoreFuture ...
[09:31:00.190] result() for MulticoreFuture ... done
[09:31:00.190] getGlobalsAndPackages() ...
[09:31:00.191] Searching for globals...
[09:31:00.191] 
[09:31:00.191] Searching for globals ... DONE
[09:31:00.191] - globals: [0] <none>
[09:31:00.191] getGlobalsAndPackages() ... DONE
[09:31:00.192] run() for ‘Future’ ...
[09:31:00.192] - state: ‘created’
[09:31:00.192] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:00.196] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:00.196] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:00.196]   - Field: ‘label’
[09:31:00.196]   - Field: ‘local’
[09:31:00.197]   - Field: ‘owner’
[09:31:00.197]   - Field: ‘envir’
[09:31:00.197]   - Field: ‘workers’
[09:31:00.197]   - Field: ‘packages’
[09:31:00.197]   - Field: ‘gc’
[09:31:00.197]   - Field: ‘job’
[09:31:00.197]   - Field: ‘conditions’
[09:31:00.197]   - Field: ‘expr’
[09:31:00.197]   - Field: ‘uuid’
[09:31:00.198]   - Field: ‘seed’
[09:31:00.198]   - Field: ‘version’
[09:31:00.198]   - Field: ‘result’
[09:31:00.198]   - Field: ‘asynchronous’
[09:31:00.198]   - Field: ‘calls’
[09:31:00.198]   - Field: ‘globals’
[09:31:00.198]   - Field: ‘stdout’
[09:31:00.198]   - Field: ‘earlySignal’
[09:31:00.198]   - Field: ‘lazy’
[09:31:00.199]   - Field: ‘state’
[09:31:00.199] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:00.199] - Launch lazy future ...
[09:31:00.199] Packages needed by the future expression (n = 0): <none>
[09:31:00.199] Packages needed by future strategies (n = 0): <none>
[09:31:00.200] {
[09:31:00.200]     {
[09:31:00.200]         {
[09:31:00.200]             ...future.startTime <- base::Sys.time()
[09:31:00.200]             {
[09:31:00.200]                 {
[09:31:00.200]                   {
[09:31:00.200]                     {
[09:31:00.200]                       base::local({
[09:31:00.200]                         has_future <- base::requireNamespace("future", 
[09:31:00.200]                           quietly = TRUE)
[09:31:00.200]                         if (has_future) {
[09:31:00.200]                           ns <- base::getNamespace("future")
[09:31:00.200]                           version <- ns[[".package"]][["version"]]
[09:31:00.200]                           if (is.null(version)) 
[09:31:00.200]                             version <- utils::packageVersion("future")
[09:31:00.200]                         }
[09:31:00.200]                         else {
[09:31:00.200]                           version <- NULL
[09:31:00.200]                         }
[09:31:00.200]                         if (!has_future || version < "1.8.0") {
[09:31:00.200]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.200]                             "", base::R.version$version.string), 
[09:31:00.200]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:00.200]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.200]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.200]                               "release", "version")], collapse = " "), 
[09:31:00.200]                             hostname = base::Sys.info()[["nodename"]])
[09:31:00.200]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.200]                             info)
[09:31:00.200]                           info <- base::paste(info, collapse = "; ")
[09:31:00.200]                           if (!has_future) {
[09:31:00.200]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.200]                               info)
[09:31:00.200]                           }
[09:31:00.200]                           else {
[09:31:00.200]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.200]                               info, version)
[09:31:00.200]                           }
[09:31:00.200]                           base::stop(msg)
[09:31:00.200]                         }
[09:31:00.200]                       })
[09:31:00.200]                     }
[09:31:00.200]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:00.200]                     base::options(mc.cores = 1L)
[09:31:00.200]                   }
[09:31:00.200]                   ...future.strategy.old <- future::plan("list")
[09:31:00.200]                   options(future.plan = NULL)
[09:31:00.200]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.200]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.200]                 }
[09:31:00.200]                 ...future.workdir <- getwd()
[09:31:00.200]             }
[09:31:00.200]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.200]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.200]         }
[09:31:00.200]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.200]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.200]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.200]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.200]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.200]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.200]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.200]             base::names(...future.oldOptions))
[09:31:00.200]     }
[09:31:00.200]     if (FALSE) {
[09:31:00.200]     }
[09:31:00.200]     else {
[09:31:00.200]         if (TRUE) {
[09:31:00.200]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.200]                 open = "w")
[09:31:00.200]         }
[09:31:00.200]         else {
[09:31:00.200]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.200]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.200]         }
[09:31:00.200]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.200]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.200]             base::sink(type = "output", split = FALSE)
[09:31:00.200]             base::close(...future.stdout)
[09:31:00.200]         }, add = TRUE)
[09:31:00.200]     }
[09:31:00.200]     ...future.frame <- base::sys.nframe()
[09:31:00.200]     ...future.conditions <- base::list()
[09:31:00.200]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.200]     if (FALSE) {
[09:31:00.200]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.200]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.200]     }
[09:31:00.200]     ...future.result <- base::tryCatch({
[09:31:00.200]         base::withCallingHandlers({
[09:31:00.200]             ...future.value <- base::withVisible(base::local({
[09:31:00.200]                 withCallingHandlers({
[09:31:00.200]                   42
[09:31:00.200]                 }, immediateCondition = function(cond) {
[09:31:00.200]                   save_rds <- function (object, pathname, ...) 
[09:31:00.200]                   {
[09:31:00.200]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:00.200]                     if (file_test("-f", pathname_tmp)) {
[09:31:00.200]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.200]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:00.200]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.200]                         fi_tmp[["mtime"]])
[09:31:00.200]                     }
[09:31:00.200]                     tryCatch({
[09:31:00.200]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:00.200]                     }, error = function(ex) {
[09:31:00.200]                       msg <- conditionMessage(ex)
[09:31:00.200]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.200]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:00.200]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.200]                         fi_tmp[["mtime"]], msg)
[09:31:00.200]                       ex$message <- msg
[09:31:00.200]                       stop(ex)
[09:31:00.200]                     })
[09:31:00.200]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:00.200]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:00.200]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:00.200]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.200]                       fi <- file.info(pathname)
[09:31:00.200]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:00.200]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.200]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:00.200]                         fi[["size"]], fi[["mtime"]])
[09:31:00.200]                       stop(msg)
[09:31:00.200]                     }
[09:31:00.200]                     invisible(pathname)
[09:31:00.200]                   }
[09:31:00.200]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:00.200]                     rootPath = tempdir()) 
[09:31:00.200]                   {
[09:31:00.200]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:00.200]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:00.200]                       tmpdir = path, fileext = ".rds")
[09:31:00.200]                     save_rds(obj, file)
[09:31:00.200]                   }
[09:31:00.200]                   saveImmediateCondition(cond, path = "/tmp/RtmpShydig/.future/immediateConditions")
[09:31:00.200]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.200]                   {
[09:31:00.200]                     inherits <- base::inherits
[09:31:00.200]                     invokeRestart <- base::invokeRestart
[09:31:00.200]                     is.null <- base::is.null
[09:31:00.200]                     muffled <- FALSE
[09:31:00.200]                     if (inherits(cond, "message")) {
[09:31:00.200]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:00.200]                       if (muffled) 
[09:31:00.200]                         invokeRestart("muffleMessage")
[09:31:00.200]                     }
[09:31:00.200]                     else if (inherits(cond, "warning")) {
[09:31:00.200]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:00.200]                       if (muffled) 
[09:31:00.200]                         invokeRestart("muffleWarning")
[09:31:00.200]                     }
[09:31:00.200]                     else if (inherits(cond, "condition")) {
[09:31:00.200]                       if (!is.null(pattern)) {
[09:31:00.200]                         computeRestarts <- base::computeRestarts
[09:31:00.200]                         grepl <- base::grepl
[09:31:00.200]                         restarts <- computeRestarts(cond)
[09:31:00.200]                         for (restart in restarts) {
[09:31:00.200]                           name <- restart$name
[09:31:00.200]                           if (is.null(name)) 
[09:31:00.200]                             next
[09:31:00.200]                           if (!grepl(pattern, name)) 
[09:31:00.200]                             next
[09:31:00.200]                           invokeRestart(restart)
[09:31:00.200]                           muffled <- TRUE
[09:31:00.200]                           break
[09:31:00.200]                         }
[09:31:00.200]                       }
[09:31:00.200]                     }
[09:31:00.200]                     invisible(muffled)
[09:31:00.200]                   }
[09:31:00.200]                   muffleCondition(cond)
[09:31:00.200]                 })
[09:31:00.200]             }))
[09:31:00.200]             future::FutureResult(value = ...future.value$value, 
[09:31:00.200]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.200]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.200]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.200]                     ...future.globalenv.names))
[09:31:00.200]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.200]         }, condition = base::local({
[09:31:00.200]             c <- base::c
[09:31:00.200]             inherits <- base::inherits
[09:31:00.200]             invokeRestart <- base::invokeRestart
[09:31:00.200]             length <- base::length
[09:31:00.200]             list <- base::list
[09:31:00.200]             seq.int <- base::seq.int
[09:31:00.200]             signalCondition <- base::signalCondition
[09:31:00.200]             sys.calls <- base::sys.calls
[09:31:00.200]             `[[` <- base::`[[`
[09:31:00.200]             `+` <- base::`+`
[09:31:00.200]             `<<-` <- base::`<<-`
[09:31:00.200]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.200]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.200]                   3L)]
[09:31:00.200]             }
[09:31:00.200]             function(cond) {
[09:31:00.200]                 is_error <- inherits(cond, "error")
[09:31:00.200]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.200]                   NULL)
[09:31:00.200]                 if (is_error) {
[09:31:00.200]                   sessionInformation <- function() {
[09:31:00.200]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.200]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.200]                       search = base::search(), system = base::Sys.info())
[09:31:00.200]                   }
[09:31:00.200]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.200]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.200]                     cond$call), session = sessionInformation(), 
[09:31:00.200]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.200]                   signalCondition(cond)
[09:31:00.200]                 }
[09:31:00.200]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.200]                 "immediateCondition"))) {
[09:31:00.200]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.200]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.200]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.200]                   if (TRUE && !signal) {
[09:31:00.200]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.200]                     {
[09:31:00.200]                       inherits <- base::inherits
[09:31:00.200]                       invokeRestart <- base::invokeRestart
[09:31:00.200]                       is.null <- base::is.null
[09:31:00.200]                       muffled <- FALSE
[09:31:00.200]                       if (inherits(cond, "message")) {
[09:31:00.200]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.200]                         if (muffled) 
[09:31:00.200]                           invokeRestart("muffleMessage")
[09:31:00.200]                       }
[09:31:00.200]                       else if (inherits(cond, "warning")) {
[09:31:00.200]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.200]                         if (muffled) 
[09:31:00.200]                           invokeRestart("muffleWarning")
[09:31:00.200]                       }
[09:31:00.200]                       else if (inherits(cond, "condition")) {
[09:31:00.200]                         if (!is.null(pattern)) {
[09:31:00.200]                           computeRestarts <- base::computeRestarts
[09:31:00.200]                           grepl <- base::grepl
[09:31:00.200]                           restarts <- computeRestarts(cond)
[09:31:00.200]                           for (restart in restarts) {
[09:31:00.200]                             name <- restart$name
[09:31:00.200]                             if (is.null(name)) 
[09:31:00.200]                               next
[09:31:00.200]                             if (!grepl(pattern, name)) 
[09:31:00.200]                               next
[09:31:00.200]                             invokeRestart(restart)
[09:31:00.200]                             muffled <- TRUE
[09:31:00.200]                             break
[09:31:00.200]                           }
[09:31:00.200]                         }
[09:31:00.200]                       }
[09:31:00.200]                       invisible(muffled)
[09:31:00.200]                     }
[09:31:00.200]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.200]                   }
[09:31:00.200]                 }
[09:31:00.200]                 else {
[09:31:00.200]                   if (TRUE) {
[09:31:00.200]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.200]                     {
[09:31:00.200]                       inherits <- base::inherits
[09:31:00.200]                       invokeRestart <- base::invokeRestart
[09:31:00.200]                       is.null <- base::is.null
[09:31:00.200]                       muffled <- FALSE
[09:31:00.200]                       if (inherits(cond, "message")) {
[09:31:00.200]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.200]                         if (muffled) 
[09:31:00.200]                           invokeRestart("muffleMessage")
[09:31:00.200]                       }
[09:31:00.200]                       else if (inherits(cond, "warning")) {
[09:31:00.200]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.200]                         if (muffled) 
[09:31:00.200]                           invokeRestart("muffleWarning")
[09:31:00.200]                       }
[09:31:00.200]                       else if (inherits(cond, "condition")) {
[09:31:00.200]                         if (!is.null(pattern)) {
[09:31:00.200]                           computeRestarts <- base::computeRestarts
[09:31:00.200]                           grepl <- base::grepl
[09:31:00.200]                           restarts <- computeRestarts(cond)
[09:31:00.200]                           for (restart in restarts) {
[09:31:00.200]                             name <- restart$name
[09:31:00.200]                             if (is.null(name)) 
[09:31:00.200]                               next
[09:31:00.200]                             if (!grepl(pattern, name)) 
[09:31:00.200]                               next
[09:31:00.200]                             invokeRestart(restart)
[09:31:00.200]                             muffled <- TRUE
[09:31:00.200]                             break
[09:31:00.200]                           }
[09:31:00.200]                         }
[09:31:00.200]                       }
[09:31:00.200]                       invisible(muffled)
[09:31:00.200]                     }
[09:31:00.200]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.200]                   }
[09:31:00.200]                 }
[09:31:00.200]             }
[09:31:00.200]         }))
[09:31:00.200]     }, error = function(ex) {
[09:31:00.200]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.200]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.200]                 ...future.rng), started = ...future.startTime, 
[09:31:00.200]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.200]             version = "1.8"), class = "FutureResult")
[09:31:00.200]     }, finally = {
[09:31:00.200]         if (!identical(...future.workdir, getwd())) 
[09:31:00.200]             setwd(...future.workdir)
[09:31:00.200]         {
[09:31:00.200]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.200]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.200]             }
[09:31:00.200]             base::options(...future.oldOptions)
[09:31:00.200]             if (.Platform$OS.type == "windows") {
[09:31:00.200]                 old_names <- names(...future.oldEnvVars)
[09:31:00.200]                 envs <- base::Sys.getenv()
[09:31:00.200]                 names <- names(envs)
[09:31:00.200]                 common <- intersect(names, old_names)
[09:31:00.200]                 added <- setdiff(names, old_names)
[09:31:00.200]                 removed <- setdiff(old_names, names)
[09:31:00.200]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.200]                   envs[common]]
[09:31:00.200]                 NAMES <- toupper(changed)
[09:31:00.200]                 args <- list()
[09:31:00.200]                 for (kk in seq_along(NAMES)) {
[09:31:00.200]                   name <- changed[[kk]]
[09:31:00.200]                   NAME <- NAMES[[kk]]
[09:31:00.200]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.200]                     next
[09:31:00.200]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.200]                 }
[09:31:00.200]                 NAMES <- toupper(added)
[09:31:00.200]                 for (kk in seq_along(NAMES)) {
[09:31:00.200]                   name <- added[[kk]]
[09:31:00.200]                   NAME <- NAMES[[kk]]
[09:31:00.200]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.200]                     next
[09:31:00.200]                   args[[name]] <- ""
[09:31:00.200]                 }
[09:31:00.200]                 NAMES <- toupper(removed)
[09:31:00.200]                 for (kk in seq_along(NAMES)) {
[09:31:00.200]                   name <- removed[[kk]]
[09:31:00.200]                   NAME <- NAMES[[kk]]
[09:31:00.200]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.200]                     next
[09:31:00.200]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.200]                 }
[09:31:00.200]                 if (length(args) > 0) 
[09:31:00.200]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.200]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.200]             }
[09:31:00.200]             else {
[09:31:00.200]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.200]             }
[09:31:00.200]             {
[09:31:00.200]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.200]                   0L) {
[09:31:00.200]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.200]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.200]                   base::options(opts)
[09:31:00.200]                 }
[09:31:00.200]                 {
[09:31:00.200]                   {
[09:31:00.200]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:00.200]                     NULL
[09:31:00.200]                   }
[09:31:00.200]                   options(future.plan = NULL)
[09:31:00.200]                   if (is.na(NA_character_)) 
[09:31:00.200]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.200]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.200]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.200]                     .init = FALSE)
[09:31:00.200]                 }
[09:31:00.200]             }
[09:31:00.200]         }
[09:31:00.200]     })
[09:31:00.200]     if (TRUE) {
[09:31:00.200]         base::sink(type = "output", split = FALSE)
[09:31:00.200]         if (TRUE) {
[09:31:00.200]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.200]         }
[09:31:00.200]         else {
[09:31:00.200]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.200]         }
[09:31:00.200]         base::close(...future.stdout)
[09:31:00.200]         ...future.stdout <- NULL
[09:31:00.200]     }
[09:31:00.200]     ...future.result$conditions <- ...future.conditions
[09:31:00.200]     ...future.result$finished <- base::Sys.time()
[09:31:00.200]     ...future.result
[09:31:00.200] }
[09:31:00.202] requestCore(): workers = 2
[09:31:00.204] MulticoreFuture started
[09:31:00.205] - Launch lazy future ... done
[09:31:00.205] run() for ‘MulticoreFuture’ ... done
[09:31:00.205] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:00.205] List of future strategies:
[09:31:00.205] 1. sequential:
[09:31:00.205]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.205]    - tweaked: FALSE
[09:31:00.205]    - call: NULL
[09:31:00.206] plan(): nbrOfWorkers() = 1
[09:31:00.208] plan(): Setting new future strategy stack:
[09:31:00.208] List of future strategies:
[09:31:00.208] 1. multicore:
[09:31:00.208]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:00.208]    - tweaked: FALSE
[09:31:00.208]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:00.216] result() for MulticoreFuture ...
[09:31:00.219] plan(): nbrOfWorkers() = 2
[09:31:00.219] result() for MulticoreFuture ...
[09:31:00.219] result() for MulticoreFuture ... done
[09:31:00.220] result() for MulticoreFuture ... done
[09:31:00.220] result() for MulticoreFuture ...
[09:31:00.220] result() for MulticoreFuture ... done
[09:31:00.220] getGlobalsAndPackages() ...
[09:31:00.220] Searching for globals...
[09:31:00.221] - globals found: [1] ‘{’
[09:31:00.224] Searching for globals ... DONE
[09:31:00.224] Resolving globals: FALSE
[09:31:00.225] 
[09:31:00.225] 
[09:31:00.225] getGlobalsAndPackages() ... DONE
[09:31:00.226] run() for ‘Future’ ...
[09:31:00.226] - state: ‘created’
[09:31:00.226] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:00.230] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:00.230] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:00.230]   - Field: ‘label’
[09:31:00.230]   - Field: ‘local’
[09:31:00.230]   - Field: ‘owner’
[09:31:00.231]   - Field: ‘envir’
[09:31:00.231]   - Field: ‘workers’
[09:31:00.231]   - Field: ‘packages’
[09:31:00.231]   - Field: ‘gc’
[09:31:00.231]   - Field: ‘job’
[09:31:00.231]   - Field: ‘conditions’
[09:31:00.231]   - Field: ‘expr’
[09:31:00.231]   - Field: ‘uuid’
[09:31:00.231]   - Field: ‘seed’
[09:31:00.232]   - Field: ‘version’
[09:31:00.232]   - Field: ‘result’
[09:31:00.232]   - Field: ‘asynchronous’
[09:31:00.232]   - Field: ‘calls’
[09:31:00.232]   - Field: ‘globals’
[09:31:00.232]   - Field: ‘stdout’
[09:31:00.232]   - Field: ‘earlySignal’
[09:31:00.232]   - Field: ‘lazy’
[09:31:00.233]   - Field: ‘state’
[09:31:00.233] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:00.233] - Launch lazy future ...
[09:31:00.233] Packages needed by the future expression (n = 0): <none>
[09:31:00.233] Packages needed by future strategies (n = 0): <none>
[09:31:00.234] {
[09:31:00.234]     {
[09:31:00.234]         {
[09:31:00.234]             ...future.startTime <- base::Sys.time()
[09:31:00.234]             {
[09:31:00.234]                 {
[09:31:00.234]                   {
[09:31:00.234]                     {
[09:31:00.234]                       base::local({
[09:31:00.234]                         has_future <- base::requireNamespace("future", 
[09:31:00.234]                           quietly = TRUE)
[09:31:00.234]                         if (has_future) {
[09:31:00.234]                           ns <- base::getNamespace("future")
[09:31:00.234]                           version <- ns[[".package"]][["version"]]
[09:31:00.234]                           if (is.null(version)) 
[09:31:00.234]                             version <- utils::packageVersion("future")
[09:31:00.234]                         }
[09:31:00.234]                         else {
[09:31:00.234]                           version <- NULL
[09:31:00.234]                         }
[09:31:00.234]                         if (!has_future || version < "1.8.0") {
[09:31:00.234]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.234]                             "", base::R.version$version.string), 
[09:31:00.234]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:00.234]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.234]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.234]                               "release", "version")], collapse = " "), 
[09:31:00.234]                             hostname = base::Sys.info()[["nodename"]])
[09:31:00.234]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.234]                             info)
[09:31:00.234]                           info <- base::paste(info, collapse = "; ")
[09:31:00.234]                           if (!has_future) {
[09:31:00.234]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.234]                               info)
[09:31:00.234]                           }
[09:31:00.234]                           else {
[09:31:00.234]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.234]                               info, version)
[09:31:00.234]                           }
[09:31:00.234]                           base::stop(msg)
[09:31:00.234]                         }
[09:31:00.234]                       })
[09:31:00.234]                     }
[09:31:00.234]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:00.234]                     base::options(mc.cores = 1L)
[09:31:00.234]                   }
[09:31:00.234]                   ...future.strategy.old <- future::plan("list")
[09:31:00.234]                   options(future.plan = NULL)
[09:31:00.234]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.234]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.234]                 }
[09:31:00.234]                 ...future.workdir <- getwd()
[09:31:00.234]             }
[09:31:00.234]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.234]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.234]         }
[09:31:00.234]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.234]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.234]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.234]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.234]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.234]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.234]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.234]             base::names(...future.oldOptions))
[09:31:00.234]     }
[09:31:00.234]     if (FALSE) {
[09:31:00.234]     }
[09:31:00.234]     else {
[09:31:00.234]         if (TRUE) {
[09:31:00.234]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.234]                 open = "w")
[09:31:00.234]         }
[09:31:00.234]         else {
[09:31:00.234]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.234]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.234]         }
[09:31:00.234]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.234]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.234]             base::sink(type = "output", split = FALSE)
[09:31:00.234]             base::close(...future.stdout)
[09:31:00.234]         }, add = TRUE)
[09:31:00.234]     }
[09:31:00.234]     ...future.frame <- base::sys.nframe()
[09:31:00.234]     ...future.conditions <- base::list()
[09:31:00.234]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.234]     if (FALSE) {
[09:31:00.234]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.234]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.234]     }
[09:31:00.234]     ...future.result <- base::tryCatch({
[09:31:00.234]         base::withCallingHandlers({
[09:31:00.234]             ...future.value <- base::withVisible(base::local({
[09:31:00.234]                 withCallingHandlers({
[09:31:00.234]                   {
[09:31:00.234]                     42
[09:31:00.234]                   }
[09:31:00.234]                 }, immediateCondition = function(cond) {
[09:31:00.234]                   save_rds <- function (object, pathname, ...) 
[09:31:00.234]                   {
[09:31:00.234]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:00.234]                     if (file_test("-f", pathname_tmp)) {
[09:31:00.234]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.234]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:00.234]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.234]                         fi_tmp[["mtime"]])
[09:31:00.234]                     }
[09:31:00.234]                     tryCatch({
[09:31:00.234]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:00.234]                     }, error = function(ex) {
[09:31:00.234]                       msg <- conditionMessage(ex)
[09:31:00.234]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.234]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:00.234]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.234]                         fi_tmp[["mtime"]], msg)
[09:31:00.234]                       ex$message <- msg
[09:31:00.234]                       stop(ex)
[09:31:00.234]                     })
[09:31:00.234]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:00.234]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:00.234]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:00.234]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.234]                       fi <- file.info(pathname)
[09:31:00.234]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:00.234]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.234]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:00.234]                         fi[["size"]], fi[["mtime"]])
[09:31:00.234]                       stop(msg)
[09:31:00.234]                     }
[09:31:00.234]                     invisible(pathname)
[09:31:00.234]                   }
[09:31:00.234]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:00.234]                     rootPath = tempdir()) 
[09:31:00.234]                   {
[09:31:00.234]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:00.234]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:00.234]                       tmpdir = path, fileext = ".rds")
[09:31:00.234]                     save_rds(obj, file)
[09:31:00.234]                   }
[09:31:00.234]                   saveImmediateCondition(cond, path = "/tmp/RtmpShydig/.future/immediateConditions")
[09:31:00.234]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.234]                   {
[09:31:00.234]                     inherits <- base::inherits
[09:31:00.234]                     invokeRestart <- base::invokeRestart
[09:31:00.234]                     is.null <- base::is.null
[09:31:00.234]                     muffled <- FALSE
[09:31:00.234]                     if (inherits(cond, "message")) {
[09:31:00.234]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:00.234]                       if (muffled) 
[09:31:00.234]                         invokeRestart("muffleMessage")
[09:31:00.234]                     }
[09:31:00.234]                     else if (inherits(cond, "warning")) {
[09:31:00.234]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:00.234]                       if (muffled) 
[09:31:00.234]                         invokeRestart("muffleWarning")
[09:31:00.234]                     }
[09:31:00.234]                     else if (inherits(cond, "condition")) {
[09:31:00.234]                       if (!is.null(pattern)) {
[09:31:00.234]                         computeRestarts <- base::computeRestarts
[09:31:00.234]                         grepl <- base::grepl
[09:31:00.234]                         restarts <- computeRestarts(cond)
[09:31:00.234]                         for (restart in restarts) {
[09:31:00.234]                           name <- restart$name
[09:31:00.234]                           if (is.null(name)) 
[09:31:00.234]                             next
[09:31:00.234]                           if (!grepl(pattern, name)) 
[09:31:00.234]                             next
[09:31:00.234]                           invokeRestart(restart)
[09:31:00.234]                           muffled <- TRUE
[09:31:00.234]                           break
[09:31:00.234]                         }
[09:31:00.234]                       }
[09:31:00.234]                     }
[09:31:00.234]                     invisible(muffled)
[09:31:00.234]                   }
[09:31:00.234]                   muffleCondition(cond)
[09:31:00.234]                 })
[09:31:00.234]             }))
[09:31:00.234]             future::FutureResult(value = ...future.value$value, 
[09:31:00.234]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.234]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.234]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.234]                     ...future.globalenv.names))
[09:31:00.234]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.234]         }, condition = base::local({
[09:31:00.234]             c <- base::c
[09:31:00.234]             inherits <- base::inherits
[09:31:00.234]             invokeRestart <- base::invokeRestart
[09:31:00.234]             length <- base::length
[09:31:00.234]             list <- base::list
[09:31:00.234]             seq.int <- base::seq.int
[09:31:00.234]             signalCondition <- base::signalCondition
[09:31:00.234]             sys.calls <- base::sys.calls
[09:31:00.234]             `[[` <- base::`[[`
[09:31:00.234]             `+` <- base::`+`
[09:31:00.234]             `<<-` <- base::`<<-`
[09:31:00.234]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.234]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.234]                   3L)]
[09:31:00.234]             }
[09:31:00.234]             function(cond) {
[09:31:00.234]                 is_error <- inherits(cond, "error")
[09:31:00.234]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.234]                   NULL)
[09:31:00.234]                 if (is_error) {
[09:31:00.234]                   sessionInformation <- function() {
[09:31:00.234]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.234]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.234]                       search = base::search(), system = base::Sys.info())
[09:31:00.234]                   }
[09:31:00.234]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.234]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.234]                     cond$call), session = sessionInformation(), 
[09:31:00.234]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.234]                   signalCondition(cond)
[09:31:00.234]                 }
[09:31:00.234]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.234]                 "immediateCondition"))) {
[09:31:00.234]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.234]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.234]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.234]                   if (TRUE && !signal) {
[09:31:00.234]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.234]                     {
[09:31:00.234]                       inherits <- base::inherits
[09:31:00.234]                       invokeRestart <- base::invokeRestart
[09:31:00.234]                       is.null <- base::is.null
[09:31:00.234]                       muffled <- FALSE
[09:31:00.234]                       if (inherits(cond, "message")) {
[09:31:00.234]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.234]                         if (muffled) 
[09:31:00.234]                           invokeRestart("muffleMessage")
[09:31:00.234]                       }
[09:31:00.234]                       else if (inherits(cond, "warning")) {
[09:31:00.234]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.234]                         if (muffled) 
[09:31:00.234]                           invokeRestart("muffleWarning")
[09:31:00.234]                       }
[09:31:00.234]                       else if (inherits(cond, "condition")) {
[09:31:00.234]                         if (!is.null(pattern)) {
[09:31:00.234]                           computeRestarts <- base::computeRestarts
[09:31:00.234]                           grepl <- base::grepl
[09:31:00.234]                           restarts <- computeRestarts(cond)
[09:31:00.234]                           for (restart in restarts) {
[09:31:00.234]                             name <- restart$name
[09:31:00.234]                             if (is.null(name)) 
[09:31:00.234]                               next
[09:31:00.234]                             if (!grepl(pattern, name)) 
[09:31:00.234]                               next
[09:31:00.234]                             invokeRestart(restart)
[09:31:00.234]                             muffled <- TRUE
[09:31:00.234]                             break
[09:31:00.234]                           }
[09:31:00.234]                         }
[09:31:00.234]                       }
[09:31:00.234]                       invisible(muffled)
[09:31:00.234]                     }
[09:31:00.234]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.234]                   }
[09:31:00.234]                 }
[09:31:00.234]                 else {
[09:31:00.234]                   if (TRUE) {
[09:31:00.234]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.234]                     {
[09:31:00.234]                       inherits <- base::inherits
[09:31:00.234]                       invokeRestart <- base::invokeRestart
[09:31:00.234]                       is.null <- base::is.null
[09:31:00.234]                       muffled <- FALSE
[09:31:00.234]                       if (inherits(cond, "message")) {
[09:31:00.234]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.234]                         if (muffled) 
[09:31:00.234]                           invokeRestart("muffleMessage")
[09:31:00.234]                       }
[09:31:00.234]                       else if (inherits(cond, "warning")) {
[09:31:00.234]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.234]                         if (muffled) 
[09:31:00.234]                           invokeRestart("muffleWarning")
[09:31:00.234]                       }
[09:31:00.234]                       else if (inherits(cond, "condition")) {
[09:31:00.234]                         if (!is.null(pattern)) {
[09:31:00.234]                           computeRestarts <- base::computeRestarts
[09:31:00.234]                           grepl <- base::grepl
[09:31:00.234]                           restarts <- computeRestarts(cond)
[09:31:00.234]                           for (restart in restarts) {
[09:31:00.234]                             name <- restart$name
[09:31:00.234]                             if (is.null(name)) 
[09:31:00.234]                               next
[09:31:00.234]                             if (!grepl(pattern, name)) 
[09:31:00.234]                               next
[09:31:00.234]                             invokeRestart(restart)
[09:31:00.234]                             muffled <- TRUE
[09:31:00.234]                             break
[09:31:00.234]                           }
[09:31:00.234]                         }
[09:31:00.234]                       }
[09:31:00.234]                       invisible(muffled)
[09:31:00.234]                     }
[09:31:00.234]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.234]                   }
[09:31:00.234]                 }
[09:31:00.234]             }
[09:31:00.234]         }))
[09:31:00.234]     }, error = function(ex) {
[09:31:00.234]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.234]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.234]                 ...future.rng), started = ...future.startTime, 
[09:31:00.234]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.234]             version = "1.8"), class = "FutureResult")
[09:31:00.234]     }, finally = {
[09:31:00.234]         if (!identical(...future.workdir, getwd())) 
[09:31:00.234]             setwd(...future.workdir)
[09:31:00.234]         {
[09:31:00.234]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.234]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.234]             }
[09:31:00.234]             base::options(...future.oldOptions)
[09:31:00.234]             if (.Platform$OS.type == "windows") {
[09:31:00.234]                 old_names <- names(...future.oldEnvVars)
[09:31:00.234]                 envs <- base::Sys.getenv()
[09:31:00.234]                 names <- names(envs)
[09:31:00.234]                 common <- intersect(names, old_names)
[09:31:00.234]                 added <- setdiff(names, old_names)
[09:31:00.234]                 removed <- setdiff(old_names, names)
[09:31:00.234]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.234]                   envs[common]]
[09:31:00.234]                 NAMES <- toupper(changed)
[09:31:00.234]                 args <- list()
[09:31:00.234]                 for (kk in seq_along(NAMES)) {
[09:31:00.234]                   name <- changed[[kk]]
[09:31:00.234]                   NAME <- NAMES[[kk]]
[09:31:00.234]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.234]                     next
[09:31:00.234]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.234]                 }
[09:31:00.234]                 NAMES <- toupper(added)
[09:31:00.234]                 for (kk in seq_along(NAMES)) {
[09:31:00.234]                   name <- added[[kk]]
[09:31:00.234]                   NAME <- NAMES[[kk]]
[09:31:00.234]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.234]                     next
[09:31:00.234]                   args[[name]] <- ""
[09:31:00.234]                 }
[09:31:00.234]                 NAMES <- toupper(removed)
[09:31:00.234]                 for (kk in seq_along(NAMES)) {
[09:31:00.234]                   name <- removed[[kk]]
[09:31:00.234]                   NAME <- NAMES[[kk]]
[09:31:00.234]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.234]                     next
[09:31:00.234]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.234]                 }
[09:31:00.234]                 if (length(args) > 0) 
[09:31:00.234]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.234]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.234]             }
[09:31:00.234]             else {
[09:31:00.234]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.234]             }
[09:31:00.234]             {
[09:31:00.234]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.234]                   0L) {
[09:31:00.234]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.234]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.234]                   base::options(opts)
[09:31:00.234]                 }
[09:31:00.234]                 {
[09:31:00.234]                   {
[09:31:00.234]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:00.234]                     NULL
[09:31:00.234]                   }
[09:31:00.234]                   options(future.plan = NULL)
[09:31:00.234]                   if (is.na(NA_character_)) 
[09:31:00.234]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.234]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.234]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.234]                     .init = FALSE)
[09:31:00.234]                 }
[09:31:00.234]             }
[09:31:00.234]         }
[09:31:00.234]     })
[09:31:00.234]     if (TRUE) {
[09:31:00.234]         base::sink(type = "output", split = FALSE)
[09:31:00.234]         if (TRUE) {
[09:31:00.234]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.234]         }
[09:31:00.234]         else {
[09:31:00.234]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.234]         }
[09:31:00.234]         base::close(...future.stdout)
[09:31:00.234]         ...future.stdout <- NULL
[09:31:00.234]     }
[09:31:00.234]     ...future.result$conditions <- ...future.conditions
[09:31:00.234]     ...future.result$finished <- base::Sys.time()
[09:31:00.234]     ...future.result
[09:31:00.234] }
[09:31:00.236] requestCore(): workers = 2
[09:31:00.238] MulticoreFuture started
[09:31:00.238] - Launch lazy future ... done
[09:31:00.238] run() for ‘MulticoreFuture’ ... done
[09:31:00.239] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:00.239] List of future strategies:
[09:31:00.239] 1. sequential:
[09:31:00.239]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.239]    - tweaked: FALSE
[09:31:00.239]    - call: NULL
[09:31:00.240] plan(): nbrOfWorkers() = 1
[09:31:00.242] plan(): Setting new future strategy stack:
[09:31:00.242] List of future strategies:
[09:31:00.242] 1. multicore:
[09:31:00.242]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:00.242]    - tweaked: FALSE
[09:31:00.242]    - call: plan(strategy)
[09:31:00.247] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:00.248] result() for MulticoreFuture ...
[09:31:00.248] result() for MulticoreFuture ...
[09:31:00.249] result() for MulticoreFuture ... done
[09:31:00.249] result() for MulticoreFuture ... done
[09:31:00.249] result() for MulticoreFuture ...
[09:31:00.249] result() for MulticoreFuture ... done
[09:31:00.253] getGlobalsAndPackages() ...
[09:31:00.253] 
[09:31:00.253] - globals: [0] <none>
[09:31:00.253] getGlobalsAndPackages() ... DONE
[09:31:00.254] Packages needed by the future expression (n = 0): <none>
[09:31:00.254] Packages needed by future strategies (n = 0): <none>
[09:31:00.254] {
[09:31:00.254]     {
[09:31:00.254]         {
[09:31:00.254]             ...future.startTime <- base::Sys.time()
[09:31:00.254]             {
[09:31:00.254]                 {
[09:31:00.254]                   {
[09:31:00.254]                     {
[09:31:00.254]                       base::local({
[09:31:00.254]                         has_future <- base::requireNamespace("future", 
[09:31:00.254]                           quietly = TRUE)
[09:31:00.254]                         if (has_future) {
[09:31:00.254]                           ns <- base::getNamespace("future")
[09:31:00.254]                           version <- ns[[".package"]][["version"]]
[09:31:00.254]                           if (is.null(version)) 
[09:31:00.254]                             version <- utils::packageVersion("future")
[09:31:00.254]                         }
[09:31:00.254]                         else {
[09:31:00.254]                           version <- NULL
[09:31:00.254]                         }
[09:31:00.254]                         if (!has_future || version < "1.8.0") {
[09:31:00.254]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.254]                             "", base::R.version$version.string), 
[09:31:00.254]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:00.254]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.254]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.254]                               "release", "version")], collapse = " "), 
[09:31:00.254]                             hostname = base::Sys.info()[["nodename"]])
[09:31:00.254]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.254]                             info)
[09:31:00.254]                           info <- base::paste(info, collapse = "; ")
[09:31:00.254]                           if (!has_future) {
[09:31:00.254]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.254]                               info)
[09:31:00.254]                           }
[09:31:00.254]                           else {
[09:31:00.254]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.254]                               info, version)
[09:31:00.254]                           }
[09:31:00.254]                           base::stop(msg)
[09:31:00.254]                         }
[09:31:00.254]                       })
[09:31:00.254]                     }
[09:31:00.254]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:00.254]                     base::options(mc.cores = 1L)
[09:31:00.254]                   }
[09:31:00.254]                   ...future.strategy.old <- future::plan("list")
[09:31:00.254]                   options(future.plan = NULL)
[09:31:00.254]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.254]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.254]                 }
[09:31:00.254]                 ...future.workdir <- getwd()
[09:31:00.254]             }
[09:31:00.254]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.254]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.254]         }
[09:31:00.254]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.254]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.254]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.254]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.254]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.254]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.254]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.254]             base::names(...future.oldOptions))
[09:31:00.254]     }
[09:31:00.254]     if (FALSE) {
[09:31:00.254]     }
[09:31:00.254]     else {
[09:31:00.254]         if (TRUE) {
[09:31:00.254]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.254]                 open = "w")
[09:31:00.254]         }
[09:31:00.254]         else {
[09:31:00.254]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.254]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.254]         }
[09:31:00.254]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.254]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.254]             base::sink(type = "output", split = FALSE)
[09:31:00.254]             base::close(...future.stdout)
[09:31:00.254]         }, add = TRUE)
[09:31:00.254]     }
[09:31:00.254]     ...future.frame <- base::sys.nframe()
[09:31:00.254]     ...future.conditions <- base::list()
[09:31:00.254]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.254]     if (FALSE) {
[09:31:00.254]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.254]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.254]     }
[09:31:00.254]     ...future.result <- base::tryCatch({
[09:31:00.254]         base::withCallingHandlers({
[09:31:00.254]             ...future.value <- base::withVisible(base::local({
[09:31:00.254]                 withCallingHandlers({
[09:31:00.254]                   42
[09:31:00.254]                 }, immediateCondition = function(cond) {
[09:31:00.254]                   save_rds <- function (object, pathname, ...) 
[09:31:00.254]                   {
[09:31:00.254]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:00.254]                     if (file_test("-f", pathname_tmp)) {
[09:31:00.254]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.254]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:00.254]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.254]                         fi_tmp[["mtime"]])
[09:31:00.254]                     }
[09:31:00.254]                     tryCatch({
[09:31:00.254]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:00.254]                     }, error = function(ex) {
[09:31:00.254]                       msg <- conditionMessage(ex)
[09:31:00.254]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.254]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:00.254]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.254]                         fi_tmp[["mtime"]], msg)
[09:31:00.254]                       ex$message <- msg
[09:31:00.254]                       stop(ex)
[09:31:00.254]                     })
[09:31:00.254]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:00.254]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:00.254]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:00.254]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.254]                       fi <- file.info(pathname)
[09:31:00.254]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:00.254]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.254]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:00.254]                         fi[["size"]], fi[["mtime"]])
[09:31:00.254]                       stop(msg)
[09:31:00.254]                     }
[09:31:00.254]                     invisible(pathname)
[09:31:00.254]                   }
[09:31:00.254]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:00.254]                     rootPath = tempdir()) 
[09:31:00.254]                   {
[09:31:00.254]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:00.254]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:00.254]                       tmpdir = path, fileext = ".rds")
[09:31:00.254]                     save_rds(obj, file)
[09:31:00.254]                   }
[09:31:00.254]                   saveImmediateCondition(cond, path = "/tmp/RtmpShydig/.future/immediateConditions")
[09:31:00.254]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.254]                   {
[09:31:00.254]                     inherits <- base::inherits
[09:31:00.254]                     invokeRestart <- base::invokeRestart
[09:31:00.254]                     is.null <- base::is.null
[09:31:00.254]                     muffled <- FALSE
[09:31:00.254]                     if (inherits(cond, "message")) {
[09:31:00.254]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:00.254]                       if (muffled) 
[09:31:00.254]                         invokeRestart("muffleMessage")
[09:31:00.254]                     }
[09:31:00.254]                     else if (inherits(cond, "warning")) {
[09:31:00.254]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:00.254]                       if (muffled) 
[09:31:00.254]                         invokeRestart("muffleWarning")
[09:31:00.254]                     }
[09:31:00.254]                     else if (inherits(cond, "condition")) {
[09:31:00.254]                       if (!is.null(pattern)) {
[09:31:00.254]                         computeRestarts <- base::computeRestarts
[09:31:00.254]                         grepl <- base::grepl
[09:31:00.254]                         restarts <- computeRestarts(cond)
[09:31:00.254]                         for (restart in restarts) {
[09:31:00.254]                           name <- restart$name
[09:31:00.254]                           if (is.null(name)) 
[09:31:00.254]                             next
[09:31:00.254]                           if (!grepl(pattern, name)) 
[09:31:00.254]                             next
[09:31:00.254]                           invokeRestart(restart)
[09:31:00.254]                           muffled <- TRUE
[09:31:00.254]                           break
[09:31:00.254]                         }
[09:31:00.254]                       }
[09:31:00.254]                     }
[09:31:00.254]                     invisible(muffled)
[09:31:00.254]                   }
[09:31:00.254]                   muffleCondition(cond)
[09:31:00.254]                 })
[09:31:00.254]             }))
[09:31:00.254]             future::FutureResult(value = ...future.value$value, 
[09:31:00.254]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.254]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.254]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.254]                     ...future.globalenv.names))
[09:31:00.254]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.254]         }, condition = base::local({
[09:31:00.254]             c <- base::c
[09:31:00.254]             inherits <- base::inherits
[09:31:00.254]             invokeRestart <- base::invokeRestart
[09:31:00.254]             length <- base::length
[09:31:00.254]             list <- base::list
[09:31:00.254]             seq.int <- base::seq.int
[09:31:00.254]             signalCondition <- base::signalCondition
[09:31:00.254]             sys.calls <- base::sys.calls
[09:31:00.254]             `[[` <- base::`[[`
[09:31:00.254]             `+` <- base::`+`
[09:31:00.254]             `<<-` <- base::`<<-`
[09:31:00.254]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.254]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.254]                   3L)]
[09:31:00.254]             }
[09:31:00.254]             function(cond) {
[09:31:00.254]                 is_error <- inherits(cond, "error")
[09:31:00.254]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.254]                   NULL)
[09:31:00.254]                 if (is_error) {
[09:31:00.254]                   sessionInformation <- function() {
[09:31:00.254]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.254]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.254]                       search = base::search(), system = base::Sys.info())
[09:31:00.254]                   }
[09:31:00.254]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.254]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.254]                     cond$call), session = sessionInformation(), 
[09:31:00.254]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.254]                   signalCondition(cond)
[09:31:00.254]                 }
[09:31:00.254]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.254]                 "immediateCondition"))) {
[09:31:00.254]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.254]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.254]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.254]                   if (TRUE && !signal) {
[09:31:00.254]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.254]                     {
[09:31:00.254]                       inherits <- base::inherits
[09:31:00.254]                       invokeRestart <- base::invokeRestart
[09:31:00.254]                       is.null <- base::is.null
[09:31:00.254]                       muffled <- FALSE
[09:31:00.254]                       if (inherits(cond, "message")) {
[09:31:00.254]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.254]                         if (muffled) 
[09:31:00.254]                           invokeRestart("muffleMessage")
[09:31:00.254]                       }
[09:31:00.254]                       else if (inherits(cond, "warning")) {
[09:31:00.254]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.254]                         if (muffled) 
[09:31:00.254]                           invokeRestart("muffleWarning")
[09:31:00.254]                       }
[09:31:00.254]                       else if (inherits(cond, "condition")) {
[09:31:00.254]                         if (!is.null(pattern)) {
[09:31:00.254]                           computeRestarts <- base::computeRestarts
[09:31:00.254]                           grepl <- base::grepl
[09:31:00.254]                           restarts <- computeRestarts(cond)
[09:31:00.254]                           for (restart in restarts) {
[09:31:00.254]                             name <- restart$name
[09:31:00.254]                             if (is.null(name)) 
[09:31:00.254]                               next
[09:31:00.254]                             if (!grepl(pattern, name)) 
[09:31:00.254]                               next
[09:31:00.254]                             invokeRestart(restart)
[09:31:00.254]                             muffled <- TRUE
[09:31:00.254]                             break
[09:31:00.254]                           }
[09:31:00.254]                         }
[09:31:00.254]                       }
[09:31:00.254]                       invisible(muffled)
[09:31:00.254]                     }
[09:31:00.254]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.254]                   }
[09:31:00.254]                 }
[09:31:00.254]                 else {
[09:31:00.254]                   if (TRUE) {
[09:31:00.254]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.254]                     {
[09:31:00.254]                       inherits <- base::inherits
[09:31:00.254]                       invokeRestart <- base::invokeRestart
[09:31:00.254]                       is.null <- base::is.null
[09:31:00.254]                       muffled <- FALSE
[09:31:00.254]                       if (inherits(cond, "message")) {
[09:31:00.254]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.254]                         if (muffled) 
[09:31:00.254]                           invokeRestart("muffleMessage")
[09:31:00.254]                       }
[09:31:00.254]                       else if (inherits(cond, "warning")) {
[09:31:00.254]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.254]                         if (muffled) 
[09:31:00.254]                           invokeRestart("muffleWarning")
[09:31:00.254]                       }
[09:31:00.254]                       else if (inherits(cond, "condition")) {
[09:31:00.254]                         if (!is.null(pattern)) {
[09:31:00.254]                           computeRestarts <- base::computeRestarts
[09:31:00.254]                           grepl <- base::grepl
[09:31:00.254]                           restarts <- computeRestarts(cond)
[09:31:00.254]                           for (restart in restarts) {
[09:31:00.254]                             name <- restart$name
[09:31:00.254]                             if (is.null(name)) 
[09:31:00.254]                               next
[09:31:00.254]                             if (!grepl(pattern, name)) 
[09:31:00.254]                               next
[09:31:00.254]                             invokeRestart(restart)
[09:31:00.254]                             muffled <- TRUE
[09:31:00.254]                             break
[09:31:00.254]                           }
[09:31:00.254]                         }
[09:31:00.254]                       }
[09:31:00.254]                       invisible(muffled)
[09:31:00.254]                     }
[09:31:00.254]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.254]                   }
[09:31:00.254]                 }
[09:31:00.254]             }
[09:31:00.254]         }))
[09:31:00.254]     }, error = function(ex) {
[09:31:00.254]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.254]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.254]                 ...future.rng), started = ...future.startTime, 
[09:31:00.254]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.254]             version = "1.8"), class = "FutureResult")
[09:31:00.254]     }, finally = {
[09:31:00.254]         if (!identical(...future.workdir, getwd())) 
[09:31:00.254]             setwd(...future.workdir)
[09:31:00.254]         {
[09:31:00.254]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.254]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.254]             }
[09:31:00.254]             base::options(...future.oldOptions)
[09:31:00.254]             if (.Platform$OS.type == "windows") {
[09:31:00.254]                 old_names <- names(...future.oldEnvVars)
[09:31:00.254]                 envs <- base::Sys.getenv()
[09:31:00.254]                 names <- names(envs)
[09:31:00.254]                 common <- intersect(names, old_names)
[09:31:00.254]                 added <- setdiff(names, old_names)
[09:31:00.254]                 removed <- setdiff(old_names, names)
[09:31:00.254]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.254]                   envs[common]]
[09:31:00.254]                 NAMES <- toupper(changed)
[09:31:00.254]                 args <- list()
[09:31:00.254]                 for (kk in seq_along(NAMES)) {
[09:31:00.254]                   name <- changed[[kk]]
[09:31:00.254]                   NAME <- NAMES[[kk]]
[09:31:00.254]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.254]                     next
[09:31:00.254]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.254]                 }
[09:31:00.254]                 NAMES <- toupper(added)
[09:31:00.254]                 for (kk in seq_along(NAMES)) {
[09:31:00.254]                   name <- added[[kk]]
[09:31:00.254]                   NAME <- NAMES[[kk]]
[09:31:00.254]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.254]                     next
[09:31:00.254]                   args[[name]] <- ""
[09:31:00.254]                 }
[09:31:00.254]                 NAMES <- toupper(removed)
[09:31:00.254]                 for (kk in seq_along(NAMES)) {
[09:31:00.254]                   name <- removed[[kk]]
[09:31:00.254]                   NAME <- NAMES[[kk]]
[09:31:00.254]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.254]                     next
[09:31:00.254]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.254]                 }
[09:31:00.254]                 if (length(args) > 0) 
[09:31:00.254]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.254]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.254]             }
[09:31:00.254]             else {
[09:31:00.254]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.254]             }
[09:31:00.254]             {
[09:31:00.254]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.254]                   0L) {
[09:31:00.254]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.254]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.254]                   base::options(opts)
[09:31:00.254]                 }
[09:31:00.254]                 {
[09:31:00.254]                   {
[09:31:00.254]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:00.254]                     NULL
[09:31:00.254]                   }
[09:31:00.254]                   options(future.plan = NULL)
[09:31:00.254]                   if (is.na(NA_character_)) 
[09:31:00.254]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.254]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.254]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.254]                     .init = FALSE)
[09:31:00.254]                 }
[09:31:00.254]             }
[09:31:00.254]         }
[09:31:00.254]     })
[09:31:00.254]     if (TRUE) {
[09:31:00.254]         base::sink(type = "output", split = FALSE)
[09:31:00.254]         if (TRUE) {
[09:31:00.254]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.254]         }
[09:31:00.254]         else {
[09:31:00.254]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.254]         }
[09:31:00.254]         base::close(...future.stdout)
[09:31:00.254]         ...future.stdout <- NULL
[09:31:00.254]     }
[09:31:00.254]     ...future.result$conditions <- ...future.conditions
[09:31:00.254]     ...future.result$finished <- base::Sys.time()
[09:31:00.254]     ...future.result
[09:31:00.254] }
[09:31:00.257] requestCore(): workers = 2
[09:31:00.259] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:00.260] plan(): Setting new future strategy stack:
[09:31:00.260] List of future strategies:
[09:31:00.260] 1. sequential:
[09:31:00.260]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.260]    - tweaked: FALSE
[09:31:00.260]    - call: NULL
[09:31:00.261] plan(): nbrOfWorkers() = 1
[09:31:00.263] plan(): Setting new future strategy stack:
[09:31:00.263] List of future strategies:
[09:31:00.263] 1. multicore:
[09:31:00.263]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:00.263]    - tweaked: FALSE
[09:31:00.263]    - call: plan(strategy)
[09:31:00.268] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:00.269] result() for MulticoreFuture ...
[09:31:00.270] result() for MulticoreFuture ...
[09:31:00.270] result() for MulticoreFuture ... done
[09:31:00.270] result() for MulticoreFuture ... done
[09:31:00.270] result() for MulticoreFuture ...
[09:31:00.270] result() for MulticoreFuture ... done
[09:31:00.271] getGlobalsAndPackages() ...
[09:31:00.271] Searching for globals...
[09:31:00.271] 
[09:31:00.271] Searching for globals ... DONE
[09:31:00.272] - globals: [0] <none>
[09:31:00.272] getGlobalsAndPackages() ... DONE
[09:31:00.272] run() for ‘Future’ ...
[09:31:00.272] - state: ‘created’
[09:31:00.272] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:00.277] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:00.277] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:00.277]   - Field: ‘label’
[09:31:00.277]   - Field: ‘local’
[09:31:00.277]   - Field: ‘owner’
[09:31:00.277]   - Field: ‘envir’
[09:31:00.277]   - Field: ‘workers’
[09:31:00.277]   - Field: ‘packages’
[09:31:00.278]   - Field: ‘gc’
[09:31:00.278]   - Field: ‘job’
[09:31:00.278]   - Field: ‘conditions’
[09:31:00.278]   - Field: ‘expr’
[09:31:00.278]   - Field: ‘uuid’
[09:31:00.278]   - Field: ‘seed’
[09:31:00.278]   - Field: ‘version’
[09:31:00.278]   - Field: ‘result’
[09:31:00.278]   - Field: ‘asynchronous’
[09:31:00.279]   - Field: ‘calls’
[09:31:00.279]   - Field: ‘globals’
[09:31:00.279]   - Field: ‘stdout’
[09:31:00.279]   - Field: ‘earlySignal’
[09:31:00.279]   - Field: ‘lazy’
[09:31:00.279]   - Field: ‘state’
[09:31:00.279] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:00.279] - Launch lazy future ...
[09:31:00.280] Packages needed by the future expression (n = 0): <none>
[09:31:00.280] Packages needed by future strategies (n = 0): <none>
[09:31:00.280] {
[09:31:00.280]     {
[09:31:00.280]         {
[09:31:00.280]             ...future.startTime <- base::Sys.time()
[09:31:00.280]             {
[09:31:00.280]                 {
[09:31:00.280]                   {
[09:31:00.280]                     {
[09:31:00.280]                       base::local({
[09:31:00.280]                         has_future <- base::requireNamespace("future", 
[09:31:00.280]                           quietly = TRUE)
[09:31:00.280]                         if (has_future) {
[09:31:00.280]                           ns <- base::getNamespace("future")
[09:31:00.280]                           version <- ns[[".package"]][["version"]]
[09:31:00.280]                           if (is.null(version)) 
[09:31:00.280]                             version <- utils::packageVersion("future")
[09:31:00.280]                         }
[09:31:00.280]                         else {
[09:31:00.280]                           version <- NULL
[09:31:00.280]                         }
[09:31:00.280]                         if (!has_future || version < "1.8.0") {
[09:31:00.280]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.280]                             "", base::R.version$version.string), 
[09:31:00.280]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:00.280]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.280]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.280]                               "release", "version")], collapse = " "), 
[09:31:00.280]                             hostname = base::Sys.info()[["nodename"]])
[09:31:00.280]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.280]                             info)
[09:31:00.280]                           info <- base::paste(info, collapse = "; ")
[09:31:00.280]                           if (!has_future) {
[09:31:00.280]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.280]                               info)
[09:31:00.280]                           }
[09:31:00.280]                           else {
[09:31:00.280]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.280]                               info, version)
[09:31:00.280]                           }
[09:31:00.280]                           base::stop(msg)
[09:31:00.280]                         }
[09:31:00.280]                       })
[09:31:00.280]                     }
[09:31:00.280]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:00.280]                     base::options(mc.cores = 1L)
[09:31:00.280]                   }
[09:31:00.280]                   ...future.strategy.old <- future::plan("list")
[09:31:00.280]                   options(future.plan = NULL)
[09:31:00.280]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.280]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.280]                 }
[09:31:00.280]                 ...future.workdir <- getwd()
[09:31:00.280]             }
[09:31:00.280]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.280]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.280]         }
[09:31:00.280]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.280]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.280]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.280]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.280]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.280]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.280]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.280]             base::names(...future.oldOptions))
[09:31:00.280]     }
[09:31:00.280]     if (FALSE) {
[09:31:00.280]     }
[09:31:00.280]     else {
[09:31:00.280]         if (TRUE) {
[09:31:00.280]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.280]                 open = "w")
[09:31:00.280]         }
[09:31:00.280]         else {
[09:31:00.280]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.280]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.280]         }
[09:31:00.280]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.280]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.280]             base::sink(type = "output", split = FALSE)
[09:31:00.280]             base::close(...future.stdout)
[09:31:00.280]         }, add = TRUE)
[09:31:00.280]     }
[09:31:00.280]     ...future.frame <- base::sys.nframe()
[09:31:00.280]     ...future.conditions <- base::list()
[09:31:00.280]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.280]     if (FALSE) {
[09:31:00.280]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.280]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.280]     }
[09:31:00.280]     ...future.result <- base::tryCatch({
[09:31:00.280]         base::withCallingHandlers({
[09:31:00.280]             ...future.value <- base::withVisible(base::local({
[09:31:00.280]                 withCallingHandlers({
[09:31:00.280]                   42
[09:31:00.280]                 }, immediateCondition = function(cond) {
[09:31:00.280]                   save_rds <- function (object, pathname, ...) 
[09:31:00.280]                   {
[09:31:00.280]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:00.280]                     if (file_test("-f", pathname_tmp)) {
[09:31:00.280]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.280]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:00.280]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.280]                         fi_tmp[["mtime"]])
[09:31:00.280]                     }
[09:31:00.280]                     tryCatch({
[09:31:00.280]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:00.280]                     }, error = function(ex) {
[09:31:00.280]                       msg <- conditionMessage(ex)
[09:31:00.280]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.280]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:00.280]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.280]                         fi_tmp[["mtime"]], msg)
[09:31:00.280]                       ex$message <- msg
[09:31:00.280]                       stop(ex)
[09:31:00.280]                     })
[09:31:00.280]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:00.280]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:00.280]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:00.280]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.280]                       fi <- file.info(pathname)
[09:31:00.280]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:00.280]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.280]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:00.280]                         fi[["size"]], fi[["mtime"]])
[09:31:00.280]                       stop(msg)
[09:31:00.280]                     }
[09:31:00.280]                     invisible(pathname)
[09:31:00.280]                   }
[09:31:00.280]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:00.280]                     rootPath = tempdir()) 
[09:31:00.280]                   {
[09:31:00.280]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:00.280]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:00.280]                       tmpdir = path, fileext = ".rds")
[09:31:00.280]                     save_rds(obj, file)
[09:31:00.280]                   }
[09:31:00.280]                   saveImmediateCondition(cond, path = "/tmp/RtmpShydig/.future/immediateConditions")
[09:31:00.280]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.280]                   {
[09:31:00.280]                     inherits <- base::inherits
[09:31:00.280]                     invokeRestart <- base::invokeRestart
[09:31:00.280]                     is.null <- base::is.null
[09:31:00.280]                     muffled <- FALSE
[09:31:00.280]                     if (inherits(cond, "message")) {
[09:31:00.280]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:00.280]                       if (muffled) 
[09:31:00.280]                         invokeRestart("muffleMessage")
[09:31:00.280]                     }
[09:31:00.280]                     else if (inherits(cond, "warning")) {
[09:31:00.280]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:00.280]                       if (muffled) 
[09:31:00.280]                         invokeRestart("muffleWarning")
[09:31:00.280]                     }
[09:31:00.280]                     else if (inherits(cond, "condition")) {
[09:31:00.280]                       if (!is.null(pattern)) {
[09:31:00.280]                         computeRestarts <- base::computeRestarts
[09:31:00.280]                         grepl <- base::grepl
[09:31:00.280]                         restarts <- computeRestarts(cond)
[09:31:00.280]                         for (restart in restarts) {
[09:31:00.280]                           name <- restart$name
[09:31:00.280]                           if (is.null(name)) 
[09:31:00.280]                             next
[09:31:00.280]                           if (!grepl(pattern, name)) 
[09:31:00.280]                             next
[09:31:00.280]                           invokeRestart(restart)
[09:31:00.280]                           muffled <- TRUE
[09:31:00.280]                           break
[09:31:00.280]                         }
[09:31:00.280]                       }
[09:31:00.280]                     }
[09:31:00.280]                     invisible(muffled)
[09:31:00.280]                   }
[09:31:00.280]                   muffleCondition(cond)
[09:31:00.280]                 })
[09:31:00.280]             }))
[09:31:00.280]             future::FutureResult(value = ...future.value$value, 
[09:31:00.280]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.280]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.280]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.280]                     ...future.globalenv.names))
[09:31:00.280]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.280]         }, condition = base::local({
[09:31:00.280]             c <- base::c
[09:31:00.280]             inherits <- base::inherits
[09:31:00.280]             invokeRestart <- base::invokeRestart
[09:31:00.280]             length <- base::length
[09:31:00.280]             list <- base::list
[09:31:00.280]             seq.int <- base::seq.int
[09:31:00.280]             signalCondition <- base::signalCondition
[09:31:00.280]             sys.calls <- base::sys.calls
[09:31:00.280]             `[[` <- base::`[[`
[09:31:00.280]             `+` <- base::`+`
[09:31:00.280]             `<<-` <- base::`<<-`
[09:31:00.280]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.280]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.280]                   3L)]
[09:31:00.280]             }
[09:31:00.280]             function(cond) {
[09:31:00.280]                 is_error <- inherits(cond, "error")
[09:31:00.280]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.280]                   NULL)
[09:31:00.280]                 if (is_error) {
[09:31:00.280]                   sessionInformation <- function() {
[09:31:00.280]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.280]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.280]                       search = base::search(), system = base::Sys.info())
[09:31:00.280]                   }
[09:31:00.280]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.280]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.280]                     cond$call), session = sessionInformation(), 
[09:31:00.280]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.280]                   signalCondition(cond)
[09:31:00.280]                 }
[09:31:00.280]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.280]                 "immediateCondition"))) {
[09:31:00.280]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.280]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.280]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.280]                   if (TRUE && !signal) {
[09:31:00.280]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.280]                     {
[09:31:00.280]                       inherits <- base::inherits
[09:31:00.280]                       invokeRestart <- base::invokeRestart
[09:31:00.280]                       is.null <- base::is.null
[09:31:00.280]                       muffled <- FALSE
[09:31:00.280]                       if (inherits(cond, "message")) {
[09:31:00.280]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.280]                         if (muffled) 
[09:31:00.280]                           invokeRestart("muffleMessage")
[09:31:00.280]                       }
[09:31:00.280]                       else if (inherits(cond, "warning")) {
[09:31:00.280]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.280]                         if (muffled) 
[09:31:00.280]                           invokeRestart("muffleWarning")
[09:31:00.280]                       }
[09:31:00.280]                       else if (inherits(cond, "condition")) {
[09:31:00.280]                         if (!is.null(pattern)) {
[09:31:00.280]                           computeRestarts <- base::computeRestarts
[09:31:00.280]                           grepl <- base::grepl
[09:31:00.280]                           restarts <- computeRestarts(cond)
[09:31:00.280]                           for (restart in restarts) {
[09:31:00.280]                             name <- restart$name
[09:31:00.280]                             if (is.null(name)) 
[09:31:00.280]                               next
[09:31:00.280]                             if (!grepl(pattern, name)) 
[09:31:00.280]                               next
[09:31:00.280]                             invokeRestart(restart)
[09:31:00.280]                             muffled <- TRUE
[09:31:00.280]                             break
[09:31:00.280]                           }
[09:31:00.280]                         }
[09:31:00.280]                       }
[09:31:00.280]                       invisible(muffled)
[09:31:00.280]                     }
[09:31:00.280]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.280]                   }
[09:31:00.280]                 }
[09:31:00.280]                 else {
[09:31:00.280]                   if (TRUE) {
[09:31:00.280]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.280]                     {
[09:31:00.280]                       inherits <- base::inherits
[09:31:00.280]                       invokeRestart <- base::invokeRestart
[09:31:00.280]                       is.null <- base::is.null
[09:31:00.280]                       muffled <- FALSE
[09:31:00.280]                       if (inherits(cond, "message")) {
[09:31:00.280]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.280]                         if (muffled) 
[09:31:00.280]                           invokeRestart("muffleMessage")
[09:31:00.280]                       }
[09:31:00.280]                       else if (inherits(cond, "warning")) {
[09:31:00.280]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.280]                         if (muffled) 
[09:31:00.280]                           invokeRestart("muffleWarning")
[09:31:00.280]                       }
[09:31:00.280]                       else if (inherits(cond, "condition")) {
[09:31:00.280]                         if (!is.null(pattern)) {
[09:31:00.280]                           computeRestarts <- base::computeRestarts
[09:31:00.280]                           grepl <- base::grepl
[09:31:00.280]                           restarts <- computeRestarts(cond)
[09:31:00.280]                           for (restart in restarts) {
[09:31:00.280]                             name <- restart$name
[09:31:00.280]                             if (is.null(name)) 
[09:31:00.280]                               next
[09:31:00.280]                             if (!grepl(pattern, name)) 
[09:31:00.280]                               next
[09:31:00.280]                             invokeRestart(restart)
[09:31:00.280]                             muffled <- TRUE
[09:31:00.280]                             break
[09:31:00.280]                           }
[09:31:00.280]                         }
[09:31:00.280]                       }
[09:31:00.280]                       invisible(muffled)
[09:31:00.280]                     }
[09:31:00.280]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.280]                   }
[09:31:00.280]                 }
[09:31:00.280]             }
[09:31:00.280]         }))
[09:31:00.280]     }, error = function(ex) {
[09:31:00.280]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.280]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.280]                 ...future.rng), started = ...future.startTime, 
[09:31:00.280]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.280]             version = "1.8"), class = "FutureResult")
[09:31:00.280]     }, finally = {
[09:31:00.280]         if (!identical(...future.workdir, getwd())) 
[09:31:00.280]             setwd(...future.workdir)
[09:31:00.280]         {
[09:31:00.280]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.280]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.280]             }
[09:31:00.280]             base::options(...future.oldOptions)
[09:31:00.280]             if (.Platform$OS.type == "windows") {
[09:31:00.280]                 old_names <- names(...future.oldEnvVars)
[09:31:00.280]                 envs <- base::Sys.getenv()
[09:31:00.280]                 names <- names(envs)
[09:31:00.280]                 common <- intersect(names, old_names)
[09:31:00.280]                 added <- setdiff(names, old_names)
[09:31:00.280]                 removed <- setdiff(old_names, names)
[09:31:00.280]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.280]                   envs[common]]
[09:31:00.280]                 NAMES <- toupper(changed)
[09:31:00.280]                 args <- list()
[09:31:00.280]                 for (kk in seq_along(NAMES)) {
[09:31:00.280]                   name <- changed[[kk]]
[09:31:00.280]                   NAME <- NAMES[[kk]]
[09:31:00.280]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.280]                     next
[09:31:00.280]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.280]                 }
[09:31:00.280]                 NAMES <- toupper(added)
[09:31:00.280]                 for (kk in seq_along(NAMES)) {
[09:31:00.280]                   name <- added[[kk]]
[09:31:00.280]                   NAME <- NAMES[[kk]]
[09:31:00.280]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.280]                     next
[09:31:00.280]                   args[[name]] <- ""
[09:31:00.280]                 }
[09:31:00.280]                 NAMES <- toupper(removed)
[09:31:00.280]                 for (kk in seq_along(NAMES)) {
[09:31:00.280]                   name <- removed[[kk]]
[09:31:00.280]                   NAME <- NAMES[[kk]]
[09:31:00.280]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.280]                     next
[09:31:00.280]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.280]                 }
[09:31:00.280]                 if (length(args) > 0) 
[09:31:00.280]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.280]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.280]             }
[09:31:00.280]             else {
[09:31:00.280]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.280]             }
[09:31:00.280]             {
[09:31:00.280]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.280]                   0L) {
[09:31:00.280]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.280]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.280]                   base::options(opts)
[09:31:00.280]                 }
[09:31:00.280]                 {
[09:31:00.280]                   {
[09:31:00.280]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:00.280]                     NULL
[09:31:00.280]                   }
[09:31:00.280]                   options(future.plan = NULL)
[09:31:00.280]                   if (is.na(NA_character_)) 
[09:31:00.280]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.280]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.280]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.280]                     .init = FALSE)
[09:31:00.280]                 }
[09:31:00.280]             }
[09:31:00.280]         }
[09:31:00.280]     })
[09:31:00.280]     if (TRUE) {
[09:31:00.280]         base::sink(type = "output", split = FALSE)
[09:31:00.280]         if (TRUE) {
[09:31:00.280]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.280]         }
[09:31:00.280]         else {
[09:31:00.280]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.280]         }
[09:31:00.280]         base::close(...future.stdout)
[09:31:00.280]         ...future.stdout <- NULL
[09:31:00.280]     }
[09:31:00.280]     ...future.result$conditions <- ...future.conditions
[09:31:00.280]     ...future.result$finished <- base::Sys.time()
[09:31:00.280]     ...future.result
[09:31:00.280] }
[09:31:00.283] requestCore(): workers = 2
[09:31:00.285] MulticoreFuture started
[09:31:00.285] - Launch lazy future ... done
[09:31:00.285] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
[09:31:00.285] plan(): Setting new future strategy stack:
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:00.286] List of future strategies:
[09:31:00.286] 1. sequential:
[09:31:00.286]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.286]    - tweaked: FALSE
[09:31:00.286]    - call: NULL
[09:31:00.287] plan(): nbrOfWorkers() = 1
[09:31:00.289] plan(): Setting new future strategy stack:
[09:31:00.289] List of future strategies:
[09:31:00.289] 1. multicore:
[09:31:00.289]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:00.289]    - tweaked: FALSE
[09:31:00.289]    - call: plan(strategy)
[09:31:00.293] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:00.294] result() for MulticoreFuture ...
[09:31:00.295] result() for MulticoreFuture ...
[09:31:00.295] result() for MulticoreFuture ... done
[09:31:00.295] result() for MulticoreFuture ... done
[09:31:00.296] result() for MulticoreFuture ...
[09:31:00.296] result() for MulticoreFuture ... done
[09:31:00.296] getGlobalsAndPackages() ...
[09:31:00.296] Searching for globals...
[09:31:00.297] - globals found: [1] ‘{’
[09:31:00.297] Searching for globals ... DONE
[09:31:00.297] Resolving globals: FALSE
[09:31:00.298] 
[09:31:00.298] 
[09:31:00.298] getGlobalsAndPackages() ... DONE
[09:31:00.298] run() for ‘Future’ ...
[09:31:00.298] - state: ‘created’
[09:31:00.299] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:31:00.303] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:00.303] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:31:00.303]   - Field: ‘label’
[09:31:00.303]   - Field: ‘local’
[09:31:00.303]   - Field: ‘owner’
[09:31:00.303]   - Field: ‘envir’
[09:31:00.303]   - Field: ‘workers’
[09:31:00.303]   - Field: ‘packages’
[09:31:00.303]   - Field: ‘gc’
[09:31:00.304]   - Field: ‘job’
[09:31:00.304]   - Field: ‘conditions’
[09:31:00.304]   - Field: ‘expr’
[09:31:00.304]   - Field: ‘uuid’
[09:31:00.304]   - Field: ‘seed’
[09:31:00.304]   - Field: ‘version’
[09:31:00.304]   - Field: ‘result’
[09:31:00.304]   - Field: ‘asynchronous’
[09:31:00.305]   - Field: ‘calls’
[09:31:00.305]   - Field: ‘globals’
[09:31:00.305]   - Field: ‘stdout’
[09:31:00.305]   - Field: ‘earlySignal’
[09:31:00.305]   - Field: ‘lazy’
[09:31:00.305]   - Field: ‘state’
[09:31:00.305] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:31:00.305] - Launch lazy future ...
[09:31:00.306] Packages needed by the future expression (n = 0): <none>
[09:31:00.306] Packages needed by future strategies (n = 0): <none>
[09:31:00.306] {
[09:31:00.306]     {
[09:31:00.306]         {
[09:31:00.306]             ...future.startTime <- base::Sys.time()
[09:31:00.306]             {
[09:31:00.306]                 {
[09:31:00.306]                   {
[09:31:00.306]                     {
[09:31:00.306]                       base::local({
[09:31:00.306]                         has_future <- base::requireNamespace("future", 
[09:31:00.306]                           quietly = TRUE)
[09:31:00.306]                         if (has_future) {
[09:31:00.306]                           ns <- base::getNamespace("future")
[09:31:00.306]                           version <- ns[[".package"]][["version"]]
[09:31:00.306]                           if (is.null(version)) 
[09:31:00.306]                             version <- utils::packageVersion("future")
[09:31:00.306]                         }
[09:31:00.306]                         else {
[09:31:00.306]                           version <- NULL
[09:31:00.306]                         }
[09:31:00.306]                         if (!has_future || version < "1.8.0") {
[09:31:00.306]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.306]                             "", base::R.version$version.string), 
[09:31:00.306]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:00.306]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.306]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.306]                               "release", "version")], collapse = " "), 
[09:31:00.306]                             hostname = base::Sys.info()[["nodename"]])
[09:31:00.306]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.306]                             info)
[09:31:00.306]                           info <- base::paste(info, collapse = "; ")
[09:31:00.306]                           if (!has_future) {
[09:31:00.306]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.306]                               info)
[09:31:00.306]                           }
[09:31:00.306]                           else {
[09:31:00.306]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.306]                               info, version)
[09:31:00.306]                           }
[09:31:00.306]                           base::stop(msg)
[09:31:00.306]                         }
[09:31:00.306]                       })
[09:31:00.306]                     }
[09:31:00.306]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:00.306]                     base::options(mc.cores = 1L)
[09:31:00.306]                   }
[09:31:00.306]                   ...future.strategy.old <- future::plan("list")
[09:31:00.306]                   options(future.plan = NULL)
[09:31:00.306]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.306]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.306]                 }
[09:31:00.306]                 ...future.workdir <- getwd()
[09:31:00.306]             }
[09:31:00.306]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.306]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.306]         }
[09:31:00.306]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.306]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.306]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.306]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.306]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.306]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.306]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.306]             base::names(...future.oldOptions))
[09:31:00.306]     }
[09:31:00.306]     if (FALSE) {
[09:31:00.306]     }
[09:31:00.306]     else {
[09:31:00.306]         if (TRUE) {
[09:31:00.306]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.306]                 open = "w")
[09:31:00.306]         }
[09:31:00.306]         else {
[09:31:00.306]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.306]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.306]         }
[09:31:00.306]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.306]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.306]             base::sink(type = "output", split = FALSE)
[09:31:00.306]             base::close(...future.stdout)
[09:31:00.306]         }, add = TRUE)
[09:31:00.306]     }
[09:31:00.306]     ...future.frame <- base::sys.nframe()
[09:31:00.306]     ...future.conditions <- base::list()
[09:31:00.306]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.306]     if (FALSE) {
[09:31:00.306]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.306]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.306]     }
[09:31:00.306]     ...future.result <- base::tryCatch({
[09:31:00.306]         base::withCallingHandlers({
[09:31:00.306]             ...future.value <- base::withVisible(base::local({
[09:31:00.306]                 withCallingHandlers({
[09:31:00.306]                   {
[09:31:00.306]                     42
[09:31:00.306]                   }
[09:31:00.306]                 }, immediateCondition = function(cond) {
[09:31:00.306]                   save_rds <- function (object, pathname, ...) 
[09:31:00.306]                   {
[09:31:00.306]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:31:00.306]                     if (file_test("-f", pathname_tmp)) {
[09:31:00.306]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.306]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:31:00.306]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.306]                         fi_tmp[["mtime"]])
[09:31:00.306]                     }
[09:31:00.306]                     tryCatch({
[09:31:00.306]                       saveRDS(object, file = pathname_tmp, ...)
[09:31:00.306]                     }, error = function(ex) {
[09:31:00.306]                       msg <- conditionMessage(ex)
[09:31:00.306]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.306]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:31:00.306]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.306]                         fi_tmp[["mtime"]], msg)
[09:31:00.306]                       ex$message <- msg
[09:31:00.306]                       stop(ex)
[09:31:00.306]                     })
[09:31:00.306]                     stopifnot(file_test("-f", pathname_tmp))
[09:31:00.306]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:31:00.306]                     if (!res || file_test("-f", pathname_tmp)) {
[09:31:00.306]                       fi_tmp <- file.info(pathname_tmp)
[09:31:00.306]                       fi <- file.info(pathname)
[09:31:00.306]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:31:00.306]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:31:00.306]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:31:00.306]                         fi[["size"]], fi[["mtime"]])
[09:31:00.306]                       stop(msg)
[09:31:00.306]                     }
[09:31:00.306]                     invisible(pathname)
[09:31:00.306]                   }
[09:31:00.306]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:31:00.306]                     rootPath = tempdir()) 
[09:31:00.306]                   {
[09:31:00.306]                     obj <- list(time = Sys.time(), condition = cond)
[09:31:00.306]                     file <- tempfile(pattern = class(cond)[1], 
[09:31:00.306]                       tmpdir = path, fileext = ".rds")
[09:31:00.306]                     save_rds(obj, file)
[09:31:00.306]                   }
[09:31:00.306]                   saveImmediateCondition(cond, path = "/tmp/RtmpShydig/.future/immediateConditions")
[09:31:00.306]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.306]                   {
[09:31:00.306]                     inherits <- base::inherits
[09:31:00.306]                     invokeRestart <- base::invokeRestart
[09:31:00.306]                     is.null <- base::is.null
[09:31:00.306]                     muffled <- FALSE
[09:31:00.306]                     if (inherits(cond, "message")) {
[09:31:00.306]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:00.306]                       if (muffled) 
[09:31:00.306]                         invokeRestart("muffleMessage")
[09:31:00.306]                     }
[09:31:00.306]                     else if (inherits(cond, "warning")) {
[09:31:00.306]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:00.306]                       if (muffled) 
[09:31:00.306]                         invokeRestart("muffleWarning")
[09:31:00.306]                     }
[09:31:00.306]                     else if (inherits(cond, "condition")) {
[09:31:00.306]                       if (!is.null(pattern)) {
[09:31:00.306]                         computeRestarts <- base::computeRestarts
[09:31:00.306]                         grepl <- base::grepl
[09:31:00.306]                         restarts <- computeRestarts(cond)
[09:31:00.306]                         for (restart in restarts) {
[09:31:00.306]                           name <- restart$name
[09:31:00.306]                           if (is.null(name)) 
[09:31:00.306]                             next
[09:31:00.306]                           if (!grepl(pattern, name)) 
[09:31:00.306]                             next
[09:31:00.306]                           invokeRestart(restart)
[09:31:00.306]                           muffled <- TRUE
[09:31:00.306]                           break
[09:31:00.306]                         }
[09:31:00.306]                       }
[09:31:00.306]                     }
[09:31:00.306]                     invisible(muffled)
[09:31:00.306]                   }
[09:31:00.306]                   muffleCondition(cond)
[09:31:00.306]                 })
[09:31:00.306]             }))
[09:31:00.306]             future::FutureResult(value = ...future.value$value, 
[09:31:00.306]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.306]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.306]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.306]                     ...future.globalenv.names))
[09:31:00.306]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.306]         }, condition = base::local({
[09:31:00.306]             c <- base::c
[09:31:00.306]             inherits <- base::inherits
[09:31:00.306]             invokeRestart <- base::invokeRestart
[09:31:00.306]             length <- base::length
[09:31:00.306]             list <- base::list
[09:31:00.306]             seq.int <- base::seq.int
[09:31:00.306]             signalCondition <- base::signalCondition
[09:31:00.306]             sys.calls <- base::sys.calls
[09:31:00.306]             `[[` <- base::`[[`
[09:31:00.306]             `+` <- base::`+`
[09:31:00.306]             `<<-` <- base::`<<-`
[09:31:00.306]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.306]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.306]                   3L)]
[09:31:00.306]             }
[09:31:00.306]             function(cond) {
[09:31:00.306]                 is_error <- inherits(cond, "error")
[09:31:00.306]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.306]                   NULL)
[09:31:00.306]                 if (is_error) {
[09:31:00.306]                   sessionInformation <- function() {
[09:31:00.306]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.306]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.306]                       search = base::search(), system = base::Sys.info())
[09:31:00.306]                   }
[09:31:00.306]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.306]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.306]                     cond$call), session = sessionInformation(), 
[09:31:00.306]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.306]                   signalCondition(cond)
[09:31:00.306]                 }
[09:31:00.306]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.306]                 "immediateCondition"))) {
[09:31:00.306]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.306]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.306]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.306]                   if (TRUE && !signal) {
[09:31:00.306]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.306]                     {
[09:31:00.306]                       inherits <- base::inherits
[09:31:00.306]                       invokeRestart <- base::invokeRestart
[09:31:00.306]                       is.null <- base::is.null
[09:31:00.306]                       muffled <- FALSE
[09:31:00.306]                       if (inherits(cond, "message")) {
[09:31:00.306]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.306]                         if (muffled) 
[09:31:00.306]                           invokeRestart("muffleMessage")
[09:31:00.306]                       }
[09:31:00.306]                       else if (inherits(cond, "warning")) {
[09:31:00.306]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.306]                         if (muffled) 
[09:31:00.306]                           invokeRestart("muffleWarning")
[09:31:00.306]                       }
[09:31:00.306]                       else if (inherits(cond, "condition")) {
[09:31:00.306]                         if (!is.null(pattern)) {
[09:31:00.306]                           computeRestarts <- base::computeRestarts
[09:31:00.306]                           grepl <- base::grepl
[09:31:00.306]                           restarts <- computeRestarts(cond)
[09:31:00.306]                           for (restart in restarts) {
[09:31:00.306]                             name <- restart$name
[09:31:00.306]                             if (is.null(name)) 
[09:31:00.306]                               next
[09:31:00.306]                             if (!grepl(pattern, name)) 
[09:31:00.306]                               next
[09:31:00.306]                             invokeRestart(restart)
[09:31:00.306]                             muffled <- TRUE
[09:31:00.306]                             break
[09:31:00.306]                           }
[09:31:00.306]                         }
[09:31:00.306]                       }
[09:31:00.306]                       invisible(muffled)
[09:31:00.306]                     }
[09:31:00.306]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.306]                   }
[09:31:00.306]                 }
[09:31:00.306]                 else {
[09:31:00.306]                   if (TRUE) {
[09:31:00.306]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.306]                     {
[09:31:00.306]                       inherits <- base::inherits
[09:31:00.306]                       invokeRestart <- base::invokeRestart
[09:31:00.306]                       is.null <- base::is.null
[09:31:00.306]                       muffled <- FALSE
[09:31:00.306]                       if (inherits(cond, "message")) {
[09:31:00.306]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.306]                         if (muffled) 
[09:31:00.306]                           invokeRestart("muffleMessage")
[09:31:00.306]                       }
[09:31:00.306]                       else if (inherits(cond, "warning")) {
[09:31:00.306]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.306]                         if (muffled) 
[09:31:00.306]                           invokeRestart("muffleWarning")
[09:31:00.306]                       }
[09:31:00.306]                       else if (inherits(cond, "condition")) {
[09:31:00.306]                         if (!is.null(pattern)) {
[09:31:00.306]                           computeRestarts <- base::computeRestarts
[09:31:00.306]                           grepl <- base::grepl
[09:31:00.306]                           restarts <- computeRestarts(cond)
[09:31:00.306]                           for (restart in restarts) {
[09:31:00.306]                             name <- restart$name
[09:31:00.306]                             if (is.null(name)) 
[09:31:00.306]                               next
[09:31:00.306]                             if (!grepl(pattern, name)) 
[09:31:00.306]                               next
[09:31:00.306]                             invokeRestart(restart)
[09:31:00.306]                             muffled <- TRUE
[09:31:00.306]                             break
[09:31:00.306]                           }
[09:31:00.306]                         }
[09:31:00.306]                       }
[09:31:00.306]                       invisible(muffled)
[09:31:00.306]                     }
[09:31:00.306]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.306]                   }
[09:31:00.306]                 }
[09:31:00.306]             }
[09:31:00.306]         }))
[09:31:00.306]     }, error = function(ex) {
[09:31:00.306]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.306]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.306]                 ...future.rng), started = ...future.startTime, 
[09:31:00.306]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.306]             version = "1.8"), class = "FutureResult")
[09:31:00.306]     }, finally = {
[09:31:00.306]         if (!identical(...future.workdir, getwd())) 
[09:31:00.306]             setwd(...future.workdir)
[09:31:00.306]         {
[09:31:00.306]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.306]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.306]             }
[09:31:00.306]             base::options(...future.oldOptions)
[09:31:00.306]             if (.Platform$OS.type == "windows") {
[09:31:00.306]                 old_names <- names(...future.oldEnvVars)
[09:31:00.306]                 envs <- base::Sys.getenv()
[09:31:00.306]                 names <- names(envs)
[09:31:00.306]                 common <- intersect(names, old_names)
[09:31:00.306]                 added <- setdiff(names, old_names)
[09:31:00.306]                 removed <- setdiff(old_names, names)
[09:31:00.306]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.306]                   envs[common]]
[09:31:00.306]                 NAMES <- toupper(changed)
[09:31:00.306]                 args <- list()
[09:31:00.306]                 for (kk in seq_along(NAMES)) {
[09:31:00.306]                   name <- changed[[kk]]
[09:31:00.306]                   NAME <- NAMES[[kk]]
[09:31:00.306]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.306]                     next
[09:31:00.306]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.306]                 }
[09:31:00.306]                 NAMES <- toupper(added)
[09:31:00.306]                 for (kk in seq_along(NAMES)) {
[09:31:00.306]                   name <- added[[kk]]
[09:31:00.306]                   NAME <- NAMES[[kk]]
[09:31:00.306]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.306]                     next
[09:31:00.306]                   args[[name]] <- ""
[09:31:00.306]                 }
[09:31:00.306]                 NAMES <- toupper(removed)
[09:31:00.306]                 for (kk in seq_along(NAMES)) {
[09:31:00.306]                   name <- removed[[kk]]
[09:31:00.306]                   NAME <- NAMES[[kk]]
[09:31:00.306]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.306]                     next
[09:31:00.306]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.306]                 }
[09:31:00.306]                 if (length(args) > 0) 
[09:31:00.306]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.306]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.306]             }
[09:31:00.306]             else {
[09:31:00.306]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.306]             }
[09:31:00.306]             {
[09:31:00.306]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.306]                   0L) {
[09:31:00.306]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.306]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.306]                   base::options(opts)
[09:31:00.306]                 }
[09:31:00.306]                 {
[09:31:00.306]                   {
[09:31:00.306]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:00.306]                     NULL
[09:31:00.306]                   }
[09:31:00.306]                   options(future.plan = NULL)
[09:31:00.306]                   if (is.na(NA_character_)) 
[09:31:00.306]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.306]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.306]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.306]                     .init = FALSE)
[09:31:00.306]                 }
[09:31:00.306]             }
[09:31:00.306]         }
[09:31:00.306]     })
[09:31:00.306]     if (TRUE) {
[09:31:00.306]         base::sink(type = "output", split = FALSE)
[09:31:00.306]         if (TRUE) {
[09:31:00.306]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.306]         }
[09:31:00.306]         else {
[09:31:00.306]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.306]         }
[09:31:00.306]         base::close(...future.stdout)
[09:31:00.306]         ...future.stdout <- NULL
[09:31:00.306]     }
[09:31:00.306]     ...future.result$conditions <- ...future.conditions
[09:31:00.306]     ...future.result$finished <- base::Sys.time()
[09:31:00.306]     ...future.result
[09:31:00.306] }
[09:31:00.309] requestCore(): workers = 2
[09:31:00.310] MulticoreFuture started
[09:31:00.311] - Launch lazy future ... done
[09:31:00.311] run() for ‘MulticoreFuture’ ... done
[09:31:00.311] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:00.312] List of future strategies:
[09:31:00.312] 1. sequential:
[09:31:00.312]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:00.312]    - tweaked: FALSE
[09:31:00.312]    - call: NULL
[09:31:00.313] plan(): nbrOfWorkers() = 1
[09:31:00.314] plan(): Setting new future strategy stack:
[09:31:00.315] List of future strategies:
[09:31:00.315] 1. multicore:
[09:31:00.315]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:31:00.315]    - tweaked: FALSE
[09:31:00.315]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:00.323] result() for MulticoreFuture ...
[09:31:00.325] plan(): nbrOfWorkers() = 2
[09:31:00.326] result() for MulticoreFuture ...
[09:31:00.326] result() for MulticoreFuture ... done
[09:31:00.326] result() for MulticoreFuture ... done
[09:31:00.327] result() for MulticoreFuture ...
[09:31:00.330] result() for MulticoreFuture ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[09:31:00.331] plan(): Setting new future strategy stack:
[09:31:00.331] List of future strategies:
[09:31:00.331] 1. multisession:
[09:31:00.331]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:00.331]    - tweaked: FALSE
[09:31:00.331]    - call: plan(strategy)
[09:31:00.332] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:31:00.332] multisession:
[09:31:00.332] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:31:00.332] - tweaked: FALSE
[09:31:00.332] - call: plan(strategy)
[09:31:00.338] getGlobalsAndPackages() ...
[09:31:00.338] Not searching for globals
[09:31:00.338] - globals: [0] <none>
[09:31:00.338] getGlobalsAndPackages() ... DONE
[09:31:00.339] [local output] makeClusterPSOCK() ...
[09:31:00.379] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:31:00.381] [local output] Base port: 11139
[09:31:00.381] [local output] Getting setup options for 2 cluster nodes ...
[09:31:00.381] [local output]  - Node 1 of 2 ...
[09:31:00.381] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:00.382] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpShydig/worker.rank=1.parallelly.parent=40771.9f4378bfce39.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpShydig/worker.rank=1.parallelly.parent=40771.9f4378bfce39.pid")'’
[09:31:00.570] - Possible to infer worker's PID: TRUE
[09:31:00.570] [local output] Rscript port: 11139

[09:31:00.571] [local output]  - Node 2 of 2 ...
[09:31:00.571] [local output] localMachine=TRUE => revtunnel=FALSE

[09:31:00.572] [local output] Rscript port: 11139

[09:31:00.572] [local output] Getting setup options for 2 cluster nodes ... done
[09:31:00.572] [local output]  - Parallel setup requested for some PSOCK nodes
[09:31:00.573] [local output] Setting up PSOCK nodes in parallel
[09:31:00.573] List of 36
[09:31:00.573]  $ worker          : chr "localhost"
[09:31:00.573]   ..- attr(*, "localhost")= logi TRUE
[09:31:00.573]  $ master          : chr "localhost"
[09:31:00.573]  $ port            : int 11139
[09:31:00.573]  $ connectTimeout  : num 120
[09:31:00.573]  $ timeout         : num 2592000
[09:31:00.573]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:31:00.573]  $ homogeneous     : logi TRUE
[09:31:00.573]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:31:00.573]  $ rscript_envs    : NULL
[09:31:00.573]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:00.573]  $ rscript_startup : NULL
[09:31:00.573]  $ rscript_sh      : chr "sh"
[09:31:00.573]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:00.573]  $ methods         : logi TRUE
[09:31:00.573]  $ socketOptions   : chr "no-delay"
[09:31:00.573]  $ useXDR          : logi FALSE
[09:31:00.573]  $ outfile         : chr "/dev/null"
[09:31:00.573]  $ renice          : int NA
[09:31:00.573]  $ rshcmd          : NULL
[09:31:00.573]  $ user            : chr(0) 
[09:31:00.573]  $ revtunnel       : logi FALSE
[09:31:00.573]  $ rshlogfile      : NULL
[09:31:00.573]  $ rshopts         : chr(0) 
[09:31:00.573]  $ rank            : int 1
[09:31:00.573]  $ manual          : logi FALSE
[09:31:00.573]  $ dryrun          : logi FALSE
[09:31:00.573]  $ quiet           : logi FALSE
[09:31:00.573]  $ setup_strategy  : chr "parallel"
[09:31:00.573]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:00.573]  $ pidfile         : chr "/tmp/RtmpShydig/worker.rank=1.parallelly.parent=40771.9f4378bfce39.pid"
[09:31:00.573]  $ rshcmd_label    : NULL
[09:31:00.573]  $ rsh_call        : NULL
[09:31:00.573]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:31:00.573]  $ localMachine    : logi TRUE
[09:31:00.573]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:31:00.573]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:31:00.573]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:31:00.573]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:31:00.573]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:31:00.573]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:31:00.573]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:31:00.573]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:31:00.573]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:31:00.573]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:31:00.573]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:31:00.573]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:31:00.573]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:31:00.573]  $ arguments       :List of 28
[09:31:00.573]   ..$ worker          : chr "localhost"
[09:31:00.573]   ..$ master          : NULL
[09:31:00.573]   ..$ port            : int 11139
[09:31:00.573]   ..$ connectTimeout  : num 120
[09:31:00.573]   ..$ timeout         : num 2592000
[09:31:00.573]   ..$ rscript         : NULL
[09:31:00.573]   ..$ homogeneous     : NULL
[09:31:00.573]   ..$ rscript_args    : NULL
[09:31:00.573]   ..$ rscript_envs    : NULL
[09:31:00.573]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:31:00.573]   ..$ rscript_startup : NULL
[09:31:00.573]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:31:00.573]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:31:00.573]   ..$ methods         : logi TRUE
[09:31:00.573]   ..$ socketOptions   : chr "no-delay"
[09:31:00.573]   ..$ useXDR          : logi FALSE
[09:31:00.573]   ..$ outfile         : chr "/dev/null"
[09:31:00.573]   ..$ renice          : int NA
[09:31:00.573]   ..$ rshcmd          : NULL
[09:31:00.573]   ..$ user            : NULL
[09:31:00.573]   ..$ revtunnel       : logi NA
[09:31:00.573]   ..$ rshlogfile      : NULL
[09:31:00.573]   ..$ rshopts         : NULL
[09:31:00.573]   ..$ rank            : int 1
[09:31:00.573]   ..$ manual          : logi FALSE
[09:31:00.573]   ..$ dryrun          : logi FALSE
[09:31:00.573]   ..$ quiet           : logi FALSE
[09:31:00.573]   ..$ setup_strategy  : chr "parallel"
[09:31:00.573]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:31:00.591] [local output] System call to launch all workers:
[09:31:00.591] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpShydig/worker.rank=1.parallelly.parent=40771.9f4378bfce39.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11139 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:31:00.591] [local output] Starting PSOCK main server
[09:31:00.596] [local output] Workers launched
[09:31:00.597] [local output] Waiting for workers to connect back
[09:31:00.597]  - [local output] 0 workers out of 2 ready
[09:31:00.856]  - [local output] 0 workers out of 2 ready
[09:31:00.857]  - [local output] 1 workers out of 2 ready
[09:31:00.857]  - [local output] 1 workers out of 2 ready
[09:31:00.857]  - [local output] 2 workers out of 2 ready
[09:31:00.858] [local output] Launching of workers completed
[09:31:00.858] [local output] Collecting session information from workers
[09:31:00.859] [local output]  - Worker #1 of 2
[09:31:00.859] [local output]  - Worker #2 of 2
[09:31:00.859] [local output] makeClusterPSOCK() ... done
[09:31:00.871] Packages needed by the future expression (n = 0): <none>
[09:31:00.871] Packages needed by future strategies (n = 0): <none>
[09:31:00.872] {
[09:31:00.872]     {
[09:31:00.872]         {
[09:31:00.872]             ...future.startTime <- base::Sys.time()
[09:31:00.872]             {
[09:31:00.872]                 {
[09:31:00.872]                   {
[09:31:00.872]                     {
[09:31:00.872]                       base::local({
[09:31:00.872]                         has_future <- base::requireNamespace("future", 
[09:31:00.872]                           quietly = TRUE)
[09:31:00.872]                         if (has_future) {
[09:31:00.872]                           ns <- base::getNamespace("future")
[09:31:00.872]                           version <- ns[[".package"]][["version"]]
[09:31:00.872]                           if (is.null(version)) 
[09:31:00.872]                             version <- utils::packageVersion("future")
[09:31:00.872]                         }
[09:31:00.872]                         else {
[09:31:00.872]                           version <- NULL
[09:31:00.872]                         }
[09:31:00.872]                         if (!has_future || version < "1.8.0") {
[09:31:00.872]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.872]                             "", base::R.version$version.string), 
[09:31:00.872]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:00.872]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.872]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.872]                               "release", "version")], collapse = " "), 
[09:31:00.872]                             hostname = base::Sys.info()[["nodename"]])
[09:31:00.872]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.872]                             info)
[09:31:00.872]                           info <- base::paste(info, collapse = "; ")
[09:31:00.872]                           if (!has_future) {
[09:31:00.872]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.872]                               info)
[09:31:00.872]                           }
[09:31:00.872]                           else {
[09:31:00.872]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.872]                               info, version)
[09:31:00.872]                           }
[09:31:00.872]                           base::stop(msg)
[09:31:00.872]                         }
[09:31:00.872]                       })
[09:31:00.872]                     }
[09:31:00.872]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:00.872]                     base::options(mc.cores = 1L)
[09:31:00.872]                   }
[09:31:00.872]                   ...future.strategy.old <- future::plan("list")
[09:31:00.872]                   options(future.plan = NULL)
[09:31:00.872]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.872]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.872]                 }
[09:31:00.872]                 ...future.workdir <- getwd()
[09:31:00.872]             }
[09:31:00.872]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.872]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.872]         }
[09:31:00.872]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.872]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.872]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.872]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.872]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.872]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.872]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.872]             base::names(...future.oldOptions))
[09:31:00.872]     }
[09:31:00.872]     if (FALSE) {
[09:31:00.872]     }
[09:31:00.872]     else {
[09:31:00.872]         if (TRUE) {
[09:31:00.872]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.872]                 open = "w")
[09:31:00.872]         }
[09:31:00.872]         else {
[09:31:00.872]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.872]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.872]         }
[09:31:00.872]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.872]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.872]             base::sink(type = "output", split = FALSE)
[09:31:00.872]             base::close(...future.stdout)
[09:31:00.872]         }, add = TRUE)
[09:31:00.872]     }
[09:31:00.872]     ...future.frame <- base::sys.nframe()
[09:31:00.872]     ...future.conditions <- base::list()
[09:31:00.872]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.872]     if (FALSE) {
[09:31:00.872]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.872]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.872]     }
[09:31:00.872]     ...future.result <- base::tryCatch({
[09:31:00.872]         base::withCallingHandlers({
[09:31:00.872]             ...future.value <- base::withVisible(base::local({
[09:31:00.872]                 ...future.makeSendCondition <- base::local({
[09:31:00.872]                   sendCondition <- NULL
[09:31:00.872]                   function(frame = 1L) {
[09:31:00.872]                     if (is.function(sendCondition)) 
[09:31:00.872]                       return(sendCondition)
[09:31:00.872]                     ns <- getNamespace("parallel")
[09:31:00.872]                     if (exists("sendData", mode = "function", 
[09:31:00.872]                       envir = ns)) {
[09:31:00.872]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:00.872]                         envir = ns)
[09:31:00.872]                       envir <- sys.frame(frame)
[09:31:00.872]                       master <- NULL
[09:31:00.872]                       while (!identical(envir, .GlobalEnv) && 
[09:31:00.872]                         !identical(envir, emptyenv())) {
[09:31:00.872]                         if (exists("master", mode = "list", envir = envir, 
[09:31:00.872]                           inherits = FALSE)) {
[09:31:00.872]                           master <- get("master", mode = "list", 
[09:31:00.872]                             envir = envir, inherits = FALSE)
[09:31:00.872]                           if (inherits(master, c("SOCKnode", 
[09:31:00.872]                             "SOCK0node"))) {
[09:31:00.872]                             sendCondition <<- function(cond) {
[09:31:00.872]                               data <- list(type = "VALUE", value = cond, 
[09:31:00.872]                                 success = TRUE)
[09:31:00.872]                               parallel_sendData(master, data)
[09:31:00.872]                             }
[09:31:00.872]                             return(sendCondition)
[09:31:00.872]                           }
[09:31:00.872]                         }
[09:31:00.872]                         frame <- frame + 1L
[09:31:00.872]                         envir <- sys.frame(frame)
[09:31:00.872]                       }
[09:31:00.872]                     }
[09:31:00.872]                     sendCondition <<- function(cond) NULL
[09:31:00.872]                   }
[09:31:00.872]                 })
[09:31:00.872]                 withCallingHandlers({
[09:31:00.872]                   NA
[09:31:00.872]                 }, immediateCondition = function(cond) {
[09:31:00.872]                   sendCondition <- ...future.makeSendCondition()
[09:31:00.872]                   sendCondition(cond)
[09:31:00.872]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.872]                   {
[09:31:00.872]                     inherits <- base::inherits
[09:31:00.872]                     invokeRestart <- base::invokeRestart
[09:31:00.872]                     is.null <- base::is.null
[09:31:00.872]                     muffled <- FALSE
[09:31:00.872]                     if (inherits(cond, "message")) {
[09:31:00.872]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:00.872]                       if (muffled) 
[09:31:00.872]                         invokeRestart("muffleMessage")
[09:31:00.872]                     }
[09:31:00.872]                     else if (inherits(cond, "warning")) {
[09:31:00.872]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:00.872]                       if (muffled) 
[09:31:00.872]                         invokeRestart("muffleWarning")
[09:31:00.872]                     }
[09:31:00.872]                     else if (inherits(cond, "condition")) {
[09:31:00.872]                       if (!is.null(pattern)) {
[09:31:00.872]                         computeRestarts <- base::computeRestarts
[09:31:00.872]                         grepl <- base::grepl
[09:31:00.872]                         restarts <- computeRestarts(cond)
[09:31:00.872]                         for (restart in restarts) {
[09:31:00.872]                           name <- restart$name
[09:31:00.872]                           if (is.null(name)) 
[09:31:00.872]                             next
[09:31:00.872]                           if (!grepl(pattern, name)) 
[09:31:00.872]                             next
[09:31:00.872]                           invokeRestart(restart)
[09:31:00.872]                           muffled <- TRUE
[09:31:00.872]                           break
[09:31:00.872]                         }
[09:31:00.872]                       }
[09:31:00.872]                     }
[09:31:00.872]                     invisible(muffled)
[09:31:00.872]                   }
[09:31:00.872]                   muffleCondition(cond)
[09:31:00.872]                 })
[09:31:00.872]             }))
[09:31:00.872]             future::FutureResult(value = ...future.value$value, 
[09:31:00.872]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.872]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.872]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.872]                     ...future.globalenv.names))
[09:31:00.872]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.872]         }, condition = base::local({
[09:31:00.872]             c <- base::c
[09:31:00.872]             inherits <- base::inherits
[09:31:00.872]             invokeRestart <- base::invokeRestart
[09:31:00.872]             length <- base::length
[09:31:00.872]             list <- base::list
[09:31:00.872]             seq.int <- base::seq.int
[09:31:00.872]             signalCondition <- base::signalCondition
[09:31:00.872]             sys.calls <- base::sys.calls
[09:31:00.872]             `[[` <- base::`[[`
[09:31:00.872]             `+` <- base::`+`
[09:31:00.872]             `<<-` <- base::`<<-`
[09:31:00.872]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.872]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.872]                   3L)]
[09:31:00.872]             }
[09:31:00.872]             function(cond) {
[09:31:00.872]                 is_error <- inherits(cond, "error")
[09:31:00.872]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.872]                   NULL)
[09:31:00.872]                 if (is_error) {
[09:31:00.872]                   sessionInformation <- function() {
[09:31:00.872]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.872]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.872]                       search = base::search(), system = base::Sys.info())
[09:31:00.872]                   }
[09:31:00.872]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.872]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.872]                     cond$call), session = sessionInformation(), 
[09:31:00.872]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.872]                   signalCondition(cond)
[09:31:00.872]                 }
[09:31:00.872]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.872]                 "immediateCondition"))) {
[09:31:00.872]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.872]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.872]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.872]                   if (TRUE && !signal) {
[09:31:00.872]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.872]                     {
[09:31:00.872]                       inherits <- base::inherits
[09:31:00.872]                       invokeRestart <- base::invokeRestart
[09:31:00.872]                       is.null <- base::is.null
[09:31:00.872]                       muffled <- FALSE
[09:31:00.872]                       if (inherits(cond, "message")) {
[09:31:00.872]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.872]                         if (muffled) 
[09:31:00.872]                           invokeRestart("muffleMessage")
[09:31:00.872]                       }
[09:31:00.872]                       else if (inherits(cond, "warning")) {
[09:31:00.872]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.872]                         if (muffled) 
[09:31:00.872]                           invokeRestart("muffleWarning")
[09:31:00.872]                       }
[09:31:00.872]                       else if (inherits(cond, "condition")) {
[09:31:00.872]                         if (!is.null(pattern)) {
[09:31:00.872]                           computeRestarts <- base::computeRestarts
[09:31:00.872]                           grepl <- base::grepl
[09:31:00.872]                           restarts <- computeRestarts(cond)
[09:31:00.872]                           for (restart in restarts) {
[09:31:00.872]                             name <- restart$name
[09:31:00.872]                             if (is.null(name)) 
[09:31:00.872]                               next
[09:31:00.872]                             if (!grepl(pattern, name)) 
[09:31:00.872]                               next
[09:31:00.872]                             invokeRestart(restart)
[09:31:00.872]                             muffled <- TRUE
[09:31:00.872]                             break
[09:31:00.872]                           }
[09:31:00.872]                         }
[09:31:00.872]                       }
[09:31:00.872]                       invisible(muffled)
[09:31:00.872]                     }
[09:31:00.872]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.872]                   }
[09:31:00.872]                 }
[09:31:00.872]                 else {
[09:31:00.872]                   if (TRUE) {
[09:31:00.872]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.872]                     {
[09:31:00.872]                       inherits <- base::inherits
[09:31:00.872]                       invokeRestart <- base::invokeRestart
[09:31:00.872]                       is.null <- base::is.null
[09:31:00.872]                       muffled <- FALSE
[09:31:00.872]                       if (inherits(cond, "message")) {
[09:31:00.872]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.872]                         if (muffled) 
[09:31:00.872]                           invokeRestart("muffleMessage")
[09:31:00.872]                       }
[09:31:00.872]                       else if (inherits(cond, "warning")) {
[09:31:00.872]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.872]                         if (muffled) 
[09:31:00.872]                           invokeRestart("muffleWarning")
[09:31:00.872]                       }
[09:31:00.872]                       else if (inherits(cond, "condition")) {
[09:31:00.872]                         if (!is.null(pattern)) {
[09:31:00.872]                           computeRestarts <- base::computeRestarts
[09:31:00.872]                           grepl <- base::grepl
[09:31:00.872]                           restarts <- computeRestarts(cond)
[09:31:00.872]                           for (restart in restarts) {
[09:31:00.872]                             name <- restart$name
[09:31:00.872]                             if (is.null(name)) 
[09:31:00.872]                               next
[09:31:00.872]                             if (!grepl(pattern, name)) 
[09:31:00.872]                               next
[09:31:00.872]                             invokeRestart(restart)
[09:31:00.872]                             muffled <- TRUE
[09:31:00.872]                             break
[09:31:00.872]                           }
[09:31:00.872]                         }
[09:31:00.872]                       }
[09:31:00.872]                       invisible(muffled)
[09:31:00.872]                     }
[09:31:00.872]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.872]                   }
[09:31:00.872]                 }
[09:31:00.872]             }
[09:31:00.872]         }))
[09:31:00.872]     }, error = function(ex) {
[09:31:00.872]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.872]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.872]                 ...future.rng), started = ...future.startTime, 
[09:31:00.872]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.872]             version = "1.8"), class = "FutureResult")
[09:31:00.872]     }, finally = {
[09:31:00.872]         if (!identical(...future.workdir, getwd())) 
[09:31:00.872]             setwd(...future.workdir)
[09:31:00.872]         {
[09:31:00.872]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.872]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.872]             }
[09:31:00.872]             base::options(...future.oldOptions)
[09:31:00.872]             if (.Platform$OS.type == "windows") {
[09:31:00.872]                 old_names <- names(...future.oldEnvVars)
[09:31:00.872]                 envs <- base::Sys.getenv()
[09:31:00.872]                 names <- names(envs)
[09:31:00.872]                 common <- intersect(names, old_names)
[09:31:00.872]                 added <- setdiff(names, old_names)
[09:31:00.872]                 removed <- setdiff(old_names, names)
[09:31:00.872]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.872]                   envs[common]]
[09:31:00.872]                 NAMES <- toupper(changed)
[09:31:00.872]                 args <- list()
[09:31:00.872]                 for (kk in seq_along(NAMES)) {
[09:31:00.872]                   name <- changed[[kk]]
[09:31:00.872]                   NAME <- NAMES[[kk]]
[09:31:00.872]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.872]                     next
[09:31:00.872]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.872]                 }
[09:31:00.872]                 NAMES <- toupper(added)
[09:31:00.872]                 for (kk in seq_along(NAMES)) {
[09:31:00.872]                   name <- added[[kk]]
[09:31:00.872]                   NAME <- NAMES[[kk]]
[09:31:00.872]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.872]                     next
[09:31:00.872]                   args[[name]] <- ""
[09:31:00.872]                 }
[09:31:00.872]                 NAMES <- toupper(removed)
[09:31:00.872]                 for (kk in seq_along(NAMES)) {
[09:31:00.872]                   name <- removed[[kk]]
[09:31:00.872]                   NAME <- NAMES[[kk]]
[09:31:00.872]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.872]                     next
[09:31:00.872]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.872]                 }
[09:31:00.872]                 if (length(args) > 0) 
[09:31:00.872]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.872]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.872]             }
[09:31:00.872]             else {
[09:31:00.872]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.872]             }
[09:31:00.872]             {
[09:31:00.872]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.872]                   0L) {
[09:31:00.872]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.872]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.872]                   base::options(opts)
[09:31:00.872]                 }
[09:31:00.872]                 {
[09:31:00.872]                   {
[09:31:00.872]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:00.872]                     NULL
[09:31:00.872]                   }
[09:31:00.872]                   options(future.plan = NULL)
[09:31:00.872]                   if (is.na(NA_character_)) 
[09:31:00.872]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.872]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.872]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.872]                     .init = FALSE)
[09:31:00.872]                 }
[09:31:00.872]             }
[09:31:00.872]         }
[09:31:00.872]     })
[09:31:00.872]     if (TRUE) {
[09:31:00.872]         base::sink(type = "output", split = FALSE)
[09:31:00.872]         if (TRUE) {
[09:31:00.872]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.872]         }
[09:31:00.872]         else {
[09:31:00.872]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.872]         }
[09:31:00.872]         base::close(...future.stdout)
[09:31:00.872]         ...future.stdout <- NULL
[09:31:00.872]     }
[09:31:00.872]     ...future.result$conditions <- ...future.conditions
[09:31:00.872]     ...future.result$finished <- base::Sys.time()
[09:31:00.872]     ...future.result
[09:31:00.872] }
[09:31:00.922] MultisessionFuture started
[09:31:00.922] result() for ClusterFuture ...
[09:31:00.922] receiveMessageFromWorker() for ClusterFuture ...
[09:31:00.922] - Validating connection of MultisessionFuture
[09:31:00.953] - received message: FutureResult
[09:31:00.953] - Received FutureResult
[09:31:00.953] - Erased future from FutureRegistry
[09:31:00.954] result() for ClusterFuture ...
[09:31:00.954] - result already collected: FutureResult
[09:31:00.954] result() for ClusterFuture ... done
[09:31:00.954] receiveMessageFromWorker() for ClusterFuture ... done
[09:31:00.954] result() for ClusterFuture ... done
[09:31:00.954] result() for ClusterFuture ...
[09:31:00.954] - result already collected: FutureResult
[09:31:00.954] result() for ClusterFuture ... done
[09:31:00.954] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:31:00.958] plan(): nbrOfWorkers() = 2
[09:31:00.962] getGlobalsAndPackages() ...
[09:31:00.962] 
[09:31:00.962] - globals: [0] <none>
[09:31:00.962] getGlobalsAndPackages() ... DONE
[09:31:00.973] Packages needed by the future expression (n = 0): <none>
[09:31:00.973] Packages needed by future strategies (n = 0): <none>
[09:31:00.974] {
[09:31:00.974]     {
[09:31:00.974]         {
[09:31:00.974]             ...future.startTime <- base::Sys.time()
[09:31:00.974]             {
[09:31:00.974]                 {
[09:31:00.974]                   {
[09:31:00.974]                     {
[09:31:00.974]                       base::local({
[09:31:00.974]                         has_future <- base::requireNamespace("future", 
[09:31:00.974]                           quietly = TRUE)
[09:31:00.974]                         if (has_future) {
[09:31:00.974]                           ns <- base::getNamespace("future")
[09:31:00.974]                           version <- ns[[".package"]][["version"]]
[09:31:00.974]                           if (is.null(version)) 
[09:31:00.974]                             version <- utils::packageVersion("future")
[09:31:00.974]                         }
[09:31:00.974]                         else {
[09:31:00.974]                           version <- NULL
[09:31:00.974]                         }
[09:31:00.974]                         if (!has_future || version < "1.8.0") {
[09:31:00.974]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:00.974]                             "", base::R.version$version.string), 
[09:31:00.974]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:00.974]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:00.974]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:00.974]                               "release", "version")], collapse = " "), 
[09:31:00.974]                             hostname = base::Sys.info()[["nodename"]])
[09:31:00.974]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:00.974]                             info)
[09:31:00.974]                           info <- base::paste(info, collapse = "; ")
[09:31:00.974]                           if (!has_future) {
[09:31:00.974]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:00.974]                               info)
[09:31:00.974]                           }
[09:31:00.974]                           else {
[09:31:00.974]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:00.974]                               info, version)
[09:31:00.974]                           }
[09:31:00.974]                           base::stop(msg)
[09:31:00.974]                         }
[09:31:00.974]                       })
[09:31:00.974]                     }
[09:31:00.974]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:00.974]                     base::options(mc.cores = 1L)
[09:31:00.974]                   }
[09:31:00.974]                   ...future.strategy.old <- future::plan("list")
[09:31:00.974]                   options(future.plan = NULL)
[09:31:00.974]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.974]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:00.974]                 }
[09:31:00.974]                 ...future.workdir <- getwd()
[09:31:00.974]             }
[09:31:00.974]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:00.974]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:00.974]         }
[09:31:00.974]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:00.974]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:00.974]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:00.974]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:00.974]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:00.974]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:00.974]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:00.974]             base::names(...future.oldOptions))
[09:31:00.974]     }
[09:31:00.974]     if (FALSE) {
[09:31:00.974]     }
[09:31:00.974]     else {
[09:31:00.974]         if (TRUE) {
[09:31:00.974]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:00.974]                 open = "w")
[09:31:00.974]         }
[09:31:00.974]         else {
[09:31:00.974]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:00.974]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:00.974]         }
[09:31:00.974]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:00.974]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:00.974]             base::sink(type = "output", split = FALSE)
[09:31:00.974]             base::close(...future.stdout)
[09:31:00.974]         }, add = TRUE)
[09:31:00.974]     }
[09:31:00.974]     ...future.frame <- base::sys.nframe()
[09:31:00.974]     ...future.conditions <- base::list()
[09:31:00.974]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:00.974]     if (FALSE) {
[09:31:00.974]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:00.974]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:00.974]     }
[09:31:00.974]     ...future.result <- base::tryCatch({
[09:31:00.974]         base::withCallingHandlers({
[09:31:00.974]             ...future.value <- base::withVisible(base::local({
[09:31:00.974]                 ...future.makeSendCondition <- base::local({
[09:31:00.974]                   sendCondition <- NULL
[09:31:00.974]                   function(frame = 1L) {
[09:31:00.974]                     if (is.function(sendCondition)) 
[09:31:00.974]                       return(sendCondition)
[09:31:00.974]                     ns <- getNamespace("parallel")
[09:31:00.974]                     if (exists("sendData", mode = "function", 
[09:31:00.974]                       envir = ns)) {
[09:31:00.974]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:00.974]                         envir = ns)
[09:31:00.974]                       envir <- sys.frame(frame)
[09:31:00.974]                       master <- NULL
[09:31:00.974]                       while (!identical(envir, .GlobalEnv) && 
[09:31:00.974]                         !identical(envir, emptyenv())) {
[09:31:00.974]                         if (exists("master", mode = "list", envir = envir, 
[09:31:00.974]                           inherits = FALSE)) {
[09:31:00.974]                           master <- get("master", mode = "list", 
[09:31:00.974]                             envir = envir, inherits = FALSE)
[09:31:00.974]                           if (inherits(master, c("SOCKnode", 
[09:31:00.974]                             "SOCK0node"))) {
[09:31:00.974]                             sendCondition <<- function(cond) {
[09:31:00.974]                               data <- list(type = "VALUE", value = cond, 
[09:31:00.974]                                 success = TRUE)
[09:31:00.974]                               parallel_sendData(master, data)
[09:31:00.974]                             }
[09:31:00.974]                             return(sendCondition)
[09:31:00.974]                           }
[09:31:00.974]                         }
[09:31:00.974]                         frame <- frame + 1L
[09:31:00.974]                         envir <- sys.frame(frame)
[09:31:00.974]                       }
[09:31:00.974]                     }
[09:31:00.974]                     sendCondition <<- function(cond) NULL
[09:31:00.974]                   }
[09:31:00.974]                 })
[09:31:00.974]                 withCallingHandlers({
[09:31:00.974]                   42
[09:31:00.974]                 }, immediateCondition = function(cond) {
[09:31:00.974]                   sendCondition <- ...future.makeSendCondition()
[09:31:00.974]                   sendCondition(cond)
[09:31:00.974]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.974]                   {
[09:31:00.974]                     inherits <- base::inherits
[09:31:00.974]                     invokeRestart <- base::invokeRestart
[09:31:00.974]                     is.null <- base::is.null
[09:31:00.974]                     muffled <- FALSE
[09:31:00.974]                     if (inherits(cond, "message")) {
[09:31:00.974]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:00.974]                       if (muffled) 
[09:31:00.974]                         invokeRestart("muffleMessage")
[09:31:00.974]                     }
[09:31:00.974]                     else if (inherits(cond, "warning")) {
[09:31:00.974]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:00.974]                       if (muffled) 
[09:31:00.974]                         invokeRestart("muffleWarning")
[09:31:00.974]                     }
[09:31:00.974]                     else if (inherits(cond, "condition")) {
[09:31:00.974]                       if (!is.null(pattern)) {
[09:31:00.974]                         computeRestarts <- base::computeRestarts
[09:31:00.974]                         grepl <- base::grepl
[09:31:00.974]                         restarts <- computeRestarts(cond)
[09:31:00.974]                         for (restart in restarts) {
[09:31:00.974]                           name <- restart$name
[09:31:00.974]                           if (is.null(name)) 
[09:31:00.974]                             next
[09:31:00.974]                           if (!grepl(pattern, name)) 
[09:31:00.974]                             next
[09:31:00.974]                           invokeRestart(restart)
[09:31:00.974]                           muffled <- TRUE
[09:31:00.974]                           break
[09:31:00.974]                         }
[09:31:00.974]                       }
[09:31:00.974]                     }
[09:31:00.974]                     invisible(muffled)
[09:31:00.974]                   }
[09:31:00.974]                   muffleCondition(cond)
[09:31:00.974]                 })
[09:31:00.974]             }))
[09:31:00.974]             future::FutureResult(value = ...future.value$value, 
[09:31:00.974]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.974]                   ...future.rng), globalenv = if (FALSE) 
[09:31:00.974]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:00.974]                     ...future.globalenv.names))
[09:31:00.974]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:00.974]         }, condition = base::local({
[09:31:00.974]             c <- base::c
[09:31:00.974]             inherits <- base::inherits
[09:31:00.974]             invokeRestart <- base::invokeRestart
[09:31:00.974]             length <- base::length
[09:31:00.974]             list <- base::list
[09:31:00.974]             seq.int <- base::seq.int
[09:31:00.974]             signalCondition <- base::signalCondition
[09:31:00.974]             sys.calls <- base::sys.calls
[09:31:00.974]             `[[` <- base::`[[`
[09:31:00.974]             `+` <- base::`+`
[09:31:00.974]             `<<-` <- base::`<<-`
[09:31:00.974]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:00.974]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:00.974]                   3L)]
[09:31:00.974]             }
[09:31:00.974]             function(cond) {
[09:31:00.974]                 is_error <- inherits(cond, "error")
[09:31:00.974]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:00.974]                   NULL)
[09:31:00.974]                 if (is_error) {
[09:31:00.974]                   sessionInformation <- function() {
[09:31:00.974]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:00.974]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:00.974]                       search = base::search(), system = base::Sys.info())
[09:31:00.974]                   }
[09:31:00.974]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.974]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:00.974]                     cond$call), session = sessionInformation(), 
[09:31:00.974]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:00.974]                   signalCondition(cond)
[09:31:00.974]                 }
[09:31:00.974]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:00.974]                 "immediateCondition"))) {
[09:31:00.974]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:00.974]                   ...future.conditions[[length(...future.conditions) + 
[09:31:00.974]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:00.974]                   if (TRUE && !signal) {
[09:31:00.974]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.974]                     {
[09:31:00.974]                       inherits <- base::inherits
[09:31:00.974]                       invokeRestart <- base::invokeRestart
[09:31:00.974]                       is.null <- base::is.null
[09:31:00.974]                       muffled <- FALSE
[09:31:00.974]                       if (inherits(cond, "message")) {
[09:31:00.974]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.974]                         if (muffled) 
[09:31:00.974]                           invokeRestart("muffleMessage")
[09:31:00.974]                       }
[09:31:00.974]                       else if (inherits(cond, "warning")) {
[09:31:00.974]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.974]                         if (muffled) 
[09:31:00.974]                           invokeRestart("muffleWarning")
[09:31:00.974]                       }
[09:31:00.974]                       else if (inherits(cond, "condition")) {
[09:31:00.974]                         if (!is.null(pattern)) {
[09:31:00.974]                           computeRestarts <- base::computeRestarts
[09:31:00.974]                           grepl <- base::grepl
[09:31:00.974]                           restarts <- computeRestarts(cond)
[09:31:00.974]                           for (restart in restarts) {
[09:31:00.974]                             name <- restart$name
[09:31:00.974]                             if (is.null(name)) 
[09:31:00.974]                               next
[09:31:00.974]                             if (!grepl(pattern, name)) 
[09:31:00.974]                               next
[09:31:00.974]                             invokeRestart(restart)
[09:31:00.974]                             muffled <- TRUE
[09:31:00.974]                             break
[09:31:00.974]                           }
[09:31:00.974]                         }
[09:31:00.974]                       }
[09:31:00.974]                       invisible(muffled)
[09:31:00.974]                     }
[09:31:00.974]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.974]                   }
[09:31:00.974]                 }
[09:31:00.974]                 else {
[09:31:00.974]                   if (TRUE) {
[09:31:00.974]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:00.974]                     {
[09:31:00.974]                       inherits <- base::inherits
[09:31:00.974]                       invokeRestart <- base::invokeRestart
[09:31:00.974]                       is.null <- base::is.null
[09:31:00.974]                       muffled <- FALSE
[09:31:00.974]                       if (inherits(cond, "message")) {
[09:31:00.974]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:00.974]                         if (muffled) 
[09:31:00.974]                           invokeRestart("muffleMessage")
[09:31:00.974]                       }
[09:31:00.974]                       else if (inherits(cond, "warning")) {
[09:31:00.974]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:00.974]                         if (muffled) 
[09:31:00.974]                           invokeRestart("muffleWarning")
[09:31:00.974]                       }
[09:31:00.974]                       else if (inherits(cond, "condition")) {
[09:31:00.974]                         if (!is.null(pattern)) {
[09:31:00.974]                           computeRestarts <- base::computeRestarts
[09:31:00.974]                           grepl <- base::grepl
[09:31:00.974]                           restarts <- computeRestarts(cond)
[09:31:00.974]                           for (restart in restarts) {
[09:31:00.974]                             name <- restart$name
[09:31:00.974]                             if (is.null(name)) 
[09:31:00.974]                               next
[09:31:00.974]                             if (!grepl(pattern, name)) 
[09:31:00.974]                               next
[09:31:00.974]                             invokeRestart(restart)
[09:31:00.974]                             muffled <- TRUE
[09:31:00.974]                             break
[09:31:00.974]                           }
[09:31:00.974]                         }
[09:31:00.974]                       }
[09:31:00.974]                       invisible(muffled)
[09:31:00.974]                     }
[09:31:00.974]                     muffleCondition(cond, pattern = "^muffle")
[09:31:00.974]                   }
[09:31:00.974]                 }
[09:31:00.974]             }
[09:31:00.974]         }))
[09:31:00.974]     }, error = function(ex) {
[09:31:00.974]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:00.974]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:00.974]                 ...future.rng), started = ...future.startTime, 
[09:31:00.974]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:00.974]             version = "1.8"), class = "FutureResult")
[09:31:00.974]     }, finally = {
[09:31:00.974]         if (!identical(...future.workdir, getwd())) 
[09:31:00.974]             setwd(...future.workdir)
[09:31:00.974]         {
[09:31:00.974]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:00.974]                 ...future.oldOptions$nwarnings <- NULL
[09:31:00.974]             }
[09:31:00.974]             base::options(...future.oldOptions)
[09:31:00.974]             if (.Platform$OS.type == "windows") {
[09:31:00.974]                 old_names <- names(...future.oldEnvVars)
[09:31:00.974]                 envs <- base::Sys.getenv()
[09:31:00.974]                 names <- names(envs)
[09:31:00.974]                 common <- intersect(names, old_names)
[09:31:00.974]                 added <- setdiff(names, old_names)
[09:31:00.974]                 removed <- setdiff(old_names, names)
[09:31:00.974]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:00.974]                   envs[common]]
[09:31:00.974]                 NAMES <- toupper(changed)
[09:31:00.974]                 args <- list()
[09:31:00.974]                 for (kk in seq_along(NAMES)) {
[09:31:00.974]                   name <- changed[[kk]]
[09:31:00.974]                   NAME <- NAMES[[kk]]
[09:31:00.974]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.974]                     next
[09:31:00.974]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.974]                 }
[09:31:00.974]                 NAMES <- toupper(added)
[09:31:00.974]                 for (kk in seq_along(NAMES)) {
[09:31:00.974]                   name <- added[[kk]]
[09:31:00.974]                   NAME <- NAMES[[kk]]
[09:31:00.974]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.974]                     next
[09:31:00.974]                   args[[name]] <- ""
[09:31:00.974]                 }
[09:31:00.974]                 NAMES <- toupper(removed)
[09:31:00.974]                 for (kk in seq_along(NAMES)) {
[09:31:00.974]                   name <- removed[[kk]]
[09:31:00.974]                   NAME <- NAMES[[kk]]
[09:31:00.974]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:00.974]                     next
[09:31:00.974]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:00.974]                 }
[09:31:00.974]                 if (length(args) > 0) 
[09:31:00.974]                   base::do.call(base::Sys.setenv, args = args)
[09:31:00.974]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:00.974]             }
[09:31:00.974]             else {
[09:31:00.974]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:00.974]             }
[09:31:00.974]             {
[09:31:00.974]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:00.974]                   0L) {
[09:31:00.974]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:00.974]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:00.974]                   base::options(opts)
[09:31:00.974]                 }
[09:31:00.974]                 {
[09:31:00.974]                   {
[09:31:00.974]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:00.974]                     NULL
[09:31:00.974]                   }
[09:31:00.974]                   options(future.plan = NULL)
[09:31:00.974]                   if (is.na(NA_character_)) 
[09:31:00.974]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:00.974]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:00.974]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:00.974]                     .init = FALSE)
[09:31:00.974]                 }
[09:31:00.974]             }
[09:31:00.974]         }
[09:31:00.974]     })
[09:31:00.974]     if (TRUE) {
[09:31:00.974]         base::sink(type = "output", split = FALSE)
[09:31:00.974]         if (TRUE) {
[09:31:00.974]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:00.974]         }
[09:31:00.974]         else {
[09:31:00.974]             ...future.result["stdout"] <- base::list(NULL)
[09:31:00.974]         }
[09:31:00.974]         base::close(...future.stdout)
[09:31:00.974]         ...future.stdout <- NULL
[09:31:00.974]     }
[09:31:00.974]     ...future.result$conditions <- ...future.conditions
[09:31:00.974]     ...future.result$finished <- base::Sys.time()
[09:31:00.974]     ...future.result
[09:31:00.974] }
[09:31:00.977] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:00.978] receiveMessageFromWorker() for ClusterFuture ...
[09:31:00.978] - Validating connection of MultisessionFuture
[09:31:00.979] - received message: FutureResult
[09:31:00.979] - Received FutureResult
[09:31:00.979] - Erased future from FutureRegistry
[09:31:00.979] result() for ClusterFuture ...
[09:31:00.979] - result already collected: FutureResult
[09:31:00.979] result() for ClusterFuture ... done
[09:31:00.979] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:00.980] result() for ClusterFuture ...
[09:31:00.980] - result already collected: FutureResult
[09:31:00.980] result() for ClusterFuture ... done
[09:31:00.980] result() for ClusterFuture ...
[09:31:00.980] - result already collected: FutureResult
[09:31:00.980] result() for ClusterFuture ... done
[09:31:00.980] getGlobalsAndPackages() ...
[09:31:00.980] Searching for globals...
[09:31:00.981] 
[09:31:00.981] Searching for globals ... DONE
[09:31:00.981] - globals: [0] <none>
[09:31:00.981] getGlobalsAndPackages() ... DONE
[09:31:00.981] run() for ‘Future’ ...
[09:31:00.982] - state: ‘created’
[09:31:00.982] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:00.996] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:00.996] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:00.996]   - Field: ‘node’
[09:31:00.996]   - Field: ‘label’
[09:31:00.996]   - Field: ‘local’
[09:31:00.996]   - Field: ‘owner’
[09:31:00.996]   - Field: ‘envir’
[09:31:00.997]   - Field: ‘workers’
[09:31:00.997]   - Field: ‘packages’
[09:31:00.997]   - Field: ‘gc’
[09:31:00.997]   - Field: ‘conditions’
[09:31:00.997]   - Field: ‘persistent’
[09:31:00.997]   - Field: ‘expr’
[09:31:00.997]   - Field: ‘uuid’
[09:31:00.997]   - Field: ‘seed’
[09:31:00.997]   - Field: ‘version’
[09:31:00.998]   - Field: ‘result’
[09:31:00.998]   - Field: ‘asynchronous’
[09:31:00.998]   - Field: ‘calls’
[09:31:00.998]   - Field: ‘globals’
[09:31:00.998]   - Field: ‘stdout’
[09:31:00.998]   - Field: ‘earlySignal’
[09:31:00.998]   - Field: ‘lazy’
[09:31:00.998]   - Field: ‘state’
[09:31:00.998] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:00.999] - Launch lazy future ...
[09:31:00.999] Packages needed by the future expression (n = 0): <none>
[09:31:00.999] Packages needed by future strategies (n = 0): <none>
[09:31:01.000] {
[09:31:01.000]     {
[09:31:01.000]         {
[09:31:01.000]             ...future.startTime <- base::Sys.time()
[09:31:01.000]             {
[09:31:01.000]                 {
[09:31:01.000]                   {
[09:31:01.000]                     {
[09:31:01.000]                       base::local({
[09:31:01.000]                         has_future <- base::requireNamespace("future", 
[09:31:01.000]                           quietly = TRUE)
[09:31:01.000]                         if (has_future) {
[09:31:01.000]                           ns <- base::getNamespace("future")
[09:31:01.000]                           version <- ns[[".package"]][["version"]]
[09:31:01.000]                           if (is.null(version)) 
[09:31:01.000]                             version <- utils::packageVersion("future")
[09:31:01.000]                         }
[09:31:01.000]                         else {
[09:31:01.000]                           version <- NULL
[09:31:01.000]                         }
[09:31:01.000]                         if (!has_future || version < "1.8.0") {
[09:31:01.000]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:01.000]                             "", base::R.version$version.string), 
[09:31:01.000]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:01.000]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:01.000]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:01.000]                               "release", "version")], collapse = " "), 
[09:31:01.000]                             hostname = base::Sys.info()[["nodename"]])
[09:31:01.000]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:01.000]                             info)
[09:31:01.000]                           info <- base::paste(info, collapse = "; ")
[09:31:01.000]                           if (!has_future) {
[09:31:01.000]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:01.000]                               info)
[09:31:01.000]                           }
[09:31:01.000]                           else {
[09:31:01.000]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:01.000]                               info, version)
[09:31:01.000]                           }
[09:31:01.000]                           base::stop(msg)
[09:31:01.000]                         }
[09:31:01.000]                       })
[09:31:01.000]                     }
[09:31:01.000]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:01.000]                     base::options(mc.cores = 1L)
[09:31:01.000]                   }
[09:31:01.000]                   ...future.strategy.old <- future::plan("list")
[09:31:01.000]                   options(future.plan = NULL)
[09:31:01.000]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:01.000]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:01.000]                 }
[09:31:01.000]                 ...future.workdir <- getwd()
[09:31:01.000]             }
[09:31:01.000]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:01.000]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:01.000]         }
[09:31:01.000]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:01.000]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:01.000]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:01.000]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:01.000]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:01.000]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:01.000]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:01.000]             base::names(...future.oldOptions))
[09:31:01.000]     }
[09:31:01.000]     if (FALSE) {
[09:31:01.000]     }
[09:31:01.000]     else {
[09:31:01.000]         if (TRUE) {
[09:31:01.000]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:01.000]                 open = "w")
[09:31:01.000]         }
[09:31:01.000]         else {
[09:31:01.000]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:01.000]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:01.000]         }
[09:31:01.000]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:01.000]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:01.000]             base::sink(type = "output", split = FALSE)
[09:31:01.000]             base::close(...future.stdout)
[09:31:01.000]         }, add = TRUE)
[09:31:01.000]     }
[09:31:01.000]     ...future.frame <- base::sys.nframe()
[09:31:01.000]     ...future.conditions <- base::list()
[09:31:01.000]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:01.000]     if (FALSE) {
[09:31:01.000]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:01.000]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:01.000]     }
[09:31:01.000]     ...future.result <- base::tryCatch({
[09:31:01.000]         base::withCallingHandlers({
[09:31:01.000]             ...future.value <- base::withVisible(base::local({
[09:31:01.000]                 ...future.makeSendCondition <- base::local({
[09:31:01.000]                   sendCondition <- NULL
[09:31:01.000]                   function(frame = 1L) {
[09:31:01.000]                     if (is.function(sendCondition)) 
[09:31:01.000]                       return(sendCondition)
[09:31:01.000]                     ns <- getNamespace("parallel")
[09:31:01.000]                     if (exists("sendData", mode = "function", 
[09:31:01.000]                       envir = ns)) {
[09:31:01.000]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:01.000]                         envir = ns)
[09:31:01.000]                       envir <- sys.frame(frame)
[09:31:01.000]                       master <- NULL
[09:31:01.000]                       while (!identical(envir, .GlobalEnv) && 
[09:31:01.000]                         !identical(envir, emptyenv())) {
[09:31:01.000]                         if (exists("master", mode = "list", envir = envir, 
[09:31:01.000]                           inherits = FALSE)) {
[09:31:01.000]                           master <- get("master", mode = "list", 
[09:31:01.000]                             envir = envir, inherits = FALSE)
[09:31:01.000]                           if (inherits(master, c("SOCKnode", 
[09:31:01.000]                             "SOCK0node"))) {
[09:31:01.000]                             sendCondition <<- function(cond) {
[09:31:01.000]                               data <- list(type = "VALUE", value = cond, 
[09:31:01.000]                                 success = TRUE)
[09:31:01.000]                               parallel_sendData(master, data)
[09:31:01.000]                             }
[09:31:01.000]                             return(sendCondition)
[09:31:01.000]                           }
[09:31:01.000]                         }
[09:31:01.000]                         frame <- frame + 1L
[09:31:01.000]                         envir <- sys.frame(frame)
[09:31:01.000]                       }
[09:31:01.000]                     }
[09:31:01.000]                     sendCondition <<- function(cond) NULL
[09:31:01.000]                   }
[09:31:01.000]                 })
[09:31:01.000]                 withCallingHandlers({
[09:31:01.000]                   42
[09:31:01.000]                 }, immediateCondition = function(cond) {
[09:31:01.000]                   sendCondition <- ...future.makeSendCondition()
[09:31:01.000]                   sendCondition(cond)
[09:31:01.000]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.000]                   {
[09:31:01.000]                     inherits <- base::inherits
[09:31:01.000]                     invokeRestart <- base::invokeRestart
[09:31:01.000]                     is.null <- base::is.null
[09:31:01.000]                     muffled <- FALSE
[09:31:01.000]                     if (inherits(cond, "message")) {
[09:31:01.000]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:01.000]                       if (muffled) 
[09:31:01.000]                         invokeRestart("muffleMessage")
[09:31:01.000]                     }
[09:31:01.000]                     else if (inherits(cond, "warning")) {
[09:31:01.000]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:01.000]                       if (muffled) 
[09:31:01.000]                         invokeRestart("muffleWarning")
[09:31:01.000]                     }
[09:31:01.000]                     else if (inherits(cond, "condition")) {
[09:31:01.000]                       if (!is.null(pattern)) {
[09:31:01.000]                         computeRestarts <- base::computeRestarts
[09:31:01.000]                         grepl <- base::grepl
[09:31:01.000]                         restarts <- computeRestarts(cond)
[09:31:01.000]                         for (restart in restarts) {
[09:31:01.000]                           name <- restart$name
[09:31:01.000]                           if (is.null(name)) 
[09:31:01.000]                             next
[09:31:01.000]                           if (!grepl(pattern, name)) 
[09:31:01.000]                             next
[09:31:01.000]                           invokeRestart(restart)
[09:31:01.000]                           muffled <- TRUE
[09:31:01.000]                           break
[09:31:01.000]                         }
[09:31:01.000]                       }
[09:31:01.000]                     }
[09:31:01.000]                     invisible(muffled)
[09:31:01.000]                   }
[09:31:01.000]                   muffleCondition(cond)
[09:31:01.000]                 })
[09:31:01.000]             }))
[09:31:01.000]             future::FutureResult(value = ...future.value$value, 
[09:31:01.000]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:01.000]                   ...future.rng), globalenv = if (FALSE) 
[09:31:01.000]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:01.000]                     ...future.globalenv.names))
[09:31:01.000]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:01.000]         }, condition = base::local({
[09:31:01.000]             c <- base::c
[09:31:01.000]             inherits <- base::inherits
[09:31:01.000]             invokeRestart <- base::invokeRestart
[09:31:01.000]             length <- base::length
[09:31:01.000]             list <- base::list
[09:31:01.000]             seq.int <- base::seq.int
[09:31:01.000]             signalCondition <- base::signalCondition
[09:31:01.000]             sys.calls <- base::sys.calls
[09:31:01.000]             `[[` <- base::`[[`
[09:31:01.000]             `+` <- base::`+`
[09:31:01.000]             `<<-` <- base::`<<-`
[09:31:01.000]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:01.000]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:01.000]                   3L)]
[09:31:01.000]             }
[09:31:01.000]             function(cond) {
[09:31:01.000]                 is_error <- inherits(cond, "error")
[09:31:01.000]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:01.000]                   NULL)
[09:31:01.000]                 if (is_error) {
[09:31:01.000]                   sessionInformation <- function() {
[09:31:01.000]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:01.000]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:01.000]                       search = base::search(), system = base::Sys.info())
[09:31:01.000]                   }
[09:31:01.000]                   ...future.conditions[[length(...future.conditions) + 
[09:31:01.000]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:01.000]                     cond$call), session = sessionInformation(), 
[09:31:01.000]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:01.000]                   signalCondition(cond)
[09:31:01.000]                 }
[09:31:01.000]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:01.000]                 "immediateCondition"))) {
[09:31:01.000]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:01.000]                   ...future.conditions[[length(...future.conditions) + 
[09:31:01.000]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:01.000]                   if (TRUE && !signal) {
[09:31:01.000]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.000]                     {
[09:31:01.000]                       inherits <- base::inherits
[09:31:01.000]                       invokeRestart <- base::invokeRestart
[09:31:01.000]                       is.null <- base::is.null
[09:31:01.000]                       muffled <- FALSE
[09:31:01.000]                       if (inherits(cond, "message")) {
[09:31:01.000]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:01.000]                         if (muffled) 
[09:31:01.000]                           invokeRestart("muffleMessage")
[09:31:01.000]                       }
[09:31:01.000]                       else if (inherits(cond, "warning")) {
[09:31:01.000]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:01.000]                         if (muffled) 
[09:31:01.000]                           invokeRestart("muffleWarning")
[09:31:01.000]                       }
[09:31:01.000]                       else if (inherits(cond, "condition")) {
[09:31:01.000]                         if (!is.null(pattern)) {
[09:31:01.000]                           computeRestarts <- base::computeRestarts
[09:31:01.000]                           grepl <- base::grepl
[09:31:01.000]                           restarts <- computeRestarts(cond)
[09:31:01.000]                           for (restart in restarts) {
[09:31:01.000]                             name <- restart$name
[09:31:01.000]                             if (is.null(name)) 
[09:31:01.000]                               next
[09:31:01.000]                             if (!grepl(pattern, name)) 
[09:31:01.000]                               next
[09:31:01.000]                             invokeRestart(restart)
[09:31:01.000]                             muffled <- TRUE
[09:31:01.000]                             break
[09:31:01.000]                           }
[09:31:01.000]                         }
[09:31:01.000]                       }
[09:31:01.000]                       invisible(muffled)
[09:31:01.000]                     }
[09:31:01.000]                     muffleCondition(cond, pattern = "^muffle")
[09:31:01.000]                   }
[09:31:01.000]                 }
[09:31:01.000]                 else {
[09:31:01.000]                   if (TRUE) {
[09:31:01.000]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.000]                     {
[09:31:01.000]                       inherits <- base::inherits
[09:31:01.000]                       invokeRestart <- base::invokeRestart
[09:31:01.000]                       is.null <- base::is.null
[09:31:01.000]                       muffled <- FALSE
[09:31:01.000]                       if (inherits(cond, "message")) {
[09:31:01.000]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:01.000]                         if (muffled) 
[09:31:01.000]                           invokeRestart("muffleMessage")
[09:31:01.000]                       }
[09:31:01.000]                       else if (inherits(cond, "warning")) {
[09:31:01.000]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:01.000]                         if (muffled) 
[09:31:01.000]                           invokeRestart("muffleWarning")
[09:31:01.000]                       }
[09:31:01.000]                       else if (inherits(cond, "condition")) {
[09:31:01.000]                         if (!is.null(pattern)) {
[09:31:01.000]                           computeRestarts <- base::computeRestarts
[09:31:01.000]                           grepl <- base::grepl
[09:31:01.000]                           restarts <- computeRestarts(cond)
[09:31:01.000]                           for (restart in restarts) {
[09:31:01.000]                             name <- restart$name
[09:31:01.000]                             if (is.null(name)) 
[09:31:01.000]                               next
[09:31:01.000]                             if (!grepl(pattern, name)) 
[09:31:01.000]                               next
[09:31:01.000]                             invokeRestart(restart)
[09:31:01.000]                             muffled <- TRUE
[09:31:01.000]                             break
[09:31:01.000]                           }
[09:31:01.000]                         }
[09:31:01.000]                       }
[09:31:01.000]                       invisible(muffled)
[09:31:01.000]                     }
[09:31:01.000]                     muffleCondition(cond, pattern = "^muffle")
[09:31:01.000]                   }
[09:31:01.000]                 }
[09:31:01.000]             }
[09:31:01.000]         }))
[09:31:01.000]     }, error = function(ex) {
[09:31:01.000]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:01.000]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:01.000]                 ...future.rng), started = ...future.startTime, 
[09:31:01.000]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:01.000]             version = "1.8"), class = "FutureResult")
[09:31:01.000]     }, finally = {
[09:31:01.000]         if (!identical(...future.workdir, getwd())) 
[09:31:01.000]             setwd(...future.workdir)
[09:31:01.000]         {
[09:31:01.000]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:01.000]                 ...future.oldOptions$nwarnings <- NULL
[09:31:01.000]             }
[09:31:01.000]             base::options(...future.oldOptions)
[09:31:01.000]             if (.Platform$OS.type == "windows") {
[09:31:01.000]                 old_names <- names(...future.oldEnvVars)
[09:31:01.000]                 envs <- base::Sys.getenv()
[09:31:01.000]                 names <- names(envs)
[09:31:01.000]                 common <- intersect(names, old_names)
[09:31:01.000]                 added <- setdiff(names, old_names)
[09:31:01.000]                 removed <- setdiff(old_names, names)
[09:31:01.000]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:01.000]                   envs[common]]
[09:31:01.000]                 NAMES <- toupper(changed)
[09:31:01.000]                 args <- list()
[09:31:01.000]                 for (kk in seq_along(NAMES)) {
[09:31:01.000]                   name <- changed[[kk]]
[09:31:01.000]                   NAME <- NAMES[[kk]]
[09:31:01.000]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.000]                     next
[09:31:01.000]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:01.000]                 }
[09:31:01.000]                 NAMES <- toupper(added)
[09:31:01.000]                 for (kk in seq_along(NAMES)) {
[09:31:01.000]                   name <- added[[kk]]
[09:31:01.000]                   NAME <- NAMES[[kk]]
[09:31:01.000]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.000]                     next
[09:31:01.000]                   args[[name]] <- ""
[09:31:01.000]                 }
[09:31:01.000]                 NAMES <- toupper(removed)
[09:31:01.000]                 for (kk in seq_along(NAMES)) {
[09:31:01.000]                   name <- removed[[kk]]
[09:31:01.000]                   NAME <- NAMES[[kk]]
[09:31:01.000]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.000]                     next
[09:31:01.000]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:01.000]                 }
[09:31:01.000]                 if (length(args) > 0) 
[09:31:01.000]                   base::do.call(base::Sys.setenv, args = args)
[09:31:01.000]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:01.000]             }
[09:31:01.000]             else {
[09:31:01.000]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:01.000]             }
[09:31:01.000]             {
[09:31:01.000]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:01.000]                   0L) {
[09:31:01.000]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:01.000]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:01.000]                   base::options(opts)
[09:31:01.000]                 }
[09:31:01.000]                 {
[09:31:01.000]                   {
[09:31:01.000]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:01.000]                     NULL
[09:31:01.000]                   }
[09:31:01.000]                   options(future.plan = NULL)
[09:31:01.000]                   if (is.na(NA_character_)) 
[09:31:01.000]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:01.000]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:01.000]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:01.000]                     .init = FALSE)
[09:31:01.000]                 }
[09:31:01.000]             }
[09:31:01.000]         }
[09:31:01.000]     })
[09:31:01.000]     if (TRUE) {
[09:31:01.000]         base::sink(type = "output", split = FALSE)
[09:31:01.000]         if (TRUE) {
[09:31:01.000]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:01.000]         }
[09:31:01.000]         else {
[09:31:01.000]             ...future.result["stdout"] <- base::list(NULL)
[09:31:01.000]         }
[09:31:01.000]         base::close(...future.stdout)
[09:31:01.000]         ...future.stdout <- NULL
[09:31:01.000]     }
[09:31:01.000]     ...future.result$conditions <- ...future.conditions
[09:31:01.000]     ...future.result$finished <- base::Sys.time()
[09:31:01.000]     ...future.result
[09:31:01.000] }
[09:31:01.003] MultisessionFuture started
[09:31:01.003] - Launch lazy future ... done
[09:31:01.003] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:01.007] receiveMessageFromWorker() for ClusterFuture ...
[09:31:01.007] - Validating connection of MultisessionFuture
[09:31:01.008] - received message: FutureResult
[09:31:01.008] - Received FutureResult
[09:31:01.008] - Erased future from FutureRegistry
[09:31:01.008] result() for ClusterFuture ...
[09:31:01.008] - result already collected: FutureResult
[09:31:01.008] result() for ClusterFuture ... done
[09:31:01.008] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:01.009] result() for ClusterFuture ...
[09:31:01.009] - result already collected: FutureResult
[09:31:01.009] result() for ClusterFuture ... done
[09:31:01.009] result() for ClusterFuture ...
[09:31:01.009] - result already collected: FutureResult
[09:31:01.009] result() for ClusterFuture ... done
[09:31:01.009] getGlobalsAndPackages() ...
[09:31:01.010] Searching for globals...
[09:31:01.010] - globals found: [1] ‘{’
[09:31:01.010] Searching for globals ... DONE
[09:31:01.011] Resolving globals: FALSE
[09:31:01.011] 
[09:31:01.011] 
[09:31:01.011] getGlobalsAndPackages() ... DONE
[09:31:01.011] run() for ‘Future’ ...
[09:31:01.012] - state: ‘created’
[09:31:01.012] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:01.026] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:01.026] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:01.026]   - Field: ‘node’
[09:31:01.026]   - Field: ‘label’
[09:31:01.026]   - Field: ‘local’
[09:31:01.026]   - Field: ‘owner’
[09:31:01.026]   - Field: ‘envir’
[09:31:01.027]   - Field: ‘workers’
[09:31:01.027]   - Field: ‘packages’
[09:31:01.027]   - Field: ‘gc’
[09:31:01.027]   - Field: ‘conditions’
[09:31:01.027]   - Field: ‘persistent’
[09:31:01.027]   - Field: ‘expr’
[09:31:01.027]   - Field: ‘uuid’
[09:31:01.027]   - Field: ‘seed’
[09:31:01.027]   - Field: ‘version’
[09:31:01.027]   - Field: ‘result’
[09:31:01.028]   - Field: ‘asynchronous’
[09:31:01.028]   - Field: ‘calls’
[09:31:01.028]   - Field: ‘globals’
[09:31:01.028]   - Field: ‘stdout’
[09:31:01.028]   - Field: ‘earlySignal’
[09:31:01.028]   - Field: ‘lazy’
[09:31:01.028]   - Field: ‘state’
[09:31:01.028] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:01.029] - Launch lazy future ...
[09:31:01.029] Packages needed by the future expression (n = 0): <none>
[09:31:01.029] Packages needed by future strategies (n = 0): <none>
[09:31:01.030] {
[09:31:01.030]     {
[09:31:01.030]         {
[09:31:01.030]             ...future.startTime <- base::Sys.time()
[09:31:01.030]             {
[09:31:01.030]                 {
[09:31:01.030]                   {
[09:31:01.030]                     {
[09:31:01.030]                       base::local({
[09:31:01.030]                         has_future <- base::requireNamespace("future", 
[09:31:01.030]                           quietly = TRUE)
[09:31:01.030]                         if (has_future) {
[09:31:01.030]                           ns <- base::getNamespace("future")
[09:31:01.030]                           version <- ns[[".package"]][["version"]]
[09:31:01.030]                           if (is.null(version)) 
[09:31:01.030]                             version <- utils::packageVersion("future")
[09:31:01.030]                         }
[09:31:01.030]                         else {
[09:31:01.030]                           version <- NULL
[09:31:01.030]                         }
[09:31:01.030]                         if (!has_future || version < "1.8.0") {
[09:31:01.030]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:01.030]                             "", base::R.version$version.string), 
[09:31:01.030]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:01.030]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:01.030]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:01.030]                               "release", "version")], collapse = " "), 
[09:31:01.030]                             hostname = base::Sys.info()[["nodename"]])
[09:31:01.030]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:01.030]                             info)
[09:31:01.030]                           info <- base::paste(info, collapse = "; ")
[09:31:01.030]                           if (!has_future) {
[09:31:01.030]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:01.030]                               info)
[09:31:01.030]                           }
[09:31:01.030]                           else {
[09:31:01.030]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:01.030]                               info, version)
[09:31:01.030]                           }
[09:31:01.030]                           base::stop(msg)
[09:31:01.030]                         }
[09:31:01.030]                       })
[09:31:01.030]                     }
[09:31:01.030]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:01.030]                     base::options(mc.cores = 1L)
[09:31:01.030]                   }
[09:31:01.030]                   ...future.strategy.old <- future::plan("list")
[09:31:01.030]                   options(future.plan = NULL)
[09:31:01.030]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:01.030]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:01.030]                 }
[09:31:01.030]                 ...future.workdir <- getwd()
[09:31:01.030]             }
[09:31:01.030]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:01.030]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:01.030]         }
[09:31:01.030]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:01.030]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:01.030]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:01.030]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:01.030]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:01.030]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:01.030]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:01.030]             base::names(...future.oldOptions))
[09:31:01.030]     }
[09:31:01.030]     if (FALSE) {
[09:31:01.030]     }
[09:31:01.030]     else {
[09:31:01.030]         if (TRUE) {
[09:31:01.030]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:01.030]                 open = "w")
[09:31:01.030]         }
[09:31:01.030]         else {
[09:31:01.030]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:01.030]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:01.030]         }
[09:31:01.030]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:01.030]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:01.030]             base::sink(type = "output", split = FALSE)
[09:31:01.030]             base::close(...future.stdout)
[09:31:01.030]         }, add = TRUE)
[09:31:01.030]     }
[09:31:01.030]     ...future.frame <- base::sys.nframe()
[09:31:01.030]     ...future.conditions <- base::list()
[09:31:01.030]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:01.030]     if (FALSE) {
[09:31:01.030]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:01.030]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:01.030]     }
[09:31:01.030]     ...future.result <- base::tryCatch({
[09:31:01.030]         base::withCallingHandlers({
[09:31:01.030]             ...future.value <- base::withVisible(base::local({
[09:31:01.030]                 ...future.makeSendCondition <- base::local({
[09:31:01.030]                   sendCondition <- NULL
[09:31:01.030]                   function(frame = 1L) {
[09:31:01.030]                     if (is.function(sendCondition)) 
[09:31:01.030]                       return(sendCondition)
[09:31:01.030]                     ns <- getNamespace("parallel")
[09:31:01.030]                     if (exists("sendData", mode = "function", 
[09:31:01.030]                       envir = ns)) {
[09:31:01.030]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:01.030]                         envir = ns)
[09:31:01.030]                       envir <- sys.frame(frame)
[09:31:01.030]                       master <- NULL
[09:31:01.030]                       while (!identical(envir, .GlobalEnv) && 
[09:31:01.030]                         !identical(envir, emptyenv())) {
[09:31:01.030]                         if (exists("master", mode = "list", envir = envir, 
[09:31:01.030]                           inherits = FALSE)) {
[09:31:01.030]                           master <- get("master", mode = "list", 
[09:31:01.030]                             envir = envir, inherits = FALSE)
[09:31:01.030]                           if (inherits(master, c("SOCKnode", 
[09:31:01.030]                             "SOCK0node"))) {
[09:31:01.030]                             sendCondition <<- function(cond) {
[09:31:01.030]                               data <- list(type = "VALUE", value = cond, 
[09:31:01.030]                                 success = TRUE)
[09:31:01.030]                               parallel_sendData(master, data)
[09:31:01.030]                             }
[09:31:01.030]                             return(sendCondition)
[09:31:01.030]                           }
[09:31:01.030]                         }
[09:31:01.030]                         frame <- frame + 1L
[09:31:01.030]                         envir <- sys.frame(frame)
[09:31:01.030]                       }
[09:31:01.030]                     }
[09:31:01.030]                     sendCondition <<- function(cond) NULL
[09:31:01.030]                   }
[09:31:01.030]                 })
[09:31:01.030]                 withCallingHandlers({
[09:31:01.030]                   {
[09:31:01.030]                     42
[09:31:01.030]                   }
[09:31:01.030]                 }, immediateCondition = function(cond) {
[09:31:01.030]                   sendCondition <- ...future.makeSendCondition()
[09:31:01.030]                   sendCondition(cond)
[09:31:01.030]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.030]                   {
[09:31:01.030]                     inherits <- base::inherits
[09:31:01.030]                     invokeRestart <- base::invokeRestart
[09:31:01.030]                     is.null <- base::is.null
[09:31:01.030]                     muffled <- FALSE
[09:31:01.030]                     if (inherits(cond, "message")) {
[09:31:01.030]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:01.030]                       if (muffled) 
[09:31:01.030]                         invokeRestart("muffleMessage")
[09:31:01.030]                     }
[09:31:01.030]                     else if (inherits(cond, "warning")) {
[09:31:01.030]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:01.030]                       if (muffled) 
[09:31:01.030]                         invokeRestart("muffleWarning")
[09:31:01.030]                     }
[09:31:01.030]                     else if (inherits(cond, "condition")) {
[09:31:01.030]                       if (!is.null(pattern)) {
[09:31:01.030]                         computeRestarts <- base::computeRestarts
[09:31:01.030]                         grepl <- base::grepl
[09:31:01.030]                         restarts <- computeRestarts(cond)
[09:31:01.030]                         for (restart in restarts) {
[09:31:01.030]                           name <- restart$name
[09:31:01.030]                           if (is.null(name)) 
[09:31:01.030]                             next
[09:31:01.030]                           if (!grepl(pattern, name)) 
[09:31:01.030]                             next
[09:31:01.030]                           invokeRestart(restart)
[09:31:01.030]                           muffled <- TRUE
[09:31:01.030]                           break
[09:31:01.030]                         }
[09:31:01.030]                       }
[09:31:01.030]                     }
[09:31:01.030]                     invisible(muffled)
[09:31:01.030]                   }
[09:31:01.030]                   muffleCondition(cond)
[09:31:01.030]                 })
[09:31:01.030]             }))
[09:31:01.030]             future::FutureResult(value = ...future.value$value, 
[09:31:01.030]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:01.030]                   ...future.rng), globalenv = if (FALSE) 
[09:31:01.030]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:01.030]                     ...future.globalenv.names))
[09:31:01.030]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:01.030]         }, condition = base::local({
[09:31:01.030]             c <- base::c
[09:31:01.030]             inherits <- base::inherits
[09:31:01.030]             invokeRestart <- base::invokeRestart
[09:31:01.030]             length <- base::length
[09:31:01.030]             list <- base::list
[09:31:01.030]             seq.int <- base::seq.int
[09:31:01.030]             signalCondition <- base::signalCondition
[09:31:01.030]             sys.calls <- base::sys.calls
[09:31:01.030]             `[[` <- base::`[[`
[09:31:01.030]             `+` <- base::`+`
[09:31:01.030]             `<<-` <- base::`<<-`
[09:31:01.030]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:01.030]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:01.030]                   3L)]
[09:31:01.030]             }
[09:31:01.030]             function(cond) {
[09:31:01.030]                 is_error <- inherits(cond, "error")
[09:31:01.030]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:01.030]                   NULL)
[09:31:01.030]                 if (is_error) {
[09:31:01.030]                   sessionInformation <- function() {
[09:31:01.030]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:01.030]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:01.030]                       search = base::search(), system = base::Sys.info())
[09:31:01.030]                   }
[09:31:01.030]                   ...future.conditions[[length(...future.conditions) + 
[09:31:01.030]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:01.030]                     cond$call), session = sessionInformation(), 
[09:31:01.030]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:01.030]                   signalCondition(cond)
[09:31:01.030]                 }
[09:31:01.030]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:01.030]                 "immediateCondition"))) {
[09:31:01.030]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:01.030]                   ...future.conditions[[length(...future.conditions) + 
[09:31:01.030]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:01.030]                   if (TRUE && !signal) {
[09:31:01.030]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.030]                     {
[09:31:01.030]                       inherits <- base::inherits
[09:31:01.030]                       invokeRestart <- base::invokeRestart
[09:31:01.030]                       is.null <- base::is.null
[09:31:01.030]                       muffled <- FALSE
[09:31:01.030]                       if (inherits(cond, "message")) {
[09:31:01.030]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:01.030]                         if (muffled) 
[09:31:01.030]                           invokeRestart("muffleMessage")
[09:31:01.030]                       }
[09:31:01.030]                       else if (inherits(cond, "warning")) {
[09:31:01.030]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:01.030]                         if (muffled) 
[09:31:01.030]                           invokeRestart("muffleWarning")
[09:31:01.030]                       }
[09:31:01.030]                       else if (inherits(cond, "condition")) {
[09:31:01.030]                         if (!is.null(pattern)) {
[09:31:01.030]                           computeRestarts <- base::computeRestarts
[09:31:01.030]                           grepl <- base::grepl
[09:31:01.030]                           restarts <- computeRestarts(cond)
[09:31:01.030]                           for (restart in restarts) {
[09:31:01.030]                             name <- restart$name
[09:31:01.030]                             if (is.null(name)) 
[09:31:01.030]                               next
[09:31:01.030]                             if (!grepl(pattern, name)) 
[09:31:01.030]                               next
[09:31:01.030]                             invokeRestart(restart)
[09:31:01.030]                             muffled <- TRUE
[09:31:01.030]                             break
[09:31:01.030]                           }
[09:31:01.030]                         }
[09:31:01.030]                       }
[09:31:01.030]                       invisible(muffled)
[09:31:01.030]                     }
[09:31:01.030]                     muffleCondition(cond, pattern = "^muffle")
[09:31:01.030]                   }
[09:31:01.030]                 }
[09:31:01.030]                 else {
[09:31:01.030]                   if (TRUE) {
[09:31:01.030]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.030]                     {
[09:31:01.030]                       inherits <- base::inherits
[09:31:01.030]                       invokeRestart <- base::invokeRestart
[09:31:01.030]                       is.null <- base::is.null
[09:31:01.030]                       muffled <- FALSE
[09:31:01.030]                       if (inherits(cond, "message")) {
[09:31:01.030]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:01.030]                         if (muffled) 
[09:31:01.030]                           invokeRestart("muffleMessage")
[09:31:01.030]                       }
[09:31:01.030]                       else if (inherits(cond, "warning")) {
[09:31:01.030]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:01.030]                         if (muffled) 
[09:31:01.030]                           invokeRestart("muffleWarning")
[09:31:01.030]                       }
[09:31:01.030]                       else if (inherits(cond, "condition")) {
[09:31:01.030]                         if (!is.null(pattern)) {
[09:31:01.030]                           computeRestarts <- base::computeRestarts
[09:31:01.030]                           grepl <- base::grepl
[09:31:01.030]                           restarts <- computeRestarts(cond)
[09:31:01.030]                           for (restart in restarts) {
[09:31:01.030]                             name <- restart$name
[09:31:01.030]                             if (is.null(name)) 
[09:31:01.030]                               next
[09:31:01.030]                             if (!grepl(pattern, name)) 
[09:31:01.030]                               next
[09:31:01.030]                             invokeRestart(restart)
[09:31:01.030]                             muffled <- TRUE
[09:31:01.030]                             break
[09:31:01.030]                           }
[09:31:01.030]                         }
[09:31:01.030]                       }
[09:31:01.030]                       invisible(muffled)
[09:31:01.030]                     }
[09:31:01.030]                     muffleCondition(cond, pattern = "^muffle")
[09:31:01.030]                   }
[09:31:01.030]                 }
[09:31:01.030]             }
[09:31:01.030]         }))
[09:31:01.030]     }, error = function(ex) {
[09:31:01.030]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:01.030]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:01.030]                 ...future.rng), started = ...future.startTime, 
[09:31:01.030]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:01.030]             version = "1.8"), class = "FutureResult")
[09:31:01.030]     }, finally = {
[09:31:01.030]         if (!identical(...future.workdir, getwd())) 
[09:31:01.030]             setwd(...future.workdir)
[09:31:01.030]         {
[09:31:01.030]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:01.030]                 ...future.oldOptions$nwarnings <- NULL
[09:31:01.030]             }
[09:31:01.030]             base::options(...future.oldOptions)
[09:31:01.030]             if (.Platform$OS.type == "windows") {
[09:31:01.030]                 old_names <- names(...future.oldEnvVars)
[09:31:01.030]                 envs <- base::Sys.getenv()
[09:31:01.030]                 names <- names(envs)
[09:31:01.030]                 common <- intersect(names, old_names)
[09:31:01.030]                 added <- setdiff(names, old_names)
[09:31:01.030]                 removed <- setdiff(old_names, names)
[09:31:01.030]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:01.030]                   envs[common]]
[09:31:01.030]                 NAMES <- toupper(changed)
[09:31:01.030]                 args <- list()
[09:31:01.030]                 for (kk in seq_along(NAMES)) {
[09:31:01.030]                   name <- changed[[kk]]
[09:31:01.030]                   NAME <- NAMES[[kk]]
[09:31:01.030]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.030]                     next
[09:31:01.030]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:01.030]                 }
[09:31:01.030]                 NAMES <- toupper(added)
[09:31:01.030]                 for (kk in seq_along(NAMES)) {
[09:31:01.030]                   name <- added[[kk]]
[09:31:01.030]                   NAME <- NAMES[[kk]]
[09:31:01.030]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.030]                     next
[09:31:01.030]                   args[[name]] <- ""
[09:31:01.030]                 }
[09:31:01.030]                 NAMES <- toupper(removed)
[09:31:01.030]                 for (kk in seq_along(NAMES)) {
[09:31:01.030]                   name <- removed[[kk]]
[09:31:01.030]                   NAME <- NAMES[[kk]]
[09:31:01.030]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.030]                     next
[09:31:01.030]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:01.030]                 }
[09:31:01.030]                 if (length(args) > 0) 
[09:31:01.030]                   base::do.call(base::Sys.setenv, args = args)
[09:31:01.030]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:01.030]             }
[09:31:01.030]             else {
[09:31:01.030]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:01.030]             }
[09:31:01.030]             {
[09:31:01.030]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:01.030]                   0L) {
[09:31:01.030]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:01.030]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:01.030]                   base::options(opts)
[09:31:01.030]                 }
[09:31:01.030]                 {
[09:31:01.030]                   {
[09:31:01.030]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:01.030]                     NULL
[09:31:01.030]                   }
[09:31:01.030]                   options(future.plan = NULL)
[09:31:01.030]                   if (is.na(NA_character_)) 
[09:31:01.030]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:01.030]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:01.030]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:01.030]                     .init = FALSE)
[09:31:01.030]                 }
[09:31:01.030]             }
[09:31:01.030]         }
[09:31:01.030]     })
[09:31:01.030]     if (TRUE) {
[09:31:01.030]         base::sink(type = "output", split = FALSE)
[09:31:01.030]         if (TRUE) {
[09:31:01.030]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:01.030]         }
[09:31:01.030]         else {
[09:31:01.030]             ...future.result["stdout"] <- base::list(NULL)
[09:31:01.030]         }
[09:31:01.030]         base::close(...future.stdout)
[09:31:01.030]         ...future.stdout <- NULL
[09:31:01.030]     }
[09:31:01.030]     ...future.result$conditions <- ...future.conditions
[09:31:01.030]     ...future.result$finished <- base::Sys.time()
[09:31:01.030]     ...future.result
[09:31:01.030] }
[09:31:01.033] MultisessionFuture started
[09:31:01.033] - Launch lazy future ... done
[09:31:01.033] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:01.035] receiveMessageFromWorker() for ClusterFuture ...
[09:31:01.035] - Validating connection of MultisessionFuture
[09:31:01.035] - received message: FutureResult
[09:31:01.035] - Received FutureResult
[09:31:01.035] - Erased future from FutureRegistry
[09:31:01.036] result() for ClusterFuture ...
[09:31:01.036] - result already collected: FutureResult
[09:31:01.036] result() for ClusterFuture ... done
[09:31:01.036] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:01.036] result() for ClusterFuture ...
[09:31:01.036] - result already collected: FutureResult
[09:31:01.036] result() for ClusterFuture ... done
[09:31:01.037] result() for ClusterFuture ...
[09:31:01.037] - result already collected: FutureResult
[09:31:01.037] result() for ClusterFuture ... done
[09:31:01.040] getGlobalsAndPackages() ...
[09:31:01.040] 
[09:31:01.040] - globals: [0] <none>
[09:31:01.041] getGlobalsAndPackages() ... DONE
[09:31:01.051] Packages needed by the future expression (n = 0): <none>
[09:31:01.052] Packages needed by future strategies (n = 0): <none>
[09:31:01.052] {
[09:31:01.052]     {
[09:31:01.052]         {
[09:31:01.052]             ...future.startTime <- base::Sys.time()
[09:31:01.052]             {
[09:31:01.052]                 {
[09:31:01.052]                   {
[09:31:01.052]                     {
[09:31:01.052]                       base::local({
[09:31:01.052]                         has_future <- base::requireNamespace("future", 
[09:31:01.052]                           quietly = TRUE)
[09:31:01.052]                         if (has_future) {
[09:31:01.052]                           ns <- base::getNamespace("future")
[09:31:01.052]                           version <- ns[[".package"]][["version"]]
[09:31:01.052]                           if (is.null(version)) 
[09:31:01.052]                             version <- utils::packageVersion("future")
[09:31:01.052]                         }
[09:31:01.052]                         else {
[09:31:01.052]                           version <- NULL
[09:31:01.052]                         }
[09:31:01.052]                         if (!has_future || version < "1.8.0") {
[09:31:01.052]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:01.052]                             "", base::R.version$version.string), 
[09:31:01.052]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:01.052]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:01.052]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:01.052]                               "release", "version")], collapse = " "), 
[09:31:01.052]                             hostname = base::Sys.info()[["nodename"]])
[09:31:01.052]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:01.052]                             info)
[09:31:01.052]                           info <- base::paste(info, collapse = "; ")
[09:31:01.052]                           if (!has_future) {
[09:31:01.052]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:01.052]                               info)
[09:31:01.052]                           }
[09:31:01.052]                           else {
[09:31:01.052]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:01.052]                               info, version)
[09:31:01.052]                           }
[09:31:01.052]                           base::stop(msg)
[09:31:01.052]                         }
[09:31:01.052]                       })
[09:31:01.052]                     }
[09:31:01.052]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:01.052]                     base::options(mc.cores = 1L)
[09:31:01.052]                   }
[09:31:01.052]                   ...future.strategy.old <- future::plan("list")
[09:31:01.052]                   options(future.plan = NULL)
[09:31:01.052]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:01.052]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:01.052]                 }
[09:31:01.052]                 ...future.workdir <- getwd()
[09:31:01.052]             }
[09:31:01.052]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:01.052]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:01.052]         }
[09:31:01.052]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:01.052]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:01.052]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:01.052]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:01.052]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:01.052]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:01.052]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:01.052]             base::names(...future.oldOptions))
[09:31:01.052]     }
[09:31:01.052]     if (FALSE) {
[09:31:01.052]     }
[09:31:01.052]     else {
[09:31:01.052]         if (TRUE) {
[09:31:01.052]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:01.052]                 open = "w")
[09:31:01.052]         }
[09:31:01.052]         else {
[09:31:01.052]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:01.052]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:01.052]         }
[09:31:01.052]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:01.052]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:01.052]             base::sink(type = "output", split = FALSE)
[09:31:01.052]             base::close(...future.stdout)
[09:31:01.052]         }, add = TRUE)
[09:31:01.052]     }
[09:31:01.052]     ...future.frame <- base::sys.nframe()
[09:31:01.052]     ...future.conditions <- base::list()
[09:31:01.052]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:01.052]     if (FALSE) {
[09:31:01.052]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:01.052]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:01.052]     }
[09:31:01.052]     ...future.result <- base::tryCatch({
[09:31:01.052]         base::withCallingHandlers({
[09:31:01.052]             ...future.value <- base::withVisible(base::local({
[09:31:01.052]                 ...future.makeSendCondition <- base::local({
[09:31:01.052]                   sendCondition <- NULL
[09:31:01.052]                   function(frame = 1L) {
[09:31:01.052]                     if (is.function(sendCondition)) 
[09:31:01.052]                       return(sendCondition)
[09:31:01.052]                     ns <- getNamespace("parallel")
[09:31:01.052]                     if (exists("sendData", mode = "function", 
[09:31:01.052]                       envir = ns)) {
[09:31:01.052]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:01.052]                         envir = ns)
[09:31:01.052]                       envir <- sys.frame(frame)
[09:31:01.052]                       master <- NULL
[09:31:01.052]                       while (!identical(envir, .GlobalEnv) && 
[09:31:01.052]                         !identical(envir, emptyenv())) {
[09:31:01.052]                         if (exists("master", mode = "list", envir = envir, 
[09:31:01.052]                           inherits = FALSE)) {
[09:31:01.052]                           master <- get("master", mode = "list", 
[09:31:01.052]                             envir = envir, inherits = FALSE)
[09:31:01.052]                           if (inherits(master, c("SOCKnode", 
[09:31:01.052]                             "SOCK0node"))) {
[09:31:01.052]                             sendCondition <<- function(cond) {
[09:31:01.052]                               data <- list(type = "VALUE", value = cond, 
[09:31:01.052]                                 success = TRUE)
[09:31:01.052]                               parallel_sendData(master, data)
[09:31:01.052]                             }
[09:31:01.052]                             return(sendCondition)
[09:31:01.052]                           }
[09:31:01.052]                         }
[09:31:01.052]                         frame <- frame + 1L
[09:31:01.052]                         envir <- sys.frame(frame)
[09:31:01.052]                       }
[09:31:01.052]                     }
[09:31:01.052]                     sendCondition <<- function(cond) NULL
[09:31:01.052]                   }
[09:31:01.052]                 })
[09:31:01.052]                 withCallingHandlers({
[09:31:01.052]                   42
[09:31:01.052]                 }, immediateCondition = function(cond) {
[09:31:01.052]                   sendCondition <- ...future.makeSendCondition()
[09:31:01.052]                   sendCondition(cond)
[09:31:01.052]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.052]                   {
[09:31:01.052]                     inherits <- base::inherits
[09:31:01.052]                     invokeRestart <- base::invokeRestart
[09:31:01.052]                     is.null <- base::is.null
[09:31:01.052]                     muffled <- FALSE
[09:31:01.052]                     if (inherits(cond, "message")) {
[09:31:01.052]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:01.052]                       if (muffled) 
[09:31:01.052]                         invokeRestart("muffleMessage")
[09:31:01.052]                     }
[09:31:01.052]                     else if (inherits(cond, "warning")) {
[09:31:01.052]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:01.052]                       if (muffled) 
[09:31:01.052]                         invokeRestart("muffleWarning")
[09:31:01.052]                     }
[09:31:01.052]                     else if (inherits(cond, "condition")) {
[09:31:01.052]                       if (!is.null(pattern)) {
[09:31:01.052]                         computeRestarts <- base::computeRestarts
[09:31:01.052]                         grepl <- base::grepl
[09:31:01.052]                         restarts <- computeRestarts(cond)
[09:31:01.052]                         for (restart in restarts) {
[09:31:01.052]                           name <- restart$name
[09:31:01.052]                           if (is.null(name)) 
[09:31:01.052]                             next
[09:31:01.052]                           if (!grepl(pattern, name)) 
[09:31:01.052]                             next
[09:31:01.052]                           invokeRestart(restart)
[09:31:01.052]                           muffled <- TRUE
[09:31:01.052]                           break
[09:31:01.052]                         }
[09:31:01.052]                       }
[09:31:01.052]                     }
[09:31:01.052]                     invisible(muffled)
[09:31:01.052]                   }
[09:31:01.052]                   muffleCondition(cond)
[09:31:01.052]                 })
[09:31:01.052]             }))
[09:31:01.052]             future::FutureResult(value = ...future.value$value, 
[09:31:01.052]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:01.052]                   ...future.rng), globalenv = if (FALSE) 
[09:31:01.052]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:01.052]                     ...future.globalenv.names))
[09:31:01.052]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:01.052]         }, condition = base::local({
[09:31:01.052]             c <- base::c
[09:31:01.052]             inherits <- base::inherits
[09:31:01.052]             invokeRestart <- base::invokeRestart
[09:31:01.052]             length <- base::length
[09:31:01.052]             list <- base::list
[09:31:01.052]             seq.int <- base::seq.int
[09:31:01.052]             signalCondition <- base::signalCondition
[09:31:01.052]             sys.calls <- base::sys.calls
[09:31:01.052]             `[[` <- base::`[[`
[09:31:01.052]             `+` <- base::`+`
[09:31:01.052]             `<<-` <- base::`<<-`
[09:31:01.052]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:01.052]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:01.052]                   3L)]
[09:31:01.052]             }
[09:31:01.052]             function(cond) {
[09:31:01.052]                 is_error <- inherits(cond, "error")
[09:31:01.052]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:01.052]                   NULL)
[09:31:01.052]                 if (is_error) {
[09:31:01.052]                   sessionInformation <- function() {
[09:31:01.052]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:01.052]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:01.052]                       search = base::search(), system = base::Sys.info())
[09:31:01.052]                   }
[09:31:01.052]                   ...future.conditions[[length(...future.conditions) + 
[09:31:01.052]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:01.052]                     cond$call), session = sessionInformation(), 
[09:31:01.052]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:01.052]                   signalCondition(cond)
[09:31:01.052]                 }
[09:31:01.052]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:01.052]                 "immediateCondition"))) {
[09:31:01.052]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:01.052]                   ...future.conditions[[length(...future.conditions) + 
[09:31:01.052]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:01.052]                   if (TRUE && !signal) {
[09:31:01.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.052]                     {
[09:31:01.052]                       inherits <- base::inherits
[09:31:01.052]                       invokeRestart <- base::invokeRestart
[09:31:01.052]                       is.null <- base::is.null
[09:31:01.052]                       muffled <- FALSE
[09:31:01.052]                       if (inherits(cond, "message")) {
[09:31:01.052]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:01.052]                         if (muffled) 
[09:31:01.052]                           invokeRestart("muffleMessage")
[09:31:01.052]                       }
[09:31:01.052]                       else if (inherits(cond, "warning")) {
[09:31:01.052]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:01.052]                         if (muffled) 
[09:31:01.052]                           invokeRestart("muffleWarning")
[09:31:01.052]                       }
[09:31:01.052]                       else if (inherits(cond, "condition")) {
[09:31:01.052]                         if (!is.null(pattern)) {
[09:31:01.052]                           computeRestarts <- base::computeRestarts
[09:31:01.052]                           grepl <- base::grepl
[09:31:01.052]                           restarts <- computeRestarts(cond)
[09:31:01.052]                           for (restart in restarts) {
[09:31:01.052]                             name <- restart$name
[09:31:01.052]                             if (is.null(name)) 
[09:31:01.052]                               next
[09:31:01.052]                             if (!grepl(pattern, name)) 
[09:31:01.052]                               next
[09:31:01.052]                             invokeRestart(restart)
[09:31:01.052]                             muffled <- TRUE
[09:31:01.052]                             break
[09:31:01.052]                           }
[09:31:01.052]                         }
[09:31:01.052]                       }
[09:31:01.052]                       invisible(muffled)
[09:31:01.052]                     }
[09:31:01.052]                     muffleCondition(cond, pattern = "^muffle")
[09:31:01.052]                   }
[09:31:01.052]                 }
[09:31:01.052]                 else {
[09:31:01.052]                   if (TRUE) {
[09:31:01.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.052]                     {
[09:31:01.052]                       inherits <- base::inherits
[09:31:01.052]                       invokeRestart <- base::invokeRestart
[09:31:01.052]                       is.null <- base::is.null
[09:31:01.052]                       muffled <- FALSE
[09:31:01.052]                       if (inherits(cond, "message")) {
[09:31:01.052]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:01.052]                         if (muffled) 
[09:31:01.052]                           invokeRestart("muffleMessage")
[09:31:01.052]                       }
[09:31:01.052]                       else if (inherits(cond, "warning")) {
[09:31:01.052]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:01.052]                         if (muffled) 
[09:31:01.052]                           invokeRestart("muffleWarning")
[09:31:01.052]                       }
[09:31:01.052]                       else if (inherits(cond, "condition")) {
[09:31:01.052]                         if (!is.null(pattern)) {
[09:31:01.052]                           computeRestarts <- base::computeRestarts
[09:31:01.052]                           grepl <- base::grepl
[09:31:01.052]                           restarts <- computeRestarts(cond)
[09:31:01.052]                           for (restart in restarts) {
[09:31:01.052]                             name <- restart$name
[09:31:01.052]                             if (is.null(name)) 
[09:31:01.052]                               next
[09:31:01.052]                             if (!grepl(pattern, name)) 
[09:31:01.052]                               next
[09:31:01.052]                             invokeRestart(restart)
[09:31:01.052]                             muffled <- TRUE
[09:31:01.052]                             break
[09:31:01.052]                           }
[09:31:01.052]                         }
[09:31:01.052]                       }
[09:31:01.052]                       invisible(muffled)
[09:31:01.052]                     }
[09:31:01.052]                     muffleCondition(cond, pattern = "^muffle")
[09:31:01.052]                   }
[09:31:01.052]                 }
[09:31:01.052]             }
[09:31:01.052]         }))
[09:31:01.052]     }, error = function(ex) {
[09:31:01.052]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:01.052]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:01.052]                 ...future.rng), started = ...future.startTime, 
[09:31:01.052]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:01.052]             version = "1.8"), class = "FutureResult")
[09:31:01.052]     }, finally = {
[09:31:01.052]         if (!identical(...future.workdir, getwd())) 
[09:31:01.052]             setwd(...future.workdir)
[09:31:01.052]         {
[09:31:01.052]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:01.052]                 ...future.oldOptions$nwarnings <- NULL
[09:31:01.052]             }
[09:31:01.052]             base::options(...future.oldOptions)
[09:31:01.052]             if (.Platform$OS.type == "windows") {
[09:31:01.052]                 old_names <- names(...future.oldEnvVars)
[09:31:01.052]                 envs <- base::Sys.getenv()
[09:31:01.052]                 names <- names(envs)
[09:31:01.052]                 common <- intersect(names, old_names)
[09:31:01.052]                 added <- setdiff(names, old_names)
[09:31:01.052]                 removed <- setdiff(old_names, names)
[09:31:01.052]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:01.052]                   envs[common]]
[09:31:01.052]                 NAMES <- toupper(changed)
[09:31:01.052]                 args <- list()
[09:31:01.052]                 for (kk in seq_along(NAMES)) {
[09:31:01.052]                   name <- changed[[kk]]
[09:31:01.052]                   NAME <- NAMES[[kk]]
[09:31:01.052]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.052]                     next
[09:31:01.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:01.052]                 }
[09:31:01.052]                 NAMES <- toupper(added)
[09:31:01.052]                 for (kk in seq_along(NAMES)) {
[09:31:01.052]                   name <- added[[kk]]
[09:31:01.052]                   NAME <- NAMES[[kk]]
[09:31:01.052]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.052]                     next
[09:31:01.052]                   args[[name]] <- ""
[09:31:01.052]                 }
[09:31:01.052]                 NAMES <- toupper(removed)
[09:31:01.052]                 for (kk in seq_along(NAMES)) {
[09:31:01.052]                   name <- removed[[kk]]
[09:31:01.052]                   NAME <- NAMES[[kk]]
[09:31:01.052]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.052]                     next
[09:31:01.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:01.052]                 }
[09:31:01.052]                 if (length(args) > 0) 
[09:31:01.052]                   base::do.call(base::Sys.setenv, args = args)
[09:31:01.052]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:01.052]             }
[09:31:01.052]             else {
[09:31:01.052]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:01.052]             }
[09:31:01.052]             {
[09:31:01.052]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:01.052]                   0L) {
[09:31:01.052]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:01.052]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:01.052]                   base::options(opts)
[09:31:01.052]                 }
[09:31:01.052]                 {
[09:31:01.052]                   {
[09:31:01.052]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:01.052]                     NULL
[09:31:01.052]                   }
[09:31:01.052]                   options(future.plan = NULL)
[09:31:01.052]                   if (is.na(NA_character_)) 
[09:31:01.052]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:01.052]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:01.052]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:01.052]                     .init = FALSE)
[09:31:01.052]                 }
[09:31:01.052]             }
[09:31:01.052]         }
[09:31:01.052]     })
[09:31:01.052]     if (TRUE) {
[09:31:01.052]         base::sink(type = "output", split = FALSE)
[09:31:01.052]         if (TRUE) {
[09:31:01.052]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:01.052]         }
[09:31:01.052]         else {
[09:31:01.052]             ...future.result["stdout"] <- base::list(NULL)
[09:31:01.052]         }
[09:31:01.052]         base::close(...future.stdout)
[09:31:01.052]         ...future.stdout <- NULL
[09:31:01.052]     }
[09:31:01.052]     ...future.result$conditions <- ...future.conditions
[09:31:01.052]     ...future.result$finished <- base::Sys.time()
[09:31:01.052]     ...future.result
[09:31:01.052] }
[09:31:01.058] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:01.059] receiveMessageFromWorker() for ClusterFuture ...
[09:31:01.060] - Validating connection of MultisessionFuture
[09:31:01.060] - received message: FutureResult
[09:31:01.060] - Received FutureResult
[09:31:01.060] - Erased future from FutureRegistry
[09:31:01.060] result() for ClusterFuture ...
[09:31:01.060] - result already collected: FutureResult
[09:31:01.060] result() for ClusterFuture ... done
[09:31:01.060] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:01.061] result() for ClusterFuture ...
[09:31:01.061] - result already collected: FutureResult
[09:31:01.061] result() for ClusterFuture ... done
[09:31:01.061] result() for ClusterFuture ...
[09:31:01.061] - result already collected: FutureResult
[09:31:01.061] result() for ClusterFuture ... done
[09:31:01.061] getGlobalsAndPackages() ...
[09:31:01.061] Searching for globals...
[09:31:01.062] 
[09:31:01.062] Searching for globals ... DONE
[09:31:01.062] - globals: [0] <none>
[09:31:01.062] getGlobalsAndPackages() ... DONE
[09:31:01.062] run() for ‘Future’ ...
[09:31:01.062] - state: ‘created’
[09:31:01.062] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:01.076] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:01.076] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:01.076]   - Field: ‘node’
[09:31:01.077]   - Field: ‘label’
[09:31:01.077]   - Field: ‘local’
[09:31:01.077]   - Field: ‘owner’
[09:31:01.077]   - Field: ‘envir’
[09:31:01.077]   - Field: ‘workers’
[09:31:01.077]   - Field: ‘packages’
[09:31:01.077]   - Field: ‘gc’
[09:31:01.077]   - Field: ‘conditions’
[09:31:01.077]   - Field: ‘persistent’
[09:31:01.077]   - Field: ‘expr’
[09:31:01.077]   - Field: ‘uuid’
[09:31:01.078]   - Field: ‘seed’
[09:31:01.078]   - Field: ‘version’
[09:31:01.078]   - Field: ‘result’
[09:31:01.078]   - Field: ‘asynchronous’
[09:31:01.078]   - Field: ‘calls’
[09:31:01.078]   - Field: ‘globals’
[09:31:01.078]   - Field: ‘stdout’
[09:31:01.078]   - Field: ‘earlySignal’
[09:31:01.078]   - Field: ‘lazy’
[09:31:01.078]   - Field: ‘state’
[09:31:01.078] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:01.079] - Launch lazy future ...
[09:31:01.079] Packages needed by the future expression (n = 0): <none>
[09:31:01.079] Packages needed by future strategies (n = 0): <none>
[09:31:01.079] {
[09:31:01.079]     {
[09:31:01.079]         {
[09:31:01.079]             ...future.startTime <- base::Sys.time()
[09:31:01.079]             {
[09:31:01.079]                 {
[09:31:01.079]                   {
[09:31:01.079]                     {
[09:31:01.079]                       base::local({
[09:31:01.079]                         has_future <- base::requireNamespace("future", 
[09:31:01.079]                           quietly = TRUE)
[09:31:01.079]                         if (has_future) {
[09:31:01.079]                           ns <- base::getNamespace("future")
[09:31:01.079]                           version <- ns[[".package"]][["version"]]
[09:31:01.079]                           if (is.null(version)) 
[09:31:01.079]                             version <- utils::packageVersion("future")
[09:31:01.079]                         }
[09:31:01.079]                         else {
[09:31:01.079]                           version <- NULL
[09:31:01.079]                         }
[09:31:01.079]                         if (!has_future || version < "1.8.0") {
[09:31:01.079]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:01.079]                             "", base::R.version$version.string), 
[09:31:01.079]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:01.079]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:01.079]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:01.079]                               "release", "version")], collapse = " "), 
[09:31:01.079]                             hostname = base::Sys.info()[["nodename"]])
[09:31:01.079]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:01.079]                             info)
[09:31:01.079]                           info <- base::paste(info, collapse = "; ")
[09:31:01.079]                           if (!has_future) {
[09:31:01.079]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:01.079]                               info)
[09:31:01.079]                           }
[09:31:01.079]                           else {
[09:31:01.079]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:01.079]                               info, version)
[09:31:01.079]                           }
[09:31:01.079]                           base::stop(msg)
[09:31:01.079]                         }
[09:31:01.079]                       })
[09:31:01.079]                     }
[09:31:01.079]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:01.079]                     base::options(mc.cores = 1L)
[09:31:01.079]                   }
[09:31:01.079]                   ...future.strategy.old <- future::plan("list")
[09:31:01.079]                   options(future.plan = NULL)
[09:31:01.079]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:01.079]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:01.079]                 }
[09:31:01.079]                 ...future.workdir <- getwd()
[09:31:01.079]             }
[09:31:01.079]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:01.079]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:01.079]         }
[09:31:01.079]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:01.079]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:01.079]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:01.079]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:01.079]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:01.079]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:01.079]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:01.079]             base::names(...future.oldOptions))
[09:31:01.079]     }
[09:31:01.079]     if (FALSE) {
[09:31:01.079]     }
[09:31:01.079]     else {
[09:31:01.079]         if (TRUE) {
[09:31:01.079]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:01.079]                 open = "w")
[09:31:01.079]         }
[09:31:01.079]         else {
[09:31:01.079]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:01.079]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:01.079]         }
[09:31:01.079]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:01.079]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:01.079]             base::sink(type = "output", split = FALSE)
[09:31:01.079]             base::close(...future.stdout)
[09:31:01.079]         }, add = TRUE)
[09:31:01.079]     }
[09:31:01.079]     ...future.frame <- base::sys.nframe()
[09:31:01.079]     ...future.conditions <- base::list()
[09:31:01.079]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:01.079]     if (FALSE) {
[09:31:01.079]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:01.079]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:01.079]     }
[09:31:01.079]     ...future.result <- base::tryCatch({
[09:31:01.079]         base::withCallingHandlers({
[09:31:01.079]             ...future.value <- base::withVisible(base::local({
[09:31:01.079]                 ...future.makeSendCondition <- base::local({
[09:31:01.079]                   sendCondition <- NULL
[09:31:01.079]                   function(frame = 1L) {
[09:31:01.079]                     if (is.function(sendCondition)) 
[09:31:01.079]                       return(sendCondition)
[09:31:01.079]                     ns <- getNamespace("parallel")
[09:31:01.079]                     if (exists("sendData", mode = "function", 
[09:31:01.079]                       envir = ns)) {
[09:31:01.079]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:01.079]                         envir = ns)
[09:31:01.079]                       envir <- sys.frame(frame)
[09:31:01.079]                       master <- NULL
[09:31:01.079]                       while (!identical(envir, .GlobalEnv) && 
[09:31:01.079]                         !identical(envir, emptyenv())) {
[09:31:01.079]                         if (exists("master", mode = "list", envir = envir, 
[09:31:01.079]                           inherits = FALSE)) {
[09:31:01.079]                           master <- get("master", mode = "list", 
[09:31:01.079]                             envir = envir, inherits = FALSE)
[09:31:01.079]                           if (inherits(master, c("SOCKnode", 
[09:31:01.079]                             "SOCK0node"))) {
[09:31:01.079]                             sendCondition <<- function(cond) {
[09:31:01.079]                               data <- list(type = "VALUE", value = cond, 
[09:31:01.079]                                 success = TRUE)
[09:31:01.079]                               parallel_sendData(master, data)
[09:31:01.079]                             }
[09:31:01.079]                             return(sendCondition)
[09:31:01.079]                           }
[09:31:01.079]                         }
[09:31:01.079]                         frame <- frame + 1L
[09:31:01.079]                         envir <- sys.frame(frame)
[09:31:01.079]                       }
[09:31:01.079]                     }
[09:31:01.079]                     sendCondition <<- function(cond) NULL
[09:31:01.079]                   }
[09:31:01.079]                 })
[09:31:01.079]                 withCallingHandlers({
[09:31:01.079]                   42
[09:31:01.079]                 }, immediateCondition = function(cond) {
[09:31:01.079]                   sendCondition <- ...future.makeSendCondition()
[09:31:01.079]                   sendCondition(cond)
[09:31:01.079]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.079]                   {
[09:31:01.079]                     inherits <- base::inherits
[09:31:01.079]                     invokeRestart <- base::invokeRestart
[09:31:01.079]                     is.null <- base::is.null
[09:31:01.079]                     muffled <- FALSE
[09:31:01.079]                     if (inherits(cond, "message")) {
[09:31:01.079]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:01.079]                       if (muffled) 
[09:31:01.079]                         invokeRestart("muffleMessage")
[09:31:01.079]                     }
[09:31:01.079]                     else if (inherits(cond, "warning")) {
[09:31:01.079]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:01.079]                       if (muffled) 
[09:31:01.079]                         invokeRestart("muffleWarning")
[09:31:01.079]                     }
[09:31:01.079]                     else if (inherits(cond, "condition")) {
[09:31:01.079]                       if (!is.null(pattern)) {
[09:31:01.079]                         computeRestarts <- base::computeRestarts
[09:31:01.079]                         grepl <- base::grepl
[09:31:01.079]                         restarts <- computeRestarts(cond)
[09:31:01.079]                         for (restart in restarts) {
[09:31:01.079]                           name <- restart$name
[09:31:01.079]                           if (is.null(name)) 
[09:31:01.079]                             next
[09:31:01.079]                           if (!grepl(pattern, name)) 
[09:31:01.079]                             next
[09:31:01.079]                           invokeRestart(restart)
[09:31:01.079]                           muffled <- TRUE
[09:31:01.079]                           break
[09:31:01.079]                         }
[09:31:01.079]                       }
[09:31:01.079]                     }
[09:31:01.079]                     invisible(muffled)
[09:31:01.079]                   }
[09:31:01.079]                   muffleCondition(cond)
[09:31:01.079]                 })
[09:31:01.079]             }))
[09:31:01.079]             future::FutureResult(value = ...future.value$value, 
[09:31:01.079]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:01.079]                   ...future.rng), globalenv = if (FALSE) 
[09:31:01.079]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:01.079]                     ...future.globalenv.names))
[09:31:01.079]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:01.079]         }, condition = base::local({
[09:31:01.079]             c <- base::c
[09:31:01.079]             inherits <- base::inherits
[09:31:01.079]             invokeRestart <- base::invokeRestart
[09:31:01.079]             length <- base::length
[09:31:01.079]             list <- base::list
[09:31:01.079]             seq.int <- base::seq.int
[09:31:01.079]             signalCondition <- base::signalCondition
[09:31:01.079]             sys.calls <- base::sys.calls
[09:31:01.079]             `[[` <- base::`[[`
[09:31:01.079]             `+` <- base::`+`
[09:31:01.079]             `<<-` <- base::`<<-`
[09:31:01.079]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:01.079]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:01.079]                   3L)]
[09:31:01.079]             }
[09:31:01.079]             function(cond) {
[09:31:01.079]                 is_error <- inherits(cond, "error")
[09:31:01.079]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:01.079]                   NULL)
[09:31:01.079]                 if (is_error) {
[09:31:01.079]                   sessionInformation <- function() {
[09:31:01.079]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:01.079]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:01.079]                       search = base::search(), system = base::Sys.info())
[09:31:01.079]                   }
[09:31:01.079]                   ...future.conditions[[length(...future.conditions) + 
[09:31:01.079]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:01.079]                     cond$call), session = sessionInformation(), 
[09:31:01.079]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:01.079]                   signalCondition(cond)
[09:31:01.079]                 }
[09:31:01.079]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:01.079]                 "immediateCondition"))) {
[09:31:01.079]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:01.079]                   ...future.conditions[[length(...future.conditions) + 
[09:31:01.079]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:01.079]                   if (TRUE && !signal) {
[09:31:01.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.079]                     {
[09:31:01.079]                       inherits <- base::inherits
[09:31:01.079]                       invokeRestart <- base::invokeRestart
[09:31:01.079]                       is.null <- base::is.null
[09:31:01.079]                       muffled <- FALSE
[09:31:01.079]                       if (inherits(cond, "message")) {
[09:31:01.079]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:01.079]                         if (muffled) 
[09:31:01.079]                           invokeRestart("muffleMessage")
[09:31:01.079]                       }
[09:31:01.079]                       else if (inherits(cond, "warning")) {
[09:31:01.079]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:01.079]                         if (muffled) 
[09:31:01.079]                           invokeRestart("muffleWarning")
[09:31:01.079]                       }
[09:31:01.079]                       else if (inherits(cond, "condition")) {
[09:31:01.079]                         if (!is.null(pattern)) {
[09:31:01.079]                           computeRestarts <- base::computeRestarts
[09:31:01.079]                           grepl <- base::grepl
[09:31:01.079]                           restarts <- computeRestarts(cond)
[09:31:01.079]                           for (restart in restarts) {
[09:31:01.079]                             name <- restart$name
[09:31:01.079]                             if (is.null(name)) 
[09:31:01.079]                               next
[09:31:01.079]                             if (!grepl(pattern, name)) 
[09:31:01.079]                               next
[09:31:01.079]                             invokeRestart(restart)
[09:31:01.079]                             muffled <- TRUE
[09:31:01.079]                             break
[09:31:01.079]                           }
[09:31:01.079]                         }
[09:31:01.079]                       }
[09:31:01.079]                       invisible(muffled)
[09:31:01.079]                     }
[09:31:01.079]                     muffleCondition(cond, pattern = "^muffle")
[09:31:01.079]                   }
[09:31:01.079]                 }
[09:31:01.079]                 else {
[09:31:01.079]                   if (TRUE) {
[09:31:01.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.079]                     {
[09:31:01.079]                       inherits <- base::inherits
[09:31:01.079]                       invokeRestart <- base::invokeRestart
[09:31:01.079]                       is.null <- base::is.null
[09:31:01.079]                       muffled <- FALSE
[09:31:01.079]                       if (inherits(cond, "message")) {
[09:31:01.079]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:01.079]                         if (muffled) 
[09:31:01.079]                           invokeRestart("muffleMessage")
[09:31:01.079]                       }
[09:31:01.079]                       else if (inherits(cond, "warning")) {
[09:31:01.079]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:01.079]                         if (muffled) 
[09:31:01.079]                           invokeRestart("muffleWarning")
[09:31:01.079]                       }
[09:31:01.079]                       else if (inherits(cond, "condition")) {
[09:31:01.079]                         if (!is.null(pattern)) {
[09:31:01.079]                           computeRestarts <- base::computeRestarts
[09:31:01.079]                           grepl <- base::grepl
[09:31:01.079]                           restarts <- computeRestarts(cond)
[09:31:01.079]                           for (restart in restarts) {
[09:31:01.079]                             name <- restart$name
[09:31:01.079]                             if (is.null(name)) 
[09:31:01.079]                               next
[09:31:01.079]                             if (!grepl(pattern, name)) 
[09:31:01.079]                               next
[09:31:01.079]                             invokeRestart(restart)
[09:31:01.079]                             muffled <- TRUE
[09:31:01.079]                             break
[09:31:01.079]                           }
[09:31:01.079]                         }
[09:31:01.079]                       }
[09:31:01.079]                       invisible(muffled)
[09:31:01.079]                     }
[09:31:01.079]                     muffleCondition(cond, pattern = "^muffle")
[09:31:01.079]                   }
[09:31:01.079]                 }
[09:31:01.079]             }
[09:31:01.079]         }))
[09:31:01.079]     }, error = function(ex) {
[09:31:01.079]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:01.079]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:01.079]                 ...future.rng), started = ...future.startTime, 
[09:31:01.079]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:01.079]             version = "1.8"), class = "FutureResult")
[09:31:01.079]     }, finally = {
[09:31:01.079]         if (!identical(...future.workdir, getwd())) 
[09:31:01.079]             setwd(...future.workdir)
[09:31:01.079]         {
[09:31:01.079]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:01.079]                 ...future.oldOptions$nwarnings <- NULL
[09:31:01.079]             }
[09:31:01.079]             base::options(...future.oldOptions)
[09:31:01.079]             if (.Platform$OS.type == "windows") {
[09:31:01.079]                 old_names <- names(...future.oldEnvVars)
[09:31:01.079]                 envs <- base::Sys.getenv()
[09:31:01.079]                 names <- names(envs)
[09:31:01.079]                 common <- intersect(names, old_names)
[09:31:01.079]                 added <- setdiff(names, old_names)
[09:31:01.079]                 removed <- setdiff(old_names, names)
[09:31:01.079]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:01.079]                   envs[common]]
[09:31:01.079]                 NAMES <- toupper(changed)
[09:31:01.079]                 args <- list()
[09:31:01.079]                 for (kk in seq_along(NAMES)) {
[09:31:01.079]                   name <- changed[[kk]]
[09:31:01.079]                   NAME <- NAMES[[kk]]
[09:31:01.079]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.079]                     next
[09:31:01.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:01.079]                 }
[09:31:01.079]                 NAMES <- toupper(added)
[09:31:01.079]                 for (kk in seq_along(NAMES)) {
[09:31:01.079]                   name <- added[[kk]]
[09:31:01.079]                   NAME <- NAMES[[kk]]
[09:31:01.079]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.079]                     next
[09:31:01.079]                   args[[name]] <- ""
[09:31:01.079]                 }
[09:31:01.079]                 NAMES <- toupper(removed)
[09:31:01.079]                 for (kk in seq_along(NAMES)) {
[09:31:01.079]                   name <- removed[[kk]]
[09:31:01.079]                   NAME <- NAMES[[kk]]
[09:31:01.079]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.079]                     next
[09:31:01.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:01.079]                 }
[09:31:01.079]                 if (length(args) > 0) 
[09:31:01.079]                   base::do.call(base::Sys.setenv, args = args)
[09:31:01.079]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:01.079]             }
[09:31:01.079]             else {
[09:31:01.079]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:01.079]             }
[09:31:01.079]             {
[09:31:01.079]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:01.079]                   0L) {
[09:31:01.079]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:01.079]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:01.079]                   base::options(opts)
[09:31:01.079]                 }
[09:31:01.079]                 {
[09:31:01.079]                   {
[09:31:01.079]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:01.079]                     NULL
[09:31:01.079]                   }
[09:31:01.079]                   options(future.plan = NULL)
[09:31:01.079]                   if (is.na(NA_character_)) 
[09:31:01.079]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:01.079]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:01.079]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:01.079]                     .init = FALSE)
[09:31:01.079]                 }
[09:31:01.079]             }
[09:31:01.079]         }
[09:31:01.079]     })
[09:31:01.079]     if (TRUE) {
[09:31:01.079]         base::sink(type = "output", split = FALSE)
[09:31:01.079]         if (TRUE) {
[09:31:01.079]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:01.079]         }
[09:31:01.079]         else {
[09:31:01.079]             ...future.result["stdout"] <- base::list(NULL)
[09:31:01.079]         }
[09:31:01.079]         base::close(...future.stdout)
[09:31:01.079]         ...future.stdout <- NULL
[09:31:01.079]     }
[09:31:01.079]     ...future.result$conditions <- ...future.conditions
[09:31:01.079]     ...future.result$finished <- base::Sys.time()
[09:31:01.079]     ...future.result
[09:31:01.079] }
[09:31:01.082] MultisessionFuture started
[09:31:01.082] - Launch lazy future ... done
[09:31:01.082] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:01.084] receiveMessageFromWorker() for ClusterFuture ...
[09:31:01.084] - Validating connection of MultisessionFuture
[09:31:01.084] - received message: FutureResult
[09:31:01.084] - Received FutureResult
[09:31:01.084] - Erased future from FutureRegistry
[09:31:01.085] result() for ClusterFuture ...
[09:31:01.085] - result already collected: FutureResult
[09:31:01.085] result() for ClusterFuture ... done
[09:31:01.085] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:01.085] result() for ClusterFuture ...
[09:31:01.085] - result already collected: FutureResult
[09:31:01.085] result() for ClusterFuture ... done
[09:31:01.085] result() for ClusterFuture ...
[09:31:01.085] - result already collected: FutureResult
[09:31:01.085] result() for ClusterFuture ... done
[09:31:01.086] getGlobalsAndPackages() ...
[09:31:01.086] Searching for globals...
[09:31:01.086] - globals found: [1] ‘{’
[09:31:01.086] Searching for globals ... DONE
[09:31:01.087] Resolving globals: FALSE
[09:31:01.087] 
[09:31:01.087] 
[09:31:01.087] getGlobalsAndPackages() ... DONE
[09:31:01.087] run() for ‘Future’ ...
[09:31:01.087] - state: ‘created’
[09:31:01.087] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:31:01.101] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:01.101] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:31:01.101]   - Field: ‘node’
[09:31:01.101]   - Field: ‘label’
[09:31:01.101]   - Field: ‘local’
[09:31:01.101]   - Field: ‘owner’
[09:31:01.101]   - Field: ‘envir’
[09:31:01.101]   - Field: ‘workers’
[09:31:01.101]   - Field: ‘packages’
[09:31:01.101]   - Field: ‘gc’
[09:31:01.102]   - Field: ‘conditions’
[09:31:01.102]   - Field: ‘persistent’
[09:31:01.102]   - Field: ‘expr’
[09:31:01.102]   - Field: ‘uuid’
[09:31:01.102]   - Field: ‘seed’
[09:31:01.102]   - Field: ‘version’
[09:31:01.102]   - Field: ‘result’
[09:31:01.102]   - Field: ‘asynchronous’
[09:31:01.102]   - Field: ‘calls’
[09:31:01.102]   - Field: ‘globals’
[09:31:01.102]   - Field: ‘stdout’
[09:31:01.102]   - Field: ‘earlySignal’
[09:31:01.103]   - Field: ‘lazy’
[09:31:01.103]   - Field: ‘state’
[09:31:01.103] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:31:01.103] - Launch lazy future ...
[09:31:01.103] Packages needed by the future expression (n = 0): <none>
[09:31:01.103] Packages needed by future strategies (n = 0): <none>
[09:31:01.104] {
[09:31:01.104]     {
[09:31:01.104]         {
[09:31:01.104]             ...future.startTime <- base::Sys.time()
[09:31:01.104]             {
[09:31:01.104]                 {
[09:31:01.104]                   {
[09:31:01.104]                     {
[09:31:01.104]                       base::local({
[09:31:01.104]                         has_future <- base::requireNamespace("future", 
[09:31:01.104]                           quietly = TRUE)
[09:31:01.104]                         if (has_future) {
[09:31:01.104]                           ns <- base::getNamespace("future")
[09:31:01.104]                           version <- ns[[".package"]][["version"]]
[09:31:01.104]                           if (is.null(version)) 
[09:31:01.104]                             version <- utils::packageVersion("future")
[09:31:01.104]                         }
[09:31:01.104]                         else {
[09:31:01.104]                           version <- NULL
[09:31:01.104]                         }
[09:31:01.104]                         if (!has_future || version < "1.8.0") {
[09:31:01.104]                           info <- base::c(r_version = base::gsub("R version ", 
[09:31:01.104]                             "", base::R.version$version.string), 
[09:31:01.104]                             platform = base::sprintf("%s (%s-bit)", 
[09:31:01.104]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:31:01.104]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:31:01.104]                               "release", "version")], collapse = " "), 
[09:31:01.104]                             hostname = base::Sys.info()[["nodename"]])
[09:31:01.104]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:31:01.104]                             info)
[09:31:01.104]                           info <- base::paste(info, collapse = "; ")
[09:31:01.104]                           if (!has_future) {
[09:31:01.104]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:31:01.104]                               info)
[09:31:01.104]                           }
[09:31:01.104]                           else {
[09:31:01.104]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:31:01.104]                               info, version)
[09:31:01.104]                           }
[09:31:01.104]                           base::stop(msg)
[09:31:01.104]                         }
[09:31:01.104]                       })
[09:31:01.104]                     }
[09:31:01.104]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:31:01.104]                     base::options(mc.cores = 1L)
[09:31:01.104]                   }
[09:31:01.104]                   ...future.strategy.old <- future::plan("list")
[09:31:01.104]                   options(future.plan = NULL)
[09:31:01.104]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:31:01.104]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:31:01.104]                 }
[09:31:01.104]                 ...future.workdir <- getwd()
[09:31:01.104]             }
[09:31:01.104]             ...future.oldOptions <- base::as.list(base::.Options)
[09:31:01.104]             ...future.oldEnvVars <- base::Sys.getenv()
[09:31:01.104]         }
[09:31:01.104]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:31:01.104]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:31:01.104]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:31:01.104]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:31:01.104]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:31:01.104]             future.stdout.windows.reencode = NULL, width = 80L)
[09:31:01.104]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:31:01.104]             base::names(...future.oldOptions))
[09:31:01.104]     }
[09:31:01.104]     if (FALSE) {
[09:31:01.104]     }
[09:31:01.104]     else {
[09:31:01.104]         if (TRUE) {
[09:31:01.104]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:31:01.104]                 open = "w")
[09:31:01.104]         }
[09:31:01.104]         else {
[09:31:01.104]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:31:01.104]                 windows = "NUL", "/dev/null"), open = "w")
[09:31:01.104]         }
[09:31:01.104]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:31:01.104]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:31:01.104]             base::sink(type = "output", split = FALSE)
[09:31:01.104]             base::close(...future.stdout)
[09:31:01.104]         }, add = TRUE)
[09:31:01.104]     }
[09:31:01.104]     ...future.frame <- base::sys.nframe()
[09:31:01.104]     ...future.conditions <- base::list()
[09:31:01.104]     ...future.rng <- base::globalenv()$.Random.seed
[09:31:01.104]     if (FALSE) {
[09:31:01.104]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:31:01.104]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:31:01.104]     }
[09:31:01.104]     ...future.result <- base::tryCatch({
[09:31:01.104]         base::withCallingHandlers({
[09:31:01.104]             ...future.value <- base::withVisible(base::local({
[09:31:01.104]                 ...future.makeSendCondition <- base::local({
[09:31:01.104]                   sendCondition <- NULL
[09:31:01.104]                   function(frame = 1L) {
[09:31:01.104]                     if (is.function(sendCondition)) 
[09:31:01.104]                       return(sendCondition)
[09:31:01.104]                     ns <- getNamespace("parallel")
[09:31:01.104]                     if (exists("sendData", mode = "function", 
[09:31:01.104]                       envir = ns)) {
[09:31:01.104]                       parallel_sendData <- get("sendData", mode = "function", 
[09:31:01.104]                         envir = ns)
[09:31:01.104]                       envir <- sys.frame(frame)
[09:31:01.104]                       master <- NULL
[09:31:01.104]                       while (!identical(envir, .GlobalEnv) && 
[09:31:01.104]                         !identical(envir, emptyenv())) {
[09:31:01.104]                         if (exists("master", mode = "list", envir = envir, 
[09:31:01.104]                           inherits = FALSE)) {
[09:31:01.104]                           master <- get("master", mode = "list", 
[09:31:01.104]                             envir = envir, inherits = FALSE)
[09:31:01.104]                           if (inherits(master, c("SOCKnode", 
[09:31:01.104]                             "SOCK0node"))) {
[09:31:01.104]                             sendCondition <<- function(cond) {
[09:31:01.104]                               data <- list(type = "VALUE", value = cond, 
[09:31:01.104]                                 success = TRUE)
[09:31:01.104]                               parallel_sendData(master, data)
[09:31:01.104]                             }
[09:31:01.104]                             return(sendCondition)
[09:31:01.104]                           }
[09:31:01.104]                         }
[09:31:01.104]                         frame <- frame + 1L
[09:31:01.104]                         envir <- sys.frame(frame)
[09:31:01.104]                       }
[09:31:01.104]                     }
[09:31:01.104]                     sendCondition <<- function(cond) NULL
[09:31:01.104]                   }
[09:31:01.104]                 })
[09:31:01.104]                 withCallingHandlers({
[09:31:01.104]                   {
[09:31:01.104]                     42
[09:31:01.104]                   }
[09:31:01.104]                 }, immediateCondition = function(cond) {
[09:31:01.104]                   sendCondition <- ...future.makeSendCondition()
[09:31:01.104]                   sendCondition(cond)
[09:31:01.104]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.104]                   {
[09:31:01.104]                     inherits <- base::inherits
[09:31:01.104]                     invokeRestart <- base::invokeRestart
[09:31:01.104]                     is.null <- base::is.null
[09:31:01.104]                     muffled <- FALSE
[09:31:01.104]                     if (inherits(cond, "message")) {
[09:31:01.104]                       muffled <- grepl(pattern, "muffleMessage")
[09:31:01.104]                       if (muffled) 
[09:31:01.104]                         invokeRestart("muffleMessage")
[09:31:01.104]                     }
[09:31:01.104]                     else if (inherits(cond, "warning")) {
[09:31:01.104]                       muffled <- grepl(pattern, "muffleWarning")
[09:31:01.104]                       if (muffled) 
[09:31:01.104]                         invokeRestart("muffleWarning")
[09:31:01.104]                     }
[09:31:01.104]                     else if (inherits(cond, "condition")) {
[09:31:01.104]                       if (!is.null(pattern)) {
[09:31:01.104]                         computeRestarts <- base::computeRestarts
[09:31:01.104]                         grepl <- base::grepl
[09:31:01.104]                         restarts <- computeRestarts(cond)
[09:31:01.104]                         for (restart in restarts) {
[09:31:01.104]                           name <- restart$name
[09:31:01.104]                           if (is.null(name)) 
[09:31:01.104]                             next
[09:31:01.104]                           if (!grepl(pattern, name)) 
[09:31:01.104]                             next
[09:31:01.104]                           invokeRestart(restart)
[09:31:01.104]                           muffled <- TRUE
[09:31:01.104]                           break
[09:31:01.104]                         }
[09:31:01.104]                       }
[09:31:01.104]                     }
[09:31:01.104]                     invisible(muffled)
[09:31:01.104]                   }
[09:31:01.104]                   muffleCondition(cond)
[09:31:01.104]                 })
[09:31:01.104]             }))
[09:31:01.104]             future::FutureResult(value = ...future.value$value, 
[09:31:01.104]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:01.104]                   ...future.rng), globalenv = if (FALSE) 
[09:31:01.104]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:31:01.104]                     ...future.globalenv.names))
[09:31:01.104]                 else NULL, started = ...future.startTime, version = "1.8")
[09:31:01.104]         }, condition = base::local({
[09:31:01.104]             c <- base::c
[09:31:01.104]             inherits <- base::inherits
[09:31:01.104]             invokeRestart <- base::invokeRestart
[09:31:01.104]             length <- base::length
[09:31:01.104]             list <- base::list
[09:31:01.104]             seq.int <- base::seq.int
[09:31:01.104]             signalCondition <- base::signalCondition
[09:31:01.104]             sys.calls <- base::sys.calls
[09:31:01.104]             `[[` <- base::`[[`
[09:31:01.104]             `+` <- base::`+`
[09:31:01.104]             `<<-` <- base::`<<-`
[09:31:01.104]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:31:01.104]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:31:01.104]                   3L)]
[09:31:01.104]             }
[09:31:01.104]             function(cond) {
[09:31:01.104]                 is_error <- inherits(cond, "error")
[09:31:01.104]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:31:01.104]                   NULL)
[09:31:01.104]                 if (is_error) {
[09:31:01.104]                   sessionInformation <- function() {
[09:31:01.104]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:31:01.104]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:31:01.104]                       search = base::search(), system = base::Sys.info())
[09:31:01.104]                   }
[09:31:01.104]                   ...future.conditions[[length(...future.conditions) + 
[09:31:01.104]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:31:01.104]                     cond$call), session = sessionInformation(), 
[09:31:01.104]                     timestamp = base::Sys.time(), signaled = 0L)
[09:31:01.104]                   signalCondition(cond)
[09:31:01.104]                 }
[09:31:01.104]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:31:01.104]                 "immediateCondition"))) {
[09:31:01.104]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:31:01.104]                   ...future.conditions[[length(...future.conditions) + 
[09:31:01.104]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:31:01.104]                   if (TRUE && !signal) {
[09:31:01.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.104]                     {
[09:31:01.104]                       inherits <- base::inherits
[09:31:01.104]                       invokeRestart <- base::invokeRestart
[09:31:01.104]                       is.null <- base::is.null
[09:31:01.104]                       muffled <- FALSE
[09:31:01.104]                       if (inherits(cond, "message")) {
[09:31:01.104]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:01.104]                         if (muffled) 
[09:31:01.104]                           invokeRestart("muffleMessage")
[09:31:01.104]                       }
[09:31:01.104]                       else if (inherits(cond, "warning")) {
[09:31:01.104]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:01.104]                         if (muffled) 
[09:31:01.104]                           invokeRestart("muffleWarning")
[09:31:01.104]                       }
[09:31:01.104]                       else if (inherits(cond, "condition")) {
[09:31:01.104]                         if (!is.null(pattern)) {
[09:31:01.104]                           computeRestarts <- base::computeRestarts
[09:31:01.104]                           grepl <- base::grepl
[09:31:01.104]                           restarts <- computeRestarts(cond)
[09:31:01.104]                           for (restart in restarts) {
[09:31:01.104]                             name <- restart$name
[09:31:01.104]                             if (is.null(name)) 
[09:31:01.104]                               next
[09:31:01.104]                             if (!grepl(pattern, name)) 
[09:31:01.104]                               next
[09:31:01.104]                             invokeRestart(restart)
[09:31:01.104]                             muffled <- TRUE
[09:31:01.104]                             break
[09:31:01.104]                           }
[09:31:01.104]                         }
[09:31:01.104]                       }
[09:31:01.104]                       invisible(muffled)
[09:31:01.104]                     }
[09:31:01.104]                     muffleCondition(cond, pattern = "^muffle")
[09:31:01.104]                   }
[09:31:01.104]                 }
[09:31:01.104]                 else {
[09:31:01.104]                   if (TRUE) {
[09:31:01.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:31:01.104]                     {
[09:31:01.104]                       inherits <- base::inherits
[09:31:01.104]                       invokeRestart <- base::invokeRestart
[09:31:01.104]                       is.null <- base::is.null
[09:31:01.104]                       muffled <- FALSE
[09:31:01.104]                       if (inherits(cond, "message")) {
[09:31:01.104]                         muffled <- grepl(pattern, "muffleMessage")
[09:31:01.104]                         if (muffled) 
[09:31:01.104]                           invokeRestart("muffleMessage")
[09:31:01.104]                       }
[09:31:01.104]                       else if (inherits(cond, "warning")) {
[09:31:01.104]                         muffled <- grepl(pattern, "muffleWarning")
[09:31:01.104]                         if (muffled) 
[09:31:01.104]                           invokeRestart("muffleWarning")
[09:31:01.104]                       }
[09:31:01.104]                       else if (inherits(cond, "condition")) {
[09:31:01.104]                         if (!is.null(pattern)) {
[09:31:01.104]                           computeRestarts <- base::computeRestarts
[09:31:01.104]                           grepl <- base::grepl
[09:31:01.104]                           restarts <- computeRestarts(cond)
[09:31:01.104]                           for (restart in restarts) {
[09:31:01.104]                             name <- restart$name
[09:31:01.104]                             if (is.null(name)) 
[09:31:01.104]                               next
[09:31:01.104]                             if (!grepl(pattern, name)) 
[09:31:01.104]                               next
[09:31:01.104]                             invokeRestart(restart)
[09:31:01.104]                             muffled <- TRUE
[09:31:01.104]                             break
[09:31:01.104]                           }
[09:31:01.104]                         }
[09:31:01.104]                       }
[09:31:01.104]                       invisible(muffled)
[09:31:01.104]                     }
[09:31:01.104]                     muffleCondition(cond, pattern = "^muffle")
[09:31:01.104]                   }
[09:31:01.104]                 }
[09:31:01.104]             }
[09:31:01.104]         }))
[09:31:01.104]     }, error = function(ex) {
[09:31:01.104]         base::structure(base::list(value = NULL, visible = NULL, 
[09:31:01.104]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:31:01.104]                 ...future.rng), started = ...future.startTime, 
[09:31:01.104]             finished = Sys.time(), session_uuid = NA_character_, 
[09:31:01.104]             version = "1.8"), class = "FutureResult")
[09:31:01.104]     }, finally = {
[09:31:01.104]         if (!identical(...future.workdir, getwd())) 
[09:31:01.104]             setwd(...future.workdir)
[09:31:01.104]         {
[09:31:01.104]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:31:01.104]                 ...future.oldOptions$nwarnings <- NULL
[09:31:01.104]             }
[09:31:01.104]             base::options(...future.oldOptions)
[09:31:01.104]             if (.Platform$OS.type == "windows") {
[09:31:01.104]                 old_names <- names(...future.oldEnvVars)
[09:31:01.104]                 envs <- base::Sys.getenv()
[09:31:01.104]                 names <- names(envs)
[09:31:01.104]                 common <- intersect(names, old_names)
[09:31:01.104]                 added <- setdiff(names, old_names)
[09:31:01.104]                 removed <- setdiff(old_names, names)
[09:31:01.104]                 changed <- common[...future.oldEnvVars[common] != 
[09:31:01.104]                   envs[common]]
[09:31:01.104]                 NAMES <- toupper(changed)
[09:31:01.104]                 args <- list()
[09:31:01.104]                 for (kk in seq_along(NAMES)) {
[09:31:01.104]                   name <- changed[[kk]]
[09:31:01.104]                   NAME <- NAMES[[kk]]
[09:31:01.104]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.104]                     next
[09:31:01.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:01.104]                 }
[09:31:01.104]                 NAMES <- toupper(added)
[09:31:01.104]                 for (kk in seq_along(NAMES)) {
[09:31:01.104]                   name <- added[[kk]]
[09:31:01.104]                   NAME <- NAMES[[kk]]
[09:31:01.104]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.104]                     next
[09:31:01.104]                   args[[name]] <- ""
[09:31:01.104]                 }
[09:31:01.104]                 NAMES <- toupper(removed)
[09:31:01.104]                 for (kk in seq_along(NAMES)) {
[09:31:01.104]                   name <- removed[[kk]]
[09:31:01.104]                   NAME <- NAMES[[kk]]
[09:31:01.104]                   if (name != NAME && is.element(NAME, old_names)) 
[09:31:01.104]                     next
[09:31:01.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:31:01.104]                 }
[09:31:01.104]                 if (length(args) > 0) 
[09:31:01.104]                   base::do.call(base::Sys.setenv, args = args)
[09:31:01.104]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:31:01.104]             }
[09:31:01.104]             else {
[09:31:01.104]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:31:01.104]             }
[09:31:01.104]             {
[09:31:01.104]                 if (base::length(...future.futureOptionsAdded) > 
[09:31:01.104]                   0L) {
[09:31:01.104]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:31:01.104]                   base::names(opts) <- ...future.futureOptionsAdded
[09:31:01.104]                   base::options(opts)
[09:31:01.104]                 }
[09:31:01.104]                 {
[09:31:01.104]                   {
[09:31:01.104]                     base::options(mc.cores = ...future.mc.cores.old)
[09:31:01.104]                     NULL
[09:31:01.104]                   }
[09:31:01.104]                   options(future.plan = NULL)
[09:31:01.104]                   if (is.na(NA_character_)) 
[09:31:01.104]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:31:01.104]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:31:01.104]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:31:01.104]                     .init = FALSE)
[09:31:01.104]                 }
[09:31:01.104]             }
[09:31:01.104]         }
[09:31:01.104]     })
[09:31:01.104]     if (TRUE) {
[09:31:01.104]         base::sink(type = "output", split = FALSE)
[09:31:01.104]         if (TRUE) {
[09:31:01.104]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:31:01.104]         }
[09:31:01.104]         else {
[09:31:01.104]             ...future.result["stdout"] <- base::list(NULL)
[09:31:01.104]         }
[09:31:01.104]         base::close(...future.stdout)
[09:31:01.104]         ...future.stdout <- NULL
[09:31:01.104]     }
[09:31:01.104]     ...future.result$conditions <- ...future.conditions
[09:31:01.104]     ...future.result$finished <- base::Sys.time()
[09:31:01.104]     ...future.result
[09:31:01.104] }
[09:31:01.106] MultisessionFuture started
[09:31:01.106] - Launch lazy future ... done
[09:31:01.107] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[09:31:01.108] receiveMessageFromWorker() for ClusterFuture ...
[09:31:01.108] - Validating connection of MultisessionFuture
[09:31:01.109] - received message: FutureResult
[09:31:01.109] - Received FutureResult
[09:31:01.109] - Erased future from FutureRegistry
[09:31:01.109] result() for ClusterFuture ...
[09:31:01.109] - result already collected: FutureResult
[09:31:01.109] result() for ClusterFuture ... done
[09:31:01.109] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: cb61b905-d30a-9bb6-600e-3b4d48507c92
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:31:01.109] result() for ClusterFuture ...
[09:31:01.109] - result already collected: FutureResult
[09:31:01.110] result() for ClusterFuture ... done
[09:31:01.110] result() for ClusterFuture ...
[09:31:01.110] - result already collected: FutureResult
[09:31:01.110] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[09:31:01.111] plan(): Setting new future strategy stack:
[09:31:01.111] List of future strategies:
[09:31:01.111] 1. FutureStrategy:
[09:31:01.111]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:31:01.111]    - tweaked: FALSE
[09:31:01.111]    - call: future::plan(oplan)
[09:31:01.111] plan(): nbrOfWorkers() = 1
> 
