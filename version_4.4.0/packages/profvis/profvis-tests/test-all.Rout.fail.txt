
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(profvis)
> 
> test_check("profvis")
[ FAIL 1 | WARN 1 | SKIP 2 | PASS 16 ]

══ Skipped tests (2) ═══════════════════════════════════════════════════════════
• On CRAN (2): 'test-rprof.R:8:3', 'test-rprof.R:38:3'

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-rprof.R:20:3'): `filter.callframes` filters out intervening frames ──
Error in `expect_snapshot0(cat_rprof(f(), filter.callframes = TRUE))`: Quosures can only be unquoted within a quasiquotation context.

# Bad: list(!!myquosure)

# Good: dplyr::mutate(data, !!myquosure)
Backtrace:
     ▆
  1. └─profvis:::expect_snapshot0(cat_rprof(f(), filter.callframes = TRUE)) at test-rprof.R:20:3
  2.   ├─testthat::expect_snapshot(!!quo, cran = cran) at profvis-tests/testthat/helper-profvis.R:18:3
  3.   │ ├─testthat:::with_is_snapshotting(...)
  4.   │ └─testthat:::verify_exec(quo_get_expr(x), quo_get_env(x), replay)
  5.   │   └─evaluate::evaluate(source, envir = env, new_device = FALSE, output_handler = handler)
  6.   │     └─evaluate:::evaluate_call(...)
  7.   │       ├─evaluate (local) timing_fn(...)
  8.   │       ├─evaluate (local) handle(...)
  9.   │       │ └─base::try(f, silent = TRUE)
 10.   │       │   └─base::tryCatch(...)
 11.   │       │     └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 12.   │       │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 13.   │       │         └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 14.   │       ├─base::withCallingHandlers(...)
 15.   │       ├─base::withVisible(...)
 16.   │       └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers)
 17.   │         └─base::eval(expr, envir, enclos)
 18.   │           └─base::eval(expr, envir, enclos)
 19.   └─rlang:::Ops.quosure(quo)
 20.     └─rlang::abort(...)

[ FAIL 1 | WARN 1 | SKIP 2 | PASS 16 ]
Error: Test failures
Execution halted
