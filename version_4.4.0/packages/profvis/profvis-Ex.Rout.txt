
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "profvis"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('profvis')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("pause")
> ### * pause
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pause
> ### Title: Pause an R process
> ### Aliases: pause
> 
> ### ** Examples
> 
> # Wait for 0.5 seconds
> pause(0.5)
NULL
> 
> 
> 
> 
> cleanEx()
> nameEx("profvis")
> ### * profvis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: profvis
> ### Title: Profile an R expression and visualize profiling data
> ### Aliases: profvis
> 
> ### ** Examples
> 
> # Only run these examples in interactive R sessions
> if (interactive()) {
+ 
+ # Profile some code
+ profvis({
+   dat <- data.frame(
+     x = rnorm(5e4),
+     y = rnorm(5e4)
+   )
+ 
+   plot(x ~ y, data = dat)
+   m <- lm(x ~ y, data = dat)
+   abline(m, col = "red")
+ })
+ 
+ 
+ # Save a profile to an HTML file
+ p <- profvis({
+   dat <- data.frame(
+     x = rnorm(5e4),
+     y = rnorm(5e4)
+   )
+ 
+   plot(x ~ y, data = dat)
+   m <- lm(x ~ y, data = dat)
+   abline(m, col = "red")
+ })
+ htmlwidgets::saveWidget(p, "profile.html")
+ 
+ # Can open in browser from R
+ browseURL("profile.html")
+ 
+ }
> 
> 
> 
> cleanEx()
> nameEx("profvis_ui")
> ### * profvis_ui
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: profvis_ui
> ### Title: Profvis UI for Shiny Apps
> ### Aliases: profvis_ui profvis_server
> 
> ### ** Examples
> 
> # In order to avoid "Hit <Return> to see next plot" prompts,
> # run this example with `example(profvis_ui, ask=FALSE)`
> 
> if(interactive()) {
+   library(shiny)
+   library(ggplot2)
+   shinyApp(
+     fluidPage(
+       plotOutput("plot"),
+       actionButton("new", "New plot"),
+       profvis_ui("profiler")
+     ),
+     function(input, output, session) {
+       callModule(profvis_server, "profiler")
+ 
+       output$plot <- renderPlot({
+         input$new
+         ggplot(diamonds, aes(carat, price)) + geom_point()
+       })
+     }
+   )
+ }
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.741 0.015 0.756 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
